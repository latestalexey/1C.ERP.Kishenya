#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Процедура заполняет план видов расчета т.н. псевдопредопределенными элементами, 
// идентифицируемыми из кода
//
Процедура СоздатьНачисленияПоНастройкам(ПараметрыПланаВидовРасчета = Неопределено, НачальноеЗаполнение = Ложь) Экспорт

	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	
	Если ПараметрыПланаВидовРасчета = Неопределено Тогда
		ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	КонецЕсли;
	
	// Соответствие, в которое будем накапливать объекты для последующей "пакетной" записи.
	КоллекторНачислений = Новый Соответствие;
	КоллекторУдержаний = Новый Соответствие;
	
	// Сначала обновляем показатели по настройкам...
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиПоНастройкам(НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета);
	
	// ..а затем начисления
	// прежде обеспечиваем заполненность используемых классификаторов
	Справочники.ВидыИспользованияРабочегоВремени.СоздатьВидыИспользованияРабочегоВремениПоНастройкам(НастройкиРасчетаЗарплаты);
	
	
	СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	
	Если НачальноеЗаполнение Тогда
		// Оклад по дням
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='ОКЛ';uk='ОКЛ'");
		Описание.Наименование			= НСтр("ru='Оплата по окладу';uk='Оплата по окладу'");
		Описание.КраткоеНаименование 	= НСтр("ru='Оклад';uk='Оклад'");
		Описание.ФормулаРасчета			= "Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
		Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
		Описание.УчетВремениВЧасах		= Ложь;
		Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
		Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
		Описание.КлючевыеСвойства = "СпособВыполненияНачисления,ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,УчетВремениВЧасах";
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
	КонецЕсли;
	
	// Оклад по дневному тарифу
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ТРФД';uk='ТРФД'");
	Описание.Наименование			= НСтр("ru='Оплата по дневному тарифу';uk='Оплата за денним тарифом'");
	Описание.КраткоеНаименование 	= НСтр("ru='Опл. по дням';uk='Опл. по днях'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ФормулаРасчета			= "ТарифнаяСтавкаДневная * ВремяВДнях";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ТарифнаяСтавкаДневная");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоДням;
	Описание.КлючевыеСвойства = "Ссылка";
	Если НачальноеЗаполнение И ПараметрыПланаВидовРасчета.ИспользоватьПодневнуюОплатуТруда Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОкладПоДням = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы И НЕ ПараметрыПланаВидовРасчета.ИспользоватьПодневнуюОплатуТруда Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	СоздатьНачисленияПремий(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	
	// Доплата за совмещение 
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='СОВМ';uk='СУМЩ'");
	Описание.Наименование			= НСтр("ru='Доплата за совмещение должностей, исполнение обязанностей';uk='Доплата за суміщення посад, виконання обов''язків'");
	Описание.КраткоеНаименование 	= НСтр("ru='Совмещение';uk='Суміщення'");
	Описание.ЗапрашиваемыеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РазмерДоплатыЗаСовмещение");
	Если НастройкиРасчетаЗарплаты.ИспользоватьСовмещениеПрофессийДолжностей Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата до среднего заработка (общего).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ДПСРЗ';uk='ДПСРЗ'");
	Описание.Наименование			= НСтр("ru='Доплата до среднего заработка';uk='Доплата до середнього заробітку'");
	Описание.КраткоеНаименование 	= НСтр("ru='Допл. до среднего';uk='Допл. до середнього'");
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьДоплатуДоСреднегоЗаработка Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата до среднего заработка (ФСС).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ДПФСС';uk='ДПФСС'");
	Описание.Наименование			= НСтр("ru='Доплата за дни болезни';uk='Доплата за дні хвороби'");
	Описание.КраткоеНаименование 	= НСтр("ru='Допл. за дни болезни';uk='Допл. за дні хвороби'");
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Больничный
	Если НачальноеЗаполнение Тогда
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='БЛН';uk='ЛКР'");
		Описание.Наименование			= НСтр("ru='Больничный';uk='Лікарняний'");
		Описание.КраткоеНаименование 	= НСтр("ru='Больничный';uk='Лікарняний'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
		// Оплата больничных листов за счет работодателя.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='БЛРДТ';uk='ЛКРДТ'");
		Описание.Наименование			= НСтр("ru='Больничный за счет работодателя';uk='Лікарняний за рахунок роботодавця'");
		Описание.КраткоеНаименование 	= НСтр("ru='Больн. (работодат.)';uk='Лікарн. (роботодав.)'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
		// Отпуск по беременности и родам.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='ОТБРР';uk='ОТВП'");
		Описание.Наименование			= НСтр("ru='Отпуск по беременности и родам';uk='Відпустка у зв''язку з вагітністю та пологами'");
		Описание.КраткоеНаименование 	= НСтр("ru='Отп. по берем.';uk='Відп. по вагітн.'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
		// Больничный при травме на производстве.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='БЛТП';uk='ЛКТВ'");
		Описание.Наименование			= НСтр("ru='Больничный при травме на производстве';uk='Лікарняний при травмі на виробництві'");
		Описание.КраткоеНаименование 	= НСтр("ru='Больн. при травме';uk='Лікарн. при травмі'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
		// Больничный при профзаболевании.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='БЛПЗ';uk='ЛКПЗ'");
		Описание.Наименование			= НСтр("ru='Больничный при профзаболевании';uk='Лікарняний при профзахворюванні'");
		Описание.КраткоеНаименование 	= НСтр("ru='Больн. при профзаб.';uk='Лік. при профзахв.'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
		// Отсутствие по болезни
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='ОБ';uk='ВХВ'");
		Описание.Наименование			= НСтр("ru='Отсутствие по болезни';uk='Відсутність по хворобі'");
		Описание.КраткоеНаименование 	= НСтр("ru='Неявка по болезни';uk='Неявка по хворобі'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
		// Отсутствие по болезни (по беременности и родам).
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='ОББР';uk='ВБВП'");
		Описание.Наименование			= НСтр("ru='Неоплачиваемые дни отпуска по беременности и родам';uk='Неоплачувані дні відпустки по вагітності і пологах'");
		Описание.КраткоеНаименование 	= НСтр("ru='Отп. по берем. без опл.';uk='Відп. пл вагітн. без опл.'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
		// Выходное пособие
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Наименование			= НСтр("ru='Компенсация при увольнении (выходное пособие)';uk='Компенсація при звільненні (вихідна допомога)'");
		Описание.КраткоеНаименование 	= НСтр("ru='Выходн. пособие';uk='Вихідн. допомога'");
		Описание.Код 					= НСтр("ru='КПУ';uk='КПЗ'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	КонецЕсли;
	
	// Командировка
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='КОМНД';uk='ВІДР'");
	Описание.Наименование			= НСтр("ru='Командировка';uk='Відрядження'");
	Описание.КраткоеНаименование 	= НСтр("ru='Командировка';uk='Відрядження'");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Описание.ЗапрашиваемыеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СреднийЗаработокОбщий");
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отпуск без оплаты согласно КЗОТ.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ОТПОЗ';uk='ВДПОЗ'");
	Описание.Наименование			= НСтр("ru='Отпуск без оплаты согласно КЗОТ';uk='Відпустка без оплати згідно КЗПП'");
	Описание.КраткоеНаименование 	= НСтр("ru='Отп. без опл.';uk='Відп. без опл.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчетПоСоглашению");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отпуск за свой счет
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ОТПДО';uk='ВДПБО'");
	Описание.Наименование			= НСтр("ru='Отпуск за свой счет';uk='Відпустка за свій рахунок'");
	Описание.КраткоеНаименование 	= НСтр("ru='Отп. за свой счет';uk='Відп. за свій рахунок'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;

	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Дополнительный учебный отпуск (оплачиваемый).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='УЧЕБН';uk='НАВЧ'");
	Описание.Наименование			= НСтр("ru='Дополнительный учебный отпуск (оплачиваемый)';uk='Додаткова навчальна відпустка (оплачувана)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Учебн. отп.';uk='Навч. відп.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Дополнительный учебный отпуск без оплаты.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ОТПУД';uk='ВДПНД'");
	Описание.Наименование			= НСтр("ru='Дополнительный учебный отпуск без оплаты';uk='Додаткова навчальна відпустка без оплати'");
	Описание.КраткоеНаименование 	= НСтр("ru='Учебн. отп. без опл.';uk='Навч. відп. без опл.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Дополнительный отпуск пострадавшим в аварии на ЧАЭС.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ДОЧАЭС';uk='ДОЧАЕС'");
	Описание.Наименование			= НСтр("ru='Дополнительный отпуск пострадавшим в аварии на ЧАЭС';uk='Додаткова відпустка постраждалим в аварії на ЧАЕС'");
	Описание.КраткоеНаименование 	= НСтр("ru='Доп. отп. ЧАЭС';uk='Дод. відп. ЧАЕС'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск");
	Описание.ВидОтпуска 			= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отсутствие по невыясненной причине.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='НЕВЫХ';uk='НЕВИХ'");
	Описание.Наименование			= НСтр("ru='Отсутствие по невыясненной причине';uk='Відсутність з нез''ясованої причини'");
	Описание.КраткоеНаименование 	= НСтр("ru='Неявка';uk='Неявка'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Прогул
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРГУЛ';uk='ПРГУЛ'");
	Описание.Наименование			= НСтр("ru='Прогул';uk='Прогул'");
	Описание.КраткоеНаименование 	= НСтр("ru='Прогул';uk='Прогул'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы");
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отгул
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ОТГУЛ';uk='ВІДГЛ'");
	Описание.Наименование			= НСтр("ru='Отгул';uk='Відгул'");
	Описание.КраткоеНаименование 	= НСтр("ru='Отгул';uk='Відгул'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДругиеНеявкиПоКолДоговору");
	Описание.КлючевыеСвойства		= "ВидВремени,КатегорияНачисленияИлиНеоплаченногоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	СоздатьНачисленияПростоев(ПараметрыПланаВидовРасчета, КоллекторНачислений, НастройкиРасчетаЗарплаты, СвойстваНачислений);
	
	// Материальная помощь
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='МАТПМ';uk='МАТДП'");
	Описание.Наименование			= НСтр("ru='Материальная помощь (не целевая)';uk='Матеріальна допомога (не цільова)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Мат. пом.';uk='Мат. доп.'");
	Описание.ФормулаРасчета = "";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Материальная помощь при рождении ребенка.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='МТПМР';uk='МТДПР'");
	Описание.Наименование			= НСтр("ru='Материальная помощь (целевая)';uk='Матеріальна допомога (цільова)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Мат. пом. (цел.)';uk='Мат. доп. (ціл.)'");
	Описание.ФормулаРасчета = "";
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код169Ц;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Материальная помощь, не облагаемая налогами.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='МТПМН';uk='МТДПН'");
	Описание.Наименование			= НСтр("ru='Материальная помощь, не облагаемая налогами';uk='Матеріальна допомога, що не оподатковується'");
	Описание.КраткоеНаименование 	= НСтр("ru='Мат. пом. не обл. нал.';uk='Мат. доп. не оподат.'");
	Описание.ФормулаРасчета = "";
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.ПустаяСсылка();
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Материальная помощь к отпуску.
	КоличествоОкладовДляМатериальнойПомощи = СтрЗаменить(Строка(ПараметрыПланаВидовРасчета.КоличествоОкладовДляМатериальнойПомощи),",",".");
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='МТПОМ';uk='МТДОП'");
	Описание.Наименование			= НСтр("ru='Материальная помощь к отпуску';uk='Матеріальна допомога до відпустки'");
	Описание.КраткоеНаименование 	= НСтр("ru='Мат. пом. к отп.';uk='Мат. доп. до отп.'");
	Описание.ФормулаРасчета = "Оклад * " + КоличествоОкладовДляМатериальнойПомощи;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Если НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оплата «донорских» дней
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ДОНОР';uk='ДОНОР'");
	Описание.Наименование			= НСтр("ru='Оплата за дни сдачи крови и ее компонентов';uk='Оплата за дні здачі крові та її компонентів'");
	Описание.КраткоеНаименование 	= НСтр("ru='Донорство';uk='Донорство'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ГосударственныеОбязанности");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаДнейСдачиКрови;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьОплатуДнейСдачиКрови Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаДнейСдачиКрови = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Единовременное начисление
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЕДВР';uk='ОДНР'");
	Описание.Наименование			= НСтр("ru='Единовременное начисление';uk='Одноразове нарахування'");
	Описание.КраткоеНаименование 	= НСтр("ru='Единовр. начисл.';uk='Однораз. нарах.'");
	Описание.ФормулаРасчета 		= "";
	Описание.Рассчитывается 		= Ложь;
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.РазовоеНачисление;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазовоеНачисление;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьРазовоеНачисление Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазовоеНачисление = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Если НачальноеЗаполнение Тогда
		// Безусловно создаем отпуск по уходу за ребенком до 6 лет.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='РЕБ6';uk='ДИТ6'");
		Описание.Наименование			= НСтр("ru='Отпуск по уходу за ребенком до шести лет';uk='Відпустка по догляду за дитиною до шести років'");
		Описание.КраткоеНаименование 	= НСтр("ru='Уход за реб. до 6';uk='Догляд за дит. до 6'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);

		// Безусловно создаем отпуск по уходу за ребенком до 3 лет.
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='РЕБ3';uk='ДИТ3'");
		Описание.Наименование			= НСтр("ru='Отпуск по уходу за ребенком до трех лет';uk='Відпустка по догляду за дитиною до трьох років'");
		Описание.КраткоеНаименование 	= НСтр("ru='Уход за реб. до 3';uk='Догляд за дит. до 3'");
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	КонецЕсли;
	
	Если НачальноеЗаполнение Тогда
		// Безусловно создаем уже учтенные дни.
		СоздатьНачислениеДниОплаченныеДоНачалаЭксплуатации(ПараметрыПланаВидовРасчета, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	КонецЕсли;
		
	// Сдельный заработок (c минимальной оплатой по окладу).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='СДЛОК';uk='ВДРОК'");
	Описание.Наименование			= НСтр("ru='Сдельный заработок (для работающих по окладу)';uk='Відрядний заробіток (для працюючих за окладом)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Сдельно';uk='Відрядно'");
	Описание.ФормулаРасчета 		= "Макс(СдельныйЗаработок, Оклад * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней)";
	Описание.ЗапрашиваемыеПоказатели= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.УчетВремениВЧасах 		= Ложь;
	Описание.КлючевыеСвойства  		= "УчетВремениВЧасах";
	Если НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	СоздатьНачислениеНадбавкаЗаКвалификационнуюКатегорию(ПараметрыПланаВидовРасчета, КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты);
	
	
	// Начисления, которые нужны только, если ведется учет времени в часах.
	СоздатьНачисленияДляУчетаВремениСотрудниковВЧасах(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета);
	
	СоздатьНачисленияЕжегодногоОтпуска(ПараметрыПланаВидовРасчета, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений);
	
	СоздатьНачисленияНадбавки(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	
	СоздатьНачислениеНадбавкаЗаВредность(ПараметрыПланаВидовРасчета, КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты);
	
	СоздатьНачисленияКомпенсационныеВыплаты(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	
	СоздатьНачисленияНатуральныеДоходы(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета, НастройкиРасчетаЗарплаты);
	
	
	СоздатьНачислениеДоплатаЗаПереработкиПоСуммированномуУчету(ПараметрыПланаВидовРасчета, КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты);	
	
	// Индексация
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индексация;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ИНД';uk='ІНД'");
	Описание.Наименование			= НСтр("ru='Индексация зарплаты';uk='Індексація зарплати'");
	Описание.КраткоеНаименование 	= НСтр("ru='Индексация';uk='Індексація'");
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КлючевыеСвойства = "КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы, НЕ НачальноеЗаполнение);
	
	// Доплата до МЗП
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоМЗП;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ДМЗП';uk='ДМЗП'");
	Описание.Наименование			= НСтр("ru='Доплата до МЗП';uk='Доплата до МЗП'");
	Описание.КраткоеНаименование 	= НСтр("ru='Доплата до МЗП';uk='Доплата до МЗП'");
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КлючевыеСвойства = "КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы, НЕ НачальноеЗаполнение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.СоздатьНачисленияДенежногоСодержания(НастройкиРасчетаЗарплаты, КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.СоздатьНачисленияДенежногоДовольствия(НастройкиРасчетаЗарплаты, КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.СоздатьНачислениеДоплатаПоРезультатамОценкиЭффективности(ПараметрыПланаВидовРасчета, СвойстваНачислений, КоллекторНачислений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.СоздатьНачисленияОбразовательныхУчреждений(ПараметрыПланаВидовРасчета, СвойстваНачислений, КоллекторНачислений);
	КонецЕсли;
	
	// Создаем удержания
	ПланыВидовРасчета.Удержания.СоздатьУдержанияПоНастройкам(НастройкиРасчетаЗарплаты, КоллекторУдержаний, ПараметрыПланаВидовРасчета);
	
	ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	
	// Создаем виды документов ввода данных для расчета зарплаты.
	Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты.СоздатьВидыДокументовПоНастройкам(НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета);
	
КонецПроцедуры

// Создает или отключает в зависимости от настроек начисления простоев
// 
Процедура СоздатьНачисленияПростоев(ПараметрыПланаВидовРасчета, КоллекторНачислений = Неопределено, НастройкиРасчетаЗарплаты = Неопределено, СвойстваНачислений = Неопределено)
	
	Если КоллекторНачислений = Неопределено Тогда
		КоллекторНачислений = Новый Соответствие;
	КонецЕсли; 
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли; 
	
	Если  СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли; 
	
	// Простой по вине работника
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРОВР';uk='ПРОВР'");
	Описание.Наименование			= НСтр("ru='Простой по вине работника';uk='Простій з вини працівника'");
	Описание.КраткоеНаименование 	= НСтр("ru='Простой без опл.';uk='Простій без опл.'");
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Простой");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по независящим от работодателя причинам.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРОКД';uk='ПРОКД'");
	Описание.Наименование			= НСтр("ru='Оплата простоя по независящим от работодателя причинам';uk='Оплата простою з незалежних від роботодавця причин'");
	Описание.КраткоеНаименование 	= НСтр("ru='Простой незав. прич.';uk='Простій незал. обстав.'");
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по вине работодателя.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРСРД';uk='ПРСРД'");
	Описание.Наименование			= НСтр("ru='Оплата простоя по вине работодателя';uk='Оплата простою з вини роботодавця'");
	Описание.КраткоеНаименование 	= НСтр("ru='Простой по вине работод.';uk='Простій з вини работод.'");
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;	
	
КонецПроцедуры

// Процедура создает в плане видов расчета элементы для отпуска и компенсации, 
// используемые в документе "Отпуск" и "Увольнение".
//
Процедура СоздатьНачисленияОтпускаИКомпенсации(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, СоздаватьНачислениеОтпуска = Истина, СоздаватьНачислениеКомпенсацииОтпуска = Ложь, КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено, ДенежноеСодержание = Ложь, КраткоеНаименование = "") Экспорт
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗаписыватьНачисления = Ложь;
	
	Если КоллекторНачислений = Неопределено Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	ДополнениеКода = ДополнениеКодаНачисленияОтпускаПоВидуОтпуска(ВидОтпуска);
	
	Если СоздаватьНачислениеОтпуска Тогда
		СоздатьНачислениеОтпуска(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, ДенежноеСодержание, КраткоеНаименование, ДополнениеКода);		
	КонецЕсли;
	
	Если СоздаватьНачислениеКомпенсацииОтпуска Тогда
		СоздатьНачислениеКомпенсацииОтпуска(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, ДенежноеСодержание, ДополнениеКода);
	КонецЕсли;
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеОтпуска(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено, ДенежноеСодержание = Ложь, КраткоеНаименование = "" , ДополнениеКода = Неопределено) Экспорт
	
	ЗаписыватьНачисления = Ложь;
	
	Если КоллекторНачислений = Неопределено Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Если ДополнениеКода = Неопределено Тогда
		ДополнениеКода = ДополнениеКодаНачисленияОтпускаПоВидуОтпуска(ВидОтпуска);
	КонецЕсли;
	ЭтоОтпускБезОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ОтпускБезОплаты");
	
	// Отпуск
	Описание = ОписаниеНачисления();
	Если ЭтоОтпускБезОплаты Тогда
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Иначе
		Если ДенежноеСодержание Тогда
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска;
		Иначе
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
		КонецЕсли;
		Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= Справочники.ВидыИспользованияРабочегоВремени.ВидВремениПоВидуОтпуска(ВидОтпуска);
	КонецЕсли;
	Описание.СвойстваПоКатегории = СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Наименование = НаименованиеОтпуска;
	Описание.КраткоеНаименование = КраткоеНаименование;
	Описание.Код = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ОТ%1';uk='ВІД%1'"), ДополнениеКода);
	Описание.ВидОтпуска = ВидОтпуска;
	Описание.КлючевыеСвойства = "ВидОтпуска,КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеКомпенсацииОтпуска(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено, ДенежноеСодержание = Ложь, ДополнениеКода = Неопределено) Экспорт
	
	ЗаписыватьНачисления = Ложь;
	
	Если КоллекторНачислений = Неопределено Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Если ДополнениеКода = Неопределено Тогда
		ДополнениеКода = ДополнениеКодаНачисленияОтпускаПоВидуОтпуска(ВидОтпуска);
	КонецЕсли;
	
	ДополнениеКодаКомпенсацииУдержания = ДополнениеКодаНачисленияКомпенсацииОтпускаПоВидуОтпуска(ДополнениеКода, ВидОтпуска);
	
	// Компенсация отпуска
	Описание = ОписаниеНачисления();
	Если ДенежноеСодержание Тогда
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска;
	Иначе
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска;
	КонецЕсли;
	Описание.СвойстваПоКатегории = СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Компенсация отпуска (%1)';uk='Компенсація відпустки (%1)'"), НаименованиеОтпуска); 
	Описание.Код = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='КОТ%1';uk='КВД%1'"), ДополнениеКодаКомпенсацииУдержания);
	Описание.ВидОтпуска = ВидОтпуска;
	Описание.КлючевыеСвойства = "ВидОтпуска,КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	
	// И удержание за неотработанные дни отпуска.
	ПланыВидовРасчета.Удержания.СоздатьУдержаниеЗаНеотработанныеДниОтпуска(ВидОтпуска, НаименованиеОтпуска, ДополнениеКодаКомпенсацииУдержания, КоллекторУдержаний, ДенежноеСодержание);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;

КонецПроцедуры

Функция ДополнениеКодаНачисленияОтпускаПоВидуОтпуска(ВидОтпуска)
	
	ДополнениеКода = "";
	
	Если ВидОтпуска <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
		Если ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ДополнительныйЕжегодныйОтпуск") Тогда
			ДополнениеКода = "ДОП";
		ИначеЕсли ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ДополнительныйНаДетей") Тогда
			ДополнениеКода = "ДЕТ";	
		ИначеЕсли ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ДополнительныйПрочий") Тогда
			ДополнениеКода = "ПРОЧ";		
		Иначе
			ДополнениеКода = Формат(Справочники.ВидыОтпусков.КоличествоВидовОтпуска(), "ЧЦ=3; ЧВН=");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДополнениеКода;
	
КонецФункции 

Функция ДополнениеКодаНачисленияКомпенсацииОтпускаПоВидуОтпуска(ДополнениеКода, ВидОтпуска)
	
	ДополнениеКодаКомпенсацииУдержания = "";
	
	ДополнениеКодаКомпенсацииУдержания = Прав(ДополнениеКода, 2);
	
	Возврат ДополнениеКодаКомпенсацииУдержания;
	
КонецФункции 

Процедура СоздатьНачислениеОплатаДнейУходаЗаДетьмиИнвалидами(ПараметрыПланаВидовРасчета, КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ИНВ';uk='ІНВ'");
	Описание.Наименование			= НСтр("ru='Оплата дней ухода за детьми-инвалидами';uk='Оплата днів догляду за дітьми-інвалідами'");
	Описание.КраткоеНаименование 	= НСтр("ru='Уход за детьми-инв.';uk='Догляд за дітьми-інв.'");
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
	КонецЕсли;
	
КонецПроцедуры

// Создает и заполняет соответствие, ключом которого является категория начисления, 
// а значением — структура значений, определяющая заполнение свойств начисления данной категории.
//
// Параметры:
//	- КатегорияНачисления - ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени
//
// Возвращаемое значение - соответствие.
//
Функция СвойстваНачисленийПоКатегориям() Экспорт
	СвойстваПоКатегориям = Новый Соответствие;
	
	// Значение по умолчанию
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка(), СвойстваНачисленияПоКатегорииПоУмолчанию());
	
	// Для некоторых категорий доступен выбор кода 4800 или 2760.
	ДоступныеКоды = Новый Массив;
	//ДоступныеКоды.Добавить("2000");
	//ДоступныеКоды.Добавить("4800");
	ПараметрыВыбораНДФЛ = Новый Структура("Отбор_Код", ДоступныеКоды);
	
	// Повременная оплата труда
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ИндексируетсяСреднийЗаработокОбщий");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.РазовоеНачисление);
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.Отпуск);
	Описание.ПараметрыВыбора.ВидДокументаНачисления = Новый Структура("Отбор_Ссылка", ВидыДокументов);
	Описание.ОтборБазовых = ОтборБазовыхПоУмолчанию();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_Отработано;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ТарифнаяСтавкаОклад;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда, Описание);
	
	// Индексация
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Индексация;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	//Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияНачисления");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборБазовых = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорииБазаИндексация());
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ИндексацияЗарплаты;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индексация, Описание);
	
	// Доплата до МЗП
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	//Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияНачисления");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборБазовых = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорииБазаДоплатыДоМЗП());
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеНадбавкиИДоплаты;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоМЗП, Описание);
	
	
	// Сдельная оплата
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СдельныйЗаработок";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_Отработано;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ТарифнаяСтавкаОклад;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда, Описание);

	// Оплата труда в натуральной форме.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ЯвляетсяДоходомВНатуральнойФорме = Истина;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код101;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ПараметрыВыбораВидаДокумента = Новый Структура("КатегорияНачисления", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ВидДокументаНачисления = ПараметрыВыбораВидаДокумента;
	Описание.ОтборБазовых = ОтборБазовыхПоУмолчанию();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_Отработано;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.СтоимостьПродукцииПриНатуральнойОплатеТруда;	
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме, Описание);
	
	// Доход в натуральной форме
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ДоходВНатуральнойФорме;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;
	
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ЯвляетсяДоходомВНатуральнойФорме = Истина;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код126;
	Описание.Рассчитывается = Ложь;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_НеФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеВидыНачисленийНеФОТ;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме, Описание);
	
	// Компенсационные выплаты
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.РазовоеНачисление;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;
	
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();

	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ_Компенсация;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ВознагражденияРазовогоХарактера;

	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты, Описание);
	
	// Премия
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.СреднийЗаработокОбщий = Новый Структура("ТолькоПремия", Истина);
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборБазовых = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорииБазаПремии());
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_Премии;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.Премия;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия, Описание);
	
	
	// Надбавка за вредность
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "ПроцентНадбавкиЗаВредность / 100 * РасчетнаяБаза";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияРКиСН();
	Описание.ОтборБазовых = ОтборБазаРКиСН();
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_НадбавкиКОкладам;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.РаботаВТяжелыхВредныхУсловиях;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность, Описание);
	
	// Оплата отпуска
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * КоличествоДнейОтпуска * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОсновнойОтпуск");
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.ВидОтпуска = Новый Структура("Отбор_ОтпускБезОплаты, Дополнительно_СоздаватьНачисления, Отбор_ИсключатьОтпускНаСанаторноКурортноеЛечение", Ложь, Ложь, Истина);
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ФормулаРасчета");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидОтпуска");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОтпуска();
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноЕжегодныеОтпуска;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_Отпуск;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.Отпускные;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска, Описание);
	
		
	// Компенсация отпуска
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * КоличествоДнейКомпенсации";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;
	
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.ВидОтпуска = Новый Структура("Отбор_ОтпускЯвляетсяЕжегодным, Дополнительно_СоздаватьНачисления, Отбор_ИсключатьОтпускНаСанаторноКурортноеЛечение", Истина, Ложь, Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидОтпуска");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ФормулаРасчета");
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_Отпуск;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ОплатаДнейОтдыха;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска, Описание);
	
	
	// Материальная помощь
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.МатериальнаяПомощь;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;
	
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.МатериальнаяПомощь;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код169;
	Описание.Рассчитывается = Ложь;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СпособВыполненияНачисления");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_НеФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.МатпомощьРазовогоХарактера;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь, Описание);
	
	// Материальная помощь к отпуску.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;
	
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код101;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске, Описание);
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ_Компенсация;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.СистематическаяМатпомощь;
	
	
	// Единовременная выплата к отпуску.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отпуск;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;
	
	Описание.ВключатьВСреднийЗаработокФСС   = Ложь;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код127;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВключатьВСреднийЗаработокОбщий");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "СреднийЗаработокОбщий");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_НеФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.МатпомощьРазовогоХарактера;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску, Описание);
	
	
	// Отпуск без оплаты
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
 	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчетПоСоглашению");
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.ВидОтпуска = Новый Структура("Отбор_ОтпускБезОплаты, Дополнительно_СоздаватьНачисления, Отбор_ИсключатьОтпускНаСанаторноКурортноеЛечение", Истина, Ложь, Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "ВидОтпуска");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОтпуска();
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;

	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСРазрешенияАдминистрации;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты, Описание);
	
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Отгул;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДругиеНеявкиПоКолДоговору");
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОтпуска();
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСРазрешенияАдминистрации;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул, Описание);
	
	// Неявка
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПрогулНеявка;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам");
	Описание.КодДоходаНДФЛ = Неопределено;
	// Среди вытесняющих категорий неявки есть еще и прогул.
	КатегорииВытесняющих = КатегорииВременнойНетрудоспособности();
	КатегорииВытесняющих.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесняющих;
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСРазрешенияАдминистрации;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам, Описание);
	
	// Прогул
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПрогулНеявка;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы");
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноДругиеПричины;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	 
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул, Описание);
	
	// Простой по вине работника
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПростойСотрудников;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Простой");
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноДругиеПричины;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника, Описание);
		
	// Простой по вине работодателя.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПростойСотрудников;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета	= "СтоимостьДняЧаса * (2/3) * ВремяВДняхЧасах * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Простой");
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноПростои;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеНачисленияЗаНеотработанноеВремя;

	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя, Описание);
	
	// Простой по независящим от работодателя причинам.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПростойСотрудников;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета	= "СреднийЗаработокОбщий * ВремяВДняхЧасах * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Простой");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноПростои;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеНачисленияЗаНеотработанноеВремя;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам, Описание);
	
	// Командировка
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Командировка;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * ВремяВДняхЧасах * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка");
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ПоддерживаетНесколькоПлановыхНачислений = Истина;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.НедоступныеСвойства.Добавить("ПоддерживаетНесколькоПлановыхНачислений");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.КодДоходаНДФЛ = ПараметрыВыбораНДФЛ;
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияКомандировки();
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_Отработано;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ОплатаТрудаВКомандировке;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки, Описание);
	
	
	// Оплата по среднему заработку.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * ВремяВДняхЧасах * (ПроцентОплатыПоСреднему / 100) * КоэффициентИндексацииСреднегоЗаработка";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноДругиеПричины;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеНачисленияЗаНеотработанноеВремя;	
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку, Описание);
	
	
	// Доплата до среднего заработка.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка, Описание);
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеНадбавкиИДоплаты;
	
	// Доплата за совмещение 
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.ВключатьВФОТ = Истина;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета	= "РазмерДоплатыЗаСовмещение * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ПоддерживаетНесколькоПлановыхНачислений = Истина;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ПоддерживаетНесколькоПлановыхНачислений");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.СовмещениеПрофессий;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение, Описание);
		
	// Оплата больничного (за счет ФСС).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.Нетрудоспособность;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код101ФСС;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	//ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_Соцстрах;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ПомощьИДругиеВыплатыЗаСчетФСС;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.Больничные;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста, Описание);
	
	
	// Оплата больничного за счет работодателя.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидПособияСоциальногоСтрахования = Неопределено;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюРаботодатель;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_БольничныеПредприятие;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.БольничныеЗаСчетПредприятия;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.Больничные;	
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя, Описание);
	
	// Отпуск по беременности и родам.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.БеременностьРоды;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код128;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_Соцстрах;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ПомощьИДругиеВыплатыЗаСчетФСС;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.Декретные;	
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам, Описание);
	
	// Оплата больничного (профзаболевание).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код101ФСС;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_Соцстрах;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ПомощьИДругиеВыплатыЗаСчетФСС;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.Больничные;	
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание, Описание);
	
	// Оплата больничного (несчастный случай).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код101ФСС;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_Соцстрах;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ПомощьИДругиеВыплатыЗаСчетФСС;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.Больничные;	
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве, Описание);
	

	
	// Доплата за дни болезни (Доплата до среднего ФСС).
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_НеФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеВидыНачисленийНеФОТ;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни, Описание);
	
	// Болезнь без оплаты
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.БолезньБезОплаты");
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты, Описание);
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;	
	
	// Отпуск по беременности и родам без оплаты.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(Описание.НедоступныеСвойства);
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты, Описание);
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноВременнаяНетрудоспособность;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;	
	
	// Пособие до полутора лет 
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноДругиеПричины;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;	

	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет, Описание);
	
	// Пособие до трех лет
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет, Описание);
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноДругиеПричины;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;	
	
	// Выходное пособие
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Увольнение;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "СреднийЗаработокОбщий * ДнейЧасовВыходногоПособия";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код127;
	Описание.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_НеФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеВидыНачисленийНеФОТ;
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие, Описание);
	
	
	// Прочие начисления и выплаты.
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.РазовоеНачисление;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Истина;
	Описание.СреднийЗаработокОбщий = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Истина;
	Описание.СреднийЗаработокОбщийОтпускные = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	
	Описание.ВключатьВСреднийЗаработокФСС = Истина;
	Описание.НедоступныеСвойства.Очистить();
	Описание.НедоступныеСвойства.Добавить("ВидОтпуска");
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	ВидыДокументов = Новый Массив;
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.РазовоеНачисление);
	ВидыДокументов.Добавить(Перечисления.ВидыДокументовНачисления.Премия);
	Описание.ПараметрыВыбора.ВидДокументаНачисления = Новый Структура("Отбор_Ссылка", ВидыДокументов);
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_ФОТ;
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ДругиеВидыНачисленийДопФОТ;
	
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее, Описание);
	
	// Льгота
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;
	
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Описание.НедоступныеСвойства, "КодДоходаНДФЛ");
	ПараметрыВыбораВидаДокумента = Новый Структура("КатегорияНачисления", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Описание.ПараметрыВыбора = ПараметрыВыбораСвойствНачисления();
	Описание.ПараметрыВыбора.ВидДокументаНачисления = ПараметрыВыбораВидаДокумента;
	Описание.ОтборБазовых = ОтборБазовыхПоУмолчанию();
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВытесненияОплатыТруда();
	Описание.ОтборВедущих = ОтборВедущихПоУмолчанию();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота, Описание);
	
	
	// Оплата предыдущими документами
	Описание = СвойстваНачисленияПоКатегорииПоУмолчанию();
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
	Описание.ФормулаРасчета = "0";
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПустаяСсылка();
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.КодДоходаНДФЛ = Неопределено;
	Описание.НедоступныеСвойства.Добавить("ВидВремени");
	Описание.НедоступныеСвойства.Добавить("ОбозначениеВТабелеУчетаРабочегоВремени");
	Описание.НедоступныеСвойства.Добавить("Зависимости");
	Описание.ОтборВытесняющих = ОтборВытесняющихПоУмолчанию();
	Описание.ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииВременнойНетрудоспособности();
	СвойстваПоКатегориям.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами, Описание);
	
	Возврат СвойстваПоКатегориям;
		
КонецФункции

// Для оптимизации обработки свойств категорий, некоторые категории групируются по свойствам.
//
Функция КатегорииПоСвойствамНачислений(СвойстваПоКатегориям = Неопределено) Экспорт
	
	Если СвойстваПоКатегориям = Неопределено Тогда
		СвойстваПоКатегориям = ПланыВидовРасчета.Начисления.СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	КатегорииПоСвойствам = Новый Структура(
		"ОтработанноеВремя,
		|НеоплачиваемоеВремя,
		|КодДоходаНДФЛНеЗаполняется");
	
	МассивОтработанноеВремя = Новый Массив;
	МассивНеоплачиваемоеВремя = Новый Массив;
	МассивКодДоходаНДФЛНеЗаполняется = Новый Массив;
	
	ВидыОтработанногоВремени = Перечисления.ВидыРабочегоВремениСотрудников.ВидыОтработанногоВремени();	
	
	Для Каждого КлючИЗначение Из СвойстваПоКатегориям Цикл
		Категория = КлючИЗначение.Ключ;
		СвойстваНачислений = КлючИЗначение.Значение;
		Если ВидыОтработанногоВремени.Найти(СвойстваНачислений.ВидВремени) <> Неопределено Тогда
			МассивОтработанноеВремя.Добавить(Категория);
		КонецЕсли;
		Если СвойстваНачислений.ФормулаРасчета = "0" Тогда
			МассивНеоплачиваемоеВремя.Добавить(Категория);
		КонецЕсли;
		// НДФЛ можно не заполнять, если:
		// - он изначально определен как пустой.
		Если СвойстваНачислений.КодДоходаНДФЛ = Неопределено Тогда
			МассивКодДоходаНДФЛНеЗаполняется.Добавить(Категория);
		Иначе
			// - Или он определен как заполненный, но выбор доступен.
			Если СвойстваНачислений.НедоступныеСвойства.Найти("КодДоходаНДФЛ") = Неопределено Тогда
				МассивКодДоходаНДФЛНеЗаполняется.Добавить(Категория);
				// При этом, если определен список выбора, то в нем должен быть пустой код.
				Если СвойстваНачислений.ПараметрыВыбора <> Неопределено 
					И СвойстваНачислений.ПараметрыВыбора.КодДоходаНДФЛ <> Неопределено
					И СвойстваНачислений.ПараметрыВыбора.КодДоходаНДФЛ.Свойство("Отбор_Код")
					И СвойстваНачислений.ПараметрыВыбора.КодДоходаНДФЛ.Отбор_Код.Найти("") = Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивКодДоходаНДФЛНеЗаполняется, Категория);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КатегорииПоСвойствам.ОтработанноеВремя = МассивОтработанноеВремя;
	КатегорииПоСвойствам.НеоплачиваемоеВремя = МассивНеоплачиваемоеВремя;
	КатегорииПоСвойствам.КодДоходаНДФЛНеЗаполняется = МассивКодДоходаНДФЛНеЗаполняется;
	
	Возврат КатегорииПоСвойствам;
	
КонецФункции

// Заполняет табличные части базовых и вытесняющих видов расчета для начислений, 
// содержащихся в коллекторе в соответствии со свойствами начислений.
//
Процедура НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений, ОбновлятьЗависимостиПоБазе = Истина) Экспорт 
	
	// Обходим коллектор начислений,
	// в соответствии с категорией определяем, 
	// - чем начисление вытесняется (критерии), 
	// - из чего состоит база.
	
	// По указанным критериям делаем запрос к базе и поиск по коллектору же еще не записанных начислений, 
	// из найденных в базе начислений отбрасываем добавленные в коллектор, 
	// т.к. считаем их версию в коллекторе более актуальной.
	
	КатегорииКоллектора = Новый Соответствие;
	
	// Частное условие: начисление сверх нормы времени не должны вытесняться командировкой и всем тем, что сама
	// командировка вытесняет (например, отпусками).
	КатегорииНеВытесняющиеОплатуСверхНормы = Новый Массив;
	КатегорииНеВытесняющиеОплатуСверхНормы.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	КатегорииНеВытесняющиеОплатуСверхНормы.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки);
	Для Каждого КлючИЗначение Из СвойстваНачислений Цикл
		// Если начисления этой категории вытесняются командировкой, 
		// добавим категорию в список невытесняющих для начислений сверх нормы.
		КатегорияНачисления = КлючИЗначение.Ключ;
		СвойстваНачисления = КлючИЗначение.Значение;
		ОтборВытесняющих = СвойстваНачисления.ОтборВытесняющих;
		Если ОтборВытесняющих <> Неопределено Тогда
			Если ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки) <> Неопределено
				Или ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки) <> Неопределено Тогда
				КатегорииНеВытесняющиеОплатуСверхНормы.Добавить(КатегорияНачисления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		НачислениеСсылка = КлючИЗначение.Ключ;
		НачислениеОбъект = КлючИЗначение.Значение;
		
		ЭтоНовоеНачисление = Не ЗначениеЗаполнено(НачислениеОбъект.Ссылка);
		КатегорияНачисления = НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени;
		
		СвойстваНачисления = СвойстваНачислений[НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени];
		
		КатегорииКоллектора.Вставить(НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени, Истина);
		
		// Вытесняющие начисления (заполняем, только если начисление выполняется не в целом за месяц).
		ОтборВытесняющих = СвойстваНачисления.ОтборВытесняющих;
		Если ОтборВытесняющих <> Неопределено Тогда
			ОтборВытесняющих = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачисления.ОтборВытесняющих);
			Категория = ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени;
			ОтборВытесняющих.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
			
			// Из-за того, что оплачиваемые сверх нормы не выделены в отдельную категорию, уточняем настройку вытеснения.
			Если НачислениеОбъект.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы Тогда
				// Отработанные сверхнормы не вытесняются командировкой.
				Категория = ОбщегоНазначенияКлиентСервер.СократитьМассив(Категория, КатегорииНеВытесняющиеОплатуСверхНормы);
			КонецЕсли;
			
			// Начисления по условию из коллектора.
			ВытесняющиеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборВытесняющих);
			// ..Дополняются по условию из базы данных.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ВытесняющиеНачисления, РасчетЗарплаты.НачисленияПоКатегории(Категория, ОтборВытесняющих), Истина);
			// Заполняем табличную часть полученными вытесняющими начислениями.
			Для Каждого ВытесняющееНачисление Из ВытесняющиеНачисления Цикл
				Если НачислениеОбъект.ВытесняющиеВидыРасчета.Найти(ВытесняющееНачисление, "ВидРасчета") = Неопределено 
					И НачислениеСсылка <> ВытесняющееНачисление Тогда
					НачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ВытесняющееНачисление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Базовые начисления
		Если ОбновлятьЗависимостиПоБазе Тогда
			ОтборБазовых = Неопределено;
			Если НачислениеОбъект.ДополнительныеСвойства.Свойство("ОтборБазовых") Тогда
				ОтборБазовых = НачислениеОбъект.ДополнительныеСвойства.ОтборБазовых;
			КонецЕсли;
			Если ОтборБазовых <> Неопределено И РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(НачислениеОбъект.Показатели, "РасчетнаяБаза") Тогда
				ОтборБазовых = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборБазовых);
				Категория = ОтборБазовых.КатегорияНачисленияИлиНеоплаченногоВремени;
				ОтборБазовых.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
				// Начисления по условию из коллектора.
				БазовыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборБазовых);
				Если ОтборБазовых.Свойство("ОтборПоДополнительнымСвойствамНачисления") Тогда
					ОтборБазовых.Удалить("ОтборПоДополнительнымСвойствамНачисления");
				КонецЕсли;
				// ..Дополняются по условию из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					БазовыеНачисления, РасчетЗарплаты.НачисленияПоКатегории(Категория, ОтборБазовых), Истина);
				// Заполняем табличную часть полученными базовыми начислениями.
				Для Каждого БазовоеНачисление Из БазовыеНачисления Цикл
					Если НачислениеОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено 
						И НачислениеСсылка <> БазовоеНачисление Тогда
						// Проверяем нет ли в списке базовых начисления БазовоеНачисление ссылки на НачислениеОбъект,
						// если есть, то не добавляем
						БазовоеНачислениеОбъект = КоллекторНачислений[БазовоеНачисление];
						Если БазовоеНачислениеОбъект = Неопределено Тогда
							БазовоеНачислениеОбъект = БазовоеНачисление.ПолучитьОбъект();
							КоллекторНачислений.Вставить(БазовоеНачисление, БазовоеНачислениеОбъект);
						КонецЕсли;
						ЭтоНовоеБазовоеНачисление = Не ЗначениеЗаполнено(БазовоеНачислениеОбъект.Ссылка);
						Если Не ЭтоНовоеНачисление И Не ЭтоНовоеБазовоеНачисление Тогда 
							Продолжить;
						КонецЕсли;
						Если Не ЭтоНовоеНачисление
							И КатегорияНачисления <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индексация
							И КатегорияНачисления <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоМЗП Тогда
							Продолжить;
						КонецЕсли;
						Если БазовоеНачислениеОбъект.БазовыеВидыРасчета.Найти(НачислениеСсылка, "ВидРасчета") = Неопределено Тогда
							НачислениеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Ведущие начисления
		ОтборВедущих = СвойстваНачисления.ОтборВедущих;
		Если ОтборВедущих <> Неопределено Тогда
			// Ведущие начисления заполняем принудительно только для почасовых начислений оплаты труда.
			Если РасчетЗарплатыРасширенный.НачислениеРассчитываетсяПоЧасам(НачислениеОбъект) 
				И ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(НачислениеОбъект.ВидВремени) Тогда
				// Начисления по условию из коллектора.
				ВедущиеНачисления = ВидыРасчетаКоллектораПоОтбору(КоллекторНачислений, ОтборВедущих);
				// ..Дополняются по условию из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ВедущиеНачисления, НачисленияПоОтбору(ОтборВедущих), Истина);
				// Заполняем табличную часть полученными вытесняющими начислениями.
				Для Каждого ВедущееНачисление Из ВедущиеНачисления Цикл
					Если НачислениеОбъект.ВедущиеВидыРасчета.Найти(ВедущееНачисление, "ВидРасчета") = Неопределено 
						И НачислениеСсылка <> ВедущееНачисление Тогда
						НачислениеОбъект.ВедущиеВидыРасчета.Добавить().ВидРасчета = ВедущееНачисление;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Анализируем свойства начислений по категориям, 
	// если в коллекторе есть начисления, удовлетворяющие условиям на вытесняющие или базовые для каких-то категорий, 
	// то нужно обновить начисления этих категорий.
	
	ОтборТолькоПочасоваяОплата = Новый Структура;
	ОтборТолькоПочасоваяОплата.Вставить("ВидВремени", ЗарплатаКадрыРасширенныйКлиентСервер.ВидыОтработанногоВремени());
	ОтборТолькоПочасоваяОплата.Вставить("УчетВремениВЧасах", Истина);
	
	Для Каждого КлючИЗначение Из СвойстваНачислений Цикл
		КатегорияНачисления = КлючИЗначение.Ключ;
		СвойстваНачисления = КлючИЗначение.Значение;
		
		Если Не ЗначениеЗаполнено(КатегорияНачисления) Тогда
			Продолжить;
		КонецЕсли;
		
		// Вытесняющие начисления
		ОтборВытесняющих = СвойстваНачисления.ОтборВытесняющих;
		Если ОтборВытесняющих <> Неопределено Тогда
			ОтборВытесняющих = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачисления.ОтборВытесняющих);
			Категория = ОтборВытесняющих.КатегорияНачисленияИлиНеоплаченногоВремени;
			ОтборВытесняющих.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
			// Начисления по условию из коллектора.
			ВытесняющиеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборВытесняющих);
			Если ВытесняющиеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, вытесняющие начисления с такой категорией.
				// Вытесняемые начисления могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору...
				ВытесняемыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, КатегорияНачисления);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВытесняемыеНачисления, 
					РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления), Истина);
				Для Каждого ВытесняемоеНачисление Из ВытесняемыеНачисления Цикл
					ВытесняемоеНачислениеОбъект = КоллекторНачислений[ВытесняемоеНачисление];
					ДобавленоВКоллектор = Ложь;
					Если ВытесняемоеНачислениеОбъект = Неопределено Тогда
						ВытесняемоеНачислениеОбъект = ВытесняемоеНачисление.ПолучитьОбъект();
						КоллекторНачислений.Вставить(ВытесняемоеНачисление, ВытесняемоеНачислениеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					Обновлено = Ложь;
					Для Каждого ВытесняющееНачисление Из ВытесняющиеНачисления Цикл
						// Частное условие:
						// Если вытесняющее начисление — командировка (или вытесняется командировкой), 
						// а вытесняемое — оплата сверх нормы времени, не добавляем.
						ВытесняющееНачислениеОбъект = КоллекторНачислений[ВытесняющееНачисление];
						Если КатегорииНеВытесняющиеОплатуСверхНормы.Найти(ВытесняющееНачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
							Если ВытесняемоеНачислениеОбъект.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы Тогда
								// Не добавляем такую настройку вытеснения.
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						// Универсальное условие
						Если ВытесняемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Найти(ВытесняющееНачисление, "ВидРасчета") = Неопределено 
							И ВытесняемоеНачисление <> ВытесняющееНачисление Тогда
							ВытесняемоеНачислениеОбъект.ВытесняющиеВидыРасчета.Добавить().ВидРасчета = ВытесняющееНачисление;
							Обновлено = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторНачислений.Удалить(ВытесняемоеНачисление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Базовые начисления
		ОтборБазовых = СвойстваНачисления.ОтборБазовых;
		Если ОбновлятьЗависимостиПоБазе И ОтборБазовых <> Неопределено Тогда
			ОтборБазовых = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборБазовых);
			Категория = ОтборБазовых.КатегорияНачисленияИлиНеоплаченногоВремени;
			ОтборБазовых.Удалить("КатегорияНачисленияИлиНеоплаченногоВремени");
			// Начисления по условию из коллектора.
			БазовыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборБазовых);
			Если БазовыеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, являющиеся базовыми для данной категории.
				// Зависимые начисления могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору...
				ЗависимыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, КатегорияНачисления);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗависимыеНачисления, 
					РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления), Истина);
				Для Каждого ЗависимоеНачисление Из ЗависимыеНачисления Цикл
					ЗависимоеНачислениеОбъект = КоллекторНачислений[ЗависимоеНачисление];
					ДобавленоВКоллектор = Ложь;
					Если ЗависимоеНачислениеОбъект = Неопределено Тогда
						ЗависимоеНачислениеОбъект = ЗависимоеНачисление.ПолучитьОбъект();
						КоллекторНачислений.Вставить(ЗависимоеНачисление, ЗависимоеНачислениеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					ЭтоНовоеЗависимоеНачисление = Не ЗначениеЗаполнено(ЗависимоеНачислениеОбъект.Ссылка);
					// Определяем, если вообще зависимому начислению нужен список базовых видов расчета.
					Обновлено = Ложь;
					Если РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ЗависимоеНачислениеОбъект.Показатели, "РасчетнаяБаза") Тогда
						Для Каждого БазовоеНачисление Из БазовыеНачисления Цикл
							Если ЗависимоеНачислениеОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено 
								И ЗависимоеНачисление <> БазовоеНачисление Тогда
								// Дополнительно проверяем нет ли в списке базовых начисления БазовоеНачисление ссылки на
								// ЗависимоеНачислениеОбъект, если есть, то не добавляем
								БазовоеНачислениеОбъект = КоллекторНачислений[БазовоеНачисление];
								Если БазовоеНачислениеОбъект = Неопределено Тогда
									БазовоеНачислениеОбъект = БазовоеНачисление.ПолучитьОбъект();
									КоллекторНачислений.Вставить(БазовоеНачисление, БазовоеНачислениеОбъект);
								КонецЕсли;
								ЭтоНовоеБазовоеНачисление = Не ЗначениеЗаполнено(БазовоеНачислениеОбъект.Ссылка);
								Если Не ЭтоНовоеЗависимоеНачисление И Не ЭтоНовоеБазовоеНачисление Тогда 
									Продолжить;
								КонецЕсли;
								// Меняем базу существующего начисления, только если это РК или СН
								Если Не ЭтоНовоеЗависимоеНачисление 
									И КатегорияНачисления <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
									И КатегорияНачисления <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда 
									Продолжить;
								КонецЕсли;
								Если БазовоеНачислениеОбъект.БазовыеВидыРасчета.Найти(ЗависимоеНачисление, "ВидРасчета") = Неопределено Тогда
									ЗависимоеНачислениеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
									Обновлено = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторНачислений.Удалить(ЗависимоеНачисление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Ведущие начисления
		ОтборВедущих = СвойстваНачисления.ОтборВедущих;
		Если ОтборВедущих <> Неопределено Тогда
			ОтборВедущих = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СвойстваНачисления.ОтборВедущих);
			// Начисления по условию из коллектора.
			ВедущиеНачисления = ВидыРасчетаКоллектораПоОтбору(КоллекторНачислений, ОтборВедущих);
			Если ВедущиеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, ведущие начисления с такой категорией.
				// Ведомые начисления могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору, отбираем только почасовую оплату труда...
				ВедомыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, КатегорияНачисления, ОтборТолькоПочасоваяОплата);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВедомыеНачисления, 
					РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления, ОтборТолькоПочасоваяОплата), Истина);
				Для Каждого ВедомоеНачисление Из ВедомыеНачисления Цикл
					ВедомоеНачислениеОбъект = КоллекторНачислений[ВедомоеНачисление];
					ДобавленоВКоллектор = Ложь;
					Если ВедомоеНачислениеОбъект = Неопределено Тогда
						ВедомоеНачислениеОбъект = ВедомоеНачисление.ПолучитьОбъект();
						КоллекторНачислений.Вставить(ВедомоеНачисление, ВедомоеНачислениеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					Обновлено = Ложь;
					Для Каждого ВедущееНачисление Из ВедущиеНачисления Цикл
						Если ВедомоеНачислениеОбъект.ВедущиеВидыРасчета.Найти(ВедущееНачисление, "ВидРасчета") = Неопределено 
							И ВедомоеНачисление <> ВедущееНачисление Тогда
							ВедомоеНачислениеОбъект.ВедущиеВидыРасчета.Добавить().ВидРасчета = ВедущееНачисление;
							Обновлено = Истина;
						КонецЕсли;
					КонецЦикла;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторНачислений.Удалить(ВедомоеНачисление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция составляет массив действующих начислений, 
// выполняемых документом определенного вида.
//
// Параметры:
//	ВидДокумента - ПеречислениеСсылка.ВидыДокументовНачисления 
// 		или просто ссылка на документ.
//	ДополнительныйОтбор - необязательный, 
//		структура для уточнения особенностей подходящих начислений.
//
// Возвращаемое значение - массив начислений.
//
Функция НачисленияПоВидуДокумента(ВидДокумента, ДополнительныйОтбор = Неопределено) Экспорт
	
	Если ТипЗнч(ВидДокумента) <> Тип("ПеречислениеСсылка.ВидыДокументовНачисления") Тогда
		ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(ВидДокумента);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Если ДополнительныйОтбор <> Неопределено Тогда
		Отбор = ДополнительныйОтбор;
	КонецЕсли;
	Отбор.Вставить("ВидДокументаНачисления", ВидДокумента);
	Отбор.Вставить("СпособВыполненияНачисления", Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета);
	
	Возврат НачисленияПоОтбору(Отбор);
	
КонецФункции

// Возвращает массив начислений, соответствующие параметрам.
//
// Параметры:
//		КатегорияНачисления - Перечисление.КатегорииНачисленийИНеоплаченногоВремени
// 		Отбор - Структура, содержащая в качестве ключа наименование одного из реквизитов ПланаВидовРасчета.Начисления. 
//
// Возвращаемое значение - массив начислений, соответствующих категории и отборам.
//
Функция НачисленияПоКатегории(КатегорияНачисления, Отбор = Неопределено) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	Отбор.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорияНачисления);
	
	Возврат НачисленияПоОтбору(Отбор);
	
КонецФункции

// Возвращает массив начислений, соответствующих отбору.
//
// Параметры:
// 	Отбор - Структура, содержащая в качестве ключа наименование одного из реквизитов ПланаВидовРасчета.Начисления.
//		Кроме того, предусмотрена обработка предопределенных ключей:
//			- ОпределяющиеПоказатели - выполняется поиск начислений, по наличию показателей в списке определяющих.
//
// Возвращаемое значение - массив начислений, соответствующих категории и отборам.
//
Функция НачисленияПоОтбору(Отбор) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	&УСЛОВИЕ");
	
	Условие = "";
	Для Каждого КлючИЗначение Из Отбор Цикл
		ИмяОтбора = КлючИЗначение.Ключ;
		ЗначениеОтбора = КлючИЗначение.Значение;
		// Фиксированный массив преобразуем в обычный.
		Если ТипЗнч(ЗначениеОтбора) = Тип("ФиксированныйМассив") Тогда
			Массив = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, ЗначениеОтбора);
			ЗначениеОтбора = Массив;
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяОтбора, ЗначениеОтбора);
		ФрагментУсловия = "";
		Если Не ПустаяСтрока(Условие) Тогда
			ФрагментУсловия	= " И ";
		КонецЕсли;
		Если ИмяОтбора = "ОпределяющиеПоказатели" Тогда
			// Предопределенный фильтр по определяющим показателям.
			ФрагментУсловия = ФрагментУсловия + "
				|	ИСТИНА В
				|			(ВЫБРАТЬ ПЕРВЫЕ 1
				|				ИСТИНА
				|			ИЗ
				|				ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
				|			ГДЕ
				|				ПоказателиНачислений.Ссылка = Начисления.Ссылка
				|				И ПоказателиНачислений.ОпределяющийПоказатель = ИСТИНА
				|				И ПоказателиНачислений.Показатель.ИмяПредопределенныхДанных В (&ОпределяющиеПоказатели))";
		Иначе
			ШаблонУсловия = "Начисления.%1 = &%1";
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				ШаблонУсловия = "Начисления.%1 В (&%1)";
			КонецЕсли;
			ФрагментУсловия = ФрагментУсловия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, ИмяОтбора);
		КонецЕсли;
		Условие = Условие + ФрагментУсловия;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УСЛОВИЕ", Условие);
	
	Начисления = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Начисления.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Начисления;
	
КонецФункции

// Проверяет соответствие указанного вида расчета предлагаемому отбору.
//
Функция ВидРасчетаСоответствуетОтбору(ВидРасчетаОбъект, КатегорияОтбор, Отбор = Неопределено) Экспорт
	
	КатегорияВидаРасчета = КатегорияВидаРасчета(ВидРасчетаОбъект);
	Если ТипЗнч(КатегорияОтбор) = Тип("Массив") Тогда
		Если КатегорияОтбор.Найти(КатегорияВидаРасчета) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если КатегорияВидаРасчета <> КатегорияОтбор Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Отбор <> Неопределено И Отбор.Количество() > 0 Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
			Если Не Модуль.ВидРасчетаСоответствуетОтбору(ВидРасчетаОбъект, Отбор) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из Отбор Цикл
			ПолеОтбора = ЭлементОтбора.Ключ;
			Если ПолеОтбора = "ОтборПоДополнительнымСвойствамНачисления" Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеОтбора = ЭлементОтбора.Значение;
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				Если ЗначениеОтбора.Найти(ВидРасчетаОбъект[ПолеОтбора]) = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Если ВидРасчетаОбъект[ПолеОтбора] <> ЗначениеОтбора Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Определяет параметры выбора начислений, удовлетворяющих выбранному состоянию сотрудника.
//
// Параметры:
//	СостояниеСотрудника - состояние сотрудника.
//
// Возвращаемое значение - структура, полями которой являются имена реквизитов ПВР Начисления, а значениями допустимые
// значения.
//
Функция ОтборНачисленийПоСостоянию(СостояниеСотрудника) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	Если СостояниеСотрудника = Перечисления.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.Прогул Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	ИначеЕсли СостояниеСотрудника = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя Тогда
		СтруктураОтбора.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	КонецЕсли;

	Возврат СтруктураОтбора;
	
КонецФункции

//Процедура ОбновитьНачисленияПростоев() Экспорт
//	
//	СоздатьНачисленияПростоев();
//	
//КонецПроцедуры

Процедура ЗаполнитьПризнакиДублированияНачисленийДляВнутреннихСовместителейИПодработок() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииНачисленийВнутреннихСовместителейИПодработок", КатегорииНачисленийВнутреннихСовместителейИПодработок());
	Запрос.УстановитьПараметр("КатегорииНачисленийПодработок", КатегорииНачисленийПодработок());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ИСТИНА КАК ДублироватьДляВнутреннихСовместителейИПодработок,
		|	ЛОЖЬ КАК ДублироватьДляПодработок
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачисленийВнутреннихСовместителейИПодработок)
		|	И Начисления.ДублироватьДляВнутреннихСовместителейИПодработок = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК НачисленияДляВнутреннихСовместителей
		|		ПО Начисления.Ссылка = НачисленияДляВнутреннихСовместителей.Ссылка
		|			И (НачисленияДляВнутреннихСовместителей.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийВнутреннихСовместителейИПодработок))
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииНачисленийПодработок)
		|	И Начисления.ДублироватьДляПодработок = ЛОЖЬ
		|	И НачисленияДляВнутреннихСовместителей.Ссылка ЕСТЬ NULL ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ВидРасчетаОбъект.ДублироватьДляВнутреннихСовместителейИПодработок = Выборка.ДублироватьДляВнутреннихСовместителейИПодработок;
			ВидРасчетаОбъект.ДублироватьДляПодработок = Выборка.ДублироватьДляПодработок;
			
			ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
			ВидРасчетаОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

// Коллекция категорий надбавок, использующих при расчете базу других начислений.
// Для таких начислений период действия и базовый период отличаются даже в текущем месяце для того, 
// чтобы при их вытеснении, базовый период не искажался и по-прежнему охватывал весь период.
// 
Функция КатегорииНадбавокПоБазе() Экспорт
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
	
	Возврат Категории;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	РасчетЗарплатыРасширенныйВызовСервера.НачисленияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Создает или отключает начисление для выполнения надбавки за вредность.
//
Процедура СоздатьНачислениеНадбавкаЗаВредность(ПараметрыПланаВидовРасчета, КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено, НастройкиРасчетаЗарплаты = Неопределено) Экспорт
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли;
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
		
	// Создаем показатель.
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательНадбавкаЗаВредность(НастройкиРасчетаЗарплаты);
	// Описываем создание надбавки.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='НВР';uk='НШК'");
	Описание.Наименование			= НСтр("ru='Надбавка за вредные условия труда';uk='Надбавка за шкідливі умови праці'");
	Описание.КраткоеНаименование 	= НСтр("ru='Вредность';uk='Шкідливість'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаВредность / 100 * РасчетнаяБаза";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ОтборБазовых 			= ОтборБазовыхПоУмолчанию();
	Если НастройкиРасчетаЗарплаты.ИспользоватьНадбавкуЗаВредность Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияНадбавки(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета)

	Надбавки = ПараметрыПланаВидовРасчета.Надбавки;
	
	// Для надбавок определяем в качестве ключа.
	// Повременная оплата труда + вид времени: дополнительно оплачиваемое в пределах нормы.
	ОтборБазовыхНачисленийНадбавок = ОтборБазовыхПоУмолчанию();
	
	// Надбавка за выслугу лет
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='НВЛ';uk='НВР'");
	Описание.Наименование			= НСтр("ru='Надбавка за выслугу лет';uk='Надбавка за вислугу років'");
	Описание.КраткоеНаименование 	= НСтр("ru='Выслуга лет';uk='Вислуга років'");
	Описание.ФормулаРасчета 		= "ПроцентНадбавкиЗаВыслугуЛет / 100 * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОтборБазовых 			= ОтборБазовыхНачисленийНадбавок;
	Описание.КлючевыеСвойства 		= "Код";
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыслугуЛет;
	Описание.КлючевыеСвойства = "Ссылка";
	Если Надбавки.ИспользоватьНадбавкуЗаВыслугуЛет Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.НадбавкаЗаВыслугуЛет = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	ПрочиеНадбавкиПроцентом = Надбавки.НадбавкиПроцентом;
	Если ПрочиеНадбавкиПроцентом.Количество() > 0 Тогда
		
		ИдентификаторыНадбавокПроцентом = Надбавки.ИдентификаторыНадбавокПроцентом;
		
		Для Сч = 1 По ПрочиеНадбавкиПроцентом.Количество() Цикл
			
			Индекс = Сч-1;
			Надбавка = СокрЛП(ПрочиеНадбавкиПроцентом[Индекс]);
			Если ПустаяСтрока(Надбавка) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторНадбавки = ИдентификаторыНадбавокПроцентом[Индекс];
			
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			Описание.Код					= НСтр("ru='ПРН';uk='ПРН'") + ?(Индекс = 0,"", Индекс);
			Описание.Наименование			= Надбавка;
			Описание.ФормулаРасчета 		= ИдентификаторНадбавки + " / 100 * РасчетнаяБаза";
			Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
			Описание.ОтборБазовых 			= ОтборБазовыхНачисленийНадбавок;
			Описание.КлючевыеСвойства 		= "Наименование";
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПрочиеНадбавкиСуммой = Надбавки.НадбавкиСуммой;
	Если ПрочиеНадбавкиСуммой.Количество() > 0 Тогда
		
		ИдентификаторыНадбавокСуммой = Надбавки.ИдентификаторыНадбавокСуммой;
		
		Для Сч = 1 По ПрочиеНадбавкиСуммой.Количество() Цикл
			
			Индекс = Сч-1;
			Надбавка = СокрЛП(ПрочиеНадбавкиСуммой[Индекс]);
			Если ПустаяСтрока(Надбавка) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторНадбавки = ИдентификаторыНадбавокСуммой[Индекс];
			
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			Описание.Код					= НСтр("ru='НСУМ';uk='НСУМ'") + ?(Индекс = 0,"", Индекс);
			Описание.Наименование			= Надбавка;
			Описание.ФормулаРасчета 		= ИдентификаторНадбавки + " * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
			Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
			Описание.КлючевыеСвойства 		= "Наименование";
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеДоплатаЗаПереработкиПоСуммированномуУчету(ПараметрыПланаВидовРасчета, КоллекторНачислений = Неопределено, СвойстваНачислений = Неопределено, НастройкиРасчетаЗарплаты = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли;
	
	ИспользоватьОплатуПереработокСуммированногоУчета = НастройкиРасчетаЗарплаты.ИспользоватьОплатуПереработокСуммированногоУчета;
	ИспользоватьУчетВремениСотрудниковВЧасах 		 = НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	
	// Создаем показатели.
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиСуммированногоУчета();
	
	ОпределяющиеПоказатели = Новый Массив;
	ОпределяющиеПоказатели.Добавить("ПереработаноПоСуммированномуУчету");
	
	// Описываем создание надбавки.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРБТС';uk='ПРБТС'");
	Описание.Наименование			= НСтр("ru='Доплата за переработки при суммированном учете рабочего времени';uk='Доплата за переробітки при підсумованому обліку робочого часу'");
	Описание.КраткоеНаименование 	= НСтр("ru='Переработки при сумм. учете';uk='Переробітки за підсум. обліку'");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
	Описание.ФормулаРасчета			= "ПереработаноПоСуммированномуУчету * СтоимостьЧаса";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОпределяющиеПоказатели = ОпределяющиеПоказатели;
	Описание.КлючевыеСвойства = "ОпределяющиеПоказатели";
	Если ИспользоватьОплатуПереработокСуммированногоУчета И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений);
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура СоздатьНачисленияКомпенсационныеВыплаты(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета)

	КомпенсационныеВыплаты = ПараметрыПланаВидовРасчета.КомпенсационныеВыплаты;
	
	Если КомпенсационныеВыплаты.Количество() > 0 Тогда
		
		Для каждого Выплата Из КомпенсационныеВыплаты Цикл
			
			Если ПустаяСтрока(Выплата.Название) Тогда
				Продолжить;
			КонецЕсли;
						
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			Описание.Код					= НСтр("ru='КМПВ';uk='КМПВ'");
			Описание.Наименование			= Выплата.Название;
			Если Выплата.ПорядокНачисления = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете Тогда
				Описание.ФормулаРасчета 		= СОКРЛП(Выплата.Показатель) + " * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
			Иначе	
				Описание.ФормулаРасчета 		= СОКРЛП(Выплата.Показатель);
			КонецЕсли;
			Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
			Описание.СпособВыполненияНачисления = Выплата.ПорядокНачисления;
			Описание.КодДоходаНДФЛ 			  = Выплата.КодДоходаНДФЛ;
			Описание.КлючевыеСвойства 		= "Наименование";
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияНатуральныеДоходы(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета, НастройкиРасчетаЗарплаты)

	НатуральныеДоходы = ПараметрыПланаВидовРасчета.НатуральныеДоходы;
	
	// Оплата в натуральной форме
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаТрудаВНатуральнойФорме;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='НТОПЛ';uk='НТОПЛ'");
	Описание.Наименование			= НСтр("ru='Оплата в натуральной форме';uk='Оплата в натуральній формі'");
	Описание.КраткоеНаименование 	= НСтр("ru='Оплата в натур. форме';uk='Оплата в натур. формі'");
	Описание.ФормулаРасчета			= "НатуральнаяОплата * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("НатуральнаяОплата");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаТрудаВНатуральнойФорме;
	Описание.КлючевыеСвойства = "Ссылка";
	Если НатуральныеДоходы.ОплатаТрудаВНатуральнойФорме Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаТрудаВНатуральнойФорме = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доход в натуральной форме (отключение всех начислений категории ДоходВНатуральнойФорме).
	Если Не НастройкиРасчетаЗарплаты.ИспользоватьДоходыВНатуральнойФорме Тогда
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
		Возврат;
	КонецЕсли;
	
	// Доход в натуральной форме
	СписокНатуральныхДоходов = НатуральныеДоходы.НатуральныеДоходы;
	Если СписокНатуральныхДоходов.Количество() > 0 Тогда
		
		Для Сч = 1 По СписокНатуральныхДоходов.Количество() Цикл
			
			Индекс = Сч-1;
			Доход = СокрЛП(СписокНатуральныхДоходов[Индекс]);
			Если ПустаяСтрока(Доход) Тогда
				Продолжить;
			КонецЕсли;
			
			Описание = ОписаниеНачисления();
			Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме;
			Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
			Описание.Код					= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='НТ%1';uk='НТ%1'"), Формат(Сч, "ЧЦ=3; ЧВН="));
			Описание.Наименование			= Доход;
			Описание.ФормулаРасчета 		= "";
			Описание.Рассчитывается 		= Ложь;
			Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			Описание.КлючевыеСвойства 		= "Наименование";
			СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
			
		КонецЦикла;
		
	Иначе
		
		Описание = ОписаниеНачисления();
		Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме;
		Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
		Описание.Код					= НСтр("ru='НАТДХ';uk='НАТДХ'") + ?(Индекс = 0,"", Индекс);
		Описание.Наименование			= НСтр("ru='Натуральный доход';uk='Натуральний дохід'");
		Описание.КраткоеНаименование 	= НСтр("ru='Натур. доход';uk='Натур. дохід'");
		Описание.ФормулаРасчета 		= "";
		Описание.Рассчитывается 		= Ложь;
		Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
		Описание.КлючевыеСвойства 		= "КатегорияНачисленияИлиНеоплаченногоВремени";
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияПремий(КоллекторНачислений, СвойстваНачислений, ПараметрыПланаВидовРасчета)
	
	ПараметрыПремии = ПараметрыПланаВидовРасчета.ЕжемесячнаяПремия;
	
	// Ежемесячная премия процентом.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРЕМП';uk='ПРЕМВ'");
	Описание.Наименование			= НСтр("ru='Премия ежемесячная процентом';uk='Премія щомісячна відсотком'");
	Описание.КраткоеНаименование 	= НСтр("ru='Премия мес.';uk='Премія міс.'");
	Описание.ФормулаРасчета 		= "ПроцентЕжемесячнойПремии / 100 * РасчетнаяБаза";
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	Описание.СреднийЗаработокОбщийОтпускные	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	
	Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Если ПараметрыПремии.БазовыйПериодПрошлыйМесяц Тогда
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц;
		Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Иначе
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
		Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяПремияПроцентом;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюПроцентом Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяПремияПроцентом = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Ежемесячная премия суммой
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРЕМС';uk='ПРЕМС'");
	Описание.Наименование			= НСтр("ru='Премия ежемесячная суммой';uk='Премія щомісячна сумою'");
	Описание.КраткоеНаименование 	= НСтр("ru='Премия мес.';uk='Премія міс.'");
	Описание.ФормулаРасчета 		= "РазмерЕжемесячнойПремии * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Истина;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	Описание.СреднийЗаработокОбщийОтпускные	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	
	Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяПремияСуммой;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюСуммой Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ЕжемесячнаяПремияСуммой = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	ПараметрыПремии = ПараметрыПланаВидовРасчета.ГодоваяПремия;
	// Годовая премия процентом
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРГП';uk='ПРРВ'");
	Описание.Наименование			= НСтр("ru='Премия за год (процентом)';uk='Премія за рік (відсотком)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Премия год.';uk='Премія річн.'");
	Описание.ФормулаРасчета 		= "ПроцентГодовойПремии / 100 * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КоличествоМесяцевБазовогоПериода = 12;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом;
	Описание.СреднийЗаработокОбщийОтпускные	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом;
	
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентГодовойПремии");
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод;
	ИначеЕсли ПараметрыПремии.НачисляетсяВМесяцах Тогда
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
		Если ПараметрыПремии.НомерМесяцаНачисленияГодовойПремии = 12 Тогда
			Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод;
		Иначе
			Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод;
		КонецЕсли;
		Описание.МесяцыНачисления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПремии.НомерМесяцаНачисленияГодовойПремии);
	Иначе
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ГодоваяПремияПроцентом;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюПроцентом Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ГодоваяПремияПроцентом = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Годовая премия суммой
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРГС';uk='ПРРС'");
	Описание.Наименование			= НСтр("ru='Премия за год (суммой)';uk='Премія за рік (сумою)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Премия год.';uk='Премія річн.'");
	Описание.ФормулаРасчета 		= "РазмерГодовойПремии";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КоличествоМесяцевБазовогоПериода = 12;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой;
	Описание.СреднийЗаработокОбщийОтпускные	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой;
	
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РазмерГодовойПремии");
	ИначеЕсли ПараметрыПремии.НачисляетсяВМесяцах Тогда
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
		Описание.МесяцыНачисления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыПремии.НомерМесяцаНачисленияГодовойПремии);
	Иначе
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ГодоваяПремияСуммой;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюСуммой Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ГодоваяПремияСуммой = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);	
	КонецЕсли;
	
	ПараметрыПремии = ПараметрыПланаВидовРасчета.КвартальнаяПремия;
	
	// Квартальная премия процентом.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРКП';uk='ПРКВ'");
	Описание.Наименование			= НСтр("ru='Премия за квартал (процентом)';uk='Премія за квартал (відсотком)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Премия кварт.';uk='Премія кварт.'");
	Описание.ФормулаРасчета 		= "ПроцентКвартальнойПремии / 100 * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КоличествоМесяцевБазовогоПериода = 3;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	Описание.СреднийЗаработокОбщийОтпускные	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	
	МесяцыНачисления = ПараметрыПремии.НомераМесяцевНачисленияКвартальнойПремии;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентКвартальнойПремии");
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал;
	ИначеЕсли ПараметрыПремии.НачисляетсяВМесяцах Тогда
		ПервыйМесяц = 12;
		Для каждого МесяцНачисления Из МесяцыНачисления Цикл
			Если ПервыйМесяц > МесяцНачисления Тогда
				ПервыйМесяц = МесяцНачисления;
			КонецЕсли;
		КонецЦикла;
		Если ПервыйМесяц = 3 Тогда
			Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал;
		Иначе
			Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал;
		КонецЕсли;
		Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
		Описание.МесяцыНачисления = МесяцыНачисления;
	Иначе
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.КвартальнаяПремияПроцентом;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюПроцентом Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.КвартальнаяПремияПроцентом = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда  
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);	
	КонецЕсли;
	
	// Квартальная премия суммой
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРКС';uk='ПРКС'");
	Описание.Наименование			= НСтр("ru='Премия за квартал (суммой)';uk='Премія за квартал (сумою)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Премия кварт.';uk='Премія кварт.'");
	Описание.ФормулаРасчета 		= "РазмерКвартальнойПремии";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.КоличествоМесяцевБазовогоПериода = 3;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокОбщий	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	Описание.СреднийЗаработокОбщийОтпускные	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	
	МесяцыНачисления = ПараметрыПремии.НомераМесяцевНачисленияКвартальнойПремии;
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РазмерКвартальнойПремии");
	ИначеЕсли ПараметрыПремии.НачисляетсяВМесяцах Тогда
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете;
		Описание.МесяцыНачисления = МесяцыНачисления;
	Иначе
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления  = Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;	
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.КвартальнаяПремияСуммой;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюСуммой Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.КвартальнаяПремияСуммой = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);	
	КонецЕсли;
	
	// Разовая премия
	ПараметрыПремии = ПараметрыПланаВидовРасчета.РазоваяПремия;
	
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРРП';uk='ПРОВ'");
	Описание.Наименование			= НСтр("ru='Премия разовая (процентом)';uk='Разова премія (відсотком)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Премия разов.';uk='Премія разов.'");
	Описание.ФормулаРасчета 		= "ПроцентРазовойПремии / 100 * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.СреднийЗаработокОбщий 	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	Описание.СреднийЗаработокОбщийОтпускные	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом;
	
	Описание.КоличествоМесяцевБазовогоПериода = ПараметрыПремии.ЧислоМесяцевПериодаРазовойПремии;
	Описание.СдвигБазовогоПериода = 1;
	Если Описание.КоличествоМесяцевБазовогоПериода = 1 Тогда
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Иначе
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев;
	КонецЕсли;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ПроцентРазовойПремии");
		Описание.ВидДокументаНачисления = Неопределено;
	Иначе
		Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазоваяПремияПроцентом;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюПроцентом Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазоваяПремияПроцентом = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);	
	КонецЕсли;
	
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРРС';uk='ПРОС'");
	Описание.Наименование			= НСтр("ru='Премия разовая (суммой)';uk='Разова премія (сумою)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Премия разов.';uk='Премія разов.'");
	Описание.ФормулаРасчета 		= "РазмерРазовойПремии";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.СреднийЗаработокОбщий 	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	Описание.СреднийЗаработокОбщийОтпускные	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой;
	
	Описание.КоличествоМесяцевБазовогоПериода = ПараметрыПремии.ЧислоМесяцевПериодаРазовойПремии;
	Описание.СдвигБазовогоПериода = 1;
	Если ПараметрыПремии.НачисляетсяПоЗначениюПоказателей Тогда
		Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
		Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("РазмерРазовойПремии");
		Описание.ВидДокументаНачисления = Неопределено;
	Иначе
		Описание.ФормулаРасчета = "";
		Описание.Рассчитывается = Ложь;
		Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
		Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.Премия;
	КонецЕсли;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазоваяПремияСуммой;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПремии.ИспользоватьПремиюСуммой Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.РазоваяПремияСуммой = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата за выручку от реализации.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ДПВРЧ';uk='ДПВРЧ'");
	Описание.Наименование			= НСтр("ru='Доплата за выручку от реализации';uk='Доплата за виторг від реалізації'");
	Описание.КраткоеНаименование 	= НСтр("ru='Допл. от реализ.';uk='Допл. від реаліз.'");
	Описание.ФормулаРасчета 		= "Выручка * ПроцентДоплатыЗаВыручку / 100";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
	Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Выручка");
	Описание.СреднийЗаработокФСС 	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаВыручкуОтРеализации;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьДоплатуЗаВыручкуОтРеализации Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаВыручкуОтРеализации = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата за выполнение плана.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ДППЛН';uk='ДППЛН'");
	Описание.Наименование			= НСтр("ru='Доплата за выполнение плана';uk='Доплата за виконання плану'");
	Описание.КраткоеНаименование 	= НСтр("ru='Допл. за выполн. плана';uk='Допл. за викон. плану'");
	Описание.ФормулаРасчета 		= "?(ВыполнениеПлана >= План, ВыполнениеПлана / План, 0) * РасчетнаяБаза";
	Описание.НачисляетсяПриРасчетеПервойПоловиныМесяца = Ложь;
	Описание.СпособВыполненияНачисления	= Перечисления.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете;
	Описание.ОпределяющиеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВыполнениеПлана");
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.КоличествоМесяцевБазовогоПериода = 1;
	Описание.СдвигБазовогоПериода = 1;
	Описание.СреднийЗаработокФСС 	= Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаВыполнениеПлана;
	Описание.КлючевыеСвойства = "Ссылка";
	Если ПараметрыПланаВидовРасчета.ИспользоватьДоплатуЗаВыполнениеПлана Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ДоплатаЗаВыполнениеПлана = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияЕжегодногоОтпуска(ПараметрыПланаВидовРасчета, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений) 
	
	ВидОтпуска 					= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"); 
	НаименованиеОтпуска  		= НСтр("ru='Отпуск основной';uk='Основна відпустка'");
	КраткоеНаименование 		= НСтр("ru='Отпуск';uk='Відпустка'");
	СоздаватьКомпенсацию  		= Истина;
	
	СоздатьНачисленияОтпускаИКомпенсации(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, Истина, СоздаватьКомпенсацию, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, , КраткоеНаименование);
	
	ВидОтпуска 					= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ДополнительныйЕжегодныйОтпуск"); 
	НаименованиеОтпуска  		= НСтр("ru='Отпуск дополнительный';uk='Відпустка додаткова'");
	КраткоеНаименование 		= НСтр("ru='Отпуск дополнительный';uk='Відпустка додаткова'");
	СоздаватьКомпенсацию  		= Истина;
	СоздатьНачисленияОтпускаИКомпенсации(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, Истина, СоздаватьКомпенсацию, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, , КраткоеНаименование);
	
	ВидОтпуска 					= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ДополнительныйНаДетей"); 
	НаименованиеОтпуска  		= НСтр("ru='Отпуск дополнительный на детей';uk='Відпустка додаткова на дітей'");
	КраткоеНаименование 		= НСтр("ru='Отпуск на детей';uk='Відпустка на дітей'");
	СоздаватьКомпенсацию  		= Истина;
	СоздатьНачисленияОтпускаИКомпенсации(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, Истина, СоздаватьКомпенсацию, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, , КраткоеНаименование);

	ВидОтпуска 					= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ДополнительныйПрочий"); 
	НаименованиеОтпуска  		= НСтр("ru='Отпуск прочий';uk='Відпустка інша'");
	КраткоеНаименование 		= НСтр("ru='Отпуск прочий';uk='Відпустка інша'");
	СоздаватьКомпенсацию  		= Ложь;
	СоздатьНачисленияОтпускаИКомпенсации(ПараметрыПланаВидовРасчета, ВидОтпуска, НаименованиеОтпуска, Истина, СоздаватьКомпенсацию, КоллекторНачислений, КоллекторУдержаний, СвойстваНачислений, , КраткоеНаименование);

КонецПроцедуры

Процедура СоздатьНачисленияОтпускаНаСанаторноКурортноеЛечениеЗаСчетФСС(ПараметрыПланаВидовРасчета, КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено 
		Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
		
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускНаСанаторноКурортноеЛечение;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени		= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск");
	Описание.СвойстваПоКатегории 						= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Наименование 								= НСтр("ru='Отпуск на период санаторно-курортного лечения (за счет ФСС)';uk='Відпустка на період санаторно-курортного лікування (за рахунок ФСС)'");
	Описание.КраткоеНаименование 						= НСтр("ru='Отпуск на СКЛ (ФСС)';uk='Відпустка на СКЛ (ФСС)'");
	Описание.Код 										= НСтр("ru='СКЛ';uk='СКЛ'");
	Описание.КлючевыеСвойства 							= "КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачисленияДляУчетаВремениСотрудниковВЧасах(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета)
	
	ИспользоватьУчетВремениСотрудниковВЧасах = НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	
	ПовременнаяПочасоваяОплата = Новый Массив;
	
	// Оклад по часам
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ОКЛЧС';uk='ОКЛГД'");
	Описание.Наименование			= НСтр("ru='Оплата по окладу (по часам)';uk='Оплата по окладу (по годинах)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Оклад (по часам)';uk='Оклад (по годинах)'");
	Описание.ФормулаРасчета			= "Оклад * ВремяВЧасах / НормаЧасов";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.УчетВремениВЧасах		= Истина;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Оклад");
	Описание.КлючевыеСвойства = "УчетВремениВЧасах,ОбозначениеВТабелеУчетаРабочегоВремени";
	ПовременнаяПочасоваяОплата.Добавить(Описание);
	
	// Оплата по часовому тарифу
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ТРФЧС';uk='ТРФГД'");
	Описание.Наименование			= НСтр("ru='Оплата по часовому тарифу';uk='Оплата за годинним тарифом'");
	Описание.КраткоеНаименование 	= НСтр("ru='Часовой тариф';uk='Годинний тариф'");
	Описание.ФормулаРасчета			= "ТарифнаяСтавкаЧасовая * ВремяВЧасах";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.УчетВремениВЧасах		= Истина;
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ТарифнаяСтавкаЧасовая");
	Описание.КлючевыеСвойства = "УчетВремениВЧасах,ОбозначениеВТабелеУчетаРабочегоВремени";
	ПовременнаяПочасоваяОплата.Добавить(Описание);
	Если ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписаниям(КоллекторНачислений, ПовременнаяПочасоваяОплата);
	Иначе 
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Сдельный заработок (с минимальным часовым тарифом).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='СДЛЧС';uk='ВДРГД'");
	Описание.Наименование			= НСтр("ru='Сдельный заработок (для работающих по часовому тарифу)';uk='Відрядний заробіток (для працюючих за часовим тарифом)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Сдельно';uk='Відрядно'");
	Описание.ФормулаРасчета 		= "Макс(СдельныйЗаработок, ТарифнаяСтавкаЧасовая * ВремяВЧасах)";
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ТарифнаяСтавкаЧасовая");
	Описание.УчетВремениВЧасах 		= Истина;
	Описание.КлючевыеСвойства  		= "УчетВремениВЧасах";
	Если НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	НастройкиУчетаВремени = УчетРабочегоВремени.НастройкиУчетаВремени();
	
	// Доплата за ночные
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='НОЧН';uk='НІЧН'");
	Описание.Наименование			= НСтр("ru='Доплата за работу в ночное время';uk='Доплата за роботу в нічний час'");
	Описание.КраткоеНаименование 	= НСтр("ru='Ночные часы';uk='Нічні години'");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах * ПроцентДоплатыЗаРаботуВНочноеВремя / 100";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КлючевыеСвойства = "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиУчетаВремени.УчитыватьНочныеЧасы И ИспользоватьУчетВремениСотрудниковВЧасах Тогда	
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе	
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;	
	
	// Доплата за работу в праздничные дни (ночное время).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРНОЧ';uk='СВНІЧ'");
	Описание.Наименование			= НСтр("ru='Доплата за работу в праздничные дни (ночное время)';uk='Доплата за роботу в святкові дні (нічний час)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Ночные часы (праздн.)';uk='Нічні години (святк.)'");
	Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных 
		И НастройкиУчетаВремени.УчитыватьНочныеЧасы 
		И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата за вечерние
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ВЕЧЕР';uk='ВЕЧІР'");
	Описание.Наименование			= НСтр("ru='Доплата за работу в вечернее время';uk='Доплата за роботу у вечірній час'");
	Описание.КраткоеНаименование 	= НСтр("ru='Вечерние часы';uk='Вечірні години'");
	Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах * ПроцентДоплатыЗаРаботуВВечернееВремя / 100";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.КлючевыеСвойства = "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиУчетаВремени.УчитыватьВечерниеЧасы И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе	
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;	
	
	// Доплата за работу в праздничные дни (вечернее время).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРВЕЧ';uk='СВВЕЧ'");
	Описание.Наименование			= НСтр("ru='Доплата за работу в праздничные дни (вечернее время)';uk='Доплата за роботу в святкові дні (вечірній час)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Вечерние часы (праздн.)';uk='Вечірні години (святк.)'");
	Описание.ФормулаРасчета			= "СтоимостьЧаса * ВремяВЧасах";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных 
		И НастройкиУчетаВремени.УчитыватьВечерниеЧасы 
		И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	////// Оплата перерывов на кормление ребенка.
	////Описание = ОписаниеНачисления();
	////Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	////Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	////Описание.Код					= НСтр("ru='КОРМЛ'");
	////Описание.Наименование			= НСтр("ru='Оплата времени кормления ребенка'");
	////Описание.КраткоеНаименование 	= НСтр("ru='Кормл. ребенка'");
	////Описание.ФормулаРасчета			= "СреднийЗаработокОбщий * ВремяВЧасах";
	////Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	////Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.КормлениеРебенка");
	////Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеВПределахНормы;
	////Описание.КлючевыеСвойства = "ОбозначениеВТабелеУчетаРабочегоВремени";
	////Если НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
	////	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание);
	////Иначе	
	////	ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	////КонецЕсли;	
	
	// Сверхурочные
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='СВХУР';uk='НДУР'");
	Описание.Наименование			= НСтр("ru='Оплата сверхурочных часов';uk='Оплата понаднормових годин'");
	Описание.КраткоеНаименование 	= НСтр("ru='Сверхурочно';uk='Понаднормово'");
	Описание.ФормулаРасчета			= "ОтработаноСверхурочно * 2 * СтоимостьЧаса";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.КлючевыеСвойства = "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// - Оплата работы в праздничные и выходные дни.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРОПЛ';uk='СВОПЛ'");
	Описание.Наименование			= НСтр("ru='Оплата работы в праздничные и выходные дни';uk='Оплата роботи у святкові і вихідні дні'");
	Описание.КраткоеНаименование 	= НСтр("ru='Праздн. и выходн.';uk='Свят. і вихідн.'");
	Описание.ФормулаРасчета			= "ВремяВДняхЧасах * СтоимостьДняЧаса * 2";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Доплата за работу в праздничные дни (дневное время).
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРДОП';uk='СВДОП'");
	Описание.Наименование			= НСтр("ru='Доплата за работу в праздничные дни (дневное время)';uk='Доплата за роботу в святкові дні (денний час)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Праздн. и выходн.';uk='Свят. і вихідн.'");
	Описание.ФормулаРасчета			= "ВремяВДняхЧасах * СтоимостьДняЧаса";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени,СпособВыполненияНачисления";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Виды расчетов, связанные с использованием отгулов.
	// - сверхурочные без повышенной оплаты.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='СВУРН';uk='НДУРН'");
	Описание.Наименование			= НСтр("ru='Оплата сверхурочных часов без повышенной оплаты';uk='Оплата понаднормових годин без підвищеної оплати'");
	Описание.КраткоеНаименование 	= НСтр("ru='Сверхурочно норм.';uk='Понаднормово норм.'");
	Описание.ФормулаРасчета			= "ВремяВЧасах * СтоимостьЧаса";
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.КлючевыеСвойства = "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы И НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных И ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// - Оплата работы в праздничные и выходные дни без повышенной оплаты.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРОПН';uk='СВОПН'");
	Описание.Наименование			= НСтр("ru='Оплата работы в праздничные и выходные дни без повышенной оплаты';uk='Оплата роботи у святкові і вихідні дні без підвищеної оплати'");
	Описание.КраткоеНаименование 	= НСтр("ru='Праздн. и выходн. норм.';uk='Свят. і вихідн. норм.'");
	Описание.ФормулаРасчета			= "ВремяВДняхЧасах * СтоимостьДняЧаса";
	Описание.ВидВремени				= Перечисления.ВидыРабочегоВремениСотрудников.ОтработанноеСверхНормы;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПраздникиБезПовышеннойОплаты");
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете;
	Описание.КлючевыеСвойства		= "ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы И НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
		
	СоздатьВнутрисменныеОтклонения(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета);	
	
	Если Не ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		// Если не используется учет времени в часах, 
		// нужно отключить все часовые начисления, даже не соответствующие описанию.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.УчетВремениВЧасах
		|	И Начисления.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)");
		Выборка = Запрос.Выполнить().Выбрать();
		ПочасовыеНачисления = Новый Массив;
		Пока Выборка.Следующий() Цикл
			ПочасовыеНачисления.Добавить(Выборка.Ссылка);
		КонецЦикла;
		УстановитьИспользованиеНачислений(КоллекторНачислений, ПочасовыеНачисления, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеНадбавкаЗаКвалификационнуюКатегорию(ПараметрыПланаВидовРасчета, КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты)
	
	ИспользоватьНадбавкуЗаКвалификационнуюКатегорию = НастройкиРасчетаЗарплаты.ИспользоватьКвалификационнуюНадбавку;
	
	КвалификационнаяНадбавка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КвалификационнаяНадбавка");
	
	НадбавкиЗаКвалификационнуюКатегорию = Новый Массив;
	
	Если КвалификационнаяНадбавка <> Неопределено Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Показатель", КвалификационнаяНадбавка);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		               |ГДЕ
		               |	НачисленияПоказатели.Показатель = &Показатель";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			НадбавкиЗаКвалификационнуюКатегорию.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НадбавкиЗаКвалификационнуюКатегорию.Количество() > 0 Тогда 
		Если ИспользоватьНадбавкуЗаКвалификационнуюКатегорию Тогда 
			УстановитьИспользованиеНачислений(КоллекторНачислений, НадбавкиЗаКвалификационнуюКатегорию, Истина);
		Иначе
			УстановитьИспользованиеНачислений(КоллекторНачислений, НадбавкиЗаКвалификационнуюКатегорию, Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Надбавка за квалификационную категорию
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='НКК';uk='НКК'");
	Описание.Наименование			= НСтр("ru='Надбавка за квалификационную категорию';uk='Надбавка за кваліфікаційну категорію'");
	Описание.КраткоеНаименование 	= НСтр("ru='Квалиф. категория';uk='Кваліф. категорія'");
	Описание.ФормулаРасчета			= "КвалификационнаяНадбавка * ДоляНеполногоРабочегоВремени * ВремяВДнях / НормаДней";
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
	Описание.УчетВремениВЧасах		= Ложь;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	Описание.ЗапрашиваемыеПоказатели  = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("КвалификационнаяНадбавка");
	Описание.КлючевыеСвойства = "Ссылка";
	Если ИспользоватьНадбавкуЗаКвалификационнуюКатегорию Тогда 
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВнутрисменныеОтклонения(КоллекторНачислений, СвойстваНачислений, НастройкиРасчетаЗарплаты, ПараметрыПланаВидовРасчета)
	
	// Внутрисменная командировка
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЧСКМД';uk='ГДВДР'");
	Описание.Наименование			= НСтр("ru='Командировка (внутрисменная)';uk='Відрядження (внутрішньозмінне)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Командировка';uk='Відрядження'");
	Описание.ФормулаРасчета			= "СреднийЗаработокОбщий * ВремяВЧасах";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Описание.ЗапрашиваемыеПоказатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СреднийЗаработокОбщий");
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок
		И НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе	
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Оплата «донорских» дней внутрисменная.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЧСДОНОР';uk='ГДДОНОР'");
	Описание.Наименование			= НСтр("ru='Оплата за дни сдачи крови и ее компонентов (внутрисменная)';uk='Оплата за дні здачі крові та її компонентів (внутрішньозмінна)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Донорство';uk='Донорство'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ГосударственныеОбязанности");
	Описание.СсылкаНаОбъект = ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаДнейСдачиКровиВнутрисменная;
	Описание.КлючевыеСвойства = "Ссылка";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах
		 И ПараметрыПланаВидовРасчета.ИспользоватьОплатуДнейСдачиКрови
		 И ПараметрыПланаВидовРасчета.ИспользоватьОплатуДнейСдачиКровиВнутрисменных Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
		ПараметрыПланаВидовРасчета.СсылкиНачисленийУдержаний.ОплатаДнейСдачиКровиВнутрисменная = Описание.СсылкаНаОбъект;
	ИначеЕсли ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы Тогда
		Описание.Вставить("Ссылка", Описание.СсылкаНаОбъект);
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;

	// Отпуск без оплаты согласно КЗоТ.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЧСОЗ';uk='ГДВЗ'");
	Описание.Наименование			= НСтр("ru='Отпуск без оплаты согласно КЗоТ (внутрисменный)';uk='Відпустка без оплати згідно КЗпП (внутрішньозмінна)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Отп. без опл.';uk='Відп. без опл.'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчетПоСоглашению");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты
		И НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отпуск за свой счет
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЧСДО';uk='ГДДВ'");
	Описание.Наименование			= НСтр("ru='Отпуск за свой счет (внутрисменный)';uk='Відпустка за свій рахунок (внутрішньозмінна)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Отп. за свой счет';uk='Відп. за свій рахунок'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаСвойСчет");
	Описание.КлючевыеСвойства = "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты
		И НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
		
	// Дополнительный учебный отпуск без оплаты.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЧСУД';uk='ГДНД'");
	Описание.Наименование			= НСтр("ru='Дополнительный учебный отпуск без оплаты (внутрисменный)';uk='Додаткова навчальна відпустка без оплати (внутрішньозмінна)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Учебн. отп. без опл';uk='Навч. відп. без опл'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый");
	Описание.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускБезОплатыУчебный");
	Описание.КлючевыеСвойства = "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени,ВидОтпуска";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты
		И НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отсутствие по невыясненной причине.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЧСНВХ';uk='ГДНВХ'");
	Описание.Наименование			= НСтр("ru='Отсутствие по невыясненной причине (внутрисменное)';uk='Відсутність з нез''ясованих причин (внутрішньозмінна)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Неявка';uk='Неявка'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Внутрисменный прогул
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЧСПРГ';uk='ГДПРГ'");
	Описание.Наименование			= НСтр("ru='Внутрисменный прогул';uk='Внутрішньозмінний прогул'");
	Описание.КраткоеНаименование 	= НСтр("ru='Прогул';uk='Прогул'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы");
	Описание.КлючевыеСвойства		= "ВидВремени,ОбозначениеВТабелеУчетаРабочегоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по вине работника
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРВРЧ';uk='ПРВРЧ'");
	Описание.Наименование			= НСтр("ru='Внутрисменный простой по вине работника';uk='Внутрішньозмінний простій з вини працівника'");
	Описание.КраткоеНаименование 	= НСтр("ru='Простой без опл.';uk='Простій без опл.'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев
		И НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по независящим от работодателя причинам.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ЧСПРО';uk='ГДПРО'");
	Описание.Наименование			= НСтр("ru='Оплата часового простоя от оклада по часам';uk='Оплата годинного простою від окладу по годинах'");
	Описание.КраткоеНаименование 	= НСтр("ru='Простой';uk='Простій'");
	Описание.ФормулаРасчета 		= "СреднийЗаработокОбщий * (2/3) * ВремяВЧасах";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев
		И НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Простой по вине работодателя.
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ПРСРЧ';uk='ПРСРЧ'");
	Описание.Наименование			= НСтр("ru='Оплата часового простоя по среднему заработку';uk='Оплата годинного простою за середнім заробітком'");
	Описание.КраткоеНаименование 	= НСтр("ru='Простой';uk='Простій'");
	Описание.ФормулаРасчета 		= "СтоимостьДняЧаса * (2/3) * ВремяВЧасах";
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.КлючевыеСвойства		= "ВидВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев
		И НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
	// Отгул (внутрисменный)
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='ОТГВС';uk='ВДГВЗ'");
	Описание.Наименование			= НСтр("ru='Отгул (внутрисменный)';uk='Відгул (внутрішньозмінний)'");
	Описание.КраткоеНаименование 	= НСтр("ru='Отгул (внутрисменный)';uk='Відгул (внутрішньозмінний)'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	Описание.ОбозначениеВТабелеУчетаРабочегоВремени	= ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДругиеНеявкиПоКолДоговору");
	Описание.КлючевыеСвойства = "ВидВремени,КатегорияНачисленияИлиНеоплаченногоВремени";
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы
		И НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтгулы 
		И НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах Тогда
		СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	Иначе
		ОтключитьИспользованиеНачисленийПоОписанию(КоллекторНачислений, Описание);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачислениеДниОплаченныеДоНачалаЭксплуатации(ПараметрыПланаВидовРасчета, КоллекторНачислений = Неопределено, КоллекторУдержаний = Неопределено, СвойстваНачислений = Неопределено) Экспорт 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ЗаписыватьНачисления = Ложь;
	Если КоллекторНачислений = Неопределено 
		Или КоллекторУдержаний = Неопределено Тогда
		// Если метод используется отдельно от формирования плана видов расчета по настройкам, 
		// то запись начислений производится в нем, локально.
		КоллекторНачислений = Новый Соответствие;
		КоллекторУдержаний = Новый Соответствие;
		ЗаписыватьНачисления = Истина;
	КонецЕсли;
	
	Если СвойстваНачислений = Неопределено Тогда
		СвойстваНачислений = СвойстваНачисленийПоКатегориям();
	КонецЕсли;
	
	Описание = ОписаниеНачисления();
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами;
	Описание.СвойстваПоКатегории 	= СвойстваНачислений[Описание.КатегорияНачисленияИлиНеоплаченногоВремени];
	Описание.Код					= НСтр("ru='УЧТДН';uk='ВРХДП'");
	Описание.Наименование			= НСтр("ru='Дни, учтенные до начала эксплуатации';uk='Дні, враховані до початку експлуатації'");
	Описание.КраткоеНаименование 	= НСтр("ru='Дни, уже учтенные ранее';uk='Дні, вже враховані раніше'");
	Описание.ВидВремени 			= Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	Описание.КлючевыеСвойства 							= "КатегорияНачисленияИлиНеоплаченногоВремени";
	СоздатьИзменитьНачисленияПоОписанию(КоллекторНачислений, Описание,,ПараметрыПланаВидовРасчета.НачальнаяНастройкаПрограммы);
	
	Если ЗаписыватьНачисления Тогда
		ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний);
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваНачисленияПоКатегорииПоУмолчанию()
	
	Описание = Новый Структура(
	"СпособВыполненияНачисления, 
	|СпособРасчета, 
	|ФормулаРасчета, 
	|ВидДокументаНачисления, 
	|ВидПособияСоциальногоСтрахования, 
	|ВидВремени, 
	|ОбозначениеВТабелеУчетаРабочегоВремени,
	|ВидОтпуска, 
	|ВидОперацииПоЗарплате,
	|ПериодРасчетаБазовыхНачислений,
	|КоличествоМесяцевБазовогоПериода,
	|СдвигБазовогоПериода,
	|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
	|КодДоходаНДФЛ,
	|ЗачетНормыВремени,
	|ЗачетОтработанногоВремени,
	|НачисляетсяПриРасчетеПервойПоловиныМесяца,
	|ОтборБазовых,
	|ОтборВытесняющих,
	|ОтборВедущих,
	|ИменаИнструкций, 
	|ПараметрыВыбора, 
	|НедоступныеСвойства, 
	|СтратегияОтраженияВСреднемЗаработке,           
	|ВключатьВСреднийЗаработокОбщий, 
	|СреднийЗаработокОбщий, 
	|ИндексируетсяСреднийЗаработокОбщий,
	|ВключатьВСреднийЗаработокФСС,
	|СпособОтраженияЗарплатыВБухучете, 
	|СтатьяФинансирования, 
	|СтатьяРасходов, 
	|СтратегияОтраженияВУчете,           
	|ЯвляетсяДоходомВНатуральнойФорме,
	|ВключатьВФОТ,
	|Рассчитывается,
	|ПоддерживаетНесколькоПлановыхНачислений,
	|ВидЕСВ,
	|ГруппаУчета,
	|Отчет1ПВПоказателиВидовОплатыТруда,
	|Отчет3ПВВидИспользованияРабочегоВремени,
	|ВидНачисленияДляТиповыхОтчетов,
	|ВключатьВСреднийЗаработокОбщийОтпускные, 
	|СреднийЗаработокОбщийОтпускные, 
	|ИндексируетсяСреднийЗаработокОбщийОтпускные");
	
	// Недоступные свойства: строка, в которой перечислены имена свойств начислений, 
	// выбор которых недоступен для указанной категории.
	
	// Свойства по умолчанию	
	Описание.СпособВыполненияНачисления = Перечисления.СпособыВыполненияНачислений.ПустаяСсылка();
	Описание.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПустаяСсылка();
	Описание.ФормулаРасчета = "";
	Описание.ВидДокументаНачисления = Перечисления.ВидыДокументовНачисления.ПустаяСсылка();
	Описание.ВидПособияСоциальногоСтрахования = Перечисления.ПереченьПособийСоциальногоСтрахования.ПустаяСсылка();
	Описание.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ПустаяСсылка();
	Описание.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
	Описание.ВключатьВСреднийЗаработокОбщий = Ложь;
	Описание.ВключатьВСреднийЗаработокФСС = Ложь;
	Описание.КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код101;
	Описание.ВидОперацииПоЗарплате = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход;
	Описание.СтратегияОтраженияВСреднемЗаработке = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета;
	Описание.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях;
	Описание.Рассчитывается = Истина;
	Описание.ПоддерживаетНесколькоПлановыхНачислений = Ложь;
	Описание.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата;
	Описание.Отчет1ПВПоказателиВидовОплатыТруда = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка(); 
	Описание.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
	Описание.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ПустаяСсылка();
	Описание.ГруппаУчета = Справочники.ГруппыУчетаНачисленийИУдержаний.Зарплата;
    Описание.ВключатьВСреднийЗаработокОбщийОтпускные = Ложь;
	
	// Самый распространенный набор недоступных полей.
	НедоступныеСвойстваПоУмолчанию = Новый Массив;
	НедоступныеСвойстваПоУмолчанию.Добавить("ВключатьВСреднийЗаработокОбщий");
	НедоступныеСвойстваПоУмолчанию.Добавить("СреднийЗаработокОбщий");
	НедоступныеСвойстваПоУмолчанию.Добавить("ИндексируетсяСреднийЗаработокОбщий");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВключатьВСреднийЗаработокФСС");
	НедоступныеСвойстваПоУмолчанию.Добавить("СпособВыполненияНачисления");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВидОтпуска");
	НедоступныеСвойстваПоУмолчанию.Добавить("ВидДокументаНачисления");
	Описание.НедоступныеСвойства = НедоступныеСвойстваПоУмолчанию;
	
	Описание.ИменаИнструкций = "НедоступныеСвойства,КлючевыеСвойства,ИменаИнструкций,ПараметрыВыбора,ОтборБазовых,ОтборВытесняющих,ОтборВедущих"; 
	
	Возврат Описание;
	
КонецФункции

Функция ПараметрыВыбораСвойствНачисления()
	
	СтруктураПараметровВыбора = Новый Структура(
		"КодДоходаНДФЛ, 
		|ВидДокументаНачисления,
		|СреднийЗаработокОбщий,
		|ВидОтпуска");
		
	Возврат СтруктураПараметровВыбора;
	
КонецФункции

// Конструирует структуру для описания создаваемого или изменяемого начисления.
//
Функция ОписаниеНачисления() Экспорт 
	
	Описание = Новый Структура(
	"Код,
	|РеквизитДопУпорядочивания,
	|Наименование,
	|КраткоеНаименование,
	|КатегорияНачисленияИлиНеоплаченногоВремени,
	|КодДоходаНДФЛ,
	|СпособВыполненияНачисления,
	|ВидДокументаНачисления,
	|СпособРасчета,
	|ФормулаРасчета,
	|НачисляетсяПриРасчетеПервойПоловиныМесяца,
	|ВидВремени,
	|ОбозначениеВТабелеУчетаРабочегоВремени,
	|ЗачетНормыВремени,
	|ЗачетОтработанногоВремени,
	|ВидПособияСоциальногоСтрахования,
	|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
	|ПериодРасчетаБазовыхНачислений,
	|КоличествоМесяцевБазовогоПериода,
	|СдвигБазовогоПериода,
	|ОтборБазовых,
	|СтратегияОтраженияВСреднемЗаработке,
	|СреднийЗаработокОбщий,
	|ВключатьВСреднийЗаработокОбщий,
	|СреднийЗаработокФСС,
	|ВключатьВСреднийЗаработокФСС,
	|КлючевыеСвойства,
	|ВидОперацииПоЗарплате,
	|ВидОтпуска,
	|УчетВремениВЧасах,
	|ОпределяющиеПоказатели,
	|ЗапрашиваемыеПоказатели,
	|СвойстваПоКатегории,
	|МесяцыНачисления,
	|ЯвляетсяДоходомВНатуральнойФорме,
	|Рассчитывается,
	|ПоддерживаетНесколькоПлановыхНачислений,
	|ВключатьВФОТ,
	|ВидЕСВ,
	|Отчет1ПВПоказателиВидовОплатыТруда,
	|Отчет3ПВВидИспользованияРабочегоВремени,
	|ВидНачисленияДляТиповыхОтчетов,
	|ГруппаУчета,
	|СреднийЗаработокОбщийОтпускные,
	|ВключатьВСреднийЗаработокОбщийОтпускные,
	|СсылкаНаОбъект"); // Содержит ссылку на объект, который уже был создан Из помощника начальной настройки программы.
	
	Возврат Описание;
	
КонецФункции

// Процедура получает объекты видов расчета по указанному описанию.
// Подробнее см. комментарий к методу СоздатьИзменитьНачисленияПоОписанию.
//
Процедура СоздатьИзменитьНачисленияПоОписаниям(Коллектор, МассивОписаний)
	
	Если МассивОписаний.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверить наличие по ключевым свойствам первого описания 
	// (описание ключевых свойств у них должно быть одинаковым).
	ОписаниеКлючевыхСвойств = МассивОписаний[0];
	
	НачисленияПоОписанию = НачисленияПоОписанию(МассивОписаний[0]);
	
	Если НачисленияПоОписанию.Количество() > 0 Тогда
		// Если начисления по такому описанию уже существуют, 
		// надо проверить все ли они используются, если нет - нужно их «включить».
		УстановитьИспользованиеНачислений(Коллектор, НачисленияПоОписанию, Истина);
		Возврат;
	КонецЕсли;
	
	// Если нет - создать по массиву описаний, не проверяя при этом на наличие.
	Для Каждого Описание Из МассивОписаний Цикл
		ДополнитьОписаниеПоСвойствамКатегории(Описание);
		СоздатьИзменитьНачисленияПоОписанию(Коллектор, Описание, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает объекты видов расчета по указанному описанию, 
// устанавливает им использование и добавляет в коллектор, 
// если начислений с указанным описанием не обнаружено, 
// они создаются и так же добавляются в коллектор.
//
// Параметры:
// 	- Коллектор - соответствие, где ключ ссылка, а значение объект вида расчета.
//	- Описание - структура с описанием начисления.
//	- ПроверятьНаличиеНачислений - признак того, что создавать начисления нужно только в случае их отсутствия.
//	- ОбновлятьНачисленияПоСсылке, если Истина, начисления, для которых ключевым свойством является Ссылка, и которые уже существуют, будут обновлены данными из описания
//
Процедура СоздатьИзменитьНачисленияПоОписанию(Коллектор, Описание, ПроверятьНаличиеНачислений = Истина, ОбновлятьНачисленияПоСсылке = Ложь, ВсегдаОбновлять = Ложь) Экспорт 
 
	
	НачислениеОбъект = Неопределено;
	
	ДополнитьОписаниеПоСвойствамКатегории(Описание);
	
	Если ПроверятьНаличиеНачислений Тогда
		Если Описание.КлючевыеСвойства = "Ссылка" Тогда
			НачислениеОбъект = НачислениеОбъектПоСсылке(Описание.СсылкаНаОбъект);
			Если Не ОбновлятьНачисленияПоСсылке И НачислениеОбъект <> Неопределено Тогда
				УстановитьИспользованиеНачислений(Коллектор, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Описание.СсылкаНаОбъект), Истина);
				Возврат;
			КонецЕсли;
		Иначе
			НачисленияПоОписанию = НачисленияПоОписанию(Описание);
			Если НачисленияПоОписанию.Количество() > 0 Тогда
				Если Не ОбновлятьНачисленияПоСсылке Тогда
					Если НЕ ВсегдаОбновлять Тогда
						// Если начисления по такому описанию уже существуют, 
						// надо проверить все ли они используются, если нет - нужно их «включить».
						УстановитьИспользованиеНачислений(Коллектор, НачисленияПоОписанию, Истина);
						Возврат;
					Иначе
						Для Каждого Начисление из НачисленияПоОписанию  Цикл
							НачислениеОбъект = Начисление.ПолучитьОбъект();
						КонецЦикла;
					КонецЕсли;	
				Иначе
					Описание.КлючевыеСвойства = "Ссылка";
					Для Каждого СсылкаДляОбновления ИЗ НачисленияПоОписанию Цикл
						Описание.СсылкаНаОбъект = СсылкаДляОбновления;
						СоздатьИзменитьНачисленияПоОписанию(Коллектор, Описание, Истина, Истина);
					КонецЦикла;
					Возврат;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НачислениеОбъект = Неопределено Тогда
		// Если начислений по указанному описанию не существует, создаем их.
		НачислениеОбъект = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		
		// Устанавливаем ссылку новому объекту.
		НачислениеСсылка = ПланыВидовРасчета.Начисления.ПолучитьСсылку();
		Описание.СсылкаНаОбъект = НачислениеСсылка;
		НачислениеОбъект.УстановитьСсылкуНового(НачислениеСсылка);	
	Иначе
		НачислениеСсылка = НачислениеОбъект.Ссылка;
		НачислениеОбъект.ВАрхиве = Ложь;
		НачислениеОбъект.ПометкаУдаления = Ложь;
	КонецЕсли;
	Коллектор.Вставить(НачислениеСсылка, НачислениеОбъект);
	
	СвойстваПоКатегории = Описание.СвойстваПоКатегории;
	
	ЗаполнитьЗначенияСвойств(НачислениеОбъект, Описание);
	
	НачислениеОбъект.МесяцыНачисления.Очистить();
	Если Описание.МесяцыНачисления <> Неопределено Тогда
		Для каждого МесяцНачисления Из Описание.МесяцыНачисления Цикл
			НовыйМесяц = НачислениеОбъект.МесяцыНачисления.Добавить();
			НовыйМесяц.Месяц = МесяцНачисления;
		КонецЦикла;
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьТаблицуПоказателейВидаРасчета(НачислениеОбъект);
	
	// Средний заработок (общий)
	НачислениеОбъект.СреднийЗаработокОбщий.Очистить();
	Если СвойстваПоКатегории.ВключатьВСреднийЗаработокОбщий Тогда
		НоваяСтрока = НачислениеОбъект.СреднийЗаработокОбщий.Добавить();
		НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010;
		НоваяСтрока.Значение = Описание.СреднийЗаработокОбщий;
		Если Не ЗначениеЗаполнено(Описание.СреднийЗаработокОбщий) Тогда
			НоваяСтрока.Значение = СвойстваПоКатегории.СреднийЗаработокОбщий;
		КонецЕсли;
		НоваяСтрока.Индексируется = Истина;
	КонецЕсли;
	
	Если СвойстваПоКатегории.ВключатьВСреднийЗаработокОбщийОтпускные Тогда
		НоваяСтрока = НачислениеОбъект.СреднийЗаработокОбщий.Добавить();
		НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные;
		НоваяСтрока.Значение = Описание.СреднийЗаработокОбщийОтпускные;
		Если Не ЗначениеЗаполнено(Описание.СреднийЗаработокОбщийОтпускные) Тогда
			НоваяСтрока.Значение = СвойстваПоКатегории.СреднийЗаработокОбщийОтпускные;
		КонецЕсли;
		НоваяСтрока.Индексируется = Истина;
	КонецЕсли;
	
	// Средний заработок (ФСС)
	НачислениеОбъект.СреднийЗаработокФСС.Очистить();
	Если СвойстваПоКатегории.ВключатьВСреднийЗаработокФСС Тогда
		// 2011
		НоваяСтрока = НачислениеОбъект.СреднийЗаработокФСС.Добавить();
		НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаФСС.Постановление2011;
		НоваяСтрока.Значение = Перечисления.УчетНачисленийВСреднемЗаработкеФСС.Включать;
	КонецЕсли;

	// Базовые начисления
	НачислениеОбъект.ДополнительныеСвойства.Вставить("ОтборБазовых", Описание.ОтборБазовых);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.УстановитьДополнительныеСвойстваНачисления(НачислениеОбъект, Описание);
	КонецЕсли;
	
	// Определяющие показатели
	ЗарплатаКадрыРасширенный.ОтметитьОпределяющиеПоказатели(НачислениеОбъект, Описание.ОпределяющиеПоказатели);	
	
	// Запрашиваемые показатели
	ЗарплатаКадрыРасширенный.ОтметитьЗапрашиваемыеПоказатели(НачислениеОбъект, Описание.ЗапрашиваемыеПоказатели);	
	
	// Некоторые признаки используются при настройке связей, поэтому рассчитаем их здесь, до записи.
	НачислениеОбъект.НачисляетсяВЦеломЗаМесяц = РасчетЗарплатыРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект);
	НачислениеОбъект.ТребуетсяРасчетБазы = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(НачислениеОбъект.Показатели, "РасчетнаяБаза");
	НачислениеОбъект.УчетВремениВЧасах = РасчетЗарплатыРасширенный.НачислениеРассчитываетсяПоЧасам(НачислениеОбъект);
	НачислениеОбъект.ЗачетОтработанногоВремени = ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(НачислениеОбъект.ВидВремени);
	
КонецПроцедуры

Процедура УстановитьИспользованиеНачислений(Коллектор, Начисления, Использование)
	
	// Если какие-то начисления уже есть в коллекторе, 
	// то устанавливаем признак использования прямо в объектах коллектора.
	Индекс = 0;
	Пока Индекс < Начисления.Количество() Цикл
		Начисление = Начисления[Индекс];
		НачислениеОбъект = Коллектор[Начисление];
		Если НачислениеОбъект = Неопределено Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		// Устанавливаем признак и удаляем начисление из массива.
		НачислениеОбъект.ВАрхиве = Не Использование;
		Начисления.Удалить(Индекс);
	КонецЦикла;
	
	Если Начисления.Количество() = 0 Тогда
		// Все начисления уже обработаны.
		Возврат;
	КонецЕсли;
	
	// Запрашиваем из базы начисления, использование которых отличается от указанного.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&Начисления)
	|	И Начисления.ВАрхиве
	|	И Начисления.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Запрос.УстановитьПараметр("ВАрхиве", Не Использование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Коллектор[Выборка.Ссылка];
		Если НачислениеОбъект = Неопределено Тогда
			НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Коллектор.Вставить(Выборка.Ссылка, НачислениеОбъект);
		КонецЕсли;
		НачислениеОбъект.ВАрхиве = Не Использование;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьОписаниеПоСвойствамКатегории(Описание)
	
	// Обновляем описание по свойствам категории.
	СвойстваПоКатегории = Описание.СвойстваПоКатегории;
	Для Каждого КлючИЗначение Из СвойстваПоКатегории Цикл
		Если Не Описание.Свойство(КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		// Обновляем только в случае, если значение для категории определено, 
		// а в описании начисления не переопределяется.
		Если КлючИЗначение.Значение <> Неопределено 
			И Описание[КлючИЗначение.Ключ] = Неопределено Тогда
			Описание[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НачисленияПоОписанию(Описание)
	
	ДополнитьОписаниеПоСвойствамКатегории(Описание);
	
	// Если указаны, ключевые свойства используются для уточнения критериев отбора искомого начисления.
	Если ЗначениеЗаполнено(Описание.КлючевыеСвойства) Тогда
		Отбор = Новый Структура(Описание.КлючевыеСвойства);
		ЗаполнитьЗначенияСвойств(Отбор, Описание);
		// Если какое-то из ключевых свойств не заполнено, поиск будет неверным.
		Для Каждого КлючИЗначение Из Отбор Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Возврат Новый Массив;
			КонецЕсли;
		КонецЦикла;
		Отбор.Вставить("ПометкаУдаления", Ложь);
	Иначе 
		Отбор = Новый Структура("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Возврат НачисленияПоКатегории(Описание.КатегорияНачисленияИлиНеоплаченногоВремени, Отбор);
	
КонецФункции

Функция ВидыРасчетаКоллектораПоКатегории(Коллектор, КатегорияОтбор, Отбор = Неопределено) Экспорт 
	
	ВидыРасчетаПоКатегории = Новый Массив;
	
	Для Каждого КлючИЗначение Из Коллектор Цикл
		ВидРасчетаСсылка = КлючИЗначение.Ключ;
		ВидРасчетаОбъект = КлючИЗначение.Значение;
		Если ВидРасчетаСоответствуетОтбору(ВидРасчетаОбъект, КатегорияОтбор, Отбор) Тогда
			ВидыРасчетаПоКатегории.Добавить(ВидРасчетаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыРасчетаПоКатегории;
	
КонецФункции

Функция ВидыРасчетаКоллектораПоОтбору(Коллектор, Отбор)
	
	ВидыРасчета = Новый Массив;
	
	Для Каждого КлючИЗначение Из Коллектор Цикл
		ВидРасчетаСсылка = КлючИЗначение.Ключ;
		ВидРасчетаОбъект = КлючИЗначение.Значение;
		СоответствуетОтбору = Истина;
		Для Каждого ЭлементОтбора Из Отбор Цикл
			ПолеОтбора = ЭлементОтбора.Ключ;
			ЗначениеОтбора = ЭлементОтбора.Значение;
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				Если ЗначениеОтбора.Найти(ВидРасчетаОбъект[ПолеОтбора]) = Неопределено Тогда
					СоответствуетОтбору = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				Если ВидРасчетаОбъект[ПолеОтбора] <> ЗначениеОтбора Тогда
					СоответствуетОтбору = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СоответствуетОтбору Тогда
			ВидыРасчета.Добавить(ВидРасчетаСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыРасчета;
	
КонецФункции

Функция КатегорияВидаРасчета(ВидРасчетаОбъект)
	
	Если ТипЗнч(ВидРасчетаОбъект) = Тип("ПланВидовРасчетаОбъект.Начисления") Тогда
		Возврат ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени;
	КонецЕсли;
	
	Если ТипЗнч(ВидРасчетаОбъект) = Тип("ПланВидовРасчетаОбъект.Удержания") Тогда
		Возврат ВидРасчетаОбъект.КатегорияУдержания;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОтключитьИспользованиеНачисленийПоОписанию(Коллектор, Описание) Экспорт 
	
	УстановитьИспользованиеНачислений(Коллектор, НачисленияПоОписанию(Описание), Ложь);

КонецПроцедуры

// Заполняет табличные части базовых и вытесняющих видов расчета для начислений, 
// содержащихся в коллекторе в соответствии со свойствами начислений.
//
Процедура НастроитьБазовыеНачисленияУдержаний(КоллекторНачислений, КоллекторУдержаний)
	
	// Обходим коллектор начислений,
	// в соответствии с категорией определяем, 
	// - из чего состоит база.
	
	// По указанным критериям делаем запрос к базе и поиск по коллектору же еще не записанных начислений, 
	// из найденных в базе начислений отбрасываем добавленные в коллектор, 
	// т.к. считаем их версию в коллекторе более актуальной.
	
	Для Каждого КлючИЗначение Из КоллекторУдержаний Цикл
		УдержаниеСсылка = КлючИЗначение.Ключ;
		УдержаниеОбъект = КлючИЗначение.Значение;
		
		ЭтоНовоеУдержание = ЗначениеЗаполнено(УдержаниеОбъект.Ссылка);
		КатегорияУдержания = УдержаниеОбъект.КатегорияУдержания;
		
		// Базовые начисления
		ОтборБазовых = Неопределено;
		Если УдержаниеОбъект.ДополнительныеСвойства.Свойство("ОтборБазовых") Тогда
			ОтборБазовых = УдержаниеОбъект.ДополнительныеСвойства.ОтборБазовых;
		КонецЕсли;
		Если ОтборБазовых <> Неопределено И РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(УдержаниеОбъект.Показатели, "РасчетнаяБаза") Тогда
			ОтборБазовых = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборБазовых);
			Категория = ОтборБазовых.КатегорияНачисления;
			ОтборБазовых.Удалить("КатегорияНачисления");
			// Начисления по условию из коллектора.
			БазовыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборБазовых);
			// ..Дополняются по условию из базы данных.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				БазовыеНачисления, РасчетЗарплаты.НачисленияПоКатегории(Категория, ОтборБазовых), Истина);
			// Заполняем табличную часть полученными базовыми начислениями.
			Для Каждого БазовоеНачисление Из БазовыеНачисления Цикл
				ЭтоНовоеБазовоеНачисление = Ложь;
				БазовоеНачислениеОбъект = КоллекторНачислений[БазовоеНачисление];
				Если БазовоеНачислениеОбъект <> Неопределено Тогда 
					ЭтоНовоеБазовоеНачисление = Не ЗначениеЗаполнено(БазовоеНачислениеОбъект.Ссылка);
				КонецЕсли;
				Если Не ЭтоНовоеУдержание И Не ЭтоНовоеБазовоеНачисление Тогда 
					Продолжить;
				КонецЕсли;
				// Меняем базу существующего удержания, только если это испольнительный лист или профвзносы.
				Если Не ЭтоНовоеУдержание 
					И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ИсполнительныйЛист
					И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ПрофсоюзныеВзносы Тогда 
					Продолжить;
				КонецЕсли;
				Если УдержаниеОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено Тогда
					УдержаниеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Если есть зависимые от начислений в коллекторе удержания, нужно обновить их базу.
	СвойстваУдержаний = ПланыВидовРасчета.Удержания.СвойстваУдержанийПоКатегориям();
	Для Каждого КлючИЗначение Из СвойстваУдержаний Цикл
		КатегорияУдержания = КлючИЗначение.Ключ;
		СвойстваУдержания = КлючИЗначение.Значение;
		
		Если Не ЗначениеЗаполнено(КатегорияУдержания) Тогда
			Продолжить;
		КонецЕсли;
		
		// Базовые начисления
		ОтборБазовых = СвойстваУдержания.ОтборБазовых;
		Если ОтборБазовых <> Неопределено Тогда
			ОтборБазовых = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОтборБазовых);
			Категория = ОтборБазовых.КатегорияНачисления;
			ОтборБазовых.Удалить("КатегорияНачисления");
			// Начисления по условию из коллектора.
			БазовыеНачисления = ВидыРасчетаКоллектораПоКатегории(КоллекторНачислений, Категория, ОтборБазовых);
			Если БазовыеНачисления.Количество() > 0 Тогда
				// В коллекторе есть начисления, являющиеся базовыми для данной категории удержания.
				// Зависимые удержания могут быть как в ИБ, так и в коллекторе.
				// Сначала собираем по коллектору...
				ЗависимыеУдержания = ВидыРасчетаКоллектораПоКатегории(КоллекторУдержаний, КатегорияУдержания);
				// .. Дополняем из базы данных.
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗависимыеУдержания, 
					РасчетЗарплаты.УдержанияПоКатегории(КатегорияУдержания), Истина);
				Для Каждого ЗависимоеУдержание Из ЗависимыеУдержания Цикл
					ЗависимоеУдержаниеОбъект = КоллекторУдержаний[ЗависимоеУдержание];
					ДобавленоВКоллектор = Ложь;
					Если ЗависимоеУдержаниеОбъект = Неопределено Тогда
						ЗависимоеУдержаниеОбъект = ЗависимоеУдержание.ПолучитьОбъект();
						КоллекторУдержаний.Вставить(ЗависимоеУдержание, ЗависимоеУдержаниеОбъект);
						ДобавленоВКоллектор = Истина;
					КонецЕсли;
					ЭтоНовоеЗависимоеУдержание = Не ЗначениеЗаполнено(ЗависимоеУдержаниеОбъект.Ссылка);
					// Определяем, если вообще зависимому начислению нужен список базовых видов расчета.
					Обновлено = Ложь;
					Если РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ЗависимоеУдержаниеОбъект.Показатели, "РасчетнаяБаза") Тогда
						Для Каждого БазовоеНачисление Из БазовыеНачисления Цикл
							ЭтоНовоеБазовоеНачисление = Ложь;
							БазовоеНачислениеОбъект = КоллекторНачислений[БазовоеНачисление];
							Если БазовоеНачислениеОбъект <> Неопределено Тогда 
								ЭтоНовоеБазовоеНачисление = Не ЗначениеЗаполнено(БазовоеНачислениеОбъект.Ссылка);
							КонецЕсли;
							Если Не ЭтоНовоеЗависимоеУдержание И Не ЭтоНовоеБазовоеНачисление Тогда 
								Продолжить;
							КонецЕсли;
							// Меняем базу существующего удержания, только если это испольнительный лист или профвзносы.
							Если Не ЭтоНовоеЗависимоеУдержание 
								И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ИсполнительныйЛист
								И КатегорияУдержания <> Перечисления.КатегорииУдержаний.ПрофсоюзныеВзносы Тогда 
								Продолжить;
							КонецЕсли;
							Если ЗависимоеУдержаниеОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено Тогда
								ЗависимоеУдержаниеОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
								Обновлено = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ДобавленоВКоллектор И Не Обновлено Тогда 
						// Удаляем, чтобы избежать "холостой" записи.
						КоллекторУдержаний.Удалить(ЗависимоеУдержание);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет комплекс процедур по обработке накопленных в коллекторе начислений.
//
Процедура ЗаписатьВидыРасчетаКоллектора(КоллекторНачислений, СвойстваНачислений, КоллекторУдержаний = Неопределено) Экспорт
	
	// Выполняем настройку связей созданных видов расчета.
	НастроитьСвязиНачислений(КоллекторНачислений, СвойстваНачислений);
	
	Если КоллекторУдержаний <> Неопределено Тогда
		// Заполняем список базовых начислений для удержаний.
		НастроитьБазовыеНачисленияУдержаний(КоллекторНачислений, КоллекторУдержаний);
	КонецЕсли;
	
	// Расставляем порядок для вновь созданных видов расчета.
	ЗаполнитьПорядокНачислений(КоллекторНачислений);
	
	// Выполняем дозаполнение и пакетную запись начислений.
	РасчетЗарплатыРасширенный.ДозаполнитьВидыРасчета(КоллекторНачислений);
	
	// Добавляем к записываемым объектам все дозаполняемые.
	ПакетВидовРасчета = Новый Соответствие;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		ПакетВидовРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	// .. и удержания
	Если КоллекторУдержаний <> Неопределено Тогда
		Для Каждого КлючИЗначение Из КоллекторУдержаний Цикл
			ПакетВидовРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Для всех видов расчета коллектора, несмотря на пакетную запись, 
	// устанавливаем признак для обновления вторичных данных.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		КлючИЗначение.Значение.ДополнительныеСвойства.Вставить("ИзменениеПланаВидовРасчетаПоНастройкам", Истина);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(ПакетВидовРасчета);
	
КонецПроцедуры

// Упорядочивает начисления в плане видов расчета в соответствии с порядком категорий.
//
Процедура ЗаполнитьПорядокНачислений(КоллекторНачислений) Экспорт 
	
	// Порядок начислений должен соответствовать последовательности категорий.
	// Для того, чтобы "вставить" созданные начисления между существующими, 
	// придется перезаписывать все начисления, порядок которых ниже (больше то есть).
	// 1. Определяем категорию вновь созданных начислений коллектора с минимальным порядком.
	// 2. Выбираем из ИБ все начисления (исключая начисления коллектора) с категорией, порядок которой меньше указанной.
	// 3. Добавляем выбранные начисления в коллектор, параллельно заполняя таблицу с колонками ПорядокКатегории,
	// Начисление, ВновьСоздано, РеквизитДопУпорядочивания.
	// 4. Сортируем полученную таблицу значений, обходим ее, последовательно расставляя начислениям коллектора реквизит
	// доп упорядочивания.
	
	// Составляем соответствие порядка категорий.
	ПорядокКатегорий = Новый Соответствие;
	Индекс = 0;
	Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
		ПорядокКатегорий.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя], Индекс);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("ПорядокКатегории", Новый ОписаниеТипов("Число"));
	ТаблицаСортировки.Колонки.Добавить("КатегорияНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	ТаблицаСортировки.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаСортировки.Колонки.Добавить("ВновьСоздано", Новый ОписаниеТипов("Булево"));
	ТаблицаСортировки.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	// Для каждого вновь созданного начисления определяем место в списке, куда мы его будем вставлять. 
	// Для этого определяем минимальный реквизит упорядочивания для категории с порядком больше вновь созданного.
	
	// Заполняем таблицу сортировки начислениями из коллектора.
	НачисленияКоллектора = Новый Массив;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		НачислениеСсылка = КлючИЗначение.Ключ;
		НачислениеОбъект = КлючИЗначение.Значение;
		НачисленияКоллектора.Добавить(НачислениеСсылка);
		ПорядокКатегории = ПорядокКатегорий[НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени];
		// Добавляем строку в таблицу сортировки.
		НоваяСтрока = ТаблицаСортировки.Добавить();
		НоваяСтрока.ПорядокКатегории = ПорядокКатегории;
		НоваяСтрока.КатегорияНачисления = НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени;
		НоваяСтрока.Начисление = НачислениеСсылка;
		НоваяСтрока.ВновьСоздано = НачислениеОбъект.Ссылка.Пустая();
		НоваяСтрока.РеквизитДопУпорядочивания = НачислениеОбъект.РеквизитДопУпорядочивания;
	КонецЦикла;
	
	Если ТаблицаСортировки.НайтиСтроки(Новый Структура("ВновьСоздано", Истина)).Количество() = 0 Тогда
		// Если нет новых начислений, то ничего не нужно делать.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Для каждого вновь созданного начисления определяем реквизит упорядочивания - это минимального реквизит
	// упорядочивания следующей категории.
	// Если следующей по порядку категории нет ни одного начисления, получаем максимальный реквизит упорядочивания, т.е.
	// вставлять будем в самый конец списка.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСортировки.Начисление,
	|	ТаблицаСортировки.КатегорияНачисления,
	|	ТаблицаСортировки.ВновьСоздано
	|ПОМЕСТИТЬ ВТТаблицаСортировки
	|ИЗ
	|	&ТаблицаСортировки КАК ТаблицаСортировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСортировки.Начисление,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени.Порядок > Категории.Порядок
	|				ТОГДА Начисления.РеквизитДопУпорядочивания
	|		КОНЕЦ) КАК РеквизитУпорядочивания,
	|	МАКСИМУМ(Начисления.РеквизитДопУпорядочивания) КАК МаксимальныйРеквизитУпорядочивания
	|ИЗ
	|	ВТТаблицаСортировки КАК ТаблицаСортировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.КатегорииНачисленийИНеоплаченногоВремени КАК Категории
	|		ПО (Категории.Ссылка = ТаблицаСортировки.КатегорияНачисления)
	|			И (ТаблицаСортировки.ВновьСоздано)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСортировки.Начисление";
	
	Запрос.УстановитьПараметр("ТаблицаСортировки", ТаблицаСортировки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МинимальныйРеквизитУпорядочивания = Неопределено;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = ТаблицаСортировки.Найти(Выборка.Начисление, "Начисление");
			Если Выборка.РеквизитУпорядочивания = Null Тогда
				СтрокаТаблицы.РеквизитДопУпорядочивания = Выборка.МаксимальныйРеквизитУпорядочивания;
			Иначе
				СтрокаТаблицы.РеквизитДопУпорядочивания = Выборка.РеквизитУпорядочивания;
				Если МинимальныйРеквизитУпорядочивания = Неопределено Тогда
					МинимальныйРеквизитУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
				Иначе	
					Если СтрокаТаблицы.РеквизитДопУпорядочивания < МинимальныйРеквизитУпорядочивания Тогда
						МинимальныйРеквизитУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если минимальный реквизит упорядочивания не заполнен, то или начислений в ИБ вообще нет, 
	// или нет ни одного начисления, следующего за вновь созданным.
	Если МинимальныйРеквизитУпорядочивания <> Неопределено Тогда
		// Выбираем из ИБ все начисления, следующие после вновь созданных,
		// (исключаем начисления коллектора, т.к. они уже выбраны).
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка,
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени.Порядок КАК ПорядокКатегории,
		|	Начисления.РеквизитДопУпорядочивания
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.РеквизитДопУпорядочивания >= &РеквизитУпорядочивания
		|	И НЕ Начисления.Ссылка В (&НачисленияКоллектора)";
		
		Запрос.УстановитьПараметр("НачисленияКоллектора", НачисленияКоллектора);
		Запрос.УстановитьПараметр("РеквизитУпорядочивания", МинимальныйРеквизитУпорядочивания);
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Добавляем выбранные начисления в коллектор, параллельно заполняя таблицу сортировки.
		Пока Выборка.Следующий() Цикл
			КоллекторНачислений.Вставить(Выборка.Ссылка, Выборка.Ссылка.ПолучитьОбъект());
			НоваяСтрока = ТаблицаСортировки.Добавить();
			НоваяСтрока.ПорядокКатегории = Выборка.ПорядокКатегории;
			НоваяСтрока.КатегорияНачисления = Выборка.КатегорияНачисления;
			НоваяСтрока.Начисление = Выборка.Ссылка;
			НоваяСтрока.РеквизитДопУпорядочивания = Выборка.РеквизитДопУпорядочивания;
			НоваяСтрока.ВновьСоздано = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем полученную таблицу значений, обходим ее, последовательно расставляя начислениям коллектора реквизит доп
	// упорядочивания.
	ТаблицаСортировки.Сортировать("РеквизитДопУпорядочивания, ВновьСоздано УБЫВ, ПорядокКатегории");
	РеквизитУпорядочивания = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаСортировки Цикл
		Если РеквизитУпорядочивания = Неопределено Тогда
			РеквизитУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
			Если РеквизитУпорядочивания = 0 Тогда
				// Ноль подсистема настройки порядка воспринимает как незаполненный реквизит, поэтому инициализируем единицей.
				РеквизитУпорядочивания = 1;
				СтрокаТаблицы.РеквизитДопУпорядочивания = РеквизитУпорядочивания;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы.РеквизитДопУпорядочивания > РеквизитУпорядочивания Тогда
			РеквизитУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
			Продолжить;
		КонецЕсли;
		РеквизитУпорядочивания = РеквизитУпорядочивания + 1;
		СтрокаТаблицы.РеквизитДопУпорядочивания = РеквизитУпорядочивания;
	КонецЦикла;
	
	// Устанавливаем реквизит упорядочивания самому начислению в коллекторе.
	Для Каждого СтрокаТаблицы Из ТаблицаСортировки Цикл
		НачислениеОбъект = КоллекторНачислений[СтрокаТаблицы.Начисление];
		НачислениеОбъект.РеквизитДопУпорядочивания = СтрокаТаблицы.РеквизитДопУпорядочивания;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает массив категорий начислений.
//
Функция КатегорииВременнойНетрудоспособности()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений оплаты больничного.
//
Функция КатегорииОплатыБольничного() Экспорт

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений оплаты отпусков.
//
Функция КатегорииОплатыОтпуска() Экспорт
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	
	Возврат Категории;
	
КонецФункции

// Функция возвращает массив категорий начислений.
//
Функция КатегорииВытесненияКомандировки()

	Категории = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВременнойНетрудоспособности());
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений.
//
Функция КатегорииВытесненияОтпуска()
	
	Категории = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВременнойНетрудоспособности());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВытесненияКомандировки());

	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений, характеризующих отклонения по текущим настройкам базы.
//
Функция КатегорииВытесненияОплатыТруда()

	Категории = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВременнойНетрудоспособности());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВытесненияКомандировки());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВытесненияОтпуска());
	
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);

	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание);
	
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами);

	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений, характеризующих отклонения по текущим настройкам базы.
//
Функция КатегорииВытесненияРКиСН()

	Категории = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Категории, КатегорииВременнойНетрудоспособности());

	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПредыдущимиДокументами);

	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений, которые входят в базу надбавок.
//
Функция КатегорииБазаНадбавок()
	
	КатегорииБазовыхНачисленийНадбавок = Новый Массив;
	КатегорииБазовыхНачисленийНадбавок.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	КатегорииБазовыхНачисленийНадбавок.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	
	Возврат КатегорииБазовыхНачисленийНадбавок;
	
КонецФункции

// Функция возвращает структуру с описанием отбора начислений, которые входят в базу РК и СН.
//
Функция ОтборБазаРКиСН()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	
	ОтборБазовых = Новый Структура;
	ОтборБазовых.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", Категории);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьОписаниеОтбораНачисленийБазаРКиСН(ОтборБазовых);
	КонецЕсли;

	Возврат ОтборБазовых;
	
КонецФункции

// Функция возвращает массив категорий начислений, которые входят в базу премий.
//
Функция КатегорииБазаПремии()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	
	Возврат Категории;
	
КонецФункции 

Функция КатегорииБазаДоплатыДоМЗП()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	
	Возврат Категории;
	
КонецФункции

Функция КатегорииБазаИндексация()

	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	
	Возврат Категории;
	
КонецФункции 

// Функция возвращает массив категорий начислений, являющихся пособиями по уходу за ребенком.
//
Функция КатегорииПособийПоУходуЗаРебенком() Экспорт
	
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	Категории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	
	Возврат Категории;
	
КонецФункции

// Функция возвращает начисления, являющиеся пособиями по уходу за ребенком.
//
Функция НачисленияПособийПоУходуЗаРебенком() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособий)");
	
	Запрос.УстановитьПараметр("КатегорииПособий", КатегорииПособийПоУходуЗаРебенком());
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачисленияПособий = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НачисленияПособий.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат НачисленияПособий;
	
КонецФункции

// Составляет массив категорий прогула и приравненных к ним.
//
Функция КатегорииПрогула() Экспорт
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);

	Возврат КатегорииНачислений;
	
КонецФункции

Функция КатегорииНеоплачиваемыхОтсутствий() Экспорт
	
	КатегорииПоСвойствам = КатегорииПоСвойствамНачислений();
	Возврат КатегорииПоСвойствам.НеоплачиваемоеВремя;
	
КонецФункции

Функция ОтборВытесняющихПоУмолчанию()
	
	// Вытесняющими могут быть только "целодневные" начисления.
	ОтборВытесняющих = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени, ВидВремени");
	ОтборВытесняющих.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневныеВидыРабочегоВремени();

	Возврат ОтборВытесняющих;
	
КонецФункции

Функция ОтборВедущихПоУмолчанию()
	
	// Ведущими по умолчанию назначаются внутрисменные отклонения.
	ОтборВедущих = Новый Структура("ВидВремени");
	ОтборВедущих.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;

	Возврат ОтборВедущих;
	
КонецФункции

Функция ОтборБазовыхПоУмолчанию() Экспорт 
	
	ОбозначенияВТабеле = Новый Массив;
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	ОбозначенияВТабеле.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	
	ОтборБазовых = Новый Структура;
	ОтборБазовых.Вставить("КатегорияНачисленияИлиНеоплаченногоВремени", КатегорииБазаНадбавок());
	ОтборБазовых.Вставить("ТребуетсяРасчетБазы", Ложь);
	ОтборБазовых.Вставить("ОбозначениеВТабелеУчетаРабочегоВремени", ОбозначенияВТабеле);

	Возврат ОтборБазовых;
	
КонецФункции

Функция НачислениеОбъектПоСсылке(Ссылка)

	НачислениеОбъект = Неопределено;
	
	Если Ссылка <> Неопределено Тогда
		НачислениеОбъект = Ссылка.ПолучитьОбъект();
	КонецЕсли;

	Возврат НачислениеОбъект;
	
КонецФункции 

Процедура ДополнитьНедоступныеСвойстваПолямиОтраженияВБухУчете(НедоступныеСвойства)
	
	НедоступныеСвойства.Добавить("СпособОтраженияЗарплатыВБухучете");
	НедоступныеСвойства.Добавить("СтатьяФинансирования");
	НедоступныеСвойства.Добавить("СтатьяРасходов");
	НедоступныеСвойства.Добавить("СтратегияОтраженияВУчете");
	
КонецПроцедуры	

Функция РезультатПроверкиНастройкиПриоритетаНачислений(СписокНачислений, ИмяТаблицы) Экспорт
	
	ТребуетсяДобавить = Новый Массив;
	ТребуетсяУдалить = Новый Массив;
	
	УникальныеНачисленияДляДобавления = Новый Соответствие;
	УникальныеНачисленияДляУдаления = Новый Соответствие;
	
	Если ИмяТаблицы = "ВытесняющиеВидыРасчета" Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияВытесняющиеВидыРасчета.Ссылка,
		               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
		               |ГДЕ
		               |	НачисленияВытесняющиеВидыРасчета.Ссылка В(&СписокНачислений)
		               |	И НЕ НачисленияВытесняющиеВидыРасчета.ВидРасчета В (&СписокНачислений)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если УникальныеНачисленияДляДобавления[Выборка.ВидРасчета] = Неопределено Тогда 
				ТребуетсяДобавить.Добавить(Выборка.ВидРасчета);
				УникальныеНачисленияДляДобавления.Вставить(Выборка.ВидРасчета, Истина);
			КонецЕсли;
			Если УникальныеНачисленияДляУдаления[Выборка.Ссылка] = Неопределено Тогда 
				ТребуетсяУдалить.Добавить(Выборка.Ссылка);
				УникальныеНачисленияДляУдаления.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокНачислений", СписокНачислений);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияВытесняющиеВидыРасчета.Ссылка,
		               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
		               |ГДЕ
		               |	НачисленияВытесняющиеВидыРасчета.ВидРасчета В(&СписокНачислений)
		               |	И НЕ НачисленияВытесняющиеВидыРасчета.Ссылка В (&СписокНачислений)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если УникальныеНачисленияДляДобавления[Выборка.Ссылка] = Неопределено Тогда 
				ТребуетсяДобавить.Добавить(Выборка.Ссылка);
				УникальныеНачисленияДляДобавления.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
			Если УникальныеНачисленияДляУдаления[Выборка.ВидРасчета] = Неопределено Тогда 
				ТребуетсяУдалить.Добавить(Выборка.ВидРасчета);
				УникальныеНачисленияДляУдаления.Вставить(Выборка.ВидРасчета, Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатПроверки = Новый Структура("ТребуетсяДобавить, ТребуетсяУдалить", ТребуетсяДобавить, ТребуетсяУдалить);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция КатегорииНачисленийВнутреннихСовместителейИПодработок() Экспорт
	
	СписокКатегорий = Новый Массив;
	
	Возврат СписокКатегорий;
	
КонецФункции

Функция КатегорииНачисленийПодработок() Экспорт
	
	СписокКатегорий = Новый Массив;
	
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	
	Возврат СписокКатегорий;
	
КонецФункции

#КонецОбласти


#КонецЕсли