#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	Возврат;
	
	РасчетЗарплатыРасширенный.ПроверитьНаличиеБазовыхВидовРасчета(ЭтотОбъект, Отказ);
	
	Если КатегорияУдержания <> Перечисления.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска
		Или КатегорияУдержания <> Перечисления.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидОтпуска");
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ЭтотОбъект);
		
	Если Не Рассчитывается Тогда 
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ФормулаРасчета");
	КонецЕсли;
	
	Если ВАрхиве И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка,"ВАрхиве") = Ложь Тогда
		
		ПроверитьАктуальностьВидаРасчета(Отказ);
		
		// Так как при Отказе дело не дойдет до подписки на событие, выполняем действие здесь.
		РасчетЗарплатыРасширенныйСобытия.ПроверитьФормулуРасчетаОбработкаПроверкиЗаполнения(Ссылка, Отказ, ПроверяемыеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) И Не ДополнительныеСвойства.Свойство("ИзменениеПланаВидовРасчетаПоНастройкам") Тогда
		Возврат;
	КонецЕсли;		
	
	ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(ЭтотОбъект, Отказ, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиНедоступныеДляУдержаний());
	РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(ЭтотОбъект);
	
	ЗаполнитьОчередностьРасчета();
	
	Если СпособВыполненияУдержания <> Перечисления.СпособыВыполненияУдержаний.ПоОтдельномуДокументуДоОкончательногоРасчета Тогда
		ВидДокументаУдержания = Неопределено;
	КонецЕсли;
	
	УчаствуетВРасчетеПервойПоловиныМесяца = ?(УдерживаетсяВЦеломЗаМесяц(), Ложь, УчаствуетВРасчетеПервойПоловиныМесяца);
	
	ОтражениеЗарплатыВБухучетеРасширенный.УточнитьСтратегиюОтраженияВУчетеУдержания(ЭтотОбъект);
	ОтражениеЗарплатыВБухучетеРасширенный.УстановитьОчередностьОтраженияВУчете(ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОчередностьРасчета()
	
	ОчередностьРасчета = 0;
	// Вознаграждение платежного агента рассчитывается после исполнительных листов.
	Если КатегорияУдержания = Перечисления.КатегорииУдержаний.ИсполнительныйЛист Тогда
		ОчередностьРасчета = 1;
	ИначеЕсли КатегорияУдержания = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента Тогда
		ОчередностьРасчета = 2;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие текущих плановых удержаний сотрудников, в случае наличия таковых - устанавливает Отказ = Истина
//	и выводит предепреждения пользователю.
Процедура ПроверитьАктуальностьВидаРасчета(Отказ)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НЕ ПлановыеУдержанияСрезПоследних.Используется
	               |				ТОГДА ЛОЖЬ
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА ПлановыеУдержанияСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ВЫБОР
	               |							КОГДА ПлановыеУдержанияСрезПоследних.ДействуетДо <= &Дата
	               |								ТОГДА ПлановыеУдержанияСрезПоследних.ИспользуетсяПоОкончании
	               |							ИНАЧЕ ИСТИНА
	               |						КОНЕЦ
	               |				КОНЕЦ
	               |		КОНЕЦ) КАК АктуальнаяЗапись,
	               |	ПлановыеУдержанияСрезПоследних.ФизическоеЛицо КАК Ссылка
	               |ПОМЕСТИТЬ ВТУдержания
	               |ИЗ
	               |	РегистрСведений.ПлановыеУдержания.СрезПоследних(&Дата, Удержание = &Ссылка) КАК ПлановыеУдержанияСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПлановыеУдержанияСрезПоследних.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТУдержания.Ссылка КАК Ссылка,
	               |	ПРЕДСТАВЛЕНИЕ(ВТУдержания.Ссылка) КАК СотрудникНаименование
	               |ИЗ
	               |	ВТУдержания КАК ВТУдержания
	               |ГДЕ
	               |	ВТУдержания.АктуальнаяЗапись";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыводитьСообщениеОбОшибке = Ложь;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
				
		Отказ = Истина;
		
		ТекстСообщения = НСтр("ru='Нельзя сделать неиспользуемым удержание,
        | которое связано с действующими плановыми удержаниями сотрудников.'
        |;uk='Неможна зробити невживаним утримання,
        |яке пов''язане з діючими плановими утриманням співробітників.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, , , Отказ);	
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = НСтр("ru='- плановое удержание сотрудника ""%1""';uk='- планове утримання співробітника ""%1""'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Выборка.СотрудникНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.ВАрхиве" , , Отказ);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция УдерживаетсяВЦеломЗаМесяц()
	
	// Участие в расчете за первую половину месяца, оно же и участие в межрасчете, не управляется пользователем, 
	// включаем в такие расчеты все, что можно удерживать не в целом за месяц, 
	// то есть то, что не содержит в формуле расчетной базы или рассчитывается по значению показателя.
	// Исключением является вознаграждение платежного агента, т.к. считаем, что удержанную сумму по исполнительному
	// документу  нужно отправить получателю так же, в межрасчет.
	РасчетнаяБазаСтраховыеВзносы = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы");
	Отбор = Новый Структура("Показатель", РасчетнаяБазаСтраховыеВзносы);
	ЕстьПоказательРасчетнаяБазаСтраховыеВзносы = Показатели.НайтиСтроки(Отбор).Количество() > 0;
	
	Если (ТребуетсяРасчетБазы 
		Или ЕстьПоказательРасчетнаяБазаСтраховыеВзносы) Тогда
				
		Возврат Ложь;
	КонецЕсли;
			
	Если КатегорияУдержания = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
			
КонецФункции

#КонецОбласти

#КонецЕсли