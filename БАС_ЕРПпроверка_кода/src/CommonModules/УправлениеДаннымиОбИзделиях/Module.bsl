////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Получает спецификации действующие для указанных подразделения, номенклатуры на дату начала производства
// Спецификация является действующей, если
//  - у нее статус Действует
//  - период ее действия включает начало производства
//
// Параметры
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение за которым закреплено обеспечение изделием
//  Номенклатура		- СправочникСсылка.Номенклатура - производимое изделие
//  Характеристика		- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика производимого изделия
//  НачалоПроизводства	- Дата - дата начала производства, на эту дату спецификация должна быть действующей
//  СтрокаПоиска		- Строка - строка, содержащаяся в наименовании
//
// Возвращаемое значение:
//   СписокЗначений - свойства, которые можно использовать для автовыбора
//
Функция ПолучитьСписокДействующихСпецификаций(Номенклатура, Характеристика, НачалоПроизводства, Подразделение = Неопределено, СтрокаПоиска = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ //ПЕРВЫЕ ПЕРВЫЕ 51
	               |	РесурсныеСпецификацииВыходныеИзделия.Ссылка КАК Спецификация,
	               |	РесурсныеСпецификацииВыходныеИзделия.Ссылка.Представление КАК СпецификацияПредставление,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация, 
				   |					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация, 
				   |					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация, 
				   |					ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
				   |					ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК Основная,
				   |	МАКСИМУМ(ВЫБОР
	               |			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация ЕСТЬ NULL
				   |				ТОГДА 0
				   |			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация ЕСТЬ NULL
				   |				ТОГДА 1
				   |			КОГДА НЕ ОсновныеСпецификацииНоменклатураПодразделение.Спецификация ЕСТЬ NULL
				   |				ТОГДА 2
				   |			КОГДА НЕ ОсновныеСпецификацииНоменклатура.Спецификация ЕСТЬ NULL
				   |				ТОГДА 3
	               |			ИНАЧЕ 100
	               |		КОНЕЦ) КАК ПриоритетОсновная,
				   |	РесурсныеСпецификацииВыходныеИзделия.Ссылка.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
				   |	РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОптимальноеКоличествоПередачиМеждуЭтапами КАК ОптимальноеКоличествоПередачиМеждуЭтапами
	               |ИЗ
	               |	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение
	               |		ПО (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
				   |			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Номенклатура = &Номенклатура)
	               |			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Характеристика = &Характеристика)
	               |			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Подразделение = &Подразделение)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристика
	               |		ПО (ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
				   |			И (ОсновныеСпецификацииНоменклатураХарактеристика.Номенклатура = &Номенклатура)
	               |			И (ОсновныеСпецификацииНоменклатураХарактеристика.Характеристика = &Характеристика)
	               |			И (ОсновныеСпецификацииНоменклатураХарактеристика.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураПодразделение
	               |		ПО ((ОсновныеСпецификацииНоменклатураПодразделение.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
				   |			И ОсновныеСпецификацииНоменклатураПодразделение.Номенклатура = &Номенклатура)
	               |			И (ОсновныеСпецификацииНоменклатураПодразделение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	               |			И (ОсновныеСпецификацииНоменклатураПодразделение.Подразделение = &Подразделение)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатура
	               |		ПО (ОсновныеСпецификацииНоменклатура.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
				   |			И (ОсновныеСпецификацииНоменклатура.Номенклатура = &Номенклатура)
	               |			И (ОсновныеСпецификацииНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	               |			И (ОсновныеСпецификацииНоменклатура.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	               |ГДЕ
	               |	РесурсныеСпецификацииВыходныеИзделия.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	               |	И РесурсныеСпецификацииВыходныеИзделия.Номенклатура = &Номенклатура
	               |	И (РесурсныеСпецификацииВыходныеИзделия.Характеристика = &Характеристика
	               |			ИЛИ РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	               |	И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ РесурсныеСпецификацииВыходныеИзделия.Ссылка.НачалоДействия <= &НачалоПроизводства
				   |			ИЛИ &НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1))
	               |	И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ РесурсныеСпецификацииВыходныеИзделия.Ссылка.КонецДействия > &НачалоПроизводства
				   |			ИЛИ &НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1))
	               |
				   |	//СтрокаПоиска
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	РесурсныеСпецификацииВыходныеИзделия.Ссылка,
	               |	РесурсныеСпецификацииВыходныеИзделия.Ссылка.Представление
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	ПриоритетОсновная,
				   |	СпецификацияПредставление";
				   
	Если СтрокаПоиска <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СтрокаПоиска", "И РесурсныеСпецификацииВыходныеИзделия.Ссылка.Наименование ПОДОБНО &Текст");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПЕРВЫЕ", "");
		Запрос.УстановитьПараметр("Текст", "%" + СокрЛП(СтрокаПоиска) + "%");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура",       Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",     Характеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	Запрос.УстановитьПараметр("Подразделение",      ?(Подразделение <> Неопределено, Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка()));
	
	СписокДействующихСпецификаций = Запрос.Выполнить().Выгрузить();
	
	Возврат СписокДействующихСпецификаций;
	
КонецФункции

// Заполняет основную спецификацию в коллекции данных, содержащую подразделения, номенклатуру и дату начала производства
//
// Параметры
//  Запрос			- Запрос - содержит текст запроса к данным
//  КоллекцияДанных	- ТаблицаЗначений - содержит подразделения, номенклатуру и дату начала производства
//
Процедура ЗаполнитьОсновныеСпецификацииВКоллекции(Запрос, КоллекцияДанных, СтруктураКлючаПоискаСтроки) Экспорт

	Если КоллекцияДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("ДляСпискаНоменклатуры");
	Запрос.Текст = Запрос.Текст + "
								|;
								|
								|////////////////////////////////////////////////////////////////////////////////
								|"
								+ ПолучитьТекстЗапросаОсновнойСпецификации(ПараметрыЗапроса);
								
	ОсновныеСпецификации = Запрос.Выполнить().Выгрузить();
	ОсновныеСпецификации.Индексы.Добавить("Номенклатура,Характеристика,НачалоПроизводства");
	
	Для каждого СтрокаДанных Из КоллекцияДанных Цикл
		СтруктураПоиска = Новый Структура;
		Для каждого КлючПоиска Из СтруктураКлючаПоискаСтроки Цикл
			СтруктураПоиска.Вставить(КлючПоиска.Ключ, СтрокаДанных[КлючПоиска.Значение]);
		КонецЦикла; 
		
		СписокОсновныхСпецификаций = ОсновныеСпецификации.НайтиСтроки(СтруктураПоиска);
		
		ОсновнаяСпецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
		Приоритет = 100;
		
		// Найдем спецификацию с минимальным приоритетом
		Для каждого СтрокаСпецификация Из СписокОсновныхСпецификаций Цикл
			Если СтрокаСпецификация.Приоритет < Приоритет Тогда
				ОсновнаяСпецификация = СтрокаСпецификация.Спецификация;
				Приоритет = СтрокаСпецификация.Приоритет;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДанных.ОсновнаяСпецификация = ОсновнаяСпецификация;
	КонецЦикла;

КонецПроцедуры 

// Заполняет спецификацию в строках
//
// Параметры:
//  МассивСтрок					- ДанныеФормыСруктура, СтрокаТабличнойЧасти - строки в которых нужно заполнить спецификацию
//  МассивДанныхПоНоменклатуре	- Массив - содрежит структуру данных о номенклатуре
//  ТолькоНезаполненные			- Булево - Истина, если нужно заполнить спецификацию только если она не указана
//
Процедура ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанныхПоНоменклатуре, ТолькоНезаполненные = Ложь) Экспорт

	СпецификацииИзделий = СпецификацииИзделий(МассивДанныхПоНоменклатуре);
	
	ИндексДанных = 0;
	Для каждого ДанныеСтроки из МассивСтрок Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Спецификация) 
			ИЛИ НЕ ТолькоНезаполненные Тогда
			
			ДанныеСпецификации = СпецификацииИзделий[ИндексДанных];
			Если ДанныеСпецификации <> Неопределено И ДанныеСпецификации.Спецификация <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСпецификации);
			КонецЕсли; 
		КонецЕсли; 
		
		ДанныеПоНоменклатуре = МассивДанныхПоНоменклатуре[ИндексДанных];
		ДанныеПоНоменклатуре.Вставить("Спецификация", ДанныеСтроки.Спецификация);
		
		ИндексДанных = ИндексДанных + 1;
		
	КонецЦикла; 

КонецПроцедуры

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция - Таблица, в которой необходимо заполнить реквизиты
// 		Поля - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
// 		МассивСтрок - Массив - массив строк, которые нужно обработать
//
Процедура ЗаполнитьСлужебныеРеквизитыПоСпецификации(КоллекцияДанных, Поля, МассивСтрок = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Спецификация КАК Спецификация,
	|	ТаблицаДокумента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Ссылка КАК Спецификация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.ПроизводитсяВПроцессе
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПолуфабрикаты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПустыеСтатьиКалькуляции,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораНоменклатуры = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяНоменклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА МатериалыИУслуги.СпособАвтовыбораХарактеристики = ЗНАЧЕНИЕ(Перечисление.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУточняемаяХарактеристика
	|ПОМЕСТИТЬ СпецификацииСПолуфабрикатами
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК МатериалыИУслуги
	|ГДЕ
	|	МатериалыИУслуги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	ВыходныеИзделия.Ссылка КАК Ссылка,
	|	ВыходныеИзделия.Ссылка.Статус КАК Статус,
	|	ВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
	|	ВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТВыходныеИзделия
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	РесурсныеСпецификацииВозвратныеОтходы.Номенклатура,
	|	РесурсныеСпецификацииВозвратныеОтходы.Характеристика,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка,
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка.Статус,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная),
	|	РесурсныеСпецификацииВозвратныеОтходы.КоличествоУпаковок
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК РесурсныеСпецификацииВозвратныеОтходы
	|ГДЕ
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Спецификация
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.НомерСтроки ЕСТЬ NULL 
	|				ИЛИ ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПобочныйВыход,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.Ссылка ЕСТЬ NULL 
	|				И ТаблицаДокумента.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяССылка)
	|			ТОГДА 1
	|		КОГДА ВыходныеИзделия.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ТОГДА 2
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьПустыеСтатьиКалькуляции
	|			ТОГДА 4
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяНоменклатура
	|			ТОГДА 5
	|		КОГДА СпецификацииСПолуфабрикатами.ЕстьУточняемаяХарактеристика
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодОшибки,
	|	НЕОПРЕДЕЛЕНО КАК Распоряжение,
	|	0 КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ВыходныеИзделия.ДоляСтоимости ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ ВыходныеИзделия.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок - 0.5 КАК ЧИСЛО(15, 0))) < (ВЫРАЗИТЬ(ТаблицаДокумента.КоличествоУпаковок / ВыходныеИзделия.КоличествоУпаковок КАК ЧИСЛО(15, 3)))
	|				И ВыходныеИзделия.НомерСтроки = 1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КодПредупреждения,
	|	ЕСТЬNULL(ВыходныеИзделия.ТипСтоимости, ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается)) КАК ТипСтоимости
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыходныеИзделия КАК ВыходныеИзделия
	|		ПО ТаблицаДокумента.Спецификация = ВыходныеИзделия.Ссылка
	|			И ТаблицаДокумента.Номенклатура = ВыходныеИзделия.Номенклатура
	|			И (ТаблицаДокумента.Характеристика = ВыходныеИзделия.Характеристика
	|				ИЛИ ВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСПолуфабрикатами КАК СпецификацииСПолуфабрикатами
	|		ПО ТаблицаДокумента.Спецификация = СпецификацииСПолуфабрикатами.Спецификация";
	
	Если МассивСтрок = Неопределено Тогда
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	Иначе
		ТаблицаДокумента = КоллекцияДанных.Выгрузить(МассивСтрок, "Номенклатура, Характеристика, Спецификация, КоличествоУпаковок, НомерСтроки");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ОтборНомерСтроки = Новый Структура("НомерСтроки");
	
	Для Каждого Строка Из КоллекцияДанных Цикл
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		Если Выборка.НайтиСледующий(ОтборНомерСтроки) Тогда
			ЗаполнитьЗначенияСвойств(Строка, Выборка, Поля);
			Выборка.Сбросить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность заполнения полуфабрикатов производимых в процессе
//
// Параметры:
// 		Объект - СправочникОбъект.РесурсныеСпецификации,
//				ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа,
//				ДокументСсылка.ЗаказНаПроизводство - объект, связанный с проверкой
// 		КоллекцияДанных - ДанныеФормыКоллекция - Таблица, в которой необходимо заполнить реквизиты
// 		ПараметрыПроверки - Структура - Параметры проверок, которые требуется выполнить
// 		Отказ - Булево - признак наличия ошибок заполнения
//
Процедура ПроверитьСпецификацииПолуфабрикатов(Объект, КоллекцияДанных, ПараметрыПроверки, Отказ) Экспорт
	
	ПутьКДанным = "";
	ИмяРеквизита = "ИсточникПолученияПолуфабриката";
	
	СтруктураПроверок = ПараметрыПроверки.СтруктураПроверок;
	ВыводитьСообщения = Истина;
	
	Если ПараметрыПроверки.Свойство("ПутьКДанным") Тогда
		ПутьКДанным = ПараметрыПроверки.ПутьКДанным;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ИмяРеквизита") Тогда
		ИмяРеквизита = ПараметрыПроверки.ИмяРеквизита;
	КонецЕсли;
	
	Если ПараметрыПроверки.Свойство("ВыводитьСообщения") Тогда
		ВыводитьСообщения = ПараметрыПроверки.ВыводитьСообщения;
	КонецЕсли;
	
	СпецификацииПолуфабрикатов = Новый Массив;
	МассивСтрокПотребностиВПолуфабрикатах = Новый Массив;
	
	ШаблонСообщенияСпецификцияНеУказана    = НСтр("ru='Необходимо указать спецификацию полуфабриката (список ""Материалы и работы"", строка %1)';uk='Необхідно зазначити специфікацію напівфабрикату (список ""Матеріали і роботи"", рядок %1)'");
	ШаблонСообщенияЭтапВыпускаНеУказан     = НСтр("ru='Необходимо указать этап выпуска полуфабриката (список ""Материалы и работы"", строка %1)';uk='Необхідно зазначити етап випуску напівфабрикату (список ""Матеріали і роботи"", рядок %1)'");
	ШаблонСообщенияНетИзделия              = НСтр("ru='В выходных изделиях спецификации полуфабриката должен быть полуфабрикат, который потребляется в текущей спецификации (список ""Материалы и работы"", строка %1)';uk='У вихідних виробах специфікації напівфабрикату повинен бути напівфабрикат, який споживається в поточній специфікації (список ""Матеріали і роботи"", рядок %1)'");
	ШаблонСообщенияПереработкаНаСтороне    = НСтр("ru='По спецификации полуфабриката производственный процесс выполняется силами переработчика. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)';uk='По специфікації напівфабрикату виробничий процес виконується силами переробника. Напівфабрикати повинні проводитися власними силами (список ""Матеріали і роботи"", рядок %1)'");
	ШаблонСообщенияСпецификацияНеДействует = НСтр("ru='Спецификация полуфабриката должна быть действующей (список ""Материалы и работы"", строка %1)';uk='Специфікація напівфабрикату повинна бути діючою (список Матеріали і роботи"", рядок %1)'");
	ШаблонСообщенияНекратноеКоличество     = НСтр("ru='В спецификации полуфабриката выход полуфабриката должен быть кратен количеству потребляемого полуфабриката текущей спецификации (список ""Материалы и работы"", строка %1)';uk='У специфікації напівфабрикату вихід напівфабрикату повинен бути кратним кількості споживаного напівфабрикату поточної специфікації (список ""Матеріали і роботи"", рядок %1)'");
	
	Для Каждого СтрокаМатериал Из КоллекцияДанных Цикл
		
		Если СтрокаМатериал.ПроизводитсяВПроцессе Тогда
			
			ПроизводитсяПоСпецификации = ТипЗнч(СтрокаМатериал.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации");
			
			Если ЗначениеЗаполнено(СтрокаМатериал.ИсточникПолученияПолуфабриката) Тогда
				
				Если ПроизводитсяПоСпецификации Тогда
					
					СпецификацииПолуфабрикатов.Добавить(СтрокаМатериал.ИсточникПолученияПолуфабриката);
					
				ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов") Тогда
					
					МассивСтрокПотребностиВПолуфабрикатах.Добавить(СтрокаМатериал);
					
				КонецЕсли;
				
			ИначеЕсли СтруктураПроверок.Свойство("ЗаполнениеСпецификации") Тогда
				
				Если ВыводитьСообщения Тогда
					
					Если ПроизводитсяПоСпецификации Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщенияСпецификцияНеУказана, 
							СтрокаМатериал.НомерСтроки);
						
					Иначе
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщенияЭтапВыпускаНеУказан, 
							СтрокаМатериал.НомерСтроки);
						
					КонецЕсли;
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, ИмяРеквизита);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
					
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыПроизводства.Владелец КАК Ссылка
		|ПОМЕСТИТЬ ВТСпецификацииПолуфабрикатов
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	ЭтапыПроизводства.Владелец В (&СпецификацииПолуфабрикатов)
		|	И ЭтапыПроизводства.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РесурсныеСпецификации.Ссылка КАК Ссылка,
		|	РесурсныеСпецификации.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА СпецификацииСЭтапамиНаСтороне.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьПереработкаНаСтороне
		|ИЗ
		|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпецификацииПолуфабрикатов КАК СпецификацииСЭтапамиНаСтороне
		|		ПО РесурсныеСпецификации.Ссылка = СпецификацииСЭтапамиНаСтороне.Ссылка
		|ГДЕ
		|	РесурсныеСпецификации.Ссылка В(&СпецификацииПолуфабрикатов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка КАК Ссылка,
		|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура КАК Номенклатура,
		|	РесурсныеСпецификацииВыходныеИзделия.Характеристика КАК Характеристика,
		|	РесурсныеСпецификацииВыходныеИзделия.Количество КАК Количество
		|ИЗ
		|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
		|ГДЕ
		|	РесурсныеСпецификацииВыходныеИзделия.Ссылка В(&СпецификацииПолуфабрикатов)");
	
	Запрос.УстановитьПараметр("СпецификацииПолуфабрикатов", СпецификацииПолуфабрикатов);
	
	Результат = Запрос.ВыполнитьПакет();
	
	РеквизитыСпецификаций = Результат[1].Выгрузить();
	ДанныеСпецификаций    = Результат[2].Выгрузить();
	
	РеквизитыСпецификаций.Индексы.Добавить("Ссылка");
	
	Для Каждого СтрокаМатериал Из КоллекцияДанных Цикл
	
		Если НЕ СтрокаМатериал.ПроизводитсяВПроцессе 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаМатериал.ИсточникПолученияПолуфабриката)
			ИЛИ ТипЗнч(СтрокаМатериал.ИсточникПолученияПолуфабриката) <> Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", СтрокаМатериал.ИсточникПолученияПолуфабриката);
		СпецификацияПолуфабриката = ДанныеСпецификаций.НайтиСтроки(СтруктураПоиска);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, ИмяРеквизита);
		
		Реквизиты = РеквизитыСпецификаций.Найти(СтрокаМатериал.ИсточникПолученияПолуфабриката, "Ссылка");
		Если Реквизиты <> Неопределено И Реквизиты.Статус <> Перечисления.СтатусыСпецификаций.Действует И СтруктураПроверок.Свойство("СтатусСпецификации") Тогда
			
			// Спецификация не действует
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияСпецификацияНеДействует, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
		Если Реквизиты <> Неопределено И Реквизиты.ЕстьПереработкаНаСтороне И СтруктураПроверок.Свойство("ПроизводствоНаСтороне") Тогда
			
			// Производство на стороне
			Если ВыводитьСообщения Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПереработкаНаСтороне, 
					СтрокаМатериал.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьВыходПолуфабриката = Ложь;
		Для каждого СтрокаИзделиеСпецификацииПолуфабриката Из СпецификацияПолуфабриката Цикл
			Если СтрокаМатериал.Номенклатура = СтрокаИзделиеСпецификацииПолуфабриката.Номенклатура
				И (НЕ ЗначениеЗаполнено(СтрокаИзделиеСпецификацииПолуфабриката.Характеристика)
				ИЛИ СтрокаМатериал.Характеристика = СтрокаИзделиеСпецификацииПолуфабриката.Характеристика) Тогда
				
				ЕстьВыходПолуфабриката = Истина;
				
				Если СтруктураПроверок.Свойство("КратностьПроизводимогоКоличества") Тогда
					Если СтрокаМатериал.Количество <> 0
						И СтрокаИзделиеСпецификацииПолуфабриката.Количество <> 0
						И Цел(СтрокаМатериал.Количество / СтрокаИзделиеСпецификацииПолуфабриката.Количество) <> СтрокаМатериал.Количество / СтрокаИзделиеСпецификацииПолуфабриката.Количество Тогда
						
						Если ВыводитьСообщения Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщенияНекратноеКоличество,
								СтрокаМатериал.НомерСтроки);
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
						Иначе
							Отказ = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураПроверок.Свойство("СоответствиеСпецификации") Тогда
			Если НЕ ЕстьВыходПолуфабриката Тогда
				// Нет выхода полуфабриката
				Если ВыводитьСообщения Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщенияНетИзделия,
						СтрокаМатериал.НомерСтроки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, Поле, ПутьКДанным, Отказ);
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПроверок.Свойство("ЗаполнениеВнутреннихПолуфабрикатов")
		И МассивСтрокПотребностиВПолуфабрикатах.Количество() > 0 Тогда
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов = ПараметрыПроверки.ПараметрыПроверкиВнутреннихПолуфабрикатов;
		
		ТекстЗапроса = ПолучитьТекстЗапросаПроверкиВнутреннихПолуфабрикатов(
			ПараметрыПроверкиВнутреннихПолуфабрикатов);
		
		ТаблицаПотребностиВПолуфабрикатах = ПолучитьТаблицуПотребностиВПолуфабрикатах(
			ПараметрыПроверкиВнутреннихПолуфабрикатов, МассивСтрокПотребностиВПолуфабрикатах);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ТаблицаПотребностиВПолуфабрикатах", ТаблицаПотребностиВПолуфабрикатах);
		
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа" Тогда
			
			Запрос.УстановитьПараметр("ТаблицаЭтаповЗаказа", ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов);
		
		КонецЕсли;
		
		Результат = Запрос.ВыполнитьПакет();
		КоличествоПакетов = Результат.Количество();
		
		Если Не Результат[КоличествоПакетов - 4].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 4].Выбрать();
			
			ШаблонСообщения = НСтр("ru='Этап выпуска полуфабриката выполняется позже этапа, на котором этот полуфабрикат потребляется (список ""Материалы и работы"", строка %1)';uk='Етап випуску напівфабрикату виконується пізніше етапу, на якому цей напівфабрикат споживається (список ""Матеріали і роботи"", рядок %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
					
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 3].Выбрать();
			
			ШаблонСообщения = НСтр("ru='Не допускается указание работ в качестве полуфабрикатов, производимых на этапах (список ""Материалы и работы"", строка %1)';uk='Не допускається зазначення робіт в якості напівфабрикатів, вироблених на етапах список Матеріали і роботи"", рядок %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 2].Пустой() Тогда
		
			Выборка = Результат[КоличествоПакетов - 2].Выбрать();
			
			ШаблонСообщения = НСтр("ru='Этап выпуска полуфабриката выполняется переработчиком. Полуфабрикаты должны производиться собственными силами (список ""Материалы и работы"", строка %1)';uk='Етап випуску напівфабрикату виконується переробником. Напівфабрикати повинні проводитися власними силами (список ""Матеріали і роботи"", рядок %1)'");
			
			Пока Выборка.Следующий() Цикл
				
				Если ВыводитьСообщения Тогда
				
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения,
						Выборка.НомерСтроки);
						
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
						Выборка.НомерСтроки, 
						ИмяРеквизита);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						Объект,
						Поле,
						ПутьКДанным,
						Отказ);
						
				Иначе
						
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
			
			ШаблонСообщения  = НСтр("ru='В выходных изделиях не описан выпуск полуфабриката ""%НоменклатураХарактеристика%"" на этапе ""%ЭтапВыпуска%"" в%Достаточном% количестве%НеХватает% %Количество% %Упаковка%, см. список ""%ТаблицаПолуфабрикатов%"" (список ""Материалы и работы"", строка %НомерСтроки%)';uk='У вихідних виробах не описаний випуск напівфабрикату ""%НоменклатураХарактеристика%"" на етапі ""%ЭтапВыпуска%"" у %Достаточном% кількісті%НеХватает% %Количество% %Упаковка%, див. список ""%ТаблицаПолуфабрикатов%"" (список ""Матеріали і роботи"", рядок %НомерСтроки%)'");
			ТекстДостаточном = НСтр("ru=' достаточном';uk=' достатньому'");
			ТекстНеХватает   = НСтр("ru=', не хватает';uk='.бракує'");
			
			СтруктураПоиска = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
				ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска);
			
			ТаблицаПолуфабрикатовОстаток = ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов;
			ТаблицаПолуфабрикатовОстаток.Колонки.Добавить("КоличествоДоступно");
			
			Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				
				НайденныеСтроки = ТаблицаПолуфабрикатовОстаток.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.ВГраница() <> -1 Тогда
					СтрокаПолуфабрикат = НайденныеСтроки[0];
				Иначе
					СтрокаПолуфабрикат = Неопределено;
				КонецЕсли;
				
				Если СтрокаПолуфабрикат = Неопределено Тогда
					КоличествоДоступно = 0;
				ИначеЕсли СтрокаПолуфабрикат.КоличествоДоступно <> Неопределено Тогда
					КоличествоДоступно = СтрокаПолуфабрикат.КоличествоДоступно;
				Иначе
					КоличествоДоступно = СтрокаПолуфабрикат.Количество;
				КонецЕсли;
				
				Если Выборка.Количество > КоличествоДоступно Тогда
					
					Если ВыводитьСообщения Тогда
						
						ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%", 
											НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление, Выборка.ХарактеристикаПредставление));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапВыпуска%", Выборка.ЭтапВыпускаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", (Выборка.Количество - КоличествоДоступно)/Выборка.КоэффициентУпаковки);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%", Выборка.УпаковкаПредставление);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаПолуфабрикатов%", ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
						
						Если СтрокаПолуфабрикат <> Неопределено Тогда
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", ТекстДостаточном);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", ТекстНеХватает);
						Иначе
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Достаточном%", "");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НеХватает%", "");
						КонецЕсли;
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", 
							Выборка.НомерСтроки, 
							ИмяРеквизита);
							
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							Объект, 
							Поле, 
							ПутьКДанным, 
							Отказ);
							
					Иначе
						
						Отказ = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрокаПолуфабрикат <> Неопределено Тогда
					СтрокаПолуфабрикат.КоличествоДоступно = Макс(КоличествоДоступно - Выборка.Количество, 0);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры использования материала (работы) в производстве
//
// Параметры:
//  Номенклатура		- СправочникСсылка.Номенклатура - материал
//  Характеристика		- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика материала
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение в котором используется материал
//
// Возвращаемое значение:
//   Структура   - параметры использования материала (работы) в производстве
//
Функция ПараметрыИспользованияМатериалаРаботы(Номенклатура, Характеристика, Подразделение) Экспорт

	ПараметрыИспользования = Новый Структура;
	ПараметрыИспользования.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(НастройкаПередачиМатериаловХарактеристика.Склад, 
	|		ЕСТЬNULL(НастройкаПередачиМатериаловНоменклатура.Склад, 
	|		ЕСТЬNULL(НастройкаПередачиМатериаловСклад.Склад, 
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))) КАК Склад
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиМатериаловСклад
	|		ПО (НастройкаПередачиМатериаловСклад.Подразделение = &Подразделение)
	|			И (НастройкаПередачиМатериаловСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И (НастройкаПередачиМатериаловСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиМатериаловНоменклатура
	|		ПО (НастройкаПередачиМатериаловНоменклатура.Подразделение = &Подразделение)
	|			И (НастройкаПередачиМатериаловНоменклатура.Номенклатура = &Номенклатура)
	|			И (НастройкаПередачиМатериаловНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиМатериаловХарактеристика
	|		ПО (НастройкаПередачиМатериаловХарактеристика.Подразделение = &Подразделение)
	|			И (НастройкаПередачиМатериаловХарактеристика.Номенклатура = &Номенклатура)
	|			И (НастройкаПередачиМатериаловХарактеристика.Характеристика = &Характеристика)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПараметрыИспользования;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ПараметрыИспользования, Выборка);
	
	Возврат ПараметрыИспользования;

КонецФункции

// Проверяет последовательность этапов спецификации или операций маршрутных карт
//
// Параметры:
//  ВладелецОпераций			- СправочникСсылка - ссылка на владельца операций
//	СтруктураПараметров			- Новый Структура; - содержит
//  								ИмяСправочникаОпераций		- Строка - имя таблицы, содержащей операции
//  								ПолеНомерОперации			- Строка - имя поля, в котором содержится "Номер операции"
//  								ПолеНомерСледующейОперации	- Строка - имя поля, в котором содержится "Номер следующей операции"
//  								ПолеНомерСледующейОперации	- Строка - имя поля, в котором содержится "Номер следующей операции"
//  СтруктураСообщений			- Структура - содержит текст сообщений об ошибках
//  Отказ						- Булево - признак отмены текущего действия
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная
//
Функция ПоследовательностьОперацийПравильная(ВладелецОпераций, СтруктураПараметров, СтруктураСообщений, Отказ = Ложь) Экспорт
	
	ИмяСправочникаОпераций     = СтруктураПараметров.ИмяСправочникаОпераций;
	ПолеНомерОперации          = СтруктураПараметров.ПолеНомерОперации;
	ПолеНомерСледующейОперации = СтруктураПараметров.ПолеНомерСледующейОперации;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпрОперации.Ссылка КАК Операция,
	               |	СпрОперации.Представление КАК Представление,
	               |	СпрОперации." + ПолеНомерОперации + " КАК НомерОперации,
	               |	СпрОперации." + ПолеНомерСледующейОперации + " КАК НомерСледующейОперации,
	               |	МАКСИМУМ(ВЫБОР
	               |		КОГДА СпрСледующиеОперации.Ссылка ЕСТЬ NULL 
	               |				И СпрОперации." + ПолеНомерСледующейОперации + " <> 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ) КАК НетСледующейОперации
	               |ИЗ
	               |	Справочник." + ИмяСправочникаОпераций + " КАК СпрОперации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочникаОпераций + " КАК СпрСледующиеОперации
	               |		ПО СпрОперации." + ПолеНомерСледующейОперации + " = СпрСледующиеОперации." + ПолеНомерОперации + "
	               |			И (СпрСледующиеОперации.Владелец = &Владелец)
	               |			И (НЕ СпрСледующиеОперации.ПометкаУдаления)
	               |ГДЕ
	               |	СпрОперации.Владелец = &Владелец
	               |	И НЕ СпрОперации.ПометкаУдаления
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	СпрОперации.Ссылка,
				   |	СпрОперации.Представление,
	               |	СпрОперации." + ПолеНомерОперации + ",
	               |	СпрОперации." + ПолеНомерСледующейОперации;
	
	Запрос.УстановитьПараметр("Владелец", ВладелецОпераций);
	
	Результат = Запрос.Выполнить();
	
	ЕстьОшибки = Ложь;
	
	СписокОпераций = Результат.Выгрузить();
	
	// Должна быть первая и последняя операция
	ЕстьПерваяОперация = СписокОпераций.Найти(1, "НомерОперации");
	Если ЕстьПерваяОперация = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураСообщений.НетПервойОперации, ВладелецОпераций,,, ЕстьОшибки); 
	КонецЕсли; 
	
	ЕстьПоследняяОперация = СписокОпераций.Найти(0, "НомерСледующейОперации");
	Если ЕстьПоследняяОперация = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураСообщений.НетПоследнейОперации, ВладелецОпераций,,, ЕстьОшибки); 
	КонецЕсли; 
	
	// Должна быть следующая операция
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НетСледующейОперации", Истина));
	Для каждого ЭлементКоллекции Из СписокСтрок Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтруктураСообщений.НетСледующейОперации, ЭлементКоллекции.Представление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭлементКоллекции.Операция, ПолеНомерСледующейОперации,, ЕстьОшибки); 
	КонецЦикла; 
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерОперации", 1));
	Если СписокСтрок.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураСообщений.НесколькоПервыхОпераций, ВладелецОпераций,,, ЕстьОшибки); 
	КонецЕсли; 
	
	Отказ = Отказ ИЛИ ЕстьОшибки;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область ДеревоСпецификаций

// Строит дерево спецификаций для изделия
//
// Параметры
//  Параметры		- Структура - параметры построения дерева
//  Дерево			- ДеревоЗначений - заполняемое дерево значений
//  Номенклатура	- СправочникСсылка.Номенклатура - изделие, для которого строится дерево
//  Номенклатура	- СправочникСсылка.ХарактеристикиНоменклатуры - характеристика производимого изделия
//
Процедура ПостроитьДеревоСпецификаций(Параметры, Дерево, Номенклатура, ХарактеристикаНоменклатуры) Экспорт
	
	Дерево.Строки.Очистить();
	
	Если НЕ Параметры.ВыводитьЭтапы 
		И НЕ Параметры.ВыводитьВыходныеИзделия
		И НЕ Параметры.ВыводитьМатериалы
		И НЕ Параметры.ВыводитьТрудозатраты Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованныеСпецификации = Новый Массив;
	КлючСвязи = Неопределено;
	НоваяСтрокаДерева = Неопределено;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		НоваяСтрокаДерева = Дерево.Строки.Добавить();
		НоваяСтрокаДерева.Идентификатор = Новый УникальныйИдентификатор;
		НоваяСтрокаДерева.Номенклатура = Номенклатура;
		НоваяСтрокаДерева.Характеристика = ХарактеристикаНоменклатуры;
		
		// Проверяем используются характеристики или нет.
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(НоваяСтрокаДерева.Номенклатура,
		НоваяСтрокаДерева.Характеристика, Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		НоваяСтрокаДерева.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		
		НоваяСтрокаДерева.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура;
		НоваяСтрокаДерева.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрокаДерева.ВидСтроки);
		НоваяСтрокаДерева.Упаковка = Номенклатура.ЕдиницаИзмерения;
		
		Если Не ЗначениеЗаполнено(Параметры.Спецификация) Тогда
			СпецификацияИзделия = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
										Справочники.СтруктураПредприятия.ПустаяСсылка(),
										Номенклатура, 
										ХарактеристикаНоменклатуры, 
										Параметры.Дата);
			
			Если СпецификацияИзделия = Неопределено или СпецификацияИзделия.Спецификация = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			НоваяСтрокаДерева.Спецификация = СпецификацияИзделия.Спецификация;
		Иначе
			НоваяСтрокаДерева.Спецификация = Параметры.Спецификация;
		КонецЕсли;
		
		// Режим по спецификации заказа
		Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
			
			НоваяСтрокаДерева.Количество			= Параметры.КоличествоВыходногоИзделия;
			НоваяСтрокаДерева.КоличествоУпаковок	= Параметры.КоличествоУпаковокВыходногоИзделия;
			НоваяСтрокаДерева.Упаковка				= Параметры.УпаковкаВыходногоИзделия;
			
			КлючСвязи								= Параметры.КлючСвязи;
			
		Иначе
			
			КоличествоПоСпецификации = Новый Структура;
			Отказ = Ложь;
			
			ЗаполнитьКоличествоВыходногоИзделияСпецификации(КоличествоПоСпецификации, НоваяСтрокаДерева.Спецификация, Номенклатура, ХарактеристикаНоменклатуры, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, КоличествоПоСпецификации);
			
		КонецЕсли;
		
		НоваяСтрокаДерева.ЕстьСпецификация = Истина;
		
		ИспользованныеСпецификации.Добавить(НоваяСтрокаДерева.Спецификация);
		
		Если Не ЗначениеЗаполнено(НоваяСтрокаДерева.Упаковка) Тогда
			НоваяСтрокаДерева.Упаковка = Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
	Иначе
		
		ИспользованныеСпецификации.Добавить(Параметры.Спецификация);
		
	КонецЕсли;
	
	ЗаполнитьСтрокиДерева(Параметры, Дерево, НоваяСтрокаДерева, ИспользованныеСпецификации, КлючСвязи);
	
КонецПроцедуры

// Процедура рекурсивного добавления строк в дерево спецификации.
//
// Параметры
//  Параметры					- Структура - структура параметров
//  Дерево						- ДеревоЗначений - заполняемое дерево значений
//  СтрокаДерева				- СтрокаДереваЗначений - строка, в которую добавляются строки
//  ИспользованныеСпецификации	- Массив - массив использованных спецификаций
//
Процедура ЗаполнитьСтрокиДерева(Параметры, Дерево, СтрокаДерева = Неопределено, ИспользованныеСпецификации = Неопределено, КлючСвязи = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура;
	
	Если СтрокаДерева <> Неопределено Тогда
		
		СтрокаДерева.Строки.Очистить();
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.Спецификация) Тогда
			Возврат;
		КонецЕсли;
		
		НоменклатураРодителя = СтрокаДерева.Номенклатура;
		ХарактеристикаРодителя = СтрокаДерева.Характеристика;
		СпецификацияРодителя = СтрокаДерева.Спецификация;
		
		Если СтрокаДерева.Количество = 0 Тогда
			
			КоличествоПоСпецификации = Новый Структура;
			Отказ = Ложь;
			
			ЗаполнитьКоличествоВыходногоИзделияСпецификации(КоличествоПоСпецификации, СпецификацияРодителя, НоменклатураРодителя, ХарактеристикаРодителя, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаДерева, КоличествоПоСпецификации);
			
		КонецЕсли;
		
		КоличествоРодителя = СтрокаДерева.Количество;
		
		ЕстьСпецификация = СтрокаДерева.ЕстьСпецификация;
		
	Иначе
		
		Если Параметры.Спецификация.ВыходныеИзделия.Количество() <> 0 Тогда
			ВыходнаяСтрокаСпецификации = Параметры.Спецификация.ВыходныеИзделия[0];
			НоменклатураРодителя = ВыходнаяСтрокаСпецификации.Номенклатура;
			ХарактеристикаРодителя = ВыходнаяСтрокаСпецификации.Характеристика;
			КоличествоРодителя = ВыходнаяСтрокаСпецификации.Количество;
		Иначе
			НоменклатураРодителя = Неопределено;
			ХарактеристикаРодителя = Неопределено;
			КоличествоРодителя = 0;
		КонецЕсли; 
		
		СпецификацияРодителя = Параметры.Спецификация;
		ЕстьСпецификация = Истина;
		
	КонецЕсли;
	
	// Список для проверки зацикливания.
	Если ИспользованныеСпецификации = Неопределено Тогда
		ИспользованныеСпецификации = Новый Массив;
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева;
	
	Если ЗначениеЗаполнено(Параметры.АдресВХранилище) Тогда
		
		СтруктураДанных = ПолучитьДанныеСпецификацииЗаказа(Параметры.АдресВХранилище, КлючСвязи);
		
	Иначе
		
		// Получаем данные спецификации: этапы, материалы, трудозатраты, выходные изделия.
		ДанныеПоНоменклатуре = Новый Структура();
		ДанныеПоНоменклатуре.Вставить("Номенклатура", НоменклатураРодителя);
		ДанныеПоНоменклатуре.Вставить("Характеристика", ХарактеристикаРодителя);
		ДанныеПоНоменклатуре.Вставить("Спецификация", СпецификацияРодителя);
		ДанныеПоНоменклатуре.Вставить("Количество", КоличествоРодителя);
		ДанныеПоНоменклатуре.Вставить("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
		
		СтруктураДанных = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоНоменклатуре(ДанныеПоНоменклатуре,, Истина);
		
	КонецЕсли;
	
	НомерСтрокиЭтапа = 1;
	КоличествоЭтапов = СтруктураДанных.Этапы.Количество();
	
	УсловиеЦикла = Истина;
	// Цикл по этапам, выводим, если требуется, иначе за один проход выводим все.
	Пока УсловиеЦикла Цикл
		
		Если Параметры.ВыводитьЭтапы Тогда
			
			// Вывод строки Этап.
			Если НомерСтрокиЭтапа > КоличествоЭтапов Тогда
				
				УсловиеЦикла = Ложь;
				Продолжить;
				
			КонецЕсли;
			
			ТекущийЭтап = СтруктураДанных.Этапы[НомерСтрокиЭтапа - 1];
			
			СтруктураПоиска.Очистить();
			СтруктураПоиска.Вставить("Этап", ТекущийЭтап.Этап);
			
			МатериалыИУслуги = СтруктураДанных.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
			ВыходныеИзделия = СтруктураДанных.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
			ВозвратныеОтходы = СтруктураДанных.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
			Трудозатраты = СтруктураДанных.Трудозатраты.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокаДерева = Неопределено Тогда
				СтрокаРодитель = Дерево.Строки.Добавить();
			Иначе
				СтрокаРодитель = СтрокаДерева.Строки.Добавить();
			КонецЕсли;
			
			СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
			СтрокаРодитель.Номенклатура = "Этап: " + ТекущийЭтап.Этап;
			СтрокаРодитель.Спецификация = ТекущийЭтап.МаршрутнаяКарта;
			СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Этап;
			СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			
			НомерСтрокиЭтапа = НомерСтрокиЭтапа + 1;
			
		Иначе
			
			// Подготовка коллекций комплектующих, изделий и трудозатрат по всем этапам.
			УсловиеЦикла = Ложь;
			
			МатериалыИУслуги = СтруктураДанных.МатериалыИУслуги.Скопировать(,"Номенклатура, Характеристика, Количество, КоличествоУпаковок, Упаковка,
			| ПроизводитсяВПроцессе, ИсточникПолученияПолуфабриката, ПрименениеМатериала, ЕдиницаИзмерения, КлючСвязи");
			
			МатериалыИУслуги.Свернуть("Номенклатура, Характеристика, ПроизводитсяВПроцессе, ИсточникПолученияПолуфабриката, ПрименениеМатериала, ЕдиницаИзмерения, Упаковка, 
			| КлючСвязи", "Количество, КоличествоУпаковок");
			
			ВыходныеИзделия = СтруктураДанных.ВыходныеИзделия.Скопировать(,"Номенклатура, Характеристика, Количество, КоличествоУпаковок, Упаковка, ЕдиницаИзмерения");
			ВыходныеИзделия.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, Упаковка", "Количество, КоличествоУпаковок");
			
			ВозвратныеОтходы = СтруктураДанных.ВозвратныеОтходы.Скопировать(,"Номенклатура, Характеристика, Количество, КоличествоУпаковок, Упаковка, ЕдиницаИзмерения");
			ВозвратныеОтходы.Свернуть("Номенклатура, Характеристика, ЕдиницаИзмерения, Упаковка", "Количество, КоличествоУпаковок");
			
			Трудозатраты = СтруктураДанных.Трудозатраты.Скопировать(,"ВидРабот, Количество, ЕдиницаИзмерения");
			Трудозатраты.Свернуть("ВидРабот, ЕдиницаИзмерения", "Количество");
			
		КонецЕсли;
		
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаЭтап = Дерево;
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаЭтап = СтрокаРодитель;
		КонецЕсли;
		
		// Вывод строк выходных изделий.
		Если Параметры.ВыводитьВыходныеИзделия И ЕстьСпецификация Тогда
			
			СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
			СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
			СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия;
			СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия +
				" (" + ВыходныеИзделия.Количество() + ")";
			
			Для Каждого Строка Из ВыходныеИзделия Цикл
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки);
				НоваяСтрока.ПроизводитсяВПроцессе = Ложь;
			КонецЦикла;
			
			Для Каждого Строка Из ВозвратныеОтходы Цикл
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки);
				НоваяСтрока.ПроизводитсяВПроцессе = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывод строки Материалы и услуги.
		КоличествоМатериалов = 0;
		Для Каждого Строка Из МатериалыИУслуги Цикл
			Если Параметры.ВыводитьМатериалы ИЛИ Строка.ПроизводитсяВПроцессе Тогда
				КоличествоМатериалов = КоличествоМатериалов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если (Параметры.ВыводитьВыходныеИзделия ИЛИ Параметры.ВыводитьТрудозатраты) 
			И ЕстьСпецификация 
			И (КоличествоМатериалов > 0 ИЛИ Параметры.ВыводитьМатериалы) Тогда
			
			СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
			СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
			СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги +
				" (" + КоличествоМатериалов + ")";
			СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги;
			СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			
		КонецЕсли;
		
		// Вывод строк материалов и разузлование по спецификации.
		Для Каждого Строка Из МатериалыИУслуги Цикл
			
			Если НЕ Параметры.ВыводитьМатериалы И НЕ Строка.ПроизводитсяВПроцессе Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
			НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал;
			НоваяСтрока.ПрименениеМатериала = Строка.ПрименениеМатериала;
			
			// Если производится в процессе, то берем указанную спецификацию и характеристику.
			Если Строка.ПроизводитсяВПроцессе И ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
				НоваяСтрока.Спецификация = Строка.ИсточникПолученияПолуфабриката;
				НоваяСтрока.ПроизводитсяВПроцессе = Истина;
			Иначе
				НоваяСтрока.ПроизводитсяВПроцессе = Ложь;
			КонецЕсли;
			
			// Поиск основной спецификации для любого подразделения, если требуется разузлование.
			Если Не ЗначениеЗаполнено(НоваяСтрока.Спецификация) И Параметры.РазузловыватьПолуфабрикаты Тогда
				ДействующиеСпецификации = ПолучитьСписокДействующихСпецификаций(НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика, Параметры.Дата);
				
				ОсновныеСпецификации = ДействующиеСпецификации.НайтиСтроки(Новый Структура("Основная", Истина));
				Если ОсновныеСпецификации.Количество() > 0 Тогда
					НоваяСтрока.Спецификация = ОсновныеСпецификации[0].Спецификация;
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки, ЗначениеЗаполнено(НоваяСтрока.Спецификация));
			
			// Если у текущей строки есть спецификация, то продолжаем разузлование.
			Если Не ЗначениеЗаполнено(НоваяСтрока.Спецификация) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока.ЕстьСпецификация = Истина;
			
			Если ИспользованныеСпецификации.Найти(НоваяСтрока.Спецификация) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИспользованныеСпецификации.Добавить(НоваяСтрока.Спецификация);
			ЗаполнитьСтрокиДерева(Параметры, Дерево, НоваяСтрока, ИспользованныеСпецификации, Строка.КлючСвязи);
			ИспользованныеСпецификации.Удалить(ИспользованныеСпецификации.Найти(НоваяСтрока.Спецификация));
			
		КонецЦикла;
		
		// Вывод строк трудозатрат.
		Если Параметры.ВыводитьТрудозатраты И ЕстьСпецификация Тогда
			
			СтрокаРодитель = СтрокаЭтап.Строки.Добавить();
			СтрокаРодитель.Идентификатор = Новый УникальныйИдентификатор;
			СтрокаРодитель.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты;
			СтрокаРодитель.ИндексКартинки = ПолучитьИндексКартинки(СтрокаРодитель.ВидСтроки);
			СтрокаРодитель.Номенклатура = "" + Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты + 
				" (" + Трудозатраты.Количество() + ")";
			
			Для Каждого Строка Из Трудозатраты Цикл
				НоваяСтрока = СтрокаРодитель.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.КоличествоУпаковок = Строка.Количество;
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
				НоваяСтрока.Номенклатура = Строка.ВидРабот;
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата;
				НоваяСтрока.ИндексКартинки = ПолучитьИндексКартинки(НоваяСтрока.ВидСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает количества выходного изделия по спецификации.
//
// Параметры
//  КоличествоПоСпецификации		- Структура - структура, которая заполняется в процедуре.
//  Спецификация					- СправочникСсылка.РесурсныеСпецификации - спецификация, в которой осуществляется поиск по выходным изделиям.
//  Номенклатура					- СправочникСсылка.Номенклатура - искомое изделие.
//  Характеристика					- СправочникСсылка.ХарактеристикаНоменклатуры - характеристика искомого изделия.
//  Отказ							- Булево - устанавливается в значение Истина, если изделие в спецификации не найдено.
//
Процедура ЗаполнитьКоличествоВыходногоИзделияСпецификации(КоличествоПоСпецификации, Спецификация, Номенклатура, Характеристика = Неопределено, Отказ = Ложь) Экспорт
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Характеристика);
	
	МассивСтрок = Спецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаВыходногоИзделия = МассивСтрок[0];
		
		КоличествоПоСпецификации.Вставить("Количество",			СтрокаВыходногоИзделия.Количество);
		КоличествоПоСпецификации.Вставить("КоличествоУпаковок",	СтрокаВыходногоИзделия.КоличествоУпаковок);
		КоличествоПоСпецификации.Вставить("Упаковка",			СтрокаВыходногоИзделия.Упаковка);
		
		Возврат
	КонецЕсли;
	
	СтруктураПоиска.Очистить();
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	МассивСтрок = Спецификация.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаВыходногоИзделия = МассивСтрок[0];
		
		КоличествоПоСпецификации.Вставить("Количество",			СтрокаВыходногоИзделия.Количество);
		КоличествоПоСпецификации.Вставить("КоличествоУпаковок",	СтрокаВыходногоИзделия.КоличествоУпаковок);
		КоличествоПоСпецификации.Вставить("Упаковка",			СтрокаВыходногоИзделия.Упаковка);
		
		Возврат
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура формирования условного оформления дерева спецификаций.
//
// Параметры
//  УсловноеОформление			- Структура - структура параметров
//
Процедура НастроитьУсловноеОформлениеДереваСпецификаций(УсловноеОформление) Экспорт
	
	// Упаковки.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийУпаковка");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Упаковка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	
	// Выделение жирным строк с наименованием этапа.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыСтрокДереваСпецификаций.Этап;
	
	// Только просмотр.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийСпецификация");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Этап);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие);
	
	// Использование характеристик.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ХарактеристикиИспользуются");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ВидСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.Материал);
	ЭлементОтбора.ПравоеЗначение.Добавить(Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие);
	
	// Использование характеристик для номенклатуры.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.ХарактеристикиИспользуются");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	// Номенклатура и характеристика уточняется при производстве.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<уточняется при производстве>';uk='<уточнюється при виробництві>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораНоменклатуры");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<уточняется при производстве>';uk='<уточнюється при виробництві>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораХарактеристики");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	// Номенклатура и характеристика уточняется с учетом свойств.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<указывается в свойстве продукции>';uk='<зазначається у властивості продукції>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийНоменклатура");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораНоменклатуры");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<подбирается по свойствам>';uk='<підбирається за властивостями>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоСпецификацийХарактеристика");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСпецификаций.СпособАвтовыбораХарактеристики");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	// Выделение жирным основных спецификаций.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДоступныхСпецификацийСпецификация");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДоступныхСпецификацийСтатус");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДоступныхСпецификацийНачалоДействия");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДоступныхСпецификацийКонецДействия");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДоступныхСпецификацийПодразделение");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокДоступныхСпецификаций.Основная");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	// Подразделение спецификаций.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<для любого подразделения>';uk='<для будь-якого підрозділу>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СписокДоступныхСпецификацийПодразделение");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокДоступныхСпецификаций.Подразделение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
КонецПроцедуры

#КонецОбласти

#Область МаршрутныеКарты

// Получает маршрутные карты действующие для указанного подразделения на дату начала производства
// Маршрутная карта является действующей, если
//  - у нее статус Действует
//  - период ее действия включает начало производства
//
// Параметры
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение за которым закреплено обеспечение изделием
//  НачалоПроизводства	- Дата - дата начала производства, на эту дату спецификация должна быть действующей
//  СтрокаПоиска		- Строка - строка, содержащаяся в наименовании
//
// Возвращаемое значение:
//   СписокЗначений - свойства, которые можно использовать для автовыбора
//
Функция ПолучитьСписокДействующихМаршрутныхКартПоПодразделению(Подразделение, НачалоПроизводства, СтрокаПоиска = Неопределено) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МаршрутныеКарты.Ссылка КАК МаршрутнаяКарта,
	               |	МаршрутныеКарты.Представление КАК МаршрутнаяКартаПредставление
	               |ИЗ
	               |	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	               |ГДЕ
	               |	МаршрутныеКарты.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхКарт.Действует)
	               |	И (МаршрутныеКарты.Подразделение = &Подразделение)
	               |	И (МаршрутныеКарты.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ МаршрутныеКарты.НачалоДействия <= &НачалоПроизводства
				   |			ИЛИ &НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1))
	               |	И (МаршрутныеКарты.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ МаршрутныеКарты.КонецДействия > &НачалоПроизводства
				   |			ИЛИ &НачалоПроизводства = ДАТАВРЕМЯ(1, 1, 1))
				   |
	               |
				   |	//СтрокаПоиска
	               |УПОРЯДОЧИТЬ ПО
	               |	МаршрутнаяКартаПредставление";
				   
	Если СтрокаПоиска <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СтрокаПоиска", "И МаршрутныеКарты.Наименование ПОДОБНО &Текст");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделение",      Подразделение);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	Запрос.УстановитьПараметр("Текст",              "%" + СокрЛП(СтрокаПоиска) + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.МаршрутнаяКарта, Выборка.МаршрутнаяКартаПредставление);
	КонецЦикла;

	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область АвтовыборМатериалов

// Заполняет настройки формы спецификации и маршрутной карты,
// связанные с автовыбором материалов
//
// Параметры
//  Форма	- Форма - форма спецификации или маршрутной карты
//
Процедура ИнициализацияАвтоподбораНоменклатуры(Форма) Экспорт

	// Номенклатура - ОтметкаНезаполненного
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиНоменклатура");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// НоменклатураСтрокой - Отображать
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиНоменклатураСтрокой");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// НоменклатураСтрокой - ЦветТекста
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ГруппаОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораНоменклатуры");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиНоменклатураСтрокой");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Характеристика - Текст
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиХарактеристика");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'"));
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	// Характеристика - ТолькоПросмотр
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиХарактеристика");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Характеристика - ОтметкаНеЗаполненного
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ГруппаОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Ложь;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиХарактеристика");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	
	// ХарактеристикаСтрокой - Отображать
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиХарактеристикаСтрокой");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	// ХарактеристикаСтрокой - ЦветТекста
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ГруппаОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборОформления.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции;
	
	ОтборОформления = ГруппаОтборОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.СпособАвтовыбораХарактеристики");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиХарактеристикаСтрокой");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// КоличествоУпаковок - Текст, ОтметкаНеЗаполненного
	УсловноеОформление = Форма.УсловноеОформление.Элементы.Добавить(); 
	УсловноеОформление.Использование = Истина;
	
	ОтборОформления = УсловноеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборОформления.Использование = Истина;
	ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.РасчетПоФормуле");
	ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборОформления.ПравоеЗначение = Истина;
	
	ПолеОформление               = УсловноеОформление.Поля.Элементы.Добавить(); 
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных("МатериалыИУслугиКоличествоУпаковок");
	
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<по формуле>';uk='<за формулою>'"));
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
	УсловноеОформление.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

//++ НЕ УТКА

// Заполняет реквизиты табличной части материалов, связанные с автовыбором материалов
//
// Параметры
//  МатериалыИУслуги	- ТабличнаяЧасть - табличная часть, содержащая материалы и для которых настраивается автовыбор
//
Процедура ЗаполнитьСлужебныеРеквизитыАвтоподбораНоменклатуры(МатериалыИУслуги) Экспорт
	
	Для каждого ТекущиеДанные Из МатериалыИУслуги Цикл
		ТекущиеДанные.МатериалПотребляетсяНеВсегда = НЕ ТекущиеДанные.ОтборСвойство.Пустая();
		
		ТекущиеДанные.НоменклатураСтрокой = "";
		ТекущиеДанные.ХарактеристикаСтрокой = "";
		Если ТекущиеДанные.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции Тогда
			ЗаголовокСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.СвойствоСодержащееНоменклатуру, "Заголовок");
			ТекущиеДанные.НоменклатураСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='<указывается в свойстве продукции ""%1"">';uk='<зазначається у властивості продукції ""%1"">'"),
													ЗаголовокСвойства);
			
		ИначеЕсли ТекущиеДанные.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве Тогда
			ТекущиеДанные.НоменклатураСтрокой = НСтр("ru='<уточняется при производстве>';uk='<уточнюється при виробництві>'");
			
		Иначе
			ТекущиеДанные.НоменклатураСтрокой = "";
		КонецЕсли; 
		
		Если ТекущиеДанные.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции Тогда
			ТекущиеДанные.ХарактеристикаСтрокой = НСтр("ru='<определяется по характеристике продукции>';uk='<визначається за характеристикою продукції>'");
			
		ИначеЕсли ТекущиеДанные.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве Тогда
			ТекущиеДанные.ХарактеристикаСтрокой = НСтр("ru='<уточняется при производстве>';uk='<уточнюється при виробництві>'");
			
		Иначе
			ТекущиеДанные.ХарактеристикаСтрокой = "";
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(ТекущиеДанные.АлгоритмРасчетаКоличества) Тогда
			ТекущиеДанные.РасчетПоФормуле = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Получает свойства, которые можно использовать для автовыбора
//
// Параметры
//  ВидИзделий					- СправочникСсылка.ВидыНоменклатуры - набор свойств, которые можно использовать для изделий.
//  ТолькоСвойстваХарактеристик	- Булево - Истина, если нужно получить только свойства характеристик.
//
// Возвращаемое значение:
//   Массив   - свойства, которые можно использовать для автовыбора
//
Функция ПолучитьСвойстваДляАвтоподбора(ВидИзделий, ТолькоСвойстваХарактеристик = Ложь) Экспорт

	СвойстваДляАвтоподбора = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(ВидИзделий) Тогда
		Возврат СвойстваДляАвтоподбора;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// Доп реквизиты общие для всех характеристик
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Заголовок КАК Представление,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ВладелецДополнительныхЗначений КАК ВладелецДополнительныхЗначений,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Доп реквизиты характеристик вида номенклатуры
	|ВЫБРАТЬ
	|	НаборСвойствДополнительныеРеквизиты.Свойство,
	|	НаборСвойствДополнительныеРеквизиты.Свойство.Заголовок КАК Представление,
	|	НаборСвойствДополнительныеРеквизиты.Свойство.ВладелецДополнительныхЗначений КАК ВладелецДополнительныхЗначений,
	|	НаборСвойствДополнительныеРеквизиты.Свойство.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборСвойствДополнительныеРеквизиты
	|		ПО ВидыНоменклатуры.НаборСвойствХарактеристик = НаборСвойствДополнительныеРеквизиты.Ссылка
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка = &ВидИзделий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Доп сведения характеристик вида номенклатуры
	|ВЫБРАТЬ
	|	НаборСвойствДополнительныеСведения.Свойство,
	|	НаборСвойствДополнительныеСведения.Свойство.Заголовок,
	|	НаборСвойствДополнительныеСведения.Свойство.ВладелецДополнительныхЗначений КАК ВладелецДополнительныхЗначений,
	|	НаборСвойствДополнительныеСведения.Свойство.ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборСвойствДополнительныеСведения
	|		ПО ВидыНоменклатуры.НаборСвойствХарактеристик = НаборСвойствДополнительныеСведения.Ссылка
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка = &ВидИзделий";
	
	Если НЕ ТолькоСвойстваХарактеристик Тогда
		
		Запрос.Текст = Запрос.Текст +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Доп реквизиты вида номенклатуры
		|ВЫБРАТЬ
		|	НаборСвойствДополнительныеРеквизиты.Свойство,
		|	НаборСвойствДополнительныеРеквизиты.Свойство.Заголовок,
		|	НаборСвойствДополнительныеРеквизиты.Свойство.ВладелецДополнительныхЗначений КАК ВладелецДополнительныхЗначений,
		|	НаборСвойствДополнительныеРеквизиты.Свойство.ПометкаУдаления
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборСвойствДополнительныеРеквизиты
		|		ПО ВидыНоменклатуры.НаборСвойств = НаборСвойствДополнительныеРеквизиты.Ссылка
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка = &ВидИзделий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Доп сведения вида номенклатуры
		|ВЫБРАТЬ
		|	НаборСвойствДополнительныеСведения.Свойство,
		|	НаборСвойствДополнительныеСведения.Свойство.Заголовок,
		|	НаборСвойствДополнительныеСведения.Свойство.ВладелецДополнительныхЗначений КАК ВладелецДополнительныхЗначений,
		|	НаборСвойствДополнительныеСведения.Свойство.ПометкаУдаления
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборСвойствДополнительныеСведения
		|		ПО ВидыНоменклатуры.НаборСвойств = НаборСвойствДополнительныеСведения.Ссылка
		|ГДЕ
		|	ВидыНоменклатуры.Ссылка = &ВидИзделий";
		
	КонецЕсли; 

	Запрос.УстановитьПараметр("ВидИзделий", ВидИзделий);
	
	СвойстваДляАвтоподбора = Запрос.Выполнить().Выгрузить();
	
	Возврат СвойстваДляАвтоподбора;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Спецификации

//++ НЕ УТКА

// Заполняет список видов рабочих центров, содержащий основные и альтернативные
//
// Параметры:
//  ВидыРабочихЦентров					- ТабличнаяЧасть - табличная часть, содержащая виды рабочих центров
//  АльтернативныеВидыРабочихЦентров	- ТабличнаяЧасть - табличная часть, содержащая альтернативные виды рабочих центров
//  ВсеВидыРабочихЦентров				- ДеревоЗначений - список, содержащий все виды рабочих центров
//
Процедура ЗаполнитьВидыРабочихЦентров(ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров, ВсеВидыРабочихЦентров) Экспорт
	
	СписокВидовРабочихЦентров = Новый Массив;
	СписокВариантовНаладки = Новый Массив;
	
	КоллекцияВидыРЦ = ВсеВидыРабочихЦентров.ПолучитьЭлементы();	
	КоллекцияВидыРЦ.Очистить();

	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		НовыйВидРЦ = КоллекцияВидыРЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйВидРЦ, СтрокаВидРЦ);
		
		Если ЗначениеЗаполнено(НовыйВидРЦ.ВидРабочегоЦентра) Тогда
			СписокВидовРабочихЦентров.Добавить(НовыйВидРЦ.ВидРабочегоЦентра);
		КонецЕсли; 
		Если ЗначениеЗаполнено(НовыйВидРЦ.ВариантНаладки) Тогда
			СписокВариантовНаладки.Добавить(НовыйВидРЦ.ВариантНаладки);
		КонецЕсли; 
		
		КоллекцияАльтернативныеВидыРЦ = НовыйВидРЦ.ПолучитьЭлементы();
		СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", СтрокаВидРЦ.КлючСвязи);
		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		НовыйВидРЦ.ДоступноИзменениеИспользовать = (СписокСтрок.Количество() <> 0);
		Для каждого СтрокаАльтернативныйВидРЦ Из СписокСтрок Цикл
			НовыйАльтернативныйВидРЦ = КоллекцияАльтернативныеВидыРЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйАльтернативныйВидРЦ, СтрокаАльтернативныйВидРЦ);
			НовыйАльтернативныйВидРЦ.Альтернативный = Истина;
			НовыйАльтернативныйВидРЦ.ДоступноИзменениеИспользовать = Истина;
			
			Если ЗначениеЗаполнено(НовыйАльтернативныйВидРЦ.ВидРабочегоЦентра) Тогда
				СписокВидовРабочихЦентров.Добавить(НовыйАльтернативныйВидРЦ.ВидРабочегоЦентра);
			КонецЕсли; 
			Если ЗначениеЗаполнено(НовыйАльтернативныйВидРЦ.ВариантНаладки) Тогда
				СписокВариантовНаладки.Добавить(НовыйАльтернативныйВидРЦ.ВариантНаладки);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	ЗначенияРеквизитовВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
											СписокВидовРабочихЦентров, 
											"ИспользуютсяВариантыНаладки,ПараллельнаяЗагрузка,
											|ВариантЗагрузки,ВремяРаботы,ЕдиницаИзмерения");
											
	Если СписокВариантовНаладки.Количество() <> 0 Тогда
		ЗначенияРеквизитовВариантовНаладки = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
												СписокВариантовНаладки, 
												"ВремяРаботы,ЕдиницаИзмерения");
	Иначе
		ЗначенияРеквизитовВариантовНаладки = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаВидРЦ Из КоллекцияВидыРЦ Цикл
		РеквизитыВидаРЦ = ЗначенияРеквизитовВидовРЦ.Получить(СтрокаВидРЦ.ВидРабочегоЦентра);
		РеквизитыВариантаНаладки = ЗначенияРеквизитовВариантовНаладки.Получить(СтрокаВидРЦ.ВариантНаладки);
		ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(РеквизитыВидаРЦ, РеквизитыВариантаНаладки, Ложь, СтрокаВидРЦ);
		
		КоллекцияАльтернативныеВидыРЦ = СтрокаВидРЦ.ПолучитьЭлементы();
		Для каждого СтрокаАльтернативныйВидРЦ Из КоллекцияАльтернативныеВидыРЦ Цикл
			РеквизитыВидаРЦ = ЗначенияРеквизитовВидовРЦ.Получить(СтрокаАльтернативныйВидРЦ.ВидРабочегоЦентра);
			РеквизитыВариантаНаладки = ЗначенияРеквизитовВариантовНаладки.Получить(СтрокаАльтернативныйВидРЦ.ВариантНаладки);
			ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(РеквизитыВидаРЦ, РеквизитыВариантаНаладки, Ложь, СтрокаАльтернативныйВидРЦ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет список видов рабочих центров, содержащий основные и альтернативные
//
// Параметры:
//  ВсеВидыРабочихЦентров				- ДеревоЗначений - список, содержащий все виды рабочих центров
//  ПланироватьРаботу					- Булево - планировать работу видов рабочих центров при формировании графика производства
//  ВидыРабочихЦентров					- ТабличнаяЧасть - табличная часть, содержащая виды рабочих центров
//  АльтернативныеВидыРабочихЦентров	- ТабличнаяЧасть - табличная часть, содержащая альтернативные виды рабочих центров
//
Процедура СохранитьВидыРабочихЦентров(ВсеВидыРабочихЦентров, ПланироватьРаботу, ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров) Экспорт

	ВидыРабочихЦентров.Очистить();
	АльтернативныеВидыРабочихЦентров.Очистить();
	
	Если НЕ ПланироватьРаботу Тогда
		Возврат;
	КонецЕсли;
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	ОсновныеВидыРабочихЦентров = ВсеВидыРабочихЦентров.ПолучитьЭлементы();
	Для каждого СтрокаОсновнойВидРЦ Из ОсновныеВидыРабочихЦентров Цикл
		НовыйВидРЦ = ВидыРабочихЦентров.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйВидРЦ, СтрокаОсновнойВидРЦ);
		Если НовыйВидРЦ.КлючСвязи = ПустойКлюч Тогда
			НовыйВидРЦ.КлючСвязи = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		АльтернативныеВидыРЦ = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		Для каждого СтрокаАльтернативныйВидРЦ Из АльтернативныеВидыРЦ Цикл
			НовыйАльтернативныйВидРЦ = АльтернативныеВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйАльтернативныйВидРЦ, СтрокаАльтернативныйВидРЦ);
			НовыйАльтернативныйВидРЦ.КлючСвязиВидыРабочихЦентров = НовыйВидРЦ.КлючСвязи;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(РеквизитыВидаРЦ, РеквизитыВариантаНаладки, ПолучитьРеквизиты, СтрокаВидРЦ) Экспорт

	Если ПолучитьРеквизиты Тогда
		Если ЗначениеЗаполнено(СтрокаВидРЦ.ВидРабочегоЦентра) Тогда
			РеквизитыВидаРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
													СтрокаВидРЦ.ВидРабочегоЦентра, 
													"ИспользуютсяВариантыНаладки,ПараллельнаяЗагрузка,
													|ВариантЗагрузки,ВремяРаботы,ЕдиницаИзмерения");
		Иначе
			РеквизитыВидаРЦ = Неопределено;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаВидРЦ.ВариантНаладки) Тогда
			РеквизитыВариантаНаладки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
													СтрокаВидРЦ.ВариантНаладки, 
													"ВремяРаботы,ЕдиницаИзмерения");
		Иначе
			РеквизитыВариантаНаладки = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаВидРЦ.ИспользуетсяВариантНаладки = Ложь;
	СтрокаВидРЦ.ПараллельнаяЗагрузка = Ложь;
	СтрокаВидРЦ.СинхроннаяЗагрузка = Ложь;
	
	Если РеквизитыВидаРЦ = Неопределено Тогда
		СтрокаВидРЦ.ВремяРаботы = 0;
		СтрокаВидРЦ.ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВариантыНаладки = РеквизитыВидаРЦ.ИспользуютсяВариантыНаладки;
	СтрокаВидРЦ.ИспользуетсяВариантНаладки = (ИспользуютсяВариантыНаладки = Истина);
	
	СтрокаВидРЦ.ПараллельнаяЗагрузка = РеквизитыВидаРЦ.ПараллельнаяЗагрузка;
	
	Если РеквизитыВидаРЦ.ПараллельнаяЗагрузка
		И РеквизитыВидаРЦ.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный Тогда
		
		Если ИспользуютсяВариантыНаладки Тогда
			Если РеквизитыВариантаНаладки <> Неопределено Тогда
				ВремяРаботы = РеквизитыВариантаНаладки.ВремяРаботы;
				ЕдиницаИзмерения = РеквизитыВариантаНаладки.ЕдиницаИзмерения;
			Иначе
				ВремяРаботы = 0;
				ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
			КонецЕсли; 
		Иначе
			ВремяРаботы = РеквизитыВидаРЦ.ВремяРаботы;
			ЕдиницаИзмерения = РеквизитыВидаРЦ.ЕдиницаИзмерения;
		КонецЕсли;
		СтрокаВидРЦ.ВремяРаботы = ВремяРаботы;
		СтрокаВидРЦ.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаВидРЦ.СинхроннаяЗагрузка = Истина;
	КонецЕсли; 
	
КонецПроцедуры

//-- НЕ УТКА

// Создает спецификацию на основании спецификации заказа
//
// Параметры:
//  Объект					 - ДанныеФормыСтруктура - содержит данные спецификации заказа
//  ДанныеПродукции			 - ДанныеФормыСтруктура - содержит данные текущей продукции заказа
//  ПараметрыСпецификации	 - Структура - содержит параметры новой спецификации
//
// Возвращаемое значение:
//	Структура - содержит данные новой спецификации
//  				* Ссылка - СправочникСсылка.РесурсныеСпецификации - новая спецификация
//					* Наименование - Строка - наименование спецификации
//    
Функция СоздатьСпецификациюНаОснованииСпецификацииЗаказа(Объект, ДанныеПродукции, ПараметрыСпецификации) Экспорт

	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	НачатьТранзакцию();
	
	СсылкаНового = Справочники.РесурсныеСпецификации.ПолучитьСсылку();
	
	Если ЗначениеЗаполнено(ДанныеПродукции.Спецификация) Тогда
		// Чтобы скопировать реквизиты спецификации, которых нет в заказе
		НоваяСпецификация = ДанныеПродукции.Спецификация.Скопировать();
		НоваяСпецификация.ВыходныеИзделия.Очистить();
		НоваяСпецификация.ВозвратныеОтходы.Очистить();
		НоваяСпецификация.МатериалыИУслуги.Очистить();
		НоваяСпецификация.Трудозатраты.Очистить();
		НоваяСпецификация.СоответствиеСвойств.Очистить();
		НоваяСпецификация.ДополнительныеРеквизиты.Очистить();
	Иначе
		НоваяСпецификация = Справочники.РесурсныеСпецификации.СоздатьЭлемент();
		НоваяСпецификация.Заполнить(Неопределено);
	КонецЕсли; 
	
	НоваяСпецификация.Наименование = ПараметрыСпецификации.НаименованиеСпецификации;
	НоваяСпецификация.Описание = ПараметрыСпецификации.Описание;
	
	// Копирование Этапы
	СозданныеЭтапы = Новый Соответствие;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
	ТаблицаЭтапы = Объект.Этапы.Выгрузить(СтруктураПоиска);
	
	ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы);
	
	Для каждого ЭтапЗаказа Из ТаблицаЭтапы Цикл
		
		Если ЗначениеЗаполнено(ЭтапЗаказа.Этап) Тогда
			// Чтобы скопировать реквизиты этапа, которых нет в заказе
			НовыйЭтап = ЭтапЗаказа.Этап.Скопировать();
			НовыйЭтап.ВидыРабочихЦентров.Очистить();
			НовыйЭтап.АльтернативныеВидыРабочихЦентров.Очистить();
			НовыйЭтап.ДополнительныеРеквизиты.Очистить();
		Иначе
			НовыйЭтап = Справочники.ЭтапыПроизводства.СоздатьЭлемент();
			НовыйЭтап.Заполнить(Неопределено);
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапЗаказа);
		НовыйЭтап.Владелец = СсылкаНового;
		
		СтруктураПоискаПоЭтапу = Новый Структура("КлючСвязиЭтапы", ЭтапЗаказа.КлючСвязи);
		ТаблицаВидыРЦ = Объект.ВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
		ТаблицаВидыРЦ.Сортировать("НомерСтроки");
		Для каждого ВидРЦЗаказа Из ТаблицаВидыРЦ Цикл
			СтрокаВидРЦ = НовыйЭтап.ВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВидРЦ, ВидРЦЗаказа);
		КонецЦикла;
		
		ТаблицаАльтернативныеВидыРЦ = Объект.АльтернативныеВидыРабочихЦентров.Выгрузить(СтруктураПоискаПоЭтапу);
		ТаблицаАльтернативныеВидыРЦ.Сортировать("НомерСтроки");
		Для каждого АльтернативныйВидРЦ Из ТаблицаАльтернативныеВидыРЦ Цикл
			СтрокаАльтернативныйВидРЦ = НовыйЭтап.АльтернативныеВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАльтернативныйВидРЦ, АльтернативныйВидРЦ);
		КонецЦикла;
		
		НовыйЭтап.ОбменДанными.Загрузка = Истина;
		НовыйЭтап.Записать();
		
		СозданныеЭтапы.Вставить(ЭтапЗаказа.КлючСвязи, НовыйЭтап.Ссылка);
		
	КонецЦикла;
	
	// Копирование ВыходныеИзделия
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
	СтруктураПоиска.Вставить("ПроизводитсяВПроцессе", Ложь);
	ТаблицаВыходныеИзделия = Объект.ВыходныеИзделия.Выгрузить(СтруктураПоиска);
	ТаблицаВыходныеИзделия.Сортировать("НомерСтроки");
	Для каждого ИзделиеЗаказа Из ТаблицаВыходныеИзделия Цикл
		НовыйЭтап = СозданныеЭтапы.Получить(ИзделиеЗаказа.КлючСвязиЭтапы);
		Если НовыйЭтап = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИзделие = НоваяСпецификация.ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИзделие, ИзделиеЗаказа);
		
		СтрокаИзделие.Количество = СтрокаИзделие.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
		СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
		
		СтрокаИзделие.Этап = НовыйЭтап;
		СтрокаИзделие.ЭтапРедактирование = НовыйЭтап;
	КонецЦикла;
	
	// Копирование ВозвратныеОтходы
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
	ТаблицаВозвратныеОтходы = Объект.ВозвратныеОтходы.Выгрузить(СтруктураПоиска);
	ТаблицаВозвратныеОтходы.Сортировать("НомерСтроки");
	Для каждого ОтходЗаказа Из ТаблицаВозвратныеОтходы Цикл
		НовыйЭтап = СозданныеЭтапы.Получить(ОтходЗаказа.КлючСвязиЭтапы);
		Если НовыйЭтап = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтход = НоваяСпецификация.ВозвратныеОтходы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОтход, ОтходЗаказа);
		
		СтрокаОтход.Количество = СтрокаОтход.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
		СтрокаОтход.КоличествоУпаковок = СтрокаОтход.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
		
		ОтходЗаказа.Этап = НовыйЭтап;
		ОтходЗаказа.ЭтапРедактирование = НовыйЭтап;
	КонецЦикла;
	
	// Копирование МатериалыИУслуги
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
	ТаблицаМатериалы = Объект.МатериалыИУслуги.Выгрузить(СтруктураПоиска);
	ТаблицаМатериалы.Сортировать("НомерСтроки");
	Для каждого МатериалЗаказа Из ТаблицаМатериалы Цикл
		НовыйЭтап = СозданныеЭтапы.Получить(МатериалЗаказа.КлючСвязиЭтапы);
		Если НовыйЭтап = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаМатериал = НоваяСпецификация.МатериалыИУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМатериал, МатериалЗаказа);
		
		СтрокаМатериал.Количество = СтрокаМатериал.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
		СтрокаМатериал.КоличествоУпаковок = СтрокаМатериал.КоличествоУпаковок * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
		
		УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиМатериалов(СтрокаМатериал, Неопределено, Неопределено);
		
		СтрокаМатериал.Этап = НовыйЭтап;
		СтрокаМатериал.ЭтапРедактирование = НовыйЭтап;
		
		СтрокаМатериал.ПроизводитсяВПроцессе = Ложь;
		СтрокаМатериал.ИсточникПолученияПолуфабриката = Справочники.РесурсныеСпецификации.ПустаяСсылка();
	КонецЦикла;
	
	// Копирование Трудозатраты
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
	ТаблицаТрудозатраты = Объект.Трудозатраты.Выгрузить(СтруктураПоиска);
	ТаблицаТрудозатраты.Сортировать("НомерСтроки");
	Для каждого ТрудозатратыЗаказа Из ТаблицаТрудозатраты Цикл
		НовыйЭтап = СозданныеЭтапы.Получить(ТрудозатратыЗаказа.КлючСвязиЭтапы);
		Если НовыйЭтап = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТрудозатраты = НоваяСпецификация.Трудозатраты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТрудозатраты, ТрудозатратыЗаказа);
		
		СтрокаТрудозатраты.Количество = СтрокаТрудозатраты.Количество * ПараметрыСпецификации.Количество / ДанныеПродукции.Количество;
		
		СтрокаТрудозатраты.Этап = НовыйЭтап;
		СтрокаТрудозатраты.ЭтапРедактирование = НовыйЭтап;
	КонецЦикла;
	
	НоваяСпецификация.МногоэтапныйПроизводственныйПроцесс = (СозданныеЭтапы.Количество() <> 1);
	
	НоваяСпецификация.УстановитьСсылкуНового(СсылкаНового);
	НоваяСпецификация.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат Новый Структура("Ссылка,Наименование", НоваяСпецификация.Ссылка, НоваяСпецификация.Наименование);

КонецФункции

Процедура ПеренумероватьЭтапыСпецификации(ТаблицаЭтапы)

	ТаблицаЭтапы.Колонки.Добавить("УровеньЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0, ДопустимыйЗнак.Неотрицательный)));
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КлючСвязиЭтапы", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
	КоличествоУровней = 1;
	ЗаполнитьУровеньЭтапов(ТаблицаЭтапы, НайденныеСтроки, 1, КоличествоУровней);
	
	ПредыдущийНомер = 0;
	СмещениеНомера = 0;
	ТекущийУровень = КоличествоУровней;
	
	ТаблицаЭтапы.Сортировать("УровеньЭтапа Убыв");
	
	КлючиСвязейЭтапов = Новый Соответствие;
	
	Для Каждого Строка из ТаблицаЭтапы Цикл
		
		Если ТекущийУровень <> Строка.УровеньЭтапа Тогда
			СмещениеНомера = СмещениеНомера + ПредыдущийНомер;
			ТекущийУровень = Строка.УровеньЭтапа;
		КонецЕсли;
		
		Строка.НомерЭтапа = Строка.НомерЭтапа + СмещениеНомера;
		
		КлючиСвязейЭтапов.Вставить(Строка.КлючСвязи, Строка.НомерЭтапа);
		
		Если ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = Строка.НомерСледующегоЭтапа + СмещениеНомера;
		КонецЕсли;
		
		ПредыдущийНомер = Строка.НомерЭтапа;
		
	КонецЦикла;
	
	Для Каждого Строка из ТаблицаЭтапы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапа = КлючиСвязейЭтапов.Получить(Строка.КлючСвязиЭтапы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа, КоличествоУровней)
	
	Для Каждого Строка из НайденныеСтроки Цикл
		
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", Строка.КлючСвязи));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			КоличествоУровней = Макс(УровеньЭтапа, КоличествоУровней);
			
			Если Строка.НомерЭтапа = 1 Тогда
				Строка.УровеньЭтапа = КоличествоУровней;
			Иначе
				Строка.УровеньЭтапа = УровеньЭтапа;
			КонецЕсли;
			
		Иначе
			Строка.УровеньЭтапа = УровеньЭтапа;
			ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, УровеньЭтапа + 1, КоличествоУровней);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область АвтовыборМатериалов

Процедура ОбработатьНастройкиАвтовыбораИПотребленияМатериалов(МатериалыИУслуги, ДанныеПоНоменклатуре, ИсточникНастроек, ПолучитьПредставления = Ложь, ПолучитьСведенияАвтовыбора = Ложь, ЗаполнитьСпособыПолученияМатериала = Ложь) Экспорт

	Если ЗаполнитьСпособыПолученияМатериала Тогда
		
		МассивСтрокАвтовыбора = Новый Массив;
		
		ТаблицаМатериалов = Новый ТаблицаЗначений;
		ТаблицаМатериалов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		ТаблицаМатериалов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
		ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМатериалов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	МатериалыИУслуги.Колонки.Добавить("СведенияАвтовыбора", Новый ОписаниеТипов("Строка"));
	
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		
		Если СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции
			ИЛИ СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве
			ИЛИ СтрокаМатериал.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции
			ИЛИ СтрокаМатериал.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве Тогда
		
			Если НЕ ЗначениеЗаполнено(ДанныеПоНоменклатуре.Номенклатура) Тогда
				СтрокаМатериал.СведенияАвтовыбора = НСтр("ru='Необходимо указать продукцию.';uk='Необхідно зазначити продукцію.'");
				Продолжить;
			КонецЕсли; 
			
			СведенияАвтовыбораНоменклатуры   = "";
			СведенияАвтовыбораХарактеристики = "";
			
			Если СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции Тогда
				СведенияАвтовыбораНоменклатуры = ВыборНоменклатурыИзСвойства(
														ДанныеПоНоменклатуре, 
														СтрокаМатериал, 
														ПолучитьПредставления, 
														ПолучитьСведенияАвтовыбора);
			КонецЕсли; 
			
			Если СтрокаМатериал.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.ПодбираетсяПоСвойствамПродукции Тогда
				СведенияАвтовыбораХарактеристики = ВыборХарактеристикиПоСвойствам(
														ДанныеПоНоменклатуре, 
														СтрокаМатериал, 
														ПолучитьПредставления, 
														ПолучитьСведенияАвтовыбора, 
														ИсточникНастроек);
			КонецЕсли; 
			
			Если ПолучитьСведенияАвтовыбора Тогда
				Если СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве Тогда
					СведенияАвтовыбораНоменклатуры = УточнениеМатериалаПриПроизводстве(ДанныеПоНоменклатуре, СтрокаМатериал, ИсточникНастроек);
					
				ИначеЕсли СтрокаМатериал.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве Тогда
					СведенияАвтовыбораХарактеристики = УточнениеМатериалаПриПроизводстве(ДанныеПоНоменклатуре, СтрокаМатериал, ИсточникНастроек);
				КонецЕсли;
				
				СтрокаМатериал.СведенияАвтовыбора = СведенияАвтовыбораНоменклатуры 
																+ ?(СведенияАвтовыбораНоменклатуры = "", "", " ")
																+ СведенияАвтовыбораХарактеристики;
																
			КонецЕсли;
		
			Если ЗаполнитьСпособыПолученияМатериала Тогда
				
				МассивСтрокАвтовыбора.Добавить(СтрокаМатериал);
				ЗаполнитьЗначенияСвойств(ТаблицаМатериалов.Добавить(), СтрокаМатериал);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(СтрокаМатериал.АлгоритмРасчетаКоличества) Тогда
			РассчитатьКоличествоПоФормуле(ДанныеПоНоменклатуре, СтрокаМатериал);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ЗаполнитьСпособыПолученияМатериала И МассивСтрокАвтовыбора.Количество() > 0 Тогда
		
		ПараметрыОтбора = Новый Структура("
				|Подразделение, 
				|ПроизводствоНаСтороне, 
				|Номенклатура, 
				|Характеристика");
		
		ДанныеЗаказа = Новый Структура;
		
		Если ДанныеПоНоменклатуре.Свойство("ПодразделениеДиспетчер") Тогда
			ДанныеЗаказа.Вставить("ПодразделениеДиспетчер", ДанныеПоНоменклатуре.ПодразделениеДиспетчер);
		Иначе
			ДанныеЗаказа.Вставить("ПодразделениеДиспетчер", Справочники.СтруктураПредприятия.ПустаяСсылка());
		КонецЕсли;
		
		Если ДанныеПоНоменклатуре.Свойство("Назначение") Тогда
			ДанныеЗаказа.Вставить("Назначение", ДанныеПоНоменклатуре.Назначение);
		Иначе
			ДанныеЗаказа.Вставить("Назначение", Справочники.Назначения.ПустаяСсылка());
		КонецЕсли;
		
		Если ДанныеПоНоменклатуре.Свойство("ДатаПотребности") Тогда
			ДанныеЗаказа.Вставить("ДатаПотребности", ДанныеПоНоменклатуре.ДатаПотребности);
		Иначе
			ДанныеЗаказа.Вставить("ДатаПотребности", '00010101');
		КонецЕсли;
		
		СпособыПолученияМатериалов = ПланированиеПроизводства.СпособыПолученияМатериаловПоУмолчанию(ДанныеЗаказа, ТаблицаМатериалов);
		
		Для Каждого ТекущаяСтрока Из МассивСтрокАвтовыбора Цикл
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ТекущаяСтрока);
			
			Для Каждого СпособПолученияМатериала Из СпособыПолученияМатериалов.НайтиСтроки(ПараметрыОтбора) Цикл
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СпособПолученияМатериала);
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАвтовыборМатериаловИНастройкиПотребления(МатериалыИУслуги, СоответствиеСвойств, ВидИзделий) Экспорт

	СписокСвойств = ПолучитьСвойстваДляАвтоподбора(ВидИзделий);
	
	// Проверим реквизит ОтборСвойство
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если НЕ СтрокаМатериал.ОтборСвойство.Пустая() И СписокСвойств.Найти(СтрокаМатериал.ОтборСвойство) = Неопределено Тогда
			СтрокаМатериал.ОтборСвойство         = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
			СтрокаМатериал.ОтборЗначениеСвойства = Неопределено
		КонецЕсли; 
	КонецЦикла; 
	
	// Проверим настройку автовыбора
	Для каждого ДанныеНастройки Из СоответствиеСвойств Цикл
		Если СписокСвойств.Найти(ДанныеНастройки.Свойство) = Неопределено Тогда
			ДанныеНастройки.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборНоменклатурыИзСвойства(ДанныеПоНоменклатуре, СтрокаМатериал, ПолучитьПредставления, ПолучитьСведенияАвтовыбора)
	
	СведенияАвтовыбора = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&НоменклатураПредставление,
	|	ЗначенияСвойств.Значение КАК Номенклатура,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ИспользованиеХарактеристик, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойств
	|ГДЕ
	|	ЗначенияСвойств.Ссылка = &Номенклатура
	|	И ЗначенияСвойств.Свойство = &Свойство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НоменклатураПредставление,
	|	ЗначенияСвойств.Значение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).ИспользованиеХарактеристик, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойств
	|ГДЕ
	|	ЗначенияСвойств.Ссылка = &Характеристика
	|	И ЗначенияСвойств.Свойство = &Свойство";
				   
	Если ПолучитьПредставления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НоменклатураПредставление,", "ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойств.Значение КАК Справочник.Номенклатура).Представление, """") КАК НоменклатураПредставление,");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НоменклатураПредставление,", "");
	КонецЕсли;

	Запрос.УстановитьПараметр("Номенклатура",   ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("Свойство",       СтрокаМатериал.СвойствоСодержащееНоменклатуру);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ПолучитьСведенияАвтовыбора Тогда
			СведенияАвтовыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Номенклатуру не удалось получить из свойства <%1>.';uk='Номенклатуру не вдалося отримати з властивості <%1>.'"),
										Строка(СтрокаМатериал.СвойствоСодержащееНоменклатуру));
		КонецЕсли; 
		
		Возврат СведенияАвтовыбора;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтрокаМатериал, Выборка);
	
	Возврат СведенияАвтовыбора;

КонецФункции

Функция ЗаполнитьСведенияАвтовыбора(ДанныеАвтовыбора)
	
	СведенияАвтовыбора = "";
	
	Для каждого ЭлКоллекции Из ДанныеАвтовыбора Цикл
		СведенияАвтовыбора = СведенияАвтовыбора + ?(ПустаяСтрока(СведенияАвтовыбора), "", "; ")
											+ "<" + ЭлКоллекции.Свойство + ">" + ?(ЭлКоллекции.Значение = Неопределено, "", ": " + ЭлКоллекции.Значение);
	КонецЦикла; 
	
	Возврат СведенияАвтовыбора;
	
КонецФункции

// Определяет характеристику материала по характеристике продукции
// Алгоритм выбора характеристики:
// 1. Среди характеристик материала ищется характеристика, 
//    у которой наибольшее количество свойств совпадает со свойствами характеристики продукции
// 2. Свойства совпадают, если они одинаковые или для них задано соответствие в настройке автовыбора
// 3. Если у продукции есть свойство которое определено для продукции и для характеристик то берется свойство определенное для продукции
//
Функция ВыборХарактеристикиПоСвойствам(ДанныеПоНоменклатуре, СтрокаМатериал, ПолучитьПредставления, ПолучитьСведенияАвтовыбора, ИсточникНастроек)
	
	ВладелецХарактеристикМатериала = Неопределено;
	Если НЕ Справочники.Номенклатура.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(СтрокаМатериал.Номенклатура, ВладелецХарактеристикМатериала) Тогда
		Возврат "";
	КонецЕсли; 
	
	ВладелецХарактеристикПродукции = Неопределено;
	Справочники.Номенклатура.ПроверитьИспользованиеХарактеристикИПолучитьВладельцаДляВыбора(ДанныеПоНоменклатуре.Номенклатура, ВладелецХарактеристикПродукции);
	Если ВладелецХарактеристикПродукции = ВладелецХарактеристикМатериала Тогда
		СтрокаМатериал.Характеристика = ДанныеПоНоменклатуре.Характеристика;
		Если ПолучитьПредставления Тогда
			СтрокаМатериал.ХарактеристикаПредставление = Строка(СтрокаМатериал.Характеристика);
		КонецЕсли;
		Возврат "";
	КонецЕсли;
	
	СведенияАвтовыбора = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствПродукции.Свойство    КАК Свойство,
	|	ЗначенияСвойствПродукции.Значение    КАК Значение,
	|	ЗначенияСвойствПродукции.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ЗначенияСвойствПродукции
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойствПродукции
	|ГДЕ
	|	ЗначенияСвойствПродукции.Ссылка = &Номенклатура
	|	И ЗначенияСвойствПродукции.Свойство В
	|			(ВЫБРАТЬ
	|				НаборыСвойствДополнительныеРеквизиты.Свойство
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|			ГДЕ
	|				НаборыСвойствДополнительныеРеквизиты.Ссылка В (&НаборПродукции)
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ЭтоГруппа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствХарактеристики.Свойство    КАК Свойство,
	|	ЗначенияСвойствХарактеристики.Значение    КАК Значение,
	|	ЗначенияСвойствХарактеристики.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ЗначенияСвойствХарактеристикиПродукции
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствХарактеристики
	|ГДЕ
	|	ЗначенияСвойствХарактеристики.Ссылка = &Характеристика
	|	И ЗначенияСвойствХарактеристики.Свойство В
	|			(ВЫБРАТЬ
	|				НаборыСвойствДополнительныеРеквизиты.Свойство
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|			ГДЕ
	|				НаборыСвойствДополнительныеРеквизиты.Ссылка В (&НаборХарактеристики)
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ЭтоГруппа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыХарактеристикиМатериала.Свойство КАК Свойство
	|ПОМЕСТИТЬ СвойстваМатериала
	|ИЗ
	|	Справочник.Номенклатура КАК Материал
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидМатериала
	|	ПО ВидМатериала.Ссылка = Материал.ВидНоменклатуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДополнительныеРеквизитыХарактеристикиМатериала
	|	ПО (ДополнительныеРеквизитыХарактеристикиМатериала.Ссылка = ВидМатериала.НаборСвойствХарактеристик
	|			ИЛИ ДополнительныеРеквизитыХарактеристикиМатериала.Ссылка = &НаборОбщихСвойствХарактеристик)
	|		И НЕ ДополнительныеРеквизитыХарактеристикиМатериала.Свойство.ПометкаУдаления
	|ГДЕ
	|	Материал.Ссылка = &Материал
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.КоличествоСвойствКоторыеМожноСопоставить КАК КоличествоСвойствКоторыеМожноСопоставить,
	|	ВложенныйЗапрос.КоличествоСовпавшихСвойств КАК КоличествоСовпавшихСвойств,
	|	//Характеристика_Представление,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПодбираемыеХарактеристики.Ссылка КАК Характеристика,
	|		СУММА(1) КАК КоличествоСвойствКоторыеМожноСопоставить,
	|		СУММА(ВЫБОР
	|				КОГДА ЗначенияСвойствПодбираемойХарактеристики.Значение = ЕСТЬNULL(ЗначенияСвойствПродукции.Значение, 
	|																		ЕСТЬNULL(ЗначенияСвойствХарактеристикиПродукции.Значение, НЕОПРЕДЕЛЕНО))
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК КоличествоСовпавшихСвойств
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК ПодбираемыеХарактеристики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствПодбираемойХарактеристики
	|			ПО (ЗначенияСвойствПодбираемойХарактеристики.Ссылка = ПодбираемыеХарактеристики.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИсточникНастроек + ".СоответствиеСвойств КАК СоответствиеСвойств
	|			ПО (СоответствиеСвойств.Ссылка = &Спецификация)
	|				И (СоответствиеСвойств.КлючСвязиМатериал = &КлючСвязи)
	|				И (СоответствиеСвойств.СвойствоМатериала = ЗначенияСвойствПодбираемойХарактеристики.Свойство)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСвойствПродукции КАК ЗначенияСвойствПродукции
	|			ПО (ЗначенияСвойствПродукции.Свойство = ЗначенияСвойствПодбираемойХарактеристики.Свойство
	|					ИЛИ ЗначенияСвойствПродукции.Свойство = СоответствиеСвойств.СвойствоПродукции)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСвойствХарактеристикиПродукции КАК ЗначенияСвойствХарактеристикиПродукции
	|			ПО (ЗначенияСвойствХарактеристикиПродукции.Свойство = ЗначенияСвойствПодбираемойХарактеристики.Свойство
	|					ИЛИ ЗначенияСвойствХарактеристикиПродукции.Свойство = СоответствиеСвойств.СвойствоПродукции)
	|	ГДЕ
	|		ПодбираемыеХарактеристики.Владелец = &ВладелецХарактеристикМатериала
	|		И НЕ ПодбираемыеХарактеристики.ПометкаУдаления
	|		И НЕ ЕСТЬNULL(ЗначенияСвойствПродукции.Значение, ЗначенияСвойствХарактеристикиПродукции.Значение) ЕСТЬ NULL
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПодбираемыеХарактеристики.Ссылка) КАК ВложенныйЗапрос
	|
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоСовпавшихСвойств = ВложенныйЗапрос.КоличествоСвойствКоторыеМожноСопоставить
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСовпавшихСвойств УБЫВ";
	
	Если ПолучитьСведенияАвтовыбора Тогда
		Запрос.Текст = Запрос.Текст + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	1                                                  КАК Приоритет,
	               |	ЗначенияСвойствПродукции.НомерСтроки               КАК НомерСтроки,
	               |	ЕСТЬNULL(СоответствиеСвойств.СвойствоМатериала.Заголовок, 
				   |		ЗначенияСвойствПродукции.Свойство.Заголовок)   КАК Свойство,
				   |	ВЫБОР
				   |		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСвойствПродукции.Значение) = ТИП(ЧИСЛО)
				   |				ИЛИ ТИПЗНАЧЕНИЯ(ЗначенияСвойствПродукции.Значение) = ТИП(СТРОКА)
				   |				ИЛИ ТИПЗНАЧЕНИЯ(ЗначенияСвойствПродукции.Значение) = ТИП(ДАТА)
				   |				ИЛИ ТИПЗНАЧЕНИЯ(ЗначенияСвойствПродукции.Значение) = ТИП(БУЛЕВО)
				   |			ТОГДА ЗначенияСвойствПродукции.Значение
				   |		ИНАЧЕ ЗначенияСвойствПродукции.Значение.Представление
				   |	КОНЕЦ КАК Значение
	               |ИЗ
	               |	ЗначенияСвойствПродукции КАК ЗначенияСвойствПродукции
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИсточникНастроек + ".СоответствиеСвойств КАК СоответствиеСвойств
				   |		ПО (СоответствиеСвойств.Ссылка = &Спецификация)
				   |			И (СоответствиеСвойств.КлючСвязиМатериал = &КлючСвязи)
				   |			И (СоответствиеСвойств.СвойствоПродукции = ЗначенияСвойствПродукции.Свойство)
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваМатериала КАК СвойстваМатериала
				   |		ПО (СвойстваМатериала.Свойство = ЕСТЬNULL(СоответствиеСвойств.СвойствоМатериала, ЗначенияСвойствПродукции.Свойство))
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
				   |	2,
	               |	ЗначенияСвойствХарактеристикиПродукции.НомерСтроки,
	               |	ЕСТЬNULL(СоответствиеСвойств.СвойствоМатериала.Заголовок, 
				   |		ЗначенияСвойствХарактеристикиПродукции.Свойство.Заголовок),
	               |	ВЫБОР
				   |		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСвойствХарактеристикиПродукции.Значение) = ТИП(ЧИСЛО)
				   |				ИЛИ ТИПЗНАЧЕНИЯ(ЗначенияСвойствХарактеристикиПродукции.Значение) = ТИП(СТРОКА)
				   |				ИЛИ ТИПЗНАЧЕНИЯ(ЗначенияСвойствХарактеристикиПродукции.Значение) = ТИП(ДАТА)
				   |				ИЛИ ТИПЗНАЧЕНИЯ(ЗначенияСвойствХарактеристикиПродукции.Значение) = ТИП(БУЛЕВО)
				   |			ТОГДА ЗначенияСвойствХарактеристикиПродукции.Значение
				   |		ИНАЧЕ ЗначенияСвойствХарактеристикиПродукции.Значение.Представление
				   |	КОНЕЦ
	               |ИЗ
	               |	ЗначенияСвойствХарактеристикиПродукции КАК ЗначенияСвойствХарактеристикиПродукции
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИсточникНастроек + ".СоответствиеСвойств КАК СоответствиеСвойств
				   |		ПО (СоответствиеСвойств.Ссылка = &Спецификация)
				   |			И (СоответствиеСвойств.КлючСвязиМатериал = &КлючСвязи)
				   |			И (СоответствиеСвойств.СвойствоПродукции = ЗначенияСвойствХарактеристикиПродукции.Свойство)
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваМатериала КАК СвойстваМатериала
				   |		ПО (СвойстваМатериала.Свойство = ЕСТЬNULL(СоответствиеСвойств.СвойствоМатериала, ЗначенияСвойствХарактеристикиПродукции.Свойство))
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСвойствПродукции КАК ЗначенияСвойствПродукции
				   |		ПО ЗначенияСвойствПродукции.Свойство = ЗначенияСвойствХарактеристикиПродукции.Свойство
				   |
				   |ГДЕ
				   |	ЗначенияСвойствПродукции.Свойство ЕСТЬ NULL
				   |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет,
				   |	НомерСтроки";
	КонецЕсли;
	
	Если ПолучитьПредставления Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Характеристика_Представление", "ЕСТЬNULL(ВложенныйЗапрос.Характеристика.Представление, """") КАК ХарактеристикаПредставление");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура",   ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("ВладелецХарактеристикМатериала", ВладелецХарактеристикМатериала);
	Запрос.УстановитьПараметр("Спецификация",   ДанныеПоНоменклатуре.Спецификация);
	Запрос.УстановитьПараметр("Материал", 		СтрокаМатериал.Номенклатура);
	Запрос.УстановитьПараметр("КлючСвязи",      СтрокаМатериал.КлючСвязи);
	
	НаборПродукции = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("НаборПродукции", НаборПродукции.ВыгрузитьКолонку("Набор"));
	
	НаборХарактеристики = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("НаборХарактеристики", НаборХарактеристики.ВыгрузитьКолонку("Набор"));
	
	Запрос.УстановитьПараметр("НаборОбщихСвойствХарактеристик", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[3].Пустой() Тогда
		Если ПолучитьСведенияАвтовыбора Тогда
			ДанныеАвтовыбора = РезультатЗапроса[4].Выгрузить();
			СведенияАвтовыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Характеристику не удалось подобрать по свойствам: %1';uk='Характеристику не вдалося підібрати за властивостями: %1'"),
											ЗаполнитьСведенияАвтовыбора(ДанныеАвтовыбора));
		КонецЕсли;
		Возврат СведенияАвтовыбора;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	Выборка.Следующий();
	
	СтрокаМатериал.Характеристика = Выборка.Характеристика;
	Если ПолучитьПредставления Тогда
		СтрокаМатериал.ХарактеристикаПредставление = Выборка.ХарактеристикаПредставление;
	КонецЕсли;
	
	Возврат СведенияАвтовыбора;

КонецФункции

Функция РассчитатьКоличествоПоФормуле(Продукция, СтрокаМатериал)

	Формула = СтрокаМатериал.АлгоритмРасчетаКоличества;
	
	ФормулаДляРазбора = СтрЗаменить(Формула, "[", Символы.ПС + "[");
	ФормулаДляРазбора = СтрЗаменить(ФормулаДляРазбора, "]", "]" + Символы.ПС);
	ФормулаДляРазбора = СтрЗаменить(ФормулаДляРазбора, "{", Символы.ПС + "{");
	ФормулаДляРазбора = СтрЗаменить(ФормулаДляРазбора, "}", "}" + Символы.ПС);
	
	СтруктураПараметров = Новый Структура;
	СоответствиеПараметров = Новый Соответствие;
	
	// Ключ формируется так
	// [Продукция.Свойство] - для свойств продукции
	// [Материал.Свойство] - для свойств материала
	
	КлючПродукция = "[" + НСтр("ru='Продукция';uk='Продукція'") + ".";
	ДлинаКлючаПродукция = СтрДлина(КлючПродукция);
	
	КлючМатериал = "[" + НСтр("ru='Материал';uk='Матеріал'") + ".";
	ДлинаКлючаМатериал = СтрДлина(КлючМатериал);
	
	Для Индекс = 1 По СтрЧислоСтрок(ФормулаДляРазбора) Цикл
		
		ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(ФормулаДляРазбора, Индекс));
		
		ИмяПараметра = "Параметр" + Формат(Индекс, "ЧГ=0");
		
		Если Лев(ТекущаяСтрока, 2) = "[#" Тогда
			
			Формула = СтрЗаменить(Формула, ТекущаяСтрока, СтрЗаменить(СтрЗаменить(ТекущаяСтрока, "[#", ""), "#]", ""));
			
		ИначеЕсли (Лев(ТекущаяСтрока, 1) = "{" ИЛИ Лев(ТекущаяСтрока, 1) = "[") И СоответствиеПараметров[ТекущаяСтрока] = Неопределено Тогда
			
			Формула = СтрЗаменить(Формула, ТекущаяСтрока, "СтруктураПараметров." + ИмяПараметра);
			СоответствиеПараметров.Вставить(ТекущаяСтрока, ИмяПараметра);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;

	КонецЦикла;
	
	МассивПараметров = Новый Массив;
	МассивСвойствПродукции = Новый Массив;
	МассивСвойствМатериала = Новый Массив;
	
	Для каждого Параметр из СоответствиеПараметров Цикл
		
		Если Лев(Параметр.Ключ, ДлинаКлючаМатериал) = КлючМатериал Тогда
			
			МассивСвойствМатериала.Добавить(СтрЗаменить(СтрЗаменить(Параметр.Ключ, КлючМатериал, ""), "]", ""));
			
		ИначеЕсли Лев(Параметр.Ключ, ДлинаКлючаПродукция) = КлючПродукция Тогда
			
			МассивСвойствПродукции.Добавить(СтрЗаменить(СтрЗаменить(Параметр.Ключ, КлючПродукция, ""), "]", ""));
			
		ИначеЕсли Лев(Параметр.Ключ, 1) = "[" Тогда
			
			МассивСвойствПродукции.Добавить(СтрЗаменить(СтрЗаменить(Параметр.Ключ, "[", ""), "]", ""));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСвойствПродукции.Количество() > 0 
		ИЛИ МассивСвойствМатериала.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&КлючПродукция КАК ВладелецСвойств,
		|	ДополнительныеРеквизиты.Свойство.Заголовок КАК Наименование,
		|	ДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка = &ПродукцияНоменклатура
		|	И ДополнительныеРеквизиты.Свойство.Заголовок В(&МассивСвойствПродукции)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&КлючПродукция КАК ВладелецСвойств,
		|	ДополнительныеРеквизиты.Свойство.Заголовок,
		|	ДополнительныеРеквизиты.Значение
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка = &ПродукцияХарактеристика
		|	И ДополнительныеРеквизиты.Свойство.Заголовок В(&МассивСвойствПродукции)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&КлючМатериал КАК ВладелецСвойств,
		|	ДополнительныеРеквизиты.Свойство.Заголовок КАК Наименование,
		|	ДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка = &МатериалНоменклатура
		|	И ДополнительныеРеквизиты.Свойство.Заголовок В(&МассивСвойствМатериала)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&КлючМатериал КАК ВладелецСвойств,
		|	ДополнительныеРеквизиты.Свойство.Заголовок,
		|	ДополнительныеРеквизиты.Значение
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка = &МатериалХарактеристика
		|	И ДополнительныеРеквизиты.Свойство.Заголовок В(&МассивСвойствМатериала)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование,
		|	Значение";
			
		Запрос.УстановитьПараметр("ПродукцияНоменклатура",   Продукция.Номенклатура);
		Запрос.УстановитьПараметр("ПродукцияХарактеристика", Продукция.Характеристика);
		Запрос.УстановитьПараметр("МатериалНоменклатура",    СтрокаМатериал.Номенклатура);
		Запрос.УстановитьПараметр("МатериалХарактеристика",  СтрокаМатериал.Характеристика);
		Запрос.УстановитьПараметр("МассивСвойствПродукции",  МассивСвойствПродукции);
		Запрос.УстановитьПараметр("МассивСвойствМатериала",  МассивСвойствМатериала);
		Запрос.УстановитьПараметр("КлючПродукция",           НСтр("ru='Продукция';uk='Продукція'"));
		Запрос.УстановитьПараметр("КлючМатериал",            НСтр("ru='Материал';uk='Матеріал'"));
			
		РезультатЗапроса = Запрос.Выполнить();
				
		Если НЕ РезультатЗапроса.Пустой() Тогда
					
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ИмяСвойства = "[" + Выборка.ВладелецСвойств + "." + Выборка.Наименование + "]";
				Если НЕ СтруктураПараметров.Свойство(СоответствиеПараметров[ИмяСвойства]) Тогда
					
					СтруктураПараметров.Вставить(СоответствиеПараметров[ИмяСвойства], Выборка.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
					
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим нулевое значение, т.к. нулевые значения не хранятся в базе
	Для каждого Параметр из СоответствиеПараметров Цикл
		Если НЕ СтруктураПараметров.Свойство(Параметр.Значение) Тогда
			СтруктураПараметров.Вставить(Параметр.Значение, 0);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		
		СтрокаМатериал.Количество = Вычислить(Формула);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаМатериал, СтруктураДействий, Неопределено);
		
		Возврат Истина;
				
	Исключение
				
		СтрокаМатериал.Количество = 0;
		СтрокаМатериал.КоличествоУпаковок = 0;
		
		Возврат Ложь;
		
	КонецПопытки
	
КонецФункции

Функция УточнениеМатериалаПриПроизводстве(ДанныеПоНоменклатуре, СтрокаМатериал, ИсточникНастроек)

 	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствПродукции.Свойство КАК Свойство,
	|	ЗначенияСвойствПродукции.Значение КАК Значение,
	|	ЗначенияСвойствПродукции.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ЗначенияСвойствПродукции
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ЗначенияСвойствПродукции
	|ГДЕ
	|	ЗначенияСвойствПродукции.Ссылка = &Номенклатура
	|	И ЗначенияСвойствПродукции.Свойство В
	|			(ВЫБРАТЬ
	|				НаборыСвойствДополнительныеРеквизиты.Свойство
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|			ГДЕ
	|				НаборыСвойствДополнительныеРеквизиты.Ссылка В (&НаборПродукции)
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ЭтоГруппа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСвойствХарактеристики.Свойство КАК Свойство,
	|	ЗначенияСвойствХарактеристики.Значение КАК Значение,
	|	ЗначенияСвойствХарактеристики.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ЗначенияСвойствХарактеристикиПродукции
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЗначенияСвойствХарактеристики
	|ГДЕ
	|	ЗначенияСвойствХарактеристики.Ссылка = &Характеристика
	|	И ЗначенияСвойствХарактеристики.Свойство В
	|			(ВЫБРАТЬ
	|				НаборыСвойствДополнительныеРеквизиты.Свойство
	|			ИЗ
	|				Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыСвойствДополнительныеРеквизиты
	|			ГДЕ
	|				НаборыСвойствДополнительныеРеквизиты.Ссылка В (&НаборХарактеристики)
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	|				И НЕ НаборыСвойствДополнительныеРеквизиты.Ссылка.ЭтоГруппа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Свойство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ЗначенияСвойствПродукции.НомерСтроки КАК НомерСтроки,
	|	ЗначенияСвойствПродукции.Свойство.Заголовок КАК Свойство,
	|	ЗначенияСвойствПродукции.Значение КАК Значение
	|ИЗ
	|	ЗначенияСвойствПродукции КАК ЗначенияСвойствПродукции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЗначенияСвойствХарактеристикиПродукции.НомерСтроки,
	|	ЗначенияСвойствХарактеристикиПродукции.Свойство.Заголовок,
	|	ЗначенияСвойствХарактеристикиПродукции.Значение
	|ИЗ
	|	ЗначенияСвойствХарактеристикиПродукции КАК ЗначенияСвойствХарактеристикиПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияСвойствПродукции КАК ЗначенияСвойствПродукции
	|		ПО (ЗначенияСвойствПродукции.Свойство = ЗначенияСвойствХарактеристикиПродукции.Свойство)
	|ГДЕ
	|	ЗначенияСвойствПродукции.Свойство ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	НомерСтроки";

	Запрос.УстановитьПараметр("Номенклатура",   ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", ДанныеПоНоменклатуре.Характеристика);
	
	НаборПродукции = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ДанныеПоНоменклатуре.Номенклатура);
	Запрос.УстановитьПараметр("НаборПродукции", НаборПродукции.ВыгрузитьКолонку("Набор"));
	
	НаборХарактеристики = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ДанныеПоНоменклатуре.Характеристика);
	Запрос.УстановитьПараметр("НаборХарактеристики", НаборХарактеристики.ВыгрузитьКолонку("Набор"));
	
	ДанныеАвтовыбора = Запрос.Выполнить().Выгрузить();
	
	СведенияАвтовыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Требуется уточнить с учетом свойств: %1';uk='Потрібно уточнити з урахуванням властивостей: %1'"),
									ЗаполнитьСведенияАвтовыбора(ДанныеАвтовыбора));
	
	Возврат СведенияАвтовыбора;
	
КонецФункции

#КонецОбласти

#Область ПостроениеДереваСпецификаций

Функция ПолучитьИндексКартинки(ВидСтроки, ЕстьСпецификация = Ложь)
	
	Если ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие Тогда
		Возврат 4;
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.ВыходныеИзделия Тогда
		Возврат 10;
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал и ЕстьСпецификация Тогда
		Возврат 5;
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Материал и Не ЕстьСпецификация Тогда
		Возврат 2;
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.МатериалыИУслуги Тогда
		Возврат 10;
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Номенклатура Тогда
		Возврат 10;
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатрата Тогда
		Возврат 3;
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Трудозатраты Тогда
		Возврат 10;
	ИначеЕсли ВидСтроки = Перечисления.ВидыСтрокДереваСпецификаций.Этап Тогда
		Возврат 1;
	Иначе
		Возврат 10;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеСпецификацииЗаказа(АдресВХранилище, КлючСвязи)
	
	ДанныеЗаказа = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	СтруктураДанных = Новый Структура;
	
	СтруктураОтбора = Новый Структура("КлючСвязиПолуфабрикат", КлючСвязи);
	
	Этапы = ДанныеЗаказа.Этапы.Скопировать(СтруктураОтбора);
	
	ВыходныеИзделия		= ДанныеЗаказа.ВыходныеИзделия.СкопироватьКолонки();
	ВыходныеИзделия.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ВозвратныеОтходы	= ДанныеЗаказа.ВыходныеИзделия.СкопироватьКолонки();
	ВозвратныеОтходы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	МатериалыИУслуги	= ДанныеЗаказа.МатериалыИУслуги.СкопироватьКолонки();
	МатериалыИУслуги.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Трудозатраты		= ДанныеЗаказа.Трудозатраты.СкопироватьКолонки();
	Трудозатраты.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	Для Каждого СтрокаЭтапы из Этапы Цикл
		
		СтруктураОтбора.Очистить();
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", СтрокаЭтапы.КлючСвязи); 
		
		НайденныеСтроки = ДанныеЗаказа.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			НоваяСтрока = ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			НоваяСтрока = ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			НоваяСтрока = МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЦикла;
		
		НайденныеСтроки = ДанныеЗаказа.Трудозатраты.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка из НайденныеСтроки Цикл
			НоваяСтрока = Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.ВидРабот, "ЕдиницаИзмерения");
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("ВыходныеИзделия",  ВыходныеИзделия);
	СтруктураДанных.Вставить("ВозвратныеОтходы", ВозвратныеОтходы);
	СтруктураДанных.Вставить("Этапы",            Этапы);
	СтруктураДанных.Вставить("МатериалыИУслуги", МатериалыИУслуги);
	СтруктураДанных.Вставить("Трудозатраты",     Трудозатраты);
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТКА

// Обработчик обновления УП 2.0.10.1
// Вызывается при обновлении формул в маршрутных картах и ресурсных спецификациях
//
Процедура ОбновитьФорматФормулыРасчетаКоличества(АлгоритмРасчетаКоличества) Экспорт

	КлючПродукция = "[" + НСтр("ru='Продукция';uk='Продукція'") + ".";
	КлючМатериал = "[" + НСтр("ru='Материал';uk='Матеріал'") + ".";
	
	Если СтрНайти(АлгоритмРасчетаКоличества, КлючПродукция) <> 0 
		ИЛИ СтрНайти(АлгоритмРасчетаКоличества, КлючМатериал) <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмРасчетаКоличества = СтрЗаменить(АлгоритмРасчетаКоличества, "[", КлючПродукция);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Прочее

Процедура УстановитьУсловноеОформлениеСпискаСпецификаций(УсловноеОформление, ИмяВладельцаПолейОтбора = "") Экспорт

	ВладелецПолейОтбора = ?(ИмяВладельцаПолейОтбора = "", "", ИмяВладельцаПолейОтбора + ".");
	
	// Оформление спецификации в разработке
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.ВРазработке;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Оформление закрытой спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСпецификаций.Закрыта;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	// Оформление основной спецификации
	Элемент = УсловноеОформление.Элементы.Добавить();

	Если ИмяВладельцаПолейОтбора <> "" Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВладельцаПолейОтбора);
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ВладелецПолейОтбора + "ОсновнаяСпецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
КонецПроцедуры

// Возвращает текст запроса, который получает список действующих спецификаций
// Спецификация является действуеющей, если
//  - у нее статус Действует
//  - период ее действия включает начало производства
//
// Параметры
//  ПараметрыЗапроса - Структура - структура, которая может содержать свойства:
//						- ДляСпискаНоменклатуры - указывает, что требуется получить спецификации для списка номенклатуры,
//													хранящейся во временной таблице СписокНоменклатуры.
//
Функция ПолучитьТекстЗапросаОсновнойСпецификации(ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ПараметрыЗапроса = Неопределено Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОсновныеСпецификации.Спецификация,
		|	ОсновныеСпецификации.Спецификация.Представление КАК СпецификацияПредставление,
		|	ВЫБОР
		// Все совпадает
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = &Характеристика
		|				И ОсновныеСпецификации.Подразделение = &Подразделение
		|			ТОГДА 1
		
		// Для любого подразделения
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = &Характеристика
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 2
		
		// Для любой характеристики
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = &Подразделение
		|			ТОГДА 3
		
		// Для любой характеристики и любого подразделения
		|		КОГДА ОсновныеСпецификации.Номенклатура = &Номенклатура
		|				И ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
		|ГДЕ
		|			Спецификация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
		|				И (Спецификация.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ Спецификация.НачалоДействия <= &НачалоПроизводства)
		|				И (Спецификация.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ Спецификация.КонецДействия > &НачалоПроизводства)
		|				И Номенклатура = &Номенклатура
		|				И (Характеристика = &Характеристика
		|					ИЛИ Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|				И (Подразделение = &Подразделение
		|					ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	ИначеЕсли ПараметрыЗапроса.Свойство("ДляСпискаНоменклатуры") Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		|		СписокНоменклатуры.Подразделение КАК Подразделение,
		|		СписокНоменклатуры.Номенклатура КАК Номенклатура,
		|		СписокНоменклатуры.Характеристика КАК Характеристика,
		|		СписокНоменклатуры.НачалоПроизводства КАК НачалоПроизводства
		|ПОМЕСТИТЬ ВТСписокНоменклатуры
		|	ИЗ
		|		СписокНоменклатуры КАК СписокНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
		|			ПО (ОсновныеСпецификации.Номенклатура = СписокНоменклатуры.Номенклатура)
		|				И (ОсновныеСпецификации.Характеристика = СписокНоменклатуры.Характеристика
		|					ИЛИ ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|				И (ОсновныеСпецификации.Подразделение = СписокНоменклатуры.Подразделение
		|					ИЛИ ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|				И (ОсновныеСпецификации.Спецификация.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует))
		|				И (ОсновныеСпецификации.Спецификация.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ОсновныеСпецификации.Спецификация.НачалоДействия <= СписокНоменклатуры.НачалоПроизводства)
		|				И (ОсновныеСпецификации.Спецификация.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ОсновныеСпецификации.Спецификация.КонецДействия > СписокНоменклатуры.НачалоПроизводства)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СписокНоменклатуры.Подразделение,
		|		СписокНоменклатуры.Номенклатура,
		|		СписокНоменклатуры.Характеристика,
		|		СписокНоменклатуры.НачалоПроизводства
		|
		|;
		|
		|ВЫБРАТЬ
		|	ОсновныеСпецификации.Спецификация,
		|	ОсновныеСпецификации.Спецификация.Представление КАК СпецификацияПредставление,
		|	СписокНоменклатуры.Подразделение,
		|	СписокНоменклатуры.Номенклатура,
		|	СписокНоменклатуры.Характеристика,
		|	СписокНоменклатуры.НачалоПроизводства,
		|	ВЫБОР
		// Все совпадает
		|		КОГДА ОсновныеСпецификации.Характеристика = СписокНоменклатуры.Характеристика
		|				И ОсновныеСпецификации.Подразделение = СписокНоменклатуры.Подразделение
		|			ТОГДА 1
		
		// Для любого подразделения
		|		КОГДА ОсновныеСпецификации.Характеристика = СписокНоменклатуры.Характеристика
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 2
		
		// Для любой характеристики
		|		КОГДА ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = СписокНоменклатуры.Подразделение
		|			ТОГДА 3
		
		// Для любой характеристики и любого подразделения
		|		КОГДА ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|				И ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ВТСписокНоменклатуры КАК СписокНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
		|		ПО (ОсновныеСпецификации.Номенклатура = СписокНоменклатуры.Номенклатура)
		|			И (ОсновныеСпецификации.Характеристика = СписокНоменклатуры.Характеристика
		|				ИЛИ ОсновныеСпецификации.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (ОсновныеСпецификации.Подразделение = СписокНоменклатуры.Подразделение
		|				ИЛИ ОсновныеСпецификации.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Не удалось определить запрос.';uk='Не вдалося визначити запит.'");
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает спецификации изделий
//
// Параметры:
//  ДанныеОбИзделиях	- Массив - содержит структуру данных об изделиях
//  								- Подразделение
//  								- Номенклатура
//									- Характеристика
//									- НачалоПроизводства
//									- ТекущаяСпецификация
//
// Возвращаемое значение:
//   Массив   - Содержит список спецификаций
//
Функция СпецификацииИзделий(ДанныеОбИзделиях)
	
	ТаблицаДанныеОбИзделиях = Новый ТаблицаЗначений;
	ТаблицаДанныеОбИзделиях.Колонки.Добавить("Подразделение",      Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаДанныеОбИзделиях.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДанныеОбИзделиях.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаДанныеОбИзделиях.Колонки.Добавить("НачалоПроизводства", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныеОбИзделиях.Колонки.Добавить("ИндексДанных",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	
	Для ИндексДанных = 0 По ДанныеОбИзделиях.ВГраница() Цикл
		
		СтруктураДанных = ДанныеОбИзделиях[ИндексДанных];
		
		НоваяСтрока = ТаблицаДанныеОбИзделиях.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураДанных);
		Если СтруктураДанных.Подразделение <> Неопределено Тогда
			НоваяСтрока.Подразделение = СтруктураДанных.Подразделение;
		Иначе
			НоваяСтрока.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли;
		НоваяСтрока.ИндексДанных = ИндексДанных;
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанныеОбИзделиях.ИндексДанных         КАК ИндексДанных,
	|	ТаблицаДанныеОбИзделиях.Подразделение        КАК Подразделение,
	|	ТаблицаДанныеОбИзделиях.Номенклатура         КАК Номенклатура,
	|	ТаблицаДанныеОбИзделиях.Характеристика       КАК Характеристика,
	|	ТаблицаДанныеОбИзделиях.НачалоПроизводства   КАК НачалоПроизводства
	|ПОМЕСТИТЬ ТаблицаДанныеОбИзделиях
	|ИЗ
	|	&ТаблицаДанныеОбИзделиях КАК ТаблицаДанныеОбИзделиях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныеОбИзделиях.ИндексДанных КАК ИндексДанных,
	|	ЕСТЬNULL(РесурсныеСпецификацииВыходныеИзделия.Ссылка, Неопределено) КАК Спецификация,
	|	ЕСТЬNULL(РесурсныеСпецификацииВыходныеИзделия.Ссылка.Представление, """") КАК СпецификацияПредставление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатураПодразделение.Спецификация, 
	|					ЕСТЬNULL(ОсновныеСпецификацииНоменклатура.Спецификация, 
	|					ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))))) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Основная,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 0
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация ЕСТЬ NULL
	|				ТОГДА 1
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатураПодразделение.Спецификация ЕСТЬ NULL
	|				ТОГДА 2
	|			КОГДА НЕ ОсновныеСпецификацииНоменклатура.Спецификация ЕСТЬ NULL
	|				ТОГДА 3
	|			ИНАЧЕ 100
	|		КОНЕЦ) КАК ПриоритетОсновная,
	|	ЕСТЬNULL(РесурсныеСпецификацииВыходныеИзделия.Ссылка.МногоэтапныйПроизводственныйПроцесс, ЛОЖЬ) КАК МногоэтапныйПроизводственныйПроцесс,
	|	ЕСТЬNULL(РесурсныеСпецификацииВыходныеИзделия.Ссылка.ОптимальноеКоличествоПередачиМеждуЭтапами, 0) КАК ОптимальноеКоличествоПередачиМеждуЭтапами
	|ИЗ
	|	ТаблицаДанныеОбИзделиях КАК ТаблицаДанныеОбИзделиях
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		ПО РесурсныеСпецификацииВыходныеИзделия.Номенклатура = ТаблицаДанныеОбИзделиях.Номенклатура
	|			И (РесурсныеСпецификацииВыходныеИзделия.Характеристика = ТаблицаДанныеОбИзделиях.Характеристика
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Ссылка.НачалоДействия <= ТаблицаДанныеОбИзделиях.НачалоПроизводства)
	|			И (РесурсныеСпецификацииВыходныеИзделия.Ссылка.КонецДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Ссылка.КонецДействия > ТаблицаДанныеОбИзделиях.НачалоПроизводства)
	|			И РесурсныеСпецификацииВыходныеИзделия.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение
	|		ПО (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Номенклатура = ТаблицаДанныеОбИзделиях.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Характеристика = ТаблицаДанныеОбИзделиях.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристикаПодразделение.Подразделение = ТаблицаДанныеОбИзделиях.Подразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураХарактеристика
	|		ПО (ОсновныеСпецификацииНоменклатураХарактеристика.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Номенклатура = ТаблицаДанныеОбИзделиях.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Характеристика = ТаблицаДанныеОбИзделиях.Характеристика)
	|			И (ОсновныеСпецификацииНоменклатураХарактеристика.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатураПодразделение
	|		ПО ((ОсновныеСпецификацииНоменклатураПодразделение.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И ОсновныеСпецификацииНоменклатураПодразделение.Номенклатура = ТаблицаДанныеОбИзделиях.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатураПодразделение.Подразделение = ТаблицаДанныеОбИзделиях.Подразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификацииНоменклатура
	|		ПО (ОсновныеСпецификацииНоменклатура.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка)
	|			И (ОсновныеСпецификацииНоменклатура.Номенклатура = ТаблицаДанныеОбИзделиях.Номенклатура)
	|			И (ОсновныеСпецификацииНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ОсновныеСпецификацииНоменклатура.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанныеОбИзделиях.ИндексДанных,
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка,
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка.Представление
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОсновная,
	|	СпецификацияПредставление";
				   
	Запрос.УстановитьПараметр("ТаблицаДанныеОбИзделиях", ТаблицаДанныеОбИзделиях);
	
	СписокСпецификаций = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Массив;
	
	Для ИндексДанных = 0 По ДанныеОбИзделиях.ВГраница() Цикл
		
		СтруктураДанных = ДанныеОбИзделиях[ИндексДанных];
		
		СтруктураПоиска = Новый Структура("ИндексДанных", ИндексДанных);
  		СписокСпецификацийИзделия = СписокСпецификаций.НайтиСтроки(СтруктураПоиска);
		
		ДанныеСпецификации = Неопределено;
		Если СписокСпецификацийИзделия.Количество() <> 0 Тогда
			
			ДоступнаяСпецификация = СписокСпецификацийИзделия[0];
			ОсновнаяСпецификация = ?(ДоступнаяСпецификация.Основная, ДоступнаяСпецификация.Спецификация, Справочники.РесурсныеСпецификации.ПустаяСсылка());
			
			// Если выбрана текущая спецификация, то вернем ее, в случае если она есть в списке доступных
			ВернутьТекущую = Ложь;
			Если СтруктураДанных.Свойство("ТекущаяСпецификация") 
				И ЗначениеЗаполнено(СтруктураДанных.ТекущаяСпецификация) Тогда
				Для каждого ДоступнаяСпецификация Из СписокСпецификацийИзделия Цикл
					Если ДоступнаяСпецификация.Спецификация = СтруктураДанных.ТекущаяСпецификация Тогда
						ВернутьТекущую = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ВернутьТекущую Тогда
				
				ДанныеСпецификации = Новый Структура;
				ДанныеСпецификации.Вставить("Спецификация",                СтруктураДанных.ТекущаяСпецификация);
				ДанныеСпецификации.Вставить("ОсновнаяСпецификация",        ОсновнаяСпецификация);
				ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", (ОсновнаяСпецификация = СтруктураДанных.ТекущаяСпецификация));
				
			ИначеЕсли ЗначениеЗаполнено(ОсновнаяСпецификация) ИЛИ СписокСпецификацийИзделия.Количество() = 1 Тогда
				
				ДоступнаяСпецификация = СписокСпецификацийИзделия[0];
				
				ДанныеСпецификации = Новый Структура;
				ДанныеСпецификации.Вставить("Спецификация",                              ДоступнаяСпецификация.Спецификация);
				ДанныеСпецификации.Вставить("ОсновнаяСпецификация",                      ОсновнаяСпецификация);
				ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация",               (ОсновнаяСпецификация = ДоступнаяСпецификация.Спецификация));
				ДанныеСпецификации.Вставить("МногоэтапныйПроизводственныйПроцесс",       ДоступнаяСпецификация.МногоэтапныйПроизводственныйПроцесс);
				ДанныеСпецификации.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", ДоступнаяСпецификация.ОптимальноеКоличествоПередачиМеждуЭтапами);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Добавить(ДанныеСпецификации);
		
 	КонецЦикла; 

	Возврат Результат;
	
КонецФункции

// Проверяет соответствие полуфабриката и спецификации, которая назначена для его производства.
//
// Параметры:
//  Объект                  - СправочникОбъект.РесурсныеСпецификации,
//                              ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа,
//                              ДокументСсылка.ЗаказНаПроизводство - объект, связанный с проверкой
//  КоллекцияПолуфабрикатов - Массив - коллекция строк, содержащая данные о полуфабрикатах
//  КоллекцияЭтапов         - Массив - коллекция строк, содержащая данные о последовательности этапов
// Возвращаемое значение:
//   - Структура - Структура параметров проверки заполнения внутренних полуфабрикатов
//                  в ресурсной спецификации и спецификации заказа на производство
//
Функция ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(Объект, Знач КоллекцияПолуфабрикатов = Неопределено, Знач КоллекцияЭтапов = Неопределено) Экспорт
	
	ПараметрыПроверкиВнутреннихПолуфабрикатов = Новый Структура("
		|Режим,
		|СтруктураПоиска,
		|ТаблицаПолуфабрикатов,
		|ТаблицаЭтапов,
		|ПредставлениеТаблицыПолуфабрикатов");
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.РесурсныеСпецификации") Тогда
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация";
		
		// структура поиска в таблице полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.СтруктураПоиска = Новый Структура("
			|ИсточникПолученияПолуфабриката,
			|Номенклатура,
			|Характеристика");
		
		// таблица полуфабрикатов
		
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
		
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из КоллекцияПолуфабрикатов Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.ИсточникПолученияПолуфабриката = ЭлементКоллекции.ЭтапРедактирование;
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("
			|ИсточникПолученияПолуфабриката, 
			|Номенклатура, 
			|Характеристика", 
			"Количество");
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|ИсточникПолученияПолуфабриката, 
			|Номенклатура, 
			|Характеристика");
	
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru='Побочный и промежуточный выпуск';uk='Побічний і проміжний випуск'");
		
	Иначе
		
		// режим
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "СпецификацияЗаказа";
		
		// структура поиска в таблице полуфабрикатов
		
		СтруктураПоиска = Новый Структура("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура,
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.Вставить("СтруктураПоиска", СтруктураПоиска);
		
		// таблица полуфабрикатов
		
		ТаблицаПолуфабрикатов = Новый ТаблицаЗначений;
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиМатериалыИУслугиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаПолуфабрикатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
		
		Если КоллекцияПолуфабрикатов = Неопределено Тогда
			КоллекцияПолуфабрикатов = Объект.ВозвратныеОтходы;
		КонецЕсли;
			
		Для Каждого ЭлементКоллекции Из КоллекцияПолуфабрикатов Цикл
			
			НоваяСтрока = ТаблицаПолуфабрикатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
			
			НоваяСтрока.КлючСвязиМатериалыИУслугиСтрока = Строка(ЭлементКоллекции.КлючСвязиМатериалыИУслуги);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			
		КонецЦикла;
		
		ТаблицаПолуфабрикатов.Свернуть("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика", 
			"Количество");
		
		ТаблицаПолуфабрикатов.Индексы.Добавить("
			|КлючСвязиМатериалыИУслугиСтрока, 
			|КлючСвязиЭтапыСтрока, 
			|Номенклатура, 
			|Характеристика");
			
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаПолуфабрикатов = ТаблицаПолуфабрикатов;
		
		// таблица полуфабрикатов
	
		ТаблицаЭтапов = Новый ТаблицаЗначений;
		ТаблицаЭтапов.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаЭтапов.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЭтапов.Колонки.Добавить("НаименованиеЭтапа", Новый ОписаниеТипов("Строка"));
		ТаблицаЭтапов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
		
		Если КоллекцияЭтапов = Неопределено Тогда
			КоллекцияЭтапов = Объект.Этапы;
		КонецЕсли;
		
		Для Каждого ЭлементКоллекции Из КоллекцияЭтапов Цикл
			
			НоваяСтрока = ТаблицаЭтапов.Добавить();
			
			НоваяСтрока.КлючСвязиСтрока       = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.НомерЭтапа            = ЭлементКоллекции.НомерЭтапа;
			НоваяСтрока.НаименованиеЭтапа     = ЭлементКоллекции.НаименованиеЭтапа;
			НоваяСтрока.ПроизводствоНаСтороне = ЭлементКоллекции.ПроизводствоНаСтороне;
			
		КонецЦикла;
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ТаблицаЭтапов = ТаблицаЭтапов;
		
		// представление таблицы полуфабрикатов
		
		ПараметрыПроверкиВнутреннихПолуфабрикатов.ПредставлениеТаблицыПолуфабрикатов = НСтр("ru='Побочный и промежуточный выпуск';uk='Побічний і проміжний випуск'");
		
	КонецЕсли;
	
	Возврат ПараметрыПроверкиВнутреннихПолуфабрикатов;
	
КонецФункции

Функция ПолучитьТаблицуПотребностиВПолуфабрикатах(ПараметрыПроверкиВнутреннихПолуфабрикатов, МассивСтрок)
	
	ТаблицаПотребностиВПолуфабрикатах = Новый ТаблицаЗначений;
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("ИсточникПолученияПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
		
	Иначе
		
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапыСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		ТаблицаПотребностиВПолуфабрикатах.Колонки.Добавить("КлючСвязиЭтапВыпускаСтрока", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
		
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из МассивСтрок Цикл
		
		НоваяСтрока = ТаблицаПотребностиВПолуфабрикатах.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции);
		
		Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
			
			НоваяСтрока.Этап = ЭлементКоллекции.ЭтапРедактирование;
			
		Иначе
			
			НоваяСтрока.КлючСвязиСтрока = Строка(ЭлементКоллекции.КлючСвязи);
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапы);
			НоваяСтрока.КлючСвязиЭтапВыпускаСтрока = Строка(ЭлементКоллекции.КлючСвязиЭтапВыпуска);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПотребностиВПолуфабрикатах;
	
КонецФункции

Функция ПолучитьТекстЗапросаПроверкиВнутреннихПолуфабрикатов(ПараметрыПроверкиВнутреннихПолуфабрикатов)
	
	Если ПараметрыПроверкиВнутреннихПолуфабрикатов.Режим = "РесурснаяСпецификация" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Этап КАК Справочник.ЭтапыПроизводства) КАК Этап,
		|	ВЫРАЗИТЬ(Т.ИсточникПолученияПолуфабриката КАК Справочник.ЭтапыПроизводства) КАК ИсточникПолученияПолуфабриката,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.НомерЭтапа >= ВЫБОР
		|			КОГДА Т.Этап = ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)
		|				ТОГДА 1
		|			ИНАЧЕ Т.Этап.НомерЭтапа
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.ИсточникПолученияПолуфабриката.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
		|	Т.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	Т.Количество КАК Количество,
		|	Т.Номенклатура.Представление КАК НоменклатураПредставление,
		|	Т.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	Т.ИсточникПолученияПолуфабриката.Представление КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА Т.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА Т.Упаковка.Представление
		|		ИНАЧЕ Т.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	НЕ Т.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Т.Упаковка",
			"Т.Номенклатура"));
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки,
		|	Т.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	Т.КлючСвязиЭтапыСтрока КАК КлючСвязиЭтапыСтрока,
		|	Т.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапВыпускаСтрока,
		|	ВЫРАЗИТЬ(Т.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Т.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
		|	Т.Количество КАК Количество
		|ПОМЕСТИТЬ ВТПотребностиВПолуфабрикатах
		|ИЗ
		|	&ТаблицаПотребностиВПолуфабрикатах КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповЗаказа.КлючСвязиСтрока КАК КлючСвязиСтрока,
		|	ТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК НаименованиеЭтапа,
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
		|	ТаблицаЭтаповЗаказа.НомерЭтапа КАК НомерЭтапа
		|ПОМЕСТИТЬ ВТТаблицаЭтаповЗаказа
		|ИЗ
		|	&ТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребностиВПолуфабрикатах.НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПоследовательности
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ПотребностиВПолуфабрикатах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповПотребления
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапыСтрока = ТаблицаЭтаповПотребления.КлючСвязиСтрока
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповВыпуска
		|		ПО ПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповВыпуска.КлючСвязиСтрока
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ТаблицаЭтаповВыпуска.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповПотребления.НомерЭтапа ЕСТЬ NULL 
		|					ИЛИ ТаблицаЭтаповВыпуска.НомерЭтапа >= ТаблицаЭтаповПотребления.НомерЭтапа
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиРабота
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК Т
		|ГДЕ
		|	Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТОшибкиПроизводствоНаСтороне
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	ТаблицаЭтаповЗаказа.ПроизводствоНаСтороне
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПоследовательности КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиРабота КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТОшибкиПроизводствоНаСтороне КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТПотребностиВПолуфабрикатах.НомерСтроки КАК НомерСтроки,
		|	ТПотребностиВПолуфабрикатах.Номенклатура КАК Номенклатура,
		|	ТПотребностиВПолуфабрикатах.Характеристика КАК Характеристика,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока КАК КлючСвязиЭтапыСтрока,
		|	ТПотребностиВПолуфабрикатах.КлючСвязиСтрока КАК КлючСвязиМатериалыИУслугиСтрока,
		|	ТПотребностиВПолуфабрикатах.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	ТПотребностиВПолуфабрикатах.Количество КАК Количество,
		|	ТПотребностиВПолуфабрикатах.Номенклатура.Представление КАК НоменклатураПредставление,
		|	ТПотребностиВПолуфабрикатах.Характеристика.Представление КАК ХарактеристикаПредставление,
		|	ТТаблицаЭтаповЗаказа.НаименованиеЭтапа КАК ЭтапВыпускаПредставление,
		|	ВЫБОР
		|		КОГДА ТПотребностиВПолуфабрикатах.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ТПотребностиВПолуфабрикатах.Упаковка.Представление
		|		ИНАЧЕ ТПотребностиВПолуфабрикатах.Номенклатура.ЕдиницаИзмерения.Представление
		|	КОНЕЦ КАК УпаковкаПредставление
		|ИЗ
		|	ВТПотребностиВПолуфабрикатах КАК ТПотребностиВПолуфабрикатах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаЭтаповЗаказа КАК ТТаблицаЭтаповЗаказа
		|		ПО ТПотребностиВПолуфабрикатах.КлючСвязиЭтапВыпускаСтрока = ТТаблицаЭтаповЗаказа.КлючСвязиСтрока
		|ГДЕ
		|	НЕ ТПотребностиВПолуфабрикатах.НомерСтроки В
		|				(ВЫБРАТЬ
		|					ОшибкиПоследовательности.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПоследовательности КАК ОшибкиПоследовательности
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиРабота.НомерСтроки
		|				ИЗ
		|					ВТОшибкиРабота КАК ОшибкиРабота
		|		
		|				ОБЪЕДИНИТЬ ВСЕ
		|		
		|				ВЫБРАТЬ
		|					ОшибкиПроизводствоНаСтороне.НомерСтроки
		|				ИЗ
		|					ВТОшибкиПроизводствоНаСтороне КАК ОшибкиПроизводствоНаСтороне)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТПотребностиВПолуфабрикатах.Упаковка",
			"ТПотребностиВПолуфабрикатах.Номенклатура"));
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти
