
#Область СлужебныеПроцедурыИФункции

// Получает информацию о виде расчета.
Функция ПолучитьИнформациюОВидеРасчета(ВидРасчета) Экспорт
		
	Возврат ЗарплатаКадрыВнутренний.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	
КонецФункции

// Возвращает ссылку на головную организацию.
Функция ГоловнаяОрганизация(Организация) Экспорт
	Возврат РегламентированнаяОтчетность.ГоловнаяОрганизация(Организация);
КонецФункции

// Функция определяет является ли организация юридическим лицом.
// 
Функция ЭтоЮридическоеЛицо(Организация) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
КонецФункции

// Возвращает ссылку на "Регистрацию в налоговом органе" по состоянию на некоторую ДатаАктуальности.
Функция РегистрацияВНалоговомОргане(СтруктурнаяЕдиница, Знач ДатаАктуальности = Неопределено) Экспорт
	

	Возврат Неопределено;
	
КонецФункции

// Возвращает ссылку на валюту в которой происходит расчет заработной платы (гривна).
// Номинирование тарифов, надбавок, выплата зарплаты допускается в любой валюте, 
// но расчеты выполняются в валюте учета зарплаты.
Функция ВалютаУчетаЗаработнойПлаты() Экспорт

    Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецФункции


// Возвращает таблицу значений в строках которой содержится информация о периодах
// изменения (регистрации) фамилии, имени и отчества физических лиц.
//
// Параметры:
//		СписокОтветственных - Массив, ссылок справочника ФизическиеЛица.
//
// Возвращаемое значение:
//		ТаблицаЗначений - содержит колонки:
//			* Период			- Дата
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Фамилия			- Строка
//			* Имя				- Строка
//			* Отчество			- Строка
//
Функция ПериодыИзмененияФИООтветственныхЛиц(СписокОтветственных) Экспорт
	
	Возврат КадровыйУчет.ПериодыИзмененияФИОФизическихЛиц(СписокОтветственных);
	
КонецФункции

// Возвращает настройки формирования печатных форм.
//
// Возвращаемое значение:
//		Структура - соответствует структуре ресурсов регистра сведений ДополнительныеНастройкиЗарплатаКадры.
//
Функция НастройкиПечатныхФорм() Экспорт
	
	Возврат РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.НастройкиПечатныхФорм();
	
КонецФункции

// Возвращает коллекцию элементов справочника ВидыКонтактнойИнформации с типом Адрес.
//
Функция ВидыРоссийскихАдресов() Экспорт
	
	РоссийскиеАдреса = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И ВидыКонтактнойИнформации.АдресТолькоРоссийский";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РоссийскиеАдреса.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла; 
	
	Возврат РоссийскиеАдреса;
	
КонецФункции

// Получает размер минимальной оплаты труда.
//
// Параметры:
//	ДатаАктуальности - дата, на которую нужно получить МРОТ.
//
// Возвращаемое значение:
//	число, размер МРОТ на дату, или Неопределено, если МРОТ на дату не определен
//
Функция МинимальныйРазмерОплатыТруда(ДатаАктуальности) Экспорт

	Возврат РегистрыСведений.МинимальнаяОплатаТруда.ДанныеМинимальногоРазмераОплатыТруда(ДатаАктуальности)["Размер"];
	
КонецФункции	

Функция ПрожиточныйМинимумТрудоспособные(ДатаАктуальности) Экспорт
	
	Возврат РегистрыСведений.ПрожиточныеМинимумы.ДанныеПрожиточногоМинимумаТрудоспособные(ДатаАктуальности)["Размер"];
	
КонецФункции

Функция МинимальнаяЧасоваТарифнаяСтавка(ДатаАктуальности) Экспорт

	Возврат РегистрыСведений.МинимальнаяОплатаТруда.ДанныеМинимальногоРазмераОплатыТруда(ДатаАктуальности)["Часовая"];
	
КонецФункции	

Функция МаксимальныйПриоритетСостоянийСотрудника() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Увольнение", Перечисления.СостоянияСотрудника.Увольнение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияСотрудника.Порядок
	|ИЗ
	|	Перечисление.СостоянияСотрудника КАК СостоянияСотрудника
	|ГДЕ
	|	СостоянияСотрудника.Ссылка = &Увольнение";	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Порядок;
КонецФункции	

// Проверяет принадлежность объекта метаданных к подсистемам. Проверка производится на вхождение
// в состав указанных подсистем и на вхождение в состав подсистем подчиненных указанным.
//
// Параметры:
//			ПолноеИмяОбъектаМетаданных 	- Строка, полное имя объекта метаданных (см. функцию НайтиПоПолномуИмени).
//			ИменаПодсистем				- Строка, имена подсистем, перечисленные через запятую.
//
// Возвращаемое значение:
//		Булево
//
Функция ОбъектМетаданныхВключенВПодсистемы(ПолноеИмяОбъектаМетаданных, ИменаПодсистем) Экспорт
	
	ЭтоОбъектПодсистемы = Ложь;
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	Если МетаданныеОбъекта <> Неопределено Тогда
		
		МассивИменПодсистем = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПодсистем);
		Для каждого ИмяПодсистемы Из МассивИменПодсистем Цикл
			
			МетаданныеПодсистемы = Метаданные.Подсистемы.Найти(ИмяПодсистемы);
			Если МетаданныеПодсистемы <> Неопределено Тогда
				ЭтоОбъектПодсистемы = ОбъектМетаданныхВключенВПодсистему(МетаданныеПодсистемы, МетаданныеОбъекта);
			КонецЕсли; 
			
			Если ЭтоОбъектПодсистемы Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ЭтоОбъектПодсистемы;
	
КонецФункции

// Проверяет вхождение объекта метаданных в подсистему. Рекурсивно проверяется вхождение
// объекта метаданных в подсистемы подчиненные указанной.
//
// Параметры:
//		МетаданныеПодсистемы	- Метаданные подсистемы.
//		МетаданныеОбъекта		- Метаданные объекта.
//
// Возвращаемое значение:
//		Булево
//
Функция ОбъектМетаданныхВключенВПодсистему(МетаданныеПодсистемы, МетаданныеОбъекта)
	
	ВходитВСостав = МетаданныеПодсистемы.Состав.Содержит(МетаданныеОбъекта);
	Если НЕ ВходитВСостав Тогда
		
		Для каждого МетаданныеПодчиненнойПодсистемы Из МетаданныеПодсистемы.Подсистемы Цикл
			
			ВходитВСостав = ОбъектМетаданныхВключенВПодсистему(МетаданныеПодчиненнойПодсистемы, МетаданныеОбъекта);
			Если ВходитВСостав Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ВходитВСостав;
	
КонецФункции

#КонецОбласти
