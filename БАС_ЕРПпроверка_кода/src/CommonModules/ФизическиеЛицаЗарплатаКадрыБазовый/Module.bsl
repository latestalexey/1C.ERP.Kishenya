////////////////////////////////////////////////////////////////////////////////
// ФизическиеЛицаЗарплатаКадрыБазовый: методы, дополняющие функциональность 
// 		справочника ФизическиеЛица.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьДанныеФизическогоЛица(ДанныеФизическогоЛица, ПравилаПроверки, Ошибки, Отказ, НомерСтроки) Экспорт
	
	Для каждого ПравилоПроверки Из ПравилаПроверки Цикл
		
		Если ПравилоПроверки.ПравилоПроверки = "ФИО" Тогда
			
			ПроверитьФИО(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки);
			
		ИначеЕсли ПравилоПроверки.ПравилоПроверки = "Пол" Тогда
			
			ПроверитьПол(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки);
			
			
		ИначеЕсли ПравилоПроверки.ПравилоПроверки = "ДатаРождения" Тогда
			
			ПроверитьДатуРождения(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки);
			
		ИначеЕсли ПравилоПроверки.ПравилоПроверки = "МестоРождения" Тогда
			
			ПроверитьМестоРождения(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки);
			
		ИначеЕсли ПравилоПроверки.ПравилоПроверки = "УдостоверениеЛичности" Тогда
			
			ПроверитьУдостоверениеЛичности(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки);
			
		ИначеЕсли ПравилоПроверки.ПравилоПроверки = "Адрес" Тогда
			
			ПроверитьАдрес(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки);
			
		Иначе
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не найдено правило проверки данных физического лица ""%1""';uk='Не знайдене правило перевірки даних фізичної особи ""%1""'"),
				ПравилоПроверки.ПравилоПроверки);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
			ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
			Если Параметры.Свойство("Отбор") Тогда
				
				ОрганизацияОтбора = Неопределено;
				Если Параметры.Отбор.Свойство("Организация", ОрганизацияОтбора)
					ИЛИ Параметры.Отбор.Свойство("ГоловнаяОрганизация", ОрганизацияОтбора) Тогда
					
					Если ТипЗнч(ОрганизацияОтбора) = Тип("СправочникСсылка.Организации") Тогда
						СтандартнаяОбработка = Ложь;
						ВыбраннаяФорма = "ФормаВыбораСотрудников";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру, описывающую ошибку проверки данных физического лица.
//
// Возвращаемое значение:
//		Структура, содержащая ключи:
//			ТекстОшибки
//			ПолеФормы
//			НомерСтроки
//
Функция ОписаниеОшибкиЗаполненияДанныхФизическогоЛица()
	
	Возврат Новый Структура("ТекстОшибки, ПолеФормы, НомерСтроки");
	
КонецФункции

// Добавляет ошибку в коллекцию ошибок проверки данных физического лица, устанавливает в Истина признак Отказ.
//
//	Параметры:
//		Ошибки - Соответствие, если передано Неопределено - будет создано соответствие.
//				Ключ соответствия - ФизическоеЛицо
//		ФизическоеЛицо,
//		ТекстОшибки,
//		Отказ,
//		ПолеФормы - Строка, имя поля формы к которому относится ошибка.
//		НомерСтроки - Число, номер строки в многострочном документе.
//
Процедура ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(Ошибки, ФизическоеЛицо, ТекстОшибки, Отказ, ПолеФормы = "", НомерСтроки = Неопределено)
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Соответствие;
	КонецЕсли;
	
	КоллекцияОшибок = Ошибки.Получить(ФизическоеЛицо);
	Если КоллекцияОшибок = Неопределено Тогда
		КоллекцияОшибок = Новый Массив;
	КонецЕсли; 
	
	ОшибкаЗаполненияДанных = ОписаниеОшибкиЗаполненияДанныхФизическогоЛица();
	
	ОшибкаЗаполненияДанных.ТекстОшибки = ТекстОшибки;
	ОшибкаЗаполненияДанных.ПолеФормы = ПолеФормы;
	ОшибкаЗаполненияДанных.НомерСтроки = НомерСтроки;
	
	КоллекцияОшибок.Добавить(ОшибкаЗаполненияДанных);
	
	Ошибки.Вставить(ФизическоеЛицо, КоллекцияОшибок);
	
	Отказ = Истина;
	
КонецПроцедуры	

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Перем Организация;
	Перем Подразделение;
	Параметры.Отбор.Свойство("Организация", Организация);
	Параметры.Отбор.Свойство("Подразделение", Подразделение);
	
	Если Организация <> НеОпределено Или Подразделение <> НеОпределено Тогда
		// Если есть отбор по организации или подразделению - отрабатываем особенным образом.
		
		ЗапросТекст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ФизическиеЛица.Ссылка = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И (ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации)
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = &Подразделение
		|	И &ДополнительноеУсловие";
		
		ОрганизацияСписком = ТипЗнч(Организация) = Тип("Массив") ИЛИ ТипЗнч(Организация) = Тип("СписокЗначений");
		Если Организация = НеОпределено ИЛИ ОрганизацияСписком И Организация.Количество() = 0 Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
				|	И ", "");
		ИначеЕсли ОрганизацияСписком Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
				|	И ", "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация В (&Организация)
				|	И ");
		КонецЕсли;
		
		ПодразделениеСписком = ТипЗнч(Подразделение) = Тип("Массив") ИЛИ ТипЗнч(Подразделение) = Тип("СписокЗначений");
		Если Подразделение = НеОпределено ИЛИ ПодразделениеСписком И Подразделение.Количество() = 0 Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = &Подразделение
				|	И ", "");
		ИначеЕсли ПодразделениеСписком Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = &Подразделение
				|	И ", "ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&Подразделение)
				|	И ");
		КонецЕсли;
		
		ДатаНачалаОтбора = Неопределено;
		ДатаОкончанияОтбора = Неопределено;
		Если Параметры.Отбор.Свойство("ДатаПримененияОтбора") Тогда
			Если ЗначениеЗаполнено(Параметры.Отбор.ДатаПримененияОтбора) Тогда
				ДатаНачалаОтбора = НачалоДня(Параметры.Отбор.ДатаПримененияОтбора);
				ДатаОкончанияОтбора = КонецДня(Параметры.Отбор.ДатаПримененияОтбора);
			КонецЕсли;
			Параметры.Отбор.Удалить("ДатаПримененияОтбора");
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ДатаНачалаОтбора) И Параметры.Отбор.Свойство("МесяцПримененияОтбора") Тогда
			Если ЗначениеЗаполнено(Параметры.Отбор.МесяцПримененияОтбора) Тогда
				ДатаНачалаОтбора = НачалоМесяца(Параметры.Отбор.МесяцПримененияОтбора);
				ДатаОкончанияОтбора = КонецМесяца(Параметры.Отбор.МесяцПримененияОтбора);
			КонецЕсли;
			Параметры.Отбор.Удалить("МесяцПримененияОтбора");
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДатаНачалаОтбора) Тогда
			
			ЗапросТекст = ЗапросТекст + Символы.ПС + "
				|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ДатаОкончанияОтбора
				|   И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= &ДатаНачалаОтбора
				|		ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))";
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ВАрхиве") Тогда
			ЗапросТекст = ЗапросТекст + Символы.ПС + "	И ТекущиеКадровыеДанныеСотрудников.Сотрудник.ВАрхиве = " + ?(Параметры.Отбор.ВАрхиве = Истина, "ИСТИНА", "ЛОЖЬ");
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = ЗапросТекст;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Если ЗначениеЗаполнено(ДатаНачалаОтбора) Тогда
			Запрос.УстановитьПараметр("ДатаНачалаОтбора", ДатаНачалаОтбора);
			Запрос.УстановитьПараметр("ДатаОкончанияОтбора", ДатаОкончанияОтбора);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеВыбора) И ДанныеВыбора.Количество() > 0 Тогда
			ИспользоватьДанныеВыбора = Истина;
		Иначе
			ИспользоватьДанныеВыбора = Ложь;
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеВыбора) И ДанныеВыбора.Количество() > 0 Тогда
		
		ИспользоватьДанныеВыбора = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ *
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	(ИСТИНА)
			|	И &ДополнительноеУсловие";
		
	КонецЕсли;
	
	Если Не СтандартнаяОбработка Тогда
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.ФизическиеЛица, Параметры, Запрос, "ФизическиеЛица", ИспользоватьДанныеВыбора);
	КонецЕсли; 
		
КонецПроцедуры

// Проверка данных физических лиц.

Процедура ПроверитьФИО(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки)
	
	ТекстОшибки = "";
	
	Фамилия = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДанным];
	Имя = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДаннымИмя];
	Отчество = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДаннымОтчество];
	
	ФИО = Фамилия + " " + Имя + " " + Отчество;
	Если ПустаяСтрока(Фамилия) ИЛИ ПустаяСтрока(Имя) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудник %1: не указаны фамилия и имя';uk='Співробітник %1: не зазначено прізвище та ім''я'"),
			ДанныеФизическогоЛица.Наименование);
				
	ИначеЕсли ПустаяСтрока(Имя) Тогда
			
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудник %1: не указано имя';uk='Співробітник %1: не вказано ім''я'"),
			ДанныеФизическогоЛица.Наименование);
		
	Иначе
		
		СтранаГражданства = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДаннымСтраныГражданства];
		
		Если СтранаГражданства = Справочники.СтраныМира.Россия Тогда
			
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ФИО, Ложь, "-. 0123456789") Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудник %1: ФИО физического лица должно быть введено русскими буквами';uk='Співробітник %1: ПІБ фізичної особи має бути введено російськими літерами'"),
					ДанныеФизическогоЛица.Наименование);
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ФИО, Ложь, "-. 0123456789")
				И НЕ СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ФИО, Ложь, "-. 0123456789") Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудник %1: ФИО физического лица нерезидента должно быть введено только русскими или только латинскими буквами.';uk='Співробітник %1: ПІБ фізичної особи-нерезидента має бути введено тільки росіянами або тільки латинськими літерами.'"),
					ДанныеФизическогоЛица.Наименование);

			КонецЕсли;	
			
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
			Ошибки,
			ДанныеФизическогоЛица.ФизическоеЛицо,
			ТекстОшибки,
			Отказ,
			ПравилоПроверки.ПутьКДанным,
			НомерСтроки);
			
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьДатуРождения(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки)
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДанным]) Тогда
		
		Если ПравилоПроверки.ОбязательноКЗаполнению Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1: не заполнено поле ""%2""';uk='Співробітник %1: не заповнено поле ""%2""'"),
				ДанныеФизическогоЛица.Наименование,
				ПравилоПроверки.ПредставлениеПроверяемогоЭлемента) + " ";		
			
		КонецЕсли; 
			
	Иначе
		
		Если ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДанным] > ПравилоПроверки.ДатаПроверки Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1: указанная %2 (%3) не может быть больше даты проверки сведений (%4)';uk='Співробітник %1: зазначена %2 (%3) не може бути більше дати перевірки відомостей (%4)'"),
				ДанныеФизическогоЛица.Наименование,
				ПравилоПроверки.ПредставлениеПроверяемогоЭлемента,
				ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДанным],
				ПравилоПроверки.ДатаПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
			Ошибки,
			ДанныеФизическогоЛица.ФизическоеЛицо,
			ТекстОшибки,
			Отказ,
			ПравилоПроверки.ПутьКДанным,
			НомерСтроки);
			
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПроверитьМестоРождения(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки)
	
	Если ПравилоПроверки.ОбязательноКЗаполнению Тогда
		
		МестоРождения = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДанным];
		МестоРождения = СокрЛП(СтрЗаменить(МестоРождения, ",", ""));
		
		Если ПустаяСтрока(МестоРождения) 
			ИЛИ МестоРождения = "0" Тогда
				
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1: не заполнено поле %2';uk='Співробітник %1: не заповнено поле %2'"), 
				ДанныеФизическогоЛица.Наименование,
				ПравилоПроверки.ПредставлениеПроверяемогоЭлемента);
																				
			ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
				Ошибки,
				ДанныеФизическогоЛица.ФизическоеЛицо,
				ТекстОшибки,
				Отказ,
				ПравилоПроверки.ПутьКДанным,
				НомерСтроки);
			
		КонецЕсли;	
		
	КонецЕсли; 
	
КонецПроцедуры	

Процедура ПроверитьУдостоверениеЛичности(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки)
	
	ВидДокумента = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДанным];
	
	Если НЕ ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Если ПравилоПроверки.ОбязательноКЗаполнению Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Сотрудник %1: Не указан вид документа, удостоверяющего личность';uk='Співробітник %1: Не вказано вид документа, що посвідчує особу'"),
							ДанныеФизическогоЛица.Наименование);
			
			ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
				Ошибки,
				ДанныеФизическогоЛица.ФизическоеЛицо,
				ТекстОшибки,
				Отказ,
				ПравилоПроверки.ПутьКДанным,
				НомерСтроки);
				
		КонецЕсли;
		
	Иначе
		
		
		ТекстОшибки = "";
		СерияДокумента = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДаннымСерииДокумента];
		Если НЕ ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, СерияДокумента, ТекстОшибки) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1: %2.';uk='Співробітник %1: %2.'"),
				ДанныеФизическогоЛица.Наименование,
				ТекстОшибки);
			
			ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
				Ошибки,
				ДанныеФизическогоЛица.ФизическоеЛицо,
				ТекстОшибки,
				Отказ,
				ПравилоПроверки.ПутьКДаннымСерииДокумента,
				НомерСтроки);
				
		КонецЕсли;
		
		ТекстОшибки = "";
		НомерДокумента = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДаннымНомераДокумента];
		Если НЕ ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, НомерДокумента, ТекстОшибки) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1: %2.';uk='Співробітник %1: %2.'"),
				ДанныеФизическогоЛица.Наименование,
				ТекстОшибки);

			ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
				Ошибки,
				ДанныеФизическогоЛица.ФизическоеЛицо,
				ТекстОшибки,
				Отказ,
				ПравилоПроверки.ПутьКДаннымНомераДокумента,
				НомерСтроки);
				
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДаннымДатыВыдачиДокумента]) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1: не указана дата выдачи документа.';uk='Співробітник %1: не вказана дата видачі документа.'"),
				ДанныеФизическогоЛица.Наименование);

			ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
				Ошибки,
				ДанныеФизическогоЛица.ФизическоеЛицо,
				ТекстОшибки,
				Отказ,
				ПравилоПроверки.ПутьКДаннымДатыВыдачиДокумента,
				НомерСтроки);
				
		КонецЕсли; 	
		
		Если НЕ ЗначениеЗаполнено(ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДаннымКемВыданДокумент]) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1: не указано кем выдан документ';uk='Співробітник %1: не вказано ким виданий документ'"),
				ДанныеФизическогоЛица.Наименование);

			ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
				Ошибки,
				ДанныеФизическогоЛица.ФизическоеЛицо,
				ТекстОшибки,
				Отказ,
				ПравилоПроверки.ПутьКДаннымКемВыданДокумент,
				НомерСтроки);
				
		КонецЕсли; 	
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПроверитьАдрес(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки)
	
	ТекстОшибки = "";
	Адрес = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДанным];
	
	Если НЕ ЗначениеЗаполнено(Адрес) Тогда
		
		Если ПравилоПроверки.ОбязательноКЗаполнению Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1: - не заполнено поле ""%2""';uk='Співробітник %1: - не заповнено поле ""%2""'"),
				ДанныеФизическогоЛица.Наименование,
				ПравилоПроверки.ПредставлениеПроверяемогоЭлемента);
					
		КонецЕсли;
		
	Иначе
		
		СообщенияПроверки = "";
		
		МассивОшибок = УправлениеКонтактнойИнформацией.ПроверитьАдрес(Адрес);
		
		Если МассивОшибок.СписокОшибок.Количество() <> 0 Тогда
			
			Для каждого СтруктураОшибки Из МассивОшибок.СписокОшибок Цикл
				СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), "", СообщенияПроверки + Символы.ПС) + СтруктураОшибки.Представление;
			КонецЦикла;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудник %1: - поле ""%2"": %3';uk='Співробітник %1: - поле ""%2"": %3'"),
					ДанныеФизическогоЛица.Наименование,
					ПравилоПроверки.ПредставлениеПроверяемогоЭлемента,
					СообщенияПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
			Ошибки,
			ДанныеФизическогоЛица.ФизическоеЛицо,
			ТекстОшибки,
			Отказ,
			ПравилоПроверки.ПутьКДанным,
			НомерСтроки);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПол(ДанныеФизическогоЛица, ПравилоПроверки, Ошибки, Отказ, НомерСтроки)
	
	Пол = ДанныеФизическогоЛица[ПравилоПроверки.ПутьКДанным];
	
	Если НЕ ЗначениеЗаполнено(Пол) Тогда
		
		Если ПравилоПроверки.ОбязательноКЗаполнению Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудник %1: - не указан пол';uk='Співробітник %1: не вказано стать'"),
					ДанныеФизическогоЛица.Наименование);
					
			ДобавитьОшибкуЗаполненияДанныхФизическогоЛица(
				Ошибки,
				ДанныеФизическогоЛица.ФизическоеЛицо,
				ТекстОшибки,
				Отказ,
				ПравилоПроверки.ПутьКДанным,
				НомерСтроки);
				
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
