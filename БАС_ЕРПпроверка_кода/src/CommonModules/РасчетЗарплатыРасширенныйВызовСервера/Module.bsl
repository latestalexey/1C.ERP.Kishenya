
#Область СлужебныеПроцедурыИФункции

// Обработчик события ОбработкаПолученияДанныхВыбора модуля менеджера ПВР Начисления.
//
Процедура НачисленияОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаУсловий = "";

	// Исключение пособий по уходу за ребенком.
	Если Параметры.Свойство("ИсключатьПособияПоУходуЗаРебенком") Тогда
		
		ТекстЗапросаУсловий = ?(ПустаяСтрока(ТекстЗапросаУсловий), "", ТекстЗапросаУсловий + "
			|	И ") + "(Не ПланВидовРасчетаНачисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&ПособияПоУходуЗаРебенком))";
			
		ИсключенныеВиды = Новый Массив;
		ИсключенныеВиды.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет"));
		ИсключенныеВиды.Добавить(ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет"));			
		
		Запрос.УстановитьПараметр("ПособияПоУходуЗаРебенком", ИсключенныеВиды);
		
	КонецЕсли;
	
	// Условия подбора по строке и коду.
	Если Параметры.Свойство("СтрокаПоиска") И Не ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		
		УсловияПодбора = "";
		МетаданныеОбъекта = Метаданные.ПланыВидовРасчета.Начисления;
		
		Для каждого Поле Из МетаданныеОбъекта.ВводПоСтроке Цикл
			УсловияПодбора = УсловияПодбора + ?(ПустаяСтрока(УсловияПодбора), "", Символы.ПС + "ИЛИ ") + "(ПланВидовРасчетаНачисления." + Поле.Имя + " ПОДОБНО &СтрокаПоиска)";
		КонецЦикла;
		
		Если Не ПустаяСтрока(УсловияПодбора) Тогда
			ТекстЗапросаУсловий = ?(ПустаяСтрока(ТекстЗапросаУсловий), "", ТекстЗапросаУсловий + "
				|	И ") + "(" + УсловияПодбора + ")";
		КонецЕсли; 
			
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
	КонецЕсли; 
	
	// Добавление отборов, переданных в параметре.
	Если Параметры.Отбор.Количество() > 0 Тогда
		
		Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
			
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда				
				УсловиеСПравымЗначением = " В (&Отбор" + ЭлементОтбора.Ключ + ")";				
			Иначе				
				УсловиеСПравымЗначением = " = (&Отбор" + ЭлементОтбора.Ключ + ")";				
			КонецЕсли; 
			
			ТекстЗапросаУсловий = ?(ПустаяСтрока(ТекстЗапросаУсловий), "", ТекстЗапросаУсловий + Символы.ПС + " И ")
				+ "ПланВидовРасчетаНачисления." + ЭлементОтбора.Ключ + УсловиеСПравымЗначением;
				
			Запрос.УстановитьПараметр("Отбор" + ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	ПланВидовРасчетаНачисления.Ссылка КАК Ссылка,
		|	ПланВидовРасчетаНачисления.ПометкаУдаления,
		|	"""" КАК Предупреждение,
		|	ПланВидовРасчетаНачисления.Наименование,
		|	ПланВидовРасчетаНачисления.Код,
		|	ЛОЖЬ КАК ЯвляетсяДенежнымСодержанием
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления";
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		НовыйТекстЗапроса = Модуль.УточнитьТекстЗапросаСпискаНачислений(ТекстЗапроса, ТекстЗапросаУсловий);
		Если Не ПустаяСтрока(НовыйТекстЗапроса) Тогда
			ТекстЗапроса = НовыйТекстЗапроса;
		КонецЕсли;
	КонецЕсли;	

	Если Не ПустаяСтрока(ТекстЗапросаУсловий) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	" + ТекстЗапросаУсловий;
	КонецЕсли; 
		
	ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ПланВидовРасчетаНачисления.Наименование";
		
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонПредставления = "%1";
		Если ЗначениеЗаполнено(Выборка.Код) Тогда
			ШаблонПредставления = "%1 (%2)";
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, Выборка.Наименование, СокрЛП(Выборка.Код));
		ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция СведенияОНастройкахЗарплатаКадрыРасширенная(Организация) Экспорт
	
	Возврат РегистрыСведений.НастройкиЗарплатаКадрыРасширенная.СведенияОНастройкахОрганизации(
		Организация, "ВыплачиватьЗарплатуВПоследнийДеньМесяца,ДатаВыплатыЗарплатыНеПозжеЧем");
	
КонецФункции

#КонецОбласти
