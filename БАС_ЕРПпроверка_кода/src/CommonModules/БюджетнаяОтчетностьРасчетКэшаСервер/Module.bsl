#Область СлужебныеПроцедурыИФункции

// Функция возвращает параметры вывода вида бюджета.
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого определяются параметры.
//  РежимФормирования  - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - вариант формирования.
//
// Возвращаемое значение:
//   Структура   - Структура параметров, используемая в функции "ПолучитьДанныеДляБюджетногоОтчета".
//
Функция ПолучитьПараметрыВыводаВидаБюджета(ВидБюджета, РежимФормирования) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидБюджета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Генерируем колонки отчета.
	СтруктураКолонокТаблицыДанных = ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	
	// Генерируем источники данных и структуру ячеек.
	СтруктураОписанияОтчета = ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Генерируем СКД на основании источников.
	СКДДанных = ПолучитьСКДПоОписаниюИсточников(ВидБюджета, СтруктураОписанияОтчета,
													СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Получаем дерево группировок для вывода отчета.
	ДеревоВывода = ПолучитьДеревоДляВыводаОтчета(ВидБюджета, СтруктураОписанияОтчета.СтруктураЯчеек, СтруктураОписанияОтчета.ПараметрыЯчеек);
	
	// Результат.
	СтруктураРезультат = Новый Структура("СтруктураКолонокТаблицыДанных, СтруктураОписанияОтчета,
										|СКДДанных, ДеревоВывода, КэшДанных", 
										СтруктураКолонокТаблицыДанных, СтруктураОписанияОтчета,
										СКДДанных, ДеревоВывода, Новый Структура);
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
			ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
		
		СтруктураОписанияСпискаВвода = ПараметрыСпискаВводаПоСтрокамЯчеек(ВидБюджета, 
																			СтруктураКолонокТаблицыДанных, 
																			СтруктураОписанияОтчета,
																			ДеревоВывода);
		
		СтруктураРезультат.Вставить("СтруктураОписанияСпискаВвода", СтруктураОписанияСпискаВвода);
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Функция возвращает дерево элементов вида бюджета
// 
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого требуется построить дерево
//  ВыводитьЭлементаСложнойТаблицы  - Булево - признак, что требуется выводить элементы, 
//                                             подчиненные элементу "Настройка Ячеек"
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево элементов бюджетного отчета
//
Функция ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, ВыводитьЭлементыСложнойТаблицы = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшДереваЭлементов, ХранилищеКэшаДереваЭлементов");
	Постфикс = ?(ВыводитьЭлементыСложнойТаблицы, "СДопЭлементами", "БезДопЭлементов");
	
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	Если ЗначенияКэша.СформированКэшДереваЭлементов = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаДереваЭлементов.Получить();
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Справочники.ВидыБюджетов.ПолучитьМакет("ДеревоЭлементовОтчета");
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВыводитьЭлементыСложнойТаблицы", ВыводитьЭлементыСложнойТаблицы);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВидОтчета", ВидБюджета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшРеквизитов", ФинОтчеты.КэшДополнительныеРеквизиты(ВидБюджета));
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшДополнительныхПолей", ФинОтчеты.КэшДополнительныеПоляЭлементов(ВидБюджета));
	
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева,,Истина);
	
	Реквизиты = Новый Структура("СформированКэшДереваЭлементов, ХранилищеКэшаДереваЭлементов",
								Истина, Новый ХранилищеЗначения(Результат));
	
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры данных видов бюджета
//
// Параметры:
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов - вид бюджета, для которого определяются параметры данных
// 
// Возвращаемое значение:
//	Структура - параметры данных для вида бюджета, ключи:
//		Периодичности - массив периодичностей до которых следует расшифровать таблицу данных
//		Измерения - массив используемых измерений
//		ВидыАналитик - массив используемых видов аналитик
//
Функция ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшСтруктурыКолонок, ХранилищеКэшаСтруктурыКолонок");
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	Если ЗначенияКэша.СформированКэшСтруктурыКолонок = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаСтруктурыКолонок.Получить();
	КонецЕсли;
	
	ДеревоЭлементовБюджета = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	СтруктураРезультат = Новый Структура("Периодичности, Измерения, ВидыАналитик", 
										Новый Соответствие, Новый Соответствие, Новый Соответствие);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение;
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	
	ТипыИзмерений = Перечисления.ТипыИзмеренийФинансовогоОтчета;
	
	Для Каждого СтрокаИзмерения из ОтобранныеСтроки Цикл
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																СтрокаИзмерения.ЭлементОтчета, 
																ДопРеквизиты.ТипИзмерения,
																КэшРеквизитов);
		Если ТипИзмерения = ТипыИзмерений.Период Тогда
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	СтрокаИзмерения.ЭлементОтчета, 
																	ДопРеквизиты.Периодичность,
																	КэшРеквизитов);
			СтруктураРезультат.Периодичности.Вставить(Периодичность);
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	СтрокаИзмерения.ЭлементОтчета, 
																	ДопРеквизиты.ИмяИзмерения,
																	КэшРеквизитов);
			СтруктураРезультат.Измерения.Вставить(ИмяИзмерения);
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Аналитика Тогда
			Аналитика = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	СтрокаИзмерения.ЭлементОтчета, 
																	ДопРеквизиты.ВидАналитики,
																	КэшРеквизитов);
			СтруктураРезультат.ВидыАналитик.Вставить(Аналитика);
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.ФиксированнаяАналитика Тогда
			Аналитика = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	СтрокаИзмерения.ЭлементОтчета, 
																	ДопРеквизиты.ВидАналитики,
																	КэшРеквизитов);
			СтруктураРезультат.ВидыАналитик.Вставить(Аналитика);
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Сценарий Тогда
			СтруктураРезультат.Измерения.Вставить("Сценарий");
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Организация Тогда
			СтруктураРезультат.Измерения.Вставить("Организация");
			
		ИначеЕсли ТипИзмерения = ТипыИзмерений.Подразделение Тогда
			СтруктураРезультат.Измерения.Вставить("Подразделение");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура;
	
	Для Каждого КлючИЗначение из СтруктураРезультат Цикл
		
		Соответствие = КлючИЗначение.Значение;
		
		Список = Новый Массив;
		Для Каждого КлючСоответствия из Соответствие Цикл
			Список.Добавить(КлючСоответствия.Ключ);
		КонецЦикла;
			
		ВозвращаемоеЗначение.Вставить(КлючИЗначение.Ключ, Список);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлементыФинансовыхОтчетов.Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|		ПО ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка = ЭлементыФинансовыхОтчетов.Ссылка
		|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &ТипПоказателей)
		|			И (ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение В (&ВыводимыеПоказатели))
		|			И (ЭлементыФинансовыхОтчетов.Владелец = &Владелец)";

	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	Запрос.УстановитьПараметр("ТипПоказателей", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ВыводимыеПоказатели);
	
	ВыводимыеПоказатели = Новый СписокЗначений;
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество);
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма);
	
	Запрос.УстановитьПараметр("ВыводимыеПоказатели", ВыводимыеПоказатели);

	ЕстьКоличество = Не Запрос.Выполнить().Пустой();
	
	ВыводимыеПоказатели = Новый СписокЗначений;
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма);
	ВыводимыеПоказатели.Добавить(Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма);
	
	Запрос.УстановитьПараметр("ВыводимыеПоказатели", ВыводимыеПоказатели);

	ЕстьСумма = Не Запрос.Выполнить().Пустой();
	
	//валюта всегда используется для пересчетов
	Если ВозвращаемоеЗначение.Измерения.Найти("Валюта") = Неопределено Тогда
		ВозвращаемоеЗначение.Измерения.Добавить("Валюта");
	КонецЕсли;
	
	Если ЕстьКоличество Тогда
		Если ВозвращаемоеЗначение.Измерения.Найти("ЕдиницаИзмерения") = Неопределено Тогда
			ВозвращаемоеЗначение.Измерения.Добавить("ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты = Новый Структура("СформированКэшСтруктурыКолонок, ХранилищеКэшаСтруктурыКолонок",
									Истина, Новый ХранилищеЗначения(ВозвращаемоеЗначение));
	
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область Прочие

Функция ПодчиненныеЭлементыВидаБюджета(ВидБюджета) Экспорт
	
	СКД = Справочники.ВидыБюджетов.ПолучитьМакет("ВсеПодчиненныеЭлементы");
	Компоновщик = ФинансоваяОтчетностьСервер.КомпоновщикСхемы(СКД);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Компоновщик, "ВидБюджета", ВидБюджета);
	Результат = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Компоновщик);
	Результат.Индексы.Добавить("Родитель");
	
	Возврат Результат;
	
КонецФункции

Функция КэшРеквизитовЭлементовВидаБюджета(ВидБюджета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетов.Ссылка,
		|	ЭлементыФинансовыхОтчетов.НаименованиеДляПечати,
		|	ЭлементыФинансовыхОтчетов.ВидЭлемента,
		|	ЭлементыФинансовыхОтчетов.ОбратныйЗнак,
		|	ЭлементыФинансовыхОтчетов.Родитель,
		|	ЭлементыФинансовыхОтчетов.ЗначениеАналитики,
		|	ЭлементыФинансовыхОтчетов.ДополнительныйОтбор,
		|	ЭлементыФинансовыхОтчетов.ЭлементыТаблицы.(
		|		Ссылка,
		|		НомерСтроки,
		|		Строка,
		|		Колонка,
		|		Элемент
		|	)
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Кэш = РезультатЗапроса.Выгрузить();
	Кэш.Индексы.Добавить("Ссылка");
	
	Возврат Кэш;
	
КонецФункции

Функция ЗначениеРеквизитаЭлементаВидаБюджета(Ссылка, ИмяРеквизита, Кэш)
	
	Возврат Кэш.Найти(Ссылка, "Ссылка")[ИмяРеквизита];
	
КонецФункции

// Процедура возвращает отбор по имени 
// процедура не рекурсивная, т.к. вызывается из СравнитьОтборы,
// в которой уже обработан обход групп
//
// Параметры:
//  ЭлементОтбора - ЭлементОтбораКомпоновкиДанных - искомый отбор
//  ЭлементыОтбора - ОтбораКомпоновкиДанных - отбор, где ищем
//  НайденныйЭлемент - ЭлементОтбораКомпоновкиДанных - найденный элемент отбора
//
Функция НайтиОтбор(ЭлементОтбора, ЭлементыОтбора, НайденныйЭлемент)
	
	Для Каждого ЭлементОтбораСравнения из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбораСравнения) <> Тип(ЭлементОтбора) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбораСравнения) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение
				И ЭлементОтбораСравнения.ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение
				И ЭлементОтбораСравнения.ВидСравнения = ЭлементОтбора.ВидСравнения
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение
				Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		Иначе
			Если ЭлементОтбораСравнения.Использование = ЭлементОтбора.Использование
				И ЭлементОтбораСравнения.ТипГруппы = ЭлементОтбора.ТипГруппы
				И ЭлементОтбораСравнения.Применение = ЭлементОтбора.Применение
				Тогда
				
				НайденныйЭлемент = ЭлементОтбораСравнения;
				Возврат Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтбор)
	
	Для Каждого ЭлементОтбора из ЭлементСравненияОтбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Возврат Истина;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЕстьЗначимыеЭлементыОтбора(ЭлементОтбора.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиОтборПоИмени(ИсточникОтбор, ИмяЭлемента, 
							НайденныйОтбор = Неопределено, СУчетомВложенных = Ложь) Экспорт
	
	Если ИсточникОтбор = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Если ТипЗнч(ИсточникОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементыОтбора = ИсточникОтбор.Элементы;
	Иначе
		ЭлементыОтбора = ИсточникОтбор.Отбор.Элементы;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если НайтиОтборПоИмени(ЭлементОтбора, ИмяЭлемента, НайденныйОтбор, СУчетомВложенных) Тогда
				
				Если НайденныйОтбор = Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если СУчетомВложенных Тогда
				
				ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
				ПозицияТочки = СтрНайти(ИмяПоля, ".");
				Если ПозицияТочки Тогда
					ИмяПоля = Лев(ИмяПоля, ПозицияТочки - 1);
				КонецЕсли;
				ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
				
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
					
					ИмяПоля = Строка(ЭлементОтбора.ПравоеЗначение);
					ПозицияТочки = СтрНайти(ИмяПоля, ".");
					Если ПозицияТочки Тогда
						ИмяПоля = Лев(ИмяПоля, ПозицияТочки - 1);
					КонецЕсли;
					ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
					
				Иначе
					
					ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
					
				КонецЕсли;
			Иначе
				
				ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
				ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
				
			КонецЕсли;
			
			Если (ЛевоеЗначение = ПолеКомпоновки
				ИЛИ ПравоеЗначение = ПолеКомпоновки)
				И ЭлементОтбора.Использование Тогда
				
				Если НайденныйОтбор = Неопределено Тогда
					Возврат Истина;
				КонецЕсли;
				
				НайденныйОтбор.Добавить(ЭлементОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НайденныйОтбор = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат НайденныйОтбор.Количество();
	КонецЕсли;
	
КонецФункции

Функция СравнитьОтборы(ИсточникОтбор, ЭлементСравненияОтбор)
	
	Если ИсточникОтбор = Неопределено
		И ЭлементСравненияОтбор = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИсточникОтбор = Неопределено Тогда
		Возврат Не ЕстьЗначимыеЭлементыОтбора(ЭлементСравненияОтбор.Отбор);
	КонецЕсли;
	
	Если ЭлементСравненияОтбор = Неопределено Тогда
		Возврат Не ЕстьЗначимыеЭлементыОтбора(ИсточникОтбор.Отбор);
	КонецЕсли;
	
	Для Каждого ЭлементОтбора из ИсточникОтбор.Отбор.Элементы Цикл
		НайденныйЭлемент = Неопределено;
		Если Не НайтиОтбор(ЭлементОтбора, ЭлементСравненияОтбор.Отбор.Элементы, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не СравнитьОтборы(ЭлементОтбора.Элементы, НайденныйЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора из ЭлементСравненияОтбор.Отбор.Элементы Цикл
		НайденныйЭлемент = Неопределено;
		Если Не НайтиОтбор(ЭлементОтбора, ИсточникОтбор.Отбор.Элементы, НайденныйЭлемент) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Не СравнитьОтборы(ЭлементОтбора.Элементы, НайденныйЭлемент) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТекстФормулыПоГруппе(ЭлементОтчета, ДеревоЭлементов) Экспорт
	
	
	
КонецФункции

Функция МассивВСписок(Массив) 
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список;
	
КонецФункции

Функция ТипИзмеренияСовпадаетСИскомым(СтрокаЭлемента, ТипИскомый, КэшДопРеквизитов)
	
	Если СтрокаЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ИскомоеИзмерение = Перечисления.ТипыИзмеренийФинансовогоОтчета[ТипИскомый];
		ИмяИзмерения = Неопределено;
		
		Если ЗначениеЗаполнено(СтрокаЭлемента.АдресСтруктурыЭлемента)
			ИЛИ ЗначениеЗаполнено(СтрокаЭлемента.ЭлементОтчета) Тогда
			
			Если ЗначениеЗаполнено(СтрокаЭлемента.АдресСтруктурыЭлемента) Тогда
				ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.АдресСтруктурыЭлемента, "ТипИзмерения");
			ИначеЕсли Не ЗначениеЗаполнено(КэшДопРеквизитов) Тогда
				ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.ЭлементОтчета, "ТипИзмерения");
			Иначе
				ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(СтрокаЭлемента.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизитов);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИскомоеИзмерение = ИмяИзмерения Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВРодительскихСтрокахЕстьОпределенныйЭлемент(Знач СтрокаДерева, ТипИскомый, КэшДопРеквизитов)
	
	СтрокаРодитель = СтрокаДерева;
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Если ТипИзмеренияСовпадаетСИскомым(СтрокаРодитель, ТипИскомый, КэшДопРеквизитов) Тогда
			Возврат Истина;
		КонецЕсли;
		
		СтрокаРодитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(СтрокаРодитель);
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(СтрокаДерева, ТипИскомый, КэшДопРеквизитов)
	
	ПодчиненныеСтроки = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокаДерева);
	Если Не ПодчиненныеСтроки.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
		
		Если ТипИзмеренияСовпадаетСИскомым(ПодчиненнаяСтрока, ТипИскомый, КэшДопРеквизитов) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(ПодчиненнаяСтрока, ТипИскомый, КэшДопРеквизитов) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПараметрыДоступностиФильтров(СтрокаОтчета, ПараметрыОпределения = Неопределено, СтруктураКэша = Неопределено) Экспорт
	
	МенеджерПеречисления = Перечисления.ВидыЭлементовФинансовогоОтчета;
	Если СтруктураКэша = Неопределено Тогда
		КэшДопРеквизитов = Неопределено;
		КэшРеквизитов = Новый Соответствие;
	Иначе
		КэшДопРеквизитов = СтруктураКэша.КэшДопРеквизитов;
		КэшРеквизитов = СтруктураКэша.КэшРеквизитов;
	КонецЕсли;
	
	ДоступностьФильтров = Новый Структура("Организация, Подразделение, Сценарий", Истина, Истина, Истина);
	Колонка = Неопределено; Строка = Неопределено;
	
	Если ПараметрыОпределения = Неопределено Тогда
		
		НастройкаЯчеек = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, 
															Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
		Если НастройкаЯчеек = Неопределено Тогда
			
			СтрокиТаблицы = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, 
															Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
			КолонкиТаблицы = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, 
															Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
			Если СтрокиТаблицы = Неопределено И КолонкиТаблицы = Неопределено Тогда
				//это отчет без структуры
				Строка = СтрокаОтчета;
				Колонка = Неопределено;
			ИначеЕсли СтрокиТаблицы <> Неопределено Тогда
				Строка = СтрокаОтчета;
				Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
				Колонка = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
			ИначеЕсли КолонкиТаблицы <> Неопределено Тогда
				Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
				Строка = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
				Колонка = СтрокаОтчета;
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(КэшРеквизитов) = Тип("Соответствие") Тогда
				ТаблицаНастройки = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(КэшРеквизитов, НастройкаЯчеек.ЭлементОтчета, "ЭлементыТаблицы");
			ИначеЕсли ТипЗнч(КэшРеквизитов) = Тип("ТаблицаЗначений") Тогда
				ТаблицаНастройки = ЗначениеРеквизитаЭлементаВидаБюджета(НастройкаЯчеек.ЭлементОтчета, "ЭлементыТаблицы", КэшРеквизитов);
			КонецЕсли;
			
			СтрокаОпределенияЯчейки = ТаблицаНастройки.Найти(СтрокаОтчета.ЭлементОтчета, "Элемент");
			Если СтрокаОпределенияЯчейки = Неопределено Тогда
				Родитель = СтрокаОтчета.Родитель;
				СтрокаОпределенияЯчейки = ТаблицаНастройки.Найти(Родитель.ЭлементОтчета, "Элемент");
			КонецЕсли;
			Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаОтчета, Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
			Строка = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ЭлементОтчета", СтрокаОпределенияЯчейки.Строка);
			Колонка = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ЭлементОтчета", СтрокаОпределенияЯчейки.Колонка);
			
		КонецЕсли;
		
	Иначе
		
		АдресТаблицыЭлементов = Неопределено; АдресЭлементовОтчета = Неопределено;
		ТаблицаЭлементов = Неопределено; ДеревоЭлементов = Неопределено;
		Если ПараметрыОпределения.Свойство("АдресТаблицыЭлементов", АдресТаблицыЭлементов) Тогда
			ТаблицаЭлементов = ПолучитьИзВременногоХранилища(АдресТаблицыЭлементов);
		КонецЕсли;
		Если ПараметрыОпределения.Свойство("АдресЭлементовОтчета", АдресЭлементовОтчета) Тогда
			ДеревоЭлементов = ПолучитьИзВременногоХранилища(АдресЭлементовОтчета);
		КонецЕсли;
		
		Если ТаблицаЭлементов = Неопределено Тогда
			
			ЭлементДерева = ДеревоЭлементов.Строки.Найти(ПараметрыОпределения.АдресРедактируемогоЭлемента, "АдресСтруктурыЭлемента", Истина);
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ЭлементДерева, 
																	Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
			ИсточникПодчиненных = Неопределено;
			Если КорневойЭлемент <> Неопределено Тогда
				ИсточникПодчиненных = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(КорневойЭлемент, 
																			"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
				Колонка = ЭлементДерева;
				Строка = ИсточникПодчиненных;
			КонецЕсли;
			
			Если КорневойЭлемент = Неопределено Тогда
				
				КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ЭлементДерева, 
																		Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
				Если КорневойЭлемент <> Неопределено Тогда
					ИсточникПодчиненных = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(КорневойЭлемент, 
																				"ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
					Колонка = ИсточникПодчиненных;
					Строка = ЭлементДерева;
				КонецЕсли;
				
			КонецЕсли;
			
			Если КорневойЭлемент = Неопределено Тогда
			
				Строка = ЭлементДерева;
				Колонка = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ЯчейкаМатрицы = ТаблицаЭлементов.Найти(ПараметрыОпределения.АдресРедактируемогоЭлемента, "Элемент");
			
			Строка = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Строка, "АдресСтруктурыЭлемента", Истина);
			Колонка = ДеревоЭлементов.Строки.Найти(ЯчейкаМатрицы.Колонка, "АдресСтруктурыЭлемента", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение из ДоступностьФильтров Цикл
		
		ИскомыйТип = КлючИЗначение.Ключ;
		
		ЕстьЯчейкиСНеопределеннымЭлементом = Истина;
		Если ВРодительскихСтрокахЕстьОпределенныйЭлемент(Строка, ИскомыйТип, КэшДопРеквизитов) Тогда
			ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
		ИначеЕсли Не ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(Строка, ИскомыйТип, КэшДопРеквизитов) Тогда
			ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
		КонецЕсли;
		
		//в строках измерение не определено - проверим колонки
		Если ЕстьЯчейкиСНеопределеннымЭлементом И Колонка <> Неопределено Тогда
			
			ЕстьЯчейкиСНеопределеннымЭлементом = Истина;
			Если ВРодительскихСтрокахЕстьОпределенныйЭлемент(Колонка, ИскомыйТип, КэшДопРеквизитов) Тогда
				ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
			ИначеЕсли Не ВПодчиненныхСтрокахЕстьНеопределенныйЭлементТипа(Колонка, ИскомыйТип, КэшДопРеквизитов) Тогда
				ЕстьЯчейкиСНеопределеннымЭлементом = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить(КлючИЗначение.Ключ, ЕстьЯчейкиСНеопределеннымЭлементом);
		
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаДерева) Экспорт
	
	Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		ДополнительныеПоля = СтрокаДерева.ДополнительныеПоля;
		Если ДополнительныеПоля.Количество() Тогда
			Возврат ДополнительныеПоля.НайтиСтроки(Новый Структура("ВОтдельнойКолонке", Истина)).Количество();
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция РассчитатьГлубинуУровней(СтрокиДерева, СУчетомДополнительныхПолей = Ложь, Знач Глубина = 1, ПредыдущийФлаг = Ложь) Экспорт
	
	Если Не ПредыдущийФлаг Тогда
		ФинальнаяГлубинаУровня = 1;
	Иначе
		ФинальнаяГлубинаУровня = Глубина;
	КонецЕсли;
	
	Результат = ФинальнаяГлубинаУровня;
	ПодчиненныеЭлементы = ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокиДерева);
	Для Каждого СтрокаДерева из ПодчиненныеЭлементы Цикл
		
		Дополнение = 0;
		
		Если СтрокаДерева.ВыводитьВместеСРодительским Тогда
			Дополнение = 1;
		КонецЕсли;
		
		Если СУчетомДополнительныхПолей Тогда
			Дополнение = Дополнение + КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаДерева);
			Если СтрокаДерева.ВыводитьВместеСРодительским и Не ПредыдущийФлаг Тогда
				//Дополнительные поля первого из объединенных элементов
				//не учтены в общем количестве колонок
				Дополнение = Дополнение + КоличествоДополнительныхПолейДляРасчетаГлубиныДерева(СтрокаДерева.Родитель);
			КонецЕсли;
		КонецЕсли;
		
		ГлубинаТекущегоУровня = ФинальнаяГлубинаУровня + Дополнение;
		
		Результат = Макс(Результат, ГлубинаТекущегоУровня);
		Результат = Макс(Результат, РассчитатьГлубинуУровней(СтрокаДерева, СУчетомДополнительныхПолей, ГлубинаТекущегоУровня, СтрокаДерева.ВыводитьВместеСРодительским));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭлементыНастройкиЯчеекВидаБюджета(ВидБюджета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭлементыФинансовыхОтчетов.Элемент,
	                      |	ЭлементыФинансовыхОтчетов.Строка,
	                      |	ЭлементыФинансовыхОтчетов.Колонка,
	                      |	ЭлементыФинансовыхОтчетов.Ссылка.Родитель КАК Родитель
	                      |ИЗ
	                      |	Справочник.ЭлементыФинансовыхОтчетов.ЭлементыТаблицы КАК ЭлементыФинансовыхОтчетов
	                      |ГДЕ
	                      |	ЭлементыФинансовыхОтчетов.Ссылка.Владелец = &ВидБюджета");
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроек.Индексы.Добавить("Строка, Колонка, Родитель");
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ИсточникиЗначенийВидаБюджета(ВидБюджета)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЭлементыФинансовыхОтчетовИсточникиЗначений.Ссылка КАК ЭлементОтчета,
	                      |	ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник,
	                      |	ВЫБОР
	                      |		КОГДА ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыэлементовФинансовогоОтчета.СтатьяБюджетов)
	                      |			ТОГДА РеквизитыСтатья.Значение
	                      |		КОГДА ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыэлементовФинансовогоОтчета.ПоказательБюджетов)
	                      |			ТОГДА РеквизитыПоказатель.Значение
	                      |		КОГДА ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыэлементовФинансовогоОтчета.НефинансовыйПоказатель)
	                      |			ТОГДА РеквизитыНФП.Значение
	                      |	КОНЕЦ КАК Объект,
	                      |	ЭлементыФинансовыхОтчетовИсточникиЗначений.ДобавляемыеЗначенияДокумента
	                      |ИЗ
	                      |	Справочник.ЭлементыФинансовыхОтчетов.ИсточникиЗначений КАК ЭлементыФинансовыхОтчетовИсточникиЗначений
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыСтатья
	                      |		ПО ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник = РеквизитыСтатья.Ссылка
	                      |			И (РеквизитыСтатья.Реквизит = &Реквизит_СтатьяБюджетов)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыПоказатель
	                      |		ПО ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник = РеквизитыПоказатель.Ссылка
	                      |			И (РеквизитыПоказатель.Реквизит = &Реквизит_Показатель)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК РеквизитыНФП
	                      |		ПО ЭлементыФинансовыхОтчетовИсточникиЗначений.Источник = РеквизитыНФП.Ссылка
	                      |			И (РеквизитыНФП.Реквизит = &Реквизит_НФП)
	                      |ГДЕ
	                      |	ЭлементыФинансовыхОтчетовИсточникиЗначений.Ссылка.Владелец = &ВидБюджета");
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	Запрос.УстановитьПараметр("Реквизит_СтатьяБюджетов", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.СтатьяБюджетов);
	Запрос.УстановитьПараметр("Реквизит_Показатель", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ПоказательБюджетов);
	Запрос.УстановитьПараметр("Реквизит_НФП", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НефинансовыйПоказатель);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроек.Индексы.Добавить("ЭлементОтчета");
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Процедура ЗаполнитьТаблицуИменИсточников(МассивКолонокИзмерений, ТаблицаИменИсточников, ТаблицаИсточников, КэшРеквизитовПоказателей)
	
	Для Каждого СтрокаЯчеек из ТаблицаИсточников Цикл
		
		Для Каждого ИмяИзмерения из МассивКолонокИзмерений Цикл
			ИсточникиЗначений = СтрокаЯчеек["Источник" + ИмяИзмерения];
			Если Не ЗначениеЗаполнено(ИсточникиЗначений) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Источник из ИсточникиЗначений Цикл
				
				СтруктураПоиска = Новый Структура("Строка, Колонка, 
													|СтатьяБюджетов, ПоказательБюджетов, НефинансовыйПоказатель, 
													|Измерение, ИД_Источника"
													,,,
													Неопределено,
													Справочники.ПоказателиБюджетов.ПустаяСсылка(),
													Справочники.НефинансовыеПоказателиБюджетов.ПустаяСсылка());
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаЯчеек, "Строка, Колонка");
				
				СтруктураПоиска.Измерение = ИмяИзмерения;
				СтруктураПоиска.ИД_Источника = Источник.Источник;
				Если ТипЗнч(Источник.Объект) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
					СтруктураПоиска.СтатьяБюджетов = Источник.Объект;
				ИначеЕсли ТипЗнч(Источник.Объект) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
					Если ЗначениеРеквизитаЭлементаВидаБюджета(Источник.Объект, "ТипПоказателя", КэшРеквизитовПоказателей) = 
																			Перечисления.ТипПоказателяБюджетов.Расчетный Тогда
						СтруктураПоиска.ПоказательБюджетов = Источник.Объект;
					Иначе
						СтруктураПоиска.СтатьяБюджетов = Источник.Объект;
					КонецЕсли;
				ИначеЕсли ТипЗнч(Источник.Объект) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
					СтруктураПоиска.НефинансовыйПоказатель = Источник.Объект;
				Иначе
					ВызватьИсключение НСтр("ru='Неизвестный тип объекта источника значений';uk='Невідомий тип об''єкта джерела значень'")
				КонецЕсли;
				
				Если Не ТаблицаИменИсточников.НайтиСтроки(СтруктураПоиска).Количество() Тогда
					НоваяСтрока = ТаблицаИменИсточников.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПолучениеОписанияИсточниковДанных

Функция ПоИсточникуПредположительноНужныФактическиеДанные(Источник, Сценарий)
	
	Если Источник.ТипИсточника = "Остатки" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Источник.ТипИсточника = "Нефинансовый" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Источник.ТипИсточника = "РедактируемоеЗначение" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Источник.Идентификатор = "Документ" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначенияОтбора = Новый Массив;
	
	Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, "Сценарий", ЗначенияОтбора) Тогда
		
		Для Каждого ЗначениеОтбора из ЗначенияОтбора Цикл
			
			Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ТипЗнч(ЗначениеОтбора.ПравоеЗначение) = Тип("Строка")
				И НРег(ЗначениеОтбора.ПравоеЗначение) = "<заполнить_сценарий>" Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ЗначениеОтбора.ПравоеЗначение = Сценарий Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			Если ЗначениеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно
				И ЗначениеОтбора.ПравоеЗначение <> Сценарий Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
			Родитель = ЗначениеОтбора.Родитель;
			Пока ЗначениеЗаполнено(Родитель) Цикл
				Если Родитель.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли Тогда
					Возврат Истина;
				ИначеЕсли Родитель.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
					Возврат Истина;
				КонецЕсли;
				Родитель = Родитель.Родитель;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВыражениеПериодаГруппировкиИсточникаДанных(ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодСмещения,
																КэшРеквизитов);
	
	Если ЗначениеЗаполнено(ПериодСмещения) Тогда
		ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодичностьСмещения,
																КэшРеквизитов);
		Если Не ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			ПериодичностьСмещения = Неопределено;
		КонецЕсли;
	Иначе
		ПериодСмещения = Неопределено;
	КонецЕсли;
	
	Если СтруктураКолонок.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонок.Периодичности);
		Если МинимальнаяПериодичность = Перечисления.Периодичность.Неделя Тогда
			
			ТекстПоля = "ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ПериодПланирования, " + ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность) + ") < &НачалоПериода
						|ТОГДА &НачалоПериода ИНАЧЕ НАЧАЛОПЕРИОДА(ПериодПланирования, " + ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность) + ") КОНЕЦ";
			
		Иначе
			
			ТекстПоля = "НАЧАЛОПЕРИОДА(ПериодПланирования, " + ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность) + ")";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПериодСмещения) И ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			
			ТекстПоля = "ДОБАВИТЬКДАТЕ(" + ТекстПоля + ", ";
			ТекстПоля = ТекстПоля + ОбщегоНазначения.ИмяЗначенияПеречисления(ПериодичностьСмещения) + ", ";
			ТекстПоля = ТекстПоля + ПериодСмещения + ")";
			
		КонецЕсли;
		
	Иначе
		
		ТекстПоля = "Неопределено";
		
	КонецЕсли;
	
	Возврат ТекстПоля;
	
КонецФункции

Функция ВыражениеГраницыПериодаИсточникаДанных(ТипИсточника, ИмяПоля, ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодСмещения,
																КэшРеквизитов);
	
	Если ЗначениеЗаполнено(ПериодСмещения) Тогда
		ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодичностьСмещения,
																КэшРеквизитов);
		Если Не ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			ПериодичностьСмещения = Неопределено;
		КонецЕсли;
	Иначе
		ПериодСмещения = Неопределено;
	КонецЕсли;
	
	Если ТипИсточника = "Нефинансовый" Тогда
		Формула = "&" + ИмяПоля;
	Иначе
		
		Формула = ?(ИмяПоля = "НачалоПериода", "НижняяГраница", "ВерхняяГраница") + "Данных";
		Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																	ЭлементОтчета, 
																	ДопРеквизиты[Формула],
																	КэшРеквизитов);
		
		Формула = СтрЗаменить(НРег(Формула), НРег("[Начало периода данных]"), "&НачалоПериода");
		Формула = СтрЗаменить(Формула, НРег("[Конец периода данных]"), "&КонецПериода");
		Формула = СтрЗаменить(Формула, НРег("[Граница факт.данных]"), "&ГраницаФактДанных");
		
		//для сопоставимости формул удалим вспомогательные пользовательские символы
		Формула = СтрЗаменить(Формула, " ", "");
		Формула = СтрЗаменить(Формула, Символы.ПС, "");
		Формула = СтрЗаменить(Формула, Символы.Таб, "");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодСмещения) И ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
		
		Формула = "ДОБАВИТЬКДАТЕ(" + Формула + ", ";
		Формула = Формула + ОбщегоНазначения.ИмяЗначенияПеречисления(ПериодичностьСмещения) + ", -";
		Формула = Формула + ПериодСмещения + ")";
		
	КонецЕсли;
	
	Если ИмяПоля = "КонецПериода" Тогда
		Если Не ЗначениеЗаполнено(ПериодичностьСмещения) Тогда
			ПериодПриведениеКОкончанию = "День";
		Иначе
			ПериодПриведениеКОкончанию = ОбщегоНазначения.ИмяЗначенияПеречисления(ПериодичностьСмещения);
		КонецЕсли;
		Формула = "КОНЕЦПЕРИОДА(" + Формула + ", " + ПериодПриведениеКОкончанию + ")";
	КонецЕсли;
	
	Возврат Формула;
	
КонецФункции

Процедура УбратьИзОтбораОпределенныеИзмерения(СтрокаОтчета, ДополнительныйОтбор, СтруктураКэша)
	
	Список = Новый СписокЗначений;
	ПараметрыОтборов = ПараметрыДоступностиФильтров(СтрокаОтчета, , СтруктураКэша);
	Для Каждого КлючИЗначение из ПараметрыОтборов Цикл
		Если Не ПараметрыОтборов[КлючИЗначение.Ключ] Тогда
			НайтиОтборПоИмени(ДополнительныйОтбор, КлючИЗначение.Ключ, Список);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора из Список Цикл
		ДополнительныйОтбор.Отбор.Элементы.Удалить(ЭлементОтбора.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьИсточник(СтруктураКэша, НайденныйИсточник, ОтобраннаяСтрока)
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	КэшДопРеквизитов = СтруктураКэша.КэшДопРеквизитов;
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	НайденныйИсточник.СписокЭлементов.Добавить(ЭлементОтчета);
	
	Если НайденныйИсточник.Объекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.СтатьяБюджетов,
																КэшДопРеквизитов);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПоказательБюджетов,
																КэшДопРеквизитов);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.НефинансовыйПоказатель,
																КэшДопРеквизитов);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		ОбъектУчета = ОтобраннаяСтрока.НаименованиеДляПечати;
	КонецЕсли;
	
	Если НайденныйИсточник.Объекты.Найти(ОбъектУчета) = Неопределено Тогда
		НайденныйИсточник.Объекты.Добавить(ОбъектУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьИсточник(СтруктураКэша, Источники, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	КэшДопРеквизитов = СтруктураКэша.КэшДопРеквизитов;
	
	СтруктураИсточника = Новый Структура;
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.СтатьяБюджетов,
																КэшДопРеквизитов);
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПоказательБюджетов,
																КэшДопРеквизитов);
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		ОбъектУчета = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.НефинансовыйПоказатель,
																КэшДопРеквизитов);
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		
		ОбъектУчета = ЭлементОтчета.НаименованиеДляПечати;
		Массив = Новый Массив;
		Массив.Добавить(ОбъектУчета);
	Иначе
		Массив = Неопределено;
	КонецЕсли;
	
	Если ИсточникДокумент Тогда
		Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			СтруктураИсточника.Вставить("ТипИсточника", "РедактируемоеЗначение");
		Иначе
			СтруктураИсточника.Вставить("ТипИсточника", "Факт");
		КонецЕсли;
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		СтруктураИсточника.Вставить("ТипИсточника", "РедактируемоеЗначение");
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		СтруктураИсточника.Вставить("ТипИсточника", "Обороты");
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		СтруктураИсточника.Вставить("ТипИсточника", "Остатки");
	ИначеЕсли ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		СтруктураИсточника.Вставить("ТипИсточника", "Нефинансовый");
	КонецЕсли;
	
	СтруктураИсточника.Вставить("Объекты", Массив);
	
	СтруктураИсточника.Вставить("ВыражениеПериодаГруппировки", ВыражениеПериодаГруппировкиИсточникаДанных(
																	ЭлементОтчета,
																	СтруктураКолонок,
																	КэшДопРеквизитов));
	
	СтруктураИсточника.Вставить("ВыражениеНачалоПериода", ВыражениеГраницыПериодаИсточникаДанных(
																	СтруктураИсточника.ТипИсточника, 
																	"НачалоПериода",
																	ЭлементОтчета, 
																	СтруктураКолонок, 
																	КэшДопРеквизитов));
	
	СтруктураИсточника.Вставить("ВыражениеКонецПериода", ВыражениеГраницыПериодаИсточникаДанных(
																	СтруктураИсточника.ТипИсточника, 
																	"КонецПериода",
																	ЭлементОтчета, 
																	СтруктураКолонок, 
																	КэшДопРеквизитов));
	
	ПериодСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодСмещения,
																КэшДопРеквизитов);
	ПериодичностьСмещения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты.ПериодичностьСмещения,
																КэшДопРеквизитов);
	СтруктураИсточника.Вставить("ПериодСмещения", ПериодСмещения);
	СтруктураИсточника.Вставить("ПериодичностьСмещения", ПериодичностьСмещения);
	
	ОтборЭлемента = ЭлементОтчета.ДополнительныйОтбор.Получить();
	УбратьИзОтбораОпределенныеИзмерения(ОтобраннаяСтрока, ОтборЭлемента, СтруктураКэша);
	СтруктураИсточника.Вставить("ДополнительныйОтбор", ОтборЭлемента);
	
	Если ИсточникДокумент Тогда
		Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			СтруктураИсточника.Вставить("Идентификатор", "Документ_Значения");
		Иначе
			СтруктураИсточника.Вставить("Идентификатор", "Документ");
		КонецЕсли;
	Иначе
		СтруктураИсточника.Вставить("Идентификатор", "ИД_" + Источники.Количество());
	КонецЕсли;
	
	СтруктураИсточника.Вставить("СписокЭлементов", Новый Массив);
	СтруктураИсточника.СписокЭлементов.Добавить(ЭлементОтчета);
	
	Источники.Добавить(СтруктураИсточника);
	
КонецПроцедуры

Функция СравнитьИсточники(СтруктураКэша, Источник, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	КэшДопРеквизитов = СтруктураКэша.КэшДопРеквизитов;
	КэшРеквизитов = СтруктураКэша.КэшРеквизитов;
	
	ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(ЭлементОтчета, "ВидЭлемента", КэшРеквизитов);
	
	Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		Если ИсточникДокумент Тогда
			Если Источник.ТипИсточника <> "Факт" Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Источник.ТипИсточника <> "Обороты" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		Если Источник.ТипИсточника <> "Обороты" Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		Если Источник.ТипИсточника <> "Нефинансовый" Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		
		Если Источник.ТипИсточника <> "РедактируемоеЗначение" Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		Если Источник.ТипИсточника <> "Остатки" Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Неверный тип источника данных';uk='Невірний тип джерела даних'");
		
	КонецЕсли;
	
	Если НЕ ИсточникДокумент Тогда
		
		ВыражениеПериодаГруппировки = ВыражениеПериодаГруппировкиИсточникаДанных(
																	ЭлементОтчета,
																	СтруктураКолонок,
																	КэшДопРеквизитов);
																	
		Если ВыражениеПериодаГруппировки <> Источник.ВыражениеПериодаГруппировки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВыражениеНачалоПериода = ВыражениеГраницыПериодаИсточникаДанных(
																	Источник.ТипИсточника, 
																	"НачалоПериода",
																	ЭлементОтчета, 
																	СтруктураКолонок, 
																	КэшДопРеквизитов);
		
		Если ВыражениеНачалоПериода <> Источник.ВыражениеНачалоПериода Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ВыражениеКонецПериода = ВыражениеГраницыПериодаИсточникаДанных(
																	Источник.ТипИсточника, 
																	"КонецПериода",
																	ЭлементОтчета, 
																	СтруктураКолонок, 
																	КэшДопРеквизитов);
		
		Если ВыражениеКонецПериода <> Источник.ВыражениеКонецПериода Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОтборЭлемента = ЗначениеРеквизитаЭлементаВидаБюджета(ЭлементОтчета, "ДополнительныйОтбор", КэшРеквизитов).Получить();
		УбратьИзОтбораОпределенныеИзмерения(ОтобраннаяСтрока, ОтборЭлемента, СтруктураКэша);
		
		Если Не СравнитьОтборы(Источник.ДополнительныйОтбор, ОтборЭлемента) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НайтиИсточник(СтруктураКэша, Источники, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент)
	
	Для Каждого Источник из Источники Цикл
		Если СравнитьИсточники(СтруктураКэша, Источник, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент) Тогда
			Возврат Источник;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьИсточникиПоВидуЭлемента(Источники, СтруктураКэша, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования)
	
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	Для Каждого ОтобраннаяСтрока из ОтобранныеСтроки Цикл
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			Если КорневойЭлемент = Неопределено Тогда
				КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				Если КорневойЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
			Если КорневойЭлемент = Неопределено Тогда
				КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				Если КорневойЭлемент <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ИсточникДокумент = Ложь;
		
		Если (РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
				ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета)
			И ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			
			Родитель = ОтобраннаяСтрока.Родитель;
			Если Не ЗначениеЗаполнено(Родитель) 
				ИЛИ Не Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
				ИсточникДокумент = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если (РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
				ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета)
			И ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			
			ИсточникДокумент = Истина;
			
		КонецЕсли;
		
		Если РежимФормирования <> Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
			Родитель = ОтобраннаяСтрока.Родитель;
			Если ЗначениеЗаполнено(Родитель) 
				И Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
				// Механизмы заполнения не должны участвовать в источниках.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НайденныйИсточник = НайтиИсточник(СтруктураКэша, Источники, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент);
		Если НайденныйИсточник = Неопределено Тогда
			ДобавитьИсточник(СтруктураКэша, Источники, ОтобраннаяСтрока, СтруктураКолонок, ИсточникДокумент);
		Иначе
			ДополнитьИсточник(СтруктураКэша, НайденныйИсточник, ОтобраннаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание источников вида бюджета в виде массива
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидБюджета - вид бюджета, для которого следует получить описание источников
//  СтруктураКолонок  - Массив - структура колонок таблицы ввода
//  РежимФормирования  - ПеречислениеСсылка.РежимыФормированияБюджетныхОтчетов - назначение источников (документ, отчет, заполнение и пр.)
//
// Возвращаемое значение:
//   Массив   - описание источников в виде массива
//
Функция ПолучитьОписаниеИсточниковДанных(ВидБюджета, СтруктураКолонок, РежимФормирования) Экспорт
	
	Источники = Новый Массив;
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);

	СтруктураКэша = Новый Структура;
	СтруктураКэша.Вставить("КэшДопРеквизитов", КэшРеквизитов);
	СтруктураКэша.Вставить("КэшРеквизитов", КэшРеквизитовЭлементовВидаБюджета(ВидБюджета));

	ДеревоЭлементовБюджета = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, СтруктураКэша, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, СтруктураКэша, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, СтруктураКэша, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, СтруктураКэша, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, СтруктураКэша, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение;
	ЗаполнитьИсточникиПоВидуЭлемента(Источники, СтруктураКэша, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ТаблицаПроверкиХранимыхПравил = Новый ТаблицаЗначений;
	ТаблицаПроверкиХранимыхПравил.Колонки.Добавить("СтатьяБюджета", Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов"));
	ТаблицаПроверкиХранимыхПравил.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Для Каждого Источник из Источники Цикл
		
		Источник.Вставить("ПредполагаетФактическиеДанные", ПоИсточникуПредположительноНужныФактическиеДанные(Источник,
																					Справочники.Сценарии.ФактическиеДанные));
		Источник.Вставить("ПредполагаетИсполнениеБюджета", ПоИсточникуПредположительноНужныФактическиеДанные(Источник,
																					Справочники.Сценарии.ИсполнениеБюджета));
		
		Если Источник.ТипИсточника <> "Обороты" Тогда
			Продолжить;
		КонецЕсли;
		
		Источник.Вставить("ЕстьЦелевыеПоказатели", Ложь);
		
		Если Источник.ПредполагаетФактическиеДанные
			ИЛИ Источник.ПредполагаетИсполнениеБюджета Тогда
			
			Для Каждого Объект из Источник.Объекты Цикл
				
				НоваяСтрока = ТаблицаПроверкиХранимыхПравил.Добавить();
				НоваяСтрока.СтатьяБюджета = Объект;
				НоваяСтрока.Идентификатор = Источник.Идентификатор;
				
				Если ТипЗнч(Объект) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
					Источник.Вставить("ЕстьЦелевыеПоказатели", Истина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.СтатьяБюджета,
	|	Таблица.Идентификатор
	|ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.Идентификатор,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил КАК ЕстьХранимыеПравила,
	|	НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил КАК ЕстьОнЛайновыеПравила
	|ПОМЕСТИТЬ ТаблицаСФлагами
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|		ПО ТаблицаПроверки.СтатьяБюджета = СтатьиБюджетов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ПО ТаблицаПроверки.СтатьяБюджета = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
	|ГДЕ
	|	НЕ СтатьиБюджетов.Ссылка ЕСТЬ NULL 
	|	И НЕ ПравилаПолученияФактаПоСтатьямБюджетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСФлагами.Идентификатор,
	|	МАКСИМУМ(ТаблицаСФлагами.ЕстьХранимыеПравила) КАК ЕстьХранимыеПравила,
	|	МАКСИМУМ(ТаблицаСФлагами.ЕстьОнЛайновыеПравила) КАК ЕстьОнЛайновыеПравила
	|ИЗ
	|	ТаблицаСФлагами КАК ТаблицаСФлагами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСФлагами.Идентификатор");
	
	Запрос.УстановитьПараметр("ТаблицаПроверки", ТаблицаПроверкиХранимыхПравил);
	
	ФлагиХраненияПравил = Запрос.Выполнить().Выгрузить();
	Для Каждого Источник из Источники Цикл
		Если Не Источник.ПредполагаетФактическиеДанные
			И Не Источник.ПредполагаетИсполнениеБюджета Тогда
			Источник.Вставить("ЕстьХранимыеПравила", Ложь);
			Источник.Вставить("ЕстьОнЛайновыеПравила", Ложь);
			Продолжить;
		КонецЕсли;
		СтрокаФлагов = ФлагиХраненияПравил.Найти(Источник.Идентификатор, "Идентификатор");
		Если СтрокаФлагов = Неопределено Тогда
			Источник.Вставить("ЕстьХранимыеПравила", Ложь);
			Источник.Вставить("ЕстьОнЛайновыеПравила", Истина);
		Иначе
			Источник.Вставить("ЕстьХранимыеПравила", СтрокаФлагов.ЕстьХранимыеПравила);
			Источник.Вставить("ЕстьОнЛайновыеПравила", СтрокаФлагов.ЕстьОнЛайновыеПравила);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Источники;
	
КонецФункции

#КонецОбласти

#Область ПолучениеИсточникПериодовГруппировок

Функция ВыражениеПравилаПериодаГруппировки(ИмяПоля, ЭлементОтчета, СтруктураКолонок, КэшРеквизитов)
	
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонок.Периодичности);
	ИмяМинимальнаяПериодичность = ?(МинимальнаяПериодичность = Неопределено, "", ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность));
	
	ДопРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	Формула = ИмяПоля + "Группировки";
	Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																ЭлементОтчета, 
																ДопРеквизиты[Формула],
																КэшРеквизитов);
	
	Формула = СтрЗаменить(НРег(Формула), НРег("[Начало периода данных]"), "&НачалоПериода");
	Формула = СтрЗаменить(Формула, НРег("[Конец периода данных]"), "&КонецПериода");
	Формула = СтрЗаменить(Формула, НРег("[Граница факт.данных]"), "&ГраницаФактДанных");
	Формула = СтрЗаменить(Формула, НРег("[Период группировки]"), "ЛеваяТаблицаПериодов.Период" + ИмяМинимальнаяПериодичность);
	
	//для сопоставимости формул удалим вспомогательные пользовательские символы
	Формула = СтрЗаменить(Формула, " ", "");
	Формула = СтрЗаменить(Формула, Символы.ПС, "");
	Формула = СтрЗаменить(Формула, Символы.Таб, "");
	
	Возврат Формула;
	
КонецФункции

Функция СравнитьПравилаПериодаГруппировок(КэшРеквизитов, Источник, ОтобраннаяСтрока, СтруктураКолонок)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	ВыражениеНачалоПериодаГруппировки = ВыражениеПравилаПериодаГруппировки(
																"НачалоПериода",
																ЭлементОтчета, 
																СтруктураКолонок, 
																КэшРеквизитов);
	
	Если ВыражениеНачалоПериодаГруппировки <> Источник.ВыражениеНачалоПериодаГруппировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыражениеКонецПериодаГруппировки = ВыражениеПравилаПериодаГруппировки(
																"КонецПериода",
																ЭлементОтчета, 
																СтруктураКолонок, 
																КэшРеквизитов);
	
	Если ВыражениеКонецПериодаГруппировки <> Источник.ВыражениеКонецПериодаГруппировки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок)
	
	ЭлементОтчета = ОтобраннаяСтрока.ЭлементОтчета;
	
	СтруктураИсточника = Новый Структура;
	
	СтруктураИсточника.Вставить("ВыражениеНачалоПериодаГруппировки", ВыражениеПравилаПериодаГруппировки(
																		"НачалоПериода",
																		ЭлементОтчета, 
																		СтруктураКолонок, 
																		КэшРеквизитов));
	
	СтруктураИсточника.Вставить("ВыражениеКонецПериодаГруппировки", ВыражениеПравилаПериодаГруппировки(
																		"КонецПериода",
																		ЭлементОтчета, 
																		СтруктураКолонок, 
																		КэшРеквизитов));
																	
	СтруктураИсточника.Вставить("Идентификатор", "ИД_" + Источники.Количество());
	СтруктураИсточника.Вставить("СписокЭлементов", Новый Массив);
	СтруктураИсточника.СписокЭлементов.Добавить(ЭлементОтчета);
	
	Источники.Добавить(СтруктураИсточника);
	
КонецПроцедуры

Функция НайтиПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок)
	
	Для Каждого Источник из Источники Цикл
		Если СравнитьПравилаПериодаГруппировок(КэшРеквизитов, Источник, ОтобраннаяСтрока, СтруктураКолонок) Тогда
			Возврат Источник;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования = Неопределено)
	
	ОтобранныеСтроки = ДеревоЭлементовБюджета.Строки.НайтиСтроки(Новый Структура("ВидЭлемента", ВидЭлемента), Истина);
	Для Каждого ОтобраннаяСтрока из ОтобранныеСтроки Цикл
		
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КорневойЭлемент = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(ОтобраннаяСтрока, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов);
			Если КорневойЭлемент <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныйИсточник = НайтиПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок);
		Если НайденныйИсточник = Неопределено Тогда
			ДобавитьПравилоПериодаГруппировки(КэшРеквизитов, Источники, ОтобраннаяСтрока, СтруктураКолонок);
		Иначе
			НайденныйИсточник.СписокЭлементов.Добавить(ОтобраннаяСтрока.ЭлементОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает описание источников вида бюджета в виде массива
//
// Параметры:
//  ВидБюджета  - СправочникСсылка.ВидБюджета - вид бюджета, для которого следует получить описание источников
//  ДляЭкземпляраБюджета  - Булево - истина, если процедура выполняется для экземпляра бюджета
//
// Возвращаемое значение:
//   Массив   - описание источников в виде массива
//
Функция ИсточникиПериодовГруппировок(ВидБюджета, СтруктураКолонок, РежимФормирования) Экспорт
	
	Источники = Новый Массив;
	КэшРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ДеревоЭлементовБюджета = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Истина);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов;
	ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов;
	ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов;
	ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента, РежимФормирования);
	
	ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов;
	ЗаполнитьПериодыГруппировкиПоВидуЭлемента(Источники, КэшРеквизитов, ДеревоЭлементовБюджета, СтруктураКолонок, ВидЭлемента);
	
	Возврат Источники;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСтруктурыЯчеекБюджетногоОтчета

Функция ЗаполнитьТаблицуИсточниковИзмеренийНФП(СтруктураЯчеек, МассивКолонокИзмерений, ИсточникиДанных, ВидБюджета)
	
	СписокНФП = СтруктураЯчеек.НайтиСтроки(Новый Структура("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель));
	
	Если Не СписокНФП.Количество() Тогда
		
		Возврат Новый Структура("ТаблицаЗаполненияИзмеренийНФП, ТаблицаОтбораИзмеренийНФП");
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Значение
	|ПОМЕСТИТЬ НФП
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента КАК ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента
	|ГДЕ
	|	ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Ссылка.Владелец = &Владелец
	|	И ЭлементыФинансовыхОтчетовРеквизитыВидаЭлемента.Реквизит = &Реквизит
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НефинансовыеПоказателиБюджетов.Ссылка,
	|	НефинансовыеПоказателиБюджетов.ВидАналитики1,
	|	НефинансовыеПоказателиБюджетов.ВидАналитики2,
	|	НефинансовыеПоказателиБюджетов.ВидАналитики3,
	|	НефинансовыеПоказателиБюджетов.ВидАналитики4,
	|	НефинансовыеПоказателиБюджетов.ВидАналитики5,
	|	НефинансовыеПоказателиБюджетов.ВидАналитики6,
	|	НефинансовыеПоказателиБюджетов.ПоОрганизациям,
	|	НефинансовыеПоказателиБюджетов.ПоПодразделениям,
	|	НефинансовыеПоказателиБюджетов.ПоСценариям
	|ИЗ
	|	НФП КАК НФП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НефинансовыеПоказателиБюджетов КАК НефинансовыеПоказателиБюджетов
	|		ПО НФП.Значение = НефинансовыеПоказателиБюджетов.Ссылка");
	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	Запрос.УстановитьПараметр("Реквизит", ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.НефинансовыйПоказатель);
	КэшРеквизитов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаполненияИзмеренийНФП = Новый ТаблицаЗначений;
	ТаблицаЗаполненияИзмеренийНФП.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаЗаполненияИзмеренийНФП.Колонки.Добавить("ИмяИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаполненияИзмеренийНФП.Колонки.Добавить("АдресИсточникаЗаполненияЗначений", Новый ОписаниеТипов("Строка"));
	СтрокаКолонок = "НефинансовыйПоказатель, ИмяИзмерения, АдресИсточникаЗаполненияЗначений";
	СтруктураПоискаЗаполнения = Новый Структура(СтрокаКолонок);
	ТаблицаЗаполненияИзмеренийНФП.Индексы.Добавить(СтрокаКолонок);
	
	ТаблицаОтбораИзмеренийНФП = Новый ТаблицаЗначений;
	ТаблицаОтбораИзмеренийНФП.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаОтбораИзмеренийНФП.Колонки.Добавить("ИмяИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаОтбораИзмеренийНФП.Колонки.Добавить("АдресОтбораЗаполненияЗначений", Новый ОписаниеТипов("Строка"));
	СтрокаКолонок = "НефинансовыйПоказатель, ИмяИзмерения, АдресОтбораЗаполненияЗначений";
	СтруктураПоискаОтбора = Новый Структура(СтрокаКолонок);
	ТаблицаОтбораИзмеренийНФП.Индексы.Добавить(СтрокаКолонок);
	
	МассивИсточников = Новый Массив;
	Для Каждого Источник из ИсточникиДанных Цикл
		МассивИсточников.Добавить(Источник.Идентификатор);
	КонецЦикла;
	
	Для Каждого Ячейка из СписокНФП Цикл
		РеквизитыНФП = КэшРеквизитов.Найти(Ячейка.НефинансовыйПоказатель, "Ссылка");
		Для Каждого Измерение из МассивКолонокИзмерений Цикл
			НужноДополнение = Истина;
			Если Измерение = "Организация" Тогда
				Если РеквизитыНФП.ПоОрганизациям Тогда
					НужноДополнение = Ложь;
				КонецЕсли;
			ИначеЕсли Измерение = "Подразделение" Тогда
				Если РеквизитыНФП.ПоПодразделениям Тогда
					НужноДополнение = Ложь;
				КонецЕсли;
			ИначеЕсли Измерение = "Сценарий" Тогда
				Если РеквизитыНФП.ПоСценариям Тогда
					НужноДополнение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Для Сч = 1 по 6 Цикл
				ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыНФП["ВидАналитики" + Сч]);
				Если ИмяПоля = Измерение Тогда
					НужноДополнение = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ИсточникиЗначений = Ячейка["Источник" + Измерение];
			Если ЗначениеЗаполнено(ИсточникиЗначений) Тогда
				Если НужноДополнение Тогда
					Для Каждого ИсточникЗначения из ИсточникиЗначений Цикл
						СтруктураПоискаЗаполнения.НефинансовыйПоказатель = Ячейка.НефинансовыйПоказатель;
						СтруктураПоискаЗаполнения.ИмяИзмерения = Измерение;
						СтруктураПоискаЗаполнения.АдресИсточникаЗаполненияЗначений = ИсточникЗначения.Источник;
						Если Не ТаблицаЗаполненияИзмеренийНФП.НайтиСтроки(СтруктураПоискаЗаполнения).Количество() Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаЗаполненияИзмеренийНФП.Добавить(), СтруктураПоискаЗаполнения);
						КонецЕсли;
					КонецЦикла;
				Иначе
					СписокИсточников = Новый Массив;
					Для Каждого ИсточникЗначения из ИсточникиЗначений Цикл
						СписокИсточников.Добавить(ИсточникЗначения.Источник);
					КонецЦикла;
					Если Не ОбщегоНазначенияКлиентСервер.СпискиЗначенийИдентичны(МассивИсточников, СписокИсточников) Тогда
						Для Каждого ИсточникЗначения из ИсточникиЗначений Цикл
							СтруктураПоискаОтбора.НефинансовыйПоказатель = Ячейка.НефинансовыйПоказатель;
							СтруктураПоискаОтбора.ИмяИзмерения = Измерение;
							СтруктураПоискаОтбора.АдресОтбораЗаполненияЗначений = ИсточникЗначения.Источник;
							Если Не ТаблицаОтбораИзмеренийНФП.НайтиСтроки(СтруктураПоискаОтбора).Количество() Тогда
								ЗаполнитьЗначенияСвойств(ТаблицаОтбораИзмеренийНФП.Добавить(), СтруктураПоискаОтбора);
							КонецЕсли;
						КонецЦикла;
					Иначе
						СтруктураПоискаОтбора.НефинансовыйПоказатель = Ячейка.НефинансовыйПоказатель;
						СтруктураПоискаОтбора.ИмяИзмерения = Измерение;
						СтруктураПоискаОтбора.АдресОтбораЗаполненияЗначений = "";
						Если Не ТаблицаОтбораИзмеренийНФП.НайтиСтроки(СтруктураПоискаОтбора).Количество() Тогда
							ЗаполнитьЗначенияСвойств(ТаблицаОтбораИзмеренийНФП.Добавить(), СтруктураПоискаОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	КолонкиОбработки = "ИмяИзмерения, НефинансовыйПоказатель";
	Копия = ТаблицаОтбораИзмеренийНФП.Скопировать(, КолонкиОбработки);
	Копия.Свернуть(КолонкиОбработки);
	ТаблицаОтбораИзмеренийНФП.Индексы.Добавить(КолонкиОбработки);
	СтруктураПоиска = Новый Структура(КолонкиОбработки);
	
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаОтбора из Копия Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОтбора);
		НайденныеСтроки = ТаблицаОтбораИзмеренийНФП.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			Если НайденнаяСтрока.АдресОтбораЗаполненияЗначений = "" Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНаУдаление, НайденныеСтроки);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы из МассивНаУдаление Цикл
		ТаблицаОтбораИзмеренийНФП.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаЗаполненияИзмеренийНФП, ТаблицаОтбораИзмеренийНФП", ТаблицаЗаполненияИзмеренийНФП, ТаблицаОтбораИзмеренийНФП);
	
КонецФункции

Функция ПолучитьТаблицыВидаБюджета(ВидБюджета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭлементыФинансовыхОтчетов.Ссылка,
	|	ЭлементыФинансовыхОтчетов.ВидЭлемента
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
	|ГДЕ
	|	ЭлементыФинансовыхОтчетов.Владелец = &Владелец
	|	И ЭлементыФинансовыхОтчетов.ВидЭлемента В(&ВидЭлемента)"
	);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
	
	Запрос.УстановитьПараметр("Владелец", ВидБюджета);
	Запрос.УстановитьПараметр("ВидЭлемента", Список);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьКонечныеЭлементыДерева(Элемент, Все = Ложь, Результат = Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Все Тогда
			Результат = Новый ДеревоЗначений;
			Результат.Колонки.Добавить("Ссылка");
			Результат.Колонки.Добавить("ВидЭлемента");
		Иначе
			Результат = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из Элемент.Строки Цикл
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст Тогда
			Продолжить;
		КонецЕсли;
		Если Все Тогда
			НоваяСтрока = Результат.Строки.Добавить();
			НоваяСтрока.Ссылка = СтрокаДерева.ЭлементОтчета;
			НоваяСтрока.ВидЭлемента = СтрокаДерева.ВидЭлемента;
			ПолучитьКонечныеЭлементыДерева(СтрокаДерева, Все, НоваяСтрока);
		Иначе
			Если Не СтрокаДерева.Строки.Количество() Тогда
				Результат.Добавить(СтрокаДерева);
			КонецЕсли;
			ПолучитьКонечныеЭлементыДерева(СтрокаДерева, Все, Результат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКонечныеЭлементы(ВидБюджета, ЭлементРодитель)
	
	ДеревоЭлементов = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	
	Если ЭлементРодитель = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка() Тогда
		Строки = ПолучитьКонечныеЭлементыДерева(ДеревоЭлементов, Истина);
		Колонки = Новый ДеревоЗначений;
		Колонки.Колонки.Добавить("Ссылка");
		Колонки.Строки.Добавить().Ссылка = ЭлементРодитель;
	Иначе
		Шапка = ДеревоЭлементов.Строки.Найти(ЭлементРодитель, "ЭлементОтчета");
		Элемент = Шапка.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Строки, "ВидЭлемента");
		Строки = ПолучитьКонечныеЭлементыДерева(Элемент, Истина);
		Элемент = Шапка.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки, "ВидЭлемента");
		Колонки = ПолучитьКонечныеЭлементыДерева(Элемент, Истина);
	КонецЕсли;
	
	Возврат Новый Структура("Строки, Колонки", Строки, Колонки);
	
КонецФункции

Процедура ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(Параметры, НоваяСтрока, Знач Элемент)
	
	РежимФормирования		= Параметры.РежимФормирования;
	ИсточникиДанных			= Параметры.ИсточникиДанных;
	КэшИсточникиЗначений	= Параметры.ИсточникиЗначений;
	КэшРеквизитов 			= Параметры.КэшРеквизитов;
	КэшДопРеквизитов 		= Параметры.КэшДопРеквизитов;
	КэшАналитикСтатей 		= Параметры.КэшАналитикСтатей;
	
	Пока ЗначениеЗаполнено(Элемент) Цикл
		ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
		Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			НоваяСтрока.ФлагСтатьяБюджетов = "заполнить";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			НоваяСтрока.ФлагПоказательБюджетов = "заполнить";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			НоваяСтрока.СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СтатьяБюджетов", КэшДопРеквизитов);
			НоваяСтрока.ФлагСтатьяБюджетов = "отобрать";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			НоваяСтрока.ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ПоказательБюджетов", КэшДопРеквизитов);
			НоваяСтрока.ФлагПоказательБюджетов = "отобрать";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			НоваяСтрока.НефинансовыйПоказатель = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "НефинансовыйПоказатель", КэшДопРеквизитов);
			НоваяСтрока.ФлагНефинансовыйПоказатель = "отобрать";
		ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипИзмерения", КэшДопРеквизитов);
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Организация", КэшДопРеквизитов);
				НоваяСтрока.Организация = Значение;
				НоваяСтрока.ФлагОрганизация = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Подразделение", КэшДопРеквизитов);
				НоваяСтрока.Подразделение = Значение;
				НоваяСтрока.ФлагПодразделение = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Сценарий", КэшДопРеквизитов);
				НоваяСтрока.Сценарий = Значение;
				НоваяСтрока.ФлагСценарий = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				
				Значение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Валюта", КэшДопРеквизитов);
				НоваяСтрока.Валюта = Значение;
				НоваяСтрока.ФлагВалюта = "отобрать";
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				
				ЭтоАналитикаПрочее = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ЭтоАналитикаПрочее", КэшДопРеквизитов);
				ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизитов);
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "РазрешитьРедактирование", КэшДопРеквизитов);
				ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				Значение = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ЗначениеАналитики", КэшРеквизитов);
				
				Если ЭтоАналитикаПрочее Тогда
					НоваяСтрока[ИмяАналитики] = Неопределено;
					Если РазрешитьРедактирование = Истина Тогда
						
						Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение
							ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ Тогда
							
							НоваяСтрока["Флаг" + ИмяАналитики] = "документ";
							МассивИсточников = Новый Массив;
							
							Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
								ИсточникиЗначений = КэшИсточникиЗначений.НайтиСтроки(
														Новый Структура("ЭлементОтчета, ДобавляемыеЗначенияДокумента", Элемент, Ложь));
							Иначе
								ИсточникиЗначений = КэшИсточникиЗначений.НайтиСтроки(
														Новый Структура("ЭлементОтчета, ДобавляемыеЗначенияДокумента", Элемент, Истина));
							КонецЕсли;
							
							Для Каждого ИсточникЗначения из ИсточникиЗначений Цикл
								Для Каждого ИсточникДанных из ИсточникиДанных Цикл
									Если ИсточникДанных.СписокЭлементов.Найти(ИсточникЗначения.Источник) <> Неопределено Тогда
										МассивИсточников.Добавить(Новый Структура("Источник, Объект", ИсточникДанных.Идентификатор, ИсточникЗначения.Объект));
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							
							НоваяСтрока["Источник" + ИмяАналитики] = МассивИсточников;
							
						Иначе
							
							НоваяСтрока["Флаг" + ИмяАналитики] = "прочие";
							
						КонецЕсли;
					Иначе
						
						НоваяСтрока["Флаг" + ИмяАналитики] = "прочие";
						
					КонецЕсли;
				Иначе
					НоваяСтрока[ИмяАналитики] = Значение;
					НоваяСтрока["Флаг" + ИмяАналитики] = "отобрать";
				КонецЕсли;
				НоваяСтрока["Родитель" + ИмяАналитики] = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "Родитель", КэшРеквизитов);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
				
				ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизитов);
				ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				НоваяСтрока["Флаг" + ИмяАналитики] = "заполнить";
				
				МассивИсточников = Новый Массив;
				ИсточникиЗначений = КэшИсточникиЗначений.НайтиСтроки(Новый Структура("ЭлементОтчета", Элемент));
				
				Для Каждого ИсточникЗначения из ИсточникиЗначений Цикл
					Для Каждого ИсточникДанных из ИсточникиДанных Цикл
						Если ИсточникДанных.СписокЭлементов.Найти(ИсточникЗначения.Источник) <> Неопределено Тогда
							МассивИсточников.Добавить(Новый Структура("Источник, Объект", ИсточникДанных.Идентификатор, ИсточникЗначения.Объект));
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				НоваяСтрока["Источник" + ИмяАналитики] = МассивИсточников;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				
				ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ИмяИзмерения", КэшДопРеквизитов);
				НоваяСтрока["Флаг" + ИмяИзмерения] = "заполнить";
				
				МассивИсточников = Новый Массив;
				ИсточникиЗначений = КэшИсточникиЗначений.НайтиСтроки(Новый Структура("ЭлементОтчета", Элемент));
				
				Для Каждого ИсточникЗначения из ИсточникиЗначений Цикл
					Для Каждого ИсточникДанных из ИсточникиДанных Цикл
						Если ИсточникДанных.СписокЭлементов.Найти(ИсточникЗначения.Источник) <> Неопределено Тогда
							МассивИсточников.Добавить(Новый Структура("Источник, Объект", ИсточникДанных.Идентификатор, ИсточникЗначения.Объект));
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				НоваяСтрока["Источник" + ИмяИзмерения] = МассивИсточников;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				
				Период = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Периодичность", КэшДопРеквизитов);
				ИмяПериод = ОбщегоНазначения.ИмяЗначенияПеречисления(Период);
				НоваяСтрока["ФлагПериод" + ИмяПериод] = "заполнить";
				
				ЗначениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ЗначениеПериода", КэшДопРеквизитов);
				Если ЗначениеПериода = Неопределено Тогда
					НоваяСтрока["ВыражениеПериода" + ИмяПериод] = -1;
				Иначе
					НоваяСтрока["ВыражениеПериода" + ИмяПериод] = ЗначениеПериода;
				КонецЕсли;

				УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
				НайденныйИндекс = УпорядоченныеПериодичности.Найти(Период);
				
				Для Сч = НайденныйИндекс + 1 По УпорядоченныеПериодичности.ВГраница() Цикл
					Период = УпорядоченныеПериодичности[Сч];
					ИмяПериода = "Период" + ?(ЗначениеЗаполнено(Период), ОбщегоНазначения.ИмяЗначенияПеречисления(Период), "");
					Если НоваяСтрока.Владелец().Колонки.Найти(ИмяПериода) <> Неопределено Тогда
						Если НоваяСтрока["Флаг" + ИмяПериода] <> "заполнить" Тогда
							НоваяСтрока["Флаг" + ИмяПериода] = "заполнить";
							НоваяСтрока["ВыражениеПериода" + ?(ЗначениеЗаполнено(Период), ОбщегоНазначения.ИмяЗначенияПеречисления(Период), "")] = -1;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		Элемент = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "Родитель", КэшРеквизитов);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруЯчеек(Параметры, Колонки)
	
	Для Каждого Колонка из Колонки.Строки Цикл
		ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, Параметры.ДеревоСтрок, Колонка.Ссылка);
		ЗаполнитьСтруктуруЯчеек(Параметры, Колонка);
	КонецЦикла;
	
КонецПроцедуры

Функция ВалютаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатей)
	
	ОбъектВалютногоУчета = Неопределено;
	Если ЗначениеЗаполнено(НоваяСтрока.ПоказательБюджетов) Тогда
		ОбъектВалютногоУчета = НоваяСтрока.ПоказательБюджетов;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда
		ОбъектВалютногоУчета = НоваяСтрока.СтатьяБюджетов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыВалютногоУчета = КэшРеквизитовСтатей[ОбъектВалютногоУчета];
	Если РеквизитыВалютногоУчета = Неопределено Тогда
	
		Реквизиты = Новый Структура("АналитикаЗаполнениеВалюты, УчитыватьПоВалюте, 
								|АналитикаВалюты, ВалютаОпределяетсяАналитикой", "АналитикаВалюты.ЗаполнениеВалюты");
		
		РеквизитыВалютногоУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектВалютногоУчета, Реквизиты);
		
		КэшРеквизитовСтатей.Вставить(ОбъектВалютногоУчета, РеквизитыВалютногоУчета);
		
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.УчитыватьПоВалюте Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.ВалютаОпределяетсяАналитикой Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыВалютногоУчета.АналитикаВалюты);
	Если НоваяСтрока.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено Тогда
		ЗначениеПоля = НоваяСтрока[ИмяПоля];
		Если ЗначениеЗаполнено(ЗначениеПоля)
			И ТипЗнч(ЗначениеПоля) <> Тип("Строка") Тогда
			Возврат НоваяСтрока[ИмяПоля][РеквизитыВалютногоУчета.АналитикаЗаполнениеВалюты];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

Функция ЕдиницаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатей)
	
	ОбъектУчета = Неопределено;
	Если ЗначениеЗаполнено(НоваяСтрока.ПоказательБюджетов) Тогда
		ОбъектУчета = НоваяСтрока.ПоказательБюджетов;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда
		ОбъектУчета = НоваяСтрока.СтатьяБюджетов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыУчета = КэшРеквизитовСтатей[ОбъектУчета];
	Если РеквизитыУчета = Неопределено Тогда
	
		Реквизиты = Новый Структура("АналитикаЗаполнениеЕдиницы, УчитыватьПоКоличеству, 
									|АналитикаЕдиницыИзмерения, ЕдиницаИзмеренияОпределяетсяАналитикой,
									|ЕдиницаИзмерения", 
									"АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения");
		
		РеквизитыУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета, Реквизиты);
		
		КэшРеквизитовСтатей.Вставить(ОбъектУчета, РеквизитыУчета);
		
	КонецЕсли;
	
	Если Не РеквизитыУчета.УчитыватьПоКоличеству Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыУчета.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Возврат РеквизитыУчета.ЕдиницаИзмерения;
	КонецЕсли;
	
	ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыУчета.АналитикаЕдиницыИзмерения);
	Если НоваяСтрока.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено Тогда
		ЗначениеПоля = НоваяСтрока[ИмяПоля];
		Если ЗначениеЗаполнено(ЗначениеПоля)
			И ТипЗнч(ЗначениеПоля) <> Тип("Строка") Тогда
			Возврат НоваяСтрока[ИмяПоля][РеквизитыУчета.АналитикаЗаполнениеЕдиницы];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

Процедура ЗаполнитьПризнакиСуммаКоличествоФормулы(ВидБюджета, СтруктураЯчеек)
	
	СКД = Справочники.ВидыБюджетов.ПолучитьМакет("ВсеПодчиненныеЭлементы");
	Компоновщик = ФинансоваяОтчетностьСервер.КомпоновщикСхемы(СКД);
	ФинансоваяОтчетностьСервер.НовыйОтбор(Компоновщик.Настройки.Отбор, "ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Компоновщик, "ВидБюджета", ВидБюджета);
	Результат = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКД, Компоновщик);
	
	Запрос = Новый Запрос();
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.Текст = 
						"ВЫБРАТЬ
						|	ТаблицаРодительПодчиненный.Родитель,
						|	ТаблицаРодительПодчиненный.Ссылка
						|ПОМЕСТИТЬ ПодчиненныеЭлементы
						|ИЗ
						|	&ПодчиненныеЭлементы КАК ТаблицаРодительПодчиненный
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ВЫРАЗИТЬ(СтруктураЯчеек.Строка КАК Справочник.ЭлементыФинансовыхОтчетов) КАК Строка,
						|	ВЫРАЗИТЬ(СтруктураЯчеек.Колонка КАК Справочник.ЭлементыФинансовыхОтчетов) КАК Колонка,
						|	СтруктураЯчеек.ВидЭлемента КАК ВидЭлемента,
						|	СтруктураЯчеек.ФлагСумма,
						|	СтруктураЯчеек.ФлагКоличество,
						|	СтруктураЯчеек.СложнаяТаблица
						|ПОМЕСТИТЬ СтруктураЯчеек
						|ИЗ
						|	&СтруктураЯчеек КАК СтруктураЯчеек
						|
						|ИНДЕКСИРОВАТЬ ПО
						|	Строка,
						|	Колонка
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	ПодчиненныеЭлементы.Ссылка КАК ПодчиненныйЭлемент,
						|	ТаблицаОсновныхЭлементов.СложнаяТаблица
						|ПОМЕСТИТЬ ТаблицаЭлементовСПодчиненнымиПоСтрокам
						|ИЗ
						|	СтруктураЯчеек КАК ТаблицаОсновныхЭлементов
						|		ЛЕВОЕ СОЕДИНЕНИЕ ПодчиненныеЭлементы КАК ПодчиненныеЭлементы
						|		ПО ТаблицаОсновныхЭлементов.Строка = ПодчиненныеЭлементы.Родитель
						|ГДЕ
						|	ТаблицаОсновныхЭлементов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
						|
						|СГРУППИРОВАТЬ ПО
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ПодчиненныеЭлементы.Ссылка,
						|	ТаблицаОсновныхЭлементов.СложнаяТаблица
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	ПодчиненныеЭлементы.Ссылка КАК ПодчиненныйЭлемент,
						|	ТаблицаОсновныхЭлементов.СложнаяТаблица
						|ПОМЕСТИТЬ ТаблицаЭлементовСПодчиненнымиПоКолонкам
						|ИЗ
						|	СтруктураЯчеек КАК ТаблицаОсновныхЭлементов
						|		ЛЕВОЕ СОЕДИНЕНИЕ ПодчиненныеЭлементы КАК ПодчиненныеЭлементы
						|		ПО ТаблицаОсновныхЭлементов.Колонка = ПодчиненныеЭлементы.Родитель
						|ГДЕ
						|	ТаблицаОсновныхЭлементов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.Группа)
						|
						|СГРУППИРОВАТЬ ПО
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ПодчиненныеЭлементы.Ссылка,
						|	ТаблицаОсновныхЭлементов.СложнаяТаблица
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	МАКСИМУМ(ПодчиненныеЭлементыВТаблице.ФлагСумма) КАК ФлагСумма,
						|	МАКСИМУМ(ПодчиненныеЭлементыВТаблице.ФлагКоличество) КАК ФлагКоличество,
						|	ТаблицаОсновныхЭлементов.СложнаяТаблица
						|ПОМЕСТИТЬ ТаблицаОсновныхЭлементов
						|ИЗ
						|	ТаблицаЭлементовСПодчиненнымиПоСтрокам КАК ТаблицаОсновныхЭлементов
						|		ЛЕВОЕ СОЕДИНЕНИЕ СтруктураЯчеек КАК ПодчиненныеЭлементыВТаблице
						|		ПО ТаблицаОсновныхЭлементов.Колонка = ПодчиненныеЭлементыВТаблице.Колонка
						|			И ТаблицаОсновныхЭлементов.ПодчиненныйЭлемент = ПодчиненныеЭлементыВТаблице.Строка
						|
						|СГРУППИРОВАТЬ ПО
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ТаблицаОсновныхЭлементов.СложнаяТаблица
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	МАКСИМУМ(ПодчиненныеЭлементыВТаблице.ФлагСумма),
						|	МАКСИМУМ(ПодчиненныеЭлементыВТаблице.ФлагКоличество),
						|	ТаблицаОсновныхЭлементов.СложнаяТаблица
						|ИЗ
						|	ТаблицаЭлементовСПодчиненнымиПоКолонкам КАК ТаблицаОсновныхЭлементов
						|		ЛЕВОЕ СОЕДИНЕНИЕ СтруктураЯчеек КАК ПодчиненныеЭлементыВТаблице
						|		ПО ТаблицаОсновныхЭлементов.Строка = ПодчиненныеЭлементыВТаблице.Строка
						|			И ТаблицаОсновныхЭлементов.ПодчиненныйЭлемент = ПодчиненныеЭлементыВТаблице.Колонка
						|
						|СГРУППИРОВАТЬ ПО
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ТаблицаОсновныхЭлементов.СложнаяТаблица
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ТаблицаОсновныхЭлементов.Колонка,
						|	МАКСИМУМ(ВЫБОР
						|			КОГДА ТаблицаОсновныхЭлементов.СложнаяТаблица
						|				ТОГДА ИСТИНА
						|			ИНАЧЕ ТаблицаОсновныхЭлементов.ФлагСумма
						|		КОНЕЦ) КАК ФлагСумма,
						|	МАКСИМУМ(ВЫБОР
						|			КОГДА ТаблицаОсновныхЭлементов.СложнаяТаблица
						|				ТОГДА ЛОЖЬ
						|			ИНАЧЕ ТаблицаОсновныхЭлементов.ФлагКоличество
						|		КОНЕЦ) КАК ФлагКоличество
						|ПОМЕСТИТЬ ФлагиГрупп
						|ИЗ
						|	ТаблицаОсновныхЭлементов КАК ТаблицаОсновныхЭлементов
						|
						|СГРУППИРОВАТЬ ПО
						|	ТаблицаОсновныхЭлементов.Строка,
						|	ТаблицаОсновныхЭлементов.Колонка
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	СтруктураЯчеек.Строка,
						|	СтруктураЯчеек.Колонка,
						|	ЕСТЬNULL(РодителиСтроки.Родитель, ЗНАЧЕНИЕ(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка)) КАК СтрокаРодитель,
						|	ЕСТЬNULL(РодителиКолонки.Родитель, ЗНАЧЕНИЕ(Справочник.ЭлементыФинансовыхОтчетов.ПустаяСсылка)) КАК КолонкаРодитель
						|ПОМЕСТИТЬ ТолькоФормулы
						|ИЗ
						|	СтруктураЯчеек КАК СтруктураЯчеек
						|		ЛЕВОЕ СОЕДИНЕНИЕ ПодчиненныеЭлементы КАК РодителиСтроки
						|		ПО (РодителиСтроки.Ссылка = СтруктураЯчеек.Строка)
						|		ЛЕВОЕ СОЕДИНЕНИЕ ПодчиненныеЭлементы КАК РодителиКолонки
						|		ПО (РодителиКолонки.Ссылка = СтруктураЯчеек.Колонка)
						|ГДЕ
						|	СтруктураЯчеек.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ТолькоФормулы.Строка,
						|	ТолькоФормулы.Колонка,
						|	ФлагиГрупп.ФлагСумма КАК ФлагСумма,
						|	ФлагиГрупп.ФлагКоличество КАК ФлагКоличество
						|ПОМЕСТИТЬ ВсеФлаги
						|ИЗ
						|	ТолькоФормулы КАК ТолькоФормулы
						|		ЛЕВОЕ СОЕДИНЕНИЕ ФлагиГрупп КАК ФлагиГрупп
						|		ПО ТолькоФормулы.Колонка = ФлагиГрупп.Колонка
						|			И ТолькоФормулы.СтрокаРодитель = ФлагиГрупп.Строка
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ТолькоФормулы.Строка,
						|	ТолькоФормулы.Колонка,
						|	ФлагиГрупп.ФлагСумма,
						|	ФлагиГрупп.ФлагКоличество
						|ИЗ
						|	ТолькоФормулы КАК ТолькоФормулы
						|		ЛЕВОЕ СОЕДИНЕНИЕ ФлагиГрупп КАК ФлагиГрупп
						|		ПО ТолькоФормулы.Строка = ФлагиГрупп.Строка
						|			И ТолькоФормулы.КолонкаРодитель = ФлагиГрупп.Колонка
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ТолькоФормулы.Строка,
						|	ТолькоФормулы.Колонка,
						|	ФлагиГрупп.ФлагСумма,
						|	ФлагиГрупп.ФлагКоличество
						|ИЗ
						|	ТолькоФормулы КАК ТолькоФормулы
						|		ЛЕВОЕ СОЕДИНЕНИЕ ФлагиГрупп КАК ФлагиГрупп
						|		ПО ТолькоФормулы.СтрокаРодитель = ФлагиГрупп.Строка
						|			И ТолькоФормулы.КолонкаРодитель = ФлагиГрупп.Колонка
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ФлагиГрупп.Строка,
						|	ФлагиГрупп.Колонка,
						|	ФлагиГрупп.ФлагСумма,
						|	ФлагиГрупп.ФлагКоличество
						|ИЗ
						|	ФлагиГрупп КАК ФлагиГрупп
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ВсеФлаги.Строка,
						|	ВсеФлаги.Колонка,
						|	МАКСИМУМ(ВсеФлаги.ФлагСумма) КАК ФлагСумма,
						|	МАКСИМУМ(ВсеФлаги.ФлагКоличество) КАК ФлагКоличество
						|ИЗ
						|	ВсеФлаги КАК ВсеФлаги
						|
						|СГРУППИРОВАТЬ ПО
						|	ВсеФлаги.Строка,
						|	ВсеФлаги.Колонка";
	
	КолонкиСтруктурыЯчеек = "Строка, Колонка, ВидЭлемента, ФлагКоличество, ФлагСумма, СложнаяТаблица";
	ЧастьСтруктурыЯчеек = СтруктураЯчеек.Скопировать(Новый Структура("ОсновнойЭлемент", Истина), КолонкиСтруктурыЯчеек);
	Запрос.УстановитьПараметр("СтруктураЯчеек", ЧастьСтруктурыЯчеек);
	Запрос.УстановитьПараметр("ПодчиненныеЭлементы", Результат);
	
	СтруктураЯчеек.Индексы.Добавить("Строка, Колонка");
	РезультатЗапроса = Запрос.Выполнить();
	СтрокиКРасчету = РезультатЗапроса.Выбрать();
	
	Пока СтрокиКРасчету.Следующий() Цикл
		СтруктураПоиска = Новый Структура("Строка, Колонка", СтрокиКРасчету.Строка, СтрокиКРасчету.Колонка);
		НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокиКРасчету, "ФлагСумма, ФлагКоличество");
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, ДеревоСтрок, Колонка)
	
	СтруктураЯчеек					= Параметры.СтруктураЯчеек;
	ИсточникиДанных					= Параметры.ИсточникиДанных;
	ИсточникиПериодовГруппировок	= Параметры.ИсточникиПериодовГруппировок;
	Родитель						= Параметры.Родитель;
	ТаблицаНастроек					= Параметры.ТаблицаНастроек;
	ИсточникиЗначений				= Параметры.ИсточникиЗначений;
	
	КэшДопРеквизитов 				= Параметры.КэшДопРеквизитов;
	КэшРеквизитов 					= Параметры.КэшРеквизитов;
	КэшРеквизитовСтатейВалюты 		= Параметры.КэшРеквизитовСтатейВалюты;
	КэшРеквизитовСтатейЕдИзм 		= Параметры.КэшРеквизитовСтатейЕдИзм;
	
	ДобавленныеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева из ДеревоСтрок.Строки Цикл
		
		Строка = СтрокаДерева.Ссылка;
		ПодчиненныеСтроки = ЗаполнитьСтруктуруЯчеекРекурсивно(Параметры, СтрокаДерева, Колонка);
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
			Продолжить;
		КонецЕсли;
		
		//определение базового элемента ячейки
		Элемент = Неопределено;
		РассчитатьПоПодчиненным = 0;
		//0 - не рассчитывать
		//1 - сумма по измерению
		//2 - обработка групп
		
		СтрокаВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Строка, "ВидЭлемента", КэшРеквизитов);
		
		Если ЗначениеЗаполнено(Колонка) Тогда
			КолонкаВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Колонка, "ВидЭлемента", КэшРеквизитов);
		Иначе
			КолонкаВидЭлементаСравнения = Неопределено;
		КонецЕсли;
		
		Если СтрокаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			РассчитатьПоПодчиненным = 2;
		
		ИначеЕсли СтрокаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			РассчитатьПоПодчиненным = 2;
		
		ИначеЕсли Не ЗначениеЗаполнено(Родитель)
			ИЛИ ЗначениеРеквизитаЭлементаВидаБюджета(Родитель, "ВидЭлемента", КэшРеквизитов)
				= Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
			
			Элемент = Строка;
			Пока ЗначениеЗаполнено(Элемент) Цикл
				ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
				Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель 
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение
					Тогда
					Прервать;
				КонецЕсли;
				Элемент = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "Родитель", КэшРеквизитов);
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				РассчитатьПоПодчиненным = 1;
			КонецЕсли;
			
		ИначеЕсли ЗначениеРеквизитаЭлементаВидаБюджета(Родитель, "ВидЭлемента", КэшРеквизитов)
					= Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках Тогда
			
			Элемент = Колонка;
			Пока ЗначениеЗаполнено(Элемент) Цикл
				ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
				Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
					ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
					Прервать;
				КонецЕсли;
				Элемент = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "Родитель", КэшРеквизитов);
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Элемент) Тогда
				РассчитатьПоПодчиненным = 1;
			КонецЕсли;
			
		ИначеЕсли Родитель.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
			
			СтруктураПоиска = Новый Структура("Строка, Колонка, Родитель", Строка, Колонка, Родитель);
			НайденныеСтроки = ТаблицаНастроек.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() Тогда
				Элемент = НайденныеСтроки[0].Элемент;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Если Не РассчитатьПоПодчиненным Тогда
				Продолжить;
			КонецЕсли;
			Если Не РассчитатьПоПодчиненным = 2 Тогда
				Если Не МожноСуммироватьПодчиненныеСтроки(ПодчиненныеСтроки) Тогда
					Продолжить;
				КонецЕсли;
				Если Не ПодчиненныеСтроки.Количество() Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = СтруктураЯчеек.Добавить();
		ДобавленныеСтроки.Добавить(НоваяСтрока);
		НоваяСтрока.Строка = Строка;
		НоваяСтрока.Колонка = Колонка;
		
		НоваяСтрока.СложнаяТаблица = Параметры.СложнаяТаблица;
		
		Если ЗначениеЗаполнено(Элемент) Тогда
			
			НоваяСтрока.ВидЭлемента = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
			
			Если НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
				ИЛИ НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
				
				НоваяСтрока.ФлагЗначение = Истина;
				
			Иначе
				
				НоваяСтрока.ОбратныйЗнак = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ОбратныйЗнак", КэшРеквизитов);
				Показатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВыводимыеПоказатели", КэшДопРеквизитов);
				
				НоваяСтрока.ФлагСумма = Истина;
				Если Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество Тогда
					НоваяСтрока.ФлагСумма = Ложь;
					НоваяСтрока.ФлагКоличество = Истина;
				ИначеЕсли Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма Тогда
					НоваяСтрока.ФлагКоличество = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
				НоваяСтрока.ФлагСтатьяБюджетов = "заполнить";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
				НоваяСтрока.ФлагПоказательБюджетов = "заполнить";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
				НоваяСтрока.СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СтатьяБюджетов", КэшДопРеквизитов);
				НоваяСтрока.ФлагСтатьяБюджетов = "отобрать";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
				НоваяСтрока.ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ПоказательБюджетов", КэшДопРеквизитов);
				НоваяСтрока.ФлагПоказательБюджетов = "отобрать";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
				НоваяСтрока.НефинансовыйПоказатель = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "НефинансовыйПоказатель", КэшДопРеквизитов);
				НоваяСтрока.ФлагНефинансовыйПоказатель = "отобрать";
			ИначеЕсли НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
				НоваяСтрока.РедактируемоеЗначение = Элемент.НаименованиеДляПечати;
				НоваяСтрока.ФлагРедактируемоеЗначение = "отобрать";
			КонецЕсли;
			
		Иначе
			НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		КонецЕсли;
		
		ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(Параметры, НоваяСтрока, Строка);
		ЗаполнитьСтрокуСтруктурыЯчеекПоДаннымДерева(Параметры, НоваяСтрока, Колонка);
		
		ВалютаВывода = ВалютаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатейВалюты);
		
		Если НоваяСтрока.Владелец().Колонки.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			НоваяСтрока.ЕдиницаИзмерения = ЕдиницаВводаАналитики(НоваяСтрока, КэшРеквизитовСтатейЕдИзм);
		КонецЕсли;
		
		Если НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			
			Показатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВыводимыеПоказатели", КэшДопРеквизитов);
			
			Если Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.КоличествоИСумма
				ИЛИ Показатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма Тогда
				Валюта = НоваяСтрока.Валюта;
				Если ЗначениеЗаполнено(Валюта)
					И ЗначениеЗаполнено(ВалютаВывода) Тогда
					Если Валюта <> ВалютаВывода Тогда
						НоваяСтрока.ФлагСумма = Ложь;
						НоваяСтрока.ФлагКоличество = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьСведенияОбИсточникеДанных(НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент, 
																						ПодчиненныеСтроки, Параметры);
		
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

Функция МожноСуммироватьПодчиненныеСтроки(ПодчиненныеСтроки)
	
	МожноСуммировать = Истина;
	ПредыдущееПолеИсточника = Неопределено;
	Для Каждого Строка из ПодчиненныеСтроки Цикл
		Если ПредыдущееПолеИсточника <> Неопределено
			И Строка.ПолеИсточника <> ПредыдущееПолеИсточника Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		ПредыдущееПолеИсточника = Строка.ПолеИсточника;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ВычислитьЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы)
	
	НайденнаяПозиция = СтрНайти(ВРег(Формула), ВРег(ИмяОперанда));
	ОкончаниеФормулы = НайденнаяПозиция + СтрДлина(ИмяОперанда);
	
	//проверка что "ИТОГ" применяется к операнду
	
	НачалоФормулы = 0;
	Сч = НайденнаяПозиция - 5;
	Найдено = Ложь;
	Пока Сч > 0 Цикл
		Если ВРЕГ(Сред(Формула, Сч, 5)) = "ИТОГ(" Тогда
			НачалоФормулы = Сч;
			Найдено = Истина;
			Прервать;
		КонецЕсли;
		ПозицияПроверки = Сч + 4;
		Если СокрЛП(Сред(Формула, ПозицияПроверки, 1)) <> "" Тогда
			Возврат Неопределено; // перед операндом и функцией итог вставлен символ
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Если Не Найдено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сред(Формула, НачалоФормулы, ОкончаниеФормулы - НачалоФормулы);
	
КонецФункции

Функция ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы) Экспорт
	Перем ЛокальноеОкончаниеФормулы, ЛокальноеНачалоФормулы;
	
	ЧислоВхождений = СтрЧислоВхождений(ВРег(Формула), ВРег(ИмяОперанда));
	СтрокаПоиска = Формула;
	НачалоФормулы = 0; ОкончаниеФормулы = 0;
	
	Для Сч = 1 по ЧислоВхождений Цикл
		ЧастиФормулы = ВычислитьЧастьФормулыСИтогомИОперандом(СтрокаПоиска, ИмяОперанда, ЛокальноеНачалоФормулы, ЛокальноеОкончаниеФормулы);
		НачалоФормулы = ОкончаниеФормулы + ЛокальноеНачалоФормулы;
		ОкончаниеФормулы = ОкончаниеФормулы + ЛокальноеОкончаниеФормулы;
		Если ЧастиФормулы <> Неопределено Тогда
			Возврат ЧастиФормулы
		КонецЕсли;
		СтрокаПоиска = Сред(СтрокаПоиска, ОкончаниеФормулы);
		ОкончаниеФормулы = ОкончаниеФормулы - 1;
	КонецЦикла;
	
КонецФункции

Функция ОкончаниеФормулы(Формула, ОкончаниеФормулы) Экспорт
	
	Результат = "";
	Сч = ОкончаниеФормулы;
	Пока Сч < СтрДлина(Формула) Цикл
		Символ = Сред(Формула, Сч, 1);
		Если Символ = ")" Тогда
			Прервать;
		КонецЕсли;
		Результат = Результат + Символ;
		Сч = Сч + 1;
	КонецЦикла;
	
	ОкончаниеФормулы = Сч;
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьВФункциюИтогТехническуюИнформацию(Формула, СтруктураФлаговПериодов, СтрокаОперанда)
	Перем НачалоФормулы, ОкончаниеФормулы;
	
	СписокДобавленных = Новый Массив;
	
	ИмяОперанда = "[" + СтрокаОперанда.ИмяОперанда + "]";
	ЧастьФункции = ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы);
	
	СоответствиеИменФункций = Новый Соответствие;
	
	Пока ЧастьФункции <> Неопределено Цикл
		
		НовыйОперанд = СтрокаОперанда.Владелец().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОперанд, СтрокаОперанда);
		НовыйОперанд.ИмяОперанда = "ИТОГ_" + Новый УникальныйИдентификатор;
		СписокДобавленных.Добавить(НовыйОперанд);
		
		ВтораяЧастьФормулы = ОкончаниеФормулы(Формула, ОкончаниеФормулы);
		
		КрасивоеИмяОперанда = СтрЗаменить(ЧастьФункции + ВтораяЧастьФормулы + ")", """", "'");
		КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, "[", "'");
		КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, "]", "'");
		КрасивоеИмяОперанда = СтрЗаменить(КрасивоеИмяОперанда, " ", "_");
		СоответствиеИменФункций.Вставить(НовыйОперанд.ИмяОперанда, КрасивоеИмяОперанда);
		
		РеальнаяПерваяЧастьФормулы = "ИТОГ(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, Префикс, Постфикс, СтрокаДанных, ЛогРасчета, """ + НовыйОперанд.ИмяОперанда + """";
		
		СписокИзмерений = СокрЛП(ВтораяЧастьФормулы);
		СписокИзмерений = СокрЛП(Сред(СписокИзмерений, 2)); // отсекается запятая
		СписокИзмерений = Лев(СписокИзмерений, СтрДлина(СписокИзмерений) - 1); //отсекается последняя ковычка
		СписокИзмерений = Сред(СписокИзмерений, 2); // отсекается первая ковычка
		МассивЗаголовковИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(СписокИзмерений),,Истина, Истина);
		МассивРезультат = Новый Массив;
		Для Каждого Колонка из СтрокаОперанда.Владелец().Колонки Цикл
			Если МассивЗаголовковИзмерений.Найти(ВРег(Колонка.Заголовок)) <> Неопределено Тогда
				//для суммируемых показателей очистим флаги измерений отчета для суммирования
				//при расчете данных ячеек
				Если СтрокаОперанда.ВидОперанда <> Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
					Если СтруктураФлаговПериодов <> Неопределено И
						БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(ВРег(Колонка.Имя), "ПЕРИОД") Тогда
						СтруктураФлаговПериодов.Вставить("Флаг" + Колонка.Имя, "заполнить");
					КонецЕсли;
					НовыйОперанд["Флаг" + Колонка.Имя] = "";
				КонецЕсли;
				МассивРезультат.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
		СписокРеальныхИзмерений = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивРезультат);
		РеальнаяВтораяЧастьФормулы = СтрЗаменить(ВтораяЧастьФормулы, СписокИзмерений, СписокРеальныхИзмерений);
		
		НоваяЧастьФункции = РеальнаяПерваяЧастьФормулы + РеальнаяВтораяЧастьФормулы;
		Формула = Лев(Формула, НачалоФормулы - 1) + НоваяЧастьФункции + Сред(Формула, ОкончаниеФормулы);
		ЧастьФункции = ЧастьФормулыСИтогомИОперандом(Формула, ИмяОперанда, НачалоФормулы, ОкончаниеФормулы);
		
	КонецЦикла;
	
	//Если операнд используется и вне функции ИТОГ - оставим его
	//иначе - удалим
	Если СтрНайти(Формула, ИмяОперанда) Тогда
		СписокДобавленных.Добавить(СтрокаОперанда);
	Иначе
		СтрокаОперанда.Владелец().Удалить(СтрокаОперанда);
	КонецЕсли;
	
	Для Каждого СтрокаОперанда из СписокДобавленных Цикл
		ИмяФормулы = СоответствиеИменФункций.Получить(СтрокаОперанда.ИмяОперанда);
		Если ИмяФормулы <> Неопределено Тогда
			Формула = СтрЗаменить(Формула, СтрокаОперанда.ИмяОперанда, ИмяФормулы);
			СтрокаОперанда.ИмяОперанда = ИмяФормулы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДобавленных;
	
КонецФункции

Функция СтрЗаменитьБезУчетаРегистра(Знач Строка, Знач ПодстрокаПоиска, Знач ПодстрокаЗамены) Экспорт
	
	ПодстрокаПоиска = Строка(ПодстрокаПоиска);
	Если ПустаяСтрока(ПодстрокаПоиска) Тогда
		Возврат Строка;
	КонецЕсли;
	
	Если СтрДлина(Строка) < СтрДлина(ПодстрокаПоиска) Тогда
		Возврат Строка;
	КонецЕсли;
	
	ПодстрокаПоиска = ВРег(ПодстрокаПоиска);
	ДлинаПодстрокиПоиска = СтрДлина(ПодстрокаПоиска);
	
	Результат = "";
	ПрошлиВсюСтроку = Ложь;
	
	Пока Не ПрошлиВсюСтроку Цикл
		Если ВРег(Лев(Строка, ДлинаПодстрокиПоиска)) = ПодстрокаПоиска Тогда
			Результат = Результат + ПодстрокаЗамены;
			Строка = Сред(Строка, ДлинаПодстрокиПоиска + 1);
		Иначе
			Результат = Результат + Лев(Строка, 1);
			Строка = Сред(Строка, 2);
		КонецЕсли;
		ПрошлиВсюСтроку = Строка = "";
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьВФункциюРазностьДатТехническуюИнформацию(Формула) Экспорт
	
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "РазностьДат(", "РазностьДат(ПараметрыПериодов, ");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "[Начало периода данных]", "НачалоПериода");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "[Конец периода данных]", "КонецПериода");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "[Граница факт.данных]", "ГраницаФактДанных");
	Формула = СтрЗаменитьБезУчетаРегистра(Формула, "[Период группировки]", "ПериодГруппировки");
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов)
	
	Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		СтрокаОперанда.СтатьяБюджетов = Неопределено;
		СтрокаОперанда.ФлагСтатьяБюджетов = "";
		Реквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели");
		СтрокаОперанда.ФлагСумма = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		СтрокаОперанда.ПоказательБюджетов = Неопределено;
		СтрокаОперанда.ФлагПоказательБюджетов = "";
		Реквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели");
		СтрокаОперанда.ФлагСумма = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = Реквизиты.ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		СтатьяБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "СтатьяБюджетов", КэшДопРеквизитов);
		ВыводимыеПоказатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели", КэшДопРеквизитов);
		СтрокаОперанда.СтатьяБюджетов = СтатьяБюджетов;
		СтрокаОперанда.ФлагСтатьяБюджетов = "отобрать";
		СтрокаОперанда.ФлагСумма = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		
		ПоказательБюджетов = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ПоказательБюджетов", КэшДопРеквизитов);
		ВыводимыеПоказатели = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "ВыводимыеПоказатели", КэшДопРеквизитов);
		СтрокаОперанда.ПоказательБюджетов = ПоказательБюджетов;
		СтрокаОперанда.ФлагПоказательБюджетов = "отобрать";
		СтрокаОперанда.ФлагСумма = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Сумма;
		СтрокаОперанда.ФлагКоличество = ВыводимыеПоказатели = Перечисления.ТипыВыводимыхПоказателейБюджетногоОтчета.Количество;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		НефинансовыйПоказатель = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "НефинансовыйПоказатель", КэшДопРеквизитов);
		СтрокаОперанда.НефинансовыйПоказатель = НефинансовыйПоказатель;
		СтрокаОперанда.ФлагНефинансовыйПоказатель = "отобрать";
		СтрокаОперанда.ФлагЗначение = Истина;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		
		СтрокаОперанда.РедактируемоеЗначение = ДанныеОперанда.Операнд.НаименованиеДляПечати;
		СтрокаОперанда.ФлагРедактируемоеЗначение = "отобрать";
		СтрокаОперанда.ФлагЗначение = Истина;
		
	ИначеЕсли СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
		
		СтрокаЯчейки = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "СтрокаЯчейки", КэшДопРеквизитов);
		КолонкаЯчейки = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
														ДанныеОперанда.Операнд, "КолонкаЯчейки", КэшДопРеквизитов);
		СтрокаОперанда.ОперандСтрока = СтрокаЯчейки;
		СтрокаОперанда.ОперандКолонка = КолонкаЯчейки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьЯчейкиОперандовФормулы(Параметры, НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Операнды)
	
	КэшДопРеквизитов 		= Параметры.КэшДопРеквизитов;
	СтруктураФлаговПериодов = Новый Структура;
	ФлагиОперандов 			= Новый Массив;
	
	Для Каждого ДанныеОперанда из Операнды Цикл
		
		СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
		
		ВидОперанда = ДанныеОперанда.Операнд.ВидЭлемента;
		Если ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка, ВидЭлемента");
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока,,"Формула, ИД_Источника, ПолеИсточника, ФлагСумма, ФлагКоличество, ФлагЗначение, ОбратныйЗнак");
		КонецЕсли;
		ЗаполнитьСведенияОбИсточникеДанных(СтрокаОперанда, ИсточникиДанных, ИсточникиПериодовГруппировок, ДанныеОперанда.Операнд, 
																										Неопределено, Параметры);
		
		СтрокаОперанда.ИмяОперанда = ДанныеОперанда.Идентификатор;
		СтрокаОперанда.ВидОперанда = ВидОперанда;
		СтрокаОперанда.ОсновнойЭлемент = Ложь;
		СтрокаОперанда.РасчетЗаполнение = "итог";
		
		Если СтрНайти(ВРег(НоваяСтрока.Формула), "ИТОГ(") Тогда
			ДобавленныеИтоги = ДобавитьВФункциюИтогТехническуюИнформацию(НоваяСтрока.Формула, СтруктураФлаговПериодов, СтрокаОперанда);
			Для Каждого СтрокаОперанда из ДобавленныеИтоги Цикл
				Если Не СтрНайти(ВРег(СтрокаОперанда.ИмяОперанда), "ИТОГ(") Тогда
					НоваяСтрока.СписокОперандов = НоваяСтрока.СписокОперандов + " [" + СтрокаОперанда.ИмяОперанда + "]";
				КонецЕсли;
				ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов);
			КонецЦикла;
			МассивСтрокОперандов = ДобавленныеИтоги;
		Иначе
			НоваяСтрока.СписокОперандов = НоваяСтрока.СписокОперандов + " [" + СтрокаОперанда.ИмяОперанда + "]";
			ЗаполнитьСтрокуОперанда(ДанныеОперанда, СтрокаОперанда, КэшДопРеквизитов);
			МассивСтрокОперандов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаОперанда);
		КонецЕсли;
			
		Для Каждого СтрокаОперанда из МассивСтрокОперандов Цикл
			Если НоваяСтрока.РасчетЗаполнение = "заполнение" Тогда
				//Если на операнде не ведется учет по аналитике
				//то при заполнении фильтр на аналитику игнорируется
				
				Для Каждого ВидАналитики из Параметры.ОписаниеОтчета.ВидыАналитик Цикл
					ОтбиратьПоЗначению = Ложь;
					Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
						Для Сч = 1 по 6 Цикл
							АналитикаСтатьи = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(Параметры.КэшАналитикСтатей, 
																										СтрокаОперанда.СтатьяБюджетов,
																										"ВидАналитики" + Сч);
							Если АналитикаСтатьи = ВидАналитики Тогда
								ОтбиратьПоЗначению = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
						Для Сч = 1 по 6 Цикл
							АналитикаСтатьи = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(Параметры.КэшАналитикСтатей, 
																										СтрокаОперанда.ПоказательБюджетов,
																										"ВидАналитики" + Сч);
							Если АналитикаСтатьи = ВидАналитики Тогда
								ОтбиратьПоЗначению = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
						Для Сч = 1 по 6 Цикл
							АналитикаСтатьи = БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(Параметры.КэшАналитикСтатей, 
																										СтрокаОперанда.НефинансовыйПоказатель,
																										"ВидАналитики" + Сч);
							Если АналитикаСтатьи = ВидАналитики Тогда
								ОтбиратьПоЗначению = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если Не ОтбиратьПоЗначению Тогда
						СтрокаОперанда["Флаг" + ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики)] = "";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			СтруктураОперанда = Новый Структура("ФлагСумма, ФлагКоличество");
			ЗаполнитьЗначенияСвойств(СтруктураОперанда, СтрокаОперанда);
			ФлагиОперандов.Добавить(СтруктураОперанда);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение из СтруктураФлаговПериодов Цикл
		
		НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		
	КонецЦикла;
	
	Возврат ФлагиОперандов;
	
КонецФункции

Процедура ОбойтиПодчиненныеКолонки(ДеревоКолонок, ТаблицаСтрокаКолонка, ЗафиксированнаяСтрока)
	
	Для Каждого СтрокаДерева из ДеревоКолонок.Строки Цикл
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель
			ИЛИ СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда 
			СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
			СтрокаПодч.Колонка = СтрокаДерева.Ссылка;
			СтрокаПодч.Строка = ЗафиксированнаяСтрока;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа 
			И СтрокаДерева.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе, "ВидЭлемента") <> Неопределено Тогда
			СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
			СтрокаПодч.Колонка = СтрокаДерева.Ссылка;
			СтрокаПодч.Строка = ЗафиксированнаяСтрока;
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаДерева.Строки.Количество() Тогда 
			СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
			СтрокаПодч.Колонка = СтрокаДерева.Ссылка;
			СтрокаПодч.Строка = ЗафиксированнаяСтрока;
			Продолжить;
		КонецЕсли;
		
		ОбойтиПодчиненныеКолонки(СтрокаДерева, ТаблицаСтрокаКолонка, ЗафиксированнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбИсточникеДанных(НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент, 
																						ПодчиненныеСтроки, Параметры)
	
	ТребуетИсточник 				= Истина;
	НоваяСтрока.ОсновнойЭлемент 	= Истина;
	КэшДопРеквизитов 				= Параметры.КэшДопРеквизитов;
	КэшРеквизитов 					= Параметры.КэшРеквизитов;
	КэшПодчиненныхЭлементовФормул 	= Параметры.КэшПодчиненныхЭлементовФормул;
	
	СтрокаВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Строка, "ВидЭлемента", КэшРеквизитов);
	Если ЗначениеЗаполнено(НоваяСтрока.Колонка) Тогда
		КолонкаВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Колонка, "ВидЭлемента", КэшРеквизитов);
	Иначе
		КолонкаВидЭлементаСравнения = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ВидЭлементаСравнения = ЗначениеРеквизитаЭлементаВидаБюджета(Элемент, "ВидЭлемента", КэшРеквизитов);
	Иначе
		ВидЭлементаСравнения = Неопределено;
	КонецЕсли;
	
	Если СтрокаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
		ИЛИ КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
		
		ТребуетИсточник = Ложь;
		
		ТаблицаСтрокаКолонка = Новый ТаблицаЗначений;
		ТаблицаСтрокаКолонка.Колонки.Добавить("Строка");
		ТаблицаСтрокаКолонка.Колонки.Добавить("Колонка");
		
		Запрос = Новый Запрос;
		
		Если КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			
			ДеревоКолонок = КэшПодчиненныхЭлементовФормул[НоваяСтрока.Колонка];
			Если ДеревоКолонок = Неопределено Тогда
			
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЭлементыФинансовыхОтчетов.Ссылка КАК Ссылка,
				|	ЭлементыФинансовыхОтчетов.Код КАК Код,
				|	ЭлементыФинансовыхОтчетов.ВидЭлемента
				|ИЗ
				|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
				|ГДЕ
				|	ЭлементыФинансовыхОтчетов.Ссылка В ИЕРАРХИИ(&Родитель)
				|	И НЕ ЭлементыФинансовыхОтчетов.Ссылка = &Родитель
				|	И НЕ ЭлементыФинансовыхОтчетов.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Ссылка ИЕРАРХИЯ,
				|	Код";
				
				Группа = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Колонка, "Родитель", КэшРеквизитов);
				Запрос.УстановитьПараметр("Родитель", Группа);
				Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Колонка);
				РезультатЗапроса = Запрос.Выполнить();
				ДеревоКолонок = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				
				КэшПодчиненныхЭлементовФормул.Вставить(НоваяСтрока.Колонка, ДеревоКолонок);
				
			КонецЕсли;
				
			ОбойтиПодчиненныеКолонки(ДеревоКолонок, ТаблицаСтрокаКолонка, НоваяСтрока.Строка);
			НоваяСтрока.ОбратныйЗнак = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Колонка, "ОбратныйЗнак", КэшРеквизитов);
			
			ВидФормулы = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																		НоваяСтрока.Колонка, "ФормулаПоГруппе", КэшДопРеквизитов);
			
		Иначе
			
			ТаблицаСтрок = КэшПодчиненныхЭлементовФормул[НоваяСтрока.Строка];
			Если ТаблицаСтрок = Неопределено Тогда
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЭлементыФинансовыхОтчетов.Ссылка,
				|	ЭлементыФинансовыхОтчетов.Код КАК Код
				|ИЗ
				|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
				|ГДЕ
				|	ЭлементыФинансовыхОтчетов.Родитель В
				|			(ВЫБРАТЬ ПЕРВЫЕ 1
				|				Фильтр.Родитель
				|			ИЗ
				|				Справочник.ЭлементыФинансовыхОтчетов КАК Фильтр
				|			ГДЕ
				|				Фильтр.Ссылка = &Ссылка)
				|	И НЕ ЭлементыФинансовыхОтчетов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Код";
				
				Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Строка);
				РезультатЗапроса = Запрос.Выполнить();
				ТаблицаСтрок = РезультатЗапроса.Выгрузить();
				
				КэшПодчиненныхЭлементовФормул.Вставить(НоваяСтрока.Строка, ТаблицаСтрок);
				
			КонецЕсли;
			
			Для Каждого ВыборкаДетальныеЗаписи из ТаблицаСтрок Цикл
				СтрокаПодч = ТаблицаСтрокаКолонка.Добавить();
				СтрокаПодч.Колонка = НоваяСтрока.Колонка;
				СтрокаПодч.Строка = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			ВидФормулы = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
																		НоваяСтрока.Строка, "ФормулаПоГруппе", КэшДопРеквизитов);
			
			НоваяСтрока.ОбратныйЗнак = ЗначениеРеквизитаЭлементаВидаБюджета(НоваяСтрока.Строка, "ОбратныйЗнак", КэшРеквизитов);
			
		КонецЕсли;
		
		Если Не ТаблицаСтрокаКолонка.Количество() Тогда
			Формула = "";
		Иначе
			Для Каждого Строка из ТаблицаСтрокаКолонка Цикл
				
				СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
				СтрокаОперанда.ПорядокРасчетаОперанда = ТаблицаСтрокаКолонка.Индекс(Строка);
				СтрокаОперанда.ИмяОперанда = ЗначениеРеквизитаЭлементаВидаБюджета(Строка.Строка, "НаименованиеДляПечати", КэшРеквизитов) + 
					?(ЗначениеЗаполнено(Строка.Колонка), "; " + ЗначениеРеквизитаЭлементаВидаБюджета(Строка.Колонка, "НаименованиеДляПечати", КэшРеквизитов), "");
				СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
				СтрокаОперанда.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе;
				СтрокаОперанда.ОсновнойЭлемент = Ложь;
				СтрокаОперанда.ОперандСтрока = Строка.Строка;
				СтрокаОперанда.ОперандКолонка = Строка.Колонка;
				
			КонецЦикла;
			Формула = Перечисления.ВидыФормулБюджетирования.ИмяФункции(ВидФормулы) + "(МассивЗначений)";
		КонецЕсли;
		
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли СтрокаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
		ИЛИ КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		
		ТребуетИсточник = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭлементыФинансовыхОтчетов.Ссылка
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Родитель = &Ссылка
		|	И ЭлементыФинансовыхОтчетов.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе)";
		
		СтрокаФормулы = Неопределено;
		КолонкаФормулы = Неопределено;
		
		Если КолонкаВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			
			СсылкаНаФормулу = КэшПодчиненныхЭлементовФормул[НоваяСтрока.Колонка];
			Если СсылкаНаФормулу = Неопределено Тогда
				Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Колонка);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СсылкаНаФормулу = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				Если Не ЗначениеЗаполнено(СсылкаНаФормулу) Тогда
					СсылкаНаФормулу = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
				КонецЕсли;
				КэшПодчиненныхЭлементовФормул.Вставить(НоваяСтрока.Колонка, СсылкаНаФормулу);
			КонецЕсли;
			
			СтрокаФормулы = НоваяСтрока.Строка;
			КолонкаФормулы = СсылкаНаФормулу;
			
		Иначе
			
			СсылкаНаФормулу = КэшПодчиненныхЭлементовФормул[НоваяСтрока.Строка];
			Если СсылкаНаФормулу = Неопределено Тогда
				Запрос.УстановитьПараметр("Ссылка", НоваяСтрока.Строка);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СсылкаНаФормулу = ВыборкаДетальныеЗаписи.Ссылка;
				КонецЦикла;
				Если Не ЗначениеЗаполнено(СсылкаНаФормулу) Тогда
					СсылкаНаФормулу = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
				КонецЕсли;
				КэшПодчиненныхЭлементовФормул.Вставить(НоваяСтрока.Строка, СсылкаНаФормулу);
			КонецЕсли;
			
			СтрокаФормулы = СсылкаНаФормулу;
			КолонкаФормулы = НоваяСтрока.Колонка;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СсылкаНаФормулу) Тогда
			Формула = "";
		Иначе
			
			СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
			СтрокаОперанда.ИмяОперанда = НСтр("ru='Формула по группе';uk='Формула по групі'");
			СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
			СтрокаОперанда.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа;
			СтрокаОперанда.ОсновнойЭлемент = Ложь;
			СтрокаОперанда.ОперандСтрока = СтрокаФормулы;
			СтрокаОперанда.ОперандКолонка = КолонкаФормулы;
			Формула = "[" + СтрокаОперанда.ИмяОперанда + "]";
			
		КонецЕсли;
		
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли Не ЗначениеЗаполнено(Элемент) Тогда // расчет по подчиненным строкам
		
		ТребуетИсточник = Ложь;
		
		НоваяСтрока.ФлагКоличество = Ложь;
		НоваяСтрока.ФлагСумма = Ложь;
		
		Формула = "";
		ПорядковыйНомерСтроки = 0;
		Для Каждого Строка из ПодчиненныеСтроки Цикл
			
			ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
			СтрокаОперанда = НоваяСтрока.Владелец().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперанда, НоваяСтрока, "Строка, Колонка");
			СтрокаОперанда.ИмяОперанда = НСтр("ru='Вложенная строка';uk='Вкладений рядок'") + " #" + ПорядковыйНомерСтроки;
			СтрокаОперанда.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы;
			СтрокаОперанда.ОсновнойЭлемент = Ложь;
			СтрокаОперанда.ОперандСтрока = Строка.Строка;
			СтрокаОперанда.ОперандКолонка = Строка.Колонка;
			Формула = Формула + "СУММА([" + СтрокаОперанда.ИмяОперанда + "]) + ";
			
			НоваяСтрока.ФлагКоличество = НоваяСтрока.ФлагКоличество ИЛИ Строка.ФлагКоличество;
			НоваяСтрока.ФлагСумма = НоваяСтрока.ФлагСумма ИЛИ Строка.ФлагСумма;
			
		КонецЦикла;
		
		Формула = Лев(Формула, СтрДлина(Формула) - 3);
		НоваяСтрока.Формула = Формула;
		НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
		
		ТребуетИсточник = Ложь;
		
		Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Формула", КэшДопРеквизитов);
		Если СтрНайти(ВРег(Формула), "ИТОГ(")
			ИЛИ СтрНайти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
			НоваяСтрока.ПредставлениеФормулы = Формула;
		КонецЕсли;
		НоваяСтрока.Формула = Формула;
		ФлагиОперандов = ЗаполнитьЯчейкиОперандовФормулы(Параметры, НоваяСтрока, 
															ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент.ОперандыФормулы);
		Если СтрНайти(ВРег(НоваяСтрока.Формула), "РАЗНОСТЬДАТ(") Тогда
			ДобавитьВФункциюРазностьДатТехническуюИнформацию(НоваяСтрока.Формула);
		КонецЕсли;
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		
		ОперандыФлагСумма = Ложь;
		ОперандыФлагКоличество = Ложь;
		Для Каждого ПодчиненнаяСтрока из ФлагиОперандов Цикл
			ОперандыФлагСумма = ОперандыФлагСумма ИЛИ ПодчиненнаяСтрока.ФлагСумма;
			ОперандыФлагКоличество = ОперандыФлагКоличество ИЛИ ПодчиненнаяСтрока.ФлагКоличество;
		КонецЦикла;
		
		Если ОперандыФлагКоличество И Не ОперандыФлагСумма Тогда
			ФлагСумма = Ложь;
			ФлагКоличество = Истина;
		Иначе
			ФлагСумма = Истина;
			ФлагКоличество = Ложь;
		КонецЕсли;
		
		НоваяСтрока.ФлагКоличество = ФлагКоличество;
		НоваяСтрока.ФлагСумма = ФлагСумма;
			
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		НоваяСтрока.ПолеИсточника = "Оборот";
		РасчетЗаполнение = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "СпособЗаполнения", КэшДопРеквизитов);
		
		НоваяСтрока.РасчетЗаполнение = "";
		Если ПодчиненныеСтроки <> Неопределено 
			И ПодчиненныеСтроки.Количество() Тогда
			НоваяСтрока.РасчетЗаполнение = "итог";
		ИначеЕсли РасчетЗаполнение = 1 Тогда
			НоваяСтрока.РасчетЗаполнение = "пересчет";
		ИначеЕсли РасчетЗаполнение = 2 Тогда
			НоваяСтрока.РасчетЗаполнение = "заполнение";
		КонецЕсли;
		
		// Для операндов формулы не предусмотрены.
		Если Параметры <> Неопределено Тогда
			
			РежимыФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов;
			
			ДобавитьФормулуРасчета = НоваяСтрока.РасчетЗаполнение = "пересчет" И 
				(Параметры.РежимФормирования = РежимыФормирования.Документ 
					ИЛИ Параметры.РежимФормирования = РежимыФормирования.ПечатьБюджета);
			ДобавитьФормулуРасчета = ДобавитьФормулуРасчета ИЛИ 
				(НоваяСтрока.РасчетЗаполнение = "заполнение" И Параметры.РежимФормирования = РежимыФормирования.Заполнение);
			ДобавитьФормулуРасчета = ДобавитьФормулуРасчета ИЛИ 
				(НоваяСтрока.РасчетЗаполнение = "пересчет" И Параметры.РежимФормирования = РежимыФормирования.Заполнение);
			
			Если ДобавитьФормулуРасчета Тогда
				
				Если НоваяСтрока.РасчетЗаполнение = "заполнение" Тогда
					НоваяСтрока.ФлагСтатьяБюджетов = ""; // статья нужна только справочно, отборы по ней не нужны
				КонецЕсли;
				
				Если Параметры.РежимФормирования = РежимыФормирования.Заполнение Тогда
					НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
				КонецЕсли;
				
				Формула = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Формула", КэшДопРеквизитов);
				Если СтрНайти(ВРег(Формула), "ИТОГ(")
					ИЛИ СтрНайти(ВРег(Формула), "РАЗНОСТЬДАТ(") Тогда
					НоваяСтрока.ПредставлениеФормулы = Формула;
				КонецЕсли;
				НоваяСтрока.Формула = Формула;
				ЗаполнитьЯчейкиОперандовФормулы(Параметры, НоваяСтрока, ИсточникиДанных, ИсточникиПериодовГруппировок, Элемент.ОперандыФормулы);
				Если СтрНайти(ВРег(НоваяСтрока.Формула), "РАЗНОСТЬДАТ(") Тогда
					ДобавитьВФункциюРазностьДатТехническуюИнформацию(НоваяСтрока.Формула);
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		
		НоваяСтрока.ПолеИсточника = "Оборот";
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		
		ТипПоказателя = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипЗначенияПоказателя", КэшДопРеквизитов);
		Если ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.НачальныйОстаток Тогда
			НоваяСтрока.ПолеИсточника = "НачальныйОстаток";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.КонечныйОстаток Тогда
			НоваяСтрока.ПолеИсточника = "КонечныйОстаток";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Приход Тогда
			НоваяСтрока.ПолеИсточника = "Приход";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Расход Тогда
			НоваяСтрока.ПолеИсточника = "Расход";
		ИначеЕсли ТипПоказателя = Перечисления.ТипыЗначенийПоказателейБюджетногоОтчета.Оборот Тогда
			НоваяСтрока.ПолеИсточника = "Оборот";
		КонецЕсли;
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		НоваяСтрока.ПолеИсточника = "ЗначениеПоказателя";
		
	ИначеЕсли ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		
		НоваяСтрока.РасчетЗаполнение = "итог";
		НоваяСтрока.ПолеИсточника = "ЗначениеПоказателя";
		НоваяСтрока.ТипРедактируемогоЗначения = 
			ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипРедактируемогоЗначения", КэшДопРеквизитов);
		НоваяСтрока.ИД_Источника = "Документ_Значения";
		ТребуетИсточник = Ложь;
		
	КонецЕсли;
	
	Если ТребуетИсточник Тогда
		
		// "Все статьи" входят в "показатель бюджетов".
		Если ВидЭлементаСравнения = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			
			НайденныйЭлемент = Неопределено;
			КорневойЭлемент = Элемент;
			Пока ЗначениеЗаполнено(КорневойЭлемент) Цикл
				Если КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
					ИЛИ КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
					Прервать;
				КонецЕсли;
				КорневойЭлемент = КорневойЭлемент.Родитель;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(КорневойЭлемент) Тогда
				КорневойЭлемент = Элемент;
				Пока ЗначениеЗаполнено(КорневойЭлемент) Цикл
					Если КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
						ИЛИ КорневойЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
						Прервать;
					КонецЕсли;
					КорневойЭлемент = КорневойЭлемент.Родитель;
				КонецЦикла;
				Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
					НайденныйЭлемент = КорневойЭлемент;
				КонецЕсли;
			Иначе
				НайденныйЭлемент = КорневойЭлемент;
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементПоиска = Элемент;
		Если НайденныйЭлемент <> Неопределено Тогда
			ЭлементПоиска = НайденныйЭлемент;
		КонецЕсли;
		
		Для Каждого Источник из ИсточникиДанных Цикл
			Если Источник.СписокЭлементов.Найти(ЭлементПоиска) <> Неопределено Тогда
				НоваяСтрока.ИД_Источника = Источник.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Источник из ИсточникиПериодовГруппировок Цикл
			Если Источник.СписокЭлементов.Найти(ЭлементПоиска) <> Неопределено Тогда
				НоваяСтрока.ИД_ИсточникаПериодов = Источник.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТипКолонкиСтруктурыЯчеек(Имя, Аналитика = Ложь) Экспорт
	
	МассивТипов = Новый Массив;
	Классификатор = Неопределено;
	
	Если Имя = "ОсновнойЭлемент"
		ИЛИ Имя = "ОбратныйЗнак"
		ИЛИ Имя = "ПризнакИспользования" Тогда
		МассивТипов.Добавить(Тип("Булево"));
	ИначеЕсли Имя = "Строка" или Имя = "Колонка" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	ИначеЕсли Имя = "ВидЭлемента" Тогда
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета"));
	ИначеЕсли Имя = "СтатьяБюджетов" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	ИначеЕсли Имя = "НефинансовыйПоказатель" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ИначеЕсли Имя = "ПоказательБюджетов" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	ИначеЕсли Имя = "РедактируемоеЗначение" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(150);
	ИначеЕсли Найти(Имя, "Период") Тогда
		МассивТипов.Добавить(Тип("Дата"));
	ИначеЕсли Имя = "Флаг" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(10);
	ИначеЕсли Имя = "Организация" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	ИначеЕсли Имя = "Подразделение" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ИначеЕсли Имя = "Сценарий" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Сценарии"));
	ИначеЕсли Имя = "ЕдиницаИзмерения" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ИначеЕсли Имя = "Валюта" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.Валюты"));
	ИначеЕсли Найти(Имя, "Аналитика") Тогда
		МассивТипов = Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип;
	ИначеЕсли Аналитика Тогда
		Возврат Имя.ТипЗначения;
	ИначеЕсли Имя = "Количество" ИЛИ Имя = "Сумма" Тогда
		МассивТипов.Добавить(Тип("Число"));
	ИначеЕсли Имя = "НомерСтроки" Тогда
		МассивТипов.Добавить(Тип("Число"));
	ИначеЕсли Имя = "Формула" Тогда
		МассивТипов.Добавить(Тип("Строка"));
	ИначеЕсли Имя = "ИД_Источника" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(30);
	ИначеЕсли Имя = "ТипРедактируемогоЗначения" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(15);
	ИначеЕсли Имя = "ПолеИсточника" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(50);
	ИначеЕсли Имя = "ИмяОперанда" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(150);
	ИначеЕсли Имя = "ВидОперанда" Тогда
		МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета"));
	ИначеЕсли Имя = "ОперандСтрока"
		ИЛИ Имя = "ОперандКолонка" Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	ИначеЕсли Имя = "ОбщиеИзмерения"
		ИЛИ Имя = "СписокОперандов" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(1000);
	ИначеЕсли Имя = "ИсточникиРасчета"
		ИЛИ Имя = "Примечание" Тогда
		МассивТипов.Добавить(Тип("Строка"));
		Классификатор = Новый КвалификаторыСтроки(1000);
	Иначе
		ВызватьИсключение НСтр("ru='Неизвестный тип колонки структуры ячеек';uk='Невідомий тип колонки структури комірок '");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Классификатор) Тогда
		Возврат Новый ОписаниеТипов(МассивТипов,,,,Классификатор);
	Иначе
		Возврат Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
КонецФункции

Функция ЭтоФиксированныйЭлемент(Знач СтрокаТекущегоЭлемента) Экспорт
	
	Если ТипЗнч(СтрокаТекущегоЭлемента) = Тип("Строка") Тогда
		АдресСтруктурыЭлемента = СтрокаТекущегоЭлемента;
		ВидЭлемента = ПолучитьИзВременногоХранилища(АдресСтруктурыЭлемента).ВидЭлемента;
	Иначе
		ВидЭлемента = СтрокаТекущегоЭлемента.ВидЭлемента;
		АдресСтруктурыЭлемента = СтрокаТекущегоЭлемента.АдресСтруктурыЭлемента;
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
														АдресСтруктурыЭлемента, "ТипИзмерения");
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			Возврат Истина;
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			ЗначениеПериода = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
														АдресСтруктурыЭлемента, "ЗначениеПериода");
			Если ЗначениеПериода <> Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Тогда
		Возврат Истина;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьИмяИзмерения(КэшДопРеквизиты, Элемент)
	
	Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		Возврат "СтатьяБюджетов";
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		Возврат "ПоказательБюджетов";
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		Возврат "СтатьяБюджетов";
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
		Возврат "ПоказательБюджетов";
	ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			Возврат "Организация";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "Периодичность", КэшДопРеквизиты);
			Возврат "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			Возврат "Подразделение";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			Возврат "Сценарий";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизиты);
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Возврат ИмяАналитики;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
			ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ВидАналитики", КэшДопРеквизиты);
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Возврат ИмяАналитики;
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Элемент, "ИмяИзмерения", КэшДопРеквизиты);
			Возврат ИмяИзмерения;
			
		КонецЕсли;
	Иначе
		Ошибка = НСтр("ru='Неизвестное измерение: %1';uk='Невідомий вимір: %1'");
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Элемент);
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПолныйСписокИзмеренийЯчейки(КэшДопРеквизиты, Знач Строка, Знач Колонка)
	
	Массив = Новый Массив;
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Пока ЗначениеЗаполнено(Строка)
		И Не Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Цикл
		
		Если Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			ИЛИ Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ДобавлятьИзмерение = Истина;
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ТипИзмерения", КэшДопРеквизиты);
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "РазрешитьРедактирование", КэшДопРеквизиты);
				Если Не РазрешитьРедактирование = Истина Тогда
					//Фиксированная аналитика однозначно определяется строкой и колонкой ячейки
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				ВыражениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "ЗначениеПериода", КэшДопРеквизиты);
				Если ВыражениеПериода <> Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавлятьИзмерение Тогда
				ИмяИзмерения = ПолучитьИмяИзмерения(КэшДопРеквизиты, Строка);
				Массив.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		Строка = Строка.Родитель;
		
	КонецЦикла;
	
	Пока ЗначениеЗаполнено(Колонка)
		И Не Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Цикл
		
		Если Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
			ИЛИ Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			
			ДобавлятьИзмерение = Истина;
			ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ТипИзмерения", КэшДопРеквизиты);
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				РазрешитьРедактирование = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Строка, "РазрешитьРедактирование", КэшДопРеквизиты);
				Если Не РазрешитьРедактирование = Истина Тогда
					//Фиксированная аналитика однозначно определяется строкой и колонкой ячейки
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				ВыражениеПериода = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Колонка, "ЗначениеПериода", КэшДопРеквизиты);
				Если ВыражениеПериода <> Неопределено Тогда
					ДобавлятьИзмерение = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавлятьИзмерение Тогда
				ИмяИзмерения = ПолучитьИмяИзмерения(КэшДопРеквизиты, Колонка);
				Массив.Добавить(ИмяИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		Колонка = Колонка.Родитель;
		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, Ячейка, ЯчейкиСсылки = Неопределено)
	
	СтруктураПоиска = Новый Структура("ОперандСтрока, ОперандКолонка", Ячейка.Строка, Ячейка.Колонка);
	ЯчейкиССсылками = СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
	
	Если ЯчейкиСсылки = Неопределено Тогда
		ЯчейкиСсылки = Новый ТаблицаЗначений;
		ЯчейкиСсылки.Колонки.Добавить("Строка");
		ЯчейкиСсылки.Колонки.Добавить("Колонка");
		ЯчейкиСсылки.Колонки.Добавить("ОбщиеИзмерения");
		ЯчейкиСсылки.Индексы.Добавить("Строка, Колонка");
	КонецЕсли;
	
	Для Каждого ЯчейкаССсылкой из ЯчейкиССсылками Цикл
		ПоискВСсылках = Новый Структура("Строка, Колонка");
		ЗаполнитьЗначенияСвойств(ПоискВСсылках, ЯчейкаССсылкой);
		Если ЯчейкиСсылки.НайтиСтроки(ПоискВСсылках).Количество() Тогда
			Продолжить;
		КонецЕсли;
		ПоискВСсылках.Вставить("ОсновнойЭлемент", Истина);
		ПоискВСсылках.Вставить("РасчетЗаполнение", "пересчет");
		НайденнаяСтрока = СтруктураЯчеек.НайтиСтроки(ПоискВСсылках);
		Если НЕ НайденнаяСтрока.Количество() Тогда
			Продолжить;
		КонецЕсли;
		НоваяЯчейка = ЯчейкиСсылки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЯчейка, НайденнаяСтрока[0]);
		НоваяЯчейка.ОбщиеИзмерения = ЯчейкаССсылкой.ОбщиеИзмерения;
		СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, НоваяЯчейка, ЯчейкиСсылки);
	КонецЦикла;
	
	Возврат ЯчейкиСсылки;
	
КонецФункции

Функция ПолучитьСтруктуруЯчеекВидаБюджета(ВидБюджета, ИсточникиДанных, ИсточникиПериодовГруппировок, ОписаниеОтчета, РежимФормирования)
	
	ДеревоЭлементов = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	
#Область Подготовка_таблицы

	МассивОсновныхКолонок = Новый Массив;
	МассивКолонокТаблицыИсточников = Новый Массив;

	СтруктураЯчеек = Новый ТаблицаЗначений;
	
	СтруктураЯчеек.Колонки.Добавить("ОсновнойЭлемент", 		ТипКолонкиСтруктурыЯчеек("ОсновнойЭлемент"));
	СтруктураЯчеек.Колонки.Добавить("Строка", 				ТипКолонкиСтруктурыЯчеек("Строка"));
	СтруктураЯчеек.Колонки.Добавить("Колонка", 				ТипКолонкиСтруктурыЯчеек("Колонка"));
	МассивОсновныхКолонок.Добавить("ОсновнойЭлемент");
	МассивОсновныхКолонок.Добавить("Строка");
	МассивОсновныхКолонок.Добавить("Колонка");
	
	СтруктураЯчеек.Колонки.Добавить("РасчетЗаполнение", 	ТипКолонкиСтруктурыЯчеек("Флаг"));
	СтруктураЯчеек.Колонки.Добавить("СложнаяТаблица", 		ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	
	СтруктураЯчеек.Колонки.Добавить("ВидЭлемента", 			ТипКолонкиСтруктурыЯчеек("ВидЭлемента"));
	СтруктураЯчеек.Колонки.Добавить("ОбратныйЗнак", 		ТипКолонкиСтруктурыЯчеек("ОбратныйЗнак"));
	МассивОсновныхКолонок.Добавить("ВидЭлемента");
	
	СтруктураЯчеек.Колонки.Добавить("СтатьяБюджетов", 			ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	СтруктураЯчеек.Колонки.Добавить("НефинансовыйПоказатель", 	ТипКолонкиСтруктурыЯчеек("НефинансовыйПоказатель"));
	СтруктураЯчеек.Колонки.Добавить("ПоказательБюджетов", 		ТипКолонкиСтруктурыЯчеек("ПоказательБюджетов"));
	СтруктураЯчеек.Колонки.Добавить("РедактируемоеЗначение", 	ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	МассивОсновныхКолонок.Добавить("СтатьяБюджетов");
	МассивОсновныхКолонок.Добавить("НефинансовыйПоказатель");
	МассивОсновныхКолонок.Добавить("ПоказательБюджетов");
	МассивОсновныхКолонок.Добавить("РедактируемоеЗначение");
	
	СтруктураЯчеек.Колонки.Добавить("ФлагСтатьяБюджетов", 			ТипКолонкиСтруктурыЯчеек("Флаг"));
	СтруктураЯчеек.Колонки.Добавить("ФлагПоказательБюджетов", 		ТипКолонкиСтруктурыЯчеек("Флаг"));
	СтруктураЯчеек.Колонки.Добавить("ФлагНефинансовыйПоказатель", 	ТипКолонкиСтруктурыЯчеек("Флаг"));
	МассивОсновныхКолонок.Добавить("ФлагСтатьяБюджетов");
	МассивОсновныхКолонок.Добавить("ФлагПоказательБюджетов");
	МассивОсновныхКолонок.Добавить("ФлагНефинансовыйПоказатель");
	СтруктураЯчеек.Колонки.Добавить("ФлагРедактируемоеЗначение", ТипКолонкиСтруктурыЯчеек("Флаг"));
	МассивОсновныхКолонок.Добавить("ФлагРедактируемоеЗначение");
	
	Для Каждого Измерение из ОписаниеОтчета.Периодичности Цикл
		ИмяИзмерение = ОбщегоНазначения.ИмяЗначенияПеречисления(Измерение);
		СтруктураЯчеек.Колонки.Добавить("Период" + ИмяИзмерение, ТипКолонкиСтруктурыЯчеек("Период"), ИмяИзмерение);
		СтруктураЯчеек.Колонки.Добавить("ФлагПериод" + ИмяИзмерение, ТипКолонкиСтруктурыЯчеек("Флаг"));
		СтруктураЯчеек.Колонки.Добавить("ВыражениеПериода" + ИмяИзмерение, ТипКолонкиСтруктурыЯчеек("Количество"));
		МассивОсновныхКолонок.Добавить("ВыражениеПериода" + ИмяИзмерение);
		МассивОсновныхКолонок.Добавить("Период" + ИмяИзмерение);
		МассивОсновныхКолонок.Добавить("ФлагПериод" + ИмяИзмерение);
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		СтруктураЯчеек.Колонки.Добавить(Измерение, ТипКолонкиСтруктурыЯчеек(Измерение), Измерение);
		СтруктураЯчеек.Колонки.Добавить("Флаг" + Измерение, ТипКолонкиСтруктурыЯчеек("Флаг"));
		СтруктураЯчеек.Колонки.Добавить("Источник" + Измерение);
		МассивОсновныхКолонок.Добавить(Измерение);
		МассивОсновныхКолонок.Добавить("Флаг" + Измерение);
		МассивКолонокТаблицыИсточников.Добавить("Источник" + Измерение);
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		СтруктураЯчеек.Колонки.Добавить(ИмяИзмерения, ТипКолонкиСтруктурыЯчеек(Измерение, Истина), Строка(Измерение));
		СтруктураЯчеек.Колонки.Добавить("Флаг" + ИмяИзмерения, ТипКолонкиСтруктурыЯчеек("Флаг"));
		СтруктураЯчеек.Колонки.Добавить("Источник" + ИмяИзмерения);
		СтруктураЯчеек.Колонки.Добавить("Родитель" + ИмяИзмерения, ТипКолонкиСтруктурыЯчеек("Строка"));
		МассивОсновныхКолонок.Добавить(ИмяИзмерения);
		МассивОсновныхКолонок.Добавить("Флаг" + ИмяИзмерения);
		МассивОсновныхКолонок.Добавить("Родитель" + ИмяИзмерения);
		МассивКолонокТаблицыИсточников.Добавить("Источник" + ИмяИзмерения);
	КонецЦикла;
	
	СтруктураЯчеек.Колонки.Добавить("ФлагКоличество", 	ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	СтруктураЯчеек.Колонки.Добавить("ФлагСумма", 		ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	СтруктураЯчеек.Колонки.Добавить("ФлагЗначение", 	ТипКолонкиСтруктурыЯчеек("ПризнакИспользования"));
	
	СтруктураЯчеек.Колонки.Добавить("Формула", 			ТипКолонкиСтруктурыЯчеек("Формула"));
	СтруктураЯчеек.Колонки.Добавить("ПредставлениеФормулы", ТипКолонкиСтруктурыЯчеек("Формула"));
	
	СтруктураЯчеек.Колонки.Добавить("ИД_Источника", 		ТипКолонкиСтруктурыЯчеек("ИД_Источника"));
	СтруктураЯчеек.Колонки.Добавить("ИД_ИсточникаПериодов", ТипКолонкиСтруктурыЯчеек("ИД_Источника"));
	СтруктураЯчеек.Колонки.Добавить("ПолеИсточника", 		ТипКолонкиСтруктурыЯчеек("ПолеИсточника"));
	МассивОсновныхКолонок.Добавить("ИД_Источника");
	МассивОсновныхКолонок.Добавить("ИД_ИсточникаПериодов");
	
	СтруктураЯчеек.Колонки.Добавить("ИмяОперанда", 		ТипКолонкиСтруктурыЯчеек("ИмяОперанда"));
	СтруктураЯчеек.Колонки.Добавить("ВидОперанда", 		ТипКолонкиСтруктурыЯчеек("ВидОперанда"));
	СтруктураЯчеек.Колонки.Добавить("ОперандСтрока", 	ТипКолонкиСтруктурыЯчеек("ОперандСтрока"));
	СтруктураЯчеек.Колонки.Добавить("ОперандКолонка", 	ТипКолонкиСтруктурыЯчеек("ОперандКолонка"));
	СтруктураЯчеек.Колонки.Добавить("ОбщиеИзмерения", 	ТипКолонкиСтруктурыЯчеек("ОбщиеИзмерения"));
	СтруктураЯчеек.Колонки.Добавить("СписокОперандов", 	ТипКолонкиСтруктурыЯчеек("СписокОперандов"));
	СтруктураЯчеек.Колонки.Добавить("ТипРедактируемогоЗначения", ТипКолонкиСтруктурыЯчеек("ТипРедактируемогоЗначения"));
	МассивОсновныхКолонок.Добавить("ВидОперанда");
	
	//для упорядочивания операндов формул типа "выполнение", "отклонение"
	СтруктураЯчеек.Колонки.Добавить("ПорядокРасчетаОперанда", 	ТипКолонкиСтруктурыЯчеек("Количество"));
	СтруктураЯчеек.Колонки.Добавить("ИндексСтроки", 			ТипКолонкиСтруктурыЯчеек("Количество"));
	МассивОсновныхКолонок.Добавить("ПорядокРасчетаОперанда");
	МассивОсновныхКолонок.Добавить("ИндексСтроки");
	
	//таблица значений ячеек которые надо пересчитывать
	СтруктураЯчеек.Колонки.Добавить("СвязанныеЯчейки");
	
#КонецОбласти
	
#Область Заполнение_таблицы
	
	Элементы = ПолучитьКонечныеЭлементы(ВидБюджета, Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка());
	
	КэшДополнительныеРеквизиты = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	
	Параметры = Новый Структура;
	Параметры.Вставить("РежимФормирования", 			РежимФормирования);
	Параметры.Вставить("СтруктураЯчеек", 				СтруктураЯчеек);
	Параметры.Вставить("ТаблицаНастроек", 				ЭлементыНастройкиЯчеекВидаБюджета(ВидБюджета));
	Параметры.Вставить("ИсточникиЗначений", 			ИсточникиЗначенийВидаБюджета(ВидБюджета));
	Параметры.Вставить("ИсточникиДанных", 				ИсточникиДанных);
	Параметры.Вставить("ИсточникиПериодовГруппировок", 	ИсточникиПериодовГруппировок);
	Параметры.Вставить("КэшДопРеквизитов", 				КэшДополнительныеРеквизиты);
	Параметры.Вставить("ОписаниеОтчета", 				ОписаниеОтчета);
	Параметры.Вставить("ДеревоСтрок", 					Элементы.Строки);
	Параметры.Вставить("Родитель", 						Неопределено);
	Параметры.Вставить("СложнаяТаблица", 				Ложь);
	Параметры.Вставить("КэшРеквизитов", 				КэшРеквизитовЭлементовВидаБюджета(ВидБюджета));
	Параметры.Вставить("КэшАналитикСтатей", 			Новый Соответствие);
	Параметры.Вставить("КэшРеквизитовСтатейВалюты", 	Новый Соответствие);
	Параметры.Вставить("КэшРеквизитовСтатейЕдИзм", 		Новый Соответствие);
	Параметры.Вставить("КэшПодчиненныхЭлементовФормул", Новый Соответствие);
	
	ЗаполнитьСтруктуруЯчеек(Параметры, Элементы.Колонки);
	
	Таблицы = ПолучитьТаблицыВидаБюджета(ВидБюджета);
	Для Каждого Таблица из Таблицы Цикл
		Элементы = ПолучитьКонечныеЭлементы(ВидБюджета, Таблица.Ссылка);
		Параметры.Вставить("ДеревоСтрок", Элементы.Строки);
		Параметры.Вставить("Колонки", Элементы.Колонки);
		Параметры.Вставить("Родитель", Таблица.Ссылка);
		Параметры.Вставить("СложнаяТаблица", Таблица.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		ЗаполнитьСтруктуруЯчеек(Параметры, Элементы.Колонки);
	КонецЦикла;
	
	ЗаполнитьПризнакиСуммаКоличествоФормулы(ВидБюджета, СтруктураЯчеек);
	
#КонецОбласти
	
#Область Расчет_полей_по_которым_будет_поиск_данных_при_выводе_отчета

	СтруктураЯчеек.Индексы.Добавить("ОсновнойЭлемент, Строка, Колонка");
	
	Для Каждого Ячейка из СтруктураЯчеек Цикл
		
		Если Ячейка.ВидОперанда = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			
			Массив1 = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты,
														Ячейка.ОперандСтрока, Ячейка.ОперандКолонка);
			Массив2 = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты,
														Ячейка.Строка, Ячейка.Колонка);
			
			Результат = "";
			Для Каждого Элемент из Массив1 Цикл
				Если Массив2.Найти(Элемент) <> Неопределено Тогда
					Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + Элемент;
				КонецЕсли;
			КонецЦикла;
			
			Ячейка.ОбщиеИзмерения = Результат;
			
		ИначеЕсли (Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
				ИЛИ Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
				ИЛИ Ячейка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа)
				И Ячейка.ОсновнойЭлемент Тогда
				
			ОбщиеЯчейки = ПолучитьПолныйСписокИзмеренийЯчейки(КэшДополнительныеРеквизиты, 
																Ячейка.Строка, Ячейка.Колонка);
			Результат = "";
			Для Каждого Элемент из ОбщиеЯчейки Цикл
				Результат = Результат + ?(ПустаяСтрока(Результат), "", ",") + Элемент;
			КонецЦикла;
			Ячейка.ОбщиеИзмерения = Результат;
			
		КонецЕсли;
		
	КонецЦикла;

#КонецОбласти

	Для Каждого Ячейка из СтруктураЯчеек Цикл
		Если Ячейка.ОсновнойЭлемент Тогда
			Ячейка.СвязанныеЯчейки = СвязанныеПересчитываемыеСтроки(СтруктураЯчеек, Ячейка);
		КонецЕсли;
		Ячейка.ИндексСтроки = СтруктураЯчеек.Индекс(Ячейка);
	КонецЦикла;
	
	КолонкиТаблицыИсточников = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивКолонокТаблицыИсточников);
	КолонкиТаблицыИсточников = "Строка, Колонка" + ?(ЗначениеЗаполнено(КолонкиТаблицыИсточников), ", ", "") + КолонкиТаблицыИсточников;
	ТаблицаИсточников = СтруктураЯчеек.Скопировать(Новый Структура("ОсновнойЭлемент", Истина), КолонкиТаблицыИсточников);
	
	ТаблицаИменИсточников = СтруктураЯчеек.СкопироватьКолонки("Строка, Колонка");
	
	ТаблицаИменИсточников.Колонки.Добавить("Измерение", ТипКолонкиСтруктурыЯчеек("ИмяОперанда"));
	ТаблицаИменИсточников.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов"));
	ТаблицаИменИсточников.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаИменИсточников.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаИменИсточников.Колонки.Добавить("ИД_Источника", ТипКолонкиСтруктурыЯчеек("ИД_Источника"));
	ТаблицаИменИсточников.Индексы.Добавить("Строка, Колонка, СтатьяБюджетов, ПоказательБюджетов, НефинансовыйПоказатель, Измерение, ИД_Источника");
	
	МассивКолонокИзмерений = Новый Массив;
	Для Каждого Измерение из ОписаниеОтчета.Измерения Цикл
		МассивКолонокИзмерений.Добавить(Измерение);
	КонецЦикла;
	
	Для Каждого Измерение из ОписаниеОтчета.ВидыАналитик Цикл
		ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		МассивКолонокИзмерений.Добавить(ИмяИзмерения);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоказателиБюджетов.Ссылка,
		|	ПоказателиБюджетов.ТипПоказателя
		|ИЗ
		|	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов";
	
	РезультатЗапроса = Запрос.Выполнить();
	КэшРеквизитовПоказателя = РезультатЗапроса.Выгрузить();
	КэшРеквизитовПоказателя.Индексы.Добавить("Ссылка");
	
	ЗаполнитьТаблицуИменИсточников(МассивКолонокИзмерений, ТаблицаИменИсточников, ТаблицаИсточников, КэшРеквизитовПоказателя);
	
	ТаблицыИсточниковНФП = ЗаполнитьТаблицуИсточниковИзмеренийНФП(СтруктураЯчеек, МассивКолонокИзмерений, ИсточникиДанных, ВидБюджета);
	
	ОставшиесяКолонки = Новый Массив;
	ОставшиесяКолонки.Добавить("ИндексСтроки");
	
	Для Каждого Колонка из СтруктураЯчеек.Колонки Цикл
		Если МассивОсновныхКолонок.Найти(Колонка.Имя) = Неопределено
			И МассивКолонокТаблицыИсточников.Найти(Колонка.Имя) = Неопределено Тогда
			ОставшиесяКолонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	МассивОсновныхКолонок.Добавить("РасчетЗаполнение");
	
	МинимальнаяСтруктураЯчеек = СтруктураЯчеек.Скопировать(,СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивОсновныхКолонок));
	ПараметрыЯчеек = СтруктураЯчеек.Скопировать(,СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ОставшиесяКолонки));
	ПараметрыЯчеек.Индексы.Добавить("ИндексСтроки");
	СтруктураЯчеек = МинимальнаяСтруктураЯчеек;
	
	СтруктураЯчеек.Индексы.Добавить("ИндексСтроки");
	СтруктураЯчеек.Индексы.Добавить("ОсновнойЭлемент, Строка");
	СтруктураЯчеек.Индексы.Добавить("ОсновнойЭлемент, Строка, Колонка");
	СтруктураЯчеек.Индексы.Добавить("Строка, Колонка, ОсновнойЭлемент");
	
	Возврат Новый Структура("СтруктураЯчеек, ПараметрыЯчеек, ИсточникиЗначенийИзмерений, 
							|ЗаполнениеОтсутствующихИзмеренийНФП, ОтборИзмеренийНФП", 
							СтруктураЯчеек, ПараметрыЯчеек, ТаблицаИменИсточников, 
							ТаблицыИсточниковНФП.ТаблицаЗаполненияИзмеренийНФП, ТаблицыИсточниковНФП.ТаблицаОтбораИзмеренийНФП);
	
КонецФункции

#КонецОбласти

#Область ГенерацияСКДДляПолученияДанных

// Функция возвращает текст поля для определения аналитики по виду
//
// Параметры:
//  ИмяПараметра  - Строка - имя параметра, в котором в СКД будет передан вид аналитики
//  Префикс  - Строка - префикс имени поля
//
// Возвращаемое значение:
//   Строка   - конструкция "ВЫБОР" для подстановки в СКД или запрос для поля вида аналитики
//
Функция ПолучитьТекстПоляВидаАналитики(ИмяПараметра, Префикс = "") Экспорт
	
	ТекстЗапроса = "
	|ВЫБОР ";
	
	Для Сч = 1 по 6 Цикл
		
		ТекстЗапроса = ТекстЗапроса + 
		"
		|КОГДА " + Префикс + "СтатьяБюджетов.КоличествоИспользуемыхАналитик >= " + Сч + "
		|	И " + Префикс + "СтатьяБюджетов.ВидАналитики" + Сч + " = &" + ИмяПараметра + " ТОГДА " + Префикс + "Аналитика" + Сч;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНАЧЕ NULL КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьПоляТаблицыДанныхПоОписанию(Набор, 
								Описание, 
								ПоляРесурсов)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ФинОтчеты.НовоеПолеНабора(Набор, "ИД_Источника", , , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(30)));
	ФинОтчеты.НовоеПолеНабора(Набор, "СтатьяБюджетов", , , ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	ФинОтчеты.НовоеПолеНабора(Набор, "ПоказательБюджетов", , , ТипКолонкиСтруктурыЯчеек("ПоказательБюджетов"));
	ФинОтчеты.НовоеПолеНабора(Набор, "НефинансовыйПоказатель", , , ТипКолонкиСтруктурыЯчеек("НефинансовыйПоказатель"));
	
	Если Описание.Периодичности.Количество() Тогда
		ФинОтчеты.НовоеПолеНабора(Набор, "Период", , , Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	
	Для Каждого Измерение из Описание.Измерения Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Измерение, , , ТипКолонкиСтруктурыЯчеек(Измерение));
	КонецЦикла;
	
	Для Каждого Аналитика из Описание.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
		ТипКолонки = ТипКолонкиСтруктурыЯчеек(Аналитика, Истина);
		ЗаголовокАналитики = Строка(Аналитика);
		ФинОтчеты.НовоеПолеНабора(Набор, ИмяПоля, ИмяПоля, ЗаголовокАналитики, ТипКолонки);
	КонецЦикла;
	
	Для Каждого КлючИЗначение из ПоляРесурсов Цикл
		
		Если КлючИЗначение.Ключ = "Примечание" Тогда
			ФинОтчеты.НовоеПолеНабора(Набор, КлючИЗначение.Ключ, КлючИЗначение.Ключ, , ТипКолонкиСтруктурыЯчеек("Примечание"));
		ИначеЕсли КлючИЗначение.Ключ = "ЗначениеПоказателя" Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			МассивТипов.Добавить(Тип("Строка"));
			МассивТипов.Добавить(Тип("Булево"));
			ФинОтчеты.НовоеПолеНабора(Набор, КлючИЗначение.Ключ, КлючИЗначение.Ключ, , Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2), Новый КвалификаторыСтроки(150)));
		Иначе
			ФинОтчеты.НовоеПолеНабора(Набор, КлючИЗначение.Ключ, КлючИЗначение.Ключ, , ТипКолонкиСтруктурыЯчеек("Сумма"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьРесурсыИВычисляемыеПоля(СКД, СтруктураКолонок, ПоляИсточников, Остатки)
	
	Если СтруктураКолонок <> Неопределено Тогда
		Периодичности = Новый Массив;
		Для Каждого Периодичность из СтруктураКолонок.Периодичности Цикл
			Периодичности.Добавить("Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность));
		КонецЦикла;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ФинОтчеты.НовыйРесурс(СКД, "НомерПоПорядку", , 		"МИНИМУМ(НомерПоПорядку)");
	ФинОтчеты.НовыйРесурс(СКД, "Примечание", , 			"МАКСИМУМ(Примечание)");
	
	ПоляНабора = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
								|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
								|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляНабора, ПоляИсточников);
	
	Для Каждого КлючИЗначение из ПоляНабора Цикл
		
		Если ПоляИсточников.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ФинОтчеты.НовыйРесурс(СКД, КлючИЗначение.Ключ, , 	"СУММА(ЕстьNULL(" + КлючИЗначение.Ключ + ", 0))");
		КонецЕсли;
		
	КонецЦикла;
	
	Если Остатки Тогда
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаКонечныйОстаток", "0", , "СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0)) +
																			|СУММА(ЕстьNULL(СуммаПриход, 0)) -
																			|СУММА(ЕстьNULL(СуммаРасход, 0))");
		КонецЕсли;
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалКонечныйОстаток", "0", , "СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0)) +
																			|СУММА(ЕстьNULL(СуммаВалПриход, 0)) -
																			|СУММА(ЕстьNULL(СуммаВалРасход, 0))");
		КонецЕсли;
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоКонечныйОстаток", "0", , "СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0)) +
																				 |СУММА(ЕстьNULL(КоличествоПриход, 0)) -
																				 |СУММА(ЕстьNULL(КоличествоРасход, 0))");
		КонецЕсли;
		
	Иначе
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаКонечныйОстаток", "0", , "0");
		КонецЕсли;
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалКонечныйОстаток", "0", , "0");
		КонецЕсли;
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоКонечныйОстаток", "0", , "0");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Остатки И Периодичности.Количество() Тогда
	
		Если ПоляИсточников.Найти("СуммаНачальныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаНачальныйОстаток", , 
			"ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаПриход, 0))"",,,""Первая"",""Предыдущая""), 0) - 
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаРасход, 0))"",,,""Первая"",""Предыдущая""), 0)");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаВалНачальныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаВалНачальныйОстаток", , 
			"ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалПриход, 0))"",,,""Первая"",""Предыдущая""), 0) - 
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалРасход, 0))"",,,""Первая"",""Предыдущая""), 0)");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаКонечныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаКонечныйОстаток", ,
			"ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаПриход, 0))"",,,""Первая"",""Текущая"") - 
			|ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаРасход, 0))"",,,""Первая"",""Текущая"")");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("СуммаВалКонечныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "СуммаВалКонечныйОстаток", ,
			"ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалПриход, 0))"",,,""Первая"",""Текущая"") - 
			|ВычислитьВыражение(""СУММА(ЕстьNULL(СуммаВалРасход, 0))"",,,""Первая"",""Текущая"")");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("КоличествоНачальныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "КоличествоНачальныйОстаток", , 
			"ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоПриход, 0))"",,,""Первая"",""Предыдущая""), 0) - 
			|ЕстьNULL(ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоРасход, 0))"",,,""Первая"",""Предыдущая""), 0)");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
		
		Если ПоляИсточников.Найти("КоличествоКонечныйОстаток") <> Неопределено Тогда
			НовыйРесурс = ФинОтчеты.НовыйРесурс(СКД, "КоличествоКонечныйОстаток", ,
			"ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоНачальныйОстаток, 0))"",,,""Первая"",""Первая"") +
			|ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоПриход, 0))"",,,""Первая"",""Текущая"") - 
			|ВычислитьВыражение(""СУММА(ЕстьNULL(КоличествоРасход, 0))"",,,""Первая"",""Текущая"")");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовыйРесурс.Группировки, Периодичности);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаОборот", "0",,
		"СУММА(ЕстьNULL(СуммаПриход, 0)) - СУММА(ЕстьNULL(СуммаРасход, 0))");
	КонецЕсли;
	
	Если ПоляИсточников.Найти("СуммаВалОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "СуммаВалОборот", "0",,
		"СУММА(ЕстьNULL(СуммаВалПриход, 0)) - СУММА(ЕстьNULL(СуммаВалРасход, 0))");
	КонецЕсли;
	
	Если ПоляИсточников.Найти("КоличествоОборот") <> Неопределено Тогда
		ФинОтчеты.НовыйВычисляемыйРесурс(СКД, "КоличествоОборот", "0",,
		"СУММА(ЕстьNULL(КоличествоПриход, 0)) - СУММА(ЕстьNULL(КоличествоРасход, 0))");
	КонецЕсли;
	
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "Примечание");
	
	ПоляНабора = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
								|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
								|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход,
								|СуммаОборот, СуммаВалОборот, КоличествоОборот, 
								|СуммаКонечныйОстаток, СуммаВалКонечныйОстаток, КоличествоКонечныйОстаток");
								
	Для Каждого КлючИЗначение из ПоляНабора Цикл
		
		Если ПоляИсточников.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, КлючИЗначение.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьПодчиненныйНаборПоБюджетномуРегистру(
										СКДПлановыеДанные,
										БазовыйОбъединенныйНабор,
										Источник, СтруктураКолонокТаблицыДанных,
										Аналитики,
										ПараметрыКУстановке,
										РежимФормирования,
										ХранимыеФактическиДанные = Ложь)
	
	ДляПоказателя = Источник.ТипИсточника = "Остатки";
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ //{РАЗРЕШЕННЫЕ}
	|	""" + Источник.Идентификатор + """ КАК ИД_Источника,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов", "НЕОПРЕДЕЛЕНО") + " КАК ПоказательБюджетов,
	|	Данные.СтатьяБюджетов,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.УчитыватьПоВалюте", 
							"Данные.СтатьяБюджетов.УчитыватьПоВалюте") + " КАК УчитыватьПоВалюте,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.ВалютаОпределяетсяАналитикой", 
							"Данные.СтатьяБюджетов.ВалютаОпределяетсяАналитикой") + " КАК ВалютаОпределяетсяАналитикой,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.АдресАналитикиВалюта", 
							"Данные.СтатьяБюджетов.АдресАналитикиВалюта") + " КАК АдресАналитикиВалюта,
	|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.АналитикаВалюты.ЗаполнениеВалюты", 
							"Данные.СтатьяБюджетов.АналитикаВалюты.ЗаполнениеВалюты") + " КАК ИсточникЗаполненияВалюты,
	|";
	
	ТекстПолейКомпоновки = 
	"ВЫБРАТЬ
	|	ИД_Источника,
	|	ПоказательБюджетов.* КАК ПоказательБюджетов,
	|	СтатьяБюджетов.* КАК СтатьяБюджетов,
	|	УчитыватьПоВалюте КАК УчитыватьПоВалюте,
	|	ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
	|	АдресАналитикиВалюта КАК АдресАналитикиВалюта,
	|	ИсточникЗаполненияВалюты КАК ИсточникЗаполненияВалюты,
	|";
	
	Если СтруктураКолонокТаблицыДанных.Измерения.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + 
				?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.УчитыватьПоКоличеству", 
								"Данные.СтатьяБюджетов.УчитыватьПоКоличеству") + " КАК УчитыватьПоКоличеству,
		|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой", 
								"Данные.СтатьяБюджетов.ЕдиницаИзмеренияОпределяетсяАналитикой") + " КАК ЕдиницаИзмеренияОпределяетсяАналитикой,
		|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.АдресАналитикиКоличество", 
								"Данные.СтатьяБюджетов.АдресАналитикиКоличество") + " КАК АдресАналитикиКоличество,
		|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения", 
								"Данные.СтатьяБюджетов.АналитикаЕдиницыИзмерения.ЗаполнениеЕдиницыИзмерения") + " КАК ИсточникЗаполнениеЕдиницыИзмерения,
		|	" + ?(ДляПоказателя, "НСИ.СвязанныйПоказательБюджетов.ЕдиницаИзмерения", 
								"Данные.СтатьяБюджетов.ЕдиницаИзмерения") + " КАК ЕдиницаИзмерения,
		|";
		
		ТекстПолейКомпоновки = ТекстПолейКомпоновки +
		"	УчитыватьПоКоличеству КАК УчитыватьПоКоличеству,
		|	ЕдиницаИзмеренияОпределяетсяАналитикой КАК ЕдиницаИзмеренияОпределяетсяАналитикой,
		|	АдресАналитикиКоличество КАК АдресАналитикиКоличество,
		|	ИсточникЗаполнениеЕдиницыИзмерения КАК ИсточникЗаполнениеЕдиницыИзмерения,
		|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|";
	КонецЕсли;
	
	Если Источник.ТипИсточника = "Остатки" Тогда
		
		ТекстПоляАналитики = "ВЫБОР ";
		Для Сч = 1 по 6 Цикл
			ТекстПоляАналитики = ТекстПоляАналитики + "
			|	КОГДА НСИ.АдресТрансляцииАналитики%НомерПоля% = " + Сч + " ТОГДА
			|		Данные.Аналитика" + Сч;
		КонецЦикла;
		ТекстПоляАналитики = ТекстПоляАналитики + "
		|КОНЕЦ";
		
	КонецЕсли;
	
	Если СтруктураКолонокТаблицыДанных.Измерения.Найти("Сценарий") = Неопределено Тогда
		Если ХранимыеФактическиДанные Тогда
			ТекстЗапроса = ТекстЗапроса + "ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий,
			|";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "Сценарий,
			|";
		КонецЕсли;
		ТекстПолейКомпоновки = ТекстПолейКомпоновки + "Сценарий.* КАК Сценарий,
		|";
	КонецЕсли;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		Если Не СтрНайти(Измерение, "Аналитика") Тогда
			Если Измерение = "ЕдиницаИзмерения" Тогда
				// Единицы измерения формируются на уровне
				// общей компоновки.
			ИначеЕсли Измерение = "Сценарий" И ХранимыеФактическиДанные Тогда
				ТекстЗапроса = ТекстЗапроса + "ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий,
				|";
				ТекстПолейКомпоновки = ТекстПолейКомпоновки + "Сценарий.* КАК Сценарий,
				|";
			ИначеЕсли Измерение = "Валюта" Тогда
				ТекстЗапроса = ТекстЗапроса + "Валюта КАК ВалютаХранения,
				|";
				ТекстПолейКомпоновки = ТекстПолейКомпоновки + "ВалютаХранения,
				|";
			Иначе
				ТекстЗапроса = ТекстЗапроса + Измерение + ",
				|";
				ТекстПолейКомпоновки = ТекстПолейКомпоновки + Измерение + ".* КАК " + Измерение + ",
				|";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Для показателей выводим все аналитики для расчета валюты.
	Для Сч = 1 по 6 Цикл
		Если ДляПоказателя Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБОР 
			|	КОГДА 
			|		НЕ НСИ.ТранслироватьАналитику" + Сч + " 
			|	ТОГДА 
			|		НСИ.Аналитика" + Сч + "
			|	ИНАЧЕ 
			|		" + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) + "
			|	КОНЕЦ КАК Аналитика" + Сч + ",
			|	";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "Аналитика" + Сч + ",
			|";
		КонецЕсли;
		ТекстПолейКомпоновки = ТекстПолейКомпоновки + "Аналитика" + Сч + ".* КАК Аналитика" + Сч + ",
		|";
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		Если ХранимыеФактическиДанные Тогда
			ВыражениеПериодичности = СтрЗаменить(Источник.ВыражениеПериодаГруппировки, "ПериодПланирования", "Период");
		Иначе
			ВыражениеПериодичности = Источник.ВыражениеПериодаГруппировки;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ВыражениеПериодичности + " КАК Период,
		|	";
		
		ТекстПолейКомпоновки = ТекстПолейКомпоновки + "Период КАК Период,
		|";
		
	КонецЕсли;
	
	Для Каждого Аналитика из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		
		ИмяПараметра = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
		ПараметрыКУстановке.Вставить(ИмяПараметра, Аналитика);
		
		ТекстПоля = ПолучитьТекстПоляВидаАналитики(ИмяПараметра, "Данные.");
		
		Если Источник.ТипИсточника = "Остатки" Тогда
			ТекстПоля = СтрЗаменить(ТекстПоля, "Данные.СтатьяБюджетов.КоличествоИспользуемыхАналитик", 
												"НСИ.СвязанныйПоказательБюджетов.КоличествоИспользуемыхАналитик");
			ТекстПоля = СтрЗаменить(ТекстПоля, "Данные.СтатьяБюджетов.ВидАналитики", 
												"НСИ.СвязанныйПоказательБюджетов.ВидАналитики");
			ТекстПоля = СтрЗаменить(ТекстПоля, "Данные.Аналитика", "ДанныеАналитика");
		
			Для Сч = 1 по 6 Цикл
				ТекстПоля = СтрЗаменить(ТекстПоля, "ДанныеАналитика" + Сч, 
																	" ВЫБОР КОГДА НСИ.ТранслироватьАналитику" + Сч + 
																	" ТОГДА " + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) +
																	" ИНАЧЕ НСИ.Аналитика" + Сч + 
																	" КОНЕЦ");
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + " 
		|	" + ТекстПоля + " КАК " + ИмяПараметра + ",
		|";
		
		ТекстПолейКомпоновки = ТекстПолейКомпоновки + ИмяПараметра + " КАК " + ИмяПараметра + ",
		|";
	КонецЦикла;
	
	Если ХранимыеФактическиДанные Тогда
		ТекстПоказателя = "
		|ВЫБОР 
		|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария) ТОГДА
		|	ВЫБОР &ВалютаСценария
		|		КОГДА &ВалютаРеглУчета ТОГДА СуммаРеглОборот
		|		КОГДА &ВалютаУпрУчета ТОГДА СуммаУпрОборот
		|		ИНАЧЕ СуммаВВалютеОборот
		|	КОНЕЦ
		|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета) ТОГДА
		|	СуммаУпрОборот
		|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеРеглУчета) ТОГДА
		|	СуммаРеглОборот
		|КОНЕЦ";
		ПараметрыКУстановке.Вставить("ВалютаРегл");
		ПараметрыКУстановке.Вставить("ВалютаУпр");
		ПараметрыКУстановке.Вставить("ВалютаСценария");
	Иначе
		ТекстПоказателя = "
		|ВЫБОР 
		|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария) ТОГДА
		|	СуммаСценарияОборот
		|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета) ТОГДА
		|	СуммаУпрОборот
		|КОГДА &ВариантСумм = ЗНАЧЕНИЕ(Перечисление.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеРеглУчета) ТОГДА
		|	СуммаРеглОборот
		|КОНЕЦ";
	КонецЕсли;
	
	ПараметрыКУстановке.Вставить("ВариантСумм");
	
	Если НЕ ДляПоказателя Тогда
	
		ТекстЗапроса = ТекстЗапроса + 
		ТекстПоказателя + " КАК СуммаПриход,
		|	0 КАК СуммаРасход,
		|	СуммаВВалютеОборот КАК СуммаВалХраненияПриход,
		|	0 КАК СуммаВалХраненияРасход,
		|	КоличествоОборот КАК КоличествоПриход,
		|	0 КАК КоличествоРасход
		|";
	
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА НСИ.Коэффициент * " + ТекстПоказателя + " ИНАЧЕ 0 КОНЕЦ КАК СуммаПриход,
		|	ВЫБОР КОГДА НСИ.РАСХОД ТОГДА НСИ.Коэффициент * " + ТекстПоказателя + " ИНАЧЕ 0 КОНЕЦ КАК СуммаРасход,
		|	ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА НСИ.Коэффициент * СуммаВВалютеОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВалХраненияПриход,
		|	ВЫБОР КОГДА НСИ.РАСХОД ТОГДА НСИ.Коэффициент * СуммаВВалютеОборот ИНАЧЕ 0 КОНЕЦ КАК СуммаВалХраненияРасход,
		|	ВЫБОР КОГДА НЕ НСИ.РАСХОД ТОГДА КоличествоОборот ИНАЧЕ 0 КОНЕЦ КАК КоличествоПриход,
		|	ВЫБОР КОГДА НСИ.РАСХОД ТОГДА КоличествоОборот ИНАЧЕ 0 КОНЕЦ КАК КоличествоРасход
		|	
		|";
		
	КонецЕсли;
	
	ТекстПолейКомпоновки = ТекстПолейКомпоновки + 
	"	СуммаПриход,
	|	СуммаРасход,
	|	СуммаВалХраненияПриход,
	|	СуммаВалХраненияРасход,
	|	КоличествоПриход,
	|	КоличествоРасход
	|";
	
	ТекстЗапроса = ТекстЗапроса + "
	|//{ПоляКомпоновки}
	|
	|ИЗ 
	|";
	
	//++ НЕ УТКА
	Если ХранимыеФактическиДанные Тогда
		ПериодичностьТаблицы = "АВТО";
		Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
			ПериодичностьТаблицы = ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности));
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
			|РегистрНакопления.ФактическиеДанныеБюджетирования.Обороты(
			|		" + Источник.ВыражениеНачалоПериода + ", 
			|		" + Источник.ВыражениеКонецПериода + ", " + ПериодичностьТаблицы + ",
			|";
	Иначе
	//-- НЕ УТКА
		ТекстЗапроса = ТекстЗапроса + "
			|РегистрНакопления.ОборотыБюджетов.Обороты(
			|		{&ПустаяДата}, 
			|		{&ДатаАктуальности}, АВТО, ПериодПланирования МЕЖДУ " + Источник.ВыражениеНачалоПериода + " и " + Источник.ВыражениеКонецПериода + "
			|";
	//++ НЕ УТКА
	КонецЕсли;
	//-- НЕ УТКА
	
	Первый = ХранимыеФактическиДанные;
	Если Не ДляПоказателя
		И Источник.Объекты <> Неопределено Тогда
		
		ИмяПараметра = "ВыбранныеСтатьиБюджетов" + Источник.Идентификатор;
		ТекстЗапроса = ТекстЗапроса + ?(Первый, " ", " И ") + "СтатьяБюджетов В (&" + ИмяПараметра + ")
		|";
		Первый = Ложь;
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Источник.Объекты);
		ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
		
	КонецЕсли;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		ОтборПоИзмерениям = Неопределено;
		Если Измерение = "ЕдиницаИзмерения" Тогда
			// Единицы измерения формируются на уровне
			// общей компоновки.
			Продолжить;
		КонецЕсли;
		Если ХранимыеФактическиДанные И Измерение = "Сценарий" Тогда
			Продолжить;
		КонецЕсли;
		Если Источник.Свойство(Измерение, ОтборПоИзмерениям)
			И ЗначениеЗаполнено(ОтборПоИзмерениям) Тогда
			
			ИмяПараметра = "Выбранные" + Измерение + Источник.Идентификатор;
			ТекстЗапроса = ТекстЗапроса + ?(Первый, " ", " И ") + Измерение + " В (&" + ИмяПараметра + ")
			|";
			Первый = Ложь;
			
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ОтборПоИзмерениям);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		ОтборПоИзмерениям = Неопределено;
		ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		Если Источник.Свойство(ИмяАналитики, ОтборПоИзмерениям)
			И ЗначениеЗаполнено(ОтборПоИзмерениям) Тогда
			
			ПараметрыКУстановке.Вставить(ИмяАналитики, Измерение);
			ТекстАналитики = ПолучитьТекстПоляВидаАналитики(ИмяАналитики);
			ИмяПараметра = "Выбранные" + ИмяАналитики + Источник.Идентификатор;
			
			ТекстЗапроса = ТекстЗапроса + ?(Первый, " ", " И ") + ТекстАналитики + " В (&" + ИмяПараметра + ")
			|";
			Первый = Ложь;
			
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ОтборПоИзмерениям);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ХранимыеФактическиДанные Тогда
		ТекстЗапроса = ТекстЗапроса + 
		" {Статус.*
		|";
	КонецЕсли;
	
	СтруктураОтборов = Новый Структура("Сценарий, Организация, ВалютаХранения, Подразделение, Аналитика1,
										|Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6");
										
	Первый = ХранимыеФактическиДанные;
	Для Каждого КлючИЗначение из СтруктураОтборов Цикл
		
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, КлючИЗначение.Ключ,, Истина) Тогда
			Если ХранимыеФактическиДанные Тогда
				Если КлючИЗначение.Ключ = "Сценарий" Тогда
					ТекстЗапроса = ТекстЗапроса + ?(Первый, "{", ",") + "
					| (ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные)).* КАК " + КлючИЗначение.Ключ + "_" + Источник.Идентификатор;
					Первый = Ложь;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если КлючИЗначение.Ключ = "ВалютаХранения" Тогда
				ТекстЗапроса = ТекстЗапроса + ?(Первый, "{", ",") + "
				| Валюта.* КАК " + КлючИЗначение.Ключ + "_" + Источник.Идентификатор;
				Первый = Ложь;
				Продолжить;
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + ?(Первый, "{", ",") + "
			| " + КлючИЗначение.Ключ + ".* КАК " + КлючИЗначение.Ключ + "_" + Источник.Идентификатор;
			Первый = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Аналитика из Аналитики Цикл
		
		ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяАналитики,, Истина) Тогда
			
			ИмяПараметра = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
			ТекстЗапроса = ТекстЗапроса + ?(Первый, "{", ",") + "
			|	" + ПолучитьТекстПоляВидаАналитики(ИмяПараметра) + " КАК " + ИмяПараметра + "_" + Источник.Идентификатор;
			Первый = Ложь;
			
			ПараметрыКУстановке.Вставить(ИмяПараметра, Аналитика);
			ДобавитьПараметрСхемы(СКДПлановыеДанные, ИмяПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ?(Первый, "", "}") + ") КАК Данные
	|";
	
	Если ДляПоказателя Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиПоказателейБюджетов КАК НСИ
		|	ПО НСИ.СтатьяБюджетов = Данные.СтатьяБюджетов
		|";
		Если Источник.Объекты <> Неопределено Тогда
			
			ИмяПараметра = "ВыбранныеПоказателиБюджетов" + Источник.Идентификатор;
			ТекстЗапроса = ТекстЗапроса + "
			|И НСИ.СвязанныйПоказательБюджетов в (&" + ИмяПараметра + ")";
			
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Источник.Объекты);
			ПараметрыКУстановке.Вставить(ИмяПараметра, Список);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ХранимыеФактическиДанные И 
		(РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета) Тогда
		ТекстЗапросаИсключения = ТекстЗапроса;
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, ", АВТО ,", ", Регистратор ,");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, ТекстПоказателя, "-" + ТекстПоказателя);
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "СуммаВВалютеОборот", "-СуммаВВалютеОборот");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "КоличествоОборот", "-КоличествоОборот");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "//{ПоляКомпоновки}", "");
		ТекстЗапросаИсключения = СтрЗаменить(ТекстЗапросаИсключения, "//{РАЗРЕШЕННЫЕ}", "");
		
		ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗапросаИсключения + "
		|ГДЕ Регистратор = &Документ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{ПоляКомпоновки}", "{" + ТекстПолейКомпоновки + "}");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//{РАЗРЕШЕННЫЕ}", "РАЗРЕШЕННЫЕ");
	
	ТипИсточника = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных");
	Если ХранимыеФактическиДанные Тогда
		Имя = "Набор_Факт_Обороты_" + Источник.Идентификатор;
	Иначе
		Имя = "Набор_План_Обороты_" + Источник.Идентификатор;
	КонецЕсли;
	НаборСКД = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, ТипИсточника, Имя);
	НаборСКД.Запрос = ТекстЗапроса;
	
КонецПроцедуры

Функция УдалитьИзСтруктурыНеиспользуемыеКлючи(Структура, МассивДоступных)
	
	КУдалению = Новый Массив;
	Для Каждого КлючиИЗначение из Структура Цикл
		Если МассивДоступных.Найти(КлючиИЗначение.Ключ) = Неопределено Тогда
			КУдалению.Добавить(КлючиИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ключ из КУдалению Цикл
		Структура.Удалить(Ключ);
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСКДПлановыеДанные(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
									Аналитики, ПараметрыКУстановке, РежимФормирования)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДПлановыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДПлановыеДанные, 
													Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), 
													"Данные");
	
	ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход,
									|СуммаВалПриход, СуммаВалРасход, 
									|КоличествоПриход, КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	
	//заполнение наборов - источников данных
	Для Каждого Источник из ИсточникиДанных Цикл
		
		Если Источник.ТипИсточника = "Обороты"
			ИЛИ Источник.ТипИсточника = "Остатки" Тогда
			
			ДобавитьПодчиненныйНаборПоБюджетномуРегистру(СКДПлановыеДанные, БазовыйОбъединенныйНабор, 
														Источник, СтруктураКолонокТаблицыДанных, Аналитики, 
														ПараметрыКУстановке, РежимФормирования);
													
			ДополнительныйОтбор = Источник.ДополнительныйОтбор;
			Если ДополнительныйОтбор <> Неопределено Тогда
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтбор.Отбор, 
																	СКДПлановыеДанные.НастройкиПоУмолчанию.Отбор,
																	Истина, , 
																	"_" + Источник.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяПериода = "Неопределено";
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ИмяПериода = "Период";
	КонецЕсли;
	
	ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные, "ЕдиницаИзмерения", 
		"ВЫБОР КОГДА НЕ УчитыватьПоКоличеству ТОГДА Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ ЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА ЕдиницаИзмерения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА АдресАналитикиКоличество = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиКоличество = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиКоличество = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиКоличество = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиКоличество = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиКоличество = 6 ТОГДА Аналитика6
		|								КОНЕЦ, 
		|			ИсточникЗаполнениеЕдиницыИзмерения)
		|	КОНЕЦ");
		
	ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные, "Валюта", 
		"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
		|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА ВалютаХранения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА Аналитика6
		|								КОНЕЦ, 
		|			ИсточникЗаполненияВалюты,
		|			ВалютаХранения)
		|	КОНЕЦ");
		
		
	Если ПоляРесурсов.Свойство("СуммаВалПриход") Тогда
			
		ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные, "СуммаВалПриход", 
		"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
		|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА СуммаВалХраненияПриход
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВалХраненияПриход,
		|								" + ИмяПериода + ",
		|								ВалютаХранения,
		|								Сценарий,
		|								&ВалютаРеглУчета,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА Аналитика6
		|								КОНЕЦ,
		|								ИсточникЗаполненияВалюты)
		|	КОНЕЦ");
		
	КонецЕсли;
		
	Если ПоляРесурсов.Свойство("СуммаВалРасход") Тогда
			
		ФинОтчеты.НовоеВычисляемоеПоле(СКДПлановыеДанные, "СуммаВалРасход", 
		"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО
		|	ИЛИ (НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой) ТОГДА СуммаВалХраненияРасход
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВалХраненияРасход,
		|								" + ИмяПериода + ",
		|								ВалютаХранения,
		|								Сценарий,
		|								&ВалютаРеглУчета,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА Аналитика6
		|								КОНЕЦ,
		|								ИсточникЗаполненияВалюты)
		|	КОНЕЦ");
		
	КонецЕсли;
	
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "ВалютаРеглУчета");
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "КэшПлановыхКурсов");
	ДобавитьПараметрСхемы(СКДПлановыеДанные, "КэшЗначенийАналитик");
	
	//настройка СКД
	Для Каждого КлючИЗначение из ПоляРесурсов Цикл
		ФинОтчеты.НовыйРесурс(СКДПлановыеДанные, КлючИЗначение.Ключ, , 		"СУММА(" + КлючИЗначение.Ключ + ")");
		ФинОтчеты.НовоеПолеВыбора(СКДПлановыеДанные.НастройкиПоУмолчанию, КлючИЗначение.Ключ);
	КонецЦикла;
	
	ГруппировкаПлановых = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДПлановыеДанные, СтруктураКолонокТаблицыДанных);
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "Период");
	КонецЕсли;
	
	БюджетированиеСервер.ОтключитьВыводОбщихИтогов(СКДПлановыеДанные.НастройкиПоУмолчанию);
	
	Возврат СКДПлановыеДанные;
	
КонецФункции

//++ НЕ УТКА
Функция ПолучитьСКДФактическиеДанные(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
									Аналитики, ПараметрыКУстановке, РежимФормирования)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДФактическиеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДФактическиеДанные, 
													Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), 
													"Данные");
	
	ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход,
									|СуммаВалПриход, СуммаВалРасход, 
									|КоличествоПриход, КоличествоРасход");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	
	//заполнение наборов - источников данных
	Для Каждого Источник из ИсточникиДанных Цикл
		
		Если Не Источник.ПредполагаетФактическиеДанные Тогда
			Продолжить;
		КонецЕсли;
		
		Если Источник.ТипИсточника = "Обороты"
			ИЛИ Источник.ТипИсточника = "Остатки" Тогда
			
			ДобавитьПодчиненныйНаборПоБюджетномуРегистру(СКДФактическиеДанные, БазовыйОбъединенныйНабор, 
														Источник, СтруктураКолонокТаблицыДанных, Аналитики, 
														ПараметрыКУстановке, РежимФормирования, Истина);
													
			ДополнительныйОтбор = Источник.ДополнительныйОтбор;
			Если ДополнительныйОтбор <> Неопределено Тогда
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(ДополнительныйОтбор.Отбор, 
																	СКДФактическиеДанные.НастройкиПоУмолчанию.Отбор,
																	Истина, , 
																	"_" + Источник.Идентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяПериода = "Неопределено";
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ИмяПериода = "Период";
	КонецЕсли;
	
	ФинОтчеты.НовоеВычисляемоеПоле(СКДФактическиеДанные, "ЕдиницаИзмерения", 
		"ВЫБОР КОГДА НЕ УчитыватьПоКоличеству ТОГДА Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ ЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА ЕдиницаИзмерения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА АдресАналитикиКоличество = 1 ТОГДА Аналитика1
		|									КОГДА АдресАналитикиКоличество = 2 ТОГДА Аналитика2
		|									КОГДА АдресАналитикиКоличество = 3 ТОГДА Аналитика3
		|									КОГДА АдресАналитикиКоличество = 4 ТОГДА Аналитика4
		|									КОГДА АдресАналитикиКоличество = 5 ТОГДА Аналитика5
		|									КОГДА АдресАналитикиКоличество = 6 ТОГДА Аналитика6
		|								КОНЕЦ, 
		|			ИсточникЗаполнениеЕдиницыИзмерения)
		|	КОНЕЦ");
		
	ФинОтчеты.НовоеВычисляемоеПоле(СКДФактическиеДанные, "Валюта", "ВалютаХранения");
	
	Если ПоляРесурсов.Свойство("СуммаВалПриход") Тогда
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКДФактическиеДанные, "СуммаВалПриход", "СуммаВалХраненияПриход");
		
	КонецЕсли;
	
	Если ПоляРесурсов.Свойство("СуммаВалРасход") Тогда
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКДФактическиеДанные, "СуммаВалРасход", "СуммаВалХраненияРасход");
		
	КонецЕсли;
	
	ДобавитьПараметрСхемы(СКДФактическиеДанные, "ВалютаРеглУчета");
	ДобавитьПараметрСхемы(СКДФактическиеДанные, "КэшЗначенийАналитик");
	
	//настройка СКД
	Для Каждого КлючИЗначение из ПоляРесурсов Цикл
		ФинОтчеты.НовыйРесурс(СКДФактическиеДанные, КлючИЗначение.Ключ, , "СУММА(" + КлючИЗначение.Ключ + ")");
		ФинОтчеты.НовоеПолеВыбора(СКДФактическиеДанные.НастройкиПоУмолчанию, КлючИЗначение.Ключ);
	КонецЦикла;
	
	ГруппировкаПлановых = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДФактическиеДанные, СтруктураКолонокТаблицыДанных);
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПлановых, "Период");
	КонецЕсли;
	
	БюджетированиеСервер.ОтключитьВыводОбщихИтогов(СКДФактическиеДанные.НастройкиПоУмолчанию);
	
	Возврат СКДФактическиеДанные;
	
КонецФункции
//-- НЕ УТКА

Функция ДобавитьПоляИтоговойТаблицыПоОписанию(СКД, СтруктураКолонокТаблицыДанных)
	
	ИзмеренияРасчета = Новый Структура;
	ИзмеренияРасчета.Вставить("СтатьяБюджетов");
	ИзмеренияРасчета.Вставить("ПоказательБюджетов");
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		ИзмеренияРасчета.Вставить(Измерение);
	КонецЦикла;
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ИзмеренияРасчета.Вставить(ИмяИзмерения);
	КонецЦикла;
	
	НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, "ИД_Источника");
	
	Для Каждого КлючИЗначение из ИзмеренияРасчета Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат НоваяГруппировка;
	
КонецФункции

Функция ПолучитьСКДИтоговыеДанныеОстатки(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДИтоговыеДанные, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "Данные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход, 
									|ЗначениеПоказателя");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	ПоляРесурсов.Вставить("ИндексНФП"); 
	
	БазовыйОбъединенныйНабор.ИмяОбъекта = "ПредварительныйРасчет";
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ТипизироватьКолонкиАналитики(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	
	Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
		ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "РедактируемоеЗначение",,,ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	КонецЕсли;
	
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных, ПоляИсточников, Истина);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	Если ПоляРесурсов.Свойство("ЗначениеПоказателя") Тогда
		ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ЗначениеПоказателя",  , "МАКСИМУМ(ЗначениеПоказателя)");
		ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ЗначениеПоказателя");
	КонецЕсли;
	ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ИндексНФП", , "МАКСИМУМ(ИндексНФП)");
	ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ИндексНФП");
	
	Периодичности = Перечисления.Периодичность.УпорядоченныеПериодичности(Истина);
	Периодичности.Сортировать("Порядок УБЫВ");
	
	Для Каждого СтрокаПериодичности из Периодичности Цикл
		
		Измерение = СтрокаПериодичности.Периодичность;
		
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмерениеСтрокой = ОбщегоНазначения.ИмяЗначенияПеречисления(Измерение);
		Период = "Период" + ИзмерениеСтрокой;
		
		НовоеВычисляемоеПоле = СКДИтоговыеДанные.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = Период;
		Если Измерение = Перечисления.Периодичность.Неделя Тогда
			НовоеВычисляемоеПоле.Выражение = "ВЫБОР КОГДА
											|	НАЧАЛОПЕРИОДА(Период, """ + ИзмерениеСтрокой + """) < &НачалоПериода ТОГДА
											|		&НачалоПериода
											|	ИНАЧЕ
											|		НАЧАЛОПЕРИОДА(Период, """ + ИзмерениеСтрокой + """)
											|	КОНЕЦ";
			ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		Иначе
			НовоеВычисляемоеПоле.Выражение = "НАЧАЛОПЕРИОДА(Период, """ + ИзмерениеСтрокой + """)";
		КонецЕсли;
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата");
		
		ГруппировкаПериода = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, Период);
		ТекущийИндекс = Периодичности.Индекс(СтрокаПериодичности);
		ВГраница = ТекущийИндекс - 1;
		Для Сч = 0 ПО ВГраница Цикл
			Измерение = Периодичности[ВГраница - Сч].Периодичность;
			Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Период = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Измерение);
			ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПериода, Период);
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
		
		Порядок = СКДИтоговыеДанные.НастройкиПоУмолчанию.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Поле = Новый ПолеКомпоновкиДанных("Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность));
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Порядок.Использование = Истина;
		
		ФинОтчеты.УстановитьОтбор(СКДИтоговыеДанные.НастройкиПоУмолчанию.Отбор, "Период", , ВидСравненияКомпоновкиДанных.Заполнено);
		
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСКДИтоговыеДанныеОбороты(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, ЕстьХранимыеПравила)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДИтоговыеДанные, Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), "Данные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход,
									|ЗначениеПоказателя");
	
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ТипизироватьКолонкиАналитики(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);

	Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
		ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "РедактируемоеЗначение",,,ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	КонецЕсли;
	
	ПлановыеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ПлановыеДанные");
	ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход,
									|СуммаВалПриход, СуммаВалРасход,
									|КоличествоПриход, КоличествоРасход");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	ДобавитьПоляТаблицыДанныхПоОписанию(ПлановыеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ПлановыеДанные.ИмяОбъекта = "ПлановыеДанные";
	
	Если ЕстьХранимыеПравила Тогда
		
		ХранимыеФактическиеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ХранимыеФактическиеДанные");
		ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход,
										|СуммаВалПриход, СуммаВалРасход,
										|КоличествоПриход, КоличествоРасход");
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
		ДобавитьПоляТаблицыДанныхПоОписанию(ХранимыеФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		ХранимыеФактическиеДанные.ИмяОбъекта = "ХранимыеФактическиеДанные";
		
	КонецЕсли;
	
	ФактическиеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ФактическиеДанные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход, ЗначениеПоказателя");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("ИндексНФП"); 
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ФактическиеДанные.ИмяОбъекта = "ФактическиеДанные";
	
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных, ПоляИсточников, Ложь);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	Если ПоляРесурсов.Свойство("ЗначениеПоказателя") Тогда
		ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ЗначениеПоказателя",  , "МАКСИМУМ(ЗначениеПоказателя)");
		ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ЗначениеПоказателя");
	КонецЕсли;
	ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ИндексНФП", , "МАКСИМУМ(ИндексНФП)");
	ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ИндексНФП");
	
	Периодичности = Перечисления.Периодичность.УпорядоченныеПериодичности(Истина);
	Периодичности.Сортировать("Порядок УБЫВ");
	
	Для Каждого СтрокаПериодичности из Периодичности Цикл
		
		Измерение = СтрокаПериодичности.Периодичность;
		Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмерениеСтрокой = ОбщегоНазначения.ИмяЗначенияПеречисления(Измерение);
		Период = "Период" + ИзмерениеСтрокой;
		
		НовоеВычисляемоеПоле = СКДИтоговыеДанные.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = Период;
		Если Измерение = Перечисления.Периодичность.Неделя Тогда
			НовоеВычисляемоеПоле.Выражение = "ВЫБОР КОГДА
											|	НАЧАЛОПЕРИОДА(Период, """ + ИзмерениеСтрокой + """) < &НачалоПериода ТОГДА
											|		&НачалоПериода
											|	ИНАЧЕ
											|		НАЧАЛОПЕРИОДА(Период, """ + ИзмерениеСтрокой + """)
											|	КОНЕЦ";
			ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		Иначе
			НовоеВычисляемоеПоле.Выражение = "НАЧАЛОПЕРИОДА(Период, """ + ИзмерениеСтрокой + """)";
		КонецЕсли;
		НовоеВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата");
		
		ГруппировкаПериода = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, Период);
		ТекущийИндекс = Периодичности.Индекс(СтрокаПериодичности);
		ВГраница = ТекущийИндекс - 1;
		Для Сч = 0 ПО ВГраница Цикл
			Измерение = Периодичности[ВГраница - Сч].Периодичность;
			Если СтруктураКолонокТаблицыДанных.Периодичности.Найти(Измерение) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Период = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Измерение);
			ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПериода, Период);
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		ФинОтчеты.УстановитьОтбор(СКДИтоговыеДанные.НастройкиПоУмолчанию.Отбор, "Период", , ВидСравненияКомпоновкиДанных.Заполнено);
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСКДПредварительныйИтоговыйРасчет(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, ЕстьХранимыеПравила)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДИтоговыеДанные = ФинОтчеты.НоваяСхема();
	
	БазовыйОбъединенныйНабор = ФинОтчеты.НовыйНабор(СКДИтоговыеДанные, Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), "Данные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход,
									|ЗначениеПоказателя");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(БазовыйОбъединенныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
		ФинОтчеты.НовоеПолеНабора(БазовыйОбъединенныйНабор, "РедактируемоеЗначение",,,ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	КонецЕсли;
	
	ПлановыеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ПлановыеДанные");
	ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход, 
									|СуммаВалПриход, СуммаВалРасход, 
									|КоличествоПриход, КоличествоРасход");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ПлановыеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ПлановыеДанные.ИмяОбъекта = "ПлановыеДанные";
	
	ФактическиеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ФактическиеДанные");
	ПоляРесурсов = Новый Структура("СуммаНачальныйОстаток, СуммаПриход, СуммаРасход,
									|СуммаВалНачальныйОстаток, СуммаВалПриход, СуммаВалРасход,
									|КоличествоНачальныйОстаток, КоличествоПриход, КоличествоРасход, ЗначениеПоказателя");
	УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
	ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
	ПоляРесурсов.Вставить("ИндексНФП"); 
	
	ДобавитьПоляТаблицыДанныхПоОписанию(ФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
	ФактическиеДанные.ИмяОбъекта = "ФактическиеДанные";
	
	Если ЕстьХранимыеПравила Тогда
		
		ХранимыеФактическиеДанные = ФинОтчеты.НовыйНабор(БазовыйОбъединенныйНабор, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ХранимыеФактическиеДанные");
		ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход,
										|СуммаВалПриход, СуммаВалРасход,
										|КоличествоПриход, КоличествоРасход");
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание");
		
		ДобавитьПоляТаблицыДанныхПоОписанию(ХранимыеФактическиеДанные, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		ХранимыеФактическиеДанные.ИмяОбъекта = "ХранимыеФактическиеДанные";
		
	КонецЕсли;
	
	ДобавитьРесурсыИВычисляемыеПоля(СКДИтоговыеДанные, Неопределено, ПоляИсточников, Ложь);
	
	НоваяГруппировка = ДобавитьПоляИтоговойТаблицыПоОписанию(СКДИтоговыеДанные, СтруктураКолонокТаблицыДанных);
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(НоваяГруппировка, "НефинансовыйПоказатель");
	Если ПоляРесурсов.Свойство("ЗначениеПоказателя") Тогда
		ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ЗначениеПоказателя",  , "МАКСИМУМ(ЗначениеПоказателя)");
		ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ЗначениеПоказателя");
	КонецЕсли;
	ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ИндексНФП", , "МАКСИМУМ(ИндексНФП)");
	ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ИндексНФП");
	
	Если СтруктураКолонокТаблицыДанных.Периодичности.Количество() Тогда
		
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
		
		ГруппировкаПериод = ФинОтчеты.НоваяГруппировка(НоваяГруппировка.Структура, "Период");
		НовоеПоле = ГруппировкаПериод.ПоляГруппировки.Элементы[0];
		НовоеПоле.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность)];
		НовоеПоле.НачалоПериода = Новый ПолеКомпоновкиДанных("ПараметрыДанных.НачалоПериода");
		НовоеПоле.КонецПериода 	= Новый ПолеКомпоновкиДанных("ПараметрыДанных.КонецПериода");
		
		ДобавитьПараметрСхемы(СКДИтоговыеДанные, "НачалоПериода");
		ДобавитьПараметрСхемы(СКДИтоговыеДанные, "КонецПериода");
		
		Порядок = СКДИтоговыеДанные.НастройкиПоУмолчанию.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Порядок.Поле = Новый ПолеКомпоновкиДанных("Период");
		Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Порядок.Использование = Истина;
		
	КонецЕсли;
	
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																				РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКДИтоговыеДанные;
	
КонецФункции

Функция ПолучитьСКДДокумента(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
												Аналитики, АналитикиШапки, ПараметрыКУстановке, СКДИтоговыеДанные)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКДДанныеДокумента = Новый Структура;
	
	//данные документа состоят из многих СКД, результаты которой должны быть объединены в итоговой
	Для Каждого Источник из ИсточникиДанных Цикл
		
		Если Источник.ТипИсточника = "Нефинансовый" Тогда
			//данными документа дополняются источники остатков и оборотов
			Продолжить;
		КонецЕсли;
		
		Если Источник.ТипИсточника = "РедактируемоеЗначение" Тогда
			СКДДокументаПоИсточнику = ПолучитьСКДЗначенийДокумента(Источник, СтруктураКолонокТаблицыДанных, 
																Аналитики, АналитикиШапки, ПараметрыКУстановке);
		Иначе
			СКДДокументаПоИсточнику = ПолучитьСКДДанныхДокумента(Источник, СтруктураКолонокТаблицыДанных, 
																Аналитики, АналитикиШапки, ПараметрыКУстановке);
		КонецЕсли;
		
		Имя = "ДанныеДокумента_" + Источник.Идентификатор;
		СКДДанныеДокумента.Вставить(Имя, СКДДокументаПоИсточнику);
		
		ПодчиненныйНабор = ФинОтчеты.НовыйНабор(СКДИтоговыеДанные.НаборыДанных[0], Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), Имя);
		ПоляРесурсов = Новый Структура("СуммаПриход, СуммаРасход, 
										|СуммаВалПриход, СуммаВалРасход, 
										|КоличествоПриход, КоличествоРасход, ЗначениеПоказателя");
		
		УдалитьИзСтруктурыНеиспользуемыеКлючи(ПоляРесурсов, ПоляИсточников);
		ПоляРесурсов.Вставить("НомерПоПорядку"); ПоляРесурсов.Вставить("Примечание"); ПоляРесурсов.Вставить("ФлагВыводитьВсегда");
		
		ДобавитьПоляТаблицыДанныхПоОписанию(ПодчиненныйНабор, СтруктураКолонокТаблицыДанных, ПоляРесурсов);
		Если Источник.ТипИсточника = "РедактируемоеЗначение" Тогда
			ФинОтчеты.НовоеПолеНабора(ПодчиненныйНабор, "РедактируемоеЗначение");
		КонецЕсли;
		
		ПодчиненныйНабор.ИмяОбъекта = Имя;
		
	КонецЦикла;
	
	ФинОтчеты.НовыйРесурс(СКДИтоговыеДанные, "ФлагВыводитьВсегда");
	ФинОтчеты.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ФлагВыводитьВсегда");
	
	Возврат СКДДанныеДокумента;
	
КонецФункции

Процедура ДобавитьПараметрСхемы(СКД, Имя) Экспорт
	
	Если СКД.Параметры.Найти(Имя) = Неопределено Тогда
		НовыйПараметр = СКД.Параметры.Добавить();
		НовыйПараметр.Имя = Имя;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСКДДанныхДокумента(Источник, СтруктураКолонокТаблицыДанных, Аналитики, АналитикиШапки, ПараметрыКУстановке)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКД = ФинОтчеты.НоваяСхема();
	
	НаборАналитика = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭкземплярБюджета_Аналитика");
	НаборСуммы = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭкземплярБюджета_Суммы");
	
	НаборАналитика.ИмяОбъекта = "ЭкземплярБюджета_Аналитика";
	НаборСуммы.ИмяОбъекта = "ЭкземплярБюджета_Суммы";
	
	Связь = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Суммы";
	Связь.НаборДанныхПриемник = "ЭкземплярБюджета_Аналитика";
	Связь.ВыражениеИсточник = "ИдентификаторСтроки";
	Связь.ВыражениеПриемник = "ИдентификаторСтроки";
	
	ЕстьВидыНоменклатуры = 
		СтруктураКолонокТаблицыДанных.ВидыАналитик.Количество()
		ИЛИ СтруктураКолонокТаблицыДанных.Измерения.Найти("ЕдиницаИзмерения") <> Неопределено;
		
	Если Не ЕстьВидыНоменклатуры Тогда
		
		Для Каждого Аналитика из Аналитики Цикл
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
			Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяАналитики,, Истина) Тогда
				ЕстьВидыНоменклатуры = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьВидыНоменклатуры Тогда
		
		НаборПараметрыСтатей = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "КэшПараметровСтатей");
		НаборПараметрыСтатей.ИмяОбъекта = "КэшПараметровСтатей";
		
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяБюджетов");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "КоличествоИспользуемыхАналитик");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики1");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики2");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики3");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики4");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики5");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "ВидАналитики6");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяУчитыватьПоКоличеству");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяЕдиницаИзмеренияОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяАдресАналитикиКоличество");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяИсточникЗаполнениеЕдиницыИзмерения");
		ФинОтчеты.НовоеПолеНабора(НаборПараметрыСтатей, "СтатьяЕдиницаИзмерения");
		
		Связь = СКД.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Аналитика";
		Связь.НаборДанныхПриемник = "КэшПараметровСтатей";
		Связь.ВыражениеИсточник = "СтатьяБюджетов";
		Связь.ВыражениеПриемник = "СтатьяБюджетов";
		
	КонецЕсли;
	
	Если Источник.ТипИсточника = "Остатки" Тогда
		
		НаборСвязи = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "НастройкиСвязей");
		НаборСвязи.ИмяОбъекта = "НастройкиСвязей";
		
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Расход");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Коэффициент");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "СтатьяБюджетов", "СтатьяБюджетовСвязи");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательБюджетов");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательКоличествоИспользуемыхАналитик");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "УчитыватьПоВалюте");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "АдресАналитикиВалюта");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ИсточникЗаполненияВалюты");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ВалютаОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательУчитыватьПоКоличеству");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательЕдиницаИзмеренияОпределяетсяАналитикой");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательАдресАналитикиКоличество");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательИсточникЗаполнениеЕдиницыИзмерения");
		ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательЕдиницаИзмерения");
		
		Для Сч = 1 По 6 Цикл
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "Аналитика" + Сч, "ПоказательАналитика" + Сч);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ТранслироватьАналитику" + Сч);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "АдресТрансляцииАналитики" + Сч);
			ФинОтчеты.НовоеПолеНабора(НаборСвязи, "ПоказательВидАналитики" + Сч);
			
			ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Аналитика" + Сч, "СтатьяАналитика" + Сч);
		КонецЦикла;
	
		Связь = СКД.СвязиНаборовДанных.Добавить();
		Если ЕстьВидыНоменклатуры Тогда
			Связь.НаборДанныхИсточник = "КэшПараметровСтатей";
		Иначе
			Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Аналитика";
		КонецЕсли;
		Связь.НаборДанныхПриемник = "НастройкиСвязей";
		Связь.ВыражениеИсточник = "СтатьяБюджетов";
		Связь.ВыражениеПриемник = "СтатьяБюджетовСвязи";
		
		ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.Заполнено);
		
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Валюта", "ВалютаХранения");
		
	Иначе
		
		Для Сч = 1 По 6 Цикл
			ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Аналитика" + Сч);
		КонецЦикла;
		
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Валюта");
		
	КонецЕсли;
	
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "СтатьяБюджетов", , , ТипКолонкиСтруктурыЯчеек("СтатьяБюджетов"));
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ПериодПланирования", , , Новый ОписаниеТипов("Дата"));
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Примечание");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Количество");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Сумма");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "СуммаВВалюте");
	
	Если Источник.ТипИсточника = "Остатки" Тогда
		
		ТекстПоляАналитики = "ВЫБОР ";
		Для Сч = 1 по 6 Цикл
			ТекстПоляАналитики = ТекстПоляАналитики + "
			|	КОГДА АдресТрансляцииАналитики%НомерПоля% = " + Сч + " ТОГДА
			|		СтатьяАналитика" + Сч;
		КонецЦикла;
		ТекстПоляАналитики = ТекстПоляАналитики + "
		|КОНЕЦ";
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоПриход", "ВЫБОР КОГДА НЕ Расход ТОГДА Количество ИНАЧЕ 0 КОНЕЦ");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоРасход", "ВЫБОР КОГДА Расход ТОГДА Количество ИНАЧЕ 0 КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаПриход", "ВЫБОР КОГДА НЕ Расход ТОГДА Коэффициент * Сумма ИНАЧЕ 0 КОНЕЦ");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаРасход", "ВЫБОР КОГДА Расход ТОГДА Коэффициент * Сумма ИНАЧЕ 0 КОНЕЦ");
		
		ТекстыАналитик = Новый Соответствие;
		Для Сч = 1 По 6 Цикл
			
			ТекстАналитики = "ВЫБОР КОГДА ТранслироватьАналитику" + Сч + 
											" ТОГДА " + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) +
											" ИНАЧЕ ПоказательАналитика" + Сч + 
											" КОНЕЦ";
			
			ФинОтчеты.НовоеВычисляемоеПоле(СКД, "Аналитика" + Сч, ТекстАналитики);
			ТекстыАналитик.Вставить(Сч, ТекстАналитики);
			
		КонецЦикла;
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "ЕдиницаИзмерения", 
		"ВЫБОР КОГДА НЕ ПоказательУчитыватьПоКоличеству ТОГДА Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ ПоказательЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА ПоказательЕдиницаИзмерения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА ПоказательАдресАналитикиКоличество = 1 ТОГДА " + ТекстыАналитик[1] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 2 ТОГДА " + ТекстыАналитик[2] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 3 ТОГДА " + ТекстыАналитик[3] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 4 ТОГДА " + ТекстыАналитик[4] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 5 ТОГДА " + ТекстыАналитик[5] + "
		|									КОГДА ПоказательАдресАналитикиКоличество = 6 ТОГДА " + ТекстыАналитик[6] + "
		|								КОНЕЦ, 
		|			ПоказательИсточникЗаполнениеЕдиницыИзмерения)
		|	КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "Валюта", 
		"ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА ВалютаХранения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА " + ТекстыАналитик[1] + "
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА " + ТекстыАналитик[2] + "
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА " + ТекстыАналитик[3] + "
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА " + ТекстыАналитик[4] + "
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА " + ТекстыАналитик[5] + "
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА " + ТекстыАналитик[6] + "
		|								КОНЕЦ, 
		|			ИсточникЗаполненияВалюты,
		|			ВалютаХранения)
		|	КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалПриход", 
		"ВЫБОР КОГДА НЕ Расход ТОГДА Коэффициент * 
		|	ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА СуммаВВалюте
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВВалюте,
		|								ПериодПланирования,
		|								ВалютаХранения,
		|								&Документ_Сценарий,
		|								&ВалютаРеглУчета,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА " + ТекстыАналитик[1] + "
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА " + ТекстыАналитик[2] + "
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА " + ТекстыАналитик[3] + "
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА " + ТекстыАналитик[4] + "
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА " + ТекстыАналитик[5] + "
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА " + ТекстыАналитик[6] + "
		|								КОНЕЦ,
		|								ИсточникЗаполненияВалюты)
		|	КОНЕЦ
		|КОНЕЦ");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалРасход", 
		"ВЫБОР КОГДА Расход ТОГДА Коэффициент * 
		|	ВЫБОР КОГДА НЕ УчитыватьПоВалюте ИЛИ НЕ ВалютаОпределяетсяАналитикой ТОГДА СуммаВВалюте
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ПересчитатьПоКурсу(
		|								СуммаВВалюте
		|								ПериодПланирования,
		|								ВалютаХранения,
		|								&Документ_Сценарий,
		|								&ВалютаРеглУчета,
		|								&КэшПлановыхКурсов,
		|								&КэшЗначенийАналитик,
		|								ВЫБОР КОГДА АдресАналитикиВалюта = 1 ТОГДА " + ТекстыАналитик[1] + "
		|									КОГДА АдресАналитикиВалюта = 2 ТОГДА " + ТекстыАналитик[2] + "
		|									КОГДА АдресАналитикиВалюта = 3 ТОГДА " + ТекстыАналитик[3] + "
		|									КОГДА АдресАналитикиВалюта = 4 ТОГДА " + ТекстыАналитик[4] + "
		|									КОГДА АдресАналитикиВалюта = 5 ТОГДА " + ТекстыАналитик[5] + "
		|									КОГДА АдресАналитикиВалюта = 6 ТОГДА " + ТекстыАналитик[6] + "
		|								КОНЕЦ,
		|								ИсточникЗаполненияВалюты)
		|	КОНЕЦ
		|КОНЕЦ");
		
		ДобавитьПараметрСхемы(СКД, "ВалютаРеглУчета");
		ДобавитьПараметрСхемы(СКД, "КэшПлановыхКурсов");
		ДобавитьПараметрСхемы(СКД, "КэшЗначенийАналитик");
		
	Иначе
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "ЕдиницаИзмерения", 
		"ВЫБОР КОГДА НЕ СтатьяУчитыватьПоКоличеству ТОГДА Значение(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОГДА НЕ СтатьяЕдиницаИзмеренияОпределяетсяАналитикой ТОГДА СтатьяЕдиницаИзмерения
		|	ИНАЧЕ
		|		БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
		|			&КэшЗначенийАналитик, ВЫБОР КОГДА СтатьяАдресАналитикиКоличество = 1 ТОГДА Аналитика1
		|									КОГДА СтатьяАдресАналитикиКоличество = 2 ТОГДА Аналитика2
		|									КОГДА СтатьяАдресАналитикиКоличество = 3 ТОГДА Аналитика3
		|									КОГДА СтатьяАдресАналитикиКоличество = 4 ТОГДА Аналитика4
		|									КОГДА СтатьяАдресАналитикиКоличество = 5 ТОГДА Аналитика5
		|									КОГДА СтатьяАдресАналитикиКоличество = 6 ТОГДА Аналитика6
		|								КОНЕЦ, 
		|			СтатьяИсточникЗаполнениеЕдиницыИзмерения)
		|	КОНЕЦ");
		
		ДобавитьПараметрСхемы(СКД, "КэшЗначенийАналитик");
		
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаПриход", "Сумма");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаРасход", "0");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалПриход", "СуммаВВалюте");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "СуммаВалРасход", "0");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоПриход", "Количество");
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, "КоличествоРасход", "0");
		
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "ИД_Источника";
	НовоеВычисляемоеПоле.Выражение = """" + Источник.Идентификатор + """";
	
	Группировка = ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, "ИД_Источника");
	Если Источник.ТипИсточника = "Остатки" Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "ПоказательБюджетов");
	КонецЕсли;
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "СтатьяБюджетов");
	
	Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
		
		Если Не СтрНайти(Измерение, "Аналитика")
			И Не Измерение = "Валюта"
			И Не Измерение = "ЕдиницаИзмерения" Тогда
			
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = Измерение;
			НовоеВычисляемоеПоле.Выражение = "&Документ_" + Измерение;
			ДобавитьПараметрСхемы(СКД, "Документ_" + Измерение);
			
		КонецЕсли;
		
		ФинОтчеты.НовоеПолеГруппировки(Группировка, Измерение);
		
	КонецЦикла;
	
	Для Каждого ВидАналитики из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		Если АналитикиШапки.Найти(ВидАналитики) = Неопределено Тогда
		
			ТекстПоля = ПолучитьТекстПоляВидаАналитики(ИмяПоля);
			ТекстПоля = СтрЗаменить(ТекстПоля, "СтатьяБюджетов.", "");
			
			Если Источник.ТипИсточника = "Остатки" Тогда
				
				ТекстПоля = СтрЗаменить(ТекстПоля, "КоличествоИспользуемыхАналитик", "ПоказательКоличествоИспользуемыхАналитик");
				ТекстПоля = СтрЗаменить(ТекстПоля, "ВидАналитики", "ПоказательВидАналитики");
				Для Сч = 1 по 6 Цикл
					ТекстПоля = СтрЗаменить(ТекстПоля, " Аналитика" + Сч, " ВЫБОР КОГДА ТранслироватьАналитику" + Сч + 
																		" ТОГДА " + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) +
																		" ИНАЧЕ ПоказательАналитика" + Сч + 
																		" КОНЕЦ");
				КонецЦикла;
				
			КонецЕсли;
		
		Иначе
			
			ТекстПоля = "&Документ_" + ИмяПоля;
			
		КонецЕсли;
		
		НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = ИмяПоля;
		НовоеВычисляемоеПоле.Выражение = ТекстПоля;
		
		ДобавитьПараметрСхемы(СКД, ИмяПоля);
		ПараметрыКУстановке.Вставить(ИмяПоля, ВидАналитики);
		
		ФинОтчеты.НовоеПолеГруппировки(Группировка, ИмяПоля);
		
	КонецЦикла;
	
	СтруктураОтборов = Новый Структура("Сценарий, Организация, Подразделение, Аналитика1,
										|Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6");
	
	Для Каждого КлючИЗначение из СтруктураОтборов Цикл
		
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, КлючИЗначение.Ключ, , Истина)
			И СтруктураКолонокТаблицыДанных.Измерения.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			
			Измерение = КлючИЗначение.Ключ;
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = Измерение;
			НовоеВычисляемоеПоле.Выражение = "&Документ_" + Измерение;
			ДобавитьПараметрСхемы(СКД, "Документ_" + Измерение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Аналитика из Аналитики Цикл
		
		ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
		Если НайтиОтборПоИмени(Источник.ДополнительныйОтбор, ИмяАналитики, , Истина)
			И СтруктураКолонокТаблицыДанных.ВидыАналитик.Найти(Аналитика) = Неопределено Тогда
			
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
			
			Если АналитикиШапки.Найти(Аналитика) = Неопределено Тогда
			
				ТекстПоля = ПолучитьТекстПоляВидаАналитики(ИмяПоля);
				ТекстПоля = СтрЗаменить(ТекстПоля, "СтатьяБюджетов.", "");
				
				Если Источник.ТипИсточника = "Остатки" Тогда
					
					ТекстПоля = СтрЗаменить(ТекстПоля, "КоличествоИспользуемыхАналитик", "ПоказательКоличествоИспользуемыхАналитик");
					ТекстПоля = СтрЗаменить(ТекстПоля, "ВидАналитики", "ПоказательВидАналитики");
					Для Сч = 1 по 6 Цикл
						ТекстПоля = СтрЗаменить(ТекстПоля, " Аналитика" + Сч, " ВЫБОР КОГДА ТранслироватьАналитику" + Сч + 
																			" ТОГДА " + СтрЗаменить(ТекстПоляАналитики, "%НомерПоля%", Сч) +
																			" ИНАЧЕ ПоказательАналитика" + Сч + 
																			" КОНЕЦ");
					КонецЦикла;
					
				КонецЕсли;
			
				ДобавитьПараметрСхемы(СКД, ИмяПоля);
				ПараметрыКУстановке.Вставить(ИмяПоля, Аналитика);
				
			Иначе
				
				ТекстПоля = "&Документ_" + ИмяПоля;
				ДобавитьПараметрСхемы(СКД, "Документ_" + ИмяПоля);
				
			КонецЕсли;
		
			НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
			НовоеВычисляемоеПоле.ПутьКДанным = ИмяПоля;
			НовоеВычисляемоеПоле.Выражение = ТекстПоля;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "Период";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "ПериодПланирования";
	Иначе
		//Если нет измерения период - тогда периодом данных считается начало периода документа
		Если ВРЕГ(Источник.ВыражениеПериодаГруппировки) = "НЕОПРЕДЕЛЕНО" ТОГДА
			НовоеВычисляемоеПоле.Выражение = "&НачалоПериода";
		Иначе
			НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеПериодаГруппировки);
		КонецЕсли;
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "НачалоПериода";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "&НачалоПериода";
	Иначе
		НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеНачалоПериода);
	КонецЕсли;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "КонецПериода";
	Если Источник.Идентификатор = "Документ" Тогда
		НовоеВычисляемоеПоле.Выражение = "&КонецПериода";
	Иначе
		НовоеВычисляемоеПоле.Выражение = БюджетированиеСервер.ПреобразоватьВВыражениеСКД(Источник.ВыражениеКонецПериода);
	КонецЕсли;
	
	Если МинимальнаяПериодичность <> Неопределено Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "Период");
	КонецЕсли;
	
	ФинОтчеты.НовыйРесурс(СКД, "СуммаПриход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаРасход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаВалПриход");
	ФинОтчеты.НовыйРесурс(СКД, "СуммаВалРасход");
	ФинОтчеты.НовыйРесурс(СКД, "КоличествоПриход");
	ФинОтчеты.НовыйРесурс(СКД, "КоличествоРасход");
	ФинОтчеты.НовыйРесурс(СКД, "НомерПоПорядку", "МИНИМУМ");
	ФинОтчеты.НовыйРесурс(СКД, "Примечание", "МАКСИМУМ");
	
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаВалПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "СуммаВалРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "КоличествоПриход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "КоличествоРасход");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "Примечание");
	
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																	РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																	РасположениеИтоговКомпоновкиДанных.Нет);
	
	Если Источник.Идентификатор <> "Документ" Тогда
		
		Если Источник.ТипИсточника = "Обороты" Тогда
			Если Источник.Объекты.Количество() Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, "СтатьяБюджетов", 
											МассивВСписок(Источник.Объекты), ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		ИначеЕсли Источник.ТипИсточника = "Остатки" Тогда
			Если Источник.Объекты.Количество() Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, "ПоказательБюджетов", 
											МассивВСписок(Источник.Объекты), ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		КонецЕсли;
		
		//Отбор по периоду
		ЗначениеОтбора = Новый ПолеКомпоновкиДанных("НачалоПериода");
		Отбор = ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "Период", ЗначениеОтбора);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		
		ЗначениеОтбора = Новый ПолеКомпоновкиДанных("КонецПериода");
		Отбор = ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "Период", ЗначениеОтбора);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		
		ДобавитьПараметрСхемы(СКД, "НачалоПериода");
		ДобавитьПараметрСхемы(СКД, "КонецПериода");
		ДобавитьПараметрСхемы(СКД, "ГраницаФактДанных");
		
		Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
			
			ДополнительныйФильтр = Неопределено;
			Если Источник.Свойство(Измерение, ДополнительныйФильтр) Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, Измерение, 
											МассивВСписок(ДополнительныйФильтр), ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Измерение из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
			ДополнительныйФильтр = Неопределено;
			Если Источник.Свойство(ИмяПоля, ДополнительныйФильтр) Тогда
				ФинОтчеты.УстановитьОтбор(СКД.НастройкиПоУмолчанию.Отбор, ИмяПоля, 
											МассивВСписок(ДополнительныйФильтр), ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
			
		КонецЦикла;
		
		ДополнительныйОтбор = Источник.ДополнительныйОтбор;
		Если ДополнительныйОтбор <> Неопределено Тогда
			ФинОтчеты.СкопироватьОтбор(ДополнительныйОтбор.Отбор, СКД.НастройкиПоУмолчанию.Отбор, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СКД;
	
КонецФункции

Функция ПолучитьСКДПоОписаниюИсточников(ВидБюджета, СтруктураОписанияОтчета, СтруктураКолонокТаблицыДанных, РежимФормирования)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшСхемыКомпоновки, ХранилищеКэшаСхемыКомпоновки");
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
		Постфикс = "Отчет";	
	ИначеЕсли РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		Постфикс = "Заполнение";	
	Иначе // Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		Постфикс = "Документ";
	КонецЕсли; 
	
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	Если ЗначенияКэша.СформированКэшСхемыКомпоновки = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаСхемыКомпоновки.Получить();
	КонецЕсли;
	
	ИсточникиДанных = СтруктураОписанияОтчета.ИсточникиДанных;
	ПоляИсточников = СтруктураОписанияОтчета.ПоляИсточников;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АналитикиСтатейБюджетов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов";

	Аналитики = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыБюджетовАналитикиШапки.ВидАналитики
		|ИЗ
		|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
		|ГДЕ
		|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	АналитикиШапки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидАналитики");
	
	ЕстьОстатки = Ложь; ЕстьХранимыеПравила = Ложь;
	Для Каждого Источник из ИсточникиДанных Цикл
		ЕстьОстатки = ЕстьОстатки ИЛИ Источник.ТипИсточника = "Остатки";
		ЕстьХранимыеПравила = ЕстьХранимыеПравила ИЛИ Источник.ЕстьХранимыеПравила;
		Если ЕстьОстатки И ЕстьХранимыеПравила Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКУстановке = Новый Структура;
	
	СКДПлановыеДанные = ПолучитьСКДПлановыеДанные(ИсточникиДанных, ПоляИсточников,
													СтруктураКолонокТаблицыДанных, Аналитики, 
													ПараметрыКУстановке, РежимФормирования);
	
	//++ НЕ УТКА
	Если ЕстьХранимыеПравила Тогда
		
		СКДФактическиеДанные = ПолучитьСКДФактическиеДанные(ИсточникиДанных, ПоляИсточников,
															СтруктураКолонокТаблицыДанных, Аналитики, 
															ПараметрыКУстановке, РежимФормирования);
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ЕстьОстатки Тогда
		СКДПредварительныйРасчет = ПолучитьСКДПредварительныйИтоговыйРасчет(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, ЕстьХранимыеПравила);
		СКДИтоговыеДанные = ПолучитьСКДИтоговыеДанныеОстатки(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных);
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
			ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			СКДДанныеДокумента = ПолучитьСКДДокумента(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
														Аналитики, АналитикиШапки, ПараметрыКУстановке, СКДПредварительныйРасчет);
			Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					СКДПредварительныйРасчет.НастройкиПоУмолчанию.Структура[0],
					"РедактируемоеЗначение");
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0],
					"РедактируемоеЗначение");
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(СКДИтоговыеДанные.НаборыДанных[0], "ФлагВыводитьВсегда");
			ФинансоваяОтчетностьСервер.НовыйРесурс(СКДИтоговыеДанные, "ФлагВыводитьВсегда");
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(СКДИтоговыеДанные.НастройкиПоУмолчанию, "ФлагВыводитьВсегда");
		КонецЕсли;
	Иначе
		СКДПредварительныйРасчет = Неопределено;
		СКДИтоговыеДанные = ПолучитьСКДИтоговыеДанныеОбороты(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, ЕстьХранимыеПравила);
		Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
			ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
			СКДДанныеДокумента = ПолучитьСКДДокумента(ИсточникиДанных, ПоляИсточников, СтруктураКолонокТаблицыДанных, 
																	Аналитики, АналитикиШапки, ПараметрыКУстановке, СКДИтоговыеДанные);
			Если ЕстьРедактируемоеЗначение(ИсточникиДанных) Тогда
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(
					СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0],
					"РедактируемоеЗначение");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Параметры компоновки.
	Для Каждого Параметр из ПараметрыКУстановке Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("СписокЗначений") Тогда
			
			ПараметрКомпоновки = СКДПлановыеДанные.Параметры.Найти(Параметр.Ключ);
			Если ПараметрКомпоновки = Неопределено Тогда
				ПараметрКомпоновки = СКДПлановыеДанные.Параметры.Добавить();
				ПараметрКомпоновки.Имя = Параметр.Ключ;
			КонецЕсли;
			ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
			
			ПараметрКомпоновки = СКДИтоговыеДанные.Параметры.Найти(Параметр.Ключ);
			Если ПараметрКомпоновки = Неопределено Тогда
				ПараметрКомпоновки = СКДИтоговыеДанные.Параметры.Добавить();
				ПараметрКомпоновки.Имя = Параметр.Ключ;
			КонецЕсли;
			ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
			
			//++ НЕ УТКА
			Если ЕстьХранимыеПравила Тогда
				ПараметрКомпоновки = СКДФактическиеДанные.Параметры.Найти(Параметр.Ключ);
				Если ПараметрКомпоновки = Неопределено Тогда
					ПараметрКомпоновки = СКДФактическиеДанные.Параметры.Добавить();
					ПараметрКомпоновки.Имя = Параметр.Ключ;
				КонецЕсли;
				ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
			КонецЕсли;
			//-- НЕ УТКА
			
			Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ 
				ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
				Для Каждого СКДДокумента из СКДДанныеДокумента Цикл
					ПараметрКомпоновки = СКДДокумента.Значение.Параметры.Найти(Параметр.Ключ);
					Если ПараметрКомпоновки = Неопределено Тогда
						ПараметрКомпоновки = СКДДокумента.Значение.Параметры.Добавить();
						ПараметрКомпоновки.Имя = Параметр.Ключ;
					КонецЕсли;
					ПараметрКомпоновки.ДоступенСписокЗначений = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Поле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДИтоговыеДанные, "НефинансовыйПоказатель", 
					"ВЫБОР КОГДА НефинансовыйПоказатель = НЕОПРЕДЕЛЕНО ТОГДА Значение(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка)
					|ИНАЧЕ ЕстьNULL(НефинансовыйПоказатель, Значение(Справочник.НефинансовыеПоказателиБюджетов.ПустаяСсылка)) КОНЕЦ");
	Поле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДИтоговыеДанные, "СтатьяБюджетов", 
					"ВЫБОР КОГДА СтатьяБюджетов = НЕОПРЕДЕЛЕНО ТОГДА Значение(Справочник.СтатьиБюджетов.ПустаяСсылка)
					|ИНАЧЕ ЕстьNULL(СтатьяБюджетов, Значение(Справочник.СтатьиБюджетов.ПустаяСсылка)) КОНЕЦ");
	Поле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДИтоговыеДанные, "ПоказательБюджетов", 
					"ВЫБОР КОГДА ПоказательБюджетов = НЕОПРЕДЕЛЕНО ТОГДА Значение(Справочник.ПоказателиБюджетов.ПустаяСсылка)
					|ИНАЧЕ ЕстьNULL(ПоказательБюджетов, Значение(Справочник.ПоказателиБюджетов.ПустаяСсылка)) КОНЕЦ");
					
	ГруппаИЛИ = СКДИтоговыеДанные.НастройкиПоУмолчанию.Структура[0].Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета Тогда
		
		НовыйЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФлагВыводитьВсегда");
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		НовыйЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Примечание");
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
	КонецЕсли;
	
	// Отсечем "пустые значения".
	Для Каждого СтрокаПоля из ПоляИсточников.НайтиСтроки(Новый Структура("Вспомогательное", Ложь)) Цикл
		
		НовыйЭлементОтбора = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрокаПоля.ИмяРесурса);
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
	КонецЦикла;
	
	Результат = Новый Структура("СКДИтоговая, СКДПлановыеДанные, СКДДанныеДокумента, СКДПредварительныйРасчет, Параметры", 
							СКДИтоговыеДанные, СКДПлановыеДанные, СКДДанныеДокумента, СКДПредварительныйРасчет, ПараметрыКУстановке);
							
	//++ НЕ УТКА
	Если ЕстьХранимыеПравила Тогда
		Результат.Вставить("СКДФактическиеДанные", СКДФактическиеДанные);
	КонецЕсли;
	//-- НЕ УТКА
	
	Реквизиты = Новый Структура("СформированКэшСхемыКомпоновки, ХранилищеКэшаСхемыКомпоновки",
								Истина, Новый ХранилищеЗначения(Результат));
								
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Результат;
	
КонецФункции

Функция ЕстьРедактируемоеЗначение(ИсточникиДанных)
	
	Если ИсточникиДанных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Источник из ИсточникиДанных Цикл
		Если Источник.ТипИсточника = "РедактируемоеЗначение" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьСКДЗначенийДокумента(Источник, СтруктураКолонокТаблицыДанных, Аналитики, АналитикиШапки, ПараметрыКУстановке)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СКД = ФинОтчеты.НоваяСхема();
	
	НаборАналитика = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭкземплярБюджета_Значения");
	НаборСуммы = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ЭкземплярБюджета_Суммы");
	
	НаборАналитика.ИмяОбъекта = "ЭкземплярБюджета_Значения";
	НаборСуммы.ИмяОбъекта = "ЭкземплярБюджета_Суммы";
	
	Связь = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ЭкземплярБюджета_Суммы";
	Связь.НаборДанныхПриемник = "ЭкземплярБюджета_Значения";
	Связь.ВыражениеИсточник = "ИдентификаторСтроки";
	Связь.ВыражениеПриемник = "ИдентификаторСтроки";
	
	Для Сч = 1 По 6 Цикл
		ФинОтчеты.НовоеПолеНабора(НаборАналитика, "Аналитика" + Сч);
	КонецЦикла;
	
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ВидАналитики1");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ВидАналитики2");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ВидАналитики3");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ВидАналитики4");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ВидАналитики5");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "ВидАналитики6");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "КоличествоИспользуемыхАналитик");
	ФинОтчеты.НовоеПолеНабора(НаборАналитика, "РедактируемоеЗначение", , , ТипКолонкиСтруктурыЯчеек("РедактируемоеЗначение"));
	
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ПериодПланирования", , , Новый ОписаниеТипов("Дата"));
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Примечание");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "ИдентификаторСтроки");
	ФинОтчеты.НовоеПолеНабора(НаборСуммы, "Значение", "ЗначениеПоказателя");
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "ИД_Источника";
	НовоеВычисляемоеПоле.Выражение = """" + Источник.Идентификатор + """";
	
	Группировка = ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, "ИД_Источника");
	ФинОтчеты.НовоеПолеГруппировки(Группировка, "РедактируемоеЗначение");
	
	Для Каждого ВидАналитики из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
		
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		Если АналитикиШапки.Найти(ВидАналитики) = Неопределено Тогда
		
			ТекстПоля = ПолучитьТекстПоляВидаАналитики(ИмяПоля);
			ТекстПоля = СтрЗаменить(ТекстПоля, "СтатьяБюджетов.", "");
			
		Иначе
			
			ТекстПоля = "&Документ_" + ИмяПоля;
			
		КонецЕсли;
		
		НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
		НовоеВычисляемоеПоле.ПутьКДанным = ИмяПоля;
		НовоеВычисляемоеПоле.Выражение = ТекстПоля;
		
		ДобавитьПараметрСхемы(СКД, ИмяПоля);
		ПараметрыКУстановке.Вставить(ИмяПоля, ВидАналитики);
		
		ФинОтчеты.НовоеПолеГруппировки(Группировка, ИмяПоля);
		
	КонецЦикла;
	
	НовоеВычисляемоеПоле = СКД.ВычисляемыеПоля.Добавить();
	НовоеВычисляемоеПоле.ПутьКДанным = "Период";
	НовоеВычисляемоеПоле.Выражение = "ПериодПланирования";
	
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонокТаблицыДанных.Периодичности);
	Если МинимальнаяПериодичность <> Неопределено Тогда
		ФинОтчеты.НовоеПолеГруппировки(Группировка, "Период");
	КонецЕсли;
	
	ФинОтчеты.НовыйРесурс(СКД, "ЗначениеПоказателя", "МАКСИМУМ");
	ФинОтчеты.НовыйРесурс(СКД, "НомерПоПорядку", "МИНИМУМ");
	ФинОтчеты.НовыйРесурс(СКД, "Примечание", "МАКСИМУМ");
	
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "ЗначениеПоказателя");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "НомерПоПорядку");
	ФинОтчеты.НовоеПолеВыбора(СКД.НастройкиПоУмолчанию, "Примечание");
	
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", 
																	РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", 
																	РасположениеИтоговКомпоновкиДанных.Нет);
	
	Возврат СКД;
	
КонецФункции

#КонецОбласти

#Область ГенерацияДереваДляВыводаОтчета

Функция ДобавитьГруппировкуДереваВывода(МестоДобавления, ИмяИзмерения, ЭлементОтчета, ВидЭлемента)
	
	Если ИмяИзмерения = "Таблица" ИЛИ ИмяИзмерения = "ТекстовыйБлок" Тогда
		
		Если ТипЗнч(МестоДобавления) <> Тип("ДеревоЗначений") Тогда
			МестоДобавления = МестоДобавления.Владелец();
		КонецЕсли;
		
	Иначе
		
		ВТаблице = Ложь;
		СтрокаПроверки = МестоДобавления;
		
		Если ТипЗнч(СтрокаПроверки) <> Тип("ДеревоЗначений") Тогда
			Пока ЗначениеЗаполнено(СтрокаПроверки) Цикл
				Если СтрокаПроверки.ИмяИзмерения = "Таблица" Тогда
					ВТаблице = Истина;
					Прервать;
				КонецЕсли;
				СтрокаПроверки = СтрокаПроверки.Родитель;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ВТаблице Тогда
			
			Если ТипЗнч(СтрокаПроверки) <> Тип("ДеревоЗначений") Тогда
				МестоДобавления = МестоДобавления.Владелец();
			КонецЕсли;
			
			Таблица = МестоДобавления.Строки.Добавить();
			Таблица.ИмяИзмерения = "Таблица";
			Таблица.Строки.Добавить().ИмяИзмерения = "Колонки";
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюКолонок", Ложь);
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюСтрок", Ложь);
			
			МестоДобавления = Таблица.Строки.Добавить();
			МестоДобавления.ИмяИзмерения = "Строки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяГруппировка = МестоДобавления.Строки.Добавить();
	НоваяГруппировка.ИмяИзмерения = ИмяИзмерения;
	НоваяГруппировка.ЭлементОтчета = ЭлементОтчета;
	НоваяГруппировка.ВидЭлемента = ВидЭлемента;
	
	Возврат НоваяГруппировка;
	
КонецФункции

Функция ДанныеОтчетаДляОформления(ПараметрыТаблицы, КэшДопРеквизиты)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Строка");
	Таблица.Колонки.Добавить("НомерСтроки");
	Таблица.Колонки.Добавить("Колонка");
	Таблица.Колонки.Добавить("НомерКолонки");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("ФлагКоличество");
	Таблица.Колонки.Добавить("ФлагСумма");
	Таблица.Колонки.Добавить("ФлагЗначение");
	Таблица.Колонки.Добавить("ИмяОбласти");
	
	МассивЭлементов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, ПараметрыТаблицы.ОформляемыеСтроки.ВыгрузитьКолонку("ЭлементОтчета"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭлементов, ПараметрыТаблицы.ОформляемыеКолонки.ВыгрузитьКолонку("ЭлементОтчета"));
	
	МассивИзмерений = Новый Массив;
	
	Для Каждого ЭлементОтчета из МассивЭлементов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Неопределено Тогда
			//Не измерение
			Продолжить;
		КонецЕсли;
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			Периодичность = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			ИмяИзмерения = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
			ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
			ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
			ИмяИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ИмяИзмерения", КэшДопРеквизиты);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
			ИмяИзмерения = "Организация";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
			ИмяИзмерения = "Подразделение";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
			ИмяИзмерения = "Сценарий";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
			ИмяИзмерения = "Валюта";
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
			ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
			ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			
		КонецЕсли;
		
		Если МассивИзмерений.Найти(ИмяИзмерения) = Неопределено Тогда
			МассивИзмерений.Добавить(ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяИзмерения из МассивИзмерений Цикл
		Таблица.Колонки.Добавить(ИмяИзмерения);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляИзмеренийВДеревеВывода(ВидБюджета, ДеревоВывода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Реквизит,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ВыводитьЗаголовок
		|			ТОГДА ТабличнаяЧасть.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Заголовок,
		|	ТабличнаяЧасть.Ссылка КАК ЭлементОтчета,
		|	ТабличнаяЧасть.ВОтдельнойКолонке
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК Справочник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.ДополнительныеПоля КАК ТабличнаяЧасть
		|		ПО (ТабличнаяЧасть.Ссылка = Справочник.Ссылка)
		|			И (Справочник.Владелец = &ВидБюджета)
		|ИТОГИ ПО
		|	ЭлементОтчета";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЭлементы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭлементы.Следующий() Цикл
		СтрокаДерева = ДеревоВывода.Строки.Найти(ВыборкаЭлементы.ЭлементОтчета, "ЭлементОтчета", Истина);
		СтрокаДерева.ДополнительныеПоля.Колонки.Добавить("Реквизит");
		СтрокаДерева.ДополнительныеПоля.Колонки.Добавить("ИмяРеквизита");
		СтрокаДерева.ДополнительныеПоля.Колонки.Добавить("Заголовок");
		СтрокаДерева.ДополнительныеПоля.Колонки.Добавить("ВОтдельнойКолонке");
		СтрокаДерева.ДополнительныеПоля.Индексы.Добавить("ВОтдельнойКолонке");
		ВыборкаДополнительныеРеквизиты = ВыборкаЭлементы.Выбрать();
		Пока ВыборкаДополнительныеРеквизиты.Следующий() Цикл
			НоваяСтрока = СтрокаДерева.ДополнительныеПоля.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДополнительныеРеквизиты);
			Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
			Цифры = "0123456789";
			ДополнительныеСимволы = "_";
			ДопустимыеСимволы = Буквы + Цифры + ДополнительныеСимволы;
			ИмяРеквизита = "";
			ИмяПоиска = НРег(НоваяСтрока.Реквизит);
			ИмяПоиска = СтрЗаменить(ИмяПоиска, " ", "");
			Для Сч = 1 по СтрДлина(НоваяСтрока.Реквизит) Цикл
				Символ = Сред(ИмяПоиска, Сч, 1);
				Если Не СтрНайти(ДопустимыеСимволы, Символ) Тогда
					ИмяРеквизита = ИмяРеквизита + "_";
				Иначе
					ИмяРеквизита = ИмяРеквизита + Символ;
				КонецЕсли;
			КонецЦикла;
			НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Знач МестоДобавления, Элементы)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Для Каждого Элемент из Элементы.Строки Цикл
		
		НоваяГруппировка = Неопределено;
		
		Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета 
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст Тогда
			
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ТекстовыйБлок", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.НаименованиеДляПечати = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета,
																"Текст", КэшДопРеквизиты);
			НоваяГруппировка.ТолькоДляПечати = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета,
																"ТолькоДляПечати", КэшДопРеквизиты);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ПоказательБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "СтатьяБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			ПоказательБюджетов = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ПоказательБюджетов", КэшДопРеквизиты);
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "ПоказательБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = ПоказательБюджетов;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			СтатьяБюджетов = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "СтатьяБюджетов", КэшДопРеквизиты);
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "СтатьяБюджетов", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = СтатьяБюджетов;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			НефинансовыйПоказатель = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "НефинансовыйПоказатель", КэшДопРеквизиты);
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "НефинансовыйПоказатель", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = НефинансовыйПоказатель;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, "РедактируемоеЗначение", 
																Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = Элемент.НаименованиеДляПечати;
			НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
			
			ТипИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
			ЗначениеФильтра = Неопределено; ЭтоАналитикаПрочее = Неопределено; ВидАналитики = Неопределено;
			
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
				Периодичность = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
				ИмяИзмерения = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика Тогда
				ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
				ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				ИмяИзмерения = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ИмяИзмерения", КэшДопРеквизиты);
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Организация Тогда
				Организация = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Организация", КэшДопРеквизиты);
				ИмяИзмерения = "Организация";
				ЗначениеФильтра = Организация;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Подразделение Тогда
				Подразделение = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Подразделение", КэшДопРеквизиты);
				ИмяИзмерения = "Подразделение";
				ЗначениеФильтра = Подразделение;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Сценарий Тогда
				Сценарий = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Сценарий", КэшДопРеквизиты);
				ИмяИзмерения = "Сценарий";
				ЗначениеФильтра = Сценарий;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
				Валюта = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "Валюта", КэшДопРеквизиты);
				ИмяИзмерения = "Валюта";
				ЗначениеФильтра = Валюта;
				
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				ВидАналитики = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
				ЭтоАналитикаПрочее = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ЭтоАналитикаПрочее", КэшДопРеквизиты);
				РазрешитьРедактирование = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "РазрешитьРедактирование", КэшДопРеквизиты);
				ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				Если ЭтоАналитикаПрочее Тогда
					НаименованиеПрочих = "<прочие " + НРег(ВидАналитики) + ">";
					ЗначениеФильтра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ТипЗначения").ПривестиЗначение(Неопределено);
				Иначе
					ЗначениеФильтра = Элемент.ЭлементОтчета.ЗначениеАналитики;
					ЗначениеФильтра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ТипЗначения").ПривестиЗначение(ЗначениеФильтра);
				КонецЕсли;
				
			КонецЕсли;
				
			НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, ИмяИзмерения, Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			НоваяГруппировка.ФиксированноеЗначение = ЗначениеФильтра;
			Если ЭтоАналитикаПрочее = Истина Тогда
				НоваяГруппировка.НаименованиеДляПечати = НаименованиеПрочих;
			КонецЕсли;
			НоваяГруппировка.ВидАналитики = ВидАналитики;
			НоваяГруппировка.ЭтоАналитикаПрочее = ЭтоАналитикаПрочее;
			НоваяГруппировка.РедактируемыеЗначения = РазрешитьРедактирование = Истина;
			
			ВыводитьВместеСРодительским = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВыводитьВместеСРодительским", КэшДопРеквизиты);
			Если ВыводитьВместеСРодительским = Истина Тогда
				МестоДобавления.ВыводитьВместеСПодчиненным = Истина;
				НоваяГруппировка.ВыводитьВместеСРодительским = Истина;
			КонецЕсли;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Таблица", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			Таблица.ВыводитьЗаголовокВОтчет = Элемент.ВыводитьЗаголовокЭлемента;
			Таблица.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
			
			ВыводитьЗаголовокГруппировки = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ВыводитьЗаголовокГруппировки", КэшДопРеквизиты);
			ЗаголовокГруппировки = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ЗаголовокГруппировки", КэшДопРеквизиты);
			
			Таблица.ПараметрыТаблицы.Вставить("ВыводитьЗаголовокГруппировки", ВыводитьЗаголовокГруппировки = Истина);
			Таблица.ПараметрыТаблицы.Вставить("ЗаголовокГруппировки", 	ЗаголовокГруппировки);
			
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Строки Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Строки", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки Тогда
			
			Таблица = ДобавитьГруппировкуДереваВывода(МестоДобавления, "Колонки", Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, Таблица, Элемент);
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
			ИЛИ Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			
			Выводить = Истина;
			Если Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
				Если Элемент.ВыводитьЗаголовокЭлемента = Ложь Тогда
					НоваяГруппировка = МестоДобавления;
					Выводить = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Выводить Тогда
				
				НоваяГруппировка = ДобавитьГруппировкуДереваВывода(МестоДобавления, 
													ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Элемент.ЭлементОтчета), 
													Элемент.ЭлементОтчета, Элемент.ВидЭлемента);
				
				НоваяГруппировка.НаименованиеДляПечати = Элемент.НаименованиеДляПечати;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек Тогда
			
			ОтображатьНумерациюКолонок = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ОтображатьНумерациюКолонок", КэшДопРеквизиты);
			ОтображатьНумерациюСтрок = ФинОтчеты.ЗначениеДополнительногоРеквизита(Элемент.ЭлементОтчета, "ОтображатьНумерациюСтрок", КэшДопРеквизиты);
			Таблица = ФинансоваяОтчетностьКлиентСервер.ТаблицаЭлемента(МестоДобавления);
			
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюКолонок", ОтображатьНумерациюКолонок = Истина);
			Таблица.ПараметрыТаблицы.Вставить("ОтображатьНумерациюСтрок", 	ОтображатьНумерациюСтрок = Истина);
			
			ТаблицыЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент.ЭлементОтчета, 
									"ЭлементыОформления, ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО");
			
			Таблица.ПараметрыТаблицы.Вставить("ЭлементыОформления", 		ТаблицыЭлемента.ЭлементыОформления.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("ОформляемыеСтроки", 			ТаблицыЭлемента.ОформляемыеСтроки.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("ОформляемыеКолонки", 		ТаблицыЭлемента.ОформляемыеКолонки.Выгрузить());
			Таблица.ПараметрыТаблицы.Вставить("РасшифровкаПолейОтбораЭО", 	ТаблицыЭлемента.РасшифровкаПолейОтбораЭО.Выгрузить());
			
			Таблица.ПараметрыТаблицы.Вставить("ДанныеОтчетаДляОформления", 	ДанныеОтчетаДляОформления(Таблица.ПараметрыТаблицы, КэшДопРеквизиты));
			
		КонецЕсли;
		
		Если НоваяГруппировка <> Неопределено Тогда
			
			СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизиты, НоваяГруппировка, Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьДеревоВТаблицу(Дерево, Таблица = Неопределено, Уровень = 0) Экспорт
	
	Если Таблица = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Колонка из Дерево.Колонки Цикл
			Таблица.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из Дерево.Строки Цикл
		
		Пробел = "";
		Для Сч = 1 по Уровень Цикл
			Пробел = Пробел + " - ";
		КонецЦикла;
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока[0] = Пробел + Строка(НоваяСтрока[0]);
		ПреобразоватьДеревоВТаблицу(СтрокаДерева, Таблица, Уровень + 1);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Процедура ПризнакиУчетаПоСтрокамДерева(Строки, ПризнакиУчета, ЕстьСумма, ЕстьКоличество, ЕстьЗначение)
	
	Для Каждого Строка из Строки Цикл
		
		НайденнаяКолонка = ПризнакиУчета.Найти(Строка.ЭлементОтчета);
		
		Если НайденнаяКолонка <> Неопределено Тогда
			ЕстьСумма = ЕстьСумма ИЛИ НайденнаяКолонка.ФлагСумма;
			ЕстьКоличество = ЕстьКоличество ИЛИ НайденнаяКолонка.ФлагКоличество;
			ЕстьЗначение = ЕстьЗначение ИЛИ НайденнаяКолонка.ФлагЗначение;
		КонецЕсли;
		
		Если ЕстьСумма И ЕстьКоличество И ЕстьЗначение Тогда
			Возврат;
		КонецЕсли;
		
		ПризнакиУчетаПоСтрокамДерева(Строка.Строки, ПризнакиУчета, ЕстьСумма, ЕстьКоличество, ЕстьЗначение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиКоличестваВКолонки(Таблица, ПараметрыУчетаПоКолонкам, СтрокаДобавления = Неопределено)
	
	Если СтрокаДобавления = Неопределено Тогда
		СтрокаДобавления = Таблица.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
	КонецЕсли;
	
	Если Не СтрокаДобавления.Строки.Количество() Тогда
		
		ПризнакиУчета = ПараметрыУчетаПоКолонкам.ПризнакиУчетаПоКолонкам.ТаблицаКолонок;
		ЕстьСуммаВОтчете = ПараметрыУчетаПоКолонкам.ЕстьСумма;
		ЕстьКоличествоВОтчете = ПараметрыУчетаПоКолонкам.ЕстьКоличество;
		ЕстьЗначениеВОтчете = ПараметрыУчетаПоКолонкам.ЕстьЗначение;
		
		Если СтрокаДобавления.ИмяИзмерения = "Колонки" Тогда
			Строки = Таблица.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Строки).Строки;
			ЕстьСумма = Ложь;
			ЕстьКоличество = Ложь;
			ЕстьЗначение = Ложь;
			//расчет флагов для простой таблицы
			ПризнакиУчетаПоСтрокамДерева(Строки, 
				ПараметрыУчетаПоКолонкам.ПризнакиУчетаПоКолонкам.ТаблицаСтрок, ЕстьСумма, ЕстьКоличество, ЕстьЗначение);
		ИначеЕсли СтрокаДобавления.ИмяИзмерения = "РедактируемоеЗначение" Тогда
			ЕстьСумма = Ложь;
			ЕстьКоличество = Ложь;
			ЕстьЗначение = Истина;
		Иначе
			НайденнаяКолонка = ПризнакиУчета.Найти(СтрокаДобавления.ЭлементОтчета);
			Если НайденнаяКолонка <> Неопределено Тогда
				ЕстьСумма = НайденнаяКолонка.ФлагСумма;
				ЕстьКоличество = НайденнаяКолонка.ФлагКоличество;
				ЕстьЗначение = НайденнаяКолонка.ФлагЗначение;
			Иначе
				ЕстьСумма = Ложь;
				ЕстьКоличество = Ложь;
				ЕстьЗначение = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьКоличество Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Количество";
			НоваяСтрока.НаименованиеДляПечати = "Количество";
		КонецЕсли;
		
		Если ЕстьЗначение Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Значение";
			НоваяСтрока.НаименованиеДляПечати = "Значение";
		КонецЕсли;
		
		ДобавитьСумму = Ложь;
		
		ЕстьДополнительныеКолонки = ЕстьКоличество ИЛИ ЕстьЗначение;
		
		Если ЕстьСумма И ЕстьДополнительныеКолонки Тогда
			ДобавитьСумму = Истина;
		ИначеЕсли Не ЕстьДополнительныеКолонки И СтрокаДобавления.ИмяИзмерения = "Колонки" Тогда
			ДобавитьСумму = Истина;
		ИначеЕсли Не ЕстьДополнительныеКолонки И (ЕстьКоличествоВОтчете ИЛИ ЕстьЗначениеВОтчете) Тогда
			ДобавитьСумму = Истина;
		КонецЕсли;
		
		Если ДобавитьСумму Тогда
			НоваяСтрока = СтрокаДобавления.Строки.Добавить();
			НоваяСтрока.ИмяИзмерения = "#Показатель_Сумма";
			НоваяСтрока.НаименованиеДляПечати = "Сумма";
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из СтрокаДобавления.Строки Цикл
		ДобавитьКолонкиКоличестваВКолонки(Таблица, ПараметрыУчетаПоКолонкам, Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ПризнакиУчетаПоКолонкамИСтрокам(СтруктураЯчеек, ПараметрыЯчеек)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураЯчеек.ИндексСтроки КАК ИндексСтроки,
	               |	СтруктураЯчеек.Строка,
	               |	СтруктураЯчеек.Колонка
	               |ПОМЕСТИТЬ ТаблицаСтруктураЯчеек
	               |ИЗ
	               |	&СтруктураЯчеек КАК СтруктураЯчеек
	               |ГДЕ
	               |	СтруктураЯчеек.ОсновнойЭлемент
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИндексСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПараметрыЯчеек.ИндексСтроки КАК ИндексСтроки,
	               |	ПараметрыЯчеек.ФлагСумма,
	               |	ПараметрыЯчеек.ФлагКоличество,
	               |	ПараметрыЯчеек.ФлагЗначение
	               |ПОМЕСТИТЬ ТаблицаПараметрыЯчеек
	               |ИЗ
	               |	&ПараметрыЯчеек КАК ПараметрыЯчеек
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ИндексСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктураЯчеек.Строка,
	               |	СтруктураЯчеек.Колонка,
	               |	ПараметрыЯчеек.ФлагСумма,
	               |	ПараметрыЯчеек.ФлагКоличество,
	               |	ПараметрыЯчеек.ФлагЗначение
	               |ПОМЕСТИТЬ СтруктураЯчеек
	               |ИЗ
	               |	ТаблицаСтруктураЯчеек КАК СтруктураЯчеек
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПараметрыЯчеек КАК ПараметрыЯчеек
	               |		ПО СтруктураЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктураЯчеек.Колонка,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагСумма) КАК ФлагСумма,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагКоличество) КАК ФлагКоличество,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагЗначение) КАК ФлагЗначение
	               |ИЗ
	               |	СтруктураЯчеек КАК СтруктураЯчеек
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтруктураЯчеек.Колонка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтруктураЯчеек.Строка,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагСумма) КАК ФлагСумма,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагКоличество) КАК ФлагКоличество,
	               |	МАКСИМУМ(СтруктураЯчеек.ФлагЗначение) КАК ФлагЗначение
	               |ИЗ
	               |	СтруктураЯчеек КАК СтруктураЯчеек
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СтруктураЯчеек.Строка";
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек.Скопировать(, "ИндексСтроки, ОсновнойЭлемент, Строка, Колонка"));
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек.Скопировать(, "ИндексСтроки, ФлагСумма, ФлагКоличество, ФлагЗначение"));
	
	Массив = Запрос.ВыполнитьПакет();
	ТаблицаКолонок = Массив[3].Выгрузить();
	ТаблицаКолонок.Индексы.Добавить("Колонка");
	
	ТаблицаСтрок = Массив[4].Выгрузить();
	ТаблицаСтрок.Индексы.Добавить("Строка");
	
	Возврат Новый Структура("ТаблицаКолонок, ТаблицаСтрок", ТаблицаКолонок, ТаблицаСтрок);
	
КонецФункции

Функция ПолучитьДеревоДляВыводаОтчета(ВидБюджета, СтруктураЯчеек, ПараметрыЯчеек)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшДереваВывода, ХранилищеКэшаДереваВывода");
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	Если ЗначенияКэша.СформированКэшДереваВывода = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаДереваВывода.Получить();
	КонецЕсли;
	
	ДеревоВидаБюджета = ПолучитьДеревоЭлементовВидаБюджета(ВидБюджета, Ложь);
	
	ПризнакиУчетаПоКолонкам = ПризнакиУчетаПоКолонкамИСтрокам(СтруктураЯчеек, ПараметрыЯчеек);
	ТаблицаПризнаковКолонок = ПризнакиУчетаПоКолонкам.ТаблицаКолонок;
	
	ЕстьСумма 		= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагСумма") <> Неопределено;
	ЕстьКоличество 	= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагКоличество") <> Неопределено;
	ЕстьЗначение 	= ТаблицаПризнаковКолонок.Найти(Истина, "ФлагЗначение") <> Неопределено;
	
	ПараметрыУчетаПоКолонкам = Новый Структура("ПризнакиУчетаПоКолонкам, ЕстьСумма, ЕстьКоличество, ЕстьЗначение", 
												ПризнакиУчетаПоКолонкам, ЕстьСумма, ЕстьКоличество, ЕстьЗначение);
	
	ДеревоВывода = Новый ДеревоЗначений;
	ДеревоВывода.Колонки.Добавить("ИмяИзмерения");
	ДеревоВывода.Колонки.Добавить("ВидЭлемента");
	ДеревоВывода.Колонки.Добавить("ЭлементОтчета");
	ДеревоВывода.Колонки.Добавить("ВидАналитики");
	ДеревоВывода.Колонки.Добавить("НаименованиеДляПечати");
	ДеревоВывода.Колонки.Добавить("ФиксированноеЗначение");
	ДеревоВывода.Колонки.Добавить("ВыводитьЗаголовокВОтчет");
	ДеревоВывода.Колонки.Добавить("ЭтоАналитикаПрочее", 			Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("РедактируемыеЗначения", 			Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ВыводитьВместеСПодчиненным", 	Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ВыводитьВместеСРодительским", 	Новый ОписаниеТипов("Булево"));
	ДеревоВывода.Колонки.Добавить("ДополнительныеПоля", 			Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоВывода.Колонки.Добавить("ПараметрыТаблицы", 				Новый ОписаниеТипов("Структура"));
	ДеревоВывода.Колонки.Добавить("ТолькоДляПечати", 				Новый ОписаниеТипов("Булево"));
	
	КэшДопРеквизитов = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	
	//Заполнение дерева группировками
	СоздатьРекурсивноГруппировкиДереваВывода(ВидБюджета, КэшДопРеквизитов, ДеревоВывода, ДеревоВидаБюджета);
	
	ЗаполнитьДополнительныеПоляИзмеренийВДеревеВывода(ВидБюджета, ДеревоВывода);
	
	//Добавление дополнительных колонок и заполнение
	//вспомогательной информации
	Для Каждого ЭлементВывода из ДеревоВывода.Строки Цикл
		
		Если ЭлементВывода.ИмяИзмерения = "Таблица" Тогда
			ЭлементВывода.ПараметрыТаблицы.Вставить("КоличествоДополнительныхКолонок", РассчитатьГлубинуУровней(ЭлементВывода, Истина) - 1);
			Если ЗначениеЗаполнено(ЭлементВывода.ЭлементОтчета) Тогда
				Если ЭлементВывода.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДобавитьКолонкиКоличестваВКолонки(ЭлементВывода, ПараметрыУчетаПоКолонкам);
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = Новый Структура("СформированКэшДереваВывода, ХранилищеКэшаДереваВывода",
									Истина, Новый ХранилищеЗначения(ДеревоВывода));
	
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДеревоВывода;
	
КонецФункции

#КонецОбласти

#Область СтруктураОписанияВидаБюджета

Функция ПолучитьЗначенияДополнительныхФильтров(Таблица, ИмяКолонки)
	
	Копия = Таблица.Скопировать(,ИмяКолонки + ", Флаг" + ИмяКолонки);
	Копия.Свернуть(ИмяКолонки + ", Флаг" + ИмяКолонки);
	
	Результат = Новый Массив;
	
	Для Каждого Значение из Копия Цикл
		Если Значение["Флаг" + ИмяКолонки] <> "отобрать" Тогда
			Возврат Неопределено;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Значение[ИмяКолонки]) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат.Добавить(Значение[ИмяКолонки]);
	КонецЦикла;
	
	Если Результат.Количество() Тогда
		Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДополнитьИсточникиДанныхПредопределеннымиЗначениями(ИсточникиДанных, СтруктураКолонокТаблицыДанных, СтруктураЯчеек)
	
	Для Каждого Источник из ИсточникиДанных Цикл
		
		НайденныеСтроки = СтруктураЯчеек.Скопировать(Новый Структура("ИД_Источника", Источник.Идентификатор));
		
		Для Каждого Измерение из СтруктураКолонокТаблицыДанных.Измерения Цикл
			
			РазличныеЗначения = ПолучитьЗначенияДополнительныхФильтров(НайденныеСтроки, Измерение);
			Если РазличныеЗначения <> Неопределено Тогда
				
				Источник.Вставить(Измерение, РазличныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Измерение из СтруктураКолонокТаблицыДанных.ВидыАналитик Цикл
			
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
			РазличныеЗначения = ПолучитьЗначенияДополнительныхФильтров(НайденныеСтроки, ИмяПоля);
			Если РазличныеЗначения <> Неопределено Тогда
				
				Источник.Вставить(ИмяПоля, РазличныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла
	
КонецФункции

Функция ПоляИсточниковОтчета(СтруктураКолонок, СтруктураЯчеек, ПараметрыЯчеек)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураЯчеек.ИндексСтроки
	               |	
	               |ПОМЕСТИТЬ СтруктураЯчеек
	               |ИЗ
	               |	&СтруктураЯчеек КАК СтруктураЯчеек
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   |" +
				   "ВЫБРАТЬ
				   |	ПараметрыЯчеек.ИндексСтроки,
				   |	ПараметрыЯчеек.ФлагСумма,
				   |	ПараметрыЯчеек.ФлагКоличество,
				   |	ПараметрыЯчеек.ФлагЗначение,
				   |	ПараметрыЯчеек.ПолеИсточника
				   |ПОМЕСТИТЬ ПараметрыЯчеек
				   |ИЗ
				   |	&ПараметрыЯчеек КАК ПараметрыЯчеек
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ПараметрыЯчеек.ИндексСтроки,
				   |	ПараметрыЯчеек.ФлагСумма,
				   |	ПараметрыЯчеек.ФлагКоличество,
				   |	ПараметрыЯчеек.ФлагЗначение,
				   |	ПараметрыЯчеек.ПолеИсточника
				   |ПОМЕСТИТЬ ПредварительныеПоляИсточников
				   |ИЗ
				   |	СтруктураЯчеек КАК СтруктураЯчеек
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЯчеек КАК ПараметрыЯчеек
				   |		ПО СтруктураЯчеек.ИндексСтроки = ПараметрыЯчеек.ИндексСтроки
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ПредварительныеПоляИсточников.ИндексСтроки,
				   |	ПредварительныеПоляИсточников.ФлагСумма,
				   |	ПредварительныеПоляИсточников.ФлагКоличество,
				   |	ПредварительныеПоляИсточников.ФлагЗначение,
				   |	ЕСТЬNULL(ВложенныйЗапрос.ПолеИсточника, ПредварительныеПоляИсточников.ПолеИсточника) КАК ПолеИсточника,
				   |	ВЫБОР
				   |		КОГДА ВложенныйЗапрос.ПолеИсточника <> ПредварительныеПоляИсточников.ПолеИсточника
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК Вспомогательное
				   |ПОМЕСТИТЬ ТаблицаЯчеек
				   |ИЗ
				   |	ПредварительныеПоляИсточников КАК ПредварительныеПоляИсточников
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			""НачальныйОстаток"" КАК ПолеИсточника
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			""КонечныйОстаток""
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			""Приход""
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			""Расход""
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			""Оборот"") КАК ВложенныйЗапрос
				   |		ПО (ПредварительныеПоляИсточников.ПолеИсточника = ВложенныйЗапрос.ПолеИсточника
				   |				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""Оборот""
				   |					И ВложенныйЗапрос.ПолеИсточника В (""Приход"", ""Расход"")
				   |				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""КонечныйОстаток""
				   |					И ВложенныйЗапрос.ПолеИсточника В (""НачальныйОстаток"", ""Приход"", ""Расход"")
				   |				ИЛИ ПредварительныеПоляИсточников.ПолеИсточника = ""НачальныйОстаток""
				   |					И ВложенныйЗапрос.ПолеИсточника В (""Приход"", ""Расход""))
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	""Сумма"" + СтруктураЯчеек.ПолеИсточника КАК ИмяРесурса,
				   |	СтруктураЯчеек.Вспомогательное
				   |ПОМЕСТИТЬ ИменаРесурсов
				   |ИЗ
				   |	ТаблицаЯчеек КАК СтруктураЯчеек
				   |ГДЕ
				   |	СтруктураЯчеек.ФлагСумма
				   |	И СтруктураЯчеек.ПолеИсточника <> """"
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	""СуммаВал"" + СтруктураЯчеек.ПолеИсточника,
				   |	СтруктураЯчеек.Вспомогательное
				   |ИЗ
				   |	ТаблицаЯчеек КАК СтруктураЯчеек
				   |ГДЕ
				   |	СтруктураЯчеек.ФлагСумма
				   |	И СтруктураЯчеек.ПолеИсточника <> """"
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	""Количество"" + СтруктураЯчеек.ПолеИсточника,
				   |	СтруктураЯчеек.Вспомогательное
				   |ИЗ
				   |	ТаблицаЯчеек КАК СтруктураЯчеек
				   |ГДЕ
				   |	СтруктураЯчеек.ФлагКоличество
				   |	И СтруктураЯчеек.ПолеИсточника <> """"
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	""ЗначениеПоказателя"",
				   |	СтруктураЯчеек.Вспомогательное
				   |ИЗ
				   |	ТаблицаЯчеек КАК СтруктураЯчеек
				   |ГДЕ
				   |	СтруктураЯчеек.ФлагЗначение
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	ИменаРесурсов.ИмяРесурса,
				   |	МИНИМУМ(ИменаРесурсов.Вспомогательное) КАК Вспомогательное
				   |ИЗ
				   |	ИменаРесурсов КАК ИменаРесурсов
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ИменаРесурсов.ИмяРесурса";
	
	Запрос.УстановитьПараметр("СтруктураЯчеек", СтруктураЯчеек.Скопировать(, "ИндексСтроки"));
	Запрос.УстановитьПараметр("ПараметрыЯчеек", ПараметрыЯчеек.Скопировать(, "ИндексСтроки, ФлагСумма, ФлагКоличество, ФлагЗначение, ПолеИсточника"));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшСтруктурыОписанияВидаБюджета, ХранилищеКэшаСтруктурыОписанияВидаБюджета");
	Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет Тогда
		Постфикс = "Отчет";	
	ИначеЕсли РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение Тогда
		Постфикс = "Заполнение";	
	Иначе // Если РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета ИЛИ РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ
		Постфикс = "Документ";
	КонецЕсли; 
	
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	Если ЗначенияКэша.СформированКэшСтруктурыОписанияВидаБюджета = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаСтруктурыОписанияВидаБюджета.Получить();
	КонецЕсли;
	
	// Получаем источники данных.
	ИсточникиДанных = ПолучитьОписаниеИсточниковДанных(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Получаем источники данных группировок по периоду.
	ИсточникиПериодовГруппировок = ИсточникиПериодовГруппировок(ВидБюджета, СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	// Получаем структуру ячеек.
	ОписаниеЯчеек = ПолучитьСтруктуруЯчеекВидаБюджета(ВидБюджета, ИсточникиДанных, ИсточникиПериодовГруппировок, 
																	СтруктураКолонокТаблицыДанных, РежимФормирования);
	
	СтруктураЯчеек 						= ОписаниеЯчеек.СтруктураЯчеек;
	ПараметрыЯчеек 						= ОписаниеЯчеек.ПараметрыЯчеек;
	ИсточникиЗначенийИзмерений 			= ОписаниеЯчеек.ИсточникиЗначенийИзмерений;
	ЗаполнениеОтсутствующихИзмеренийНФП = ОписаниеЯчеек.ЗаполнениеОтсутствующихИзмеренийНФП;
	ОтборИзмеренийНФП 					= ОписаниеЯчеек.ОтборИзмеренийНФП;
	
	// Дополнение источников постоянными фильтрами.
	ДополнитьИсточникиДанныхПредопределеннымиЗначениями(ИсточникиДанных, СтруктураКолонокТаблицыДанных, СтруктураЯчеек);
	
	МассивИндексов = Новый Массив;
	Для Каждого СтрокаТаблицы из СтруктураЯчеек Цикл
		
		ОбщиеИзмерения = ПараметрыЯчеек[СтрокаТаблицы.ИндексСтроки].ОбщиеИзмерения;
		
		Если ЗначениеЗаполнено(ОбщиеИзмерения)
			И МассивИндексов.Найти(ОбщиеИзмерения) = Неопределено Тогда
			
			МассивИндексов.Добавить(ОбщиеИзмерения);
			
		КонецЕсли;
	КонецЦикла;
	
	ПоляИсточников = ПоляИсточниковОтчета(СтруктураКолонокТаблицыДанных, СтруктураЯчеек, ПараметрыЯчеек);
	ТаблицаПодчиненности = ПодчиненныеЭлементыВидаБюджета(ВидБюджета);
	
	Результат = Новый Структура;
	Результат.Вставить("ИсточникиДанных", 						ИсточникиДанных);
	Результат.Вставить("ИсточникиПериодовГруппировок", 			ИсточникиПериодовГруппировок);
	Результат.Вставить("СтруктураЯчеек", 						СтруктураЯчеек);
	Результат.Вставить("ПараметрыЯчеек", 						ПараметрыЯчеек);
	Результат.Вставить("ИндексыСтруктурыЯчеек", 				МассивИндексов);
	Результат.Вставить("ПоляИсточников", 						ПоляИсточников);
	Результат.Вставить("ИсточникиЗначенийИзмерений", 			ИсточникиЗначенийИзмерений);
	Результат.Вставить("ЗаполнениеОтсутствующихИзмеренийНФП", 	ЗаполнениеОтсутствующихИзмеренийНФП);
	Результат.Вставить("ОтборИзмеренийНФП", 					ОтборИзмеренийНФП);
	Результат.Вставить("ТаблицаПодчиненностиЭлементов",			ТаблицаПодчиненности);
	
	Реквизиты = Новый Структура("СформированКэшСтруктурыОписанияВидаБюджета, ХранилищеКэшаСтруктурыОписанияВидаБюджета",
								Истина, Новый ХранилищеЗначения(Результат));
								
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты, Постфикс);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СтруктураОписанияСпискаВвода

Функция ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеКолонки)
	
	КэшДопРеквизиты 	= СведенияОБюджетеДляРасчета.КэшДопРеквизиты;
	АналитикиШапки 		= СведенияОБюджетеДляРасчета.АналитикиШапки;
	
	Заголовок = Неопределено;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		Заголовок = НСтр("ru='Статья/показатель бюджетов';uk='Стаття/показник бюджетів'");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
		ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		Возврат Новый Структура("Заголовок, ТипЗначения", Заголовок, ТипЗначения);
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
														
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			Заголовок = Строка(Периодичность);
			
			ПериодичностьТекст = "";
			Если Периодичность = Перечисления.Периодичность.Год Тогда
				Формат = "ДФ=гггг";
			ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
				Формат = "ДФ='''%1'' ММММ гггг'";
				ПериодичностьТекст = НСтр("ru='Полугодие с';uk='Півріччя з'");
			ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
				Формат = "ДФ='к ''%1'''";
				ПериодичностьТекст = НСтр("ru='квартал';uk='квартал'");
			ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
				Формат = "ДФ='ММММ гггг'";
			ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
				Формат = "ДФ='''%1'' дд.ММ.гг'";
				ПериодичностьТекст = НСтр("ru='Декада с';uk='Декада з'");
			ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
				Формат = "ДФ='''%1'' дд.ММ.гг'";
				ПериодичностьТекст = НСтр("ru='Неделя с';uk='Тиждень з'");
			ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
				Формат = "ДЛФ=D";
			КонецЕсли;
			Формат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Формат, ПериодичностьТекст);
				
			Возврат Новый Структура("Заголовок, ТипЗначения, Формат", Заголовок, Новый ОписаниеТипов("Дата"), Формат);
			
		ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Валюта Тогда
			
			Возврат Новый Структура("Заголовок, ТипЗначения", "Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВидАналитики = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
												ЭлементОтчета.ЭлементОтчета, "ВидАналитики", КэшДопРеквизиты);
		
	ТипЗначения = ВидАналитики.ТипЗначения;
	
	Результат = Новый Структура("Заголовок, ТипЗначения", Строка(ВидАналитики), ТипЗначения);
	
	Если ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда
		
		ПараметрыВыбора = Новый Структура("Отбор, Значение", 
					"Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидАналитики, "ДополнительноеСвойство"));
		Результат.Вставить("ПараметрыВыбора", ПараметрыВыбора);
		
	Иначе
		
		СоответствиеСвязанныхЭлементов = ФинансоваяОтчетностьПовтИсп.СоответствиеОтборовПоВладельцу();
		СтруктураСвязей = Неопределено;
		
		Для Каждого Тип из ТипЗначения.Типы() Цикл
			
			СвязанныеТипы = СоответствиеСвязанныхЭлементов[Тип];
			Если СвязанныеТипы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого КлючИЗначение из ВышележащиеКолонки Цикл
				Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда // Пропускаем поиск связей для простых типов редактируемого значения
					Для Каждого ТипВышележащейКолонки из КлючИЗначение.Значение.ТипЗначения.Типы() Цикл
						ПараметрыСвязи = СвязанныеТипы.Найти(ТипВышележащейКолонки, "Тип");
						Если ПараметрыСвязи <> Неопределено Тогда
							СтруктураСвязей = Новый Структура("ПутьКДанным, Отбор", 
									"Элементы.СписокРедактированияБюджета.ТекущиеДанные." + КлючИЗначение.Ключ, ПараметрыСвязи.Реквизит);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли	
			КонецЦикла;
			
			Если СтруктураСвязей <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого СтрокаАналитики из АналитикиШапки Цикл
				Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда // Пропускаем поиск связей для простых типов редактируемого значения
					Для Каждого ТипВышележащейКолонки из СтрокаАналитики.ТипЗначения.Типы() Цикл
						ПараметрыСвязи = СвязанныеТипы.Найти(ТипВышележащейКолонки, "Тип");
						Если ПараметрыСвязи <> Неопределено Тогда
							СтруктураСвязей = Новый Структура("ПутьКДанным, Отбор", 
									"Объект.Аналитика" + СтрокаАналитики.НомерСтроки, ПараметрыСвязи.Реквизит);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли	
			КонецЦикла;
			
			Если СтруктураСвязей <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтруктураСвязей <> Неопределено Тогда
			Результат.Вставить("СвязиПараметровВыбора", СтруктураСвязей);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныеДляСтрокиБюджетаКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы)
	
	СложнаяТаблица 			= СведенияОБюджетеДляРасчета.СложнаяТаблица;
	КэшДопРеквизиты 		= СведенияОБюджетеДляРасчета.КэшДопРеквизиты;
	СтруктураОписанияОтчета = СведенияОБюджетеДляРасчета.СтруктураОписанияОтчета;
	
	ЭлементыТекущегоУровня = Новый Структура();
	ЭлементыТекущегоУровня.Вставить("Периодичности", 	Новый Массив);
	ЭлементыТекущегоУровня.Вставить("СтрокиОснования", 	Новый Массив);
	ЭлементыТекущегоУровня.Вставить("НакопленныйОтбор", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВышележащиеЭлементы.НакопленныйОтбор));
	ЭлементыТекущегоУровня.Вставить("НастройкиКолонок", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ВышележащиеЭлементы.НастройкиКолонок));
	ЭлементыТекущегоУровня.Вставить("Измерения", ВышележащиеЭлементы.Измерения);
	
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
									ЭлементыТекущегоУровня.Периодичности,
									ВышележащиеЭлементы.Периодичности);
	
	ЭлементыТекущегоУровня.СтрокиОснования.Добавить(ЭлементОтчета.ЭлементОтчета);
	
	СоответствиеСтатейКолонок = Новый Соответствие;
	НайденныеСтроки = СтруктураЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент, Строка", Истина, ЭлементОтчета.ЭлементОтчета));
	ЕстьРедактируемаяСтатья = Ложь;
	
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		ОписаниеЯчейки = Новый Структура("СтатьяБюджетов, ИмяПоказателя, РедактируемоеЗначение", 
										НайденнаяСтрока.СтатьяБюджетов, Неопределено, НайденнаяСтрока.РедактируемоеЗначение);
		//если сложная таблица: в разных ячейках могут быть разные показатели
		//для простой таблицы: одна колонка-один показатель
		СтрокаПараметров = ПараметрыЯчеек.Найти(НайденнаяСтрока.ИндексСтроки, "ИндексСтроки");
		Если СложнаяТаблица Тогда
			Если СтрокаПараметров.ФлагЗначение Тогда
				ИмяПоказателя = "Значение";
			ИначеЕсли СтрокаПараметров.ФлагКоличество Тогда
				ИмяПоказателя = "Количество";
			Иначе
				ИмяПоказателя = "Сумма";
			КонецЕсли;
			ОписаниеЯчейки.Вставить("ИмяПоказателя", ИмяПоказателя);
		КонецЕсли;
		Если СтрокаПараметров.ФлагЗначение Тогда
			Если НайденнаяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
				ТипыЗначенийПоказателей = Новый Соответствие;
				Если Не ЭлементыТекущегоУровня.НастройкиКолонок.Свойство("ТипыЗначенийПоказателей", ТипыЗначенийПоказателей) Тогда
					ТипыЗначенийПоказателей = Новый Соответствие;
					ЭлементыТекущегоУровня.НастройкиКолонок.Вставить("ТипыЗначенийПоказателей", ТипыЗначенийПоказателей);
				КонецЕсли;
				ТипыЗначенийПоказателей.Вставить(НайденнаяСтрока.Колонка, СтрокаПараметров.ТипРедактируемогоЗначения);
			КонецЕсли;
		КонецЕсли;
		СоответствиеСтатейКолонок.Вставить(НайденнаяСтрока.Колонка, ОписаниеЯчейки);
		Если ЗначениеЗаполнено(НайденнаяСтрока.СтатьяБюджетов) ИЛИ ЗначениеЗаполнено(НайденнаяСтрока.РедактируемоеЗначение) Тогда
			ЕстьРедактируемаяСтатья = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЭлементОтчета.Строки.Количество() Тогда
		Если Не ЕстьРедактируемаяСтатья Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СложнаяТаблица Тогда
		ЭлементыТекущегоУровня.Вставить("СтатьиБюджетов", СоответствиеСтатейКолонок);
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		
		ТипИзмерения = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "ТипИзмерения", КэшДопРеквизиты);
		Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Период Тогда
			
			Периодичность = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
													ЭлементОтчета.ЭлементОтчета, "Периодичность", КэшДопРеквизиты);
			ЭлементыТекущегоУровня.Периодичности.Добавить(Периодичность);
			ЭлементыТекущегоУровня.НастройкиКолонок.Вставить("Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность), 
				ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы.НастройкиКолонок));
			
			Возврат ЭлементыТекущегоУровня;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение
		ИЛИ ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
		
		Если ЗначениеЗаполнено(ЭлементыТекущегоУровня.Измерения) Тогда
			ЭлементыТекущегоУровня.Измерения = ЭлементыТекущегоУровня.Измерения + ",";
		Иначе
			ЭлементыТекущегоУровня.Измерения = "";
		КонецЕсли;
		ЭлементыТекущегоУровня.Измерения = ЭлементыТекущегоУровня.Измерения + ЭлементОтчета.ИмяИзмерения;
		
		Если ЗначениеЗаполнено(ЭлементОтчета.ФиксированноеЗначение)
			ИЛИ ЭлементОтчета.ЭтоАналитикаПрочее Тогда
			ЗаписываемоеЗначение = ЭлементОтчета.ФиксированноеЗначение;
			Если ЗначениеЗаполнено(ЭлементОтчета.ВидАналитики) Тогда
				ЗаписываемоеЗначение = ЭлементОтчета.ВидАналитики.ТипЗначения.ПривестиЗначение(ЗаписываемоеЗначение);
			КонецЕсли;
			ЭлементыТекущегоУровня.НакопленныйОтбор.Вставить(ЭлементОтчета.ИмяИзмерения, ЗаписываемоеЗначение);
			ЭлементыТекущегоУровня.НастройкиКолонок.Вставить(ЭлементОтчета.ИмяИзмерения, 
				ПараметрыЭлементаСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы.НастройкиКолонок));
		КонецЕсли;
		
		Возврат ЭлементыТекущегоУровня;
		
	КонецЕсли;
	
	Если ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы Тогда
		
		Возврат ЭлементыТекущегоУровня;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НастройкиВводаЯчейкиСписка(СведенияОБюджетеДляРасчета, СтрокаСпискаВвода, Измерения, НакопленныйОтбор)
	
	СтруктураОписанияОтчета = СведенияОБюджетеДляРасчета.СтруктураОписанияОтчета;
	СтруктураКолонок 		= СведенияОБюджетеДляРасчета.СтруктураКолонокТаблицыДанных;
	
	ТаблицаИзмерений = СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать(
							Новый Структура("ОсновнойЭлемент, Строка", Истина, СтрокаСпискаВвода));
	
	МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Измерения);
	НастройкиВвода = Новый Структура();
	
	Для Каждого Измерение из МассивИзмерений Цикл
		
		КопияТаблицы = ТаблицаИзмерений.Скопировать();
		КопияТаблицы.Свернуть(Измерение + ", Флаг" + Измерение);
		
		СписокСтрокСУчетомИерархии = БюджетнаяОтчетностьВыводСервер.СписокПодчиненныхЭлементов(СтрокаСпискаВвода, 
															СведенияОБюджетеДляРасчета.ПодчиненныеЭлементыВидаБюджета);
		Выборка = БюджетнаяОтчетностьВыводСервер.ПолучитьВыборкуЯчеек(
														СтруктураОписанияОтчета.СтруктураЯчеек, 
														Измерение, , СписокСтрокСУчетомИерархии, НакопленныйОтбор, Истина, , Истина);
		
		МассивВыбираемыхЗначений = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы из Выборка Цикл
			Если СтрокаТаблицы["Флаг" + Измерение] = "отобрать" Тогда
				МассивВыбираемыхЗначений.Добавить(СтрокаТаблицы[Измерение]);
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "прочие" Тогда
				Если СтруктураКолонок.Измерения.Найти(Измерение) <> Неопределено Тогда
					МассивВыбираемыхЗначений.Добавить(Неопределено, "<прочие>");
				Иначе
					Для Каждого ВидАналитики из СтруктураКолонок.ВидыАналитик Цикл
						ИмяИзмерения = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
						Если ИмяИзмерения = Измерение Тогда
							МассивВыбираемыхЗначений.Добавить(
									ВидАналитики.ТипЗначения.ПривестиЗначение(Неопределено), 
														"<прочие " + НРег(ВидАналитики) + ">");
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "документ" Тогда
				МассивВыбираемыхЗначений = Неопределено;
				Прервать;
			ИначеЕсли СтрокаТаблицы["Флаг" + Измерение] = "заполнить" Тогда //период
				МассивВыбираемыхЗначений = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НастройкиВвода.Вставить(Измерение, МассивВыбираемыхЗначений);
		
	КонецЦикла;
	
	Возврат НастройкиВвода;
	
КонецФункции

Функция СписокИзмеренийРедактированияОтличается(ЭлементСравнения1, ЭлементСравнения2, СложнаяТаблица)
	
	Если ЭлементСравнения1 = Неопределено
		ИЛИ ЭлементСравнения2 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементСравнения1.Измерения <> ЭлементСравнения2.Измерения Тогда
		Возврат Истина;
	КонецЕсли;
	
	МинимальнаяПериодичность1 = Перечисления.Периодичность.МинимальнаяПериодичность(ЭлементСравнения1.Периодичности);
	МинимальнаяПериодичность2 = Перечисления.Периодичность.МинимальнаяПериодичность(ЭлементСравнения2.Периодичности);
	
	Если МинимальнаяПериодичность1 <> МинимальнаяПериодичность2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СложнаяТаблица Тогда
		Для Каждого КлючИЗначение из ЭлементСравнения1.СтатьиБюджетов Цикл
			НастройкиСтатей2 = ЭлементСравнения2.СтатьиБюджетов[КлючИЗначение.Ключ];
			Если НастройкиСтатей2 = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Если КлючИЗначение.Значение = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Если НастройкиСтатей2.СтатьяБюджетов <> КлючИЗначение.Значение.СтатьяБюджетов
				ИЛИ НастройкиСтатей2.ИмяПоказателя <> КлючИЗначение.Значение.ИмяПоказателя
				ИЛИ НастройкиСтатей2.РедактируемоеЗначение <> КлючИЗначение.Значение.РедактируемоеЗначение Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементыДерева, СоответствиеРезультат, ВышележащиеЭлементы = Неопределено)
	
	СложнаяТаблица 			= СведенияОБюджетеДляРасчета.СложнаяТаблица;
	КэшДопРеквизиты 		= СведенияОБюджетеДляРасчета.КэшДопРеквизиты;
	СтруктураОписанияОтчета = СведенияОБюджетеДляРасчета.СтруктураОписанияОтчета;
	СтруктураКолонок 		= СведенияОБюджетеДляРасчета.СтруктураКолонокТаблицыДанных;
	
	Если ВышележащиеЭлементы = Неопределено Тогда
		
		ВышележащиеЭлементы = Новый Структура("Периодичности, НакопленныйОтбор, 
												|Измерения, НастройкиКолонок, СтрокиОснования", 
												Новый Массив, Новый Структура, 
												"", Новый Структура(), Новый Массив);
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	СоответствиеУровня = Новый Соответствие;
	
	Для Каждого ЭлементОтчета из ЭлементыДерева.Строки Цикл
		
		КолонкиПредыдущегоУровня = Неопределено;
		ЭлементыТекущегоУровня = ДоступныеДляСтрокиБюджетаКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ВышележащиеЭлементы);
		
		Если ЭлементОтчета.Строки.Количество() Тогда
			
			КолонкиПредыдущегоУровня = РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, 
									ЭлементОтчета, СоответствиеРезультат, 
									?(ЭлементыТекущегоУровня = Неопределено, ВышележащиеЭлементы, ЭлементыТекущегоУровня));
			
			Если КолонкиПредыдущегоУровня = Неопределено Тогда
				МассивЭлементов.Добавить(КолонкиПредыдущегоУровня);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КолонкиПредыдущегоУровня <> Неопределено Тогда
			МассивЭлементов.Добавить(КолонкиПредыдущегоУровня);
			Если ЭлементыТекущегоУровня <> Неопределено Тогда
				КолонкиПредыдущегоУровня.НакопленныйОтбор = ЭлементыТекущегоУровня.НакопленныйОтбор;
			Иначе
				КолонкиПредыдущегоУровня.НакопленныйОтбор = ВышележащиеЭлементы.НакопленныйОтбор;
			КонецЕсли;
			СоответствиеУровня.Вставить(ЭлементОтчета.ЭлементОтчета, КолонкиПредыдущегоУровня);
		ИначеЕсли ЭлементыТекущегоУровня <> Неопределено Тогда
			МассивЭлементов.Добавить(ЭлементыТекущегоУровня);
			СоответствиеУровня.Вставить(ЭлементОтчета.ЭлементОтчета, ЭлементыТекущегоУровня);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение из СоответствиеУровня Цикл
		
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(КлючИЗначение.Значение.Периодичности);
		Измерения = "";
		
		Если МинимальнаяПериодичность <> Неопределено Тогда
			Измерения = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение.Измерения) Тогда
			Измерения = Измерения + ?(ЗначениеЗаполнено(Измерения), ",", "") + КлючИЗначение.Значение.Измерения;
		КонецЕсли;
		
		НастройкиВвода = НастройкиВводаЯчейкиСписка(СведенияОБюджетеДляРасчета, 
													КлючИЗначение.Ключ, Измерения, 
													КлючИЗначение.Значение.НакопленныйОтбор);
		
		МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Измерения);
		
		СтруктураОписанияСтроки = Новый Структура("Измерения, НастройкиКолонок, 
													|НастройкиВвода, СтрокиОснования", 
												МассивИзмерений, КлючИЗначение.Значение.НастройкиКолонок, 
												НастройкиВвода, КлючИЗначение.Значение.СтрокиОснования);
												
		Если СложнаяТаблица Тогда
			СтруктураОписанияСтроки.Вставить("СтатьиБюджетов", КлючИЗначение.Значение.СтатьиБюджетов);
		КонецЕсли;
		
		СоответствиеРезультат.Вставить(КлючИЗначение.Ключ, СтруктураОписанияСтроки);
		
	КонецЦикла;
	
	Для Сч = 1 по МассивЭлементов.ВГраница() Цикл
		Если СписокИзмеренийРедактированияОтличается(МассивЭлементов[Сч-1], МассивЭлементов[Сч], СложнаяТаблица) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ОпределяющийЭлемент = Неопределено;
	Для Каждого Элемент из МассивЭлементов Цикл
		Если Элемент <> Неопределено Тогда
			ОпределяющийЭлемент = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОпределяющийЭлемент = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокиОснования = Новый Массив;
	Для Каждого ЭлементМассива из МассивЭлементов Цикл
		Если ЭлементМассива = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиОснования, ЭлементМассива.СтрокиОснования);
	КонецЦикла;
	
	ОпределяющийЭлемент.СтрокиОснования = СтрокиОснования;
	
	Возврат ОпределяющийЭлемент;
	
КонецФункции

Процедура ПараметрыКолонокВвода(ВидБюджета, ЭлементОтчета, СтруктураКолонок, СтруктураОписанияОтчета, КэшДопРеквизиты, ПараметрыЭлементовТаблицы)
	
	СложнаяТаблица = ЭлементОтчета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ТабличнаяЧасть.ВидАналитики.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	Справочник.ВидыБюджетов.АналитикиШапки КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &ВидБюджета";
	
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	РезультатЗапроса = Запрос.Выполнить();
	АналитикиШапки = РезультатЗапроса.Выгрузить();
	
	СведенияОБюджетеДляРасчета = Новый Структура;
	СведенияОБюджетеДляРасчета.Вставить("КэшДопРеквизиты", КэшДопРеквизиты);
	СведенияОБюджетеДляРасчета.Вставить("СтруктураКолонокТаблицыДанных", СтруктураКолонок);
	СведенияОБюджетеДляРасчета.Вставить("СтруктураОписанияОтчета", СтруктураОписанияОтчета);
	СведенияОБюджетеДляРасчета.Вставить("АналитикиШапки", АналитикиШапки);
	СведенияОБюджетеДляРасчета.Вставить("СложнаяТаблица", СложнаяТаблица);
	СведенияОБюджетеДляРасчета.Вставить("ПодчиненныеЭлементыВидаБюджета", ПодчиненныеЭлементыВидаБюджета(ВидБюджета));
	
	Для Каждого ЭлементОтчета из ЭлементОтчета.Строки Цикл
		
		Если ЭлементОтчета.ИмяИзмерения = "Строки" Тогда
			
			РассчитатьКолонкиСпискаВвода(СведенияОБюджетеДляРасчета, ЭлементОтчета, ПараметрыЭлементовТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыСпискаВводаПоСтрокамЯчеек(ВидБюджета, СтруктураКолонокТаблицыДанных,
												СтруктураОписанияОтчета, ДеревоВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = Новый Структура("СформированКэшПараметровСпискаВвода, ХранилищеКэшаПараметровСпискаВвода");
	
	ЗначенияКэша = РегистрыСведений.СтатусыОбработкиВидаБюджета.ПолучитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	
	Если ЗначенияКэша.СформированКэшПараметровСпискаВвода = Истина Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЗначенияКэша.ХранилищеКэшаПараметровСпискаВвода.Получить();
	КонецЕсли;
	
	КэшДопРеквизиты = ФинансоваяОтчетностьСервер.КэшДополнительныеРеквизиты(ВидБюджета);
	ПараметрыСтрок = Новый Соответствие;
	
	Для Каждого ЭлементОтчета из ДеревоВывода.Строки Цикл
		
		Если ЭлементОтчета.ИмяИзмерения = "Таблица" Тогда
			
			ПараметрыКолонокВвода(ВидБюджета, ЭлементОтчета, СтруктураКолонокТаблицыДанных, 
										СтруктураОписанияОтчета, КэшДопРеквизиты, ПараметрыСтрок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Реквизиты = Новый Структура("СформированКэшПараметровСпискаВвода, ХранилищеКэшаПараметровСпискаВвода",
									Истина, Новый ХранилищеЗначения(ПараметрыСтрок));
								
	РегистрыСведений.СтатусыОбработкиВидаБюджета.УстановитьЗначениеСтатуса(ВидБюджета, Реквизиты);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПараметрыСтрок;
	
КонецФункции

#КонецОбласти

#Область ИсточникиЗначенийИзмерения

Процедура ПодчиненныеИсточникиЗначенийЭлемента(ПодчиненныеЭлементы, СписокЭлементов, ВидыЭлементовЗначений, ВсеЭлементы = Ложь)
	
	Для Каждого СтрокаДерева из ПодчиненныеЭлементы Цикл
		
		Если ВидыЭлементовЗначений <> Неопределено
			И ВидыЭлементовЗначений.Найти(СтрокаДерева.ВидЭлемента) <> Неопределено Тогда
			
			НоваяСтрока = СписокЭлементов.Добавить();
			НоваяСтрока.Элемент = 
				?(ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента), СтрокаДерева.АдресСтруктурыЭлемента, СтрокаДерева.ЭлементОтчета);
			НоваяСтрока.ВидЭлемента = СтрокаДерева.ВидЭлемента;
			НоваяСтрока.Наименование = СтрокаДерева.НаименованиеДляПечати;
			
		КонецЕсли;
			
		Если ВсеЭлементы Тогда
			
			СписокЭлементов.Добавить(СтрокаДерева);
			
		КонецЕсли;
		
		ПодчиненныеИсточникиЗначенийЭлемента(
			ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокаДерева), СписокЭлементов, ВидыЭлементовЗначений, ВсеЭлементы );
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОперандыИсточника(ЭлементСписка, ВидыЭлементовЗначений, ТаблицаЭлементов, Результат, Кэш, Заполнение)
	
	Элемент = ЭлементСписка.Элемент;
	
	ПоискОперандаПоАдресу = Ложь;
	СтруктураЭлемента = РеквизитыОбъектаПоСсылкеИлиАдресу(Элемент, "ВидЭлемента, ОперандыФормулы", Кэш);
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ПоискОперандаПоАдресу = Истина;
	КонецЕсли;
	
	НоваяСтрока = Результат.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСписка);
	
	Если СтруктураЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
		ИЛИ (СтруктураЭлемента.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов И Заполнение) Тогда
		
		Если Заполнение Тогда
			НоваяСтрока.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель;
		КонецЕсли;
		
		ЕстьИсточники = Ложь;
		
		Для Каждого СтрокаОперанда из СтруктураЭлемента.ОперандыФормулы Цикл
			
			Если ПоискОперандаПоАдресу И ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
				СтруктураОперанда = ПолучитьИзВременногоХранилища(СтрокаОперанда.АдресСтруктурыЭлемента);
				СсылкаНаОперанд = СтрокаОперанда.АдресСтруктурыЭлемента;
			Иначе
				СтруктураОперанда = Новый Структура;
				СтруктураОперанда.Вставить("ВидЭлемента", 
					Справочники.ЭлементыФинансовыхОтчетов.ЗначениеПоляЭлементаИзКэша(СтрокаОперанда.Операнд, "ВидЭлемента", Кэш));
				СсылкаНаОперанд = СтрокаОперанда.Операнд;
			КонецЕсли;
			
			Если ВидыЭлементовЗначений.Найти(СтруктураОперанда.ВидЭлемента) <> Неопределено Тогда
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.ВидЭлемента = СтруктураОперанда.ВидЭлемента;
				НоваяСтрока.Элемент = СсылкаНаОперанд;
				НоваяСтрока.Родитель = Элемент;
				НоваяСтрока.Наименование = "[" + СтрокаОперанда.Идентификатор + "]";
				ЕстьИсточники = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьИсточники Тогда
			Результат.Удалить(НоваяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьИсточникиОперандамиРекурсивно(СписокЭлементов, ВидыЭлементовЗначений, ТаблицаЭлементов, Результат, Кэш, Заполнение)
	
	Для Каждого ЭлементСписка из СписокЭлементов Цикл
		ОбработатьОперандыИсточника(ЭлементСписка, ВидыЭлементовЗначений, ТаблицаЭлементов, Результат, Кэш, Заполнение);
	КонецЦикла;
	
КонецПроцедуры

Функция ИсточникиЗначенийПоУмолчанию(СтрокаДереваАдресЭлементовОтчета, АдресЭлементаВХранилище = Неопределено, 
																			Кэш, Заполнение = Ложь, БезПроизводных = Ложь) Экспорт
	
	Если ТипЗнч(СтрокаДереваАдресЭлементовОтчета) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаДерева = СтрокаДереваАдресЭлементовОтчета;
	Иначе
		ДеревоЭлементов = ПолучитьИзВременногоХранилища(СтрокаДереваАдресЭлементовОтчета);
		СтрокаДерева = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоЭлементов, "АдресСтруктурыЭлемента", АдресЭлементаВХранилище);
	КонецЕсли;
	ТаблицаИсточников = ИсточникиЗначенийЭлемента(СтрокаДерева, Кэш, Заполнение, БезПроизводных);
	РассчитанныеИсточникиЗначений = СтатьиИПоказателиЗначенийЭлемента(ТаблицаИсточников, Ложь);
	Если Не РассчитанныеИсточникиЗначений.Количество() Тогда
		РассчитанныеИсточникиЗначений = СтатьиИПоказателиЗначенийЭлемента(ТаблицаИсточников, Истина);
	КонецЕсли;
	
	Возврат РассчитанныеИсточникиЗначений;
	
КонецФункции

Функция СтатьиИПоказателиЗначенийЭлемента(ТаблицаИсточников, ВключатьНефинансовые)
	
	ИсточникиЗначений = Новый ТаблицаЗначений;
	ИсточникиЗначений.Колонки.Добавить("Источник");
	ИсточникиЗначений.Колонки.Добавить("ВидЭлемента");
	
	Для Каждого СтрокаДоступныхЭлементов из ТаблицаИсточников Цикл
		
		Если СтрокаДоступныхЭлементов.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			
			Если ВключатьНефинансовые Тогда
				НоваяСтрока = ИсточникиЗначений.Добавить();
				НоваяСтрока.Источник = СтрокаДоступныхЭлементов.Элемент;
				НоваяСтрока.ВидЭлемента = СтрокаДоступныхЭлементов.ВидЭлемента;
			КонецЕсли;
			
		ИначеЕсли СтрокаДоступныхЭлементов.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ СтрокаДоступныхЭлементов.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			
			НоваяСтрока = ИсточникиЗначений.Добавить();
			НоваяСтрока.Источник = СтрокаДоступныхЭлементов.Элемент;
			НоваяСтрока.ВидЭлемента = СтрокаДоступныхЭлементов.ВидЭлемента;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИсточникиЗначений;
	
КонецФункции

Функция РеквизитыОбъектаПоСсылкеИлиАдресу(Элемент, ИменаРеквизитов, Кэш)
	
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		РеквизитыОбъекта = ПолучитьИзВременногоХранилища(Элемент);
	Иначе
		Структура = Новый Структура(ИменаРеквизитов);
		РеквизитыОбъекта = Новый Структура;
		Для Каждого КлючИЗначение ИЗ Структура Цикл
			РеквизитыОбъекта.Вставить(КлючИЗначение.Ключ,
				Справочники.ЭлементыФинансовыхОтчетов.ЗначениеПоляЭлементаИзКэша(Элемент, КлючИЗначение.Ключ, Кэш));
		КонецЦикла;
	КонецЕсли;
	
	Возврат РеквизитыОбъекта;
	
КонецФункции

Функция ИсточникиЗначенийЭлемента(СтрокаДерева, Кэш, Заполнение = Ложь, БезПроизводных = Ложь) Экспорт
	
	СложнаяТаблица = Ложь;
	ИсточникПодчиненных = Неопределено;
	
	Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаДерева, 
														Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
	Если Таблица <> Неопределено Тогда
		СложнаяТаблица = Истина;
	КонецЕсли;
	
	ЭтоСтроки = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаДерева, 
									Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки) = Неопределено;
	
	ВидыЭлементовЗначений = Новый Массив;
	ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
	ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
	ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);
	Если Не Заполнение и Не БезПроизводных Тогда
		ВидыЭлементовЗначений.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	КонецЕсли;
	
	СписокЭлементов = Новый ТаблицаЗначений;
	СписокЭлементов.Колонки.Добавить("ВидЭлемента");
	СписокЭлементов.Колонки.Добавить("Элемент");
	СписокЭлементов.Колонки.Добавить("Родитель");
	СписокЭлементов.Колонки.Добавить("Наименование");
	
	Если Не СложнаяТаблица Тогда
		//1. Определяем список родительских элементов
		Родитель = СтрокаДерева;
		Пока Родитель <> Неопределено Цикл
			Если ВидыЭлементовЗначений.Найти(Родитель.ВидЭлемента) <> Неопределено Тогда
				НоваяСтрока = СписокЭлементов.Добавить();
				НоваяСтрока.Элемент = 
					?(ЗначениеЗаполнено(Родитель.АдресСтруктурыЭлемента), Родитель.АдресСтруктурыЭлемента, Родитель.ЭлементОтчета);
				НоваяСтрока.ВидЭлемента = Родитель.ВидЭлемента;
				НоваяСтрока.Наименование = Родитель.НаименованиеДляПечати;
			КонецЕсли;
			Родитель = ФинансоваяОтчетностьКлиентСервер.РодительСтроки(Родитель);
		КонецЦикла;
		
		//2. Определяем список подчиненных элементов
		ПодчиненныеИсточникиЗначенийЭлемента(ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(СтрокаДерева), 
																			СписокЭлементов, ВидыЭлементовЗначений);
		
		//3. Определяем список транспонированных элементов
		ИсточникПодчиненных = Неопределено;
		
		Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаДерева, 
									Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
		Если Таблица = Неопределено Тогда
			Таблица = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаДерева, 
											Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
		КонецЕсли;
		
		Если Таблица <> Неопределено Тогда //Измерения могут быть выбраны без таблицы
			
			Если ЭтоСтроки Тогда
				ИсточникПодчиненных = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента",
																	Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
			Иначе
				ИсточникПодчиненных = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента",
																	Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
			КонецЕсли;
		
			ПодчиненныеИсточникиЗначенийЭлемента(ФинансоваяОтчетностьКлиентСервер.ПодчиненныеСтроки(ИсточникПодчиненных), 
																					СписокЭлементов, ВидыЭлементовЗначений);
		КонецЕсли;
		
	Иначе
		
		//1. Определяем таблицу элементов
		
		НастройкаЯчеек = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(Таблица, "ВидЭлемента",
																	Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек);
		Если ЗначениеЗаполнено(НастройкаЯчеек.АдресСтруктурыЭлемента) Тогда
			ТаблицаЭлементов = ПолучитьИзВременногоХранилища(НастройкаЯчеек.АдресСтруктурыЭлемента).ЭлементыТаблицы;
		ИначеЕсли Не ЗначениеЗаполнено(НастройкаЯчеек.ЭлементОтчета) Тогда
			НастройкаЯчеек.АдресСтруктурыЭлемента = БюджетнаяОтчетностьКлиентСервер.ПоместитьЭлементВХранилище(
																			НастройкаЯчеек, Новый УникальныйИдентификатор);
			ТаблицаЭлементов = ПолучитьИзВременногоХранилища(НастройкаЯчеек.АдресСтруктурыЭлемента).ЭлементыТаблицы;
		Иначе
			ТаблицаЭлементов = Справочники.ЭлементыФинансовыхОтчетов.ЗначениеПоляЭлементаИзКэша(НастройкаЯчеек.ЭлементОтчета, "ЭлементыТаблицы", Кэш);
		КонецЕсли;
		
		ПоискПоАдресу = ЗначениеЗаполнено(НастройкаЯчеек.АдресСтруктурыЭлемента);
		
		//2. Находим связанные элементы
		
		ВсяВеткаДерева = Новый Массив;
		ВсяВеткаДерева.Добавить(СтрокаДерева);
		ПодчиненныеИсточникиЗначенийЭлемента(СтрокаДерева.Строки, ВсяВеткаДерева, , Истина);
		
		Для Каждого СтрокаОбработки из ВсяВеткаДерева Цикл
			
			ЭлементПоиска = ?(ПоискПоАдресу, СтрокаОбработки.АдресСтруктурыЭлемента, СтрокаОбработки.ЭлементОтчета);
			СтруктураПоиска = Новый Структура(?(ЭтоСтроки, "Строка", "Колонка"), ЭлементПоиска);
		
			РеквизитыОбъекта = РеквизитыОбъектаПоСсылкеИлиАдресу(ЭлементПоиска, "НаименованиеДляПечати", Кэш);
			НаименованиеЭлементаПоиска = РеквизитыОбъекта.НаименованиеДляПечати;
			
			НайденныеСтроки = ТаблицаЭлементов.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				
				Элемент = НайденнаяСтрока.Элемент;
				
				РеквизитыОбъекта = РеквизитыОбъектаПоСсылкеИлиАдресу(Элемент, "ВидЭлемента, НаименованиеДляПечати", Кэш);
				
				Если ВидыЭлементовЗначений.Найти(РеквизитыОбъекта.ВидЭлемента) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Родитель = ?(ЭтоСтроки, НайденнаяСтрока.Колонка, НайденнаяСтрока.Строка);
				НайденнаяСтрокаСпискаЭлементов = СписокЭлементов.Найти(Родитель, "Элемент");
				Если НайденнаяСтрокаСпискаЭлементов = Неопределено Тогда
					НайденнаяСтрокаСпискаЭлементов = СписокЭлементов.Добавить();
					НайденнаяСтрокаСпискаЭлементов.Элемент = Родитель;
					РеквизитыРодитель = РеквизитыОбъектаПоСсылкеИлиАдресу(Родитель, "ВидЭлемента, НаименованиеДляПечати", Кэш);
					НайденнаяСтрокаСпискаЭлементов.ВидЭлемента = РеквизитыРодитель.ВидЭлемента;
					НайденнаяСтрокаСпискаЭлементов.Наименование = РеквизитыРодитель.НаименованиеДляПечати;
				КонецЕсли;
				НоваяСтрока = СписокЭлементов.Добавить();
				НоваяСтрока.ВидЭлемента = РеквизитыОбъекта.ВидЭлемента;
				НоваяСтрока.Элемент = Элемент;
				НоваяСтрока.Родитель = Родитель;
				НоваяСтрока.Наименование = РеквизитыОбъекта.НаименованиеДляПечати + " (" + НаименованиеЭлементаПоиска + ")";
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	//4. Отфильтруем НФП, которые не поддерживают выбранную аналитику
	СсылкаАдрес = ?(ЗначениеЗаполнено(СтрокаДерева.АдресСтруктурыЭлемента), СтрокаДерева.АдресСтруктурыЭлемента, СтрокаДерева.ЭлементОтчета);
	ТипИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СсылкаАдрес, "ТипИзмерения");
	
	Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
		ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
		ВидАналитики = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СсылкаАдрес, "ВидАналитики");
	ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
		ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СсылкаАдрес, "ИмяИзмерения");
	КонецЕсли;
	
	КУдалению = Новый Массив;
	КореньДерева = ФинансоваяОтчетностьКлиентСервер.КорневойЭлемент(СтрокаДерева);
	Для Каждого Элемент из СписокЭлементов Цикл
		
		ВидЭлемента = РеквизитыОбъектаПоСсылкеИлиАдресу(Элемент.Элемент, "ВидЭлемента", Кэш).ВидЭлемента;
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			НефинансовыйПоказатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Элемент.Элемент, "НефинансовыйПоказатель");
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НефинансовыйПоказатель, 
							"ВидАналитики1, ВидАналитики2, ВидАналитики3, ВидАналитики4, ВидАналитики5, ВидАналитики6,
							|ПоСценариям, ПоОрганизациям, ПоПодразделениям");
			НФПДоступен = Ложь;
			Если ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Аналитика
				ИЛИ ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				Для Сч = 1 По 6 Цикл
					Если Реквизиты["ВидАналитики" + Сч] = ВидАналитики Тогда
						НФПДоступен = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.ИзмерениеРегистра Тогда
				ИмяИзмерения = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СсылкаАдрес, "ИмяИзмерения");
				Если ИмяИзмерения = "Сценарий" и Реквизиты.ПоСценариям Тогда
					НФПДоступен = Истина;
				ИначеЕсли ИмяИзмерения = "Подразделение" и Реквизиты.ПоПодразделениям Тогда
					НФПДоступен = Истина;
				ИначеЕсли ИмяИзмерения = "Организация" и Реквизиты.ПоОрганизациям Тогда
					НФПДоступен = Истина;
				КонецЕсли;
			КонецЕсли;
			Если Не НФПДоступен Тогда
				КУдалению.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива из КУдалению Цикл
		СписокЭлементов.Удалить(ЭлементМассива);
	КонецЦикла;
	
	Результат = СписокЭлементов.СкопироватьКолонки();
	ДополнитьИсточникиОперандамиРекурсивно(СписокЭлементов, ВидыЭлементовЗначений, ТаблицаЭлементов, Результат, Кэш, Заполнение);
	
	Возврат Результат;
	
КонецФункции

Процедура ТипизироватьКолонкиАналитики(СКД, Описание)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Для Каждого Аналитика из Описание.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Аналитика);
		ТипКолонки = ТипКолонкиСтруктурыЯчеек(Аналитика, Истина);
		ЗаголовокАналитики = Строка(Аналитика);
		ПустоеЗначение = ТипКолонки.ПривестиЗначение(Неопределено);
		Если ПустоеЗначение = Неопределено Тогда
			ПустоеЗначение = "Неопределено";
		Иначе
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗнч(ПустоеЗначение));
			ПустоеЗначение = "ЗНАЧЕНИЕ(" + МетаданныеТипа.ПолноеИмя() + ".ПустаяСсылка)";
		КонецЕсли;
		ФинОтчеты.НовоеВычисляемоеПоле(СКД, ИмяПоля, "ЕСТЬNULL(" + ИмяПоля + ", " + ПустоеЗначение + ")", Строка(Аналитика));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

