////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Форма отчета УП (клиент, переопределяемый)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик расшифровки табличного документа формы отчета.
//
// Параметры:
//   ЭтаФорма (УправляемаяФорма)
//   Элемент  (ПолеФормы)
//   Остальные параметры передаются из параметров обработчика "как есть",
//       см. события для "Расширение поля формы для поля табличного документа" в справке.
//
Процедура ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
	
	Если ПолноеИмяОтчета = "Отчет.РеестрДоговоровЛизинга" Тогда
		
		КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
		
		ПараметрыРасшифровки = ОтчетыУПВызовСервераПереопределяемый.ПараметрыРасшифровкиРеестраДоговоровЛизинга(
									Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки, КомпоновщикНастроек);
		Если ПараметрыРасшифровки <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Отчет.АнализСубконто.ФормаОбъекта", ПараметрыРасшифровки);
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ДвижениеМатериаловПолуфабрикатовРаботВПроизводстве"
			ИЛИ КлючТекущегоВарианта = "ДвижениеМатериаловПолуфабрикатовРаботВПроизводствеКонтекст" Тогда
			
			// Расшифровать отчетом -> Поступление материалов в производство (расшифровка)
			#Область РасшифровкаПоступлениеМатериаловВПроизводство
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "РасшифровкаПоступлениеМатериаловВПроизводство");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Поступление материалов в производство';uk='Надходження матеріалів у виробництво'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасшифровкаПоступлениеМатериаловВПроизводство");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Организация");
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПоляРасшифровки.Добавить("Серия");
			ПоляРасшифровки.Добавить("Назначение");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("Подразделение");
			НеобходимыеПараметры.Вставить("Номенклатура");
			ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			СписокПараметров.Добавить("Организация");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
			// Расшифровать отчетом -> Расходы на производство
			#Область РасшифровкаРасходовНаПроизводство
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "РасшифровкаРасходовНаПроизводство2КА");
			//++ НЕ УТКА
			ПараметрыОтчета.Вставить("Имя", "РасшифровкаРасходовНаПроизводство2УП");
			//-- НЕ УТКА
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Расходы на производство';uk='Витрати на виробництво'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.РасшифровкаРасходовНаПроизводство");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Организация");
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПоляРасшифровки.Добавить("Назначение");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("Подразделение");
			НеобходимыеПараметры.Вставить("Номенклатура");
			ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			СписокПараметров.Добавить("Организация");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	//++ НЕ УТКА	
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ЗагрузкаВидовРабочихЦентров" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ЗагрузкаВидовРабочихЦентровТаблица" 
			ИЛИ КлючТекущегоВарианта = "ЗагрузкаВидовРабочихЦентровТаблицаКонтекст" Тогда
			
			// Перейти -> Занятость вида рабочего центра
			#Область ИзменениеЗанятостиВидаРабочегоЦентра
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("Имя", "ИзменениеЗанятостиВидаРабочегоЦентра");
			ПараметрыДействия.Вставить("Заголовок", НСтр("ru='Занятость вида рабочего центра';uk='Зайнятість виду робочого центру'"));
			ПараметрыДействия.Вставить("Действие", "ОткрытьФорму");
			ПараметрыДействия.Вставить("ИмяФормы", "Обработка.ДиспетчированиеГрафикаПроизводства.Форма.ИзменениеЗанятостиВидаРабочегоЦентра");
			
			ПоляРасшифровки = Новый Массив;
			ПоляРасшифровки.Добавить("ВидРабочегоЦентра");
			ПоляРасшифровки.Добавить("ПериодГрафика");
			ПараметрыДействия.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("ВидРабочегоЦентра");
			НеобходимыеПараметры.Вставить("ПериодГрафика");
			ПараметрыДействия.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидРабочегоЦентра");
			ПараметрыФормы.Вставить("ПериодГрафика");
			ПараметрыДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
			
			ЗаменаПараметров = Новый Структура;
			ЗаменаПараметров.Вставить("ПериодГрафика", "НачалоПериода");
			ПараметрыДействия.Вставить("ЗаменаПараметров", ЗаменаПараметров);
			
			МенюДействий.Добавить(ПараметрыДействия);
			#КонецОбласти
			
			// Перейти -> Изменить доступность вида рабочих центров
			#Область ИзменитьДоступностьВидаРЦ
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("Имя", "ИзменитьДоступностьВидаРЦ");
			ПараметрыДействия.Вставить("Заголовок", НСтр("ru='Изменить доступность вида рабочих центров';uk='Змінити доступність виду робочих центрів'"));
			ПараметрыДействия.Вставить("ИмяОбщегоМодуля", "ОтчетыУПКлиентПереопределяемый");
			
			ПоляРасшифровки = Новый Массив;
			ПоляРасшифровки.Добавить("ВидРабочегоЦентра");
			ПоляРасшифровки.Добавить("ПериодГрафика");
			ПараметрыДействия.Вставить("ПоляРасшифровки", НеобходимыеПараметры);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("ВидРабочегоЦентра");
			НеобходимыеПараметры.Вставить("ПериодГрафика");
			ПараметрыДействия.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			МенюДействий.Добавить(ПараметрыДействия);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ЗагрузкаРабочихЦентров" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ЗагрузкаРабочихЦентров" Тогда
			
			// Расшифровать отчетом -> Анализ суточной загрузки
			#Область АнализСуточнойЗагрузкиКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "АнализСуточнойЗагрузкиКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Анализ суточной загрузки';uk='Аналіз добового завантаження'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализСуточнойЗагрузки");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("РабочийЦентр");
			ПоляРасшифровки.Добавить("ВидРабочегоЦентра");
			ПоляРасшифровки.Добавить("ПериодГрафика");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("ПериодГрафика");
			ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Перегрузка");
			СписокПараметров.Добавить("Недозагрузка");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализВыполненияМаршрутныхЛистов" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ВыполнениеМаршрутныхЛистовСЗадержками" Тогда
			
			// Расшифровать отчетом -> Сведения о выполнении маршрутных листов
			#Область СведенияОВыполненииМаршрутныхЛистовКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "СведенияОВыполненииМаршрутныхЛистовКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Сведения о выполнении маршрутных листов';uk='Відомості про виконання маршрутних листів'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("МаршрутнаяКарта");
			ПоляРасшифровки.Добавить("Этап");
			ПоляРасшифровки.Добавить("Спецификация");
			ПоляРасшифровки.Добавить("Буфер");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПоляРасшифровки.Добавить("ПричинаЗадержки");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
			// Расшифровать отчетом -> Причины задержек выполнения маршрутных листов
			#Область ПричиныЗадержекКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "ПричиныЗадержекКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Причины задержек выполнения маршрутных листов';uk='Причини затримок виконання маршрутних листів'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализПричинЗадержекВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("МаршрутнаяКарта");
			ПоляРасшифровки.Добавить("Этап");
			ПоляРасшифровки.Добавить("Спецификация");
			ПоляРасшифровки.Добавить("Буфер");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПоляРасшифровки.Добавить("ПричинаЗадержки");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		ИначеЕсли КлючТекущегоВарианта = "ВыполнениеМаршрутныхЛистовБезЗадержек" Тогда
			
			// Расшифровать отчетом -> Сведения о выполнении маршрутных листов
			#Область СведенияОВыполненииМаршрутныхЛистовКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "СведенияОВыполненииМаршрутныхЛистовКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Сведения о выполнении маршрутных листов';uk='Відомості про виконання маршрутних листів'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("МаршрутнаяКарта");
			ПоляРасшифровки.Добавить("Этап");
			ПоляРасшифровки.Добавить("Спецификация");
			ПоляРасшифровки.Добавить("Буфер");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализПричинЗадержекВыполненияМаршрутныхЛистов" Тогда
			
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ПричиныЗадержек" Тогда
			
			// Расшифровать отчетом -> Сведения о выполнении маршрутных листов
			#Область СведенияОВыполненииМаршрутныхЛистовКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "СведенияОВыполненииМаршрутныхЛистовКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Сведения о выполнении маршрутных листов';uk='Відомості про виконання маршрутних листів'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("ПричинаЗадержки");
			ПоляРасшифровки.Добавить("Подразделение");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
			// Расшифровать отчетом -> Выполнение маршрутных листов с задержками
			#Область ВыполнениеМаршрутныхЛистовСЗадержками
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "ВыполнениеМаршрутныхЛистовСЗадержками");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Выполнение маршрутных листов с задержками';uk='Виконання маршрутних листів із затримками'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("ПричинаЗадержки");
			ПоляРасшифровки.Добавить("Подразделение");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СверкаОборотовМУиБУ" Тогда
		СтандартнаяОбработка = Ложь;
		
		СчетСтрокиСверки = ОтчетыУПВызовСервераПереопределяемый.ПолучитьСчетСтрокиСверки(ЭтаФорма.ОтчетДанныеРасшифровки,Число(Расшифровка));
		Если ЗначениеЗаполнено(СчетСтрокиСверки) Тогда
			
			Если ТипЗнч(СчетСтрокиСверки) = Тип("ПланСчетовСсылка.Международный") Тогда
				ОткрытьОтчетАнализСчетаМеждународный(ЭтаФорма.Отчет, СчетСтрокиСверки);
			ИначеЕсли ТипЗнч(СчетСтрокиСверки) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
				АдресРасшифровки = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
				ОткрытьОтчетАнализСчетаХозрасчетный(ЭтаФорма.Отчет, АдресРасшифровки, СчетСтрокиСверки);
			Иначе
				ПоказатьЗначение(Неопределено, СчетСтрокиСверки);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.БухгалтерскийОтчетМеждународный" Тогда
		
		Если КлючТекущегоВарианта = "АнализСчетаМеждународный" Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыРасшифровки = Новый Структура;
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Счет");
			ПоляРасшифровки.Добавить("Субконто1");
			ПоляРасшифровки.Добавить("Субконто2");
			ПоляРасшифровки.Добавить("Субконто3");
			ПоляРасшифровки.Добавить("КорСчет");
			ПоляРасшифровки.Добавить("КорСубконто1");
			ПоляРасшифровки.Добавить("КорСубконто2");
			ПоляРасшифровки.Добавить("КорСубконто3");
			ПараметрыРасшифровки.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			ПараметрыРасшифровки.Вставить("СписокПараметров", СписокПараметров);
			
			ПараметрыФормыРасшифровки = ОтчетыУПВызовСервераПереопределяемый.ПараметрыКарточкиСчета(
												Расшифровка, 
												ЭтаФорма.ОтчетДанныеРасшифровки,
												ПараметрыРасшифровки.СписокПараметров, 
												ПараметрыРасшифровки.ПоляРасшифровки);
			
			ОткрытьОтчетКарточкаСчетаМеждународный(ЭтаФорма.Отчет, ПараметрыФормыРасшифровки);
		
		КонецЕсли;// КлючТекущегоВарианта = "АнализСчетаМеждународный"
	//-- НЕ УТКА
	
	//++ НЕ УТ
	ИначеЕсли ПолноеИмяОтчета = "Отчет.СверкаДанныхОУиБУ" Тогда

		ПараметрыРасшифровки = ОтчетыУПВызовСервераПереопределяемый.ПолучитьПараметрыРасшифровки(ЭтаФорма.ОтчетДанныеРасшифровки, Расшифровка);
		
		ПоляРасшифровки = ПараметрыРасшифровки.ПоляРасшифровки;
		АналитикаСтроки = ПараметрыРасшифровки.АналитикаСтроки;
		
		ИдентификаторПараметраПериод = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(
			ЭтаФорма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета")));
		НастройкаПериод = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраПериод);
		АналитикаСтроки.Вставить("ПериодОтчета", НастройкаПериод.Значение);
		Для каждого ЭлементОтбора из ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				АналитикаСтроки.Вставить("ПоказатьТолькоОтклонения", ЭлементОтбора.Использование);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ПолеРасшифровки из ПоляРасшифровки Цикл
			
			Если ПолеРасшифровки = "НачальноеСальдо"	или ПолеРасшифровки = "КонечноеСальдо"	или
				 ПолеРасшифровки = "ОборотДт"			или ПолеРасшифровки = "ОборотКт"		или
				 ПолеРасшифровки = "НачальныйОстаток"	или ПолеРасшифровки = "Приход"			или
				 ПолеРасшифровки = "Расход"				или ПолеРасшифровки = "КонечныйОстаток"	или
				 ПолеРасшифровки = "НачОткл"			или ПолеРасшифровки = "КонОткл"			или
				 ПолеРасшифровки = "ПриходОткл"			или ПолеРасшифровки = "РасходОткл"		Тогда
				 
				СтандартнаяОбработка = Ложь;
				
				Если ЭтаФорма.КлючТекущегоВарианта = "СверкаПоРегистраторам" Тогда
					Возврат;
				КонецЕсли;

				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("КлючВарианта",                     "СверкаПоРегистраторам");
				ПараметрыФормы.Вставить("СформироватьПриОткрытии",          Истина);
				ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",  Ложь);
				ПараметрыФормы.Вставить("РежимРасшифровки",                 Истина);
				
				ПользовательскиеНастройки = ОтчетыУПВызовСервераПереопределяемый.ПараметрыРасшифровки(АналитикаСтроки);
				ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
				ОткрытьФорму("Отчет.СверкаДанныхОУиБУ.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЦикла;
	//-- НЕ УТ
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.РасшифровкаФормулыБюджетногоОтчета" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = БюджетнаяОтчетностьВызовСервера.ПараметрыФормыРасшифровкиОтчетаРасшифровки(
																		Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		
		Если ПараметрыОткрытия = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru='Нет данных для расшифровки';uk='Немає даних для розшифровки'"));
		Иначе
			БюджетнаяОтчетностьКлиент.ОткрытьФормуОтчета(ПараметрыОткрытия, ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПроверкаСвязейПоказателейБюджетов" Тогда
		
		ДанныеРасшифровкиОтчета = БюджетированиеВызовСервера.ДанныеРасшифровкиОтчета(Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		
		Если ДанныеРасшифровкиОтчета.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
			СтандартнаяОбработка = Ложь;
			
			ДоступныеПоляРасшифровки  = Новый Структура;
			ДоступныеПоляРасшифровки.Вставить("ПоказательБюджетов");
			ДоступныеПоляРасшифровки.Вставить("Аналитика1");
			ДоступныеПоляРасшифровки.Вставить("Аналитика2");
			ДоступныеПоляРасшифровки.Вставить("Аналитика3");
			ДоступныеПоляРасшифровки.Вставить("Аналитика4");
			ДоступныеПоляРасшифровки.Вставить("Аналитика5");
			ДоступныеПоляРасшифровки.Вставить("Аналитика6");
			ДоступныеПоляРасшифровки.Вставить("Валюта");
			
			ПоляРасшифровки = Новый Структура;
			Для каждого Поле Из ДанныеРасшифровкиОтчета.ПоляРасшифровки Цикл
				Если ДоступныеПоляРасшифровки.Свойство(Поле.Ключ) Тогда
					ПоляРасшифровки.Вставить(Поле.Ключ, Поле.Значение);
				КонецЕсли;
			КонецЦикла;
			Для каждого Поле Из ДанныеРасшифровкиОтчета.ПоляРасшифровкиРодители Цикл
				Если ДоступныеПоляРасшифровки.Свойство(Поле.Ключ) Тогда
					ПоляРасшифровки.Вставить(Поле.Ключ, Поле.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Параметры = Новый Структура;
			Параметры.Вставить("ОтчетРасшифровки"	, "СправкаРасчетПоказателяБюджетов");
			Параметры.Вставить("КлючВарианта"		, "СправкаРасчетПоказателяБюджетов");
			Параметры.Вставить("КомпоновщикНастроек", ЭтаФорма.Отчет.КомпоновщикНастроек);
			Параметры.Вставить("ПоляРасшифровки"	, ПоляРасшифровки);
			НастройкаРасчетПоказателяБюджетов = ФинансоваяОтчетностьВызовСервера.НастроитьОтчетРасшифровки(Параметры);
			
			ПараметрыДанныхОсновногоОтчета = ЭтаФорма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
			
			ФиксированныеПараметры = Новый Структура("Период, Показатель");
			Для Каждого КлючИЗначение из ФиксированныеПараметры Цикл
			
				ПараметрНастроек = ПараметрыДанныхОсновногоОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ));
				Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкаРасчетПоказателяБюджетов.ФиксированныеНастройки, КлючИЗначение.Ключ);
				Если Параметр = Неопределено Тогда
					Параметр = НастройкаРасчетПоказателяБюджетов.ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
					Параметр.Параметр = Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ);
				КонецЕсли;
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкаРасчетПоказателяБюджетов.ФиксированныеНастройки,
																					КлючИЗначение.Ключ, ПараметрНастроек.Значение, Истина);
				
			КонецЦикла;
			
			КлючНастроек = "РасшифровкаПоказателяБюджетов";
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("КлючВарианта",                  "СправкаРасчетПоказателяБюджетов");
			ПараметрыФормы.Вставить("КлючНазначенияИспользования",    КлючНастроек);
			ПараметрыФормы.Вставить("КлючПользовательскихНастроек",   КлючНастроек);
			ПараметрыФормы.Вставить("ПользовательскиеНастройки",      НастройкаРасчетПоказателяБюджетов.ПользовательскиеНастройки);
			ПараметрыФормы.Вставить("ФиксированныеНастройки",         НастройкаРасчетПоказателяБюджетов.ФиксированныеНастройки);
			ПараметрыФормы.Вставить("СформироватьПриОткрытии",        Истина);
			ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",Ложь);
			ПараметрыФормы.Вставить("РежимРасшифровки",               Истина);
			ОткрытьФорму("Отчет.СправкаРасчетПоказателяБюджетов.Форма", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;
	
	//++ НЕ УТКА
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ИспользованиеСчетовИСубконтоМеждународныйУчет" Тогда
		
		ПараметрыРасшифровки = ОтчетыУПВызовСервераПереопределяемый.ПараметрыРасшифровкиНастроек(
												Расшифровка, 
												ЭтаФорма.ОтчетДанныеРасшифровки);
		Если ПараметрыРасшифровки.ЭтоПроизводный Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", ПараметрыРасшифровки.ЭлементОтчета);
			
			ПараметрыФормы.Вставить("ВидПоказателей", 					ПараметрыРасшифровки.ВидПоказателей);
			ПараметрыФормы.Вставить("АдресЭлементаВХранилище", 			"");
			ПараметрыФормы.Вставить("ИдентификаторГлавногоХранилища", 	ЭтаФорма.УникальныйИдентификатор);
			ПараметрыФормы.Вставить("ДополнительныйРежимФормы", 		ПредопределенноеЗначение("Перечисление.ДополнительныеРежимыЭлементовОтчетов.ВидОтчета"));
			ПараметрыФормы.Вставить("ПоказатьКодСтрокиПримечание",		Истина);
			ПараметрыФормы.Вставить("ТолькоПросмотр",					Истина);
			
			ОткрытьФорму("Справочник.ЭлементыФинансовыхОтчетов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
	ИначеЕсли КлючТекущегоВарианта = "ОтклонениеЗаказаФактаОтКалькуляции" 
		Или КлючТекущегоВарианта = "ЗаказКонтекст" Тогда
		
		СписокПараметров = Новый Массив;
		
		СписокПараметров.Добавить("ДанныеОтчета");
		
		ПоляРасшифровки = Новый Массив;
		
		ПоляРасшифровки.Добавить("ЗаказНаПроизводство");
		ПоляРасшифровки.Добавить("КодСтрокиЗаказаНаПроизводство");
		ПоляРасшифровки.Добавить("СтатьяКалькуляции");
		
		// Поля для расшифровки К-З
		ПоляРасшифровкиКЗ = Новый Массив;
		ПоляРасшифровкиКЗ.Добавить("СуммаКалькуляция");
		ПоляРасшифровкиКЗ.Добавить("СуммаЗаказВсеЭтапы");
		ПоляРасшифровкиКЗ.Добавить("Отклонение_Сумма_Калькуляция_ЗаказВсеЭтапы");
		ПоляРасшифровкиКЗ.Добавить("Процент_Сумма_Калькуляция_ЗаказВсеЭтапы");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасшифровки, ПоляРасшифровкиКЗ);
		
		// Поля для расшифровки З-Ф
		ПоляРасшифровкиЗФ = Новый Массив;
		ПоляРасшифровкиЗФ.Добавить("СуммаЗаказВсеЭтапыДубль");
		ПоляРасшифровкиЗФ.Добавить("СуммаФактПрогнозДубль");
		ПоляРасшифровкиЗФ.Добавить("Отклонение_Сумма_ЗаказВсеЭтапы_ФактПрогноз");
		ПоляРасшифровкиЗФ.Добавить("Процент_Сумма_ЗаказВсеЭтапы_ФактПрогноз");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасшифровки, ПоляРасшифровкиЗФ);
		
		// Поля для расшифровки К-Ф
		ПоляРасшифровкиКФ = Новый Массив;
		ПоляРасшифровкиКФ.Добавить("СуммаКалькуляцияДубль");
		ПоляРасшифровкиКФ.Добавить("СуммаФактПрогноз");
		ПоляРасшифровкиКФ.Добавить("Отклонение_Сумма_Калькуляция_ФактПрогноз");
		ПоляРасшифровкиКФ.Добавить("Процент_Сумма_Калькуляция_ФактПрогноз");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасшифровки, ПоляРасшифровкиКФ);
		
		ДанныеРасшифровкиОтчета = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(
												Расшифровка,
												ЭтаФорма.ОтчетДанныеРасшифровки,
												СписокПараметров,
												ПоляРасшифровки);
		
		Если ДанныеРасшифровкиОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВариантОтчета = Неопределено;
		
		Для Каждого ПолеРасшифровки Из ПоляРасшифровкиКЗ Цикл
			Если ДанныеРасшифровкиОтчета.Свойство(ПолеРасшифровки) Тогда
				ВариантОтчета = "ОтклонениеСпецификацииЗаказаОтКалькуляции";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВариантОтчета = Неопределено Тогда
			Для Каждого ПолеРасшифровки Из ПоляРасшифровкиЗФ Цикл
				Если ДанныеРасшифровкиОтчета.Свойство(ПолеРасшифровки) Тогда
					ВариантОтчета = "ОтклонениеФактаОтСпецификацииЗаказа";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВариантОтчета = Неопределено Тогда
			Для Каждого ПолеРасшифровки Из ПоляРасшифровкиКФ Цикл
				Если ДанныеРасшифровкиОтчета.Свойство(ПолеРасшифровки) Тогда
					ВариантОтчета = "ОтклонениеФактаОтКалькуляции";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ВариантОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ФиксированныеНастройки = ПланированиеПроизводстваВызовСервера.ПараметрыРасшифровкиОтклонениеЗаказаФактаОтКалькуляции(ДанныеРасшифровкиОтчета);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта",                   ВариантОтчета);
		ПараметрыФормы.Вставить("ФиксированныеНастройки",         ФиксированныеНастройки);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",        Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",Ложь);
		ПараметрыФормы.Вставить("РежимРасшифровки",               Истина);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДанныеОтчета", ДанныеРасшифровкиОтчета.ДанныеОтчета);
		
		Если ДанныеРасшифровкиОтчета.Свойство("СтатьяКалькуляции") Тогда
			Отбор.Вставить("СтатьяКалькуляции", ДанныеРасшифровкиОтчета.СтатьяКалькуляции);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("Отчет.ОтклонениеЗаказаФактаОтКалькуляции.Форма", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли КлючТекущегоВарианта = "ПлановаяИФактическаяСебестоимостьВыпущеннойПродукции"
		Или КлючТекущегоВарианта = "ОтклоненияСебестоимостиПоСтатьямКалькуляции" Тогда
		
		СписокПараметров = Новый Массив;
		
		СписокПараметров.Добавить("ДанныеОтчета");
		СписокПараметров.Добавить("ПериодОтчета");
		
		ПоляРасшифровки = Новый Массив;
		
		ПоляРасшифровки.Добавить("Продукция");
		ПоляРасшифровки.Добавить("ХарактеристикаПродукци");
		ПоляРасшифровки.Добавить("Калькуляция");
		ПоляРасшифровки.Добавить("СтатьяКалькуляции");
		ПоляРасшифровки.Добавить("СуммаКалькуляция");
		ПоляРасшифровки.Добавить("СуммаФакт");
		ПоляРасшифровки.Добавить("СуммаОтклонение");
		ПоляРасшифровки.Добавить("СуммаПроцентОтклонения");
		
		ДанныеРасшифровкиОтчета = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(
			Расшифровка,
			ЭтаФорма.ОтчетДанныеРасшифровки,
			СписокПараметров,
			ПоляРасшифровки);
		
		Если ДанныеРасшифровкиОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеРасшифровкиОтчета.Продукция)
			Или Не (ДанныеРасшифровкиОтчета.Свойство("СуммаКалькуляция")
			Или ДанныеРасшифровкиОтчета.Свойство("СуммаФакт")
			Или ДанныеРасшифровкиОтчета.Свойство("СуммаОтклонение")
			Или ДанныеРасшифровкиОтчета.Свойство("СуммаПроцентОтклонения")) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта",                   "ПлановаяИФактическаяСебестоимостьВыпущеннойПродукцииРасшифровка");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",        Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",Ложь);
		ПараметрыФормы.Вставить("РежимРасшифровки",               Истина);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ДанныеОтчета", ДанныеРасшифровкиОтчета.ДанныеОтчета);
		Отбор.Вставить("ПериодОтчета", ДанныеРасшифровкиОтчета.ПериодОтчета);
		
		Если ДанныеРасшифровкиОтчета.Свойство("Продукция") Тогда
			Отбор.Вставить("Продукция", ДанныеРасшифровкиОтчета.Продукция);
		КонецЕсли;
		Если ДанныеРасшифровкиОтчета.Свойство("ХарактеристикаПродукци") Тогда
			Отбор.Вставить("ХарактеристикаПродукци", ДанныеРасшифровкиОтчета.ХарактеристикаПродукци);
		КонецЕсли;
		Если ДанныеРасшифровкиОтчета.Свойство("Калькуляция") Тогда
			Отбор.Вставить("Калькуляция", ДанныеРасшифровкиОтчета.Калькуляция);
		КонецЕсли;
		Если ДанныеРасшифровкиОтчета.Свойство("СтатьяКалькуляции") Тогда
			Отбор.Вставить("СтатьяКалькуляции", ДанныеРасшифровкиОтчета.СтатьяКалькуляции);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.ПлановаяИФактическаяСебестоимостьВыпущеннойПродукции.Форма", ПараметрыФормы, ЭтаФорма, Истина);
		
	ИначеЕсли КлючТекущегоВарианта = "АнализОтклоненийПоПодразделениям" Тогда
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("ДанныеОтчета");
		
		ПоляРасшифровки = Новый Массив;
		
		ПоляРасшифровки.Добавить("ЗаказНаПроизводствоДубль");
		ПоляРасшифровки.Добавить("КодСтрокиЗаказаНаПроизводство");
		ПоляРасшифровки.Добавить("ЭтапДубль");
		ПоляРасшифровки.Добавить("СуммаЗаказВсеЭтапы");
		ПоляРасшифровки.Добавить("СуммаФактПрогноз");
		ПоляРасшифровки.Добавить("Отклонение_Сумма_ЗаказВсеЭтапы_ФактПрогноз");
		ПоляРасшифровки.Добавить("Процент_Сумма_ЗаказВсеЭтапы_ФактПрогноз");
		ПоляРасшифровки.Добавить("Значимость");
		
		ДанныеРасшифровкиОтчета = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(
			Расшифровка,
			ЭтаФорма.ОтчетДанныеРасшифровки,
			СписокПараметров,
			ПоляРасшифровки);
			
		Если ДанныеРасшифровкиОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеРасшифровкиОтчета.Свойство("ЗаказНаПроизводствоДубль")
			Или Не ДанныеРасшифровкиОтчета.Свойство("КодСтрокиЗаказаНаПроизводство")
			Или Не ДанныеРасшифровкиОтчета.Свойство("ЭтапДубль") 
			Или Не (ДанныеРасшифровкиОтчета.Свойство("СуммаЗаказВсеЭтапы")
			Или ДанныеРасшифровкиОтчета.Свойство("СуммаФактПрогноз")
			Или ДанныеРасшифровкиОтчета.Свойство("Отклонение_Сумма_ЗаказВсеЭтапы_ФактПрогноз")
			Или ДанныеРасшифровкиОтчета.Свойство("Процент_Сумма_ЗаказВсеЭтапы_ФактПрогноз")
			Или ДанныеРасшифровкиОтчета.Свойство("Значимость")) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта",                     "ОтклонениеФактаОтСпецификацииЗаказаБезПрогноза");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",          Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",  Ложь);
		ПараметрыФормы.Вставить("РежимРасшифровки",                 Истина);
		
		Отбор = Новый Структура();
		
		Отбор.Вставить("ЗаказРасшифровка",                          ДанныеРасшифровкиОтчета.ЗаказНаПроизводствоДубль);
		Отбор.Вставить("КодСтрокиРасшифровка",                      ДанныеРасшифровкиОтчета.КодСтрокиЗаказаНаПроизводство);
		Отбор.Вставить("Этап",                                      ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРасшифровкиОтчета.ЭтапДубль));
		Отбор.Вставить("ДанныеОтчета",                              ДанныеРасшифровкиОтчета.ДанныеОтчета);
		
		МассивТиповЗатрат = Новый Массив;
		МассивТиповЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"));
		МассивТиповЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда"));
		МассивТиповЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ВозвратныеОтходы"));
		
		Отбор.Вставить("ТипЗатрат",                                 МассивТиповЗатрат);
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.ОтклонениеЗаказаФактаОтКалькуляции.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПередачаМатериаловПоЗаказу" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ПередачаМатериаловПоЗаказуКонтекст"
			ИЛИ КлючТекущегоВарианта = "ПередачаМатериаловПоМаршрутномуЛистуКонтекст" Тогда
			
			// Расшифровать отчетом -> Маршрутные листы
			#Область МаршрутныеЛистыКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "МаршрутныеЛистыКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Маршрутные листы';uk='Маршрутні листи'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.ПередачаМатериаловПоЗаказу");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Распоряжение");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
			// Расшифровать отчетом -> Передачи в производство
			#Область ПередачиВПроизводствоКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "ПередачиВПроизводствоКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru='Передачи в производство';uk='Передачі у виробництво'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.ПередачаМатериаловПоЗаказу");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Распоряжение");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	//-- НЕ УТКА
	КонецЕсли;
	
КонецПроцедуры

// Обработчик дополнительной расшифровки (меню табличного документа формы отчета).
//
// Параметры:
//   ЭтаФорма (УправляемаяФорма)
//   Элемент  (ПолеФормы)
//   Остальные параметры передаются из параметров обработчика "как есть",
//       см. события для "Расширение поля формы для поля табличного документа" в справке.
//
Процедура ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт

КонецПроцедуры

// Обработчик команд, добавленных динамически.
//
// Параметры:
//   ЭтаФорма  (УправляемаяФорма) Форма отчета.
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//   Результат (Булево)           Истина, если вызов команды обработан.
//
Процедура ОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	
	//++ НЕ УТКА
	// Вызов подключаемых команд отчетов
	Если ПолноеИмяОтчета = "Отчет.СверкаОборотовМУиБУ" Тогда
		Если Команда.Имя = "НастройкаСоответствияСчетов" Тогда
			НастройкаСоответствияСчетов(ЭтаФорма);
		ИначеЕсли Команда.Имя = "НастройкаСоответствияСчетовИОборотов" Тогда
			НастройкаСоответствияСчетовИОборотов(ЭтаФорма);
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ИспользованиеСчетовИСубконтоМеждународныйУчет" Тогда
		Если Команда.Имя = ИмяЭлемента(ЭтаФорма.НастройкиОтчета.ДопПараметры.ПланСчетов) Тогда
			УстановитьТипЗависимыхРеквизитов(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Отчет", ПолноеИмяОтчета);
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, ДополнительныеПараметры); 
	
КонецПроцедуры

// Обработчик результата выбора подчиненной формы.
//
// Параметры:
//   ЭтаФорма          (УправляемаяФорма) Форма отчета.
//   ВыбранноеЗначение (*)                Результат выбора в подчиненной форме.
//   ИсточникВыбора    (УправляемаяФорма) Форма, где осуществлен выбор. 
//   Результат         (Булево)           Истина, если результат выбора обработан.
//
Процедура ОбработкаВыбора(ЭтаФорма,ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
КонецПроцедуры

// Обработчик оповещения формы отчета.
//
// Параметры:
//   ЭтаФорма   (УправляемаяФорма) Форма отчета.
//   ИмяСобытия (Строка)           Имя события.
//   Параметр   (*)                Параметр сообщения.
//   Источник   (УправляемаяФорма) Источник события.
//
Процедура ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник) Экспорт
	
КонецПроцедуры
 
// Обработчик специальных действий при расшифровке отчетов.
// Например, открытие специализированных форм с параметризацией.
//
//	Параметры:
//		ПараметрыДействия - Структура
//			Имя - Строка - Имя выполняемого действия
//			Заголовок - Строка - Пользовательское представление выполняемого действия
//		ПараметрыРасшифровки - Структура - Параметры, передаваемые в форму
//
Процедура ВыполнитьДействиеРасшифровки(ПараметрыДействия, ПараметрыРасшифровки) Экспорт
	
//++ НЕ УТКА
	Если ПараметрыДействия.Имя = "ИзменитьДоступностьВидаРЦ" Тогда
		
		ПланированиеПроизводстваКлиент.ИзменитьДоступностьВидаРЦ(
					ПараметрыРасшифровки.ВидРабочегоЦентра, 
					ПараметрыРасшифровки.ПериодГрафика);
	Иначе
//-- НЕ УТКА
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Не определен обработчик действия %1.';uk='Не визначено обробник дії %1.'"),
										ПараметрыДействия.Заголовок);
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА

КонецПроцедуры

// Метод вызывается из формы отчета после его формирования.
//
// Параметры:
//   ЭтаФорма   (УправляемаяФорма) Форма отчета.
Процедура ПослеФормированияНаКлиенте(ФормаОтчета) Экспорт
	
	ДопСвойства = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ТребуетсяОбработчикОжидания = Ложь;
	Если ТипЗнч(ПараметрыПроверкиФоновыхЗаданий) <> Тип("Структура") Тогда
		ПараметрыПроверкиФоновыхЗаданий = Новый Структура;
		ПараметрыПроверкиФоновыхЗаданий.Вставить("Задания", Новый Структура());
		ПараметрыПроверкиФоновыхЗаданий.Вставить("Интервал", 7);
	КонецЕсли;
	Если ДопСвойства.Свойство("КоличествоДокументовКОтражениюВБюджетировании") Тогда
		ТребуетсяОбработчикОжидания = Истина;
		Если НЕ ПараметрыПроверкиФоновыхЗаданий.Задания.Свойство("ОтражениеДокументовВБюджетировании") Тогда
			ПараметрыТекущегоВызова = Новый Структура("НачалоПериода, КонецПериода", ДопСвойства.НачалоПериода, ДопСвойства.КонецПериода);
			ПараметрыЗадания = Новый Структура("Параметры, Формы", ПараметрыТекущегоВызова, Новый Соответствие());
			ПараметрыПроверкиФоновыхЗаданий.Задания.Вставить("ОтражениеДокументовВБюджетировании", ПараметрыЗадания);
		КонецЕсли;
		ПараметрыЗадания = ПараметрыПроверкиФоновыхЗаданий.Задания.ОтражениеДокументовВБюджетировании.Формы;
		ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", ДопСвойства.НачалоПериода, ДопСвойства.КонецПериода);
		ПараметрыЗадания.Вставить(ФормаОтчета, ПараметрыФормы);
	КонецЕсли;
	Если ТребуетсяОбработчикОжидания Тогда
		ФормаОтчета.ПодключитьОбработчикОжидания("ПроверитьФоновыеЗадания", ПараметрыПроверкиФоновыхЗаданий.Интервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаОтчетаПослеПодтвержденияПереформирования(Ответ, ПараметрыВыполнения) Экспорт
	Перем НеобработанныеФормы;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ФормаОтчета Из ПараметрыВыполнения.Формы Цикл
		ФормаОтчета.НадоСформировать = Истина;
		ФормаОтчета.ПодключитьОбработчикОжидания("Сформировать", 1, Истина);
	КонецЦикла;
	Если ПараметрыВыполнения.Свойство("НеобработанныеФормы", НеобработанныеФормы) Тогда
		Периоды = Новый Массив;
		Для Каждого КлючИЗначение из НеобработанныеФормы Цикл
			Периоды.Добавить(КлючИЗначение.Значение.НачалоПериода);
			Периоды.Добавить(КлючИЗначение.Значение.КонецПериода);
		КонецЦикла;
		БюджетнаяОтчетностьВызовСервера.ОтразитьДокументыФоновымЗаданиемПоФормеСМаксимальнымПериодом(Периоды);
		Для Каждого КлючИЗначение из НеобработанныеФормы Цикл
			ПослеФормированияНаКлиенте(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА

// Вызывается для отчета "СверкаОборотовМУиБУ"
//
Процедура НастройкаСоответствияСчетов(ЭтаФорма)
	
	ОткрытьФорму("Справочник.СоответствияСчетовМеждународногоУчета.Форма.ФормаНастройкиДляОтчетаСверки"
		, , ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Вызывается для отчета "СверкаОборотовМУиБУ"
//
Процедура НастройкаСоответствияСчетовИОборотов(ЭтаФорма)
	
	ОткрытьФорму("Обработка.НастройкаСоответствияСчетовИОборотовМеждународногоУчета.Форма.Форма"
		, , ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Вызывается для отчета "СверкаОборотовМУиБУ"
//
Процедура ОткрытьОтчетАнализСчетаХозрасчетный(Отчет, ДанныеРасшифровки, Счет)
	
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючВарианта = "АнализСчета";
	
	ИдентификаторПараметраПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета")));
	НастройкаПериод = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПараметраПериод);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Счет", Счет);
	
	Если НастройкаПериод.Использование Тогда
		Отбор.Вставить("Период", НастройкаПериод.Значение);
	КонецЕсли;
	
	Для Каждого Элемент Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Не ПустаяСтрока(Элемент.ИдентификаторПользовательскойНастройки) Тогда
			ИдентификаторОтора = Элемент.ИдентификаторПользовательскойНастройки;
			НастройкаОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторОтора);
			Если НастройкаОтбора.Использование Тогда
				Отбор.Вставить(Строка(Элемент.ЛевоеЗначение), НастройкаОтбора.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Отбор = Отбор;
	
	ОтчетыУПВызовСервераПереопределяемый.ЗаполнитьДанныеРасшифровкиАнализаСчетаХозрасчетный(ДанныеРасшифровки, Отбор);
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Истина, Ложь, Истина);
	ПараметрыФормы = Новый Структура("ВидРасшифровки, АдресНастроек, СформироватьПриОткрытии, ИДРасшифровки, ЗаполняемыеНастройки",
									1, ДанныеРасшифровки, Истина, "АнализСчета", ЗаполняемыеНастройки);
	
	ОткрытьФорму("Отчет.АнализСчета.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

// Вызывается для отчета "СверкаОборотовМУиБУ"
//
Процедура ОткрытьОтчетАнализСчетаМеждународный(Отчет, Счет)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ресурс", "Сумма");
	Параметры.Вставить("Отбор", Новый Структура);
	Отбор = Параметры.Отбор;
	
	НастройкиОтчета = Отчет.КомпоновщикНастроек.Настройки;
	НастройкиПользователя = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ИдентификаторПараметраПериод = НастройкиПользователя.ПолучитьИдентификаторПоОбъекту(
		НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета")));
	
	НастройкаПериод = НастройкиПользователя.Элементы.Найти(ИдентификаторПараметраПериод);
	
	Параметры.Вставить("Счет", Счет);
	Параметры.Вставить("ПериодОтчета", НастройкаПериод.Значение);
	
	Для Каждого Элемент Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если Не ПустаяСтрока(Элемент.ИдентификаторПользовательскойНастройки) Тогда
			ИдентификаторОтора = Элемент.ИдентификаторПользовательскойНастройки;
			НастройкаОтбора = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторОтора);
			Если НастройкаОтбора.Использование Тогда
				Отбор.Вставить(Строка(Элемент.ЛевоеЗначение), НастройкаОтбора.ПравоеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НастройкаАнализаСчета = МеждународнаяОтчетностьВызовСервера.НастроитьАнализСчетаМеждународный(Параметры);
	КлючНастроек = "РасшифровкаОтчетаСверкиаОборотовМУиБУ";
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "АнализСчетаМеждународный");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНастроек);
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек", КлючНастроек);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", НастройкаАнализаСчета.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкаАнализаСчета.ФиксированныеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.БухгалтерскийОтчетМеждународный.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Вызывается для отчета "АнализСчетаМеждународный"
//
Процедура ОткрытьОтчетКарточкаСчетаМеждународный(Отчет, ПоляРасшифровки)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОтчетРасшифровки"	, "КарточкаСчетаМеждународный");
	Параметры.Вставить("КлючВарианта"		, "КарточкаСчетаМеждународный");
	Параметры.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	Параметры.Вставить("ПоляРасшифровки"	, ПоляРасшифровки);
	
	НастройкаКарточкиСчета = ФинансоваяОтчетностьВызовСервера.НастроитьОтчетРасшифровки(Параметры);
	
	КлючНастроек = "РасшифровкаАнализаСчета";
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "КарточкаСчетаМеждународный");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНастроек);
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек", КлючНастроек);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", НастройкаКарточкиСчета.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкаКарточкиСчета.ФиксированныеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.КарточкаСчетаМеждународный.Форма", ПараметрыФормы);
	
КонецПроцедуры

// Вызывается для отчета "ИспользованиеСчетовИСубконтоМеждународныйУчет"
//
Процедура УстановитьТипЗависимыхРеквизитов(ЭтаФорма)
	
	ДопПараметры = ЭтаФорма.НастройкиОтчета.ДопПараметры;
	
	ПользовательскиеНастройки = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ДопСвойства = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Очистить();
	
	ДопСвойства.Вставить("ЭтоМеждународный", ЭтаФорма[ИмяЭлемента(ДопПараметры.ПланСчетов)]);
	ПланСчетов = ПользовательскиеНастройки.Найти(ДопПараметры.ПланСчетов);
	ПланСчетов.Значение = ДопСвойства.ЭтоМеждународный;
	
	Элементы = ЭтаФорма.Элементы;
	ЭлементСчет = Элементы[ИмяЭлемента(ДопПараметры.Счет)];
	ЭлементВидСубконто = Элементы[ИмяЭлемента(ДопПараметры.ВидСубконто)];
	
	Счет = ПользовательскиеНастройки.Найти(ДопПараметры.Счет);
	ВидСубконто = ПользовательскиеНастройки.Найти(ДопПараметры.ВидСубконто);
	СубконтоМежд = ПользовательскиеНастройки.Найти(ДопПараметры.СубконтоМежд);
	СубконтоРегл = ПользовательскиеНастройки.Найти(ДопПараметры.СубконтоРегл);
	Если НЕ ДопСвойства.ЭтоМеждународный Тогда
		Счет.Значение = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
		ВидСубконто.Значение = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка");
		
		ЭлементСчет.ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
		ЭлементВидСубконто.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
		Элементы.ГруппаЗначенийСубконто.ТекущаяСтраница = Элементы.СубконтоХозрасчетное;
	Иначе
		Счет.Значение = ПредопределенноеЗначение("ПланСчетов.Международный.ПустаяСсылка");
		ВидСубконто.Значение = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка");
		
		ЭлементСчет.ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка.Международный");
		ЭлементВидСубконто.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные");
		Элементы.ГруппаЗначенийСубконто.ТекущаяСтраница = Элементы.СубконтоМеждународное;
	КонецЕсли;
	СубконтоМежд.Значение = Неопределено;
	СубконтоРегл.Значение = Неопределено;
	
КонецПроцедуры

Функция ИмяЭлемента(Идентификатор)
	
	Возврат "ЗначениеПараметраНастроек_Значение_"+СтрЗаменить(Идентификатор,"-","");
	
КонецФункции

//-- НЕ УТКА
#КонецОбласти 