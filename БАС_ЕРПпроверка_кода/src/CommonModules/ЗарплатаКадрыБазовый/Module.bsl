
#Область СлужебныйПрограммныйИнтерфейс

// Предназначена для использования в ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных.
//
// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.5.7",
		"Роль.ДобавлениеИзменениеДокументовОбменаСБанкамиПоЗарплатнымПроектам",
		"Роль.ДобавлениеИзменениеОбменаСБанкамиПоЗарплатнымПроектам",
		"ЗарплатаКадрыБазовая");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.5.7",
		"Роль.ЧтениеДокументовОбменаСБанкамиПоЗарплатнымПроектам",
		"Роль.ЧтениеОбменаСБанкамиПоЗарплатнымПроектам",
		"ЗарплатаКадрыБазовая");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.18.7",
		"Роль.ДобавлениеИзменениеКадровогоСостояния",
		"Роль.ДобавлениеИзменениеДокументовЗарплатаКадры",
		"ЗарплатаКадрыБазовая");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.18.7",
		"Роль.ЧтениеКадровогоСостояния",
		"Роль.ЧтениеДокументовЗарплатаКадры",
		"ЗарплатаКадрыБазовая");
	
КонецПроцедуры

Функция ОтветственныеЛицаОрганизации(Организация, Сведения, ДатаСведений) Экспорт
	
	ОтветственныеЛица = Новый Структура();
	ОтветственныеЛица.Вставить("Руководитель", Справочники.ФизическиеЛица.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ДолжностьРуководителя", Справочники.Должности.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ГлавныйБухгалтер", Справочники.ФизическиеЛица.ПустаяСсылка());
	ОтветственныеЛица.Вставить("Кассир", Справочники.ФизическиеЛица.ПустаяСсылка());
	ОтветственныеЛица.Вставить("ДолжностьКассира", Справочники.Должности.ПустаяСсылка());
	
	Возврат ОтветственныеЛица;
	
КонецФункции

Процедура ЗаполнитьПодчиненноеПодразделение(ПодразделениеОбъект, ИсточникДанных) Экспорт
	
КонецПроцедуры

Функция ЭтоОбъектЗарплатноКадровойБиблиотеки(ПолноеИмяОбъектаМетаданных) Экспорт
	
	Возврат ЗарплатаКадры.ОбъектМетаданныхВключенВПодсистемы(ПолноеИмяОбъектаМетаданных, "ЗарплатаКадрыПриложения,ЗарплатаКадрыПодсистемы");
	
КонецФункции

Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	Возврат СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
КонецФункции

Функция ПоддерживаемыеИдентификаторыОтветственныхРаботниковОрганизаций() Экспорт
	
	ПоддерживаемыеИдентификаторы = Новый Массив;
	
	ПоддерживаемыеИдентификаторы.Добавить("Исполнитель");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьИсполнителя");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьИсполнителяСтрокой");
	
	Возврат ПоддерживаемыеИдентификаторы;
	
КонецФункции

// Формирует таблицу значений с параметрами отпусков сотрудника для расчета оценочных обязательств
//	Параметры
//		МассивСотрудников
//		Период – месяц, для которого рассчитываются обязательства
//	Возвращаемое значение Таблица значений
//			* Сотрудник
//			* ОстатокОтпусков
//			* ОтпускАвансом
//			* СреднийЗаработок
//
Функция СведенияОбОтпускахСотрудниковДляРасчетаОценочныхОбязательств(МассивСотрудников, Период) Экспорт

	ТаблицаСведенийОбОтпусках = ЗарплатаКадры.НоваяТаблицаСведенияОбОтпускахСотрудниковДляРасчетаОценочныхОбязательств();
	
	ДатаРасчетаСреднего = НачалоМесяца(ДобавитьМесяц(Период, 1));
	
	Для каждого Сотрудник Из МассивСотрудников Цикл
	
		НоваяСтрока = ТаблицаСведенийОбОтпусках.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.СреднийЗаработок = СреднийЗаработокОбщийСотрудника(Сотрудник, ДатаРасчетаСреднего);
	
	КонецЦикла;
	
	Возврат ТаблицаСведенийОбОтпусках;

КонецФункции

//Выполняет расчет среднего заработка общего сотрудника на дату
Функция СреднийЗаработокОбщийСотрудника(Сотрудник, ДатаНачалаСобытия)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
	Иначе
		Возврат 0;
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ДатаПриема");
	Если КадровыеДанные.Количество() = 0 Тогда
		// Сотрудник не принят на работу.
		Возврат 0;
	Иначе
		Если ЗначениеЗаполнено(КадровыеДанные[0].ДатаПриема) И КадровыеДанные[0].ДатаПриема > ДатаНачалаСобытия Тогда
			// Дата начала события раньше, чем сотрудник принят на работу.
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	ДатаПриемаНаРаботу = КадровыеДанные[0].ДатаПриема;
	
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), -12);
	НачалоПериода = Макс(НачалоПериода, НачалоМесяца(ДатаПриемаНаРаботу));
	
	ОкончаниеПериода = НачалоМесяца(ДатаНачалаСобытия) - 1;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ГоловнаяОрганизация");
	
	ДанныеДляРасчета = МодульРасчетЗарплатыДляНебольшихОрганизаций.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(Сотрудник, Организация, НачалоПериода, ОкончаниеПериода);
	
	ОтработанноеВремяДляСреднегоОбщий = Новый ТаблицаЗначений; 
	ОтработанноеВремяДляСреднегоОбщий.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ОтработанноеВремяДляСреднегоОбщий.Колонки.Добавить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ОтработанноеВремяДляСреднегоОбщий.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для каждого ДанныеОВремени Из ДанныеДляРасчета.ДанныеОВремени Цикл
		СтрокаДанныхОВремени = ОтработанноеВремяДляСреднегоОбщий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхОВремени, ДанныеОВремени);
		СтрокаДанныхОВремени.Сотрудник = Сотрудник;
	КонецЦикла;
	
	СреднийЗаработокОбщий = Новый ТаблицаЗначений; 
	СреднийЗаработокОбщий.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СреднийЗаработокОбщий.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	СреднийЗаработокОбщий.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для каждого ДанныеОНачислениях Из ДанныеДляРасчета.ДанныеОНачислениях Цикл
		СтрокаДанныеОНачислениях = СреднийЗаработокОбщий.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныеОНачислениях, ДанныеОНачислениях);
		СтрокаДанныеОНачислениях.Сотрудник = Сотрудник;
	КонецЦикла;
	
	ТаблицыПоСотруднику = Новый Структура;
	ТаблицыПоСотруднику.Вставить("ДанныеОНачислениях", СреднийЗаработокОбщий);
	ТаблицыПоСотруднику.Вставить("ДанныеОВремени", ОтработанноеВремяДляСреднегоОбщий);
	
	ПараметрыПолученияДанныхСреднего = МодульРасчетЗарплатыДляНебольшихОрганизаций.ПараметрыПолученияДанныхСреднегоОбщего();
	ПараметрыПолученияДанныхСреднего.Вставить("ТаблицыПоСотруднику", 	ТаблицыПоСотруднику); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаПериода",  	НачалоПериода); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаОкончанияПериода",	ОкончаниеПериода); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаСобытия", 		ДатаНачалаСобытия);		
	
	ДанныеРасчетаСреднегоЗаработка = МодульРасчетЗарплатыДляНебольшихОрганизаций.ДанныеРасчетаСреднегоЗаработкаОбщего(ПараметрыПолученияДанныхСреднего);
	
	Возврат ДанныеРасчетаСреднегоЗаработка.Итоги.СреднедневнойЗаработок;	

КонецФункции

// Получает информацию о виде расчета.
Функция ПолучитьИнформациюОВидеРасчета(ВидРасчета) Экспорт
	
	ЗапрашиваемыеДанныеСтрока =	"КатегорияНачисленияИлиНеоплаченногоВремени";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	#ЗапрашиваемыеДанные
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ЗапрашиваемыеДанные", ЗапрашиваемыеДанныеСтрока);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ВидРасчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗначенияРеквизитов = Новый Структура(ЗапрашиваемыеДанныеСтрока);
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

#Область БлокФункцийПолученияЗначенийПоУмолчанию

Процедура ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений) Экспорт
	
	Если ЗаполняемыеЗначения.Свойство("Год") Тогда
		ЗаполняемыеЗначения.Год = Год(ДатаЗначений);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("Месяц") Тогда
		ЗаполняемыеЗначения.Месяц = НачалоМесяца(ДатаЗначений);
	КонецЕсли;
		Если ЗаполняемыеЗначения.Свойство("Квартал") Тогда
		ЗаполняемыеЗначения.Квартал = НачалоКвартала(ДатаЗначений);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийГод") Тогда
		ЗаполняемыеЗначения.ПредыдущийГод = Год(ДатаЗначений) - 1;
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийМесяц") Тогда
		ЗаполняемыеЗначения.ПредыдущийМесяц = НачалоМесяца(НачалоМесяца(ДатаЗначений) - 1);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийКвартал") Тогда
		ЗаполняемыеЗначения.ПредыдущийКвартал = НачалоКвартала(НачалоКвартала(ДатаЗначений) - 1);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ДатаСобытия") Тогда
		ЗаполняемыеЗначения.ДатаСобытия = ДатаЗначений;
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("Ответственный") Тогда
		ЗаполняемыеЗначения.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	// Значение организации известно - получим зависящие от нее значения.
	ОрганизацияСсылка = НеОпределено;
	Если (ЗаполняемыеЗначения.Свойство("Организация", ОрганизацияСсылка) И ОрганизацияСсылка <> НеОпределено) Тогда
		
		Если ЗаполняемыеЗначения.Свойство("НаименованиеТерриториальногоОрганаФСС") Тогда
			НаименованиеТерриториальногоОрганаФСС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "НаименованиеТерриториальногоОрганаФСС");
			ЗаполняемыеЗначения.НаименованиеТерриториальногоОрганаФСС = ?(НаименованиеТерриториальногоОрганаФСС = Неопределено, "", НаименованиеТерриториальногоОрганаФСС);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Организация") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["Организация"]) Тогда
		ЗаполняемыеЗначения.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Подразделение") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["Подразделение"]) Тогда
		ЗаполняемыеЗначения.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("ГруппаДоступа") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["ГруппаДоступа"]) Тогда
		ЗаполняемыеЗначения.ГруппаДоступа = Справочники.ГруппыДоступаФизическихЛиц.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Руководитель") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["Руководитель"]) Тогда
		ЗаполняемыеЗначения.Руководитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("ДолжностьРуководителя") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["ДолжностьРуководителя"]) Тогда
		ЗаполняемыеЗначения.ДолжностьРуководителя = Справочники.Должности.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("ГлавныйБухгалтер") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["ГлавныйБухгалтер"]) Тогда
		ЗаполняемыеЗначения.ГлавныйБухгалтер = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Кассир") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["Кассир"]) Тогда
		ЗаполняемыеЗначения.Кассир = Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("ДолжностьКассира") И НЕ ЗначениеЗаполнено(ЗаполняемыеЗначения["ДолжностьКассира"]) Тогда
		ЗаполняемыеЗначения.ДолжностьКассира = Справочники.Должности.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Массив поддерживаемых идентификаторов значений по умолчанию.
Функция СписокДоступныхЗначенийПоУмолчанию() Экспорт
	ПоддерживаемыеИдентификаторы = Новый Массив();
	ПоддерживаемыеИдентификаторы.Добавить("Год");
	ПоддерживаемыеИдентификаторы.Добавить("Квартал");
	ПоддерживаемыеИдентификаторы.Добавить("Месяц");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийГод");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийМесяц");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийКвартал");
	ПоддерживаемыеИдентификаторы.Добавить("ДатаСобытия");
	ПоддерживаемыеИдентификаторы.Добавить("Ответственный");
	ПоддерживаемыеИдентификаторы.Добавить("НаименованиеТерриториальногоОрганаФСС");
	ПоддерживаемыеИдентификаторы.Добавить("Организация");
	ПоддерживаемыеИдентификаторы.Добавить("Руководитель");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителя");
	ПоддерживаемыеИдентификаторы.Добавить("ГлавныйБухгалтер");
	ПоддерживаемыеИдентификаторы.Добавить("Кассир");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьКассира");
	ПоддерживаемыеИдентификаторы.Добавить("Подразделение");
	ПоддерживаемыеИдентификаторы.Добавить("ГруппаДоступа");
	Возврат ПоддерживаемыеИдентификаторы;
	
КонецФункции

#КонецОбласти

#Область Пользователи

Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаНалогиИВзносыОбщиеДанные.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаНачисленияЗарплатыОбщиеДанные.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаПерсУчетаОбщиеДанные.Имя);
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзмененияДанных

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	// Раздел Зарплата
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.БольничныйЛист",									"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыВБанк", 				"ПериодРегистрации", 	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыВКассу", 				"ПериодРегистрации", 	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников", 		"Дата", 				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников", 		"Дата", 				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеРасчетВФСС",							"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИсполнительныйЛист",								"ДатаДействия",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачислениеЗарплаты", 							"МесяцНачисления", 		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Отпуск",											"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПодтверждениеЗачисленияЗарплаты", 				"Дата", 				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПодтверждениеОткрытияЛицевыхСчетовСотрудников", 	"Дата", 				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.МинимальнаяОплатаТруда",  				"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеНачисления",						"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыССотрудниками", 			"Период", 				"Зарплата", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗарплатаКВыплате", 						"Период", 				"Зарплата", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗарплатаКВыплатеАвансом", 				"Период", 				"Зарплата", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.НачисленияУдержанияПоСотрудникам", 		"Период", 				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ОтработанноеВремяПоСотрудникам", 		"Период", 				"Зарплата", "");
	
	
	// Раздел БухгалтерскийУчетЗарплаты
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыОрганизаций", 				"Период", 				"БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыСотрудников", 				"Период", 				"БухгалтерскийУчетЗарплаты", "Сотрудник.ГоловнаяОрганизация");
	
	// Раздел КадровыйУчет
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриемНаРаботу", 						"ДатаПриема", 		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КадровыйПеревод", 					"ДатаНачала", 		"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Увольнение", 						"ДатаУвольнения", 	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КадроваяИсторияСотрудников",	"Период", 			"КадровыйУчет", "ГоловнаяОрганизация");
	
	// Раздел НДФЛ
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеНаПредоставлениеЛьготыПоНДФЛ", 						"Месяц", 				"НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОперацияНалоговогоУчетаПоНДФЛ", 								"ДатаОперации", 		"НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПерерасчетНДФЛ", 											"МесяцПерерасчета", 	"НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПрекращениеЛьготПоНДФЛ", 									"Месяц", 				"НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЛьготыНаДетейНДФЛ", 									"МесяцРегистрации", 	"НДФЛ", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЛьготыФизическихЛицНДФЛ", 							"Период", 				"НДФЛ", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ", 			"Период", 				"НДФЛ", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.СведенияОДоходахНДФЛ", 								"Период", 				"НДФЛ", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ИсчисленныйНДФЛ", 									"Период", 				"НДФЛ", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ИсчисленныйНДФЛАвансом", 									"Период", 				"НДФЛ", "Организация");
	
	// Раздел СтраховыеВзносы
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОперацияУчетаПоСтраховымВзносам", 							"МесяцРасчетногоПериода", 	"СтраховыеВзносы", "Организация");	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АктПроверкиСтраховыхВзносов", 								"ПериодРегистрации", 		"СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам", 	"ДатаРегистрацииИзменений", "СтраховыеВзносы", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ГражданствоФизическихЛиц", 							"Период",					"СтраховыеВзносы", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КлассыУсловийТрудаПоДолжностям", 						"ДатаРегистрацииИзменений",	"СтраховыеВзносы", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СведенияОбИнвалидностиФизическихЛиц", 				"ДатаРегистрацииИзменений",	"СтраховыеВзносы", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ИсчисленныеСтраховыеВзносы", 						"Период", 					"СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.СтраховыеВзносыПоФизическимЛицам", 					"Период", 					"СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам", 				"Период", 					"СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.СведенияОДоходахСтраховыеВзносы",					"Период", 					"СтраховыеВзносы", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ИсчисленныеСтраховыеВзносыАвансом", 						"Период", 					"СтраховыеВзносы", "Организация");
	
	// Раздел ОбъектыБазовойРеализации
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ОбъектыБазовойРеализации") Тогда
		МодульОбъектыБазовойРеализации = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыОбъектыБазовойРеализации");
		МодульОбъектыБазовойРеализации.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// Депоненты
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
		МодульУчетДепонированнойЗарплаты = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
		МодульУчетДепонированнойЗарплаты.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ВзаиморасчетыССотрудникамиВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		МодульВзаиморасчеты = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХО");
		МодульВзаиморасчеты.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		МодульБухучетХозрасчетныхОрганизаций = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
		МодульБухучетХозрасчетныхОрганизаций.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		МодульРезервОтпусков.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.РегламентированнаяОтчетность
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РегламентированнаяОтчетность") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РегламентированнаяОтчетностьПриложения");
		Модуль.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияСправочниковПоОрганизации

Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Справочники.Сотрудники;
	СтрокаТаблицы.Реквизит = "ГоловнаяОрганизация";
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузказагрузкаДанных

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных)
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, для которых не требуется сопоставление ссылок
// при загрузке данных в другую информационную базу, т.к. корректное сопоставление ссылок
// гарантируется с помощью других механизмов.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных)
//
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, состоящие полностью из предопределенных
	// элементов.
	
	
КонецПроцедуры

#КонецОбласти


#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Справочники.Организации);
	СписокОбъектов.Добавить(Справочники.Сотрудники);
	СписокОбъектов.Добавить(Справочники.ФизическиеЛица);
	СписокОбъектов.Добавить(Документы.АктПроверкиСтраховыхВзносов);
	СписокОбъектов.Добавить(Документы.БольничныйЛист);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВБанк);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВКассу);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаЗакрытиеЛицевыхСчетовСотрудников);
	СписокОбъектов.Добавить(Документы.ЗаявкаНаОткрытиеЛицевыхСчетовСотрудников);
	СписокОбъектов.Добавить(Документы.ЗаявлениеРасчетВФСС);
	СписокОбъектов.Добавить(Документы.ЗаявлениеНаПредоставлениеЛьготыПоНДФЛ);
	СписокОбъектов.Добавить(Документы.ОперацияНалоговогоУчетаПоНДФЛ);
	СписокОбъектов.Добавить(Документы.ОперацияУчетаПоСтраховымВзносам);
	СписокОбъектов.Добавить(Документы.Отпуск);
	СписокОбъектов.Добавить(Документы.ПерерасчетНДФЛ);
	СписокОбъектов.Добавить(Документы.ПодтверждениеЗачисленияЗарплаты);
	СписокОбъектов.Добавить(Документы.ПодтверждениеОткрытияЛицевыхСчетовСотрудников);
	СписокОбъектов.Добавить(Документы.ПрекращениеЛьготПоНДФЛ);
	СписокОбъектов.Добавить(Обработки.ОбменСБанкамиПоЗарплатнымПроектам);
	СписокОбъектов.Добавить(Документы.ПриемНаРаботу);
	СписокОбъектов.Добавить(Документы.КадровыйПеревод);
	СписокОбъектов.Добавить(Документы.Увольнение);
	СписокОбъектов.Добавить(Документы.СправкаОДоходах);
	СписокОбъектов.Добавить(Документы.ПодтверждениеОплатыЗаявленияРасчетаВФСС);
	СписокОбъектов.Добавить(Документы.ПодтверждениеВыплатЗаСчетФСС);
	
	// Раздел ОбъектыБазовойРеализации
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ОбъектыБазовойРеализации") Тогда
		МодульОбъектыБазовойРеализации = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыОбъектыБазовойРеализации");
		МодульОбъектыБазовойРеализации.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РегламентированнаяОтчетность") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РегламентированнаяОтчетностьПриложения");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьНачальныеЗначения(ИменаОбъектовМетаданных) Экспорт
	
	Если ПустаяСтрока(ИменаОбъектовМетаданных) Тогда
		ОбрабатываемыеИменаОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("");
	Иначе
		ОбрабатываемыеИменаОбъектов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаОбъектовМетаданных,",", Истина, Истина);
	КонецЕсли;
	
	Для каждого ОбрабатываемоеИмя Из ОбрабатываемыеИменаОбъектов Цикл
		
		// Справочники
		
		
		// УчетНДФЛ
		Если ПустаяСтрока(ОбрабатываемоеИмя) ИЛИ ВРег(ОбрабатываемоеИмя) =  ВРег("Справочник.ВидыЛьготПоНДФЛ")  Тогда
			
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыЛьготПоНДФЛ");
			Справочники.ВидыЛьготПоНДФЛ.НачальноеЗаполнение();
			ПроверитьСправочникНаЗадвоенныеЗначения("Справочник.ВидыЛьготПоНДФЛ");
			
		КонецЕсли; 

		
		
		// Регистры сведений
		
		
		// УчетСтраховыхВзносов
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьСправочникНаЗадвоенныеЗначения(ПолноеИмяОбъектаМетаданных)
	
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	УникальностьКодов = Ложь;
	УникальностьНаименований = Ложь;
	Если МетаданныеСправочника.ДлинаКода > 0 И МетаданныеСправочника.КонтрольУникальности Тогда
		УникальностьКодов = Истина;
	ИначеЕсли МетаданныеСправочника.ДлинаНаименования > 0 Тогда
		УникальностьНаименований = Истина;
	КонецЕсли; 
	
	Если УникальностьКодов ИЛИ УникальностьНаименований Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник.Ссылка) КАК Ссылка,
			|	Справочник.Код КАК КлючУникальности
			|ПОМЕСТИТЬ ВТКоличествоСсылок
			|ИЗ
			|	ПолноеИмяСправочника КАК Справочник
			|
			|СГРУППИРОВАТЬ ПО
			|	Справочник.Код
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КоличествоСсылок.КлючУникальности
			|ПОМЕСТИТЬ ВТЗадвоенныеКлючи
			|ИЗ
			|	ВТКоличествоСсылок КАК КоличествоСсылок
			|ГДЕ
			|	КоличествоСсылок.Ссылка > 1
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадвоенныеКлючи.КлючУникальности КАК КлючУникальности,
			|	Справочник.Ссылка КАК Ссылка,
			|	Справочник.Предопределенный КАК Предопределенный
			|ИЗ
			|	ВТЗадвоенныеКлючи КАК ЗадвоенныеКлючи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПолноеИмяСправочника КАК Справочник
			|		ПО ЗадвоенныеКлючи.КлючУникальности = Справочник.Код
			|
			|УПОРЯДОЧИТЬ ПО
			|	КлючУникальности,
			|	Предопределенный УБЫВ,
			|	Ссылка";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПолноеИмяСправочника", "Справочник." + МетаданныеСправочника.Имя);
		
		Если УникальностьНаименований Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Код", "Справочник.Наименование");
		КонецЕсли; 
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			НайденныеСсылки = НайтиПоСсылкам(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
			
			ТаблицаСсылок = НайденныеСсылки.Скопировать(, "Ссылка");
			ТаблицаСсылок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
			ТаблицаСсылок.ЗаполнитьЗначения(1, "Количество");
			ТаблицаСсылок.Свернуть("Ссылка", "Количество");
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("КлючУникальности") Цикл
				
				ОставляемаяСсылка = Неопределено;
				КоличествоСсылок = 0;
				ОставляемаяСсылкаПредопределенная = Ложь;
				
				СписокСсылок = Новый Массив;
				Пока Выборка.Следующий() Цикл
					
					СписокСсылок.Добавить(Выборка.Ссылка);
					ТаблицаСсылок.Найти(Выборка.Ссылка, "Ссылка");
					Если КоличествоСсылок < ТаблицаСсылок.Количество() Тогда
						
						Если Выборка.Предопределенный ИЛИ НЕ ОставляемаяСсылкаПредопределенная Тогда
							ОставляемаяСсылкаПредопределенная = Выборка.Предопределенный;
							ОставляемаяСсылка = Выборка.Ссылка;
							КоличествоСсылок = ТаблицаСсылок.Количество();
						КонецЕсли; 
						
					ИначеЕсли ОставляемаяСсылка = Неопределено Тогда 
						ОставляемаяСсылкаПредопределенная = Выборка.Предопределенный;
						ОставляемаяСсылка = Выборка.Ссылка;
					КонецЕсли; 
					
				КонецЦикла; 
				
				ПарыЗамен = Новый Соответствие;
				Для каждого СсылкаИзСписка Из СписокСсылок Цикл
					
					ОбъектСсылки = СсылкаИзСписка.ПолучитьОбъект();
					
					Если СсылкаИзСписка = ОставляемаяСсылка Тогда
						
						Если ОбъектСсылки.ПометкаУдаления Тогда
							ОбъектСсылки.УстановитьПометкуУдаления(Ложь);
						КонецЕсли; 
						
						Продолжить;
						
					КонецЕсли; 
					
					ОбъектСсылки.ИмяПредопределенныхДанных = "";
					ОбъектСсылки.ПометкаУдаления = Истина;
					ОбъектСсылки.ОбменДанными.Загрузка = Истина;
					ОбъектСсылки.Записать();
					
					ПарыЗамен.Вставить(СсылкаИзСписка, ОставляемаяСсылка);
					
				КонецЦикла;
				
				Если ПарыЗамен.Количество() > 0 Тогда
					
					ПараметрыЗамены = Новый Структура;
					ПараметрыЗамены.Вставить("СпособУдаления", "Пометка");
					ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Ложь);
					ПараметрыЗамены.Вставить("ЗаменаПарыВТранзакции", Ложь);
					ПараметрыЗамены.Вставить("ПривилегированнаяЗапись", Истина);
					
					ТаблицаРезультата = ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, ПараметрыЗамены);
					Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
						
						СообщитьОбОшибке = Истина;
						Если СтрокаРезультата.ТипОшибки = "ОшибкаЗаписи" Тогда
							ОбъектОшибки = СтрокаРезультата.ОбъектОшибки;
							ОбъектОшибки.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
							Попытка
								ОбъектОшибки.Записать();
								СообщитьОбОшибке = Ложь;
							Исключение
								
							КонецПопытки;
						КонецЕсли; 
						
						Если СообщитьОбОшибке Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаРезультата.ТекстОшибки);
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьВозможностьСменыГоловнойОрганизации(Организация, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачисленияУдержанияПоСотрудникам.Организация
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Организация = &Организация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По %1 производилось начисление/удержание зарплаты.
                |Что бы изменить головную организацию, необходимо отменить проведение этих документов.'
                |;uk='За %1 виконувалося нарахування/утримання зарплати.
                |Що б змінити головну організацію, необхідно скасувати проведення цих документів.'"),
			Организация);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Организация,
			"ГоловнаяОрганизация",
			"Объект",
			Отказ);
		
	КонецЕсли; 
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Организация = &Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация = &Организация";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В %1 произведен прием на работу сотрудников.
                    |Что бы изменить головную организацию, необходимо отменить проведение этих документов.'
                    |;uk='У %1 проведений прийом на роботу співробітників.
                    |Що б змінити головну організацію, необхідно скасувати проведення цих документів.'"),
				Организация);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Организация,
				"ГоловнаяОрганизация",
				"Объект",
				Отказ);
			
		КонецЕсли; 
			
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти
