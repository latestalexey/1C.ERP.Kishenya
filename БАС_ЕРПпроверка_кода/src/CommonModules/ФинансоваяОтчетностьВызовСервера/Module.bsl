

#Область ПрограммныйИнтерфейс

// Помещает данные переданной строки вида отчета во временное хранилище формы.
//
// Параметры:
//  ПомещаемыйОбъект - Произвольный - помещаемый объект
//  АдресХранилища - Строка - адрес временного хранилища
//  ОчиститьСсылки - Булево - Если истина тогда ссылка элемента справочника и ссылка владельца отчета будут очищены.
//                            При записи такого элемента отчета будет сформирована новая ссылка т.о. помещаемый элемент будет скопирован.
//
// Возвращаемое значение:
//   Строка   - Адрес элемента в хранилище
//
Функция ПоместитьЭлементВХранилище(ПомещаемыйОбъект, АдресХранилища = Неопределено, ОчиститьСсылки = Ложь) Экспорт
	
	СтруктураЭлемента = ДанныеЭлементаОтчета(ПомещаемыйОбъект);
	Если ОчиститьСсылки Тогда
		СтруктураЭлемента.Ссылка = Неопределено;
		СтруктураЭлемента.Владелец = Неопределено;
		Для Каждого СтрокаОперанда Из СтруктураЭлемента.ОперандыФормулы Цикл
			Данные = ДанныеЭлементаОтчета(СтрокаОперанда.Операнд);
			Данные.Ссылка = Неопределено;
			Данные.Владелец = Неопределено;
			СтрокаОперанда.АдресСтруктурыЭлемента = ПоместитьВоВременноеХранилище(Данные, АдресХранилища);
			СтрокаОперанда.Операнд = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураЭлемента, АдресХранилища);
	
КонецФункции

// Помещает данные переданной строки вида отчета во временное хранилище формы без ссылки элемента справочника.
// При записи такого элемента отчета будет сформирована новая ссылка т.о. помещаемый элемент будет скопирован.
//
// Параметры:
//  ПомещаемыйОбъект - Произвольный - помещаемый объект
//  АдресХранилища - Строка - адрес временного хранилища
//
// Возвращаемое значение:
//   Строка   - Адрес элемента в хранилище
//
Функция ПоместитьКопиюЭлементаВХранилище(ПомещаемыйОбъект, АдресХранилища = Неопределено) Экспорт
	
	Возврат ПоместитьЭлементВХранилище(ПомещаемыйОбъект, АдресХранилища, Истина);
	
КонецФункции

// Возвращает данные элемента отчета для помещения во временное хранилище
//
// Возвращаемое значение:
//   Структура   - заполненная структура реквизитов элемента отчета
//
Функция ДанныеЭлементаОтчета(ЭлементОтчета) Экспорт
	
	СтруктураЭлемента = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
	Если ТипЗнч(ЭлементОтчета) = Тип("СправочникОбъект.ЭлементыФинансовыхОтчетов") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементОтчета);
		КопироватьТаблицыЭлемента(ЭлементОтчета, СтруктураЭлемента);
	ИначеЕсли ТипЗнч(ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
		Если ЗначениеЗаполнено(ЭлементОтчета)
			И НЕ СтрНайти(Строка(ЭлементОтчета), "<Объект не найден>") Тогда
			СтруктураЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементОтчета, СтруктураЭлемента);
			КопироватьТаблицыЭлемента(СтруктураЭлемента, СтруктураЭлемента);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементОтчета) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементОтчета);
		Для Каждого КлючИЗначение из ЭлементОтчета Цикл
			Если СтрНайти(КлючИЗначение.Ключ, "ДополнительныйРеквизит_") Тогда
				ИмяДополнительногоРеквизита = СтрЗаменить(КлючИЗначение.Ключ, "ДополнительныйРеквизит_", "");
				УстановитьЗначениеДополнительногоРеквизита(СтруктураЭлемента, ИмяДополнительногоРеквизита, КлючИЗначение.Значение)
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru='Не определен тип помещаемого объекта';uk='Не визначено тип поміщуваного об''єкта'");
	КонецЕсли;
	
	СтруктураЭлемента.Вставить("ЭтоСвязанный", ЗначениеЗаполнено(СтруктураЭлемента.СвязанныйЭлемент));
	
	Если ТипЗнч(СтруктураЭлемента.ОперандыФормулы) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ОперандыФормулы = Новый ТаблицаЗначений;
		СтруктураЭлемента.ОперандыФормулы.Колонки.Добавить("Идентификатор");
		СтруктураЭлемента.ОперандыФормулы.Колонки.Добавить("Операнд");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.РеквизитыВидаЭлемента) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.РеквизитыВидаЭлемента = Новый ТаблицаЗначений;
		СтруктураЭлемента.РеквизитыВидаЭлемента.Колонки.Добавить("Реквизит");
		СтруктураЭлемента.РеквизитыВидаЭлемента.Колонки.Добавить("Значение");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ЭлементыТаблицы) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ЭлементыТаблицы = Новый ТаблицаЗначений;
		СтруктураЭлемента.ЭлементыТаблицы.Колонки.Добавить("Строка");
		СтруктураЭлемента.ЭлементыТаблицы.Колонки.Добавить("Колонка");
		СтруктураЭлемента.ЭлементыТаблицы.Колонки.Добавить("Элемент");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ДополнительныеПоля) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ДополнительныеПоля = Новый ТаблицаЗначений;
		СтруктураЭлемента.ДополнительныеПоля.Колонки.Добавить("Реквизит");
		СтруктураЭлемента.ДополнительныеПоля.Колонки.Добавить("Наименование");
		СтруктураЭлемента.ДополнительныеПоля.Колонки.Добавить("ВыводитьЗаголовок");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ЭлементыОформления) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ЭлементыОформления = Новый ТаблицаЗначений;
		СтруктураЭлемента.ЭлементыОформления.Колонки.Добавить("Оформление");
		СтруктураЭлемента.ЭлементыОформления.Колонки.Добавить("Условие");
		СтруктураЭлемента.ЭлементыОформления.Колонки.Добавить("ТипОформляемойОбласти");
		СтруктураЭлемента.ЭлементыОформления.Колонки.Добавить("КлючЭлементаОформления");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ОформляемыеСтроки) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ОформляемыеСтроки = Новый ТаблицаЗначений;
		СтруктураЭлемента.ОформляемыеСтроки.Колонки.Добавить("ЭлементОтчета");
		СтруктураЭлемента.ОформляемыеСтроки.Колонки.Добавить("КлючЭлементаОформления");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ОформляемыеКолонки) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ОформляемыеКолонки = Новый ТаблицаЗначений;
		СтруктураЭлемента.ОформляемыеКолонки.Колонки.Добавить("ЭлементОтчета");
		СтруктураЭлемента.ОформляемыеКолонки.Колонки.Добавить("КлючЭлементаОформления");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.РасшифровкаПолейОтбораЭО) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО = Новый ТаблицаЗначений;
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО.Колонки.Добавить("КлючЭлементаОформления");
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО.Колонки.Добавить("ЭлементОтчета");
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяПоляОтбора");
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяРесурса");
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ИсточникиЗначений) <> Тип("ТаблицаЗначений") Тогда
		СтруктураЭлемента.ИсточникиЗначений = Новый ТаблицаЗначений;
		СтруктураЭлемента.ИсточникиЗначений.Колонки.Добавить("Источник");
		СтруктураЭлемента.ИсточникиЗначений.Колонки.Добавить("ДобавляемыеЗначенияДокумента");
	КонецЕсли;
	
	Если СтруктураЭлемента.ОперандыФормулы.Колонки.Найти("АдресСтруктурыЭлемента") = Неопределено Тогда
		СтруктураЭлемента.ОперандыФормулы.Колонки.Добавить("АдресСтруктурыЭлемента");
	КонецЕсли;
	
	Возврат СтруктураЭлемента;
	
КонецФункции

// Процедура устанавливает значение дополнительного реквизита элемента финансового отчета
//
// Параметры:
//  Источник - Произвольный - объект или адрес структуры элемента в хранилище
//  Реквизит - Строка, ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов - имя реквизита
//  Значение - Произвольный - значение реквизита
//
Процедура УстановитьЗначениеДополнительногоРеквизита(Источник, Знач Реквизит, Значение) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		Объект = ПолучитьИзВременногоХранилища(Источник);
	Иначе
		Объект = Источник;
	КонецЕсли;
	
	Если Объект.РеквизитыВидаЭлемента = Неопределено Тогда
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
		ТаблицаРеквизитов.Колонки.Добавить("Значение");
		ТаблицаРеквизитов.Индексы.Добавить("Реквизит");
		Объект.РеквизитыВидаЭлемента = ТаблицаРеквизитов;
	КонецЕсли;
	
	Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Реквизит = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов[Реквизит];
	КонецЕсли;
	
	НайденнаяСтрока = Объект.РеквизитыВидаЭлемента.Найти(Реквизит);
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = Объект.РеквизитыВидаЭлемента.Добавить();
		НайденнаяСтрока.Реквизит = Реквизит;
	КонецЕсли;
	
	НайденнаяСтрока.Значение = Значение;
	
	Если НайденнаяСтрока.Значение = Неопределено Тогда
		Объект.РеквизитыВидаЭлемента.Удалить(НайденнаяСтрока);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		ПоместитьВоВременноеХранилище(Объект, Источник);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение дополнительного реквизита элемента финансового отчета
//
// Параметры:
//  Источник - Произвольный - объект или адрес структуры элемента в хранилище
//  Реквизиты - Структура - реквизиты для установки
//
Процедура УстановитьЗначенияДополнительныхРеквизитов(Источник, Реквизиты) Экспорт
	
	Для Каждого КлючИЗначение из Реквизиты Цикл
		УстановитьЗначениеДополнительногоРеквизита(Источник, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает значение реквизита элемента финансового отчета в хранилище
//
// Параметры:
//  АдресХранилища - Строка - адрес структуры элемента
//  СтруктураЗначений - Структура - реквизиты для установки
//
Процедура УстановитьЗначениеРеквизита(АдресХранилища, СтруктураЗначений) Экспорт
	
	Объект = ПолучитьИзВременногоХранилища(АдресХранилища);
	Для Каждого КлючИЗначение из СтруктураЗначений Цикл
		Объект[КлючИЗначение.Ключ] = Неопределено;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(Объект, АдресХранилища);
	
КонецПроцедуры

// Функция возвращает значения дополнительных реквизитов элемента финансового отчета
//
// Параметры:
//  СсылкаНаЭлемент - Произвольный - объект или адрес структуры элемента в хранилище
//  Реквизиты - Структура - реквизиты для получения
//
// Возвращаемое значение:
//   Произвольный   - значение дополнительного реквизита
//
Функция ЗначенияДополнительныхРеквизитов(СсылкаНаЭлемент, Реквизиты) Экспорт
	
	Если ТипЗнч(СсылкаНаЭлемент) = Тип("Строка") Тогда
		Объект = ПолучитьИзВременногоХранилища(СсылкаНаЭлемент);
	ИначеЕсли ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
		Объект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, "РеквизитыВидаЭлемента");
		Объект.РеквизитыВидаЭлемента = Объект.РеквизитыВидаЭлемента.Выгрузить();
	Иначе
		Объект = СсылкаНаЭлемент;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(Реквизиты);
	Кэш = Объект.РеквизитыВидаЭлемента;
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ, 
									ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
										Неопределено, 
										ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов[КлючИЗначение.Ключ],
										Кэш));
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// Функция возвращает значение дополнительного реквизита элемента финансового отчета
//
// Параметры:
//  СсылкаНаЭлемент - Произвольный - объект или адрес структуры элемента в хранилище
//  Реквизит - строка - реквизит для получения
//
// Возвращаемое значение:
//   Произвольный   - значение дополнительного реквизита
//
Функция ЗначениеДополнительногоРеквизита(СсылкаНаЭлемент, Реквизит) Экспорт
	
	Возврат ЗначенияДополнительныхРеквизитов(СсылкаНаЭлемент, Реквизит)[Реквизит];
	
КонецФункции

// Функция определяет имя формы элемента справочника для редактирования элемента финансового отчета
//
// Параметры:
//  ВидЭлемента - Перечисление.ВидыЭлементовФинансовогоОтчета - вид элемента для которого необходимо определить форму
//  Элемент - Строка - адрес во временном хранилище по которому расположены все данные элемента
//  ДополнительныйРежим - Перечисление.ДополнительныеРежимыЭлементовОтчетов - признак дополнительного режима формы
//
// Возвращаемое значение:
//   Строка   - имя формы элемента справочника
//
Функция ПараметрыИспользованияФормы(ВидЭлемента, Элемент, ДополнительныйРежим = Неопределено) Экспорт
	
	ДопРежимы = Перечисления.ДополнительныеРежимыЭлементовОтчетов;
	ТипыИзмерений = Перечисления.ТипыИзмеренийФинансовогоОтчета;
	
	СтруктураДополнительныхРеквизитов = Новый Структура;
	ДополнительныеРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	ИмяФормыЭлемента = Неопределено;
	Если ДополнительныйРежим = ДопРежимы["СвязанныйЭлемент"] Тогда
		ИмяФормыЭлемента = "Форма.ФормаСвязанногоЭлемента";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст Тогда
		ИмяФормыЭлемента = "Форма.ТекстовыйБлок";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Текст.ИмяПредопределенныхДанных);
		Если ЭтоАдресВременногоХранилища(Элемент) Тогда
			ПараметрыЭлемента = ПолучитьИзВременногоХранилища(Элемент);
			ВладелецЭлемента = ?(ПараметрыЭлемента.Свойство("Владелец"), ПараметрыЭлемента.Владелец, Неопределено);
		Иначе
			ВладелецЭлемента = Элемент.Владелец;
		КонецЕсли;
		Если ТипЗнч(ВладелецЭлемента) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТолькоДляПечати.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		ИмяФормыЭлемента = "Форма.НефинансовыйПоказатель";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодичностьСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НефинансовыйПоказатель.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоОрганизации.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоПодразделению.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоСценарию.ИмяПредопределенныхДанных);
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		Если ДополнительныйРежим = ДопРежимы["СтатьяБюджетовВРежимеВвода"] Тогда
			ИмяФормыЭлемента = "Форма.СтатьяБюджетовДляВвода";
		ИначеЕсли ДополнительныйРежим = ДопРежимы["ВсеСтатьиВСложнойТаблице"]
			ИЛИ ДополнительныйРежим = ДопРежимы["СтатьяВПоказателеБюджетов"] Тогда
			ИмяФормыЭлемента = "Форма.СтатьяБюджетовБезНастроек";
		Иначе
			ИмяФормыЭлемента = "Форма.СтатьяБюджетов";
		КонецЕсли;
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.СтатьяБюджетов.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводимыеПоказатели.ИмяПредопределенныхДанных);
		//фильтры
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоОрганизации.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоПодразделению.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоСценарию.ИмяПредопределенныхДанных);
		//заполнение
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.СпособЗаполнения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Формула.ИмяПредопределенныхДанных);
		//периоды данных
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодичностьСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НижняяГраницаДанных.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВерхняяГраницаДанных.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НачалоПериодаГруппировки.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КонецПериодаГруппировки.ИмяПредопределенныхДанных);
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		Если ДополнительныйРежим = ДопРежимы["ВсеПоказателиВСложнойТаблице"] Тогда
			ИмяФормыЭлемента = "Форма.ВсеПоказателиСложнаяТаблица";
		Иначе
			ИмяФормыЭлемента = "Форма.ПоказательБюджетов";
		КонецЕсли;
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПоказательБюджетов.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводимыеПоказатели.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТипЗначенияПоказателя.ИмяПредопределенныхДанных);
		//фильтры
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоОрганизации.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоПодразделению.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоСценарию.ИмяПредопределенныхДанных);
		//периоды данных
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодичностьСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НижняяГраницаДанных.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВерхняяГраницаДанных.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НачалоПериодаГруппировки.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КонецПериодаГруппировки.ИмяПредопределенныхДанных);
		
	ИначеЕсли (ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе) Тогда
		Если ДополнительныйРежим = ДопРежимы["ПоказатьКодСтрокиПримечание"] Тогда
			ИмяФормыЭлемента = "Форма.Группа";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьЗаголовокЭлемента.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		Иначе
			ИмяФормыЭлемента = "Форма.Группа";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьЗаголовокЭлемента.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
		ИмяФормыЭлемента = "Форма.Таблица";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьЗаголовокЭлемента.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьЗаголовокГруппировки.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ЗаголовокГруппировки.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
		ИмяФормыЭлемента = "Форма.ФормулаПоГруппе";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ФормулаПоГруппе.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы Тогда
		ИмяФормыЭлемента = "Форма.ЭлементТаблицы";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель Тогда
		ИмяФормыЭлемента = "Форма.МонетарныйПоказатель";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.СчетПланаСчетов.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТипИтога.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НачальноеСальдо.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель Тогда
		ИмяФормыЭлемента = "Форма.НемонетарныйПоказатель";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НемонетарныйПоказатель.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
		Если ДополнительныйРежим = ДопРежимы["ВидОтчета"] Тогда
			ИмяФормыЭлемента = "Форма.ПроизводныйПоказательОтчета";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Формула.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
		Иначе
			ИмяФормыЭлемента = "Форма.ПроизводныйПоказательБюджета";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Формула.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек Тогда
		Если ДополнительныйРежим = ДопРежимы["ВидОтчета"] Тогда
			ИмяФормыЭлемента = "Форма.НастройкаЯчеекВидаОтчета";
		Иначе
			ИмяФормыЭлемента = "Форма.НастройкаЯчеек";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ОтображатьНумерациюКолонок.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ОтображатьНумерациюСтрок.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
		ИмяФормыЭлемента = "Форма.ВыборЯчейкиСложнойТаблицы";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.СтрокаЯчейки.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КолонкаЯчейки.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТипИзмерения.ИмяПредопределенныхДанных);
		ТипИзмерения = ЗначениеДополнительногоРеквизита(Элемент, "ТипИзмерения");
		Если ТипИзмерения = ТипыИзмерений["Период"] Тогда
			Если ДополнительныйРежим = ДопРежимы["ВидОтчета"] Тогда
				ИмяФормыЭлемента = "Форма.ПериодВидаОтчета";
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Периодичность.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Сортировка.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПредставлениеПериода.ИмяПредопределенныхДанных);
			Иначе
				ИмяФормыЭлемента = "Форма.Период";
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Периодичность.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ЗначениеПериода.ИмяПредопределенныхДанных);
			КонецЕсли;
		ИначеЕсли ТипИзмерения = ТипыИзмерений["ИзмерениеРегистра"]
			ИЛИ ТипИзмерения = ТипыИзмерений["ИзмерениеРегистраБухгалтерии"] Тогда
			ИмяФормыЭлемента = "Форма.ИзмерениеРегистра";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИмяИзмерения.ИмяПредопределенныхДанных);
			Если Не ТипИзмерения = ТипыИзмерений["ИзмерениеРегистраБухгалтерии"] Тогда
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыбранныеИсточникиЗначений.ИмяПредопределенныхДанных);
			КонецЕсли;
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Субконто"] Тогда
			ИмяФормыЭлемента = "Форма.ИзмерениеРегистра";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВидСубконто.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Аналитика"] Тогда
			ИмяФормыЭлемента = "Форма.ВидАналитики";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВидАналитики.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыбранныеИсточникиЗначений.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Сценарий"] Тогда
			ИмяФормыЭлемента = "Форма.Сценарий";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Сценарий.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Организация"] Тогда
			ИмяФормыЭлемента = "Форма.Организация";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Организация.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Подразделение"] Тогда
			ИмяФормыЭлемента = "Форма.Подразделение";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Подразделение.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Валюта"] Тогда
			ИмяФормыЭлемента = "Форма.Валюта";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Валюта.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["ФиксированнаяАналитика"] Тогда
			ИмяФормыЭлемента = "Форма.ФиксированнаяАналитика";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ЭтоАналитикаПрочее.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.РазрешитьРедактирование.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВидАналитики.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыбранныеИсточникиЗначений.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		ИмяФормыЭлемента = "Форма.РедактируемоеЗначение";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТипРедактируемогоЗначения.ИмяПредопределенныхДанных);
	КонецЕсли;
	
	Если ИмяФормыЭлемента = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный вид элемента отчета';uk='Невідомий вид елемента звіту'");
	КонецЕсли;
	
	Возврат Новый Структура(
				"ИмяФормы, Реквизиты",
				"Справочник.ЭлементыФинансовыхОтчетов." + ИмяФормыЭлемента,
				СтруктураДополнительныхРеквизитов);
	
КонецФункции

// Функция переносит настройки вызывающего отчета в настройки отчет расшифровки
//
// Параметры:
//  Параметры - Структура - содержащая ключи
//              ОтчетРасшифровки - Строка - Имя метаданных отчета расшифровки
//              КлючВарианта - Строка - Имя варианта отчета расшифровки
//              КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настроенный компоновщик вызывающего отчета
//              ПоляРасшифровки - Структура - соответствие строквых имен полей их объектам компоновки вызавающего отчета
//
// Возвращаемое значение:
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настроенный компоновщик отчета расшифровки
//
Функция НастроитьОтчетРасшифровки(Знач Параметры) Экспорт
	
	// Настройки вызывающего отчета
	НастройкиОтчета = Параметры.КомпоновщикНастроек.ПолучитьНастройки();
	ПользовательскиеНастройкиОтчета = Параметры.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	// Настройки отчета расшифровки
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИмяСхемы = Метаданные.Отчеты[Параметры.ОтчетРасшифровки].ОсновнаяСхемаКомпоновкиДанных.Имя;
	СхемаРасшифровки = Отчеты[Параметры.ОтчетРасшифровки].ПолучитьМакет(ИмяСхемы);
	НастройкиВарианта = СхемаРасшифровки.ВариантыНастроек[Параметры.КлючВарианта].Настройки;
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиВарианта);
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	ПользовательскийОтбор = КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
			ПользовательскийОтбор = Элемент;
		КонецЕсли;
	КонецЦикла;
	
	// Перенесем параметры вызывающего отчета
	Для Каждого Элемент Из ПользовательскиеНастройкиОтчета.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			КлючПараметра =  Строка(Элемент.Параметр);
			ЗначениеПараметра = Элемент.Значение;
			Использование = Элемент.Использование;
			
			ЗначениеПараметраНастроек = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(ПользовательскиеНастройки, КлючПараметра);
			Если НЕ ЗначениеПараметраНастроек = Неопределено Тогда
				ТипЗначенияПараметрыНастроек = ТипЗнч(ЗначениеПараметраНастроек.Значение);
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
						ПользовательскиеНастройки, КлючПараметра, ЗначениеПараметра, Использование);
			КонецЕсли;
			
		КонецЕсли;// это параметр отчета
	КонецЦикла;// по пользовательским настройкам вызывающего отчета
	
	// Перенесем отборы вызывающего отчета
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(
			НастройкиОтчета.Отбор,
			ПользовательскийОтбор,
			Истина,
			Параметры.ПоляРасшифровки);
	
	// Добавим отборы по полям расшифровки
	Если ЗначениеЗаполнено(Параметры.ПоляРасшифровки) Тогда
		Для Каждого Поле Из Параметры.ПоляРасшифровки Цикл
			НовыйОтбор = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле.Ключ);
			НовыйОтбор.ПравоеЗначение = Поле.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает индекс картинки по виду элемента и уточняющей информации
//
// Параметры:
//  ВидЭлемента  - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид элемента, для которого получаем параметр
//  ИмяВспомогательныхДанных  - Строка - уточняющее значение
//
// Возвращаемое значение:
//   Число   - индекс картинки из коллекции КоллекцияВидыЭлементовФинансовойОтчетности
//
Функция НестандартнаяКартинка(ВидЭлемента, ИмяВспомогательныхДанных = Неопределено) Экспорт
	
	Возврат ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ВидЭлемента, ИмяВспомогательныхДанных);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы или хранилища по ссылке на объект.
// 
// Параметры:
//  Ссылка       - ссылка на объект, строка - элемент справочника, документ или адрес элемента в хранилище
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		СтруктураЭлемента = ПолучитьИзВременногоХранилища(Ссылка);
		Возврат СтруктураЭлемента[ИмяРеквизита];
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	КонецЕсли;
	
КонецФункции

// Функция возвращает дерево операторов конструктора формул
//
// Параметры:
//  УсловиеДляЗапроса - Булево - признак, что оператор "условие" следует вернуть в формате для запроса
//
// Возвращаемое значение:
//   ДеревоЗначений   - дерево операторов
//
Функция ПостроитьДеревоОператоров(УсловиеДляЗапроса = Истина) Экспорт
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы';uk='Оператори'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "( )", " ( ) ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы';uk='Логічні оператори і константи'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И';uk='И'"), НСтр("ru=' И ';uk=' І '"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИЛИ';uk='АБО'"), НСтр("ru=' ИЛИ ';uk=' АБО '"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НЕ';uk='НЕ'"), НСтр("ru=' НЕ ';uk=' НЕ '"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА';uk='ІСТИНА'"), НСтр("ru=' ИСТИНА ';uk=' ІСТИНА '"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ';uk='ХИБНІСТЬ'"), НСтр("ru=' ЛОЖЬ ';uk=' ХИБНІСТЬ '"));
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Функции';uk='Функції'"));
	Если УсловиеДляЗапроса Тогда
		РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие';uk='Умова'"), НСтр("ru='ВЫБОР КОГДА <Условие> ТОГДА <РезультатИстина> ИНАЧЕ <РезультатЛожь> КОНЕЦ';uk='ВЫБОР КОГДА <Умова> ТОГДА <РезультатІстина> ИНАЧЕ <РезультатХибність> КОНЕЦ'"), 3);
	Иначе
		РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие';uk='Умова'"), НСтр("ru='?(<Условие>, <РезультатИстина>, <РезультатЛожь>)';uk='?(<Умова>, <РезультатІстина>, <РезультатХибність>)'"), 3);
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Функция копирует элемент, находящийся в хранилище
//
// Параметры:
//  АдресЭлемента - Строка - адрес элемента в хранилище
//  ИдентификаторХранилища - УИД - УИД формы, в рамках которой ведется работа
//  ВидЭлемента - Неопределено - в параметр функция вернет вид элемента
//
// Возвращаемое значение:
//   Строка   - Адрес нового элемента
//
Функция СкопироватьЭлементПоАдресу(АдресЭлемента, ИдентификаторХранилища, ВидЭлемента = Неопределено) Экспорт
	
	КопияЭлемента = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
	ДанныеЭлемента = ПолучитьИзВременногоХранилища(АдресЭлемента);
	ЗаполнитьЗначенияСвойств(КопияЭлемента, ДанныеЭлемента);
	КопияЭлемента.Ссылка = Неопределено;
	
	КопияЭлемента.РеквизитыВидаЭлемента = ДанныеЭлемента.РеквизитыВидаЭлемента.Скопировать();
	КопияЭлемента.ОперандыФормулы = ДанныеЭлемента.ОперандыФормулы.Скопировать();
	КопияЭлемента.ДополнительныеПоля = ДанныеЭлемента.ДополнительныеПоля.Скопировать();
	
	Для Каждого СтрокаОперанда из КопияЭлемента.ОперандыФормулы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
			СтрокаОперанда.АдресСтруктурыЭлемента = ПоместитьЭлементВХранилище(СтрокаОперанда.Операнд, ИдентификаторХранилища);
		КонецЕсли;
		АдресОперанда = СкопироватьЭлементПоАдресу(СтрокаОперанда.АдресСтруктурыЭлемента, ИдентификаторХранилища);
		СтрокаОперанда.АдресСтруктурыЭлемента = АдресОперанда;
		СтрокаОперанда.Операнд = Неопределено; // операнд должен быть создан новый
	КонецЦикла;
	
	ВидЭлемента = КопияЭлемента.ВидЭлемента;
	
	Возврат ПоместитьВоВременноеХранилище(КопияЭлемента, ИдентификаторХранилища);
	
КонецФункции

Процедура КопироватьТаблицыЭлемента(Источник, Приемник)
	
	Приемник.Вставить("ОперандыФормулы",			Источник.ОперандыФормулы.Выгрузить());
	Приемник.Вставить("РеквизитыВидаЭлемента",		Источник.РеквизитыВидаЭлемента.Выгрузить());
	Приемник.Вставить("ЭлементыТаблицы",			Источник.ЭлементыТаблицы.Выгрузить());
	Приемник.Вставить("ДополнительныеПоля",			Источник.ДополнительныеПоля.Выгрузить());
	Приемник.Вставить("ЭлементыОформления",			Источник.ЭлементыОформления.Выгрузить());
	Приемник.Вставить("ОформляемыеСтроки",			Источник.ОформляемыеСтроки.Выгрузить());
	Приемник.Вставить("ОформляемыеКолонки",			Источник.ОформляемыеКолонки.Выгрузить());
	Приемник.Вставить("РасшифровкаПолейОтбораЭО",	Источник.РасшифровкаПолейОтбораЭО.Выгрузить());
	Приемник.Вставить("ИсточникиЗначений",			Источник.ИсточникиЗначений.Выгрузить());
	ПереопределитьТипКолонокТаблицКэша(Приемник);
	
КонецПроцедуры

Процедура ПереопределитьТипКолонокТаблицКэша(СтруктураЭлемента)
	
	СтруктураТаблиц = Новый Структура("ОперандыФормулы, РеквизитыВидаЭлемента, ЭлементыТаблицы, 
										|ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений");
	
	Для Каждого КлючИЗначение из СтруктураТаблиц Цикл
		
		Таблица = СтруктураЭлемента[КлючИЗначение.Ключ];
		СтруктураЭлемента[КлючИЗначение.Ключ] = Новый ТаблицаЗначений;
		Для Каждого Колонка из Таблица.Колонки Цикл
			СтруктураЭлемента[КлючИЗначение.Ключ].Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, СтруктураЭлемента[КлючИЗначение.Ключ]);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
