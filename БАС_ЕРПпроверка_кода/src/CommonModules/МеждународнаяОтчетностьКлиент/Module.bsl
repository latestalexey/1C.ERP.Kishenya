
////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции, обеспечивающие работу генератора финансовых отчетов
//  для получения финансовой отчетности
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура РазвернутьДеревоСохраненныхЭлеметов(Форма, ДанныеДереваЭлементов) Экспорт
	
	НайденныеЭлементы = ДанныеДереваЭлементов.ПолучитьЭлементы();
	Если НайденныеЭлементы.Количество() = 1 Тогда
		ИдентификаторСтроки = НайденныеЭлементы[0].ПолучитьИдентификатор();
		Форма.Элементы.ДеревоСохраненныхЭлементов.Развернуть(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыИФункцииРасшифровкиОтчета

Процедура ОбработкаРасшифровкиОтчета(ФормаОтчета, Элемент, Расшифровка) Экспорт
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = НовыеПараметрыОтчета();
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ФормаОтчета);
	ЗаполнитьЗначенияСвойств(ПараметрыОтчета, ФормаОтчета.Отчет);
	Если НЕ Расшифровка.Свойство("Отбор") Тогда
		Расшифровка.Вставить("Отбор", Новый Структура);
	КонецЕсли;
	Если ФормаОтчета.ИспользоватьОтборПоОрганизациям Тогда
		Расшифровка.Отбор.Вставить("Организация", ФормаОтчета.Организации.ВыгрузитьЗначения());
	КонецЕсли;
	Если ФормаОтчета.ИспользоватьОтборПоПодразделениям Тогда
		Расшифровка.Отбор.Вставить("Подразделение", ФормаОтчета.Подразделения.ВыгрузитьЗначения());
	КонецЕсли;
	ПараметрыОтчета.Вставить("Значение", Элемент.ТекущаяОбласть.Текст);
	ПараметрыОтчета.АдресНастроек = ПоместитьВоВременноеХранилище(Неопределено, ФормаОтчета.УникальныйИдентификатор);
	ПараметрыРасшифровки = МеждународнаяОтчетностьВызовСервера.ПараметрыРасшифровкиОтчета(Расшифровка, ПараметрыОтчета);
	ПараметрыРасшифровки.СуммыВТысячах = ФормаОтчета.Отчет.СуммыВТысячах;
	
	Если ПараметрыРасшифровки = Неопределено ИЛИ ПараметрыРасшифровки.Показатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Показатель = ПараметрыРасшифровки.Показатель;
	Если Показатель.ВидЭлемента = ВидЭлемента("МонетарныйПоказатель") Тогда
		Если ТипЗнч(Показатель.СчетПланаСчетов) = Тип("ПланСчетовСсылка.Международный") Тогда
			ОткрытьОтчетАнализСчетаМеждународный(ПараметрыРасшифровки);
		ИначеЕсли ТипЗнч(Показатель.СчетПланаСчетов) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			ОткрытьОтчетАнализСчетаХозрасчетный(ПараметрыРасшифровки);
		Иначе
			ПоказатьЗначение(Неопределено, Показатель.ЭлементОтчета);
		КонецЕсли;
	ИначеЕсли Показатель.ВидЭлемента = ВидЭлемента("ПроизводныйПоказатель") Тогда
		ПараметрыФормы = Новый Структура("СформироватьОтчет", Истина);
		ПараметрыФормы.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ОткрытьФорму("Отчет.МеждународныйОтчет.Форма", ПараметрыФормы, ФормаОтчета, Истина);
		
	ИначеЕсли Показатель.ВидЭлемента = ВидЭлемента("НемонетарныйПоказатель") Тогда
		ПоказатьЗначение(Неопределено, Показатель.НемонетарныйПоказатель);
		
	ИначеЕсли ПараметрыОтчета.ВидОтчета <> Показатель.Владелец
		И ЗначениеЗаполнено(Показатель.Владелец) Тогда
		ПараметрыФормы = Новый Структура("СформироватьОтчет", Истина);
		ПараметрыРасшифровки.ВидОтчета = Показатель.Владелец;
		Если ПараметрыРасшифровки.Показатель.ВидЭлемента = ВидЭлемента("ИтогПоГруппе") Тогда
			ПараметрыРасшифровки.Показатель = ПараметрыРасшифровки.ПустаяСсылка;
		КонецЕсли;
		ПараметрыФормы.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ОткрытьФорму("Отчет.МеждународныйОтчет.Форма.ФормаОтчета", ПараметрыФормы, ФормаОтчета, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьОтчетАнализСчетаМеждународный(ПараметрыРасшифровки)
	
	НастройкаАнализаСчета = ПараметрыРасшифровки.НастройкаАнализаСчета;
	КлючНастроек = "РасшифровкаФинансовогоОтчета";
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "АнализСчетаМеждународный");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНастроек);
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек", КлючНастроек);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", НастройкаАнализаСчета.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкаАнализаСчета.ФиксированныеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.БухгалтерскийОтчетМеждународный.Форма", ПараметрыФормы,, Истина);
	
КонецПроцедуры

Процедура ОткрытьОтчетАнализСчетаХозрасчетный(ПараметрыРасшифровки)
	
	НастройкаОтчета = ПараметрыРасшифровки.НастройкаАнализаСчета;

	ПараметрыФормы = Новый Структура("Отбор, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.КлючВарианта = "АнализСчета";
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Истина, Ложь, Истина);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидРасшифровки", 1);
	ПараметрыФормы.Вставить("АдресНастроек", НастройкаОтчета.АдресНастроек);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ИДРасшифровки", "АнализСчета");
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
	
	ОткрытьФорму("Отчет.АнализСчета.Форма.ФормаОтчета", ПараметрыФормы,, Истина);
	
КонецПроцедуры

Функция НовыеПараметрыОтчета()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОтчета");
	Результат.Вставить("КомплектОтчетности");
	Результат.Вставить("НачалоПериода");
	Результат.Вставить("КонецПериода");
	Результат.Вставить("ДанныеРасшифровки");
	Результат.Вставить("АдресНастроек");
	Результат.Вставить("Организация");
	Результат.Вставить("Подразделение");
	Результат.Вставить("Ресурс");
	Результат.Вставить("ДанныеПоказателя");
	Возврат Результат;
	
КонецФункции

#Область РаботаСФормулами

// Функция добавляет новые операнды в таблицу операндов
//
// Параметры:
//  Форма  - УправляемаяФорма - Форма конструктора формул
//  НовыеОперанды  - Массив - Строки дерева операндов
//  ТаблицаОперандов - ТаблицаЗначений - Таблица выбранных в формуле операндов
//  Уникальный - Булево - признак уникальности операндов (добавлять операнды если есть)
//
// Возвращаемое значение:
//   Массив   - массив добавленных строк таблицы операндов
//
Функция ДобавитьОперандыФормулы(Форма, НовыеОперанды, ТаблицаОперандов, Уникальный = Истина) Экспорт
	
	ТипИтога = ПредопределенноеЗначение("Перечисление.ТипыИтогов.СальдоДт");
	МассивДобавленных = Новый Массив;
	Для Каждого Операнд Из НовыеОперанды Цикл
		
		Если Операнд.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Идентификатор = ИмяОперанда(Операнд, ТаблицаОперандов, Уникальный);
		НайденныйОперанд = Неопределено;
		Если ЕстьПоказатель(Идентификатор, ТаблицаОперандов, НайденныйОперанд) Тогда
			МассивДобавленных.Добавить(НайденныйОперанд);
		ИначеЕсли Операнд.ЭтоСвязанный Тогда
			ДобавитьСохраненныйОперанд(Форма, ТаблицаОперандов, Операнд, МассивДобавленных);
		Иначе
			НоваяСтрока = ТаблицаОперандов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Операнд,,"ЭтоСвязанный");
			НоваяСтрока.Идентификатор = Идентификатор;
			НоваяСтрока.СчетПланаСчетов = Операнд.ЭлементВидаОтчетности;
			НоваяСтрока.ТипИтога = ТипИтога;
			НоваяСтрока.СчетПоказательИзмерение = Операнд.ЭлементВидаОтчетности;
			МассивДобавленных.Добавить(НоваяСтрока);
		КонецЕсли;
		
		Если НЕ Форма.Модифицированность Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДобавленных;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВидЭлемента(ИмяВидаЭлемента)
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета."+ИмяВидаЭлемента);
	
КонецФункции

Функция ЕстьПоказатель(Идентификатор, ТаблицаОперандов, НайденныйОперанд = Неопределено)
	
	Для Каждого СтрокаОперанда из ТаблицаОперандов Цикл
		Если СтрокаОперанда.Идентификатор = Идентификатор Тогда
			НайденныйОперанд = СтрокаОперанда;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяОперанда(Операнд, ТаблицаОперандов, Уникальный = Истина)
	
	Если Операнд.Свойство("ЭлементВидаОтчетности")
		И (ТипЗнч(Операнд.ЭлементВидаОтчетности) = Тип("ПланСчетовСсылка.Международный")
		ИЛИ ТипЗнч(Операнд.ЭлементВидаОтчетности) = Тип("ПланСчетовСсылка.Хозрасчетный"))
		ИЛИ Операнд.Свойство("СчетПланаСчетов") И ЗначениеЗаполнено(Операнд.СчетПланаСчетов) Тогда
		Результат = "Сч" + Операнд.Код;
		Результат = СтрЗаменить(СтрЗаменить(Результат," ",""),".","_");
	Иначе
		Попытка
			Результат = "П" + Формат(Число(Операнд.Код), "ЧН=0; ЧГ=0");
		Исключение
			Результат = "П" + Операнд.Код;
		КонецПопытки;
	КонецЕсли;
	
	Идентификатор = Результат;
	Если Не Уникальный Тогда
		Возврат Идентификатор;
	КонецЕсли;
	
	Сч = 0;
	Пока ЕстьПоказатель(Идентификатор, ТаблицаОперандов) Цикл
		Сч = Сч + 1;
		Идентификатор = Результат + "_" + Формат(Сч, "ЧГ=");
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

Процедура ДобавитьСохраненныйОперанд(Форма, ТаблицаОперандов, Операнд, МассивДобавленных)

	ДанныеОперанда = МеждународнаяОтчетностьКлиентСервер.НовыеДанныеОперанда();
	ЗаполнитьЗначенияСвойств(ДанныеОперанда,Операнд);
	Добавлено = МеждународнаяОтчетностьВызовСервера.ДобавитьСохраненныйОперанд( 
					ДанныеОперанда, 
					Форма.ИдентификаторГлавногоХранилища);
	
	Для Каждого НовыйОперанд Из Добавлено.НовыеОперанды Цикл
		НоваяСтрока = ТаблицаОперандов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйОперанд);
		Если ПустаяСтрока(НоваяСтрока.Идентификатор) Тогда
			НоваяСтрока.Идентификатор = ИмяОперанда(НовыйОперанд, ТаблицаОперандов);
		КонецЕсли;
		МассивДобавленных.Добавить(НовыйОперанд);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Добавлено.Формула) Тогда
		Если НЕ ПустаяСтрока(Форма.Формула) Тогда
			Форма.Формула = Форма.Формула + Символы.ПС;
		КонецЕсли;
		Форма.Формула = Форма.Формула + Добавлено.Формула;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
