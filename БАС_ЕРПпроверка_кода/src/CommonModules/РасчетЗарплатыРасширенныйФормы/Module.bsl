
#Область СлужебныйПрограммныйИнтерфейс

// Процедура добавляет элементы управления, предназначенные для изменения порядка выплаты документов.
//
// Параметры:
//	Элементы	- Все элементы формы.
//
Процедура ПорядокВыплатыЗарплатыДополнитьФорму(Форма, ИмяГруппы = "ВыплатаГруппа", ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 

	Если Форма.Элементы.Найти("ПорядокВыплаты") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		НастройкиДатВыплаты			= Новый РеквизитФормы("НастройкиДатВыплаты", Новый ОписаниеТипов());
		ХарактерВыплатыЗарплата		= Новый РеквизитФормы("ХарактерВыплатыЗарплата", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерВыплатыЗарплаты"));
		ХарактерВыплатыАванс		= Новый РеквизитФормы("ХарактерВыплатыАванс", Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерВыплатыЗарплаты"));
		
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(НастройкиДатВыплаты);
		Реквизиты.Добавить(ХарактерВыплатыЗарплата);
		Реквизиты.Добавить(ХарактерВыплатыАванс);
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, Реквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		// Доозначиваем то, что не означили в случае отложенного создания.
		Форма.ХарактерВыплатыЗарплата	= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		Форма.ХарактерВыплатыАванс		= Перечисления.ХарактерВыплатыЗарплаты.Аванс;
		ОбновитьПлановыеДатыВыплатыПоОрганизации(Форма);
		
		// Установка свойств элементов формы.
		ВыплатаГруппа = Форма.Элементы[ИмяГруппы];
		ВыплатаГруппа.Заголовок				= "Выплата";
		ВыплатаГруппа.Отображение			= ОтображениеОбычнойГруппы.Нет;
		ВыплатаГруппа.Группировка			= ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		ПорядокВыплаты = Форма.Элементы.Вставить("ПорядокВыплаты", Тип("ПолеФормы"), ВыплатаГруппа);
		ПорядокВыплаты.Заголовок				= НСтр("ru='Выплата';uk='Виплата'");
		ПорядокВыплаты.ПутьКДанным				= "Объект.ПорядокВыплаты";
		ПорядокВыплаты.Вид						= ВидПоляФормы.ПолеВвода;
		ПорядокВыплаты.Ширина					= 18;
		ПорядокВыплаты.РежимВыбораИзСписка		= Истина;
		ПорядокВыплаты.РастягиватьПоГоризонтали	= Ложь;
		ПорядокВыплаты.УстановитьДействие("ПриИзменении", "Подключаемый_ПорядокВыплатыПриИзменении");
		
		ПланируемаяДатаВыплаты = Форма.Элементы.Вставить("ПланируемаяДатаВыплаты", Тип("ПолеФормы"), ВыплатаГруппа);
		ПланируемаяДатаВыплаты.Заголовок	= НСтр("ru='Дата выплаты';uk='Дата виплати'");
		ПланируемаяДатаВыплаты.ПутьКДанным	= "Объект.ПланируемаяДатаВыплаты";
		ПланируемаяДатаВыплаты.Вид			= ВидПоляФормы.ПолеВвода;
		ПланируемаяДатаВыплаты.УстановитьДействие("ПриИзменении", "Подключаемый_ПланируемаяДатаВыплатыПриИзменении");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет на форму флажок "Рассчитать удержания". Используется в документах, 
// для которых разрешена выплата в межрасчет без расчета удержаний.
//
Процедура РассчитатьУдержанияДополнитьФорму(Форма, ИмяГруппы = "ВыплатаГруппа") Экспорт 

	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли; 

	Если Форма.Элементы.Найти("РассчитыватьУдержания") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыплатаГруппа = Форма.Элементы[ИмяГруппы];
	
	РассчитыватьУдержания = Форма.Элементы.Вставить("РассчитыватьУдержания", Тип("ПолеФормы"), ВыплатаГруппа);
	РассчитыватьУдержания.Заголовок	= НСтр("ru='Рассчитывать удержания';uk='Розраховувати утримання'");
	РассчитыватьУдержания.ПутьКДанным	= "Объект.РассчитыватьУдержания";
	РассчитыватьУдержания.Вид			= ВидПоляФормы.ПолеФлажка;
	РассчитыватьУдержания.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	РассчитыватьУдержания.УстановитьДействие("ПриИзменении", "Подключаемый_РассчитыватьУдержанияПриИзменении");
	
КонецПроцедуры

// Процедура устанавливает характеры выплаты зарплаты, которые доступны пользователю в зависимости от функциональных
// опций.
//
// Параметры:
//	Элементы	- Все элементы формы.
//
Процедура УстановитьДоступныеХарактерыВыплаты(Элементы) Экспорт
	
	Если Элементы.Найти("ПорядокВыплаты") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПорядокВыплаты.СписокВыбора.ЗагрузитьЗначения(Перечисления.ХарактерВыплатыЗарплаты.ВсеЗначения());
	
КонецПроцедуры

// Процедура обновляет плановые даты выплат при изменении организации.
//
Процедура ОбновитьПлановыеДатыВыплатыПоОрганизации(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;	
	КонецЕсли;
	
	НастройкиДатВыплаты = РегистрыСведений.НастройкиЗарплатаКадрыРасширенная.СведенияОНастройкахОрганизации(
		Форма.Объект.Организация, "ВыплачиватьЗарплатуВПоследнийДеньМесяца,ДатаВыплатыЗарплатыНеПозжеЧем,ДатаВыплатыАвансаНеПозжеЧем,ДатаВыплатыМежрасчетаНеПозжеЧем");
	
	Форма.НастройкиДатВыплаты	= Новый ФиксированнаяСтруктура(НастройкиДатВыплаты);
	
КонецПроцедуры

#Область МетодыОбслуживанияФормДокументовВыполняющихНачисления

Процедура ДокументыВыполненияНачисленийВШапкеДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ИмяКоманднойПанели = Неопределено, ДобавлятьЭлементыФормы = Истина) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;

	ВидРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект." + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета);
	ИмяПВР = Метаданные.НайтиПоТипу(ТипЗнч(ВидРасчета)).Имя;
	ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели);
	ЗарплатаКадрыРасширенный.ВводНачисленийВШапкеДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, 2, ДобавлятьЭлементыФормы);
	ДокументыВыполненияНачисленийУстановитьУсловноеОформление(Форма,ОписаниеТаблицыВидовРасчета);	
КонецПроцедуры	

Процедура ДокументыВыполненияНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели = Неопределено, РегистрацияНачисленийДоступна = Истина, КонтролируемыеПоля = Неопределено, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
	     Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, 2, ИмяПВР, РегистрацияНачисленийДоступна И ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, ДокументСсылка);
	
	Если РегистрацияНачисленийДоступна Тогда
		ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели, КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		Если ДобавлятьЭлементыФормы Тогда
			ДокументыВыполненияНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДокументыВыполненияНачисленийДобавитьРеквизитыОтображенияВремени(МассивДобавляемыхРеквизитов, ОписаниеТаблицыВидовРасчета) Экспорт
	
	Если Не ОписаниеТаблицыВидовРасчета.ОтображатьПоляОписанияВремени Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы(
			"ЕдиницаИзмеренияВремени",
			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1)),
			ПутьКДанным));
	
	// Реквизит ВидВремени добавляется для того, чтобы при изменении полей ОплаченоДней/Часов,
	// понимать переносить ли значения в поля ОтработаноДней/Часов.
	МассивДобавляемыхРеквизитов.Добавить(
		Новый РеквизитФормы("ВидВремени", 
			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"), ПутьКДанным));
	
КонецПроцедуры

Процедура ДополнитьФормуПолямиОплаченногоВремени(Форма, ОписаниеТаблицы) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	ПутьКТаблице = ОписаниеТаблицы.ПутьКДанным;
	ИмяЭлементаДляВставки = ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей;
	
	ВидимостьПолей = ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени;
	РасчетЗарплатыРасширенныйКлиентСервер.УточнитьВидимостьОплаченногоВремениПоВидуРасчета(ВидимостьПолей, Форма, ОписаниеТаблицы);
	
	ГруппаОтработаноОплачено = Элементы.Найти(ИмяТаблицы + "ГруппаОтработаноОплачено");
	Если ГруппаОтработаноОплачено <> Неопределено Тогда
		ГруппаОтработаноОплачено.Видимость = ВидимостьПолей;
		Возврат;
	КонецЕсли;
	
	ЭлементДляВставки = Неопределено;
	Если Не ПустаяСтрока(ИмяЭлементаДляВставки) Тогда
		ЭлементДляВставки = Элементы.Найти(ИмяЭлементаДляВставки);
	КонецЕсли;
	
	ЭлементДляРазмещения = Элементы.Найти(ИмяТаблицы);
	
	// Группа отображения отработано / оплачено дней / часов.
	ГруппаОтработаноОплачено = Элементы.Вставить(
		ИмяТаблицы + "ГруппаОтработаноОплачено",
		Тип("ГруппаФормы"),
		ЭлементДляРазмещения,
		ЭлементДляВставки);
	ГруппаОтработаноОплачено.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаОтработаноОплачено.Заголовок = НСтр("ru='Отработано (оплачено)';uk='Відпрацьовано (оплачено)'");
	ГруппаОтработаноОплачено.ОтображатьВШапке = Истина;
	ГруппаОтработаноОплачено.Видимость = ВидимостьПолей;
	
	// Группа оплачено
	ГруппаОплачено = Элементы.Добавить(
		ИмяТаблицы + "ГруппаОплачено",
		Тип("ГруппаФормы"),
		ГруппаОтработаноОплачено);
	ГруппаОплачено.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаОплачено.Группировка = ГруппировкаКолонок.Вертикальная;
	
	ГруппаОплаченоДней = Элементы.Добавить(
		ИмяТаблицы + "ГруппаОплаченоДней",
		Тип("ГруппаФормы"),
		ГруппаОтработаноОплачено);
	ГруппаОплаченоДней.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаОплаченоДней.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ОплаченоДней = Элементы.Добавить(
		ИмяТаблицы + "ОплаченоДней",
		Тип("ПолеФормы"),
		ГруппаОплаченоДней);
	ОплаченоДней.Вид = ВидПоляФормы.ПолеВвода;
	ОплаченоДней.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	ОплаченоДней.ОтображатьВШапке = Ложь;
	ОплаченоДней.Ширина = 7;
	ОплаченоДней.РастягиватьПоГоризонтали = Ложь;
	ОплаченоДней.ПутьКДанным = ПутьКТаблице + ".ОплаченоДней";
		
	ОплаченоЕдиницаИзмерения = Элементы.Добавить(
		ИмяТаблицы + "ОплаченоДнейЕдиницаИзмеренияВремени",
		Тип("ПолеФормы"),
		ГруппаОплаченоДней);
	ОплаченоЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	ОплаченоЕдиницаИзмерения.Ширина = 5;
	ОплаченоЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	ОплаченоЕдиницаИзмерения.ПутьКДанным = ПутьКТаблице + ".ЕдиницаИзмеренияВремени";
	
	ГруппаОплаченоЧасов = Элементы.Добавить(
		ИмяТаблицы + "ГруппаОплаченоЧасов",
		Тип("ГруппаФормы"),
		ГруппаОтработаноОплачено);
	ГруппаОплаченоЧасов.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаОплаченоЧасов.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	ОплаченоЧасов = Элементы.Добавить(
		ИмяТаблицы + "ОплаченоЧасов",
		Тип("ПолеФормы"),
		ГруппаОплаченоЧасов);
	ОплаченоЧасов.Вид = ВидПоляФормы.ПолеВвода;
	ОплаченоЧасов.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	ОплаченоЧасов.ОтображатьВШапке = Ложь;
	ОплаченоЧасов.Ширина = 7;
	ОплаченоЧасов.РастягиватьПоГоризонтали = Ложь;
	ОплаченоЧасов.ПутьКДанным = ПутьКТаблице + ".ОплаченоЧасов";
		
	ОплаченоЕдиницаИзмерения = Элементы.Добавить(
		ИмяТаблицы + "ОплаченоЧасовЕдиницаИзмеренияВремени",
		Тип("ПолеФормы"),
		ГруппаОплаченоЧасов);
	ОплаченоЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	ОплаченоЕдиницаИзмерения.Ширина = 5;
	ОплаченоЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	ОплаченоЕдиницаИзмерения.ПутьКДанным = ПутьКТаблице + ".ЕдиницаИзмеренияВремени";
	
	// Условное оформление.
	
	// Оплачено дней
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru='дн.';uk='дн.'");
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОплаченоДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДнейЕдиницаИзмеренияВремени");
	
	// Если это внутрисменное отсутствие, не показываем дни.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ВидВремени");
	Условие.ПравоеЗначение = Перечисления.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДнейЕдиницаИзмеренияВремени");
	
	// Оплачено часов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru='чс.';uk='гд.'");
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОплаченоЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасовЕдиницаИзмеренияВремени");
		
	// Если это целодневное отсутствие, не показываем часы.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ВидВремени");
	Условие.ПравоеЗначение = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасовЕдиницаИзмеренияВремени");
	
	// ФиксРасчетВремени
	ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	Если ОписаниеТаблицы.ЭтоПерерасчеты Тогда
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Ложь;
	Иначе 
		ГруппаОтбора =  ЭлементУсловногоОформления.Отбор;
	КонецЕсли;
	Условие = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ФиксРасчетВремени");
	Условие.ПравоеЗначение = Истина;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ОплаченоЧасов");
	
КонецПроцедуры

Процедура ДополнитьФормуПолямиНормыВремени(Форма, ОписаниеТаблицы) Экспорт
	
	// Группа отображения Норма времени дней / часов.
	Если Не ОписаниеТаблицы.ОтображатьПоляНормыВремени Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	ПутьКТаблице = ОписаниеТаблицы.ПутьКДанным;
	ИмяЭлементаДляВставки = ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей;
	
	ВидимостьПолей = ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени;
	РасчетЗарплатыРасширенныйКлиентСервер.УточнитьВидимостьНормыВремениПоВидуРасчета(ВидимостьПолей, Форма, ОписаниеТаблицы);
	
	ГруппаНормаВремени = Элементы.Найти(ИмяТаблицы + "ГруппаНормаВремени");
	Если ГруппаНормаВремени <> Неопределено Тогда
		ГруппаНормаВремени.Видимость = ВидимостьПолей;
		Возврат;
	КонецЕсли;
	
	ЭлементДляВставки = Неопределено;
	Если Не ПустаяСтрока(ИмяЭлементаДляВставки) Тогда
		ЭлементДляВставки = Элементы.Найти(ИмяЭлементаДляВставки);
	КонецЕсли;
	
	ЭлементДляРазмещения = Элементы.Найти(ИмяТаблицы);
	
	ГруппаНормаВремени = Элементы.Вставить(
		ИмяТаблицы + "ГруппаНормаВремени",
		Тип("ГруппаФормы"),
		ЭлементДляРазмещения,
		ЭлементДляВставки);
	ГруппаНормаВремени.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаНормаВремени.Заголовок = НСтр("ru='Норма времени';uk='Норма часу'");
	ГруппаНормаВремени.ОтображатьВШапке = Истина;
	ГруппаНормаВремени.Видимость = ВидимостьПолей;
	
	ГруппаНормаВремениДней = Элементы.Добавить(
		ИмяТаблицы + "ГруппаНормаВремениДней",
		Тип("ГруппаФормы"),
		ГруппаНормаВремени);
	ГруппаНормаВремениДней.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаНормаВремениДней.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	НормаВремениДней = Элементы.Добавить(
		ИмяТаблицы + "НормаВремениДней",
		Тип("ПолеФормы"),
		ГруппаНормаВремениДней);
	НормаВремениДней.Вид = ВидПоляФормы.ПолеВвода;
	НормаВремениДней.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НормаВремениДней.ОтображатьВШапке = Ложь;
	НормаВремениДней.Ширина = 7;
	НормаВремениДней.РастягиватьПоГоризонтали = Ложь;
	НормаВремениДней.ПутьКДанным = ПутьКТаблице + ".НормаДней";
		
	НормаВремениДнейДнейЕдиницаИзмерения = Элементы.Добавить(
		ИмяТаблицы + "НормаВремениДнейЕдиницаИзмеренияВремени",
		Тип("ПолеФормы"),
		ГруппаНормаВремениДней);
	НормаВремениДнейДнейЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	НормаВремениДнейДнейЕдиницаИзмерения.Ширина = 5;
	НормаВремениДнейДнейЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	НормаВремениДнейДнейЕдиницаИзмерения.ПутьКДанным = ПутьКТаблице + ".ЕдиницаИзмеренияВремени";
	
	ГруппаНормаВремениЧасов = Элементы.Добавить(
		ИмяТаблицы + "ГруппаНормаВремениЧасов",
		Тип("ГруппаФормы"),
		ГруппаНормаВремени);
	ГруппаНормаВремениЧасов.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаНормаВремениЧасов.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	НормаВремениЧасов = Элементы.Добавить(
		ИмяТаблицы + "НормаВремениЧасов",
		Тип("ПолеФормы"),
		ГруппаНормаВремениЧасов);
	НормаВремениЧасов.Вид = ВидПоляФормы.ПолеВвода;
	НормаВремениЧасов.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НормаВремениЧасов.ОтображатьВШапке = Ложь;
	НормаВремениЧасов.Ширина = 7;
	НормаВремениЧасов.РастягиватьПоГоризонтали = Ложь;
	НормаВремениЧасов.ПутьКДанным = ПутьКТаблице + ".НормаЧасов";
		
	НормаВремениЧасовЕдиницаИзмерения = Элементы.Добавить(
		ИмяТаблицы + "НормаВремениЧасовЕдиницаИзмеренияВремени",
		Тип("ПолеФормы"),
		ГруппаНормаВремениЧасов);
	НормаВремениЧасовЕдиницаИзмерения.ОтображатьВШапке = Ложь;
	НормаВремениЧасовЕдиницаИзмерения.Ширина = 5;
	НормаВремениЧасовЕдиницаИзмерения.РастягиватьПоГоризонтали = Ложь;
	НормаВремениЧасовЕдиницаИзмерения.ПутьКДанным = ПутьКТаблице + ".ЕдиницаИзмеренияВремени";

	// Норма дней
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru='дн.';uk='дн.'");
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".НормаДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НормаВремениДнейЕдиницаИзмеренияВремени");
	
	// Норма часов
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru='чс.';uk='гд.'");
	Условие = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".НормаЧасов");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НормаВремениЧасовЕдиницаИзмеренияВремени");
	
	// ФиксРасчетВремени
	ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	Если ОписаниеТаблицы.ЭтоПерерасчеты Тогда
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Ложь;
	Иначе 
		ГруппаОтбора =  ЭлементУсловногоОформления.Отбор;
	КонецЕсли;
		
	Условие = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Условие.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Условие.Использование = Истина;
	Условие.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ФиксРасчетВремени");
	Условие.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НормаВремениДней");
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "НормаВремениЧасов");
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДополнитьФормуПолямиОтображенияВремени(Форма, ОписаниеТаблицы) Экспорт
	
	Если Не ОписаниеТаблицы.ОтображатьПоляОписанияВремени Тогда
		Возврат;
	КонецЕсли; 
	
	ДополнитьФормуПолямиОплаченногоВремени(Форма, ОписаниеТаблицы);
	ДополнитьФормуПолямиНормыВремени(Форма, ОписаниеТаблицы);
	
КонецПроцедуры

Процедура ДокументыНачисленийДополнитьФорму(Форма, ОписаниеДокумента, ТолькоВоВсехДействиях = Неопределено) Экспорт
	ДокументыВыполненияНачисленийДобавитьКомандуПересчитатьСотрудника(Форма, ОписаниеДокумента, ТолькоВоВсехДействиях);
КонецПроцедуры

Процедура ДокументыНачисленийДополнитьФормуРезультатыРаспределения(Форма, ОписанияТаблиц, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Или Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблиц) <> Тип("Массив") Тогда
		ОписанияТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблиц);
	КонецЕсли;
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		
		ПутьКДанным = ОписаниеТаблицы.ПутьКДанным;
		
		Если ДобавлятьРеквизитыФормы Тогда
		
			МассивИменРеквизитовФормы = Новый Массив;
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДанным);
			
			ДобавляемыеРеквизиты = Новый Массив;
			
			РезультатРаспределения = Новый РеквизитФормы("РезультатРаспределения", Новый ОписаниеТипов(), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(РезультатРаспределения);
			
			КомандаРедактирования = Новый РеквизитФормы("КомандаРедактированияРаспределения", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(62)), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(КомандаРедактирования);
			
			ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
		КонецЕсли;
		
		Если ДобавлятьЭлементыФормы Тогда
		
			ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
			ИмяПоляДляВставкиРезультатовРаспределения = ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов;
			ВставлятьПослеПоля = ОписаниеТаблицы.ВставлятьПослеПоля;
			
			Если ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов Тогда
				
				Таблица = Форма.Элементы.Найти(ИмяТаблицы);
				
				ЭлементФормы = Форма.Элементы.Найти(ИмяТаблицы + "КомандаРедактированияРаспределения");
				
				Если ЭлементФормы = Неопределено Тогда
					
					КомандаРедактирования = Форма.Элементы.Добавить(ИмяТаблицы + "КомандаРедактированияРаспределения", Тип("ПолеФормы"), Таблица);
					КомандаРедактирования.Вид = ВидПоляФормы.ПолеНадписи;
					Если РаботаВБюджетномУчреждении Тогда
						КомандаРедактирования.Заголовок = НСтр("ru='Финансир., расходы';uk='Фінансуванню терори., витрати'");
						КомандаРедактирования.Ширина = 17;
					Иначе
						КомандаРедактирования.Заголовок = НСтр("ru='Финансирование';uk='Фінансування'");
						КомандаРедактирования.Ширина = 14;
					КонецЕсли;				
					КомандаРедактирования.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
					КомандаРедактирования.ПутьКДанным = ПутьКДанным + ".КомандаРедактированияРаспределения";

					КомандаРедактирования.ГиперссылкаЯчейки = Истина;
					КомандаРедактирования.АвтоВысотаЯчейки = Истина;
					КомандаРедактирования.РастягиватьПоГоризонтали = Ложь;
					
					Если Не ПустаяСтрока(ИмяПоляДляВставкиРезультатовРаспределения) Тогда
						ПолеДляВставки = Форма.Элементы.Найти(ИмяПоляДляВставкиРезультатовРаспределения);
						Форма.Элементы.Переместить(КомандаРедактирования, Таблица, ПолеДляВставки);
						Если ВставлятьПослеПоля Тогда
							Форма.Элементы.Переместить(ПолеДляВставки, Таблица, КомандаРедактирования);
						КонецЕсли;
					КонецЕсли;
					
					КомандаРедактирования.Шрифт = ШрифтыСтиля.ШрифтСоставнойНадписиМоноширинный;
					
				КонецЕсли;			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет есть ли в документе начисления строки, содержащие ручные исправления.
//
Функция ЕстьИсправленныеСтроки(Форма) Экспорт
	
	КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	Для Каждого КлючИЗначение Из КонтролируемыеПоля Цикл
		ИмяТаблицы = КлючИЗначение.Ключ;
		ФиксПоля = КлючИЗначение.Значение;
		Для Каждого СтрокаТаблицы Из Форма.Объект[ИмяТаблицы] Цикл
			Для Каждого ЭлементСтруктуры Из ФиксПоля Цикл
				ИмяПоля = ЭлементСтруктуры.Ключ;
				Если СтрокаТаблицы[ИмяПоля] = Истина Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаспределениеПоТерриториямУсловиямТруда

// Обработчик события при создании формы для документов с распределением начислений по территориям и условиям труда.
//
Процедура РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(Форма, Организация, ОписанияТаблицНачислений, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(Форма, Организация, ОписанияТаблицНачислений, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	
КонецПроцедуры

// Обработчик события при получении данных (преобразовании объекта в данные формы) 
// для документов с распределением по территориям и условиям труда.
//
Процедура РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(Форма, Организация, ОписанияТаблицНачислений) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// Ключ идентификатор строки начисления - значение массив строк распределения.
	МассивыСтрокРаспределения = Новый Соответствие;
	Для Каждого СтрокаРаспределения Из Форма.Объект.РаспределениеПоТерриториямУсловиямТруда Цикл
		СтрокиРаспределения = МассивыСтрокРаспределения[СтрокаРаспределения.ИдентификаторСтроки];
		Если СтрокиРаспределения = Неопределено Тогда
			СтрокиРаспределения = Новый Массив;
			МассивыСтрокРаспределения.Вставить(СтрокаРаспределения.ИдентификаторСтроки, СтрокиРаспределения);
		КонецЕсли;
		ОписаниеСтроки = ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаРаспределения);
		// Отбираем показатели.
		ОтборПоказателей = Новый Структура("ИдентификаторСтрокиВидаРасчета");
		ОтборПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаРаспределения.ИдентификаторСтрокиПоказателей;
		СтрокиПоказателей = Форма.Объект.Показатели.НайтиСтроки(ОтборПоказателей);
		НомерПоказателя = 1;
		Для Каждого СтрокаПоказателей Из СтрокиПоказателей Цикл
			ОписаниеСтроки["Показатель" + НомерПоказателя] = СтрокаПоказателей.Показатель;
			ОписаниеСтроки["Значение" + НомерПоказателя] = СтрокаПоказателей.Значение;
			НомерПоказателя = НомерПоказателя + 1;
		КонецЦикла;
		СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтроки));
	КонецЦикла;
	
	// Обходим таблицы с начислениями, упаковываем фиксированные массивы.
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
		ТаблицаНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
			СтрокиРаспределения = МассивыСтрокРаспределения[СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета];
			Если СтрокиРаспределения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(СтрокиРаспределения);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(Форма, Организация, ОписанияТаблицНачислений);
	
КонецПроцедуры

// Обработчик события, возникающего при преобразовании данных формы в объект (например, перед записью формы).
//
// ВАЖНО! К моменту вызова этого метода в коллекциях начислений должны быть заполнены идентификаторы строк.
//
Процедура РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(Форма, ТекущийОбъект, ОписанияТаблицНачислений) Экспорт
	
	ТекущийОбъект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(ТекущийОбъект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиПоказателей = 9 * 1000000;
	КоличествоПоказателей = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
	
	// Обходим таблицы с начислениями, переносим строки из фиксированных массивов в табличную часть.
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
		ТаблицаНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		ТаблицаРаспределенияПоТерриториямУсловиямТруда = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда) Тогда 
			АдресТаблицыРаспределения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда);
			Если ЗначениеЗаполнено(АдресТаблицыРаспределения) Тогда
				ТаблицаРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
			КонецЕсли;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
			РаспределениеПоТерриториямУсловиямТруда = СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда;
			Если РаспределениеПоТерриториямУсловиямТруда = Неопределено И ТаблицаРаспределенияПоТерриториямУсловиямТруда <> Неопределено Тогда 
				ИсходныйИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + СтрокаТаблицы.ИсходныйНомерСтроки;
				Отбор = Новый Структура("ИдентификаторСтроки", ИсходныйИдентификаторСтроки);
				РаспределениеПоТерриториямУсловиямТруда =  ТаблицаРаспределенияПоТерриториямУсловиямТруда.НайтиСтроки(Отбор);
			КонецЕсли;
			Если РаспределениеПоТерриториямУсловиямТруда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаРаспределения Из РаспределениеПоТерриториямУсловиямТруда Цикл
				НоваяСтрокаРаспределения = ТекущийОбъект.РаспределениеПоТерриториямУсловиямТруда.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения, СтрокаРаспределения);
				НоваяСтрокаРаспределения.ИдентификаторСтроки = СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета;
				НоваяСтрокаРаспределения.ИдентификаторСтрокиПоказателей = ИдентификаторСтрокиПоказателей;
				Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
					Показатель = СтрокаРаспределения["Показатель" + НомерПоказателя];
					Если Не ЗначениеЗаполнено(Показатель) Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ТекущийОбъект.Показатели.Добавить();
					НоваяСтрока.Показатель = Показатель;
					НоваяСтрока.Значение = СтрокаРаспределения["Значение" + НомерПоказателя];
					НоваяСтрока.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиПоказателей;
				КонецЦикла;
				ИдентификаторСтрокиПоказателей = ИдентификаторСтрокиПоказателей + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Дополняет данные формы необходимыми реквизитами и элементами для работы механизма распределения начислений по территориям и условиям труда.
//
// Параметры
//	- Форма
//	- Организация
//	- ОписанияТаблицНачислений - массив с описаниями таблиц, с которыми будет связано распределение.
//
Процедура ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(Форма, Организация, ОписанияТаблицНачислений, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Если ДобавлятьРеквизитыФормы Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		МассивИменРеквизитовФормы = Новый Массив;
		// Добавляем в каждую таблицу колонку с представлением распределения.
		Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
			КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
			// Собираем состав реквизитов таблицы.
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицы.ПутьКДанным);
			// Добавляем реквизит, в котором будет в виде фиксированного массива фиксированных структур храниться распределение в течение жизни формы.
			РеквизитФормы = Новый РеквизитФормы("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов(), ОписаниеТаблицы.ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			// ..и реквизит, определяющий представление.
			РеквизитФормы = Новый РеквизитФормы("ПредставлениеРаспределенияПоТерриториямУсловиямТруда", Новый ОписаниеТипов("Строка"), ОписаниеТаблицы.ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			// Находим поле показателя.
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				РеквизитФормы = Новый РеквизитФормы("ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя, Новый ОписаниеТипов("Строка"), ОписаниеТаблицы.ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			КонецЦикла;
		КонецЦикла;
		// Добавляем реквизиты.
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы, , ОтложенноеИзменение);
	КонецЕсли;	
		
	Если ДобавлятьЭлементыФормы Тогда 
		// Добавляем в каждую таблицу поле для представления распределения.
		Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
			КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
			// Находим поле показателя.
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				// Добавляем условное оформление, в соответствии с которым в поле значение отображаем представление, если последнее заполнено.
				ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект." + ОписаниеТаблицы.ИмяТаблицы + ".ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя));
				ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "Объект." + ОписаниеТаблицы.ИмяТаблицы + ".ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя, , ВидСравненияКомпоновкиДанных.Заполнено);
				ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ОписаниеТаблицы.ИмяТаблицы + "Значение" + НомерПоказателя);
			КонецЦикла;
			// Добавляем поле.
			ИмяПоля = ОписаниеТаблицы.ИмяТаблицы + "_РаспределениеПоТерриториямУсловиямТруда";
			Если Форма.Элементы.Найти(ИмяПоля) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Форма.Элементы.Найти(ОписаниеТаблицы.ИмяТаблицы) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Таблица = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы];
			ПолеРаспределения = Форма.Элементы.Добавить(ОписаниеТаблицы.ИмяТаблицы + "_РаспределениеПоТерриториямУсловиямТруда", Тип("ПолеФормы"), Таблица);
			ПолеРаспределения.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеРаспределения.Заголовок = НСтр("ru='Терр., усл. труда';uk='Терр., усл. праці'");
			ПолеРаспределения.Ширина = 14;
			ПолеРаспределения.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			ПолеРаспределения.ПутьКДанным = ОписаниеТаблицы.ПутьКДанным + ".ПредставлениеРаспределенияПоТерриториямУсловиямТруда";
			ПолеРаспределения.ГиперссылкаЯчейки = Истина;
			ПолеРаспределения.АвтоВысотаЯчейки = Истина;
			ПолеРаспределения.РастягиватьПоГоризонтали = Ложь;
			МестоВставки = ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов;
			Если Не ПустаяСтрока(МестоВставки) Тогда
				ПолеДляВставки = Форма.Элементы.Найти(МестоВставки);
				Форма.Элементы.Переместить(ПолеРаспределения, Таблица, ПолеДляВставки);
				Если ОписаниеТаблицы.ВставлятьПослеПоля Тогда
					Форма.Элементы.Переместить(ПолеДляВставки, Таблица, ПолеРаспределения);
				КонецЕсли;
			КонецЕсли;
			ПолеРаспределения.Шрифт = ШрифтыСтиля.ШрифтСоставнойНадписиМоноширинный;
		КонецЦикла;
	КонецЕсли;
	
	// Установка свойств элементов.
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		// Отключаем видимость полей, если они уже существуют.
		Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
			ИмяПоля = ОписаниеТаблицы.ИмяТаблицы + "_РаспределениеПоТерриториямУсловиямТруда";
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоля, "Видимость", Ложь);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Включаем видимость полей, если они уже существуют.
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
		ИмяПоля = ОписаниеТаблицы.ИмяТаблицы + "_РаспределениеПоТерриториямУсловиямТруда";
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоля, "Видимость", Истина);
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует строку представления для колонки с обозначением территорий и условий труда.
//
Процедура ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(Форма, Организация, ОписанияТаблицНачислений, Сотрудники = Неопределено) Экспорт
	
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПоказателейПоТерриториямУсловиямТруда = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл
		ТаблицаНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
			Если СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Сотрудники <> Неопределено И Сотрудники.Найти(СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаСотрудник]) = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ЭлементыПредставления = Новый Соответствие;
			ЗначенияПоказателей = Новый Соответствие;
			Для Каждого СтрокаРаспределения Из СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда Цикл
				Если ЗначениеЗаполнено(СтрокаРаспределения.Территория) Тогда
					ЭлементыПредставления.Вставить(СтрокаРаспределения.Территория);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаРаспределения.УсловияТруда) Тогда
					ЭлементыПредставления.Вставить(СтрокаРаспределения.УсловияТруда);
				КонецЕсли;
				// Если заполнен показатель, собираем его уникальные значения.
				Для НомерПоказателя = 1 По КоличествоПоказателейПоТерриториямУсловиямТруда Цикл
					Показатель = СтрокаРаспределения["Показатель" + НомерПоказателя];
					Если Не ЗначениеЗаполнено(Показатель) Тогда
						Продолжить;
					КонецЕсли;
					Значения = ЗначенияПоказателей[Показатель];
					Если Значения = Неопределено Тогда
						Значения = Новый Соответствие;
						ЗначенияПоказателей.Вставить(Показатель, Значения);
					КонецЕсли;
					Значения.Вставить(СтрокаРаспределения["Значение" + НомерПоказателя]);
				КонецЦикла;
			КонецЦикла;
			// Заполняем представление в строке.
			ПредставлениеРаспределения = "";
			Для Каждого КлючПредставления Из ЭлементыПредставления Цикл
				ПредставлениеРаспределения = ПредставлениеРаспределения + КлючПредставления.Ключ + ", ";
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеРаспределения, 2);
			СтрокаТаблицы.ПредставлениеРаспределенияПоТерриториямУсловиямТруда = ПредставлениеРаспределения;
			// Формируем представление показателей.
			Если ЗначенияПоказателей.Количество() > 0 Тогда
				КоличествоПоказателейНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
				// Находим поле показателя.
				Для НомерПоказателя = 1 По КоличествоПоказателейНачислений Цикл
					Показатель = СтрокаТаблицы["Показатель" + НомерПоказателя];
					Если Не ЗначениеЗаполнено(Показатель) Тогда
						Продолжить;
					КонецЕсли;
					Значения = ЗначенияПоказателей[Показатель];
					Если Значения = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Значения.Вставить(СтрокаТаблицы["Значение" + НомерПоказателя]);
					ПредставлениеЗначений = "";
					Для Каждого КлючИЗначение Из Значения Цикл
						ПредставлениеЗначений = ПредставлениеЗначений + Строка(КлючИЗначение.Ключ) + Символы.ПС;
					КонецЦикла;
					СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеЗначений);
					СтрокаТаблицы["ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя] = ПредставлениеЗначений;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет необходимые для редактирования распределения по территориям и условиям труда параметры.
//
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(Форма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	
	// Заполняем коллекцию Распределение и Показатели распределения.
	Объект = Форма.Объект;
	Начисления = Объект[ОписаниеТаблицы.ИмяТаблицы];
	ДанныеСтроки = Начисления.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	РаспределениеПоТерриториямУсловиямТруда = ДанныеСтроки.РаспределениеПоТерриториямУсловиямТруда;
	Если РаспределениеПоТерриториямУсловиямТруда = Неопределено Тогда 
		РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТрудаИзХранилища(Форма, ОписаниеТаблицы, ДанныеСтроки);
	КонецЕсли;
	
	Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		ПараметрыФормы.Начисление = ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
	Иначе
		ПараметрыФормы.Начисление = Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
	КонецЕсли;
	ПараметрыФормы.Сотрудник = ДанныеСтроки.Сотрудник;
	ПараметрыФормы.Распределение = ПоместитьВоВременноеХранилище(РаспределениеПоТерриториямУсловиямТруда, Форма.УникальныйИдентификатор);
	ПараметрыФормы.Организация = Объект.Организация;
	
КонецПроцедуры

Функция РаспределениеПоТерриториямУсловиямТрудаИзХранилища(Форма, ОписаниеТаблицы, ДанныеСтроки)
	
	Если Не ЗначениеЗаполнено(ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	АдресТаблицыРаспределения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда);
	
	Если Не ЗначениеЗаполнено(АдресТаблицыРаспределения) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	РаспределениеПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
	
	Отбор = Новый Структура("ИдентификаторСтроки", ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки]);
	СтрокиРаспределения = РаспределениеПоТерриториямУсловиямТруда.НайтиСтроки(Отбор);
	
	Если СтрокиРаспределения.Количество() > 0 Тогда 
		Возврат СтрокиРаспределения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Осуществляет перенос данных по результатам редактирования данных распределения начислений.
//
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(Форма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	
	Объект = Форма.Объект;
	Начисления = Объект[ОписаниеТаблицы.ИмяТаблицы];
	
	ДанныеСтроки = Начисления.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ДанныеСтроки.РаспределениеПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(РезультатРедактирования.Распределение);
	
	// Если изменилась только сумма, и не изменились показатели, то
	// - вписываем новый итог в результат, 
	// - взводим ФиксРасчет = Истина,
	// - запускаем пересчет с целью уточнить зависимые начисления и другие коллекции.
	
	ДанныеСтроки.Результат = РезультатРедактирования.Результат;
	ДанныеСтроки.ФиксРасчет = Истина;
	
КонецПроцедуры

// Функция конструирует структуру, описывающую данные о распределении по территориям, условиям труда.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Территория", Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
	ПоляОписания.Вставить("УсловияТруда", Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
	ПоляОписания.Вставить("ДоляРаспределения", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	ПоляОписания.Вставить("Результат", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	Показатели = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
	Для НомерПоказателя = 1 По Показатели.Количество() Цикл
		ПоляОписания.Вставить("Показатель" + НомерПоказателя, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		ПоляОписания.Вставить("Значение" + НомерПоказателя, Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	КонецЦикла;
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область ОбслуживаниеВводаПоказателейПособияДоТрехЛетВФормеДокументов

Процедура ОбновитьПоляВводаПоказателейПособияДоТрехЛет(Форма, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Если вид пособия не заполнен.
	Если Не ЗначениеЗаполнено(Объект.ПособиеДоТрехЛет) Тогда
		// "Включаем" пустую декорацию, чтобы отображать страницу без элементов.
		Элементы.ГруппаПособиеДоТрехЛетРассчитываетсяДекорация.Видимость = Истина;
		Элементы.ГруппаПоказателиПособияДоТрехЛет.ТекущаяСтраница = Элементы.ГруппаПособиеДоТрехЛетРассчитывается;
		Возврат;
	КонецЕсли;
	
	// Для ввода запрашиваемых показателей пособия до трех лет нужно оформить необходимое количество полей.
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.ПособиеДоТрехЛет);
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		// Обнуляем фиксированный размер.
		Объект.РазмерПособияДоТрехЛетФиксированнойСуммой = 0;
		
		ДобавляемыеРеквизиты = Новый Массив;
		ПоказателиПособия = Новый Соответствие;
		
		Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			ПоказателиПособия.Вставить(ОписаниеПоказателя.Показатель, Истина);
			Если Не ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда
				Продолжить;
			КонецЕсли;
			// Показатель запрашивается - создаем для него поле ввода.
			// Проверяем, возможно для такого показателя поле уже существует.
			Если Форма.ПоказателиПособияДоТрехЛет.НайтиСтроки(Новый Структура("Показатель", ОписаниеПоказателя.Показатель)).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			ИмяРеквизита = "Показатель_" + ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита();
			ДобавляемыеРеквизиты.Добавить(
				Новый РеквизитФормы(
					ИмяРеквизита, 
					Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, ОписаниеПоказателя.Точность)), , 
					ОписаниеПоказателя.КраткоеНаименование, 
					Истина));
			НовыйПоказатель = Форма.ПоказателиПособияДоТрехЛет.Добавить();		
			НовыйПоказатель.Показатель = ОписаниеПоказателя.Показатель;
			НовыйПоказатель.ИмяРеквизита = ИмяРеквизита;
		КонецЦикла;
		
		// Для показателей, которые не встречаются в новой коллекции удаляем поля.
		УдаляемыеРеквизиты = Новый Массив;
		УдаляемыеСтроки = Новый Массив;
		Для Каждого СтрокаПоказателя Из Форма.ПоказателиПособияДоТрехЛет Цикл
			Если ПоказателиПособия[СтрокаПоказателя.Показатель]	= Неопределено Тогда
				УдаляемыеРеквизиты.Добавить(СтрокаПоказателя.ИмяРеквизита);
				УдаляемыеСтроки.Добавить(СтрокаПоказателя);
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Форма.ПоказателиПособияДоТрехЛет.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы, УдаляемыеРеквизиты, ОтложенноеИзменение);
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		// Если не рассчитывается, то отображаем заранее подготовленное поле Размер.
		Если Не ВидРасчетаИнфо.Рассчитывается Тогда
			Элементы.ГруппаПоказателиПособияДоТрехЛет.ТекущаяСтраница = Элементы.ГруппаПособиеДоТрехЛетНеРассчитывается;
			Возврат;
		КонецЕсли;
		// Если рассчитывается, то для каждого запрашиваемого показателя добавим поле ввода.
		Элементы.ГруппаПоказателиПособияДоТрехЛет.ТекущаяСтраница = Элементы.ГруппаПособиеДоТрехЛетРассчитывается;
		
		// Добавляем элементы формы
		Для Каждого СтрокаПоказателя Из Форма.ПоказателиПособияДоТрехЛет Цикл
			Если Элементы.Найти(СтрокаПоказателя.ИмяРеквизита) <> Неопределено Тогда
				// Поле уже существует
				Продолжить;
			КонецЕсли;
			ПолеВвода = Элементы.Добавить(СтрокаПоказателя.ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаПособиеДоТрехЛетРассчитывается);
			ПолеВвода.ПутьКДанным = СтрокаПоказателя.ИмяРеквизита;
			ПолеВвода.Вид = ВидПоляФормы.ПолеВвода;
			ПолеВвода.КнопкаВыбора = Истина;
		КонецЦикла;
		
		// "Включаем" пустую декорацию, чтобы отображать страницу без элементов.
		Элементы.ГруппаПособиеДоТрехЛетРассчитываетсяДекорация.Видимость = Форма.ПоказателиПособияДоТрехЛет.Количество() = 0;
		
		ПрочитатьЗначенияПоказателейПособияДоТрехЛет(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьЗначенияПоказателейПособияДоТрехЛет(Форма, ТекущийОбъект = Неопределено) Экспорт
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Форма.Объект;
	КонецЕсли;
	
	// Заполним поля ввода значениями показателей.
	Для Каждого СтрокаТаблицы Из ТекущийОбъект.Показатели Цикл
		НайденныеСтроки = Форма.ПоказателиПособияДоТрехЛет.НайтиСтроки(Новый Структура("Показатель", СтрокаТаблицы.Показатель));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Форма[НайденныеСтроки[0].ИмяРеквизита] = СтрокаТаблицы.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЗначенияПоказателейПособияДоТрехЛет(Форма, ТекущийОбъект) Экспорт
	
	Для Каждого СтрокаПоказателей Из Форма.ПоказателиПособияДоТрехЛет Цикл
		НоваяСтрока = ТекущийОбъект.Показатели.Добавить();
		НоваяСтрока.Показатель = СтрокаПоказателей.Показатель;
		НоваяСтрока.Значение = Форма[СтрокаПоказателей.ИмяРеквизита];
		НоваяСтрока.ИдентификаторСтрокиВидаРасчета = Документы.ОтпускПоУходуЗаРебенком.ИдентификаторСтрокПоказателейПособияДоТрехЛет();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыОбслуживанияФормДокументовВыполняющихУдержания

// Определяет действует ли указанное начисление на указанную дату.
//
// Параметры:
//	- Организация
//	- ФизическоеЛицо
//	- Удержание
//	- ДатаАктуальности - дата, на которую определяется действует ли начисление.
//	- Регистратор - если указан, движения регистратора игнорируются.
//	
Функция НачислениеДействуетНаДату(Сотрудник, Начисление, ДатаАктуальности, Регистратор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК НачислениеДействует
	|ИЗ
	|	РегистрСведений.ПлановыеНачисления.СрезПоследних(
	|			&ДатаАктуальности,
	|			Сотрудник = &Сотрудник
	|				И Начисление = &Начисление
	|				И (Регистратор <> &Регистратор
	|					ИЛИ &БезОтбораПоРегистратору)) КАК ПлановыеНачисления
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеНачисления.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ПлановыеНачисления.ДействуетДо <= &ДатаАктуальности
	|				ТОГДА ПлановыеНачисления.ИспользуетсяПоОкончании
	|			ИНАЧЕ ПлановыеНачисления.Используется
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Начисление", Начисление);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("БезОтбораПоРегистратору", Регистратор = Неопределено);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет действует ли указанное удержание на указанную дату.
//
// Параметры:
//	- Организация
//	- ФизическоеЛицо
//	- Удержание
//	- ДатаАктуальности - дата, на которую определяется действует ли удержание.
//	- Регистратор - если указан, движения регистратора игнорируются.
//	- ДокументОснование - если указан, определяется действие удержание по конкретному основанию.
//	
Функция УдержаниеДействуетНаДату(Организация, ФизическоеЛицо, Удержание, ДатаАктуальности, Регистратор = Неопределено, ДокументОснование = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК УдержаниеДействует
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания.СрезПоследних(
	|			&ДатаАктуальности,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И Организация = &Организация
	|				И Удержание = &Удержание
	|				И (ДокументОснование = &ДокументОснование
	|					ИЛИ &БезОтбораПоДокументамОснование)
	|				И (Регистратор <> &Регистратор
	|					ИЛИ &БезОтбораПоРегистратору)) КАК ПлановыеУдержания
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеУдержания.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ПлановыеУдержания.ДействуетДо <= &ДатаАктуальности
	|				ТОГДА ПлановыеУдержания.ИспользуетсяПоОкончании
	|			ИНАЧЕ ПлановыеУдержания.Используется
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Удержание", Удержание);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("БезОтбораПоРегистратору", Регистратор = Неопределено);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("БезОтбораПоДокументамОснование", ДокументОснование = Неопределено);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет перечень документов, на основании которых действует указанное удержание.
//
// Параметры:
//	- Организация
//	- ФизическоеЛицо
//	- Удержание
//	- ДатаАктуальности - дата, на которую определяется действует ли удержание.
//	- Регистратор - если указан, движения регистратора игнорируются.
//	
Функция ОснованияУдержания(Организация, ФизическоеЛицо, Удержание, ДатаАктуальности, Регистратор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.ДокументОснование
	|ИЗ
	|	РегистрСведений.ПлановыеУдержания.СрезПоследних(
	|			&ДатаАктуальности,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И Организация = &Организация
	|				И Удержание = &Удержание
	|				И (Регистратор <> &Регистратор
	|					ИЛИ &БезОтбораПоРегистратору)) КАК ПлановыеУдержания
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеУдержания.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ПлановыеУдержания.ДействуетДо <= &ДатаАктуальности
	|				ТОГДА ПлановыеУдержания.ИспользуетсяПоОкончании
	|			ИНАЧЕ ПлановыеУдержания.Используется
	|		КОНЕЦ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Организация.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Удержание", Удержание);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("БезОтбораПоРегистратору", Регистратор = Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Основания = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Основания.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Возврат Основания;
	
КонецФункции

// Метод заполняет реквизит документа удержанием, 
// если действующее удержание с такой ролью в системе - единственное.
// В случае если в системе нет вообще ни одного удержания с такой ролью взводится исключение.
//
// Параметры:
//	- КатегорияУдержания - ПеречислениеСсылка.КатегорииУдержаний
//	- РеквизитУдержания - реквизит документа для заполнения.
//	
Процедура ЗаполнитьУдержаниеВФормеДокументаПоРоли(Форма, РеквизитУдержания, КатегорияУдержания, ДополнительныйОтбор = Неопределено) Экспорт
	
	Отбор = Новый Структура("ВАрхиве, ПометкаУдаления", Ложь, Ложь);
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ДополнительныйОтбор Цикл
			Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Удержания = РасчетЗарплаты.УдержанияПоКатегории(КатегорияУдержания, Отбор);
		
	Если Удержания.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не обнаружено ни одного удержания %2, регистрируемого документом «%1».';uk='Не виявлено жодного утримання %2, що реєструється документом «%1».'"), 
				  Форма.Объект.Ссылка.Метаданные().Синоним, 
				  КатегорияУдержания);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
		
	Если Удержания.Количество() = 1 Тогда
		РеквизитУдержания = Удержания[0];
	КонецЕсли;
	
КонецПроцедуры

// Метод заполняет реквизит документа последним введенным для этого удержания контрагентом.
// В случае если в системе нет еще введенных документов по удержанию или удержание не заполнено, то контрагент не заполняется.
//
// Параметры:
//	- ИмяРеквизитаКонтрагент - наименование реквизита документа для заполнения.
//	- РеквизитУдержания - реквизит документа, где заполнено удержание.
//	
Процедура ЗаполнитьКонтрагентаВФормеДокументаПоУдержанию(Форма, ИмяРеквизитаКонтрагент, РеквизитУдержания) Экспорт
	
	Если Не ЗначениеЗаполнено(РеквизитУдержания) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Удержание", РеквизитУдержания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокументУдержания.Контрагент КАК Контрагент
	|ИЗ
	|	#ДокументУдержания КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Удержание = &Удержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументУдержания.МоментВремени УБЫВ";
	
	ИмяМетаданныхДокумента = Форма.Объект.Ссылка.Метаданные().ПолноеИмя();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДокументУдержания", ИмяМетаданныхДокумента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументУдержания.Контрагент", "ДокументУдержания." + ИмяРеквизитаКонтрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Форма.Объект[ИмяРеквизитаКонтрагент] = Выборка.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

// Запрашивает значения периодических показателей зарплаты сотрудника по физическому лицу.
//
// Параметры:
//	- Организация
//	- ФизическоеЛицо
//	- Показатели - массив показателей.
//	- ДатаАктуальности - дата, на которую выявляются значения показателей.
//	- Регистратор - если указан, движения регистратора игнорируются.
//	- ДокументОснование - если указан, по всем основаниям.
//
Функция ЗначенияПоказателейФизическогоЛица(Организация, ФизическоеЛицо, Показатели, ДатаАктуальности, Регистратор = Неопределено, ДокументОснование = Неопределено) Экспорт
	
	// Определяем таблицу измерений.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмеренияДаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ИзмеренияДаты.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ИзмеренияДаты.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Измерения.ДокументОснование.Тип);
	
	Для Каждого Показатель Из Показатели Цикл
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Период = ДатаАктуальности;
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Показатель = Показатель;
		НоваяСтрока.ДокументОснование = ДокументОснование;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбор для исключения движений текущего регистратора.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если Регистратор <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	КонецЕсли;
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателей.Показатель,
	|	СУММА(ВЫРАЗИТЬ(ЗначенияПериодическихПоказателей.Значение КАК ЧИСЛО)) КАК Значение
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПериодическихПоказателей.Показатель";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДокументыПлановыхУдержанийУстановитьВидимостьПоказателей(Элементы, Удержание, ИмяЭлементаПоказателей = "Показатели") Экспорт
	
	// Показываем таблицу показателей, если есть отображаемые показатели.
	Если Не ЗначениеЗаполнено(Удержание) Тогда
		Элементы[ИмяЭлементаПоказателей].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Удержание);
	
	Если ВидРасчетаИнфо.КоличествоПостоянныхПоказателей = 0 Тогда
		Элементы[ИмяЭлементаПоказателей].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы[ИмяЭлементаПоказателей].Видимость = Истина;
	
КонецПроцедуры

Процедура ДокументыПлановыхУдержанийУстановитьВидимостьРазмера(Элементы, Удержание, ИмяПоляРазмер = "ГруппаРазмер") Экспорт 
	
	Если Не ЗначениеЗаполнено(Удержание) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяПоляРазмер, "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Удержание);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяПоляРазмер, "Видимость", Не ВидРасчетаИнфо.Рассчитывается);
	
КонецПроцедуры

Процедура ДокументыПлановыхУдержанийУстановитьРазмер(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.Удержание) Тогда
		Объект.Размер = 0;
		Возврат;
	КонецЕсли;
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.Удержание);

	Если ВидРасчетаИнфо.Рассчитывается Тогда 
		Объект.Размер = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыПлановыхУдержанийЗаполнитьПоказатели(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Принимается решение о том, показывать ли таблицу показателей.
	// Если показывать, то таблица заполняется по состоянию на указанную дату действия.
	
	Объект.Показатели.Очистить();
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.Удержание);
	
	Показатели = Новый Массив;
	Для Каждого ДанныеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если ДанныеПоказателя.ЗапрашиватьПриВводе Тогда
			Показатели.Добавить(ДанныеПоказателя.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	// Если удержание не действует на выбранную дату - ничего не делаем.
	Если Не Форма.УдержаниеДействует Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.Показатели, Показатели, "Показатель");
		Возврат;
	КонецЕсли;
	
	// ..Если действует - получаем и заполняем значения.
	ДокументОснование = Неопределено;
	Если Объект.Свойство("ДокументОснование") Тогда
		ДокументОснование = Объект.ДокументОснование;
	КонецЕсли;
	ЗначенияПоказателей = ЗначенияПоказателейФизическогоЛица(
		Объект.Организация, Объект.ФизическоеЛицо, Показатели, Объект.ДатаНачала, Объект.Ссылка, ДокументОснование);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗначенияПоказателей, Объект.Показатели);
	
КонецПроцедуры

Процедура УстановитьСтраницуДействия(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Форма.УдержаниеДействует И Объект.Действие <> Перечисления.ДействияСУдержаниями.Начать Тогда
		Элементы.ДействиеСтраницы.ТекущаяСтраница = Элементы.ДействуетСтраницаГруппа;
	Иначе
		Элементы.ДействиеСтраницы.ТекущаяСтраница = Элементы.НеДействуетСтраница;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьДокументаОснования(Форма, ОснованияУдержания = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УстановитьСтраницуДействия(Форма);
	
	// Документ основания недоступен, если он единственный или, если выполняется начало нового удержания.
	Если Объект.Действие = Перечисления.ДействияСУдержаниями.Начать Тогда
		Объект.ДокументОснование = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснование", "Доступность", Ложь);
		Возврат;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснование", "Доступность", Истина);
	КонецЕсли;
	
	Если ОснованияУдержания = Неопределено Тогда
		ОснованияУдержания = ОснованияУдержания(
			Объект.Организация, Объект.ФизическоеЛицо, Объект.Удержание, Объект.ДатаНачала, Объект.Ссылка);
	КонецЕсли;
	
	Если ОснованияУдержания.Количество() = 1 Тогда
		Объект.ДокументОснование = ОснованияУдержания[0];
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьВыбораВидаДействия(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Прежде всего определяем есть ли действующие удержания такого вида у этого сотрудника (по любому из документов
	// основания).
	ОснованияУдержания = ОснованияУдержания(
		Объект.Организация, Объект.ФизическоеЛицо, Объект.Удержание, Объект.ДатаНачала, Объект.Ссылка);
	
	Элементы.ВидДействияГруппа.Видимость = ОснованияУдержания.Количество() > 0;
	
	// Если нет действующих удержаний, то выбора нет - начинаем новое.
	Если ОснованияУдержания.Количество() = 0 Тогда
		Объект.Действие = Перечисления.ДействияСУдержаниями.Начать;
	КонецЕсли;
	
	УстановитьДоступностьДокументаОснования(Форма, ОснованияУдержания);
	
КонецПроцедуры

Процедура ЗаполнитьДействиеИПоказатели(Форма, ДокументОснование = Неопределено, ИмяЭлементаПоказателей = "Показатели") Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.УдержаниеДействует = УдержаниеДействуетНаДату(
		Объект.Организация, Объект.ФизическоеЛицо, Объект.Удержание, Объект.ДатаНачала, Объект.Ссылка, ДокументОснование);
	
	УстановитьСтраницуДействия(Форма);
	ДокументыПлановыхУдержанийУстановитьВидимостьПоказателей(Элементы, Объект.Удержание, ИмяЭлементаПоказателей);
	ДокументыПлановыхУдержанийЗаполнитьПоказатели(Форма);
	ДокументыПлановыхУдержанийУстановитьВидимостьРазмера(Элементы, Объект.Удержание);
	ДокументыПлановыхУдержанийУстановитьРазмер(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормамиДокументовВыполняющихНачисления

Процедура ДокументыПриСозданииНаСервере(Форма, ОписаниеДокумента = Неопределено) Экспорт
	
	Если Форма.Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Форма.Параметры.РежимОткрытияОкна) Тогда
		Форма.РежимОткрытияОкна = Форма.Параметры.РежимОткрытияОкна;
	КонецЕсли; 
	
	НастроитьВыборВидаРасчета(Форма, ОписаниеДокумента);
	
КонецПроцедуры

Процедура ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(Форма) Экспорт
	
	Форма.РассчитыватьДокументыПриРедактировании = Константы.РассчитыватьДокументыПриРедактировании.Получить();
	Если Форма.РассчитыватьДокументыПриРедактировании Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПересчитатьДокумент",
			"Видимость",
			Ложь);
			
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет настройку поля выбора вида расчета в документах, 
// выполняющих отдельные начисления.
// Реквизит ВидДокументаНачисления у таких начислений принимает одноименное 
// документу значение перечисление.
// Выполняется установка параметров выбора полей.
//
Процедура НастроитьВыборВидаРасчета(Форма, ОписаниеДокумента)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНачисление = Истина;
	
	// Нужно понять имеет ли указанная форма отношение к отдельным документам, выполняющим начисления (или удержания).
	ВидыДокументов = Новый Структура;
	
	ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаНачисленияПоДокументу(Форма.Параметры.Ключ);
	Если ВидДокумента <> Неопределено Тогда
		ВидыДокументов.Вставить("Начисление", ВидДокумента);
	КонецЕсли;
	
	ВидДокумента = РасчетЗарплатыРасширенный.ВидДокументаУдержанияПоДокументу(Форма.Параметры.Ключ);
	Если ВидДокумента <> Неопределено Тогда
		ВидыДокументов.Вставить("Удержание", ВидДокумента);
	КонецЕсли;
	
	Если ВидыДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Форма.Параметры.Ключ));
	
	Для Каждого КлючИЗначение Из ВидыДокументов Цикл
		ЭтоНачисление = КлючИЗначение.Ключ = "Начисление";
		ВидДокумента = КлючИЗначение.Значение;
		
		// Составляем коллекцию параметров выбора.
		ДобавляемыеПараметры = Новый Массив;
		Если ЭтоНачисление Тогда
			ВидыРасчетаДокумента = ПланыВидовРасчета.Начисления.НачисленияПоВидуДокумента(ВидДокумента);
			ИменаПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеДокумента.ИменаПолейНачисления);
			ДобавляемыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДокументаНачисления", ВидДокумента));
			ДобавляемыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.СпособВыполненияНачисления", Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета));
		Иначе
			ВидыРасчетаДокумента = ПланыВидовРасчета.Удержания.УдержанияПоВидуДокумента(ВидДокумента);
			ИменаПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеДокумента.ИменаПолейУдержания);
			ДобавляемыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДокументаУдержания", ВидДокумента));
			ДобавляемыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.СпособВыполненияУдержания", Перечисления.СпособыВыполненияУдержаний.ПоОтдельномуДокументуДоОкончательногоРасчета));
		КонецЕсли;
		
		Если Форма.Параметры.Ключ.Пустая() 
			И ВидыРасчетаДокумента.Количество() = 0 Тогда
			// Нет ни одного начисления (удержания) - нет смысла создавать документ.
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не обнаружено ни одного %1, регистрируемого документом «%3».
                      |Настройте список %2, дополнив его одним или несколькими начислениями указанного назначения.'
                      |;uk='Не виявлено жодного %1, що реєструється документом «%3».
                      |Налаштуйте список %2, доповнивши його одним або кількома нарахуваннями зазначеного призначення.'"), 
					  ?(ЭтоНачисление, НСтр("ru='начисления';uk='нарахування'"), НСтр("ru='удержания';uk='утримання'")),
					  ?(ЭтоНачисление, НСтр("ru='начислений';uk='нарахувань'"), НСтр("ru='удержаний';uk='утримань'")),
					  ВидДокумента);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		// Параметры выбора собираем из реквизита, поля ввода.
		// Затем дополняем видом документа и устанавливаем полю ввода.
		
		Для Каждого ИмяПоля Из ИменаПолей Цикл
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы, ИмяПоля, "ПутьКДанным");
			Если ПутьКДанным = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЧастиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
			ИмяРеквизитаШапки = Неопределено;
			
			// Параметры выбора реквизита
			МассивПараметровВыбора = Новый Массив;
			Если ЧастиПути.Количество() = 3 Тогда
				// реквизит табличной части
				ПараметрыВыбораРеквизита = МетаданныеДокумента.ТабличныеЧасти[ЧастиПути[1]].Реквизиты[ЧастиПути[2]].ПараметрыВыбора;
			Иначе
				// реквизит "шапки"
				ИмяРеквизитаШапки = ЧастиПути[1];
				ПараметрыВыбораРеквизита = МетаданныеДокумента.Реквизиты[ИмяРеквизитаШапки].ПараметрыВыбора;
			КонецЕсли;
			Для Каждого ПараметрВыбора Из ПараметрыВыбораРеквизита Цикл
				МассивПараметровВыбора.Добавить(ПараметрВыбора);
			КонецЦикла;
			
			// Параметры выбора поля ввода.
			ПараметрыВыбораПоля = Форма.Элементы[ИмяПоля].ПараметрыВыбора;
			Для Каждого ПараметрВыбора Из ПараметрыВыбораПоля Цикл
				МассивПараметровВыбора.Добавить(ПараметрВыбора);
			КонецЦикла;
			
			// Добавляем параметры выбора по виду документа.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПараметровВыбора, ДобавляемыеПараметры);
			
			// Устанавливаем параметры выбора.
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы, ИмяПоля, "ПараметрыВыбора", Новый ФиксированныйМассив(МассивПараметровВыбора));
				
			// Если начисление единственное заполним его.
			Если ВидыРасчетаДокумента.Количество() = 1 Тогда
				// Начисление единственное, если в шапке - заполним.
				Если Форма.Параметры.Ключ.Пустая() И ИмяРеквизитаШапки <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКДанным, ВидыРасчетаДокумента[0], Истина);
				КонецЕсли;
				// ..И сделаем поле недоступным для редактирования.
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоля, "ТолькоПросмотр", Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Метод заполняет реквизит документа начислением, 
// если действующее начисление с такой категорией в системе - единственное.
// В случае если в системе нет вообще ни одного начисления с такой ролью взводится исключение.
//
// Параметры:
//	- КатегорияНачисления - ПеречислениеСсылка.КатегорииНачисленийИНеоплачиваемогоВремени
//	- РеквизитНачисления - реквизит документа для заполнения.
//	
Процедура ЗаполнитьНачислениеВФормеДокументаПоКатегории(Форма, РеквизитНачисления, КатегорияНачисления, ДополнительныйОтбор = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ВАрхиве, ПометкаУдаления", Ложь, Ложь);
	
	Если ДополнительныйОтбор <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ДополнительныйОтбор Цикл
			Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Начисления = РасчетЗарплаты.НачисленияПоКатегории(КатегорияНачисления, Отбор);
		
	Если Начисления.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не обнаружено ни одного начисления «%2», регистрируемого документом «%1», заполненным таким образом.
                  |Настройте список начислений, дополнив его одним или несколькими начислениями «%2».'
                  |;uk='Не виявлено жодного нарахування «%2», що реєструється документом «%1», заповненим таким чином.
                  |Налаштуйте список нарахувань, доповнивши його одним або кількома нарахуваннями «%2».'"), 
				  Форма.Объект.Ссылка.Метаданные().Синоним, 
				  КатегорияНачисления);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
		
	Если Начисления.Количество() = 1 Тогда
		РеквизитНачисления = Начисления[0];
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для заполнения значений показателей, 
// а также сведений сотрудника (подразделение, график работы и др.) 
// в строке документа, выполняющего начисления.
// Используется при изменении одного или нескольких полей, влияющих на такие сведения.
//
// Параметры:
//	Форма						- управляемая форма документа.
//	ИдентификаторСтроки			- идентификатор коллекции данных формы, связанных с таблицей начислений.
//	ОписаниеТаблицы	- структура, содержащая сведения об изменяемой таблицы начислений
//	ЗаполнятьСведенияСотрудников- булево, определяет необходимость обновления кадровых данных
//	ЗаполнятьЗначенияПоказателей- булево, определяет необходимость обновления значений показателей.
//
Процедура ДополнитьСтрокуРасчета(Форма, ОписаниеДокумента, ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	
	ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСтроки);
	
	ДополнитьСтрокиРасчета(Форма, ОписаниеДокумента, ОписаниеТаблицы, ИдентификаторыСтрок, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
	
КонецПроцедуры

// Выполняет дозаполнение строк коллекции данными, 
// необходимыми для расчета: сведениями о сотрудниках, 
// показателями расчета и их значениями.
//
Процедура ДополнитьСтрокиРасчета(Форма, ОписаниеДокумента, ОписаниеТаблицы, ИдентификаторыСтрок = Неопределено, ЗаполнятьСведенияСотрудников = Истина, ЗаполнятьЗначенияПоказателей = Истина) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Если ИдентификаторыСтрок = Неопределено Тогда
		СтрокиРасчета = ДанныеНачислений;
	Иначе
		СтрокиРасчета = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
			СтрокаРасчета = ДанныеНачислений.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаРасчета <> Неопределено Тогда
				СтрокиРасчета.Добавить(СтрокаРасчета);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	// Заполним исходные данные для получения дополнительных сведений.
	НачисленияЗаПериод = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	
	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		НоваяСтрока = НачисленияЗаПериод.Добавить();
		СоответствиеСтрок.Вставить(НоваяСтрока, СтрокаРасчета);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		// Если сотрудник указан в шапке.
		Если Не ОписаниеТаблицы.СодержитПолеСотрудник Тогда
			НоваяСтрока.Сотрудник = Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаСотрудник];
		КонецЕсли;
		// Вид расчета может быть указан в шапке.
		Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
			НоваяСтрока.Начисление = Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
		КонецЕсли;
		// Период может не использоваться, тогда полей нет в таблице, их нужно получать 
		// - по периоду, если он указан в шапке
		// - по периоду регистрации.
		Если ОписаниеТаблицы.ИмяРеквизитаДатаНачала = Неопределено Тогда
			Если ОписаниеТаблицы.ИмяРеквизитаПериод <> Неопределено Тогда
				НоваяСтрока.ДатаНачала = НачалоМесяца(Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод]);
			КонецЕсли; 
			Если ОписаниеДокумента.ПериодДействияВШапке И ОписаниеДокумента.ДатаНачалаИмя <> Неопределено Тогда
				НоваяСтрока.ДатаНачала = Форма.Объект[ОписаниеДокумента.ДатаНачалаИмя];
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеТаблицы.ИмяРеквизитаДатаОкончания = Неопределено Тогда
			Если ОписаниеТаблицы.ИмяРеквизитаПериод <> Неопределено Тогда
				НоваяСтрока.ДатаОкончания = КонецМесяца(Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод]);
			КонецЕсли; 
			Если ОписаниеДокумента.ПериодДействияВШапке И ОписаниеДокумента.ДатаОкончанияИмя <> Неопределено Тогда
				НоваяСтрока.ДатаОкончания = Форма.Объект[ОписаниеДокумента.ДатаОкончанияИмя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Скорректируем период датами приема на работу / увольнения сотрудников.
	Если ОписаниеДокумента.ПериодДействияВШапке Тогда
		МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияЗаПериод, "Сотрудник", Истина);
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников, "ДатаПриема,ДатаУвольнения");
		КадровыеДанныеСотрудников.Индексы.Добавить("Сотрудник");
		Для Каждого СтрокаНачислений Из НачисленияЗаПериод Цикл
			КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(СтрокаНачислений.Сотрудник, "Сотрудник");
			Если КадровыеДанныеСотрудника <> Неопределено Тогда
				Если СтрокаНачислений.ДатаНачала < КадровыеДанныеСотрудника.ДатаПриема
					И НачалоМесяца(СтрокаНачислений.ДатаНачала) = НачалоМесяца(КадровыеДанныеСотрудника.ДатаПриема) Тогда
					СтрокаНачислений.ДатаНачала = КадровыеДанныеСотрудника.ДатаПриема;
				КонецЕсли;
				Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаУвольнения)
					И СтрокаНачислений.ДатаОкончания > КадровыеДанныеСотрудника.ДатаУвольнения
					И НачалоМесяца(СтрокаНачислений.ДатаОкончания) = НачалоМесяца(КадровыеДанныеСотрудника.ДатаУвольнения) Тогда
					СтрокаНачислений.ДатаОкончания = КадровыеДанныеСотрудника.ДатаУвольнения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаполнятьСведенияСотрудников Тогда
		РасчетЗарплатыРасширенный.ЗаполнитьСведенияСотрудниковДляРасчета(НачисленияЗаПериод, Форма.Объект[ОписаниеТаблицы.ИмяРеквизитаПериод]);
	КонецЕсли;
	
	Если ЗаполнятьЗначенияПоказателей Тогда
		РасчетЗарплатыРасширенный.ЗаполнитьЗначенияПоказателейНачислений(НачисленияЗаПериод);
	КонецЕсли;
	
	// Переносим значения в исходную коллекцию.
	Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
		ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет условное оформление формы элементами, связанными с механизмом фиксации изменений.
//
Процедура ДокументыВыполненияНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета) Экспорт 
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	РеквизитКонтроляПолей = "КонтролируемыеПоля" + ИмяТаблицы;
	
	КонтролируемыеПоля = Форма[РеквизитКонтроляПолей];
	
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		Если ОписаниеТаблицыВидовРасчета.ЭтоПерерасчеты Тогда
			ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСторно");
			ЭлементОтбора.ПравоеЗначение = Ложь;
		Иначе
			ГруппаОтбора =  ЭлементУсловногоОформления.Отбор;
		КонецЕсли;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + "." + ЭлементСтруктуры.Ключ);
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		Для Каждого ИмяПоля Из ЭлементСтруктуры.Значение Цикл
			ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеОформление.Использование = Истина;
			// Ограничение: предполагается, что имена элементов формы строятся 
			// по принципу ИмяТаблицы + ИмяПоля.
			ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяПоля);
		КонецЦикла;
		
		ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
		ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	КонецЦикла;
	
	Если ОписаниеТаблицыВидовРасчета.ЭтоПерерасчеты Тогда
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформление.Использование = Истина;
		ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДобавитьКонтрольИсправлений(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, ИмяКоманднойПанели = Неопределено, КонтролируемыеПоля = Неопределено, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт 
	
	ИмяТаблицы 	= ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	
	Если ДобавлятьРеквизитыФормы Тогда
		// Создаем реквизит для контролируемых полей.
		ДобавляемыеРеквизиты = Новый Массив;
		КонтролируемыеПоляРеквизит = Новый РеквизитФормы("КонтролируемыеПоля" + ИмяТаблицы, 
									Новый ОписаниеТипов());
		ДобавляемыеРеквизиты.Добавить(КонтролируемыеПоляРеквизит);
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		ОтменятьВсеИсправления 	= Ложь;
		Если ОписаниеТаблицыВидовРасчета.Свойство("ОтменятьВсеИсправления") Тогда  
			ОтменятьВсеИсправления = ОписаниеТаблицыВидовРасчета["ОтменятьВсеИсправления"];
		КонецЕсли;
		
		// Если команда уже есть, то форма уже снабжена реквизитами и командами контроля исправлений.
		Если Форма.Команды.Найти(ИмяТаблицы + "ОтменитьИсправление") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Форма.ТолькоПросмотр Тогда
			КомандаОтменитьИсправление = Форма.Команды.Добавить(ИмяТаблицы + "ОтменитьИсправление");
			КомандаОтменитьИсправление.Действие = "Подключаемый_" + ИмяТаблицы + "ОтменитьИсправление";
			Если ОтменятьВсеИсправления Тогда
				НаименованиеКомандаОтменитьИсправление = НСтр("ru='Отменить исправления сотрудника';uk='Скасувати виправлення співробітника'");
			Иначе
				НаименованиеКомандаОтменитьИсправление = НСтр("ru='Отменить исправления';uk='Скасувати виправлення'");
			КонецЕсли;
			КомандаОтменитьИсправление.Заголовок = НаименованиеКомандаОтменитьИсправление;
			КомандаОтменитьИсправление.ИзменяетСохраняемыеДанные = Истина;
			
			Если ОтменятьВсеИсправления Тогда
				КомандаОтменитьВсе = Форма.Команды.Добавить(ИмяТаблицы + "ОтменитьВсеИсправления");
				КомандаОтменитьВсе.Действие = "Подключаемый_" + ИмяТаблицы + "ОтменитьВсеИсправления";
				КомандаОтменитьВсе.Заголовок = НСтр("ru='Отменить все исправления в документе';uk='Відмінити всі виправлення в документі'");
				КомандаОтменитьВсе.ИзменяетСохраняемыеДанные = Истина;
			КонецЕсли;
			
			Если ИмяКоманднойПанели = Неопределено Тогда
				ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
			КонецЕсли;
			
			КоманднаяПанель = Форма.Элементы.Найти(ИмяКоманднойПанели);
			Если КоманднаяПанель <> Неопределено Тогда
				Если КоманднаяПанель.ПодчиненныеЭлементы.Количество() = 0 Тогда
					МестоВставки = Неопределено;
				Иначе
					МестоВставки = КоманднаяПанель.ПодчиненныеЭлементы[0];
				КонецЕсли;
				
				Если ОтменятьВсеИсправления Тогда
					
					ИмяЭлемента = ИмяТаблицы + "ОтменитьИсправлениеГруппа";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						Подменю = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанель, МестоВставки);
						Подменю.Вид = ВидГруппыФормы.Подменю;
						Подменю.Заголовок = НСтр("ru='Отмена исправлений';uk='Скасування виправлень'");
					КонецЕсли;
					
					ИмяЭлемента = ИмяТаблицы + "ОтменитьИсправление";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						КнопкаОтменитьИсправление = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
						КнопкаОтменитьИсправление.ИмяКоманды = ИмяТаблицы + "ОтменитьИсправление";
					КонецЕсли;
					
					ИмяЭлемента = ИмяТаблицы + "ОтменитьВсеИсправления";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						КнопкаОтменитьВсеИсправления = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
						КнопкаОтменитьВсеИсправления.ИмяКоманды = ИмяТаблицы + "ОтменитьВсеИсправления";
					КонецЕсли;
					
				Иначе
					
					ИмяЭлемента = ИмяТаблицы + "ОтменитьИсправление";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						КнопкаОтменитьИсправление = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), КоманднаяПанель, МестоВставки);
						КнопкаОтменитьИсправление.ИмяКоманды = ИмяТаблицы + "ОтменитьИсправление";
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			ИмяКонтекстногоМеню = ИмяТаблицы + "КонтекстноеМеню";
			КонтекстноеМеню = Форма.Элементы.Найти(ИмяКонтекстногоМеню);
			Если КонтекстноеМеню <> Неопределено Тогда
				Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() = 0 Тогда
					МестоВставки = Неопределено;
				Иначе
					МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
				КонецЕсли;
				ИмяЭлемента = ИмяТаблицы + "ОтменитьИсправлениеКМ";
				КнопкаОтменитьИсправлениеКМ = Форма.Элементы.Найти(ИмяЭлемента);
				Если КнопкаОтменитьИсправлениеКМ = Неопределено Тогда
					КнопкаОтменитьИсправлениеКМ = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), КонтекстноеМеню, МестоВставки);
					КнопкаОтменитьИсправлениеКМ.ИмяКоманды = ИмяТаблицы + "ОтменитьИсправление";
				КонецЕсли;
				Форма.Элементы.Переместить(КнопкаОтменитьИсправлениеКМ, КонтекстноеМеню, МестоВставки);
				Если ОтменятьВсеИсправления Тогда
					ИмяЭлемента = ИмяТаблицы + "ОтменитьВсеИсправленияКМ";
					Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
						КнопкаОтменитьВсеИсправленияКМ = Форма.Элементы.Вставить(ИмяЭлемента, Тип("КнопкаФормы"), КонтекстноеМеню, МестоВставки);
						КнопкаОтменитьВсеИсправленияКМ.ИмяКоманды = ИмяТаблицы + "ОтменитьВсеИсправления";
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяПВР) Тогда
			МаксимальноеКоличествоПоказателей = 0;
		Иначе
			МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей(ИмяПВР);
		КонецЕсли;
		
		// Обработаем контролируемые поля таблицы.
		Если КонтролируемыеПоля = Неопределено Тогда 
			КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
		КонецЕсли;
		
		Если КонтролируемыеПоля.Свойство(ИмяТаблицы) Тогда
			КонтролируемыеПоляТаблицы = КонтролируемыеПоля[ИмяТаблицы];
			// Если среди контролируемых полей есть ФиксЗаполнение - дополним его состав значениями показателей.
			Если КонтролируемыеПоляТаблицы.Свойство("ФиксЗаполнение") Тогда
				Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
					КонтролируемыеПоляТаблицы.ФиксЗаполнение.Добавить("Значение" + НомерПоказателя);
				КонецЦикла;
			КонецЕсли;
			КонтролируемыеПоляСФиксированнымиМассивами = Новый Структура;
			Для Каждого ЭлементСтруктуры Из КонтролируемыеПоляТаблицы Цикл
				КонтролируемыеПоляСФиксированнымиМассивами.Вставить(ЭлементСтруктуры.Ключ, 
					Новый ФиксированныйМассив(ЭлементСтруктуры.Значение));
			КонецЦикла;
			Форма["КонтролируемыеПоля" + ИмяТаблицы] = Новый ФиксированнаяСтруктура(КонтролируемыеПоляСФиксированнымиМассивами);
		Иначе
			Форма["КонтролируемыеПоля" + ИмяТаблицы] = Новый ФиксированнаяСтруктура;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКомандуПересчитатьСотрудникаВТаблицуДокумента(Форма, ИмяТаблицы, ИмяКоманднойПанели, ТолькоВоВсехДействиях)
	
	Если Форма.Элементы.Найти(ИмяТаблицы) = Неопределено Тогда
		// Такой таблицы нет в форме
		Возврат;
	КонецЕсли;
	
	Если Форма.Команды.Найти(ИмяТаблицы + "ПересчитатьСотрудника") <> Неопределено Тогда
		// Команда уже существует
		Возврат;
	КонецЕсли;
	
	// Добавляем команду формы
	КомандаПересчитатьСотрудника = Форма.Команды.Добавить(ИмяТаблицы + "ПересчитатьСотрудника");
	КомандаПересчитатьСотрудника.Действие = "Подключаемый_" + ИмяТаблицы + "ПересчитатьСотрудника";
	КомандаПересчитатьСотрудника.Заголовок = НСтр("ru='Пересчитать сотрудника';uk='Перерахувати співробітника'");
	КомандаПересчитатьСотрудника.Подсказка = НСтр("ru='Строки выбранных сотрудников перезаполняются и перерассчитываются по всем таблицам, 
                                                   |исправления не отменяются'
                                                   |;uk='Рядки вибраних співробітників перезаполняются і перерассчитываются по всіх таблиць, 
                                                   |виправлення не скасовуються'");
	КомандаПересчитатьСотрудника.Картинка = БиблиотекаКартинок.Обновить;
	КомандаПересчитатьСотрудника.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КомандаПересчитатьСотрудника.ИзменяетСохраняемыеДанные = Истина;
	
	// Добавляем элементы (группу кнопок и кнопку) в командную панель.
	Если ИмяКоманднойПанели = Неопределено Тогда
		ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
	КонецЕсли;
	
	КоманднаяПанель = Форма.Элементы.Найти(ИмяКоманднойПанели);
	Если КоманднаяПанель <> Неопределено Тогда
		Если КоманднаяПанель.ПодчиненныеЭлементы.Количество() = 0 Тогда
			МестоВставки = Неопределено;
		Иначе
			МестоВставки = КоманднаяПанель.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудникаГруппа";
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			ГруппаКнопок = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанель, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru='Обновление строк документа';uk='Оновлення рядків документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудника";
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаПересчитатьСотрудника = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаПересчитатьСотрудника.ИмяКоманды = ИмяТаблицы + "ПересчитатьСотрудника";
			КнопкаПересчитатьСотрудника.ТолькоВоВсехДействиях = ТолькоВоВсехДействиях;
		КонецЕсли;
		
		// Добавляем элементы в контекстное меню.
		КонтекстноеМеню = Форма.Элементы[ИмяТаблицы].КонтекстноеМеню;
		
		МестоВставки = Неопределено;
		Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() > 0 Тогда
			МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудникаГруппа";
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			ГруппаКнопок = Форма.Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КонтекстноеМеню, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru='Обновление строк документа';uk='Оновлення рядків документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудника";
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаПересчитатьСотрудника = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаПересчитатьСотрудника.ИмяКоманды = ИмяТаблицы + "ПересчитатьСотрудника";
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыВыполненияНачисленийДобавитьКомандуПересчитатьСотрудника(Форма, ОписаниеДокумента, ТолькоВоВсехДействиях)
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("НачисленияПоДоговорам");
	ТаблицыДокумента.Добавить("НачисленияПерерасчет");
	ТаблицыДокумента.Добавить("Пособия");
	ТаблицыДокумента.Добавить("Удержания");
	ТаблицыДокумента.Добавить("НДФЛ");
	ТаблицыДокумента.Добавить("Льготы");
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИмяТаблицы = ОписаниеДокумента[ТаблицаДокумента + "Имя"];
		Если ИмяТаблицы <> Неопределено Тогда
			
			ИмяКоманднойПанели = Неопределено;
			
			ОписаниеДокумента.Свойство(ТаблицаДокумента + "КоманднаяПанельИмя", ИмяКоманднойПанели);
			ДобавитьКомандуПересчитатьСотрудникаВТаблицуДокумента(Форма, ИмяТаблицы, ИмяКоманднойПанели, ТолькоВоВсехДействиях);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПараметрыВыбораНачисленийКатегорией(Форма, СтруктураНачислений) Экспорт

	Для каждого ЭлементСтруктуры Из СтруктураНачислений Цикл
		
		ЭлементФормыНачисление = Форма.Элементы.Найти(ЭлементСтруктуры.Ключ);
		Если ЭлементФормыНачисление <> Неопределено Тогда
			
			МассивКатегорийНачислений = ЭлементСтруктуры.Значение;
			
			ПараметрыВыбораНачислений = Новый Массив;
			Для каждого ПараметрВыбора Из ЭлементФормыНачисление.ПараметрыВыбора Цикл
				Если ПараметрВыбора.Имя = "Отбор.КатегорияНачисленияИлиНеоплаченногоВремени" Тогда
					Продолжить;
				КонецЕсли; 
				ПараметрыВыбораНачислений.Добавить(ПараметрВыбора);
			КонецЦикла;
			
			ПараметрВыбораНачислений = Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Новый ФиксированныйМассив(МассивКатегорийНачислений));
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбораНачислений);
			ЭлементФормыНачисление.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНачислений);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаСФормамиСписочныхДокументовВыполняющихУдержания

Процедура УдержанияСпискомУстановитьСтраницуДействия(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.Действие <> Перечисления.ДействияСУдержаниями.Начать Тогда
		Элементы.ДействиеСтраницы.ТекущаяСтраница = Элементы.ДействуетСтраницаГруппа;
	Иначе
		Элементы.ДействиеСтраницы.ТекущаяСтраница = Элементы.НеДействуетСтраница;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияСпискомУстановитьДоступностьПоляРазмер(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РежимПросмотра = Объект.Действие = Перечисления.ДействияСУдержаниями.Прекратить;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УдержанияПоказатели", "ТолькоПросмотр", РежимПросмотра);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УдержанияРазмер", "ТолькоПросмотр", РежимПросмотра);
	
КонецПроцедуры

Процедура УдержанияСпискомУстановитьРазмерПриПрекращенииУдержания(Форма, ОписаниеТаблицы) Экспорт 
	
	Объект = Форма.Объект;
	Если Объект.Действие <> Перечисления.ДействияСУдержаниями.Прекратить Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
	
	Для Каждого ДанныеФизическогоЛица Из Объект.Удержания Цикл 
		ДанныеФизическогоЛица.Размер = 0;
		Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
			ДанныеФизическогоЛица["Значение" + НомерПоказателя] = 0;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдержанияСпискомОбработкаПодбораНаСервере(Форма, ВыбранныеФизическиеЛица) Экспорт
	
	Объект = Форма.Объект;
	
	Для Каждого ФизическоеЛицо Из ВыбранныеФизическиеЛица Цикл
		
		Отбор = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		Если Объект.Удержания.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Удержания.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			
			НомерПоказателя = 1;
			Для Каждого ОписаниеПоказателя Из Форма.Показатели Цикл
				НоваяСтрока["Показатель" + НомерПоказателя] = ОписаниеПоказателя.Показатель;	
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура УдержанияСпискомРеквизитыВДанные(Форма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета) Экспорт 
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(Форма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 1);	
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ТекущийОбъект.Удержание);
	Если ВидРасчетаИнфо.Рассчитывается Тогда 
		Для Каждого ДанныеФизическогоЛица Из ТекущийОбъект.Удержания Цикл 
			ДанныеФизическогоЛица.Размер = 0;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдержанияСпискомУстановитьПараметрыВыбораФизическихЛиц(Форма) Экспорт
	
	ПараметрыДляВыбора = Новый Массив;
	Если Форма.МассивФизическихЛиц.Количество() > 0 Тогда 
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", Форма.МассивФизическихЛиц);
		ПараметрыДляВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Форма.Элементы.УдержанияФизическоеЛицо.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыДляВыбора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
