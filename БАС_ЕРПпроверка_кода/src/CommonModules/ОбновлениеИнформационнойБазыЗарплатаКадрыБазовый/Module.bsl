#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытий

#Область ОбъявлениеБиблиотеки

// Заполняет стандартные свойства библиотеки или конфигурации, требуемые для ее использования.
// Поставляемая конфигурация должна рассматриваться как потенциальная библиотека, поэтому
// ее свойства описываются не только в метаданных, но и в коде, как и для любой библиотеки.
//
// Под библиотекой понимается одна или несколько подсистем, а под конфигурацией все, что
// не принадлежит ни одной библиотеке. Библиотека у которой имя совпадает с именем
// конфигурации в метаданных, считается конечной конфигурацией.
// БСП - всегда первая, конечная конфигурация всегда последняя (например, для порядка обновления ИБ).
// 
// Параметры:
//  Описание - Структура со свойствами:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив значений типа Строка, содержащий имена других библиотек.
//                         После получения описаний всех библиотек будет проверено, что
//                         все библиотеки требуемые другими библиотеками зарегистрированы и
//                         будет построена линейная последовательность библиотек по мере
//                         их требуемости. При наличии взаимозависимости или их отсутствии
//                         порядок определяется порядком добавления основных модулей библиотек
//                         в процедуре ПриДобавленииПодсистемы общего модуля
//                         ПодсистемыКонфигурацииПереопределяемый.
//                         Порядок используется при выполнении обработчиков обновления
//                         информационной базы.
//
// Для стандартных процедур в основных модулях библиотек рекомендуется использовать
// не копию комментария, а ссылку на комментарий в модуле этом модуле.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ЗарплатаКадрыБазовая";
	Описание.Версия = "3.0.0.16";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.СоздатьВалютуУчетаЗаработнойПлаты";
	Обработчик.НачальноеЗаполнение = Истина;
	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.3";
	Обработчик.Процедура = "РегистрыСведений.РазмерыГосударственныхПособий.ЗаполнитьГосударственныеПособия";

	КадровыйУчет.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетНДФЛ.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	РасчетЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСтраховыхВзносов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОтражениеЗарплатыВБухучете.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетПособийСоциальногоСтрахования.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	// Не используется в БСП.
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура СоздатьВалютуУчетаЗаработнойПлаты() Экспорт
	
	// Создаем "Гривны".
	
	Коды = Новый Массив;
	Коды.Добавить("980");
	
	РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(Коды);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаменитьСсылкиВСсылочныхОбъектах(СоответствиеСсылок, МассивСсылок, РеквизитыМетаданных, ИзмененныеОбъекты) Экспорт
	
	НайденныеОбъекты = НайтиПоСсылкам(МассивСсылок);
	
	ОбъектыМетаданных = Новый Соответствие;
	Для Каждого Реквизит Из РеквизитыМетаданных Цикл
		МетаданныеРодителя = МетаданныеРодителя(Реквизит);
		МассивРеквизитов = ОбъектыМетаданных[МетаданныеРодителя];
		Если МассивРеквизитов = Неопределено Тогда
			МассивРеквизитов = Новый Массив;
		КонецЕсли;
		МассивРеквизитов.Добавить(Реквизит);
		ОбъектыМетаданных.Вставить(МетаданныеРодителя, МассивРеквизитов);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из НайденныеОбъекты Цикл
		МассивРеквизитов = ОбъектыМетаданных[СтрокаТаблицы.Метаданные];
		Если МассивРеквизитов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Объект = ИзмененныеОбъекты[СтрокаТаблицы.Данные];
		Если Объект = Неопределено Тогда
			Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			Если Объект = Неопределено Тогда
				// Например, если ссылка "битая".
				Продолжить;
			КонецЕсли;
			ИзмененныеОбъекты.Вставить(СтрокаТаблицы.Данные, Объект);
		КонецЕсли;
		Для Каждого Реквизит Из МассивРеквизитов Цикл
			// Это реквизит объекта
			Если СтрокаТаблицы.Метаданные.Реквизиты.Содержит(Реквизит) Тогда
				Объект[Реквизит.Имя] = СоответствиеСсылок[Объект["Удалить" + Реквизит.Имя]];
				Продолжить;
			КонецЕсли;
			// Это реквизит табличной части
			ТабличнаяЧасть = Реквизит.Родитель();
			Для Каждого СтрокаТабличнойЧасти Из Объект[ТабличнаяЧасть.Имя] Цикл
				СтрокаТабличнойЧасти[Реквизит.Имя] = СоответствиеСсылок[СтрокаТабличнойЧасти["Удалить" + Реквизит.Имя]];
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВЗановоСозданномПодчиненномРегистреСведений(МетаданныеРегистра, Поля, СоответствиеСсылок) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.Удалить#ИмяРегистра КАК Прежняя
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяРегистра", МетаданныеРегистра.Имя);
	
	НаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	ПрежнийНабор = РегистрыСведений["Удалить" + МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Очистить();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Для Каждого Поле Из Поля Цикл
				СтрокаНабора[Поле.Имя] = СоответствиеСсылок[Выборка[Поле.Имя]];
			КонецЦикла;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		// Удаляем прежний набор записей
		ПрежнийНабор.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ПрежнийНабор.ОбменДанными.Загрузка = Истина;
		ПрежнийНабор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьСсылкиВРегистре(МетаданныеРегистра, Поля, СоответствиеСсылок) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Измерения
		|ПОМЕСТИТЬ ВТИзмерения
		|ИЗ
		|	#ПолноеИмяРегистра КАК Таблица
		|ГДЕ
		|	&СтрокаУсловия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.*
		|ИЗ
		|	#ПолноеИмяРегистра КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмерения КАК Измерения
		|		ПО &СтрокаСоединения
		|
		|УПОРЯДОЧИТЬ ПО
		|	&Порядок";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПолноеИмяРегистра", МетаданныеРегистра.ПолноеИмя());
	
	Запрос = Новый Запрос;
	
	СтрокаУсловия = "";
	Для Каждого Поле Из Поля Цикл
		НовыеМетаданные = Метаданные.НайтиПоТипу(Поле.Тип.Типы()[0]);
		ПрежниеМетаданные = Метаданные.НайтиПоПолномуИмени(СтрЗаменить(НовыеМетаданные.ПолноеИмя(), НовыеМетаданные.Имя, "Удалить" + НовыеМетаданные.Имя));
		Запрос.УстановитьПараметр(Поле.Имя + "ПустаяСсылка", ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НовыеМетаданные.ПолноеИмя()).ПустаяСсылка());
		Запрос.УстановитьПараметр("Удалить" + Поле.Имя + "ПустаяСсылка", ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПрежниеМетаданные.ПолноеИмя()).ПустаяСсылка());
		Если Не ПустаяСтрока(СтрокаУсловия) Тогда
			СтрокаУсловия = СтрокаУсловия + " ИЛИ ";
		КонецЕсли;
		СтрокаУсловия = СтрокаУсловия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(Таблица.%1 = &%1ПустаяСсылка И Таблица.Удалить%1 <> &Удалить%1ПустаяСсылка)", Поле.Имя);
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаУсловия", СтрокаУсловия);
	
	МассивИзмерений = Новый Массив;
	Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) 
		Или МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		МассивИзмерений.Добавить("Регистратор");
	Иначе
		МассивИзмерений = ОбщегоНазначения.ВыгрузитьКолонку(МетаданныеРегистра.Измерения, "Имя");
		Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			МассивИзмерений.Добавить("Период");
		КонецЕсли;
	КонецЕсли;
	
	Измерения = "";
	СтрокаСоединения = "";
	Порядок = "";
	Для Каждого Измерение Из МассивИзмерений Цикл
		Если Не ПустаяСтрока(Измерения) Тогда
			Измерения = Измерения + ",";
		КонецЕсли;
		Измерения = Измерения + Измерение;
		Если Не ПустаяСтрока(СтрокаСоединения) Тогда
			СтрокаСоединения = СтрокаСоединения + " И ";
		КонецЕсли;
		СтрокаСоединения = СтрокаСоединения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"(Таблица.%1 = Измерения.%1)", Измерение);
		Если Не ПустаяСтрока(Порядок) Тогда
			Порядок = Порядок + ",";
		КонецЕсли;
		Порядок = Порядок + "Таблица." + Измерение;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Измерения", Измерения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаСоединения", СтрокаСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Порядок", Порядок);
	
	НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеРегистра.ПолноеИмя()).СоздатьНаборЗаписей();
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОтборИзмерений = Новый Структура(Измерения);
	
	Пока Выборка.Следующий() Цикл
		НаборИзмеренийСовпадает = Истина;
		Для Каждого Измерение Из МассивИзмерений Цикл 
			Если Выборка[Измерение] <> ОтборИзмерений[Измерение] Тогда
				НаборИзмеренийСовпадает = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Если Не НаборИзмеренийСовпадает Тогда
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого Измерение Из МассивИзмерений Цикл
					НаборЗаписей.Отбор[Измерение].Установить(ОтборИзмерений[Измерение]);
				КонецЦикла;
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.Записать();
			КонецЕсли;
			НаборЗаписей.Очистить();
			ЗаполнитьЗначенияСвойств(ОтборИзмерений, Выборка);
		КонецЕсли;
		
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		Для Каждого Поле Из Поля Цикл
			СтрокаНабора[Поле.Имя] = СоответствиеСсылок[Выборка["Удалить" + Поле.Имя]];
		КонецЦикла;
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Для Каждого Измерение Из МассивИзмерений Цикл
			НаборЗаписей.Отбор[Измерение].Установить(Выборка[Измерение]);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеСсылок(МетаданныеСправочника, ИмяКлюча) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрежняяТаблица.Ссылка КАК ПрежняяСсылка,
		|	НоваяТаблица.Ссылка
		|ИЗ
		|	Справочник.#ИмяТаблицы КАК НоваяТаблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Удалить#ИмяТаблицы КАК ПрежняяТаблица
		|		ПО (ПрежняяТаблица.#ИмяКлюча = НоваяТаблица.#ИмяКлюча)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяКлюча", ИмяКлюча);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", МетаданныеСправочника.Имя);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеСсылок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеСсылок.Вставить(Выборка.ПрежняяСсылка, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответствиеСсылок;
	
КонецФункции

Функция МетаданныеРодителя(ОбъектМетаданных)
	
	МетаданныеРодителя = ОбъектМетаданных.Родитель();
	Если ТипЗнч(МетаданныеРодителя) = Тип("ОбъектМетаданныхКонфигурация") Тогда
		Возврат ОбъектМетаданных;
	КонецЕсли;
	
	Возврат МетаданныеРодителя(МетаданныеРодителя)
	
КонецФункции

#КонецОбласти