
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователейКлиентСервер.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает версию подсистемы ИнтернетПоддержкаПользователей.
// Возвращаемое значение:
//	Строка - версия текущей библиотеки.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "2.1.7.6";
	
КонецФункции

// Определяет, доступно ли текущему пользователю выполнение интерактивного
// подключения Интернет-поддержки в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - интерактивное подключение доступно,
//		Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт
	
	#Если Клиент Тогда
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыРаботыКлиента.ДоступноПодключениеИнтернетПоддержки;
	#Иначе
	Возврат ИнтернетПоддержкаПользователей.ДоступноПодключениеИнтернетПоддержки();
	#КонецЕсли
	
КонецФункции

// Возвращает настройки соединения с серверами Интернет-поддержки.
//
// Возвращаемое значение:
//	Структура - настройки соединения. Поля структуры:
//		* УстанавливатьПодключениеНаСервере - Булево - Истина, если подключение
//			устанавливается на сервере платформы;
//		* ТаймаутПодключения - Число - таймаут подключения к серверам в секундах;
//		* ДоменРасположенияСерверовИПП - Число - если 0, устанавливать подключение
//			к серверам ИПП в доменной зоне 1c.eu.
//
Функция НастройкиСоединенияССерверами() Экспорт
	
	#Если Клиент Тогда
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Результат = Новый Структура("УстанавливатьПодключениеНаСервере, ТаймаутПодключения, ДоменРасположенияСерверовИПП");
	ЗаполнитьЗначенияСвойств(Результат, ПараметрыРаботыКлиента);
	Возврат Результат;
	#Иначе
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	#КонецЕсли
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Устаревший программный интерфейс

// Устарела. Будет удалена в следующей версии библиотеки.
// Возвращает структуру-описатель ресурса Интернет-поддержки пользователей.
// Используется для заполнения разрешений доступа к внешним ресурсам.
//
// Возвращаемое значение:
// Структура - описание ресурса Интернет-поддержки пользователей:
//	* Протокол - Строка - протокол соединения (http или https);
//	* Адрес    - Строка - адрес сервера;
//	* Порт     - Число  - порт на сервере Интернет-поддержки;
//	* Описание - Строка - строковое описание ресурса;
//
Функция ОписаниеРесурсаИнтернетПоддержки() Экспорт
	
	Возврат Новый Структура("Протокол, Адрес, Порт, Описание",
		"HTTPS",
		"webits.1c.ru",
		443,
		НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"));
	
КонецФункции

// Устарела. Будет удалена в следующей версии библиотеки.
//
// Возвращает версию поддерживаемого библиотекой API
// взаимодействия с серверной частью бизнес-процессов.
//
// Возвращаемое значение:
//	Строка - версия поддерживаемого библиотекой API
//
Функция ВерсияAPIВзаимодействия() Экспорт
	
	Возврат "1.0.1.1";
	
КонецФункции

// Устарела. Будет удалена в следующей версии библиотеки.
// Возвращает URL веб-сервиса Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - URL веб-сервиса ИПП.
//
Функция ИмяWSОпределения() Экспорт
	
	Возврат "https://webits.1c.ru/services/WebItsSimpleService?wsdl";
	
КонецФункции

// Устарела. Будет удалена в следующей версии библиотеки.
// Определение имени URI веб-сервиса ИПП.
//
// Возвращаемое значение:
//	Строка - URI сервиса.
//
Функция ИмяURIСервиса() Экспорт

	Возврат "https://ws.webits.onec.ru";

КонецФункции

// Устарела. Будет удалена в следующей версии библиотеки.
// Возвращает структуру с полями-параметрами, передаваемыми в процедуры
// ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииДанныхПользователяИнтернетПоддержки()
// и ИнтернетПоддержкаПользователейПереопределяемый.ПриАвторизацииПользователяВИнтернетПоддержке().
//
// Возвращаемое значение:
// Структура - с полями-параметрами:
//	* Логин  - Строка - логин пользователя;
//	* Пароль - Строка - пароль пользователя;
//
Функция НовыйДанныеПользователяИнтернетПоддержки() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Логин" , "");
	Результат.Вставить("Пароль", "");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интеграция подсистем библиотеки. Общего назначения.

// Возвращает значение свойства Метаданные.Имя
//
Функция ИмяКонфигурации() Экспорт
	
	Возврат ИмяКонфигурацииВМетаданных();
	
КонецФункции

// Возвращает значение свойства Метаданные.Версия
//
Функция ВерсияКонфигурации() Экспорт
	
	Возврат ВерсияКонфигурацииВМетаданных();
	
КонецФункции

// Подставляет в текст домен серверов ИПП в соответствии с текущими
// настройками подключения к серверам.
//
Функция ПодставитьДомен(Текст, Знач ДоменнаяЗона = Неопределено) Экспорт
	
	Если ДоменнаяЗона = Неопределено Тогда
		ДоменнаяЗона = НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП;
	КонецЕсли;
	
	Если ДоменнаяЗона = 1 Тогда
		Результат = СтрЗаменить(Текст, "webits-info@1c.ru", "webits-info@1c.ua");
		Возврат СтрЗаменить(Результат, ".1c.ru", ".1c.eu");
	Иначе
		Возврат Текст;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое представление размера файла.
//
Функция ПредставлениеРазмераФайла(Знач Размер) Экспорт
	
	Если Размер < 1024 Тогда
		Возврат Формат(Размер, "ЧДЦ=1") + " " + НСтр("ru='байт';uk='байт'");
	ИначеЕсли Размер < 1024 * 1024 Тогда	
		Возврат Формат(Размер / 1024, "ЧДЦ=1") + " " + НСтр("ru='КБ';uk='КБ'");
	ИначеЕсли Размер < 1024 * 1024 * 1024 Тогда	
		Возврат Формат(Размер / (1024 * 1024), "ЧДЦ=1") + " " + НСтр("ru='МБ';uk='МБ'");
	Иначе
		Возврат Формат(Размер / (1024 * 1024 * 1024), "ЧДЦ=1") + " " + НСтр("ru='ГБ';uk='ГБ'");
	КонецЕсли;
	
КонецФункции

// Преобразует переданную строку:
// в форматированную строку, если строка начинается с "<body>" и заканчивается "</body>";
// В противном случае строка остается без изменений.
//
Функция ФорматированныйЗаголовок(ТекстСообщения) Экспорт
	
	Если Лев(ТекстСообщения, 6) <> "<body>" Тогда
		Возврат ТекстСообщения;
	Иначе
		ФДок = Новый ФорматированныйДокумент;
		ФДок.УстановитьHTML("<html>" + ТекстСообщения + "</html>", Новый Структура);
		Возврат ФДок.ПолучитьФорматированнуюСтроку();
	КонецЕсли;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Загружает содержимое из Интернет по протоколу HTTP(S)
// с использованием методов GET, POST или PUT.
//
Функция ЗагрузитьСодержимоеИзИнтернет(
	Знач URL,
	Знач Логин = Неопределено,
	Знач Пароль = Неопределено,
	ДопПараметры = Неопределено) Экспорт

	Результат = Новый Структура(
		"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, Содержимое, КодСостояния",
		"",
		"",
		Неопределено,
		0);

	// Формат ответа: 0 - имя файла ответа, 1 - как строка, 2 - как двоичные данные
	// Метод: "GET" или "POST"
	// ДанныеДляОбработки: данные, передаваемые методом POST
	// ФорматДанныхДляОбработки: 0 - имя файла, 1 как строка, 2 - как двоичные данные
	// Заголовки - заголовки запроса
	ПараметрыПолучения = Новый Структура(
		"ФорматОтвета, Метод, ДанныеДляОбработки, ФорматДанныхДляОбработки, Заголовки, ИмяФайлаОтвета, Таймаут",
		0,
		"GET",
		Неопределено,
		0,
		Неопределено,
		Неопределено,
		-1);
	Если ДопПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПолучения, ДопПараметры);
	КонецЕсли;

	Если ПараметрыПолучения.Таймаут = -1 Тогда
		ПараметрыПолучения.Таймаут = ТаймаутПодключения();
	КонецЕсли;

	КоличествоПеренаправлений  = 0;
	МаксКолвоПеренаправлений   = 7;
	Перенаправления            = Новый Массив;
	ВыполненныеПеренаправления = Новый Соответствие;
	ПроксиПоСхемам             = Новый Соответствие;
	ЗащищенноеСоединениеКэш    = Неопределено;

	URLДляПолучения = URL;
	HTTPЗапрос = Новый HTTPЗапрос;
	Если ПараметрыПолучения.Заголовки <> Неопределено Тогда
		HTTPЗапрос.Заголовки = ПараметрыПолучения.Заголовки;
	КонецЕсли;
	ТелоУстановлено = Ложь;
	Ответ = Неопределено;
	Пока КоличествоПеренаправлений < МаксКолвоПеренаправлений Цикл

		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДляПолучения);
		Если СтруктураURI.Схема <> "https" Тогда
			ЗащищенноеСоединение = Неопределено;
		Иначе
			Если ЗащищенноеСоединениеКэш = Неопределено Тогда
				ЗащищенноеСоединениеКэш = НовыйЗащищенноеСоединение();
			КонецЕсли;
			ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтруктураURI.Логин) Тогда
			ЛогинДляПолучения  = СтруктураURI.Логин;
			ПарольДляПолучения = СтруктураURI.Пароль;
		Иначе
			ЛогинДляПолучения  = Логин;
			ПарольДляПолучения = Пароль;
		КонецЕсли;

		Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
			Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		Иначе
			Порт = Число(СтруктураURI.Порт);
		КонецЕсли;

		Прокси = ПроксиПоСхемам.Получить(СтруктураURI.Схема);
		Если Прокси = Неопределено Тогда
			Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(СтруктураURI.Схема);
			ПроксиПоСхемам.Вставить(СтруктураURI.Схема, Прокси);
		КонецЕсли;

		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			Порт,
			ЛогинДляПолучения,
			ПарольДляПолучения,
			Прокси,
			ПараметрыПолучения.Таймаут,
			ЗащищенноеСоединение);
			
		Попытка
			
			HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
			
			Если ПараметрыПолучения.Метод = "GET" Тогда
				Ответ = Соединение.Получить(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
			Иначе
				
				Если НЕ ТелоУстановлено Тогда
					
					Если ПараметрыПолучения.ДанныеДляОбработки <> Неопределено Тогда
						
						Если ПараметрыПолучения.ФорматДанныхДляОбработки = 0 Тогда
							
							HTTPЗапрос.УстановитьИмяФайлаТела(ПараметрыПолучения.ДанныеДляОбработки);
							
						ИначеЕсли ПараметрыПолучения.ФорматДанныхДляОбработки = 1 Тогда
							
							HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПолучения.ДанныеДляОбработки);
							
						Иначе
							
							HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыПолучения.ДанныеДляОбработки);
							
						КонецЕсли;
						
					КонецЕсли;
					
					ТелоУстановлено = Истина;
					
				КонецЕсли;
				
				Если ПараметрыПолучения.Метод = "PUT" Тогда
					Ответ = Соединение.Записать(HTTPЗапрос);
				Иначе
					// POST
					Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось получить файл (%1). Ошибка при выполнении запроса. %2';uk='Не вдалося отримати файл (%1). Помилка при виконанні запиту. %2'"),
					URL,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				Перенаправления);
			Возврат Результат;
		КонецПопытки;
		
		Результат.КодСостояния = Ответ.КодСостояния;
		
		Если Ответ.КодСостояния = 301 // 301 Moved Permanently
			ИЛИ Ответ.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			ИЛИ Ответ.КодСостояния = 303 // 303 See Other by GET
			ИЛИ Ответ.КодСостояния = 307 Тогда // 307 Temporary Redirect

			КоличествоПеренаправлений = КоличествоПеренаправлений + 1;

			Если КоличествоПеренаправлений > МаксКолвоПеренаправлений Тогда
				УстановитьОписаниеОшибки(
					Результат,
					"ServerError",
					НСтр("ru='Превышено количество перенаправлений.';uk='Перевищено кількість перенаправлень.'"),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка сервера при получении файла (%1). Превышено количество перенаправлений (%2).';uk='Помилка сервера при отриманні файлу (%1). Перевищено кількість перенаправлень (%2).'"),
						URL,
						МаксКолвоПеренаправлений),
					Перенаправления);
				Возврат Результат;
			Иначе
				Location = Ответ.Заголовки.Получить("Location");
				Если Location = Неопределено Тогда
					УстановитьОписаниеОшибки(
						Результат,
						"ServerError",
						НСтр("ru='Некорректное перенаправление.';uk='Некоректне перенаправлення.'"),
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".';uk='Помилка сервера (%1) при отриманні файлу (%2). Некоректне пересилання, відсутній HTTP-заголовок відповіді ""Location"".'"),
							Ответ.КодСостояния,
							URL),
						Перенаправления);
					Возврат Результат;
				Иначе
					Location = СокрЛП(Location);
					Если ПустаяСтрока(Location) Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru='Некорректное перенаправление.';uk='Некоректне перенаправлення.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".';uk='Помилка сервера (%1) при отриманні файлу (%2). Некоректне перенаправлення, порожній HTTP-заголовок відповіді ""Location"".'"),
								Ответ.КодСостояния,
								URL),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					Если ВыполненныеПеренаправления.Получить(Location) <> Неопределено Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru='Циклическое перенаправление.';uk='Циклічне перенаправлення.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Ошибка сервера (%1) при получении файла (%2). Циклическое перенаправление (%3).';uk='Помилка сервера (%1) при отриманні файлу (%2). Циклічне перенаправлення (%3).'"),
								Ответ.КодСостояния,
								URL,
								Location),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					ВыполненныеПеренаправления.Вставить(Location, Истина);
					URLДляПолучения = Location;

					Перенаправления.Добавить(Строка(Ответ.КодСостояния) + ": " + Location);

				КонецЕсли;
			КонецЕсли;

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;
	
	Если ПараметрыПолучения.ФорматОтвета = 0 Тогда
		Результат.Содержимое = Ответ.ПолучитьИмяФайлаТела();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 1 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакСтроку();
	Иначе
		Результат.Содержимое = Ответ.ПолучитьТелоКакДвоичныеДанные();
	КонецЕсли;
	
	// Обработка ответа
	Если Ответ.КодСостояния < 200 Или Ответ.КодСостояния >= 300 Тогда
		
		// Анализ ошибки
		Если Ответ.КодСостояния = 407 Тогда
			
			// Ошибка клиентской части
			
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru='Ошибка аутентификации на прокси-сервере.';uk='Помилка автентифікації проксі-сервера.'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
                        |Тело ответа: %3'
                        |;uk='Помилка клієнта (%1) при виконанні запиту до ресурсу (%2).
                        |Тіло відповіді: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(Ответ.ПолучитьТелоКакСтроку()), 5120)),
				Перенаправления);
			
		ИначеЕсли Ответ.КодСостояния = 404 Тогда

			// Ошибка клиентской части

			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru='Запрашиваемый ресурс не найден (404).';uk='Запитаний ресурс не знайдено (404).'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка (%1) запроса к ресурсу (%2).
                        |Тело ответа: %3'
                        |;uk='Помилка (%1) запит до ресурсу (%2).
                        |Тіло відповіді: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(Ответ.ПолучитьТелоКакСтроку()), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния < 200
			ИЛИ Ответ.КодСостояния >= 300
			И Ответ.КодСостояния < 400 Тогда

			// Формат ответа сервера не поддерживается.

			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Некорректный ответ (%1).';uk='Некоректна відповідь (%1).'"),
					Ответ.КодСостояния),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка сервера при получении файла (%1). Некорректный (неподдерживаемый) ответ (%2).
                        |Тело ответа: %3'
                        |;uk='Помилка сервера при отриманні файлу (%1). Некоректний (тип) відповідь (%2).
                        |Тіло відповіді: %3'"),
					URL,
					Ответ.КодСостояния,
					Лев(СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(Ответ.ПолучитьТелоКакСтроку()), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда

			// Ошибка клиентской части
			УстановитьОписаниеОшибки(
				Результат,
				"ClientError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при выполнении запроса к ресурсу (%1).';uk='Помилка при виконанні запиту до ресурсу (%1).'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
                        |Тело ответа: %3'
                        |;uk='Помилка клієнта (%1) при виконанні запиту до ресурсу (%2).
                        |Тіло відповіді: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(Ответ.ПолучитьТелоКакСтроку()), 5120)),
				Перенаправления);

		Иначе

			// Ошибка сервера - 5хх или передан неподдерживаемый ответ 3хх

			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка сервиса(%1).';uk='Помилка сервісу(%1).'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка сервера (%1) при обработке запроса к ресурсу (%2).
                        |Тело ответа: %3'
                        |;uk='Помилка сервера (%1) при обробці запиту до ресурсу (%2).
                        |Тіло відповіді: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(Ответ.ПолучитьТелоКакСтроку()), 5120)),
				Перенаправления);

		КонецЕсли;

		ДобавитьСписокПеренаправленийКИнформацииОбОшибке(
			Результат.ИнформацияОбОшибке,
			Перенаправления);

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Интеграция подсистем библиотеки. Обработка бизнес-процессов.

// Возвращает значение параметра контекста.
//
Функция ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра) Экспорт

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;
	ОсновныеПараметры   = КСКонтекст.ОсновныеПараметры;

	ЗначениеПараметра = Неопределено;

	Если ИмяПараметра = "libraryVersion" Тогда
		ЗначениеПараметра = ВерсияБиблиотеки();

	ИначеЕсли ИмяПараметра = "APIVersion" Тогда
		ЗначениеПараметра = ВерсияAPIВзаимодействия();

	ИначеЕсли ИмяПараметра = "versionPlatform" Тогда
		СистИнфо = Новый СистемнаяИнформация;
		ЗначениеПараметра = СистИнфо.ВерсияПриложения;

	ИначеЕсли ИмяПараметра = "nameConfiguration" Тогда
		ЗначениеПараметра = ИмяКонфигурации();

	ИначеЕсли ИмяПараметра = "versionConfiguration" Тогда
		ЗначениеПараметра = ВерсияКонфигурации();

	ИначеЕсли ИмяПараметра = "language" Тогда
		ЗначениеПараметра = ТекКодЛокализации();

	ИначеЕсли ИмяПараметра = "enterPoint" Тогда
		ЗначениеПараметра = СокрЛП(ОсновныеПараметры.МестоЗапуска);

	ИначеЕсли ИмяПараметра = "versionUpdateConfiguration" Тогда

		ЗначениеПараметра = ВерсияОбработкиОбновления();

	Иначе

		ОписательПараметра = СессионныеПараметры.Получить(ИмяПараметра);
		Если ОписательПараметра <> Неопределено Тогда
			Возврат ОписательПараметра.Значение;
		КонецЕсли;

	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции

// Запись сессионного или стартового параметра. Стартовые параметры записываются
// также в общие стартовые параметры.
//
Процедура ЗаписатьПараметрКонтекста(
	КСКонтекст,
	ИмяПараметра,
	ЗначениеПараметра,
	ОбластьВидимости = "",
	ОбщиеСтартовыеПараметры = Неопределено) Экспорт

	ЭтоСтартовыйПараметр = (НРег(ОбластьВидимости) = "startup");
	СессионныеПараметры = КСКонтекст.СессионныеПараметры;

	Параметр = СессионныеПараметры.Получить(ИмяПараметра);

	ОбластьВидимостиЗаписываемого = ?(ЭтоСтартовыйПараметр, "startUp", "");

	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ЗначениеПараметра;
		Параметр.ОбластьВидимости = ОбластьВидимостиЗаписываемого;
	Иначе
		Параметр = НовыйПараметрИПП(ИмяПараметра, ЗначениеПараметра, ОбластьВидимостиЗаписываемого);
		СессионныеПараметры.Вставить(ИмяПараметра, Параметр);
	КонецЕсли;

	// Если параметр является стартовым, то он сохраняется для
	// всех пользователей в регистре сведений.
	Если ЭтоСтартовыйПараметр И ОбщиеСтартовыеПараметры <> Неопределено Тогда
		ОбщиеСтартовыеПараметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЕсли;

КонецПроцедуры

// Удаление параметров контекста. Также удаляются общие стартовые параметры.
//
Процедура УдалитьПараметрыКонтекста(КСКонтекст, СтруктураКоманды, КонтекстОбработчика) Экспорт

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;

	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		Если СтруктураКоманды.Свойство("Параметры") Тогда
			МассивПараметров = СтруктураКоманды.Параметры;
		Иначе
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(СтруктураКоманды);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтруктураКоманды) = Тип("Массив") Тогда
		МассивПараметров = СтруктураКоманды;
	Иначе
		Возврат;
	КонецЕсли;

	УдаляемыеИзРС = Новый Соответствие;

	Для каждого ПараметрКоманды Из МассивПараметров Цикл
		
		Если ПараметрКоманды = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СессионныеПараметры.Удалить(ПараметрКоманды.Имя);
		
		// Если параметр стартовый, то он удаляется из регистра параметров ИПП
		Если ПараметрКоманды.Свойство("ОбластьВидимости") И НРег(ПараметрКоманды.ОбластьВидимости) = "startup" Тогда
			УдаляемыеИзРС.Вставить(ПараметрКоманды.Имя, Истина);
		КонецЕсли;
		
	КонецЦикла;

	Если УдаляемыеИзРС.Количество() > 0 Тогда
		ИнтернетПоддержкаПользователейВызовСервера.УдалитьОбщиеПараметрыИПП(УдаляемыеИзРС);
	КонецЕсли;

КонецПроцедуры

// Преобразование команды "Записать параметры" во внутреннее представление.
//
Функция СтруктурироватьЗаписьПараметров(КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл
		СтруктураПараметра = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости",
												СокрЛП(Параметр.name),
												СокрЛП(Параметр.bp),
												СокрЛП(Параметр.value),
												СокрЛП(Параметр.type));

		МассивПараметров.Добавить(СтруктураПараметра);
	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедура и функции общего назначения

Функция ИмяКонфигурацииВМетаданных()

	#Если Клиент Тогда
	ПараметрыИПП = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ИмяКонфигурации;
	#Иначе
	Возврат Метаданные.Имя;
	#КонецЕсли

КонецФункции

Функция ВерсияКонфигурацииВМетаданных()

	#Если Клиент Тогда
	ПараметрыИПП = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ВерсияКонфигурации;
	#Иначе
	Возврат Метаданные.Версия;
	#КонецЕсли

КонецФункции

Функция URLСтраницыПорталаПоддержки(Путь = "") Экспорт
	
	Домен = НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП;
	Возврат "https://"
		+ ХостПорталаПоддержки(Домен)
		+ Путь;
	
КонецФункции

Функция URLСтраницыСервисаLogin(Путь = "") Экспорт
	
	Домен = НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП;
	Возврат "https://"
		+ ХостСервисаLogin(Домен)
		+ Путь;
	
КонецФункции

Функция URLОперацииОтправитьДанныеСообщенияВТехПоддержку(Домен)
	
	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/request";
	
КонецФункции

Функция URLСтраницыОтправкиСообщенияВТехПоддержку(Домен, ТокенДанных)
	
	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/confirm?uuid=" + ТокенДанных;
	
КонецФункции

Функция ХостПорталаПоддержки(Домен)
	
	Возврат "portal.1c.eu";
	
КонецФункции

Функция ХостСервисаLogin(Домен)
	
	Возврат "login.1c.eu";
	
КонецФункции

Функция ХостСервисовТехническойПоддержки(Домен)
	
	Возврат "portal-support.1c.eu";
	
КонецФункции

// Возвращает текст заголовка элемента формы из строки или форматированной строки.
//
Функция ТекстФорматированногоЗаголовка(Заголовок) Экспорт
	
	Если ТипЗнч(Заголовок) <> Тип("ФорматированнаяСтрока") Тогда
		Возврат Заголовок;
	КонецЕсли;
	
	ФДок = Новый ФорматированныйДокумент;
	ФДок.УстановитьФорматированнуюСтроку(Заголовок);
	Возврат ФДок.ПолучитьТекст();
	
КонецФункции

#Если Не ВебКлиент Тогда

Функция ТекстВФайле(ИмяФайла) Экспорт
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Результат = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстВДвоичныхДанных(ДвДанные) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(ДвДанные) <> Тип("ДвоичныеДанные") Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла("txt");
	ДвДанные.Записать(ИмяВремФайла);
	Результат = ТекстВФайле(ИмяВремФайла);
	
	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Аутентификация на портале поддержки пользователей

#Если Не ВебКлиент Тогда

// Проверяет корректность пары логин-пароль.
//
Функция ПроверитьЛогинИПароль(Логин, Пароль, Знач НастройкиСоединенияССерверами) Экспорт
	
	Результат = Новый Структура("КодОшибки, СообщениеОбОшибке, Результат", "", "", Ложь);
	
	URLСервиса = URLСервисаПроверкиПаролей(НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	РезультатПолученияФайла = ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		Новый Структура("Метод, Заголовки, ФорматОтвета, Таймаут, ДанныеДляОбработки, ФорматДанныхДляОбработки",
			"POST",
			Заголовки,
			1,
			НастройкиСоединенияССерверами.ТаймаутПодключения,
			ПараметрыAuthJSON(Логин, Пароль),
			1));
	
	Если РезультатПолученияФайла.КодСостояния = 200 Тогда
		
		Результат.Результат = Истина;
		
	ИначеЕсли РезультатПолученияФайла.КодСостояния = 403 Тогда
		
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке = НСтр("ru='Неверный логин или пароль.';uk='Невірний логін або пароль.'");
		
	ИначеЕсли РезультатПолученияФайла.КодСостояния = 429 Тогда
		
		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru='Превышено количество попыток ввода логина и пароля.
            |Повторите попытку позже.'
            |;uk='Перевищено кількість спроб введення логіна і пароля.
            |Повторіть спробу пізніше.'");
		
	Иначе
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось проверить логин и пароль в сервисе %1. %2';uk='Не вдалося перевірити логін та пароль в сервісі %1. %2'"),
				URLСервиса,
				РезультатПолученияФайла.ИнформацияОбОшибке));
		
		Результат.КодОшибки         = РезультатПолученияФайла.КодОшибки;
		Результат.СообщениеОбОшибке = РезультатПолученияФайла.СообщениеОбОшибке;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыAuthJSON(Логин, Пароль)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Внутренняя функция для получения тикетов аутентификации.
//
Функция СлужебнаяТикетАутентификации(Знач Логин, Знач Пароль, Знач ИмяСервиса, НастройкиСоединения) Экспорт
	
	Результат = Новый Структура("КодОшибки, СообщениеОбОшибке, Тикет", "", "", Неопределено);
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = НастройкиСоединенияССерверами();
	КонецЕсли;
	
	ПроксиСервиса = НовыйПроксиВебСервиса(
		URLСервисаПолученияТикетов(НастройкиСоединения.ДоменРасположенияСерверовИПП),
		,
		,
		,
		НастройкиСоединения.ТаймаутПодключения);
	
	Если НЕ ПустаяСтрока(ПроксиСервиса.КодОшибки) Тогда
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Ошибка при подключении к сервису аутентификации.';uk='Помилка при підключенні до сервісу аутентификації.'")
			+ " " + ПроксиСервиса.ИнформацияОбОшибке);
		
		Результат.КодОшибки         = ПроксиСервиса.КодОшибки;
		Результат.СообщениеОбОшибке = НСтр("ru='Ошибка при подключении к сервису.';uk='Помилка при підключенні до сервісу.'")
			+ Символы.ПС
			+ ПроксиСервиса.СообщениеОбОшибке
			+ Символы.ПС
			+ НСтр("ru='Подробнее см. в журнале регистрации.';uk='Докладніше див. у журналі реєстрації.'");
		Возврат Результат;
		
	КонецЕсли;
	
	ОписаниеРезультата = СервисАутентификации_getTicket(
		ПроксиСервиса,
		Логин,
		Пароль,
		ИмяСервиса,
		НастройкиСоединения.ТаймаутПодключения);
	
	Если ПустаяСтрока(ОписаниеРезультата.КодОшибки) Тогда
		Результат.Тикет = ОписаниеРезультата.ВозвращенноеЗначение;
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, ОписаниеРезультата, "КодОшибки, СообщениеОбОшибке");
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Ошибка при получении тикета аутентификации.';uk='Помилка при отриманні тікета аутентифікації.'")
			+ Символы.ПС + ОписаниеРезультата.ИнформацияОбОшибке);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Прокси-функция для вызова операции getTicket().
Функция СервисАутентификации_getTicket(ПроксиСервиса, Логин, Пароль, ИмяСервиса, ТаймаутПодключения = -1)
	
	Результат = Новый Структура(
		"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, ВозвращенноеЗначение",
		"",
		"",
		"",
		Неопределено);
	
	СоответствияПространствИмен = Новый Соответствие;
	СоответствияПространствИмен.Вставить("tic", "http://ticket.common.api.commons.cas.onec.ru/");
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP(СоответствияПространствИмен);
	
	ЗаписьКонверта.ЗаписатьНачалоЭлемента("getTicket", "http://ticket.common.api.commons.cas.onec.ru/");
	
	ЗаписьКонверта.ЗаписатьНачалоЭлемента("login");
	ЗаписьКонверта.ЗаписатьТекст(Логин);
	ЗаписьКонверта.ЗаписатьКонецЭлемента();
	ЗаписьКонверта.ЗаписатьНачалоЭлемента("password");
	ЗаписьКонверта.ЗаписатьТекст(Пароль);
	ЗаписьКонверта.ЗаписатьКонецЭлемента();
	ЗаписьКонверта.ЗаписатьНачалоЭлемента("serviceNick");
	ЗаписьКонверта.ЗаписатьТекст(ИмяСервиса);
	ЗаписьКонверта.ЗаписатьКонецЭлемента();
	
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // getTicket
	
	ТекстКонверта  = ТекстВКонвертеSOAP(ЗаписьКонверта);
	ОписаниеОтвета = ОтправитьЗапросSOAP(ТекстКонверта, ПроксиСервиса, ТаймаутПодключения);
	
	ЗаполнитьЗначенияСвойств(Результат, ОписаниеОтвета, "КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
	Если Не ПустаяСтрока(Результат.КодОшибки) Тогда
		
		Если СтрНайти(Результат.ИнформацияОбОшибке, "IncorrectLoginOrPasswordApiException") > 0 Тогда
			Результат.КодОшибки         = "НеверныйЛогинИлиПароль";
			Результат.ИнформацияОбОшибке = НСтр("ru='Неверный логин или пароль (IncorrectLoginOrPasswordApiException).';uk='Невірний логін або пароль IncorrectLoginOrPasswordApiException).'");
			Результат.СообщениеОбОшибке  = НСтр("ru='Неверный логин или пароль.';uk='Невірний логін або пароль.'");
			
		ИначеЕсли СтрНайти(Результат.ИнформацияОбОшибке, "TooManyFailedAttemptsApiException") > 0 Тогда
			Результат.КодОшибки = "ПревышеноКоличествоПопыток";
			Результат.ИнформацияОбОшибке =
				НСтр("ru='Превышено количество попыток аутентификации (TooManyFailedAttemptsApiException).';uk='Перевищено кількість спроб аутентифікації (TooManyFailedAttemptsApiException).'");
			Результат.СообщениеОбОшибке  = НСтр("ru='Превышено количество попыток аутентификации.';uk='Перевищено кількість спроб аутентифікації.'");
			
		ИначеЕсли СтрНайти(Результат.ИнформацияОбОшибке, "TicketApiException") > 0 Тогда
			Результат.КодОшибки = "ОшибкаСервиса";
			Результат.ИнформацияОбОшибке = НСтр("ru='Неизвестная ошибка сервиса аутентификации (TicketApiException).';uk='Невідома помилка сервісу аутентификації (TicketApiException).'");
			Результат.СообщениеОбОшибке  = НСтр("ru='Внутренняя ошибка сервиса.';uk='Внутрішня помилка сервісу.'")
				+ Символы.ПС + Результат.СообщениеОбОшибке;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОтветаSOAP = ПрочитатьОтветВКонвертеSOAP(
			ОписаниеОтвета.ТелоОтвета,
			ПроксиСервиса,
			Неопределено);
		
		Если ОписаниеОтветаSOAP.Ошибка Тогда
			Результат.КодОшибки = "ServerError";
			Результат.СообщениеОбОшибке = НСтр("ru='Ошибка сервиса.';uk='Помилка сервісу.'")
				+ Символы.ПС + ОписаниеОтветаSOAP.СообщениеОбОшибке;
			Результат.ИнформацияОбОшибке =
				НСтр("ru='Ошибка вызова операции getTicket() сервиса аутентификации.';uk='Помилка виклику операції getTicket() сервісу аутентифікації.'") + " "
				+ ОписаниеОтветаSOAP.ИнформацияОбОшибке
				+ Символы.ПС + НСтр("ru='Тело ответа:';uk='Тіло відповіді:'") + " " + Лев(ОписаниеОтвета.ТелоОтвета, 1024 * 5);
			Возврат Результат;
		КонецЕсли;
		
		Результат.ВозвращенноеЗначение = ОписаниеОтветаSOAP.ВозвращенноеЗначение.return;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция URLСервисаПолученияТикетов(ДоменРасположенияСерверовИПП)
	
	Возврат "https://"
		+ ХостСервисаLogin(ДоменРасположенияСерверовИПП)
		+ "/api/public/ticket?wsdl";
	
КонецФункции

Функция URLСервисаПроверкиПаролей(ДоменРасположенияСерверовИПП)
	
	Возврат "https://"
		+ ХостСервисаLogin(ДоменРасположенияСерверовИПП)
		+ "/rest/public/user/auth";
	
КонецФункции

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// Отправка сообщений в службу технической поддержки

#Если Не ВебКлиент Тогда

Функция ОтправитьДанныеСообщенияВТехПоддержку(
	Тема,
	Тело,
	Знач Получатель,
	Вложения,
	НастройкиСоединенияССерверами,
	ДопПараметры) Экспорт
	
	Результат = Новый Структура(
		"КодОшибки, СообщениеОбОшибке, ТокенДанных, URLСтраницыОбращения, URLСтраницы, Предупреждение",
		"",
		"",
		"",
		"",
		"",
		"");
	
	ДопПараметрыОтправкиСообщения = ИнтернетПоддержкаПользователейВызовСервера.ДопПараметрыОтправкиСообщения(
		ДопПараметры);
	
	ТелоСообщения = СтрЗаменить(
		ДопПараметрыОтправкиСообщения.ШаблонТекстаСообщения,
		"%msgtxt",
		Тело);
	
	ПодготовитьВложенияКОтправке(Вложения, ДопПараметрыОтправкиСообщения.Вложения);
	
	ДанныеJSON = ПараметрыSaveTechSupportRequestJSON(
		Тема,
		ТелоСообщения,
		Получатель,
		ДопПараметрыОтправкиСообщения.Вложения);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	РезультатОтправки = ЗагрузитьСодержимоеИзИнтернет(
		URLОперацииОтправитьДанныеСообщенияВТехПоддержку(НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП),
		,
		,
		Новый Структура("Метод, ФорматОтвета, Заголовки, Таймаут, ДанныеДляОбработки, ФорматДанныхДляОбработки",
			"PUT",
			1,
			Заголовки,
			НастройкиСоединенияССерверами.ТаймаутПодключения,
			ДанныеJSON,
			1));
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось отправить данные сообщения в службу технической поддержки.
                |%1'
                |;uk='Не вдалося надіслати дані повідомлення в службу технічної підтримки.
                |%1'"),
			РезультатОтправки.ИнформацияОбОшибке));
		
		Результат.КодОшибки = РезультатОтправки.КодОшибки;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось отправить данные сообщения в службу технической поддержки.
                |%1'
                |;uk='Не вдалося надіслати дані повідомлення в службу технічної підтримки.
                |%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		РезультатВызова = РезультатSaveTechSupportRequestИзJSON(РезультатОтправки.Содержимое);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось отправить данные сообщения в службу технической поддержки.
                |Ошибка при обработке ответа сервиса.
                |Некорректный ответ сервиса отправки сообщений.
                |%1
                |Тело ответа: %2'
                |;uk='Не вдалося надіслати дані повідомлення в службу технічної підтримки.
                |Помилка при обробці відповіді сервісу.
                |Некоректна відповідь сервіс відправки повідомлень.
                |%1
                |Тіло відповіді: %2'"),
			ПодробноеПредставлениеОшибки(ИнфОшибка),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Результат.КодОшибки = РезультатОтправки.КодОшибки;
		Результат.СообщениеОбОшибке =
			НСтр("ru='Не удалось отправить данные сообщения в службу технической поддержки.
                |Некорректный ответ сервиса отправки сообщений.'
                |;uk='Не вдалося надіслати дані повідомлення в службу технічної підтримки.
                |Некоректний відповідь сервіс відправки повідомлень.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если РезультатВызова.success <> Истина Тогда
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось отправить данные сообщения в службу технической поддержки.
                |Ошибка при передаче сообщения в тех. поддержку.
                |Сервис сообщил об ошибке.
                |Ответ сервиса: %1'
                |;uk='Не вдалося надіслати дані повідомлення в службу технічної підтримки.
                |Помилка при передачі повідомлення в тех. підтримку.
                |Сервіс повідомив про помилку.
                |Відповідь сервісу: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Результат.КодОшибки = "ВозвращенОтказСервиса";
		Результат.СообщениеОбОшибке =
			НСтр("ru='Не удалось отправить данные сообщения в службу технической поддержки.
                |Ошибка при передаче сообщения в тех. поддержку.
                |Подробнее см. в журнале регистрации.'
                |;uk='Не вдалося надіслати дані повідомлення в службу технічної підтримки.
                |Помилка при передачі повідомлення в тех. підтримку.
                |Докладніше див. у журналі реєстрації.'");
		
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ТокенДанных = РезультатВызова.uuid;
	
	Результат.URLСтраницы = URLСтраницыОтправкиСообщенияВТехПоддержку(
		НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП,
		Результат.ТокенДанных);
	
	// Получение тикета
	Если Не ПустаяСтрока(ДопПараметрыОтправкиСообщения.Пароль) Тогда
		
		РезультатПолученияТикета = СлужебнаяТикетАутентификации(
			ДопПараметрыОтправкиСообщения.Логин,
			ДопПараметрыОтправкиСообщения.Пароль,
			Результат.URLСтраницы,
			НастройкиСоединенияССерверами);
		
		Если ЗначениеЗаполнено(РезультатПолученияТикета.Тикет) Тогда
			Результат.URLСтраницы = URLСтраницыСервисаLogin(
				"/ticket/auth?token=" + РезультатПолученияТикета.Тикет);
		Иначе
			Если РезультатПолученияТикета.КодОшибки <> "НеверныйЛогинИлиПароль" Тогда
				Результат.Предупреждение = НСтр("ru='Ошибка входа на Портал ИТС.
                    |Подробнее см. в журнале регистрации.'
                    |;uk='Помилка входу на Портал ІТС.
                    |Докладніше див. у журналі реєстрації.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПодготовитьВложенияКОтправке(ПереданныеВложения, ВложенияДляОтправки)
	
	Если ПереданныеВложения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекВложение Из ПереданныеВложения Цикл
		ВложенияДляОтправки.Добавить(ТекВложение);
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыSaveTechSupportRequestJSON(Тема, Тело, Получатель, ТекстовыеВложения)
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("theme");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тема);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("text");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тело);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("language");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(КодЯзыка(ТекущийЯзыкСистемы()));
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Получатель);
	
	// Добавление вложений
	Если ТекстовыеВложения <> Неопределено Тогда
		
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportAdditionalDtoList");
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
		
		Для Каждого ТекВложение Из ТекстовыеВложения Цикл
			ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("name");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Представление);
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Текст);
			ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		КонецЦикла;
		
		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
		
	КонецЕсли;
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

Функция РезультатSaveTechSupportRequestИзJSON(ТелоJSON)
	
	ОтветОбъект  = Новый Структура("success, errorMessage, uuid", "false", "", "", "");
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Число
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
			ОтветОбъект.Вставить(ИмяСвойства, ЧтениеОтвета.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	ЧтениеОтвета.Закрыть();
	
	Возврат ОтветОбъект;
	
КонецФункции

Функция КодЯзыка(ЯзыкИСтрана)
	
	ПозицияПодчеркивание = Найти(ЯзыкИСтрана, "_");
	Если ПозицияПодчеркивание = 0 Тогда
		Возврат ЯзыкИСтрана;
	Иначе
		Возврат Лев(ЯзыкИСтрана, ПозицияПодчеркивание - 1);
	КонецЕсли;
	
КонецФункции

#КонецЕсли


////////////////////////////////////////////////////////////////////////////////
// Обработка бизнес-процессов

#Если Не ВебКлиент Тогда

// Проверка возможности запуска Интернет-поддержки в соответствии с параметрами
// и местом (кнопкой) запуска. Возвращает управляющую структуру, описывающую
// действия, которые необходимо выполнить.
//
// Параметры:
//	МестоЗапуска - Строка - место запуска (имя кнопки) механизма ИПП;
//	ПараметрыИнтернетПоддержки - Структура - параметры работы механизма
//		Интернет-поддержки (см. функцию
//		ИнтернетПоддержкаПользователей.ПараметрыСозданияКонтекста()).
//
// Возвращаемое значение:
// Структура - если запуск в текущем режиме работы запрещен:
//	* Действие  - Строка - действие, которое необходимо выполнить;
//	* Сообщение - Строка - если выполнение действия подразумевает показ сообщения
//						   пользователю;
// Неопределено - если запуск разрешен.
//
Функция ОпределитьВозможностьЗапускаПоМестуИПараметрам(МестоЗапуска, ПараметрыИнтернетПоддержки) Экспорт

	Результат = Неопределено;

	// Проверка возможности запуска
	ПриНачалеРаботыСистемы = ПараметрыИнтернетПоддержки.ПриНачалеРаботыСистемы;

	// Стандартная обработка при начале работы с программой
	Если ПриНачалеРаботыСистемы Тогда

		Если ПараметрыИнтернетПоддержки.РаботаВМоделиСервиса
			ИЛИ НЕ ПараметрыИнтернетПоддержки.ЗапускРазрешен Тогда
			Результат = Новый Структура("Действие", "Возврат");
		КонецЕсли;

	КонецЕсли;

	Если Результат = Неопределено Тогда

		Если ПараметрыИнтернетПоддержки.РаботаВМоделиСервиса Тогда

			Результат = Новый Структура("Действие,Сообщение",
				"ПоказатьСообщение",
				НСтр("ru='Использование Интернет-поддержки пользователей недоступно при работе в модели сервиса.';uk='Використання Інтернет-підтримки користувачів недоступно при роботі в моделі сервісу.'"));

		ИначеЕсли НЕ ПараметрыИнтернетПоддержки.ЗапускРазрешен Тогда

			Результат = Новый Структура("Действие,Сообщение",
				"ПоказатьСообщение",
				НСтр("ru='Недостаточно прав для запуска Интернет-поддержки пользователей. Обратитесь к администратору.';uk='Недостатньо прав для запуску Інтернет-підтримки користувачів. Зверніться до адміністратора.'"));

		КонецЕсли;

		Если Результат = Неопределено Тогда

			// Обработка обработчиком текущего бизнес-процесса
			Обработчик = ОбработчикБизнесПроцесса(МестоЗапуска, "ОпределитьВозможностьЗапуска");
			Если Обработчик <> Неопределено Тогда

				ОписаниеДействия = Новый Структура;
				Обработчик.ОпределитьВозможностьЗапуска(
					МестоЗапуска,
					ПараметрыИнтернетПоддержки,
					ОписаниеДействия);

				Если ОписаниеДействия.Количество() > 0 Тогда
					Результат = ОписаниеДействия;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Результат <> Неопределено Тогда
		Результат.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Проверка доступности сервиса Интернет-поддержки пользователей посредством
// вызова метода isReady().
//
// Параметры:
//	ОписаниеСервисаИПП - Структура - описатель соединения с веб-сервисом ИПП:
//		см. функцию НовыйОписаниеСервисаИПП().
//
// Возвращаемое значение:
//	Булево - Истина, если сервис доступен, Ложь - если при обращении к сервису
//		возникло исключение;
//	Строка - описание причины недоступности сервиса, возвращенной сервисом;
//
Функция ЕстьДоступКВебСервису(ОписаниеСервисаИПП) Экспорт

	Попытка

		ОтветСервера = СервисИПП_IsReady(ОписаниеСервисаИПП);

		Если НРег(СокрЛП(ОтветСервера)) = "ready" Тогда
			Возврат Истина;
		Иначе
			Возврат ОтветСервера;
		КонецЕсли;

	Исключение

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;

	КонецПопытки;

КонецФункции

// Проверка, зарегистрирована ли конфигурация в сервисе Интернет-поддержки
// пользователей.
//
// Параметры:
//	ОшибкаДоступаКВебСервису - Булево - в параметре возвращается значение Истина,
//		если в процессе обращения к веб-сервису возникло исключение, ошибка
//		записывается в журнал регистрации;
//	ОписаниеСервисаИПП - Структура - описатель сервиса ИПП (см. функцию
//		НовыйОписаниеСервисаИПП());
//	ПараметрыИПП - Структура - параметры для работы с сервисом ИПП, полученные
//		ранее;
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если конфигурация не зарегистрирована или возникло исключение
//		при обращении к сервису ИПП.
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт

	Попытка

		ОписаниеСервисаИПП = НовыйОписаниеСервисаИПП();

		// В качестве параметра метода передается имя конфигурации
		ОтветСервера = СервисИПП_isConfigurationSupported(
			ИмяКонфигурации(),
			ОписаниеСервисаИПП);

		Возврат (ОтветСервера = Истина ИЛИ ОтветСервера = "true");

	Исключение
		ОшибкаОбращенияКВебСервису = Истина;
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;

КонецФункции

// Формирует описание веб-сервиса из WSDL-документа для дальнейшей работы
// с веб-сервисом ИПП.
//
// Параметры:
// МестоположениеWSDL - Строка, Неопределено - URL расположения WSDL-документа;
//		Если не задан, тогда используется ИмяWSОпределения();
//
// Возвращаемое значение:
// Структура - описание соединения с сервисом ИПП:
//	* АдресWSDL - Строка - URL WSDL-документа;
//	* ТаймаутСети - Число - таймаут сетевого соединения;
//	* ФабрикаXDTO - ФабрикаXDTO - Фабрика XDTO веб-сервиса;
//	* URIСервиса - Строка - URI веб-сервиса ИПП;
//	* СоединениеПорта - HTTPСоединение - соединение с портом сервиса
//		для вызовов методов веб-сервиса;
//	* ИнтернетПрокси - ИнтернетПрокси - соединение прокси-сервера;
//	* ПараметрыПодключенияКПорту -Структура - см. функцию
//		НовыйПараметрыПолученияДокумента();
//
Функция НовыйОписаниеСервисаИПП(МестоположениеWSDL = Неопределено) Экспорт
	
	Если МестоположениеWSDL = Неопределено Тогда
		МестоположениеWSDL = ИмяWSОпределения();
	КонецЕсли;
	
	ПроксиСервиса = НовыйПроксиВебСервиса(МестоположениеWSDL);
	
	Если НЕ ПустаяСтрока(ПроксиСервиса.КодОшибки) Тогда
		ТекстИсключения = НСтр("ru='Ошибка при подключении к сервису Интернет-поддержки.';uk='Помилка при підключенні до сервісу Інтернет-підтримки.'") + " "
			+ ПроксиСервиса.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("МестоположениеWSDL", МестоположениеWSDL);
	Результат.Вставить("ПроксиСервиса"     , ПроксиСервиса);
	Результат.Вставить("ФабрикаXDTO"       , ПроксиСервиса.ФабрикаXDTO);
	Результат.Вставить("URIСервиса"        , ПроксиСервиса.URIПространстваИмен);
	
	Результат.Вставить("ТаймаутСети", ТаймаутПодключения());
	
	Возврат Результат;
	
КонецФункции

// Изменяет таймаут обращения к сервису в текущем соединении с сервисом ИПП.
//
// Параметры:
//	ОписаниеСервисаИПП - Структура - см. функцию НовыйОписаниеСервисаИПП();
//	ЗначениеТаймаута - Число - значение устанавливаемого таймаута в секундах;
//
Процедура ИзменитьТаймаутОбращения(ОписаниеСервисаИПП, ЗначениеТаймаута) Экспорт

	ОписаниеСервисаИПП.ТаймаутСети = ЗначениеТаймаута;

КонецПроцедуры

// Прокси-функция для вызова метода isReady() веб-сервиса ИПП
//
// Параметры:
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
// Строка - значение, возвращенное методом isReady() веб-сервиса ИПП;
//
Функция СервисИПП_isReady(ОписаниеСервисаИПП) Экспорт

	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();
	ТекстКонверта  = ТекстВКонвертеSOAP(ЗаписьКонверта);

	ОписаниеОтветаSOAP = ОтправитьЗапросSOAP(
		ТекстКонверта,
		ОписаниеСервисаИПП.ПроксиСервиса,
		ОписаниеСервисаИПП.ТаймаутСети);

	Если НЕ ПустаяСтрока(ОписаниеОтветаSOAP.КодОшибки) Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isReady сервиса (%1):';uk='Помилка при виклику операції isReady сервісу (%1):'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ " " + ОписаниеОтветаSOAP.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ТелоОтвета = ОписаниеОтветаSOAP.ТелоОтвета;

	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isReadyResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isReady сервиса (%1).
            |Не удалось определить тип корневого свойства isReadyResponse.'
            |;uk='Помилка при виклику операції isReady сервісу (%1).
            |Не вдалося визначити тип кореневої властивості isReadyResponse.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ОписаниеОтветаSOAP = ПрочитатьОтветВКонвертеSOAP(
		ТелоОтвета,
		ОписаниеСервисаИПП,
		ТипОбъекта);

	Если ОписаниеОтветаSOAP.Ошибка Тогда

		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isReady сервиса (%1).';uk='Помилка при виклику операції isReady сервісу (%1).'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ Символы.ПС
			+ ОписаниеОтветаSOAP.ИнформацияОбОшибке
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru='Тело запроса:';uk='Тіло запиту:'")
			+ Символы.ПС
			+ Лев(ТекстКонверта, 1024 * 5)
			+ НСтр("ru='Тело ответа:';uk='Тіло відповіді:'")
			+ Символы.ПС
			+ Лев(ТелоОтвета, 1024 * 5);

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Значение = ОписаниеОтветаSOAP.ВозвращенноеЗначение;
	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Прокси-функция для вызова метода isConfigurationSupported() веб-сервиса ИПП.
//
// Параметры:
// ИмяКонфигурации - Строка - имя текущей конфигурации;
// ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
// Булево - значение, возвращенное методом isConfigurationSupported()
//		веб-сервиса ИПП;
//
Функция СервисИПП_isConfigurationSupported(ИмяКонфигурации, ОписаниеСервисаИПП) Экспорт

	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();

	ТипЗначенияСвойства = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isConfigurationSupported",
		ОписаниеСервисаИПП);

	Если ТипЗначенияСвойства = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isConfigurationSupported сервиса (%1).
            |Не удалось определить тип корневого свойства isConfigurationSupported.'
            |;uk='Помилка при виклику операції isConfigurationSupported сервісу (%1).
            |Не вдалося визначити тип кореневого властивості isConfigurationSupported.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ЗначениеXDTO = ОписаниеСервисаИПП.ФабрикаXDTO.Создать(ТипЗначенияСвойства, ИмяКонфигурации);

	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(
		ЗаписьКонверта,
		ЗначениеXDTO,
		"isConfigurationSupported",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);

	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);

	ОписаниеОтветаSOAP = ОтправитьЗапросSOAP(
		ТекстКонверта,
		ОписаниеСервисаИПП.ПроксиСервиса,
		ОписаниеСервисаИПП.ТаймаутСети);

	Если НЕ ПустаяСтрока(ОписаниеОтветаSOAP.КодОшибки) Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isConfigurationSupported сервиса (%1):';uk='Помилка при виклику операції isConfigurationSupported сервісу (%1):'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ " " + ОписаниеОтветаSOAP.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ТелоОтвета = ОписаниеОтветаSOAP.ТелоОтвета;

	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("isConfigurationSupportedResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isConfigurationSupported сервиса (%1).
            |Не удалось определить тип корневого свойства isConfigurationSupportedResponse.'
            |;uk='Помилка при виклику операції isConfigurationSupported сервісу (%1).
            |Не вдалося визначити тип кореневого властивості isConfigurationSupportedResponse.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ОписаниеОтветаSOAP = ПрочитатьОтветВКонвертеSOAP(
		ТелоОтвета,
		ОписаниеСервисаИПП,
		ТипОбъекта);

	Если ОписаниеОтветаSOAP.Ошибка Тогда

		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции isConfigurationSupported сервиса (%1).';uk='Помилка при виклику операції isConfigurationSupported сервісу (%1).'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ Символы.ПС
			+ ОписаниеОтветаSOAP.ИнформацияОбОшибке
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru='Тело запроса:';uk='Тіло запиту:'")
			+ Символы.ПС
			+ Лев(ТекстКонверта, 1024 * 5)
			+ НСтр("ru='Тело ответа:';uk='Тіло відповіді:'")
			+ Символы.ПС
			+ Лев(ТелоОтвета, 1024 * 5);

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Значение = ОписаниеОтветаSOAP.ВозвращенноеЗначение;

	Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
		Возврат Значение.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Прокси-функция для вызова метода process() веб-сервиса ИПП.
//
// Параметры:
//	ПараметрыЗапроса - ОбъектXDTO - параметры запроса метода process();
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ОбъектXDTO - значение, возвращенное методом process() веб-сервиса ИПП;
//
Функция СервисИПП_process(ПараметрыЗапроса, ОписаниеСервисаИПП) Экспорт
	
	ЗаписьКонверта = НовыйЗаписьКонвертаSOAP();

	ЗаписьКонверта.ЗаписатьНачалоЭлемента("m:processRequest");
	ЗаписьКонверта.ЗаписатьАтрибут("xmlns:m", ОписаниеСервисаИПП.URIСервиса);

	ОписаниеСервисаИПП.ФабрикаXDTO.ЗаписатьXML(
		ЗаписьКонверта,
		ПараметрыЗапроса,
		"parameters",
		,
		ФормаXML.Элемент,
		НазначениеТипаXML.Явное);

	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </m:processRequest>

	ТекстКонверта = ТекстВКонвертеSOAP(ЗаписьКонверта);

	ОписаниеОтветаSOAP = ОтправитьЗапросSOAP(
		ТекстКонверта,
		ОписаниеСервисаИПП.ПроксиСервиса,
		ОписаниеСервисаИПП.ТаймаутСети);

	Если НЕ ПустаяСтрока(ОписаниеОтветаSOAP.КодОшибки) Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции process сервиса (%1):';uk='Помилка при виклику операції process сервісу (%1):'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ " " + ОписаниеОтветаSOAP.ИнформацияОбОшибке;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ТелоОтвета = ОписаниеОтветаSOAP.ТелоОтвета;

	ТипОбъекта = ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП("processResponse", ОписаниеСервисаИПП);
	Если ТипОбъекта = Неопределено Тогда
		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции process сервиса (%1).
            |Не удалось определить тип корневого свойства processResponse.'
            |;uk='Помилка при виклику операції process сервісу (%1).
            |Не вдалося визначити тип кореневої властивості processResponse.'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

	ОписаниеОтветаSOAP = ПрочитатьОтветВКонвертеSOAP(
		ТелоОтвета,
		ОписаниеСервисаИПП,
		ТипОбъекта);

	Если ОписаниеОтветаSOAP.Ошибка Тогда

		ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при вызове операции process сервиса (%1).';uk='Помилка при виклику операції process сервісу (%1).'"),
			"%1",
			ОписаниеСервисаИПП.МестоположениеWSDL)
			+ Символы.ПС
			+ ОписаниеОтветаSOAP.ИнформацияОбОшибке
			+ Символы.ПС + Символы.ПС
			+ НСтр("ru='Тело запроса:';uk='Тіло запиту:'")
			+ Символы.ПС
			+ Лев(ТекстКонверта, 1024 * 5)
			+ НСтр("ru='Тело ответа:';uk='Тіло відповіді:'")
			+ Символы.ПС
			+ Лев(ТелоОтвета, 1024 * 5);

		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	Значение = ОписаниеОтветаSOAP.ВозвращенноеЗначение;

	Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
		Возврат Значение.commands;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Возвращает строковое значение атрибута узла DOM-документа.
//
// Параметры:
//	УзелDOM - УзелDOM - узел DOM-документа;
//	ИмяАтрибута - Строка - полное имя атрибута;
//	ЗначениеЕслиНеНайдено - Произвольный - значение, которое необходимо
//		возвратить, если атрибут не найден;
//
// Возвращаемое значение:
//	Строка - строковое значение атрибута узла;
//
Функция ЗначениеАтрибутаУзлаDOM(УзелDOM, ИмяАтрибута, ЗначениеЕслиНеНайдено = Неопределено)

	Атрибут = УзелDOM.Атрибуты.ПолучитьИменованныйЭлемент(ИмяАтрибута);

	Если Атрибут = Неопределено Тогда
		Возврат ЗначениеЕслиНеНайдено;
	Иначе
		Возврат Атрибут.Значение;
	КонецЕсли;

КонецФункции

// Возвращает тип значения корневого свойства пакета фабрики XDTO
// веб-сервиса ИПП.
//
// Параметры:
//	ИмяСвойства - Строка - имя корневого свойства;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	ТипЗначенияXDTO, ТипОбъектаXDTO, Неопределено - возвращаемый тип корневого
//		свойства, Неопределено - если корневое свойство отсутствует.
//
Функция ТипЗначенияКорневогоСвойстваФабрикиСервисаИПП(ИмяСвойства, ОписаниеСервисаИПП)

	Пакет            = ОписаниеСервисаИПП.ФабрикаXDTO.Пакеты.Получить(ОписаниеСервисаИПП.URIСервиса);
	КорневоеСвойство = Пакет.КорневыеСвойства.Получить(ИмяСвойства);
	Если КорневоеСвойство = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат КорневоеСвойство.Тип;
	КонецЕсли;

КонецФункции

// Формирует объект тип ЗаписьXML с записанными SOAP-заголовками;
//
// Возвращаемое значение:
//	ЗаписьXML - объект записи XML с записанными SOAP-заголовками;
//
Функция НовыйЗаписьКонвертаSOAP(СоответствияПространствИмен = Неопределено) Экспорт

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();

	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Envelope");
	
	Если СоответствияПространствИмен <> Неопределено Тогда
		Для каждого КлючЗначение Из СоответствияПространствИмен Цикл
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(
				КлючЗначение.Ключ,
				КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("xmlns:soap", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента(); // </soap:Header>
	ЗаписьXML.ЗаписатьНачалоЭлемента("soap:Body");

	Возврат ЗаписьXML;

КонецФункции

// Финализирует запись конверта SOAP и возвращает текст конверта.
//
// Параметры:
//	ЗаписьКонверта - ЗаписьXML - объект, в который выполнялась запись конверта;
//
// Возвращаемое значение:
//	Строка - текст конверта SOAP;
//
Функция ТекстВКонвертеSOAP(ЗаписьКонверта) Экспорт

	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Body>
	ЗаписьКонверта.ЗаписатьКонецЭлемента(); // </soap:Envelope>

	Возврат ЗаписьКонверта.Закрыть();

КонецФункции

// Отправку SOAP-конверта веб-сервису ИПП и получение ответного SOAP-конверта.
//
// Параметры:
//	ТекстКонверта - Строка - текст конверта-запроса;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//
// Возвращаемое значение:
//	Строка - текст SOAP-конверта-ответа;
//
Функция ОтправитьЗапросSOAP(ТекстКонверта, ПроксиСервиса, Таймаут = -1) Экспорт

	Результат = Новый Структура(
		"КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, ТелоОтвета",
		"",
		"",
		Неопределено);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	ДопПараметры = Новый Структура(
		"ФорматОтвета, Метод, ДанныеДляОбработки, ФорматДанныхДляОбработки, Заголовки, Таймаут",
		1,
		"POST",
		ТекстКонверта,
		1,
		Заголовки,
		Таймаут);

	ОтветСервера = ЗагрузитьСодержимоеИзИнтернет(
		ПроксиСервиса.АдресТочкиПодключения, , , ДопПараметры);

	ЗаполнитьЗначенияСвойств(Результат, ОтветСервера, "КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке");
	Если ПустаяСтрока(ОтветСервера.КодОшибки) Тогда
		Результат.ТелоОтвета = ОтветСервера.Содержимое;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Чтение объекта или значения в ответном SOAP-конверте в
// соответствии с фабрикой типов XDTO веб-сервиса.
//
// Параметры:
//	ТелоОтвета - Строка - тело SOAP-конверта-ответа;
//	ОписаниеСервисаИПП - Структура - описание веб-сервиса ИПП,
//		см. НовыйОписаниеСервисаИПП();
//	ТипЗначения - ТипЗначенияXDTO, ТипОбъектаXDTO - тип читаемого значения;
//
// Возвращаемое значение:
//	ЗначениеXDTO, ОбъектXDTO - прочитанный ответ сервиса.
//
Функция ПрочитатьОтветВКонвертеSOAP(ТелоОтвета, ОписаниеСервисаИПП, ТипЗначения) Экспорт
	
	Результат = Новый Структура(
		"Ошибка, СообщениеОбОшибке, ИнформацияОбОшибке, ВозвращенноеЗначение",
		Ложь,
		"",
		"",
		Неопределено);
	
	ЧтениеОтвета = Новый ЧтениеXML;
	ЧтениеОтвета.УстановитьСтроку(ТелоОтвета);
	
	URISOAP = "http://schemas.xmlsoap.org/soap/envelope/";
	
	Попытка
		
		// Переход к телу ответа
		Пока НЕ (НРег(ЧтениеОтвета.ЛокальноеИмя) = "body"
			И ЧтениеОтвета.URIПространстваИмен = URISOAP) Цикл
			Если НЕ ЧтениеОтвета.Прочитать() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Переход к описанию объекта ответа
		ЧтениеОтвета.Прочитать();
		
	Исключение
		
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru='Неверный формат ответа.';uk='Неправильний формат відповіді.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неверный формат ответа SOAP. %1';uk='Неправильний формат відповіді SOAP. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
		
	КонецПопытки;
	
	Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента
		И ВРег(ЧтениеОтвета.ЛокальноеИмя) = "FAULT"
		И ЧтениеОтвета.URIПространстваИмен = URISOAP Тогда
		
		// Это исключение веб-сервиса
		Попытка
			ДеталиИсключения = ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета);
		Исключение
			
			Результат.Ошибка = Истина;
			Результат.СообщениеОбОшибке  = НСтр("ru='Неверный формат ответа.';uk='Неправильний формат відповіді.'");
			Результат.ИнформацияОбОшибке =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неверный формат ответа SOAP. %1';uk='Неправильний формат відповіді SOAP. %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Результат;
			
		КонецПопытки;
		
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru='Ошибка SOAP-сервера.';uk='Помилка SOAP-сервера.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка SOAP-сервера. %1';uk='Помилка SOAP-сервера. %1'"),
				ОписаниеИсключенияSOAPВСтроку(ДеталиИсключения));
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		Если ТипЗначения = Неопределено Тогда
			Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета);//, ТипЗначения);
		Иначе
			Значение = ОписаниеСервисаИПП.ФабрикаXDTO.ПрочитатьXML(ЧтениеОтвета, ТипЗначения);
		КонецЕсли;
	Исключение
		
		Результат.Ошибка = Истина;
		Результат.СообщениеОбОшибке  = НСтр("ru='Неверный формат ответа.';uk='Неправильний формат відповіді.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неверный формат ответа SOAP. %1';uk='Неправильний формат відповіді SOAP. %1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
		
	КонецПопытки;
	
	Результат.ВозвращенноеЗначение = Значение;
	
	Возврат Результат;
	
КонецФункции

// Если в ответном SOAP-конверте содержится описание ошибки,
// то выполняется чтение описания ошибки.
//
// Параметры:
//	ЧтениеОтвета - ЧтениеXML - объект, используемый для чтения
//		ответного SOAP-конверта. На момент вызова спозиционирован на описании
//		исключения SOAP;
//
// Возвращаемое значение:
// Структура - описание исключения SOAP-сервера:
//	* FaultCode - Строка - код ошибки;
//	* FaultString - Строка - строковое описание ошибки;
//	* FaultActor - Строка - источник ошибки;
//
Функция ПрочитатьОписаниеИсключенияСервиса(ЧтениеОтвета)

	ОписаниеИсключения = Новый Структура("FaultCode, FaultString, FaultActor", "", "", "");

	URISOAP = "http://schemas.xmlsoap.org/soap/envelope/";

	Пока НЕ (ВРег(ЧтениеОтвета.ЛокальноеИмя) = "BODY"
		И ЧтениеОтвета.URIПространстваИмен = URISOAP
		И ЧтениеОтвета.ТипУзла = ТипУзлаXML.КонецЭлемента) Цикл

		Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяУзлаВРег = ВРег(ЧтениеОтвета.ЛокальноеИмя);

			Если ИмяУзлаВРег = "FAULTCODE"
				ИЛИ ИмяУзлаВРег = "FAULTSTRING"
				ИЛИ ИмяУзлаВРег = "FAULTACTOR" Тогда

				ЧтениеОтвета.Прочитать(); // Прочитать текст узла

				Если ЧтениеОтвета.ТипУзла = ТипУзлаXML.Текст Тогда
					ОписаниеИсключения[ИмяУзлаВРег] = ЧтениеОтвета.Значение;
				КонецЕсли;

				ЧтениеОтвета.Прочитать(); // Прочитать конец элемента

			КонецЕсли;

		КонецЕсли;

		Если НЕ ЧтениеОтвета.Прочитать() Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат ОписаниеИсключения;

КонецФункции

// Преобразование структуры-описателя исключения SOAP
// в строку для пользовательского представления;
//
// Параметры:
//	ИсключениеSOAP - Структура - см. ПрочитатьОписаниеИсключенияСервиса();
//
// Возвращаемое значение:
//	Строка - пользовательское представление исключения SOAP;
//
Функция ОписаниеИсключенияSOAPВСтроку(ИсключениеSOAP)

	Результат = "";
	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultCode) Тогда
		Результат = ИсключениеSOAP.FaultCode;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultString) Тогда
		Результат = Результат
			+ ?(ПустаяСтрока(Результат), "", " - ")
			+ ИсключениеSOAP.FaultString;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИсключениеSOAP.FaultActor) Тогда
		Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС + НСтр("ru='Источник ошибки:';uk='Джерело помилки:'") + " ")
			+ ИсключениеSOAP.FaultActor;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Преобразует ответ операции process() сервиса ИПП в последовательность команд
// во внутреннем представлении.
//
// Параметры:
// ОсновныеПараметры - Структура - основные параметры контекста взаимодействия;
// ОтветСервера - ОбъектXDTO - ответ сервиса, возвращенный операцией process();
// КонтекстОбработчика - - Структура - контекст клиент-серверного обработчика
//		команд (см. функцию НовыйКонтекстОбработчикаКоманд());
//
// Возвращаемое значение:
//	Массив - массив команд сервиса во внутреннем представлении.
//
Функция СтруктурироватьОтветСервера(
	ОсновныеПараметры,
	ОтветСервера,
	КонтекстОбработчика) Экспорт

	МассивОтвета = Новый Массив;

	Попытка

		Для каждого КомандаСервера Из ОтветСервера.command Цикл

			СтруктураКоманды = Неопределено;

			ИмяТекКоманды = НРег(СокрЛП(КомандаСервера.name));

			Если ИмяТекКоманды = "ui.open" Тогда
				СтруктураКоманды = СтруктурироватьОткрытиеФормы(
					ОсновныеПараметры,
					КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.put" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.get" Тогда
				СтруктураКоманды = СтруктурироватьЧтениеПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.delete" Тогда
				СтруктураКоманды = СтруктурироватьУдалениеПараметров(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "ui.close" Тогда
				СтруктураКоманды = СтруктурироватьЗакрытиеФормы(
				ОсновныеПараметры,
				КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "system.halt" Тогда
				СтруктураКоманды = СтруктурироватьОстановкуМеханизма(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "launchservice" Тогда
				СтруктураКоманды = СтруктурироватьОтветСервераОПереходеБизнеспроцесса(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "message.show" ИЛИ ИмяТекКоманды = "question.show" Тогда
				СтруктураКоманды = СтруктурироватьСообщениеИлиВопросПользователю(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "input.field" Тогда
				СтруктураКоманды = СтруктурироватьВводДанных(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.putorganizations" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьОрганизацийПользователя(КомандаСервера);

			ИначеЕсли ИмяТекКоманды = "store.putadressclassifier" Тогда
				СтруктураКоманды = СтруктурироватьЗаписьАдресногоКлассификатора(КомандаСервера);

			Иначе

				ДопОбработчик = ОбработчикБизнесПроцесса(
					ОсновныеПараметры.МестоЗапуска,
					"СтруктурироватьКомандуСервиса");
				Если ДопОбработчик <> Неопределено Тогда

					ДопОбработчик.СтруктурироватьКомандуСервиса(
						ИмяТекКоманды,
						КомандаСервера,
						СтруктураКоманды);

				КонецЕсли;

			КонецЕсли;

			Если СтруктураКоманды <> Неопределено Тогда

				Если НЕ СтруктураКоманды.Свойство("ИмяКоманды") Тогда
					СтруктураКоманды.Вставить("ИмяКоманды", ИмяТекКоманды);
				КонецЕсли;

				МассивОтвета.Добавить(СтруктураКоманды);

			КонецЕсли;

			Если КонтекстОбработчика.ПроизошлаОшибка Тогда
				Возврат Неопределено;
			КонецЕсли;

		КонецЦикла;

	Исключение

		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");

		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru='Неизвестная ошибка. См. подробности в журнале регистрации.';uk='Невідома помилка. См. подробиці в журналі реєстрації.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";

		Возврат Неопределено;

	КонецПопытки;

	Если МассивОтвета.Количество() > 0 Тогда

		Для каждого СтруктураКоманды Из МассивОтвета Цикл
			СтруктураКоманды.ИмяКоманды = НРег(СокрЛП(СтруктураКоманды.ИмяКоманды));
		КонецЦикла;

		Возврат МассивОтвета;

	Иначе

		Возврат Неопределено;

	КонецЕсли;

КонецФункции

// Преобразование команд "Сообщение пользователю" и "Вопрос пользователю" во
// внутреннее представление.
//
Функция СтруктурироватьСообщениеИлиВопросПользователю(КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	СписокКнопок = Новый СписокЗначений;
	ОписаниеТекКнопкиОтвета = Новый Структура;
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		ИмяТекПараметра = НРег(СокрЛП(Параметр.name));

		Если ИмяТекПараметра = "caption" Тогда
			СтруктураКоманды.Вставить("Заголовок", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "formmessage"
			ИЛИ ИмяТекПараметра = "messagetext" Тогда
			СтруктураКоманды.Вставить("ТекстСообщения", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "messagetype" ИЛИ ИмяТекПараметра = "questiontype" Тогда
			СтруктураКоманды.Вставить("Тип", НРег(СокрЛП(Строка(Параметр.value))));

		ИначеЕсли ИмяТекПараметра = "button" Тогда
			СписокКнопок.Добавить(НРег(СокрЛП(Строка(Параметр.value))));

		ИначеЕсли ИмяТекПараметра = "buttonvalue" Тогда
			ОписаниеТекКнопкиОтвета.Вставить("ЗначениеКнопки", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "buttontext" Тогда
			ОписаниеТекКнопкиОтвета.Вставить("ТекстКнопки", Строка(Параметр.value));

		КонецЕсли;

		Если ОписаниеТекКнопкиОтвета.Свойство("ЗначениеКнопки")
			И ОписаниеТекКнопкиОтвета.Свойство("ТекстКнопки") Тогда
			// Если получено описание очередной кнопки, тогда добавить ее в список кнопок
			СписокКнопок.Добавить(
				ОписаниеТекКнопкиОтвета.ЗначениеКнопки,
				ОписаниеТекКнопкиОтвета.ТекстКнопки);
			ОписаниеТекКнопкиОтвета = новый Структура;
		КонецЕсли;

	КонецЦикла;

	Если НЕ СтруктураКоманды.Свойство("Заголовок") ИЛИ ПустаяСтрока(СтруктураКоманды.Заголовок) Тогда
		СтруктураКоманды.Вставить("Заголовок", НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"));
	КонецЕсли;

	Если СписокКнопок.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("Кнопки", СписокКнопок);
	КонецЕсли;

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Ввод данных" во внутреннее представление.
//
Функция СтруктурироватьВводДанных(КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	Для каждого Параметр Из КомандаСервера.parameters.parameter Цикл

		ИмяТекПараметра = НРег(СокрЛП(Параметр.name));

		Если ИмяТекПараметра = "caption" Тогда
			ПараметрыФормы.Вставить("ТекстЗаголовка", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "explanationtext" Тогда
			ПараметрыФормы.Вставить("ПоясняющийТекст", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "datatype" Тогда
			ПараметрыФормы.Вставить("ТипДанных", Строка(Параметр.value));

		ИначеЕсли ИмяТекПараметра = "precision" Тогда
			ПараметрыФормы.Вставить("ТочностьЧисла", Строка(Параметр.value));

		КонецЕсли;

	КонецЦикла;

	СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Прочитать параметры" во внутреннее представление.
//
Функция СтруктурироватьЧтениеПараметров(КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.type)) = "startup" Тогда
			СтруктураПараметра = Новый Структура("Имя, ОбластьВидимости",
				СокрЛП(Параметр.name),
				СокрЛП(Параметр.type));
		Иначе
			СтруктураПараметра = Новый Структура("Имя, БизнесПроцесс, ОбластьВидимости",
				СокрЛП(Параметр.name),
				СокрЛП(Параметр.bp),
				СокрЛП(Параметр.type));
		КонецЕсли;

		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры", 	МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Удалить параметры" во внутреннее представление.
//
Функция СтруктурироватьУдалениеПараметров(КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл

		СтруктураПараметра = Новый Структура("Имя, ОбластьВидимости",
			СокрЛП(Параметр.name),
			СокрЛП(Параметр.type));

		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Открыть форму" во внутреннее представление.
//
Функция СтруктурироватьОткрытиеФормы(ОсновныеПараметры, КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	// Чтение общих параметров открытия формы
	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.name)) = "indexform" Тогда
			ПараметрыФормы = ПараметрыВнутреннейФормы(
				СокрЛП(Параметр.value),
				ОсновныеПараметры.МестоЗапуска);

			Если ПараметрыФормы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;

			СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "caption" Тогда
			СтруктураКоманды.Вставить("Заголовок", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "text" Тогда
			СтруктураКоманды.Вставить("Текст", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "formmessage" Тогда
			СтруктураКоманды.Вставить("Текст", СокрЛП(Параметр.value));
		КонецЕсли;

		Если НРег(СокрЛП(Параметр.name)) = "url" Тогда
			СтруктураКоманды.Вставить("УРЛ", СокрЛП(Параметр.value));
		КонецЕсли;

	КонецЦикла;

	Если СтруктураКоманды.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
		Возврат СтруктураКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Преобразование команды "Закрыть форму" во внутреннее представление.
//
Функция СтруктурироватьЗакрытиеФормы(ОсновныеПараметры, КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл

		Если НРег(СокрЛП(Параметр.name)) = "indexform" Тогда
			ПараметрыФормы = ПараметрыВнутреннейФормы(
				СокрЛП(Параметр.value),
				ОсновныеПараметры.МестоЗапуска);

			Если ПараметрыФормы.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;

			СтруктураКоманды.Вставить("ПараметрыФормы", ПараметрыФормы);
		КонецЕсли;

	КонецЦикла;

	Если СтруктураКоманды.Количество() > 0 Тогда
		СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);
		Возврат СтруктураКоманды;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Вспомогательная функция для формирования параметров внутренней формы при
// выполнении команды "Открыть внутреннюю форму" и "Закрыть внутреннюю форму".
//
Функция ПараметрыВнутреннейФормы(ИндексФормы, МестоЗапуска) Экспорт

	ПараметрыФормы = Новый Структура;

	Если ИндексФормы = "f2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ИнтернетПоддержкаПродуктаНеОказывается");

	ИначеЕсли ИндексФормы = "f4" ИЛИ ИндексФормы = "1" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"ОбщаяФорма.ПодключениеИнтернетПоддержки");

	ИначеЕсли ИндексФормы = "f6" ИЛИ ИндексФормы = "2" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ОбщаяРегНомер");

	ИначеЕсли ИндексФормы = "f7" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ОбщаяПинкод");

	ИначеЕсли ИндексФормы = "f10" ИЛИ ИндексФормы = "19" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ДополнительнаяИнформация");

	ИначеЕсли ИндексФормы = "f11" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"ОбщаяФорма.ПодключениеИнтернетПоддержки");

	ИначеЕсли ИндексФормы = "c20" Тогда
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы",
			"Обработка.БазовыеФункцииИнтернетПоддержки.Форма.ДействиеНеПоддерживается");

	ИначеЕсли ИндексФормы = "bh1" Тогда
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Интернет-поддержка пользователей';uk='Інтернет-підтримка користувачів'"));
		ПараметрыФормы.Вставить("ИмяОткрываемойФормы", "ВсплывающаяПодсказка");
		ПараметрыФормы.Вставить("УспешноеЗавершениеБизнесПроцесса", Истина);

	Иначе

		ДопОбработчик = ОбработчикБизнесПроцесса(МестоЗапуска, "ЗаполнитьПараметрыВнутреннейФормы");

		Если ДопОбработчик <> Неопределено Тогда
			ДопОбработчик.ЗаполнитьПараметрыВнутреннейФормы(ИндексФормы, ПараметрыФормы);
		КонецЕсли;

		Если НЕ ПараметрыФормы.Свойство("ИмяОткрываемойФормы") Тогда
			ПараметрыФормы.Вставить("ИмяОткрываемойФормы", Неопределено);
		КонецЕсли;

	КонецЕсли;

	Возврат ПараметрыФормы;

КонецФункции

// Преобразование команды "Остановить механизм" во внутреннее представление.
//
Функция СтруктурироватьОстановкуМеханизма(КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	МассивПараметров = Новый Массив;
	Попытка

		Если КомандаСервера.parameters <> Неопределено
			И КомандаСервера.parameters.parameter.Количество() > 0 Тогда

			Для каждого Параметр из КомандаСервера.parameters.parameter Цикл

				СтруктураПараметра = Неопределено;

				Если НРег(СокрЛП(Параметр.name)) = "errorcode" Тогда
					СтруктураПараметра = Новый Структура("errorCode", СокрЛП(Параметр.value));
					МассивПараметров.Добавить(СтруктураПараметра);
				КонецЕсли;

				Если СтруктураПараметра <> Неопределено Тогда
					МассивПараметров.Добавить(СтруктураПараметра);
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	Исключение
	КонецПопытки;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Изменить бизнес-процесс" во внутреннее представление.
//
Функция СтруктурироватьОтветСервераОПереходеБизнеспроцесса(КомандаСервера) Экспорт

	СтруктураКоманды = Новый Структура;

	Если КомандаСервера.parameters.parameter.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивПараметров = Новый Массив;

	Для каждого Параметр из КомандаСервера.parameters.parameter Цикл

		СтруктураПараметра = Новый Структура(Параметр.name, Параметр.value);
		МассивПараметров.Добавить(СтруктураПараметра);

	КонецЦикла;

	СтруктураКоманды.Вставить("Параметры" , МассивПараметров);
	СтруктураКоманды.Вставить("ИмяКоманды", КомандаСервера.name);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Записать адресный классификатор" во
// внутреннее представление.
//
Функция СтруктурироватьЗаписьАдресногоКлассификатора(КомандаСервера) Экспорт

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураКоманды = Новый Структура;

	СписокСтран  = Новый СписокЗначений;
	РегионыСтран = Новый Соответствие;

	ПараметрыКоманды = КомандаСервера.parameters.parameter;

	Если ПараметрыКоманды.Количество() > 0 Тогда
		ПараметрыСписокСтран = ПараметрыКоманды[0].parameters.parameter;
	Иначе
		ПараметрыСписокСтран = Неопределено;
	КонецЕсли;

	Если ПараметрыСписокСтран <> Неопределено Тогда

		Для каждого Параметр Из ПараметрыСписокСтран Цикл

			ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
			Если ИмяТекПараметра = "country" Тогда

				НазваниеСтраны       = Строка(Параметр.value);
				ВложенныеПараметры   = Параметр.parameters.parameter;
				ИдентификаторСтраны  = Неопределено;
				СписокРегионовСтраны = Новый СписокЗначений;

				Если ВложенныеПараметры = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл

					ИмяТекВлПараметра = НРег(СокрЛП(ВложенныйПараметр.name));
					Если ИмяТекВлПараметра = "id" Тогда

						ИдентификаторСтраны = Строка(ВложенныйПараметр.value);

					ИначеЕсли ИмяТекВлПараметра = "region" Тогда

						НазваниеРегиона            = Строка(ВложенныйПараметр.value);
						ВложенныеПараметрыРегионов = ВложенныйПараметр.parameters.parameter;
						ИдентификаторРегиона       = Неопределено;

						Если ВложенныеПараметрыРегионов = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Для каждого ВлПараметрРегиона Из ВложенныеПараметрыРегионов Цикл
							ИмяТекВлПараметраРегиона = НРег(СокрЛП(ВлПараметрРегиона.name));
							Если ИмяТекВлПараметраРегиона = "id" Тогда
								ИдентификаторРегиона = Строка(ВлПараметрРегиона.value);
								Прервать;
							КонецЕсли;
						КонецЦикла;

						Если ИдентификаторРегиона <> Неопределено Тогда
							СписокРегионовСтраны.Добавить(ИдентификаторРегиона, НазваниеРегиона);
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

				Если ИдентификаторСтраны <> Неопределено Тогда
					СписокСтран.Добавить(ИдентификаторСтраны, НазваниеСтраны);
					СписокРегионовСтраны.Вставить(0, "-1", НСтр("ru='<не выбран>';uk='<не вибрано>'"));
					РегионыСтран[ИдентификаторСтраны] = СписокРегионовСтраны;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СписокСтран.Вставить(0, "-1", НСтр("ru='<не выбрана>';uk='<не вказано>'"));

	СтруктураКоманды.Вставить("Страны"      , СписокСтран);
	СтруктураКоманды.Вставить("РегионыСтран", РегионыСтран);

	Возврат СтруктураКоманды;

КонецФункции

// Преобразование команды "Записать данные организаций" во внутреннее
// представление.
//
Функция СтруктурироватьЗаписьОрганизацийПользователя(КомандаСервера) Экспорт

	Если КомандаСервера.parameters = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураКоманды = Новый Структура;

	СписокОрганизаций = Новый СписокЗначений;
	ДанныеОрганизаций = Новый Соответствие;
	ПараметрыКоманды  = КомандаСервера.parameters.parameter;

	ПараметрыСписокОрганизаций = Неопределено;
	Если ПараметрыКоманды.Количество() > 0 Тогда
		ВложенныеПараметрыОбъект = ПараметрыКоманды[0].parameters;
		Если ВложенныеПараметрыОбъект <> Неопределено Тогда
			ПараметрыСписокОрганизаций = ВложенныеПараметрыОбъект.parameter;
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыСписокОрганизаций <> Неопределено Тогда

		Для каждого Параметр Из ПараметрыСписокОрганизаций Цикл

			ИмяТекПараметра = НРег(СокрЛП(Параметр.name));
			Если ИмяТекПараметра = "organization" Тогда

				НазваниеОрганизации      = Строка(Параметр.value);
				ИдентификаторОрганизации = Неопределено;
				ДанныеТекОрганизации     = Новый Структура;

				Если Параметр.parameters = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				ВложенныеПараметры = Параметр.parameters.parameter;

				Для каждого ВложенныйПараметр Из ВложенныеПараметры Цикл

					ИмяТекВлПараметра = НРег(СокрЛП(ВложенныйПараметр.name));
					Если ИмяТекВлПараметра = "id" Тогда
						ИдентификаторОрганизации = Строка(ВложенныйПараметр.value);
					Иначе
						ДанныеТекОрганизации.Вставить(ИмяТекВлПараметра, Строка(ВложенныйПараметр.value));
					КонецЕсли;

				КонецЦикла;

				Если ИдентификаторОрганизации <> Неопределено Тогда
					СписокОрганизаций.Добавить(ИдентификаторОрганизации, НазваниеОрганизации);
					ДанныеТекОрганизации.Вставить("НазваниеОрганизации", НазваниеОрганизации);
					ДанныеОрганизаций[ИдентификаторОрганизации] = ДанныеТекОрганизации;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СписокОрганизаций.Вставить(0, "-1", НСтр("ru='<добавить новую организацию>';uk='<додати нову організацію>'"));

	СтруктураКоманды.Вставить("СписокОрганизаций", СписокОрганизаций);
	СтруктураКоманды.Вставить("ДанныеОрганизаций", ДанныеОрганизаций);

	Возврат СтруктураКоманды;

КонецФункции

#КонецЕсли

// Выполнение команды "Записать параметры".
//
Процедура ВыполнениеКомандыЗаписьПараметров(КСКонтекст, СтруктураКоманды, КонтекстОбработчика) Экспорт
	
	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		ЗаписываемыеПараметры = СтруктураКоманды.Параметры;
	Иначе
		ЗаписываемыеПараметры = СтруктураКоманды;
	КонецЕсли;
	
	ОбщиеСтартовыеПараметры = Новый Соответствие; // Параметры, записываемые в РС
	Для каждого Параметр Из ЗаписываемыеПараметры Цикл
	
		// Сохранение параметров как сессионных
		ЗаписатьПараметрКонтекста(
			КСКонтекст,
			Параметр.Имя,
			Параметр.Значение,
			Параметр.ОбластьВидимости,
			ОбщиеСтартовыеПараметры);
	
	КонецЦикла;
	
	Если ОбщиеСтартовыеПараметры.Количество() > 0 Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОбщиеПараметрыИПП(ОбщиеСтартовыеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды "Прочитать параметры". Выполняется чтение параметров
// и отправка их сервису посредством вызова метода process().
//
Процедура ВыполнениеКомандыПрочитатьПараметры(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ВыполнениеНаСервере) Экспорт

	МассивПараметров = СтруктураКоманды.Параметры;
	ПараметрыЗапроса = Новый Массив;

	КСКонтекст        = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	Для каждого Параметр Из МассивПараметров Цикл

		Если Параметр.Имя = "session_id" Тогда
			НомерСессииУжеЕсть = Истина;
		КонецЕсли;

		ЗначениеПараметра = ЗначениеСессионногоПараметра(КСКонтекст, Параметр.Имя);

		ПередаваемыйПараметр = Новый Структура("Имя, Значение, БизнесПроцесс, ОбластьВидимости",
			Параметр.Имя,
			ЗначениеПараметра,
			ОсновныеПараметры.ИмяWSОпределения,
			Параметр.ОбластьВидимости);

		ПараметрыЗапроса.Добавить(ПередаваемыйПараметр);

	КонецЦикла;

	ДобавитьСессионныеПараметрыКЗапросу(КСКонтекст, ПараметрыЗапроса);

	Если ВыполнениеНаСервере Тогда
		ИнтернетПоддержкаПользователейВызовСервера.ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗапроса,
			КонтекстОбработчика);
	Иначе
		#Если Клиент Тогда
		// Обратиться к веб-сервису за командами, и записать их в стек команд
		ИнтернетПоддержкаПользователейКлиент.ДобавитьКомандыСервиса(
			КонтекстВзаимодействия,
			ПараметрыЗапроса,
			КонтекстОбработчика);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры

// Выполнение команды "Записать адресный классификатор".
//
Процедура ЗаписатьАдресныйКлассификатор(КСКонтекст, СтруктураКоманды) Экспорт

	КСКонтекст.КонтекстРегистрации.Вставить("Страны"      , СтруктураКоманды.Страны);
	КСКонтекст.КонтекстРегистрации.Вставить("РегионыСтран", СтруктураКоманды.РегионыСтран);

КонецПроцедуры

// Выполнение команды "Записать данные организаций".
//
Процедура ЗаписатьСписокОрганизаций(КСКонтекст, СтруктураКоманды) Экспорт

	КСКонтекст.КонтекстРегистрации = Новый Структура;
	КСКонтекст.КонтекстРегистрации.Вставить("СписокОрганизаций", СтруктураКоманды.СписокОрганизаций);
	КСКонтекст.КонтекстРегистрации.Вставить("ДанныеОрганизаций", СтруктураКоманды.ДанныеОрганизаций);

КонецПроцедуры

// Возвращает тип команды - клиентская или серверная.
//
// Параметры:
// СтруктураКоманды - Структура - сервиса ИПП во внутреннем представлении.
//
// Возвращаемое значение:
// Число - тип команды: -1 - неизвестный тип команды, 0 - выполняется на
//		сервере, 1 - выполняется на клиенте.
//
Функция ТипКоманды(СтруктураКоманды, ОбращениеССервера, МестоЗапуска) Экспорт

	Если СтруктураКоманды = Неопределено Тогда
		Возврат -1; // Неизвестный тип команды
	КонецЕсли;

	ИмяКоманды = НРег(СокрЛП(СтруктураКоманды.ИмяКоманды));

	Если ИмяКоманды = "store.put"
		ИЛИ ИмяКоманды = "store.get"
		ИЛИ ИмяКоманды = "store.delete"
		ИЛИ ИмяКоманды = "launchservice"
		ИЛИ ИмяКоманды = "store.putorganizations"
		ИЛИ ИмяКоманды = "store.putadressclassifier" Тогда

		Возврат ?(ОбращениеССервера, 0, 1);

	ИначеЕсли СтруктураКоманды.ИмяКоманды = "ui.open"
		ИЛИ ИмяКоманды = "ui.close"
		ИЛИ ИмяКоманды = "performtheaction.decode"
		ИЛИ ИмяКоманды = "message.show"
		ИЛИ ИмяКоманды = "question.show"
		ИЛИ ИмяКоманды = "input.field"
		ИЛИ ИмяКоманды = "system.halt" Тогда

		Возврат 1;

	Иначе

		Результат = -1;
		Обработчик = ОбработчикБизнесПроцесса(МестоЗапуска, "КонтекстВыполненияКоманды");
		Если Обработчик <> Неопределено Тогда
			Обработчик.КонтекстВыполненияКоманды(ИмяКоманды, ОбращениеССервера, Результат);
		КонецЕсли;

		Возврат Результат;

	КонецЕсли;

КонецФункции

// Функция создает и возвращает описатель контекста обработчика команд сервиса.
//
// Возвращаемое значение:
// Структура - структура со свойствами:
//	* Команды - Массив - стек команд сервиса во внутреннем представлении;
//	* ВыполнитьОстановку - Булево - если Истина, то требуется выполнить
//		остановку механизма ИПП;
//	* ПроизошлаОшибка - Булево - в процессе цикла обращения к веб-сервису ИПП
//		произошла ошибка;
//	* ПолноеОписаниеОшибки - Строка - полное описание ошибки для журнала
//		регистрации;
//	* ПользовательскоеОписаниеОшибки - Строка - представление ошибки
//		для пользователя;
//	* ДействияПриОшибкеДляСервера - Массив - массив элементов типа Строка -
//		имена действий, которые необходимо выполнить на сервере платформы;
//	ДействиеПриОшибкеДляКлиента - Строка - действие, которое нужно выполнить на
//		стороне клиента платформы при возникновении ошибки;
//	* ДопСвойства - Структура - структура с дополнительными данными обработчика
//		команд.
//
Функция НовыйКонтекстОбработчикаКоманд() Экспорт

	КонтекстОбработчика = Новый Структура;
	КонтекстОбработчика.Вставить("Команды"                       , Новый Массив);
	КонтекстОбработчика.Вставить("ВыполнитьОстановку"            , Ложь);
	КонтекстОбработчика.Вставить("ПроизошлаОшибка"               , Ложь);
	КонтекстОбработчика.Вставить("ПолноеОписаниеОшибки"          , "");
	КонтекстОбработчика.Вставить("ПользовательскоеОписаниеОшибки", "");
	КонтекстОбработчика.Вставить("ДействияПриОшибкеДляСервера"   , Новый Массив);
	КонтекстОбработчика.Вставить("ДействиеПриОшибкеДляКлиента"   , "");
	КонтекстОбработчика.Вставить("ПротоколОбмена"                , "");
	КонтекстОбработчика.Вставить("ДопСвойства"                   , Новый Структура);

	Возврат КонтекстОбработчика;

КонецФункции

#Если Не ВебКлиент Тогда

// Выполняет вызов операции process() сервиса ИПП. При вызове передаются
// необходимые параметры запроса.
//
// Параметры:
// ОпределениеWS - Структура - см. функцию НовыйОписаниеСервисаИПП().
// ПередаваемыеПараметрыЗапроса - Массив - массив элементов типа Структура:
//	* Значение - Строка, ДвоичныеДанные, Неопределено - значение параметра;
//	* ОбластьВидимости - Строка - область видимости параметра;
//	* БизнесПроцесс - Строка - имя бизнес-процесса;
// КонтекстОбработчика - Структура - см. функцию НовыйКонтекстОбработчикаКоманд();
// ОсновныеПараметры - Структура - основные параметры контекста взаимодействия;
//
Процедура ДобавитьКомандыСервиса(
	ОпределениеWS,
	ПередаваемыеПараметрыЗапроса,
	КонтекстОбработчика,
	ОсновныеПараметры) Экспорт

	URIСервиса = ОпределениеWS.URIСервиса;

	ТипЗапроса       = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "Parameters");
	ПараметрыЗапроса = ОпределениеWS.ФабрикаXDTO.Создать(ТипЗапроса);

	ТипОтвета        = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "ProcessResponseType");
	ОтветСервера     = ОпределениеWS.ФабрикаXDTO.Создать(ТипОтвета);

	ТипПараметр = ОпределениеWS.ФабрикаXDTO.Тип(URIСервиса, "Parameter");

	// Добавление параметров запроса
	Если ПередаваемыеПараметрыЗапроса <> Неопределено Тогда

		ИндексПараметра = 0;
		ТипДвоичныеДанные = Тип("ДвоичныеДанные");
		Для каждого ПередаваемыйПараметр Из ПередаваемыеПараметрыЗапроса Цикл

			Если ТипЗнч(ПередаваемыйПараметр.Значение) <> ТипДвоичныеДанные Тогда
				ЗначениеПараметра = СокрЛП(Строка(ПередаваемыйПараметр.Значение));
			Иначе
				Попытка
					ЗначениеПараметра = ТекстВДвДанных(ПередаваемыйПараметр.Значение);
				Исключение
					ИнфОшибка = ИнформацияОбОшибке();
					ТекстИсключения = СтрЗаменить(НСтр("ru='Ошибка при преобразовании передаваемых данных. %1';uk='Помилка при перетворенні переданих даних. %1'"),
						"%1",
						ПодробноеПредставлениеОшибки(ИнфОшибка));
					ВызватьИсключение ТекстИсключения;
				КонецПопытки;
			КонецЕсли;

			// Определение объекта параметра (Объект XDTO).
			Параметр = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);

			Параметр.name  = СокрЛП(ПередаваемыйПараметр.Имя);
			Параметр.value = ЗначениеПараметра;
			Параметр.index = ИндексПараметра;

			БизнесПроцесс = Неопределено;
			ПередаваемыйПараметр.Свойство("БизнесПроцесс", БизнесПроцесс);
			Если БизнесПроцесс <> Неопределено Тогда
				Параметр.bp = СокрЛП(БизнесПроцесс);
			КонецЕсли;

			Если ПередаваемыйПараметр.Свойство("ВложенныеПараметры")
				И ТипЗнч(ПередаваемыйПараметр.ВложенныеПараметры) = Тип("Массив") Тогда
				ДобавитьВложенныеПараметры(
					Параметр,
					ПередаваемыйПараметр.ВложенныеПараметры,
					ОпределениеWS,
					ТипПараметр,
					ТипЗапроса);
			КонецЕсли;

			ПараметрыЗапроса.parameter.Добавить(Параметр);

			ИндексПараметра = ИндексПараметра + 1;

		КонецЦикла;

	КонецЕсли;

	ОтветСервера = Неопределено;

	// Выполнение метода "process" WEB-Сервиса.
	ОтветСервера = СервисИПП_process(ПараметрыЗапроса, ОпределениеWS);

	// Если контекста нет, то ничего не структурировать, т.к. выполнение команд не последует
	// в связи с тем, что обратная связь не требуется (используется, например, для закрытия
	// бизнес-процесса, чтобы освободить ресурсы на сервере).
	Если КонтекстОбработчика = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Преобразование ответа сервера из объекта XDTO в массив структур
	МассивСтруктурыКоманд = СтруктурироватьОтветСервера(
		ОсновныеПараметры,
		ОтветСервера,
		КонтекстОбработчика);

	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		Возврат;
	КонецЕсли;

	Если МассивСтруктурыКоманд = Неопределено ИЛИ МассивСтруктурыКоманд.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Пустой ответ сервера.';uk='Порожній відповідь сервера.'");
	КонецЕсли;

	// Вставка команд в начало стека команд
	КоличествоКомандСервера = МассивСтруктурыКоманд.Количество();
	Для ОбратныйИндекс = 1 По КоличествоКомандСервера Цикл
		КонтекстОбработчика.Команды.Вставить(0, МассивСтруктурыКоманд[КоличествоКомандСервера - ОбратныйИндекс]);
	КонецЦикла;

КонецПроцедуры

#КонецЕсли

// Создает описание параметра ИПП.
// Параметры:
// Имя - Строка - имя параметра;
// Значение - Строка - значение параметра;
// ОбластьВидимости - Строка - область видимости параметра (сессионный
//		или стартовый);
//
// Возвращаемое значение:
// Структура - описание параметра с полями:
//	* Имя - Строка - имя параметра;
//	* Значение - Строка - значение параметра;
//	* ОбластьВидимости - Строка - область видимости параметра;
//
Функция НовыйПараметрИПП(Имя, Значение, ОбластьВидимости) Экспорт

	Возврат Новый Структура("Имя, Значение, ОбластьВидимости",
		Имя,
		Значение,
		ОбластьВидимости);

КонецФункции

// Добавляет вложенные параметры к параметрам запроса.
//
Процедура ДобавитьВложенныеПараметры(
	Параметр,
	ВложенныеПараметрыМассив,
	ОпределениеWS,
	ТипПараметр,
	ТипПараметры) Экспорт

	Параметр.parameters = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметры);

	Индекс = 0;
	Для каждого ПередаваемыйПараметр Из ВложенныеПараметрыМассив Цикл

		ВложенныйПараметр = ОпределениеWS.ФабрикаXDTO.Создать(ТипПараметр);

		ВложенныйПараметр.name  = СокрЛП(ПередаваемыйПараметр.Имя);
		ВложенныйПараметр.value = СокрЛП(ПередаваемыйПараметр.Значение);
		ВложенныйПараметр.index = Индекс;

		Если ПередаваемыйПараметр.Свойство("БизнесПроцесс") Тогда
			Параметр.bp = СокрЛП(ПередаваемыйПараметр.БизнесПроцесс);
		КонецЕсли;

		Параметр.parameters.parameter.Добавить(ВложенныйПараметр);

		Если ПередаваемыйПараметр.Свойство("ВложенныеПараметры")
			И ТипЗнч(ПередаваемыйПараметр.ВложенныеПараметры) = Тип("Массив") Тогда

			ДобавитьВложенныеПараметры(
				ВложенныйПараметр,
				ПередаваемыйПараметр.ВложенныеПараметры,
				ОпределениеWS,
				ТипПараметр,
				ТипПараметры);

		КонецЕсли;

		Индекс = Индекс + 1;

	КонецЦикла;

КонецПроцедуры

// Возвращает сессионные параметры, необходимые для расшифрования
// контрольного маркера ЭП.
//
Функция СессионныеПараметрыДляРасшифрования(КСКонтекст) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("markerED",
		ЗначениеСессионногоПараметра(КСКонтекст, "markerED"));
	Результат.Вставить("IDCertificateED_Dop",
		ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED_Dop"));
	Результат.Вставить("IDCertificateED",
		ЗначениеСессионногоПараметра(КСКонтекст, "IDCertificateED"));

	Возврат Результат;

КонецФункции

// Добавление сессионных параметров к параметрам запроса при вызове операции
// process() сервиса ИПП.
//
Процедура ДобавитьСессионныеПараметрыКЗапросу(
	КСКонтекст,
	ПараметрыЗапроса,
	ИменаСессионныхПараметров = Неопределено) Экспорт

	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Массив;
	КонецЕсли;

	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	ИдентификаторСеансаДобавлен = Ложь;
	Если ИменаСессионныхПараметров <> Неопределено Тогда

		Для каждого ИмяПараметра Из ИменаСессионныхПараметров Цикл

			ЗначениеПараметра = ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра);

			СессионныйПараметр = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости",
				ИмяПараметра,
				ОсновныеПараметры.ИмяWSОпределения,
				ЗначениеПараметра,
				"sessionParameter");

			ПараметрыЗапроса.Добавить(СессионныйПараметр);

			Если ИмяПараметра = "session_id" Тогда
				ИдентификаторСеансаДобавлен = Истина;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если НЕ ИдентификаторСеансаДобавлен Тогда

		ИдентификаторСеансаИПП = ЗначениеСессионногоПараметра(КСКонтекст, "session_id");

		СессионныйПараметр = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости",
			"session_id",
			ОсновныеПараметры.ИмяWSОпределения,
			ИдентификаторСеансаИПП,
			"sessionParameter");

		ПараметрыЗапроса.Добавить(СессионныйПараметр);

	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьДополнительныеСтартовыеПараметрыЗапроса(КСКонтекст, ДопПараметрыЗапроса, ПараметрыЗапроса) Экспорт

	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Массив;
	КонецЕсли;

	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	Для каждого ДопПараметр Из ДопПараметрыЗапроса Цикл

		Параметр = Новый Структура("Имя, БизнесПроцесс, Значение, ОбластьВидимости",
			ДопПараметр.Имя,
			ОсновныеПараметры.ИмяWSОпределения,
			ДопПараметр.Значение,
			"sessionParameter");

		ПараметрыЗапроса.Добавить(Параметр);

	КонецЦикла;

	ДопПараметрыЗапроса.Очистить();

КонецПроцедуры

// Возвращает текущий код локализации.
Функция ТекКодЛокализации() Экспорт
	
	#Если Клиент Тогда
	ПараметрыИПП = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.КодЛокализации;
	#Иначе
	Возврат ТекущийКодЛокализации();
	#КонецЕсли
	
КонецФункции

// Возвращает версию обработки обновления конфигурации.
Функция ВерсияОбработкиОбновления() Экспорт

	#Если Клиент Тогда
	ПараметрыИПП = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнтернетПоддержкаПользователей;
	Возврат ПараметрыИПП.ВерсияОбработкиОбновления;
	#Иначе
	Возврат ИнтернетПоддержкаПользователей.ВерсияОбработкиОбновления();
	#КонецЕсли

КонецФункции

// Определяет, обрабатывается ли бизнес-процесс по заданной точке входа
// базовой функциональностью БИП.
//
// Параметры:
//	МестоЗапуска - Строка - точка входа в бизнес-процесс.
//
// Возвращаемое значение:
//	Булево - Истина, если бизнес-процесс обрабатывает базовой функциональностью
//		БИП, Ложь - в противном случае.
//
Функция ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Экспорт

	Возврат (МестоЗапуска = "connectIPP");

КонецФункции

// Возвращает заданный обработчик бизнес-процесса в текущем контексте
// (клиент или сервер)
//
Функция ОбработчикБизнесПроцесса(МестоЗапуска, ИмяСобытия)

	#Если Клиент Тогда
	Возврат ИнтернетПоддержкаПользователейКлиент.КлиентскийОбработчикБизнесПроцесса(
		МестоЗапуска,
		ИмяСобытия);
	#Иначе
	Возврат ИнтернетПоддержкаПользователей.СерверныйОбработчикБизнесПроцесса(
		МестоЗапуска,
		ИмяСобытия);
	#КонецЕсли

КонецФункции

#Если Не ВебКлиент Тогда

// Выполняет получение содержимого двоичных данных в виде текста.
// Параметры:
// ДвоичныеДанные - ДвоичныеДанные - двоичные данные, содержимое которых
//	необходимо получить в виде текста.
//
// Возвращаемое значение:
//	Строка - текст в двоичных данных;
//
Функция ТекстВДвДанных(ДвоичныеДанные) Экспорт

	Результат = "";

	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		Возврат "";
	КонецЕсли;

	ИмяВремФайла = ПолучитьИмяВременногоФайла("txt");
	ДвоичныеДанные.Записать(ИмяВремФайла);
	ТекДок = Новый ТекстовыйДокумент;
	ТекДок.Прочитать(ИмяВремФайла, , "");
	Результат = ТекДок.ПолучитьТекст();

	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// Загрузка содержимого из Интернет, работа с веб-сервисами

#Если Не ВебКлиент Тогда

Функция ТаймаутПодключения()
	
	Возврат НастройкиСоединенияССерверами().ТаймаутПодключения;
	
КонецФункции

Функция НовыйЗащищенноеСоединение()

	Возврат Новый ЗащищенноеСоединениеOpenSSL;

КонецФункции

Процедура УстановитьОписаниеОшибки(Результат, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, Перенаправления)

	Результат.КодОшибки          = КодОшибки;
	Результат.СообщениеОбОшибке  = СообщениеОбОшибке;
	ДопСообщение = "";
	Если КодОшибки = "ConnectError" Тогда
		ДопСообщение = НСтр("ru='Ошибка подключения к серверу.';uk='Помилка підключення до сервера.'")

	ИначеЕсли КодОшибки = "ServerError" Тогда
		ДопСообщение = НСтр("ru='Ошибка сервера.';uk='Помилка сервера.'")

	ИначеЕсли КодОшибки = "ClientError" Тогда
		ДопСообщение = НСтр("ru='Ошибка запроса.';uk='Помилка запиту.'")

	ИначеЕсли КодОшибки = "InternalError" Тогда
		ДопСообщение = НСтр("ru='Внутренняя ошибка.';uk='Внутрішня помилка.'")

	ИначеЕсли КодОшибки = "LoginError" Тогда
		ДопСообщение = НСтр("ru='Ошибка аутентификации на сервере.';uk='Помилка автентифікації на сервері.'")

	КонецЕсли;

	Результат.СообщениеОбОшибке =
		?(ПустаяСтрока(ДопСообщение), "", ДопСообщение + " ")
		+ СообщениеОбОшибке;

	Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;

	Если Перенаправления.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке + Символы.ПС
			+ НСтр("ru='Перенаправления:';uk='Перенаправлення:'") + Символы.ПС
			+ СтрСоединить(Перенаправления, ", " + Символы.ПС);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСписокПеренаправленийКИнформацииОбОшибке(ИнформацияОбОшибке, Перенаправления)

	Если Перенаправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИнформацияОбОшибке = ИнформацияОбОшибке + Символы.ПС
		+ НСтр("ru='Перенаправления:';uk='Перенаправлення:'") + Символы.ПС
		+ СтрСоединить(Перенаправления, ", " + Символы.ПС);

КонецПроцедуры

Функция НовыйОпределенияСервиса(МестоположениеWSDL, Импорт = Ложь, ТаймаутПодключения = -1) Экспорт
	
	Результат = Новый Структура("КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке", "", "", "");
	
	ДопПараметрыПолученияФайла = Новый Структура("ФорматОтвета, Таймаут", 1, ТаймаутПодключения);
	
	ОписаниеWSDL = ЗагрузитьСодержимоеИзИнтернет(
		МестоположениеWSDL,
		,
		,
		ДопПараметрыПолученияФайла);
	
	Если НЕ ПустаяСтрока(ОписаниеWSDL.КодОшибки) Тогда
		
		Результат.КодОшибки          = ОписаниеWSDL.КодОшибки;
		Результат.СообщениеОбОшибке  = ОписаниеWSDL.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			НСтр("ru='Ошибка при получении WSDL-описания.';uk='Помилка при отриманні WSDL-опису.'") + " "
				+ ОписаниеWSDL.ИнформацияОбОшибке;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ТекстWSDL = ОписаниеWSDL.Содержимое;
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстWSDL);
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		
	Исключение
		
		Результат.КодОшибки          = "ServerError";
		Результат.СообщениеОбОшибке  = НСтр("ru='Некорректное WSDL-описание сервиса.';uk='Некоректне WSDL-опис сервісу.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при обработке WSDL-описания %1. %2';uk='Помилка при обробці WSDL-опису %1. %2'"),
				МестоположениеWSDL,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
		
	КонецПопытки;
	
	КорневойЭлемент = ДокументDOM.ПервыйДочерний;
	URIСервисов = ЗначениеАтрибутаУзлаDOM(КорневойЭлемент, "targetNamespace", "");
	
	Схемы         = Новый Массив;
	СервисыИПорты = Новый Массив;
	УзлыДирективыИмпорта = ДокументDOM.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "import");
	Если УзлыДирективыИмпорта.Количество() > 0 Тогда
		
		Для каждого УзелИмпорта Из УзлыДирективыИмпорта Цикл
			
			Если УзелИмпорта.URIПространстваИмен <> "http://schemas.xmlsoap.org/wsdl/" Тогда
				Продолжить;
			КонецЕсли;
			
			Location = ЗначениеАтрибутаУзлаDOM(УзлыДирективыИмпорта[0], "location", "");
			Если ПустаяСтрока(Location) Тогда
				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru='Некорректное WSDL-описание сервиса.';uk='Некоректне WSDL-опис сервісу.'");
				Результат.ИнформацияОбОшибке =
					НСтр("ru='Отсутствует location для директивы import.';uk='Відсутній location для директиви import.'");
				Возврат Результат;
			КонецЕсли;
			
			ОписаниеИмпорта = НовыйОпределенияСервиса(Location, Истина, ТаймаутПодключения);
			
			Если Не ПустаяСтрока(ОписаниеИмпорта.КодОшибки) Тогда
				Возврат ОписаниеИмпорта;
			КонецЕсли;
			
			// Обработка импорта
			Для каждого Схема Из ОписаниеИмпорта.Схемы Цикл
				Схемы.Добавить(Схема);
			КонецЦикла;
			
			Для каждого СервисИПорт Из ОписаниеИмпорта.СервисыИПорты Цикл
				СервисыИПорты.Добавить(СервисИПорт);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Создание фабрики XDTO
	
	УзлыОписанияТипов = ДокументDOM.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "types");
	Для каждого УзелТипов Из УзлыОписанияТипов Цикл
		
		УзлыСхем = УзелТипов.ПолучитьЭлементыПоИмени("http://www.w3.org/2001/XMLSchema", "schema");
		Для каждого УзелСхемы Из УзлыСхем Цикл
			
			СхемаОбщая = Новый СхемаXML;
			
			Попытка
				ПостроительСхемы = Новый ПостроительСхемXML;
				СхемаДанных = ПостроительСхемы.СоздатьСхемуXML(УзелСхемы);
				Схемы.Добавить(СхемаДанных);
			Исключение
				
				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru='Некорректное WSDL-описание сервиса.';uk='Некоректне WSDL-опис сервісу.'");
				Результат.ИнформацияОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка при обработке WSDL-описания %1. Ошибка построения схемы данных. %2';uk='Помилка при обробці WSDL-опису %1. Помилка побудови схеми даних. %2'"),
						МестоположениеWSDL,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Импорт Тогда
		
		// Возвратить набор схем
		Результат.Вставить("Схемы", Схемы);
		
	Иначе
		
		// Создать фабрику XDTO сервиса
		Если Схемы.Количество() = 0 Тогда
			
			ФабрикаСервиса = Неопределено;
			
		Иначе
			
			Попытка
				
				НаборСхем = Новый НаборСхемXML;
				Для каждого Схема Из Схемы Цикл
					НаборСхем.Добавить(Схема);
				КонецЦикла;
				ФабрикаСервиса = Новый ФабрикаXDTO(НаборСхем);
				
			Исключение
				
				Результат.КодОшибки          = "ServerError";
				Результат.СообщениеОбОшибке  = НСтр("ru='Некорректное WSDL-описание сервиса.';uk='Некоректне WSDL-опис сервісу.'");
				Результат.ИнформацияОбОшибке =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка при обработке WSDL-описания %1. Ошибка при создании фабрики XDTO сервиса. %2';uk='Помилка при обробці WSDL-опису %1. Помилка при створенні фабрики XDTO сервісу. %2'"),
						МестоположениеWSDL,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат Результат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Результат.Вставить("ФабрикаXDTO", ФабрикаСервиса);
		
	КонецЕсли;
	
	// Сервисы и порты
	УзлыСервисов = КорневойЭлемент.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "service");
	Для каждого УзелСервиса Из УзлыСервисов Цикл
		
		ИмяСервиса = ЗначениеАтрибутаУзлаDOM(УзелСервиса, "name", "");
		Если ПустаяСтрока(ИмяСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		УзлыПортов = УзелСервиса.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/", "port");
		Для каждого УзелПорта Из УзлыПортов Цикл
			
			ИмяПорта = ЗначениеАтрибутаУзлаDOM(УзелПорта, "name", "");
			Если ПустаяСтрока(ИмяПорта) Тогда
				Продолжить;
			КонецЕсли;
			
			УзлыАдреса = УзелПорта.ПолучитьЭлементыПоИмени("http://schemas.xmlsoap.org/wsdl/soap/", "address");
			Если УзлыАдреса.Количество() > 0 Тогда
				
				УзелАдреса = УзлыАдреса[0];
				АдресПорта = ЗначениеАтрибутаУзлаDOM(УзелАдреса, "location", "");
				Если НЕ ПустаяСтрока(АдресПорта) Тогда
					СервисыИПорты.Добавить(
						Новый Структура("URI, Сервис, Порт, Местоположение",
							URIСервисов, ИмяСервиса, ИмяПорта, АдресПорта));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.Вставить("СервисыИПорты", СервисыИПорты);
	
	Возврат Результат;
	
КонецФункции

Функция ОпределенияСервиса(МестоположениеWSDL, ТаймаутПодключения = -1)

	ОписательОшибки = Неопределено;
	Попытка
	#Если Клиент Тогда
		Определения = ИнтернетПоддержкаПользователейСлужебныйКлиентПовтИсп.ОпределенияСервиса(
			МестоположениеWSDL,
			ОписательОшибки,
			ТаймаутПодключения);
	#Иначе
		Определения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОпределенияСервиса(
			МестоположениеWSDL,
			ОписательОшибки,
			ТаймаутПодключения);
	#КонецЕсли
	Исключение
		Возврат ОписательОшибки;
	КонецПопытки;

	Возврат Определения;

КонецФункции

Функция НовыйПроксиВебСервиса(
	МестоположениеWSDL,
	URIПространстваИмен = Неопределено,
	ИмяСервиса = Неопределено,
	ИмяТочкиПодключения = Неопределено,
	ТаймаутПодключения = -1) Экспорт
	
	Результат = Новый Структура("КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке", "", "", "");
	
	ОпределениеСервиса = ОпределенияСервиса(МестоположениеWSDL, ТаймаутПодключения);
	
	Если НЕ ПустаяСтрока(ОпределениеСервиса.КодОшибки) Тогда
		Результат.КодОшибки         = ОпределениеСервиса.КодОшибки;
		Результат.СообщениеОбОшибке = ОпределениеСервиса.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке =
			НСтр("ru='Ошибка при создании описания веб-сервиса.';uk='Помилка при створенні опису веб-сервісу.'") + " "
			+ ОпределениеСервиса.ИнформацияОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	НайденныйПорт = Неопределено;
	Для каждого СервисИПорт Из ОпределениеСервиса.СервисыИПорты Цикл
		
		Если (URIПространстваИмен = Неопределено ИЛИ СервисИПорт.URI = URIПространстваИмен)
			И (ИмяСервиса = Неопределено ИЛИ СервисИПорт.Сервис = ИмяСервиса)
			И (ИмяТочкиПодключения = Неопределено ИЛИ СервисИПорт.Порт = ИмяТочкиПодключения) Тогда
			НайденныйПорт = СервисИПорт;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденныйПорт = Неопределено Тогда
		
		Результат.КодОшибки         = "InternalError";
		Результат.СообщениеОбОшибке = НСтр("ru='Не найдено определение сервиса.';uk='Не знайдено визначення сервісу.'");
		Результат.ИнформацияОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при создании описания веб-сервиса %1. Определение сервиса не найдено.
                    |URI пространства имен: %2;
                    |Имя сервиса: %3;
                    |Имя точки подключения: %4'
                    |;uk='Помилка при створенні опису веб-сервісу %1. Визначення сервісу не знайдено.
                    |URI простору імен: %2;
                    |Ім''я сервісу: %3;
                    |Ім''я точки підключення: %4'"),
				МестоположениеWSDL,
				URIПространстваИмен,
				ИмяСервиса,
				ИмяТочкиПодключения);
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.Вставить("ФабрикаXDTO"          , ОпределениеСервиса.ФабрикаXDTO);
	Результат.Вставить("АдресТочкиПодключения", НайденныйПорт.Местоположение);
	Результат.Вставить("URIПространстваИмен"  , НайденныйПорт.URI);
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

#КонецОбласти
