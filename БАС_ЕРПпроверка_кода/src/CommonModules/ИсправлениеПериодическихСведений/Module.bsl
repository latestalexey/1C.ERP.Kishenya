
#Область СлужебныеПроцедурыИФункции

// Подписки на события

// Получение прежней ссылки на исправленный документ.
Процедура ПолучениеПрежнегоИсправленного(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда 
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ПрежнийИсправленныйДокумент", НеОпределено);
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Документы.ИсправленныйДокумент КАК ИсправленныйДокумент
		|ИЗ
		|	#ТаблицаДокумента КАК Документы
		|ГДЕ
		|	Документы.Ссылка = &ДокументИсправление
		|	И Документы.Проведен");
		
		Запрос.УстановитьПараметр("ДокументИсправление", Источник.Ссылка);
		
		ИмяДокумента = Источник.Метаданные().Имя;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", "Документ." + ИмяДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент = Выборка.ИсправленныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Исправление при проведении
Процедура ИсправлениеПериодическихСведений(Источник, Отказ, РежимПроведения, СсылкаДокументаИсправления = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт
	
	Если СсылкаДокументаИсправления = Неопределено Тогда
		СсылкаДокументаИсправления = Источник.Ссылка;
	КонецЕсли;
	
	Если ИсправленныйДокумент = Неопределено Тогда
		ИсправленныйДокумент = Источник.ИсправленныйДокумент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент) 
		И Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент <> ИсправленныйДокумент Тогда
		// Если прежде исправляли другой документ - нужно отменить исправление по прежнему документу.
		ИсправлениеПериодическихСведений.ОтменитьИсправления(СсылкаДокументаИсправления, Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент);
	ИначеЕсли ЗначениеЗаполнено(Источник.ДополнительныеСвойства.ПрежнийИсправленныйДокумент) Тогда
		// Если прежде исправляли тот же документ - ничего не делаем, т.к. исправление уже выполнено.
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документы.Дата,
		|	Документы.Номер
		|ИЗ
		|	#ТаблицаДокумента КАК Документы
		|ГДЕ
		|	Документы.ИсправленныйДокумент = &ИсправленныйДокумент
		|	И Документы.Проведен
		|	И Документы.Ссылка <> &ДокументИсправление");
		
		Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
		Запрос.УстановитьПараметр("ДокументИсправление", СсылкаДокументаИсправления);
		
		ИмяДокумента = Источник.Метаданные().Имя;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", "Документ." + ИмяДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНомерИсправленного = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправленныйДокумент, "Дата,Номер");
			ПредставлениеИсправленного = "№" + ДатаНомерИсправленного.Номер + " (" + ДатаНомерИсправленного.Дата + ")";
			ПредставлениеИсправления = "№" + Выборка.Номер + " (" + Выборка.Дата + ")";
			ВызватьИсключение 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ %1 уже исправлен документом %2. Проведение еще одного исправления невозможно.';uk='Документ %1 вже виправлений документом %2. Проведення ще одного виправлення неможливе.'"),
					ПредставлениеИсправленного, 
					ПредставлениеИсправления);
		КонецЕсли;
		ЗафиксироватьИсправления(СсылкаДокументаИсправления, ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Отмена исправления при отмене проведения.
Процедура ОтменаИсправленияПериодическихСведений(Источник, Отказ) Экспорт
	
	ДокументИсправление = Источник.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументИсправление", ДокументИсправление);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДокумента.Номер КАК НомерИсправленного,
	|	ТаблицаДокумента.Дата КАК ДатаИсправленного,
	|	ТаблицаДокумента.ИсправленныйДокумент.Номер КАК НомерИсправления,
	|	ТаблицаДокумента.ИсправленныйДокумент.Дата КАК ДатаИсправления
	|ИЗ
	|	#ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.ИсправленныйДокумент = &ДокументИсправление
	|	И ТаблицаДокумента.Проведен";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаДокумента", "Документ." + ДокументИсправление.Метаданные().Имя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредставлениеИсправленного = "№" + Выборка.НомерИсправленного + " (" + Выборка.ДатаИсправленного + ")";
		ПредставлениеИсправления = "№" + Выборка.НомерИсправления + " (" + Выборка.ДатаИсправления + ")";
		ВызватьИсключение 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Отмена исправления по документу %1 невозможна. Сначала нужно отменить исправление по документу %2.';uk='Скасування виправлення по документу %1 неможлива. Спочатку потрібно скасувати виправлення документу %2.'"),
		ПредставлениеИсправления,
		ПредставлениеИсправленного);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ИсправленныйДокумент) Тогда
		Регистры = ИсправляемыеДвижения(ДокументИсправление);
		Для Каждого Регистр Из Регистры Цикл
			НаборЗаписей = РегистрыСведений[Регистр].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументИсправление);
			НаборЗаписей.Записать();
		КонецЦикла;
		ОтменитьИсправления(Источник.Ссылка, Источник.ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьИсправления(ДокументИсправление, ИсправляемыйДокумент)
	
	Регистры = ИсправляемыеДвижения(ДокументИсправление);
	Для Каждого Регистр Из Регистры Цикл
		МетаданныеРегистра = Метаданные.РегистрыСведений[Регистр];
		ЗафиксироватьИсправленияПоРегистру(МетаданныеРегистра, ДокументИсправление, ИсправляемыйДокумент);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьИсправленияПоРегистру(МетаданныеРегистра, ДокументИсправление, ИсправляемыйДокумент, РежимЗагрузки = Ложь) Экспорт
	
	ЭтоПериодическийРегистр = МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
	
	НаборЗаписейИсходный = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
	НаборЗаписейИсходный.Отбор.Регистратор.Установить(ИсправляемыйДокумент);
	НаборЗаписейИсходный.Прочитать();
	
	НаборЗаписейЦелевой = РегистрыСведений[МетаданныеРегистра.Имя + "Испр"].СоздатьНаборЗаписей();
	НаборЗаписейЦелевой.Отбор.РегистраторИзмерение.Установить(ДокументИсправление);
	Для Каждого Строка Из НаборЗаписейИсходный Цикл
		НоваяСтрока = НаборЗаписейЦелевой.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.РегистраторИзмерение = ДокументИсправление;
		Если ЭтоПериодическийРегистр Тогда 
			НоваяСтрока.ПериодИзмерение = Строка.Период;
		КонецЕсли;
	КонецЦикла;
	
	Если РежимЗагрузки Тогда
		НаборЗаписейЦелевой.ОбменДанными.Загрузка = Истина;
		НаборЗаписейИсходный.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	НаборЗаписейЦелевой.Записать();
	НаборЗаписейИсходный.Очистить();
	НаборЗаписейИсходный.Записать();
	
КонецПроцедуры

Процедура ОтменитьИсправления(ДокументИсправление, ИсправляемыйДокумент)
	
	Регистры = ИсправляемыеДвижения(ДокументИсправление);
	Для Каждого Регистр Из Регистры Цикл
		ЭтоПериодическийРегистр = Метаданные.РегистрыСведений[Регистр].ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
		НаборЗаписейИсходный = РегистрыСведений[Регистр + "Испр"].СоздатьНаборЗаписей();
		НаборЗаписейИсходный.Отбор.РегистраторИзмерение.Установить(ДокументИсправление);
		НаборЗаписейИсходный.Прочитать();
		НаборЗаписейЦелевой = РегистрыСведений[Регистр].СоздатьНаборЗаписей();
		НаборЗаписейЦелевой.Отбор.Регистратор.Установить(ИсправляемыйДокумент);
		Для Каждого Строка Из НаборЗаписейИсходный Цикл
			НоваяСтрока = НаборЗаписейЦелевой.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Регистратор = ИсправляемыйДокумент;
			Если ЭтоПериодическийРегистр Тогда
				НоваяСтрока.Период = Строка.ПериодИзмерение;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписейИсходный.Очистить();
		НаборЗаписейИсходный.Записать();
		НаборЗаписейЦелевой.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ИсправляемыеДвижения(ДокументСсылка)
	
	Движения = Новый Массив;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	Для Каждого Регистр Из МетаданныеДокумента.Движения Цикл
		Если Метаданные.РегистрыСведений.Найти(Регистр.Имя + "Испр") <> НеОпределено Тогда
			Движения.Добавить(Регистр.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Движения;
	
КонецФункции

#КонецОбласти
