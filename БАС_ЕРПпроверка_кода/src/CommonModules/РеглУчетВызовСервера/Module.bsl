
#Область ПрограммныйИнтерфейс

// Проверяет переданные документы на факт отражения в регл. учете при наличии прав на формирование проводок
//
// Параметры:
//    МассивДокументов - Массив - Документы
//
// Возвращаемое значение:
//    Массив - Документы, которые не отражены в регл. учете
//
Функция ПроверитьПраваДоступаОтражениеДокументовВРеглУчете(МассивДокументов) Экспорт
	
	Возврат РеглУчетПроведениеСервер.ПроверитьПраваДоступаОтражениеДокументовВРеглУчете(МассивДокументов);
	
КонецФункции

// Выполняет попытку отражения документов в регл. учете
//
// Параметры:
//	Документы - Массив - документы, которые необходимо отразить в регл. учете
//
// Возвращаемое значение:
//	Массив - Не отраженные в регл. учете документы
//
Функция ОтразитьДокументыВРеглУчете(МассивДокументов, ВыполнитьПересчеты = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РеглУчетПроведениеСервер.ОтразитьДокументыВРеглУчете(МассивДокументов, ВыполнитьПересчеты);
	
КонецФункции

// Возвращает строкое представление отражения в регл. учете
//
// Параметры:
// 	ОтражениеВРеглУчете - Коллекция, содержащая поля: СчетУчета, Субконто1, Субконто2, Субконто3
// 	ПодбираемыеАналитики - Массив типов аналитик, которые могут быть подобраны автоматически
//
// Возвращаемое значение:
// 	 Результат - Строка - Представление отражения в регл. учете
//
Функция ПредставлениеОтраженияВРеглУчете(ОтражениеВРеглУчете, ПодбираемыеАналитики = Неопределено) Экспорт
	
	Результат = НСтр("ru='Настроить';uk='Настроїти'");
	
	Если Не ЗначениеЗаполнено(ОтражениеВРеглУчете.СчетУчета) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить(Строка(ОтражениеВРеглУчете.СчетУчета));
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ОтражениеВРеглУчете.СчетУчета);
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ЗначениеСубконто = ОтражениеВРеглУчете["Субконто" + НомерСубконто];
		
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			МассивПолей.Добавить(Строка(ЗначениеСубконто));
		ИначеЕсли ПодбираемыеАналитики = Неопределено Тогда
			МассивПолей.Добавить("<...>");
		Иначе
			
			ОписаниеТиповСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
			
			ПредставлениеЗаполнено = Ложь;
			Для Каждого Аналитика Из ПодбираемыеАналитики Цикл
				Если ОписаниеТиповСубконто.СодержитТип(Аналитика) Тогда
					ПредставлениеЗаполнено = Истина;
					МассивПолей.Добавить(НСтр("ru='<авто>';uk='<авто>'"));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПредставлениеЗаполнено Тогда
				МассивПолей.Добавить("<...>");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = СтрСоединить(МассивПолей, ", ");
	
	Возврат Результат;
	
КонецФункции

// Процедура заполняет строковое представление отражения в регл. учете строки таблицы формы
//
// Параметры:
// 	ТаблицаФормы - ДанныеФормыКоллекция - Данные табличной части
// 	ПодбираемыеАналитики - Массив типов аналитик, которые могут быть подобраны автоматически
//
Процедура ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(ТаблицаФормы, ПодбираемыеАналитики = Неопределено) Экспорт
	
	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		
		СтрокаТаблицы.ПредставлениеОтраженияВРеглУчете = РеглУчетВызовСервера.ПредставлениеОтраженияВРеглУчете(СтрокаТаблицы, ПодбираемыеАналитики);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура дополняет условное оформление элементами, обеспечивающими совместное отображение в табличной части
// настроек счетов регл. учета доходов, расходов и прочих активов/пассивов
//
// Параметры:
// 	 УсловноеОформление - УсловноеОформление - условное оформление формы
// 	 ИмяТЧ - Строка - имя табличной части
// 	 ТипыСтатей - Массив - Типы статей, которые используются в ТЧ (1 - Статьи расходов, 2 - Статьи доходов, 3 - СтатьиАктивовПассивов)
//
Процедура УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(Форма, ИмяТЧ, ТипыСтатей) Экспорт
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	Если ТипыСтатей.Найти(1)  <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаРасходов"].Имя);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<определяется для статьи расходов>';uk='<визначається для статті витрат>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаРасходов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 1;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
	Если ТипыСтатей.Найти(2)  <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаДоходов"].Имя);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<определяется для статьи доходов>';uk='<визначається для статті доходів>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаДоходов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 2;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
	Если ТипыСтатей.Найти(3) <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаАктивовПассивов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ПредставлениеОтраженияВРеглУчете");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст",  НСтр("ru='Настроить';uk='Настроїти'"));
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаАктивовПассивов"].Имя);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "СчетРеглУчетаАктивовПассивов"].Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипСтатьи");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 3;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти