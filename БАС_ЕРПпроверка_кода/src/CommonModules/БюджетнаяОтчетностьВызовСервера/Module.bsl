
#Область СлужебныеПроцедурыИФункции

// Процедура дополняет дерево операторов для конструктора формул
// финансовой и бюджетной отчетности
//
// Параметры:
//  Дерево  - ДеревоЗначений - дерево операторов конструктора формул
//
Процедура ДополнитьДеревоОператоров(Дерево) Экспорт
	
	Группа = Дерево.Строки.Найти("Функции");
	Для Каждого ЗначениеПеречисления из Метаданные.Перечисления.ВидыФормулБюджетирования.ЗначенияПеречисления Цикл
		
		РаботаСФормулами.ДобавитьОператор(Дерево, Группа, ЗначениеПеречисления.Синоним, 
			Перечисления.ВидыФормулБюджетирования.ТекстФункции(ЗначениеПеречисления.Имя));
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает значение цвета стиля
// вызывается из БюджетнаяОтчетностьКлиентСервер
//
// Параметры:
//  Имя  - Строка - Имя цвета стиля
//
// Возвращаемое значение:
//   Цвет - Цвет стиля, полученный по имени
//
Функция ПолучитьЦвет(Имя) Экспорт
	
	Возврат ЦветаСтиля[Имя];
	
КонецФункции

// Процедура заполняет палитру новых элементов, доступных
// для выбора в экземпляре бюджета, форме конструктора формул
//
// Параметры:
//  Форма  - УправляемаяФорма - форма, для элементов которых
//                              производится заполнение
//  Параметры  - Структура - дополнительные параметры дерева
//
Процедура ОбновитьДеревоНовыхЭлементов(Форма, Параметры) Экспорт
	
	БыстрыйПоиск = Неопределено;
	ИмяЭлементаДерева = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"ИмяЭлементаДерева");
	БыстрыйПоиск = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"БыстрыйПоиск");
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = ФинансоваяОтчетностьСервер.ТаблицаИндексовКартинок();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаНовыеЭлементыОтчета();
	
	ДоступныеВидыЭлементов = ПолучитьИспользуемыеВидыЭлементовФинансовыхОтчетов(
									Параметры.РежимДерева,
									ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"ИспользоватьДляВводаПлана", Ложь));
	Запрос.УстановитьПараметр("ДоступныеВидыЭлементов", ДоступныеВидыЭлементов);
	Запрос.УстановитьПараметр("РежимДерева", Параметры.РежимДерева);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДеревоЭлементов = Форма.РеквизитФормыВЗначение(ИмяЭлементаДерева);
	ДеревоЭлементов.Строки.Очистить();
	
	// Создадим базовую структуру
	ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[0], ДеревоЭлементов);
	
	// Добавим статьи
	СтрокаПоказателей = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
	Если СтрокаПоказателей <> Неопределено Тогда
		СтрокаПоказателей.Наименование = НСтр("ru='Статьи бюджетов';uk='Статті бюджетів'");
		СтрокаПоказателей.ЭлементВидаОтчетности = Справочники.СтатьиБюджетов.ПустаяСсылка();
		ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[1], СтрокаПоказателей);
		Если ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры, "ИспользоватьДляВводаПлана", Ложь) Тогда
			СтрокаПоказателей.ВидЭлемента = Неопределено;
		Иначе
			СтрокаПоказателей.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПоказателей = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
	Если СтрокаПоказателей <> Неопределено Тогда
		СтрокаПоказателей.Наименование = НСтр("ru='Показатели бюджетов';uk='Показники бюджетів'");
		СтрокаПоказателей.ЭлементВидаОтчетности = Справочники.ПоказателиБюджетов.ПустаяСсылка();
		ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[2], СтрокаПоказателей);
		Если ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры, "ИспользоватьДляВводаПлана", Ложь) Тогда
			СтрокаПоказателей.ВидЭлемента = Неопределено;
		Иначе
			// Добавим показатели
			СтрокаПоказателей.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПоказателей = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);
	Если СтрокаПоказателей <> Неопределено Тогда
		СтрокаПоказателей.Наименование = НСтр("ru='Нефинансовые показатели';uk='Нефінансові показники'");
		СтрокаПоказателей.ЭлементВидаОтчетности = Справочники.НефинансовыеПоказателиБюджетов.ПустаяСсылка();
		СтрокаПоказателей.ВидЭлемента = Неопределено;
		ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(МассивРезультатов[3], СтрокаПоказателей);
	КонецЕсли;
	
	// Добавим группировки
	Если Параметры.РежимДерева = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета Тогда
		СтрокаГруппировки = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
		Если Параметры.Свойство("АналитикиШапки") Тогда
			АналитикиШапки = Параметры.АналитикиШапки;
		Иначе
			АналитикиШапки = Новый Массив;
		КонецЕсли;
		ДобавитьИзмеренияВДеревоНовыхЭлементов(ДеревоЭлементов, СтрокаГруппировки, 
						Параметры.МодельБюджетирования, Параметры.ИспользоватьДляВводаПлана, АналитикиШапки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БыстрыйПоиск) Тогда
		КопияДерева = ДеревоЭлементов.Скопировать();
		КопияДерева.Строки.Очистить();
		//отсортируем элементы отчета внутри видов
		//порядок видов элементов сохраним
		Для Каждого СтрокаДерева из ДеревоЭлементов.Строки Цикл
			СтрокаДерева.Строки.Сортировать("Наименование", Истина);
		КонецЦикла;
		ОтобратьЭлементыПоБыстромуПоиску(ДеревоЭлементов, КопияДерева, БыстрыйПоиск);
		ДеревоЭлементов = КопияДерева;
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЭлементов, ИмяЭлементаДерева);
	
КонецПроцедуры

Функция ТекстЗапросаНовыеЭлементыОтчета()
	
	ТекстЗапроса = "
	|////////////////////////////////////////////////////////////////////////////////
	|// 1. БАЗОВАЯ СТРУКТУРА
	|"
	+
	"ВЫБРАТЬ
	|	ВидыЭлементовОтчетов.Ссылка КАК ВидЭлемента,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЭлементовОтчетов.Ссылка) КАК Наименование,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка
	|ИЗ
	|	Перечисление.ВидыЭлементовФинансовогоОтчета КАК ВидыЭлементовОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО ВидыЭлементовОтчетов.Ссылка = ТаблицаИндексовКартинок.ВидЭлемента
	|			И (ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """")
	|ГДЕ
	|	ВидыЭлементовОтчетов.Ссылка В(&ДоступныеВидыЭлементов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЭлементовОтчетов.Порядок"
	+"
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.1.1 БАЗОВЫЕ ПОКАЗАТЕЛИ ПО СТАТЬЯМ БЮДЖЕТОВ
	|"
	+
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЭлементыОтчетов.ЭтоГруппа
	|				И ЗНАЧЕНИЕ(Перечисление.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета) <> &РежимДерева
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов)
	|	КОНЕЦ КАК ВидЭлемента,
	|	ЭлементыОтчетов.Наименование КАК Наименование,
	|	"""" КАК Комментарий,
	|	ЭлементыОтчетов.Ссылка КАК ЭлементВидаОтчетности,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ЭлементыОтчетов.ЭтоГруппа
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК ЭлементыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ВЫБОР
	|				КОГДА ЭлементыОтчетов.ЭтоГруппа
	|					ТОГДА ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Группа""
	|				ИНАЧЕ ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов)
	|						И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ЭлементыОтчетов.ПометкаУдаления = ЛОЖЬ
	|АВТОУПОРЯДОЧИВАНИЕ"
	+"
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.1.2 БАЗОВЫЕ ПОКАЗАТЕЛИ ПО ПОКАЗАТЕЛЯМ БЮДЖЕТИРОВАНИЯ
	|"
	+
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЭлементыОтчетов.ЭтоГруппа
	|				И ЗНАЧЕНИЕ(Перечисление.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета) <> &РежимДерева
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЭлементыОтчетов.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипПоказателяБюджетов.Целевой)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидЭлемента,
	|	ЭлементыОтчетов.Наименование КАК Наименование,
	|	"""" КАК Комментарий,
	|	ЭлементыОтчетов.Ссылка КАК ЭлементВидаОтчетности,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ЭлементыОтчетов.ЭтоГруппа
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК ЭлементыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ВЫБОР
	|				КОГДА ЭлементыОтчетов.ЭтоГруппа
	|					ТОГДА ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Группа""
	|				ИНАЧЕ ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов)
	|						И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ЭлементыОтчетов.ПометкаУдаления = ЛОЖЬ
	|АВТОУПОРЯДОЧИВАНИЕ"
	+"
	|;";
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|// 2.1.3 БАЗОВЫЕ ПОКАЗАТЕЛИ ПО НЕФИНАНСОВЫМ ПОКАЗАТЕЛЯМ БЮДЖЕТИРОВАНИЯ
	|"
	+
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЭлементыОтчетов.ЭтоГруппа
	|				И ЗНАЧЕНИЕ(Перечисление.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета) <> &РежимДерева
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель)
	|	КОНЕЦ КАК ВидЭлемента,
	|	ЭлементыОтчетов.Наименование КАК Наименование,
	|	"""" КАК Комментарий,
	|	ЭлементыОтчетов.Ссылка КАК ЭлементВидаОтчетности,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ЭлементыОтчетов.ЭтоГруппа
	|ИЗ
	|	Справочник.НефинансовыеПоказателиБюджетов КАК ЭлементыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ВЫБОР
	|				КОГДА ЭлементыОтчетов.ЭтоГруппа
	|					ТОГДА ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Группа""
	|				ИНАЧЕ ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель)
	|						И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ЭлементыОтчетов.ПометкаУдаления = ЛОЖЬ
	|АВТОУПОРЯДОЧИВАНИЕ"
	+"
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИспользуемыеВидыЭлементовФинансовыхОтчетов(РежимРаботы, ИспользоватьДляВводаПлана)
	
	Список = Новый СписокЗначений;
	
	Если РежимРаботы <> Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаАвторасчетаСложнойТаблицы Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель);
		
		Если РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета
			ИЛИ РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.ВыборВидаЯчейкиСложнойТаблицы Тогда
			Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
		КонецЕсли;
	КонецЕсли;
	
	Если РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.ПроизводныйПоказательСложнойТаблицы
		ИЛИ РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаАвторасчетаСложнойТаблицы Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы);
	КонецЕсли;
	
	Если РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе);
	КонецЕсли;
	
	Если ИспользоватьДляВводаПлана
		И (РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаБюджета
		ИЛИ РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.ВыборВидаЯчейкиСложнойТаблицы) Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение);
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Процедура ОтобратьЭлементыПоБыстромуПоиску(ДеревоЭлементов, КопияДерева, БыстрыйПоиск)
	
	Для Каждого СтрокаДерева из ДеревоЭлементов.Строки Цикл
		Если СтрНайти(НРег(СтрокаДерева.Наименование), НРег(БыстрыйПоиск))
			И ЗначениеЗаполнено(СтрокаДерева.ВидЭлемента)
			И СтрокаДерева.ЭтоГруппа = Ложь Тогда
			
			ЗаполнитьЗначенияСвойств(КопияДерева.Строки.Добавить(), СтрокаДерева);
			
		КонецЕсли;
		ОтобратьЭлементыПоБыстромуПоиску(СтрокаДерева, КопияДерева, БыстрыйПоиск);
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьСтрокуИзмерения(СтрокаКудаДобавлять, Наименование, ЭлементОтчета = Неопределено)
	
	НоваяСтрока = СтрокаКудаДобавлять.Строки.Добавить();
	Измерение = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение;
	НоваяСтрока.ВидЭлемента = Измерение;
	НоваяСтрока.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(Измерение);
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.ЭлементВидаОтчетности = ?(ЭлементОтчета = Неопределено, Наименование, ЭлементОтчета);
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДобавитьИзмеренияВДеревоНовыхЭлементов(ДеревоЭлементов, СтрокаГруппировки, МодельБюджетирования, ИспользоватьДляВводаПлана, АналитикиШапки)
	
	// Добавим элементы таблицы
	СтрокаИзмерения = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
	СтрокаЭлемент = СтрокаИзмерения.Строки.Добавить();
	ЭлементТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы;
	СтрокаЭлемент.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ЭлементТаблицы);
	СтрокаЭлемент.Наименование = Строка(Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы);
	СтрокаЭлемент.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы;

	СтрокаИзмерения = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
	СтрокаИзмерения.ВидЭлемента = Неопределено; //группировочная запись о измерениях 
												//не может быть перенесена в элементы бюджета
	
	//добавление периода
	
	СтрокаПериод = ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Период");
	СтрокаПериод.ВидЭлемента = Неопределено; //группировочная запись о измерениях 
	СтрокаПериод.ЭтоГруппа = Истина;		 //не может быть перенесена в элементы бюджета
	СтрокаПериод.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Неопределено, "Группа");
	
	ДобавитьСтрокуИзмерения(СтрокаПериод, "Год", 		Перечисления.Периодичность.Год);
	ДобавитьСтрокуИзмерения(СтрокаПериод, "Полугодие",	Перечисления.Периодичность.Полугодие);
	ДобавитьСтрокуИзмерения(СтрокаПериод, "Квартал",	Перечисления.Периодичность.Квартал);
	ДобавитьСтрокуИзмерения(СтрокаПериод, "Месяц",		Перечисления.Периодичность.Месяц);
	ДобавитьСтрокуИзмерения(СтрокаПериод, "Декада",		Перечисления.Периодичность.Декада);
	ДобавитьСтрокуИзмерения(СтрокаПериод, "Неделя",		Перечисления.Периодичность.Неделя);
	ДобавитьСтрокуИзмерения(СтрокаПериод, "День",		Перечисления.Периодичность.День);
	
	//добавление аналитики
	
	СтрокаАналитика = ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Аналитика");
	СтрокаАналитика.ВидЭлемента = Неопределено;	//группировочная запись о измерениях 
	СтрокаАналитика.ЭтоГруппа = Истина; 		//не может быть перенесена в элементы бюджета
	СтрокаАналитика.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Неопределено, "Группа");
	
	Если Не ИспользоватьДляВводаПлана Тогда
		
		Для Сч = 1 По 6 Цикл
			ДобавитьСтрокуИзмерения(СтрокаАналитика, "Аналитика " + Сч, "Аналитика" + Сч);
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Аналитика.Ссылка,
	|	Аналитика.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК Аналитика
	|ГДЕ
	|	НЕ Аналитика.ПометкаУдаления
	|	И НЕ Аналитика.Ссылка В (&АналитикиШапки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ИспользоватьДляВводаПлана", ИспользоватьДляВводаПлана);
	Запрос.УстановитьПараметр("АналитикиШапки", АналитикиШапки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Проекты
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьПроекты") Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Контрагенты
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьСтрокуИзмерения(СтрокаАналитика, Выборка.Наименование, Выборка.Ссылка);
	КонецЦикла;
	
	//добавление организации
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоОрганизациям", 
			Новый Структура("МодельБюджетирования", МодельБюджетирования))
			И НЕ ИспользоватьДляВводаПлана Тогда
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Организация");
	КонецЕсли;
	
	//добавление подразделения
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоПодразделениям", 
			Новый Структура("МодельБюджетирования", МодельБюджетирования))
			И НЕ ИспользоватьДляВводаПлана Тогда
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Подразделение");
	КонецЕсли;
	
	//добавление сценария
	
	Если Не ИспользоватьДляВводаПлана Тогда
		СтрокаСценарии = ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Сценарий", "Сценарий");
	КонецЕсли;
	
	//добавление валюты
	
	Если Не ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоВалют") Тогда
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, "Валюта");
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеГруппировкиЗаданоОтбором(ЭлементОтбора)
	
	Если ЭлементОтбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОтбора.Родитель <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ (ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно)
		И НЕ (ЭлементОтбора.Использование И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено) Тогда
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Если НЕ (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений")
				И ЭлементОтбора.ПравоеЗначение.Количество() = 1) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПреобразоватьПериодПоПравилуИсточника(Параметры, ПравилоИсточника)
	
	Запрос = Новый Запрос("ВЫБРАТЬ " + ПравилоИсточника);
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Параметры.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаФактДанных", Параметры.ГраницаФактДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка[0];
	
КонецФункции

Функция ПериодГруппировкиСоСмещением(Период, ПериодичностьСмещения, ПериодСмещения)
	
	Если Не ЗначениеЗаполнено(ПериодичностьСмещения)
		ИЛИ Не ЗначениеЗаполнено(ПериодСмещения) Тогда
		
		Возврат Период;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ДобавитьКДате(&Период, " + ОбщегоНазначения.ИмяЗначенияПеречисления(ПериодичностьСмещения) + ", -" + ПериодСмещения + ")";
	Запрос.УстановитьПараметр("Период", Период);
	
	Возврат Запрос.Выполнить().Выгрузить()[0][0];
	
КонецФункции

Функция СписокПериодовПоПравилуПреобразования(МинимальнаяПериодичность, ТекущийПериодГруппировки, 
												Параметры, ИсточникПериодовГруппировки, ИсточникДанных)
	
	Если ИсточникПериодовГруппировки = Неопределено Тогда
		Период = ПериодГруппировкиСоСмещением(ТекущийПериодГруппировки, 
							ИсточникДанных.ПериодичностьСмещения, ИсточникДанных.ПериодСмещения);
		Список = Новый СписокЗначений;
		Список.Добавить(Период);
		Возврат Список;
	КонецЕсли;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	МассивПериодов = БюджетнаяОтчетностьВыводСервер.ПолучитьМассивПериодов(Параметры.НачалоПериода, Параметры.КонецПериода, МинимальнаяПериодичность);
	
	Для Каждого Период из МассивПериодов Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока["Период"] = Период;
	КонецЦикла;
	ИмяМинимальнаяПериодичность = ?(МинимальнаяПериодичность = Неопределено, "", ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|
	|	Период КАК Период" + ИмяМинимальнаяПериодичность + "
	|
	|ПОМЕСТИТЬ ТаблицаПериодов
	|
	|ИЗ &ТаблицаПериодов КАК ТаблицаПериодов;
	|
	|ВЫБРАТЬ
	|
	|	&Период КАК Период" + ИмяМинимальнаяПериодичность + "
	|
	|ПОМЕСТИТЬ ПериодТекущейГруппировки;
	|
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	| ПраваяТаблицаПериодов.Период" + ИмяМинимальнаяПериодичность + " КАК Период
	|
	|ИЗ ПериодТекущейГруппировки КАК ЛеваяТаблицаПериодов
	|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ПраваяТаблицаПериодов
	|ПО ПраваяТаблицаПериодов.Период" + ИмяМинимальнаяПериодичность + 
		" МЕЖДУ " + ИсточникПериодовГруппировки.ВыражениеНачалоПериодаГруппировки + " И " + ИсточникПериодовГруппировки.ВыражениеКонецПериодаГруппировки;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Параметры.КонецПериода);
	Запрос.УстановитьПараметр("ГраницаФактДанных", Параметры.ГраницаФактДанных);
	Запрос.УстановитьПараметр("Период", ТекущийПериодГруппировки);
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Список = Новый СписокЗначений;
	Для Каждого Элемент из Массив Цикл
		Период = ПериодГруппировкиСоСмещением(Элемент, ИсточникДанных.ПериодичностьСмещения, ИсточникДанных.ПериодСмещения);
		Список = Новый СписокЗначений;
		Список.Добавить(Период);
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция ПолучитьПараметрыОтчета(ПараметрыОтчета, ДанныеЯчеек, СвязаннаяСтрокаДанных, ВидРасшифровки, ИмяПоказателя)
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
	СтруктураКолонок = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ПараметрыОтчета.ВидБюджета);
	ИсточникиДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьОписаниеИсточниковДанных(ПараметрыОтчета.ВидБюджета, СтруктураКолонок,
																		Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(ПараметрыОтчета.ВидБюджета,
																		СтруктураКолонок,
																		Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	СтрокаСтруктурыЯчеек = СтруктураЯчеек.Найти(СвязаннаяСтрокаДанных.ИндексСтроки, "ИндексСтроки");
	СтрокаПараметровЯчейки = ПараметрыЯчеек.Найти(СвязаннаяСтрокаДанных.ИндексСтроки, "ИндексСтроки");
	
	Для Каждого Измерение из СтруктураКолонок.Измерения Цикл
		
		Если Измерение = "ЕдиницаИзмерения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "заполнить"
			или СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "отобрать" Тогда
			
			Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Измерение);
			Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных[Измерение]) Тогда
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных[Измерение];
			Иначе
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			КонецЕсли;
			Отбор.Использование = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВидАналитики из СтруктураКолонок.ВидыАналитик Цикл
		Измерение = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		Если СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "заполнить"
			или СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "отобрать" Тогда
			
			Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Измерение);
			Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных[Измерение]) Тогда
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных[Измерение];
			Иначе
				Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			КонецЕсли;
			Отбор.Использование = Истина;
			
		ИначеЕсли СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "прочие"
			или СтрокаСтруктурыЯчеек["Флаг" + Измерение] = "документ" Тогда
			
			Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Измерение);
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Родитель" + Измерение, СтрокаСтруктурыЯчеек["Родитель" + Измерение]);
			СтруктураПоиска.Вставить("Флаг" + Измерение, "отобрать");
			
			КопияТаблицыДляСписка = СтруктураЯчеек.Скопировать(СтруктураПоиска);
			КопияТаблицыДляСписка.Свернуть(Измерение);
			Массив = КопияТаблицыДляСписка.ВыгрузитьКолонку(Измерение);
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(Массив);
			
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
			Отбор.ПравоеЗначение = СписокЗначений;
			Отбор.Использование = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение из ПараметрыОтчета.ДополнительныеФильтрыПоАналитикам Цикл
		
		Измерение = КлючИЗначение.Ключ;
		Значение = Неопределено;
		Используется = ПараметрыОтчета.Свойство(КлючИЗначение.Ключ, Значение);
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Измерение);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.ПравоеЗначение = Значение;
		Отбор.Использование = Используется;
		
	КонецЦикла;
	
	Для Каждого Источник из ИсточникиДанных Цикл
		Если Источник.Идентификатор = СтрокаСтруктурыЯчеек.ИД_Источника Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НастройкиАналитики = Неопределено;
	Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных.ПоказательБюджетов) Тогда
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказательБюджетов");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных.ПоказательБюджетов;
		Отбор.Использование = Истина;
		НастройкиАналитики = СвязаннаяСтрокаДанных.ПоказательБюджетов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных.СтатьяБюджетов) Тогда
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяБюджетов");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных.СтатьяБюджетов;
		Отбор.Использование = Истина;
		Если НастройкиАналитики = Неопределено Тогда
			НастройкиАналитики = СвязаннаяСтрокаДанных.СтатьяБюджетов;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвязаннаяСтрокаДанных.НефинансовыйПоказатель) Тогда
		Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НефинансовыйПоказатель");
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Отбор.ПравоеЗначение = СвязаннаяСтрокаДанных.НефинансовыйПоказатель;
		Отбор.Использование = Истина;
		Если НастройкиАналитики = Неопределено Тогда
			НастройкиАналитики = СвязаннаяСтрокаДанных.НефинансовыйПоказатель;
		КонецЕсли;
	КонецЕсли;
	
	НачалоПериода = ПреобразоватьПериодПоПравилуИсточника(ПараметрыОтчета, Источник.ВыражениеНачалоПериода);
	КонецПериода = ПреобразоватьПериодПоПравилуИсточника(ПараметрыОтчета, Источник.ВыражениеКонецПериода);
	
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(СтруктураКолонок.Периодичности);
	Если МинимальнаяПериодичность <> Неопределено Тогда
		ИмяМинимальнаяПериодичность = ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность);
		ЗначениеПериода = СвязаннаяСтрокаДанных["Период" + ИмяМинимальнаяПериодичность];
		Если ЗначениеЗаполнено(ЗначениеПериода) Тогда
			
			ИскомыйИсточник = Неопределено;
			Для Каждого ИсточникПериодовГруппировки из СтруктураОписанияОтчета.ИсточникиПериодовГруппировок Цикл
				Если ИсточникПериодовГруппировки.Идентификатор = СтрокаСтруктурыЯчеек.ИД_ИсточникаПериодов Тогда
					ИскомыйИсточник = ИсточникПериодовГруппировки;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВидРасшифровки = "НефинансовыйПоказатель" Тогда
				ПолеПериод = Новый ПолеКомпоновкиДанных("Период");
			Иначе
				ПолеПериод = Новый ПолеКомпоновкиДанных("Период" + ИмяМинимальнаяПериодичность);
			КонецЕсли;
			
			Отбор = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.ЛевоеЗначение = ПолеПериод;
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Отбор.ПравоеЗначение = СписокПериодовПоПравилуПреобразования(МинимальнаяПериодичность, ЗначениеПериода, 
																		ПараметрыОтчета, ИскомыйИсточник, Источник);
			Отбор.Использование = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
	
	Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
	Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Период");
	Параметр.Значение = Период;
	Параметр.Использование = Истина;
	
	Если Не ВидРасшифровки = "НефинансовыйПоказатель" Тогда
	
		Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ДатаАктуальностиДанных");
		Параметр.Значение = КонецДня(ПараметрыОтчета.ДатаАктуальности);
		Параметр.Использование = Истина;
		
		Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Валюта");
	
		ЕстьВалюта = СтруктураКолонок.Измерения.Найти("Валюта") <> Неопределено И ЗначениеЗаполнено(СвязаннаяСтрокаДанных.Валюта);
		
		Если ЕстьВалюта Тогда
			Параметр.Значение = СвязаннаяСтрокаДанных.Валюта;
		ИначеЕсли ПараметрыОтчета.ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеРеглУчета Тогда
			Параметр.Значение = Константы.ВалютаРегламентированногоУчета.Получить();
		ИначеЕсли ПараметрыОтчета.ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета Тогда
			Параметр.Значение = Константы.ВалютаУправленческогоУчета.Получить();
		Иначе
			Параметр.Значение = ПараметрыОтчета.ВалютаСценария;
		КонецЕсли;
		Параметр.Использование = Истина;
		
		Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("ОборотыВСтатусах");
		Параметр.Значение = ПараметрыОтчета.Статус;
		Параметр.Использование = Истина;
		
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(Источник.ДополнительныйОтбор.Отбор, ФиксированныеНастройки.Отбор);
		БюджетнаяОтчетностьВыводСервер.ДополнитьНастройкиСКДПередВыводом(ФиксированныеНастройки, ПараметрыОтчета);
		
	Иначе
		
		Параметр = ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных("Периодичность");
		Если МинимальнаяПериодичность <> Неопределено Тогда
			ЗначениеПериодичность = МинимальнаяПериодичность
		Иначе
			ЗначениеПериодичность = Перечисления.Периодичность.ПустаяСсылка();
		КонецЕсли;
		Параметр.Значение = ЗначениеПериодичность;
		Параметр.Использование = Истина;
		
	КонецЕсли;
	
	ПризнакиИзмерений = Новый Структура;
	Параметры = Новый Структура("МодельБюджетирования", ПараметрыОтчета.ВидБюджета.Владелец);
	ПризнакиИзмерений.Вставить("ПоОрганизациям", ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоОрганизациям", Параметры));
	ПризнакиИзмерений.Вставить("ПоПодразделениям", ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоПодразделениям", Параметры));
	ПризнакиИзмерений.Вставить("ПоСценариям", Истина);
	
	Если ЗначениеЗаполнено(НастройкиАналитики) Тогда
		
		СтруктураРеквизитов = Новый Структура(
				"Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6",
				"ВидАналитики1", "ВидАналитики2", "ВидАналитики3", "ВидАналитики4", "ВидАналитики5", "ВидАналитики6");
		
		Если ТипЗнч(НастройкиАналитики) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
			СтруктураРеквизитов.Вставить("ПоОрганизациям");
			СтруктураРеквизитов.Вставить("ПоПодразделениям");
			СтруктураРеквизитов.Вставить("ПоСценариям");
		КонецЕсли;
		
		НастройкиАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкиАналитики, СтруктураРеквизитов);
		
		Если НастройкиАналитики.Свойство("ПоОрганизациям") Тогда
			ЗаполнитьЗначенияСвойств(ПризнакиИзмерений, НастройкиАналитики, "ПоОрганизациям, ПоПодразделениям");
			ПризнакиИзмерений.Вставить("ПоСценариям", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивИзмеренийКДобавлению = Новый Массив;
	
	МассивИзмеренийКДобавлению.Добавить(ВидРасшифровки);
	Если ПризнакиИзмерений.ПоСценариям Тогда
		МассивИзмеренийКДобавлению.Добавить("Сценарий");
	КонецЕсли;
	Если ПризнакиИзмерений.ПоОрганизациям Тогда
		МассивИзмеренийКДобавлению.Добавить("Организация");
	КонецЕсли;
	Если ПризнакиИзмерений.ПоПодразделениям Тогда
		МассивИзмеренийКДобавлению.Добавить("Подразделение");
	КонецЕсли;
	Для Сч = 1 по 6 Цикл
		МассивИзмеренийКДобавлению.Добавить("Аналитика" + Сч);
	КонецЦикла;
	
	Если МинимальнаяПериодичность <> Неопределено Тогда
		Если ВидРасшифровки = "НефинансовыйПоказатель" Тогда
			МассивИзмеренийКДобавлению.Добавить("Период");
		Иначе
			ИмяМинимальнаяПериодичность = ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность);
			МассивИзмеренийКДобавлению.Добавить("Период" + ИмяМинимальнаяПериодичность);
		КонецЕсли;
	КонецЕсли;
	
	МассивИзмеренийОтчета = Новый Массив;
	
	Если ВидРасшифровки <> "НефинансовыйПоказатель" Тогда
		
		Для Каждого Элемент из МассивИзмеренийКДобавлению Цикл
			
			ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ФиксированныеНастройки.Отбор, Элемент);
			
			Если ЗначениеГруппировкиЗаданоОтбором(ЭлементОтбора) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НастройкиАналитики) Тогда
				
				Если СтрНайти(Элемент, "Аналитика") Тогда
					ВидАналитики = НастройкиАналитики[Элемент];
					Если ЗначениеЗаполнено(ВидАналитики) Тогда
						ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
						ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ФиксированныеНастройки.Отбор, ИмяПоля);
						Если ЗначениеГруппировкиЗаданоОтбором(ЭлементОтбора) Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивИзмеренийОтчета.Добавить(Элемент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не МассивИзмеренийОтчета.Количество() Тогда
		МассивИзмеренийОтчета.Добавить("Регистратор");
	КонецЕсли;
	
	НоваяГруппировка = Неопределено;
	Для Каждого ЭлементМассива из МассивИзмеренийОтчета Цикл
		Если НоваяГруппировка = Неопределено Тогда
			НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(ФиксированныеНастройки.Структура, ЭлементМассива);
		Иначе
			НоваяГруппировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(НоваяГруппировка, ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидРасшифровки = "ПоказательБюджетов" Тогда
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "НачальныйОстатокСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru='Начальный остаток';uk='Початковий залишок'");
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "ПриходСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru='Приход';uk='Надходження'");
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "РасходСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru='Расход';uk='Видаток'");
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "ОборотСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru='Оборот (Приход - Расход)';uk='Оборот (Надходження - Видаток)'");
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "КонечныйОстатокСценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = НСтр("ru='Конечный остаток';uk='Кінцевий залишок'");
		
	ИначеЕсли ВидРасшифровки = "СтатьяБюджетов" Тогда
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоказателя + "Сценария");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = ИмяПоказателя + " сценария";
		
	ИначеЕсли ВидРасшифровки = "НефинансовыйПоказатель" Тогда
		
		ПолеВыбор = ФиксированныеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбор.Поле = Новый ПолеКомпоновкиДанных("ЗначениеПоказателя");
		ПолеВыбор.Использование = Истина;
		ПолеВыбор.Заголовок = "Значение";
		
	КонецЕсли;
	
	Возврат ФиксированныеНастройки;
	
КонецФункции

Функция ПараметрыОткрытияОтчетаРасшифровки(ПараметрыФормирования, Расшифровка, АдресДанныхЯчеек) Экспорт
	Перем ЗначениеОтбора;
	
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	СвязаннаяСтрокаДанных = ДанныеЯчеек[Расшифровка.ИндексСтрокиДанных];
	ИмяПоказателя = Расшифровка.ИмяПоказателя;
	
	СтруктураКолонок = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ПараметрыФормирования.ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(
								ПараметрыФормирования.ВидБюджета, СтруктураКолонок, ПараметрыФормирования.РежимФормирования);
	
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	Если СвязаннаяСтрокаДанных.ОсновнойЭлемент Тогда
		ВидЭлементаКРасшифровке = СвязаннаяСтрокаДанных.ВидЭлемента;
	Иначе
		ВидЭлементаКРасшифровке = СвязаннаяСтрокаДанных.ВидОперанда;
	КонецЕсли;
	
	ПараметрыРасшифровки = Новый Структура;
	Если ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		
		Если ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
			ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
			ПараметрыРасшифровки.Вставить("ИмяФормы", "Отчет.ОборотнаяВедомостьБюджетирования.Форма");
			ВидРасшифровки = "СтатьяБюджетов";
		ИначеЕсли ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
			ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
			ПараметрыРасшифровки.Вставить("ИмяФормы", "Отчет.ОборотноСальдоваяВедомостьБюджетирования.Форма");
			ВидРасшифровки = "ПоказательБюджетов";
		ИначеЕсли ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
			ПараметрыРасшифровки.Вставить("ИмяФормы", "Отчет.ЗначенияНефинансовыхПоказателей.Форма");
			ВидРасшифровки = "НефинансовыйПоказатель";
		КонецЕсли;
		
		ФиксированныеНастройки = ПолучитьПараметрыОтчета(ПараметрыФормирования, ДанныеЯчеек, СвязаннаяСтрокаДанных, ВидРасшифровки, ИмяПоказателя);
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("ФиксированныеНастройки", ФиксированныеНастройки);
		ПараметрыОтчета.Вставить("КлючВарианта", "Расшифровка");
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОтчета.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		ПараметрыРасшифровки.Вставить("ПараметрыОтчета", ПараметрыОтчета);
		
	ИначеЕсли ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
		ИЛИ ВидЭлементаКРасшифровке = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
		
		Если СвязаннаяСтрокаДанных.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			ЛогРасчета = Новый Массив;
			ПараметрыПериодов = БюджетнаяОтчетностьВыводСервер.ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонок, ПараметрыФормирования);
			БюджетнаяОтчетностьВыводСервер.РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериодов, СвязаннаяСтрокаДанных, ИмяПоказателя, , ЛогРасчета);
			ИндексСвязаннаяСтрокаДанных = ЛогРасчета[0].СтрокаОснование;
		Иначе
			ИндексСвязаннаяСтрокаДанных = ДанныеЯчеек.Индекс(СвязаннаяСтрокаДанных);
		КонецЕсли;
		
		ХранимыеПараметрыОтчета = Новый Структура;
		Для Каждого КлючИЗначение из ПараметрыФормирования Цикл
			//пропускаем вспомогательные параметры для заполнения
			//экземпляра бюджета
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений")
				ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			ХранимыеПараметрыОтчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		ХранимыеПараметрыОтчета.Вставить("ДополнительныеФильтрыПоАналитикам", 	ПараметрыФормирования.ДополнительныеФильтрыПоАналитикам);
		ХранимыеПараметрыОтчета.Вставить("АдресДанныхЯчеек", 	АдресДанныхЯчеек);
		ХранимыеПараметрыОтчета.Вставить("ИндексСтрокиДанных", 	ИндексСвязаннаяСтрокаДанных);
		ХранимыеПараметрыОтчета.Вставить("ИмяПоказателя", 		ИмяПоказателя);
		
		ПараметрыОтчета = Новый Структура();
		ПараметрыОтчета.Вставить("КлючВарианта", "РасшифровкаФормулыБюджетногоОтчета");
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОтчета.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		ПараметрыОтчета.Вставить("ХранимыеПараметрыОтчета", ХранимыеПараметрыОтчета);
		
		ПараметрыРасшифровки.Вставить("ИмяФормы", "Отчет.РасшифровкаФормулыБюджетногоОтчета.Форма");
		ПараметрыРасшифровки.Вставить("ПараметрыОтчета", ПараметрыОтчета);
		
	Иначе
		
		ВызватьИсключение НСтр("ru='Неизвестный элемент для расшифровки';uk='Невідомий елемент для розшифровки'") 
		
	КонецЕсли;
	
	Возврат ПараметрыРасшифровки;
		
КонецФункции

Функция ПараметрыФормыРасшифровкиОтчетаРасшифровки(Расшифровка, АдресРасшифровки) Экспорт
	
	Поля = ПолучитьИзВременногоХранилища(АдресРасшифровки).Элементы[Расшифровка].ПолучитьПоля();
	АдресПараметровРасшифровки = Поля.Найти("АдресПараметровОтчета").Значение;
	Если АдресПараметровРасшифровки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыОтчета = ПолучитьИзВременногоХранилища(АдресПараметровРасшифровки);
	ИндексСтрокиДанных = Поля.Найти("ИндексСтрокиДанных").Значение;
	ИмяПоказателя = Поля.Найти("ИмяПоказателя").Значение;
	
	ПараметрыДанных = Новый Структура("ИндексСтрокиДанных, ИмяПоказателя", ИндексСтрокиДанных, ИмяПоказателя);
	
	Возврат ПараметрыОткрытияОтчетаРасшифровки(ПараметрыОтчета, ПараметрыДанных, ПараметрыОтчета.АдресДанныхЯчеек);
	
КонецФункции

Функция ПараметрыНастройкиДополнительныхПолей(Знач Объект, Знач ВидАналитики, Знач ЭтоСтроки) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТипЗначения", ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ВидАналитики, "ТипЗначения"));
	ПараметрыФормы.Вставить("ДополнительныеПоля", ПоместитьВоВременноеХранилище(Объект.ДополнительныеПоля.Выгрузить()));
	ПараметрыФормы.Вставить("ЭтоСтроки", ЭтоСтроки);
	Возврат ПараметрыФормы;
	
КонецФункции

Процедура ОтразитьДокументыФоновымЗаданиемПоФормеСМаксимальнымПериодом(Периоды) Экспорт
	
	//++ НЕ УТКА
	
	НачалоПериода = Дата(3999, 12, 31);
	КонецПериода = Дата(1, 1, 1);
	
	Для Каждого Период из Периоды Цикл
		
		НачалоПериода = Мин(НачалоПериода, Период);
		КонецПериода = Макс(КонецПериода, Период);
		
	КонецЦикла;
	
	ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыФоновымЗаданием(НачалоПериода, КонецПериода);
	
	//-- НЕ УТКА
	
	Возврат; //Только для использования в УП
	
КонецПроцедуры

Функция НужноУвеличитьНомер(Идентификатор, ИндексОперанда, ТаблицаОперандов)
	
	Если ТипЗнч(ИндексОперанда) = Тип("Число") Тогда
		Операнд = ТаблицаОперандов.НайтиПоИдентификатору(ИндексОперанда);
	Иначе
		Операнд = ИндексОперанда;
	КонецЕсли;
		
	Для Каждого СтрокаОперанда из ТаблицаОперандов Цикл
		Если СтрокаОперанда.Идентификатор = Идентификатор Тогда
			
			Если Операнд.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы") Тогда
				
				Если ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Операнд.АдресСтруктурыЭлемента, "СтрокаЯчейки")
					<> ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаОперанда.АдресСтруктурыЭлемента, "СтрокаЯчейки")
					ИЛИ ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(Операнд.АдресСтруктурыЭлемента, "КолонкаЯчейки")
					<> ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(СтрокаОперанда.АдресСтруктурыЭлемента, "КолонкаЯчейки") 
					Тогда
					
					Возврат Истина;
					
				КонецЕсли;
				
			ИначеЕсли Операнд.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов") Тогда
				
				Если ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
					СтатьяБюджетов = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
															СтрокаОперанда.АдресСтруктурыЭлемента, "СтатьяБюджетов");
				Иначе
					СтатьяБюджетов = СтрокаОперанда.СтатьяПоказательТипИзмерения;
				КонецЕсли;
				
				Если Операнд.ЭлементВидаОтчетности <> СтатьяБюджетов Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли Операнд.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов") Тогда
				
				Если ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
					ПоказательБюджетов = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
														СтрокаОперанда.АдресСтруктурыЭлемента, "ПоказательБюджетов");
				Иначе
					ПоказательБюджетов = СтрокаОперанда.СтатьяПоказательТипИзмерения;
				КонецЕсли;
				
				Если Операнд.ЭлементВидаОтчетности <> ПоказательБюджетов Тогда
					Возврат Истина;
				КонецЕсли;
				
			ИначеЕсли Операнд.ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель") Тогда
				
				Если ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
					НефинансовыйПоказатель = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(
														СтрокаОперанда.АдресСтруктурыЭлемента, "НефинансовыйПоказатель");
				Иначе
					НефинансовыйПоказатель = СтрокаОперанда.СтатьяПоказательТипИзмерения;
				КонецЕсли;
				
				Если Операнд.ЭлементВидаОтчетности <> НефинансовыйПоказатель Тогда
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИмяОперанда(Знач Идентификатор, Знач ИдентификаторОперанда, Знач ТаблицаОперандов) Экспорт
	
	Результат = Идентификатор;
	Сч = 0;
	Пока НужноУвеличитьНомер(Идентификатор, ИдентификаторОперанда, ТаблицаОперандов) Цикл
		Сч = Сч + 1;
		Идентификатор = Результат + "_" + Формат(Сч, "ЧГ=");
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

Функция МоделиБюджетированияСОтборомПоДате(Дата) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МоделиБюджетирования.Ссылка КАК Значение,
	|	МоделиБюджетирования.Представление КАК Представление
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.Статус = &Статус
	|	И МоделиБюджетирования.НачалоДействия <= &Дата
	|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
	|			ИЛИ МоделиБюджетирования.КонецДействия >= &Дата)
	|	И НЕ МоделиБюджетирования.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
	Запрос.УстановитьПараметр("Дата",   Дата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеВыбора.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция МоделиБюджетированияСОтборомПоПериоду(НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МоделиБюджетирования.Ссылка КАК Значение,
	|	МоделиБюджетирования.Представление КАК Представление
	|ИЗ
	|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
	|ГДЕ
	|	МоделиБюджетирования.Статус = &Статус
	|	И МоделиБюджетирования.НачалоДействия <= &НачалоПериода
	|	И (МоделиБюджетирования.КонецДействия = &ПустаяДата
	|			ИЛИ МоделиБюджетирования.КонецДействия >= &ОкончаниеПериода)
	|	И НЕ МоделиБюджетирования.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыМоделейБюджетирования.Действует);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101000000');
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеВыбора.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Процедура СценарииСФильтром(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	Если Параметры.Свойство("НеДанныйСценарий") Тогда
		Фильтр = Параметры.НеДанныйСценарий;
		ВыборГруппИЭлементов = (Параметры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Сценарии.Ссылка КАК Значение,
		|	Сценарии.Представление КАК Представление,
		|	Сценарии.ПометкаУдаления КАК Пометка
		|ИЗ
		|	Справочник.Сценарии КАК Сценарии
		|ГДЕ
		|	НЕ Сценарии.Ссылка В (&Исключаемые)
		|	И (НЕ Сценарии.ЭтоГруппа ИЛИ &ВыборГруппИЭлементов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление");
		
		СсылкаНаДанныйСценарий = Новый СписокЗначений;
		Если ТипЗнч(Фильтр) = Тип("ФиксированныйМассив") Тогда
			СсылкаНаДанныйСценарий.ЗагрузитьЗначения(Новый Массив(Фильтр));
		Иначе
			СсылкаНаДанныйСценарий.Добавить(Фильтр);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВыборГруппИЭлементов", ВыборГруппИЭлементов);
		Запрос.УстановитьПараметр("Исключаемые", СсылкаНаДанныйСценарий);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДанныеВыбора.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

