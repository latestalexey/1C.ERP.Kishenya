	
#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура);
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура, "ЮридическаяСтруктура");
	Вариант.ФункциональныеОпции.Добавить("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	
	Вариант = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ОрганизационнаяСтруктура, "УправленческаяСтруктура");
	Вариант.ФункциональныеОпции.Добавить("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц");
	
КонецПроцедуры

Процедура СоздатьВТМестоСотрудникаВСтруктуреПредприятия(МенеджерВременныхТаблиц, ТолькоРазрешенные, ТаблицаФильтра, Знач ИзмеренияФильтра) Экспорт 
	
	ИзмеренияФильтра = СтрЗаменить(ИзмеренияФильтра, " ", "");
	
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"УдалитьМестоСотрудникаВСтруктуреПредприятия",
			МенеджерВременныхТаблиц,
			ТолькоРазрешенные,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтра, ИзмеренияФильтра),
			ПараметрыПостроения,
			"ВТМестоСотрудникаВСтруктуреПредприятия");
	
	Иначе 
		
		ИмяТаблицыКадровыеДанные = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадровыеДанныеСотрудников");
		ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц, ТаблицаФильтра, ИзмеренияФильтра);
		ОписательВТ.ИмяВТКадровыеДанныеСотрудников = ИмяТаблицыКадровыеДанные;
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "Подразделение");
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	КадровыеДанныеСотрудников.Период,
		               |	КадровыеДанныеСотрудников.Сотрудник,
		               |	СтруктураПредприятия.Ссылка КАК Подразделение
		               |ПОМЕСТИТЬ ВТМестоСотрудникаВСтруктуреПредприятия
		               |ИЗ
		               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		               |		ПО КадровыеДанныеСотрудников.Подразделение = СтруктураПредприятия.Источник";
					   
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ИмяТаблицыКадровыеДанные);			   
					   
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

Функция МестоСотрудниковВСтруктуреПредприятия(ТолькоРазрешенные, СписокСотрудников, ДатаПолученияДанных) Экспорт
	
	МестоСотрудниковВСтруктуреПредприятия = Новый Соответствие;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл 
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Период = ДатаПолученияДанных;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСотрудников.Период,
	               |	ТаблицаСотрудников.Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиДаты
	               |ИЗ
	               |	&ТаблицаСотрудников КАК ТаблицаСотрудников";
				   
	Запрос.Выполнить();
	
	СоздатьВТМестоСотрудникаВСтруктуреПредприятия(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, "ВТСотрудникиДаты", "Сотрудник, Период");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестоСотрудникаВСтруктуреПредприятия.Сотрудник,
	               |	МестоСотрудникаВСтруктуреПредприятия.Подразделение
	               |ИЗ
	               |	ВТМестоСотрудникаВСтруктуреПредприятия КАК МестоСотрудникаВСтруктуреПредприятия";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		МестоСотрудниковВСтруктуреПредприятия.Вставить(Выборка.Сотрудник, Выборка.Подразделение);
	КонецЦикла;
	
	Возврат МестоСотрудниковВСтруктуреПредприятия;
	
КонецФункции

Функция ЗапросПоПредставлению(ИмяПредставления, МассивИменВТИсточниковПараметров, ТолькоРазрешенные) Экспорт 
	
	Запрос = Неопределено;
	
	Если ВРег(ИмяПредставления) = "МЕСТОВСТРУКТУРЕПРЕДПРИЯТИЯ" Тогда
		
		ИмяВТИсточникДанных = МассивИменВТИсточниковПараметров[0];
		
		Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТИсточникДанных, "Сотрудник,Период");
			
			Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез("УдалитьМестоСотрудникаВСтруктуреПредприятия",  
				ТолькоРазрешенные, ОписаниеФильтра, ПараметрыПостроения, Истина, "Представления_МестоВСтруктуреПредприятия");

		Иначе 
			
			Запрос = Новый Запрос;
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	КадровыеДанныеСотрудников.Период,
			               |	КадровыеДанныеСотрудников.Сотрудник,
			               |	СтруктураПредприятия.Ссылка КАК Подразделение
			               |ПОМЕСТИТЬ Представления_МестоВСтруктуреПредприятия
			               |ИЗ
			               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			               |		ПО КадровыеДанныеСотрудников.Подразделение = СтруктураПредприятия.Источник";
						   
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ИмяВТИсточникДанных);
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные); 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ПриСозданииФормыПозицииШтатногоРасписания(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		// Если структуры соответствуют, то не показываем поле места в структуре предприятия.
		Возврат;
	КонецЕсли;
	
	// Создаем реквизит места в структуре предприятия.
	ОписаниеТипов = Новый ОписаниеТипов("РегистрСведенийМенеджерЗаписи.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия");
	РеквизитФормы = Новый РеквизитФормы("МестоВСтруктуреПредприятия", ОписаниеТипов, , , Истина);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы);
	
	// Добавляем поле ввода.
	Элементы = Форма.Элементы;
	Если Элементы.Найти("МестоВСтруктуреПредприятия") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле = Элементы.Добавить("МестоВСтруктуреПредприятия", Тип("ПолеФормы"), Элементы.МестоВСтруктуреПредприятияГруппа);
	Поле.Заголовок = НСтр("ru='Место в стр-ре предприятия';uk='Місце в стр-рі підприємства'");
	Поле.Вид = ВидПоляФормы.ПолеВвода;
	Поле.ПутьКДанным = "МестоВСтруктуреПредприятия.Подразделение";
	Поле.УстановитьДействие("ПриИзменении", "Подключаемый_МестоВСтруктуреПредприятияПриИзменении");
	
КонецПроцедуры

Процедура ПриПолученииДанныхФормыПозицииШтатногоРасписания(Форма, ПозицияСсылка, ЗначениеКопирования) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		// Если структуры соответствуют.
		Возврат;
	КонецЕсли;
	
	// Считываем место в структуре предприятия из регистра сведений в реквизит формы.
	МенеджерЗаписи = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Позиция = ПозицияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		Отбор = Новый Структура("Позиция", ЗначениеКопирования);
		Выборка = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда 
			МенеджерЗаписи.Подразделение = Выборка.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "МестоВСтруктуреПредприятия");
	
КонецПроцедуры

Процедура ПриЗаписиФормыПозицииШтатногоРасписания(Форма, ТекущийОбъект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		// Если структуры соответствуют.
		Возврат;
	КонецЕсли;
	
	// Записываем данные из реквизита формы в регистр сведений.
	МенеджерЗаписи = Форма.РеквизитФормыВЗначение("МестоВСтруктуреПредприятия");
	МенеджерЗаписи.Позиция = ТекущийОбъект.Ссылка;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура НастроитьОтображениеМестаВСтруктуреПредприятияВФормеСпискаШтатногоРасписания(Форма, ИмяОсновнойТаблицы, ИмяРеквизитаСписок = "Список") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Список = Форма[ИмяРеквизитаСписок];
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, """МестоВСтруктуреПредприятия"" КАК МестоВСтруктуреПредприятия", "МестоВСтруктуреПредприятия.Подразделение КАК МестоВСтруктуреПредприятия");
	Список.ТекстЗапроса = Список.ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
	|	ПО " + ИмяОсновнойТаблицы + ".Ссылка = МестоВСтруктуреПредприятия.Позиция";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "МестоВСтруктуреПредприятия", "Видимость", Истина);
	
	Элементы = Форма.Элементы;
	ГруппаМестоВСтруктуреПредприятия = Элементы.ГруппаМестоВСтруктуреПредприятия;
	
	Если Элементы.Найти("МестоВСтруктуреПредприятия") = Неопределено Тогда
		Поле = Элементы.Добавить("МестоВСтруктуреПредприятия", Тип("ПолеФормы"), ГруппаМестоВСтруктуреПредприятия);
		Поле.Заголовок = НСтр("ru='В структуре предприятия';uk='В структурі підприємства'");
		Поле.Вид = ВидПоляФормы.ПолеНадписи;
		Поле.Ширина = 12;
		Поле.ПутьКДанным = ИмяРеквизитаСписок + ".МестоВСтруктуреПредприятия";
	КонецЕсли;
	
КонецПроцедуры

// Считывает подразделение структуры предприятия, соответствующее позиции штатного расписания.
//
Функция МестоПозицииВСтруктуреПредприятия(Позиция) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МестоПозиции.Подразделение
		|ИЗ
		|	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозиции
		|ГДЕ
		|	МестоПозиции.Позиция = &Позиция");
		
	Запрос.УстановитьПараметр("Позиция", Позиция);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Выборка.Подразделение;
	
КонецФункции

// Заменяет текст запроса регистрации изменений объектов, имеющих реквизит с типом "СправочникСсылка.СтруктураПредприятия",
// для получения списка узлов-получателей по организациям, если структура предприятия соответствует структуре юридических лиц.
//
// Параметры:
//  ИмяПланаОбмена - Строка - Имя метаданных плана обмена.
//  Отказ - Булево - флаг отказа от выполнения правил регистрации.
//      Отказ от выполнения правил означает, что объект и присоединенные файлы не будет зарегистрированы на узлах плана
//      обмена, для которого создано это правило.
//  ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//  ПараметрыЗапроса - Структура - содержит значения свойств текущей версии объекта,
//      которые используются в качестве параметров в запросе для определения узлов-получателей.
//  ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//      при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//      недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить. Значение по
//      умолчанию - Истина.
//  Выгрузка - (только чтение) - Булево - параметр определяет контекст выполнения правила регистрации.
//      Истина - правило регистрации выполняется в контексте выгрузки объекта.
//      Ложь - правило регистрации выполняется в контексте перед записью объекта.
//  СтруктураПредприятия - Ссылка или массив ссылок на структуру предприятия, по которым нужно получить список узлов-получателей.
//
Процедура ОграничитьРегистрациюОбъектаОтборомПоОрганизациямСтруктурыПредприятия(ИмяПланаОбмена, Отказ, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Выгрузка, СтруктураПредприятия) Экспорт
	
	// Не ограничиваем, если структура предприятия не соответствует структуре юридических лиц
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("СтруктураПредприятия", СтруктураПредприятия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.Источник ССЫЛКА Справочник.Организации
	|			ТОГДА СтруктураПредприятия.Источник
	|		ИНАЧЕ ПодразделенияОрганизаций.Владелец
	|	КОНЕЦ КАК Организация
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ПО СтруктураПредприятия.Источник = ПодразделенияОрганизаций.Ссылка
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&СвойствоОбъекта_СтруктураПредприятия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка КАК Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
	|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОрганизации.Организация В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Организации.Организация
	|			ИЗ
	|				ВТОрганизации КАК Организации)
	|	И ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|ИЗ
	|	#ПланОбмена КАК ПланОбменаОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ #ПланОбменаОрганизации КАК ПланОбменаОрганизации
	|		ПО (ПланОбменаОрганизации.Ссылка = ПланОбменаОсновнаяТаблица.Ссылка)
	|ГДЕ
	|	ПланОбменаОсновнаяТаблица.Ссылка <> &ИмяПланаОбменаЭтотУзел
	|	И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
	|	И &УсловиеОтбораПоРеквизитуФлагу
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОбменаОсновнаяТаблица.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ПланОбменаОрганизации.Организация) = 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбменаОрганизации",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1.Организации';uk='ПланОбмена.%1.Организации'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='ПланОбмена.%1';uk='ПланОбмена.%1'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПланаОбменаЭтотУзел",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='&%1ЭтотУзел';uk='&%1ЭтотУзел'"), ИмяПланаОбмена));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбораПоРеквизитуФлагу", "[УсловиеОтбораПоРеквизитуФлагу]");
	
КонецПроцедуры

Процедура ДобавитьВМассивСоздаваемыеРеквизитыФормыСотрудника(МассивДобавляемыхРеквизитов) Экспорт
	
	Если Пользователи.РолиДоступны("ИзменениеМестаСотрудникаВСтруктуреПредприятия") Тогда
		
		
	КонецЕсли; 
	
КонецПроцедуры

#Область ДатыЗапретаИзменения

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьФормуСпискаШтатногоРасписания(Форма) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Форма.СтруктураПредприятияСписок.ОсновнаяТаблица = "Справочник.СтруктураПредприятия";
	
	Элементы = Форма.Элементы;
	ГруппаСтруктураПредприятия = Элементы.ГруппаСтруктураПредприятия;
	
	Если Элементы.Найти("СтруктураПредприятияСписок") = Неопределено Тогда
		ПолеСтруктураПредприятияСписок = Элементы.Добавить("СтруктураПредприятияСписок", Тип("ТаблицаФормы"), ГруппаСтруктураПредприятия);
		ПолеСтруктураПредприятияСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ПолеСтруктураПредприятияСписок.Отображение = ОтображениеТаблицы.Дерево;
		ПолеСтруктураПредприятияСписок.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		ПолеСтруктураПредприятияСписок.ПутьКДанным = "СтруктураПредприятияСписок";
		ПолеСтруктураПредприятияСписок.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_СтруктураПредприятияСписокПриАктивизацииСтроки");
	КонецЕсли;
	
	Если Элементы.Найти("СтруктураПредприятияСписокПодразделение") = Неопределено Тогда
		ПолеПодразделение = Элементы.Добавить("СтруктураПредприятияСписокПодразделение", Тип("ПолеФормы"), ПолеСтруктураПредприятияСписок);
		ПолеПодразделение.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеПодразделение.Заголовок = НСтр("ru='Подразделение';uk='Підрозділ'");
		ПолеПодразделение.ПутьКДанным = "СтруктураПредприятияСписок.Ссылка";
	КонецЕсли;
	
	ИмяКоманды = "ВидСтруктураПредприятия";
	ВидСпискаГруппа = Элементы.ВидСписка;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru='Структура предприятия';uk='Структура підприємства'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ВидСпискаГруппа);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "СоздатьУправленческуюПозицию";
	СоздатьСкопироватьГруппа = Элементы.СоздатьСкопироватьГруппа;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru='Создать';uk='Створити'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), СоздатьСкопироватьГруппа);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписания(Форма, СозданиеНовой) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"АвтоОтметкаНезаполненного",
		Ложь);
	
	Если СозданиеНовой Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Владелец",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Владелец) И Объект.Владелец <> УправленческаяОрганизация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Подразделение));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Форма.МестоВСтруктуреПредприятия.Подразделение));
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписанияПриВеденииИстории(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если Объект.Владелец <> УправленческаяОрганизация Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"АвтоОтметкаНезаполненного",
		Ложь);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Должность",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Должность));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Форма.МестоВСтруктуреПредприятия.Подразделение));
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовУправленияШтатногоРасписанияВнешниеДанные(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"МестоВСтруктуреПредприятия",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Форма.МестоВСтруктуреПредприятия.Подразделение));
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Владелец");
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если Организация <> УправленческаяОрганизация Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Подразделение",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.Подразделение));
		
КонецПроцедуры

Процедура УправленческаяПозицияПриСозданииНаСервере(Форма, Параметры, СозданиеНовой) Экспорт 
	
	Если Не Параметры.Свойство("УправленческаяПозиция") Тогда 
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если СозданиеНовой Тогда 
		Объект.Владелец = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПроверяемыеРеквизитыШтатногоРасписания(ПроверяемыеРеквизиты) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Подразделение");
	
КонецПроцедуры

Функция СтруктураПредприятияСоответствуетСтруктуреЮридическихЛиц() Экспорт 
	
	Возврат Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц");
	
КонецФункции

Процедура ДополнитьФормуДокументовИзмененияШтатногоРасписания(Форма) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "ПодборУправленческойПозиции";
	Элементы = Форма.Элементы;
	
	Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Заголовок = НСтр("ru='Подбор';uk='Підбір'");
		КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
		КомандаФормы.ИзменяетСохраняемыеДанные = Истина;
	КонецЕсли;
	
	Если Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.Позиции.КоманднаяПанель);
		Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Элемент.ИмяКоманды = ИмяКоманды;
	КонецЕсли;
	
	Если Элементы.Найти("ПозицииМестоВСтруктуреПредприятия") = Неопределено Тогда
		ПолеПодразделение = Элементы.Добавить("ПозицииМестоВСтруктуреПредприятия", Тип("ПолеФормы"), Элементы.ПодразделениеДолжностьГруппа);
		ПолеПодразделение.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПодразделение.ПутьКДанным = "Объект.Позиции.МестоВСтруктуреПредприятия";
		ПолеПодразделение.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПолученииВнешнихДанныхПозицииШтатногоРасписания(Форма, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Позиция = ДанныеПозиции.ПозицияШтатногоРасписания;
	МенеджерЗаписи.Подразделение = ДанныеПозиции.МестоВСтруктуреПредприятия;
	
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "МестоВСтруктуреПредприятия");
	
КонецПроцедуры

Процедура ЗаполнитьМестоВСтруктуреПредприятияПоДаннымФормы(Форма, ДанныеПозиции) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПозиции.МестоВСтруктуреПредприятия = Форма.МестоВСтруктуреПредприятия.Подразделение;
		
КонецПроцедуры

Процедура ПриПроведенииДокументовИзмененияШтатногоРасписания(Объект) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	СведенияОНаименованиях = Неопределено;
	Объект.ДополнительныеСвойства.Свойство("СведенияОНаименованиях", СведенияОНаименованиях);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПозицииШтатногоРасписания", Объект.Позиции);
	Запрос.УстановитьПараметр("ИзменитьОрганизацию", Объект.Организация <> УправленческаяОрганизация);
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПозицииШтатногоРасписания.Позиция,
	               |	ПозицииШтатногоРасписания.ИдентификаторСтрокиПозиции,
	               |	ПозицииШтатногоРасписания.Должность,
	               |	ПозицииШтатногоРасписания.Подразделение,
	               |	ПозицииШтатногоРасписания.МестоВСтруктуреПредприятия
	               |ПОМЕСТИТЬ ВТПозиции
	               |ИЗ
	               |	&ПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Позиции.Позиция,
	               |	Позиции.ИдентификаторСтрокиПозиции,
	               |	Позиции.Должность,
	               |	Позиции.Подразделение,
	               |	Позиции.МестоВСтруктуреПредприятия
	               |ИЗ
	               |	ВТПозиции КАК Позиции
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
	               |		ПО Позиции.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
	               |ГДЕ
	               |	(Позиции.Позиция.Владелец = &УправленческаяОрганизация
	               |				И &ИзменитьОрганизацию
	               |			ИЛИ Позиции.Позиция.Должность <> Позиции.Должность
	               |			ИЛИ Позиции.Позиция.Подразделение <> Позиции.Подразделение)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Позиции.Позиция,
	               |	Позиции.Позиция.Наименование КАК Наименование,
	               |	Позиции.ИдентификаторСтрокиПозиции,
	               |	Позиции.Должность,
	               |	Позиции.МестоВСтруктуреПредприятия
	               |ИЗ
	               |	ВТПозиции КАК Позиции
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
	               |		ПО Позиции.Позиция = МестоПозицииВСтруктуреПредприятия.Позиция
	               |ГДЕ
	               |	ЕСТЬNULL(МестоПозицииВСтруктуреПредприятия.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) <> Позиции.МестоВСтруктуреПредприятия";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
		ПозицияОбъект.Владелец = Объект.Организация;
		ПозицияОбъект.Должность = Выборка.Должность;
		ПозицияОбъект.Подразделение = Выборка.Подразделение;
		
		НаименованиеПозиции = "";
		Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие") Тогда 
			НаименованиеПозиции = СведенияОНаименованиях.Получить(Выборка.ИдентификаторСтрокиПозиции);
			СведенияОНаименованиях.Удалить(Выборка.ИдентификаторСтрокиПозиции);
		ИначеЕсли ЗначениеЗаполнено(Выборка.МестоВСтруктуреПредприятия) Тогда  
			НаименованиеПозиции = ОрганизационнаяСтруктураКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				Объект.Организация,
				Выборка.Должность,
				Выборка.МестоВСтруктуреПредприятия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеПозиции) Тогда 
			ПозицияОбъект.Наименование = НаименованиеПозиции;
		КонецЕсли;
		
		ПозицияОбъект.Записать();
		
	КонецЦикла;	
		
	Выборка = РезультатыЗапроса[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Выборка.Позиция);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Позиция = Выборка.Позиция;
		НоваяЗапись.Подразделение = Выборка.МестоВСтруктуреПредприятия;
		
		НаименованиеПозиции = "";
		Если ТипЗнч(СведенияОНаименованиях) = Тип("Соответствие") Тогда 
			НаименованиеПозиции = СведенияОНаименованиях.Получить(Выборка.ИдентификаторСтрокиПозиции);
			СведенияОНаименованиях.Удалить(Выборка.ИдентификаторСтрокиПозиции);
		ИначеЕсли ЗначениеЗаполнено(Выборка.МестоВСтруктуреПредприятия) Тогда  
			НаименованиеПозиции = ОрганизационнаяСтруктураКлиентСервер.НаименованиеПозицииШтатногоРасписания(
				Объект.Организация,
				Выборка.Должность,
				Выборка.МестоВСтруктуреПредприятия);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеПозиции) И НаименованиеПозиции <> Выборка.Наименование Тогда 
			ПозицияОбъект = Выборка.Позиция.ПолучитьОбъект();
			ПозицияОбъект.Наименование = НаименованиеПозиции;
			ПозицияОбъект.Записать();
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаВТМестоПозицииВСтруктуреПредприятия(ИмяВТ = "ВТВсеПозицииНаДатуАктуальности", ИмяПоляПозиция = "ПозицияШтатногоРасписания") Экспорт 
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	МестоПозицииВСтруктуреПредприятия.Позиция КАК Позиция,
	               |	МестоПозицииВСтруктуреПредприятия.Подразделение КАК МестоВСтруктуреПредприятия
	               |ПОМЕСТИТЬ ВТМестоПозицииВСтруктуреПредприятия
	               |ИЗ
	               |	РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииВСтруктуреПредприятия
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеПозицииНаДатуАктуальности КАК ВсеПозицииНаДатуАктуальности
	               |		ПО (МестоПозицииВСтруктуреПредприятия.Позиция = &ИмяПоляПозиция)";
				   
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляПозиция", "ВсеПозицииНаДатуАктуальности." + ИмяПоляПозиция);			   
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТВсеПозицииНаДатуАктуальности", ИмяВТ);			   
				   
	Возврат ТекстЗапроса;			   
	
КонецФункции

Функция ДобавитьПолеСведенийОМестеВСтруктуреПредприятия(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных) Экспорт 
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОМестеВСтруктуреПредприятия(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОМестеВСтруктуреПредприятия", Истина);
		
		КадровыйУчет.ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, "БазовыеКадровыеДанныеСотрудников", "ДолжностьПоШтатномуРасписанию");
		
		ПутьКДанным = ПутьКДаннымСведенийОМестеВСтруктуреПредприятия(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОМестеВСтруктуреПредприятия(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("МестоВСтруктуреПредприятия");
		
КонецФункции

Функция ПутьКДаннымСведенийОМестеВСтруктуреПредприятия(Знач ИмяПоля)
	
	ИмяПоляВВерхнемРегистре = ВРег(ИмяПоля);
	
	ПутьКДанным = "";
	
	Если ИмяПоляВВерхнемРегистре = ВРег("МестоВСтруктуреПредприятия") Тогда
		ПутьКДанным = "МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Подразделение";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаСведенияОМестеВСтруктуреПредприятия(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт 
	
	Если ИсточникиДанных.Получить("СведенияОМестеВСтруктуреПредприятия") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда 
		
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
				|		ПО (ВЫБОР
				|				КОГДА ТаблицаОтборовСотрудников.ГоловнойСотрудник = ТаблицаОтборовСотрудников.Сотрудник
				|						ТОГДА КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию
				|				ИНАЧЕ СостоянияПодработок.ДолжностьПоШтатномуРасписанию
				|			КОНЕЦ = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция)}";
				
	Иначе 
				
		Запрос.Текст = Запрос.Текст + Символы.ПС
			+ "		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия КАК МестоПозицииШтатногоРасписанияВСтруктуреПредприятия
				|		ПО (КадроваяИсторияСотрудников.ДолжностьПоШтатномуРасписанию = МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.Позиция)}";
				
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораОрганизаций(Параметры, ПоказыватьУправленческуюОрганизацию) Экспорт 
	
	ПоказыватьОрганизацию = ?(Параметры.Свойство("ПоказыватьУправленческуюОрганизацию"), Параметры.ПоказыватьУправленческуюОрганизацию, Ложь);
	
	ПоказыватьУправленческуюОрганизацию = ПоказыватьОрганизацию И ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц");
	
КонецПроцедуры

Процедура ШтатноеРасписаниеПриЗаписи(Объект, Отказ) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц") Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Источник", Объект.Подразделение);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Ссылка КАК Подразделение
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	СтруктураПредприятия.Источник = &Источник";
				   
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		НаборЗаписей = РегистрыСведений.МестоПозицииШтатногоРасписанияВСтруктуреПредприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Позиция.Установить(Объект.Ссылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Позиция = Объект.Ссылка;
		НоваяЗапись.Подразделение = Выборка.Подразделение;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьУправленческуюОрганизацию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправленческаяОрганизация = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.Организации.УправленческаяОрганизация");
	
	Если УправленческаяОрганизация <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	УправленческаяОрганизация = Справочники.Организации.СоздатьЭлемент();
	УправленческаяОрганизация.Наименование = НСтр("ru='Управленческая организация';uk='Управлінська організація'");
	УправленческаяОрганизация.ИмяПредопределенныхДанных = "УправленческаяОрганизация";
	
	УправленческаяОрганизация.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#Область БлокФункцийПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "ОрганизационнаяСтруктура.УстановитьРежимСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц";
	Обработчик.НачальноеЗаполнение = Истина;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

Процедура УстановитьРежимСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц() Экспорт
	
	Соответствует = Истина;
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриУстановкеСоответствияСтруктурыПредприятияСтруктуреЮридическихЛиц(Соответствует);
	
	Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Установить(Не Соответствует);
	
КонецПроцедуры

#КонецОбласти

#Область НачальнаяНастройкаПрограммы

Процедура ЗначенияСохраняемыхРеквизитовФормыНачальнаяНастройкаПрограммы(Форма, СохраняемыеРеквизиты) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.РаботаВКОРП Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеРеквизиты.Вставить("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло", Форма.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло);
	
КонецПроцедуры

Процедура СохраненныеНастройкиВРеквизитыФормыНачальнаяНастройкаПрограммы(Форма, СохраненныеНастройки) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Если СохраненныеНастройки.Свойство("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло") Тогда
		Форма["СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло"] = СохраненныеНастройки["СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло"];
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиПрограммыВРеквизитыФормы(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = ?(Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Получить(), 0, 1);
	
КонецПроцедуры

Процедура ПолучитьНастройкиПрограммы(НастройкиПрограммы) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПрограммы.Вставить("СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло", ?(Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц, 1, 0));
	
КонецПроцедуры

Процедура ЗаписатьНастройкиНачальнаяНастройкаПрограммы(Параметры) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц.Установить(Параметры.СтруктураПредприятияСоответствуетСтруктуреЮридическихЛицЧисло = 0);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
