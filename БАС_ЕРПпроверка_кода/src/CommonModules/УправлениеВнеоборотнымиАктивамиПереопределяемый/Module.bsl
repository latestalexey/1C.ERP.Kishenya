
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает тип ссылка на справочник для хранения основных средст
//
// Возвращаемое значение:
// 		Тип - Тип ссылки на справочник ОС
//
Функция ТипДанныхОсновныхСредств() Экспорт
	
	Возврат Тип("СправочникСсылка.ОбъектыЭксплуатации");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ АМОРТИЗАЦИИ ОС И НМА

// Процедура ВыполнитьДополнительныеДействияНачислениеАмортизации выполняет 
// отражение начисленной амортизации по ОС и НМА в дополнительных объектах 
// конфигурации. Процедура вызывается из 
// УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации() при 
// проведении документов:
//      - ПеремещениеОС
//		- ПодготовкаКПередачеОС
//		- ПринятиеКУчетуОС (при включении в расходы НУ стоимости объекта ОС)
//		- РегламентнаяОперация (с видом операции "АмортизацияИИзносОС")
//		- РегламентнаяОперация (с видом операции "АмортизацияНМАИсписаниеРасходовПоНИОКР")
// При добавлении новых регистров необходимо для них назначать в качестве регистраторов указанные 
// документы.
//
// 
// Параметры:
//  ТаблицаЗатрат - таблица значений. Колонки таблицы, формируемые по умолчанию, описаны ниже.
//						Дополнительные данные могут быть добавлены в таблицу при переопределении
//						процедуры ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл() этого модуля.
//		ОбъектУчета			- СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.НематериальныеАктивы;
//		Подразделение 		- подразделение счета учета ОС и НМА;
//		ПодразделениеЗатрат	- подразделение, на которое относятся затраты по амортизации (ПодразделениеДт);
//		Субконто1			- Значение 1-ого субконто счета затрат (счет Дт);
//		Субконто2			- Значение 2-ого субконто счета затрат (счет Дт);
//		Субконто3			- Значение 3-ого субконто счета затрат (счет Дт);
//		СуммаБУ				- Число, сумма начисленной амортизации по БУ;
//		СчетАмортизации		- ПланСчетовСсылка.Хозрасчетный, счет начисленной амортизации (Счет Кт проводки),
//								например, 02.01;
//		СчетЗатрат			- ПланСчетовСсылка.Хозрасчетный, счет отнесения затрат по амортизации, например, 20.
//		
//  ТаблицаРеквизиты - таблица значений с реквизитами из шапки документа, состав граф 
//						таблицы не переопределяется:
//		Организация			- СправочникСсылка.Организации;
//		Период				- Дата проведения;
//		Регистратор			- Ссылка на документ - регистратор.
//
//  Движения - коллекция наборов записей регистров.
//  Отказ - Булево, признак отказа от проведения.
//
Процедура ВыполнитьДополнительныеДействияНачислениеАмортизации(ТаблицаЗатрат, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	// РегламентированныйУчетОСиНМА
	
	

	// Конец РегламентированныйУчетОСиНМА

КонецПроцедуры

// НАЧИСЛЕНИЕ АМОРТИЗАЦИИ

Процедура СформироватьДвиженияНачислениеАмортизации(ТаблицаЗатрат, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыНачислениеАмортизации(ТаблицаЗатрат, ТаблицаРеквизиты);

	Если Параметры.ТаблицаЗатрат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете 		= 	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	Перечисления.МетодыНачисленияАмортизации.Линейный;

	Если ПустаяСтрока(Реквизиты.Содержание) Тогда
		Содержание = "Амортизация";
	Иначе
		Содержание = Реквизиты.Содержание;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из Параметры.ТаблицаЗатрат Цикл

		Если СтрокаТаблицы.СуммаБУ = 0
			И СтрокаТаблицы.СуммаНУ = 0
			И СтрокаТаблицы.СуммаПР = 0
			И СтрокаТаблицы.СуммаВР = 0 Тогда

			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;

		Проводка.Содержание = Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.Субконто3);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.ПодразделениеЗатрат;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетАмортизации;

		Если ТипЗнч(СтрокаТаблицы.ОбъектУчета) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, СтрокаТаблицы.ОбъектУчета);
		ИначеЕсли ТипЗнч(СтрокаТаблицы.ОбъектУчета) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, СтрокаТаблицы.ОбъектУчета);
		КонецЕсли;

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;

		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

	// Вызов переопределяемой процедуры для выполнения связанных движений в других подсистемах.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияНачислениеАмортизации(ТаблицаЗатрат, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизации(ТаблицаЗатрат, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаЗатрат

	СписокОбязательныхКолонок = ""
	+ "ОбъектУчета,"         // <СправочникСсылка.ОбъектыЭксплуатации>
	+ "ПодразделениеЗатрат," // <СправочникСсылка.ПодразделенияОрганизации> - подразделение организации, в которое
		// будут отнесены затраты от начисления амортизации
	+ "Подразделение,"       // <СправочникСсылка.ПодразделенияОрганизации> - подразделение организации, в котором
		// учитывается ОС
	+ "Субконто1,"           // <Характеристика.ВидыСубконтоХозрасчетные> - субконто затрат
	+ "Субконто2,"           // <Характеристика.ВидыСубконтоХозрасчетные> - субконто затрат
	+ "Субконто3,"           // <Характеристика.ВидыСубконтоХозрасчетные> - субконто затрат
	+ "СуммаБУ,"             // <Число, 15, 2> - сумма амортизации по данным бухгалтерского учета
	+ "СуммаНУ,"             // <Число, 15, 2> - сумма амортизации по данным налогового учета
	+ "СуммаПР,"             // <Число, 15, 2> - постоянные разницы в оценке амортизации (ПБУ 18/02)
	+ "СуммаВР,"             // <Число, 15, 2> - временные разницы в оценке амортизации (ПБУ 18/02)
	+ "СчетЗатрат,"          // <ПланСчетовСсылка.Хозрасчетный> - счет учета затрат по амортизации ОС
	+ "СчетАмортизации";     // <ПланСчетовСсылка.Хозрасчетный> - счет начисления амортизации ОС

	Параметры.Вставить("ТаблицаЗатрат",
		ПолучитьТаблицуПараметровПроведения(ТаблицаЗатрат, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Содержание";  // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ ПО НАПРАВЛЕНИЯМ ЗАТРАТ

// Функция ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл возвращает таблицу затрат
// по амортизации.
//
//
// Параметры:
//  ТаблицаАмортизации - таблица значений с рассчитанной амортизацией со следующими колонками:
//		НаправлениеАмортизации - СправочникСсылка.СпособыОтраженияРасходовПоАмортизации
//		НомерСтроки - Число
//		ОбъектУчета	- СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.НематериальныеАктивы
//		Подразделение
//		СуммаАмортизацииБУ - Число
//		СуммаАмортизацииВР - Число
//		СуммаАмортизацииНУ - Число
//		СуммаАмортизацииПР - Число
//		СуммаКапитальныхВложенийВключаемыхВРасходы - Число
//		СчетНачисленияАмортизации - ПланСчетовСсылка.Хозрасчетный
//		СчетУчета - ПланСчетовСсылка.Хозрасчетный
//
//	ТаблицаРеквизитов - таблица значений с данными из шапки документа - регистратора
//		Организация	- СправочникСсылка.Организации
//		Период - Дата
//		Регистратор	- ДокументСсылка.РегламентнаяОперация
//
// Возвращаемое значение:
//  Таблица значений с данными по распределению амортизации по направлениям.
//	В таблице обязательно должны содержаться колонки, определенные по тексту функции для 
//	переменной ТаблицаЗатрат, возможно добавление дополнительных колонок для последующего 
//	использования в процедуре ВыполнитьДополнительныеДействияНачислениеАмортизации(). 
//
Функция ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаАмортизации, ТаблицаРеквизиты, Отказ) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета,
		|	ТаблицаАмортизации.СчетНачисленияАмортизации КАК СчетАмортизации,
		|	ТаблицаАмортизации.СуммаАмортизацииБУ КАК СуммаБУ,
		|	ТаблицаАмортизации.СуммаАмортизацииНУ КАК СуммаНУ,
		|	ТаблицаАмортизации.СуммаАмортизацииВР КАК СуммаВР,
		|	ТаблицаАмортизации.СуммаАмортизацииПР КАК СуммаПР,
		|	ТаблицаАмортизации.Коэффициент КАК Коэффициент,
		|	ТаблицаАмортизации.Подразделение КАК Подразделение,
		|	ТаблицаАмортизации.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаАмортизации.НачислятьИзнос КАК НачислятьИзнос,
		|	ТаблицаАмортизации.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
		|	ТаблицаАмортизации.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходов,
		|	ТаблицаАмортизации.СчетПередачиРасходов КАК СчетПередачиРасходов,
		|	ТаблицаАмортизации.СпособОтраженияРасходовЗаданДокументом КАК СпособОтраженияРасходовЗаданДокументом,
		|	ТаблицаАмортизации.СпособОтраженияРасходов КАК СпособОтраженияРасходов
		|ПОМЕСТИТЬ ВтТаблицаАмортизации
		|ИЗ
		|	&ТаблицаАмортизации КАК ТаблицаАмортизации
		|ГДЕ
		|	(ТаблицаАмортизации.СуммаАмортизацииБУ <> 0
		|			ИЛИ ТаблицаАмортизации.СуммаАмортизацииНУ <> 0
		|			ИЛИ ТаблицаАмортизации.СуммаАмортизацииВР <> 0
		|			ИЛИ ТаблицаАмортизации.СуммаАмортизацииПР <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета,
		|	ТаблицаАмортизации.СуммаБУ КАК СуммаБУ,
		|	ТаблицаАмортизации.СуммаНУ КАК СуммаНУ,
		|	ТаблицаАмортизации.СуммаВР КАК СуммаВР,
		|	ТаблицаАмортизации.СуммаПР КАК СуммаПР,
		|	ТаблицаАмортизации.Коэффициент КАК Коэффициент,
		|	ТаблицаАмортизации.Подразделение КАК Подразделение,
		|	ТаблицаАмортизации.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаАмортизации.НачислятьИзнос КАК НачислятьИзнос,
		|	ТаблицаАмортизации.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
		|	ТаблицаАмортизации.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходов,
		|	ТаблицаАмортизации.СчетПередачиРасходов КАК СчетПередачиРасходов
		|ИЗ
		|	ВтТаблицаАмортизации КАК ТаблицаАмортизации
		|ГДЕ
		|	НЕ ТаблицаАмортизации.СпособОтраженияРасходовЗаданДокументом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаАмортизации.ОбъектУчета КАК ОбъектУчета,
		|	ТаблицаАмортизации.СуммаБУ КАК СуммаБУ,
		|	ТаблицаАмортизации.СуммаНУ КАК СуммаНУ,
		|	ТаблицаАмортизации.СуммаВР КАК СуммаВР,
		|	ТаблицаАмортизации.СуммаПР КАК СуммаПР,
		|	ТаблицаАмортизации.Коэффициент КАК Коэффициент,
		|	ТаблицаАмортизации.НачислятьИзнос КАК НачислятьИзнос,
		|	ДокументСпособаДляОС.ОтражениеАмортизационныхРасходов.(
		|		Подразделение,
		|		СтатьяРасходов,
		|		АналитикаРасходов,
		|		Коэффициент,
		|		ПередаватьРасходыВДругуюОрганизацию,
		|		ОрганизацияПолучательРасходов,
		|		СчетПередачиРасходов
		|	) КАК ТаблицаРаспределения
		|ИЗ
		|	ВтТаблицаАмортизации КАК ТаблицаАмортизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровОС КАК ДокументСпособаДляОС
		|		ПО ТаблицаАмортизации.СпособОтраженияРасходов = ДокументСпособаДляОС.Ссылка
		|ГДЕ
		|	ТаблицаАмортизации.СпособОтраженияРасходовЗаданДокументом
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаАмортизации.ОбъектУчета,
		|	ТаблицаАмортизации.СуммаБУ,
		|	ТаблицаАмортизации.СуммаНУ,
		|	ТаблицаАмортизации.СуммаВР,
		|	ТаблицаАмортизации.СуммаПР,
		|	ТаблицаАмортизации.Коэффициент,
		|	ТаблицаАмортизации.НачислятьИзнос КАК НачислятьИзнос,
		|	ДокументСпособаДляНМА.ОтражениеАмортизационныхРасходов.(
		|		Подразделение,
		|		СтатьяРасходов,
		|		АналитикаРасходов,
		|		Коэффициент,
		|		ПередаватьРасходыВДругуюОрганизацию,
		|		ОрганизацияПолучательРасходов,
		|		СчетПередачиРасходов
		|	)
		|ИЗ
		|	ВтТаблицаАмортизации КАК ТаблицаАмортизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровНМА КАК ДокументСпособаДляНМА
		|		ПО ТаблицаАмортизации.СпособОтраженияРасходов = ДокументСпособаДляНМА.Ссылка
		|ГДЕ
		|	ТаблицаАмортизации.СпособОтраженияРасходовЗаданДокументом");
	
	Запрос.УстановитьПараметр("ТаблицаАмортизации", ТаблицаАмортизации);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЗатрат = ПустаяТаблицаАмортизации();
	
	Если Не Результат[1].Пустой() Тогда
		
		ТаблицаЗатрат = Результат[1].Выгрузить();
		
	КонецЕсли;
	
	Если Не Результат[2].Пустой() Тогда
		
		Выборка = Результат[2].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТаблицаРаспределения = Выборка.ТаблицаРаспределения.Выгрузить();
			МассивКоэффицентов = ТаблицаРаспределения.ВыгрузитьКолонку("Коэффициент");
			СуммыБУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.СуммаБУ, МассивКоэффицентов);
			СуммыНУ = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.СуммаНУ, МассивКоэффицентов);
			СуммыПР = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.СуммаПР, МассивКоэффицентов);
			СуммыВР = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.СуммаВР, МассивКоэффицентов);
			Коэффициенты = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Выборка.Коэффициент, МассивКоэффицентов, 100);
			
			Если СуммыБУ = Неопределено
				И СуммыНУ = Неопределено
				И СуммыПР = Неопределено
				И СуммыВР = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Для Индекс=0 По ТаблицаРаспределения.Количество()-1 Цикл
				ПравилоОтражения = ТаблицаРаспределения[Индекс];
				СтрокаТаблицыЗатрат = ТаблицаЗатрат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, Выборка);
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, ПравилоОтражения);
				СтрокаТаблицыЗатрат.СуммаБУ = ?(СуммыБУ=Неопределено, 0, СуммыБУ[Индекс]);
				СтрокаТаблицыЗатрат.СуммаНУ = ?(СуммыНУ=Неопределено, 0, СуммыНУ[Индекс]);
				СтрокаТаблицыЗатрат.СуммаПР = ?(СуммыПР=Неопределено, 0, СуммыПР[Индекс]);
				СтрокаТаблицыЗатрат.СуммаВР = ?(СуммыВР=Неопределено, 0, СуммыВР[Индекс]);
				СтрокаТаблицыЗатрат.Коэффициент = ?(Коэффициенты=Неопределено, 0, Коэффициенты[Индекс]);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаЗатрат;
	
КонецФункции

Функция ПустаяТаблицаАмортизации() Экспорт
	
	ТаблицаЗатрат = Новый ТаблицаЗначений;
	
	МассивТиповОбъектаУчета = Новый Массив;
	МассивТиповОбъектаУчета.Добавить(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	МассивТиповОбъектаУчета.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаЗатрат.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов(МассивТиповОбъектаУчета));
	ТаблицаЗатрат.Колонки.Добавить("СчетАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаЗатрат.Колонки.Добавить("СуммаБУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаЗатрат.Колонки.Добавить("СуммаНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаЗатрат.Колонки.Добавить("СуммаВР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаЗатрат.Колонки.Добавить("СуммаПР", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаЗатрат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаЗатрат.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ТаблицаЗатрат.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	ТаблицаЗатрат.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	ТаблицаЗатрат.Колонки.Добавить("ПередаватьРасходыВДругуюОрганизацию", Новый ОписаниеТипов("Булево"));
	ТаблицаЗатрат.Колонки.Добавить("ОрганизацияПолучательРасходов", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаЗатрат.Колонки.Добавить("СчетПередачиРасходов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаЗатрат.Колонки.Добавить("НачислятьИзнос", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаЗатрат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// АМОРТИЗАЦИОННАЯ ПРЕМИЯ

// Процедура ВыполнитьДополнительныеДействияНачислениеАмортизационнойПремии
// вызывается из УчетОСВызовСервера.СформироватьДвиженияНачислениеАмортизационнойПремии() 
// после формирования проводок в регламентированном учете для отражения
// затрат НУ, связанных с амортизационной премией, в дополнительных регистрах.
// Получает те же параметры, что и УчетОСВызовСервера.СформироватьДвиженияНачислениеАмортизационнойПремии().
// 
// 
// Параметры:
//  ТаблицаНачисленияАмортизационнойПремии - таблица значений с графами:
//		ДокументАмортизационнойПремии 	- документ, которым была отражена амортизационная премия (Дт КВ)
//		ОсновноеСредство				- объект ОС
//		Подразделение					- подразделение, на котором отражена амортизационная премия на счете КВ
//		ПодразделениеПоАмортизационнойПремии - подразделение, по которому отражены расходы по амортизационной премии (Счет Дт)
//		СубконтоПоАмортизационнойПремии1 - значение 1-го субконто счета Дт
//		СубконтоПоАмортизационнойПремии2 - значение 2-го субконто счета Дт
//		СубконтоПоАмортизационнойПремии3 - значение 3-го субконто счета Дт
//		СуммаВР
//		СуммаНУ
//		СуммаПР
//		СчетУчета						- ПланСчетов.Хозрасчетный, счет учета 
//		СчетУчетаЗатратПоАмортизационнойПремии - ПланСчетов.Хозрасчетный, счет отражения затрат по аморт.премии
//
//	ТаблицаРеквизиты - таблица значений с графами:
//		Организация	- СправочникСсылка.Организации
//		Период - Дата
//		Регистратор	- Документ-регистратор
//
//  Движения - коллекция наборов записей регистров.
//  Отказ - Булево, признак отказа от проведения.
//
Процедура ВыполнитьДополнительныеДействияНачислениеАмортизационнойПремии(ТаблицаНачисленияАмортизационнойПремии, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	// РегламентированныйУчетОСиНМА
	

	// Конец РегламентированныйУчетОСиНМА
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫБЫТИЕ ОБЪЕКТОВ ОС И НМА

// Процедура ВыполнитьДополнительныеДействияСписаниеОС вызывается из 
// УчетОСВызовСервера.СформироватьДвиженияСписаниеОстаточнойСтоимостиОС() после определения
// остаточной стоимости объекта ОС для возможности отражения дополнительных движений
// при проведении документов:
//		- СписаниеОС
// При добавлении новых регистров необходимо для них назначать в качестве регистраторов 
// указанные документы.
// 
// 
// Параметры:
//  ТаблицаСтоимости - таблица значений с графами:
//		ОсновноеСредство 	- СправочникСсылка.ОбъектыЭксплуатации
//		СтоимостьБУ			- Число, остаточная стоимость объект ОС по БУ
//		Субконто			- Значение субконто СчетаСписания
//		СчетСписания		- Счет, на который списан объект ОС 
//
//	ТаблицаРеквизиты - таблица значений с графами:
//		Номер				- Строка, номер документа-регистратора
//		Организация			- Справочник.Организации
//		Период				- Дата документа - регистратора
//		Подразделение		- подразделение, где числится ОС
//		Регистратор			- Документ - регистратор
//
Процедура ВыполнитьДополнительныеДействияСписаниеОС(ТаблицаСтоимости, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	// РегламентированныйУчетОСиНМА
	

	// Конец РегламентированныйУчетОСиНМА

КонецПроцедуры

// Процедура ВыполнитьДополнительныеДействияСписаниеНМА вызывается из 
// УчетНМА.СформироватьДвиженияВыбытиеНМА() после определения
// остаточной стоимости объекта НМА для возможности отражения дополнительных движений
// при проведении документов:
//		- СписаниеНМА
// При добавлении новых регистров необходимо для них назначать в качестве регистраторов 
// указанные документы.
// 
// 
// Параметры:
//  ТаблицаПараметрыСписания - таблица значений с графами:
//		АмортизацияНМАБУ 	- Число, накопленная амортизация по объекту
//		НематериальныйАктив	- Справочник.НематериальныеАктивы, списываемый объект
//		СтоимостьНМАБУ		- Число, первоначальная стоимость объекта НМА.
//								Разница (СтоимостьНМАБУ - АмортизацияНМАБУ) дает остаточную
//								стоимость, которая списывается на расходы по БУ.
//		СчетНачисленияАмортизации - ПланСчетов.Хозрасчетный, счет учета амортизации (например, 05)
//		СчетУчета			- ПланСчетов.Хозрасчетный, счет учета объекта НМА (например, 04)
//
//	ТаблицаРеквизиты - таблица значений с графами:
//		Организация			- Справочник.Организации
//		Период				- Дата документа - регистратора
//		Подразделение		- подразделение, в котором числился объект НМА 
//								и на расходы которого списывается его остаточная стоимость
//		Регистратор			- Документ - регистратор
//		СубконтоСписания	- Значение субконто счета списания
//		СчетСписания		- ПланСчетов.Хозрасчетный, счет списания (например, 91.02)
//
Процедура ВыполнитьДополнительныеДействияСписаниеНМА(ТаблицаПараметрыСписания, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	// РегламентированныйУчетОСиНМА
	

	// Конец РегламентированныйУчетОСиНМА

КонецПроцедуры

// АМОРТИЗАЦИЯ НЕМАТЕРИАЛЬНЫХ АКТИВОВ

// ПРОЧИЕ

// Позволяет определить есть ли в табличной части документа строки с дублирующимеся
// значениями заданных реквизитов (всех одновременно).
// При нахождении дублей формирует сообщения пользователю.
//
// Параметры
//  Объект            - Объект ссылочного типа
//  ИмяТабличнойЧасти - Имя табличной части, в которой нужно искать дубли
//  ПоляПроверки      - Структура с перечнем реквизитов, по которым нужно искать дубли.
//                      Ключ структуры - имя реквизита, значение - признак необходимости
//                      поиска дублей в том числе по пустым значениям. Истина - искать
//                      дубли по пустым значениям реквизита, любое другое значение - 
//                      игнорировать строки, в которых реквизит не заполнен
//  Отказ             - Признак отказа от дальнейшей обработки. В случае нахождения дублей
//                      выставляется в Истина.
//
// Возвращаемое значение:
//   Булево - Истина - ошибок (дублей) не обнаружено, Ложь - в противном случае.
//
Функция ПроверитьОтсутствиеДублейВТабличнойЧасти(Объект, ИмяТабличнойЧасти, ПоляПроверки, Отказ) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	ПоляПроверкиСтрокой = "";
	Для Каждого КлючИЗначение Из ПоляПроверки Цикл
		ПоляПроверкиСтрокой = ПоляПроверкиСтрокой + ", " + КлючИЗначение.Ключ;
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ПоляПроверкиСтрокой = Сред(ПоляПроверкиСтрокой, 3);
	
	НаборыЗначений = Объект[ИмяТабличнойЧасти].Выгрузить(, ПоляПроверкиСтрокой);
	НаборыЗначений.Колонки.Добавить("__КоличествоВхождений", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10));
	НаборыЗначений.ЗаполнитьЗначения(1, "__КоличествоВхождений");
	НаборыЗначений.Свернуть(ПоляПроверкиСтрокой, "__КоличествоВхождений");
	
	НайденыДубли = Ложь;
	
	Если ПоляПроверки.Количество() > 1 Тогда
		ШаблонСообщенияОбОшибке = НСтр("ru='Значения %1 повторяются в строках %2.';uk='Значення %1 повторюються в рядках %2.'");
	Иначе
		ШаблонСообщенияОбОшибке = НСтр("ru='Значение %1 повторяется в строках %2.';uk='Значення %1 повторюється у рядках %2.'");
	КонецЕсли;
	ТекстСообщения = "";
	
	Если НаборыЗначений.Количество() <> Объект[ИмяТабличнойЧасти].Количество() Тогда
		// Есть дубли
		Для Каждого НаборЗначений Из НаборыЗначений Цикл
			Если НаборЗначений.__КоличествоВхождений = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияСтрокой = "";
			
			ПропуститьНаборЗначений = Ложь;
			Для Каждого КлючИЗначение Из ПоляПроверки Цикл
				Если КлючИЗначение.Значение <> Истина Тогда
					Если НЕ ЗначениеЗаполнено(НаборЗначений[КлючИЗначение.Ключ]) Тогда
						ПропуститьНаборЗначений = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				ЗначенияСтрокой = ЗначенияСтрокой + ", """ + НаборЗначений[КлючИЗначение.Ключ] + """";
			КонецЦикла;
			Если ПропуститьНаборЗначений Тогда
				Продолжить;
			КонецЕсли;
			
			НайденыДубли = Истина;
			
			ЗначенияСтрокой = Сред(ЗначенияСтрокой, 3);
			
			НомераСтрок = "";
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, НаборЗначений);
			СтрокиДубли = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДубль Из СтрокиДубли Цикл
				НомераСтрок = НомераСтрок + ", " + Формат(СтрокаДубль.НомерСтроки, "ЧГ=");
			КонецЦикла;
			НомераСтрок = Сред(НомераСтрок, 3);
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияОбОшибке, ЗначенияСтрокой, НомераСтрок);
		КонецЦикла;
	КонецЕсли;
	
	Если НайденыДубли Тогда
		ПредставленияРеквизитов = "";
		МетаданныеТабличнойЧасти = Объект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти];
		Для Каждого КлючИЗначение Из ПоляПроверки Цикл
			ПредставленияРеквизитов = ПредставленияРеквизитов + ", """
				+ МетаданныеТабличнойЧасти.Реквизиты[КлючИЗначение.Ключ].Представление() + """";
		КонецЦикла;
		ПредставленияРеквизитов = Сред(ПредставленияРеквизитов, 3);
		
		Если ПоляПроверки.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru='Значения в колонках %1 не должны повторяться.';uk='Значення у колонках %1 не повинні повторюватися.'");
		Иначе
			ШаблонСообщения = НСтр("ru='Значения в колонке %1 не должны повторяться.';uk='Значення у колонці %1 не повинні повторюватися.'");
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставленияРеквизитов)
			+ ТекстСообщения;
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("СПИСОК", "КОРРЕКТНОСТЬ", , ,
			МетаданныеТабличнойЧасти.Представление(), ТекстСообщения);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ИмяТабличнойЧасти);
		
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ НайденыДубли;
	
КонецФункции // ПроверитьОтсутствиеДублейВТабличнойЧасти()

// Возвращает пустую таблицу значений с заранее созданными колонками
// Нужно для создания пустых таблиц значения для дальнейшей
//   обработки в функциях "ПодготовитьПараметры*"
//
Функция ПолучитьПустуюТаблицуЗначенийСКолонками(СтруктураКолонок) Экспорт

	Таблица = Новый ТаблицаЗначений;

	Для Каждого ТекущаяКолонка Из СтруктураКолонок Цикл
		Если ТипЗнч(ТекущаяКолонка.Значение) = Тип("Тип") Тогда
			НоваяКолонка = Таблица.Колонки.Добавить(ТекущаяКолонка.Ключ, ТекущаяКолонка.Значение);
		Иначе
			НоваяКолонка = Таблица.Колонки.Добавить(ТекущаяКолонка.Ключ);
		КонецЕсли;
	КонецЦикла;

	Возврат Таблица;

КонецФункции

// Возвращает список обязательных колонок (через запятую), отсутствующих в таблице значений
//
//Параметры:
//	Таблица 			- <ТаблицаЗначений> - проверяемая таблица
//	ОбязательныеКолонки - <Строка> - имена колонок, которые обязательно должны присутствовать в таблице
//
//Возвращаемое значение:
//	<Строка> - имена отсутствующих в таблице колонок через запятую
Функция ПроверитьКолонкиТаблицыЗначений(Таблица, ОбязательныеКолонки)

	СтруктураКолонок = Новый Структура(ОбязательныеКолонки);
	КолонкиТаблицы = Таблица.Колонки;
	СтрокаНеНайденных = "";

	Для Каждого ОбязательнаяКолонка Из СтруктураКолонок Цикл

		Если КолонкиТаблицы.Найти(ОбязательнаяКолонка.Ключ) = Неопределено Тогда
			СтрокаНеНайденных = СтрокаНеНайденных + ?(СтрокаНеНайденных = "", "", ", ") + ОбязательнаяКолонка.Ключ;
		КонецЕсли;

	КонецЦикла;

	Возврат СтрокаНеНайденных;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФУНКЦИОНАЛЬНЫМИ ОПЦИЯМИ

Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъекта(Форма, Периодичность = "МЕСЯЦ") Экспорт

	ПараметрыФО = Новый Структура("Организация, Период",
		Форма.Объект.Организация, ?(ВРег(Периодичность) = "МЕСЯЦ", НачалоМесяца(Форма.Объект.Дата), НачалоДня(Форма.Объект.Дата)));

	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

Функция ПолучитьТаблицуПараметровПроведения(ИсходнаяТаблица, СписокКолонок) Экспорт

	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;

	Иначе

		ОтсутствующиеКолонки = ПроверитьКолонкиТаблицыЗначений(ИсходнаяТаблица, СписокКолонок);
		Если НЕ ПустаяСтрока(ОтсутствующиеКолонки) Тогда
			ОписаниеИсключения = НСтр("ru='В таблице отсутствуют колонки: %1';uk='У таблиці відсутні колонки: %1'");
			ОписаниеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеИсключения, ОтсутствующиеКолонки);
			ВызватьИсключение ОписаниеИсключения;
		КонецЕсли;

		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);

	КонецЕсли;

КонецФункции

Функция ПолучитьСтруктуруИзРезультатаЗапроса(РезультатЗапроса) Экспорт

	СтруктураПараметров = Новый Структура;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Для каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		СтруктураПараметров.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;

	Возврат СтруктураПараметров;

КонецФункции

// Выполняет движение по регистру.
//
// Параметры:
//  НаборДвижений   - набор движений регистра.
//
Процедура ВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения = Неопределено) Экспорт

	ТаблицаДвижений = НаборДвижений.мТаблицаДвижений;
	Если ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

    Если ТаблицаДвижений.Колонки.Найти("Период") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("Период", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя))
	КонецЕсли;

	МетаРег = НаборДвижений.Метаданные();
	ИзмеренияСостТипа = Новый Структура;

	Для Каждого МетаИзм Из МетаРег.Измерения Цикл
		Если МетаИзм.Тип.Типы().Количество() > 1 Тогда
			ИзмеренияСостТипа.Вставить(МетаИзм.Имя);
		КонецЕсли;
	КонецЦикла;

	Для Каждого МетаИзм Из МетаРег.Реквизиты Цикл
		Если МетаИзм.Тип.Типы().Количество() > 1 Тогда
			ИзмеренияСостТипа.Вставить(МетаИзм.Имя);
		КонецЕсли;
	КонецЦикла;

	Для Каждого МетаРес Из МетаРег.Ресурсы Цикл
		Если МетаРес.Тип.Типы().Количество() > 1 Тогда
			ИзмеренияСостТипа.Вставить(МетаРес.Имя);
		КонецЕсли;
	КонецЦикла;

	// Откопируем остальные колонки (структура таблиц совпадает).
	ПерваяКолонка = Истина;
	МассивСтрок   = Новый Массив(ТаблицаДвижений.Количество());

	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл

		ИмяКолонки = Колонка.Имя;

		Если ИмяКолонки <> "Период"
		   И ИмяКолонки <> "Активность"
		   И ИмяКолонки <> "НомерСтроки"
		   И ИмяКолонки <> ""
		   И ?(ИмяКолонки = "ВидДвижения", ВидДвижения = Неопределено, Истина)
		   И ИмяКолонки <> "МоментВремени" Тогда

			ФлагКолонкиСостТипа = (ИзмеренияСостТипа.Свойство(ИмяКолонки));

			Индекс = 0;

			Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл

				Если ПерваяКолонка Тогда

					Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						СтрокаДвижения = НаборДвижений.ДобавитьПриход();
					ИначеЕсли ВидДвижения = ВидДвиженияНакопления.Расход Тогда
						СтрокаДвижения = НаборДвижений.ДобавитьРасход();
					Иначе
						СтрокаДвижения = НаборДвижений.Добавить(); // Для оборотных регистров
					КонецЕсли;

					МассивСтрок[Индекс] = СтрокаДвижения;
					Если СтрокаТаблицы.Период = '00010101' Тогда
						СтрокаДвижения.Период = НаборДвижений.мПериод;
					Иначе
						СтрокаДвижения.Период = СтрокаТаблицы.Период;
					КонецЕсли;

				Иначе

					СтрокаДвижения = МассивСтрок[Индекс];

				КонецЕсли;

				Индекс = Индекс + 1;

				ЗначКолонки = СтрокаТаблицы[ИмяКолонки];
				Если ФлагКолонкиСостТипа Тогда
					Если ЗначКолонки = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ЗначКолонки) Тогда
						СтрокаДвижения[ИмяКолонки] = Неопределено;
					Иначе
						СтрокаДвижения[ИмяКолонки] = ЗначКолонки;
					КонецЕсли;
				Иначе
					СтрокаДвижения[ИмяКолонки] = ЗначКолонки;
				КонецЕсли;

			КонецЦикла;

			ПерваяКолонка = Ложь;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ВыполнитьДвижениеПоРегистру()

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//  КопироватьПодразделение - булево - если да - подразделение организации берется из документа-основания,
//										если нет - из реквизита СчетОрганизации или настройки пользователя
//
Процедура ЗаполнитьПоОснованию(ДокументОбъект, ДокументОснование, КопироватьПодразделение = Истина) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	// Дата
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;

	// Организация.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	// Склад.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;

	// Контрагент.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	// ДоговорКонтрагента.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования)
	   И (НЕ ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	      ИЛИ ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДокументОбъект.Организация) =
		  	ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДокументОснование.ДоговорКонтрагента.Организация)) Тогда

		ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

		// КурсВзаиморасчетов.
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

			// КратностьВзаиморасчетов.
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Банковский счет
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СчетОрганизации) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.СчетОрганизации;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Подразделение организации
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента) Тогда

		Если КопироватьПодразделение Тогда

			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокументаОснования) Тогда
				ДокументОбъект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
			КонецЕсли;

		Иначе

			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента) Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
					И (ДокументОбъект.СчетОрганизации.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ДокументОбъект.СчетОрганизации.ПодразделениеОрганизации;
				КонецЕсли;
			Иначе
				ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
				Если ЗначениеЗаполнено(ОсновноеПодразделение)
					И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ДокументОбъект.Организация) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ОсновноеПодразделение;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// ВалютаДокумента.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.Касса.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.БанковскийСчет.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ТипЦен.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;

	// НДСВключенВСтоимость.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("НДСВключенВСтоимость", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("НДСВключенВСтоимость", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.НДСВключенВСтоимость = ДокументОснование.НДСВключенВСтоимость;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФИЗЛИЦАМИ

// Получение представления для документа, удостоверяющего личность
//
// Параметры
//  ДанныеФизЛица  – Коллекция данных физ. лица (структура, строка таблицы, ...), содержащая значения:
//                   ВидДокумента, ДокументСерия, Номер, ДатаВыдачи, КемВыдан
//
// Возвращаемое значение:
//   Строка   – Представление документа, удостоверяющего личность
//
Функция ПолучитьПредставлениеДокументаФизЛица(ДанныеФизЛица)

	Возврат Строка(ДанныеФизЛица.ВидДокумента) + " серия " +
			ДанныеФизЛица.Серия       + ", номер " +
			ДанныеФизЛица.Номер       + ", выданный " +
			Формат(ДанныеФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДанныеФизЛица.КемВыдан;

КонецФункции // ПолучитьПредставлениеДокументаФизЛица()

// Функция возвращает совокупность данных о физическом лице в виде структуры,
// В совокупность данных входит ФИО, должность в заданной организации,
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчество
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ВидДокумента
//                 - Серия
//                 - Номер
//                 - ДатаВыдачи
//                 - КемВыдан
//                 - КодПодразделения
//
Функция ДанныеФизЛица(Организация, ФизЛицо, ДатаСреза, ФИОКратко = Истина) Экспорт

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ
	|	Физлица.Наименование КАК Представление,
	|	"""" КАК ТабельныйНомер,
	|	ДокументыФИзическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФИзическихЛицСрезПоследних.Серия,
	|	ДокументыФИзическихЛицСрезПоследних.Номер,
	|	ДокументыФИзическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФИзическихЛицСрезПоследних.КемВыдан,
	|	ДокументыФИзическихЛицСрезПоследних.КодПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка КАК ФизЛицо,
	|		ФизическиеЛица.Наименование КАК Наименование
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ГДЕ
	|		ФизическиеЛица.Ссылка = &ФизЛицо) КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ДокументыФИзическихЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ДокументыФИзическихЛицСрезПоследних.Физлицо";

	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Данные.Следующий();

	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление,
								|ТабельныйНомер, Должность, ПодразделениеОрганизации,
								|ВидДокумента, Серия, Номер,
								|ДатаВыдачи, КемВыдан, КодПодразделения,
								|ПредставлениеДокумента");

	ЗаполнитьЗначенияСвойств(Результат, Данные);
	
	// {БРУ 
	ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Результат.Представление)," ");

	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Результат.Вставить("Фамилия", Фамилия);
	Результат.Вставить("Имя", Имя);
	Результат.Вставить("Отчество", Отчество);
	Результат.Вставить("Должность", "");
	Результат.Вставить("ПодразделениеОрганизации", "");
	// }БРУ

	Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);

	Возврат Результат;

КонецФункции // ДанныеФизЛица

// Функция возвращает совокупность данных о физических лицах в виде таблицы
// значений. В совокупность данных входит ФИО, должность в заданной
// организации, паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника(ов)
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица или Массив - физическое лицо
//                 или список физ. лиц, по которым возвращается совокупность
//                 данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с совокупностью данных о физическом лице.
//                  Колонки: возвращаемой таблицы:
//                  - Фамилия
//                  - Имя
//                  - Отчество
//                  - Представление (Фамилия И.О.)
//                  - Подразделение
//                  - ВидДокумента
//                  - Серия
//                  - Номер
//                  - ДатаВыдачи
//                  - КемВыдан
//                  - КодПодразделения
//
Функция ДанныеФизЛиц(Организация, ФизЛицо, ДатаСреза) Экспорт

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ
	|	"""" КАК ТабельныйНомер,
	|	ФизЛица.Наименование КАК Представление,
	|	ДокументыФИзическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФИзическихЛицСрезПоследних.Серия,
	|	ДокументыФИзическихЛицСрезПоследних.Номер,
	|	ДокументыФИзическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФИзическихЛицСрезПоследних.КемВыдан,
	|	ДокументыФИзическихЛицСрезПоследних.КодПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка КАК ФизЛицо,
	|		ФизическиеЛица.Наименование КАК Наименование
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ГДЕ
	|		ФизическиеЛица.Ссылка В(&ФизЛицо)) КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаСреза, ФизЛицо В (&ФизЛицо)) КАК ДокументыФИзическихЛицСрезПоследних
	|		ПО ФизЛица.ФизЛицо = ДокументыФИзическихЛицСрезПоследних.Физлицо";


	Данные = ЗапросПоЛицам.Выполнить().Выбрать();

	ТабРезультат = Новый ТаблицаЗначений();
	ТабРезультат.Колонки.Добавить("Фамилия");
	ТабРезультат.Колонки.Добавить("Имя");
	ТабРезультат.Колонки.Добавить("Отчество");
	ТабРезультат.Колонки.Добавить("Представление");
	ТабРезультат.Колонки.Добавить("ТабельныйНомер");
	ТабРезультат.Колонки.Добавить("Должность");
	ТабРезультат.Колонки.Добавить("ПодразделениеОрганизации");
	ТабРезультат.Колонки.Добавить("ВидДокумента");
	ТабРезультат.Колонки.Добавить("Серия");
	ТабРезультат.Колонки.Добавить("Номер");
	ТабРезультат.Колонки.Добавить("ДатаВыдачи");
	ТабРезультат.Колонки.Добавить("КемВыдан");
	ТабРезультат.Колонки.Добавить("КодПодразделения");
	ТабРезультат.Колонки.Добавить("ПредставлениеДокумента");

	Пока Данные.Следующий() Цикл

		Результат = ТабРезультат.Добавить();

		ЗаполнитьЗначенияСвойств(Результат, Данные);

		// {БРУ 
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Результат.Представление)," ");

		КоличествоПодстрок = ФИО.Количество();
		Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
		Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
		Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");
		
		Результат.Фамилия 	= Фамилия;
		Результат.Имя 		= Имя;
		Результат.Отчество	= Отчество;
		Результат.Должность	= "";
		Результат.ПодразделениеОрганизации = "";
		// }БРУ
		
		Результат.ПредставлениеДокумента = ПолучитьПредставлениеДокументаФизЛица(Данные);

	КонецЦикла;

	Возврат ТабРезультат;

КонецФункции // ДанныеФизЛиц
