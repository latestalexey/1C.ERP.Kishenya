////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДВИЖЕНИЯМИ ДОКУМЕНТОВ

//++ НЕ УТ

Функция ТекстРазделителяЗапросовПакета() Экспорт

	ТекстРазделителя =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстРазделителя;

КонецФункции

Процедура РаспределитьСуммуПоКолонкеТаблицы(РаспределяемаяСумма, Таблица, ИмяКолонки, ИмяКолонкиБазы = "") Экспорт

	Если РаспределяемаяСумма <> 0 Тогда
		Если ПустаяСтрока(ИмяКолонкиБазы) Тогда
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонки);
		Иначе
			МассивСтарыхСумм = Таблица.ВыгрузитьКолонку(ИмяКолонкиБазы);
		КонецЕсли;
		МассивНовыхСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(РаспределяемаяСумма, МассивСтарыхСумм);
		Если МассивНовыхСумм <> Неопределено Тогда
	 		Таблица.ЗагрузитьКолонку(МассивНовыхСумм, ИмяКолонки);
		КонецЕсли; 
	Иначе
		Таблица.ЗаполнитьЗначения(0, ИмяКолонки);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицуПараметровПроведения(ИсходнаяТаблица, СписокКолонок) Экспорт

	Если ИсходнаяТаблица = Неопределено Тогда
		
		ТаблицаРезультат = Новый ТаблицаЗначений;
		Колонки = Новый Структура(СписокКолонок);
		Для каждого Колонка Из Колонки Цикл
			ТаблицаРезультат.Колонки.Добавить(Колонка.Ключ);
		КонецЦикла;
		Возврат ТаблицаРезультат;

	Иначе

		Возврат ИсходнаяТаблица.Скопировать(, СписокКолонок);

	КонецЕсли;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФИЗЛИЦАМИ

// Функция формирует фамилию и инициалы либо по наименованию элемента спр-ка ФизическиеЛица
//  либо по переданным строкам.
//  Если передан Объект, то извлеченная из него строка считается совокупностью
//  Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  Объект		- строка или ссылка или объект элемента спр-ка ФизическиеЛица.
//  Фамилия		- фамилия физ. лица.
//  Имя			- имя физ. лица.
//  Отчество	- отчество физ. лица.
//
// Возвращаемое значение
//  Фамилия и Инициалы одной строкой. Побочные эффекты - переданная целая строка
//  Побочные эффекты - переданная целая строка разбивается на подстроки, соответствующие
//  отдельным Фамилии,Имени и Отчеству
//
Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ",Знач ДатаСреза = Неопределено) Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");

	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");

	Иначе

		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия),
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")
	КонецЕсли;

	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");

	Возврат ?(НЕ ПустаяСтрока(Фамилия),
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции

//-- НЕ УТ

// Функция формирует фамилию, имя и отчество одной строкой
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//  ФИОКратко    - Булево - если Истина (по умолчанию), Представление физ.лица включает фамилию и инициалы, если Ложь - фамилию и полностью имя и отчество
//
// Возвращаемое значение
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ", ФИОКратко = Истина) Экспорт

	Если ФИОКратко Тогда
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." +
				?(НЕ ПустаяСтрока(Отчество) ,
				Лев(Отчество,1)+".", ""), ""), "");
	Иначе
		Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Имя +
				?(НЕ ПустаяСтрока(Отчество) , " " + Отчество, ""), ""), "");
	КонецЕсли;

КонецФункции // ПолучитьФамилиюИмяОтчество()

//++ НЕ УТ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДОКУМЕНТАМИ

// Функция формирует представление заголовка документа
//
// Возвращаемое значение:
//  Строка - представление номера документа
//
Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт

	Если ДокументОбъект = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ?(НЕ ЗначениеЗаполнено(НазваниеДокумента), ДокументОбъект.Метаданные().Синоним, НазваниеДокумента) + " № "
			+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументОбъект.Номер, Истина, Ложь)
			+ НСтр("ru='от';uk='від'") + Формат(ДокументОбъект.Дата, "ДФ='дд.ММ.гггг'") + НСтр("ru=' г.';uk=' р.'");
	КонецЕсли;

КонецФункции // СформироватьЗаголовокДокумента()

// Функция формирует представление суммы прописью в указанной валюте
//
// Возвращаемое значение:
//  Строка - сумма прописью
//
Функция СформироватьСуммуПрописью(Сумма, Валюта) Экспорт

	Если Валюта.ПараметрыПрописиНаРусском = "" Тогда
		Возврат ФорматСумм(Сумма);
	Иначе
		Возврат ЧислоПрописью(Сумма, ,Валюта.ПараметрыПрописиНаРусском);
	КонецЕсли;

КонецФункции // СформироватьСуммуПрописью()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры:
//  Сумма  - число, которое мы хотим форматировать,
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт

	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);

	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));

	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Изменяет текущую страницу формы документа, если при открытии формы
// первая страница содержит пустую табличную часть, но на форме есть еще страницы
// с непустой табличной частью.
// Проверяется также видимость элемента
//
// Параметры:
//   Форма                - форма документа, который открывается;
//   СписокТабличныхПолей - Список значений - табличных полей, где
//                            Значение - имя элемента формы,
//                            Представление - имя табличной части (в метаданных)
//
Функция ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(Форма, СписокТабличныхПолей) Экспорт

	Для Каждого Элемент из СписокТабличныхПолей Цикл
		Если Форма.Объект[Элемент.Представление].Количество() > 0 Тогда
			Если Форма.Элементы[Элемент.Значение].Видимость Тогда
				// Эта табличная часть - первая видимая, у которой есть данные
				Возврат Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат "";

КонецФункции


// Данная функция получает сведения о составе комиссии,
// 	занимаемых должностях членами комиссии для вывода
// 	в печатные формы документов.
//
// Параметры:
//  ДокументОбъект – Тип: ДокументОбъект – Распечатываемый документ
//                 
//
// Возвращаемое значение:
//   Тип:   Выборка из запроса – Сведения о составе комиссии, должностях и ФИО членов комиссии 
//
Функция ПолучитьСведенияОКомиссии(ДокументОбъект) Экспорт
	
	СоставКомиссии = Новый Структура;
	
	СоставКомиссии.Вставить("ПредседательКомиссииФИО" , "");
	СоставКомиссии.Вставить("ПредседательКомиссииДолжность", "");
	
	СоставКомиссии.Вставить("ПервыйЧленКомиссииФИО", "");
	СоставКомиссии.Вставить("ПервыйЧленКомиссииДолжность", "");
	
	СоставКомиссии.Вставить("ВторойЧленКомиссииФИО", "");
	СоставКомиссии.Вставить("ВторойЧленКомиссииДолжность", "");
	
	СоставКомиссии.Вставить("ТретийЧленКомиссииФИО", "");
	СоставКомиссии.Вставить("ТретийЧленКомиссииДолжность", "");
	
	Если ЗначениеЗаполнено(ДокументОбъект.ПредседательКомиссии) Тогда
		
		ОсновныеСотрудникиФизическихЛицПредседательКомиссии = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ДокументОбъект.ПредседательКомиссии, Истина, ДокументОбъект.Организация, ДокументОбъект.Дата);
			Если ЗначениеЗаполнено(ОсновныеСотрудникиФизическихЛицПредседательКомиссии) Тогда
				Для каждого Строка Из ОсновныеСотрудникиФизическихЛицПредседательКомиссии Цикл
				    ДанныеПредседательКомиссии = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Строка.Сотрудник, "Должность", ДокументОбъект.Дата);			
				КонецЦикла;
				Для каждого СтрокаДанныеПредседательКомиссии Из ДанныеПредседательКомиссии Цикл			
					СоставКомиссии.Вставить("ПредседательКомиссииФИО" ,      СтрокаДанныеПредседательКомиссии.ФизическоеЛицо);
					СоставКомиссии.Вставить("ПредседательКомиссииДолжность", СтрокаДанныеПредседательКомиссии.Должность);
				КонецЦикла;
			КонецЕсли;									 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДокументОбъект.ПервыйЧленКомиссии) Тогда
		
		ОсновныеСотрудникиФизическихЛицПервыйЧленКомиссии = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ДокументОбъект.ПервыйЧленКомиссии, Истина, ДокументОбъект.Организация, ДокументОбъект.Дата);
			Если ЗначениеЗаполнено(ОсновныеСотрудникиФизическихЛицПервыйЧленКомиссии) Тогда
				Для каждого Строка Из ОсновныеСотрудникиФизическихЛицПервыйЧленКомиссии Цикл
				    ДанныеПервыйЧленКомиссии = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Строка.Сотрудник, "Должность", ДокументОбъект.Дата);			
				КонецЦикла;
				Для каждого СтрокаДанныеПервыйЧленКомиссии Из ДанныеПервыйЧленКомиссии Цикл			
					СоставКомиссии.Вставить("ПервыйЧленКомиссииФИО" ,      СтрокаДанныеПервыйЧленКомиссии.ФизическоеЛицо);
					СоставКомиссии.Вставить("ПервыйЧленКомиссииДолжность", СтрокаДанныеПервыйЧленКомиссии.Должность);
				КонецЦикла;
			КонецЕсли;									 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДокументОбъект.ВторойЧленКомиссии) Тогда
		
		ОсновныеСотрудникиФизическихЛицВторойЧленКомиссии = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ДокументОбъект.ВторойЧленКомиссии, Истина, ДокументОбъект.Организация, ДокументОбъект.Дата);
			Если ЗначениеЗаполнено(ОсновныеСотрудникиФизическихЛицВторойЧленКомиссии) Тогда
				Для каждого Строка Из ОсновныеСотрудникиФизическихЛицВторойЧленКомиссии Цикл
				    ДанныеВторойЧленКомиссии = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Строка.Сотрудник, "Должность", ДокументОбъект.Дата);			
				КонецЦикла;
				Для каждого СтрокаДанныеВторойЧленКомиссии Из ДанныеВторойЧленКомиссии Цикл			
					СоставКомиссии.Вставить("ВторойЧленКомиссииФИО" ,      СтрокаДанныеВторойЧленКомиссии.ФизическоеЛицо);
					СоставКомиссии.Вставить("ВторойЧленКомиссииДолжность", СтрокаДанныеВторойЧленКомиссии.Должность);
				КонецЦикла;
			КонецЕсли;									 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДокументОбъект.ТретийЧленКомиссии) Тогда
		
		ОсновныеСотрудникиФизическихЛицТретийЧленКомиссии = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ДокументОбъект.ТретийЧленКомиссии, Истина, ДокументОбъект.Организация, ДокументОбъект.Дата);
			Если ЗначениеЗаполнено(ОсновныеСотрудникиФизическихЛицТретийЧленКомиссии) Тогда
				Для каждого Строка Из ОсновныеСотрудникиФизическихЛицТретийЧленКомиссии Цикл
				    ДанныеТретийЧленКомиссии = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Строка.Сотрудник, "Должность", ДокументОбъект.Дата);			
				КонецЦикла;
				Для каждого СтрокаДанныеДанныеТретийЧленКомиссии Из ДанныеТретийЧленКомиссии Цикл			
					СоставКомиссии.Вставить("ТретийЧленКомиссииФИО" ,      СтрокаДанныеДанныеТретийЧленКомиссии.ФизическоеЛицо);
					СоставКомиссии.Вставить("ТретийЧленКомиссииДолжность", СтрокаДанныеДанныеТретийЧленКомиссии.Должность);
				КонецЦикла;
			КонецЕсли;				 
	КонецЕсли; 
	
	Возврат СоставКомиссии;

КонецФункции // ПолучитьСведенияОКомиссии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТАБЛИЦАМИ

// Добавляет в таблицу значений строки из другой таблицы значений и
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник) Экспорт

	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);

	КонецЦикла;

КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты, Направление = "Возр") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(КолонкаДаты) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(КолонкаДаты, ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты);
	
	СписокКолонок = КолонкаДаты + " " + Направление + ", " + КолонкаДокумента + " " + Направление;
	ТаблицаЗначений.Сортировать(СписокКолонок, Новый СравнениеЗначений);
	
КонецПроцедуры

Процедура ДобавитьДатуДокументаКРезультатуЗапроса(Результат, КолонкаДокумента, КолонкаСДатой) Экспорт

	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из Результат Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
		Если МассивТипа = Неопределено Тогда
			МассивТипа = Новый Массив;
			КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
		КонецЕсли;
		МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат;
	КонецЕсли;
	
	Запрос = новый запрос;
	
	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;
		
		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		"
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|		Док.Ссылка Как Ссылка,
		|		Док.Дата
		|	ИЗ Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Результат.Индексы.Добавить(КолонкаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);
		
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		Для Каждого строка ИЗ НайденныеСтроки Цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДатуДокументаКРезультатуЗапроса()

Процедура ПронумероватьТаблицу(ТаблицаЗначений, ИмяКолонкиНомера = "НомерСтроки") Экспорт

	Если ТаблицаЗначений.Колонки.Найти(ИмяКолонкиНомера) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(ИмяКолонкиНомера, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	КонецЕсли;

	Ном = 1;
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаТаблицы[ИмяКолонкиНомера] = Ном;
		Ном = Ном + 1;
	КонецЦикла;

КонецПроцедуры

Функция ПустаяТаблицаРегистраНакопления(ИмяРегистра) Экспорт

	ПустаяТаблица = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ПустаяТаблица.Колонки.Удалить("Регистратор");
	ПустаяТаблица.Колонки.Удалить("МоментВремени");
	ПустаяТаблица.Колонки.Удалить("Активность");
	Если ПустаяТаблица.Колонки.Найти("ВидДвижения") <> Неопределено Тогда
		ПустаяТаблица.Колонки.Удалить("ВидДвижения");
	КонецЕсли;

	Возврат ПустаяТаблица;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ НОМЕРАМИ ДОКУМЕНТОВ

// Функция возвращает массив вышестоящих групп указанного элемента.
//
// Параметры:
//  Элемент      - Элемент справочника, для которого ищется родитель
//
// Возвращаемое значение
//  Массив вышестоящих групп
//
Функция ПолучитьСписокВышеСтоящихГрупп(ЭлементСправочника) Экспорт

	Результат = Новый Массив;

	Если НЕ ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Результат;
	КонецЕсли;

	МетаданныеСправочника = ЭлементСправочника.Метаданные();
	Если НЕ МетаданныеСправочника.Иерархический Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяСправочника = МетаданныеСправочника.Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Справочник1.Родитель КАК Родитель1,
	|	Справочник2.Родитель КАК Родитель2,
	|	Справочник3.Родитель КАК Родитель3,
	|	Справочник4.Родитель КАК Родитель4,
	|	Справочник5.Родитель КАК Родитель5
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК Справочник1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник2
	|		ПО (Справочник2.Ссылка = Справочник1.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник3
	|		ПО (Справочник3.Ссылка = Справочник2.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник4
	|		ПО (Справочник4.Ссылка = Справочник3.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК Справочник5
	|		ПО (Справочник5.Ссылка = Справочник4.Родитель)
	|ГДЕ
	|	Справочник1.Ссылка = &Ссылка";

	ТекущийЭлемент = ЭлементСправочника;

	Пока ЗначениеЗаполнено(ТекущийЭлемент) Цикл
		Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Для Индекс = 1 по 5 Цикл
				ТекущийЭлемент = Выборка["Родитель" + Индекс];
				Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
					Результат.Добавить(ТекущийЭлемент);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекущийЭлемент = Неопределено;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры
//  Документ - ссылка на проводимый документ.
//
// Возвращаемое значение
//  Строка с представлением документа.
//
Функция ПредставлениеДокументаПриПроведении(Документ) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	ВидОперацииСтр = "";
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента) Тогда
		ВидОперацииСтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru=' (%1)';uk=' (%1)'"), Документ.ВидОперации);
	КонецЕсли;
	
	ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Проведение документа: %1%2';uk='Проведення документа: %1%2'"), СокрЛП(Документ), ВидОперацииСтр);
	
	Возврат ПредставлениеДокумента;

КонецФункции // ПредставлениеДокументаПриПроведении()

//-- НЕ УТ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С УПРАВЛЯЕМЫМИ БЛОКИРОВКАМИ

// Устанавливает управляемую блокировку таблицы
//
// Параметры:
//  СтруктураПараметров 		- <Структура>. Структура параметров блокировки. Обязательный параметр.
//								Обязательно должна содержать свойства:
//								"ИмяТаблицы" - <Строка> - имя таблицы, на которую накладывается блокировка.
//									Например: "АвансовыйОтчет"
//								Необязательные свойства:
//								"ТипТаблицы" - <Строка> - тип таблицы, на которую накладывается блокировка.
//									Пространство блокировки состоит из типа таблицы и имени таблицы.
//									Например: "Документ"
//									Значение по умолчанию: "РегистрНакопления"
//								"РежимБлокировки" - <РежимБлокировкиДанных> - режим накладываемой блокировки.
//									Значение по умолчанию: РежимБлокировкиДанных.Исключительный
//								"ИсточникДанных" - источник данных для блокировки.
//									Может передаваться значение любого типа, поддерживаемого свойством ИсточникДанных элемента блокировки,
//									а также типа "Менеджер временных таблиц".
//									Если в структуре нет этого свойства - блокировки через ИспользоватьИзИсточникаДанных() не накладываются.
//								"ИмяВременнойТаблицы" - <Строка> - имя временной таблицы менеджера временных таблиц, которая служит источником данных для блокировки.
//									Обязательно должно указываться, если в качестве источника данных процедуре передан менеджер временных таблиц.
//  КоллекцияЗначенийБлокировки	- <Структура или Соответствие> - описывает значения блокировки, накладываемые с помощью УстановитьЗначение().
//									Ключ - поле блокировки - <Строка или (только для соответствия) ПланыВидовХарактеристикСсылка>,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//									Значение - блокируемое значение - <Произвольный тип>.
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом УстановитьЗначение() не накладываются.
//  КоллекцияОписанияИсточника	- <Структура или Соответствие> - описывает значения блокировки, накладываемые с помощью ИспользоватьИзИсточникаДанных().
//									Ключ - поле блокировки - <Строка или (только для соответствия) ПланыВидовХарактеристикСсылка>,
//										ПланыВидовХарактеристикСсылка используется для блокировки регистра бухгалтерии по виду субконто.
//									Значение - поле таблицы источника данных - <Строка>.
//									Если передано Неопределено или если коллекция не содержит ни одного элемента -
//									блокировки методом ИспользоватьИзИсточникаДанных() не накладываются.
//  Отказ 						- <Булево> - при ошибке в процессе установки блокировки в этот параметр процедура возвращает значение Истина
//  Заголовок 					- <Строка> - заголовок сообщения об ошибке при установке блокировки
//
Процедура УстановитьУправляемуюБлокировку(СтруктураПараметров, КоллекцияЗначенийБлокировки = Неопределено, КоллекцияОписанияИсточника = Неопределено, Отказ = Ложь, Заголовок = "") Экспорт

	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьЗначенияБлокировки = КоллекцияЗначенийБлокировки <> Неопределено
		И (ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Структура")
			ИЛИ ТипЗнч(КоллекцияЗначенийБлокировки) = Тип("Соответствие"))
		И КоллекцияЗначенийБлокировки.Количество() > 0;

	ИспользоватьИсточникДанных     = КоллекцияОписанияИсточника <> Неопределено
		И (ТипЗнч(КоллекцияОписанияИсточника) = Тип("Структура")
			ИЛИ ТипЗнч(КоллекцияОписанияИсточника) = Тип("Соответствие"))
		И КоллекцияОписанияИсточника.Количество() > 0
		И СтруктураПараметров.Свойство("ИсточникДанных");

	Если НЕ ИспользоватьЗначенияБлокировки И НЕ ИспользоватьИсточникДанных Тогда
		Возврат;
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;

	ТипТаблицы = ?(СтруктураПараметров.Свойство("ТипТаблицы"), СтруктураПараметров.ТипТаблицы, "РегистрНакопления");
	ИмяТаблицы = СтруктураПараметров.ИмяТаблицы;
	ПространствоБлокировки = ТипТаблицы  + "." + ИмяТаблицы;
	ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);

	РежимБлокировки = ?(СтруктураПараметров.Свойство("РежимБлокировки"), СтруктураПараметров.РежимБлокировки, РежимБлокировкиДанных.Исключительный);
	ЭлементБлокировки.Режим = РежимБлокировки;

	Если ИспользоватьЗначенияБлокировки Тогда

		Для каждого ЭлементКоллекции Из КоллекцияЗначенийБлокировки Цикл

			ЭлементБлокировки.УстановитьЗначение(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);

		КонецЦикла;

	КонецЕсли;

	Если ИспользоватьИсточникДанных Тогда

		ИсточникДанных = СтруктураПараметров.ИсточникДанных;

		Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда

			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ТекстЗапроса = "";
			Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл
				ТекстЗапроса = ТекстЗапроса + ",
				|	Таб." + ЭлементКоллекции.Значение;
			КонецЦикла;
			ТекстЗапроса = Сред(ТекстЗапроса, 2);
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ"
			+ ТекстЗапроса + "
			|ИЗ
			|	" + СтруктураПараметров.ИмяВременнойТаблицы + " КАК Таб";
			Запрос.Текст = ТекстЗапроса;
			Результат    = Запрос.Выполнить();

			ЭлементБлокировки.ИсточникДанных = Результат;

		Иначе

			ЭлементБлокировки.ИсточникДанных = ИсточникДанных;

		КонецЕсли;

		Для каждого ЭлементКоллекции Из КоллекцияОписанияИсточника Цикл

			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);

		КонецЦикла;

	КонецЕсли;

	Блокировка.Заблокировать();

КонецПроцедуры

// Удаляет повторяющиеся элементы массива.
//
// Параметры:
//  ОбрабатываемыйМассив - Массив - элементы произвольных типов, из которых удаляются неуникальные.
//  НеИспользоватьНеопределено - Булево - если Истина, то все значения Неопределено удаляются из массива.
//  АнализироватьСсылкиКакИдентификаторы - Булево - если Истина, то для ссылок вызывается функция УникальныйИдентификатор()
//                                                  и уникальность определяется по строкам-идентификаторам.
//
// Возвращаемое значение:
//   Массив      - элементы ОбрабатываемыйМассив после удаления лишних.
//
Функция УдалитьПовторяющиесяЭлементыМассива(ОбрабатываемыйМассив, НеИспользоватьНеопределено = Ложь, АнализироватьСсылкиКакИдентификаторы = Ложь) Экспорт

	Если ТипЗнч(ОбрабатываемыйМассив) <> Тип("Массив") Тогда
		Возврат ОбрабатываемыйМассив;
	КонецЕсли;
	
	УжеВМассиве = Новый Соответствие;
	Если АнализироватьСсылкиКакИдентификаторы Тогда   // сравниваем ссылки как строки-уникальные идентификаторы
		
		ОписаниеСсылочныхТипов = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
		
	 	БылоНеопределено = Ложь;
		КолвоЭлементовВМассиве = ОбрабатываемыйМассив.Количество();

		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл
			
			ЭлементМассива = ОбрабатываемыйМассив[КолвоЭлементовВМассиве - ОбратныйИндекс];
			ТипЭлемента = ТипЗнч(ЭлементМассива);
			Если ЭлементМассива = Неопределено Тогда
				Если БылоНеопределено или НеИспользоватьНеопределено Тогда
					ОбрабатываемыйМассив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				Продолжить;
			ИначеЕсли ОписаниеСсылочныхТипов.СодержитТип(ТипЭлемента) Тогда

				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор());

			Иначе

				ИДЭлемента = ЭлементМассива;

			КонецЕсли;

			Если УжеВМассиве[ИДЭлемента] = Истина Тогда
				ОбрабатываемыйМассив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс);
			Иначе
				УжеВМассиве[ИДЭлемента] = Истина;
			КонецЕсли;
			
		КонецЦикла;

	Иначе
		
		ИндексЭлемента = 0;
		КоличествоЭлементов = ОбрабатываемыйМассив.Количество();
		Пока ИндексЭлемента < КоличествоЭлементов Цикл
			
			ЭлементМассива = ОбрабатываемыйМассив[ИндексЭлемента];
			Если НеИспользоватьНеопределено И ЭлементМассива = Неопределено
			 Или УжеВМассиве[ЭлементМассива] = Истина Тогда      // удаляем, переходя к следующему
			 
				ОбрабатываемыйМассив.Удалить(ИндексЭлемента);
				КоличествоЭлементов = КоличествоЭлементов - 1;
				
			Иначе   // запоминаем, переходя к следующему
				
				УжеВМассиве.Вставить(ЭлементМассива, Истина);
				ИндексЭлемента = ИндексЭлемента + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ОбрабатываемыйМассив;

КонецФункции

//++ НЕ УТ

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПАРАМЕТРОВ УЧЕТА

Функция ОпределитьПараметрыУчета() Экспорт

	ПараметрыУчета = ОбщегоНазначенияБПКлиентСервер.СтруктураПараметровУчета();

	// Запасы
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();

	ПараметрыУчета.ВестиПартионныйУчет = Ложь;
	ВестиСкладскойУчет  = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") <> Неопределено;
	Если ВестиСкладскойУчет Тогда
		ВестиСуммовойУчетПоСкладам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладам = Ложь;
	КонецЕсли;

	ПараметрыУчета.СкладскойУчет = ?(ВестиСкладскойУчет, ?(ВестиСуммовойУчетПоСкладам, 2, 1), 0);
	
	ПараметрыУчета.ИспользоватьОборотнуюНоменклатуру = Ложь;
	ПараметрыУчета.РазделятьПоСтавкамНДС = Ложь;

	// Работники
	ПараметрыУчета.ВестиУчетПоРаботникам = ?(БухгалтерскийУчетПереопределяемый.ВедетсяУчетРасчетовПоЗарплатеСводно(),0,1);
	ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме = БухгалтерскийУчетПереопределяемый.УчетЗарплатыИКадровВоВнешнейПрограмме();
	ПараметрыУчета.КадровыйУчет = БухгалтерскийУчетПереопределяемый.ВедетсяКадровыйУчет();

	Возврат ПараметрыУчета;

КонецФункции

Функция ПолучитьСоответствиеСубконтоПараметрамУчета(ТолькоМПЗ = Ложь) Экспорт

	// Структура параметров

	Результат = Новый ТаблицаЗначений; // Структуры СтруктураПараметров
	Результат.Колонки.Добавить("Счета"); // Счета для обработки, таблица значений со структурой КолонкиСчетов
	Результат.Колонки.Добавить("ИсключенияИерархии", Новый ОписаниеТипов("Массив")); // Массив счетов
		// которые не должны обрабатываться при обработке подчиненных счетов
	Результат.Колонки.Добавить("Субконто"); // Параметры субконто, таблица значений со структурой КолонкиСубконто
	Результат.Колонки.Добавить("Параметры", Новый ОписаниеТипов("ТаблицаЗначений")); // Список параметров и
		// значения исключений, таблица значений со структурой КолонкиПараметров

	КолонкиСчетов = Новый ТаблицаЗначений;
	КолонкиСчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиСчетов.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево")); // Обрабатывать все субсчета

	// Имя параметра, константа типа Булево или строка "ПоСчету" (только для признаков учета Количественный и Валютный)
	// Неопределено - не менять
	ТипПараметра = Новый ОписаниеТипов("Неопределено, Строка, Булево", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));

	КолонкиСубконто = Новый ТаблицаЗначений;
	КолонкиСубконто.Колонки.Добавить("Вид", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КолонкиСубконто.Колонки.Добавить("Параметр", ТипПараметра); // Необходимость включения субконто
	КолонкиСубконто.Колонки.Добавить("Количественный", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Суммовой", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("ТолькоОбороты", ТипПараметра);
	КолонкиСубконто.Колонки.Добавить("Валютный", ТипПараметра);

	КолонкиПараметров = Новый ТаблицаЗначений; // Описания параметров учета
	// Имя параметра учета
	КолонкиПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	КолонкиПараметров.Колонки.Добавить("Исключения", Новый ОписаниеТипов("ТаблицаЗначений")); 	// Счета, для которых будут
																								// использоваться константные значения вместо значений параметров.

	КолонкиИсключений = Новый ТаблицаЗначений;
	КолонкиИсключений.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	КолонкиИсключений.Колонки.Добавить("СПодчиненными", Новый ОписаниеТипов("Булево"));
	КолонкиИсключений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Неопределено, Булево"));

	////////////////////////////////////////////////////////////////
	// Учет МПЗ
	СтрокаРезультата = Результат.Добавить();

	// Счета
	Счета = КолонкиСчетов.СкопироватьКолонки();
	СтрокаРезультата.Счета = Счета;


	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств;
	СтрокаСчета.СПодчиненными = Истина;
	
	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПриобретениеДругихНеоборотныхМатериальныхАктивов;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.Товары;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства;
	СтрокаСчета.СПодчиненными = Истина;

	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметыНаСкладе;
	СтрокаСчета.СПодчиненными = Истина;


	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;
	СтрокаСчета.СПодчиненными = Истина;
	
	СтрокаСчета = Счета.Добавить();
	СтрокаСчета.Счет = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюВсего;
	СтрокаСчета.СПодчиненными = Истина;


	// Исключения иерархии
	ИсключенияИерархии = Новый Массив;
	СтрокаРезультата.ИсключенияИерархии = ИсключенияИерархии;

	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи);
	// В УП2 добавлены **.ДР для нераспределенных доп.расходов
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ДопРасходыМалоценныеИБыстроизнашивающиесяПредметы);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ДопРасходыПроизводственныеЗапасы);
	ИсключенияИерархии.Добавить(ПланыСчетов.Хозрасчетный.ДопРасходыТовары);
	
	
	// Субконто
	Субконто = КолонкиСубконто.СкопироватьКолонки();
	СтрокаРезультата.Субконто = Субконто;

	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	СтрокаСубконто.Параметр = Истина;
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = Истина;
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;


	СтрокаСубконто = Субконто.Добавить();
	СтрокаСубконто.Вид = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	СтрокаСубконто.Параметр = "ВестиСкладскойУчет";
	СтрокаСубконто.Количественный = Истина;
	СтрокаСубконто.Суммовой = "ВестиСуммовойУчетПоСкладам";
	СтрокаСубконто.ТолькоОбороты = Ложь;
	СтрокаСубконто.Валютный = Неопределено;

	// Параметры
	Параметры = КолонкиПараметров.СкопироватьКолонки();
	СтрокаРезультата.Параметры = Параметры;


	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСкладскойУчет";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссиюНаСубкомиссии;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ДопРасходыТовары;
		СтрокаИсключения.СПодчиненными = Истина;
		СтрокаИсключения.Значение = Истина;

		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ДопРасходыПроизводственныеЗапасы;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;
		
		СтрокаИсключения = СтрокаПараметра.Исключения.Добавить();
		СтрокаИсключения.Счет = ПланыСчетов.Хозрасчетный.ДопРасходыМалоценныеИБыстроизнашивающиесяПредметы;
		СтрокаИсключения.СПодчиненными = Ложь;
		СтрокаИсключения.Значение = Неопределено;


	СтрокаПараметра = Параметры.Добавить();
	СтрокаПараметра.Имя = "ВестиСуммовойУчетПоСкладам";
	СтрокаПараметра.Исключения = КолонкиИсключений.Скопировать();


	Если ТолькоМПЗ Тогда
		Возврат Результат;
	КонецЕсли;



	Возврат Результат;

КонецФункции

Функция ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета, ПараметрыГруппыСчетов, Счет)

	Результат = Новый Структура;

	Для каждого СтрокаПараметра Из ПараметрыГруппыСчетов Цикл
		ЗначениеУстановлено = Ложь;
		Для каждого СтрокаИсключения Из СтрокаПараметра.Исключения Цикл
			Если СтрокаИсключения.Счет = Счет Тогда
				ЗначениеПараметра = СтрокаИсключения.Значение;
				ЗначениеУстановлено = Истина;
				Прервать;
			Иначе
				Если СтрокаИсключения.СПодчиненными
					И БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Счет, СтрокаИсключения.Счет) Тогда

					ЗначениеПараметра = СтрокаИсключения.Значение;
					ЗначениеУстановлено = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если НЕ ЗначениеУстановлено Тогда
			ЗначениеПараметра = ПараметрыУчета[СтрокаПараметра.Имя];
		КонецЕсли;
		Результат.Вставить(СтрокаПараметра.Имя, ЗначениеПараметра);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПолучитьЗначениеПараметраУчетаСубконто(Параметр, ЗначенияПараметровУчетаДляСчета, СтрокаСчета)

	Если Параметр = Неопределено ИЛИ ТипЗнч(Параметр) = Тип("Булево") Тогда
		Возврат Параметр;
	Иначе
		Если ЗначенияПараметровУчетаДляСчета.Свойство(Параметр) Тогда
			Возврат ЗначенияПараметровУчетаДляСчета[Параметр];
		Иначе
			Возврат СтрокаСчета[Параметр];
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ПолучитьСтруктуруПризнаковУчетаСубконто()

	ПризнакиУчета = Новый Структура;
	ПризнакиУчета.Вставить("Количественный", НСтр("ru='Количественный';uk='Кількісний'"));
	ПризнакиУчета.Вставить("Суммовой", НСтр("ru='Суммовой';uk='Сумовий'"));
	ПризнакиУчета.Вставить("ТолькоОбороты", НСтр("ru='Только обороты';uk='Тільки обороти'"));
	ПризнакиУчета.Вставить("Валютный", НСтр("ru='Валютный';uk='Валютний'"));

	Возврат ПризнакиУчета;

КонецФункции

Функция ПолучитьДействияИзмененияСубконто(ПараметрыУчетаФормы, ТолькоМПЗ = Ложь) Экспорт

	ПараметрыУчета = Новый Структура;
	Для каждого КлючИЗначение Из ПараметрыУчетаФормы Цикл
		ПараметрыУчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	// Учет МПЗ
	Если НЕ ПараметрыУчета.Свойство("ВестиСкладскойУчет") Тогда
		ПараметрыУчета.Вставить("ВестиСкладскойУчет", ПараметрыУчета.СкладскойУчет > 0);
	КонецЕсли;
	Если НЕ ПараметрыУчета.Свойство("ВестиСуммовойУчетПоСкладам") Тогда
		ПараметрыУчета.Вставить("ВестиСуммовойУчетПоСкладам", ПараметрыУчета.СкладскойУчет > 1);
	КонецЕсли;

	ПараметрыСубконто = ПолучитьСоответствиеСубконтоПараметрамУчета(ТолькоМПЗ);

	ПризнакиУчета = ПолучитьСтруктуруПризнаковУчетаСубконто();

	ТипДействия = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой));
	// -1 удалить; 0 - не менять; 1 - установить

	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДействий.Колонки.Добавить("Субконто", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ТаблицаДействий.Колонки.Добавить("Действие", ТипДействия);
	Для каждого ПризнакУчета Из ПризнакиУчета Цикл
		ТаблицаДействий.Колонки.Добавить(ПризнакУчета.Ключ, ТипДействия);
	КонецЦикла;

	Для каждого ОписаниеГруппыСчетов Из ПараметрыСубконто Цикл

		СчетаВСписке = Новый Массив;
		СчетаВИерархии = Новый Массив;
		СчетаНеВИерархии = ОписаниеГруппыСчетов.ИсключенияИерархии;

		Для каждого ОписаниеСчета Из ОписаниеГруппыСчетов.Счета Цикл
			Если ОписаниеСчета.СПодчиненными Тогда
				СчетаВИерархии.Добавить(ОписаниеСчета.Счет);
			Иначе
				СчетаВСписке.Добавить(ОписаниеСчета.Счет);
			КонецЕсли;
		КонецЦикла;

		// Получим список счетов для обработки
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СчетаВСписке", СчетаВСписке);
		Запрос.УстановитьПараметр("СчетаВИерархии", СчетаВИерархии);
		Запрос.УстановитьПараметр("СчетаНеВИерархии", СчетаНеВИерархии);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Порядок КАК Порядок,
		|	Хозрасчетный.Код,
		|	Хозрасчетный.Валютный,
		|	Хозрасчетный.Количественный,
		|	Хозрасчетный.ВидыСубконто.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСубконто,
		|		ТолькоОбороты,
		|		Суммовой,
		|		Валютный,
		|		Количественный
		|	)
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	(Хозрасчетный.Ссылка В (&СчетаВСписке)
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаВИерархии)
		|				И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаНеВИерархии)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	Счет,
		|	НомерСтроки";

		ВыборкаСчетов = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСчетов.Следующий() Цикл

			ПараметрыСчета = ПолучитьЗначенияПараметровУчетаДляСчета(ПараметрыУчета,
				ОписаниеГруппыСчетов.Параметры, ВыборкаСчетов.Счет);

			ВидыСубконто = ВыборкаСчетов.ВидыСубконто.Выгрузить();

			Для каждого ОписаниеСубконто Из ОписаниеГруппыСчетов.Субконто Цикл
				СтрокаДействия = Неопределено;

				ИспользованиеСубконто = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто.Параметр,
					ПараметрыСчета, ВыборкаСчетов);

				Если ИспользованиеСубконто = Неопределено Тогда
					Продолжить;
				КонецЕсли;

				СтрокаСубконто = ВидыСубконто.Найти(ОписаниеСубконто.Вид, "ВидСубконто");
				Если ИспользованиеСубконто Тогда
					Если СтрокаСубконто = Неопределено Тогда
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = 1;						
					КонецЕсли;

					// проверим признаки учета
					Для каждого ПризнакУчета Из ПризнакиУчета Цикл
						ЗначениеПризнака = ПолучитьЗначениеПараметраУчетаСубконто(ОписаниеСубконто[ПризнакУчета.Ключ],
							ПараметрыСчета, ВыборкаСчетов);
						Если ЗначениеПризнака = Неопределено Тогда
							Продолжить;
						КонецЕсли;

						Если СтрокаСубконто = Неопределено
							ИЛИ СтрокаСубконто[ПризнакУчета.Ключ] <> ЗначениеПризнака Тогда

							Если СтрокаДействия = Неопределено Тогда
								СтрокаДействия = ТаблицаДействий.Добавить();
								СтрокаДействия.Счет = ВыборкаСчетов.Счет;
								СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
							КонецЕсли;
							Если ЗначениеПризнака Тогда
								СтрокаДействия[ПризнакУчета.Ключ] = 1;
							Иначе
								СтрокаДействия[ПризнакУчета.Ключ] = -1;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если СтрокаСубконто = Неопределено Тогда
						Продолжить;
					Иначе
						СтрокаДействия = ТаблицаДействий.Добавить();
						СтрокаДействия.Счет = ВыборкаСчетов.Счет;
						СтрокаДействия.Субконто = ОписаниеСубконто.Вид;
						СтрокаДействия.Действие = -1;
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаДействий;

КонецФункции

Функция СобытиеЖурналаРегистрацииПараметрыУчета()

	Возврат НСтр("ru='Настройка параметров учета';uk='Настройка параметрів обліку'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка())

КонецФункции

Процедура ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидСубконто, Изменение)
	
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru='Добавлено субконто ""%1""';uk='Додано субконто ""%1""'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru='Удалено субконто ""%1""';uk='Вилучено субконто ""%1""'");
	Иначе
		ШаблонТекста = НСтр("ru='Изменено субконто ""%1""';uk='Змінено субконто ""%1""'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Процедура ДобавитьВПротоколИзменениеПризнакаУчета(ПротоколИзменений, ВидСубконто, ПризнакУчета, Изменение)
	
	// В интерфейсе признаки учета называем "видами"
	Если Изменение = 1 Тогда
		ШаблонТекста = НСтр("ru='У субконто ""%1"" установлен вид учета %2';uk='У субконто ""%1"" встановлено вид обліку %2'");
	ИначеЕсли Изменение = -1 Тогда
		ШаблонТекста = НСтр("ru='У субконто ""%1"" снят вид учета %2';uk='У субконто ""%1"" знято вид обліку %2'");
	Иначе
		ШаблонТекста = НСтр("ru='У субконто ""%1"" изменен вид учета %2';uk='У субконто ""%1"" змінено вид обліку %2'");
	КонецЕсли;
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ВидСубконто, ПризнакУчета);
	ПротоколИзменений.Добавить(Текст);
		
КонецПроцедуры

Процедура ПрименитьПараметрыУчета(ПараметрыУчета, ИзмененыПараметрыСубконто = Ложь, Отказ = Ложь, ТолькоМПЗ = Ложь, ВестиУчетЗатратПоПодразделениям = Истина) Экспорт
	
	ПризнакиУчета             = ПолучитьСтруктуруПризнаковУчетаСубконто();
	ДействияИзмененияСубконто = ПолучитьДействияИзмененияСубконто(ПараметрыУчета); // Иерархическая коллекция: на первом уровне действия с субконто на каждом из счетов, на втором - действия с призаками учета.
	
	// Сгруппируем изменения по счетам, так как записывать будем именно счет
	СчетаКИзменению = ОбщегоНазначения.ВыгрузитьКолонку(ДействияИзмененияСубконто, "Счет", Истина);
	ДействияИзмененияСубконто.Индексы.Добавить("Счет");
	Отбор = Новый Структура("Счет");
	
	НачатьТранзакцию();

	Для Каждого Счет Из СчетаКИзменению Цикл
		
		Отбор.Счет = Счет;
		ДействияДляСчета = ДействияИзмененияСубконто.НайтиСтроки(Отбор);
		
		Объект = Счет.ПолучитьОбъект();
		
		ПротоколИзменений = Новый Массив;
		
		Для Каждого Действие Из ДействияДляСчета Цикл
			
			// Действие: -1 удалить; 0 - не менять; 1 - установить
			
			// Действия с видом субконто
			Если Действие.Действие = 1 Тогда
				
				// Добавить субконто
				
				ВидыСубконтоСтрока = Объект.ВидыСубконто.Добавить();
			
				ВидыСубконтоСтрока.ВидСубконто = Действие.Субконто;
				
				ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
				
			Иначе
				
				ВидыСубконтоСтрока = Объект.ВидыСубконто.Найти(Действие.Субконто, "ВидСубконто");
				Если ВидыСубконтоСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Действие.Действие = -1 Тогда
				
				ДобавитьВПротоколИзменениеСубконто(ПротоколИзменений, ВидыСубконтоСтрока.ВидСубконто, Действие.Действие);
				
				Объект.ВидыСубконто.Удалить(ВидыСубконтоСтрока);
				
				Продолжить;
				
			КонецЕсли;
			
			// Действия с признаками учета
			
			Для Каждого ПризнакУчета Из ПризнакиУчета Цикл
				
				ДействиеСПризнаком = Действие[ПризнакУчета.Ключ];

				Если ДействиеСПризнаком = 1 Тогда
					ЗначениеПризнака = Истина;
				ИначеЕсли ДействиеСПризнаком = -1 Тогда
					ЗначениеПризнака = Ложь;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака Тогда
					Продолжить;
				КонецЕсли;
				
				ВидыСубконтоСтрока[ПризнакУчета.Ключ] = ЗначениеПризнака;
				
				ДобавитьВПротоколИзменениеПризнакаУчета(
					ПротоколИзменений, 
					ВидыСубконтоСтрока.ВидСубконто, 
					ПризнакУчета.Значение, 
					ДействиеСПризнаком);
				
			КонецЦикла; // По признакам учета
			
		КонецЦикла; // По ДействияДляСчета
		
		Если Не Объект.Модифицированность() Тогда
			Продолжить;
		КонецЕсли;
		
		ПротоколИзмененийСтрокой = СтрСоединить(ПротоколИзменений, Символы.ПС);
		
		Попытка
			Объект.Записать();
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			
			Отказ = Истина;
			
			ШаблонТекста = НСтр("ru='Ошибка при записи счета [КодСчета]:
                |[ОписаниеОшибки]
                |Ошибка произошла при попытке выполнить следующие изменения:
                |[ПротоколИзменений]'
                |;uk='Помилка при запису рахунку [КодСчета]:
                |[ОписаниеОшибки]
                |Помилка сталася при спробі виконати такі зміни:
                |[ПротоколИзменений]'");
				
			ПараметрыТекста = Новый Структура;
			ПараметрыТекста.Вставить("КодСчета",          Объект.Код);
			ПараметрыТекста.Вставить("ПротоколИзменений", ПротоколИзмененийСтрокой);
			
			// В журнал регистрации выведем подробную информацию
			ПараметрыТекста.Вставить("ОписаниеОшибки", ПодробноеПредставлениеОшибки(ОписаниеОшибки));
			
			Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Ошибка,
				Счет.Метаданные(),
				Счет, // Данные
				Текст);
				
			// Пользователю выведем краткое сообщение
			ШаблонТекста = НСтр("ru='Ошибка при записи счета [КодСчета]
                |Подробности см. в Журнале регистрации.'
                |;uk='Помилка при запису рахунку [КодСчета]
                |Подробиці див. у Журналі реєстрації.'");
			Текст = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекста, ПараметрыТекста);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
			
			Возврат;
			
		КонецПопытки;
		
		// Запишем в журнал регистрации подробную информацию об изменениях
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрацииПараметрыУчета(),
			УровеньЖурналаРегистрации.Информация, 
			Счет.Метаданные(),
			Счет,
			ПротоколИзмененийСтрокой,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецЦикла; // По СчетаКИзменению

	
	ЗафиксироватьТранзакцию();
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФУНКЦИОНАЛЬНЫМИ ОПЦИЯМИ

Функция ПолучитьФункциональнуюОпциюОбъекта(Имя, Объект) Экспорт

	ПараметрыФО = Новый Структура("Организация, Период",
		Объект.Организация, НачалоМесяца(Объект.Дата));

	Возврат ПолучитьФункциональнуюОпцию(Имя, ПараметрыФО);

КонецФункции

Процедура ЗаменитьСвязьПараметровВыбора(Элемент, Имя, НоваяСвязьПараметровВыбора) Экспорт


	МассивСвязей = Новый Массив;
	Для Каждого СвязьПараметровВыбора Из Элемент.СвязиПараметровВыбора Цикл
		Если ВРег(СвязьПараметровВыбора.Имя) <> ВРег(Имя) Тогда
			МассивСвязей.Добавить(СвязьПараметровВыбора);
		КонецЕсли;
	КонецЦикла;

	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	МассивСвязей.Добавить(НоваяСвязьПараметровВыбора);
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

КонецПроцедуры

Функция ПолучитьПодразделениеПриИзмененииСчета(Подразделение, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Если Не (ЗначениеЗаполнено(Подразделение) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Подразделение, Организация)) Тогда
		
		Если ПодразделениеПоУмолчанию = Неопределено Тогда
			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		КонецЕсли;

		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Организация) Тогда
				Подразделение = ПодразделениеПоУмолчанию;
			Иначе
				Подразделение = Неопределено;
			КонецЕсли;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Возврат Подразделение;

КонецФункции

//-- НЕ УТ

// Выполняет установку отбора по указанной организации в динамических списках.
// Вызывать необходимо из обработчика формы ПриСозданииНаСервере.
// Если в форму при открытии был передан отбор по организации, то функция не будет выполнена.
//
// Параметры
//  Форма          - УправляемаяФорма  - форма, в которой необходимо установить отбор
//  ИмяСписка      - Строка - имя реквизита формы типа ДинамическийСписок.
//  ИмяРеквизита   - Строка - имя поля-организации в динамическом списке.
//  ЗначениеОтбора - СправочникСсылка.Организации, СписокЗначений, Массив - значение отбора.
//                   Если значение не задано, то будет подставлена основная организация из
//                   настроек пользователя.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Если отбор установлен, то вернет значение отбора.
//
Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт

	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Свойство(ИмяРеквизита) Тогда
			// Если значение отбора передается в параметрах формы - берем его оттуда, параметр при этом удаляем
			ОсновнаяОрганизация = Форма.Параметры.Отбор[ИмяРеквизита];
			Форма.Параметры.Отбор.Удалить(ИмяРеквизита);
		ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") 
			ИЛИ ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ОсновнаяОрганизация = ЗначениеОтбора;
		Иначе
			ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		
		ИспользованиеОтбора = ЗначениеЗаполнено(ОсновнаяОрганизация);
		
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		
	Иначе
		
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		ВидСравненияОтбора  = ВидСравненияКомпоновкиДанных.Равно;
		ИспользованиеОтбора = Ложь;
		РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма[ИмяСписка], ИмяРеквизита, ОсновнаяОрганизация, ВидСравненияОтбора, , ИспользованиеОтбора, РежимОтображения);
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Возвращает отборы динамического списка как значения заполнения при программном вводе новой строки в список
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекДинамическогоСписка - компоновщик настроек списка
//
// Возвращаемое значение:
//   Структура   - значения отборов для заполнения нового элемента списка
//
Функция ЗначенияЗаполненияДинамическогоСписка(Знач КомпоновщикНастроек) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	
	НастройкиСписка = КомпоновщикНастроек.ПолучитьНастройки();
	ДобавитьЗначенияЗаполнения(НастройкиСписка.Отбор.Элементы, ЗначенияЗаполнения);
	
	Возврат ЗначенияЗаполнения;

КонецФункции 

Процедура ДобавитьЗначенияЗаполнения(КоллекцияОтборов, ЗначенияЗаполнения)

	Для каждого ЭлементОтбора Из КоллекцияОтборов Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование 
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			
			НаименованиеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтрНайти(НаименованиеОтбора, ".") = 0 Тогда
				ЗначенияЗаполнения.Вставить(НаименованиеОтбора, ЭлементОтбора.ПравоеЗначение);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Использование Тогда
		    ДобавитьЗначенияЗаполнения(ЭлементОтбора, ЗначенияЗаполнения);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры:
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Возврат БухгалтерскийУчетПереопределяемый.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);

КонецФункции // ОписаниеОрганизации()

//++ НЕ УТ

// Стандартная функция форматирования прописи количества
//
// Параметры:
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество) Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, десятая, десятых, десятых, м, 1";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = "целая, целых, целых, ж, сотая, сотых, сотых, м, 2";

	Иначе
		ПараметрыПрописи = "целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3";

	КонецЕсли;

	Возврат ЧислоПрописью(Количество, ,ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

//-- НЕ УТ

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры
//  ТабДокумент       – Табличный документ
//  ВыводимыеОбласти  – Массив из проверяемых таблиц или табличный документ
//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
//
// Возвращаемое значение:
//   Булево   – умещаются или нет переданные документы
//
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		ШаблонСообщения = НСтр("ru='Невозможно получить информацию о текущем принтере (возможно, в системе не установлено ни одного принтера)
                                |%1'
                                |;uk='Неможливо отримати інформацію про поточний принтер (можливо, в системі не встановлено жодного принтера)
                                |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Проверка вывода на печать';uk='Перевірка виведення на друк'",ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции // ПроверитьВыводТабличногоДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС ПОЛЯ ВЫБОРА ОРГАНИЗАЦИИ С ОБОСОБЛЕННЫМИ ПОДРАЗДЕЛЕНИЯМИ
//

Процедура ЗаполнитьСписокОрганизаций(ЭлементПолеОрганизация, СоответствиеОрганизаций) Экспорт
	
	СоответствиеОрганизаций = Новый Структура;
	
	ИспользоватьУправленческуюОрганизацию = БухгалтерскийУчетПереопределяемый.ИспользоватьУправленческуюОрганизацию();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборОрганизаций.Организация КАК Организация,
	|	НаборОрганизаций.ОрганизацияПредставление КАК ОрганизацияПредставление,
	|	НаборОрганизаций.ВключатьОбособленныеПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Ссылка КАК Организация,
	|		Организации.Наименование КАК ОрганизацияПредставление,
	|		ЛОЖЬ КАК ВключатьОбособленныеПодразделения
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|";
	
	Если НЕ ИспользоватьУправленческуюОрганизацию Тогда
	Запрос.Текст = Запрос.Текст + 
	"	ГДЕ
	|		НЕ Организации.Предопределенный";
	КонецЕсли;
	
	Если БухгалтерскиеОтчетыВызовСервераПовтИсп.ДоступностьУчетаПоПодразделениям() Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|	ОБЪЕДИНИТЬ ВСЕ
		|" + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Организации.ГоловнаяОрганизация,
		|		Организации.ГоловнаяОрганизация.Наименование,
		|		ИСТИНА
		|	ИЗ
		|		Справочник.Организации КАК Организации
		|	ГДЕ
		|		Организации.ОбособленноеПодразделение";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
		") КАК НаборОрганизаций
		|УПОРЯДОЧИТЬ ПО
		|	ОрганизацияПредставление";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлементПолеОрганизация.СписокВыбора.Очистить();
	МаксКоличествоСимволов = 40;
	Пока Выборка.Следующий() Цикл
		Ключ     = СтрЗаменить(Строка(Выборка.ВключатьОбособленныеПодразделения) + Выборка.Организация.УникальныйИдентификатор(), "-", "");
		Значение = Новый Структура("Организация,ВключатьОбособленныеПодразделения", Выборка.Организация, Выборка.ВключатьОбособленныеПодразделения);
		СоответствиеОрганизаций.Вставить(Ключ, Значение);
		
		Если Выборка.ВключатьОбособленныеПодразделения Тогда
			ОрганизацияПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 с обособленными подразделениями';uk='%1 з відокремленими підрозділами'"),
				Выборка.ОрганизацияПредставление);
		Иначе
			ОрганизацияПредставление = Выборка.ОрганизацияПредставление;
		КонецЕсли;
		
		ЭлементПолеОрганизация.СписокВыбора.Добавить(Ключ, ОрганизацияПредставление);
		
		МаксКоличествоСимволов = Макс(МаксКоличествоСимволов, СтрДлина(ОрганизацияПредставление));
	КонецЦикла;
	
	ЭлементПолеОрганизация.ШиринаСпискаВыбора = Окр(?(МаксКоличествоСимволов > 200, 200, МаксКоличествоСимволов) * 1.3);
	ЭлементПолеОрганизация.ВысотаСпискаВыбора = ?(ЭлементПолеОрганизация.СписокВыбора.Количество() > 15, 15, ЭлементПолеОрганизация.СписокВыбора.Количество());

КонецПроцедуры
