////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с объектами эсплуатации
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

// Производит запись движений в регистр "ПериодыАктуальностиОбъектовЭксплуатации"
//
Процедура ОтразитьПериодыАктуальностиОбъектовЭксплуатации(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПериодыАктуальностиОбъектовЭксплуатации;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПериоды = Движения.ПериодыАктуальностиОбъектовЭксплуатации;
	ДвиженияПериоды.Записывать = Истина;
	ДвиженияПериоды.Загрузить(Таблица);
	
КонецПроцедуры

// Функция возвращает текстовое представление остаточного ресурса
//
Функция ОстаточныйРесурсПоВремениСтрокой(КоличествоДней) Экспорт
	
	Исчисление = "";
	Количество = 0;
	
	Если Не ЗначениеЗаполнено(КоличествоДней) Или КоличествоДней <= 0 Тогда
		Возврат "";
	ИначеЕсли КоличествоДней > 370 Тогда
		Исчисление = НСтр("ru='год,года,лет';uk='рік,року,років'");
		Количество = Окр(КоличествоДней/365, 1);
	ИначеЕсли КоличествоДней > 31 Тогда
		Исчисление = НСтр("ru='месяц,месяца,месяцев';uk='місяць,місяця,місяців'");
		Количество = Окр(КоличествоДней/31, 1);
	Иначе
		Исчисление = НСтр("ru='день,дня,дней';uk='день,дні,днів'");
		Количество = Окр(КоличествоДней, 1);
	КонецЕсли;
	
	СтруктураИсчисления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Исчисление);
	
	ЧислоПервыхДвухЗнаков = Цел(Количество) - Цел(Количество/100)*100;
	ЧислоПервогоЗнака = Цел(Количество) - Цел(Количество/10)*10;
	
	Если (ЧислоПервыхДвухЗнаков>10 И ЧислоПервыхДвухЗнаков<15)
		Или ЧислоПервогоЗнака=0 Или ЧислоПервогоЗнака>4 Тогда
		
		Возврат Формат(Количество, "ЧДЦ=1") + " " + СтруктураИсчисления[2];
		
	ИначеЕсли ЧислоПервогоЗнака=1 Тогда
		
		Возврат Формат(Количество, "ЧДЦ=1") + " " + СтруктураИсчисления[0];
		
	КонецЕсли;
	
	Возврат Формат(Количество, "ЧДЦ=1") + " " + СтруктураИсчисления[1];
	
КонецФункции

//-- НЕ УТКА

// Функция возвращает расшифровку срока (заданного в месяцах) в годах и месяцах.
//
// Параметры:
// 		КоличествоМесяцев - Число - срок (в месяцах), подлежащий расшифровке
// 		Шаблон - Строка - Строка шаблона, в которую будет подставлена расшифровка вместо подстроки "%"
//
// Возвращаемое значение:
// 		Строка - расшифровка количества месяцев в годах и месяцах
//
Функция КоличествоМесяцевСтрокой(КоличествоМесяцев, Шаблон=Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(КоличествоМесяцев) Тогда
		Возврат "";
	КонецЕсли;
	
	Расшифровка = "";
	
	ЧислоЛет = Цел(КоличествоМесяцев / 12);
	ЧислоМесяцев = (КоличествоМесяцев % 12);
	
	Если ЧислоЛет <> 0 Тогда
		
		// Построим строку с числом лет
		Если (СтрДлина(ЧислоЛет) > 1) И (Число(Сред(ЧислоЛет, СтрДлина(ЧислоЛет) - 1, 1)) = 1) Тогда
			СтрокаГод = " лет";
		ИначеЕсли Число(Прав(ЧислоЛет, 1)) = 1 Тогда
			СтрокаГод = " год";
		ИначеЕсли (Число(Прав(ЧислоЛет, 1)) > 1) И (Число(Прав(ЧислоЛет, 1)) < 5) Тогда
			СтрокаГод = " года";
		Иначе
			СтрокаГод = " лет";
		КонецЕсли;
		
		Расшифровка = Расшифровка + Строка(ЧислоЛет) + СтрокаГод;
		
	КонецЕсли;
	
	Если ЧислоМесяцев <> 0 Тогда
		
		// Построим строку с числом месяцев
		Если (СтрДлина(ЧислоМесяцев) > 1) И (Число(Сред(ЧислоМесяцев, СтрДлина(ЧислоМесяцев) - 1, 1)) = 1) Тогда
			СтрокаМесяц = " месяцев";
		ИначеЕсли Число(Прав(ЧислоМесяцев, 1)) = 1 Тогда
			СтрокаМесяц = " месяц";
		ИначеЕсли (Число(Прав(ЧислоМесяцев, 1)) > 1) И (Число(Прав(ЧислоМесяцев, 1)) < 5) Тогда
			СтрокаМесяц = " месяца";
		Иначе
			СтрокаМесяц = " месяцев";
		КонецЕсли;
		
		Расшифровка = Расшифровка + ?(НЕ ЗначениеЗаполнено(Расшифровка), "", " ") + Строка(ЧислоМесяцев) + СтрокаМесяц;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шаблон) Тогда
		Расшифровка = СтрЗаменить(Шаблон, "%", Расшифровка);
	КонецЕсли;
	
	Возврат Расшифровка;
	
КонецФункции

//++ НЕ УТКА
#Область ПроцедурыИФункцииПроверкиЗаполнения

Процедура ИнициализироватьКэшированныеЗначенияПроверкиЗаполнения(КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения <> Неопределено Тогда
		Если КэшированныеЗначения.Свойство("Инициализированы") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КэшированныеЗначения = Новый Структура;
	
	КэшированныеЗначения.Вставить("ОбязательныеРеквизиты", Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбязательныеДопРеквизиты", Новый Соответствие);
	КэшированныеЗначения.Вставить("ПараметрыУчетаНаработок", Новый Соответствие);
	
	КэшированныеЗначения.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СоставРеквизитов.Имя КАК СТРОКА(255)) КАК Имя,
		|	ВЫРАЗИТЬ(СоставРеквизитов.Синоним КАК СТРОКА(255)) КАК Синоним,
		|	ВЫРАЗИТЬ(СоставРеквизитов.ОбязателенДляЗаполнения КАК БУЛЕВО) КАК ОбязателенДляЗаполнения,
		|	ВЫРАЗИТЬ(СоставРеквизитов.ТолькоПросмотрОбязательности КАК БУЛЕВО) КАК ТолькоПросмотрОбязательности
		|ПОМЕСТИТЬ РеквизитыОбъектов
		|ИЗ
		|	&СоставРеквизитовОбъекта КАК СоставРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СоставРеквизитов.Имя КАК СТРОКА(255)) КАК Имя,
		|	ВЫРАЗИТЬ(СоставРеквизитов.Синоним КАК СТРОКА(255)) КАК Синоним,
		|	ВЫРАЗИТЬ(СоставРеквизитов.ОбязателенДляЗаполнения КАК БУЛЕВО) КАК ОбязателенДляЗаполнения,
		|	ВЫРАЗИТЬ(СоставРеквизитов.ТолькоПросмотрОбязательности КАК БУЛЕВО) КАК ТолькоПросмотрОбязательности
		|ПОМЕСТИТЬ РеквизитыУзлов
		|ИЗ
		|	&СоставРеквизитовУзла КАК СоставРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДопРеквизиты.Свойство,
		|	ДопРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно
		|ПОМЕСТИТЬ ОбщиеДопРеквизитыОбъектов
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
		|ГДЕ
		|	ДопРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ОбъектыЭксплуатации_Общие)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДопРеквизиты.Свойство,
		|	ДопРеквизиты.Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно
		|ПОМЕСТИТЬ ОбщиеДопРеквизитыУзлов
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизиты
		|ГДЕ
		|	ДопРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_УзлыОбъектовЭксплуатации_Общие)");
	
	Запрос.УстановитьПараметр("СоставРеквизитовОбъекта", Справочники.ОбъектыЭксплуатации.СоставРеквизитов());
	Запрос.УстановитьПараметр("СоставРеквизитовУзла", Справочники.УзлыОбъектовЭксплуатации.СоставРеквизитов());
	
	Запрос.МенеджерВременныхТаблиц = КэшированныеЗначения.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	КэшированныеЗначения.Вставить("Инициализированы");
	
КонецПроцедуры

Процедура ИнициализироватьПотокОшибок(ПотокОшибок) Экспорт
	
	Если ПотокОшибок <> Неопределено Тогда
		Если ПотокОшибок.Свойство("Инициализирован") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПотокОшибок = Новый Структура;
	
	ПотокОшибок.Вставить("СписокОшибок", Новый Массив);
	ПотокОшибок.Вставить("ГруппыОшибок", Новый Соответствие);
	ПотокОшибок.Вставить("СчетчикОшибок", Новый Соответствие);
	
	ПотокОшибок.Вставить("Инициализирован");
	
КонецПроцедуры

// Добавляет в список ошибок новую ошибку пользователя для дальнейшей отправки
// с помощью процедуры СообщитьОшибкиПользователю().
//  Используется в процедурах ОбработкаПроверкиЗаполнения.
//
// Параметры:
//  Ошибки          - Структура с потоком ошибок
//
//  ПолеОшибки      - Строка - значение, которое задается в свойстве Поле объекта СообщениеПользователю.
//                    Для автоподстаноски номера строки должна содержать "%1".
//                    Например, "Объект.ИНН" или "Объект.Пользователи[%1].Пользователь".
//
//  ТекстДляОднойОшибки - Строка - текст ошибки для случая, когда ГруппаОшибок в коллекции только одна,
//                    например, НСтр("ru='Пользователь не выбран.'").
//
//  ГруппаОшибок    - Произвольный - используется для выбора либо текста для одной ошибки,
//                    либо текста для нескольких ошибок, например, имя "Объект.Пользователи".
//                    Если значение не заполнено, тогда используется текст для одной ошибки.
//
//  НомерСтроки     - Число - значение от 0 ... , определяющее номер строки, который нужно подставить
//                    в строку ПолеОшибки и в ТекстДляНесколькихОшибок (подставляется НомерСтроки + 1).
//
//  ТекстДляНесколькихОшибок - Строка - текст ошибки для случая, когда добавлено несколько ошибок с одинаковым
//                    свойством ГруппаОшибок, например, НСтр("ru='Пользователь в строке %1 не выбран.'").
//
Процедура ДобавитьОшибкуПользователю(Ошибки, Знач ОбъектОшибки, Знач ПолеОшибки, Знач ТекстДляОднойОшибки, Знач ГруппаОшибок = "", Знач НомерСтроки = 0, Знач ТекстДляНесколькихОшибок = "") Экспорт
	
	Если ЗначениеЗаполнено(ГруппаОшибок) Тогда
		
		Если Ошибки.ГруппыОшибок[ГруппаОшибок] = Неопределено Тогда
			// Группа ошибок использовалась один раз, используется текст для одной ошибки.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Ложь);
		Иначе
			// Группа ошибок использовалась несколько раз, используется текст для нескольких ошибок.
			Ошибки.ГруппыОшибок.Вставить(ГруппаОшибок, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("ОбъектОшибки",             ОбъектОшибки);
	Ошибка.Вставить("ПолеОшибки",               ПолеОшибки);
	Ошибка.Вставить("ТекстДляОднойОшибки",      ТекстДляОднойОшибки);
	Ошибка.Вставить("ГруппаОшибок",             ГруппаОшибок);
	Ошибка.Вставить("НомерСтроки",              НомерСтроки);
	Ошибка.Вставить("ИндексСтроки",             НомерСтроки);
	Ошибка.Вставить("ТекстДляНесколькихОшибок", ТекстДляНесколькихОшибок);
	
	Ошибки.СписокОшибок.Добавить(Ошибка);
	
	Счетчик = Ошибки.СчетчикОшибок.Получить(ОбъектОшибки);
	Если Счетчик = Неопределено Тогда
		Ошибки.СчетчикОшибок.Вставить(ОбъектОшибки, 1);
	Иначе
		Ошибки.СчетчикОшибок.Вставить(ОбъектОшибки, Счетчик+1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура сообщает ошибки проверки заполнения
//
Процедура СообщитьОшибкиПроверкиЗаполнения(Ошибки, Отказ=Ложь) Экспорт
	
	Если Ошибки.СписокОшибок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#КонецОбласти

