//////////////////////////////////////////////////////////////////////////////////////////////
// Проверка документов: методы, работающие на  стороне сервера.
//  
//////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытияФорм
// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ					- Булево - признак отказа от создания формы.
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события
//  ДополнительныеПараметры	- Структура - дополнительные параметры
//
Процедура ПриСозданииФормыНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НаФормуДобавляетсяКомандаПроверки(Форма) Тогда
		
		ДобавитьРеквизитыПроверкиНаФорму(Форма);
		
		ДобавитьКомандуПроверкиНаФорму(Форма);
		
		ОбновитьДанныеПроверкиДокументаНаФорме(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//	ТекущийОбъект			- Объект - объект, который будет прочитан.
//
Процедура ПриЧтенииФормыНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ДокументПроверен") Тогда
		// Форма является проверяемой, значит на ней присутствуют все необходимые реквизиты и команды
		
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(ТекущийОбъект.Ссылка);
		ОбновитьДанныеПроверкиДокументаНаФорме(Форма, ДанныеПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// Процедура, вызываемая при срабатывании подписки на событие "ПередЗаписью" (см. подписку на событие "ПроверкаДокументовПередЗаписьюДокумента")
// Проверяет, можно ли записывать документ (отказывает в записи, в случае если документ был проверен и стоит жесткая блокировка объекта при проверке).
//	
//	Параметры:
//		Источник - ДокументОбъект - см. подписку на событие "ПроверкаДокументовПередЗаписьюДокумента";
//		Отказ - Булево - параметр, определяющий будет ли записываться объект;
//		РежимЗаписи - Булево - режим записи документа;
//		РежимПроведения - Булево - режим проведения документа.
//
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередИзменениемДокумента(Источник, Отказ);
	
КонецПроцедуры

// Процедура, вызываемая при срабатывании подписки на событие "ПередУдалением" (см. подписку на событие "ПроверкаДокументовПередУдалениемДокумента")
// Проверяет, можно ли удалять документ (отказывает в удалении, в случае если документ был проверен и стоит жесткая блокировка объекта при проверке).
//	
//	Параметры:
//		Источник - ДокументОбъект - см. подписку на событие "ПроверкаДокументовПередЗаписьюДокумента";
//		Отказ - Булево - параметр, определяющий будет ли записываться объект.
//
Процедура ПередУдалениемДокумента(Источник, Отказ) Экспорт
		
	ПередИзменениемДокумента(Источник, Отказ, Истина);
	
КонецПроцедуры

// Определяет необходимость в отказе изменения объекта (отказ будет срабатывать если документ был проверен и стоит запрет на редактирование проверенных)
//	
//	Параметры:
//		Источник - ДокументОбъект - документ, который изменяется;
//		Отказ - Булево - параметр, определяющий будет ли записываться объект;
//		Удаление - Булево - признак того, что документ удаляется.
//
Процедура ПередИзменениемДокумента(Источник, Отказ, Удаление = Ложь) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету")
		ИЛИ Не ЭтотТипДокументаДолженПроверяться(ТипЗнч(Источник.Ссылка))
		ИЛИ ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Источник.Ссылка);
	ИзменениеПроверенных = ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету");
	
	Источник.ДополнительныеСвойства.Вставить("ПроверкаДокументов_ДанныеПроверки", ДанныеПроверки);
	
	Если ДанныеПроверки.Проверен И Не ИзменениеПроверенных Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Документ %Документ% проверен. Нельзя изменять проверенные документы.';uk='Документ %Документ% перевірений. Не можна змінювати перевірені документи.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Документ%", Источник.Ссылка);
		ЗаписьЖурналаРегистрации(НСтр("ru='Операция не выполнена.';uk='Операція не виконана.'"), УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник.Ссылка, СообщениеОбОшибке);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Источник.Ссылка);
	ИначеЕсли ДанныеПроверки.Проверен И Источник.ПометкаУдаления Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru='Документ %Документ% проверен. Перед пометкой на удаление, необходимо отменить проверку документа.';uk='Документ %Документ% перевірений. Перед позначкою на видалення, необхідно скасувати перевірку документа.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Документ%", Источник.Ссылка);
		ЗаписьЖурналаРегистрации(НСтр("ru='Операция не выполнена.';uk='Операція не виконана.'"), УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник.Ссылка, СообщениеОбОшибке);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Источник.Ссылка);
	ИначеЕсли Удаление Тогда
		// Очищаем ссылки для непроведенных документов, помечаемых на удаление:
		РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументаПриЗаписи(Источник.Ссылка, Новый Массив, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриПроведенииДокумента(Источник, Отказ, РежимПроведения) Экспорт
	
	ПриИзмененииДокумента(Источник, Отказ);
	
КонецПроцедуры

Процедура ПриОтменеПроведенияДокумента(Источник, Отказ) Экспорт
	
	ПриИзмененииДокумента(Источник, Отказ);
	
КонецПроцедуры

Процедура ПриИзмененииДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Отказ
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету")
		ИЛИ Не ЭтотТипДокументаДолженПроверяться(ТипЗнч(Источник.Ссылка))
		ИЛИ ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("ПроверкаДокументов_ДанныеПроверки") Тогда
		ДанныеПроверки = Источник.ДополнительныеСвойства.ПроверкаДокументов_ДанныеПроверки;
	Иначе
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Источник.Ссылка);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету") И ДанныеПроверки.Проверен ИЛИ Не ДанныеПроверки.Проверен Тогда
		
		МассивОрганизаций = ПолучитьМассивОрганизацийДокумента(Источник);
		РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументаПриЗаписи(Источник.Ссылка, МассивОрганизаций, ДанныеПроверки);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Другое

//	Обновляет форму в зависимости от данных проверки документа.
//
//	Параметры:
//		Форма - УправляемаяФорма - форма, которая должна обновляться;
//		ДанныеПроверки - Структура (см. РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента)
//
Процедура ОбновитьДанныеПроверкиДокументаНаФорме(Форма, ДанныеПроверки = Неопределено) Экспорт
	
	Если ДанныеПроверки = Неопределено Тогда
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Форма.ПроверкаДокументов_ДокументПроверен = ДанныеПроверки.Проверен;

	ОпределитьСвойстваКнопкиПроверкиПоДанным(Форма, ДанныеПроверки);		
	
	Если ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету") Тогда
		Форма.ПроверкаДокументов_ПодтверждениеЗаписи = Истина;
	Иначе
		БлокировкаФормы(Форма, ДанныеПроверки.Проверен);
	КонецЕсли;
	
КонецПроцедуры

//	Определяет, проверяется ли документ данного типа,
//	определяется на основании наличия данного документа в измерении регистра "СтатусыПроверкиДокументов").
//
//	Параметры:
//		ТипДокумента - Тип - проверяемый тип.
//
//	ВозвращаемоеЗначение:
//		Булево - истина, если документ должен проверяться.
//
Функция ЭтотТипДокументаДолженПроверяться(ТипДокумента) Экспорт
	
	ОписаниеТиповПроверяемыхДокументов = Метаданные.РегистрыСведений["СтатусыПроверкиДокументов"].Измерения.Документ.Тип;
	Возврат ОписаниеТиповПроверяемыхДокументов.СодержитТип(ТипДокумента);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРеквизитыПроверкиНаФорму(Форма)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_ДокументПроверен", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_БлокировкаФормы", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_ПодтверждениеЗаписи", Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

Функция НаФормуДобавляетсяКомандаПроверки(Форма)
	
	// Управляем проверкой только тогда, когда включена соответствующая функциональная опция.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// Управляем проверкой только тогда, когда есть реквизит "Объект".
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Управляем проверкой только тогда, когда форма является формой документа и для этого документа возможно установить статусы проверки.
	Если Не ФормаЯвляетсяФормойДокументаКоторыйПроверяется(Форма.ИмяФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ФормаЯвляетсяФормойДокументаКоторыйПроверяется(ИмяФормы)
	
	РезультатПроверки = Ложь;
	
	МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
	
	Если МассивИмениФормы.Получить(0) = "Документ" Тогда
		ТипДокументаФормы = Тип("ДокументСсылка."+МассивИмениФормы.Получить(1));
		
		ФормаЯвляетсяОсновнойФормойДокумента = МассивИмениФормы.Получить(3) = "ФормаДокумента";
		
		Если ЭтотТипДокументаДолженПроверяться(ТипДокументаФормы) И ФормаЯвляетсяОсновнойФормойДокумента Тогда
			РезультатПроверки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;	
	
КонецФункции

Процедура ДобавитьКомандуПроверкиНаФорму(Форма)
	
	РазмещениеКоманды = ОпределитьРазмещениеКомандыПроверки(Форма);
	
	Если РазмещениеКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента";
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду"; // универсальный обработчик
	КомандаФормы.Заголовок = НСтр("ru='Проверено';uk='Перевірено'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	ЭлементКомандыФормы = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), РазмещениеКоманды);
	ЭлементКомандыФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ЭлементКомандыФормы.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

Функция ОпределитьРазмещениеКомандыПроверки(Форма)
	
	РазмещениеКомандыПроверки = Неопределено;
	
	Для каждого ЭлементФормы из Форма.Элементы Цикл
		
		Если ЭлементФормы.Имя = "ФормаОбработкаОтражениеДокументовВРеглУчетеПроводкиРеглУчета" Тогда
			РазмещениеКомандыПроверки = ЭлементФормы.Родитель;
			Прервать;
		Иначе
			Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы")
				И СтрНайти(НРег(ЭлементФормы.Имя), НСтр("ru='справка';uk='довідка'")) <> 0
				И ЭлементФормы.Родитель <> Неопределено Тогда
					РазмещениеКомандыПроверки = ЭлементФормы.Родитель;
			КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазмещениеКомандыПроверки;
	
КонецФункции

Процедура ОпределитьСвойстваКнопкиПроверкиПоДанным(Форма, ДанныеОПроверке)
	
	КомандаПроверки = Форма.Команды.Найти("ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента");
	КартинкаКнопки = БиблиотекаКартинок.ОтгрузкаРазрешена;
	
	ЕстьПравоИзмененияСтатусаПроверки = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов);
	
	Если ДанныеОПроверке.СтатусПроверки.Пустая() И Форма.Объект.Ссылка.Пустая() Тогда
		ПодсказкаКнопки = НСтр("ru='Проверка документа возможна только после записи документа';uk='Перевірка документа можлива тільки після запису документа'");
	Иначе
		Если ЕстьПравоИзмененияСтатусаПроверки Тогда
			ПодсказкаКнопки = НСтр("ru='Изменение статуса проверки документа.';uk='Зміна статусу перевірки документа.'");
		Иначе
			Если ДанныеОПроверке.Проверен Тогда
				ПодсказкаКнопки = НСтр("ru='Документ проверен, изменение не возможно.';uk='Документ перевірений, зміна не можлива.'");
				КартинкаКнопки = БиблиотекаКартинок.ОтгрузкаЗапрещена;
			Иначе
				ПодсказкаКнопки = НСтр("ru='Документ не проверен.';uk='Документ не перевірений.'");
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если ДанныеОПроверке.Проверен Тогда
		ПояснениеПроверки = Символы.ПС + НСтр("ru='Проверил: %Проверил%, Дата: %ДатаПроверки%';uk='Перевірив: %Проверил%, Дата: %ДатаПроверки%'");
		ПояснениеПроверки = СтрЗаменить(ПояснениеПроверки, "%Проверил%", ДанныеОПроверке.Проверил);
		ПояснениеПроверки = СтрЗаменить(ПояснениеПроверки, "%ДатаПроверки%", ДанныеОПроверке.ДатаПроверки);
		ПодсказкаКнопки = ПодсказкаКнопки + ПояснениеПроверки;
	КонецЕсли;
	
	КомандаПроверки.Подсказка = ПодсказкаКнопки;
	КомандаПроверки.Картинка = КартинкаКнопки;
	
	ЭлементКомандыФормы = Форма.Элементы.Найти("ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента");
	Если Не ЭлементКомандыФормы = Неопределено Тогда
		ЭлементКомандыФормы.Пометка = Форма.ПроверкаДокументов_ДокументПроверен;
	КонецЕсли;
	
КонецПроцедуры

Процедура БлокировкаФормы(Форма, ДокументПроверен)
	
	Если ДокументПроверен Тогда
		// Форма должна быть заблокирована, так как документ проверен и запрещено изменение проверенных документов.
		
		Если Форма.ТолькоПросмотр Тогда
			// Форма уже заблокирована, но не в результате проверки документа, сделаем соответсвующую пометку.
			Форма.ПроверкаДокументов_БлокировкаФормы = Ложь;
		Иначе
			// Форма не заблокирована, заблокируем ее и сделаем соответствующую пометку.
			Форма.ТолькоПросмотр = Истина;
			Форма.ПроверкаДокументов_БлокировкаФормы = Истина;
		КонецЕсли;
		
	Иначе
		// Форма не нуждается в блокировке, так как документ не проверен или разрешено изменение проверенных документов.
		
		Если Форма.ПроверкаДокументов_БлокировкаФормы Тогда
			// Форма ранее была заблокирована в результате предыдущей проверке документов - разблокируем форму и снимем пометку о блокировке.
			Форма.ТолькоПросмотр = Ложь;
			Форма.ПроверкаДокументов_БлокировкаФормы = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает из переданного объекта (ссылки) массив реквизитов с типом "Организация".
//
//	Параметры:
//		ДокументИсточник - ДокументСсылка, ДокументОбъект - объект, реквизиты которого надо проанализировать на соответствие типу "Организация".
// 															Если передан объект - значение реквизиты считывается непосредственно из него, если передана ссылка
//															- происходит обращение к данымм базы запросом (см. ОбщегоНазначения.ЗначенияРеквизитовОбъекта)
//		УчитыватьУправленческуюОрганизацию - Булево - признак, определяющий, должна ли среди возвращаемого массива быть управленческая организация.
// 														Значение по умолчанию - истина;
//
//	ВозвращаемоеЗначение:
//		Массив - массив найденных Организаций в документе. Если в документе не найдено ни одного реквизита с типом значения "Организация" - будет возвращен массив с ссылкой на пустую организацию.
//
Функция ПолучитьМассивОрганизацийДокумента(ДокументИсточник, УчитыватьУправленческуюОрганизацию = Ложь) Экспорт
	
	МассивОрганизаций = Новый Массив;
	ЭтоОбъект = НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументИсточник));
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
	
		РеквизитыОрганизации = ОбщегоНазначения.ИменаРеквизитовПоТипу(ДокументИсточник.Ссылка, Тип("СправочникСсылка.Организации"));
		
		Если ЭтоОбъект Тогда
			
			МассивРеквизитовОрганизации = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РеквизитыОрганизации, ",", Истина, Истина);
			
			Если МассивРеквизитовОрганизации.Количество() Тогда
				Для каждого РеквизитОрганизации из МассивРеквизитовОрганизации Цикл
					ТекущаяОрганизация = ДокументИсточник[РеквизитОрганизации];
					Если ЗначениеЗаполнено(ТекущаяОрганизация) И ТипЗнч(ТекущаяОрганизация) = Тип("СправочникСсылка.Организации")
						И МассивОрганизаций.Найти(ТекущаяОрганизация) = Неопределено Тогда
						
						Если РеквизитОрганизации = "Организация" Тогда
							МассивОрганизаций.Вставить(0, ТекущаяОрганизация);
						Иначе
							МассивОрганизаций.Добавить(ТекущаяОрганизация);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
			КонецЕсли;
			
		Иначе
			
			СтруктураРеквизитовОрганизаций = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументИсточник, РеквизитыОрганизации);
			Для каждого РеквизитОрганизации из СтруктураРеквизитовОрганизаций Цикл
				ТекущаяОрганизация = СтруктураРеквизитовОрганизаций[РеквизитОрганизации.Ключ];
				Если ЗначениеЗаполнено(ТекущаяОрганизация) И МассивОрганизаций.Найти(ТекущаяОрганизация) = Неопределено Тогда
					Если РеквизитОрганизации.Ключ = "Организация" Тогда
						МассивОрганизаций.Вставить(0, ТекущаяОрганизация);
					Иначе
						МассивОрганизаций.Добавить(ТекущаяОрганизация);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;		
		
	Иначе
		
		Если ЭтоОбъект Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументИсточник, "Организация") Тогда
				МассивОрганизаций.Добавить(ДокументИсточник["Организация"]);
			Иначе
				МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
			КонецЕсли;
		Иначе
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ДокументИсточник.Метаданные()) Тогда
				МассивОрганизаций.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "Организация"));
			Иначе
				МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не УчитыватьУправленческуюОрганизацию Тогда
		ИндексУправленческойОрганизацииВМассиве = МассивОрганизаций.Найти(Справочники.Организации.УправленческаяОрганизация);
		Если НЕ ИндексУправленческойОрганизацииВМассиве = Неопределено Тогда
			МассивОрганизаций.Удалить(ИндексУправленческойОрганизацииВМассиве);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивОрганизаций;
	
КонецФункции

#КонецОбласти