////////////////////////////////////////////////////////////////////////////////
// ФизическиеЛицаЗарплатаКадры: методы, дополняющие функциональность справочника
// 		ФизическиеЛица.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Добавляет в коллекцию описание проверяемых данных.
// 
// Параметры:
//		КоллекцияПравил - Массив, если передано Неопределено будет создан массив.
//		ПравилоПроверки - Строка, идентификатор правила проверки
//						доступные идентификаторы:
//							ИНН
//							СНИЛС
//							МестоРождения
//							Адрес
//		ПутьКДанным - Строка
//		ПредставлениеПроверяемогоЭлемента - Строка
//		ОбязательноКЗаполнению - Булево, по умолчанию Ложь.
//
Процедура ДобавитьПравилоПроверки(КоллекцияПравил, ПравилоПроверки, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению = Ложь) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = ПравилоПроверки;
	Правило.ПутьКДанным = ПутьКДанным;
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "УдостоверениеЛичности", для проверки документа,
// удостоверяющего личность.
// Описание одноименных параметров, см. ДобавитьПравилоПроверки.
//
// Параметры:
//		ПутьКДаннымСерииДокумента
//		ПутьКДаннымНомераДокумента
//		ПутьКДаннымДатыВыдачиДокумента
//      ПутьКДаннымКемВыданДокумент
//		ПроверятьДопустимыеВидыДокументовФНС - булево - определяет необходимость проверки виды документа с точки зрения ФНС
//
Процедура ДобавитьПравилоПроверкиУдостоверенияЛичности(КоллекцияПравил, ПутьКДаннымВидДокумента, ПутьКДаннымСерииДокумента, ПутьКДаннымНомераДокумента, ПутьКДаннымДатыВыдачиДокумента, ПутьКДаннымКемВыданДокумент, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению = Ложь, ПроверятьДопустимыеВидыДокументовФНС = Ложь) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = "УдостоверениеЛичности";
	Правило.ПутьКДанным = ПутьКДаннымВидДокумента;
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	Правило.Вставить("ПроверятьДопустимыеВидыДокументовФНС", ПроверятьДопустимыеВидыДокументовФНС);
	Правило.Вставить("ПутьКДаннымСерииДокумента", ПутьКДаннымСерииДокумента);
	Правило.Вставить("ПутьКДаннымНомераДокумента", ПутьКДаннымНомераДокумента);
	Правило.Вставить("ПутьКДаннымДатыВыдачиДокумента", ПутьКДаннымДатыВыдачиДокумента);
	Правило.Вставить("ПутьКДаннымКемВыданДокумент", ПутьКДаннымКемВыданДокумент);
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "ДатаРождения", для проверки даты рождения.
// Описание одноименных параметров, см. ДобавитьПравилоПроверки.
//
// Параметры:
//		ДатаПроверки
//
Процедура ДобавитьПравилоПроверкиДатыРождения(КоллекцияПравил, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ДатаПроверки, ОбязательноКЗаполнению = Ложь) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = "ДатаРождения";
	Правило.ПутьКДанным = ПутьКДанным;
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	Правило.Вставить("ДатаПроверки", ДатаПроверки);
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "ФИО", для проверки заполненности фамилии, имени, отчества.
// Описание одноименных параметров, см. ДобавитьПравилоПроверки.
//
// Параметры:
//		ПутьКДаннымФамилия
//		ПутьКДаннымИмя
//		ПутьКДаннымОтчество
//		ПутьКДаннымСтраныГражданства
//
Процедура ДобавитьПравилоПроверкиФИО(КоллекцияПравил, ПутьКДаннымФамилия, ПутьКДаннымИмя, ПутьКДаннымОтчество, ПутьКДаннымСтраныГражданства, ПредставлениеПроверяемогоЭлемента) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	Правило = ОписаниеПравилаПроверкиДанных();
	
	Правило.ПравилоПроверки = "ФИО";
	Правило.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	Правило.ОбязательноКЗаполнению = Истина;
	
	Правило.ПутьКДанным = ПутьКДаннымФамилия;
	Правило.Вставить("ПутьКДаннымИмя", ПутьКДаннымИмя);
	Правило.Вставить("ПутьКДаннымОтчество", ПутьКДаннымОтчество);
	Правило.Вставить("ПутьКДаннымСтраныГражданства", ПутьКДаннымСтраныГражданства);
	
	КоллекцияПравил.Добавить(Правило);
	
КонецПроцедуры

// Проверяет заполнение коллекции данных физических лиц, заполняет коллекцию ошибок.
//
// Параметры:
//		КоллекцияДанныхФизическихЛиц - коллекция данных (массив структур, таблица значений).
//		ПравилаПроверки - массив, описаний правил проверки.
//		Ошибки - массив, описаний найденных ошибок.
//		Отказ
//
Процедура ПроверитьКоллекциюДанных(КоллекцияДанныхФизическихЛиц, ПравилаПроверки, Ошибки, Отказ = Ложь) Экспорт
	
	Для ИндексЭлемента = 0 По КоллекцияДанныхФизическихЛиц.Количество() - 1 Цикл
		
		ПроверитьДанныеФизическогоЛица(
			КоллекцияДанныхФизическихЛиц[ИндексЭлемента],
			ПравилаПроверки,
			Ошибки,
			Отказ,
			ИндексЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполнение данных физического лица, заполняет коллекцию ошибок.
//
// Параметры:
//		ДанныеФизическогоЛица
//		Ошибки
//		Отказ
//		НомерСтроки
//
Процедура ПроверитьДанныеФизическогоЛица(ДанныеФизическогоЛица, ПравилаПроверки, Ошибки, Отказ = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ФизическиеЛицаЗарплатаКадрыВнутренний.ПроверитьДанныеФизическогоЛица(ДанныеФизическогоЛица, ПравилаПроверки, Ошибки, Отказ, НомерСтроки);
	
КонецПроцедуры

// Выводит в окно сообщений ошибки проверки данных физических лиц.
//
// Параметры:
//		Ошибки - Соответствие массива описания ошибок физическим лицам.
//		Отказ
//
Процедура ВывестиОшибкиДанныхФизическогоЛица(Ошибки, Отказ = Ложь) Экспорт
	
	Для каждого ОшибкаДанных Из Ошибки Цикл
		
		ОписаниеОшибки = ОшибкаДанных.Значение;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибки.ТекстОшибки,
			,
			ОписаниеОшибки.ПолеФормы 
				+ ?(ОписаниеОшибки.НомерСтроки = Неопределено, "", "[" + ОписаниеОшибки.НомерСтроки + "]"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные физического лица, необходимые для БРО.
//
// Параметры:
// 		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо, данные которого нужно получить.
//		МассивПоказателей - Массив - данные физического лица которые нужно получить см.
//		                             РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице.
//		ДатаЗначения - Дата - дата на которую нужно получать периодические данные. По умолчанию данные будут получены на
//		                      текущую дату сеанса.
//
// Возвращаемое значение:
// 		Структура - см. РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице.
//
Функция ДанныеФизическогоЛицаДляРегламентированнойОтчетности(ФизическоеЛицо, МассивПоказателей = Неопределено, Знач ДатаЗначения = Неопределено) Экспорт 
	ПолучаемыеДанные = Новый Массив;
	ДанныеФизическогоЛица = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Если МассивПоказателей = Неопределено Тогда
		ПолучаемыеДанные.Добавить("ИНН");
		ПолучаемыеДанные.Добавить("Фамилия");
		ПолучаемыеДанные.Добавить("Имя");
		ПолучаемыеДанные.Добавить("Отчество");
		
		ДанныеФизическогоЛица.Вставить("ИНН");
		ДанныеФизическогоЛица.Вставить("Фамилия");
		ДанныеФизическогоЛица.Вставить("Имя");
		ДанныеФизическогоЛица.Вставить("Отчество");
	Иначе
		Для Каждого ЗапрашиваемыйПоказатель Из МассивПоказателей Цикл
			Если ЗапрашиваемыйПоказатель = "ИНН"
				Или ЗапрашиваемыйПоказатель = "Фамилия"
				Или ЗапрашиваемыйПоказатель = "Имя"
				Или ЗапрашиваемыйПоказатель = "Отчество" Тогда
				
				ПолучаемыеДанные.Добавить(ЗапрашиваемыйПоказатель);
			КонецЕсли;
			
			ДанныеФизическогоЛица.Вставить(ЗапрашиваемыйПоказатель);
		КонецЦикла;	
	КонецЕсли;	
	
	СписокФизическихЛиц = Новый Массив;
	СписокФизическихЛиц.Добавить(ФизическоеЛицо); 
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизическихЛиц, ПолучаемыеДанные, ДатаЗначения);
	
	Если КадровыеДанные.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеФизическогоЛица, КадровыеДанные[0]);
	КонецЕсли;
	
	Возврат ДанныеФизическогоЛица;
КонецФункции

// Функция склоняет переданное ФИО.
// Параметры:
//  ФИО (обязательный), тип строка.
//   Параметр должен содержать фамилию имя отчества в именительном падеже, которые необходимо просклонять.
//
//  Падеж (обязательный), тип число.
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
//  Результат (обязательный), тип строка.
//   Переменная, в которую будет возвращен результат склонения.
//
//  Пол (необязательный), тип число.
//   Пол физического лица, тип ПеречислениеСсылка.ПолФизическогоЛица.
//
Функция Просклонять(Знач ФИО, Знач Падеж, Результат, Знач Пол = Неопределено) Экспорт
	
	ПолЧислом = Неопределено;
	Если ТипЗнч(Пол) = Тип("Число") Тогда
		ПолЧислом = Пол;
	Иначе
		Если Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			ПолЧислом = 1;
		ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			ПолЧислом = 2;
		КонецЕсли;
	КонецЕсли;
	
	Результат = СклонениеПредставленийОбъектов.ПросклонятьФИО(ФИО, Падеж, , ПолЧислом);
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Истина;
	Иначе
		Результат = ФИО;
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции

// Возвращает представление ФИО, для заполнения расшировки подписи в виде "И. О. Фамилия".
// 
// Параметры:
//		ФИО	- Строка
//			- Структура
//				* Фамилия	- Строка
//				* Имя		- Строка
//				* Отчество	- Строка
//
// Возвращаемое значение:
//		Строка
//
Функция РасшифровкаПодписи(Знач ФИОПолные) Экспорт
	
	Если ТипЗнч(ФИОПолные) = Тип("Структура") Тогда
		
		ФИО = Новый Массив;
		ФИО.Добавить(ФИОПолные.Фамилия);
		ФИО.Добавить(ФИОПолные.Имя);
		ФИО.Добавить(ФИОПолные.Отчество);
		
	Иначе
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ФИОПолные), " ");
	КонецЕсли;
	
	Если ФИО.Количество() >= 3 Тогда
		
		РасшифровкаПодписи = Лев(ФИО[1], 1) + ". "
			+ Лев(ФИО[2], 1) + ". "
			+ ФИО[0];
			
	Иначе
		РасшифровкаПодписи = ФИОПолные;
	КонецЕсли; 
	
	Возврат РасшифровкаПодписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("СтрокаПоиска") 
		И НЕ ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СтрокаПоиска",  Параметры.СтрокаПоиска + "%");
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ФИОФизическихЛиц.Фамилия + ВЫБОР
			|		КОГДА ФИОФизическихЛиц.Имя = """"
			|			ТОГДА """"
			|		ИНАЧЕ "" "" + ФИОФизическихЛиц.Имя
			|	КОНЕЦ + ВЫБОР
			|		КОГДА ФИОФизическихЛиц.Отчество = """"
			|			ТОГДА """"
			|		ИНАЧЕ "" "" + ФИОФизическихЛиц.Отчество
			|	КОНЕЦ КАК ФИО,
			|	ФИОФизическихЛиц.ФизическоеЛицо.Наименование КАК Наименование,
			|	ФИОФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА ФИОФизическихЛиц.Период = ФИОФизическихЛицСрезПоследних.Период
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ ФИОФизическихЛицСрезПоследних.Период
			|	КОНЕЦ КАК Период
			|ПОМЕСТИТЬ ВТПрежниеФИО
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
			|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
			|ГДЕ
			|	ФИОФизическихЛиц.Фамилия + ВЫБОР
			|			КОГДА ФИОФизическихЛиц.Имя = """"
			|				ТОГДА """"
			|			ИНАЧЕ "" "" + ФИОФизическихЛиц.Имя
			|		КОНЕЦ + ВЫБОР
			|			КОГДА ФИОФизическихЛиц.Отчество = """"
			|				ТОГДА """"
			|			ИНАЧЕ "" "" + ФИОФизическихЛиц.Отчество
			|		КОНЕЦ + ВЫБОР
			|			КОГДА ФИОФизическихЛиц.ФизическоеЛицо.УточнениеНаименования = """"
			|				ТОГДА """"
			|			ИНАЧЕ "" "" + ФИОФизическихЛиц.ФизическоеЛицо.УточнениеНаименования
			|		КОНЕЦ ПОДОБНО &СтрокаПоиска
			|	И ФИОФизическихЛиц.Период <> ФИОФизическихЛицСрезПоследних.Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПрежниеФИО.ФИО КАК ФИО,
			|	ПрежниеФИО.ФизическоеЛицо.ФИО КАК ФИОТекущее,
			|	ПрежниеФИО.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МАКСИМУМ(ПрежниеФИО.Период) КАК Период
			|ПОМЕСТИТЬ ВТВсеСовпадения
			|ИЗ
			|	ВТПрежниеФИО КАК ПрежниеФИО
			|
			|СГРУППИРОВАТЬ ПО
			|	ПрежниеФИО.ФИО,
			|	ПрежниеФИО.Наименование,
			|	ПрежниеФИО.ФизическоеЛицо,
			|	ПрежниеФИО.ФизическоеЛицо.ФИО
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ФизическиеЛица.ФИО,
			|	ФизическиеЛица.ФИО,
			|	ФизическиеЛица.Ссылка,
			|	NULL
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Наименование ПОДОБНО &СтрокаПоиска
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВсеСовпадения.ФИО КАК ФИО,
			|	ВсеСовпадения.ФИОТекущее КАК ФИОТекущее,
			|	ВсеСовпадения.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВсеСовпадения.Период КАК Период,
			|	ВсеСовпадения.ФизическоеЛицо.Код КАК Код
			|ИЗ
			|	ВТВсеСовпадения КАК ВсеСовпадения
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФИО";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			СтандартнаяОбработка = Ложь;
			ДлинаСтрокиПоиска = СтрДлина(Параметры.СтрокаПоиска);
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Представление = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(
						Лев(Выборка.ФИО, ДлинаСтрокиПоиска),
						Новый Шрифт( , , Истина),
						WebЦвета.Зеленый),
					Сред(Выборка.ФИО, ДлинаСтрокиПоиска + 1));
					
				Если ЗначениеЗаполнено(Выборка.Период) Тогда
					
					Представление = Новый ФорматированнаяСтрока(
						Представление,
						" (" + ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Выборка.ФИОТекущее) + " " 
							+ НСтр("ru='с';uk='з'") + " " + Формат(Выборка.Период, "ДЛФ=D") + " (" + Выборка.Код + "))");
							
				Иначе
					
					Представление = Новый ФорматированнаяСтрока(
						Представление,
						" (" + Выборка.Код + ")");
					
				КонецЕсли; 
				
				ДанныеВыбора.Добавить(Выборка.ФизическоеЛицо, Представление);				
				
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ФизическиеЛицаЗарплатаКадрыВнутренний.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	ФизическиеЛицаЗарплатаКадрыВнутренний.ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
КонецПроцедуры

Процедура ПроверитьУникальностьНаименованияФизическогоЛица(ФизическоеЛицоОбъект, Отказ) Экспорт
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизическоеЛицоОбъект.ФИО);
	СписокУточнений = СотрудникиФормы.ПодобратьСписокУточненийТекущегоФизическогоЛица(ФизическоеЛицоОбъект.Ссылка, СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество, "");
	НайденноеЗначение = СписокУточнений.НайтиПоЗначению(ФизическоеЛицоОбъект.УточнениеНаименования);
	Если НайденноеЗначение <> Неопределено Тогда
		
		СтрокаПодстановки = НСтр("ru='В списке уже есть %1.';uk='У списку вже є %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, ФизическоеЛицоОбъект.ФИО);
		ТекстСообщения = ТекстСообщения + НСтр("ru='
            |Введите дополнительную строку по которой вы будете отличать этого человека.'
            |;uk='
            |Введіть додатковий рядок, за яким ви будете відрізняти цю людину.'");
		
		Если СписокУточнений.Количество() <> 1 Или Не ПустаяСтрока(СписокУточнений[0].Значение) Тогда
			
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru='
                |Для идентификации сотрудников уже использованы следующие дополнения:'
                |;uk='
                |Для ідентифікації співробітників вже використані наступні доповнення:'");
			
			Для каждого Уточнение Из СписокУточнений Цикл
				
				Если ПустаяСтрока(Уточнение.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + "
				| - " + Уточнение.Значение;
				
			КонецЦикла;
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ФизическоеЛицо.УточнениеНаименования", , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ФамилияДляПоиска(Знач Фамилия) Экспорт
	
	ПодготовитьКПоискуПоФИО(Фамилия); 
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Фамилия);
	
	Возврат Фамилия;
	
КонецФункции

Функция ИмяДляПоиска(Знач Имя) Экспорт
	
	ПодготовитьКПоискуПоФИО(Имя); 
	
	Если ЗначениеЗаполнено(Имя) И СтрНайти("НАТАЛЬЯ,НАТАЛИЯ", Имя) > 0 Тогда
		Имя = "НАТАЛЬИЯ";
	КонецЕсли;
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Имя);
	
	Возврат Имя;
	
КонецФункции

Функция ОтчествоДляПоиска(Знач Отчество) Экспорт
	
	ПодготовитьКПоискуПоФИО(Отчество); 
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Отчество);
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить("ИЕВИЧ");
	МассивПодстрок.Добавить("ЬЕВИЧ");
	МассивПодстрок.Добавить("ИЕВНА");
	МассивПодстрок.Добавить("ЬЕВНА");
	НетЗаменыСимволов = Истина;
	Для каждого Стр Из МассивПодстрок Цикл
		ПозицияСимвола = СтрНайти(Отчество, Стр);
		Если ПозицияСимвола > 0 Тогда
			Отчество = Лев(Отчество,ПозицияСимвола-1) + "ИЬ" + Сред(Отчество,ПозицияСимвола+1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетЗаменыСимволов Тогда
		
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить("ЬЯНОВИЧ");
		МассивПодстрок.Добавить("ИЯНОВИЧ");
		МассивПодстрок.Добавить("ИАНОВИЧ");
		МассивПодстрок.Добавить("ЬЯНОВНА");
		МассивПодстрок.Добавить("ИЯНОВНА");
		МассивПодстрок.Добавить("ИАНОВНА");
		Для каждого Стр Из МассивПодстрок Цикл
			ПозицияСимвола = СтрНайти(Отчество, Стр);
			Если ПозицияСимвола > 0 Тогда
				Отчество = Лев(Отчество,ПозицияСимвола-1) + "ИЬЯА" + Сред(Отчество,ПозицияСимвола+2);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отчество;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции



Функция ОписаниеПравилаПроверкиДанных()
	
	Возврат Новый Структура("ПравилоПроверки, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению");	
	
КонецФункции

Процедура ПроверитьКоллекциюПравил(КоллекцияПравил)
	
	Если КоллекцияПравил = Неопределено Тогда
		КоллекцияПравил = Новый Массив;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПодготовитьКПоискуПоФИО(Представление)
	
	Представление = ВРег(Представление);
	
	Представление = СтрЗаменить(Представление, "~", "~~");
	Представление = СтрЗаменить(Представление, "%", "~%");
	Представление = СтрЗаменить(Представление, "_", "~_");
	Представление = СтрЗаменить(Представление, "[", "~[");
	Представление = СтрЗаменить(Представление, "-", "~-");
	
КонецПроцедуры

Процедура ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Представление)
	
	Представление = СтрЗаменить(Представление, "Е", "&");
	Представление = СтрЗаменить(Представление, "Ё", "&");
	Представление = СтрЗаменить(Представление, "&", "ЕЁ");
	
КонецПроцедуры

Функция НаименованиеСлужебное(Наименование) Экспорт
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Наименование);
	
	Возврат СокрЛП(
		ФамилияДляПоиска(СтруктураФИО.Фамилия) + " "
		+ ИмяДляПоиска(СтруктураФИО.Имя) + " "
		+ ОтчествоДляПоиска(СтруктураФИО.Отчество));
			
КонецФункции

#КонецОбласти