
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
//
// Возвращаемое значение:
//	Структура - структура, содержащая логин и пароль пользователя
//		Интернет-поддержки:
//		* Логин - Строка - логин пользователя Интернет-поддержки;
//		* Пароль - Строка - пароль пользователя Интернет-поддержки.
//	Неопределено - при отсутствии сохраненных данных аутентификации.
//
Функция ДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторПодсистемы(),
		"login,password");
	
	Если ДанныеВБезопасномХранилище.login <> Неопределено
		И ДанныеВБезопасномХранилище.password <> Неопределено Тогда
		Возврат Новый Структура(
			"Логин, Пароль",
			ДанныеВБезопасномХранилище.login,
			ДанныеВБезопасномХранилище.password);
	КонецЕсли;
	
КонецФункции

// Возвращает тикет аутентификации пользователя на портале поддержки.
// Возвращенный тикет может быть проверен вызовом операции checkTicket()
// сервиса https://login.1c.eu/api/public/ticket?wsdl.
//
// Важно. Получение тикета выполняется в соответствии с настройками
// библиотеки:
//	- доменная зона серверов 1c.eu;
//	- таймаут подключения к серверам.
//
// Параметры:
//	ВладелецТикета - Строка - произвольное имя сервиса, для которого
//		выполняется аутентификация пользователя. Это же имя должно
//		использоваться при вызове операции checkTicket();
//		Не допускается незаполненное значение параметра.
//
// Возвращаемое значение:
//	Структура - результат получения тикета. Поля структуры:
//		* Тикет - Строка - полученный тикет аутентификации. Если при получении
//			тикета произошла ошибка (неверный логин или пароль или другая ошибка),
//			значение поля - пустая строка.
//		* КодОшибки - Строка - строковый код возникшей ошибки, который
//			может быть обработан вызывающим функционалом:
//				- <Пустая строка> - получение тикета выполнено успешно;
//				- "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//				- "ПревышеноКоличествоПопыток" - превышено количество попыток
//					получения тикета с некорректным логином и паролем;
//				- "ОшибкаПодключения" - ошибка при подключении к сервису;
//				- "ОшибкаСервиса" - внутренняя ошибка сервиса;
//				- "НеизвестнаяОшибка" - при получении тикета возникла
//					неизвестная (необрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое
//			может быть отображено пользователю;
//
Функция ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета) Экспорт
	
	Если Не ЗначениеЗаполнено(ВладелецТикета) Тогда
		ВызватьИсключение НСтр("ru='Не заполнено значение параметра ""ВладелецТикета""';uk='Не заповнено значення параметра ""ВладелецТикета""'");
	КонецЕсли;
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами();
	ДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержки();
	Если ДанныеАутентификации = Неопределено Тогда
		
		РезультатПолученияТикета = Новый Структура("КодОшибки, СообщениеОбОшибке, Тикет",
			"НеверныйЛогинИлиПароль",
			НСтр("ru='Неверный логин или пароль.';uk='Невірний логін або пароль.'"),
			"");
		
	Иначе
		
		РезультатПолученияТикета = ИнтернетПоддержкаПользователейКлиентСервер.СлужебнаяТикетАутентификации(
			ДанныеАутентификации.Логин,
			ДанныеАутентификации.Пароль,
			ВладелецТикета,
			ИнтернетПоддержкаПользователейКлиентСервер.НастройкиСоединенияССерверами());
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки)
		И РезультатПолученияТикета.КодОшибки <> "НеверныйЛогинИлиПароль"
		И РезультатПолученияТикета.КодОшибки <> "ПревышеноКоличествоПопыток"
		И РезультатПолученияТикета.КодОшибки <> "ОшибкаСервиса"
		И РезультатПолученияТикета.КодОшибки <> "НеизвестнаяОшибка" Тогда
		
		Если РезультатПолученияТикета.КодОшибки = "ClientError" Или РезультатПолученияТикета.КодОшибки = "ConnectError" Тогда
			РезультатПолученияТикета.КодОшибки = "ОшибкаПодключения";
		ИначеЕсли РезультатПолученияТикета.КодОшибки = "ServerError" Или РезультатПолученияТикета.КодОшибки = "InternalError" Тогда
			РезультатПолученияТикета.КодОшибки = "ОшибкаСервиса";
		Иначе
			РезультатПолученияТикета.КодОшибки = "НеизвестнаяОшибка";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПолученияТикета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интеграция с Библиотекой стандартных подсистем (БСП).
// Подсистема "Базовая функциональность".

// См. описание этой же процедуры в общем модуле
// ОбщегоНазначенияПереопределяемый.
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ПараметрыИПП = Новый Структура;
	
	ОписаниеОбработчиков = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий();
	
	Для каждого ИмяМодуля Из ОписаниеОбработчиков.Сервер.ПараметрыРаботыКлиентаПриЗапуске Цикл
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыИПП.Вставить("ПриНачалеРаботыСистемы", ОписаниеОбработчиков.Клиент.ПриНачалеРаботыСистемы);
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОбщегоНазначенияПереопределяемый.
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ПараметрыИПП = Новый Структура;
		
		ПараметрыИПП.Вставить("ИмяКонфигурации"          , Метаданные.Имя);
		ПараметрыИПП.Вставить("ВерсияКонфигурации"       , Метаданные.Версия);
		ПараметрыИПП.Вставить("КодЛокализации"           , ТекущийКодЛокализации());
		ПараметрыИПП.Вставить("ВерсияОбработкиОбновления", ВерсияОбработкиОбновления());
		
		НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
		ПараметрыИПП.Вставить("УстанавливатьПодключениеНаСервере", НастройкиСоединения.УстанавливатьПодключениеНаСервере);
		ПараметрыИПП.Вставить("ТаймаутПодключения"               , НастройкиСоединения.ТаймаутПодключения);
		ПараметрыИПП.Вставить("ДоменРасположенияСерверовИПП"     , НастройкиСоединения.ДоменРасположенияСерверовИПП);
		
		ПараметрыИПП.Вставить(
			"ДоступноПодключениеИнтернетПоддержки",
			ДоступноПодключениеИнтернетПоддержки());
		
		// Обработчики бизнес-процессов
		ПараметрыИПП.Вставить("КлиентскиеОбработчикиБизнесПроцессов",
			ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().Клиент.БизнесПроцессы);
		
		Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
		
	КонецЕсли;
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОбщегоНазначенияПереопределяемый.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	// Базовая функциональность БИП
	// 2.1.2.1
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.1.2.1",
		"Роль.ИспользованиеИПП",
		"Роль.ПодключениеКСервисуИнтернетПоддержки",
		"ИнтернетПоддержкаПользователей");
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
		КонецЕсли;
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОбщегоНазначенияПереопределяемый.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
		КонецЕсли;
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// РаботаВБезопасномРежимеПереопределяемый.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		НовыеРазрешения = Новый Массив;
		
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"webits.1c.ru",
			443,
			НСтр("ru='Интернет-поддержка пользователей (зона ru)';uk='Інтернет-підтримка користувачів (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.eu",
			443,
			НСтр("ru='Сервисы аутентификации (зона eu)';uk='Сервіси аутентификації (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"portal-support.1c.eu",
			443,
			НСтр("ru='Сервисы службы технической поддержки (зона eu)';uk='Сервіси служби технічної підтримки (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
		
	КонецЕсли;
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
		КонецЕсли;
	КонецЕсли;
	// Конец Новости
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интеграция с Библиотекой стандартных подсистем (БСП).
// Подсистема "Пользователи".

// См. описание этой же процедуры в общем модуле ПользователиПереопределяемый.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПриОпределенииНазначенияРолей(НазначениеРолей);
		КонецЕсли;
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интеграция с Библиотекой стандартных подсистем (БСП).
// Подсистема "Текущие дела".

// См. описание этой же процедуры в общем модуле
// ТекущиеДелаПереопределяемый.
//
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		Обработчики.Добавить(МодульПолучениеОбновленийПрограммы);
	КонецЕсли;
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ТекущиеДелаПереопределяемый.
//
Процедура ПриОпределенииПорядкаРазделовКомандногоИнтерфейса(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.ИнтернетПоддержкаПользователей);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интеграция с библиотекой "Технология сервиса" (БТС).
// Подсистема "Выгрузка загрузка данных".

// См. описание этой же процедуры в общем модуле
// ВыгрузкаЗагрузкаДанныхПереопределяемый.
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
		КонецЕсли;
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ВыгрузкаЗагрузкаДанныхПереопределяемый.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработчика = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		Если МодульОбработчика <> Неопределено Тогда
			МодульОбработчика.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
		КонецЕсли;
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Устаревший программный интерфейс

// Устарела. Будет удалена в следующей версии библиотеки, т.к. более не
// распространяет свое действие на все подсистемы библиотеки.
// Необходимо использовать функции:
//		ИнтернетПоддержкаПользователейВызовСервера.ДоступноПодключениеИнтернетПоддержки();
//		МониторИнтернетПоддержки.ДоступноИспользованиеМонитораИнтернетПоддержки();
// если в конфигурацию внедрены соответствующие подсистемы.
//
// Определяет, разрешено ли использование Интернет-поддержки в текущем режиме
// работы информационной базы.
// Определяет на основании значений: 1) Это локальный режим работы;
// 2) реализации процедуры
// ИнтернетПоддержкаПользователейПереопределяемый.ИспользоватьИнтернетПоддержку()
//
// Возвращаемое значение:
//	Булево - Истина - использование разрешено, Ложь - в противном случае.
//
Функция ИспользованиеИнтернетПоддержкиРазрешеноВТекущемРежимеРаботы() Экспорт
	
	// Запрет работы в модели сервиса
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПереопределяемый.ИспользоватьИнтернетПоддержку(Отказ);
	
	Возврат (Отказ <> Истина);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интеграция подсистем библиотеки.

// В вызывающем коде перед записью данных необходимо проверить права
// и установить привилегированный режим.
// Сохраняет логин и пароль пользователя в подсистеме Интернет-поддержки.
//
Функция СохранитьДанныеАутентификации(ДанныеАутентификации) Экспорт
	
	Если ДанныеАутентификации = Неопределено Тогда
		
		// Удалить все данные для логина из безопасного хранилища
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы());
		ПриУдаленииЛогинаИПароляИзИБ();
		
	Иначе
		
		// Запись данных в безопасное хранилище
		ИДПодсистемы = ИдентификаторПодсистемы();
		НачатьТранзакцию();
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИДПодсистемы,
			ДанныеАутентификации.Логин,
			"login");
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИДПодсистемы,
			ДанныеАутентификации.Пароль,
			"password");
		ЗафиксироватьТранзакцию();
		
		ПриСохраненииЛогинаИПароляВИБ(ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает версию обработки обновления конфигурации.
Функция ВерсияОбработкиОбновления() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
		
		Возврат ВерсияСтандартныеПодсистемы();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Возвращает версию Библиотеки стандартных подсистем (БСП).
Функция ВерсияСтандартныеПодсистемы() Экспорт
	
	ПодсистемаСтандартныеПодсистемы = Новый Структура("Имя, Версия");
	ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы(ПодсистемаСтандартныеПодсистемы);
	
	Возврат ПодсистемаСтандартныеПодсистемы.Версия;
	
КонецФункции

// Возвращает имена модулей подсистем, реализующих обработку событий библиотеки.
//
// Возвращаемое значение:
//	Массив - массив элементов типа Строка - имена модулей подсистем,
//		реализующих заполнение описаний обработчиков событий.
//
// Описание модулей подсистем:
//
// Каждый модуль, имя которого возвращается функцией, должен реализовывать
// экспортную процедуру служебного программного интерфейса, реализующую
// заполнение описания обработчиков событий.
//
// Процедура ДобавитьОбработчикиСобытий(СерверныеОбработчики, КлиентскиеОбработчики) Экспорт
//
// КонецПроцедуры
//
// Подробную информацию по реализации процедур см. в описании функции
// ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий().
//
Функция МодулиПодсистем() Экспорт
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		Результат.Добавить("МониторИнтернетПоддержки");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		Результат.Добавить("ПолучениеОбновленийПрограммы");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает серверный обработчик бизнес-процесса.
// Параметры:
//	МестоЗапуска - Строка - точка входа в бизнес-процесс;
//	ИмяСобытия - Строка - имя обрабатываемого события.
//
// Возвращаемое значение:
//	ОбщийМодуль - модуль, содержащий заданный обработчик бизнес-процесса;
//	Неопределено - если обработчик бизнес-процесса неопределен.
//
Функция СерверныйОбработчикБизнесПроцесса(МестоЗапуска, ИмяСобытия) Экспорт
	
	Если ИнтернетПоддержкаПользователейКлиентСервер.ЭтоБазовыйБизнесПроцесс(МестоЗапуска) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработчикиСобытий = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ОбработчикиСобытий();
	МодулиОбработчиковБизнесПроцессов = ОбработчикиСобытий.Сервер.БизнесПроцессы;
	ИмяМодуля = МодулиОбработчиковБизнесПроцессов[МестоЗапуска + "\" + ИмяСобытия];
	
	Если ИмяМодуля = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
	
КонецФункции

// Возвращает сохраненный регистрационный номер программного продукта.
//
Функция РегистрационныйНомерПрограммногоПродукта() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы(), "regnumber");
	
КонецФункции

// Определяет, доступно ли текущему пользователю выполнение интерактивной
// авторизации в на портале ИТС в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - интерактивная авторизация доступна,
//		Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ПодключениеКСервисуИнтернетПоддержки", , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка функциональности, дающей возможность подключения ИПП
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки") Тогда
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("МониторИнтернетПоддержки");
		Если ОбщийМодуль.ДоступноИспользованиеМонитораИнтернетПоддержки() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истина, если у текущего пользователя есть право записи параметров ИПП.
// Ложь - в противном случае.
//
Функция ПравоЗаписиПараметровИПП() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(, , Ложь)
		Или Пользователи.РолиДоступны("ПодключениеКСервисуИнтернетПоддержки", , Ложь)
		Или ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторИнтернетПоддержки")
		И Пользователи.РолиДоступны("ИспользованиеМонитораИПП", , Ложь);
	
КонецФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		"Подсистема.ИнтернетПоддержкаПользователей.Подсистема.БазоваяФункциональностьБИП");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка событий библиотеки

// Вызывается при сохранении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль) Экспорт
	
	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации(Логин, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Переопределяемая обработка события
	ИнтернетПоддержкаПользователейПереопределяемый.ПриАвторизацииПользователяВИнтернетПоддержке(
		Новый Структура("Логин, Пароль", Логин, Пароль));
	
КонецПроцедуры

// Вызывается при удалении логина и пароля пользователя ИПП из
// информационной базы из всех контекстов использования библиотеки.
//
Процедура ПриУдаленииЛогинаИПароляИзИБ() Экспорт
	
	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации("", "");
	КонецЕсли;
	
	// Переопределяемая обработка события
	ИнтернетПоддержкаПользователейПереопределяемый.ПриВыходеПользователяИзИнтернетПоддержки();
	
КонецПроцедуры

// Вызывается при изменении настройки "Доменная зона расположения серверов ИПП".
//
Процедура ПриИзмененииДоменнойЗоныСерверовИПП(ДоменнаяЗона) Экспорт
	
	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДоменнойЗоныСерверовИПП(ДоменнаяЗона);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики бизнес-процессов

// В вызывающем коде должны быть проверены права пользователя и установлен
// привилегированный режим.
// Выполняет запись общих стартовых параметров.
//
Процедура ЗаписатьОбщиеПараметрыИПП(Знач ОбщиеПараметры) Экспорт
	
	Логин  = Неопределено;
	Пароль = Неопределено;
	
	ИдентификаторПодсистемы = ИдентификаторПодсистемы();
	
	// Запись выполняется в транзакции, т.к. данные (например, пара Логин-Пароль)
	// должны зачитываться неделимо другими механизмами.
	НачатьТранзакцию();
	Для каждого КлючЗначение Из ОбщиеПараметры Цикл
		
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемы,
			КлючЗначение.Значение,
			КлючЗначение.Ключ);
		
		Если КлючЗначение.Ключ = "login" Тогда
			Логин = КлючЗначение.Значение;
		ИначеЕсли КлючЗначение.Ключ = "password" Тогда
			Пароль = КлючЗначение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	Если Логин <> Неопределено И Пароль <> Неопределено Тогда
		ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	
КонецПроцедуры

// В вызывающем коде должны быть проверены права пользователя и установлен
// привилегированный режим.
// Удаление общих стартовых параметров.
//
// Параметры:
//	УдаляемыеИзРС - Массив - массив строк - имена удаляемых параметров.
//
Процедура УдалитьОбщиеПараметрыИПП(Знач УдаляемыеИзРС) Экспорт
	
	УдаленыДанныеАутентификации = Ложь;
	ИДПодсистемы = ИдентификаторПодсистемы();
	НачатьТранзакцию();
	Для каждого КлючЗначение Из УдаляемыеИзРС Цикл
		
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы, КлючЗначение.Ключ);
		
		Если КлючЗначение.Ключ = "login" Или КлючЗначение.Ключ = "password" Тогда
			УдаленыДанныеАутентификации = Истина;
		КонецЕсли;
		
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	Если УдаленыДанныеАутентификации Тогда
		ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки клиента лицензирования

// Возвращает признак возможности работы с настройками клиента лицензирования
// в БИП.
//
// Версия платформы 8.3.7 или выше и не работа в модели сервиса.
//
Функция ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Экспорт
	
	СистИнфо = Новый СистемнаяИнформация;
	Возврат (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистИнфо.ВерсияПриложения, "8.3.7.0") >= 0)
		И Не ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.7.1";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	
КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса
		Возврат;
	КонецЕсли;
	
	ЗапросПараметровИПП = Новый Запрос;
	ЗапросПараметровИПП.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя КАК ИмяПараметра,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение КАК ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""login""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""password""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""regnumber""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор";
	
	ЗапросПараметровИПП.УстановитьПараметр(
		"ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПараметров = ЗапросПараметровИПП.Выполнить().Выбрать();
	
	// Запись данных в безопасное хранилище
	ИдентификаторПодсистемыБИП = ИдентификаторПодсистемы();
	Пока ВыборкаПараметров.Следующий() Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемыБИП,
			ВыборкаПараметров.ЗначениеПараметра,
			ВыборкаПараметров.ИмяПараметра);
	КонецЦикла;
	
	// Очистка неиспользуемого регистра параметров ИПП
	НаборЗаписей = РегистрыСведений.УдалитьПараметрыИнтернетПоддержкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти
