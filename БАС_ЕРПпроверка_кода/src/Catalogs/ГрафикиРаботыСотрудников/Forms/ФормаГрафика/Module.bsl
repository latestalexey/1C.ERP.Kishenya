
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		НомерТекущегоГода = Год(ТекущаяДатаСеанса());
		
		Если Объект.ШаблонЗаполнения.Количество() = 0 Тогда
			ГрафикОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.ГрафикиРаботыСотрудников"));
			
			ГрафикОбъект.ЗаполнитьПараметрыГрафикаПоУмолчанию();
			
			ЗначениеВРеквизитФормы(ГрафикОбъект, "Объект");
		КонецЕсли;
		
		СоздатьСтрокиТаблицыДанныхГрафика();
		
		УстановитьИнфоНадписьНастройкиГрафика();
		
		ПрочитатьДанныеПроизводственногоКалендаряВДанныеФормы();
		
		ЗаполнитьСреднемесячноеЧислоЧасовИЧислоДней();
		
		ПриЧтенииДанныхГрафикаВФорму();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьСвойстваЭлементовВводаВремени();
	
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если НомерТекущегоГода = 0 Тогда
		НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ДанныеГрафика.Количество() = 0 Тогда
		СоздатьСтрокиТаблицыДанныхГрафика();
	Иначе
		ИзменитьСоставВидовВремени();
	КонецЕсли;
	
	ПрочитатьДанныеГрафикаВФорму();
	
	ПриЧтенииДанныхГрафикаВФорму();
	
	УстановитьИнфоНадписьНастройкиГрафика();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверитьСоответствиеРегистрируемыхЧасовДлинеСуток(Отказ);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ВремяНачала = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
		
	УчетРабочегоВремени.ЗаписатьДанныеГрафика(ТекущийОбъект.Ссылка, ДанныеГрафика, НомерТекущегоГода, НЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную);
	СохранитьСреднемесячныеНормыВремениГрафиковРаботыСотрудников(ЭтаФорма);
	
	МодифицированностьДанныхГрафика = Ложь;
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(
		"ЗаписьЭлементаСправочникаГрафикиРаботыСотрудников",
		ВремяНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТекущегоГодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если МодифицированностьДанныхГрафика Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Данные графика за %1 год были изменены. Сохранить данные графика?';uk='Дані графіка за %1 рік були змінені. Зберегти дані графіка?'"),
							Формат(НомерТекущегоГода, "ЧГ="));
		Оповещение = Новый ОписаниеОповещения("НомерТекущегоГодаРегулированиеЗавершение", ЭтотОбъект, Направление);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);					
	Иначе 
		НомерТекущегоГодаРегулированиеЗавершение(Неопределено, Направление);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТекущегоГодаРегулированиеЗавершение(Ответ, Направление) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		
		Если МодифицированностьДанныхГрафика Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	МодифицированностьДанныхГрафика = Ложь;
	
	НомерТекущегоГода = НомерТекущегоГода + 1 * Направление;
	ПрочитатьДанныеГрафикаВФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура СреднемесячныеНормыВремениГрафиковРаботыСотрудниковСреднемесячноеЧислоЧасовПриИзменении(Элемент)
	
	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную = 
		СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя.СреднемесячноеЧислоЧасов <> СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов;
		
	УстановитьОтображениеПолейСреднемесячныеНормыВремени();
	
	МодифицированностьДанныхГрафика = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СреднемесячныеНормыВремениГрафиковРаботыСотрудниковСреднемесячноеЧислоДнейПриИзменении(Элемент)
	
	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную = 
		СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя.СреднемесячноеЧислоДней <> СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней;
		
	УстановитьОтображениеПолейСреднемесячныеНормыВремени();
	
	МодифицированностьДанныхГрафика = Истина;
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыФормыТабличноеПолеГрафика

&НаКлиенте
Процедура ТабличноеПолеГрафикаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГрафика = Элементы.ТабличноеПолеГрафика.ТекущиеДанные; 
	
	Если НЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную Тогда
		РассчитатьСреднемесячныеНормыВремени();
	КонецЕсли; 
	УчетРабочегоВремениКлиентСервер.ДанныеГрафикаРассчитатьИтогоПоСтроке(СтрокаГрафика);
	
	Для Сч = 1 По 31 Цикл
		ЧасовЗаДень = СтрокаГрафика["День" + Формат(Сч, "ЧГ=")];
		
		СтрокаГрафика["Целое" + Формат(Сч, "ЧГ=")] = ЧасовЗаДень - Цел(ЧасовЗаДень) = 0;
	КонецЦикла;	
	СтрокаГрафика.ИтогЧасыЦелое = СтрокаГрафика.ИтогЧасы - Цел(СтрокаГрафика.ИтогЧасы) = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеГрафикаПриИзменении(Элемент)
	МодифицированностьДанныхГрафика = Истина;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.ДанныеОРабочихЧасах.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru='Не заполнены настройки графика. Перейти к настройкам?';uk='Не заповнені настройки графіка. Перейти до настройок?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);					
	Иначе
		ЗаполнитьГрафикНаСервере();
		МодифицированностьДанныхГрафика = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИзменитьНастройкиЗаполненияГрафика();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПараметры(Команда)
	
	ИзменитьНастройкиЗаполненияГрафика();

КонецПроцедуры

&НаКлиенте
Функция Печать(ОписаниеКоманды) Экспорт
	
	ОписаниеКоманды.ДополнительныеПараметры.Вставить("Год", НомерТекущегоГода);
	
	ОписаниеКоманды.Обработчик = "";
	ОписаниеКоманды.Удалить("Форма");
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(
		ОписаниеКоманды,
		ЭтаФорма,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСреднемесячныеЧислаЧасовИДней(Команда)
	
	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную = Ложь;
	Модифицированность = Истина;
	
	Если НЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную Тогда
		РассчитатьСреднемесячныеНормыВремени();
	КонецЕсли; 
	УстановитьОтображениеПолейСреднемесячныеНормыВремени();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииДанныхГрафикаВФорму()
	Для Каждого СтрокаГрафика Из ДанныеГрафика Цикл
		Для Сч = 1 По 31 Цикл
			ЧасовЗаДень = СтрокаГрафика["День" + Формат(Сч, "ЧГ=")];
			
			СтрокаГрафика["Целое" + Формат(Сч, "ЧГ=")] = ЧасовЗаДень - Цел(ЧасовЗаДень) = 0;
		КонецЦикла;	
		СтрокаГрафика.ИтогЧасыЦелое = СтрокаГрафика.ИтогЧасы - Цел(СтрокаГрафика.ИтогЧасы) = 0;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойстваЭлементовВводаВремени()
	ВысотаЭлемента = ?(Объект.ВидыВремени.Количество() = 1, 2, 1);
	
	Для НомерДня = 1 По 31 Цикл
		Элементы["ТабличноеПолеГрафикаДень1"].Высота = ВысотаЭлемента;		
	КонецЦикла;	
	
	Элементы.ТабличноеПолеГрафикаВидВремени.Высота = ВысотаЭлемента;
	Элементы.ТабличноеПолеГрафикаМесяц.Высота = ВысотаЭлемента;	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьДанныеПроизводственногоКалендаряВДанныеФормы()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Объект.ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("Год", НомерТекущегоГода);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	|	ДанныеПроизводственногоКалендаря.Год,
	|	ДанныеПроизводственногоКалендаря.ВидДня,
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Год = &Год
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		СтрокиГрафика = ДанныеГрафика.НайтиСтроки(Новый Структура("НомерМесяца", Месяц(Выборка.Месяц)));
		
		Пока Выборка.Следующий() Цикл
			НомерДня = День(Выборка.Дата);	
			
			Для Каждого СтрокаДанныхГрафика Из СтрокиГрафика Цикл
				СтрокаДанныхГрафика["ВидДня" + НомерДня] = Выборка.ВидДня;				
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьУсловноеОформление()
	Для НомерДня = 1 По 31 Цикл
		ЭлементФормления = УсловноеОформление.Элементы.Добавить();
		
		ЦветВыходногоДня = Новый Цвет(255, 220, 220);
		
		ЭлементФормления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветВыходногоДня);
		
		ОформляемоеПоле = ЭлементФормления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеГрафикаДень" + НомерДня);
		
		ГруппаОтбора = ЭлементФормления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.Использование = Истина;
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.ВидДня" + НомерДня);
		ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.ВидДня" + НомерДня);
		ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.ВидДня" + НомерДня);
		ЭлементОтбора.ПравоеЗначение = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементФормления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементФормления.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0");
		
		ОформляемоеПоле = ЭлементФормления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеГрафикаДень" + НомерДня);
						
		ЭлементОтбора = ЭлементФормления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.Целое" + НомерДня);
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	КонецЦикла;	
		
	ЭлементФормления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементФормления.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0");
	
	ОформляемоеПоле = ЭлементФормления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТабличноеПолеГрафикаИтогЧасы");
					
	ЭлементОтбора = ЭлементФормления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеГрафика.ИтогЧасыЦелое");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

КонецПроцедуры	

&НаСервере
Процедура СоздатьСтрокиТаблицыДанныхГрафика()
	Если Объект.ВидыВремени.Количество() = 0 Тогда
		СтрокаВидВремени = Объект.ВидыВремени.Добавить();
		СтрокаВидВремени.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
		
		СтрокаВидВремени = Объект.ВидыВремени.Добавить();
	КонецЕсли;	
	ПорядокИспользуемыхВидовВремени = ПорядокИспользуемыхВидовВремени();
	Для НомерМесяца = 1 По 12 Цикл
		Для Каждого ИспользуемыйВидВремени Из Объект.ВидыВремени Цикл
			ПорядокВидаВремени = ПорядокИспользуемыхВидовВремени.Получить(ИспользуемыйВидВремени.ВидВремени);
			ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, ИспользуемыйВидВремени.ВидВремени, ПорядокВидаВремени);	
		КонецЦикла;	
	КонецЦикла;		
	Элементы.ТабличноеПолеГрафикаВидВремени.Видимость = (Объект.ВидыВремени.Количество() > 1);
	Элементы.ТабличноеПолеГрафика.ВысотаВСтрокахТаблицы = 12 * Объект.ВидыВремени.Количество();
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьДанныеГрафикаВФорму()
	Для Каждого ДанныеГрафикаЗаМесяц Из ДанныеГрафика Цикл 
		Для НомерДня = 1 По 31 Цикл 
			ДанныеГрафикаЗаМесяц["День" + НомерДня] = 0; 	
			ДанныеГрафикаЗаМесяц["ВидДня" + НомерДня] = Перечисления.ВидыДнейПроизводственногоКалендаря.ПустаяСсылка();
		КонецЦикла;	
		ДанныеГрафикаЗаМесяц.ИтогДни = 0;
		ДанныеГрафикаЗаМесяц.ИтогЧасы = 0;
		ДанныеГрафикаЗаМесяц.КоличествоДнейВМесяце = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Дата(НомерТекущегоГода, ДанныеГрафикаЗаМесяц.НомерМесяца, 1));
	КонецЦикла;	
	
	МассивВидовВремени = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ВидыВремени Цикл
		МассивВидовВремени.Добавить(СтрокаТаблицы.ВидВремени);		
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикРаботы", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала", Дата(НомерТекущегоГода, 1, 1));
	Запрос.УстановитьПараметр("ДатаОкончания", Дата(НомерТекущегоГода, 12, 31));
	Запрос.УстановитьПараметр("СписокВидовВремени", МассивВидовВремени);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени В(&СписокВидовВремени)
	|	И НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	ВидУчетаВремени,
	|	Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидУчетаВремени") Цикл
			СтруктураПоиска = Новый Структура("НомерМесяца, ВидВремени", Месяц(Выборка.Месяц), Выборка.ВидУчетаВремени);
			ЗаполняемаяСтрока = ДанныеГрафика.НайтиСтроки(СтруктураПоиска)[0];
			Пока Выборка.Следующий() Цикл
				НомерДня = День(Выборка.Дата);
				ЗаполняемаяСтрока["День" + НомерДня] = Выборка.ДополнительноеЗначение;	
			КонецЦикла;
			УчетРабочегоВремениКлиентСервер.ДанныеГрафикаРассчитатьИтогоПоСтроке(ЗаполняемаяСтрока);
		КонецЦикла;
	КонецЦикла;		
	
	ПрочитатьДанныеПроизводственногоКалендаряВДанныеФормы();
	
	ДанныеСреднемесячныеНормыВремени = ДанныеСреднемесячныеНормыВремениГрафиковРаботыСотрудников(Объект.Ссылка, НомерТекущегоГода);
	ЗаполнитьЗначенияСвойств(СреднемесячныеНормыВремениГрафиковРаботыСотрудников, ДанныеСреднемесячныеНормыВремени);
	СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя = Новый ФиксированнаяСтруктура(ДанныеСреднемесячныеНормыВремени);
	
	ЗаполнитьСреднемесячноеЧислоЧасовИЧислоДней();
	
	ПриЧтенииДанныхГрафикаВФорму()
	
КонецПроцедуры	

&НаСервере
Процедура ИзменитьСоставВидовВремени()
	ПорядокИспользуемыхВидовВремени = ПорядокИспользуемыхВидовВремени();
	Для НомерМесяца = 1 По 12 Цикл
		Для Каждого ИспользуемыйВидВремени Из Объект.ВидыВремени Цикл
			СтруктураПоиска = Новый Структура("НомерМесяца, ВидВремени", НомерМесяца, ИспользуемыйВидВремени.ВидВремени);
			ПорядокВидаВремени = ПорядокИспользуемыхВидовВремени.Получить(ИспользуемыйВидВремени.ВидВремени);
			НайденныеСтроки = ДанныеГрафика.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, ИспользуемыйВидВремени.ВидВремени, ПорядокВидаВремени);
			Иначе
				ПорядокВидаВремени = ПорядокИспользуемыхВидовВремени.Получить(ИспользуемыйВидВремени.ВидВремени);	
				НайденныеСтроки[0].ПорядокВидаВремени = ПорядокВидаВремени;
			КонецЕсли;		
		КонецЦикла;			
	КонецЦикла;	
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицыДанныеГрафика Из ДанныеГрафика Цикл
		Если ПорядокИспользуемыхВидовВремени.Получить(СтрокаТаблицыДанныеГрафика.ВидВремени) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицыДанныеГрафика);
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ДанныеГрафика.Удалить(ДанныеГрафика.Индекс(УдаляемаяСтрока));		
	КонецЦикла;	
	
	ДанныеГрафика.Сортировать("НомерМесяца,ПорядокВидаВремени");
	
	УстановитьСвойстваЭлементовВводаВремени();
	
	Элементы.ТабличноеПолеГрафикаВидВремени.Видимость = (Объект.ВидыВремени.Количество() > 1);
	Элементы.ТабличноеПолеГрафика.ВысотаВСтрокахТаблицы = 12 * Объект.ВидыВремени.Количество();
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьСтрокуВТаблицуДанныхГрафика(НомерМесяца, ВидВремени, ПорядокВидаВремени)
	СтрокаТаблицы = ДанныеГрафика.Добавить();
	СтрокаТаблицы.НомерМесяца = НомерМесяца;
	СтрокаТаблицы.ВидВремени = ВидВремени;
	СтрокаТаблицы.ПорядокВидаВремени = ПорядокВидаВремени;
	СтрокаТаблицы.МесяцПредставление = Формат(Дата(НомерТекущегоГода, НомерМесяца, 1), "ДФ=ММММ");	
	СтрокаТаблицы.КоличествоДнейВМесяце = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Дата(НомерТекущегоГода, НомерМесяца, 1));
КонецПроцедуры	

&НаСервере
Функция ПорядокИспользуемыхВидовВремени()
	ПорядокИспользуемыхВидовВремени = Новый Соответствие;
	Сч = 1;
	Для Каждого СтрокаТаблицыВидыВремени Из Объект.ВидыВремени Цикл
		ПорядокИспользуемыхВидовВремени.Вставить(СтрокаТаблицыВидыВремени.ВидВремени, Сч);
		Сч = Сч + 1;
	КонецЦикла;	
	
	Возврат ПорядокИспользуемыхВидовВремени;
КонецФункции	

&НаКлиенте
Процедура ИзменитьНастройкиЗаполненияГрафика()
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьНастройкиЗаполненияГрафикаЗавершение", ЭтотОбъект);
	ПолучитьНастройкиЗаполненияГрафика(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиЗаполненияГрафикаЗавершение(НастройкиЗаполненияГрафика, ДополнительныеПараметры) Экспорт 
	
	Если НастройкиЗаполненияГрафика <> Неопределено Тогда
		ЗаполнитьДанныеОбъектаИзНастроек(НастройкиЗаполненияГрафика);
		Модифицированность = Истина;
		МодифицированностьДанныхГрафика = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиЗаполненияГрафика(ОбработкаОповещения) 

	ИспользуемыеВидыВремени = Новый Массив;
	
	Для Каждого ИспользуемыйВидВремени Из Объект.ВидыВремени Цикл
		ИспользуемыеВидыВремени.Добавить(ИспользуемыйВидВремени.ВидВремени);		
	КонецЦикла;	
		
	ПараметрыОткрываемойФормы = Новый Структура;
	ПараметрыОткрываемойФормы.Вставить("СпособЗаполнения", Объект.СпособЗаполнения);
	ПараметрыОткрываемойФормы.Вставить("ДлительностьРабочейНедели", Объект.ДлительностьРабочейНедели);
    ПараметрыОткрываемойФормы.Вставить("ИспользуемыеВидыВремени", ИспользуемыеВидыВремени);
	ПараметрыОткрываемойФормы.Вставить("ПроизводственныйКалендарь", Объект.ПроизводственныйКалендарь);
	ПараметрыОткрываемойФормы.Вставить("ЧасыПоДнямЦикла", УчетРабочегоВремениКлиентСервер.ДанныеГрафикаЧасыПоДнямЦикла(Объект.ШаблонЗаполнения, Объект.ДанныеОРабочихЧасах));
	ПараметрыОткрываемойФормы.Вставить("ДатаОтсчета", Объект.ДатаОтсчета);
	ПараметрыОткрываемойФормы.Вставить("НеполноеРабочееВремя", Объект.НеполноеРабочееВремя);
	ПараметрыОткрываемойФормы.Вставить("НеполныйРабочийДень", Объект.НеполныйРабочийДень);
	ПараметрыОткрываемойФормы.Вставить("СокращеннаяРабочаяНеделя", Объект.СокращеннаяРабочаяНеделя);
	ПараметрыОткрываемойФормы.Вставить("ГрафикПолногоВремени", Объект.ГрафикПолногоРабочегоВремени);
	ПараметрыОткрываемойФормы.Вставить("СуммированныйУчетРабочегоВремени", Объект.СуммированныйУчетРабочегоВремени);
	ПараметрыОткрываемойФормы.Вставить("СпособОпределенияНормыСуммированногоУчета", Объект.СпособОпределенияНормыСуммированногоУчета);
	ПараметрыОткрываемойФормы.Вставить("ГрафикНормыПриСуммированномУчете", Объект.ГрафикНормыПриСуммированномУчете);
	ПараметрыОткрываемойФормы.Вставить("СчитатьНормуПоДругомуГрафику", Не Объект.ГрафикПолногоРабочегоВремени.Пустая());
	ПараметрыОткрываемойФормы.Вставить("УчитыватьПраздники", Объект.УчитыватьПраздники);
	ПараметрыОткрываемойФормы.Вставить("УчитыватьПредпраздничныеДни", Объект.УчитыватьПредпраздничныеДни);
	ПараметрыОткрываемойФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ДополнительныеПараметры = Новый Структура("ОбработкаОповещения", ОбработкаОповещения);
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиЗаполненияГрафикаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.ГрафикиРаботыСотрудников.Форма.НастройкаНовогоГрафикаРаботы", ПараметрыОткрываемойФормы, , , , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкиЗаполненияГрафикаЗавершение(НастройкиЗаполненияГрафика, ДополнительныеПараметры) Экспорт 
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.ОбработкаОповещения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаОповещения, НастройкиЗаполненияГрафика);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбъектаИзНастроек(Настройки)
	Объект.ВидыВремени.Очистить();
	
	Для Каждого ВидВремени Из Настройки.ИспользуемыеВидыВремени Цикл
		СтрокаВидаВремени = Объект.ВидыВремени.Добавить();
		СтрокаВидаВремени.ВидВремени = ВидВремени;
	КонецЦикла;
	
	Если Объект.ВидыВремени.Количество() = 0 Тогда
		СтрокаВидаВремени = Объект.ВидыВремени.Добавить();
		СтрокаВидаВремени.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	КонецЕсли;
	
	Объект.СпособЗаполнения = Настройки.СпособЗаполнения;
	Объект.ДлительностьРабочейНедели = Настройки.ДлительностьРабочейНедели;
	Объект.ПроизводственныйКалендарь = Настройки.ПроизводственныйКалендарь;
	Объект.ДатаОтсчета = Настройки.ДатаОтсчета;
	Объект.НеполноеРабочееВремя = Настройки.НеполноеРабочееВремя;
	Объект.НеполныйРабочийДень = Настройки.НеполныйРабочийДень;
	Объект.СокращеннаяРабочаяНеделя = Настройки.СокращеннаяРабочаяНеделя;
	Объект.ГрафикПолногоРабочегоВремени = Настройки.ГрафикПолногоВремени;
	Объект.СуммированныйУчетРабочегоВремени = Настройки.СуммированныйУчетРабочегоВремени;
	Объект.СпособОпределенияНормыСуммированногоУчета = Настройки.СпособОпределенияНормыСуммированногоУчета;
	Объект.ГрафикНормыПриСуммированномУчете = Настройки.ГрафикНормыПриСуммированномУчете;
	Объект.УчитыватьПраздники = Настройки.УчитыватьПраздники;
	Объект.УчитыватьПредпраздничныеДни = Настройки.УчитыватьПредпраздничныеДни;
	
	Объект.ШаблонЗаполнения.Очистить();
	Объект.ДанныеОРабочихЧасах.Очистить();
	
	КоличествоДнейЦикла = Настройки.ЧасыПоДнямЦикла.Количество();
	
	Для НомерДня = 1 По КоличествоДнейЦикла Цикл
		СтрокаШаблона = Объект.ШаблонЗаполнения.Добавить();
		
		ВремяЗаДень =  Настройки.ЧасыПоДнямЦикла.Получить(НомерДня);
		
		СтрокаШаблона.ДеньВключенВГрафик = Ложь;
		
		Если ВремяЗаДень <> Неопределено И ВремяЗаДень.Количество() > 0 Тогда			
			Для Каждого ЧасыПоВидуВремени Из ВремяЗаДень Цикл
				СтрокаДанныхОВремени = Объект.ДанныеОРабочихЧасах.Добавить();
				СтрокаДанныхОВремени.НомерДняЦикла = НомерДня;
				СтрокаДанныхОВремени.ВидВремени = ЧасыПоВидуВремени.Ключ;
				СтрокаДанныхОВремени.Часов = ЧасыПоВидуВремени.Значение;
				
				Если СтрокаДанныхОВремени.Часов > 0 Тогда 
					СтрокаШаблона.ДеньВключенВГрафик = Истина;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
	ИзменитьСоставВидовВремени();
	ПрочитатьДанныеПроизводственногоКалендаряВДанныеФормы();
	УстановитьИнфоНадписьНастройкиГрафика();
	
	ЗаполнитьГрафикНаСервере();
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьГрафикНаСервере()
	
	Если Объект.СпособЗаполнения = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияГрафикаРаботы.ПоЦикламПроизвольнойДлины")
		И Год(Объект.ДатаОтсчета) > НомерТекущегоГода Тогда
		
		ТекстСообщения = НСтр("ru='График не может быть заполнен на период, предшествующий указанной в нем дате отсчета.';uk='Графік не може бути заповнений на період, що передує зазначеної в ньому дати відліку.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;	

	ОчиститьДанныеГрафика();
	ГрафикОбъект = РеквизитФормыВЗначение("Объект", Тип("СправочникОбъект.ГрафикиРаботыСотрудников"));
	ГрафикОбъект.ЗаполнитьДанныеГрафика(ДанныеГрафика, НомерТекущегоГода);
	
	ПриЧтенииДанныхГрафикаВФорму();
	
	ЗаполнитьСреднемесячноеЧислоЧасовИЧислоДней();
	
КонецПроцедуры		

&НаСервере
Процедура ОчиститьДанныеГрафика()
	Для Каждого СтрокаДанныхГрафика Из ДанныеГрафика Цикл
		Для НомерДня = 1 По 31 Цикл
			СтрокаДанныхГрафика["День" + НомерДня] = 0;						
		КонецЦикла;	
		СтрокаДанныхГрафика.ИтогДни = 0;
		СтрокаДанныхГрафика.ИтогЧасы = 0;
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьИнфоНадписьНастройкиГрафика()
	ТекстОписанияГрафикаРаботы	= Справочники.ГрафикиРаботыСотрудников.ТекстОписанияГрафикаРаботы(Объект);							  
									  
	ИнфоНадписьНастройкиГрафика = ТекстОписанияГрафикаРаботы;	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСреднемесячноеЧислоЧасовИЧислоДней()
	
	Если НЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную Тогда
		РассчитатьСреднемесячныеНормыВремени();
	КонецЕсли;
	
	Если СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя = Неопределено Тогда
		СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя =
			Справочники.ГрафикиРаботыСотрудников.СреднемесячныеНормыВремениПоУмолчанию(Объект.Ссылка);
	КонецЕсли; 
	
	УстановитьОтображениеПолейСреднемесячныеНормыВремени();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеПолейСреднемесячныеНормыВремени()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПересчитатьСреднемесячныеЧислаЧасовИДней",
		"Видимость",
		СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную);
	
	Если СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную Тогда
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		ОтображениеПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СреднемесячныеНормыВремениГрафиковРаботыСотрудниковСреднемесячноеЧислоЧасов",
		"ОтображениеПредупрежденияПриРедактировании",
		ОтображениеПредупреждения);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СреднемесячныеНормыВремениГрафиковРаботыСотрудниковСреднемесячноеЧислоДней",
		"ОтображениеПредупрежденияПриРедактировании",
		ОтображениеПредупреждения);
		
КонецПроцедуры

&НаСервере
Функция ДанныеСреднемесячныеНормыВремениГрафиковРаботыСотрудников(ГрафикРаботыСотрудников, Знач Год)
	
	Год = ?(Год = 0, 1, Год);
	
	СтруктураЗаписи = Справочники.ГрафикиРаботыСотрудников.СреднемесячныеНормыВремени(ГрафикРаботыСотрудников, Дата(Год, 1, 1));
	Если Не ЗначениеЗаполнено(СтруктураЗаписи.Год) Тогда
		СтруктураЗаписи.Год = Год;
	КонецЕсли; 
	
	Возврат СтруктураЗаписи;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьСреднемесячныеНормыВремениГрафиковРаботыСотрудников(Форма)
	
	Если НЕ Форма.Объект.Ссылка.Пустая() Тогда
		
		СреднемесячныеНормыВремениГрафиковРаботыСотрудников = Форма.СреднемесячныеНормыВремениГрафиковРаботыСотрудников;
		СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя = Форма.СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя;
		
		Если СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную <> СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя.УстановленыВРучную
			ИЛИ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную
			И (СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя.СреднемесячноеЧислоЧасов <> СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов
			ИЛИ СреднемесячныеНормыВремениГрафиковРаботыСотрудниковПрежняя.СреднемесячноеЧислоДней <> СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней) Тогда
			
			Форма.СохранитьСреднемесячныеНормыВремениНаСервере();
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСреднемесячныеНормыВремениНаСервере() Экспорт
	
	РеквизитФормыВЗначение("СреднемесячныеНормыВремениГрафиковРаботыСотрудников").Записать(); 
			
КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднемесячныеНормыВремени()
	
	ВидыУчитываемогоВремени = Новый Соответствие;
	ВидыУчитываемогоВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"), Истина);
	ВидыУчитываемогоВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"), Истина);
	ВидыУчитываемогоВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"), Истина);
	ВидыУчитываемогоВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"), Истина);
	ВидыУчитываемогоВремени.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СокращенноеРабочееВремя"), Истина);
	
	ВидыВремени = ДанныеГрафика.Выгрузить(, "ВидВремени").ВыгрузитьКолонку("ВидВремени");
	ОсновноеВремяВидовВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыВремени, "ОсновноеВремя");
	
	КоличествоЧасов = 0;
	СоответствиеДней = Новый Соответствие;
	Для каждого СтрокаДанныеГрафика Из ДанныеГрафика Цикл
		
		ОсновноеВремя = ОсновноеВремяВидовВремени.Получить(СтрокаДанныеГрафика.ВидВремени);
		
		Если ВидыУчитываемогоВремени.Получить(ОсновноеВремя) = Истина Тогда
			
			Для НомерДня = 1 По СтрокаДанныеГрафика.КоличествоДнейВМесяце Цикл
				
				КоличествоЧасовВДень = СтрокаДанныеГрафика["День" + НомерДня];
				Если КоличествоЧасовВДень = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ДатаДня = Дата(НомерТекущегоГода, СтрокаДанныеГрафика.НомерМесяца, НомерДня);
				СоответствиеДней.Вставить(ДатаДня, Истина);
				
				КоличествоЧасов = КоличествоЧасов + КоличествоЧасовВДень;
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов = КоличествоЧасов / 12;
	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней = СоответствиеДней.Количество() / 12;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеРегистрируемыхЧасовДлинеСуток(Отказ)
	ШаблонОшибки = НСтр("ru='На %1 запланировано более 24-х часов.';uk='На %1 заплановано більше 24-х годин.'");
	
	Для НомерМесяца = 1 По 12 Цикл 
		СтрокиДанныхЗМесяц = ДанныеГрафика.НайтиСтроки(Новый Структура("НомерМесяца", НомерМесяца));
		
		КонецОбрабатываемогоМесяца = КонецМесяца(Дата(НомерТекущегоГода, НомерМесяца, 1)); 
		
		КоличествоДнейВМесяце = День(КонецОбрабатываемогоМесяца);
		
		Для НомерДня = 1 По КоличествоДнейВМесяце Цикл
			ЧасовЗаДень = 0;
			ИндексПоследнейСтроки = -1;
			
			Для Каждого СтрокаГрафика Из СтрокиДанныхЗМесяц Цикл
				ЧасовЗаДень = ЧасовЗаДень + СтрокаГрафика["День" + НомерДня];
				
				Если ДанныеГрафика.Индекс(СтрокаГрафика) > ИндексПоследнейСтроки Тогда
					ИндексПоследнейСтроки = ДанныеГрафика.Индекс(СтрокаГрафика);
				КонецЕсли;
			КонецЦикла;	
			
			Если ЧасовЗаДень > 24 Тогда				
				ТекущаяДатаСтрокой = Формат(Дата(НомерТекущегоГода, НомерМесяца, НомерДня), "ДЛФ=DD");  
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ТекущаяДатаСтрокой);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДанныеГрафика", ИндексПоследнейСтроки + 1, "День" + НомерДня);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,
					Поле,,
					Отказ);
					
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЦикла;		
КонецПроцедуры	

#КонецОбласти
