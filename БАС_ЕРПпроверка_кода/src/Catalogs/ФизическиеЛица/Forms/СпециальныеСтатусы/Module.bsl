
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Заголовок,ФизическоеЛицоСсылка,ГоловнаяОрганизация,ТекущаяОрганизация");
	
	СотрудникСсылка = Параметры.СотрудникСсылка;
	
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда
		ИзФормыСотрудника = Истина;
	КонецЕсли; 
	
	ЗначениеВРеквизитФормы(СотрудникиФормы.ФизическоеЛицоФормыСотрудника(ФизическоеЛицоСсылка), "ФизическоеЛицо");
	
	СозданиеНового = Параметры.СозданиеНового И НЕ ЗначениеЗаполнено(ФизическоеЛицо.Ссылка);
	
	ДоступноИзменениеДанныхФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	
	СотрудникиФормы.ПрочитатьДанныеИзХранилищаВФорму(
		ЭтаФорма,
		СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы),
		Параметры.АдресВХранилище);
	
	ПроинициализироватьФорму();
	
	ТекстПодсказкиКПоляДатаРегистрации = УчетСтраховыхВзносовКлиентСервер.ТекстПодсказкиПоляДатаРегистрацииПериодическихРегистров();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СведенияОбИнвалидностиФизическихЛицНаборЗаписейДатаРегистрацииИзмененийСтрокой", 
		"Подсказка", 
		ТекстПодсказкиКПоляДатаРегистрации);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СотрудникиКлиент.ЗарегистрироватьОткрытиеФормы(ЭтаФорма, ИмяФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СотрудникиКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ОтредактированаИстория" И ФизическоеЛицоСсылка = Источник Тогда
		Если Параметр.ИмяРегистра = "СведенияОбИнвалидностиФизическихЛиц" Тогда
			Если СведенияОбИнвалидностиФизическихЛицНаборЗаписейПрочитан Тогда
				РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
					ЭтаФорма,
					ФизическоеЛицоСсылка,
					ИмяСобытия,
					Параметр,
					Источник);
				ОбновитьПолеСведенияОбИнвалидностиПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
			КонецЕсли;
		ИначеЕсли Параметр.ИмяРегистра = "СведенияОЛицахСДополнительнымиГарантиями" Тогда
			Если СведенияОЛицахСДополнительнымиГарантиямиНаборЗаписейПрочитан Тогда
				РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
					ЭтаФорма,
					ФизическоеЛицоСсылка,
					ИмяСобытия,
					Параметр,
					Источник);
				ОбновитьПолеСведенияОДополнительныхГарантияхПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
			КонецЕсли;
		ИначеЕсли Параметр.ИмяРегистра = "СведенияОПенсионерах" Тогда
			Если СведенияОПенсионерахНаборЗаписейПрочитан Тогда
				РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(
					ЭтаФорма,
					ФизическоеЛицоСсылка,
					ИмяСобытия,
					Параметр,
					Источник);
				ОбновитьПолеСведенияОПенсионерахПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц", ФизическоеЛицоСсылка, Отказ);
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтаФорма, "СведенияОЛицахСДополнительнымиГарантиями", ФизическоеЛицоСсылка, Отказ);
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтаФорма, "СведенияОПенсионерах", ФизическоеЛицоСсылка, Отказ);
	
	Если ЛьготаПрименяется И НЕ ЗначениеЗаполнено(ФизическоеЛицо.ЛьготаПриНачисленииПособий) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не заполнена льгота при начислении пособий';uk='Не заповнена пільга при нарахуванні допомог'"),
			,
			"ЛьготаПриНачисленииПособий",
			,
			Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область РедактированиеСведенийОбИнвалидности

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицДатаВыдачиПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОбИнвалидностиПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицСрокДействияСправкиПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОбИнвалидностиПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицИнвалидностьПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОбИнвалидностиПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицПериодСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц.Период", "СведенияОбИнвалидностиФизическихЛицПериодСтрокой", Модифицированность);
	
	УстановитьДатуРегистрацииСведенийОбИнвалидностиПоПериоду();
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("СведенияОбИнвалидностиФизическихЛицПериодСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц.Период", "СведенияОбИнвалидностиФизическихЛицПериодСтрокой", ,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицПериодСтрокойНачалоВыбораЗавершение(Результат = Истина, Параметр = Неопределено) Экспорт 
	УстановитьДатуРегистрацииСведенийОбИнвалидностиПоПериоду();	
КонецПроцедуры	

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц.Период", "СведенияОбИнвалидностиФизическихЛицПериодСтрокой", Направление, Модифицированность);
	УстановитьДатуРегистрацииСведенийОбИнвалидностиПоПериоду();
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицНаборЗаписейДатаРегистрацииИзмененийСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений", "СведенияОбИнвалидностиФизическихДатаРегистрацииИзмененийСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицНаборЗаписейДатаРегистрацииИзмененийСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений", "СведенияОбИнвалидностиФизическихДатаРегистрацииИзмененийСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицНаборЗаписейДатаРегистрацииИзмененийСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений", "СведенияОбИнвалидностиФизическихДатаРегистрацииИзмененийСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицНаборЗаписейДатаРегистрацииИзмененийСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицНаборЗаписейДатаРегистрацииИзмененийСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


#Область РедактированиеСведенийОПенсионерах

&НаКлиенте
Процедура СведенияОПенсионерахДатаВыдачиПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОПенсионерахПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

//&НаКлиенте
//Процедура СведенияОбИнвалидностиФизическихЛицСрокДействияСправкиПриИзменении(Элемент)
//	
//	ОбновитьПолеСведенияОбИнвалидностиПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
//	
//КонецПроцедуры

&НаКлиенте
Процедура СведенияОПенсионерахПенсионерПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОПенсионерахПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

#КонецОбласти


#Область РедактированиеСведенийОДополнительныхГарантиях
&НаКлиенте
Процедура СведенияОЛицахСДополнительнымиГарантиямиНаличиеГарантийПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОДополнительныхГарантияхПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());

КонецПроцедуры

&НаКлиенте
Процедура СведенияОЛицахСДополнительнымиГарантиямиПериодПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОДополнительныхГарантияхПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЛицахСДополнительнымиГарантиямиВидГарантииПриИзменении(Элемент)
	
	ОбновитьПолеСведенияОДополнительныхГарантияхПериод(ЭтаФорма, ОбщегоНазначенияКлиент.ДатаСеанса());
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти



#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СведенияОбИнвалидностиФизическихЛицИстория(Команда)
	
	СотрудникиКлиент.ОткрытьФормуРедактированияИстории("СведенияОбИнвалидностиФизическихЛиц", ФизическоеЛицоСсылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОПенсионерахИстория(Команда)
	
	СотрудникиКлиент.ОткрытьФормуРедактированияИстории("СведенияОПенсионерах", ФизическоеЛицоСсылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЛицахСДополнительнымиГарантиямиИстория(Команда)
	
	СотрудникиКлиент.ОткрытьФормуРедактированияИстории("СведенияОЛицахСДополнительнымиГарантиями", ФизическоеЛицоСсылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Ок(Команда)
	
	СохранитьИЗакрытьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроинициализироватьФорму()
	
	Если СведенияОбИнвалидностиФизическихЛицПрежняя = Неопределено Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц", ФизическоеЛицоСсылка);
	КонецЕсли;
	
	Если СведенияОПенсионерахПрежняя = Неопределено Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "СведенияОПенсионерах", ФизическоеЛицоСсылка);
	КонецЕсли;	
	
	ОбновитьПолеСведенияОбИнвалидностиПериод(ЭтаФорма, ТекущаяДатаСеанса());
	ОбновитьПолеСведенияОПенсионерахПериод(ЭтаФорма, ТекущаяДатаСеанса());	
	ОбновитьПолеСведенияОбИнвалидностиДатаРегистрацииИзменений(ЭтотОбъект);
	
	Если СведенияОЛицахСДополнительнымиГарантиямиПрежняя = Неопределено Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтаФорма, "СведенияОЛицахСДополнительнымиГарантиями", ФизическоеЛицоСсылка);
	КонецЕсли;
	
	ОбновитьПолеСведенияОДополнительныхГарантияхПериод(ЭтаФорма, ТекущаяДатаСеанса());

	Если СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭСПрочитан = Ложь Тогда
		
		Запись = РегистрыСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.СоздатьМенеджерЗаписи();
		Запись.ФизическоеЛицо = ФизическоеЛицоСсылка;
		Запись.Прочитать();
		
		Если НЕ ЗначениеЗаполнено(Запись.ФизическоеЛицо) Тогда
			Запись.ФизическоеЛицо = ФизическоеЛицоСсылка;
		КонецЕсли; 
		
		ЗначениеВРеквизитФормы(Запись, "СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС");
		СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭСПрочитан = Истина;
		
	КонецЕсли; 
	
	ЛьготаПрименяется = ЗначениеЗаполнено(ФизическоеЛицо.ЛьготаПриНачисленииПособий);
	ОбновитьДоступностьПрименяемойЛьготы(ЭтаФорма);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицоСсылка);
	ПараметрыПолученияСотрудников.КадровыеДанные = "ОформленПоТрудовомуДоговору";
	
	СотрудникиФизическогоЛица = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	ОформленныеСотрудники = СотрудникиФизическогоЛица.НайтиСтроки(Новый Структура("ОформленПоТрудовомуДоговору", Истина));
	
	ТолькоСтрахование = ОформленныеСотрудники.Количество() = 0;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Льгота",
		"Видимость",
		НЕ ТолькоСтрахование);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанные(Отказ, ОповещениеЗавершения = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если Не Модифицированность Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли; 
		
	Если Не СозданиеНового И Не Отказ Тогда
//		Оповещение = Новый ОписаниеОповещения("СохранитьДанныеНаличияГарантий", ЭтотОбъект, ОповещениеЗавершения);
		ЗапроситьРежимИзмененияИнвалидности(Отказ, ОповещениеЗавершения);
		ЗапроситьРежимИзмененияПенсионера(Отказ, ОповещениеЗавершения);
	Иначе 
//		СохранитьДанныеНаличияГарантий(Отказ, ОповещениеЗавершения);
		СохранитьДанныеЗавершение(Отказ, ОповещениеЗавершения);

	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеНаличияГарантий(Отказ, ОповещениеЗавершения) Экспорт 
	
	Если Отказ Тогда
		Если ОповещениеЗавершения <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СохранитьДанныеЗавершение", ЭтотОбъект, ОповещениеЗавершения);
	ЗапроситьРежимИзмененияНаличияГарантий(Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеЗавершение(Отказ, ОповещениеЗавершения) Экспорт  
	
	Если Не Отказ Тогда
		
		Если ПроверитьЗаполнение() Тогда
			
			Возвращаемыйпараметр = Новый Структура;
			Возвращаемыйпараметр.Вставить("ИмяФормы", ИмяФормы);
			Возвращаемыйпараметр.Вставить("АдресВХранилище", АдресДанныхДополнительнойФормыНаСервере(СотрудникиКлиентСервер.ОписаниеДополнительнойФормы(ИмяФормы)));
			
			Оповестить(
				"ИзмененыДанныеДополнительнойФормы",
				Возвращаемыйпараметр,
				ВладелецФормы);
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Результат, ДополнительныеПараметры) Экспорт 
	
	СохранитьИЗакрытьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьНаКлиенте(ЗакрытьФорму = Истина) Экспорт 

	Если НЕ ТолькоПросмотр Тогда
		ТекущийЭлемент = Элементы.ФормаОк;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура("ЗакрытьФорму", ЗакрытьФорму);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьИЗакрытьНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьДанные(Ложь, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьНаКлиентеЗавершение(Отказ, ДополнительныеПараметры) Экспорт 

	Если Не Отказ И Открыта() Тогда
		
		Модифицированность = Ложь;
		Если ДополнительныеПараметры.ЗакрытьФорму Тогда
			Закрыть();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеСведенияОбИнвалидностиПериод(Форма, ДатаСеанса) Экспорт
	
	// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
	// записи о сведениях об инвалидности еще нет.
	Если ЗарплатаКадрыКлиентСервер.СведенияОбИнвалидностиПоУмолчанию(Форма.СведенияОбИнвалидностиФизическихЛиц) И 
		НЕ ЗначениеЗаполнено(Форма.СведенияОбИнвалидностиФизическихЛицПрежняя.Период) Тогда
		Если ЗначениеЗаполнено(Форма.СведенияОбИнвалидностиФизическихЛиц.Период) Тогда
			Форма.СведенияОбИнвалидностиФизическихЛиц.Период = '00010101';
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(Форма.СведенияОбИнвалидностиФизическихЛиц.Период) Тогда
			Если ЗначениеЗаполнено(Форма.СведенияОбИнвалидностиФизическихЛиц.ДатаВыдачи) Тогда
				Форма.СведенияОбИнвалидностиФизическихЛиц.Период = НачалоМесяца(Форма.СведенияОбИнвалидностиФизическихЛиц.ДатаВыдачи);
			Иначе
				Форма.СведенияОбИнвалидностиФизическихЛиц.Период = НачалоМесяца(ДатаСеанса);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	ОбновитьПолеСведенияОбИнвалидностиДатаРегистрацииИзменений(Форма);
	
 	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "СведенияОбИнвалидностиФизическихЛиц", Форма.ФизическоеЛицоСсылка);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "СведенияОбИнвалидностиФизическихЛиц.Период", "СведенияОбИнвалидностиФизическихЛицПериодСтрокой");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеСведенияОПенсионерахПериод(Форма, ДатаСеанса) Экспорт
	
	// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
	// записи о сведениях о пенсионном возрасте еще нет.
	Если ЗарплатаКадрыКлиентСервер.СведенияОПенсионерахПоУмолчанию(Форма.СведенияОПенсионерах) И 
		НЕ ЗначениеЗаполнено(Форма.СведенияОПенсионерахПрежняя.Период) Тогда
		Если ЗначениеЗаполнено(Форма.СведенияОпенсионерах.Период) Тогда
			Форма.СведенияОПенсионерах.Период = '00010101';
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(Форма.СведенияОПенсионерах.Период) Тогда
			Если ЗначениеЗаполнено(Форма.СведенияОПенсионерах.СвидетельствоДатаВыдачи) Тогда
				Форма.СведенияОПенсионерах.Период = Форма.СведенияОПенсионерах.СвидетельствоДатаВыдачи;
			Иначе
				Форма.СведенияОПенсионерах.Период = ДатаСеанса;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	//ОбновитьПолеСведенияОПенсионерахДатаРегистрацииИзменений(Форма);
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "СведенияОПенсионерах", Форма.ФизическоеЛицоСсылка);
	
	//ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "СведенияОПенсионерах.Период", "СведенияОПенсионерахПериодСтрокой");
	
КонецПроцедуры



&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеСведенияОбИнвалидностиДатаРегистрацииИзменений(Форма) Экспорт
	
	Форма.Элементы.СведенияОбИнвалидностиФизическихЛицНаборЗаписейДатаРегистрацииИзмененийСтрокой.АвтоОтметкаНезаполненного = Истина;
	
	// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
	// записи о сведениях об инвалидности еще нет.
	Если ЗарплатаКадрыКлиентСервер.СведенияОбИнвалидностиПоУмолчанию(Форма.СведенияОбИнвалидностиФизическихЛиц) И 
		НЕ ЗначениеЗаполнено(Форма.СведенияОбИнвалидностиФизическихЛицПрежняя.Период) Тогда
		
		Форма.Элементы.СведенияОбИнвалидностиФизическихЛицНаборЗаписейДатаРегистрацииИзмененийСтрокой.АвтоОтметкаНезаполненного = Ложь;
		Если ЗначениеЗаполнено(Форма.СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений) Тогда
			Форма.СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений = '00010101';
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(Форма.СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений) Тогда
			Форма.СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений = НачалоМесяца(Форма.СведенияОбИнвалидностиФизическихЛиц.Период);
		КонецЕсли; 
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений", "СведенияОбИнвалидностиФизическихДатаРегистрацииИзмененийСтрокой");
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьДатуРегистрацииСведенийОбИнвалидностиПоПериоду()
	СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений = НачалоМесяца(СведенияОбИнвалидностиФизическихЛиц.Период);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "СведенияОбИнвалидностиФизическихЛиц.ДатаРегистрацииИзменений", "СведенияОбИнвалидностиФизическихДатаРегистрацииИзмененийСтрокой");
КонецПроцедуры	

&НаКлиенте
Процедура ЗапроситьРежимИзмененияИнвалидности(Отказ, ОповещениеЗавершения) Экспорт 
	
	ТекстКнопкиДа = НСтр("ru='Изменилась инвалидность';uk='Змінилася інвалідність'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru =  'При редактировании изменены сведения об инвалидности.
						|Если исправлена прежняя запись об инвалидности (она была ошибочной), нажмите ""Исправлена ошибка"".
						|Если у сотрудника изменилась инвалидность с %1, нажмите'") + " ""%2""",
			Формат(СведенияОбИнвалидностиФизическихЛиц.Период, "ДФ='д ММММ гггг ""г""'"),
			ТекстКнопкиДа);
			
	Оповещение = Новый ОписаниеОповещения("ЗапроситьРежимИзмененияНаличияГарантий", ЭтотОбъект, ОповещениеЗавершения);		
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "СведенияОбИнвалидностиФизическихЛиц", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияПенсионера(Отказ, ОповещениеЗавершения) Экспорт 
	
	ТекстКнопкиДа = НСтр("ru='Изменились сведения о пенсионере';uk='Змінилися відомості про пенсіонера'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru =  'При редактировании изменены сведения о пенсионере.
						|Если исправлена прежняя запись о пенсионере (она была ошибочной), нажмите ""Исправлена ошибка"".
						|Если у сотрудника изменился пенсионный возраст с %1, нажмите'") + " ""%2""",
			Формат(СведенияОПенсионерах.Период, "ДФ='д ММММ гггг ""г""'"),
			ТекстКнопкиДа);
			
	Оповещение = Новый ОписаниеОповещения("ЗапроситьРежимИзмененияНаличияГарантий", ЭтотОбъект, ОповещениеЗавершения);		
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "СведенияОПенсионерах", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРежимИзмененияНаличияГарантий(Отказ, ОповещениеЗавершения) Экспорт 
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстКнопкиДа = НСтр("ru='Изменились сведения о наличии гарантий';uk='Змінилися відомості про наявність гарантій'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru =  'При редактировании изменены сведения о наличии гарантий.
						|Если исправлена прежняя запись о наличии гарантий (она была ошибочной), нажмите ""Исправлена ошибка"".
						|Если у сотрудника изменились сведения о наличии гарантий с %1, нажмите'") + " ""%2""",
			Формат(СведенияОЛицахСДополнительнымиГарантиями.Период, "ДФ='д ММММ гггг ""г""'"),
			ТекстКнопкиДа);
			
	Оповещение = Новый ОписаниеОповещения("СохранитьДанныеЗавершение", ЭтотОбъект, ОповещениеЗавершения);		
	РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ЭтаФорма, "СведенияОЛицахСДополнительнымиГарантиями", ТекстВопроса, ТекстКнопкиДа, Отказ, Оповещение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПолеСведенияОДополнительныхГарантияхПериод(Форма, ДатаСеанса) Экспорт
	
	// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
	// записи о сведениях о дополнительных гарантиях еще нет.
	Если ЗарплатаКадрыКлиентСервер.СведенияОЛицахСДополнительнымиГарантиямиПоУмолчанию(Форма.СведенияОЛицахСДополнительнымиГарантиями) И 
		НЕ ЗначениеЗаполнено(Форма.СведенияОЛицахСДополнительнымиГарантиямиПрежняя.Период) Тогда
		Если ЗначениеЗаполнено(Форма.СведенияОЛицахСДополнительнымиГарантиями.Период) Тогда
			Форма.СведенияОЛицахСДополнительнымиГарантиями.Период = '00010101';
		КонецЕсли; 
	Иначе
		Если ЗначениеЗаполнено(Форма.СведенияОЛицахСДополнительнымиГарантиями.Период) Тогда
			Форма.СведенияОЛицахСДополнительнымиГарантиями.Период = Форма.СведенияОЛицахСДополнительнымиГарантиями.Период;
		Иначе
			Форма.СведенияОЛицахСДополнительнымиГарантиями.Период =  НачалоМесяца(ДатаСеанса);
		КонецЕсли;
	КонецЕсли;
	
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "СведенияОЛицахСДополнительнымиГарантиями", Форма.ФизическоеЛицоСсылка);
	
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДополнительнойФормыНаСервере(ОписаниеДополнительнойФормы)
	
	Возврат СотрудникиФормы.АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ЛьготаПрименяетсяПриИзменении(Элемент)
	
	Если ИзФормыСотрудника Тогда
		СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ВладелецФормы); 
	КонецЕсли;
	
	Если НЕ ЛьготаПрименяется Тогда
		ФизическоеЛицо.ЛьготаПриНачисленииПособий = ПредопределенноеЗначение("Перечисление.ОснованияЛьготПоПособию.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛьготаПриНачисленииПособий",
		"ОтметкаНезаполненного",
		ЛьготаПрименяется);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЛьготаПриНачисленииПособий",
		"АвтоОтметкаНезаполненного",
		ЛьготаПрименяется);
		
	Модифицированность = Истина;
	ОбновитьДоступностьПрименяемойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготаПриНачисленииПособийПриИзменении(Элемент)
	
	Если ИзФормыСотрудника Тогда
		СотрудникиКлиент.ЗаблокироватьФизическоеЛицоПриРедактировании(ВладелецФормы); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьПрименяемойЛьготы(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ЛьготаПриНачисленииПособий",
		"Доступность",
		Форма.ЛьготаПрименяется);
		
КонецПроцедуры

#КонецОбласти
