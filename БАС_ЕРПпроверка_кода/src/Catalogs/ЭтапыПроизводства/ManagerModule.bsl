#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Возращает новый номер этапа.
//
// Параметры:
//   Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация
//
// Возвращаемое значение:
//   Число        - Новый номер этапа
//
Функция НовыйНомерЭтапа(Спецификация) Экспорт

	Если Спецификация.Пустая() Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Спецификация
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа УБЫВ");
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат 1;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.НомерЭтапа + 1;

КонецФункции

// Возращает основную единицу измерения времени этапа.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени этапа
//
Функция ОсновнаяЕдиницаВремени() Экспорт

	Возврат Перечисления.ЕдиницыИзмеренияВремени.Минута;

КонецФункции

// Возращает основную единицу измерения времени буфера.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени буфера
//
Функция ОсновнаяЕдиницаВремениБуфера() Экспорт

	Возврат Перечисления.ЕдиницыИзмеренияВремени.День;

КонецФункции

// Возращает основную единицу измерения времени длительности этапа УББВ.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ЕдиницыИзмеренияВремени - основная единица измерения времени этапа УББВ
//
Функция ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ() Экспорт
	
	Возврат Перечисления.ЕдиницыИзмеренияВремени.День;
	
КонецФункции

// Возвращает имена блокруемых реквизитов
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("НомерЭтапа");
	МассивЭлементов.Добавить("НомерСледующегоЭтапа");
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("Подразделение1");
	МассивЭлементов.Добавить("СпособПроизводства");
	МассивЭлементов.Добавить("МаршрутнаяКарта");
	МассивЭлементов.Добавить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий");
	МассивЭлементов.Добавить("ПланироватьРаботуВидовРабочихЦентров");
	МассивЭлементов.Добавить("ВидыРабочихЦентров");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("ГрафикРаботыПартнера");
	МассивЭлементов.Добавить("ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте");
	МассивЭлементов.Добавить("ДобавитьАльтернативный");
	
	Возврат МассивЭлементов;
	
КонецФункции

// Запускает фоновое задание которое обновляет реквизит ДнейДоОкончания для всех этапов спецификации
//
// Параметры:
//  Спецификация - СправочникСсылка.РесурсныеСпецификации - спецификация, по которой необходимо рассчитать
//
Процедура РассчитатьДнейДоОкончанияПроизводстваВФоне(Спецификация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = Спецификация.УникальныйИдентификатор();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru='Обновление Этапов ресурсной спецификации: %Ссылка%';uk='Оновлення Етапів ресурсної специфікації: %Ссылка%'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, "%Ссылка%", Спецификация);
	
	ИмяЭкспортнойПроцедуры = "Справочники.ЭтапыПроизводства.РассчитатьДнейДоОкончанияПроизводстваВТранзакции";
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Спецификация);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

//++ НЕ УТКА

// Проверяет соответствуют ли значения реквизитов выбранному подразделению
// Если не соответствуют то значения очищаются
//
// Параметры:
//  Объект	- ДанныеФормы - объект содержащий данные этапа
//
Процедура ПроверитьСоответствиеРеквизитовПодразделению(Объект) Экспорт

	Если Объект.Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРабочихЦентров.Ссылка
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	(ВидыРабочихЦентров.Ссылка В (&ВидРабочегоЦентра)
	|		ИЛИ ВидыРабочихЦентров.Ссылка В (&АльтернативныеВидыРабочихЦентров))
	|	И ВидыРабочихЦентров.Подразделение <> &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение",     Объект.Подразделение);
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", Объект.ВидыРабочихЦентров.Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра"));
	Запрос.УстановитьПараметр("АльтернативныеВидыРабочихЦентров", Объект.АльтернативныеВидыРабочихЦентров.Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", Выборка.Ссылка);
  		СписокСтрок = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаВидРЦ Из СписокСтрок Цикл
			СтрокаВидРЦ.ВидРабочегоЦентра = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
			СтрокаВидРЦ.Использовать = Истина;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", Выборка.Ссылка);
  		СписокСтрок = Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаВидРЦ Из СписокСтрок Цикл
			Объект.АльтернативныеВидыРабочихЦентров.Удалить(СтрокаВидРЦ);
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ Объект.МаршрутнаяКарта.Пустая() Тогда
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.МаршрутнаяКарта, "Подразделение");
		Если Объект.Подразделение <> Подразделение Тогда
			Объект.МаршрутнаяКарта = Справочники.МаршрутныеКарты.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список видов рабочих центров на основании выбранной маршрутной карте
//
// Параметры:
//  ДанныеЭтапа	- ДанныеФормы - объект содержащий данные этапа
//
Процедура ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(ДанныеЭтапа) Экспорт

	ДанныеЭтапа.ВидыРабочихЦентров.Очистить();
	ДанныеЭтапа.АльтернативныеВидыРабочихЦентров.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; //временные таблицы используются повторно
	
	ТекстЗапросаСписокЭтапов = "ВЫБРАТЬ
	               |	&МаршрутнаяКарта КАК МаршрутнаяКарта
	               |ПОМЕСТИТЬ СписокЭтапов";
					   
	Запрос.УстановитьПараметр("МаршрутнаяКарта", ДанныеЭтапа.МаршрутнаяКарта);
	Запрос.УстановитьПараметр("Подразделение",   ДанныеЭтапа.Подразделение);
	
	ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(
				Запрос, 
				ТекстЗапросаСписокЭтапов, 
				ДанныеЭтапа.ВидыРабочихЦентров);
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	// Заполним значения буферов
	БуферыМаршрутнойКарты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеЭтапа.МаршрутнаяКарта, 
		"ПредварительныйБуфер,ЗавершающийБуфер,ЕдиницаИзмеренияПредварительногоБуфера,ЕдиницаИзмеренияЗавершающегоБуфера");
	ЗаполнитьЗначенияСвойств(ДанныеЭтапа, БуферыМаршрутнойКарты);		
	
	Если ДанныеЭтапа.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		ДанныеЭтапа.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера();
	КонецЕсли; 
	Если ДанныеЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		ДанныеЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера();
	КонецЕсли; 
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

Функция НедоступныеЭлементыЗакрытойСпецификации() Экспорт

	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПредварительныйБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
	МассивЭлементов.Добавить("ЗавершающийБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	МассивЭлементов.Добавить("ДлительностьЭтапа");
	МассивЭлементов.Добавить("ДлительностьЭтапа1");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
	МассивЭлементов.Добавить("ОптимальноеКоличествоПередачиМеждуЭтапами");
	МассивЭлементов.Добавить("Непрерывный");
	МассивЭлементов.Добавить("РазбиватьМаршрутныеЛисты");
	МассивЭлементов.Добавить("МаксимальноеКоличествоЕдиницПартийИзделия");

	Возврат МассивЭлементов;
	
КонецФункции

Процедура ЗаполнитьВыборЕдиницыИзмеренияБуфера(ИнтервалПланирования, СписокВыбора) Экспорт

	СписокВыбора.Очистить();
	//++ НЕ УТКА
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		СписокВыбора.Добавить(Перечисления.ЕдиницыИзмеренияВремени.Час);
	КонецЕсли;
	//-- НЕ УТКА
	СписокВыбора.Добавить(Перечисления.ЕдиницыИзмеренияВремени.День);
	
КонецПроцедуры

Процедура РассчитатьДнейДоОкончанияПроизводстваВТранзакции(Спецификация) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		РассчитатьДнейДоОкончанияПроизводства(Спецификация);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru='Обновление Этапов ресурсной спецификации';uk='Оновлення Етапів ресурсної специфікації'"), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.РесурсныеСпецификации,
			Спецификация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура РассчитатьДнейДоОкончанияПроизводства(Спецификация) Экспорт
	
	Если ТранзакцияАктивна() Тогда
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ЭтапыПроизводства");
		ЭлементБлокировки.УстановитьЗначение("Владелец", Спецификация);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
	КонецЕсли; 
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка,
	|	ЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	ЭтапыПроизводства.НомерСледующегоЭтапа,
	|	ЭтапыПроизводства.ДлительностьЭтапа,
	|	ЭтапыПроизводства.ДнейДоОкончания,
	|	0 КАК ДнейДоОкончанияРасчетная
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Ссылка
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа";
	
	Запрос.УстановитьПараметр("Ссылка", Спецификация);
	
	ТаблицаЭтапов = Запрос.Выполнить().Выгрузить();
	ТаблицаЭтапов.Индексы.Добавить("НомерСледующегоЭтапа");
	
	Отбор = Новый Структура("НомерСледующегоЭтапа", 0); // Выбираем последний этап
	
	ЭтапыРасчета = ТаблицаЭтапов.НайтиСтроки(Отбор);
	
	Пока ЭтапыРасчета.Количество() > 0 Цикл
		
		Этап = ЭтапыРасчета[0];
		
		Если Этап.НомерСледующегоЭтапа = 0 Тогда
			
			Этап.ДнейДоОкончанияРасчетная = Этап.ДлительностьЭтапа;
			
		КонецЕсли; 
		
		Отбор = Новый Структура("НомерСледующегоЭтапа", Этап.НомерЭтапа); 
		НайденныеЭтапы = ТаблицаЭтапов.НайтиСтроки(Отбор);
		Для каждого НайденныйЭтап Из НайденныеЭтапы Цикл
			
			НайденныйЭтап.ДнейДоОкончанияРасчетная = Макс(НайденныйЭтап.ДнейДоОкончанияРасчетная, НайденныйЭтап.ДлительностьЭтапа + Этап.ДнейДоОкончанияРасчетная);
			ЭтапыРасчета.Добавить(НайденныйЭтап);
			
		КонецЦикла;
		
		ЭтапыРасчета.Удалить(0);
		
	КонецЦикла;
	
	Для каждого Этап Из ТаблицаЭтапов Цикл
	
		Если Этап.ДнейДоОкончания = Этап.ДнейДоОкончанияРасчетная Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Этап.Ссылка.ПолучитьОбъект();
		Объект.ДнейДоОкончания = Этап.ДнейДоОкончанияРасчетная;
		Объект.ДополнительныеСвойства.Вставить("ЗапретитьРасчетДнейДоОкончания", Истина);
		
		Попытка
			Объект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось записать: %Ссылка% по причине: %Причина%';uk='Не вдалося записати: %Ссылка% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Этап.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(НСтр("ru='Обновление дней до окончания этапов';uk='Оновлення днів до закінчення етапів'"), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ЭтапыПроизводства, Этап.Ссылка, ТекстСообщения);
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(Запрос, ТекстЗапросаСписокЭтапов, СписокВидовРабочихЦентров)

	ИндексРезультатаЗапроса = 0;
	ТекстЗапроса = "";
	
	Если ТекстЗапросаСписокЭтапов <> Неопределено Тогда
		ИндексРезультатаЗапроса = 1;
		
		ТекстЗапроса = ТекстЗапросаСписокЭтапов 
				+ "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|"
	КонецЕсли; 
	ТекстЗапроса = ТекстЗапроса
			+ "ВЫБРАТЬ
			  |	СписокЭтапов.МаршрутнаяКарта КАК МаршрутнаяКарта
			  |ПОМЕСТИТЬ СписокМаршрутныхКарт
			  |ИЗ
			  |	СписокЭтапов КАК СписокЭтапов
			  |
			  |ИНДЕКСИРОВАТЬ ПО
			  |	МаршрутнаяКарта
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  // 1. Виды рабочих центров по которым нужно планировать работу
			  |ВЫБРАТЬ РАЗЛИЧНЫЕ
			  |	ВЫБОР	
			  |		КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			  |			ТОГДА спрОперации.РабочийЦентр
			  |		ИНАЧЕ ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра
			  |	КОНЕЦ КАК ВидРабочегоЦентра
			  |ИЗ
			  |	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК спрОперации
			  |		ПО (спрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
			  |			И (НЕ спрОперации.СодержитВложенныйМаршрут)
			  |			И (ВЫБОР 
			  |					КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			  |						ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).ПланироватьРаботу
			  |					КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
			  |						ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.ПланироватьРаботу
			  |					ИНАЧЕ ЛОЖЬ
			  |				КОНЕЦ)
			  | ГДЕ Не спрОперации.Ссылка.ПометкаУдаления
			  |		И ВЫБОР	
			  |			КОГДА спрОперации.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
			  |				ТОГДА ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).Подразделение
			  |			ИНАЧЕ ВЫРАЗИТЬ(спрОперации.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.Подразделение
			  |		КОНЕЦ = &Подразделение
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |УНИЧТОЖИТЬ СписокЭтапов
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	спрОперации.ВложенныйМаршрут КАК МаршрутнаяКарта
			  |ПОМЕСТИТЬ СписокЭтапов
			  |ИЗ
			  |	СписокМаршрутныхКарт КАК СписокМаршрутныхКарт
			  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК спрОперации
			  |		ПО (спрОперации.Владелец = СписокМаршрутныхКарт.МаршрутнаяКарта)
			  |			И спрОперации.СодержитВложенныйМаршрут
			  | ГДЕ Не спрОперации.Ссылка.ПометкаУдаления
			  |;
			  |
			  |////////////////////////////////////////////////////////////////////////////////
			  |УНИЧТОЖИТЬ СписокМаршрутныхКарт";
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.ВыполнитьПакет();
	// Результат[1] - Виды рабочих центров по которым нужно планировать работ
	
	Если Результат[1 + ИндексРезультатаЗапроса].Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	// Заполним выходные изделия
	Выборка = Результат[1 + ИндексРезультатаЗапроса].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра", Выборка.ВидРабочегоЦентра);
  		СписокСтрок = СписокВидовРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			НоваяСтрока = СписокВидовРабочихЦентров.Добавить();
			НоваяСтрока.ВидРабочегоЦентра = Выборка.ВидРабочегоЦентра;
			НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
			
			УправлениеДаннымиОбИзделияхКлиентСервер.ПриВводеНовойСтрокиВидовРабочихЦентров(НоваяСтрока, Ложь);
		КонецЕсли; 
	КонецЦикла;
	
	ВидыРабочихЦентровПоКоторымНужноПланироватьРаботу(Запрос, Неопределено, СписокВидовРабочихЦентров);

КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#Область Обработчики_2_0_11

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли