#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ИспользованиеГрафикаРаботы = 1 И Объект.Календарь.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Поле ""Календарь"" не заполнено.';uk='Поле ""Календар"" не заповнено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Календарь", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.ДлительностьПереналадки.УстановитьДлительностьПереналадки(ТекущийОбъект.Ссылка,,, ВремяПереналадки);
	УстановитьПривилегированныйРежим(Ложь);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВидыРабочихЦентров");

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ИспользованиеГрафикаРаботы = 0 Тогда
		ТекущийОбъект.Календарь = Справочники.Календари.ПустаяСсылка();
	КонецЕсли;
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВариантыНаладки" И Источник = Объект.Ссылка Тогда
		// Нужно прочитать время, т.к. оно записывается при записи вида РЦ
		ПрочитатьВремяПереналадки();
		
	ИначеЕсли ИмяСобытия = "Запись_СтруктураПредприятия" Тогда
		ПрочитатьПараметрыПодразделения();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьРаботуПриИзменении(Элемент)
	
	Если Объект.ПланироватьРаботу Тогда
		
		Объект.УчитыватьДоступностьПоГрафикуРаботы = Истина;
		Объект.ЕдиницаИзмеренияДоступностиРЦ = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Час");
		
	Иначе
		
		Объект.ПериодОжидания                = 0;
		Объект.МаксимальнаяДоступностьРЦ     = 0;
		Объект.ЕдиницаИзмеренияДоступностиРЦ = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.ПустаяСсылка");
		Объект.МинимальныйЗначимыйБуфер      = 0;
		
	КонецЕсли;
	
	ЗаполнитьПараметрыВидаРЦ();
	
	ОчиститьРеквизитыЕслиНеПланироватьРаботу();
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьРаботуРабочихЦентровПриИзменении(Элемент)
	
	ЗаполнитьПараметрыВидаРЦ();
	
	ОчиститьРеквизитыЕслиНеПланироватьРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГрафикПодразделенияПриИзменении(Элемент)
	
	Если ИспользованиеГрафикаРаботы = 0 И НЕ Объект.Календарь.Пустая() Тогда
		Объект.Календарь = ПредопределенноеЗначение("Справочник.Календари.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйГрафикПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПараметрыПланированияРаботыВГрафике(Команда)
	
	Если Объект.Подразделение.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Для изменения параметров необходимо выбрать подразделение.';uk='Для зміни параметрів необхідно вибрати підрозділ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Подразделение", "Объект");
		Возврат;
	КонецЕсли; 
	
	ДанныеОбъекта = Новый Структура("КоличествоРабочихЦентров,ЕдиницаИзмеренияДоступностиРЦ,КонтрольДоступности,
										|МаксимальнаяДоступностьРЦ,МинимальныйЗначимыйБуфер,
										|УчитыватьДоступностьПоГрафикуРаботы,ВводитьДоступностьДляВидаРЦ");
										
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ИнтервалПланирования", ИнтервалПланирования);
	ДанныеОбъекта.Вставить("НаименованиеВидаРЦ", Объект.Наименование);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыПланированияРаботыВГрафикеЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ДанныеОбъекта", ДанныеОбъекта);
	ОткрытьФорму("Справочник.ВидыРабочихЦентров.Форма.ПараметрыПланированияРаботыВГрафике", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПараметрыПланированияРаботыРЦ(Команда)
	
	Если Объект.Подразделение.Пустая() Тогда
		ТекстСообщения = НСтр("ru='Для изменения параметров необходимо выбрать подразделение.';uk='Для зміни параметрів необхідно вибрати підрозділ.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Подразделение", "Объект");
		Возврат;
	КонецЕсли; 
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Подразделение");
	ДанныеОбъекта.Вставить("ПараллельнаяЗагрузка");
	ДанныеОбъекта.Вставить("ЕдиницаИзмеренияЗагрузки");
	ДанныеОбъекта.Вставить("ВариантЗагрузки");
	ДанныеОбъекта.Вставить("ВремяРаботы");
	ДанныеОбъекта.Вставить("ЕдиницаИзмерения");
	ДанныеОбъекта.Вставить("ЕдиницаВремениПереналадки");
	ДанныеОбъекта.Вставить("ИспользуютсяВариантыНаладки");
											
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ВремяПереналадки", ВремяПереналадки);
	ДанныеОбъекта.Вставить("НаименованиеВидаРЦ", Объект.Наименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПараметрыПланированияРаботыРЦЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ДанныеОбъекта", ДанныеОбъекта);
	ОткрытьФорму("Справочник.ВидыРабочихЦентров.Форма.ПараметрыПланированияРаботыРЦ", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// ОтметкаНезаполненного для Календарь
	#Область КалендарьОтметка
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Календарь.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользованиеГрафикаРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастроитьПанельНавигации();
	
	ПрочитатьПараметрыПодразделения();
	
	// Нужно прочитать время, т.к. оно записывается при записи вида РЦ
	ПрочитатьВремяПереналадки();
	
	Если НЕ Объект.Календарь.Пустая() Тогда
		ИспользованиеГрафикаРаботы = 1;
	Иначе
		ИспользованиеГрафикаРаботы = 0;
	КонецЕсли; 
	
	ЗаполнитьПараметрыВидаРЦ();
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	Форма.Элементы.Календарь.Доступность = (Форма.ИспользованиеГрафикаРаботы = 1);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПанельНавигации()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьВариантыНаладки", Объект.ИспользуютсяВариантыНаладки);
	
	ОбщегоНазначенияУТ.НастроитьФормуПоПараметрам(ЭтаФорма, СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВидаРЦ()

	ЖирныйШрифт = Новый Шрифт(,, Истина);
	
	// Заполним параметры планирования в графике производства
	Если Объект.ПланироватьРаботу Тогда
		
		СтрокиИнформации = Новый Массив;
		
		Если Объект.УчитыватьДоступностьПоГрафикуРаботы Тогда
			
			// Учитывается ограничение
			ТекстИнформации = Новый ФорматированнаяСтрока(НСтр("ru='- В графике производства учитывается ограничение доступности';uk='- У графіку виробництва враховується обмеження доступності'"));
			СтрокиИнформации.Добавить(ТекстИнформации);
			
			// Как вводится доступность
			СтрокиИнформации.Добавить(Символы.ПС);
			Если Объект.ВводитьДоступностьДляВидаРЦ Тогда
				ТекстИнформации = Новый ФорматированнаяСтрока(НСтр("ru='- Доступность вводится для вида РЦ';uk='- Доступність вводиться для виду РЦ'"));
			Иначе
				ТекстИнформации = Новый ФорматированнаяСтрока(НСтр("ru='- Доступность определяется по графикам работы РЦ';uk='- Доступність визначається за графіками роботи РЦ'"));
			КонецЕсли;
			СтрокиИнформации.Добавить(ТекстИнформации);
			
			// Минимальный значимый буфер
			Если Объект.МинимальныйЗначимыйБуфер <> 0 Тогда
				СтрокиИнформации.Добавить(Символы.ПС);
				ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='- Минимальный значимый буфер: %1%';uk='- Мінімальний значущий буфер: %1%'"),
											Объект.МинимальныйЗначимыйБуфер);
				ТекстИнформации = Новый ФорматированнаяСтрока(ТекстИнформации);
				СтрокиИнформации.Добавить(ТекстИнформации);
			КонецЕсли;
			
		Иначе
			
			// Не учитывается ограничение
			ТекстИнформации = Новый ФорматированнаяСтрока(НСтр("ru='- В графике производства не учитывается ограничение доступности';uk='- У графіку виробництва не враховується обмеження доступності'"));
			СтрокиИнформации.Добавить(ТекстИнформации);
			
			// Минимальный значимый буфер
			Если Объект.МинимальныйЗначимыйБуфер <> 0 Тогда
				СтрокиИнформации.Добавить(Символы.ПС);
				ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='- Минимальный значимый буфер: %1%';uk='- Мінімальний значущий буфер: %1%'"),
											Объект.МинимальныйЗначимыйБуфер);
				ТекстИнформации = Новый ФорматированнаяСтрока(ТекстИнформации);
				СтрокиИнформации.Добавить(ТекстИнформации);
			КонецЕсли;
			
		КонецЕсли; 
		
		ИнформацияОПланированииРаботыВГрафикеПроизводства = Новый ФорматированнаяСтрока(СтрокиИнформации);
		
		Элементы.СтраницыПланироватьРаботу.ТекущаяСтраница = Элементы.СтраницаПланироватьРаботу;
		
	Иначе
		
		Элементы.СтраницыПланироватьРаботу.ТекущаяСтраница = Элементы.СтраницаНеПланироватьРаботу;
		
	КонецЕсли; 

	Элементы.МаксимальнаяДоступностьРЦ.Видимость = Объект.ПланироватьРаботу;
	Элементы.ЕдиницаИзмеренияДоступностиРЦ.Видимость = Объект.ПланироватьРаботу;
	Элементы.ДекорацияМаксимальнаяДоступностьРЦ.Видимость = Объект.ПланироватьРаботу;
	Элементы.ПояснениеМаксимальнаяДоступностьРЦ.Видимость = Объект.ПланироватьРаботу;
	
	Элементы.РезервДоступности.Видимость = Объект.ПланироватьРаботу ИЛИ Объект.ПланироватьРаботуРабочихЦентров;
	Элементы.ДекорацияРезервДоступности.Видимость = Объект.ПланироватьРаботу ИЛИ Объект.ПланироватьРаботуРабочихЦентров;
	Элементы.ПояснениеРезервДоступности.Видимость = Объект.ПланироватьРаботу ИЛИ Объект.ПланироватьРаботуРабочихЦентров;
	
	// Заполним параметры планирования работы РЦ
	Если Объект.ПланироватьРаботуРабочихЦентров Тогда
		
		СтрокиИнформации = Новый Массив;
		
		Если Объект.ПараллельнаяЗагрузка Тогда
			
			// Допускается параллельная загрузка
			Если Объект.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный Тогда
				ТекстИнформации = Новый ФорматированнаяСтрока(НСтр("ru='- Допускается синхронная загрузка';uk='- Допускається синхронне завантаження'"));
			Иначе
				ТекстИнформации = Новый ФорматированнаяСтрока(НСтр("ru='- Допускается асинхронная загрузка';uk='- Допускається асинхронне завантаження'"));
			КонецЕсли; 
			СтрокиИнформации.Добавить(ТекстИнформации);
			
		Иначе
			
			// Не допускается параллельная загрузка
			ТекстИнформации = Новый ФорматированнаяСтрока(НСтр("ru='- Не допускается параллельная загрузка';uk='- Не допускається паралельне завантаження'"));
			СтрокиИнформации.Добавить(ТекстИнформации);
			
		КонецЕсли; 
		
		// Использование вариантов наладки
		Если Объект.ИспользуютсяВариантыНаладки Тогда
			
			СтрокиИнформации.Добавить(Символы.ПС);
			КоличествоВариантовНаладки = КоличествоВведенныхВариантовНаладки(Объект.Ссылка);
			Если КоличествоВариантовНаладки <> 0 Тогда
				ПараметрыПредметаИсчисления = НСтр("ru='вариант, варианта, вариантов, м,,,,,0';uk='варіант, варіанти, варіантів, м,,,,,0'");
				ВариантовПрописью = ПолучитьПредметИсчисления(КоличествоВариантовНаладки, ПараметрыПредметаИсчисления);
				
				ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='- Используется %1 %2 наладки';uk='- Використовується %1 %2 наладки'"),
											Формат(КоличествоВариантовНаладки, "ЧГ=0"),
											ВариантовПрописью);
			Иначе
				ТекстИнформации = НСтр("ru='- Используются варианты наладки (требуется ввести)';uk='- Використовуються варіанти наладки (потрібно ввести)'");
			КонецЕсли;
			ТекстИнформации = Новый ФорматированнаяСтрока(ТекстИнформации);
			СтрокиИнформации.Добавить(ТекстИнформации);
			
			// Время переналадки
			Если ВремяПереналадки <> 0 Тогда
				СтрокиИнформации.Добавить(Символы.ПС);
				ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='- Время переналадки %1%2 при переходе на любой вариант наладки с любых других';uk='- Час переналадки %1%2 при переході на будь-який варіант наладки з будь-яких інших'"),
											Формат(ВремяПереналадки, "ЧГ=0"),
											Объект.ЕдиницаВремениПереналадки);
				ТекстИнформации = Новый ФорматированнаяСтрока(ТекстИнформации);
				СтрокиИнформации.Добавить(ТекстИнформации);
			КонецЕсли;
			
		КонецЕсли;
		
		ИнформацияОПланированииРаботыРЦ = Новый ФорматированнаяСтрока(СтрокиИнформации);
		
		Элементы.СтраницыПланироватьРаботуРабочихЦентров.ТекущаяСтраница = Элементы.СтраницаПланироватьРаботуРабочихЦентров;
	Иначе
		Элементы.СтраницыПланироватьРаботуРабочихЦентров.ТекущаяСтраница = Элементы.СтраницаНеПланироватьРаботуРабочихЦентров;
	КонецЕсли; 
	
	Если Объект.ПланироватьРаботу И Объект.ПланироватьРаботуРабочихЦентров Тогда
		РезюмеГдеМожноИспользоватьВидРЦ = НСтр("ru='Вид рабочих центров можно использовать в спецификациях и маршрутных картах.';uk='Вид робочих центрів можна використовувати в специфікаціях та маршрутних картах.'");
		Элементы.СтраницыРезюмеПоВидуРЦ.ТекущаяСтраница = Элементы.СтраницаВидРЦМожноИспользовать;
		
	ИначеЕсли Объект.ПланироватьРаботу Тогда
		РезюмеГдеМожноИспользоватьВидРЦ = НСтр("ru='Вид рабочих центров можно использовать в спецификациях.';uk='Вид робочих центрів можна використовувати в специфікаціях.'");
		Элементы.СтраницыРезюмеПоВидуРЦ.ТекущаяСтраница = Элементы.СтраницаВидРЦМожноИспользовать;
		
	ИначеЕсли Объект.ПланироватьРаботуРабочихЦентров Тогда
		РезюмеГдеМожноИспользоватьВидРЦ = НСтр("ru='Вид рабочих центров можно использовать в маршрутных картах.';uk='Вид робочих центрів можна використовувати в маршрутних картах.'");
		Элементы.СтраницыРезюмеПоВидуРЦ.ТекущаяСтраница = Элементы.СтраницаВидРЦМожноИспользовать;
		
	Иначе
		Элементы.СтраницыРезюмеПоВидуРЦ.ТекущаяСтраница = Элементы.СтраницаВидРЦНельзяИспользоватьВПрограмме;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоВведенныхВариантовНаладки(ВидРабочегоЦентра)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ВариантыНаладки.Ссылка), 0) КАК Количество
	|ИЗ
	|	Справочник.ВариантыНаладки КАК ВариантыНаладки
	|ГДЕ
	|	ВариантыНаладки.Владелец = &ВидРабочегоЦентра
	|	И НЕ ВариантыНаладки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	КонецЕсли;
	
	Возврат 0;

КонецФункции

&НаСервере
Функция ПолучитьПредметИсчисления(Число, ПараметрыПредметаИсчисления)
	
	ЧислоПрописью = ЧислоПрописью(Число,"Л = ru_RU; НД=ложь; ДП = Истина", ПараметрыПредметаИсчисления);
	ЧислоПрописью = СтрЗаменить(ЧислоПрописью, " ", Символы.ПС);
	
	Возврат СтрПолучитьСтроку(ЧислоПрописью, СтрЧислоСтрок(ЧислоПрописью));
	
КонецФункции

&НаКлиенте
Процедура ПараметрыПланированияРаботыВГрафикеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
	
	ЗаполнитьПараметрыВидаРЦ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПланированияРаботыРЦЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
	ВремяПереналадки = РезультатЗакрытия.ВремяПереналадки;
	
	ПараметрыПланированияРаботыРЦЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПараметрыПланированияРаботыРЦЗавершениеНаСервере()

	ЗаполнитьПараметрыВидаРЦ();
	
	НастроитьПанельНавигации();

КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()

	ИнтервалПланированияДоИзменения = ИнтервалПланирования; 
	
	ПрочитатьПараметрыПодразделения();

	Если ИнтервалПланирования <> ИнтервалПланированияДоИзменения Тогда
		
		// Нужно сбросить параметры которые не подходят для нового интервала планирования
		Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			СписокИзмененныхНастроек = "";
			Если Объект.ПланироватьРаботу 
				И Объект.УчитыватьДоступностьПоГрафикуРаботы
				И Объект.ВводитьДоступностьДляВидаРЦ Тогда
				
				Объект.ВводитьДоступностьДляВидаРЦ = Ложь;
				СписокИзмененныхНастроек = СписокИзмененныхНастроек + 
											+ ?(СписокИзмененныхНастроек <> "",", ","")
											+ НСтр("ru='Доступность в графике производства';uk='Доступність у графіку виробництва'");
			КонецЕсли;
			
			Если СписокИзмененныхНастроек <> "" Тогда
				ТекстСообщения = НСтр("ru='В выбранном подразделении используется интервал планирования ""Час"", поэтому следующие настройки были изменены:';uk='У вибраному підрозділі використовується інтервал планування ""Година"", тому наступні настройки були змінені:'")
								+ СписокИзмененныхНастроек + ".";
								
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура ПрочитатьПараметрыПодразделения()

	КалендарьПодразделения = Справочники.Календари.ПустаяСсылка();
	ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.ПустаяСсылка();
	
	Если Объект.Подразделение.Пустая() Тогда
		Элементы.СтраницыКалендарьПодразделения.ТекущаяСтраница = Элементы.СтраницаКалендарьПодразделениеНевыбрано;
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.ГрафикРаботы КАК ГрафикРаботыПодразделения,
	|	ОсновнойКалендарьПредприятия.Значение КАК ОсновнойКалендарьПредприятия,
	|	СтруктураПредприятия.ИнтервалПланирования
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СтруктураПредприятия.Ссылка = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ГрафикРаботыПодразделения) Тогда
			КалендарьПодразделения = Выборка.ГрафикРаботыПодразделения;
		Иначе
			КалендарьПодразделения = Выборка.ОсновнойКалендарьПредприятия;
		КонецЕсли;
		ИнтервалПланирования = Выборка.ИнтервалПланирования;
	КонецЕсли; 	

	Если НЕ КалендарьПодразделения.Пустая() Тогда
		Элементы.СтраницыКалендарьПодразделения.ТекущаяСтраница = Элементы.СтраницаКалендарьЗадан;
	Иначе
		Элементы.СтраницыКалендарьПодразделения.ТекущаяСтраница = Элементы.СтраницаКалендарьНеЗадан;
	КонецЕсли; 
	
	ЗаполнитьПараметыМаксимальнойДоступности();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыЕслиНеПланироватьРаботу()

	Если НЕ Объект.ПланироватьРаботу И НЕ Объект.ПланироватьРаботуРабочихЦентров Тогда
		Объект.РезервДоступности = 0;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяПереналадки()

	ВремяПереналадки = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДлительностьПереналадки.ВремяПереналадки
	|ИЗ
	|	РегистрСведений.ДлительностьПереналадки КАК ДлительностьПереналадки
	|ГДЕ
	|	ДлительностьПереналадки.ВидРабочегоЦентра = &ВидРабочегоЦентра
	|	И ДлительностьПереналадки.ТекущийВариантНаладки = ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка)
	|	И ДлительностьПереналадки.СледующийВариантНаладки = ЗНАЧЕНИЕ(Справочник.ВариантыНаладки.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВремяПереналадки = Выборка.ВремяПереналадки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметыМаксимальнойДоступности()

	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		МаксимумЧасовСтрокой = НСтр("ru='1 час';uk='1 година'");
		ИнтервалВСекундах = 3600;
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		МаксимумЧасовСтрокой = НСтр("ru='24 часа';uk='24 години'");
		ИнтервалВСекундах = 86400;
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		МаксимумЧасовСтрокой = НСтр("ru='7 дней';uk='7 днів'");
		ИнтервалВСекундах = 604800;
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		МаксимумЧасовСтрокой = НСтр("ru='30 дней';uk='30 днів'");
		ИнтервалВСекундах = 2592000; // 30 дней
	КонецЕсли;
	
	ЗаголовокНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='одного рабочего центра в интервале планирования (максимум %1)';uk='одного робочого центру в інтервалі планування (максимум %1)'"),
			МаксимумЧасовСтрокой);
			
	Элементы.ДекорацияМаксимальнаяДоступностьРЦ.Заголовок = ЗаголовокНадписи;

КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
