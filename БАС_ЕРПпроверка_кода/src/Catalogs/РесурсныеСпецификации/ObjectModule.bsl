#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если НЕ ЭтоГруппа Тогда
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
		Если ТипДанныхЗаполнения = Тип("СправочникСсылка.Номенклатура") Тогда
			
			НоваяСтрока = ВыходныеИзделия.Добавить();
			НоваяСтрока.Номенклатура       = ДанныеЗаполнения;
			НоваяСтрока.КоличествоУпаковок = 1;
			НоваяСтрока.Количество         = 1;
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("Номенклатура") Тогда
			
			НоваяСтрока = ВыходныеИзделия.Добавить();
			НоваяСтрока.Номенклатура       = ДанныеЗаполнения.Номенклатура;
			НоваяСтрока.Характеристика     = ДанныеЗаполнения.Характеристика;
			НоваяСтрока.КоличествоУпаковок = 1;
			НоваяСтрока.Количество         = 1;
			
		КонецЕсли;
		
		Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// ВАЖНО
	// При проверке этапов необходимо учитывать, что для одноэтапной спецификации 
	// лишние этапы еще не помечены на удаление (нужно использовать Справочники.РесурсныеСпецификации.ПолучитьЭтапОдногоЭтапногоПроцесса)
	
	// Дата окончания действия должна быть не меньше даты начала.
	Если ЗначениеЗаполнено(НачалоДействия) 
		И ЗначениеЗаполнено(КонецДействия) 
		И НачалоДействия > КонецДействия Тогда
		
		ТекстОшибки = НСтр("ru='Дата окончания действия должна быть не меньше даты начала действия.';uk='Дата закінчення дії повинна бути не менше дати початку дії.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "КонецДействия",, Отказ);
			
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
		Справочники.РесурсныеСпецификации.ПроверитьЗацикливаниеСпецификаций(ЭтотОбъект, МатериалыИУслуги, ВыходныеИзделия, Отказ);
	КонецЕсли; 
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.ДоляСтоимости");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.СтатьяКалькуляции");
	
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Номенклатура");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.ИсточникПолученияПолуфабриката");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.КоличествоУпаковок");
	МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.СтатьяКалькуляции");
	
	МассивНепроверяемыхРеквизитов.Добавить("Трудозатраты.СтатьяКалькуляции");
	
	Если Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия");
		МассивНепроверяемыхРеквизитов.Добавить("МатериалыИУслуги.Характеристика");
	КонецЕсли;
	
	ПроверитьЗаполнениеМатериалов(Отказ);
	ПроверитьЗаполнениеВозвратныхОтходов(Отказ);
	ПроверитьЗаполнениеТрудозатрат(Отказ);
	
	ПроверитьДействующуюСпецификацию(МассивНепроверяемыхРеквизитов, Отказ);
	
	ПроверитьВыборЭтапов("ВыходныеИзделия",  НСтр("ru='Выходные изделия';uk='Вихідні вироби'"),   "ЭтапРедактирование", Отказ);
	ПроверитьВыборЭтапов("ВозвратныеОтходы", НСтр("ru='Возвратные отходы';uk='Зворотні відходи'"),  "ЭтапРедактирование", Отказ);
	ПроверитьВыборЭтапов("МатериалыИУслуги", НСтр("ru='Материалы и работы';uk='Матеріали та роботи'"), "ЭтапРедактирование", Отказ);
	ПроверитьВыборЭтапов("Трудозатраты",     НСтр("ru='Трудозатраты';uk='Трудовитрати'"),       "ЭтапРедактирование", Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если НЕ ЭтоГруппа Тогда
		
		Если ПометкаУдаления Тогда
			Статус = Перечисления.СтатусыСпецификаций.Закрыта;
			ОчиститьВыборЭтапов(ВыходныеИзделия);
			ОчиститьВыборЭтапов(ВозвратныеОтходы);
			ОчиститьВыборЭтапов(МатериалыИУслуги);
			ОчиститьВыборЭтапов(Трудозатраты);
		КонецЕсли;
		
		Если Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
			УбратьПризнакОсновнойСпецификации();
		КонецЕсли; 
		
		УдалитьЭтапыНеОтносящиесяКЭтапуОдногоЭтапногоПроцесса();
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьПривязкуЭтапов();
		
		Если Статус = Перечисления.СтатусыСпецификаций.Действует И НЕ ЭтоНовый() Тогда
			Справочники.ЭтапыПроизводства.РассчитатьДнейДоОкончанияПроизводства(Ссылка);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
		ОбновитьТребуетсяСправочноеУказаниеСерий();
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ЭтоГруппа Тогда
		Возврат
	КонецЕсли; 
		
	Ответственный = Пользователи.ТекущийПользователь();
	Статус = Перечисления.СтатусыСпецификаций.ВРазработке;
	
	НачалоДействия = '00010101';
	КонецДействия  = '00010101';
	
	// Очистим связь с этапами
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ВозвратныеОтходы");
	СписокТЧ.Добавить("МатериалыИУслуги");
	СписокТЧ.Добавить("Трудозатраты");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		Для каждого ДанныеСтроки Из ЭтотОбъект[ИмяТЧ] Цикл
			ДанныеСтроки.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
			ДанныеСтроки.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

Процедура ПроверитьДействующуюСпецификацию(МассивНепроверяемыхРеквизитов, Отказ)

	Если Статус <> Перечисления.СтатусыСпецификаций.Действует ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеВыходныхИзделий(Отказ);
	
	ПроверитьВыбранныеСвойстваВАвтовыбореМатериаловИНастройкеПотребления(Отказ);
	
	СписокСтрок = МатериалыИУслуги.НайтиСтроки(Новый Структура("СпособАвтовыбораХарактеристики", Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ));
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
	ПараметрыПроверки.СписокСтрок = СписокСтрок;
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	СтруктураПроверок = Новый Структура("
		|СтатусСпецификации,
		|СоответствиеСпецификации,
		|ЗаполнениеСпецификации,
		|ПроизводствоНаСтороне,
		|КратностьПроизводимогоКоличества,
		|ЗаполнениеВнутреннихПолуфабрикатов");
		
	ПараметрыПроверкиВнутреннихПолуфабрикатов = УправлениеДаннымиОбИзделиях.ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(ЭтотОбъект);
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("СтруктураПроверок", СтруктураПроверок);
	ПараметрыПроверки.Вставить("ПараметрыПроверкиВнутреннихПолуфабрикатов", ПараметрыПроверкиВнутреннихПолуфабрикатов);

	УправлениеДаннымиОбИзделиях.ПроверитьСпецификацииПолуфабрикатов(ЭтотОбъект, МатериалыИУслуги, ПараметрыПроверки, Отказ);
	
	Если МногоэтапныйПроизводственныйПроцесс ИЛИ ДополнительныеСвойства.Свойство("ПроверитьЭтапы") Тогда
		ПроверитьРеквизитыЭтапов(Отказ);
		ПроверитьПорядокЭтапов(Отказ);
		ПроверитьЗаполнениеСпецификацииПоРеквизитамЭтапов(Отказ);
	КонецЕсли;
	
	ПроверитьМаршрутныеКарты(Отказ);
	
КонецПроцедуры

Процедура ПроверитьРеквизитыЭтапов(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Владелец = &Спецификация
	|	И НЕ ЭтапыПроизводства.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Спецификация", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭтапОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭтапОбъект.ПроверитьЗаполнениеРеквизитов(Истина,,Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПорядокЭтапов(Отказ)

	СтруктураСообщений = Новый Структура;
	СтруктураСообщений.Вставить("НесколькоПервыхОпераций",    НСтр("ru='Не может быть несколько первых этапов.';uk='Не може бути кілька перших етапів.'"));
	
	СтруктураСообщений.Вставить("НетПервойОперации",    НСтр("ru='Отсутствует первый этап.';uk='Відсутній перший етап.'"));
	СтруктураСообщений.Вставить("НетПоследнейОперации", НСтр("ru='Отсутствует последний этап.';uk='Відсутній останній етап.'"));
	СтруктураСообщений.Вставить("НетСледующейОперации", НСтр("ru='Этап ""%1"" ссылается на несуществующий этап.';uk='Етап ""%1"" посилається на неіснуючий етап.'"));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяСправочникаОпераций",     "ЭтапыПроизводства");
	СтруктураПараметров.Вставить("ПолеНомерОперации",          "НомерЭтапа");
	СтруктураПараметров.Вставить("ПолеНомерСледующейОперации", "НомерСледующегоЭтапа");
	
	РезультатПроверки = УправлениеДаннымиОбИзделиях.ПоследовательностьОперацийПравильная(Ссылка, СтруктураПараметров, СтруктураСообщений, Отказ);
	
КонецПроцедуры

Процедура ПроверитьВыборЭтапов(ИмяТаблицы, ПредставлениеТаблицы, РеквизитЭтап, Отказ)

	ШаблонСообщения = НСтр("ru='Не допускается выбор этапов помеченных на удаление (список ""%1"", строка %2).';uk='Не допускається вибір етапів помічених на вилучення (список ""%1"", рядок %2).'");
	Для каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТаблицы] Цикл
		Если СтрокаТаблицы[РеквизитЭтап].Пустая() ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы[РеквизитЭтап], "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставлениеТаблицы, Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, СтрокаТаблицы.НомерСтроки, РеквизитЭтап),, Отказ); 						
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВыходныхИзделий(Отказ)
	
	ШаблонСообщенияИзделие       = НСтр("ru='Не введено ни одной строки в список ""Продукция""';uk='Не введено жодного рядка в список ""Продукція""'");
	ШаблонСообщенияПовторИзделия = НСтр("ru='Выходное изделие ""%1"" уже описано в спецификации (см. список ""Выходные изделия"", строка %2). Дублирование выходных изделий в рамках одной спецификации не допускается.';uk='Вихідний виріб ""%1"" вже описано в специфікації (див. список ""Вихідні вироби"", рядок %2). Дублювання вихідних виробів в рамках однієї специфікації не допускається.'");
	ШаблонСообщенияДоляСтоимости = НСтр("ru='Не заполнена колонка ""Доля стоимости"" в строке %1 списка ""Продукция""';uk='Не заповнена колонка ""Частка вартості"" в рядку %1 списку ""Продукція""'");
	
	Если ВыходныеИзделия.Количество() = 0 Тогда
		
		// Должно быть указано изделие
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонСообщенияИзделие, ЭтотОбъект, "ВыходныеИзделия",, Отказ); 
		
	ИначеЕсли ВыходныеИзделия.Количество() > 1 Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		
		ТаблицаИзделий = Новый ТаблицаЗначений;
		ТаблицаИзделий.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаИзделий.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаИзделий.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
		
		Для Каждого СтрокаТаблицы Из ВыходныеИзделия Цикл
			
			СтруктураПоиска.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтруктураПоиска.Характеристика = СтрокаТаблицы.Характеристика;
			
			// Дублирование выходных изделий в рамках одной спецификации не допускается
			НайденныеИзделия = ТаблицаИзделий.НайтиСтроки(СтруктураПоиска);
			Если НайденныеИзделия.ВГраница() <> -1 Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПовторИзделия,
					НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
					Формат(НайденныеИзделия[0].НомерСтроки, "ЧГ="));
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"ВыходныеИзделия",
					СтрокаТаблицы.НомерСтроки,
					"Номенклатура");
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					Поле,,
					Отказ);
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТаблицаИзделий.Добавить(), СтрокаТаблицы);
			
			// Если указано более двух изделий, то должна быть задана доля стоимости
			Если СтрокаТаблицы.ДоляСтоимости = 0 Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияДоляСтоимости, 
					Формат(СтрокаТаблицы.НомерСтроки, "ЧГ="));
					
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"ВыходныеИзделия", 
					СтрокаТаблицы.НомерСтроки, 
					"ДоляСтоимости");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект, 
					Поле,, 
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеМатериалов(Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	МатериалыИУслуги.АлгоритмРасчетаКоличества КАК АлгоритмРасчетаКоличества,
	|	МатериалыИУслуги.СпособАвтовыбораНоменклатуры КАК СпособАвтовыбораНоменклатуры,
	|	МатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок,
	|	МатериалыИУслуги.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	МатериалыИУслуги.СтатьяКалькуляции КАК СтатьяКалькуляции
	|ПОМЕСТИТЬ ВТМатериалыИУслуги
	|ИЗ
	|	&МатериалыИУслуги КАК МатериалыИУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки КАК НомерСтроки,
	|	МатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	МатериалыИУслуги.АлгоритмРасчетаКоличества КАК АлгоритмРасчетаКоличества,
	|	МатериалыИУслуги.СпособАвтовыбораНоменклатуры КАК СпособАвтовыбораНоменклатуры,
	|	МатериалыИУслуги.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	МатериалыИУслуги.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	МатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	ВТМатериалыИУслуги КАК МатериалыИУслуги";
	
	Колонки = "НомерСтроки, Номенклатура, АлгоритмРасчетаКоличества, СпособАвтовыбораНоменклатуры, 
		|КоличествоУпаковок, ПроизводитсяВПроцессе, СтатьяКалькуляции";
	
	Запрос.УстановитьПараметр("МатериалыИУслуги", МатериалыИУслуги.Выгрузить(, Колонки));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ШаблонСообщенияНоменклатура      = НСтр("ru='Не заполнена колонка ""Номенклатура"" в строке %1 списка ""Материалы и работы""';uk='Не заповнена колонка ""Номенклатура"" в рядку %1 списку ""Матеріали і роботи""'");
		ШаблонСообщенияКоличество        = НСтр("ru='Не заполнена колонка ""Количество"" в строке %1 списка ""Материалы и работы""';uk='Не заповнена колонка ""Кількість"" в рядку %1 списку ""Матеріали і роботи""'");
		ШаблонСообщенияСтатьяКалькуляции = НСтр("ru='Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Материалы и работы""';uk='Не заповнена колонка ""Стаття калькуляції"" в рядку %1 списку ""Матеріали і роботи""'");
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Номенклатура.Пустая()
				И Выборка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщенияНоменклатура, 
				Формат(Выборка.НомерСтроки, "ЧГ="));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
			КонецЕсли;
			
			// Для действующией спецификации
			Если Статус = Перечисления.СтатусыСпецификаций.Действует Тогда
				
				Если Выборка.КоличествоУпаковок = 0
					И ПустаяСтрока(Выборка.АлгоритмРасчетаКоличества) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияКоличество, 
					Формат(Выборка.НомерСтроки, "ЧГ="));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "КоличествоУпаковок");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
				КонецЕсли;
				
				Если Не Выборка.ПроизводитсяВПроцессе
					И Не ЗначениеЗаполнено(Выборка.СтатьяКалькуляции) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияСтатьяКалькуляции, 
					Формат(Выборка.НомерСтроки, "ЧГ="));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "СтатьяКалькуляции");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВозвратныхОтходов(Отказ)
	
	Если Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщенияСтатьяКалькуляции = НСтр("ru='Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Возвратные отходы""';uk='Не заповнена колонка ""Стаття калькуляції"" в рядку %1 списку ""Зворотні відходи""'");
	
	НайденныеСтроки = ВозвратныеОтходы.НайтиСтроки(Новый Структура("СтатьяКалькуляции", Справочники.СтатьиКалькуляции.ПустаяСсылка()));
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияСтатьяКалькуляции, 
			Формат(Строка.НомерСтроки, "ЧГ="));
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", Строка.НомерСтроки, "СтатьяКалькуляции");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТрудозатрат(Отказ)
	
	Если Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщенияСтатьяКалькуляции = НСтр("ru='Не заполнена колонка ""Статья калькуляции"" в строке %1 списка ""Трудозатраты""';uk='Не заповнена колонка ""Стаття калькуляції"" в рядку %1 списку ""Трудовитрати""'");
	
	НайденныеСтроки = Трудозатраты.НайтиСтроки(Новый Структура("СтатьяКалькуляции", Справочники.СтатьиКалькуляции.ПустаяСсылка()));
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщенияСтатьяКалькуляции, 
			Формат(Строка.НомерСтроки, "ЧГ="));
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Трудозатраты", Строка.НомерСтроки, "СтатьяКалькуляции");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьМаршрутныеКарты(Отказ)

	//++ НЕ УТКА
	
	Если МногоэтапныйПроизводственныйПроцесс Тогда
		
		ШаблонСообщения = НСтр("ru='В этапе ""%1"" необходимо указать действующую маршрутную карту.';uk='У етапі ""%1"" необхідно зазначити діючу маршрутну карту.'");
		ПутьКДанным = Неопределено;
		ЭтапОдногоЭтапногоПроцесса = Неопределено;
		
	Иначе
		
		ШаблонСообщения = НСтр("ru='Необходимо указать действующую маршрутную карту.';uk='Необхідно зазначити діючу маршрутну карту.'");
		ПутьКДанным = "ПроизводственныйПроцесс";
		ЭтапОдногоЭтапногоПроцесса = Справочники.РесурсныеСпецификации.ПолучитьЭтапОдногоЭтапногоПроцесса(Ссылка);
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводства.Ссылка                            КАК Ссылка,
	|	ЭтапыПроизводства.Наименование                      КАК Наименование,
	|	ЭтапыПроизводства.МаршрутнаяКарта                   КАК МаршрутнаяКарта,
	|	ЭтапыПроизводства.МаршрутнаяКарта.Статус            КАК МаршрутнаяКартаСтатус,
	|	ЭтапыПроизводства.МаршрутнаяКарта.НачалоДействия    КАК МаршрутнаяКартаНачалоДействия,
	|	ЭтапыПроизводства.МаршрутнаяКарта.КонецДействия     КАК МаршрутнаяКартаКонецДействия
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО (ЭтапыПроизводства.Владелец = РесурсныеСпецификации.Ссылка)
	|			И (НЕ ЭтапыПроизводства.ПометкаУдаления)
	|			И (ЭтапыПроизводства.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка))
	|			И (&ЭтапОдногоЭтапногоПроцесса = Неопределено ИЛИ ЭтапыПроизводства.Ссылка = &ЭтапОдногоЭтапногоПроцесса)
	|ГДЕ
	|	РесурсныеСпецификации.Ссылка = &Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводства.НомерЭтапа";
	
	Запрос.УстановитьПараметр("Спецификация", Ссылка);
	Запрос.УстановитьПараметр("ЭтапОдногоЭтапногоПроцесса", ЭтапОдногоЭтапногоПроцесса);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.МаршрутнаяКартаСтатус <> Перечисления.СтатусыМаршрутныхКарт.Действует
			
			// Начало действия маршрутной карты должно быть 
			// не позже чем конец действия спецификации
			ИЛИ Выборка.МаршрутнаяКартаНачалоДействия <> '000101010000'
				И КонецДействия <> '000101010000'
				И Выборка.МаршрутнаяКартаНачалоДействия > КонецДействия
				
			// Конец действия маршрутной карты должен быть 
			// не раньше чем начало действия спецификации
			ИЛИ Выборка.МаршрутнаяКартаКонецДействия <> '000101010000'
				И НачалоДействия <> '000101010000'
				И Выборка.МаршрутнаяКартаКонецДействия <= НачалоДействия Тогда 
				
			Если МногоэтапныйПроизводственныйПроцесс Тогда
				КлючДанных = Выборка.Ссылка;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СокрЛП(Выборка.Наименование));
			Иначе
				КлючДанных  = Неопределено;
				ТекстСообщения = ШаблонСообщения;
			КонецЕсли; 
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных, "МаршрутнаяКарта", ПутьКДанным, Отказ);
			
		КонецЕсли;
	КонецЦикла;
	
	//-- НЕ УТКА
	
	Возврат; // обработчик пустой
	
КонецПроцедуры

Процедура ПроверитьВыбранныеСвойстваВАвтовыбореМатериаловИНастройкеПотребления(Отказ)

	//++ НЕ УТКА
	
	Если ВыходныеИзделия.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(ВыходныеИзделия[0].Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = ВыходныеИзделия[0].Номенклатура;
	
	ВидИзделий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	СписокВсехДоступныхСвойств = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляАвтоподбора(ВидИзделий);
	
	// Проверим, что свойство в котором указывается материал есть в продукции
	ШаблонСообщения = НСтр("ru='В настройке автовыбора материала определено, что материал указывается в свойстве характеристики продукции ""%1"", но это свойство не входит в состав свойств основного изделия (список ""Материалы и работы"", строка %2).';uk='У настройці автовибору матеріалу визначено, що матеріал зазначається у властивості характеристики продукції ""%1"", але ця властивість не входить до складу властивостей основного виробу (список ""Матеріали і роботи"", рядок %2).'");
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если СтрокаМатериал.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.ЗадаетсяВСвойствеПродукции 
			И ЗначениеЗаполнено(СтрокаМатериал.СвойствоСодержащееНоменклатуру) 
			И СписокВсехДоступныхСвойств.Найти(СтрокаМатериал.СвойствоСодержащееНоменклатуру, "Свойство") = Неопределено Тогда
			
			ЗаголовокСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаМатериал.СвойствоСодержащееНоменклатуру, "Заголовок");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, 
									ЗаголовокСвойства,
									Формат(СтрокаМатериал.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
	ПроверитьНастройкиПотребления(СписокВсехДоступныхСвойств, Отказ);
	
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ПроверитьНастройкиПотребления(СписокВсехДоступныхСвойств, Отказ)

	ШаблонСообщения = НСтр("ru='В настройке потребления указано свойство ""%1"", которое не входит в состав свойств основного изделия (список ""Материалы и работы"", строка %2).';uk='У настройці споживання зазначено властивість ""%1"", яка не входить до складу властивостей основного виробу (список ""Матеріали і роботи"", рядок %2).'");
	Для каждого СтрокаМатериал Из МатериалыИУслуги Цикл
		Если НЕ СтрокаМатериал.ОтборСвойство.Пустая()
			И СписокВсехДоступныхСвойств.Найти(СтрокаМатериал.ОтборСвойство, "Свойство") = Неопределено Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения, 
									СтрокаМатериал.ОтборСвойство,
									Формат(СтрокаМатериал.НомерСтроки, "ЧГ="));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", СтрокаМатериал.НомерСтроки, "Номенклатура");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область Прочее

// Если у спецификации производственный процесс одноэтапный, то лишние этапы должны быть помечены на удаление.
//
Процедура УдалитьЭтапыНеОтносящиесяКЭтапуОдногоЭтапногоПроцесса()

	Если МногоэтапныйПроизводственныйПроцесс Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		СсылкаНаОбъект = ПолучитьСсылкуНового();
	Иначе
		СсылкаНаОбъект = Ссылка;
	КонецЕсли;
	
	ЭтапОдногоЭтапногоПроцесса = Справочники.РесурсныеСпецификации.ПолучитьЭтапОдногоЭтапногоПроцесса(СсылкаНаОбъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Этапы.Ссылка
	               |ИЗ
	               |	Справочник.ЭтапыПроизводства КАК Этапы
	               |ГДЕ
	               |	НЕ Этапы.ПометкаУдаления
	               |	И Этапы.Владелец = &Спецификация
				   |	И Этапы.Ссылка <> &ЭтапОдногоЭтапногоПроцесса
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Этапы.Ссылка";
	
	Запрос.УстановитьПараметр("Спецификация", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ЭтапОдногоЭтапногоПроцесса", ЭтапОдногоЭтапногоПроцесса);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭтапОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭтапОбъект.ДополнительныеСвойства.Вставить("РазрешитьЗапись");
		ЭтапОбъект.УстановитьПометкуУдаления(Истина);
		
		ОчиститьСсылкуНаВыбранныйЭтап(ВыходныеИзделия,  Выборка.Ссылка);
		ОчиститьСсылкуНаВыбранныйЭтап(ВозвратныеОтходы, Выборка.Ссылка);
		ОчиститьСсылкуНаВыбранныйЭтап(МатериалыИУслуги, Выборка.Ссылка);
		ОчиститьСсылкуНаВыбранныйЭтап(Трудозатраты,     Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьВыборЭтапов(ТабличнаяЧасть)

	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		СтрокаТаблицы.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		СтрокаТаблицы.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОчиститьСсылкуНаВыбранныйЭтап(ТабличнаяЧасть, ЭтапСсылка)

	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если СтрокаТаблицы.Этап = ЭтапСсылка Тогда
			СтрокаТаблицы.Этап = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		КонецЕсли; 
		Если СтрокаТаблицы.ЭтапРедактирование = ЭтапСсылка Тогда
			СтрокаТаблицы.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Обновляет значение реквизита Этап в табличных частях
//  - если реквизит ЭтапРедактирование не пустой то подставляет значение из него
//  - если реквизит ЭтапРедактирование пустой то
//		1. для изделий подставляет последний этап
//		2. для материалов подставляет первый этап
//
Процедура ОбновитьПривязкуЭтапов()
	
	НеобходимоВычислитьЭтапИзделий = (ВыходныеИзделия.Найти(Справочники.ЭтапыПроизводства.ПустаяСсылка(), "ЭтапРедактирование") <> Неопределено);
	НеобходимоВычислитьЭтапОтходов = (ВозвратныеОтходы.Найти(Справочники.ЭтапыПроизводства.ПустаяСсылка(), "ЭтапРедактирование") <> Неопределено);
	НеобходимоВычислитьЭтапМатериалов = (МатериалыИУслуги.Найти(Справочники.ЭтапыПроизводства.ПустаяСсылка(), "ЭтапРедактирование") <> Неопределено);
	НеобходимоВычислитьЭтапТрудозатрат = (Трудозатраты.Найти(Справочники.ЭтапыПроизводства.ПустаяСсылка(), "ЭтапРедактирование") <> Неопределено);
	
	КоличествоПоследнихЭтапов = 0;
	
	Если НеобходимоВычислитьЭтапИзделий 
		ИЛИ НеобходимоВычислитьЭтапОтходов
		ИЛИ НеобходимоВычислитьЭтапМатериалов 
		ИЛИ НеобходимоВычислитьЭтапТрудозатрат Тогда
		
		// Получим первый и последний этапы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроизводства.Ссылка,
		|	ЭтапыПроизводства.НомерЭтапа,
		|	ЭтапыПроизводства.НомерСледующегоЭтапа
		|ИЗ
		|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
		|ГДЕ
		|	(ЭтапыПроизводства.НомерЭтапа = 1
		|			ИЛИ ЭтапыПроизводства.НомерСледующегоЭтапа = 0)
		|	И ЭтапыПроизводства.Владелец = &Владелец
		|	И (НЕ ЭтапыПроизводства.ПометкаУдаления)";
					   
		Если ЭтоНовый() И НЕ МногоэтапныйПроизводственныйПроцесс Тогда
			// При записи новой одноэтапной спецификации устанавлияется ссылка нового
			СсылкаНаОбъект = ПолучитьСсылкуНового();
		Иначе
			СсылкаНаОбъект = Ссылка;
		КонецЕсли;
		Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		ПервыйЭтап    = Неопределено;
		ПоследнийЭтап = Неопределено;
		Пока Выборка.Следующий() Цикл
			Если Выборка.НомерЭтапа = 1 Тогда
				ПервыйЭтап = Выборка.Ссылка;
			КонецЕсли; 
			Если Выборка.НомерСледующегоЭтапа = 0 Тогда
				ПоследнийЭтап = Выборка.Ссылка;
				КоличествоПоследнихЭтапов = КоличествоПоследнихЭтапов + 1;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ВозвратныеОтходы");
	СписокТЧ.Добавить("МатериалыИУслуги");
	СписокТЧ.Добавить("Трудозатраты");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		Для каждого СтрокаТЧ Из ЭтотОбъект[ИмяТЧ] Цикл
			Если СтрокаТЧ.ЭтапРедактирование.Пустая() Тогда
				Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ВозвратныеОтходы" Тогда
					СтрокаТЧ.Этап = ПоследнийЭтап;
				Иначе
					СтрокаТЧ.Этап = ПервыйЭтап;
				КонецЕсли;
			Иначе
				СтрокаТЧ.Этап = СтрокаТЧ.ЭтапРедактирование;
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура УбратьПризнакОсновнойСпецификации()

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСпецификации.Номенклатура,
	|	ОсновныеСпецификации.Характеристика,
	|	ОсновныеСпецификации.Подразделение
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
	|ГДЕ
	|	ОсновныеСпецификации.Спецификация = &Спецификация";
	
	Запрос.УстановитьПараметр("Спецификация", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаписьОсновная = РегистрыСведений.ОсновныеСпецификации.СоздатьМенеджерЗаписи();
		ЗаписьОсновная.Номенклатура   = Выборка.Номенклатура;
		ЗаписьОсновная.Характеристика = Выборка.Характеристика;
		ЗаписьОсновная.Подразделение  = Выборка.Подразделение;
		ЗаписьОсновная.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ОбновитьТребуетсяСправочноеУказаниеСерий()

	НаборЗаписей = РегистрыСведений.ТребуетсяСправочноеУказаниеСерий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Спецификация.Установить(Ссылка);
	
	// ВыходныеИзделия
	СтруктураПоиска = Новый Структура("ТребуетсяУказыватьСерии", Истина);
	ТаблицаНоменклатура = ВыходныеИзделия.Выгрузить(СтруктураПоиска, "Номенклатура");
 	СписокНоменклатуры = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаНоменклатура.ВыгрузитьКолонку("Номенклатура"));
	Для каждого НоменклатураСтроки Из СписокНоменклатуры Цикл
		Если НЕ ЗначениеЗаполнено(НоменклатураСтроки) Тогда
			Продолжить;
		КонецЕсли;
		СтроНоваяЗапись = НаборЗаписей.Добавить();
		СтроНоваяЗапись.Спецификация = Ссылка;
		СтроНоваяЗапись.Номенклатура = НоменклатураСтроки;
		СтроНоваяЗапись.ВидСтрокиСпецификации = Перечисления.ВидыСтрокДереваСпецификаций.ВыходноеИзделие;
	КонецЦикла; 
	
	// МатериалыИУслуги
	СтруктураПоиска = Новый Структура("ТребуетсяУказыватьСерии", Истина);
	ТаблицаНоменклатура = МатериалыИУслуги.Выгрузить(СтруктураПоиска, "Номенклатура");
 	СписокНоменклатуры = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаНоменклатура.ВыгрузитьКолонку("Номенклатура"));
	Для каждого НоменклатураСтроки Из СписокНоменклатуры Цикл
		Если НЕ ЗначениеЗаполнено(НоменклатураСтроки) Тогда
			Продолжить;
		КонецЕсли;
		СтроНоваяЗапись = НаборЗаписей.Добавить();
		СтроНоваяЗапись.Спецификация = Ссылка;
		СтроНоваяЗапись.Номенклатура = НоменклатураСтроки;
		СтроНоваяЗапись.ВидСтрокиСпецификации = Перечисления.ВидыСтрокДереваСпецификаций.Материал;
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

//-- НЕ УТКА

// Проверяет заполнение реквизитов спецификации на основании реквизитов этапов
// Для одноэтапной спецификации предусмотрена передача реквизитов этапа через параметр
// Сейчас функция содержит проверки характерные только для этапов производимых на стороне
//
// Параметры:
//  Отказ - Булево - истина, если найдены ошибки
//  РеквизитыЭтапа - Структура - реквизиты этапа
//
// Возвращаемое значение:
//   Булево   - Истина, если найдены ошибки заполнения
//
Функция ПроверитьЗаполнениеСпецификацииПоРеквизитамЭтапов(Отказ, РеквизитыЭтапа = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	
	ИспользоватьПроизводствоНаСтороне = Константы.ИспользоватьПроизводствоНаСтороне.Получить();
	
	Если Не ИспользоватьПроизводствоНаСтороне Тогда
		
		Возврат ЕстьОшибки;
		
	КонецЕсли;
	
	ТаблицаМатериалыИУслуги = МатериалыИУслуги.Выгрузить(,
		"НомерСтроки, 
		|Номенклатура, 
		|Характеристика,
		|ЭтапРедактирование, 
		|ПроизводитсяВПроцессе");
		
	ТаблицаМатериалыИУслуги.Индексы.Добавить("ЭтапРедактирование");
	ТаблицаМатериалыИУслуги.Индексы.Добавить("ЭтапРедактирование, Номенклатура");
	ТаблицаМатериалыИУслуги.Индексы.Добавить("ЭтапРедактирование, Номенклатура, Характеристика");
	
	ТаблицаВыходныеИзделия = ВыходныеИзделия.Выгрузить(,
		"НомерСтроки, 
		|Номенклатура, 
		|Характеристика,
		|ЭтапРедактирование");
		
	ТаблицаВыходныеИзделия.Индексы.Добавить("ЭтапРедактирование");
	
	ТаблицаВозвратныеОтходы = ВозвратныеОтходы.Выгрузить(,
		"НомерСтроки, 
		|Номенклатура, 
		|Характеристика,
		|ЭтапРедактирование");
		
	ТаблицаВозвратныеОтходы.Индексы.Добавить("ЭтапРедактирование");
	
	Запрос = Новый Запрос;
	
	Если РеквизитыЭтапа = Неопределено Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МатериалыИУслуги.НомерСтроки                                                   КАК НомерСтроки,
			|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура)            КАК Номенклатура,
			|	ВЫРАЗИТЬ(МатериалыИУслуги.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства) КАК ЭтапРедактирование,
			|	МатериалыИУслуги.ПроизводитсяВПроцессе                                         КАК ПроизводитсяВПроцессе
			|ПОМЕСТИТЬ ВТТаблица
			|ИЗ
			|	&МатериалыИУслуги КАК МатериалыИУслуги
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапыПроизводства.Ссылка                КАК Этап,
			|	ЭтапыПроизводства.Наименование          КАК НаименованиеЭтапа,
			|	ЭтапыПроизводства.НомерЭтапа            КАК НомерЭтапа,
			|	ЭтапыПроизводства.НомерСледующегоЭтапа  КАК НомерСледующегоЭтапа,
			|	ЭтапыПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
			|ПОМЕСТИТЬ ВТЭтапы
			|ИЗ
			|	Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
			|ГДЕ
			|	ЭтапыПроизводства.Владелец = &Спецификация
			|	И НЕ ЭтапыПроизводства.ПометкаУдаления
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МатериалыИУслуги.НомерСтроки                КАК НомерСтроки,
			|	МатериалыИУслуги.Номенклатура               КАК Номенклатура,
			|	ЕСТЬNULL(Этапы.ПроизводствоНаСтороне, ЛОЖЬ) КАК ПроизводствоНаСтороне,
			|	МатериалыИУслуги.ПроизводитсяВПроцессе      КАК ПроизводитсяВПроцессе
			|ПОМЕСТИТЬ ВТМатериалыИУслуги
			|ИЗ
			|	ВТТаблица КАК МатериалыИУслуги
			|		ЛЕВОЕ СОЕДИНЕНИЕ 
			|			(
			|				ВЫБРАТЬ
			|					ЭтапыПроизводства.Этап                  КАК Этап,
			|					ЭтапыПроизводства.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
			|				ИЗ
			|					ВТЭтапы КАК ЭтапыПроизводства
			|			
			|				ОБЪЕДИНИТЬ ВСЕ
			|
			|				ВЫБРАТЬ
			|					ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка) КАК Этап,
			|					МАКСИМУМ(ЭтапыПроизводства.ПроизводствоНаСтороне)   КАК ПроизводствоНаСтороне
			|				ИЗ
			|					Справочник.ЭтапыПроизводства КАК ЭтапыПроизводства
			|				ГДЕ
			|					ЭтапыПроизводства.Владелец = &Спецификация
			|					И ЭтапыПроизводства.НомерЭтапа = 1
			|					И НЕ ЭтапыПроизводства.ПометкаУдаления
			|
			|			) КАК Этапы
			|			ПО МатериалыИУслуги.ЭтапРедактирование = Этапы.Этап
			|;
			|";
			
		Запрос.УстановитьПараметр("Спецификация", Ссылка);
		Запрос.УстановитьПараметр("МатериалыИУслуги", ТаблицаМатериалыИУслуги);
		
	ИначеЕсли РеквизитыЭтапа.Свойство("ПроизводствоНаСтороне") И РеквизитыЭтапа.ПроизводствоНаСтороне Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка) КАК Этап,
			|	""""                                                КАК НаименованиеЭтапа,
			|	1                                                   КАК НомерЭтапа,
			|	0                                                   КАК НомерСледующегоЭтапа,
			|	ИСТИНА                                              КАК ПроизводствоНаСтороне
			|ПОМЕСТИТЬ ВТЭтапы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МатериалыИУслуги.НомерСтроки                                        КАК НомерСтроки,
			|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ИСТИНА                                                              КАК ПроизводствоНаСтороне,
			|	МатериалыИУслуги.ПроизводитсяВПроцессе                              КАК ПроизводитсяВПроцессе
			|ПОМЕСТИТЬ ВТМатериалыИУслуги
			|ИЗ
			|	&МатериалыИУслуги КАК МатериалыИУслуги
			|;
			|";
			
		Запрос.УстановитьПараметр("МатериалыИУслуги", ТаблицаМатериалыИУслуги);
		
	Иначе
		
		Возврат ЕстьОшибки;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +"
		|ВЫБРАТЬ
		|	Т.Этап                 КАК Этап,
		|	Т.НаименованиеЭтапа    КАК НаименованиеЭтапа,
		|	Т.НомерЭтапа           КАК НомерЭтапа,
		|	Т.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
		|ИЗ
		|	ВТЭтапы КАК Т
		|ГДЕ 
		|	Т.ПроизводствоНаСтороне
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТМатериалыИУслуги КАК Т
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|					И Т.ПроизводствоНаСтороне
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВТМатериалыИУслуги КАК Т
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Т.ПроизводитсяВПроцессе 
		|					И Т.ПроизводствоНаСтороне
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Результат.Количество();
	
	// Для этапов выполняемых на стороне должны быть описаны материалы и выходные изделия, 
	//		не должно быть одинаковой номенклатуры на входе-выходе одного этапа
	Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
		ШаблонТекстаПовторВыходныеИзделия  = НСтр("ru='Номенклатура ""%1"" не может присутствовать одновременно в выходных изделиях и в материалах (услугах).';uk='Номенклатура ""%1"" не може бути одночасно у вихідних виробах і матеріалах (послугах).'");
		ШаблонТекстаПовторВозвратныеОтходы = НСтр("ru='Номенклатура ""%1"" не может присутствовать одновременно в возвратных отходах и в материалах (услугах).';uk='Номенклатура ""%1"" не може бути одночасно в зворотних відходів і в матеріалах (послугах).'");
		
		Если МногоэтапныйПроизводственныйПроцесс Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ЭтапРедактирование");
			
			ПараметрыОтбораПоПустомуЭтапу = Новый Структура;
			ПараметрыОтбораПоПустомуЭтапу.Вставить("ЭтапРедактирование", Справочники.ЭтапыПроизводства.ПустаяСсылка());
			
			ШаблонТекстаНетСтрокВыходныеИзделия  = НСтр("ru='Для этапа %1, выполняемого переработчиком, не введено ни одной строки в список ""Выходные изделия""';uk='Для етапу %1, виконуваного переробником, не введено жодного рядка в список ""Вихідні вироби""'");
			ШаблонТекстаНетСтрокМатериалыИУслуги = НСтр("ru='Для этапа %1, выполняемого переработчиком, не введено ни одной строки в список ""Материалы и услуги""';uk='Для етапу %1, виконуваного переробником, не введено жодного рядка в список ""Матеріали та послуги""'");
			
			Выборка = Результат[КоличествоПакетов - 3].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ПараметрыОтбора.ЭтапРедактирование = Выборка.Этап;
				
				// Выходные изделия
				МассивСтрокВыходныеИзделия = ТаблицаВыходныеИзделия.НайтиСтроки(ПараметрыОтбора);
				
				Если Выборка.НомерСледующегоЭтапа = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						МассивСтрокВыходныеИзделия,
						ТаблицаВыходныеИзделия.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу));
						
				КонецЕсли;
				
				Если МассивСтрокВыходныеИзделия.ВГраница() = -1 Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаНетСтрокВыходныеИзделия, 
						Выборка.НаименованиеЭтапа);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						"ВыходныеИзделия",, 
						ЕстьОшибки); 
						
				Иначе
					
					Для Каждого Строка Из МассивСтрокВыходныеИзделия Цикл
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("ЭтапРедактирование", Выборка.Этап);
						СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
						
						Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
							СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
						КонецЕсли; 
						
						ЕстьДублиМатериалыИУслуги = ТаблицаМатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1;
						
						Если НЕ ЕстьДублиМатериалыИУслуги И Выборка.НомерЭтапа = 1 Тогда
							
							СтруктураПоиска.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
							
							ЕстьДублиМатериалыИУслуги = ТаблицаМатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1;
							
						КонецЕсли;
						
						Если ЕстьДублиМатериалыИУслуги Тогда
						
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонТекстаПовторВыходныеИзделия, 
								НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Строка.Номенклатура, Строка.Характеристика));
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения, 
								ЭтотОбъект, 
								ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Строка.НомерСтроки, "Номенклатура"),,
								ЕстьОшибки);
							
						КонецЕсли;
						
					КонецЦикла; 
						
				КонецЕсли;
				
				// Возвратные отходы
				МассивСтрокВозвратныеОтходы = ТаблицаВозвратныеОтходы.НайтиСтроки(ПараметрыОтбора);
				
				Если Выборка.НомерСледующегоЭтапа = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						МассивСтрокВозвратныеОтходы,
						ТаблицаВозвратныеОтходы.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу));
						
				КонецЕсли;
				
				Для Каждого Строка Из МассивСтрокВозвратныеОтходы Цикл
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ЭтапРедактирование", Выборка.Этап);
					СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
					
					Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
						СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
					КонецЕсли; 
					
					ЕстьДублиМатериалыИУслуги = ТаблицаМатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1;
					
					Если НЕ ЕстьДублиМатериалыИУслуги И Выборка.НомерЭтапа = 1 Тогда
						
						СтруктураПоиска.ЭтапРедактирование = Справочники.ЭтапыПроизводства.ПустаяСсылка();
						
						ЕстьДублиМатериалыИУслуги = ТаблицаМатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1;
						
					КонецЕсли;
					
					Если ЕстьДублиМатериалыИУслуги Тогда
							
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонТекстаПовторВозвратныеОтходы, 
							НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Строка.Номенклатура, Строка.Характеристика));
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							ЭтотОбъект, 
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", Строка.НомерСтроки, "Номенклатура"),,
							ЕстьОшибки);
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Материалы и услуги
				Если ТаблицаМатериалыИУслуги.НайтиСтроки(ПараметрыОтбора).ВГраница() = -1
						И (Выборка.НомерЭтапа <> 1 
							ИЛИ Выборка.НомерЭтапа = 1 И ТаблицаМатериалыИУслуги.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу).ВГраница() = -1) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаНетСтрокМатериалыИУслуги, 
						Выборка.НаименованиеЭтапа);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						"МатериалыИУслуги",, 
						ЕстьОшибки);
						
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			// Выходные изделия
			Для Каждого Строка Из ВыходныеИзделия Цикл
				
				СтруктураПоиска = Новый Структура("Номенклатура", Строка.Номенклатура);
				Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
					СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
				КонецЕсли; 
				
				Если МатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1 Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаПовторВыходныеИзделия, 
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Строка.Номенклатура, Строка.Характеристика));
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Строка.НомерСтроки, "Номенклатура"),,
						ЕстьОшибки);
					
				КонецЕсли;
				
			КонецЦикла; 
			
			// Возвратные отходы
			Для каждого Строка Из ВозвратныеОтходы Цикл
				
				СтруктураПоиска = Новый Структура("Номенклатура", Строка.Номенклатура);
				Если ЗначениеЗаполнено(Строка.Характеристика) Тогда
					СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
				КонецЕсли; 
				
				Если МатериалыИУслуги.НайтиСтроки(СтруктураПоиска).ВГраница() <> -1 Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонТекстаПовторВозвратныеОтходы, 
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Строка.Номенклатура, Строка.Характеристика));
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвратныеОтходы", Строка.НомерСтроки, "Номенклатура"),,
						ЕстьОшибки);
						
				КонецЕсли;
				
			КонецЦикла;
			
			// Материалы и услуги
			Если ТаблицаМатериалыИУслуги.Количество() = 0 Тогда
				
				ШаблонТекста = НСтр("ru='Не введено ни одной строки в список ""Материалы и услуги""';uk='Не введено жодного рядка в список ""Матеріали і послуги""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ШаблонТекста, 
					ЭтотОбъект, 
					"МатериалыИУслуги",, 
					ЕстьОшибки); 
					
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	// В списке ""Материалы и работы"" не допускается указание работ для этапов, выполняемых переработчиком
	Если Не Результат[КоличествоПакетов - 2].Пустой() Тогда
		
		ШаблонТекста = НСтр("ru='В списке ""Материалы и работы"" не допускается указание работ для этапов, выполняемых переработчиком (см. строку %1).';uk='У списку ""Матеріали і роботи"" не допускається зазначення робіт для етапів, виконуваних переробником (див. рядок %1).'");
		
		Выборка = Результат[КоличествоПакетов - 2].Выбрать();
			
		Пока Выборка.Следующий() Цикл
			
			Поле           = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "Номенклатура");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				ЭтотОбъект, 
				Поле,, 
				ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// В списке ""Материалы и работы"" не допускается указание полуфабрикатов производимых в процессе для этапов, выполняемых переработчиком
	Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
		
		ШаблонТекста = НСтр("ru='В списке ""Материалы и работы"" не допускается указание полуфабрикатов производимых в процессе для этапов, выполняемых переработчиком (см. строку %1).';uk='У списку ""Матеріали і роботи"" не допускається зазначення напівфабрикатів, що виробляються в процесі етапів, виконуваних переробником (див. рядок %1).'");
		
		Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
		Пока Выборка.Следующий() Цикл
			
			Поле           = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "Номенклатура");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				ЭтотОбъект, 
				Поле,, 
				ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли