#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//++ НЕ УТКА
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Спецификация = Параметры.Спецификация;
	ЗаполнитьСписокЗаказов();

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//++ НЕ УТКА
	Если ИмяСобытия = "Запись_ЗаказНаПроизводство" И Источник <> "ПрименениеСпецификацииВЗаказах" Тогда
		ЗаполнитьСписокЗаказов();
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	//++ НЕ УТКА
	Если ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ВыборДействующихСпецификаций" Тогда
		ЗаменитьСпецификациюЗавершение(ВыбранноеЗначение);
	КонецЕсли; 
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗаказов

&НаКлиенте
Процедура СписокЗаказовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокЗаказов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Ключ,АктивироватьСтрокуПродукции", 
						ТекущиеДанные.Заказ, ТекущиеДанные.КодСтроки);
						
		ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыФормы); 
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаЗаменитьСпецификацию(Команда)
	
	//++ НЕ УТКА
	
	ВыбраныСтрокиПоКоторымПроизводствоНеЗапущено = Ложь;
	ИсключитьИзВыбораСпецификацию = Неопределено;
	
	ДанныеВыбранныхСтрок = Новый Массив;
	Для каждого ДанныеСтроки Из СписокЗаказов Цикл
		ИдентификаторСтроки = ДанныеСтроки.ПолучитьИдентификатор();
		Если Элементы.СписокЗаказов.ВыделенныеСтроки.Найти(ИдентификаторСтроки) = Неопределено Тогда
			ДанныеСтроки.Заменить = Ложь;
			Продолжить;
		КонецЕсли;
		ДанныеСтроки.Заменить = Истина;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Номенклатура",   ДанныеСтроки.Номенклатура);
		СтруктураДанных.Вставить("Характеристика", ДанныеСтроки.Характеристика);
		СтруктураДанных.Вставить("Подразделение",  ДанныеСтроки.Подразделение);
		ДанныеВыбранныхСтрок.Добавить(СтруктураДанных);
		
		Если НЕ ДанныеСтроки.ПроизводствоЗапущено Тогда
			ВыбраныСтрокиПоКоторымПроизводствоНеЗапущено = Истина;
		КонецЕсли;
		
		Если НЕ ДанныеСтроки.ТекущаяСпецификацияБольшеНеИспользуется Тогда
			// выбрана строка для которой используется текущая спецификация
			// поэтому запретим выбор текущей спецификации для замены
			ИсключитьИзВыбораСпецификацию = Спецификация;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбранныхСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходимо выбрать строки, в которых требуется выполнить замену.';uk='Необхідно вибрати рядки, в яких необхідно виконати заміну.'"));
		Возврат;
		
	ИначеЕсли НЕ ВыбраныСтрокиПоКоторымПроизводствоНеЗапущено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Замена спецификации допускается только для продукции и полуфабрикатов,
                                            |производство которых не запущено.'
                                            |;uk='Заміна специфікації допускається тільки для продукції та напівфабрикатів,
                                            |виробництво яких не запущено.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокИзделий", ДанныеВыбранныхСтрок);
	ПараметрыФормы.Вставить("ИсключитьИзВыбораСпецификацию", ИсключитьИзВыбораСпецификацию);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Выберите спецификацию, которая будет использоваться для выбранной продукции (полуфабрикатов)';uk='Виберіть специфікацію, яка буде використовуватися для вибраної продукції (напівфабрикатів)'"));
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ВыборДействующихСпецификаций", ПараметрыФормы, ЭтаФорма);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Оформление продукции, для которой уже запущено производство
	#Область ПроизводствоЗапущено
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.ПроизводствоЗапущено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(191, 97, 12));
	
	#КонецОбласти
	
	// Оформление продукции, для которой выполнена замена
	#Область ТекущаяСпецификацияБольшеНеИспользуется
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.ТекущаяСпецификацияБольшеНеИспользуется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	
	#КонецОбласти
	
	// Стандартное оформление номенклатуры
	#Область Номенклатура

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "СписокЗаказовНоменклатураЕдиницаИзмерения", 
                                                                   "СписокЗаказов.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "СписокЗаказовХарактеристика",
																		     "СписокЗаказов.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокЗаказовНазначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокЗаказов.Назначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<без назначения>';uk='<без призначення>'"));
	
	#КонецОбласти
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗаказов()

	СписокЗаказов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Номер,
	|	ВложенныйЗапрос.Дата,
	|	ВложенныйЗапрос.СостояниеГрафика,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ОкончаниеПроизводства,
	|	ВложенныйЗапрос.НачалоПроизводства,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.КодСтроки,
	|	ВложенныйЗапрос.ПроизводитсяВПроцессе,
	|	ВложенныйЗапрос.КлючСвязи,
	|	ВложенныйЗапрос.КлючСвязиПродукция
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПродукция.Ссылка КАК Заказ,
	|		ТаблицаПродукция.Ссылка.Номер КАК Номер,
	|		ТаблицаПродукция.Ссылка.Дата КАК Дата,
	|		ВЫБОР
	|			КОГДА ТаблицаПродукция.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|				ТОГДА """"
	|			КОГДА ТаблицаПродукция.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству)
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаПродукция.Ссылка.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан)
	|							ТОГДА &СостояниеГрафикаВРаботе
	|						КОГДА ТаблицаПродукция.Ссылка.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать)
	|							ТОГДА &СостояниеГрафикаПостроение
	|					КОНЕЦ
	|		КОНЕЦ КАК СостояниеГрафика,
	|		ТаблицаПродукция.Ссылка.Подразделение КАК Подразделение,
	|		ТаблицаПродукция.Номенклатура КАК Номенклатура,
	|		ТаблицаПродукция.Характеристика КАК Характеристика,
	|		ТаблицаПродукция.КоличествоУпаковок КАК Количество,
	|		ТаблицаПродукция.ДатаПотребности КАК ОкончаниеПроизводства,
	|		ТаблицаПродукция.НачатьНеРанее КАК НачалоПроизводства,
	|		ТаблицаПродукция.Назначение КАК Назначение,
	|		ТаблицаПродукция.НомерСтроки КАК НомерСтроки,
	|		ТаблицаПродукция.КодСтроки КАК КодСтроки,
	|		ЛОЖЬ КАК ПроизводитсяВПроцессе,
	|		ТаблицаПродукция.КлючСвязи КАК КлючСвязи,
	|		&ПустойКлючСвязи КАК КлючСвязиПродукция
	|	ИЗ
	|		Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|	ГДЕ
	|		ТаблицаПродукция.Спецификация = &Спецификация
	|		И ТаблицаПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|		И НЕ ТаблицаПродукция.Ссылка.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаМатериалыИУслуги.Ссылка,
	|		ТаблицаМатериалыИУслуги.Ссылка.Номер,
	|		ТаблицаМатериалыИУслуги.Ссылка.Дата,
	|		ВЫБОР
	|			КОГДА ТаблицаМатериалыИУслуги.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|				ТОГДА """"
	|			КОГДА ТаблицаМатериалыИУслуги.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству)
	|				ТОГДА ВЫБОР
	|						КОГДА ТаблицаМатериалыИУслуги.Ссылка.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан)
	|							ТОГДА &СостояниеГрафикаВРаботе
	|						КОГДА ТаблицаМатериалыИУслуги.Ссылка.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать)
	|							ТОГДА &СостояниеГрафикаПостроение
	|					КОНЕЦ
	|		КОНЕЦ,
	|		ТаблицаМатериалыИУслуги.Ссылка.Подразделение,
	|		ТаблицаМатериалыИУслуги.Номенклатура,
	|		ТаблицаМатериалыИУслуги.Характеристика,
	|		ТаблицаМатериалыИУслуги.КоличествоУпаковок,
	|		ТаблицаПродукция.ДатаПотребности,
	|		ТаблицаПродукция.НачатьНеРанее,
	|		ТаблицаПродукция.Назначение,
	|		ТаблицаПродукция.НомерСтроки,
	|		ТаблицаПродукция.КодСтроки,
	|		ИСТИНА,
	|		ТаблицаМатериалыИУслуги.КлючСвязи,
	|		ТаблицаМатериалыИУслуги.КлючСвязиПродукция
	|	ИЗ
	|		Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|			ПО (ТаблицаПродукция.КлючСвязи = ТаблицаМатериалыИУслуги.КлючСвязиПродукция)
	|				И (ТаблицаПродукция.Ссылка = ТаблицаМатериалыИУслуги.Ссылка)
	|	ГДЕ
	|		ТаблицаМатериалыИУслуги.ИсточникПолученияПолуфабриката = &Спецификация
	|		И ТаблицаМатериалыИУслуги.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|		И НЕ ТаблицаМатериалыИУслуги.Ссылка.ПометкаУдаления) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НачалоПроизводства,
	|	ВложенныйЗапрос.ОкончаниеПроизводства,
	|	ВложенныйЗапрос.Заказ";
	
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	Запрос.УстановитьПараметр("ПустойКлючСвязи", ПустойКлючСвязи);
	Запрос.УстановитьПараметр("СостояниеГрафикаВРаботе", НСтр("ru='В работе';uk='В роботі'"));
	Запрос.УстановитьПараметр("СостояниеГрафикаПостроение", НСтр("ru='Построение';uk='Побудова'"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер);
		ПредставлениеЗаказа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='№%1 от %2 (строка %3)';uk='№%1 від %2 (рядок %3)'"),
										НомерДокумента,
										Формат(Выборка.Дата, "ДЛФ=D"),
										Формат(Выборка.НомерСтроки, "ЧГ="));
										
		НоваяСтрока.ПредставлениеЗаказа = ПредставлениеЗаказа;
	КонецЦикла;

	ОпределитьПроизводствоЗапущено();
	
	СписокЗаказов.Сортировать("НачалоПроизводства,Заказ");
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПроизводствоЗапущено()
	
	ТаблицаСписокЗаказов = СписокЗаказов.Выгрузить();
	ТаблицаСписокЗаказов.Свернуть("Заказ,КодСтроки");
	ЗапущенныеЭтапы = ПланированиеПроизводства.ЭтапыПоКоторымЗапущеноПроизводство(ТаблицаСписокЗаказов);
	
	Для каждого ДанныеСтроки Из СписокЗаказов Цикл
		СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиПродукция", ДанныеСтроки.Заказ, ДанныеСтроки.КодСтроки);
  		СписокСтрок = ЗапущенныеЭтапы.НайтиСтроки(СтруктураПоиска);
		ДанныеСтроки.ПроизводствоЗапущено = (СписокСтрок.Количество() <> 0);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьСпецификациюЗавершение(НоваяСпецификация)

	ВыполнитьЗаменуВЗаказахНаСервере(НоваяСпецификация);
	
	Если ВсегоЗамен = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Необходимо выбрать строки, в которых требуется выполнить замену.';uk='Необхідно вибрати рядки, в яких необхідно виконати заміну.'"));
		Возврат;
		
	ИначеЕсли ВыполненоЗамен = ВсегоЗамен Тогда
		
		// Успешно заменили во всех заказах
		ТекстЗавершеннойОперации = НСтр("ru='Выполнена замена во всех выбранных строках';uk='Виконана заміна у всіх вибраних рядках'");
		ТекстПоясненияЗавершеннойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru='Изменено строк заказов: %1 из %2';uk='Змінено рядків замовлень: %1 з %2'"),
														Формат(ВыполненоЗамен, "ЧГ=0"),
														Формат(ВсегоЗамен, "ЧГ=0"));
														
		ПоказатьОповещениеПользователя(ТекстЗавершеннойОперации,, ТекстПоясненияЗавершеннойОперации);
		
		Оповестить("Запись_ЗаказНаПроизводство",, "ПрименениеСпецификацииВЗаказах");
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
		
	ИначеЕсли ВыполненоЗамен = 0 Тогда
		
		// Ни в одном заказе не смогли заменить
		ПоказатьПредупреждение(,НСтр("ru='Не удалось выполнить замену.';uk='Не вдалося виконати заміну.'"));
		Возврат;
		
	Иначе
		
		// В некоторых заказах не смогли заменить
		ТекстЗавершеннойОперации = НСтр("ru='Замена выполнена не во всех выбранных строках';uk='Заміна виконана не у всіх вибраних рядках'");
		ТекстПоясненияЗавершеннойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru='Изменено строк заказов: %1 из %2';uk='Змінено рядків замовлень: %1 з %2'"),
														Формат(ВыполненоЗамен, "ЧГ=0"),
														Формат(ВсегоЗамен, "ЧГ=0"));
														
		ПоказатьОповещениеПользователя(ТекстЗавершеннойОперации,, ТекстПоясненияЗавершеннойОперации);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Замена выполнена не во всех строках заказов (в %1 из %2).';uk='Заміна виконана не у всіх рядках замовлень (в %1 з %2).'"), 
										Формат(ВыполненоЗамен, "ЧГ=0"), 
										Формат(ВсегоЗамен, "ЧГ=0"));
										
		ПоказатьПредупреждение(, ТекстСообщения);
		Оповестить("Запись_ЗаказНаПроизводство",, "ПрименениеСпецификацииВЗаказах");
		ОповеститьОбИзменении(Тип("ДокументСсылка.ЗаказНаПроизводство"));
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаменуВЗаказахНаСервере(Знач НоваяСпецификация)

	// Определим для каких изделий подходит данная спецификация
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура,
	|	РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|ГДЕ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка = &Спецификация";
	
	Запрос.УстановитьПараметр("Спецификация", НоваяСпецификация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИзделияДляКоторыхПодходитСпецификация = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СписокХарактеристик = ИзделияДляКоторыхПодходитСпецификация.Получить(Выборка.Номенклатура);
		Если СписокХарактеристик = Неопределено Тогда
			СписокХарактеристик = Новый Массив;
		КонецЕсли;
		СписокХарактеристик.Добавить(Выборка.Характеристика);
		ИзделияДляКоторыхПодходитСпецификация.Вставить(Выборка.Номенклатура, СписокХарактеристик)
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Заменить,ПроизводствоЗапущено", Истина, Ложь);
	ТаблицаЗаказы = СписокЗаказов.Выгрузить(СтруктураПоиска);
	ТаблицаЗаказы.Свернуть("Заказ");
	
	ВсегоЗамен = 0;
	ВыполненоЗамен = 0;
	
	Для каждого СтрокаЗаказ Из ТаблицаЗаказы Цикл
		
		ВыполненоЗаменВЗаказе = 0;
		
		// Получим данные замены в заказе
		СтруктураПоиска = Новый Структура("Заказ,Заменить,ПроизводствоЗапущено", СтрокаЗаказ.Заказ, Истина, Ложь);
  		СписокСтрок = СписокЗаказов.НайтиСтроки(СтруктураПоиска);
		ДанныеЗамены = Новый Массив;
		СтрокиВКоторыхВыполняетсяЗамена = Новый Массив;
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ВсегоЗамен = ВсегоЗамен + 1;
			
			// Нужно убедиться, что спецификация подходит для указанной характеристики
			СписокХарактеристик = ИзделияДляКоторыхПодходитСпецификация.Получить(ДанныеСтроки.Номенклатура);
			Если СписокХарактеристик <> Неопределено 
				И (СписокХарактеристик.Найти(ДанныеСтроки.Характеристика) <> Неопределено
					ИЛИ СписокХарактеристик.Найти(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()) <> Неопределено) Тогда
				
				ПараметрыЗамены = Новый Структура;
				ПараметрыЗамены.Вставить("КлючСвязи", ДанныеСтроки.КлючСвязи);
				ПараметрыЗамены.Вставить("КлючСвязиПродукция", ДанныеСтроки.КлючСвязиПродукция);
				ПараметрыЗамены.Вставить("Спецификация", НоваяСпецификация);
				
				ДанныеЗамены.Добавить(ПараметрыЗамены);
				СтрокиВКоторыхВыполняетсяЗамена.Добавить(ДанныеСтроки);
				
				ВыполненоЗаменВЗаказе = ВыполненоЗаменВЗаказе + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеЗамены.Количество() <> 0 Тогда
			
			ЗаказОбъект = ДанныеСтроки.Заказ.ПолучитьОбъект();
			ЗаказОбъект.ЗаменитьСпецификации(ДанныеЗамены);
			
			Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
				Попытка
					
					Если ЗаказОбъект.Проведен Тогда
						ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Иначе	
						ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
					ВыполненоЗамен = ВыполненоЗамен + ВыполненоЗаменВЗаказе;
					
					Для каждого ДанныеСтроки Из СтрокиВКоторыхВыполняетсяЗамена Цикл
						ДанныеСтроки.ТекущаяСпецификацияБольшеНеИспользуется = (НоваяСпецификация <> Спецификация);
					КонецЦикла;
				Исключение
				КонецПопытки;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА