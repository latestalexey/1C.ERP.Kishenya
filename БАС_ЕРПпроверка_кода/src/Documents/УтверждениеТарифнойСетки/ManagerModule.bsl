#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ об изменении тарифной сетки.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_ПриказОбИзмененииТарифнойСетки";
	КомандаПечати.Представление = НСтр("ru='Печать';uk='Друк'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОбИзмененииТарифнойСетки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм, 
						"ПФ_MXL_ПриказОбИзмененииТарифнойСетки", 
						НСтр("ru='Приказ об изменении тарифной группы';uk='Наказ про зміну тарифної групи'"), 
						ПечатнаяФормаПриказаОбИзмененииТарифнойСетки(МассивОбъектов, ОбъектыПечати), ,
						"Документ.РаботаСверхурочно.ПФ_MXL_ПриказОбИзмененииТарифнойСетки");
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаПриказаОбИзмененииТарифнойСетки(МассивОбъектов, ОбъектыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказОбИзмененииТарифнойСетки";
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.УтверждениеТарифнойСетки.ПФ_MXL_ПриказОбИзмененииТарифнойСетки");
	
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаРазряд 		= Макет.ПолучитьОбласть("ШапкаТаблицы|Разряд");
	ОбластьШапкаКоэффициент = Макет.ПолучитьОбласть("ШапкаТаблицы|Коэффициент");
	ОбластьШапкаТариф 		= Макет.ПолучитьОбласть("ШапкаТаблицы|Тариф");
	ОбластьСтрокаРазряд 	= Макет.ПолучитьОбласть("СтрокаТаблицы|Разряд");
	ОбластьСтрокаКоэффициент = Макет.ПолучитьОбласть("СтрокаТаблицы|Коэффициент");
	ОбластьСтрокаТариф 		= Макет.ПолучитьОбласть("СтрокаТаблицы|Тариф");
	ОбластьПодвал 	  		= Макет.ПолучитьОбласть("Подвал");
	
	ДанныеДляПечати = ДанныеДляПечатиПриказаОбИзмененииТарифнойСетки(МассивОбъектов);
	
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоСтрокам 	= ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаСотрудники = Новый ТаблицаЗначений;
	ТаблицаСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудники.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка"));
	ТаблицаСотрудники.Колонки.Добавить("Должность", Новый ОписаниеТипов("Строка"));
	ТаблицаСотрудники.Колонки.Добавить("ДатаДок", Новый ОписаниеТипов("Дата"));
	
	Пока ВыборкаПоДокументам.Следующий() Цикл  
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		НомерПункта = 0;
		ТаблицаСотрудники.Очистить();
		
		Параметры = ПолучитьСтруктуруПараметровПриказаОбИзмененииТарифнойСетки();
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоДокументам);
		
		Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
			
			Если ВыборкаПоДокументам.ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Надбавка Тогда
				ПредставлениеВидаВРодительномПадеже = НСтр("ru='квалификационную надбавку';uk='кваліфікаційну надбавку'");
			Иначе
				ПредставлениеВидаВРодительномПадеже = НСтр("ru='профессиональную квалификационную группу';uk='професійну кваліфікаційну групу'");
			КонецЕсли;
			
		Иначе
			
			Если ВыборкаПоДокументам.ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Надбавка Тогда
				ПредставлениеВидаВРодительномПадеже = НСтр("ru='тарифную группу надбавок';uk='тарифну групу надбавок'");
			Иначе
				ПредставлениеВидаВРодительномПадеже = НСтр("ru='тарифную группу';uk='тарифну групу'");
			КонецЕсли;
			
		КонецЕсли;
		ОбластьШапка.Параметры.ПредставлениеВидаВРодительномПадеже = ПредставлениеВидаВРодительномПадеже;
		
		Параметры.ДатаВступленияВСилу = Формат(Параметры.ДатаВступленияВСилу, "ДЛФ=ДД");
		Параметры.ДатаДок = Формат(Параметры.ДатаДок, "ДЛФ=Д");
		
		ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Параметры);
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, Параметры);
		
		ТабДокумент.Вывести(ОбластьШапка);
		
		ТабДокумент.Вывести(ОбластьШапкаРазряд);
		Если ВыборкаПоДокументам.ПрименениеТарифныхКоэффициентов Тогда 
			ТабДокумент.Присоединить(ОбластьШапкаКоэффициент);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьШапкаТариф);
		
		СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоДокументам.Ссылка);
		
		ВыборкаПоСтрокам.Сбросить();
		
		Пока ВыборкаПоСтрокам.НайтиСледующий(СтруктураПоиска) Цикл 
			
			ОбластьСтрокаРазряд.Параметры.Разряд = ВыборкаПоСтрокам.Разряд;
			ТабДокумент.Вывести(ОбластьСтрокаРазряд);
			
			Если ВыборкаПоДокументам.ПрименениеТарифныхКоэффициентов Тогда 
				ОбластьСтрокаКоэффициент.Параметры.РазрядныйКоэффициент = ВыборкаПоСтрокам.РазрядныйКоэффициент;
				ТабДокумент.Присоединить(ОбластьСтрокаКоэффициент);
			КонецЕсли;
			
			ОбластьСтрокаТариф.Параметры.Тариф = ВыборкаПоСтрокам.Тариф;
			ТабДокумент.Присоединить(ОбластьСтрокаТариф);
			
		КонецЦикла;
		
		ТабДокумент.Вывести(ОбластьПодвал);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции	

Функция ДанныеДляПечатиПриказаОбИзмененииТарифнойСетки(МассивОбъектов)
	
	// Запрос по шапкам документов.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.УтверждениеТарифнойСетки"));
	ТаблицаОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	РеквизитыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "ТарифнаяСетка,ДатаВступленияВСилу");
	Для каждого ДокументИзменения Из МассивОбъектов Цикл
		
		РеквизитыДокумента = РеквизитыДокументов.Получить(ДокументИзменения);
		СоздатьВТСотрудникиСОплатойПоТарифнойСетке(Запрос.МенеджерВременныхТаблиц, РеквизитыДокумента.ТарифнаяСетка, РеквизитыДокумента.ДатаВступленияВСилу);
		
		Запрос.УстановитьПараметр("ДокументИзменения", ДокументИзменения);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&ДокументИзменения КАК Ссылка,
			|	СотрудникиОрганизации.Организация
			|ИЗ
			|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
			
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ТаблицаОрганизаций);
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
		Запрос.Выполнить();
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТаблицаОрганизаций", ТаблицаОрганизаций);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОрганизаций.Ссылка КАК Ссылка,
		|	ТаблицаОрганизаций.Организация КАК Организация
		|ПОМЕСТИТЬ ВТОрганизацииДокументов
		|ИЗ
		|	&ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УтверждениеТарифнойСетки.Ссылка КАК Ссылка,
		|	УтверждениеТарифнойСетки.Дата КАК Дата,
		|	УтверждениеТарифнойСетки.Номер КАК Номер,
		|	УтверждениеТарифнойСетки.ТарифнаяСетка КАК ТарифнаяСетка,
		|	УтверждениеТарифнойСетки.ВидТарифнойСетки,
		|	УтверждениеТарифнойСетки.ДатаВступленияВСилу КАК ДатаВступленияВСилу,
		|	УтверждениеТарифнойСетки.ТарифнаяСетка.ПрименениеТарифныхКоэффициентов КАК ПрименениеТарифныхКоэффициентов,
		|	ЕСТЬNULL(ОрганизацииДокументов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ВЫБОР
		|		КОГДА ОрганизацииДокументов.Организация ЕСТЬ NULL 
		|			ТОГДА """"
		|		КОГДА ПОДСТРОКА(ВЫРАЗИТЬ(ОрганизацииДокументов.Организация КАК Справочник.Организации).НаименованиеПолное, 1, 10) = """"
		|			ТОГДА ВЫРАЗИТЬ(ОрганизацииДокументов.Организация КАК Справочник.Организации).Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ОрганизацииДокументов.Организация КАК Справочник.Организации).НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.УтверждениеТарифнойСетки КАК УтверждениеТарифнойСетки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОрганизацииДокументов КАК ОрганизацииДокументов
		|		ПО УтверждениеТарифнойСетки.Ссылка = ОрганизацииДокументов.Ссылка
		|ГДЕ
		|	УтверждениеТарифнойСетки.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыРасширенный.СоздатьВТОтветственныеЛица(Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументов", "Руководитель, ДолжностьРуководителя", "Дата");			   
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Номер КАК Номер,
		|	ДанныеДокументов.Дата КАК Дата,
		|	ДанныеДокументов.ТарифнаяСетка КАК ТарифнаяСетка,
		|	ДанныеДокументов.ВидТарифнойСетки КАК ВидТарифнойСетки,
		|	ДанныеДокументов.ДатаВступленияВСилу КАК ДатаВступленияВСилу,
		|	ДанныеДокументов.ПрименениеТарифныхКоэффициентов КАК ПрименениеТарифныхКоэффициентов,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.НазваниеОрганизации КАК НазваниеОрганизации,
		|	ДанныеДокументов.Дата КАК Период,
		|	ЕСТЬNULL(ОтветственныеЛица.Руководитель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Руководитель,
		|	ЕСТЬNULL(ОтветственныеЛица.ДолжностьРуководителя, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ДолжностьРуководителя
		|ПОМЕСТИТЬ ВТДанныеДокументовОтветственныеЛица
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛица
		|		ПО ДанныеДокументов.Организация = ОтветственныеЛица.Организация
		|			И ДанныеДокументов.Дата = ОтветственныеЛица.Период";
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументовОтветственныеЛица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокументов.Номер КАК НомерДок,
		|	ДанныеДокументов.Дата КАК ДатаДок,
		|	ДанныеДокументов.ТарифнаяСетка КАК ТарифнаяСетка,
		|	ДанныеДокументов.ВидТарифнойСетки КАК ВидТарифнойСетки,
		|	ДанныеДокументов.ДатаВступленияВСилу КАК ДатаВступленияВСилу,
		|	ДанныеДокументов.ПрименениеТарифныхКоэффициентов КАК ПрименениеТарифныхКоэффициентов,
		|	ДанныеДокументов.Организация КАК Организация,
		|	ДанныеДокументов.НазваниеОрганизации КАК НазваниеОрганизации,
		|	ДанныеДокументов.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.РасшифровкаПодписи, """") КАК РуководительРасшифровкаПодписи
		|ИЗ
		|	ВТДанныеДокументовОтветственныеЛица КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДок,
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("РезультатПоШапке", РезультатЗапроса);
	
	// Запрос по табличным частям
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УтверждениеТарифнойСеткиТарифы.Ссылка КАК Ссылка,
		|	УтверждениеТарифнойСеткиТарифы.РазрядКатегория.Наименование КАК Разряд,
		|	УтверждениеТарифнойСеткиТарифы.РазрядныйКоэффициент КАК РазрядныйКоэффициент,
		|	УтверждениеТарифнойСеткиТарифы.Тариф КАК Тариф
		|ИЗ
		|	Документ.УтверждениеТарифнойСетки.Тарифы КАК УтверждениеТарифнойСеткиТарифы
		|ГДЕ
		|	УтверждениеТарифнойСеткиТарифы.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	УтверждениеТарифнойСеткиТарифы.РазрядКатегория.РеквизитДопУпорядочивания";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДляПечати.Вставить("РезультатПоТабличнойЧасти", РезультатЗапроса);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПолучитьСтруктуруПараметровПриказаОбИзмененииТарифнойСетки()
	
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("ТарифнаяСетка");
	Параметры.Вставить("ДатаВступленияВСилу");
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

Процедура СоздатьВТТарифы(ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	Запрос.УстановитьПараметр("ТарифнаяСетка", ТарифнаяСетка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаВступленияВСилу КАК Период,
		|	&ТарифнаяСетка КАК ТарифнаяСетка
		|ПОМЕСТИТЬ ВТТарифнаяСеткаПериод";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияТарифов",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТТарифнаяСеткаПериод", "ТарифнаяСетка"));
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияТарифов.РазрядКатегория,
		|	ЗначенияТарифов.Тариф
		|ПОМЕСТИТЬ ВТТарифы
		|ИЗ
		|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
		|ГДЕ
		|	ЗначенияТарифов.Используется = ИСТИНА";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиСОплатойПоТарифнойСетке(МенеджерВременныхТаблиц, ТарифнаяСетка, ДатаВступленияВСилу)
	
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ВидТарифнойСетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТарифнаяСетка, "ВидТарифнойСетки");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Показатели = РазрядыКатегорииДолжностей.ПоказателиТарифнойСетки(ТарифнаяСетка, Истина);
	Запрос.УстановитьПараметр("Показатели", Показатели);
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ДатаВступленияВСилу КАК Период,
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТНачисленияПериоды
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|ГДЕ
		|	НачисленияПоказатели.Показатель В(&Показатели)";

	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТНачисленияПериоды", "Начисление"));
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияПериоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПлановыеНачисленияСрезПоследних";
		
	Запрос.Выполнить();
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудников.НачалоПериода = ДатаВступленияВСилу;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ДатаВступленияВСилу;
	ПараметрыПолученияСотрудников.КадровыеДанные = "Организация,Подразделение,Должность,РазрядКатегория";
	
	Если ФОИспользоватьШтатноеРасписание Тогда
		ПараметрыПолученияСотрудников.КадровыеДанные = ПараметрыПолученияСотрудников.КадровыеДанные + ",ДолжностьПоШтатномуРасписанию";
	КонецЕсли; 
	
	Если ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Надбавка Тогда
		ПараметрыПолученияСотрудников.КадровыеДанные = ПараметрыПолученияСотрудников.КадровыеДанные + ",ТарифнаяСеткаНадбавки";
	Иначе
		ПараметрыПолученияСотрудников.КадровыеДанные = ПараметрыПолученияСотрудников.КадровыеДанные + ",ТарифнаяСетка";
	КонецЕсли;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТФизическиеЛица";
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает результат запроса, содержащий информацию об изменениях позиций штатного расписания
// оформленных на дату вступления в силу, переданную в качестве параметра, позиции которого Содержат
// ссылки на тарифную сетку
//
// Параметры:
//		ТарифнаяСетка 			- СправочникСсылка.ТарифныеСетки
//		ДатаВступленияВСилу		- Дата
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц, если параметр зада, менеджер должен содержать
//								временную таблицу ВТТарифы, содержащую данные на дату вступления в силу, с колонками
//									* РазрядКатегория
//									* Тариф
//
// Возвращаемое значение:
//		РезультатЗапроса
//
Функция РезультатЗапросаПоИзменениямПозицийШтатногоРасписания(ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	Если ФОИспользоватьШтатноеРасписание Тогда
		
		Запрос = Новый Запрос;
		
		Если МенеджерВременныхТаблиц = Неопределено Тогда
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			СоздатьВТТарифы(ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц);
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
		УстановитьПривилегированныйРежим(Истина);
		
		ВидТарифнойСетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТарифнаяСетка, "ВидТарифнойСетки");
		
		// Получение позиций штатного расписания в которых используется тарифная группа
		ПараметрыПолученияПозиций = УправлениеШтатнымРасписанием.ПараметрыПолученияПозицийШтатногоРасписания();
		ПараметрыПолученияПозиций.ДатаАктуальности = ДатаВступленияВСилу;
		
		ПолеОтбора = ?(ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф, "ТарифнаяСетка", "ТарифнаяСеткаНадбавки");
		ПараметрыПолученияПозиций.Отбор.Добавить(Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", ПолеОтбора, "=", ТарифнаяСетка));
			
		ИмяВТПозицииШтатногоРасписания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПозицииШтатногоРасписания");
		УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписания(Ложь, Запрос.МенеджерВременныхТаблиц, ИмяВТПозицииШтатногоРасписания, ПараметрыПолученияПозиций);
		
		// Получение начислений позиций штатного расписания с показателем тарифной группы
		ОписательВременныхТаблиц = УправлениеШтатнымРасписанием.ОписательВременныхТаблицДляПолученияДанныхПозицийШтатногоРасписания(
			Запрос.МенеджерВременныхТаблиц,
			ИмяВТПозицииШтатногоРасписания);
			
		ИмяВТНачисленияПозицийШтатногоРасписания = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТНачисленияПозицийШтатногоРасписания");
		УправлениеШтатнымРасписанием.СоздатьВТНачисленияПозицийШтатногоРасписания(Ложь, ОписательВременныхТаблиц, ИмяВТНачисленияПозицийШтатногоРасписания, Истина);

		Показатели = РазрядыКатегорииДолжностей.ПоказателиТарифнойСетки(ТарифнаяСетка, Истина);
		Запрос.УстановитьПараметр("Показатели", Показатели);
		Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания") Тогда
			
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПозицииШтатногоРасписания.Организация КАК Организация,
				|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
				|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.Должность КАК Справочник.Должности) КАК Должность,
				|	ПозицииШтатногоРасписания.РазрядКатегория КАК РазрядКатегория,
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
				|	НачисленияПозицийШтатногоРасписания.Показатель,
				|	ИзменениеШтатногоРасписанияПозиции.Ссылка КАК ИзменениеШтатногоРасписания,
				|	ИзменениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции,
				|	Тарифы.Тариф,
				|	МИНИМУМ(ТарифыМаксимальныеМинимальные.Тариф) КАК ТарифМин,
				|	МАКСИМУМ(ТарифыМаксимальныеМинимальные.Тариф) КАК ТарифМакс
				|ПОМЕСТИТЬ ВТПозицииСИзменениями
				|ИЗ
				|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
				|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.Позиции КАК ИзменениеШтатногоРасписанияПозиции
				|			ПО ПозицииШтатногоРасписания.Организация = ИзменениеШтатногоРасписанияПозиции.Ссылка.Организация
				|				И ПозицииШтатногоРасписания.ПозицияШтатногоРасписания = ИзменениеШтатногоРасписанияПозиции.Позиция
				|				И (ИзменениеШтатногоРасписанияПозиции.Ссылка.ДатаВступленияВСилу = &ДатаВступленияВСилу)
				|				И (ИзменениеШтатногоРасписанияПозиции.Ссылка.Проведен)
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифы КАК Тарифы
				|			ПО ПозицииШтатногоРасписания.РазрядКатегория = Тарифы.РазрядКатегория
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифы КАК ТарифыМаксимальныеМинимальные
				|			ПО (ИСТИНА)
				|		ПО НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания = ПозицииШтатногоРасписания.ПозицияШтатногоРасписания
				|ГДЕ
				|	НачисленияПозицийШтатногоРасписания.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
				|	И НачисленияПозицийШтатногоРасписания.Показатель В(&Показатели)
				|
				|СГРУППИРОВАТЬ ПО
				|	ПозицииШтатногоРасписания.Организация,
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
				|	ИзменениеШтатногоРасписанияПозиции.Ссылка,
				|	НачисленияПозицийШтатногоРасписания.Показатель,
				|	ИзменениеШтатногоРасписанияПозиции.ИдентификаторСтрокиПозиции,
				|	ПозицииШтатногоРасписания.РазрядКатегория,
				|	Тарифы.Тариф,
				|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.Подразделение КАК Справочник.ПодразделенияОрганизаций),
				|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.Должность КАК Справочник.Должности)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПозицииСИзменениями.Организация КАК Организация,
				|	ПозицииСИзменениями.Подразделение,
				|	ПозицииСИзменениями.Должность,
				|	ПозицииСИзменениями.ПозицияШтатногоРасписания,
				|	ПозицииСИзменениями.РазрядКатегория,
				|	ПозицииСИзменениями.ИзменениеШтатногоРасписания,
				|	ПозицииСИзменениями.Показатель,
				|	ПозицииСИзменениями.ИдентификаторСтрокиПозиции,
				|	ПозицииСИзменениями.Тариф,
				|	ПозицииСИзменениями.ТарифМин,
				|	ПозицииСИзменениями.ТарифМакс,
				|	ВЫБОР
				|		КОГДА ПозицииСИзменениями.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
				|			ТОГДА ВЫБОР
				|					КОГДА ИзменениеШтатногоРасписанияПоказатели.Значение >= ПозицииСИзменениями.ТарифМин
				|							И ИзменениеШтатногоРасписанияПоказатели.Значение <= ПозицииСИзменениями.ТарифМакс
				|						ТОГДА ИСТИНА
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ИзменениеШтатногоРасписанияПоказатели.Значение = ПозицииСИзменениями.Тариф
				|					ТОГДА ИСТИНА
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ
				|	КОНЕЦ КАК ИзменениеУчтено
				|ИЗ
				|	ВТПозицииСИзменениями КАК ПозицииСИзменениями
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеШтатногоРасписания.Показатели КАК ИзменениеШтатногоРасписанияПоказатели
				|		ПО ПозицииСИзменениями.ИзменениеШтатногоРасписания = ИзменениеШтатногоРасписанияПоказатели.Ссылка
				|			И ПозицииСИзменениями.ИдентификаторСтрокиПозиции = ИзменениеШтатногоРасписанияПоказатели.ИдентификаторСтрокиПозиции
				|			И ПозицииСИзменениями.Показатель = ИзменениеШтатногоРасписанияПоказатели.Показатель
				|
				|УПОРЯДОЧИТЬ ПО
				|	Организация,
				|	НАЧАЛОПЕРИОДА(ПозицииСИзменениями.ИзменениеШтатногоРасписания.Дата, ДЕНЬ),
				|	ПозицииСИзменениями.ИзменениеШтатногоРасписания.Номер,
				|	ПозицииСИзменениями.Подразделение.РеквизитДопУпорядочиванияИерархического,
				|	ПозицииСИзменениями.Должность.РеквизитДопУпорядочивания";
				
		Иначе
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ПозицииШтатногоРасписания.Организация КАК Организация,
				|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
				|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.Должность КАК Справочник.Должности) КАК Должность,
				|	ПозицииШтатногоРасписания.РазрядКатегория КАК РазрядКатегория,
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
				|	НачисленияПозицийШтатногоРасписания.Показатель,
				|	НачисленияПозицийШтатногоРасписания.Значение,
				|	Тарифы.Тариф,
				|	МИНИМУМ(ТарифыМаксимальныеМинимальные.Тариф) КАК ТарифМин,
				|	МАКСИМУМ(ТарифыМаксимальныеМинимальные.Тариф) КАК ТарифМакс
				|ПОМЕСТИТЬ ВТПозицииСИзменениями
				|ИЗ
				|	ВТНачисленияПозицийШтатногоРасписания КАК НачисленияПозицийШтатногоРасписания
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПозицииШтатногоРасписания КАК ПозицииШтатногоРасписания
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифы КАК Тарифы
				|			ПО ПозицииШтатногоРасписания.РазрядКатегория = Тарифы.РазрядКатегория
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифы КАК ТарифыМаксимальныеМинимальные
				|			ПО (ИСТИНА)
				|		ПО НачисленияПозицийШтатногоРасписания.ПозицияШтатногоРасписания = ПозицииШтатногоРасписания.ПозицияШтатногоРасписания
				|ГДЕ
				|	НачисленияПозицийШтатногоРасписания.Начисление <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
				|	И НачисленияПозицийШтатногоРасписания.Показатель В(&Показатели)
				|
				|СГРУППИРОВАТЬ ПО
				|	ПозицииШтатногоРасписания.Организация,
				|	ПозицииШтатногоРасписания.ПозицияШтатногоРасписания,
				|	НачисленияПозицийШтатногоРасписания.Показатель,
				|	ПозицииШтатногоРасписания.РазрядКатегория,
				|	НачисленияПозицийШтатногоРасписания.Значение,
				|	Тарифы.Тариф,
				|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.Подразделение КАК Справочник.ПодразделенияОрганизаций),
				|	ВЫРАЗИТЬ(ПозицииШтатногоРасписания.Должность КАК Справочник.Должности)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПозицииСИзменениями.Организация КАК Организация,
				|	ПозицииСИзменениями.Подразделение,
				|	ПозицииСИзменениями.Должность,
				|	ПозицииСИзменениями.ПозицияШтатногоРасписания,
				|	NULL КАК ИзменениеШтатногоРасписания,
				|	ПозицииСИзменениями.РазрядКатегория,
				|	ПозицииСИзменениями.Показатель,
				|	ПозицииСИзменениями.Тариф,
				|	ПозицииСИзменениями.ТарифМин,
				|	ПозицииСИзменениями.ТарифМакс,
				|	ВЫБОР
				|		КОГДА ПозицииСИзменениями.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
				|			ТОГДА ВЫБОР
				|					КОГДА ПозицииСИзменениями.Значение >= ПозицииСИзменениями.ТарифМин
				|							И ПозицииСИзменениями.Значение <= ПозицииСИзменениями.ТарифМакс
				|						ТОГДА ИСТИНА
				|					ИНАЧЕ ЛОЖЬ
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ПозицииСИзменениями.Значение = ПозицииСИзменениями.Тариф
				|					ТОГДА ИСТИНА
				|				ИНАЧЕ ЛОЖЬ
				|			КОНЕЦ
				|	КОНЕЦ КАК ИзменениеУчтено
				|ИЗ
				|	ВТПозицииСИзменениями КАК ПозицииСИзменениями
				|
				|УПОРЯДОЧИТЬ ПО
				|	Организация,
				|	ПозицииСИзменениями.Подразделение.РеквизитДопУпорядочиванияИерархического,
				|	ПозицииСИзменениями.Должность.РеквизитДопУпорядочивания";
				
		КонецЕсли;
			
		Если ВидТарифнойСетки <> Перечисления.ВидыТарифныхСеток.Тариф Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПозицииШтатногоРасписания.РазрядКатегория", "ПозицииШтатногоРасписания.РазрядКатегорияНадбавки");
		КонецЕсли;
					   
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисленияПозицийШтатногоРасписания", ИмяВТНачисленияПозицийШтатногоРасписания);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПозицииШтатногоРасписания", ИмяВТПозицииШтатногоРасписания);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат РезультатЗапроса;
		КонецЕсли; 
			
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает результат запроса, содержащий информацию об изменениях начислений сотрудников
// оформленных на дату вступления в силу, переданную в качестве параметра
//
// Параметры:
//		ТарифнаяСетка 			- СправочникСсылка.ТарифныеСетки
//		ДатаВступленияВСилу		- Дата
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц, если параметр зада, менеджер должен содержать
//								временную таблицу ВТТарифы, содержащую данные на дату вступления в силу, с колонками
//									* РазрядКатегория
//									* Тариф
//
// Возвращаемое значение:
//		РезультатЗапроса
//
Функция РезультатЗапросаПоИзменениямПлановыхНачислений(ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТТарифы(ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СоздатьВТСотрудникиСОплатойПоТарифнойСетке(МенеджерВременныхТаблиц, ТарифнаяСетка, ДатаВступленияВСилу);
	
	Показатели = РазрядыКатегорииДолжностей.ПоказателиТарифнойСетки(ТарифнаяСетка, Истина);
	Запрос.УстановитьПараметр("Показатели", Показатели);
	
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	ВидТарифнойСетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТарифнаяСетка, "ВидТарифнойСетки");
	Если ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Надбавка Тогда
		ИмяПоляТарифнаяСетка = "ТарифнаяСеткаНадбавки";
	Иначе
		ИмяПоляТарифнаяСетка = "ТарифнаяСетка";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаВступленияВСилу", ДатаВступленияВСилу);
	Запрос.УстановитьПараметр("ТарифнаяСетка", ТарифнаяСетка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.Организация КАК Организация,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СотрудникиОрганизации.Подразделение) КАК ПредставлениеПодразделение,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СотрудникиОрганизации.Должность) КАК ПредставлениеДолжность,
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СотрудникиОрганизации.Сотрудник) КАК ПредставлениеСотрудник,
		|	ИзменениеПлановыхНачисленийПоказателиСотрудников.Ссылка КАК ИзменениеПлановыхНачислений,
		|	Тарифы.Тариф,
		|	ВЫБОР
		|		КОГДА ИзменениеПлановыхНачисленийПоказателиСотрудников.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		КОГДА ИзменениеПлановыхНачисленийПоказателиСотрудников.Значение = Тарифы.Тариф
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИзменениеУчтено
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеПлановыхНачислений.ПоказателиСотрудников КАК ИзменениеПлановыхНачисленийПоказателиСотрудников
		|		ПО СотрудникиОрганизации.Организация = ИзменениеПлановыхНачисленийПоказателиСотрудников.Ссылка.Организация
		|			И СотрудникиОрганизации.Сотрудник = ИзменениеПлановыхНачисленийПоказателиСотрудников.Сотрудник
		|			И (ИзменениеПлановыхНачисленийПоказателиСотрудников.Показатель В (&Показатели))
		|			И (ИзменениеПлановыхНачисленийПоказателиСотрудников.Ссылка.ДатаИзменения = &ДатаВступленияВСилу)
		|			И (ИзменениеПлановыхНачисленийПоказателиСотрудников.Ссылка.Проведен)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТарифы КАК Тарифы
		|		ПО СотрудникиОрганизации.РазрядКатегория = Тарифы.РазрядКатегория
		|ГДЕ
		|	СотрудникиОрганизации.ТарифнаяСетка = &ТарифнаяСетка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	НАЧАЛОПЕРИОДА(ИзменениеПлановыхНачисленийПоказателиСотрудников.Ссылка.Дата, ДЕНЬ),
		|	ИзменениеПлановыхНачисленийПоказателиСотрудников.Ссылка.Номер,
		|	Сотрудник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.ТарифнаяСетка = &ТарифнаяСетка", "СотрудникиОрганизации." + ИмяПоляТарифнаяСетка + " = &ТарифнаяСетка");
	
	Если ФОИспользоватьШтатноеРасписание Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.Должность", "СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию");
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении")
		И ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.РазрядКатегория = Тарифы.РазрядКатегория",
			"ВЫРАЗИТЬ(СотрудникиОрганизации.ДолжностьПоШтатномуРасписанию КАК Справочник.ШтатноеРасписание).РазрядКатегория = Тарифы.РазрядКатегория");
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ЗаполнитьСпособыОкругления() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УтверждениеТарифнойСетки.Ссылка
		|ИЗ
		|	Документ.УтверждениеТарифнойСетки КАК УтверждениеТарифнойСетки
		|ГДЕ
		|	УтверждениеТарифнойСетки.СпособОкругления = ЗНАЧЕНИЕ(Справочник.СпособыОкругленияПриРасчетеЗарплаты.ПустаяСсылка)
		|	И УтверждениеТарифнойСетки.ТарифнаяСетка.ПрименениеТарифныхКоэффициентов";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		СпособОкругления = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДокумента.СпособОкругления = СпособОкругления;
			
			ОбъектДокумента.ОбменДанными.Загрузка = Истина;
			ОбъектДокумента.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьИзмененияПозицийШтатногоРасписанияПоДвижениям() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсторияИспользованияШтатногоРасписания.Регистратор
		|ПОМЕСТИТЬ ВТУтвержденияТарифныхГрупп
		|ИЗ
		|	РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
		|ГДЕ
		|	ИсторияИспользованияШтатногоРасписания.Регистратор ССЫЛКА Документ.УтверждениеТарифнойСетки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УтвержденияТарифныхГрупп.Регистратор
		|ИЗ
		|	ВТУтвержденияТарифныхГрупп КАК УтвержденияТарифныхГрупп";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УтвержденияТарифныхГрупп.Регистратор КАК Регистратор,
			|	ВЫРАЗИТЬ(УтвержденияТарифныхГрупп.Регистратор КАК Документ.УтверждениеТарифнойСетки).Дата КАК Дата,
			|	ВЫРАЗИТЬ(УтвержденияТарифныхГрупп.Регистратор КАК Документ.УтверждениеТарифнойСетки).Ответственный КАК Ответственный,
			|	ВЫРАЗИТЬ(УтвержденияТарифныхГрупп.Регистратор КАК Документ.УтверждениеТарифнойСетки).Комментарий КАК Комментарий,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Владелец КАК Организация,
			|	ИсторияИспользованияШтатногоРасписания.Дата КАК ДатаВступленияВСилу,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность КАК Должность,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение КАК Подразделение,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания КАК Позиция,
			|	ИсторияНачисленийПоШтатномуРасписанию.Начисление,
			|	ИсторияИспользованияШтатногоРасписания.*,
			|	ИсторияНачисленийПоШтатномуРасписанию.*,
			|	ИсторияПоказателейПоШтатномуРасписанию.*
			|ИЗ
			|	ВТУтвержденияТарифныхГрупп КАК УтвержденияТарифныхГрупп
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШтатногоРасписания КАК ИсторияИспользованияШтатногоРасписания
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНачисленийПоШтатномуРасписанию КАК ИсторияНачисленийПоШтатномуРасписанию
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию КАК ИсторияПоказателейПоШтатномуРасписанию
			|				ПО ИсторияНачисленийПоШтатномуРасписанию.Регистратор = ИсторияПоказателейПоШтатномуРасписанию.Регистратор
			|					И ИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания = ИсторияПоказателейПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|					И ИсторияНачисленийПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета = ИсторияПоказателейПоШтатномуРасписанию.ИдентификаторСтрокиВидаРасчета
			|			ПО ИсторияИспользованияШтатногоРасписания.Регистратор = ИсторияНачисленийПоШтатномуРасписанию.Регистратор
			|				И ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания = ИсторияНачисленийПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|		ПО УтвержденияТарифныхГрупп.Регистратор = ИсторияИспользованияШтатногоРасписания.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор,
			|	Организация,
			|	ДатаВступленияВСилу,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Подразделение.РеквизитДопУпорядочиванияИерархического,
			|	ИсторияИспользованияШтатногоРасписания.ПозицияШтатногоРасписания.Должность.РеквизитДопУпорядочивания,
			|	Позиция,
			|	Начисление.РеквизитДопУпорядочивания,
			|	Начисление";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			СписокДокументовИзменениеШтатногоРасписания = Новый Массив;
		
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
				
				Пока Выборка.СледующийПоЗначениюПоля("ДатаВступленияВСилу") Цикл
					
					ДокументИзменения = Документы.ИзменениеШтатногоРасписания.СоздатьДокумент();
					
					ДокументИзменения.Ответственный = Пользователи.ТекущийПользователь();
					УправлениеШтатнымРасписанием.ЗаполнитьПодписантовДокумента(ДокументИзменения, ДокументИзменения.ДатаВступленияВСилу, Ложь);
					
					ЗаполнитьЗначенияСвойств(ДокументИзменения, Выборка);
					
					ИдентификаторСтрокиПозиции = 1;
					Пока Выборка.СледующийПоЗначениюПоля("Позиция") Цикл
						
						СтрокаПозиции = ДокументИзменения.Позиции.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПозиции, Выборка);
						
						СтрокаПозиции.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
						
						Пока Выборка.СледующийПоЗначениюПоля("Начисление") Цикл
							
							СтрокаНачислений = ДокументИзменения.Начисления.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаНачислений, Выборка);
							
							СтрокаНачислений.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
							
							Пока Выборка.Следующий() Цикл
								
								СтрокаПоказателей = ДокументИзменения.Показатели.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаПоказателей, Выборка);
								
								СтрокаПоказателей.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
								
							КонецЦикла;
							
						КонецЦикла;
						
						ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции + 1;
						
					КонецЦикла;
					
					ДокументИзменения.Записать(РежимЗаписиДокумента.Запись);
					СписокДокументовИзменениеШтатногоРасписания.Добавить(ДокументИзменения);
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Очистка движений по регистру сведений ИсторияИспользованияШтатногоРасписания
			НаборЗаписей = РегистрыСведений.ИсторияИспользованияШтатногоРасписания.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
			
			// Очистка движений по регистру сведений ИсторияНачисленийПоШтатномуРасписанию
			НаборЗаписей = РегистрыСведений.ИсторияНачисленийПоШтатномуРасписанию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
			
			// Очистка движений по регистру сведений ИсторияПоказателейПоШтатномуРасписанию
			НаборЗаписей = РегистрыСведений.ИсторияПоказателейПоШтатномуРасписанию.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
			
			Для каждого ДокументИзменения Из СписокДокументовИзменениеШтатногоРасписания Цикл
				
				УправлениеШтатнымРасписанием.ДокументыОбработкаПроведения(
					ДокументИзменения, Ложь, РежимПроведенияДокумента.Неоперативный, Неопределено, ДокументИзменения.ДатаВступленияВСилу);
				
				ДокументИзменения.Проведен = Истина;
				ДокументИзменения.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИзменениеПлановыхНачисленийСотрудниковПоДвижениям() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|ГДЕ
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор ССЫЛКА Документ.УтверждениеТарифнойСетки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистраторы.Регистратор КАК Регистратор,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Организация КАК Организация,
			|	ВЫРАЗИТЬ(Регистраторы.Регистратор КАК Документ.УтверждениеТарифнойСетки).Дата КАК Дата,
			|	ВЫРАЗИТЬ(Регистраторы.Регистратор КАК Документ.УтверждениеТарифнойСетки).ДатаВступленияВСилу КАК ДатаИзменения,
			|	ВЫРАЗИТЬ(Регистраторы.Регистратор КАК Документ.УтверждениеТарифнойСетки).Ответственный КАК Ответственный,
			|	ВЫРАЗИТЬ(Регистраторы.Регистратор КАК Документ.УтверждениеТарифнойСетки).Комментарий КАК Комментарий,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник КАК Сотрудник,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
			|		ПО Регистраторы.Регистратор = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор,
			|	Организация,
			|	Сотрудник";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистраторы.Регистратор,
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Начисление,
			|	ПлановыеНачисления.Размер
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
			|		ПО Регистраторы.Регистратор = ПлановыеНачисления.Регистратор
			|ГДЕ
			|	ПлановыеНачисления.Используется
			|	И НЕ ПлановыеНачисления.ВторичнаяЗапись";
			
		ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Регистраторы.Регистратор,
			|	ЗначенияСовокупныхТарифныхСтавокСотрудников.Сотрудник,
			|	ЗначенияСовокупныхТарифныхСтавокСотрудников.Значение КАК СовокупнаяТарифнаяСтавка,
			|	ЗначенияСовокупныхТарифныхСтавокСотрудников.ВидТарифнойСтавки
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначенияСовокупныхТарифныхСтавокСотрудников
			|		ПО Регистраторы.Регистратор = ЗначенияСовокупныхТарифныхСтавокСотрудников.Регистратор";
			
		ТаблицаСтавок = Запрос.Выполнить().Выгрузить();
		
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			СписокДокументовИзменениеПлановыхНачислений = Новый Массив;
		
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
				
				ДокументИзменения = Документы.ИзменениеПлановыхНачислений.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДокументИзменения, Выборка);
				
				Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					Пока Выборка.Следующий() Цикл
						
						СтрокаПоказателя = ДокументИзменения.ПоказателиСотрудников.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПоказателя, Выборка);
						
					КонецЦикла; 
					
					СтруктураПоиска = Новый Структура("Регистратор,Сотрудник");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
					
					НачисленияСотрудника = ТаблицаНачислений.НайтиСтроки(СтруктураПоиска);
					Для каждого НачислениеСотрудника Из НачисленияСотрудника Цикл
						
						СтрокаНачисления = ДокументИзменения.НачисленияСотрудников.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНачисления, НачислениеСотрудника);
						
					КонецЦикла;
					
					СтавкиСотрудника = ТаблицаСтавок.НайтиСтроки(СтруктураПоиска);
					Для каждого СтавкаСотрудника Из СтавкиСотрудника Цикл
						
						СтрокаСтавки = ДокументИзменения.Сотрудники.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСтавки, СтавкаСотрудника);
						СтрокаСтавки.ДатаИзменения = Выборка.ДатаИзменения;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ДокументИзменения.Записать(РежимЗаписиДокумента.Запись);
				СписокДокументовИзменениеПлановыхНачислений.Добавить(ДокументИзменения);
				
			КонецЦикла;
			
			// Очистка движений по регистру сведений ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
			НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
			
			// Очистка движений по регистру сведений ПлановыеНачисления
			НаборЗаписей = РегистрыСведений.ПлановыеНачисления.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
			
			// Очистка движений по регистру сведений ЗначенияСовокупныхТарифныхСтавокСотрудников
			НаборЗаписей = РегистрыСведений.ЗначенияСовокупныхТарифныхСтавокСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
			
			Для каждого ДокументИзменения Из СписокДокументовИзменениеПлановыхНачислений Цикл
				ДокументИзменения.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьФОТ(ПараметрыВыполнения, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ТарифнаяСетка 			= ПараметрыВыполнения.ТарифнаяСетка;
	ДатаВступленияВСилу 	= ПараметрыВыполнения.ДатаВступленияВСилу;
	
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	МенеджерВременныхТаблиц = Неопределено;
	
	Если ФОИспользоватьШтатноеРасписание Тогда
		
		РезультатЗапроса = Документы.УтверждениеТарифнойСетки.РезультатЗапросаПоИзменениямПозицийШтатногоРасписания(
			ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц);
		
		Если РезультатЗапроса <> Неопределено Тогда
			
			ТаблицаПозицийКИзменению = РезультатЗапроса.Выгрузить().Скопировать(Новый Структура("ИзменениеУчтено", Ложь));
			
			Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
				
				ДанныеПозиций = УправлениеШтатнымРасписанием.ДанныеПозицийШтатногоРасписания(
					Истина, ТаблицаПозицийКИзменению.ВыгрузитьКолонку("ПозицияШтатногоРасписания"), ДатаВступленияВСилу, , Ложь);
				
				ИзмененияШтатногоРасписания = ТаблицаПозицийКИзменению.Скопировать(, "Организация,ИзменениеШтатногоРасписания");
				ИзмененияШтатногоРасписания.Свернуть("Организация,ИзменениеШтатногоРасписания");
				
				Для каждого СтрокаИзмененияШтатногоРасписания Из ИзмененияШтатногоРасписания Цикл
					
					ИдентификаторСтрокиПозиции = 0;
					ИдентификаторСтрокиВидаРасчета = 0;
					
					Если ЗначениеЗаполнено(СтрокаИзмененияШтатногоРасписания.ИзменениеШтатногоРасписания) Тогда
						
						ИзменениеШтатногоРасписания = СтрокаИзмененияШтатногоРасписания.ИзменениеШтатногоРасписания.ПолучитьОбъект();
						
						Попытка 
							ИзменениеШтатногоРасписания.Заблокировать();
						Исключение
							
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Не удалось изменить данные документа ""%1"".
                                |Возможно, документ редактируется другим пользователем'
                                |;uk='Не вдалося змінити дані документа ""%1"".
                                |Можливо, документ редагується іншим користувачем'"),
								Строка(ИзменениеШтатногоРасписания.Ссылка));
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
							Продолжить;
							
						КонецПопытки;
						
						ИдентификаторСтрокиПозиции = 0;
						Для каждого СтрокаДокумента Из ИзменениеШтатногоРасписания.Позиции Цикл
							
							Если ИдентификаторСтрокиПозиции < СтрокаДокумента.ИдентификаторСтрокиПозиции Тогда
								ИдентификаторСтрокиПозиции = СтрокаДокумента.ИдентификаторСтрокиПозиции;
							КонецЕсли;
							
						КонецЦикла;
						
						Для каждого СтрокаДокумента Из ИзменениеШтатногоРасписания.Начисления Цикл
							
							Если ИдентификаторСтрокиВидаРасчета < СтрокаДокумента.ИдентификаторСтрокиВидаРасчета Тогда
								ИдентификаторСтрокиВидаРасчета = СтрокаДокумента.ИдентификаторСтрокиВидаРасчета;
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						
						ИзменениеШтатногоРасписания = Документы.ИзменениеШтатногоРасписания.СоздатьДокумент();
						ИзменениеШтатногоРасписания.Дата = ТекущаяДатаСеанса();
						ИзменениеШтатногоРасписания.Организация = СтрокаИзмененияШтатногоРасписания.Организация;
						ИзменениеШтатногоРасписания.ДатаВступленияВСилу = ДатаВступленияВСилу;
						ИзменениеШтатногоРасписания.Ответственный = Пользователи.ТекущийПользователь();
						
						УправлениеШтатнымРасписанием.ЗаполнитьПодписантовДокумента(ИзменениеШтатногоРасписания, ДатаВступленияВСилу, Ложь);
						
					КонецЕсли;
					
					СтруктураПоиска = Новый Структура("Организация,ИзменениеШтатногоРасписания");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИзмененияШтатногоРасписания);
					
					ИзмененныеПозиции = Новый Массив;
					
					СтрокиПозиций = ТаблицаПозицийКИзменению.НайтиСтроки(СтруктураПоиска);
					Для каждого СтрокаПозиции Из СтрокиПозиций Цикл
						
						ДанныеПозиции = ДанныеПозиций.Получить(СтрокаПозиции.ПозицияШтатногоРасписания);
						Если ДанныеПозиции = Неопределено Тогда
							Продолжить;
						КонецЕсли; 
							
						СтрокаПозицииДокумента = ИзменениеШтатногоРасписания.Позиции.Найти(СтрокаПозиции.ПозицияШтатногоРасписания, "Позиция");
						Если СтрокаПозицииДокумента = Неопределено Тогда
							
							ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции + 1;
							
							СтрокаПозицииДокумента = ИзменениеШтатногоРасписания.Позиции.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаПозицииДокумента, ДанныеПозиции);
							
							СтрокаПозицииДокумента.Позиция = СтрокаПозиции.ПозицияШтатногоРасписания;
							СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции = ИдентификаторСтрокиПозиции;
							
							Если ДанныеПозиции.Начисления <> Неопределено Тогда
								
								Для каждого ОписаниеНачисления Из ДанныеПозиции.Начисления Цикл
									
									ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
									
									СтрокаНачисленийДокумента = ИзменениеШтатногоРасписания.Начисления.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаНачисленийДокумента, ОписаниеНачисления);
									
									СтрокаНачисленийДокумента.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
									СтрокаНачисленийДокумента.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
									
									Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
										
										Если ЗначениеЗаполнено(ОписаниеПоказателя.Показатель) Тогда
											
											СтрокаПоказателяДокумента = ИзменениеШтатногоРасписания.Показатели.Добавить();
											ЗаполнитьЗначенияСвойств(СтрокаПоказателяДокумента, ОписаниеПоказателя);
											
											СтрокаПоказателяДокумента.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
											СтрокаПоказателяДокумента.ИдентификаторСтрокиВидаРасчета= СтрокаНачисленийДокумента.ИдентификаторСтрокиВидаРасчета;
											
										КонецЕсли; 
										
									КонецЦикла;
									
								КонецЦикла;
								
							КонецЕсли;
							
							НезависимыеПоказатели = ДанныеПозиции.НезависимыеПоказатели;
							Если НезависимыеПоказатели <> Неопределено Тогда
								
								Для Каждого ОписаниеПоказателя Из НезависимыеПоказатели Цикл 
									
									СтрокаПоказателяДокумента = ИзменениеШтатногоРасписания.Показатели.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаПоказателяДокумента, ОписаниеПоказателя);
									
									СтрокаПоказателяДокумента.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
									
								КонецЦикла;
								
							КонецЕсли;
							
							ЕжегодныеОтпуска = ДанныеПозиции.ЕжегодныеОтпуска;
							Если ЕжегодныеОтпуска <> Неопределено Тогда
								
								Для каждого ОписаниеЕжегодногоОтпуска Из ЕжегодныеОтпуска Цикл
									
									СтрокаЕжегодныеОтпуска = ИзменениеШтатногоРасписания.ЕжегодныеОтпуска.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаЕжегодныеОтпуска, ОписаниеЕжегодногоОтпуска);
									
									СтрокаЕжегодныеОтпуска.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
									
								КонецЦикла;
								
							КонецЕсли;
							
							Специальности = ДанныеПозиции.Специальности;
							Если Специальности <> Неопределено Тогда
								
								Для каждого ОписаниеСпециальности Из Специальности Цикл
									
									СтрокаСпециальности = ИзменениеШтатногоРасписания.Специальности.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаСпециальности, ОписаниеСпециальности);
									
									СтрокаСпециальности.ИдентификаторСтрокиПозиции = СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции;
									
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЕсли;
						
						ИзмененныеПозиции.Добавить(СтрокаПозицииДокумента.Позиция);
						
						СтрокиПоказателей = ИзменениеШтатногоРасписания.Показатели.НайтиСтроки( Новый Структура("ИдентификаторСтрокиПозиции", СтрокаПозицииДокумента.ИдентификаторСтрокиПозиции));
						ЗаполнитьЗначенияПоказателейПозиции(ДанныеПозиции, СтрокиПоказателей, СтрокаПозиции, ТарифнаяСетка);
						
					КонецЦикла;
					
					УправлениеШтатнымРасписанием.РассчитатьФОТПозицийВДокументеИзмененияШтатногоРасписания(
						ИзменениеШтатногоРасписания, ИзменениеШтатногоРасписания.ДатаВступленияВСилу, ИзмененныеПозиции);
					
					Попытка
						ИзменениеШтатногоРасписания.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						
						Если ЗначениеЗаполнено(ИзменениеШтатногоРасписания.Ссылка) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось сохранить изменения в документе';uk='Не вдалося зберегти зміни в документі'") + " - " + Строка(ИзменениеШтатногоРасписания.Ссылка));
						Иначе
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось сохранить изменения позиций штатного расписания во вновь созданном документе';uk='Не вдалося зберегти зміни позицій штатного розкладу в новоствореному документі'"));
						КонецЕсли;
						
					КонецПопытки;
					
				КонецЦикла;
				
			Иначе
				
				СтрокиОрганизации = ТаблицаПозицийКИзменению.Скопировать(, "Организация");
				СтрокиОрганизации.Свернуть("Организация");
				
				Для каждого СтрокаОрганизации Из СтрокиОрганизации Цикл
					
					ИзмененныеПозиции = Новый Массив;
					
					СтруктураПоиска = Новый Структура("Организация");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОрганизации);
					
					СтрокиПозиций = ТаблицаПозицийКИзменению.НайтиСтроки(СтруктураПоиска);
					Для каждого СтрокаПозиции Из СтрокиПозиций Цикл
						
						ПозицияОбъект = СтрокаПозиции.ПозицияШтатногоРасписания.ПолучитьОбъект();
						
						Попытка 
							ПозицияОбъект.Заблокировать();
						Исключение
							
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Не удалось изменить позицию штатного расписания ""%1"".
                                |Возможно, данные позиции редактируются другим пользователем'
                                |;uk='Не вдалося змінити позицію штатного розкладу ""%1"".
                                |Можливо, дані позиції редагуються іншим користувачем'"),
								ПозицияОбъект.Наименование);
							
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
							Продолжить;
							
						КонецПопытки;
						
						ЗаполнитьЗначенияПоказателейПозиции(ПозицияОбъект, ПозицияОбъект.Показатели, СтрокаПозиции, ТарифнаяСетка);
						ИзмененныеПозиции.Добавить(ПозицияОбъект);
						
					КонецЦикла;
					
					Если ИзмененныеПозиции.Количество() > 0  Тогда
						
						УправлениеШтатнымРасписанием.РассчитатьФОТПозицийСправочника(СтрокаОрганизации.Организация, ДатаВступленияВСилу, ИзмененныеПозиции);
						
						Для каждого ПозицияОбъект Из ИзмененныеПозиции Цикл
							
							Попытка
								ПозицияОбъект.Записать();
							Исключение
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось сохранить изменения в позиции';uk='Не вдалося зберегти зміни в позиції'") + " """ + ПозицияОбъект.Наименование + """");
							КонецПопытки;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Применение изменений ФОТ в документах "Изменение плановых начислений"
	РезультатЗапроса = РезультатЗапросаПоИзменениямПлановыхНачислений(ТарифнаяСетка, ДатаВступленияВСилу, МенеджерВременныхТаблиц);
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Показатели = РазрядыКатегорииДолжностей.ПоказателиТарифнойСетки(ТарифнаяСетка, Истина);
		
		ТаблицаИзменений = РезультатЗапроса.Выгрузить().Скопировать(Новый Структура("ИзменениеУчтено", Ложь));
		
		ИзмененияПлановыхНачислений = ТаблицаИзменений.Скопировать(, "Организация,ИзменениеПлановыхНачислений");
		ИзмененияПлановыхНачислений.Свернуть("Организация,ИзменениеПлановыхНачислений");
		
		Для каждого СтрокаИзмененияПлановыхНачислений Из ИзмененияПлановыхНачислений Цикл
			
			Если ЗначениеЗаполнено(СтрокаИзмененияПлановыхНачислений.ИзменениеПлановыхНачислений) Тогда
				
				ИзменениеПлановыхНачислений = СтрокаИзмененияПлановыхНачислений.ИзменениеПлановыхНачислений.ПолучитьОбъект();
				
				Попытка 
					ИзменениеПлановыхНачислений.Заблокировать();
				Исключение
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось изменить данные документа ""%1"".
                        |Возможно, документ редактируется другим пользователем'
                        |;uk='Не вдалося змінити дані документа ""%1"".
                        |Можливо, документ редагується іншим користувачем'"),
						Строка(ИзменениеПлановыхНачислений.Ссылка));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					Продолжить;
					
				КонецПопытки;
				
			Иначе
				
				ИзменениеПлановыхНачислений = Документы.ИзменениеПлановыхНачислений.СоздатьДокумент();
				ИзменениеПлановыхНачислений.Дата = ТекущаяДатаСеанса();
				ИзменениеПлановыхНачислений.Организация = СтрокаИзмененияПлановыхНачислений.Организация;
				ИзменениеПлановыхНачислений.ДатаИзменения = ДатаВступленияВСилу;
				ИзменениеПлановыхНачислений.Ответственный = Пользователи.ТекущийПользователь();
				
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Организация,ИзменениеПлановыхНачислений");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИзмененияПлановыхНачислений);
			
			НовыеСотрудники = Новый Массив;
			
			СтрокиСотрудников = ТаблицаИзменений.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаСотрудника Из СтрокиСотрудников Цикл
				Если ИзменениеПлановыхНачислений.ПоказателиСотрудников.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник") = Неопределено Тогда
					НовыеСотрудники.Добавить(СтрокаСотрудника.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			
			Если НовыеСотрудники.Количество() > 0 Тогда
				ИзменениеПлановыхНачислений.ЗаполнитьДокументПоСпискуСотрудников(НовыеСотрудники, ДатаВступленияВСилу);
			КонецЕсли; 
			
			СотрудникиДляРасчетаФОТ = Новый Массив;
			Для каждого СтрокаСотрудника Из СтрокиСотрудников Цикл
				
				СтруктураПоиска = Новый Структура("Сотрудник,Показатель");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСотрудника);
				
				Для каждого Показатель Из Показатели Цикл
					
					СтруктураПоиска.Показатель = Показатель;
					
					СтрокиПоказателейСотрудника = ИзменениеПлановыхНачислений.ПоказателиСотрудников.НайтиСтроки(СтруктураПоиска);
					Для каждого СтрокаПоказателейСотрудника Из СтрокиПоказателейСотрудника Цикл
						СтрокаПоказателейСотрудника.Значение = СтрокаСотрудника.Тариф;
					КонецЦикла;
					
				КонецЦикла;
				
				СотрудникиДляРасчетаФОТ.Добавить(СтрокаСотрудника.Сотрудник);
				
			КонецЦикла;
			
			// Расчет ФОТ
			Если СотрудникиДляРасчетаФОТ.Количество() > 0 Тогда
				
				ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(
					ИзменениеПлановыхНачислений.Ссылка, ИзменениеПлановыхНачислений.ДатаИзменения);;
				
				СтрокиСотрудников = Новый Массив;
				
				// Подготовка к расчету ФОТ
				РассчитываемыеОбъекты = Новый Соответствие;	
				Сотрудники = Новый Соответствие;
				ТаблицаПоказателей = ЗарплатаКадрыРасширенный.ПоказателиРасчетаСовокупныхТарифныхСтавок();
				
				ОтборПоСотруднику = Новый Структура("Сотрудник");
				
				Для Каждого Сотрудник Из СотрудникиДляРасчетаФОТ Цикл
					
					СтрокаСотрудника = ИзменениеПлановыхНачислений.Сотрудники.Найти(Сотрудник, "Сотрудник");
					Если СтрокаСотрудника = Неопределено Тогда
						СтрокаСотрудника = ИзменениеПлановыхНачислений.Сотрудники.Добавить();
						СтрокаСотрудника.Сотрудник = Сотрудник;
					КонецЕсли; 
					СтрокиСотрудников.Добавить(СтрокаСотрудника);
					
					ОтборПоСотруднику.Вставить("Сотрудник", Сотрудник);
					
					ОписаниеСотрудника = Новый Структура;
					ОписаниеСотрудника.Вставить("Организация", ИзменениеПлановыхНачислений.Организация);
					ОписаниеСотрудника.Вставить("ДатаРасчета", ВремяРегистрации);
					ОписаниеСотрудника.Вставить("Начисления", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
					ОписаниеСотрудника.Вставить("Показатели", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
					
					// Все начисления сотрудника.
					СтрокиПоСотруднику = ИзменениеПлановыхНачислений.НачисленияСотрудников.НайтиСтроки(ОтборПоСотруднику);
					Для Каждого СтрокаНачисления Из СтрокиПоСотруднику Цикл
						
						Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
							Продолжить;
						КонецЕсли;
						
						ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
						ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
						ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
						ДанныеНачисления.Размер = СтрокаНачисления.Размер;
						
					КонецЦикла;
					
					// Заданные в документе показатели начислений сотрудника.
					// Все начисления сотрудника.
					СтрокиПоСотруднику = ИзменениеПлановыхНачислений.ПоказателиСотрудников.НайтиСтроки(ОтборПоСотруднику);
					Для Каждого СтрокаПоказателя Из СтрокиПоСотруднику Цикл
						
						Если СтрокаПоказателя.Значение = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
						ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
						ДанныеПоказателя.ДокументОснование = СтрокаПоказателя.ДокументОснование;
						ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
						
						НоваяСтрокаПоказателя = ТаблицаПоказателей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтрокаСотрудника);
						НоваяСтрокаПоказателя.Период = ВремяРегистрации;
						
					КонецЦикла;
					
					Сотрудники.Вставить(СтрокаСотрудника.Сотрудник, ОписаниеСотрудника);
					
				КонецЦикла;
				
				РассчитываемыеОбъекты.Вставить(ИзменениеПлановыхНачислений.Ссылка, Сотрудники);
				
				// Расчет ФОТ
				РасчетЗарплатыРасширенный.РассчитатьФОТСотрудников(РассчитываемыеОбъекты, ИзменениеПлановыхНачислений.Организация, ВремяРегистрации);
				
				// Заполнение документа результатами расчета.
				ОписаниеОбъекта = РассчитываемыеОбъекты.Получить(ИзменениеПлановыхНачислений.Ссылка);
				
				НачисленияСотрудников = Новый Массив;
				
				Отбор = Новый Структура("Сотрудник, Начисление, ДокументОснование");
				
				Для Каждого ОписаниеСотрудника Из ОписаниеОбъекта Цикл
					Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Значение.Начисления Цикл
						
						Отбор.Вставить("Сотрудник", ОписаниеСотрудника.Ключ);
						Отбор.Вставить("Начисление", ОписаниеНачисления.Начисление);
						Отбор.Вставить("ДокументОснование", ОписаниеНачисления.ДокументОснование);
						
						СтрокиНачисления = ИзменениеПлановыхНачислений.НачисленияСотрудников.НайтиСтроки(Отбор);
						
						Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
							
							Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
								Продолжить;
							КонецЕсли;
							
							СтрокаНачисления.Размер = ОписаниеНачисления.Размер;
							
							НачисленияСотрудников.Добавить(СтрокаНачисления);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
				// Расчет значений совокупных тарифных ставок
				ИсходныеДанные = ЗарплатаКадрыРасширенный.ИсходныеДанныеРасчетаСовокупныхТарифныхСтавок();
				
				НомерСтроки = 1;
				
				Для Каждого СтрокаНачисления Из НачисленияСотрудников Цикл
					
					Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда 
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ИсходныеДанные.Добавить();
					НоваяСтрока.ДатаСобытия = ВремяРегистрации;
					НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник;
					НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
					НоваяСтрока.РазмерФОТ = СтрокаНачисления.Размер;
					НоваяСтрока.НомерСтроки = НомерСтроки;
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла;
				
				ЗначенияСовокупныхТарифныхСтавок = ЗарплатаКадрыРасширенный.ЗначенияСовокупныхТарифныхСтавок(
					ИсходныеДанные, ВремяРегистрации, ТаблицаПоказателей).Выгрузить();
				
				Для Каждого СтрокаСотрудника Из СтрокиСотрудников Цикл
					ДанныеСотрудника = ЗначенияСовокупныхТарифныхСтавок.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
					Если ДанныеСотрудника <> Неопределено Тогда
						СтрокаСотрудника.СовокупнаяТарифнаяСтавка = ДанныеСотрудника.СовокупнаяТарифнаяСтавка;
						СтрокаСотрудника.ВидТарифнойСтавки = ДанныеСотрудника.ВидТарифнойСтавки;
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;
			
			Попытка
				ИзменениеПлановыхНачислений.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				Если ЗначениеЗаполнено(ИзменениеПлановыхНачислений.Ссылка) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось сохранить изменения в документе';uk='Не вдалося зберегти зміни в документі'") + " - " + Строка(ИзменениеПлановыхНачислений.Ссылка));
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось сохранить изменения начислений сотрудников во вновь созданном документе';uk='Не вдалося зберегти зміни нарахувань співробітників в новоствореному документі'"));
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейПозиции(ДанныеПозиции, СтрокиПоказателей, СтрокаСДанными, ТарифнаяСетка)
	
	Для каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
		
		Если СтрокаПоказателя.Показатель = СтрокаСДанными.Показатель Тогда
			
			РазрядКатегорияЗадан = Ложь;
			Если ТарифнаяСетка = ДанныеПозиции.ТарифнаяСетка
				И ЗначениеЗаполнено(ДанныеПозиции.РазрядКатегория) Тогда
				
				РазрядКатегорияЗадан = Истина;
				
			ИначеЕсли ТарифнаяСетка = ДанныеПозиции.ТарифнаяСеткаНадбавки
				И ЗначениеЗаполнено(ДанныеПозиции.РазрядКатегорияНадбавки)Тогда
				
				РазрядКатегорияЗадан = Истина;
				
			КонецЕсли;
			
			Если РазрядКатегорияЗадан Тогда
				
				СтрокаПоказателя.Значение = СтрокаСДанными.Тариф;
				СтрокаПоказателя.ЗначениеМин = СтрокаСДанными.Тариф;
				СтрокаПоказателя.ЗначениеМакс = СтрокаСДанными.Тариф;
				
			Иначе
				
				СтрокаПоказателя.Значение = СтрокаСДанными.ТарифМакс;
				СтрокаПоказателя.ЗначениеМин = СтрокаСДанными.ТарифМин;
				СтрокаПоказателя.ЗначениеМакс = СтрокаСДанными.ТарифМакс;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
