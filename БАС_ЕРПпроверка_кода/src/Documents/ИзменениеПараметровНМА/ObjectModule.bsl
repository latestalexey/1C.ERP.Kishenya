#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		ЗаполнитьПоНематериальномуАктиву(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПринятиеКУчетуНМА") Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		
		ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация, НематериальныйАктив");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитовОбъекта);
		Если ЗначениеЗаполнено(ЗначенияРеквизитовОбъекта.НематериальныйАктив) Тогда
			НМА.Добавить().НематериальныйАктив = ЗначенияРеквизитовОбъекта.НематериальныйАктив;
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.МодернизацияНМА") Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		
		ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация, НематериальныйАктив");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитовОбъекта);
		Если ЗначениеЗаполнено(ЗначенияРеквизитовОбъекта.НематериальныйАктив) Тогда
			НМА.Добавить().НематериальныйАктив = ЗначенияРеквизитовОбъекта.НематериальныйАктив;
			ЗаполнитьОтражениеАмортизационныхРасходов(ЗначенияРеквизитовОбъекта.НематериальныйАктив);
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПереоценкаНМА") Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		
		ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Организация, НематериальныйАктив");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитовОбъекта);
		Если ЗначениеЗаполнено(ЗначенияРеквизитовОбъекта.НематериальныйАктив) Тогда
			НМА.Добавить().НематериальныйАктив = ЗначенияРеквизитовОбъекта.НематериальныйАктив;
			ЗаполнитьОтражениеАмортизационныхРасходов(ЗначенияРеквизитовОбъекта.НематериальныйАктив);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ЗаполнитьОтражениеАмортизационныхРасходов(ПараметрНематериальныйАктив)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестонахождениеНМАБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение,
		|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СтатьяРасходов,
		|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.АналитикаРасходов,
		|	1 КАК Коэффициент
		|ИЗ
		|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
		|			&Период,
		|			НематериальныйАктив = &НематериальныйАктив
		|				И Организация = &Организация) КАК МестонахождениеНМАБухгалтерскийУчетСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
		|				&Период,
		|				НЕ СпособОтраженияРасходовЗаданДокументом
		|					И НематериальныйАктив = &НематериальныйАктив
		|					И Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
		|		ПО МестонахождениеНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|			И МестонахождениеНМАБухгалтерскийУчетСрезПоследних.Организация = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.Организация";
	
	Запрос.УстановитьПараметр("НематериальныйАктив", ПараметрНематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		ОтражениеАмортизационныхРасходов.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,
		Новый Структура("ОтражениеАмортизационныхРасходов", "СтатьяРасходов, АналитикаРасходов"),
		НепроверяемыеРеквизиты,
		Отказ);
	Если НЕ ОтражениеАмортизационныхРасходовФлаг Тогда
		НепроверяемыеРеквизиты.Добавить("ОтражениеАмортизационныхРасходов.Подразделение");
		НепроверяемыеРеквизиты.Добавить("ОтражениеАмортизационныхРасходов.СтатьяРасходов");
		НепроверяемыеРеквизиты.Добавить("ОтражениеАмортизационныхРасходов.АналитикаРасходов");
	КонецЕсли; 
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтражениеАмортизационныхРасходовФлаг И ОтражениеАмортизационныхРасходов.Количество() > 0  Тогда
		ОтражениеАмортизационныхРасходов.Очистить();
	КонецЕсли; 

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ДоступностьИзмененияОбъемаНаработки = СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции;
	
	Если НЕ ДоступностьИзмененияОбъемаНаработки Тогда
		ОбъемНаработкиБУФлаг = Ложь;
		ОбъемНаработкиБУ	 = 0;
	КонецЕсли;
	
	Если Не Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РассчитатьАмортизацию(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ОчиститьЗаписатьДвижения(Движения, "Хозрасчетный");
	
	ТаблицаРеквизитов = ТаблицаРеквизитовДокумента();
	ТаблицаНМА = УчетНМА.ПоготовитьТаблицуНМАИзРеквизитаШапки(НематериальныйАктив);
	
	УчетНМА.ПроверитьВозможностьИзмененияСостоянияНМА(ТаблицаНМА,
		ТаблицаРеквизитов,
		Отказ);
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ИзменениеПараметровНМА.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Для Каждого ТаблицаДвижений Из ДополнительныеСвойства.ТаблицыДляДвижений Цикл
		ПроведениеСервер.ОтразитьДвижения(ТаблицаДвижений.Значение, Движения[ТаблицаДвижений.Ключ], Отказ);
	КонецЦикла;
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если Не Отказ Тогда
		
		Результат = РеглУчетПроведениеСервер.ОтразитьДокумент(
			Новый Структура("Ссылка, Дата, Организация", Ссылка, Дата),,
			МенеджерВременныхТаблицНачисленнойАмортизации());
		
		Если Результат <> Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете Тогда
			ВызватьИсключение ПолучитьТекстОшибкиОтражения();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Функция ПолучитьТекстОшибкиОтражения()
	
	ТекстОшибки = НСтр("ru='Не удалось отразить документ в регл. учете. %Комментарий';uk='Не вдалося відобразити документ в регл. обліку. %Комментарий'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеРегистра.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Регистратор = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат СтрЗаменить(ТекстОшибки, "%Комментарий", Выборка.Комментарий);
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстОшибки, "%Комментарий", "");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент()
	
	Дата = НачалоДня(ТекущаяДатаСеанса());
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
КонецПроцедуры


Функция ТаблицаРеквизитовДокумента()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.Списан) КАК Состояние,
		|	&НематериальныйАктив КАК НематериальныйАктив,
		|	&Регистратор КАК Регистратор,
		|	"""" КАК ИмяСписка,
		|	&Дата КАК Период,
		|	&Дата КАК ДатаРасчета,
		|	ИСТИНА КАК ВыдаватьСообщения");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция МенеджерВременныхТаблицНачисленнойАмортизации()
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("ТаблицаАмортизации", ДополнительныеСвойства.НачисленнаяАмортизация);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(&Организация КАК Справочник.Организации) КАК Организация,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.ОбъектУчета КАК Справочник.НематериальныеАктивы) КАК ОбъектУчета,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СуммаБУ КАК ЧИСЛО) КАК СуммаБУ,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СуммаНУ КАК ЧИСЛО) КАК СуммаНУ,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СуммаПР КАК ЧИСЛО) КАК СуммаПР,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СуммаВР КАК ЧИСЛО) КАК СуммаВР,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов) КАК СтатьяРасходов,
	|	ТаблицаАмортизации.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫРАЗИТЬ(ТаблицаАмортизации.НалоговоеНазначениеКт КАК Справочник.НалоговыеНазначенияАктивовИЗатрат) КАК НалоговоеНазначениеКт
	|ПОМЕСТИТЬ втТаблицаАмортизации
	|ИЗ
	|	&ТаблицаАмортизации КАК ТаблицаАмортизации";
	
	Запрос.Выполнить();
	
	Возврат ВременныеТаблицы;
	
КонецФункции

Процедура РассчитатьАмортизацию(Отказ)
	
	Перем Подразделение;
	
	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	МестонахождениеНМАБухгалтерскийУчетСрезПоследних.Местонахождение
			|ИЗ
			|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
			|			&Период,
			|			НематериальныйАктив = &НематериальныйАктив
			|				И Организация = &Организация) КАК МестонахождениеНМАБухгалтерскийУчетСрезПоследних";
		
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Дата);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		
		РезультатЗапроса = Запрос.Выполнить();
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Подразделение = ВыборкаДетальныеЗаписи.Местонахождение;
		
	КонецЕсли; 
	
	НачисленнаяАмортизация.Очистить();
	
	ТаблицаРеквизиты = ТаблицаРеквизитовДокумента();
	ТаблицаРеквизиты.Колонки.Добавить("Подразделение");
	ТаблицаРеквизиты.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаНМА = УчетНМА.ПоготовитьТаблицуНМАИзРеквизитаШапки(НематериальныйАктив);
	
	ТаблицаНачисленнаяАмортизация = УчетНМА.НачисленнаяАмортизация(
		ТаблицаНМА, ТаблицаРеквизиты, Отказ);
	
	ДополнительныеСвойства.Вставить("НачисленнаяАмортизация", ТаблицаНачисленнаяАмортизация);
	НачисленнаяАмортизация.Загрузить(ТаблицаНачисленнаяАмортизация);

	
КонецПроцедуры


Процедура ЗаполнитьПоНематериальномуАктиву(Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СостоянияНМАОрганизаций.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
		|			,
		|			НематериальныйАктив = &НематериальныйАктив
		|				И Состояние В (ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету))) КАК СостоянияНМАОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НематериальныеАктивы.Ссылка КАК НематериальныйАктив
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|ГДЕ
		|	НематериальныеАктивы.Ссылка = &НематериальныйАктив");
	
	Запрос.УстановитьПараметр("НематериальныйАктив", Основание);
	Пакет = Запрос.ВыполнитьПакет();
	
	Если Не Пакет[0].Пустой() Тогда
		Выборка = Пакет[0].Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;
	
	Если Не Пакет[1].Пустой() Тогда
		НМА.Загрузить(Пакет[1].Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

 

#КонецОбласти

#КонецЕсли