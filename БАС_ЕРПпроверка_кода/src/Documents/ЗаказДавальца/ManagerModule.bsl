#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	ВЫБОР КОГДА Шапка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|		ИНАЧЕ Шапка.СпособДоставки
	|	КОНЕЦ                   КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Т.Склад                 КАК Склад,
	|	Т.ДоставитьПолностью    КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка,
	|		Т.Склад КАК Склад,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ДоставитьПолностью
	|	ИЗ
	|		Документ.ЗаказДавальца.Продукция КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка,
	|		Т.Склад
	|	
	|	ИМЕЮЩИЕ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|			КОНЕЦ) = ИСТИНА
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК Шапка
	|		ПО (Шапка.Ссылка = Т.Ссылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.ВозвратСырьяДавальцу.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ЗаказНаПроизводство.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ОтчетДавальцу.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПередачаДавальцу.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПоступлениеСырьяОтДавальца.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
	Обработки.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСоздатьНаОсновании);
	
	Документы.СчетНаОплатуКлиенту.ДобавитьКомандуСоздатьНаОснованииСчетаНаОплатуЗаказДавальца(КомандыСоздатьНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ВыпускПродукции.ДобавитьКомандуСоздатьНаОснованииЗаказаДавальца(КомандыСоздатьНаОсновании);
	
	Документы.ПередачаМатериаловВПроизводство.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказДавальца) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ЗаказДавальца.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ЗаказДавальца);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКонтрольПередачиПродукции(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКонтрольПоставкиСырьяИМатериалов(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияЗаказаДавальца(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	
	// ФормаСписка
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияЗаказаДавальца(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСписка";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСписка";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСписка";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКонтрольПоставкиСырьяИМатериалов(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСписка";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКонтрольПередачиПродукции(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСписка";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыСмТакже";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасшифровкаСтоимостиПереработки) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Идентификатор = Метаданные.Отчеты.РасшифровкаСтоимостиПереработки.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru='Расшифровка стоимости переработки';uk='Розшифровка вартості переробки'");
		КомандаОтчет.СписокФорм = "ФормаДокумента, ФормаСписка";
		КомандаОтчет.Порядок       = 50;
		КомандаОтчет.РежимИспользованияПараметра = РежимИспользованияПараметраКоманды.Множественный;
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.ФункциональныеОпции = "";
		КомандаОтчет.ВыполнятьЗаписьВФорме = Истина;
		
		КомандаОтчет.ПараметрыФормы.Вставить("КлючВарианта", "СтоимостьПереработки");
		КомандаОтчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		КомандаОтчет.ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Обеспечение

//Используется для получения данных из заказов давальцев, используемых в обработке "Состояние обеспечения заказов".
//Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
//Возвращаемое значение:
// Строка - Текст запроса - Текст запроса для выборки данных:
//                          1) источнике данных о потребности:
//                          - "Заказ", "КодСтроки", "НомерСтроки",
//                          2) аналитики потребности:
//                          - "Номенклатура", "Характеристика", "Склад", "Назначение", "Подразделение",
//                          3) текущем варианте обеспечения:
//                          - "ВариантОбеспечения", "ДатаОтгрузки", "Количество",
//                          4) общих для заказа параметрах обеспечения:
//                          - "ЖелаемаяДатаОтгрузки", "НеОтгружатьЧастями".
//                          5) реквизиты документа отображаемые в форме обработки состояния обеспечения":
//                          - "Упаковка", "Дата", "Партнер", "Статус", "СтатусИспользуется", "Дата".
//                          
//                          "Количество" - количество из заказа, по которому не оформлена накладная,
//                          поступает из таблицы "ВтРегистрЗаказыКлиентов", где предварительно рассчитывается
//                          по ресурсу "Заказано", регистра накопления "ЗаказыКлиентов".
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Ссылка                КАК Заказ,
		|	Т.КодСтроки             КАК КодСтроки,
		|	Т.НомерСтроки           КАК НомерСтроки,
		|	0                       КАК НомерСтрокиПродукция,
		|	НЕОПРЕДЕЛЕНО            КАК Продукция,
		|	НЕОПРЕДЕЛЕНО            КАК Этап,
		|	0                       КАК ЭтапПорядок,
		|
		|	Т.Номенклатура          КАК Номенклатура,
		|	Т.Характеристика        КАК Характеристика,
		|	Т.Склад                 КАК Склад,
		|	Т.Ссылка.Назначение     КАК Назначение,
		|	Т.Ссылка.Подразделение  КАК Подразделение,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) КАК ВариантОбеспечения,
		|	Т.ДатаОтгрузки          КАК ДатаОтгрузки,
		|	Т.Упаковка              КАК Упаковка,
		|
		|	ДанныеУчета.Количество  КАК Количество,
		|
		|	Т.Ссылка.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	Т.Ссылка.НеОтгружатьЧастями   КАК НеОтгружатьЧастями,
		|	Т.Ссылка.Дата                 КАК Дата,
		|	Т.Ссылка.Партнер              КАК Партнер,
		|	Т.Ссылка.Статус               КАК Статус,
		|	&ИспользоватьСтатусыЗаказовДавальцев КАК СтатусИспользуется
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРегистрЗаказыКлиентов КАК ДанныеУчета
		|		ПО Т.Ссылка    = ДанныеУчета.Заказ
		|		 И Т.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	Т.Ссылка.Проведен
		|
		|{ГДЕ
		|	Т.Ссылка.*          КАК Заказ,
		|	Т.Склад.*           КАК Склад,
		|	Т.Ссылка.Менеджер.* КАК Менеджер,
		|	Т.Ссылка.Партнер.*  КАК Партнер}";

	Возврат ТекстЗапроса;

КонецФункции

Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено, ЗависимыеРеквизиты = Неопределено) Экспорт

	Реквизиты = "КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС";
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(Реквизиты, ЗависимыеРеквизиты);

	СтруктураДействий = Новый Структура;
	Если Форма <> Неопределено Тогда
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	ЗаполнитьДатыОтгрузки = Ложь;
	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДата()), Объект.ЖелаемаяДатаОтгрузки);

	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	ОбеспечениеСервер.СвернутьСтрокиДляОтгрузкиОднойДатой(ДанныеЗаполнения, Объект.НеОтгружатьЧастями);
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.Продукция.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.Продукция[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;

			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Иначе
			ТекСтрокаТовары = Объект.Продукция.Вставить(Объект.Продукция.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;

		//Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);

		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад");

		Если Объект.НеОтгружатьЧастями Тогда
			ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок"
				Или ДатаПоУмолчанию > Объект.ДатаОтгрузки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.ДатаОтгрузки = ДатаПоУмолчанию;
				ЗаполнитьДатыОтгрузки = Истина;
			КонецЕсли;
		ИначеЕсли СтрокаОбеспечения.Отгружено = 0 Тогда
			ТекСтрокаТовары.ДатаОтгрузки = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;

	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказДавальца));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Если ЗаполнитьДатыОтгрузки Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Продукция, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Истина;
КонецФункции

Функция ПараметрыВыбораОбеспечения(Статус) Экспорт

	Параметры = Новый Структура("ПутиКДанным, ИмяТабличнойЧасти, СтатусКВыполнению, ИмяМенеджераРегистра",
		Новый Соответствие(), "Продукция", Статус <> Перечисления.СтатусыЗаказовДавальцев.НеСогласован, "ЗаказыКлиентов");

	Параметры.ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	Возврат Параметры;

КонецФункции

#КонецОбласти

#Область Статус

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовДавальцев[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР КОГДА ТаблицаДокументов.Статус = &Статус ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаказДавальца КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Формирует запрос проверки при автосмене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаказДавальца КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Проверок не требуется
	
КонецФункции

// Формирует массив допустимых статусов на основании настроек программы
//
// ВозвращаемоеЗначение
//	Массив - массив допустимых статусов
//
Функция ДопустимыеСтатусыВводаНаОсновании() Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	Возврат МассивДопустимыхСтатусов;
	
КонецФункции

#КонецОбласти

#Область РасчетСостояний

// Осуществляет вычисление текущего состояния заказа давальца
//
// Параметры:
//	ЗаказДавальца            - ДокументСсылка.ЗаказДавальца - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ЗаказДавальца, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаказДавальца) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
	
		УстановитьПривилегированныйРежим(Истина); 
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА НЕ ДокументЗаказКлиента.Проведен 
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
			|		ИНАЧЕ
			|			ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)) 
			|	КОНЕЦ КАК Состояние,
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаказКлиента.Проведен)
			|			ТОГДА ЛОЖЬ
			|		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)
			|			ТОГДА ЛОЖЬ
			|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|				И &ТекущаяДата > СостоянияЗаказовКлиентов.ДатаСобытия 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СостояниеПросрочено,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты,0) КАК СуммаОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОплаты,0) КАК ПроцентОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки,0) КАК СуммаОтгрузки,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОтгрузки,0) КАК ПроцентОтгрузки,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|	ВЫБОР
			|		КОГДА
			|			ДокументЗаказКлиента.Проведен И
			|			((ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
			|			ДокументЗаказКлиента.СуммаДокумента > 0) ИЛИ
			|			ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|		ТОГДА
			|			ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаДолга,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентДолга,0) КАК ПроцентДолга,
			|	ВЫБОР
			|		КОГДА
			|			ДокументЗаказКлиента.Проведен И
			|			ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|		ТОГДА
			|			РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ЗаказДавальца КАК ДокументЗаказКлиента
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,,ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
			|ПО
			|	СостоянияЗаказовКлиентов.Заказ = ДокументЗаказКлиента.Ссылка
			|ГДЕ
			|	ДокументЗаказКлиента.Ссылка = &ЗаказДавальца
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказДавальца, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ЗаказДавальца", ЗаказДавальца);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаказДавальца));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает текст запроса для расчета состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийЗаказов() Экспорт
	
	ТекстЗапроса ="
		|ВЫБРАТЬ 
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказКлиента.Проведен
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
		|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
		|// ОЖИДАЕТСЯ АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству) И
		|		ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения)
		|// ГОТОВ К ОБЕСПЕЧЕНИЮ ///////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется ЕСТЬ NULL 
		|		И ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется
		|		И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОбеспечению)
		|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ОТГРУЗКИ ////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству) И
		|		ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки)
		|// ОЖИДАЕТСЯ ОБЕСПЕЧЕНИЕ ////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется ЕСТЬ NULL 
		|		И ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение)
		|// ГОТОВ К ОТГРУЗКЕ //////////////////////////////////////////////////////////
		|	КОГДА
		|		(НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется ЕСТЬ NULL 
		|		И Не ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется)
		|		ИЛИ ВТРасхожденияОрдерНакладная.ТребуетсяОрдер
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОтгрузке)
		|// В ПРОЦЕССЕ ОТГРУЗКИ //////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|		И (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И (ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) <> 0 
		|			ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0) <> 0
		|			ИЛИ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) <> 0)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки)
		|// ОЖИДАЕТСЯ ОПЛАТА ПОСЛЕ ОТГРУЗКИ /////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|		ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)) И
		|		ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток, 0) > 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки)
		|// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт) И &КонтролироватьЗакрытиеЗаказаДавальца
		|		ИЛИ
		|		ЕСТЬNULL(УслугиДавальцуКОформлению.КОформлению,0) > 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКЗакрытию)
		|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус В
		|				(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству), 
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
		|КОНЕЦ КАК Состояние,
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказКлиента.Проведен
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1)
		|// ДАТА СОГЛАСОВАНИЯ ///////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1) //ДокументЗаказКлиента.ДатаСогласования
		|// ДАТА АВАНСА /////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству) И
		|		ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПРЕДОПЛАТЫ /////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству) И
		|		ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|		ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке))
		|		И ДокументЗаказКлиента.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
		|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ЕСТЬNULL(ДатыОтгрузкиЗаказовКлиентов.МинимальнаяДатаОтгрузки, ДокументЗаказКлиента.ДатаОтгрузки)
		|// ДАТА ОПЛАТЫ ПОСЛЕ ОТГРУЗКИ //////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)) И
		|		ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток, 0) > 0
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|КОНЕЦ КАК ДатаСобытия,
		|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) И
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОплаты,
		|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) И
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0)) * 100 / ДокументЗаказКлиента.СуммаДокумента КАК ЧИСЛО(15, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОплаты,
		|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(СуммыОтгрузкиПоЗаказамДавальцев.СуммаОтгрузки,0)
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОтгрузки,
		|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И 
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(СуммыОтгрузкиПоЗаказамДавальцев.СуммаОтгрузки,0)*100/ДокументЗаказКлиента.СуммаДокумента  КАК ЧИСЛО(15, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОтгрузки,
		|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		((ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаДолга,
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ((ВЫБОР КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) > 0 ТОГДА
		|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0)
		|		ИНАЧЕ
		|			ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0)
		|		КОНЕЦ
		|		* 100
		|		/ ДокументЗаказКлиента.СуммаДокумента) КАК ЧИСЛО(15, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентДолга,
		|// РАСХОЖДЕНИЯ ОРДЕР-НАКЛАДНАЯ//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен
		|		И ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|		И ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(ВТРасхожденияОрдерНакладная.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ)
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК ЕстьРасхожденияОрдерНакладная,
		|//ССЫЛКА НА ЗАКАЗ///////////////////////////////////////////////////////
		|	ДокументЗаказКлиента.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказДавальца КАК ДокументЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,,ЗаказКлиента В (&МассивЗаказов)) КАК РасчетыСКлиентамиОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(,,,,ЗаказКлиента В (&МассивЗаказов)) КАК ЗаказыКлиентовОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&МассивЗаказов)) КАК ТоварыКОтгрузкеОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыАктуальностиЗаказовКлиентов КАК ДатыАктуальностиРасчетов
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ДатыАктуальностиРасчетов.ОбъектРасчетов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыОтгрузкиЗаказовКлиентов КАК ДатыОтгрузкиЗаказовКлиентов
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ДатыОтгрузкиЗаказовКлиентов.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТСостоянияОбеспечения КАК ВТСостоянияОбеспечения
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ВТСостоянияОбеспечения.Заказ
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТРасхожденияОрдерНакладная КАК ВТРасхожденияОрдерНакладная
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ВТРасхожденияОрдерНакладная.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТСуммыОтгрузкиПоЗаказамДавальцев КАК СуммыОтгрузкиПоЗаказамДавальцев
		|ПО
		|	ДокументЗаказКлиента.Ссылка = СуммыОтгрузкиПоЗаказамДавальцев.Заказ
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТУслугиДавальцуКОформлению КАК УслугиДавальцуКОформлению
		|ПО
		|	ДокументЗаказКлиента.Ссылка = УслугиДавальцуКОформлению.Заказ
		|ГДЕ
		|	ДокументЗаказКлиента.Ссылка В (&МассивЗаказов)
		|
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                  КАК Дата,
	|	ДанныеДокумента.Организация           КАК Организация,
	|	ДанныеДокумента.Партнер               КАК Партнер,
	|	ДанныеДокумента.Контрагент            КАК Контрагент,
	|	ДанныеДокумента.Валюта                КАК Валюта,
	|	ДанныеДокумента.Валюта                КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента        КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаДокумента        КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен              КАК Проведен,
	|	ДанныеДокумента.Договор               КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов       КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ЗаказДавальца КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата                  = Выборка.Дата;
		Организация           = Выборка.Организация;
		Партнер               = Выборка.Партнер;
		Контрагент            = Выборка.Контрагент;
		Договор               = Выборка.Договор;
		ПорядокРасчетов       = Выборка.ПорядокРасчетов;
		Валюта                = Выборка.Валюта;
		ВалютаВзаиморасчетов  = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		СуммаВзаиморасчетов   = Выборка.СуммаВзаиморасчетов;
		СуммаДокумента        = Выборка.СуммаДокумента;
	Иначе
		Дата                  = Дата(1,1,1);
		Организация           = Справочники.Организации.ПустаяСсылка();
		Партнер               = Справочники.Партнеры.ПустаяСсылка();
		Контрагент            = Справочники.Контрагенты.ПустаяСсылка();
		Договор               = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов       = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		Валюта                = Справочники.Валюты.ПустаяСсылка();
		ВалютаВзаиморасчетов  = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		СуммаВзаиморасчетов   = 0;
		СуммаДокумента        = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, Валюта, ХозяйственнаяОперация, СуммаДокумента, ВалютаВзаиморасчетов, СуммаВзаиморасчетов",
		Дата,
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		Валюта,
		ХозяйственнаяОперация,
		СуммаДокумента,
		ВалютаВзаиморасчетов,
		СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Заполняет поле "Назначение" в табличной части по заказам давальцев
//
// Возвращаемое значение:
//	Товары - ТабличнаяЧасть - Табличная часть, в которой необходимо заполнить поле назначение
//
Процедура ЗаполнитьНазначенияПоЗаказамДавальцев(Товары, СписокЗаказов) Экспорт
	
	Если Не Товары.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ссылка     КАК ЗаказДавальца,
	|	Назначение КАК Назначение
	|ИЗ
	|	Документ.ЗаказДавальца
	|ГДЕ
	|	Ссылка В(&СписокЗаказов)");
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	ТаблицаНазначений = Запрос.Выполнить().Выгрузить();
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	Для Каждого СтрТовары из Товары Цикл
		Если СтрТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			СтрТовары.Назначение = ПустоеНазначение;
		Иначе	
			СтрокаСНазначением = ТаблицаНазначений.Найти(СтрТовары.ЗаказДавальца, "ЗаказДавальца");
			СтрТовары.Назначение = ?(СтрокаСНазначением = Неопределено, ПустоеНазначение, СтрокаСНазначением.Назначение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет "ВременнаяТаблицаМатериалов" данными о материалах по данным спецификаций
//
// Параметры:
//	ПараметрыСпецификаций - Структура - параметры для формирования списка материалов, требуемых для выпуска продукции
//
// Возвращаемое значение:
//	ВременнаяТаблицаМатериалов - ТаблицаЗначений - таблица, в которую будут помещены рассчитанные данные
//
Процедура МатериалыПоСпецификациям(ПараметрыСпецификаций, ВременнаяТаблицаМатериалов) Экспорт
	
	УровеньВхождений = 0;
	
	Пока ПараметрыСпецификаций.МассивДанных.Количество() > 0 Цикл
		
		УровеньВхождений = УровеньВхождений + 1;
		
		Если УровеньВхождений > 1000 Тогда // Слишком много вложенных спецификаций, похоже на взаимное пересечение
			
			ТекстОшибки = НСтр("ru='При попытке получить перечень материалов по спецификации произошла ошибка.
                                     |Количество вложенных спецификаций превысило 1000, возможно в базе данных созданы пересекающиеся спецификации.'
                                     |;uk='При спробі отримати перелік матеріалів по специфікації виникла помилка.
                                     |Кількість вкладених специфікацій перевищила 1000, можливо в базі даних створені пересічні специфікації.'");
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Результат = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(
			ПараметрыСпецификаций.МассивДанных,
			,
			,
			ПараметрыСпецификаций.ПереченьДанных);
		
		МассивДанных = Новый Массив;
		МассивКлючей = Новый Массив;
		
		Для Х = 0 по Результат.Количество() - 1 Цикл
			
			Если Результат[Х] = Неопределено Тогда
				Продолжить; // Спецификация не указана
			КонецЕсли;
			
			МатериалыИУслуги = Результат[Х].МатериалыИУслуги;
			
			Для Каждого СтрТЧ из МатериалыИУслуги Цикл
				
				Если СтрТЧ.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации Тогда
					
					ДанныеПоНоменклатуре = ДанныеПоНоменклатуре(
						СтрТЧ,
						СтрТЧ.ИсточникПолученияПолуфабриката,
						ПараметрыСпецификаций.Подразделение);
					
					МассивДанных.Добавить(ДанныеПоНоменклатуре);
					МассивКлючей.Добавить(ПараметрыСпецификаций.МассивКлючей[Х]);
					
				Иначе
					
					НоваяСтрока = ВременнаяТаблицаМатериалов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТЧ);
					НоваяСтрока.КодСтрокиПродукция = ПараметрыСпецификаций.МассивКлючей[Х];
					НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыСпецификаций.МассивДанных = МассивДанных;
		ПараметрыСпецификаций.МассивКлючей = МассивКлючей;
		
	КонецЦикла;
	
	Если ВременнаяТаблицаМатериалов.Количество() > 0 Тогда
		ВременнаяТаблицаМатериалов.Свернуть("Номенклатура,Характеристика,КодСтрокиПродукция,Упаковка,ТипНоменклатуры", "КоличествоУпаковок, Количество");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с данными для получения перечня материалов согласно спецификации
//
// Параметры:
//	СтрокаДанных		- СтрокаТаблицыЗначений - строка с данными для заполнения результирующей таблицы
//	Спецификация		- СправочникСсылка.РесурсныеСпецификации - спецификация для добавления в результирующую структуру
//	Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение для добавления в результирующую структуру
//	НачалоПроизводства	- Дата - дата начала производства
//
// Возвращаемое значение:
//	Структура - структура с результирующими данными
//
Функция ДанныеПоНоменклатуре(СтрокаДанных, Спецификация, Подразделение, НачалоПроизводства = '00010101') Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	ДанныеПоНоменклатуре.Вставить("Номенклатура",		СтрокаДанных.Номенклатура);
	ДанныеПоНоменклатуре.Вставить("Характеристика",		СтрокаДанных.Характеристика);
	ДанныеПоНоменклатуре.Вставить("Количество",			СтрокаДанных.Количество);
	ДанныеПоНоменклатуре.Вставить("Упаковка",			СтрокаДанных.Упаковка);
	ДанныеПоНоменклатуре.Вставить("НачалоПроизводства",	НачалоДня(НачалоПроизводства));
	ДанныеПоНоменклатуре.Вставить("Спецификация",		Спецификация);
	ДанныеПоНоменклатуре.Вставить("Подразделение",		Подразделение);
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Осуществляет инициализацию структуры состояния расчетов
//
// Возвращаемое значение:
//	СтруктураСостоянияРасчетов - Структура - 
//
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("Состояние", Перечисления.СостоянияЗаказовКлиентов.ПустаяСсылка());
	СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено", Ложь);
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИницициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами",  1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление",        2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение",        3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка",           4);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка",   5);
	СтруктураСостояние.Вставить("ВыводитьТаблицуУслугДавальцуКОформлению", 6);
	
	СтруктураСостояние.Вставить("ЭтоЗаказ",                          Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки",    Истина);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыОтгрузки",         ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов"));
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка",               "Продукция");
	СтруктураСостояние.Вставить("ИмяТЧТоварыПоступление",            "Материалы");
	СтруктураСостояние.Вставить("ИмяПоляСумма",                      "Сумма");
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка",          НСтр("ru='Продукция';uk='Продукція'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление",       НСтр("ru='Сырье и материалы';uk='Сировина й матеріали'"));
	
	СтруктураДопЗапросов = Новый Структура;
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ", ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ());
	
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", СтруктураДопЗапросов);
	
	Возврат СтруктураСостояние
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ()
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	Сумма(ДокументТовары.Сумма) КАК СуммаСНДС,
	|	ДокументТовары.Склад КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	ВтДокументы.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Упаковка,
	|	ДокументТовары.Склад,
	|	ВтДокументы.ДокументСсылка,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ДокументТовары.Упаковка
	|	КОНЕЦ
	|
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьСтоимостьСобственныхМатериалов(МассивСтрок, Период, МатериалыДавальца) Экспорт
	
	ТаблицаЗатрат = Новый ТаблицаЗначений;
	ТаблицаЗатрат.Колонки.Добавить("КодСтроки",Новый ОписаниеТипов("Число"));
	ТаблицаЗатрат.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗатрат.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗатрат.Колонки.Добавить("ВидЦены",Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаЗатрат.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ПереченьДанных = Новый Массив();
	ПереченьДанных.Добавить("МатериалыИУслуги");
	ПереченьДанных.Добавить("Трудозатраты");
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоНоменклатуре = Новый Структура("Номенклатура, Характеристика, Количество, ВидЦены, КодСтроки, Количество, Спецификация");
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Строка);
		ТабличныеЧасти = Справочники.РесурсныеСпецификации.ДанныеСпецификацииСПолуфабрикатами(ДанныеПоНоменклатуре, Истина, , ПереченьДанных);
		
		ТабличныеЧасти.МатериалыИУслуги.Колонки.Добавить("КодСтроки",Новый ОписаниеТипов("Число"));
		ТабличныеЧасти.МатериалыИУслуги.ЗаполнитьЗначения(Строка.КодСтроки, "КодСтроки");
		
		ТабличныеЧасти.МатериалыИУслуги.Колонки.Добавить("ВидЦены",Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ТабличныеЧасти.МатериалыИУслуги.ЗаполнитьЗначения(Строка.ВидЦены, "ВидЦены");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТабличныеЧасти.МатериалыИУслуги, ТаблицаЗатрат);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗатрат.КодСтроки,
	|	ТаблицаЗатрат.Номенклатура,
	|	ТаблицаЗатрат.Характеристика,
	|	ТаблицаЗатрат.Количество,
	|	ТаблицаЗатрат.ВидЦены
	|ПОМЕСТИТЬ ВТТаблицаЗатрат
	|ИЗ
	|	&ТаблицаЗатрат КАК ТаблицаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказДавальцаМатериалы.КодСтрокиПродукция,
	|	ЗаказДавальцаМатериалы.Номенклатура,
	|	ЗаказДавальцаМатериалы.Характеристика,
	|	ЗаказДавальцаМатериалы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТМатериалыДавальца
	|ИЗ
	|	&МатериалыДавальца КАК ЗаказДавальцаМатериалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаМатериалов.КодСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА ВТТаблицаМатериалов.Количество - ЕСТЬNULL(ВТМатериалыДавальца.Количество, 0) > 0
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (ВТТаблицаМатериалов.Количество - ЕСТЬNULL(ВТМатериалыДавальца.Количество, 0))
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСобственныхМатериалов
	|ИЗ
	|	ВТТаблицаЗатрат КАК ВТТаблицаМатериалов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМатериалыДавальца КАК ВТМатериалыДавальца
	|		ПО ВТТаблицаМатериалов.КодСтроки = ВТМатериалыДавальца.КодСтрокиПродукция
	|			И ВТТаблицаМатериалов.Номенклатура = ВТМатериалыДавальца.Номенклатура
	|			И ВТТаблицаМатериалов.Характеристика = ВТМатериалыДавальца.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТТаблицаМатериалов.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|			И ВТТаблицаМатериалов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВТТаблицаМатериалов.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаМатериалов.КодСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаЗатрат",     ТаблицаЗатрат);
	Запрос.УстановитьПараметр("Период",            Период);
	Запрос.УстановитьПараметр("МатериалыДавальца", МатериалыДавальца);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураОтбора = Новый Структура("КодСтроки");
	Для Каждого Строка Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		
		Если Выборка.НайтиСледующий(СтруктураОтбора) Тогда
			Строка.СуммаСобственныхМатериалов = Выборка.СуммаСобственныхМатериалов;
		КонецЕсли;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Заполнение

// Функция возвращает результат запроса с информацией о распределении потребностей в материалах
//
// Параметры:
//	Параметры - Структура - параметры для заполнения материалов
//
// Возвращаемое значение:
//	РезультатЗапроса - информацией о распределении потребностей в материалах по строкам документа
//
Функция ПолучитьРезультатЗапросаПоПотребностям(Параметры)
	
	ТекстЗапроса =
	// Материалы, которые уже поступили по заказу
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОбороты.КодСтроки,
	|	ЗаказыПоставщикамОбороты.ЗаказаноРасход КАК Получено
	|ПОМЕСТИТЬ ПоступившиеМатериалы
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(, , Период, ЗаказПоставщику = &ЗаказДавальца) КАК ЗаказыПоставщикамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Материалы, указанные в документе
	|ВЫБРАТЬ
	|	Заказ.ДатаПоступления,
	|	Заказ.Номенклатура,
	|	Заказ.Характеристика,
	|	Заказ.Упаковка,
	|	Заказ.КоличествоУпаковок,
	|	Заказ.Количество,
	|	Заказ.ВидЦены,
	|	Заказ.Цена,
	|	Заказ.Сумма,
	|	Заказ.КодСтроки,
	|	Заказ.Склад,
	|	Регистр.Получено
	|ПОМЕСТИТЬ ВтМатериалы
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК Заказ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПоступившиеМатериалы КАК Регистр
	|	ПО
	|		Заказ.КодСтроки = Регистр.КодСтроки
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказДавальца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Информация о потребности в материалах и продукции, а именно:
	//		- сколько продукции требуется и сколько было заказано
	//		- сколько материалов потребовалось после заказа продукции и сколько заказано
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Потребности.Регистратор) = ТИП(Документ.ЗаказДавальца)
	|				И НЕ Потребности.ПотребностьПриход = 0 ТОГДА
	|		""Продукция""
	|	КОГДА ТИПЗНАЧЕНИЯ(Потребности.Регистратор) = ТИП(Документ.ЗаказНаПроизводство)
	|				И Потребности.КЗаказуПриход < 0 ТОГДА
	|		""Продукция""
	|	ИНАЧЕ
	|		""Материал""
	|	КОНЕЦ							КАК ТипТовара,
	|	Потребности.Регистратор			КАК Регистратор,
	|	Потребности.Номенклатура		КАК Номенклатура,
	|	Потребности.Характеристика		КАК Характеристика,
	|	Потребности.Склад				КАК Склад,
	|	Потребности.Назначение			КАК Назначение,
	|	Потребности.ПотребностьПриход	КАК Требуется,
	|	ВЫБОР
	|		КОГДА Потребности.КЗаказуПриход < 0
	|			ТОГДА -Потребности.КЗаказуПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ							КАК Заказано
	|ПОМЕСТИТЬ Потребности
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Назначение В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					Справочник.Назначения КАК Т
	|				ГДЕ
	|					Т.Заказ = &ЗаказДавальца)) КАК Потребности
	|ГДЕ
	|	(ТИПЗНАЧЕНИЯ(Потребности.Регистратор) = ТИП(Документ.ЗаказДавальца)
	|			ИЛИ ТИПЗНАЧЕНИЯ(Потребности.Регистратор) = ТИП(Документ.ЗаказНаПроизводство))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Если таблица не пустая, значит заказы на производство оформлены не на всю продукцию
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСтроки
	|ПОМЕСТИТЬ ЗаказНеОбеспечен
	|ИЗ
	|	(ВЫБРАТЬ
	|		Потребности.Номенклатура	КАК Номенклатура,
	|		Потребности.Характеристика	КАК Характеристика,
	|		Потребности.Склад			КАК Склад
	|	ИЗ
	|		Потребности КАК Потребности
	|	ГДЕ
	|		Потребности.ТипТовара = ""Продукция""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Потребности.Номенклатура,
	|		Потребности.Характеристика,
	|		Потребности.Склад
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Потребности.Требуется) > СУММА(Потребности.Заказано)) КАК НеобеспеченныеСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Определим насколько необходимо изменить количество материалов в заказе давальца
	|ВЫБРАТЬ
	|	Потребности.Номенклатура	КАК Номенклатура,
	|	Потребности.Характеристика	КАК Характеристика,
	|	Потребности.Склад			КАК Склад,
	|	ВЫБОР КОГДА Потребности.ТребуетсяОстаток > 0 ТОГДА
	|		Потребности.ТребуетсяОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ						КАК УвеличениеЗаказа,
	|	ВЫБОР КОГДА Потребности.ТребуетсяОстаток < 0 ТОГДА
	|		Потребности.ТребуетсяОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ						КАК УменьшениеЗаказа
	|ПОМЕСТИТЬ Отклонения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Потребности.Номенклатура							КАК Номенклатура,
	|		Потребности.Характеристика							КАК Характеристика,
	|		Потребности.Склад									КАК Склад,
	|		МАКСИМУМ(НеОбеспечено.ЕстьСтроки)					КАК ЕстьНеОбСтроки,
	|		СУММА(Потребности.Требуется - Потребности.Заказано)	КАК ТребуетсяОстаток
	|	ИЗ
	|		Потребности КАК Потребности
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ЗаказНеОбеспечен КАК НеОбеспечено
	|		ПО
	|			(ИСТИНА)
	|	ГДЕ
	|		Потребности.ТипТовара = ""Материал""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Потребности.Номенклатура,
	|		Потребности.Характеристика,
	|		Потребности.Склад
	|	) КАК Потребности
	|
	|ГДЕ
	//	Если заказана не вся продукция, то нет смысла уменьшать заказанное количество, т.к. материалы еще могут понадобиться
	|	(Потребности.ЕстьНеОбСтроки ЕСТЬ НЕ NULL И Потребности.ТребуетсяОстаток > 0
	//		Если заказана вся продукция, то корректируем заказанное количество материалов в заказе давальцу, согласно данным заказов на производство
	|		ИЛИ Потребности.ЕстьНеОбСтроки ЕСТЬ NULL И НЕ Потребности.ТребуетсяОстаток = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Итоговая таблица для распределения отклонений по строкам материалов из заказа давальца
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Отклонения.Номенклатура,	ВтМатериалы.Номенклатура)	КАК Номенклатура,
	|	ЕСТЬNULL(Отклонения.Характеристика,	ВтМатериалы.Характеристика)	КАК Характеристика,
	|	ЕСТЬNULL(Отклонения.Склад,			ВтМатериалы.Склад)			КАК Склад,
	|
	|	ВЫБОР КОГДА Отклонения.Номенклатура ЕСТЬ НЕ NULL ТОГДА
	|		Отклонения.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ВтМатериалы.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ										КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Отклонения.УвеличениеЗаказа, 0)	КАК УвеличениеЗаказа,
	|	ЕСТЬNULL(Отклонения.УменьшениеЗаказа, 0)	КАК УменьшениеЗаказа,
	|	ВтМатериалы.ДатаПоступления					КАК ДатаПоступления,
	|	ВтМатериалы.Упаковка						КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)			КАК Коэффициент,
	|	ВтМатериалы.КоличествоУпаковок				КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВтМатериалы.Количество, 0)			КАК Количество,
	|	ЕСТЬNULL(ВтМатериалы.Получено, 0)			КАК КоличествоПолучено,
	|	ВтМатериалы.ВидЦены							КАК ВидЦены,
	|	ВтМатериалы.Цена							КАК Цена,
	|	ВтМатериалы.Сумма							КАК Сумма,
	|	ВтМатериалы.КодСтроки						КАК КодСтроки
	|ИЗ
	|	Отклонения КАК Отклонения
	|
	|	ПОЛНОЕ СОЕДИНЕНИЕ ВтМатериалы КАК ВтМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО
	|			ВтМатериалы.Упаковка = Упаковки.Ссылка
	|	ПО
	|		Отклонения.Номенклатура = ВтМатериалы.Номенклатура
	|		И Отклонения.Характеристика = ВтМатериалы.Характеристика
	|		И Отклонения.Склад = ВтМатериалы.Склад
	|
	|ИТОГИ
	|	МАКСИМУМ(УвеличениеЗаказа),
	|	МИНИМУМ(УменьшениеЗаказа),
	|	МАКСИМУМ(ЕдиницаИзмерения)
	|ПО
	|	ОБЩИЕ,
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Упаковки",
		"ВтМатериалы.Номенклатура"));
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаказДавальца", Параметры.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();
	
КонецФункции

// Заполняет таблицу "Сырье и материалы для производства" по данным фактической потребности производства
//
// Параметры:
//	Параметры - Структура - параметры для заполнения материалов
//	Материалы - ДанныеФормыКоллекция - таблица материалов, в которую будут помещены данные
//
// Возвращаемое значение:
//	Булево - Истина: таблица материалов перезаполнена; Ложь: таблица материалов не тронута
//
Функция ЗаполнитьПоФактическойПотребности(Параметры, Материалы) Экспорт
	
	// Получим отклонение в потредности, которое образовалось после создания заказов на проивзводство
	Результат = ПолучитьРезультатЗапросаПоПотребностям(Параметры);
	
	Выборка0 = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Не Выборка0.Следующий() или (Выборка0.УвеличениеЗаказа = 0 И Выборка0.УменьшениеЗаказа = 0) Тогда
		Возврат Ложь; // Нет данных вообще, либо нет данных к изменению
	КонецЕсли;
	
	Материалы.Очистить(); // очистим текущую ТЧ
	
	ПоступлениеОднойДатой = Параметры.ПоступлениеОднойДатой;
	ДатаПоступления = Параметры.ДатаПоступления;
	
#Область ВыборкаПоГруппировкам
	ВыборкаН = Выборка0.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаН.Следующий() Цикл
	
	ВыборкаХ = ВыборкаН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаХ.Следующий() Цикл
	
	ВыборкаС = ВыборкаХ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаС.Следующий() Цикл
#КонецОбласти
		
		КРаспределению = ВыборкаС.УвеличениеЗаказа + ВыборкаС.УменьшениеЗаказа; // одно из значений всегда равно 0
		
		// В этом цикле происходит попытка уменьшить заказанное количество,
		// а также добавляются строки материалов, в которых количество не меняется.
		ДетальнаяВыборка = ВыборкаС.Выбрать();
		Пока ДетальнаяВыборка.Следующий() Цикл
			
			ДоступноДляКорректировки = ДетальнаяВыборка.Количество - ДетальнаяВыборка.КоличествоПолучено;
			
			Если ДетальнаяВыборка.Количество = 0 Тогда
				Продолжить;
				
			ИначеЕсли ДоступноДляКорректировки = ДетальнаяВыборка.Количество
				И ДетальнаяВыборка.Количество + КРаспределению <= 0 Тогда
				
				КРаспределению = ДетальнаяВыборка.Количество + КРаспределению;
				Продолжить; // вместо того, чтобы "удалить" строку, мы ее не "добавляем"
				
			КонецЕсли;
			
			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальнаяВыборка);
			
			Если ПоступлениеОднойДатой Тогда
				НоваяСтрока.ДатаПоступления = ДатаПоступления;
			КонецЕсли;
			
			Если КРаспределению >= 0					// Ничего не делаем, просто добавим новую строку в конец, если потребуется
				Или ДоступноДляКорректировки = 0 Тогда	// Все заказанные материалы, были получены, соответственно уменьшать заказанное количество нельзя
				Продолжить; 
			КонецЕсли;
			
			Распределить = Макс(-ДоступноДляКорректировки, КРаспределению);
			
			НоваяСтрока.Количество = НоваяСтрока.Количество + Распределить;
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество * ДетальнаяВыборка.Коэффициент;
			
			КРаспределению = КРаспределению - Распределить;
			
		КонецЦикла;
		
		// Добавляем новую строку на количество, которое было увеличено заказами на производство
		Если КРаспределению > 0 Тогда
			
			НоваяСтрока = Материалы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаС);
			НоваяСтрока.Количество = КРаспределению;
			НоваяСтрока.КоличествоУпаковок = КРаспределению;
			
			Если ПоступлениеОднойДатой Тогда
				НоваяСтрока.ДатаПоступления = ДатаПоступления;
			КонецЕсли;
			
		// Сообщаем о том, что не удеалось уменьшить количество материалов по какой-то из позиций
		ИначеЕсли КРаспределению < 0 Тогда
			
			Если ЗначениеЗаполнено(ВыборкаС.Характеристика) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось уменьшить заказанное количество для номенклатуры ""%1"" с характеристикой ""%2"" на %3 %4. Заказанные материалы уже поступили.';uk='Не вдалося зменшити замовлену кількість для номенклатури ""%1"" з характеристикою ""%2"" на %3 %4. Замовлені матеріали вже надійшли.'"),
					ВыборкаС.Номенклатура,
					ВыборкаС.Характеристика,
					(-1) * КРаспределению,
					ВыборкаС.ЕдиницаИзмерения);
				
			Иначе
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось уменьшить заказанное количество для номенклатуры ""%1"" на %2 %3. Заказанные материалы уже поступили.';uk='Не вдалося зменшити замовлену кількість для номенклатури ""%1"" на %2 %3. Замовлені матеріали вже надійшли.'"),
					ВыборкаС.Номенклатура,
					(-1) * КРаспределению,
					ВыборкаС.ЕдиницаИзмерения);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Параметры.Ссылка);
			
		КонецЕсли;
		
#Область ВыборкаПоГруппировкам
	КонецЦикла;
	
	КонецЦикла;
	
	КонецЦикла;
#КонецОбласти
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказДавальца";
	ПараметрыУказанияСерий.ИмяТЧТовары = "Продукция";
	ПараметрыУказанияСерий.ИмяТЧСерии  = "Продукция";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
		
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.Дата                  КАК Период,
	|	Заказ.Ссылка                КАК Заказ,
	|	Заказ.Валюта                КАК Валюта,
	|	Заказ.Статус                КАК Статус,
	|	Заказ.Партнер               КАК Партнер,
	|	Заказ.Договор               КАК Договор,
	|	Заказ.Назначение            КАК Назначение,
	|	ВЫБОР 
	|		КОГДА Заказ.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА Заказ.Назначение.ДвиженияПоСкладскимРегистрам
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ 						КАК ДвиженияПоСкладскимРегистрам,
	|	Заказ.Контрагент            КАК Контрагент,
	|	Заказ.Организация           КАК Организация,
	|	Заказ.Номенклатура          КАК Номенклатура,
	|	Заказ.Характеристика        КАК Характеристика,
	|	Заказ.Подразделение         КАК Подразделение,
	|	Заказ.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
	|	Заказ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	
	|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоНакладным,
	|	
	|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(Заказ.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре,
	|
	|	ВЫБОР КОГДА Заказ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК СтатусСогласованИлиВыше,
	|
	|	ВЫБОР КОГДА Заказ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК СтатусКПроизводствуИлиВыше,
	|
	|	ВЫБОР КОГДА Заказ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК СтатусКОтгрузкеИлиВыше,
	|
	|	ВЫБОР КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК СтатусЗакрыт,
	|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
	|
	|ИЗ
	|	Документ.ЗаказДавальца КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка
	|";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	////////////////////////////////////////////////////////////////////////////
	// Уставноим параметры запроса
	
	Запрос.УстановитьПараметр("СтатусСогласованИлиВыше",    Реквизиты.СтатусСогласованИлиВыше);
	Запрос.УстановитьПараметр("СтатусКПроизводствуИлиВыше", Реквизиты.СтатусКПроизводствуИлиВыше);
	Запрос.УстановитьПараметр("СтатусКОтгрузкеИлиВыше",     Реквизиты.СтатусКОтгрузкеИлиВыше);
	Запрос.УстановитьПараметр("СтатусЗакрыт",               Реквизиты.СтатусЗакрыт);
	Запрос.УстановитьПараметр("НачалоДня",                  НачалоДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("Период",                     Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                     Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Статус",                     Реквизиты.Статус);
	Запрос.УстановитьПараметр("Партнер",                    Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Валюта",                     Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Договор",                    Реквизиты.Договор);
	Запрос.УстановитьПараметр("Назначение",                 Реквизиты.Назначение);
	Запрос.УстановитьПараметр("ДвиженияПоСкладскимРегистрам",Реквизиты.ДвиженияПоСкладскимРегистрам);	
	Запрос.УстановитьПараметр("Организация",                Реквизиты.Организация);
	Запрос.УстановитьПараметр("Номенклатура",               Реквизиты.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",             Реквизиты.Характеристика);
	Запрос.УстановитьПараметр("Подразделение",              Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",            Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",         Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным",         Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("ИспользоватьСтатусы",        ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовДавальцев"));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",      Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",  РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре",  Реквизиты.ГрафикИсполненияВДоговоре);
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС", НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НачалоПериода(&Период, День)  КАК Период,
	|	ТаблицаТовары.Ссылка          КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура    КАК Номенклатура,
	|	ТаблицаТовары.Характеристика  КАК Характеристика,
	|	ТаблицаТовары.Серия           КАК Серия,
	|	ТаблицаТовары.КодСтроки       КАК КодСтроки,
	|	ТаблицаТовары.Склад           КАК Склад,
	|	ТаблицаТовары.Количество      КАК Заказано,
	|	0                             КАК КОформлению,
	|	0                             КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                  КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаОтгрузки    КАК Период,
	|	ТаблицаТовары.Ссылка          КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура    КАК Номенклатура,
	|	ТаблицаТовары.Характеристика  КАК Характеристика,
	|	ТаблицаТовары.Серия           КАК Серия,
	|	ТаблицаТовары.КодСтроки       КАК КодСтроки,
	|	ТаблицаТовары.Склад           КАК Склад,
	|	0                             КАК Заказано,
	|	ТаблицаТовары.Количество      КАК КОформлению,
	|	0                             КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                  КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено 
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	ТаблицаТовары.Ссылка                     КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика,
	|	ТаблицаТовары.Серия                      КАК Серия,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
	|	ТаблицаТовары.Склад                      КАК Склад,
	|	-ТаблицаТовары.Количество                КАК Заказано,
	|	0                                        КАК КОформлению,
	|	0                                        КАК Сумма,
	|	ТаблицаТовары.ПричинаОтмены              КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГрафикОплаты.НомерСтроки                     КАК НомерСтроки,
	|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК Период,
	|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК ДатаПлатежа,
	|	&Период                                      КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ                                        КАК ЗаказКлиента,
	|
	|	&Валюта                                      КАК Валюта,
	|	ГрафикОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
	|	0                                            КАК Сумма,
	|	ГрафикОплаты.СуммаПлатежа                    КАК КОплате,
	|	0                                            КАК КОтгрузке,
	|
	//	Проверяем аванс до производства
	|	ВЫБОР КОГДА НЕ &ИспользоватьСтатусы ТОГДА
	|		ИСТИНА
	|	КОГДА &СтатусКПроизводствуИлиВыше
	|			И НЕ &СтатусКОтгрузкеИлиВыше
	|			И ГрафикОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения) ТОГДА
	|		ЛОЖЬ
	//	Проверяем предоплату до отгрузки
	|	КОГДА &СтатусКОтгрузкеИлиВыше
	|			И ГрафикОплаты.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения))
	|			И &ИспользоватьСтатусы ТОГДА
	|		ЛОЖЬ
	//	Считаем, что все хорошо
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ИсключатьПриКонтроле,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	Документ.ЗаказДавальца.ЭтапыГрафикаОплаты КАК ГрафикОплаты
	|
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|	И &СтатусСогласованИлиВыше
	|	И НЕ &РасчетыПоНакладным
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Указываем продукцию к отгрузке
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)            КАК НомерСтроки,
	|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День) КАК Период,
	|	НЕОПРЕДЕЛЕНО                                   КАК ДатаПлатежа,
	|	НЕОПРЕДЕЛЕНО                                   КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)         КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ                                          КАК ЗаказКлиента,
	|
	|	&Валюта                                        КАК Валюта,
	|	НЕОПРЕДЕЛЕНО                                   КАК ФормаОплаты,
	|	0                                              КАК Сумма,
	|	0                                              КАК КОплате,
	|	СУММА(ТаблицаТовары.Сумма)                     КАК КОтгрузке,
	|
	|	Истина                                         КАК ИсключатьПриКонтроле,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКПроизводствуИлиВыше
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|	И НЕ &РасчетыПоНакладным
	|	И НЕ &ГрафикИсполненияВДоговоре
	|
	|СГРУППИРОВАТЬ ПО
	|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1                                                                 КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ТаблицаТовары.Склад                                               КАК Склад,
	|	ВЫБОР КОГДА &СтатусКПроизводствуИлиВыше ТОГДА
	|		ТаблицаТовары.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                                             КАК КОформлению,
	|	ТаблицаТовары.Количество                                          КАК Заказано,
	|	НЕОПРЕДЕЛЕНО                                                      КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки        КАК НомерСтроки,
	|	ТаблицаТовары.ДатаПоступления    КАК Период,
	|	ТаблицаТовары.Ссылка             КАК Распоряжение,
	|	ТаблицаТовары.Склад              КАК Склад,
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика     КАК Характеристика,
	|
	|	ВЫБОР КОГДА НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|			&Назначение
	|		КОНЕЦ                        КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                        КАК ПланируемоеПоступление,
	|
	|	ВЫБОР КОГДА &Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) И НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                        КАК ПланируемоеПоступлениеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СтатусКПроизводствуИлиВыше
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.ДатаОтгрузки      КАК Период,
	|	ТаблицаТовары.ДатаОтгрузки      КАК ДатаОтгрузки,
	|
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			&Назначение
	|		КОНЕЦ                               КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                               КАК КоличествоИзЗаказов,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                               КАК КоличествоПодЗаказ,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                               КАК КоличествоНеобеспечено
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И(&СтатусКПроизводствуИлиВыше
	|			И ТаблицаТовары.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	//Резервирование тары
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК ВНаличии,
	|	ТаблицаТовары.Количество               КАК ВРезервеСоСклада,
	|	0                                      КАК ВРезервеПодЗаказ
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И НЕ &СтатусКОтгрузкеИлиВыше)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Отгрузка продукции
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	0                                      КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|	ИНАЧЕ 0
	|		КОНЕЦ                              КАК ВРезервеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКОтгрузкеИлиВыше
	|
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	// Заказ давальцу на материалы
	"ВЫБРАТЬ
	|	1                                      КАК Порядок,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&Назначение                            КАК Назначение,
	|
	|	0                                      КАК Потребность,
	|	-ТаблицаТовары.Количество              КАК КЗаказу,
	|	ТаблицаТовары.Количество               КАК Заказано,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СтатусКПроизводствуИлиВыше
	|	И НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Формирование потребности в продукции
	|ВЫБРАТЬ
	|	2                                      КАК Порядок,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&Назначение                            КАК Назначение,
	|
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	ТаблицаТовары.Количество               КАК КЗаказу,
	|	0                                      КАК Заказано,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКПроизводствуИлиВыше
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Закрытие потребности в продукции
	|ВЫБРАТЬ
	|	2                                      КАК Порядок,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&Назначение                            КАК Назначение,
	|
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	0                                      КАК КЗаказу,
	|	0                                      КАК Заказано,
	|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКОтгрузкеИлиВыше
	|	И НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ДвиженияПоСкладскимРегистрам
	|			И НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА &Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ 								   КАК Назначение,
	|	&Ссылка                                КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КПоступлению
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|	И ТаблицаТовары.ДатаПоступления >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении
	|	И &СтатусКПроизводствуИлиВыше
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УслугиДавальцуКОформлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1										КАК Порядок,
	|	ТаблицаТовары.НомерСтроки				КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|	&НачалоДня								КАК Период,
	|	ТаблицаТовары.Ссылка					КАК ЗаказДавальца,
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	ТаблицаТовары.Количество				КАК Заказано,
	|	0										КАК КОформлению,
	|	ТаблицаТовары.СуммаСНДС					КАК Сумма,
	|	НЕОПРЕДЕЛЕНО							КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2										КАК Порядок,
	|	ТаблицаТовары.НомерСтроки				КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|	&Период									КАК Период,
	|	ТаблицаТовары.Ссылка					КАК ЗаказДавальца,
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	-ТаблицаТовары.Количество				КАК Заказано,
	|	0										КАК КОформлению,
	|	-ТаблицаТовары.СуммаСНДС				КАК Сумма,
	|	ТаблицаТовары.ПричинаОтмены				КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Партнер                               КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ДвиженияПоСкладскимРегистрам
	|			И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА &Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ 								   КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	0                                      КАК ВРезерве,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СтатусКОтгрузкеИлиВыше
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|	И НЕ ТаблицаТовары.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;

	ПолноеИмяДокумента = "Документ.ЗаказДавальца";
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("СтатусКОтгрузкеИлиВыше",
	"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Статус В(
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("СтатусКПроизводствуИлиВыше",
	"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Статус В(
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрам",
	"ЕСТЬNULL(ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	
	Если ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	Иначе
		ТекстИсключения = НСтр("ru='В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';uk='У документі %ПолноеИмяДокумента% не реалізована адаптація тексту запиту формування рухів по регістру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Заказ клиента
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор = "ЗаказДавальцаНаУслуги";
	КомандаПечати.Представление = НСтр("ru='Заказ давальца на услуги по выпуску продукции';uk='Замовлення давальця на послуги з випуску продукції'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Заказ поставщику
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор = "ЗаказДавальцуНаСырье";
	КомандаПечати.Представление = НСтр("ru='Заказ давальцу на сырье материалы';uk='Замовлення давальцю на сировину матеріали'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
	 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
		
		// Счет на оплату
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор = "СчетНаОплату";
		КомандаПечати.Представление = НСтр("ru='Счет на оплату';uk='Рахунок на оплату'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Счет на оплату с факсимиле
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор = "СчетНаОплату";
		КомандаПечати.Представление = НСтр("ru='Счет на оплату с факсимиле';uk='Рахунок на оплату з факсиміле'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов);
	
КонецФункции


Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаСырьеИМатериалы(МассивОбъектов, ПараметрыПечати, ПараметрыВывода) Экспорт	
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка										КАК Ссылка,
	|	Документы.Номер											КАК Номер,
	|	Документы.Дата											КАК Дата,
	|	Документы.Организация									КАК Организация,
	|	Документы.Организация									КАК Заказчик,
	|
	|	ЛОЖЬ													КАК УчитыватьНДС,
	|
	|	Документы.Организация.Префикс							КАК Префикс,
	|	Документы.Контрагент									КАК Контрагент,
	|	Документы.Контрагент									КАК Исполнитель,
	|	Документы.БанковскийСчет								КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента			КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС								КАК ЦенаВключаетНДС,
	|	Документы.Валюта										КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование			КАК Менеджер,
	|	Документы.ДополнительнаяИнформация						КАК ДополнительнаяИнформация,
	|
	|	Документы.АдресДоставки									КАК АдресДоставки,
	|	Документы.Грузоотправитель								КАК Грузоотправитель,
	|	Документы.Грузополучатель								КАК Грузополучатель,
	// Параметры для выбора областей макета отчета
	|	ЛОЖЬ													КАК ПоказыватьНДСВСтроках,
	|	ЛОЖЬ													КАК ИспользоватьАвтоСкидки,
	|	""""													КАК Тип,
	|	&ПредставлениеДокумента									КАК ПредставлениеДокумента,
	|	&ПредставлениеВОшибке									КАК ПредставлениеВОшибке
	|
	|ИЗ
	|	Документ.ЗаказДавальца КАК Документы
	|
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ВариантОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПроцентПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК СуммаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаПоступления									КАК ДатаПоступления,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	Товары.Цена												КАК Цена,
	|	0														КАК СуммаСкидки,
	|	Товары.Сумма											КАК СуммаБезСкидки,
	|	Товары.Сумма											КАК Сумма,
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|	0														КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ВЫБОР КОГДА Товары.Ссылка.ВернутьМногооборотнуюТару
	|			  И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;	
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru='Заказ давальцу на сырье и материалы';uk= 'Замовлення давальцю на сировину і матеріали'", КодЯзыкаПечать));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru='заказа давальцу';uk= 'замовлення давальцю'", КодЯзыкаПечать));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаУслуги(МассивОбъектов, ПараметрыПечати, ПараметрыВывода) Экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка										КАК Ссылка,
	|	Документы.Номер											КАК Номер,
	|	Документы.Дата											КАК Дата,
	|	""""													КАК АдресДоставки,
	|	Документы.Организация									КАК Организация,
	|	Документы.Организация									КАК Исполнитель,
	|	ВЫБОР КОГДА Документы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ													КАК УчитыватьНДС,
	|	ЛОЖЬ													КАК ИспользоватьАвтоСкидки,
	|	&ВыводитьДопКолонкиНДС									КАК ПоказыватьНДСВСтроках,
	|	""""													КАК Тип,
	|	&ПредставлениеДокумента									КАК ПредставлениеДокумента,
	|	&ПредставлениеВОшибке									КАК ПредставлениеВОшибке,
	|	Документы.Организация.Префикс							КАК Префикс,
	|	Документы.Контрагент									КАК Контрагент,
	|	Документы.Контрагент									КАК Заказчик,
	|	Документы.БанковскийСчет								КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента			КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС								КАК ЦенаВключаетНДС,
	|	Документы.Валюта										КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование			КАК Менеджер,
	|	Документы.ДополнительнаяИнформация						КАК ДополнительнаяИнформация,
	|	НЕОПРЕДЕЛЕНО											КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО											КАК Грузополучатель
	|ИЗ
	|	Документ.ЗаказДавальца КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка								КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки							КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа							КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ВариантОплаты						КАК ВариантОплаты,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа						КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа							КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказДавальца.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаОтгрузки										КАК ДатаОтгрузки,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
    |	Товары.Содержание										КАК Содержание,
	|
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	Товары.Цена												КАК Цена,
	|	Товары.Сумма											КАК Сумма,
	|	Товары.СуммаНДС											КАК СуммаНДС,
	|	0														КАК СуммаСкидки,
	|	Товары.Сумма											КАК СуммаБезСкидки,
	|
	|	Заказ.СтавкаНДС											КАК СтавкаНДС,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ЛОЖЬ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказДавальца КАК Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказДавальца.Продукция КАК Товары
	|	ПО
	|		Заказ.Ссылка В(&МассивОбъектов)
	|		И Заказ.Ссылка = Товары.Ссылка
	|		И Товары.Отменено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;	
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru='Заказ давальца на услуги по выпуску продукции';uk= 'Замовлення давальця на послуги з випуску продукції'", КодЯзыкаПечать));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru='заказа давальцу';uk= 'замовлення давальця'", КодЯзыкаПечать));
	Запрос.УстановитьПараметр("ВыводитьДопКолонкиНДС", Константы.ВыводитьДопКолонкиНДС.Получить());
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчет.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	
	|	ВЫБОР КОГДА Документы.БанковскийСчет.ИностранныйБанк
	|		ИЛИ Документы.БанковскийСчет.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета
	|		ИЛИ Документы.БанковскийСчетКонтрагента.ИностранныйБанк ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	Документы.БанковскийСчет.СВИФТБанка КАК СВИФТБанка,
	|	Документы.БанковскийСчет.СВИФТБанкаДляРасчетов КАК СВИФТБанкаДляРасчетов,
	|	Документы.БанковскийСчет.АдресБанка КАК АдресБанка,
	|	Документы.БанковскийСчет.АдресБанкаДляРасчетов КАК АдресБанкаДляРасчетов,
	|	Документы.БанковскийСчет.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	
	|	Документы.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчета,
	|	Документы.БанковскийСчет.НаименованиеБанкаДляРасчетов КАК НаименованиеБанкаДляРасчетов,
 	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	Документы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	Документы.ПредставительОрганизации КАК ПредставительОрганизации,
	|	Документы.ПредставительОрганизацииДолжность КАК ПредставительОрганизацииДолжность,
	|	Документы.Грузоотправитель КАК Грузоотправитель,
	|	Документы.Грузополучатель КАК Грузополучатель,
	|	ЛОЖЬ КАК СчетКВозврату
	|ИЗ
	|	Документ.ЗаказДавальца КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы
	|		ПО Истина
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка			КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки		КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа		КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа	КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа		КАК СуммаПлатежа,
	|	ЛОЖЬ								КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаказДавальца.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.СуммаПлатежа <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1													КАК НомерСтроки,
	|	Заказ.Ссылка										КАК Ссылка,
	|	Заказ.Номенклатура									КАК Номенклатура,
	|	Заказ.Номенклатура.Код								КАК Код,
	|	Заказ.Номенклатура.Артикул							КАК Артикул,
	|	Заказ.Номенклатура.НаименованиеПолное				КАК НаименованиеПолное,
	|	Заказ.СтавкаНДС										КАК СтавкаНДС,
	|	Заказ.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	Заказ.Содержание									КАК Содержание,
	|	СУММА(Товары.Сумма)									КАК Цена,
	|	СУММА(Товары.Сумма)									КАК Сумма,
	|	СУММА(Товары.СуммаНДС)								КАК СуммаНДС,
	|	СУММА(Товары.Сумма)									КАК СуммаБезСкидки,
	|	0													КАК СуммаСкидки,
	|	1													КАК Количество,
	|	НЕОПРЕДЕЛЕНО										КАК Упаковка,
	|	ЛОЖЬ												КАК ЭтоВозвратнаяТара,
	|	ПРЕДСТАВЛЕНИЕ(Заказ.Номенклатура.ЕдиницаИзмерения)	КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказДавальца КАК Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказДавальца.Продукция КАК Товары
	|	ПО
	|		Заказ.Ссылка = Товары.Ссылка
	|		И Товары.Отменено = ЛОЖЬ
	|
	|ГДЕ
	|	Заказ.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказ.Ссылка,
	|	Заказ.Номенклатура,
	|	Заказ.Характеристика,
	|	Заказ.СтавкаНДС,
	|	Заказ.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


#КонецОбласти

Функция МетаданныеДокумента() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	СтруктураОбъекта.ЕстьНазначениеВТЧ = Ложь;
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#КонецЕсли
