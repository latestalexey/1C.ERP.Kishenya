&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ
&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Подключаемое оборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "Продукция,Материалы");
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовДавальцев");
	Элементы.ГруппаСтатус.Видимость = ИспользоватьСтатусы;
	
	ПараметрыВыбораРеквизитов = ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(Метаданные.Документы.ЗаказДавальца);
	
	Если Не Объект.Номенклатура.Пустая() Тогда
		
		ИспользованиеХарактеристик = Объект.Номенклатура.ИспользованиеХарактеристик;
		
		МассивВариантов = Новый Массив;
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
		МассивВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
		
		ХарактеристикиИспользуются = Не (МассивВариантов.Найти(ИспользованиеХарактеристик) = Неопределено);
		
	КонецЕсли;
	
	ТекстХарактеристикаНеИспользуется = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
	ПравоНаЧтениеВидаЦены = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.ВидЦены);
	
	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ПерерасчетПроизведен = НЕ НДСИсходящийКлиентСервер.НуженАвторасчетНДС(Объект.Продукция,,,,"Отменено", Истина, Объект.СтавкаНДС);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		СтатусДокумента = Перечисления.СтатусыЗаказовДавальцев.ПустаяСсылка();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтогоПродукция.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	ЗакупкиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.СкладПоступления);
	
	УстановитьВидимостьЭлементовПоФункцОпциям();
	ЗаполнятьВидыЦенПоУмолчанию = ЗначениеЗаполнено(Объект.ВидЦены);
	
	УстановитьВидимостьВидаЦен();
	
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьВидимостьЭлементовПоСтавкеНДССервер(Истина);
	
	УстановитьВидимостьХарактеристикиУслуги(Элементы, ХарактеристикиИспользуются);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ОбновитьСписокВыбораКодовСтрокПродукции(Элементы, Объект.Продукция);

	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиС);
	ДоставкаТоваровКлиентСервер.ЗаполнитьСписокВыбораПоляВремени(Элементы.ВремяДоставкиПо);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовДавальцев") Тогда

	КонецЕсли; 
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовДавальцев.ПустаяСсылка();
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	// Если документ проводится, заполним пустые даты отгрузки в тч Продукция
	// и пустые даты поступления в тч Материалы, рассчитаем скидки, заполним график оплаты
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		Отказ = Истина;
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(
			ЭтаФорма,
			"Материалы",
			"Номенклатура,Характеристика,Количество,Склад,ДатаПоступления",
			Новый ОписаниеОповещения("ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПредложитьПодобратьМногооборотнуюТаруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если    Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Согласован")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КПроизводству")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КОтгрузке")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Закрыт") Тогда
		
		Если НЕ Объект.ПоступлениеОднойДатой Тогда
			ЗаполнитьПустыеДатыПоступления();
		Иначе
			ЗаполнитьПустуюДатуПоступления();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
		И НЕ (ГрафикИсполненияВДоговоре И Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов")) Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		ГрафикЗаполнен = ИспользоватьГрафикиОплаты И ЗначениеЗаполнено(Объект.ГрафикОплаты);
		
		Если СуммаЗаказано = 0 И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Объект.ЭтапыГрафикаОплаты.Очистить();
			
		ИначеЕсли СуммаЗаказано <> СуммаЭтаповОплаты Тогда
			
			ТекстВопроса     = "";
			РежимДиалога     = РежимДиалогаВопрос.ОкОтмена;
			ДобавитьЭтап     = Ложь;
			КоличествоЭтапов = Объект.ЭтапыГрафикаОплаты.Количество();
			
			Если КоличествоЭтапов = 0 Тогда
				Если Не ГрафикЗаполнен Тогда
					ЭтапыОплатыКлиентСервер.ДобавитьЭтапОплатыПоУмолчанию(
						Объект,
						ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
						Объект.ЖелаемаяДатаОтгрузки,
						СуммаЗаказано);
				Иначе
					ЗаполнитьЭтапыОплатыСервер(ГрафикЗаполнен);
				КонецЕсли;
			Иначе
				ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(
					Объект.ЭтапыГрафикаОплаты,
					СуммаЗаказано);
			КонецЕсли;
			
			ЭтапыОплатыКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
			
		КонецЕсли;
		
		НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина);
		
	КонецЕсли;

	ВыполнитьАвторасчетНДСКлиент();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Отказ = Ложь;
	
	// Предложим пользователю скорректировать желаемую дату отгрузки
	
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
		
		МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
		Если ЗначениеЗаполнено(МаксДатаАванса) И МаксДатаАванса > Объект.ЖелаемаяДатаОтгрузки Тогда
			Объект.ЖелаемаяДатаОтгрузки = МаксДатаАванса;
		КонецЕсли;
	
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтаФорма, ДополнительныеПараметры.ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовДавальцев.ПустаяСсылка();
	КонецЕсли;
	

	
	// Заполнение служебных реквизитов (пользователю не видны)
	ЗаполнитьСлужебныеРеквизиты();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Продукция, ЗависимыеРеквизитыПродукция());
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	УстановитьВидимостьХарактеристикиУслуги(Элементы, ХарактеристикиИспользуются);
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	Оповестить("Запись_ЗаказДавальца", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			Данные = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
				ОбработатьШтрихкоды(Данные, "Материалы");
			Иначе
				ОбработатьШтрихкоды(Данные, "Продукция");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "Материалы");
		Иначе
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "Продукция");
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка) 
		Или ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Тогда
		ИзмененаОплатаСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДобавлениеПартнераВСегмент" ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
		
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтрокиПродукция = Настройки.Получить("СкрыватьОтмененныеСтрокиПродукция");
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПродукция;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Настройки.Удалить("Объект.НеОтгружатьЧастями");
		Настройки.Удалить("Объект.ПоступлениеОднойДатой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда

		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда

		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);

		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказДавальца.Форма.РеквизитыПечати" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказДавальца.Форма.ФормаПодбораПоСпецификациям" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ПодборМатериаловПоСпецификациямСервер(ВыбранноеЗначение);
		КонецЕсли;
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда
		
		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
	КонецЕсли;
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

#Область ШапкаОбщиеЭлементы

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер(Истина);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПоступленияПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦены) И Объект.Продукция.Количество() > 0 Тогда
		
		КодОтвета = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВидЦеныПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru='Перезаполнить цены выпускаемой продукции?';uk='Перезаповнити ціни продукції?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодОтвета = РезультатВопроса;
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, Ложь, КэшированныеЗначения);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
		УстановитьВидимостьЗапретаОтгрузкиПартнеру();
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если ПартнерИзменился Тогда
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	КонецЕсли;	
	
	Если ПартнерИзменился И Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы, Объект);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьВидЦенПоУмолчаниюПриИзменении(Элемент)
	
	Если ЗаполнятьВидыЦенПоУмолчанию Тогда
		
		ДоступныеВидыЦен = ОпределитьДоступныеВидыЦен(Объект.ЦенаВключаетНДС);
		
		Если ДоступныеВидыЦен.Количество() = 1 Тогда
			
			Объект.ВидЦены = ДоступныеВидыЦен[0];
			
		Иначе
			
			ЗаполнятьВидыЦенПоУмолчанию = Ложь;
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Не найден вид цен по умолчанию';uk='Не знайдений вид цін по умовчанню'"));
			Возврат;
			
		КонецЕсли;
		
		Если Объект.Продукция.Количество() > 0 Тогда
			
			КодОтвета = Неопределено;

			
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнятьВидЦенПоУмолчаниюПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru='Перезаполнить цены в табличных частях документа?';uk='Перезаповнити ціни в табличних частинах документа?'"), РежимДиалогаВопрос.ДаНет);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		
		Объект.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьВидЦенПоУмолчаниюПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    
    Если КодОтвета = КодВозвратаДиалога.Да Тогда
        
        ЦеныРассчитаны = Ложь;
        ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, Ложь, КэшированныеЗначения);
        
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
Перем ДатаПоступления;
Перем ДатаОтгрузки;
	
	Если Объект.Согласован 
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Согласован")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КПроизводству")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КОтгрузке")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Закрыт") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	МассивОпераций = Новый Массив;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Согласован")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КПроизводству")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КОтгрузке")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Закрыт") Тогда
		
		Если Объект.Материалы.Количество() > 0 Тогда
			
			Если НЕ Объект.ПоступлениеОднойДатой Тогда
				ЗаполнитьПустыеДатыПоступления();
			Иначе
				ЗаполнитьПустуюДатуПоступления();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.КОтгрузке")
		Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовДавальцев.Закрыт") Тогда
		
		Если Объект.Продукция.Количество() > 0 Тогда
			
			Если Не Объект.НеОтгружатьЧастями Тогда
				МассивОпераций.Добавить("ЗаполнитьПустыеДатыОтгрузки");
			Иначе
				МассивОпераций.Добавить("ЗаполнитьПустуюДатуОтгрузки");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииСтатусаСервер(МассивОпераций, ДатаПоступления, ДатаОтгрузки);
	
КонецПроцедуры


&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ПриИзмененииЦенаВключаетНДССервер(КэшированныеЗначения);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПересчитатьСуммы = ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "Продукция")
					   Или ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "Материалы");
		
		ПриИзмененииВалютыСервер(Объект.Валюта, ПересчитатьСуммы);
		
		Если ПересчитатьСуммы Тогда
			ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		КонецЕсли;
		
	КонецЕсли;
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеЗаказовПоДаннымДавальца(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер(КэшированныеЗначения);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ПродукцияЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	ПриИзмененииНеОтгружатьЧастямиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	ПриИзмененииПоступлениеОднойДатойСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЗаполнитьУстановитьВидимостьСерий()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказДавальца));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Элементы.ПродукцияСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ПараметрыУказанияСерий,Текст, ТекущиеДанные)Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Продукция.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = Неопределено;
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	
	ЗначениеВозврата = Результат;
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНажатие(Элемент, СтандартнаяОбработка)
	
	ПродажиКлиент.СостояниеВФормеДокументаНажатие(СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Содержание",
		НСтр("ru='Содержание услуги по переработке';uk='Зміст послуги з переробки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#Конецобласти

#Область ШапкаУслугаПоПереработке

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ПриИзмененииНоменклатурыСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Объект;
	ПарамУслуги = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина);
	СтруктураДействий = Новый Структура("ЗаполнитьСодержание", ПарамУслуги);
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Объект"));

    Содержание = Объект.Содержание;
        
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
    
    Если Содержание <> Объект.Содержание Тогда 
        // Содержание услуги изменилось, изменим содержание в табличной части Продукция
        ПриИзмененииСодержанияСервер(КэшированныеЗначения);
    КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДССервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеПриИзменении(Элемент)
    ПриИзмененииСодержанияСервер(КэшированныеЗначения);
КонецПроцедуры

#КонецОбласти

#Область ШапкаДоставка

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиПриИзменении(Элемент)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ПриИзмененииПредставленияАдреса(
	    Элемент,
		Объект[ИмяРеквизитаАдресаДоставки],
		Объект[ИмяРеквизитаАдресаДоставки + "ЗначенияПолей"]);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставкиПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяРеквизитаАдресаДоставки = ПолучитьИмяРеквизитаАдресаДоставки(Элемент);
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		Объект,
		ИмяРеквизитаАдресаДоставки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресДоставкиПриИзменении(Элемент);
	
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы, Объект, Элемент.Имя, ВыбранноеЗначение);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяРеквизитаАдресаДоставки(Элемент)
	
	Если СтрНайти(Элемент.Имя, "АдресДоставкиПеревозчика") > 0 Тогда
		ИмяРеквизитаАдреса = "АдресДоставкиПеревозчика";
	Иначе
		ИмяРеквизитаАдреса = "АдресДоставки";
	КонецЕсли;
	
	Возврат ИмяРеквизитаАдреса;
	
КонецФункции

&НаКлиенте
Процедура ОсобыеУсловияПеревозкиПриИзменении(Элемент)
	
	ОсобыеУсловияПеревозкиПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область Продукция

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	ОбновитьСписокВыбораКодовСтрокПродукции(Элементы, Объект.Продукция);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, Неопределено, ПродукцияКешТекущейСтроки, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, Истина);
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Продукция");
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.ВидЦены = Объект.ВидЦены;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		ТекущиеДанные.СтавкаНДС = Объект.СтавкаНДС;
		
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Истина)); 
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ПродукцияВариантОбеспечения И Не ТолькоПросмотр Тогда
	
		СтандартнаяОбработка = Ложь;
	
		ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Продукция",
			НСтр("ru='Продукция';uk='Продукція'"));
	
		Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
			Объект, Объект.Продукция, Элементы.Продукция.ТекущаяСтрока, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
	
			ПараметрыФормы = ПараметрыВыбораОбеспечения();
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
					ЭтаФорма, УникальныйИдентификатор);
			Иначе
				Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(ПараметрыФормы, "Продукция", НСтр("ru='Продукция';uk='Продукція'"));
				ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			КонецЕсли;
	
		КонецЕсли;
	
	ИначеЕсли Поле = Элементы.ПродукцияЦена Тогда
		
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		Если ПравоНаЧтениеВидаЦены Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""';uk='Для редагування ціни виберіть вид ціни ""<довільна>""'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	// Проверим дату отгрузки
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	// Проверим код строки
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		УстановитьКлючиВСтрокахПродукции(Элементы, Объект, ТекущиеДанные);
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, ПродукцияКешТекущейСтроки);
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладов, ТекущиеДанные, КешСтроки, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Продукция.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Продукция.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", 				ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Истина));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", 					ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", 						"КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", 				Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 		Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение",			Новый Структура("ЗаполнитьОбособленно", Истина));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
    СтруктураДействий.Вставить("ЗаполнитьСодержаниеПереработки",        Новый Структура("СодержаниеУслуги", Объект.Содержание));
	
	НоменклатураПриИзмененииСервер(
		"Продукция", ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", 					ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", 						"КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	СтруктураДействий.Вставить("ЗаполнитьСодержание", 					ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Истина));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
    СтруктураДействий.Вставить("ЗаполнитьСодержаниеПереработки",        Новый Структура("СодержаниеУслуги", Объект.Содержание));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПродукцияЗаполнитьСпецификацию(ТекущаяСтрока,
		Объект.Подразделение,
		Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", 						"КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтоимостьМатериаловПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуЗаказДавальца");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                   СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                  СтруктураПересчетаСуммы);
	
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И ЗначениеЗаполнено(ТекущаяСтрока.Спецификация) Тогда
		ПродукцияЗаполнитьСобственныеМатериалыНаСервере(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуУслугиЗаказДавальца");
	СтруктураДействий.Вставить("ПересчитатьСуммуЗаказДавальца");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуУслугиЗаказДавальца");
	СтруктураДействий.Вставить("ПересчитатьСуммуЗаказДавальца");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаУслугиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеЗаказДавальца",	"КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуЗаказДавальца");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ТекущаяСтрока.СуммаУслуги = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаСобственныхМатериалов;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСуммеЗаказДавальца",	"КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкладПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Истина));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент)
	
	СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладовПоступления, Неопределено, МатериалыКешТекущейСтроки, СкладПоступленияГруппа);
	ВсегоСкладов = ТаблицаСкладовПоступления.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(
		НадписьНесколькоСкладовПоступления, Элементы.КартинкаНесколькоСкладовПоступления, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Материалы");
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
		ТекущиеДанные.КодСтрокиПродукция = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Объект.ПоступлениеОднойДатой Тогда
		ТекущиеДанные.ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		КешСтроки = ?(НоваяСтрока, Неопределено, МатериалыКешТекущейСтроки);
		СкладыКлиент.ОбновитьТаблицуСкладов(ТаблицаСкладовПоступления, ТекущиеДанные, КешСтроки, СкладПоступленияГруппа);
		ВсегоСкладов = ТаблицаСкладовПоступления.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладовПоступления,
			Элементы.КартинкаНесколькоСкладовПоступления, ВсегоСкладов);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, Ложь);
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", 				ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", 				Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", 		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПересчитатьСумму", 						"КоличествоУпаковок");

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Материалы"));

	НоменклатураПриИзмененииСервер("Материалы", ТекущаяСтрока.ПолучитьИдентификатор(), СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Материалы"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриАктивизацииСтроки(Элемент)
	
	ОбновитьИнформациюОПредназначенииМатериала();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКодСтрокиПродукцияПриИзменении(Элемент)
	
	ОбновитьИнформациюОПредназначенииМатериала();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

#Область Шапка

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		
		РезультатВыполнения = Неопределено;
		
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(
			Команда.Имя,
			РезультатВыполнения);
		
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(
			ЭтаФорма,
			РезультатВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ДополнительнаяИнформация",       Объект.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("БанковскийСчет",                 Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("НазначениеПлатежа",              Объект.НазначениеПлатежа);
	СтруктураПараметров.Вставить("НомерЗаказа",                    ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер));
	СтруктураПараметров.Вставить("ДатаЗаказа",                     Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
	СтруктураПараметров.Вставить("ПредставительОрганизации",       Объект.ПредставительОрганизации);
	СтруктураПараметров.Вставить("ПредставительОрганизацииДолжность",Объект.ПредставительОрганизацииДолжность);
	
	ОткрытьФорму("Документ.ЗаказДавальца.Форма.РеквизитыПечати", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОтгрузкаПартнеруЗапрещенаНажатие(Элемент)
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаСегментовЗапретаОтгрузки", Новый Структура("Партнер", Объект.Партнер));
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СуммаДокумента  = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Продукция, Объект.ЦенаВключаетНДС);
	ДанныеПоСумме   = Новый Структура("СуммаВзаиморасчетов", СуммаДокумента);
	ОтборПоДоговору = Новый Структура("Договор", Объект.Договор);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       ОтборПоДоговору);
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСумме);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма", ПараметрыФормы, , "Договор=" + Объект.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьИнформациюПоДоставкеКонтактами(Команда)
	
	ДополнитьИнформациюПоДоставкеКонтактамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС(Команда)
	Если ВыполнитьАвторасчетНДСКлиент() Тогда
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Продукция

&НаКлиенте
Процедура ПродукцияЗаполнитьДатуОтгрузки(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуОтгрузки(Элементы.Продукция.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьСклад(Команда)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Объект,
		Объект.Продукция,
		НСтр("ru='Выпускаемая продукция';uk='Продукція, що випускається'"),
		ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора     = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("ПродукцияЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад      = Результат;
    
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад, Истина);
        
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
        ВыбранныйСклад,
        ЗаполненоСтрок,
        ВыделенныеСтроки.Количество());
        
    КонецЕсли;
    
    ПриИзмененииСкладаВТабличнойЧастиСервер("Продукция");

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для заполнения цен';uk='У таблиці відсутні виділені рядки. Виділіть рядки для заповнення цін'"),
			Объект.Ссылка,
			"Объект.Продукция");
		
		Возврат;
		
	КонецЕсли;
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Продукция", НСтр("ru='Выпускаемая продукция';uk='Продукція, що випускається'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ПродукцияЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС, , , Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьЦеныПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, Истина, КэшированныеЗначения);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена(Истина);
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
	УстановитьКлючиВСтрокахПродукции(Элементы, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Продукция.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Продукция");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Продукция.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗагрузитьДанныеИзТСД(Команда)
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ПродукцияЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Материалы Тогда
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Материалы");
		Иначе
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Продукция");
		КонецЕсли;
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказДавальца.ФормаДокумента.Команда.Продукция_Общее_ПодобратьТовары");
	
	ПодобратьТовар(Истина);
	
	УстановитьКлючиВСтрокахПродукции(Элементы, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Продукция;
	ДанныеТаблицы = Объект.Продукция;
	
	Оповещение = Новый ОписаниеОповещения("ПродукцияРазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(
			ТекущаяСтрока,
			СтруктураДействий,
			КэшированныеЗначения);
			
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(
			НоваяСтрока,
			СтруктураДействий,
			КэшированныеЗначения);
		
		УстановитьКлючиВСтрокахПродукции(Элементы, Объект, НоваяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменитьВыделенныеСтроки(Команда)
	
	Если Объект.Продукция.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Список ""Выпускаемая продукция"" не заполнен.';uk='Список ""Продукція, що випускається"" не заповнений.'"));
		Возврат;
	ИначеЕсли Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='В списке ""Выпускаемая продукция"" отсутствуют выделенные строки.';uk='У списку ""продукція"" відсутні виділені рядки.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	
	ЕстьОтмененныеСтроки = Ложь;
	
	Для Каждого ТекСтрока Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Продукция.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
				ЕстьОтмененныеСтроки = Истина;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Если ЕстьОтмененныеСтроки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru='Выделенные строки отменены';uk='Виділені рядки скасовані'"),
			,
			НСтр("ru='Выделенные строки заявки отменены.';uk='Виділені рядки заявки скасовані.'"),
			БиблиотекаКартинок.Информация32);
		
		Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
			ЗаполнитьСтатусыУказанияСерий();
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Выделенные строки уже отменены.';uk='Виділені рядки вже скасовані.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиПродукция = Не СкрыватьОтмененныеСтрокиПродукция;
	
	Если СкрыватьОтмененныеСтрокиПродукция Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиПродукция;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьОсновнойСпецификацией(Команда)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() Тогда
		ПродукцияЗаполнитьОсновнойСпецификациейНаСервере(ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОбеспечение(Команда)
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("Продукция",
	НСтр("ru='Продукция';uk='Продукція'"));
	
	Если ОбеспечениеКлиентСервер.ПроверитьЗаполнение(
		Объект, Объект.Продукция, Элементы.Продукция.ВыделенныеСтроки, ПараметрыПроверки, Неопределено, Объект.Склад) Тогда
		
		СписокВыбора = Новый СписокЗначений();
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
		КонецЕсли;
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
		
		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка));
		ПараметрыФормы.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		ПараметрыФормы.Вставить("СписокВыбора", СписокВыбора);
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)

	ТекстПредупреждения = НСтр("ru='Не введено ни одной строки в список ""Выпускаемая продукция"".
        |Просмотр состояния обеспечения списка выпускаемой продукции невозможен.'
        |;uk='Не введено жодного рядка в список ""Продукція, що випускається"".
        |Перегляд стану забезпечення списку продукції неможливий.'");
		
	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(ЭтаФорма, "Продукция", ТекстПредупреждения) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Продукция_Заполнить_СтоимостьСобственныхМатериалов(Команда)
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	
	МассивСтрок = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Продукция.НайтиПоИдентификатору(Строка);
		Если ЗначениеЗаполнено(ДанныеСтроки.Спецификация) Тогда
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрок.Количество() > 0 Тогда
		ПродукцияЗаполнитьСобственныеМатериалыНаСервере(МассивСтрок, , Истина, КэшированныеЗначения);
	Иначе
		ТекстСообщения = НСтр("ru='Для расчета стоимости собственных материалов выберите строки с заполненной спецификацией.';uk='Для розрахунку вартості власних матеріалів виберіть рядки із заповненою специфікацією.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"Объект.Продукция");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

&НаКлиенте
Процедура МатериалыЗаполнитьДатуПоступления(Команда)
	
	Если Элементы.Материалы.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления(Элементы.Материалы.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьСклад(Команда)
	
	ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
	ТребуетсяЗаполнение = СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
		Объект,
		Объект.Материалы,
		НСтр("ru='Сырье и материалы для производства';uk='Сировина і матеріали для виробництва'"),
		ВыделенныеСтроки);
	
	Если ТребуетсяЗаполнение Тогда
		
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		
		СтруктураОтбора     = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор, ГруппаСкладов", СтруктураОтбора, Объект.СкладПоступления);
		ВыбранныйСклад = Неопределено;

		ОткрытьФорму("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма,,,, Новый ОписаниеОповещения("МатериалыЗаполнитьСкладЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьСкладЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    
    
    ВыбранныйСклад      = Результат;
    
    Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
        
        ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад, Ложь);
        
        СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(
        ВыбранныйСклад,
        ЗаполненоСтрок,
        ВыделенныеСтроки.Количество());
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодборПоСпецификациям(Команда)
	
#Область Проверки
	Отбор = Новый Структура;
	Отбор.Вставить("Спецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	
	Если Объект.Продукция.НайтиСтроки(Отбор).Количество() = Объект.Продукция.Количество() Тогда
		
		Если Объект.Продукция.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='Табличная часть ""Выпускаемая продукция"" не заполнена.';uk='Таблична частина ""Продукція, що випускається"" не заповнена.'");
		Иначе
			ТекстСообщения = НСтр("ru='Поле ""Спецификация"" не заполнено ни в одной из строк табличной части ""Выпускаемая продукция"".';uk='Поле ""Специфікація"" не заповнено ні в одній з рядків табличної частини ""Продукція, що випускається"".'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.Продукция");
		
		Возврат; // Нет спецификаций, для получения списка материалов
		
	КонецЕсли;
#КонецОбласти
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокВыбораПродукции",	 Элементы.МатериалыКодСтрокиПродукция.СписокВыбора.ВыгрузитьЗначения());
	ПараметрыФормы.Вставить("Подразделение",			 Объект.Подразделение);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьПродукциюИМатериалыВоВременноеХранилищеНаСервере());
	
	ОткрытьФорму("Документ.ЗаказДавальца.Форма.ФормаПодбораПоСпецификациям",
		ПараметрыФормы,
		ЭтаФорма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьПоСпецификациям(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.Продукция.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Табличная часть ""Выпускаемая продукция"" не заполнена.';uk='Таблична частина ""Продукція, що випускається"" не заповнена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"Объект.Продукция");
			
		Возврат;
		
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Спецификация", ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	Если Объект.Продукция.НайтиСтроки(Отбор).Количество() = Объект.Продукция.Количество() Тогда
		
		Если Объект.Продукция.Количество() = 1 Тогда
			ТекстСообщения = НСтр("ru='Поле ""Спецификация"" не заполнено.';uk='Поле ""Специфікація"" не заповнено.'");
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", 1, "Спецификация");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле, "Объект");
		Иначе
			ТекстСообщения = НСтр("ru='Поле ""Спецификация"" не заполнено ни в одной из строк табличной части ""Выпускаемая продукция"".';uk='Поле ""Специфікація"" не заповнено ні в одній з рядків табличної частини ""Продукція, що випускається"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Продукция");
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнятьМатериалы = Истина;
	
	Если Объект.Материалы.Количество() <> 0 Тогда
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("МатериалыЗаполнитьПоСпецификациямЗавершение", ЭтотОбъект), 
			НСтр("ru='Табличная часть ""Сырье и материалы для производства"" будет перезаполнена. Продолжить?';uk='Таблична частина ""Сировина і матеріали для виробництва"" буде перезаповнена. Продовжити?'"),
			РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	МатериалыЗаполнитьПоСпецификациямФрагмент(ЗаполнятьМатериалы);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьПоСпецификациямЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    ЗаполнятьМатериалы = (ОтветНаВопрос = КодВозвратаДиалога.Да);
    
    
    МатериалыЗаполнитьПоСпецификациямФрагмент(ЗаполнятьМатериалы);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьПоСпецификациямФрагмент(Знач ЗаполнятьМатериалы)
    
    Если ЗаполнятьМатериалы Тогда
        МатериалыЗаполнитьПоСпецификациямНаСервере();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПерезаполнитьПоПотребностямПроизводтсва(Команда)
	
#Область Проверки
	
	ЗаполнятьМатериалы = Истина;
	
	Если Объект.Материалы.Количество() Тогда
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("МатериалыПерезаполнитьПоПотребностямПроизводтсваЗавершение", ЭтотОбъект), 
			НСтр("ru='Табличная часть ""Сырье и материалы для производства"" будет перезаполнена. Продолжить?';uk='Таблична частина ""Сировина і матеріали для виробництва"" буде перезаповнена. Продовжити?'"),
			РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
#КонецОбласти
	
	МатериалыПерезаполнитьПоПотребностямПроизводтсваФрагмент(ЗаполнятьМатериалы);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПерезаполнитьПоПотребностямПроизводтсваЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
    ЗаполнятьМатериалы = (ОтветНаВопрос = КодВозвратаДиалога.Да);
    
    
    МатериалыПерезаполнитьПоПотребностямПроизводтсваФрагмент(ЗаполнятьМатериалы);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыПерезаполнитьПоПотребностямПроизводтсваФрагмент(Знач ЗаполнятьМатериалы)
    
    Если ЗаполнятьМатериалы Тогда
        Модифицированность = Истина;
        МатериалыПерезаполнитьПоПотребностямПроизводтсваНаСервере(КэшированныеЗначения);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Материалы.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена(Ложь);
	
	КоличествоВставленных = Объект.Материалы.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Материалы.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Материалы");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Материалы.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗагрузитьДанныеИзТСД(Команда)
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("МатериалыЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗагрузитьИзТСДЗавершение(Результат, Параметры) Экспорт
	
	Если Результат.Результат Тогда
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Материалы");
		Иначе
			ОбработатьШтрихкоды(Результат.ТаблицаТоваров, "Продукция");
		КонецЕсли;
	Иначе
		МенеджерОборудованияКлиентПереопределяемый.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодобратьТовары(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЗаказДавальца.ФормаДокумента.Команда.Материалы_Общее_ПодобратьТовары");
	
	ПодобратьТовар(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
	
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Материалы",
		"Номенклатура,Характеристика,Количество,Склад,ДатаПоступления");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("МатериалыПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, "Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Материалы;
	ДанныеТаблицы = Объект.Материалы;
	
	Оповещение = Новый ОписаниеОповещения("МатериалыРазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Истина);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru='Для резервирования под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';uk='Для резервування під призначення необхідно попередньо провести документ. Виконати проведення документа і продовжити?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	СтатусыЧерновик = Новый СписокЗначений;
	СтатусыЧерновик.Добавить(Перечисления.СтатусыЗаказовДавальцев.НеСогласован);
	СтатусыЧерновик.Добавить(Перечисления.СтатусыЗаказовДавальцев.Согласован);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ДатаПоступления", "ДатаПоступления", "", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"Подразделение", "Подразделение", "", СтатусыЧерновик);
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"ПродукцияДатаОтгрузки", "ДатаОтгрузки", "Продукция", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"ДатаОтгрузки", "ДатаОтгрузки", "", "ДатаОтгрузкиОбязательна");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"ПродукцияСклад", "Склад", "Продукция", "СкладОбязателен");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(УсловноеОформление,
		"Склад", "Склад", "", "СкладОбязателен");
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"МатериалыДатаПоступления", "ДатаПоступления", "Материалы", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"МатериалыСклад", "Склад", "Материалы", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"ДатаПоступления", "ДатаПоступления", "", СтатусыЧерновик);
	
	ОбеспечениеСервер.УстановитьСнятьОтметкуНезаполненногоПоСтатусу(УсловноеОформление,
		"Склад", "Склад", "", СтатусыЧерновик);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыДатаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СостояниеПросрочено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовКлиентов.Закрыт;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	//

	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление,
		Элементы.Продукция,
		Элементы.ПродукцияОтменено.Имя,
		Элементы.ПродукцияПричинаОтмены.Имя);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ПродукцияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Продукция.Упаковка");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Материалы.Упаковка");

	//

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтаФорма);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "МатериалыХарактеристика",
																		     "Объект.Материалы.ХарактеристикиИспользуются");
	
	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ПродукцияХарактеристика",
																		     "Объект.Продукция.ХарактеристикиИспользуются");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияХарактеристикаДляМатериала.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПродукцияХарактеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСпецификацияДляМатериала.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПродукцияСпецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='<не указана>';uk='<не зазначена>'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма, 
									                     "ПродукцияВидЦены", 
                                                         "Объект.Продукция.ВидЦены");

	//

	СкладыСервер.УстановитьУсловноеОформлениеСкладаВТЧ(ЭтаФорма, "ПродукцияСклад");

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма,
		"СерииВсегдаВТЧТовары", "ПродукцияСерия", "Объект.Продукция.СтатусУказанияСерий", "Объект.Продукция.ТипНоменклатуры");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СкладПоступленияГруппа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСклад.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Склад");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	СкладыСервер.УстановитьУсловноеОформлениеСкладаВШапке(ЭтаФорма);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияОтменено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПричинаОтмены.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовКлиентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияОтмененоПричиныОтменыНеИспользуются.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьПричиныОтменыЗаказовКлиентов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма, "ПродукцияСуммаСНДС");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСуммаСНДС.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСуммаНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.НеНДС);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	МногооборотнаяТараСервер.УстановитьУсловноеОформлениеДляСтрокСМногооборотнойТарой(
		ЭтаФорма, 
		Истина, // ЭтоПоступление
		"",     // ИмяПоляВводаСтавкиНДС
		"",     // ИмяПоляВводаНалоговоеНазначение
		"МатериалыЦена", 
		"МатериалыСумма", 
		"Объект.Материалы"
	);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Материалы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	НДСИсходящийСервер.УстановитьУсловноеОформлениеПоАвтоРасчетуНДС(ЭтаФорма, "", "СуммаВсегоСНДСПродукции");

КонецПроцедуры

#Область ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииСтатусаСервер(МассивОпераций, ДатаПоступления, ДатаОтгрузки)
	
	Если Не МассивОпераций.Найти("ЗаполнитьПустыеДатыПоступления") = Неопределено Тогда
		ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
	КонецЕсли;
	
	Если Не МассивОпераций.Найти("ЗаполнитьПустуюДатуПоступления") = Неопределено Тогда
		ЗаполнитьДатыПоступленияСервер(ДатаПоступления, Неопределено);
	КонецЕсли;
	
	Если Не МассивОпераций.Найти("ЗаполнитьПустыеДатыОтгрузки") = Неопределено Тогда
		ЗаполнитьПустыеДатыОтгрузкиСервер(ДатаОтгрузки);
	КонецЕсли;
	
	Если Не МассивОпераций.Найти("ЗаполнитьПустуюДатуОтгрузки") = Неопределено Тогда
		ЗаполнитьДатыОтгрузкиСервер(ДатаОтгрузки, Неопределено);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦенаВключаетНДССервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Продукция, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		
		ДокументЗакупки = РеквизитФормыВЗначение("Объект");
		ДокументЗакупки.ЗаполнитьУсловияПродажПоУмолчанию();
		ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
		
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма);
	Если Не Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ЭтапыОплатыКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
	КонецЕсли;
	
	ПриИзмененииСкладаСервер(Истина);
	ПриИзмененииСкладаСервер(Ложь);
	
	ЗаполнитьСлужебныеРеквизиты();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Продукция, ЗависимыеРеквизитыПродукция());
	
	УстановитьВидимостьДоговора();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ОбновитьОграничениеЗадолженности();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	ПродажиСервер.ПартнерПриИзменении(Объект);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ГруппаФинансовогоУчета");
	КонецЕсли;
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма);
	
	ОбновитьОграничениеЗадолженности();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтавкиНДССервер(КэшированныеЗначения)
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	
	Для Каждого ТекущаяСтрока из Объект.Продукция Цикл
		
		ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	УстановитьВидимостьЭлементовПоСтавкеНДССервер();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНоменклатурыСервер(КэшированныеЗначения)
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, Содержание, ХарактеристикиИспользуются");
	ПарамУслуги = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина);
    Содержание = Объект.Содержание;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСодержание", 				 ПарамУслуги);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Объект);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Объект"));
		
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗначенияСвойств(Объект, ТекущаяСтрока);
	
	ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
	
	УстановитьВидимостьХарактеристикиУслуги(Элементы, ХарактеристикиИспользуются);
	
    
    Если Содержание <> Объект.Содержание Тогда 
        // Содержание услуги изменилось, изменим содержание в табличной части Продукция
        ПриИзмененииСодержанияСервер(КэшированныеЗначения);
    КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
		
		// Пересчет сумм в продукции
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Продукция,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		// Пересчет сумм в материалах
		ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Материалы,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Продукция, ЗависимыеРеквизитыПродукция());
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличнойЧастиВВалюту(Таблица,
	Знач СтараяВалюта,
	Знач НоваяВалюта,
	Знач СтруктураКурсовСтаройВалюты,
	Знач СтруктураКурсовНовойВалюты) Экспорт
	
	СуммаКРаспределению = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		Таблица.Итог("Сумма"),
		СтараяВалюта, НоваяВалюта,
		СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
		СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
	
	МассивСумм = Новый Массив;
	
	Для Х = 0 По Таблица.Количество() - 1 Цикл
		
		ТекСтрока = Таблица[Х];
		
		ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Цена,
			СтараяВалюта, НоваяВалюта,
			СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
		
		СуммаВНовойВалюте = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.Сумма,
			СтараяВалюта, НоваяВалюта,
			СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
		
		МассивСумм.Добавить(СуммаВНовойВалюте);
		
	КонецЦикла;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
	
	Если МассивСумм <> Неопределено Тогда
		
		Для Х = 0 По Таблица.Количество() - 1 Цикл
			
			ТекСтрока = Таблица[Х];
			ТекСтрока.Сумма = МассивСумм[Х];
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСодержанияСервер(КэшированныеЗначения)
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
    СтруктураДействий.Вставить("ЗаполнитьСодержаниеПереработки",        Новый Структура("СодержаниеУслуги", Объект.Содержание));
	
	Для Каждого ТекущаяСтрока из Объект.Продукция Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ПриИзмененииСкладаСервер(Отгрузка)
	
	Если Отгрузка Тогда
		
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
		Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
		
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Продукция, Ложь);
		
	Иначе
		
		СкладПоступленияГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.СкладПоступления);
		Элементы.МатериалыЗаполнитьСклад.Доступность = СкладПоступленияГруппа;
		
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.СкладПоступления, СкладПоступленияГруппа, Объект.Материалы, Ложь);
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораТоварыСклад(Отгрузка);
		
	ПриИзмененииСкладаВТабличнойЧастиСервер(?(Отгрузка, "Продукция", "Материалы"));
	ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	УстановитьВидимостьДоговора();
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		ПродажиСервер.ПартнерПриИзменении(Объект);
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер(КэшированныеЗначения)
	
	УстановитьВидимостьДоговора();
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
		КонецЕсли;
		НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчет, , Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	
КонецПроцедуры

&НаСервере 
Процедура ПриИзмененииНеОтгружатьЧастямиСервер(УчитыватьСостояниеОбеспечения = Ложь)
	
	// Вычислим максимальную дату поступления и приведем к ней ТЧ
	Если Объект.НеОтгружатьЧастями Тогда
		
		Объект.ДатаОтгрузки = МаксимальнаяДатаОтгрузки();
		
		ЗаполнитьДатыОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере 
Процедура ПриИзмененииПоступлениеОднойДатойСервер()
	
	// Вычислим максимальную дату поступления и приведем к ней ТЧ
	Если Объект.ПоступлениеОднойДатой Тогда
		
		Объект.ДатаПоступления = МаксимальнаяДатаПоступления();
		
		ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления, Неопределено);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	Форма.Элементы.СрокВозвратаМногооборотнойТары.Доступность = Форма.Объект.ВернутьМногооборотнуюТару;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаВТабличнойЧастиСервер(ИмяТабЧасти = "")
	
	Если Не ИмяТабЧасти = "Продукция" Тогда
		
		СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Материалы, ТаблицаСкладовПоступления, СкладПоступленияГруппа);
		ВсегоСкладов = ТаблицаСкладовПоступления.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(
			НадписьНесколькоСкладовПоступления, Элементы.КартинкаНесколькоСкладовПоступления, ВсегоСкладов);
		
	КонецЕсли;
	
	Если Не ИмяТабЧасти = "Материалы" Тогда
		
		СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Продукция, ТаблицаСкладов, СкладГруппа);
		ВсегоСкладов = ТаблицаСкладов.Количество();
		СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Ценообразование

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, ПоВыделеннымСтрокам, КэшированныеЗначения)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата",    Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта",  Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	
	Если ПоВыделеннымСтрокам Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Продукция.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Продукция.НайтиПоИдентификатору(Строка));
		КонецЦикла;
		
	Иначе
		
		МассивСтрок = Неопределено;
		
	КонецЕсли;
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Продукция,
		МассивСтрок,
		ПараметрыЗаполнения);
		
	ПродукцияЗаполнитьСобственныеМатериалыНаСервере(
		,?(ПоВыделеннымСтрокам, МассивСтрок, Объект.Продукция),
		Истина,
		КэшированныеЗначения);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

#КонецОбласти

#Область Подбор

&НаКлиенте
Процедура ПодобратьТовар(Отгрузка)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru='Подбор товаров в %Документ%';uk='Підбір товарів у %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='заказ давальца';uk='замовлення давальця'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Документ",        Объект.Ссылка);
	ПараметрыФормы.Вставить("Партнер",         Объект.Партнер);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Валюта",          Объект.Валюта);
	ПараметрыФормы.Вставить("Дата",            Объект.Дата);
	
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры", Истина);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	
	Если Отгрузка Тогда
		
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ФормаПодбораТоваров = "Обработка.ПодборТоваровВДокументПродажи.Форма";
		ОткрытьФорму(ФормаПодбораТоваров, ПараметрыФормы, ЭтаФорма.Элементы.Продукция, УникальныйИдентификатор);
		
	Иначе
		
		ПараметрыФормы.Вставить("Склад", Объект.СкладПоступления);
		ФормаПодбораТоваров = "Обработка.ПодборТоваровВДокументЗакупки.Форма";
		ОткрытьФорму(ФормаПодбораТоваров, ПараметрыФормы, ЭтаФорма.Элементы.Материалы, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Валюта"" не заполнено';uk='Поле ""Валюта"" не заповнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, Отгрузка)
	
	ТаблицаТоваров   = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаДокумента = ?(Отгрузка, Объект.Продукция, Объект.Материалы);
	
	СписокСвойств    = "Номенклатура, Характеристика, Упаковка, Склад, Цена, КоличествоУпаковок";
	СписокСвойств    = СписокСвойств + ?(Отгрузка, ", ВидЦены", "");
	
	МассивНовыхСтрок = Новый Массив;
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
		
		Если Отгрузка Тогда
			
			Если Объект.НеОтгружатьЧастями Тогда
				ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
			КонецЕсли;
			
			ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
			ТекущаяСтрока.ВидЦены   = Объект.ВидЦены;
			
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", 					ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму", 						"КоличествоУпаковок");
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Истина));
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
				Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект);
			
			МассивНовыхСтрок.Добавить(ТекущаяСтрока);
			МассивДанныхПоНоменклатуре.Добавить(Документы.ЗаказДавальца.ДанныеПоНоменклатуре(
				ТекущаяСтрока,
				ТекущаяСтрока.Спецификация,
				Объект.Подразделение,
				Объект.Дата));
			
		Иначе // Поставка
			
			Если Объект.ПоступлениеОднойДатой Тогда
				ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
			КонецЕсли;
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
			
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если Отгрузка Тогда
		УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(
			МассивНовыхСтрок,
			МассивДанныхПоНоменклатуре);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Иначе
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(
			Объект.СостояниеЗаполненияМногооборотнойТары);
	КонецЕсли;
	
	УстановитьКлючиВСтрокахПродукции(Элементы, Объект);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер(?(Отгрузка, "Продукция", "Материалы"));
	
КонецПроцедуры

&НаСервере
Процедура ПодборМатериаловПоСпецификациямСервер(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	СписокСвойств  = "Номенклатура, Характеристика, КодСтроки, КодСтрокиПродукция, Упаковка, КоличествоУпаковок";
	
	Объект.Материалы.Очистить();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если СтрокаТовара.КоличествоУпаковок = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, СписокСвойств);
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура("ПроверитьЗаполнитьСклад", ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Ложь));
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ПриИзмененииСкладаВТабличнойЧастиСервер("Материалы");
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение, Отгрузка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, Отгрузка);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками  = Новый Структура;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьВидЦены",			Новый Структура("ВидЦены", Объект.ВидЦены));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи",		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад",	ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Ложь));
	
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействийСДобавленнымиСтроками);
	
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействийСДобавленнымиСтроками);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействийСИзмененнымиСтроками);
		
	Иначе // Продукция
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействийСДобавленнымиСтроками, Объект);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействийСИзмененнымиСтроками, Объект);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Истина));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
		
	КонецЕсли;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	СтруктураДействий.Штрихкоды									= ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками	= СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками		= СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий					= ПараметрыУказанияСерий;
	СтруктураДействий.ИмяТЧ										= ИмяТабличнойЧасти;
	СтруктураДействий.ИзменятьКоличество						= Истина;
	СтруктураДействий.ТолькоТовары								= Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(
		СтруктураДействий,
		КэшированныеЗначения,
		ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры",0.1,Истина);
			
	КонецЕсли;
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ДатаОтгрузкиОбязательна, СкладОбязателен);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);			
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы[ИмяТабличнойЧасти].ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Продукция" Тогда
		УстановитьКлючиВСтрокахПродукции(Элементы, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	

	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(
		ЭтаФорма,
		Объект,
		СтруктураПараметровДействия,
		КэшированныеЗначения);
		
	Если СтруктураПараметровДействия.ИмяТЧ = "Продукция" И СтруктураПараметровДействия.ТекущаяСтрока <> Неопределено Тогда
		
		МассивНовыхСтрок = Новый Массив;
		МассивДанныхПоНоменклатуре = Новый Массив;
		
		ТекущаяСтрока = Объект.Продукция.НайтиПоИдентификатору(СтруктураПараметровДействия.ТекущаяСтрока);
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МассивНовыхСтрок.Добавить(ТекущаяСтрока);
		МассивДанныхПоНоменклатуре.Добавить(Документы.ЗаказДавальца.ДанныеПоНоменклатуре(
			ТекущаяСтрока,
			ТекущаяСтрока.Спецификация,
			Объект.Подразделение,
			Объект.Дата));
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(
			МассивНовыхСтрок,
			МассивДанныхПоНоменклатуре);
		
	КонецЕсли;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер(СтруктураПараметровДействия.ИмяТЧ);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий(,ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер(ИмяТабЧасти, ИдентификаторСтроки, СтруктураДействий, КэшированныеЗначения)

	ТекущаяСтрока = Объект[ИмяТабЧасти].НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	Если ИмяТабЧасти = "Продукция" Тогда

		ПродукцияЗаполнитьСпецификацию(ТекущаяСтрока,
			Объект.Подразделение,
			Объект.Дата);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействийИзмененныеСтроки);
	
	СтруктураДействийДобавленныеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("ПроверитьЗаполнитьСклад", ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Ложь));
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Материалы",
		"Номенклатура,Характеристика,Склад,ДатаПоступления",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Материалы");
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОПредназначенииМатериала()
	
	ТекСтрока = Элементы.Материалы.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Или ТекСтрока.КодСтрокиПродукция = 0 Тогда
		
		ПродукцияНоменклатура = Неопределено;
		ПродукцияХарактеристика = Неопределено;
		ПродукцияСпецификация = Неопределено;
		
	Иначе
		
		Отбор = Новый Структура("КодСтроки", ТекСтрока.КодСтрокиПродукция);
		СтрокиПродукции = Объект.Продукция.НайтиСтроки(Отбор);
		
		Если СтрокиПродукции.Количество() = 0 Тогда
			
			ПродукцияНоменклатура = Неопределено;
			ПродукцияХарактеристика = Неопределено;
			ПродукцияСпецификация = Неопределено;
			
		Иначе
			
			ПродукцияНоменклатура = СтрокиПродукции[0].Номенклатура;
			
			// Характеристика
			Если СтрокиПродукции[0].ХарактеристикиИспользуются Тогда
				ПродукцияХарактеристика	= СтрокиПродукции[0].Характеристика;
			Иначе
				ПродукцияХарактеристика	= НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
			КонецЕсли;
			
			// Спецификация
			Если ЗначениеЗаполнено(СтрокиПродукции[0].Спецификация) Тогда
				ПродукцияСпецификация = СтрокиПродукции[0].Спецификация;
			Иначе
				ПродукцияСпецификация = НСтр("ru='<не указана>';uk='<не зазначена>'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыПерезаполнитьПоПотребностямПроизводтсваНаСервере(КэшированныеЗначения)
	
	ПараметрыЗаполнения = Новый Структура("Ссылка, ДатаПоступления, ПоступлениеОднойДатой");
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Объект);
	
	ДанныеИзменены = Документы.ЗаказДавальца.ЗаполнитьПоФактическойПотребности(
		ПараметрыЗаполнения,
		Объект.Материалы);
	
	Если ДанныеИзменены Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
			Объект.Материалы,
			СтруктураДействий,
			КэшированныеЗначения);
		
		Модифицированность = Истина;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='В заполнении материалов по фактической потребности производства нет необходимости.';uk='У заповненні матеріалів за фактичною потребою виробництва немає необхідності.'")
		  + Символы.ПС + НСтр("ru='Отклонений фактической потребности в материалах от заказанного количества не обнаружено.';uk='Відхилень фактичної потреби в матеріалах від замовленої кількості не виявлено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		
	КонецЕсли;
	
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура МатериалыЗаполнитьПоСпецификациямНаСервере()
	
	МассивДанных = Новый Массив;
	МассивКлючей = Новый Массив;
	
	Для Каждого СтрТЧ из Объект.Продукция Цикл
		
		Если СтрТЧ.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивДанных.Добавить(Документы.ЗаказДавальца.ДанныеПоНоменклатуре(
			СтрТЧ,
			СтрТЧ.Спецификация,
			Объект.Подразделение,
			Объект.Дата));
		
		МассивКлючей.Добавить(СтрТЧ.КодСтроки);
		
	КонецЦикла;
	
	Объект.Материалы.Очистить();
	
	ТаблицаТоваров = Объект.Материалы.Выгрузить(, "Номенклатура,Характеристика,КодСтрокиПродукция,Упаковка,КоличествоУпаковок, Количество");
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("МатериалыИУслуги");
	
	ПараметрыСпецификаций = Новый Структура;
	ПараметрыСпецификаций.Вставить("ПереченьДанных",ПереченьДанных);
	ПараметрыСпецификаций.Вставить("МассивКлючей",	МассивКлючей);
	ПараметрыСпецификаций.Вставить("МассивДанных",	МассивДанных);
	ПараметрыСпецификаций.Вставить("Подразделение",	Объект.Подразделение);
	
	Документы.ЗаказДавальца.МатериалыПоСпецификациям(ПараметрыСпецификаций, ТаблицаТоваров);
	
	ТаблицаТоваров.Сортировать("Номенклатура, Характеристика, КодСтрокиПродукция");
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		Если СтрокаТовара.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Спецификация содержит материал с типом ""Работа"" (%1). Добавление работ в заказ давальцу не допускается.';uk='Специфікація містить матеріал з типом ""Робота"" (%1). Додавання робіт у замовлення давальцю не допускається.'"),
								СтрокаТовара.Номенклатура);
								
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТовара.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Спецификация содержит материал с типом ""Многооборотная тара"" (%1). Добавление тары в заказ давальцу не допускается.';uk='Специфікація містить матеріал з типом ""Багатозворотна тара"" (%1). Додавання тари у замовлення давальцю не допускається.'"),
			СтрокаТовара.Номенклатура);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура("ПроверитьЗаполнитьСклад", ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Ложь));
		ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер("Материалы");
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(
		Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКлючиВСтрокахПродукции(Элементы, Объект, СтрокаБезКлюча = Неопределено)
	
	КодУстановлен = Ложь;
	
	Если Не СтрокаБезКлюча = Неопределено Тогда
		
		// В процедуру передана конкретная строка
		Если СтрокаБезКлюча.КодСтроки = 0 Тогда
			
			СтрокаБезКлюча.КодСтроки = Объект.ПродукцияМаксимальныйКодСтроки + 1;
			Объект.ПродукцияМаксимальныйКодСтроки = СтрокаБезКлюча.КодСтроки;
			
			КодУстановлен = Истина;
			
		КонецЕсли;
		
	Иначе
		
		// Необходимо проверить утсановку кода стрроки для всех строк
		СтрокиБезКлюча = Объект.Продукция.НайтиСтроки(Новый Структура("КодСтроки", 0));
		
		Если СтрокиБезКлюча.Количество() > 0 Тогда
			
			КодУстановлен = Истина;
			ТекущийКод = Объект.ПродукцияМаксимальныйКодСтроки;
			
			Для Каждого СтрокаБезКлюча Из СтрокиБезКлюча Цикл
				
				ТекущийКод = ТекущийКод + 1;
				СтрокаБезКлюча.КодСтроки = ТекущийКод;
				
			КонецЦикла;
			
			Объект.ПродукцияМаксимальныйКодСтроки = ТекущийКод;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КодУстановлен Тогда
		ОбновитьСписокВыбораКодовСтрокПродукции(Элементы, Объект.Продукция);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияЗаполнитьОсновнойСпецификациейНаСервере(ИдентификаторыСтрок)
	
	МассивНовыхСтрок = Новый Массив;
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	Для Каждого ИдентификаторСтроки из ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивНовыхСтрок.Добавить(ДанныеСтроки);
		МассивДанныхПоНоменклатуре.Добавить(Документы.ЗаказДавальца.ДанныеПоНоменклатуре(
			ДанныеСтроки,
			ДанныеСтроки.Спецификация,
			Объект.Подразделение,
			Объект.Дата));
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияЗаполнитьСобственныеМатериалыНаСервере(Идентификаторы, Знач МассивСтрок = Неопределено, ПересчитатьСуммы = Ложь, КэшированныеЗначения = Неопределено)
	
	Если МассивСтрок = Неопределено Тогда
		
		МассивСтрок = Новый Массив;
		
		Если ТипЗнч(Идентификаторы) = Тип("Массив") Тогда
			Для Каждого Строка Из Идентификаторы Цикл
				МассивСтрок.Добавить(Объект.Продукция.НайтиПоИдентификатору(Строка));
			КонецЦикла;
		Иначе
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Объект.Продукция.НайтиПоИдентификатору(Идентификаторы));
		КонецЕсли;
		
	КонецЕсли;
	
	Документы.ЗаказДавальца.ЗаполнитьСтоимостьСобственныхМатериалов(МассивСтрок, Объект.Дата, Объект.Материалы.Выгрузить());
	
	Если ПересчитатьСуммы Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуУслугиЗаказДавальца");
		СтруктураДействий.Вставить("ПересчитатьСуммуЗаказДавальца");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
			МассивСтрок,
			СтруктураДействий,
			КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписокВыбораКодовСтрокПродукции(Элементы, Продукция)
	
	КодыСтрок = Элементы.МатериалыКодСтрокиПродукция.СписокВыбора;
	КодыСтрок.Очистить();
	
	// Определим список выбора
	Для Каждого СтрТЧ из Продукция Цикл
		
		ПредставлениеОтбора = "" + СтрТЧ.КодСтроки;
		
		Если ЗначениеЗаполнено(СтрТЧ.Номенклатура) Тогда
			ПредставлениеОтбора = ПредставлениеОтбора + " - """ + СтрТЧ.Номенклатура + """";
			Если ЗначениеЗаполнено(СтрТЧ.Характеристика) Тогда
				ПредставлениеОтбора = ПредставлениеОтбора + " / """ + СтрТЧ.Характеристика + """";
			КонецЕсли;
		КонецЕсли;
		
		КодыСтрок.Добавить(СтрТЧ.КодСтроки, ПредставлениеОтбора);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПродукцияЗаполнитьСпецификацию(ДанныеСтроки, Подразделение, НачалоПроизводства = '00010101')
	
	Спецификация = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
	
	Если Не ДанныеСтроки.Номенклатура.Пустая() Тогда
		
		// Если номенклатура указана, попытаемся определеить спецификацию по умолчанию
		ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
			Подразделение,
			ДанныеСтроки.Номенклатура,
			ДанныеСтроки.Характеристика,
			НачалоДня(НачалоПроизводства),
			ДанныеСтроки.Спецификация);
		
		Если Не ДанныеСпецификации = Неопределено Тогда
			Спецификация = ДанныеСпецификации.Спецификация;
		КонецЕсли;
		
	КонецЕсли;
	
	СпецификацияИзменилась = (Не ДанныеСтроки.Спецификация = Спецификация);
	Если СпецификацияИзменилась Тогда
		ДанныеСтроки.Спецификация = Спецификация;
	КонецЕсли;
	
	Возврат СпецификацияИзменилась;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОбъектаССоглашением(Объект, ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ПараметрыОбъекта.Вставить("Соглашение", ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка"));
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокЗаказовПоДаннымДавальца(ТекущийЗаказ, Контрагент, НомерВходящегоДокумента)
	
	ДатаВходящегоДокумента = ?(ЗначениеЗаполнено(ТекущийЗаказ.Дата), ТекущийЗаказ.Дата, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказДавальца
	|ГДЕ
	|	Ссылка <> &ТекущийЗаказ
	|	И Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НомерПоДаннымПартнера = &НомерПоДаннымПартнера
	|	И Контрагент = &Контрагент
	|	И НЕ ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНачала",				ДобавитьМесяц(ДатаВходящегоДокумента, -3));
	Запрос.УстановитьПараметр("ДатаОкончания",			ДобавитьМесяц(ДатаВходящегоДокумента, 3));
	Запрос.УстановитьПараметр("Контрагент",				Контрагент);
	Запрос.УстановитьПараметр("ТекущийЗаказ",			ТекущийЗаказ);
	Запрос.УстановитьПараметр("НомерПоДаннымПартнера",	НомерВходящегоДокумента);
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЗаказов;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымДавальца(НомерПоДаннымПартнера)
	
	СписокЗаказов = ПолучитьСписокЗаказовПоДаннымДавальца(Объект.Ссылка, Объект.Контрагент, НомерПоДаннымПартнера);
	
	Если СписокЗаказов.Количество() > 0 Тогда
		
		СписокКнопок = Новый СписокЗначений;
		
		Если СписокЗаказов.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru='В информационной базе уже существует заказ с таким же номером по данным давальца. Продолжить?';uk='В інформаційній базі вже існує замовлення з таким же номером за даними давальця. Продовжити?'");
			СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru='Открыть заказ';uk='Відкрити замовлення'"));
		Иначе
			ТекстВопроса = НСтр("ru='В информационной базе уже существуют заказы с таким же номером по данным давальца. Продолжить?';uk='В інформаційній базі вже існують замовлення з таким же номером за даними давальця. Продовжити?'");
			СписокКнопок.Добавить("ОткрытьСписокЗаказов", НСтр("ru='Открыть список заказов';uk='Відкрити список замовлень'"));
		КонецЕсли;
		
		СписокКнопок.Добавить("Продолжить", НСтр("ru='Продолжить';uk='Продовжити'"));
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьНаличиеЗаказовПоДаннымДавальцаЗавершение", ЭтотОбъект, Новый Структура("СписокЗаказов", СписокЗаказов)), ТекстВопроса, СписокКнопок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеЗаказовПоДаннымДавальцаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    СписокЗаказов = ДополнительныеПараметры.СписокЗаказов;
    
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = "ОткрытьСписокЗаказов" Тогда
        
        Если СписокЗаказов.Количество() > 1 Тогда
            
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("СписокДокументов", СписокЗаказов);
            ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Заказы давальцев (%КоличествоДокументов%)';uk='Замовлення давальців (%КоличествоДокументов%)'"));
            
            ОткрытьФорму("ОбщаяФорма.ПросмотрСпискаДокументов", ПараметрыФормы);
            
        Иначе
            
            ПараметрыФормы = Новый Структура("Ключ", СписокЗаказов.Получить(0).Значение);
            ОткрытьФорму("Документ.ЗаказДавальца.ФормаОбъекта", ПараметрыФормы);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьХарактеристикиУслуги(Элементы, ХарактеристикиИспользуются)
	
	ГруппаХарактеристик = Элементы.ГруппаХарактеристикаУслуги;
	
	Если ХарактеристикиИспользуются Тогда
		ТекущаяСтраница = ГруппаХарактеристик.ПодчиненныеЭлементы.ГруппаХарактеристикаИспользуется;
	Иначе
		ТекущаяСтраница = ГруппаХарактеристик.ПодчиненныеЭлементы.ГруппаХарактеристикаНеИспользуется;
	КонецЕсли;
	
	ГруппаХарактеристик.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.ТоварыСоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоФункцОпциям()
	
	ВидимостьЭлементов = Новый Соответствие;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаголовокСклад");
	МассивЭлементов.Добавить("КартинкаНесколькоСкладов");
	МассивЭлементов.Добавить("НадписьНесколькоСкладов");
	МассивЭлементов.Добавить("ЗаголовокСкладПоступления");
	МассивЭлементов.Добавить("КартинкаНесколькоСкладовПоступления");
	МассивЭлементов.Добавить("НадписьНесколькоСкладовПоступления");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаголовокОрганизация");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ХарактеристикаНеИспользуется");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПродукцияГруппаОтменено");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов"));
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПродукцияОтмененоПричиныОтменыНеИспользуются");
	
	ВидимостьЭлементов.Вставить(МассивЭлементов, Не ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов"));
	
	Для Каждого ЭлементСоответствия из ВидимостьЭлементов Цикл
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			ЭлементСоответствия.Ключ,
			"Видимость",
			ЭлементСоответствия.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Материалы, СтруктураДействий);
	
	Для Каждого СтрТЧ из Объект.Продукция Цикл
		СтрТЧ.СтавкаНДС = Объект.СтавкаНДС;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Отгрузка)
	
	Если Отгрузка Тогда
		Возврат Новый Структура("Склад, СкладГруппа", Объект.Склад, СкладГруппа);
	Иначе
		Возврат Новый Структура("Склад, СкладГруппа", Объект.СкладПоступления, СкладПоступленияГруппа);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизитыПродукция()
	
	Возврат Новый Структура("Отменено", "Сумма,СуммаНДС,СуммаСНДС");
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьСоглашенияСКлиентами  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВПродажах");
	ИспользоватьГрафикиОплаты         = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	
	ВалютаДокумента = Объект.Валюта;
	
	ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма, ,Ложь);
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Объект.Склад);
	Элементы.ПродукцияЗаполнитьСклад.Доступность = СкладГруппа;
	УстановитьПараметрыВыбораТоварыСклад(Истина);
	
	СкладПоступленияГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.СкладПоступления);
	Элементы.МатериалыЗаполнитьСклад.Доступность = СкладПоступленияГруппа;
	УстановитьПараметрыВыбораТоварыСклад(Ложь);
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Продукция, ЗависимыеРеквизитыПродукция());
	
	УстановитьВидимостьДоговора();
	УстановитьВидимостьОбеспечения();
	
	ОбновитьСостояниеСервер();
	УстановитьСвойстваЭлементовПоПорядкуРасчетов();
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.Продукция, ПараметрыЗаполнения, ДатаОтгрузкиОбязательна, СкладОбязателен);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказДавальца));
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	Элементы.ПродукцияСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
	ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы, Объект);
	
	ЗаполнитьСлужебныеРеквизиты();
	ПриИзмененииСкладаВТабличнойЧастиСервер();
	
	УстановитьВидимостьЗапретаОтгрузкиПартнеру();
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Продукция");
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Материалы");
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).МетаданныеДокумента();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказа(Форма)
	
	Материалы = Форма.Объект.Материалы;
	Продукция = Форма.Объект.Продукция;
	
	Форма.СуммаЗаказано    = Продукция.Итог("СуммаСНДС") - Продукция.Итог("СуммаСНДСОтменено");
	Форма.СуммаНДСЗаказано = Продукция.Итог("СуммаНДС") - Продукция.Итог("СуммаНДСОтменено");
	Форма.СуммаОтменено    = Продукция.Итог("СуммаСНДСОтменено");
	
	Форма.СуммаМатериалов = Материалы.Итог("Сумма");
	
	Форма.СуммаАвансаДоОбеспечения    = 0;
	Форма.СуммаПредоплатыДоОтгрузки   = 0;
	Форма.СуммаКредитаПослеОтгрузки   = 0;
	Форма.ПроцентАвансаДоОбеспечения  = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	АвансДоОбеспечения   = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения");
	ПредоплатаДоОтгрузки = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки");
	КредитПослеОтгрузки  = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки");
	
	СтруктураАванс      = Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения",  "ПроцентАвансаДоОбеспечения");
	СтруктураПредоплата = Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки");
	СтруктураКредит     = Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки");
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(АвансДоОбеспечения,   СтруктураАванс);
	СоответствиеВариантовОплаты.Вставить(ПредоплатаДоОтгрузки, СтруктураПредоплата);
	СоответствиеВариантовОплаты.Вставить(КредитПослеОтгрузки,  СтруктураКредит);
	
	ПредыдущееЗначениеДаты = '00010101';
	Форма.НомерСтрокиПолнойОплаты = 0;
	ПроцентПлатежейОбщий = 0;
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма]    = Форма[ИменаЭлементов.Сумма]    + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если Форма.Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") 
		ИЛИ Форма.Объект.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС") Тогда	
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДСПродукция;
	Иначе
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДСПродукция;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий)
	
	СтруктураХарактеристики  = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураТипНоменклатуры = Новый Структура("Номенклатура", "ТипНоменклатуры");
	СтруктураАртикул         = Новый Структура("Номенклатура", "Артикул");
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураХарактеристики);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураТипНоменклатуры);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", СтруктураАртикул);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", 					СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", 						"КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизитыПродукция());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
			И ИспользоватьНаправленияДеятельности Тогда
	
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъектаССоглашением(Объект), 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта, 
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъектаССоглашением(Объект), 
															Объект.ХозяйственнаяОперация, 
															Объект.Валюта);
	КонецЕсли;
														
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ВзаиморасчетыСервер.ЗаполнитьПорядокРасчетовВФорме(ЭтаФорма);
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад, Отгрузка)
	
	Если Отгрузка Тогда
		
		ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Продукция, МассивВыделенныхСтрок, Склад);
		Если ЗаполненоСтрок > 0 Тогда
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
			ПриИзмененииСкладаВТабличнойЧастиСервер(?(Отгрузка, "Продукция", "Материалы"));
		КонецЕсли;
		
	Иначе
		
		ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Материалы, МассивВыделенныхСтрок, Склад);
		
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДокументСервер()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Документы.ЗаказДавальца.РассчитатьСостояние(
		Объект.Ссылка,
		Объект.Договор,
		ЭтаФорма);
		
	Если Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению Тогда
		Состояние = НСтр("ru='Готов к производству';uk='Готовий до виробництва'");
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Расчеты по договору';uk='Розрахунки за договором'");
	Иначе
		Расчеты = НСтр("ru='Оплачено по заказу';uk='Сплачено за замовленням'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаДокумента + "  " + ПроцентОплаты + "%";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ТолькоПросмотр);
	ПараметрыФормы.Вставить("СуммаОплатыПоДокументу",    СуммаЗаказано);
	ПараметрыФормы.Вставить("СуммаЗалогаПоДокументу",    0);
	ПараметрыФормы.Вставить("ГрафикОплаты",              Объект.ГрафикОплаты);
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки",      Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("Дата",                      Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                    Объект.Валюта);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",    Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",   УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьЭтапыГрафикаОплатыВоВременноеХранилищеНаСервере());
	ПараметрыФормы.Вставить("ФормаОплаты",               Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("Касса",                     Объект.Касса);
	ПараметрыФормы.Вставить("БанковскийСчет",            Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("Организация",               Объект.Организация);
	ПараметрыФормы.Вставить("ПараметрыВыбораРеквизитов", ПараметрыВыбораРеквизитов);
	ПараметрыФормы.Вставить("ПорядокРасчетов",           Объект.ПорядокРасчетов);
	ПараметрыФормы.Вставить("ДоступныеПорядкиРасчетов",  ДоступныеПорядкиРасчетов);
	ПараметрыФормы.Вставить("ЭтоЗаказ",                  Истина);
	ПараметрыФормы.Вставить("НаправлениеДеятельности",   Объект.НаправлениеДеятельности);
	
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ЭтапыОплатыКлиентом", 
		ПараметрыФормы, 
		ЭтаФорма,,,, 
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(ПараметрыОплаты, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыОплаты <> Неопределено Тогда
	
		Модифицированность = Истина;
		
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Объект.Согласован           = Ложь;
		Объект.Касса                = ПараметрыОплаты.Касса;
		Объект.БанковскийСчет       = ПараметрыОплаты.БанковскийСчет;
		Объект.ГрафикОплаты         = ПараметрыОплаты.ГрафикОплаты;
		Объект.ФормаОплаты          = ПараметрыОплаты.ФормаОплаты;
		Объект.ЖелаемаяДатаОтгрузки = ПараметрыОплаты.ЖелаемаяДатаОтгрузки;
		
		Если Объект.ПорядокРасчетов <> ПараметрыОплаты.ПорядокРасчетов Тогда
			Объект.ПорядокРасчетов = ПараметрыОплаты.ПорядокРасчетов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		
		УстановитьСвойстваЭлементовПоПорядкуРасчетов();
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЭтапыГрафикаОплатыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Функция ПоместитьПродукциюИМатериалыВоВременноеХранилищеНаСервере()
	
	Адрес = Новый Структура;
	Адрес.Вставить("Продукция", ПоместитьВоВременноеХранилище(Объект.Продукция.Выгрузить()));
	Адрес.Вставить("Материалы", ПоместитьВоВременноеХранилище(Объект.Материалы.Выгрузить()));
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовПоПорядкуРасчетов() Экспорт
	
	НадписьЭтапыОплаты = ЭтапыОплатыКлиентСервер.НадписьЭтапыОплаты(ЭтаФорма, Истина);
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма, Истина);
	ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма, Истина);
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер()
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораСкладов(Склад)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
	|	И Склады.ЭтоГруппа = ЛОЖЬ
	|	И Склады.ВыборГруппы <> ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.Запретить)");

	Запрос.УстановитьПараметр("ГруппаСкладов", Склад);
	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСкладов;

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораТоварыСклад(Отгрузка)
	
	Если Отгрузка Тогда
		Элементы.ПродукцияСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.ПродукцияСклад, "Ссылка", ДанныеВыбораСкладов(Объект.Склад));
	Иначе
		Элементы.МатериалыСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.МатериалыСклад, "Ссылка", ДанныеВыбораСкладов(Объект.СкладПоступления));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДатыОтгрузкиПоступления

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(МассивВыделенныхСтрок = Неопределено)
	
	ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуОтгрузкиЗавершение", ЭтотОбъект, Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок));
	
	РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru='Введите дату отгрузки';uk='Введіть дату відвантаження'"), ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаОтгрузки = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ПродукцияЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, (МассивВыделенныхСтрок <> Неопределено));
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступления(МассивВыделенныхСтрок = Неопределено)
	
	ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуПоступленияЗавершение", ЭтотОбъект, Новый Структура("МассивВыделенныхСтрок", МассивВыделенныхСтрок));
	
	РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления';uk='Введіть дату надходження'"), ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияЗавершение(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата <> Неопределено И ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		
		ДатаПоступления = ВыбраннаяДата;
		МассивВыделенныхСтрок = ДополнительныеПараметры.МассивВыделенныхСтрок;
		
		ЗаполнитьДатыПоступленияСервер(ДатаПоступления, МассивВыделенныхСтрок);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДатыОтгрузкиСервер(ДатаОтгрузки, Знач МассивВыделенныхСтрок)
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.Продукция Цикл
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, Знач МассивВыделенныхСтрок)
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.Продукция Цикл
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления)
	
	Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеДатыОтгрузкиСервер(ДатаОтгрузки)
	
	Для Каждого СтрокаТЧ Из Объект.Продукция Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаОтгрузки) Тогда
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Функция МаксимальнаяДатаПоступления()
	
	МаксимальнаяДатаПоступления = Дата(1,1,1);
	Для Каждого Товар Из Объект.Материалы Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
	КонецЦикла;
	
	Возврат МаксимальнаяДатаПоступления
	
КонецФункции

&НаСервере 
Функция МаксимальнаяДатаОтгрузки()
	
	МаксимальнаяДатаОтгрузки = Дата(1,1,1);
	Для Каждого Товар Из Объект.Продукция Цикл 
		МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, Товар.ДатаОтгрузки);
	КонецЦикла;
	
	Возврат МаксимальнаяДатаОтгрузки
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьДатыПоступленияСервер(ДатаПоступления, Знач МассивВыделенныхСтрок)
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.Материалы Цикл
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.Материалы.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеДатыПоступления()
	
	Если Объект.Материалы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПустуюДатуПоступленияСервер() Тогда
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		Иначе
			ДатаПоступления = ТекущаяДата();
		КонецЕсли;
		
		ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПустуюДатуПоступленияСервер()
	
	Для Каждого ТекСтрока Из Объект.Материалы Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте 
Процедура ЗаполнитьПустуюДатуПоступления()
	
	Если Объект.Материалы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПустуюДатуПоступленияСервер() Тогда
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			Объект.ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		Иначе
			Объект.ДатаПоступления = ТекущаяДата();
		КонецЕсли;
		
		ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДоступностьИВидимость

&НаСервере 
Процедура УстановитьВидимостьЭлементовФормыДатПоступления()
	
	// Кнопка и реквизит ТЧ
	Элементы.МатериалыЗаполнитьДатуПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	Элементы.МатериалыДатаПоступления.Видимость = Не Объект.ПоступлениеОднойДатой;
	
	// Общий реквизит формы
	Элементы.ДатаПоступления.Видимость = Объект.ПоступлениеОднойДатой;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()
	
	// Кнопка и реквизит ТЧ
	Элементы.ПродукцияЗаполнитьДатуОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	Элементы.ПродукцияДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	
	// Общий реквизит формы и кнопка
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыСервер(ГрафикЗаполнен)
	
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажи(Объект, Ложь, ГрафикЗаполнен, СуммаЗаказано);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовДавальцев.НеСогласован Или
		Объект.Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт Тогда
		
		УстановитьПодписку = Ложь;
		
	ИначеЕсли Не Объект.Статус.Пустая() Тогда // Все остальные статусы, кроме пустого
		
		УстановитьПодписку = Объект.Согласован;
		
	Иначе // Пустой статус
		
		УстановитьПодписку = Ложь;
		
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("АвторасчетНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Спецификация");
	
	МассивЭлементов.Добавить("ЖелаемаяДатаПоступления");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДатаОтгрузки");
	МассивЭлементов.Добавить("ПоступлениеОднойДатой");
	МассивЭлементов.Добавить("ДатаПоступления");
	
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	// Элементы управления, связанные с таблицей Продукция
	МассивЭлементов.Добавить("ПродукцияНоменклатура");
	МассивЭлементов.Добавить("ПродукцияХарактеристика");
	МассивЭлементов.Добавить("ПродукцияКоличествоУпаковок");
	МассивЭлементов.Добавить("ПродукцияУпаковка");
	МассивЭлементов.Добавить("ПродукцияЦена");
	МассивЭлементов.Добавить("ПродукцияСтавкаНДС");
	МассивЭлементов.Добавить("ПродукцияСумма");
	
	// Элементы управления, связанные с таблицей Материалы
	МассивЭлементов.Добавить("МатериалыНоменклатура");
	МассивЭлементов.Добавить("МатериалыХарактеристика");
	МассивЭлементов.Добавить("МатериалыКоличествоУпаковок");
	МассивЭлементов.Добавить("МатериалыУпаковка");
	МассивЭлементов.Добавить("МатериалыВидЦены");
	МассивЭлементов.Добавить("МатериалыЦена");
	МассивЭлементов.Добавить("МатериалыСумма");
	
	МассивЭлементов.Добавить("Продукция;ПередНачаломДобавления,ПередУдалением");
	МассивЭлементов.Добавить("Материалы;ПередНачаломДобавления,ПередУдалением");
	
	// Элементы управления, связанные с таблицей Продукция
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ПродукцияДобавить");
	МассивЭлементов.Добавить("ПродукцияИзменить");
	МассивЭлементов.Добавить("ПродукцияСкопировать");
	МассивЭлементов.Добавить("ПродукцияУдалить");
	
	МассивЭлементов.Добавить("ПродукцияЗаполнитьПоСпецификации");
	МассивЭлементов.Добавить("ПродукцияЗаполнитьДатуПоступления");
	МассивЭлементов.Добавить("ПродукцияЗаполнитьСклад");
	
	МассивЭлементов.Добавить("ПродукцияОткрытьПодбор");
	МассивЭлементов.Добавить("ПродукцияПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ПродукцияЗагрузитьДанныеИзТСД");
	
	// Элементы управления, связанные с таблицей Материалы
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("МатериалыДобавить");
	МассивЭлементов.Добавить("МатериалыИзменить");
	МассивЭлементов.Добавить("МатериалыСкопировать");
	МассивЭлементов.Добавить("МатериалыУдалить");
	
	МассивЭлементов.Добавить("МатериалыЗаполнитьПоСпецификации");
	МассивЭлементов.Добавить("МатериалыПодборПоСпецификации");
	МассивЭлементов.Добавить("МатериалыДополнитьМногооборотнойТарой");
	МассивЭлементов.Добавить("МатериалыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("МатериалыЗаполнитьДатуОтгрузки");
	МассивЭлементов.Добавить("МатериалыЗаполнитьСклад");
	
	МассивЭлементов.Добавить("МатериалыОткрытьПодбор");
	МассивЭлементов.Добавить("МатериалыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("МатериалыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("РассчитатьДатуОтгрузки");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовДавальцев.Закрыт Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитатьСтатусДокумента", "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитатьСтатусДокумента", "Доступность", Истина);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьВидимостьЭлементовПоСтавкеНДССервер(ПриОткрытииФормы = Ложь)
  	
  	ПродажаОблагаетсяНДС = (НДСОбщегоНазначенияКлиентСервер.ПолучитьСтавкуНДСЧислом(Объект.СтавкаНДС) > 0);
	
	Элементы.ЦенаВключаетНДС.Видимость = ПродажаОблагаетсяНДС;
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГруппаАвторасчетНДС");
	
	НовыйАвторасчетНДС = НДСИсходящийКлиентСервер.ПолучитьФлагИОбработатьДоступностьАвторасчетаНДСПоСтавкеНДС(Объект.СтавкаНДС, Элементы, МассивЭлементов);
	
	Если НЕ ПриОткрытииФормы И Объект.АвторасчетНДС = ИСТИНА И НовыйАвторасчетНДС = ЛОЖЬ Тогда
		Объект.АвторасчетНДС = НовыйАвторасчетНДС;
	КонецЕсли;
  	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЗапретаОтгрузкиПартнеру()
	
	СегментыСервер.УстановитьВидимостьЗапретаОтгрузкиПартнеру(Объект.Партнер, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоговора()
	
	ВидимостьДоговора = Ложь;
	
	ПараметрыОбъекта = Новый Структура("Партнер, Контрагент, Организация, Соглашение, Договор");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		ПараметрыОбъекта,
		Элементы.Договор.Доступность,
		ВидимостьДоговора,
		Объект.Договор);
	
	Элементы.Договор.Видимость          = ВидимостьДоговора;
	Элементы.ЗаголовокДоговор.Видимость = ВидимостьДоговора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВидаЦен() 
	
	ДоступныеВидыЦен = ОпределитьДоступныеВидыЦен(Объект.ЦенаВключаетНДС);
	
	Если Не ДоступныеВидыЦен = Неопределено И ДоступныеВидыЦен.Количество() <= 1 Тогда
		
		Элементы.ГруппаВидЦены.ТекущаяСтраница = Элементы.ГруппаВидЦеныФлажком;
		
		Если ДоступныеВидыЦен.Количество() = 0 Тогда
			Объект.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
			Элементы.ГруппаВидЦены.ТекущаяСтраница = Элементы.ГруппаВидЦеныНеНайден;
		ИначеЕсли Не Объект.ВидЦены.Пустая() Тогда
			ЗаполнятьВидыЦенПоУмолчанию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидЦены.Пустая() Тогда
		ЗаполнятьВидыЦенПоУмолчанию = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьДоступныеВидыЦен(ЦенаВключаетНДС)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		СтруктураОтбора = Новый Структура("ПометкаУдаления, ЦенаВключаетНДС", Ложь, ЦенаВключаетНДС);
		Возврат Справочники.ВидыЦен.ДоступныеВидыЦен(СтруктураОтбора);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОсобыеУсловияПеревозкиПриИзмененииСервер()
	
	ДоставкаТоваров.ОсобыеУсловияПеревозкиПриИзменении(Элементы, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИнформациюПоДоставкеКонтактамиСервер()
	
	ДоставкаТоваров.ДополнитьИнформациюПоДоставкеКонтактами(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Договор" Тогда
		ДоговорПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ЦенаВключаетНДС" Тогда
		ЦенаВключаетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "АвторасчетНДС" Тогда
		АвторасчетНДСПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Организация" Тогда
		ОрганизацияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Партнер" Тогда
		ПартнерПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Контрагент" Тогда
		КонтрагентПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Склад" Тогда
		СкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "НеОтгружатьЧастями" Тогда
		НеОтгружатьЧастямиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаОтгрузки" Тогда
		ДатаОтгрузкиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПоступлениеОднойДатой" Тогда
		ПоступлениеОднойДатойПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ДатаПоступления" Тогда
		ДатаПоступленияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВернутьМногооборотнуюТару" Тогда
		ВернутьМногооборотнуюТаруПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияНоменклатура" Тогда
		ПродукцияНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияХарактеристика" Тогда
		ПродукцияХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияКоличествоУпаковок" Тогда
		ПродукцияКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияУпаковка" Тогда
		ПродукцияУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияЦена" Тогда
		ПродукцияЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСумма" Тогда
		ПродукцияСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСуммаСобственныхМатериалов" Тогда
		ПродукцияСтоимостьМатериаловПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСуммаУслуги" Тогда
		ПродукцияСуммаУслугиПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыНоменклатура" Тогда
		МатериалыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыХарактеристика" Тогда
		МатериалыХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыКоличествоУпаковок" Тогда
		МатериалыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыУпаковка" Тогда
		МатериалыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыЦена" Тогда
		МатериалыЦенаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыСумма" Тогда
		МатериалыСуммаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияВидЦены" Тогда
		ПродукцияВидЦеныПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСерия" Тогда
		ПродукцияСерияПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияСклад" Тогда
		ПродукцияСкладПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияОтмененоПричиныОтменыНеИспользуются" Тогда
		ПродукцияОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияОтменено" Тогда
		ПродукцияОтмененоПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыКодСтрокиПродукция" Тогда
		МатериалыКодСтрокиПродукцияПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	Если Команда.Имя = "Продукция_Заполнить_ЗаполнитьСклад" Тогда
		ПродукцияЗаполнитьСклад(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ПодобратьТовары" Тогда
		ПродукцияПодобратьТовары(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ПоискПоШтрихкоду" Тогда
		ПродукцияПоискПоШтрихкоду(Команда);
	ИначеЕсли Команда.Имя = "Продукция_Общее_ЗагрузитьДанныеИзТСД" Тогда
		ПродукцияЗагрузитьДанныеИзТСД(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ЗаполнитьПоСпецификациям" Тогда
		МатериалыЗаполнитьПоСпецификациям(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ПодборПоСпецификациям" Тогда
		МатериалыПодборПоСпецификациям(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ДополнитьМногооборотнойТарой" Тогда
		ДополнитьМногооборотнойТарой(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Заполнить_ЗаполнитьСклад" Тогда
		МатериалыЗаполнитьСклад(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ПодобратьТовары" Тогда
		МатериалыПодобратьТовары(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ПоискПоШтрихкоду" Тогда
		МатериалыПоискПоШтрихкоду(Команда);
	ИначеЕсли Команда.Имя = "Материалы_Общее_ЗагрузитьДанныеИзТСД" Тогда
		МатериалыЗагрузитьДанныеИзТСД(Команда);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	Если Элемент.Имя = "Продукция" Тогда
		ПродукцияПередУдалением(Элемент, Отказ);
	ИначеЕсли Не Элемент.Имя = "Материалы" Тогда
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	ИзменитьДокументСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, Объект[ИмяТЧ]);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена(Отгрузка = Ложь)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь));
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	МассивНовыхСтрок = Новый Массив;
	МассивДанныхПоНоменклатуре = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Если Отгрузка Тогда
			ТекущаяСтрока = Объект.Продукция.Добавить();
			ТекущаяСтрока.СтавкаНДС = Объект.СтавкаНДС;
		Иначе
			ТекущаяСтрока = Объект.Материалы.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если Не Отгрузка И Объект.ПоступлениеОднойДатой Тогда
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
		ИначеЕсли Отгрузка И Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Отгрузка));
		Если Отгрузка Тогда
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Истина));
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокПродукции(СтруктураДействий, Объект);
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
				Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
		Иначе
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокМатериалов(СтруктураДействий);
		КонецЕсли;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если Отгрузка Тогда
			
			МассивНовыхСтрок.Добавить(ТекущаяСтрока);
			МассивДанныхПоНоменклатуре.Добавить(Документы.ЗаказДавальца.ДанныеПоНоменклатуре(
				ТекущаяСтрока,
				ТекущаяСтрока.Спецификация,
				Объект.Подразделение,
				Объект.Дата));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыХарактеристик = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются", ПараметрыХарактеристик);
	
	Если Отгрузка Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
		УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивНовыхСтрок, МассивДанныхПоНоменклатуре);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Иначе
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Материалы, СтруктураДействий);
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(
			Объект.СостояниеЗаполненияМногооборотнойТары);
	КонецЕсли;
	
	ПриИзмененииСкладаВТабличнойЧастиСервер(?(Отгрузка, "Продукция", "Материалы"));
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("МатериалыВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, 
		МассивЭлементов, 
		"Доступность",
		Не ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("МатериалыВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область Обеспечение

&НаСервере
Функция ПараметрыВыбораОбеспечения()

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра",
		Объект.Статус <> Перечисления.СтатусыЗаказовДавальцев.НеСогласован, Объект.Склад, РегистрыНакопления.ЗаказыКлиентов);

	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		Элементы.Продукция.ТекущаяСтрока,
		Объект,
		Объект.Продукция,
		ПутиКДанным,
		ПараметрыЗаполнения);

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.Вставить("ТолькоОбособленно", Истина);
	КонецЕсли;
	Возврат Результат;

КонецФункции

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.Продукция.ТекущаяСтрока);
	КонецЦикла;
	ТекстОповещения = Документы.ЗаказДавальца.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокаТовары", ВыбранноеЗначение, ПараметрыУказанияСерий, ЗависимыеРеквизитыПродукция());

	ПриИзмененииСкладаВТабличнойЧастиСервер("Продукция");
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ПереченьВариантов)

	//Описание особенностей формы - дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ГруппаСкладов, МенеджерРегистра",
		Объект.Статус <> Перечисления.СтатусыЗаказовДавальцев.НеСогласован, Объект.Склад, РегистрыНакопления.ЗаказыКлиентов);

	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.Продукция.ВыделенныеСтроки,
		Объект,
		Объект.Продукция,
		ПутиКДанным,
		ПереченьВариантов,
		ПараметрыЗаполнения);

	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура("Ошибки", ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
			Таблица, "Продукция", НСтр("ru='Продукция';uk='Продукція'")));
	КонецЕсли;

	ТекстОповещения = Документы.ЗаказДавальца.ЗаполнитьВариантОбеспечения(Объект, ЭтаФорма, "СтрокиТовары", Таблица,
			ПараметрыУказанияСерий, ЗависимыеРеквизитыПродукция());

	ПриИзмененииСкладаВТабличнойЧастиСервер("Продукция");
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);

////////////////////////////////////////////////

КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()
	
	РеквизитыЗаказа = Новый Структура("ЖелаемаяДатаОтгрузки, Ссылка, НеОтгружатьЧастями, Статус, Дата, Партнер, Менеджер");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);
	
	//Описание особенностей формы - дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");
	
	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.Продукция, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);
	
	ПараметрыЗаполнения = Новый Структура("ИмяМенеджераРегистра", "ЗаказыКлиентов");
	
	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.ОтгружатьЧастями Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	КонецЕсли;
	
	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	ТекстОповещения    = Документы.ЗаказДавальца.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "Заказ", ТаблицаОбеспечения, ПараметрыУказанияСерий, ЗависимыеРеквизитыПродукция());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ТекстОповещения;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСКлиентами("КарточкаРасчетовСКлиентамиПоДокументамКонтекст", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если Объект.Проведен И Не Модифицированность Тогда
		
		// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать
		ОбъектыОснований = Новый Массив();
		ОбъектыОснований.Добавить(Объект.Ссылка);
		
		ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
		
		Если ДополнительныеПараметры.Резервирование Тогда
			ВводНаОснованииУТКлиент.ОткрытьМастерРезервирования(ДополнительныеПараметры.ОписаниеКоманды);
		Иначе
			ВводНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ДополнительныеПараметры.ОписаниеКоманды);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область АвторасчетНДС

&НаКлиенте
Функция ВыполнитьАвторасчетНДСКлиент()
	
	Если (НЕ ПерерасчетПроизведен) И Объект.АвторасчетНДС Тогда
		
		ВыполнитьАвторасчетНДССервер();
		ПерерасчетПроизведен = Истина;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ВыполнитьАвторасчетНДССервер()
	
	// соответствие для хранения погрешностей округлений
	ПогрешностиОкругления = Новый Соответствие();
	// пересчет сумм НДС с учетом ошибок округления
	НДСИсходящийКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Продукция, Объект.Ссылка, Объект.ЦенаВключаетНДС, ПогрешностиОкругления, НСтр("ru='Выпускаемая продукция';uk='Продукція, що випускається'"), Строка(Объект.Валюта),,,,"Отменено", Истина,,Объект.СтавкаНДС);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура АвторасчетНДСПриИзменении(Элемент)
	
	НДСИсходящийКлиент.СброситьПроверитьФлагПерерасчетПроизведен(ЭтаФорма);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПересчитатьНДС", "Доступность", Объект.АвторасчетНДС);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

