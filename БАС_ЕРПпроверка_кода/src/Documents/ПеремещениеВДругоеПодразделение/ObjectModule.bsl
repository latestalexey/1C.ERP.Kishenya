#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "ОрганизацияНовая", "ФизическиеЛица.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ЭтотОбъект, Отказ, РежимПроведения);
	ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияРегистраОстатков(Движения.ЗанятыеПозицииШтатногоРасписания, ЭтотОбъект.ИсправленныйДокумент);
	
	ДанныеДляПроведения = ДанныеДляПроведенияДокумента();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	КадровыйУчет.СформироватьКадровыеДвижения(ЭтотОбъект, Движения, ДанныеДляПроведения.КадровыйУчет);
	
	КадровыйУчетРасширенный.СформироватьДвиженияПоТерриториям(Движения, ДанныеДляПроведения.ТерриторииСотрудников, ОрганизацияНовая);
	
	Если ДанныеДляПроведения.Свойство("ПоказателиРасчетаЗарплаты") Тогда
		РасчетЗарплатыРасширенный.СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(Движения, ДанныеДляПроведения.ПоказателиРасчетаЗарплаты, , Истина);
	КонецЕсли; 
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Организация;
	
	Если ЗначениеЗаполнено(ПодразделениеПрежнее) Тогда
		ПараметрыПолученияСотрудниковОрганизаций.Подразделение 			= ПодразделениеПрежнее;
	КонецЕсли; 
	
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= ДатаПеремещения;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ДатаПеремещения;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	ПараметрыПолученияСотрудниковОрганизаций.ИсключаемыйРегистратор		= Ссылка;
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		Сотрудники.ВыгрузитьКолонку("Сотрудник"),
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.Сотрудники"));
		
	ПроверитьСоответствиеПозицииШРПодразделению(Отказ);
	
	ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Ссылка, ДатаПеремещения);
	
	ДокументыДляИсключения = Новый Массив;
	ДокументыДляИсключения.Добавить(ЭтотОбъект.Ссылка);
	ДокументыДляИсключения.Добавить(ЭтотОбъект.ИсправленныйДокумент);
	КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчету(
		ВремяРегистрации,
		ЭтотОбъект.Сотрудники.ВыгрузитьКолонку("Сотрудник"),
		ДокументыДляИсключения,
		Отказ);
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения", "ДатаПеремещения");
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ДолжностиПозиции = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники.Выгрузить().ВыгрузитьКолонку("ДолжностьПоШтатномуРасписанию"), "Должность");
		Для каждого СтрокаСотрудника Из Сотрудники Цикл
			Если СтрокаСотрудника.Должность <> ДолжностиПозиции[СтрокаСотрудника.ДолжностьПоШтатномуРасписанию] Тогда
				СтрокаСотрудника.Должность = ДолжностиПозиции[СтрокаСотрудника.ДолжностьПоШтатномуРасписанию];
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого СтрокаСотрудника Из Сотрудники Цикл
			Если ЗначениеЗаполнено(СтрокаСотрудника.ДолжностьПоШтатномуРасписанию) Тогда
				СтрокаСотрудника.ДолжностьПоШтатномуРасписанию = Справочники.ШтатноеРасписание.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделение.Ссылка.ДатаПеремещения КАК Период,
		|	ПеремещениеВДругоеПодразделение.Сотрудник,
		|	ПеремещениеВДругоеПодразделение.СпособОтраженияЗарплатыВБухучете,
		|	ПеремещениеВДругоеПодразделение.СтатьяФинансирования
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделение
		|ГДЕ
		|	ПеремещениеВДругоеПодразделение.Ссылка = &Ссылка";
	
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьБухучетЗарплатыСотрудников(
		ЭтотОбъект, Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведенияДокумента()Экспорт
	
	ДанныеДляПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыйПеревод.Ссылка.ДатаПеремещения КАК ДатаСобытия,
	|	КадровыйПеревод.Сотрудник,
	|	КадровыйПеревод.ДолжностьПоШтатномуРасписанию КАК Позиция,
	|	КадровыйПеревод.Ссылка.ПодразделениеНовое КАК Подразделение,
	|	КадровыйПеревод.Должность КАК Должность,
	|	0 КАК КоличествоСтавок,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
	|	Ложь КАК ПринятНаНовоеРабочееМесто,
	|	КадровыйПеревод.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК КадровыйПеревод
	|ГДЕ
	|	КадровыйПеревод.Ссылка = &Ссылка";
	
	ДанныеДляПроведения.Вставить("КадровыйУчет", Запрос.Выполнить().Выгрузить());
	
	Если Организация <> ОрганизацияНовая Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения КАК Период,
			|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Организация КАК Организация,
			|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
			|ГДЕ
			|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка = &Ссылка";
			
		Запрос.Выполнить();
		
		ПараметрыСреза = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыСреза.Отборы, "Регистратор", "<>", Ссылка);
		
		ОписаниеИсточника = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды", "Организация,Сотрудник");
			
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ОписаниеИсточника,
			ПараметрыСреза);
			
		Запрос.УстановитьПараметр("ОрганизацияНовая", ОрганизацияНовая);
			
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Период КАК ДатаСобытия,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Организация КАК Организация,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ФизическоеЛицо,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДокументОснование,
			|	0 КАК Значение
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Период,
			|	&ОрганизацияНовая,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ФизическоеЛицо,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.ДокументОснование,
			|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних";
		
		ДанныеДляПроведения.Вставить("ПоказателиРасчетаЗарплаты", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения КАК ДатаСобытия,
	|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
	|ГДЕ
	|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка = &Ссылка";
	
	ДанныеДляПроведения.Вставить("СотрудникиДаты", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения КАК Период,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Территория
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
		|ГДЕ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка = &Ссылка";
	
	// Набор сведений для проведения по территориям сотрудников
	СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ТерриторииСотрудников", СведенияОКонтрактахДоговорах);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция СформироватьЗапросШРДляПроверки()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.НомерСтроки,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ДолжностьПоШтатномуРасписанию
	|ПОМЕСТИТЬ ВТПозицииШР
	|ИЗ
	|	&Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПозицииШР.ДолжностьПоШтатномуРасписанию.Подразделение КАК ПодразделениеШР,
	|   ВТПозицииШР.ДолжностьПоШтатномуРасписанию КАК ПозицияШР,
	|	ВТПозицииШР.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТПозицииШР КАК ВТПозицииШР
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
КонецФункции	

Процедура ПроверитьСоответствиеПозицииШРПодразделению(Отказ)
	
	ВыборкаПодразделенияШР = СформироватьЗапросШРДляПроверки().Выбрать();
	
	Пока ВыборкаПодразделенияШР.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПодразделенияШР.ПозицияШР) И ВыборкаПодразделенияШР.ПодразделениеШР <> ПодразделениеНовое Тогда
			ТекстСообщения = НСтр("ru='Выбранная позиция штатного расписания не соответствует подразделению.';uk='Обрана позиція штатного розкладу не відповідає підрозділу.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Сотрудники[" + Строка(ВыборкаПодразделенияШР.НомерСтроки - 1) + "].ДолжностьПоШтатномуРасписанию",  , Отказ);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ДатаПеремещения, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
