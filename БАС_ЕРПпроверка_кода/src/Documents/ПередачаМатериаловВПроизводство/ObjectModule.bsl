#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыПередачМатериаловВПроизводство[НовыйСтатус];
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаМатериаловВПроизводство);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	Возврат ПроверитьЗаполнение();
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Для Каждого ДанныеСтроки Из Товары Цикл
		Если ПередачаПоРаспоряжениям 
			И ЗначениеЗаполнено(Распоряжение) 
			И Не ЗначениеЗаполнено(ДанныеСтроки.Распоряжение) Тогда
		
			// Если передача по заказу, то нужно заполнить пустой заказ
			ДанныеСтроки.Распоряжение = Распоряжение;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеСтроки.Распоряжение)
			И ДанныеСтроки.Распоряжение <> Неопределено Тогда
			
			// Приведем тип незаполненного значения у реквизитов
			// - Распоряжение табличной части Товары
			ДанныеСтроки.Распоряжение = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаМатериаловВПроизводство));
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация, Склад, Подразделение, Неопределено);
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийОтправитель");
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Товары, МестаУчета, ИменаПолей);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		ЗаполнитьВидыЗапасов(Отказ);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ДанныеВнутреннихДокументов.ЗаписатьДанныеДокумента(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") 
		И ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ЗаполнитьНаОснованииПоступления(ДанныеЗаполнения);
		
	//++ НЕ УТКА
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Массив")
		И ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		ЗаполнитьНаОснованииЗаказаДавальца(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Массив")
		И ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ПоступлениеСырьяОтДавальца") Тогда
		
		ЗаполнитьНаОснованииПоступлениеСырьяОтДавальца(ДанныеЗаполнения);
		
	//-- НЕ УТКА
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Товары") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		
		Для Каждого Строка Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.НазначениеОтправителя = НоваяСтрока.Назначение;
		КонецЦикла;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаМатериаловВПроизводство);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);
		
	Иначе // Заполнение по заказу(-ам).
		
		СтруктураЗаполнения = Неопределено;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда // команда ввода на основании
			СтруктураЗаполнения = Новый Структура("МассивЗаказов", ДанныеЗаполнения);
			СтруктураЗаполнения.Вставить("РеквизитыШапки", РеквизитыЗаказаДляЗаполнения(ДанныеЗаполнения));
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивЗаказов") Тогда // из спец. формы оформления накладных
			
			СтруктураЗаполнения = ДанныеЗаполнения;
			
		КонецЕсли;
		
		Если СтруктураЗаполнения <> Неопределено Тогда
			
			ЗаполнитьПоЗаказу(СтруктураЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначение");
	
	// Проверка количества в т.ч. товары.
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	// Проверка характеристик в т.ч. товары.
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	
	// Проверка заполнения серий в т.ч. серии.
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаМатериаловВПроизводство),
		Отказ,
		МассивНепроверяемыхРеквизитов);
		
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		Если ПередачаПоРаспоряжениям И
			Не ЗначениеЗаполнено(Распоряжение) И
			Не ЗначениеЗаполнено(Товары[ТекИндекс].Распоряжение) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Заказ"" в строке %НомерСтроки% списка ""Материалы""';uk='Не заповнено поле ""Замовлення"" в рядку %НомерСтроки% списку ""Матеріали""'");
			ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "Распоряжение"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьДублированиеАналитикиНоменклатуры(Отказ);
		
	// Если накладная по заказу - то код строки должен быть заполнен.
	Если Не ЗначениеЗаполнено(Распоряжение) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ПередачаМатериаловВПроизводство.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);

	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловВПроизводство(ДополнительныеСвойства, Движения, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Распоряжение = Неопределено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	ПередачаПоРаспоряжениям = Ложь;
	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	
	ВидыЗапасов.Очистить();
	Серии.Очистить();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.КодСтроки = 0;
		СтрокаТЧ.Распоряжение = Неопределено;
		СтрокаТЧ.ИдентификаторСтроки = "";
	КонецЦикла;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Организация;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Склад;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = Подразделение;
	
КонецПроцедуры

#Область ИнициализацияИЗаполнение

Функция РеквизитыЗаказаДляЗаполнения(Заказы)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА Заказы.Распоряжение ЕСТЬ NULL 
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ), ЛОЖЬ) КАК ЕстьОтгрузить,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Заказы.Распоряжение.Статус В (&МассивДопустимыхСтатусов)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьОшибкиСтатус,
	|	МИНИМУМ(Заказы.Распоряжение.Проведен) КАК Проведен,
	|	МАКСИМУМ(Заказы.Распоряжение.Организация) КАК Организация,
	|	МАКСИМУМ(Заказы.Склад) КАК Склад,
	|	МАКСИМУМ(Заказы.Подразделение) КАК Подразделение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказы.Распоряжение.Организация) КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказы.Склад) КАК КоличествоСкладов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказы.Подразделение) КАК КоличествоПодразделений
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(
	|			,
	|			,
	|			,
	|			Распоряжение В (&Заказы)
	|				И ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))) КАК Заказы";
	
	МассивДопустимыхСтатусов = Новый Массив;
	Если ТипЗнч(Заказы[0]) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовМатериаловВПроизводство.КВыполнению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовМатериаловВПроизводство.Закрыт);
	//++ НЕ УТКА		
	Иначе
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.Создан);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаПроизводство.Закрыт);
	//-- НЕ УТКА
	КонецЕсли; 
	Запрос.УстановитьПараметр("МассивДопустимыхСтатусов", МассивДопустимыхСтатусов);
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если Не Выборка.ЕстьОтгрузить Тогда
		ТекстОшибки = ОбеспечениеСервер.ТекстОшибкиНетТоваровДоступныхДляОтгрузки();
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если НЕ Выборка.Проведен Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов по непроведенным заказам.';uk='Неможливо оформити передачу матеріалів за непроведеними замовленнями.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	Если Выборка.ЕстьОшибкиСтатус Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов.
                                |Заказы должны иметь статус ""К выполнению"", ""Закрыт"".'
                                |;uk='Неможливо оформити передачу матеріалів.
                                |Замовлення повинні мати статус ""До виконання"", ""Закритий"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	Если Выборка.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов по разным организациям.';uk='Неможливо оформити передачу матеріалів по різних організаціях.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	Если Выборка.КоличествоСкладов > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов, т.к материалы отгружаются с разных складов.
                                    |Для оформления документа необходимо использовать форму ""Получение и возврат материалов"".'
                                    |;uk='Неможливо оформити передачу матеріалів, оскільки матеріали відвантажуються з різних складів.
                                    |Для оформлення документа необхідно використовувати форму ""Отримання і повернення матеріалів"".'");
		Иначе
			ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов, 
                                    |т.к материалы отгружаются с разных складов.'
                                    |;uk='Неможливо оформити передачу матеріалів, 
                                    |оскільки матеріали відвантажуються з різних складів.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	Если Выборка.КоличествоПодразделений > 1 Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПолучениеИВозвратМатериалов) Тогда
			ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов, т.к материалы отгружаются в разные подразделения.
                                    |Для оформления документа необходимо использовать форму ""Получение и возврат материалов"".'
                                    |;uk='Неможливо оформити передачу матеріалів, оскільки матеріали відвантажуються у різні підрозділи.
                                    |Для оформлення документа необхідно використовувати форму ""Отримання і повернення матеріалів"".'");
		Иначе
			ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов, 
                                    |т.к материалы отгружаются в разные подразделения.'
                                    |;uk='Неможливо оформити передачу матеріалів, 
                                    |оскільки матеріали відвантажуються у різні підрозділи.'");
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	
	РеквизитыЗаказа = Новый Структура("Организация,Подразделение,Склад");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Выборка);
	Возврат РеквизитыЗаказа;
	
КонецФункции

// Заполняет документ по одному или нескольким заказам
//
// Параметры:
//	ДанныеЗаполнения - Массив, ДокументСсылка - ссылка на документ заказа или массив ссылок
//	РеквизитыШапки - Структура - значения реквизитов шапки
//	ЗаполнятьНаДату - Дата - дата, на которую нужно получить остатки заказов
//	ОтборТовары - ДанныеФормыКоллекция, ТаблицаЗначений - содержит отбор товаров
//
Процедура ЗаполнитьПоЗаказу(СтруктураЗаполнения)
	
	Перем СкладШапки, ПодразделениеШапки;
	
	СтруктураЗаполнения.Свойство("Склад", СкладШапки);
	СтруктураЗаполнения.Свойство("Подразделение", ПодразделениеШапки);
	
	Если ЗначениеЗаполнено(СкладШапки) Тогда
		СтруктураЗаполнения.РеквизитыШапки.Склад = СтруктураЗаполнения.Склад;
	Иначе
		СкладШапки = СтруктураЗаполнения.РеквизитыШапки.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодразделениеШапки) Тогда
		СтруктураЗаполнения.РеквизитыШапки.Подразделение = СтруктураЗаполнения.Подразделение;
	Иначе
		ПодразделениеШапки = СтруктураЗаполнения.РеквизитыШапки.Подразделение;
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ПередачаМатериаловВПроизводство.ПараметрыЗаполненияДокумента();
	ПараметрыЗаполнения.Вставить("РеквизитыШапки", СтруктураЗаполнения.РеквизитыШапки);
	ПараметрыЗаполнения.Вставить("ФормаОткрыта", Ложь);
	ПараметрыЗаполнения.Вставить("Склад", СкладШапки);
	
	Если СтруктураЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьПоОрдеру", СтруктураЗаполнения.ЗаполнятьПоОрдеру);
	КонецЕсли;
	
	МассивЗаказов = СтруктураЗаполнения.МассивЗаказов;
	
	ПараметрыЗаполнения.Вставить("НакладнаяПоЗаказу", Истина);
	
	ТаблицаНакладная = Документы.ПередачаМатериаловВПроизводство.ДанныеТаблицыТоварыДокумента(ЭтотОбъект.Ссылка);
	
	Если СтруктураЗаполнения.Свойство("СписокМатериалов") Тогда
		ТаблицаКОформлениюОстаток = РегистрыНакопления.ЗаказыМатериаловВПроизводство.КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов, СкладШапки, ПодразделениеШапки, СтруктураЗаполнения.СписокМатериалов);
	Иначе
		ТаблицаКОформлениюОстаток = РегистрыНакопления.ЗаказыМатериаловВПроизводство.КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов, СкладШапки, ПодразделениеШапки);
	КонецЕсли;
	
	ТаблицаКОформлениюОстаток.Индексы.Добавить(ПараметрыЗаполнения.КлючевыеПоля);
	
	СтруктураПерезаполнения = РегистрыСведений.ДанныеВнутреннихДокументов.ПолучитьДанныеДляПерезаполненияНакладной(
		ЭтотОбъект.Ссылка, МассивЗаказов, ТаблицаНакладная, ТаблицаКОформлениюОстаток, ПараметрыЗаполнения);
	ТаблицаНовыхСтрок = Документы.ПередачаМатериаловВПроизводство.ДополнитьСтрокиТаблицыПерезаполненияПоЗаказу(СтруктураПерезаполнения.ТаблицаНовыхСтрок);
	ТЧПерезаполнена = РегистрыСведений.ДанныеВнутреннихДокументов.ПерезаполнитьТоварыНакладной(
		СтруктураПерезаполнения.ТаблицаСуществующихСтрок, ТаблицаНовыхСтрок, ЭтотОбъект.Товары, 
			ПараметрыЗаполнения.КлючевыеПоля + ", " + ПараметрыЗаполнения.ДополнительныеПоляТаблицыДокумента);
	Документы.ПередачаМатериаловВПроизводство.ЗаполнитьШапкуДокументаПоЗаказу(ЭтотОбъект, ПараметрыЗаполнения, МассивЗаказов);
	
	Если ПараметрыЗаполнения.Свойство("ЗаполнятьПоОрдеру") И ПараметрыЗаполнения.ЗаполнятьПоОрдеру Тогда
		Документы.ПередачаМатериаловВПроизводство.ЗаполнитьСерииПоОтгрузке(ЭтотОбъект);
	КонецЕсли; 
	
	// Информация о шапке документа актуализирована в ЗаполнитьШапкуДокументаПоЗаказу
	ПараметрыЗаполнения.Вставить("Организация", Организация);
	ПараметрыЗаполнения.Вставить("Подразделение", Подразделение);
	ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Документы.ПередачаМатериаловВПроизводство.ОбновитьЗависимыеРеквизитыТабличнойЧасти(Товары, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииПоступления(МассивЗаказов)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаДокумента.Организация),
		|	МАКСИМУМ(ТаблицаТовары.Склад) КАК Склад,
		|	МИНИМУМ(ТаблицаДокумента.Проведен) КАК Проведен,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокумента.Организация) КАК КоличествоОрганизаций,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаТовары.Склад) КАК КоличествоСкладов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ТаблицаДокумента
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|	ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
		|ГДЕ
		|	ТаблицаДокумента.Ссылка В (&МассивЗаказов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	ПоступлениеТоваровУслугТовары.Упаковка,
		|	ПоступлениеТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ПоступлениеТоваровУслугТовары.Количество КАК Количество,
		|	ПоступлениеТоваровУслугТовары.Склад КАК Склад,
		|	ПоступлениеТоваровУслугТовары.Серия,
		|	ПоступлениеТоваровУслугТовары.Назначение КАК НазначениеОтправителя,
		|	ПоступлениеТоваровУслугТовары.Назначение КАК Назначение
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка В (&МассивЗаказов)
		|	И ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоступлениеТоваровУслугСерии.Серия,
		|	ПоступлениеТоваровУслугСерии.Количество,
		|	ПоступлениеТоваровУслугСерии.Номенклатура,
		|	ПоступлениеТоваровУслугСерии.Характеристика,
		|	ПоступлениеТоваровУслугСерии.Назначение КАК НазначениеОтправителя,
		|	ПоступлениеТоваровУслугСерии.Назначение КАК Назначение
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Серии КАК ПоступлениеТоваровУслугСерии
		|ГДЕ
		|	ПоступлениеТоваровУслугСерии.Ссылка В (&МассивЗаказов)
		|	И ПоступлениеТоваровУслугСерии.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))");
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРеквизиты = РезультатЗапроса[0].Выбрать();
	Если Не ВыборкаРеквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатЗапроса[1].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Поступление не содержит товаров. Ввод на основании невозможен.';uk='Надходження не містить товарів. Введення на підставі неможливе.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если ВыборкаРеквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов по разным организациям.';uk='Неможливо оформити передачу матеріалів по різних організаціях.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	Если ВыборкаРеквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов, т.к материалы поступили на разные склады.';uk='Неможливо оформити передачу матеріалів, оскільки матеріали надійшли на різні склади.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаРеквизиты);
	
	ТаблицаТовары = РезультатЗапроса[1].Выгрузить();
	Товары.Загрузить(ТаблицаТовары);
	Серии.Загрузить(РезультатЗапроса[2].Выгрузить());
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаМатериаловВПроизводство);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

//++ НЕ УТКА
Процедура ЗаполнитьНаОснованииЗаказаДавальца(ДанныеЗаполнения)
	
	ЗаказыДавальца = ДанныеЗаполнения;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗаказДавальца.Организация) КАК Организация,
	|	МАКСИМУМ(ЗаказДавальца.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(НЕ ЗаказДавальца.Проведен) КАК ЕстьОшибкиПроведен,
	|	МИНИМУМ(ЗаказДавальца.Статус) КАК Статус,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаказДавальца.Статус В (&МассивДопустимыхСтатусов)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьОшибкиСтатус,
	|	МАКСИМУМ(ЗаказДавальца.Склад) КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство) КАК ХозяйственнаяОперация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Организация) КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Подразделение) КАК КоличествоПодразделений,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Склад) КАК КоличествоСкладов
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказДавальца
	|ГДЕ
	|	ЗаказДавальца.Ссылка В(&ЗаказыДавальца)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбеспечениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|	ОбеспечениеЗаказовОстатки.Характеристика КАК Характеристика,
	|	ОбеспечениеЗаказовОстатки.Склад КАК Склад,
	|	ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток КАК Количество,
	|	ОбеспечениеЗаказовОстатки.Назначение КАК Назначение,
	|	МИНИМУМ(ЗаказДавальцаМатериалы.Упаковка) КАК Упаковка,
	|	СУММА(ЗаказДавальцаМатериалы.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТМатериалы
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки КАК ОбеспечениеЗаказовОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Материалы КАК ЗаказДавальцаМатериалы
	|		ПО ОбеспечениеЗаказовОстатки.Назначение.Заказ = ЗаказДавальцаМатериалы.Ссылка
	|			И ОбеспечениеЗаказовОстатки.Номенклатура = ЗаказДавальцаМатериалы.Номенклатура
	|			И ОбеспечениеЗаказовОстатки.Характеристика = ЗаказДавальцаМатериалы.Характеристика
	|			И ОбеспечениеЗаказовОстатки.Склад = ЗаказДавальцаМатериалы.Склад
	|ГДЕ
	|	ЗаказДавальцаМатериалы.Ссылка В(&ЗаказыДавальца)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбеспечениеЗаказовОстатки.Номенклатура,
	|	ОбеспечениеЗаказовОстатки.Назначение,
	|	ОбеспечениеЗаказовОстатки.Склад,
	|	ОбеспечениеЗаказовОстатки.Характеристика,
	|	ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМатериалы.Номенклатура КАК Номенклатура,
	|	ВТМатериалы.Характеристика КАК Характеристика,
	|	ВТМатериалы.Склад КАК Склад,
	|	ВТМатериалы.Количество КАК Количество,
	|	ВТМатериалы.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ВТМатериалы.Назначение КАК Назначение,
	|	ВТМатериалы.Назначение КАК НазначениеОтправителя,
	|	ВТМатериалы.Упаковка КАК Упаковка
	|ИЗ
	|	ВТМатериалы КАК ВТМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТМатериалы.НомерСтроки");
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	Запрос.УстановитьПараметр("ЗаказыДавальца", ЗаказыДавальца);
	Запрос.УстановитьПараметр("МассивДопустимыхСтатусов", МассивДопустимыхСтатусов);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВТМатериалы.Упаковка",
		"ВТМатериалы.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результат[0].Выбрать();
	
	Если Не Реквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов по разным организациям.';uk='Неможливо оформити передачу матеріалів по різних організаціях.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов, т.к. материалы поступили на разные склады.';uk='Неможливо оформити передачу матеріалів, оскільки матеріали надійшли на різні склади.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоПодразделений > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить один документ, т.к. материал требуется передать в разные подразделения.';uk='Неможливо оформити один документ, т. к. матеріал потрібно передати у різні підрозділи.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.ЕстьОшибкиСтатус Тогда
		ТекстОшибки = НСтр("ru='Для оформления передачи в производстово заказ должен быть в статусе ""К производству"", ""К отгрузке"" или ""Закрыт"".';uk='Для оформлення передачі в производстово замовлення повинно бути в статус ""До виробництва"", ""До відвантаження"" або ""Закрито"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Результат[2].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Поступление сырья от давальца не оформлено или все материалы уже переданы. Ввод на основании невозможен.';uk='Надходження сировини від давальца не оформлено або всі матеріали вже передані. Введення на підставі неможливе.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	Товары.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииПоступлениеСырьяОтДавальца(ДанныеЗаполнения)
	
	ПоступленияСырья = ДанныеЗаполнения;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ПоступлениеСырьяОтДавальца.Организация) КАК Организация,
	|	МАКСИМУМ(ПоступлениеСырьяОтДавальца.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(ПоступлениеСырьяОтДавальца.Склад) КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство) КАК ХозяйственнаяОперация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеСырьяОтДавальца.Организация) КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеСырьяОтДавальца.Подразделение) КАК КоличествоПодразделений,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеСырьяОтДавальца.Склад) КАК КоличествоСкладов
	|ИЗ
	|	Документ.ПоступлениеСырьяОтДавальца.Товары КАК ПоступлениеСырьяОтДавальцаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеСырьяОтДавальца КАК ПоступлениеСырьяОтДавальца
	|		ПО ПоступлениеСырьяОтДавальцаТовары.Ссылка = ПоступлениеСырьяОтДавальца.Ссылка
	|ГДЕ
	|	ПоступлениеСырьяОтДавальца.Ссылка В(&ПоступленияСырья)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбеспечениеЗаказовОстатки.Номенклатура КАК Номенклатура,
	|	ОбеспечениеЗаказовОстатки.Характеристика КАК Характеристика,
	|	ОбеспечениеЗаказовОстатки.Склад КАК Склад,
	|	ОбеспечениеЗаказовОстатки.Назначение КАК Назначение,
	|	ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток КАК Количество,
	|	СУММА(Товары.Количество) КАК КоличествоПоступление,
	|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка,
	|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТМатериалы
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки КАК ОбеспечениеЗаказовОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеСырьяОтДавальца.Товары КАК Товары
	|		ПО ОбеспечениеЗаказовОстатки.Назначение.Заказ = Товары.Назначение.Заказ
	|			И ОбеспечениеЗаказовОстатки.Номенклатура = Товары.Номенклатура
	|			И ОбеспечениеЗаказовОстатки.Характеристика = Товары.Характеристика
	|			И ОбеспечениеЗаказовОстатки.Склад = Товары.Склад
	|ГДЕ
	|	Товары.Ссылка В(&ПоступленияСырья)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбеспечениеЗаказовОстатки.Номенклатура,
	|	ОбеспечениеЗаказовОстатки.Назначение,
	|	ОбеспечениеЗаказовОстатки.Склад,
	|	ОбеспечениеЗаказовОстатки.Характеристика,
	|	ОбеспечениеЗаказовОстатки.НаличиеПодЗаказОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМатериалы.Номенклатура КАК Номенклатура,
	|	ВТМатериалы.Характеристика КАК Характеристика,
	|	ВТМатериалы.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ВТМатериалы.КоличествоПоступление < ВТМатериалы.Количество
	|			ТОГДА ВТМатериалы.КоличествоПоступление
	|		ИНАЧЕ ВТМатериалы.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТМатериалы.КоличествоПоступление < ВТМатериалы.Количество
	|			ТОГДА ВТМатериалы.КоличествоПоступление
	|		ИНАЧЕ ВТМатериалы.Количество
	|	КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ВТМатериалы.Назначение КАК Назначение,
	|	ВТМатериалы.Назначение КАК НазначениеОтправителя,
	|	ВТМатериалы.Упаковка КАК Упаковка,
	|	ВТМатериалы.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТМатериалы КАК ВТМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ПоступленияСырья", ПоступленияСырья);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВТМатериалы.Упаковка",
		"ВТМатериалы.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результат[0].Выбрать();
	
	Если Не Реквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов по разным организациям.';uk='Неможливо оформити передачу матеріалів по різних організаціях.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить передачу материалов, т.к. материалы поступили на разные склады.';uk='Неможливо оформити передачу матеріалів, оскільки матеріали надійшли на різні склади.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоПодразделений > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить один документ, т.к. материал требуется передать в разные подразделения.';uk='Неможливо оформити один документ, т. к. матеріал потрібно передати у різні підрозділи.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Результат[2].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Поступление сырья от давальца не оформлено или все материалы уже переданы. Ввод на основании невозможен.';uk='Надходження сировини від давальца не оформлено або всі матеріали вже передані. Введення на підставі неможливе.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	Товары.Загрузить(Результат[2].Выгрузить());
	
КонецПроцедуры
//-- НЕ УТКА

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		Если ДанныеЗаполнения.Свойство("Организация") Тогда
			Организация = ДанныеЗаполнения.Организация;
		Иначе
			Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Свойство("Подразделение") Тогда	
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	КонецЕсли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		Если ДанныеЗаполнения.Свойство("Склад") Тогда
			Склад = ДанныеЗаполнения.Склад;
		Иначе
			Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
		КонецЕсли; 
	КонецЕсли; 
	
	ВидЦены = Справочники.Склады.УчетныйВидЦены(Склад);
	
	//Если Не ЗначениеЗаполнено(НалоговоеНазначение)  Тогда
	//	НалоговоеНазначение = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);
	//КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	&Склад КАК Склад,
	|	Неопределено КАК Партнер,
	|	Неопределено КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&НалоговоеНазначение КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров) КАК ХозяйственнаяОперация,
	|	Ложь КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка
	|	
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.НазначениеОтправителя КАК НазначениеОтправителя,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.Распоряжение КАК Заказ,
	|	ТаблицаТоваров.КодСтроки КАК КодСтроки,
	|	ТаблицаТоваров.ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Серия КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель,
	|	(ВЫБОР КОГДА ТаблицаТоваров.АналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) ТОГДА
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|	ИНАЧЕ
	|		ЕСТЬNULL(Аналитика.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
	|	КОНЕЦ) КАК АналитикаУчетаНоменклатуры,
	|	&НалоговоеНазначение КАК ЦелевоеНалоговоеНазначение,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	&Склад КАК Склад,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаСНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.НазначениеОтправителя КАК Назначение,
	|	ТаблицаТоваров.ГруппаПродукции,
	|	ИСТИНА КАК ПодбиратьВидыЗапасов
	|	
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ТаблицаТоваров.Номенклатура
	|		И Аналитика.Характеристика = ТаблицаТоваров.Характеристика
	|		И Аналитика.Серия = ТаблицаТоваров.Серия
	|		И Аналитика.Склад = &Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	&Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.Серия,
	|	ТаблицаВидыЗапасов.ГруппаПродукции,
	|	&ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Серия КАК Серия,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СкладОтгрузки КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад КАК Склад,
	|	ТаблицаВидыЗапасов.Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.Серия КАК СерияПолучатель,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную КАК ВидыЗапасовУказаныВручную,
	|	ТаблицаВидыЗапасов.ВидЗапасовПолучателя КАК ВидЗапасовПолучателя,
	|	ТаблицаВидыЗапасов.ГруппаПродукции КАК ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Менеджер", Ответственный);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПередачаПоРаспоряжениям", ПередачаПоРаспоряжениям);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("НалоговоеНазначение", НалоговоеНазначение);
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата));
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(Товары.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Выполнить();
	
	Если ВидыЗапасовУказаныВручную Тогда
		ДополнительныеСвойства.Вставить("ИгнорироватьОперативныеОстатки", Истина);
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ТаблицаДанныхДокумента.Подразделение,
	|	ТаблицаДанныхДокумента.Менеджер,
	|	ТаблицаДанныхДокумента.Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка) КАК НалоговоеНазначение,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|;
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Ответственный
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.ПередачаМатериаловВПроизводство КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Дата <> СохраненныеДанные.Дата ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Склад <> СохраненныеДанные.Склад ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.НалоговоеНазначение <> СохраненныеДанные.НалоговоеНазначение ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Подразделение <> СохраненныеДанные.Подразделение ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Менеджер <> СохраненныеДанные.Менеджер ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Сделка <> СохраненныеДанные.Сделка ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК РеквизитыИзменены
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	|	ПО
	|		Истина
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыИзменены = Выборка.РеквизитыИзменены;
	Иначе
		РеквизитыИзменены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленные(
		Организация,
		Справочники.СделкиСКлиентами.ПустаяСсылка(),
		Ответственный,
		Подразделение,
		МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		
		ШаблонСообщения = НСтр("ru='Передача в производство превышает остаток товара организации %1 на складе %2 %3 %4';uk='Передача у виробництво перевищує залишок товару організацію %1 на складі %2 %3 %4'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Организация,
			Склад,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Номенклатура: %1, недостаточно %2 %3';uk='Номенклатура: %1, недостатньо %2 %3'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика, СтрокаТаблицы.Серия),
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения);
			
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru=' с указанными кодами УКТВЭД и номерами ГТД';uk=' з зазначеними кодами УКТЗЕД та номерами ВМД'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	
	Если Не Проведен
		Или ПерезаполнитьВидыЗапасов
		Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
		Или ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц) Тогда
		
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(Ссылка, Организация, Дата, ДополнительныеСвойства, МенеджерВременныхТаблиц);
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц,
			ДополнительныеСвойства,
			ВидыЗапасов,
			ТаблицаОшибок,
			Отказ);
			
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, ЦелевоеНалоговоеНазначение, НомерГТД, Серия", "Количество");
		
		ЗаполнитьСтатьюРасходовВидовЗапасов();
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
	ЗаполнитьВидЗапасовПолучателя();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	// Контроль при перепроведении и отмене проведения
	Если ПередачаПоРаспоряжениям Или Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.ЗаказыМатериаловВПроизводство);
		Массив.Добавить(Движения.ОбеспечениеЗаказов);
		Массив.Добавить(Движения.СвободныеОстатки);
		Если НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаМатериаловВПроизводство).ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.ТоварыНаСкладах);
		КонецЕсли;
	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

// Функция проверят изменение табличной части "Товары" относительно табличной части "Виды запасов" документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - Менеджер временных таблиц
//
// Возвращаемое значение:
//	Булево - Истина - товары изменены
//           Ложь - товары не изменены
//
Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.ГруппаПродукции КАК ГруппаПродукции,
	|		(ВЫБОР ТаблицаТоваров.СтатусУказанияСерийПолучатель
	|			КОГДА 14 ТОГДА ТаблицаТоваров.Серия
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КОНЕЦ) КАК Серия,
	|		ТаблицаТоваров.Количество КАК Количество
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ТаблицаВидыЗапасов.ВидЗапасов.Назначение КАК Назначение,
	|		ТаблицаВидыЗапасов.ГруппаПродукции КАК ГруппаПродукции,
	|		ТаблицаВидыЗапасов.СерияПолучатель КАК Серия,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.ГруппаПродукции,
	|	ТаблицаТоваров.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

// Процедура заполняет статью и аналитику расходов видов запасов документа.
//
Процедура ЗаполнитьСтатьюРасходовВидовЗапасов()
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		КоличествоТоваров = СтрокаТоваров.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.Назначение = СтрокаТоваров.Назначение;
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.ГруппаПродукции = СтрокаТоваров.ГруппаПродукции;
			НоваяСтрока.ИдентификаторСтроки = СтрокаТоваров.ИдентификаторСтроки;
			Если СтрокаТоваров.СтатусУказанияСерийПолучатель = 14 Тогда
				НоваяСтрока.Серия = СтрокаТоваров.Серия;
			Иначе
				НоваяСтрока.Серия = Неопределено;
			КонецЕсли;
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидЗапасовПолучателя()
			
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки,
	|	Запасы.ГруппаПродукции,
	|	Запасы.Назначение,
	|	Запасы.ВидЗапасов
	|
	|ПОМЕСТИТЬ Запасы
	|ИЗ
	|	&ВидыЗапасов КАК Запасы
	|;
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Запасы.НомерСтроки КАК НомерСтроки,
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВидыЗапасов.Комитент КАК Комитент,
	|	ВидыЗапасов.Контрагент КАК Контрагент,
	|	ВидыЗапасов.Договор КАК Договор,
	|	ВидыЗапасов.Соглашение КАК Соглашение,
	|	ВидыЗапасов.Валюта КАК Валюта,
	|	ВЫБОР КОГДА &НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|		И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	ТОГДА
	|		&НалоговоеНазначение 
	|	ИНАЧЕ
	|		ВидыЗапасов.НалоговоеНазначение
	|	КОНЕЦ КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации КАК НалоговоеНазначениеОрганизации,
	|
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ВидыЗапасов.Комитент
	|	ИНАЧЕ
	|		ВидыЗапасов.Поставщик
	|	КОНЕЦ КАК Поставщик,
	|
	|	ВидыЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ВидыЗапасов.Подразделение КАК Подразделение,
	|	ВидыЗапасов.Менеджер КАК Менеджер,
	|	ВидыЗапасов.Сделка КАК Сделка,
	|	ВидыЗапасов.Подразделение.ВариантОбособленногоУчетаТоваров КАК ВариантОбособленногоУчетаТоваров,
	|	ЕСТЬNULL(ВидыЗапасов.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
	|
	|	Запасы.Назначение КАК Назначение,
	|	Запасы.ГруппаПродукции КАК ГруппаПродукции,
	|
	|	ЛОЖЬ КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасовВладельца,
	|
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|	КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтДавальца)
	|	КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|	КОНЕЦ КАК ХозоперацияВидаЗапаса
	|ИЗ
	|	Запасы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ВидыЗапасов.Ссылка = Запасы.ВидЗапасов
	|ГДЕ
	|	ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	ИЛИ (ВидыЗапасов.НалоговоеНазначение <> &НалоговоеНазначение
	|		И &НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)
	|		И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар))
	|	ИЛИ ВидыЗапасов.ГруппаПродукции <> Запасы.ГруппаПродукции
	|	ИЛИ Запасы.Назначение <> ВидыЗапасов.Назначение
	|");
	Запрос.УстановитьПараметр("ВидыЗапасов", ВидыЗапасов.Выгрузить(, "НомерСтроки, ГруппаПродукции, Назначение, ВидЗапасов"));
	НалоговоеНазначениеОрганизации = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", НалоговоеНазначениеОрганизации);
	Запрос.УстановитьПараметр("НалоговоеНазначение", НалоговоеНазначение);
	
	ВидыЗапасовПолучателя = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидЗапасовПолучателя = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
			Организация,
			Выборка.ХозоперацияВидаЗапаса,
			Выборка);
		ВидыЗапасовПолучателя.Вставить(Выборка.НомерСтроки, ВидЗапасовПолучателя);
	КонецЦикла;
	
	Для Каждого Запас Из ВидыЗапасов Цикл
		ВидЗапасовПолучателя = ВидыЗапасовПолучателя[Запас.НомерСтроки];
		Запас.ВидЗапасовПолучателя = ?(Неопределено = ВидЗапасовПолучателя, Запас.ВидЗапасов, ВидЗапасовПолучателя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДублированиеАналитикиНоменклатуры(Отказ)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.АналитикаУчетаНоменклатуры,
	|	Товары.ГруппаПродукции
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПроверка.НомерСтроки      КАК НомерСтроки,
	|	ТоварыДубль.НомерСтроки 		КАК НомерСтрокиДубль
	|ИЗ
	|	Товары КАК ТоварыПроверка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Товары КАК ТоварыДубль
	|	ПО
	|		ТоварыПроверка.АналитикаУчетаНоменклатуры = ТоварыДубль.АналитикаУчетаНоменклатуры
	|		И ТоварыПроверка.ГруппаПродукции <> ТоварыДубль.ГруппаПродукции
	|
	|ГДЕ 
	|	ТоварыПроверка.НомерСтроки < ТоварыДубль.НомерСтроки
	|
	|");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, "НомерСтроки, АналитикаУчетаНоменклатуры, ГруппаПродукции"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В строках %1, %2 списка ""Материалы"" указана одинаковая аналитика номенклатуры, но разные группы продукции, это запрещено!';uk='У рядках %1, %2 списку ""Матеріали"" зазначена однакова аналітика номенклатури, але різні групи продукції, це заборонено!'"),
			Выборка.НомерСтроки,
			Выборка.НомерСтрокиДубль
		);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьДублированиеАналитикиНоменклатуры

#КонецОбласти

#КонецОбласти

#КонецЕсли