
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ТекущаяДата = ТекущаяДата();
	
	СоставБригады.Параметры.УстановитьЗначениеПараметра("Документ", Неопределено);
	
	ПервоеОткрытиеФормы = Истина;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СоставБригады", "ДокументыДата");


КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ФормированиеСоставаБригады" Тогда
		ОбновитьСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборПоПодразделениюНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделениюНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБригады

&НаКлиенте
Процедура БригадыПриАктивизацииСтроки(Элемент)
	
	Если ПервоеОткрытиеФормы Тогда
		БригадыОбработчикАктивизацииСтроки();
		ПервоеОткрытиеФормы = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("БригадыОбработчикАктивизацииСтроки", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БригадыОбработчикАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Бригады.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяБригада = ТекущиеДанные.Бригада;
	Иначе
		ТекущаяБригада = ПредопределенноеЗначение("Справочник.Бригады.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Документы,
		"Бригада",
		ТекущаяБригада,
		ВидСравненияКомпоновкиДанных.ВИерархии,
		, // Представление - автоматически
		ЗначениеЗаполнено(ТекущаяБригада));
	
	Элементы.Документы.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументы

&НаКлиенте
Процедура ДокументыПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.Документы.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		СоставБригады.Параметры.УстановитьЗначениеПараметра("Документ", ДанныеСтроки.Ссылка);
	Иначе
		СоставБригады.Параметры.УстановитьЗначениеПараметра("Документ", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		
		Отказ = Истина;
		
		ДанныеСтроки = Элементы.Бригады.ТекущиеДанные;
		
		ЗначенияЗаполнения = Новый Структура;
		
		Если ДанныеСтроки <> Неопределено Тогда
			
			Если Не ДанныеСтроки.ЭтоГруппа Тогда
				ЗначенияЗаполнения.Вставить("Бригада", ДанныеСтроки.Бригада);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ЗначенияЗаполнения.Вставить("Подразделение", Подразделение);
		КонецЕсли;
		
		ОткрытьФорму("Документ.ФормированиеСоставаБригады.Форма.ФормаДокумента",Новый Структура("ЗначенияЗаполнения",ЗначенияЗаполнения));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставБригады

&НаКлиенте
Процедура СоставБригадыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСписки(Команда)
	ОбновитьСписки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Документы);
	
КонецПроцедуры
// Конец МенюОтчеты


// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Документы);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСписки()
	
	Элементы.Бригады.Обновить();
	Элементы.Документы.Обновить();
	Элементы.СоставБригады.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделениюНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Бригады,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Подразделение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Документы,
		"Подразделение",
		Подразделение,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Подразделение));
	
КонецПроцедуры

#КонецОбласти
