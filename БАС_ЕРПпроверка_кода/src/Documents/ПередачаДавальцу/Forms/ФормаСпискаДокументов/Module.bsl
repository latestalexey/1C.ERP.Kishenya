
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокПередачКоманднаяПанель);
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокРаспоряженийНаОформлениеКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом

	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьПередачуПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьОтчетДавальцуПоНесколькимЗаказам");
	ИспользоватьОрдернуюСхемуПриОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		Если Не ЗначениеЗаполнено(Склад) Тогда
			Склад = Справочники.Склады.СкладПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(
		СписокПередач,
		"Менеджер",
		Менеджер,
		СтруктураБыстрогоОтбора);
		
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженийНаОформление,
		"СостояниеНакладной", 
		?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), СостояниеНакладной), 
		СтруктураБыстрогоОтбора,,,
		Истина);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженийНаОформление,
		"СостояниеОрдера", 
		?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), СостояниеОрдера),
		СтруктураБыстрогоОтбора,,,
		Истина);
	
	НастройкиФормыПереоформленияНакладных = НастройкиФормыПереоформленияНакладных(ИспользоватьПередачуПоНесколькимЗаказам);
	
	УстановитьТекущуюСтраницу();
	
	Элементы.Склад.Видимость = ИспользоватьНесколькоСкладов;
	Элементы.СписокРаспоряженийНаОформлениеСостояниеОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	Элементы.СостояниеОрдера.Видимость = ИспользоватьОрдернуюСхемуПриОтгрузке;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.ПередачаДавальцу) Тогда
		СкрываемыеЭлементы = Новый Массив();
		СкрываемыеЭлементы.Добавить(Элементы.СписокРаспоряженийНаОформлениеОформитьПоЗаказам.Имя);
		СкрываемыеЭлементы.Добавить(Элементы.СписокРаспоряженийНаОформлениеОформитьПоОтгрузке.Имя);
		Для Каждого Элемент Из СкрываемыеЭлементы Цикл
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Элемент, "Видимость", Ложь);
		КонецЦикла;
	КонецЕсли;
	
	// Установка отборов.
	УстановитьОтборПоСкладуСервер();
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.ОтборМенеджер.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ПередачаДавальцу));
	
	ЗаполнитьСпискиВыбораПоСостояниямОтгрузки();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ДокументыВлияющиеНаГрафик = Новый Массив;
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЗаказДавальца");
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ПередачаДавальцу");
	
	Если Не ДокументыВлияющиеНаГрафик.Найти(ИмяСобытия) = Неопределено Тогда
		Элементы.СписокРаспоряженийНаОформление.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Настройки.Вставить("Менеджер", Менеджер);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(
		СписокПередач,
		"Менеджер",
		Менеджер,
		СтруктураБыстрогоОтбора,
		Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	УстановитьОтбор(СписокПередач, Менеджер);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьОтборПоСкладуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНакладнойПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(СостояниеНакладной), Число(СостояниеНакладной), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженийНаОформление,
		"СостояниеНакладной",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеНакладной));
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОрдераПриИзменении(Элемент)
	Состояние = ?(ЗначениеЗаполнено(СостояниеОрдера), Число(СостояниеОрдера), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженийНаОформление,
		"СостояниеОрдера",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеОрдера));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина; // Добавлять документы вручную нельзя
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура СписокРаспоряженийНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.СписокПередач);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.СписокПередач);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура ОформитьПоЗаказам(Команда)
	
	ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", Истина, Ложь);
	ОформитьПередачу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоОтгрузке(Команда)
	
	ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", Ложь, Истина);
	ОформитьПередачу();
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПередачиДавальцам Тогда
		ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокПередач);
	Иначе
		ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.СписокРаспоряженийНаОформление);
	КонецЕсли;
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "СписокРаспоряженийНаОформление"
	СписокУсловноеОформление = СписокРаспоряженийНаОформление.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Документ имеет высокий приоритет';uk='Документ має високий пріоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru='Документ имеет низкий приоритет';uk='Документ має низький пріоритет'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокПередач", "СписокПередачДата");
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СписокРаспоряженийНаОформление", "СписокРаспоряженияНаОформлениеДата");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПередачу()
	
	ТекущиеДанные = Элементы.СписокРаспоряженийНаОформление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Команда не может быть выполнена для указанного объекта.';uk='Команда не може бути виконана для зазначеного об''єкта.'"));
		Возврат;
	КонецЕсли;
	
	СоздатьНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОсновании()
	
	МассивСсылокДляПередач = Новый Массив();
	
	Если ИспользоватьПередачуПоНесколькимЗаказам Тогда
		Для Каждого ЗаказДавальца Из Элементы.СписокРаспоряженийНаОформление.ВыделенныеСтроки Цикл
			
			Если ТипЗнч(ЗаказДавальца) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				МассивСсылокДляПередач.Добавить(Элементы.СписокРаспоряженийНаОформление.ДанныеСтроки(ЗаказДавальца).Ссылка);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		МассивСсылокДляПередач.Добавить(Элементы.СписокРаспоряженийНаОформление.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Действие = ДействиеВводаНаОсновании(МассивСсылокДляПередач, Склад);
	
	Если Действие = "ПередачаДавальцу" Тогда
		ПродажиКлиент.СоздатьРеализациюТоваровНаОснованииЗаказа(
			Элементы.СписокРаспоряженийНаОформление,
			ИспользоватьПередачуПоНесколькимЗаказам,
			Склад,
			,
			"ПередачаДавальцу",
			,
			ПараметрыОформления);
	КонецЕсли;
	
	Если Действие = "ПереоформлениеДокументовПродажи" Тогда
		ОткрытьФормуПереоформлениеНакладных(МассивСсылокДляПередач);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормыПереоформленияНакладных(ИспользоватьПередачуПоНесколькимЗаказам)
	
	НастройкиФормы= НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.Заголовок = НСтр("ru='Переоформление передач давальцам по выбранным распоряжениям';uk='Переоформлення передач давальцям за обраним розпорядженням'");
	НастройкиФормы.ИмяФормыНакладной = "Документ.ПередачаДавальцу.Форма.ФормаДокумента";
	НастройкиФормы.ИспользоватьНакладныеПоНесколькимЗаказам = ИспользоватьПередачуПоНесколькимЗаказам;
	Возврат НастройкиФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПереоформлениеНакладных(МассивСсылок)
	
	РеквизитыШапки = Новый Структура();
	ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(МассивСсылок, РеквизитыШапки);
	ПараметрыФормы = Новый Структура("Заказы, Склад, РеквизитыШапки, НастройкиФормы",
		МассивСсылок, РеквизитыШапки.Склад, РеквизитыШапки, НастройкиФормыПереоформленияНакладных);
	
	ОткрытьФорму("ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ДействиеВводаНаОсновании(МассивСсылокДляПередач, Склад)
	
	Если МассивСсылокДляПередач.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ВыборКорректный = ОпределитьКорректностьВыбора(МассивСсылокДляПередач);
	Если Не ВыборКорректный ТОгда
		Возврат "";
	КонецЕсли;

	Если ПараметрыОформления.ПоОрдерам Тогда
		Если НЕ ВозможноПерезаполнениеПоОтгрузке(МассивСсылокДляПередач) Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	Если ПараметрыОформления.ПоОрдерам И ОпределитьНаличиеОформленныхРеализаций(МассивСсылокДляПередач) Тогда
		Возврат "ПереоформлениеДокументовПродажи"
	КонецЕсли;
	
	Возврат "ПередачаДавальцу";
	
КонецФункции 

&НаСервере
Функция ОпределитьКорректностьВыбора(МассивСсылокДляПередач)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Партнер) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияПартнер,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Договор) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияДоговор,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Сделка) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияСделка,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Склад) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияСклад,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ХозяйственнаяОперация) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВалютаВзаиморасчетов) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ЦенаВключаетНДС) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВернутьМногооборотнуюТару) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияВернутьМногооборотнуюТару,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.СрокВозвратаМногооборотнойТары) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияСрокВозвратаМногооборотнойТары,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ПорядокРасчетов) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияПорядокРасчетов,
	|	ЛОЖЬ КАК ЕстьОтличияСоглашение,
	|	ЛОЖЬ КАК ЕстьОтличияТребуетсяЗалогЗаТару,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.НаправлениеДеятельности) > 1
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияНаправлениеДеятельности,
	|	НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|		И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.СпособДоставки) > 1
	|		И МАКСИМУМ(ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|	                	ТОГДА ИСТИНА
	|	                	ИНАЧЕ ЛОЖЬ КОНЕЦ) = ИСТИНА КАК ЕстьНесовместимыеСпособыДоставки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказДавальца.Партнер               КАК Партнер,
	|		ЗаказДавальца.Контрагент            КАК Контрагент,
	|		ЗаказДавальца.Организация           КАК Организация,
	|		ЗаказДавальца.Договор               КАК Договор,
	|		ЗаказДавальца.Сделка                КАК Сделка,
	|		ВЫБОР
	|			КОГДА
	|				ЗаказДавальца.Склад.ЭтоГруппа И ЗаказДавальца.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ
	|				ЗаказДавальца.Склад
	|		КОНЕЦ                                        КАК Склад,
	|		ЗаказДавальца.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
	|		ЗаказДавальца.Валюта                         КАК ВалютаВзаиморасчетов,
	|		ЗаказДавальца.ЦенаВключаетНДС                КАК ЦенаВключаетНДС,
	|		ЗаказДавальца.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
	|		ЗаказДавальца.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	|		ЗаказДавальца.ПорядокРасчетов                КАК ПорядокРасчетов,
	|		ЗаказДавальца.НаправлениеДеятельности		 КАК НаправлениеДеятельности,
	|		ЗаказДавальца.СпособДоставки		         КАК СпособДоставки
	|	ИЗ
	|		Документ.ЗаказДавальца КАК ЗаказДавальца
	|	ГДЕ
	|		(ЗаказДавальца.Ссылка В (&МассивСсылокДляПередач))) КАК ЗаказКлиента
	|
	|";
	
	Запрос.УстановитьПараметр("МассивСсылокДляПередач", МассивСсылокДляПередач);
	Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
	ВыборкаРеквизитыШапки = Запрос.Выполнить().Выбрать();
	ВыборкаРеквизитыШапки.Следующий();
	
	Если ПродажиСервер.СообщитьОбОшибкахФормированияДанныхЗаполненияРеализации(ВыборкаРеквизитыШапки) Тогда
		
		ТекстОшибки = НСтр("ru='Ввод одного документа продажи на основании выделенных распоряжений невозможен';uk='Введення одного документа продажу на підставі виділених розпоряджень неможливе'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		,
		,
		,
		Отказ);
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Функция ВозможноПерезаполнениеПоОтгрузке(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказДавальцаТовары.Склад
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаТовары
		|ГДЕ
		|	ЗаказДавальцаТовары.Ссылка В(&МассивДокументов)
		|	И ЗаказДавальцаТовары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке <= &ТекущаяДата
		|	И ЗаказДавальцаТовары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.ДокументОтгрузки,
		|	ТоварыКОтгрузке.Склад КАК СкладОтгрузки,
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК ХарактеристикаНоменклатуры,
		|	ТоварыКОтгрузке.Серия КАК Серия,
		|	ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			ДокументОтгрузки В(&МассивДокументов)) КАК ТоварыКОтгрузке
		|ГДЕ
		|	(ТоварыКОтгрузке.КОтгрузкеКонечныйОстаток - ТоварыКОтгрузке.СобраноКонечныйОстаток > 0
		|			ИЛИ ТоварыКОтгрузке.КОформлениюКонечныйОстаток > 0)
		|	И (ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказДавальца
		|			И ТоварыКОтгрузке.СобраноПриход + ТоварыКОтгрузке.КОтгрузкеРасход <> ТоварыКОтгрузке.КОформлениюРасход)
		|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ЕстьОрдерныйСклад = НЕ РезультатЗапроса[0].Пустой();
	ЕстьРасхожденияПоОтгрузке = НЕ РезультатЗапроса[1].Пустой();

	Если НЕ ЕстьОрдерныйСклад ИЛИ НЕ ЕстьРасхожденияПоОтгрузке Тогда
		ВызватьИсключение НСтр("ru='По выбранным распоряжениям перезаполнение по отгрузке не требуется.';uk='За обраним розпорядженням перезаповнення по відвантаженню не потрібно.'");
	КонецЕсли;
	
	Возврат ЕстьОрдерныйСклад И ЕстьРасхожденияПоОтгрузке;
	
КонецФункции

&НаСервере
Функция ОпределитьНаличиеОформленныхРеализаций(МассивСсылок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентовОстаткиИОбороты.ЗаказКлиента КАК Заказ,
	|	ЗаказыКлиентовОстаткиИОбороты.Регистратор КАК Передача
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.ОстаткиИОбороты(
	|			,
	|			,
	|			Регистратор,
	|			,
	|			ЗаказКлиента В (&МассивСсылок)
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаказыКлиентовОстаткиИОбороты
	|ГДЕ
	|	ЗаказыКлиентовОстаткиИОбороты.Регистратор ССЫЛКА Документ.ПередачаДавальцу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расхождения.ДокументОтгрузки КАК ДокументОтгрузки,
	|	Расхождения.Номенклатура КАК Номенклатура,
	|	Расхождения.Характеристика КАК Характеристика,
	|	Расхождения.Склад КАК Склад,
	|	СУММА(Расхождения.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|		ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
	|		ТоварыКОтгрузкеОстатки.Склад КАК Склад,
	|		ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&МассивСсылок)) КАК ТоварыКОтгрузкеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыКлиентовОстатки.ЗаказКлиента,
	|		ЗаказыКлиентовОстатки.Номенклатура,
	|		ЗаказыКлиентовОстатки.Характеристика,
	|		ЗаказыКлиентовОстатки.Склад,
	|		-ЗаказыКлиентовОстатки.КОформлениюОстаток
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(
	|				,
	|				ЗаказКлиента В (&МассивСсылок)
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаказыКлиентовОстатки) КАК Расхождения
	|
	|СГРУППИРОВАТЬ ПО
	|	Расхождения.ДокументОтгрузки,
	|	Расхождения.Номенклатура,
	|	Расхождения.Характеристика,
	|	Расхождения.Склад
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расхождения.Количество) <> 0");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОформленныеНакладные = РезультатыЗапроса[0].Выгрузить();
	
	АдресТаблицаНакладныхВоВременномХранилище = ПоместитьВоВременноеХранилище(ОформленныеНакладные);
	
	Возврат НЕ РезультатыЗапроса[1].Пустой() И ОформленныеНакладные.Количество() > 0;
	
КонецФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПередачаДавальцу.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПередачаДавальцу") Тогда
			Элементы.СписокПередач.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаОтчетыДавальцам;
		КонецЕсли;
		
		ПоказатьЗначение(Неопределено, Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ЗаполнитьСпискиВыбораПоСостояниямОтгрузки()
	
	СписокВыбора = Элементы.СостояниеНакладной.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0",НСтр("ru='Все оформлено';uk='Все оформлено'"),Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1",НСтр("ru='Создать накладную';uk='Створити накладну'"),Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("2",НСтр("ru='Дооформить накладную';uk='Дооформити накладну'"),Ложь, БиблиотекаКартинок.ДооформитьНакладную);
	
	СписокВыбора = Элементы.СостояниеОрдера.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0",НСтр("ru='Соответствуют накладным';uk='Відповідають накладним'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("1",НСтр("ru='Не оформлены';uk='Не оформлені'"), Ложь, БиблиотекаКартинок.СоздатьНакладную);
	СписокВыбора.Добавить("3",НСтр("ru='Не соответствуют накладным';uk='Не відповідають накладним'"), Ложь, БиблиотекаКартинок.НесоответствиеОрдерНакладная);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтбор(СписокПередач, Менеджер)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокПередач,
		"Менеджер",
		Менеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСкладуСервер()
	
	СписокРаспоряженийНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.СписокПередач);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти
