#Если Не ТолстыйКлиентУправляемоеПриложение Или Сервер Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИСотрудникам(ЭтотОбъект, Таблица, "Организация", "ПоказателиСотрудников.Сотрудник");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	УстановитьПривилегированныйРежим(Истина);
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
	СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
	
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений, Истина);
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияЗначенийСовокупныхТарифныхСтавок(Движения, ДанныеДляПроведения.ДанныеСовокупныхТарифныхСтавок);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли; 
	Движения.КатегорииСотрудников.Записывать = Истина;
	категории = Движения.КатегорииСотрудников.Выгрузить();
	категории.Загрузить(Сотрудники.Выгрузить());
	категории.ЗаполнитьЗначения("Период",НачалоМесяца(ДатаИзменения));
	категории.ЗаполнитьЗначения("Регистратор",Ссылка);
	Движения.КатегорииСотрудников.Загрузить(категории);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ДатаОкончания)
		И ДатаОкончания < ДатаИзменения Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Дата окончания должна быть больше даты изменения';uk='Дата закінчення повинна бути більше дати зміни'"),
			Ссылка,
			"ДатаОкончания",
			"Объект",
			Отказ)
		
	КонецЕсли;
	
	ДатыИзмененияСотрудников = Новый Соответствие;
	ИндексСтроки = 0;
	Для каждого СтрокаСотрудника Из Сотрудники Цикл
		
		ДатыИзмененияСотрудников.Вставить(СтрокаСотрудника.Сотрудник, СтрокаСотрудника.ДатаИзменения);
		
		Если ЗначениеЗаполнено(СтрокаСотрудника.ДатаОкончания)
		И СтрокаСотрудника.ДатаОкончания < СтрокаСотрудника.ДатаИзменения Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Дата окончания должна быть больше даты изменения';uk='Дата закінчення повинна бути більше дати зміни'"),
				Ссылка,
				"Сотрудники[" + ИндексСтроки + "].ДатаОкончания",
				"Объект",
				Отказ)
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьРаботающих(ЭтотОбъект, Отказ);
	
	ПроверитьУникальностьЗапрашиванияПоказателя(Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений.
// Возвращает Структуру с полями.
//		ПлановыеНачисления - данные, необходимые для формирования истории плановых начислений.
//		(см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхНачислений)
//		ЗначенияПоказателей (см. там же).
//
Функция ПолучитьДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзменениеКатегорийСотрудники.Ссылка КАК Ссылка,
		|	ИзменениеКатегорийСотрудники.Ссылка.Организация КАК Организация,
		|	ИзменениеКатегорийСотрудники.ДатаИзменения КАК ДатаСобытия,
		|	ИзменениеКатегорийСотрудники.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ИзменениеКатегорийСотрудники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИзменениеКатегорийСотрудники.ДатаОкончания
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ИзменениеКатегорийСотрудники.ДатаОкончания, ДЕНЬ, 1)
		|	КОНЕЦ КАК ДействуетДо,
		|	ИзменениеКатегорийСотрудники.СовокупнаяТарифнаяСтавка КАК СовокупнаяТарифнаяСтавка,
		|	ИзменениеКатегорийСотрудники.ВидТарифнойСтавки КАК ВидТарифнойСтавки,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию
		|ПОМЕСТИТЬ ВТСотрудникиДокумента
		|ИЗ
		|	Документ.ИзменениеКатегорий.Сотрудники КАК ИзменениеКатегорийСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ИзменениеКатегорийСотрудники.Сотрудник = Сотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(, НЕ ЭтоЗамещение) КАК КадроваяИсторияСотрудниковСрезПоследних
		|		ПО ИзменениеКатегорийСотрудники.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		|			И ИзменениеКатегорийСотрудники.Ссылка.Организация = КадроваяИсторияСотрудниковСрезПоследних.ГоловнаяОрганизация
		|ГДЕ
		|	ИзменениеКатегорийСотрудники.Ссылка = &Ссылка";
	
	Запрос.Выполнить();
	
	// Подготовка данных для проведения.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменениеКатегорийСотрудники.ДатаСобытия,
		|	ИзменениеКатегорийСотрудники.ДействуетДо,
		|	ИзменениеКатегорийСотрудники.Сотрудник,
		|	ИзменениеКатегорийСотрудники.ФизическоеЛицо,
		|	ИзменениеКатегорийСотрудники.ГоловнаяОрганизация,
		|	ИзменениеКатегорийСотрудники.ДолжностьПоШтатномуРасписанию,
		|	НачисленияСотрудников.Начисление КАК Начисление,
		|	НачисленияСотрудников.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА НачисленияСотрудников.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	НачисленияСотрудников.Размер КАК Размер
		|ИЗ
		|	ВТСотрудникиДокумента КАК ИзменениеКатегорийСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеКатегорий.НачисленияСотрудников КАК НачисленияСотрудников
		|		ПО ИзменениеКатегорийСотрудники.Ссылка = НачисленияСотрудников.Ссылка
		|			И ИзменениеКатегорийСотрудники.Сотрудник = НачисленияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзменениеКатегорийСотрудники.Организация,
		|	ИзменениеКатегорийСотрудники.ДолжностьПоШтатномуРасписанию,
		|	ИзменениеКатегорийСотрудники.Сотрудник,
		|	ИзменениеКатегорийСотрудники.ДатаСобытия,
		|	ИзменениеКатегорийСотрудники.ДействуетДо,
		|	ИзменениеКатегорийСотрудники.ФизическоеЛицо,
		|	ПоказателиСотрудников.Показатель,
		|	ПоказателиСотрудников.ДокументОснование,
		|	ПоказателиСотрудников.Значение
		|ИЗ
		|	ВТСотрудникиДокумента КАК ИзменениеКатегорийСотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеКатегорий.ПоказателиСотрудников КАК ПоказателиСотрудников
		|		ПО ИзменениеКатегорийСотрудники.Ссылка = ПоказателиСотрудников.Ссылка
		|			И ИзменениеКатегорийСотрудники.Сотрудник = ПоказателиСотрудников.Сотрудник
		|ГДЕ
		|	ПоказателиСотрудников.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|	И ПоказателиСотрудников.Значение <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИзменениеКатегорийСотрудники.Сотрудник,
		|	ИзменениеКатегорийСотрудники.ДолжностьПоШтатномуРасписанию,
		|	ИзменениеКатегорийСотрудники.ДатаСобытия,
		|	ИзменениеКатегорийСотрудники.ДействуетДо,
		|	ИзменениеКатегорийСотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА ИзменениеКатегорийСотрудники.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ ИзменениеКатегорийСотрудники.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ИзменениеКатегорийСотрудники.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиДокумента КАК ИзменениеКатегорийСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзменениеКатегорийСотрудники.ДатаСобытия,
		|	ИзменениеКатегорийСотрудники.Сотрудник
		|ИЗ
		|	ВТСотрудникиДокумента КАК ИзменениеКатегорийСотрудники";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения = Новый Структура; 
	
	// Первый набор данных для проведения - таблица для формирования плановых начислений.
	ПлановыеНачисления = РезультатыЗапроса[0].Выгрузить();
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	
	// Второй набор данных для проведения - таблица для формирования значений показателей.
	ЗначенияПоказателей = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
	
	// Третий набор данных для проведения - таблица для формирования значений совокупных тарифных ставок.
	ДанныеСовокупныхТарифныхСтавок = РезультатыЗапроса[2].Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
	// Четвертый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = РезультатыЗапроса[3].Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ПроверитьУникальностьЗапрашиванияПоказателя(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаСобытия", 				ДатаИзменения);
	Запрос.УстановитьПараметр("ТаблицаНачислений", 			НачисленияСотрудников);
	Запрос.УстановитьПараметр("ПоказателиСотрудников", 		ПоказателиСотрудников);
	Запрос.УстановитьПараметр("ДополнительныеПоказатели", 	РасчетЗарплатыРасширенный.ПустаяТаблицаДополнительныхПоказателей());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаВидовРасчета.Сотрудник КАК Сотрудник,
	|	ТаблицаВидовРасчета.Начисление КАК Начисление,
	|	ТаблицаВидовРасчета.ДокументОснование КАК ДокументОснование,
	|	ТаблицаВидовРасчета.Действие КАК Действие
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаВидовРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСотрудников.Сотрудник КАК Сотрудник,
	|	ПоказателиСотрудников.Показатель КАК Показатель,
	|	ПоказателиСотрудников.ДокументОснование КАК ДокументОснование,
	|	ПоказателиСотрудников.Значение КАК ЗначениеПоказателя
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	&ПоказателиСотрудников КАК ПоказателиСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаСобытия КАК Период,
	|	Начисления.Сотрудник,
	|	Начисления.Начисление,
	|	Начисления.ДокументОснование,
	|	Начисления.Действие,
	|	ПоказателиНачислений.Показатель
	|ПОМЕСТИТЬ ВТПоказателиНачислений
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО Начисления.Начисление = ПоказателиНачислений.Ссылка
	|			И (ПоказателиНачислений.ЗапрашиватьПриВводе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиНачислений.Период,
	|	ПоказателиНачислений.Сотрудник,
	|	ПоказателиНачислений.Начисление,
	|	ПоказателиНачислений.ДокументОснование,
	|	ПоказателиНачислений.Действие,
	|	ПоказателиНачислений.Показатель,
	|	ПоказателиСотрудников.ЗначениеПоказателя
	|ПОМЕСТИТЬ ВТПоказателиВидовРасчета
	|ИЗ
	|	ВТПоказателиНачислений КАК ПоказателиНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСотрудников
	|		ПО ПоказателиНачислений.Показатель = ПоказателиСотрудников.Показатель
	|			И ПоказателиНачислений.ДокументОснование = ПоказателиСотрудников.ДокументОснование
	|			И ПоказателиНачислений.Сотрудник = ПоказателиСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеПоказатели.Период КАК Период,
	|	ДополнительныеПоказатели.Сотрудник КАК Сотрудник,
	|	ДополнительныеПоказатели.Показатель КАК Показатель,
	|	ДополнительныеПоказатели.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ДополнительныеПоказатели.Действие КАК Действие
	|ПОМЕСТИТЬ ВТДополнительныеПоказатели
	|ИЗ
	|	&ДополнительныеПоказатели КАК ДополнительныеПоказатели";
				   
	Запрос.Выполнить();
	
	РасчетЗарплатыРасширенный.ПроверитьУникальностьЗапрашиванияПоказателя(Запрос.МенеджерВременныхТаблиц, Ссылка, Отказ);
				   
КонецПроцедуры

Процедура ПроверитьРаботающих(ДокументОбъект, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", ДокументОбъект.Сотрудники.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.НомерСтроки,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДатаИзменения КАК ДатаНачала
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&Сотрудники КАК Сотрудники";
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписательТаблиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТСотрудникиПериоды");
	ЗапросКадровыхДанных = КадровыйУчет.ЗапросВТПостоянныеКадровыеДанныеСотрудников(
		Истина,
		ОписательТаблиц,
		"ДатаПриема,ДатаУвольнения,ТекущийВидЗанятости",
		,
		"ВТКадровыеДанныеСотрудников");
	
	ЗапросКадровыхДанных.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросКадровыхДанных.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ДатаНачала
	|ПОМЕСТИТЬ ВТПериодыВКоторыхСотрудникНеРаботал
	|ИЗ
	|	ВТСотрудникиПериоды КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ДанныеДокумента.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И (ДанныеДокумента.ДатаНачала < КадровыеДанныеСотрудников.ДатаПриема
	|				ИЛИ КадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|					И КадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
	|				ИЛИ КадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДанныеДокумента.ДатаНачала > КадровыеДанныеСотрудников.ДатаУвольнения)";
	
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.НомерСтроки КАК НомерСтроки,
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыВКоторыхСотрудникНеРаботал КАК Периоды
		|		ПО СотрудникиПериоды.Сотрудник = Периоды.Сотрудник
		|			И СотрудникиПериоды.ДатаНачала = Периоды.ДатаНачала
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1 не работает в организации  %2г.';uk='Співробітник %1 не працює в організації %2 р.'"),
				Выборка.Сотрудник,
				Формат(Выборка.ДатаНачала, "ДЛФ=Д"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сотрудники[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=") + "].Сотрудник", "Объект", Отказ);
			
		КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры

#Область ЗаполнитьДокумент

Процедура ЗаполнитьДокументПоСпискуСотрудников(СписокСотрудников, ДатаИзменения) Экспорт
	
	ФильтрСотрудников = Документы.ИзменениеКатегорий.ФильтрСотрудниковПоПараметрам(СписокСотрудников, ДатаИзменения);
	ЗаполнитьДокумент(ФильтрСотрудников, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьДокумент(ФильтрСотрудников = Неопределено, ЗаполнитьСписокНачислений = Ложь) Экспорт
	
	ОчиститьДанные(ФильтрСотрудников);
	
	НачисленияПоказателиСотрудников = Документы.ИзменениеКатегорий.НачисленияПоказателиСотрудниковПоОбъекту(
		ЭтотОбъект, ФильтрСотрудников);
	
	Документы.ИзменениеКатегорий.ЗаполнитьСотрудников(ЭтотОбъект, НачисленияПоказателиСотрудников.Сотрудники);
	Документы.ИзменениеКатегорий.ЗаполнитьНачисленияПоказатели(
		ЭтотОбъект, НачисленияПоказателиСотрудников.НачисленияСотрудников, НачисленияПоказателиСотрудников.ПоказателиСотрудников);
	
	Если ЗаполнитьСписокНачислений
		Или ЭтоОтражениеИзмененияШтатногоРасписания Тогда
		
		ЗаполнитьСписокИзменяемыхНачислений();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокИзменяемыхНачислений()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачисленияСотрудников", НачисленияСотрудников.Выгрузить());
	Запрос.УстановитьПараметр("ИзменяемыеНачисления", ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление", Истина));
	Запрос.УстановитьПараметр("Показатели", ОбщегоНазначения.ВыгрузитьКолонку(ПоказателиСотрудников, "Показатель", Истина));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Начисление,
		|	НачисленияСотрудников.Действие
		|ПОМЕСТИТЬ ВТНачисленияСотрудников
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	НачисленияСотрудников.Действие
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО НачисленияСотрудников.Начисление = НачисленияПоказатели.Ссылка
		|ГДЕ
		|	НЕ НачисленияСотрудников.Начисление В (&ИзменяемыеНачисления)
		|	И НачисленияПоказатели.Показатель В(&Показатели)
		|	И НачисленияПоказатели.ЗапрашиватьПриВводе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Начисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДанные(ФильтрСотрудников)
	
	Если ФильтрСотрудников = Неопределено Тогда
		Сотрудники.Очистить();
		НачисленияСотрудников.Очистить();
		ПоказателиСотрудников.Очистить();
	Иначе
		Для каждого Строка Из ФильтрСотрудников Цикл  
			ОчиститьДанныеПоСотруднику(Строка.Сотрудник);
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчиститьДанныеПоСотруднику(Сотрудник)
	ОтборПоСотруднику = Новый Структура("Сотрудник", Сотрудник);
	
	СтрокиДляУдаления = Сотрудники.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Сотрудники.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	СтрокиДляУдаления = НачисленияСотрудников.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		НачисленияСотрудников.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	СтрокиДляУдаления = ПоказателиСотрудников.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		ПоказателиСотрудников.Удалить(СтрокаДляУдаления);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ДатаИзменения, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ИзменениеКатегорий.НачисленияСотрудников КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ДатаОкончания, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ИзменениеКатегорий.НачисленияСотрудников КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.Ссылка.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Начисления.Очистить();
	новнач = Начисления.Добавить();
	новнач.Начисление = ПланыВидовРасчета.Начисления.НайтиПоКоду("ДЗК");
	новнач.Действие	  =  Перечисления.ДействияСНачислениямиИУдержаниями.ПустаяСсылка();
КонецПроцедуры

#КонецОбласти

#КонецЕсли
