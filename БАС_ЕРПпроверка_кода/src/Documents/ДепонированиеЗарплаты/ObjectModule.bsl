#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыРаздатчиком")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
		
		ЗаполнитьПоВедомости(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		ЗаполнитьПоЗаявке(
			ДанныеЗаполнения,
			ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		ПроверитьДепонируемыеСуммыПоВедомости(Отказ);
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(Организация, КонецМесяца(Дата));
	Если ПараметрыУчетнойПолитики <> Неопределено Тогда
		ПроводкиПоРаботникам = ПараметрыУчетнойПолитики.ПроводкиПоРаботникам
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ДепонированиеЗарплаты.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по прочим расходам.
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по регистрам БЗКР
	Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		
		ДенежныеСредстваСервер.ЗарегистрироватьОплатуВедомостей(ЭтотОбъект, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоВедомости(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВКассу.Ссылка КАК Ведомость,
	|	ВКассу.Проведен КАК Проведен,
	|	ВКассу.Организация КАК Организация
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВКассу
	|ГДЕ
	|	ВКассу.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Раздатчиком.Ссылка,
	|	Раздатчиком.Проведен,
	|	Раздатчиком.Организация
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК Раздатчиком
	|ГДЕ
	|	Раздатчиком.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ДокументОснование,
		,
		НЕ Реквизиты.Проведен);
	
	ДанныеЗаполнения = Новый Структура("Организация, Ведомость");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Реквизиты);
	
	// заполнение суммы документа и списка получателей
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивВедомостей", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Реквизиты.Ведомость));
	СтруктураПараметров.Вставить("Организация", Реквизиты.Организация);
	СтруктураПараметров.Вставить("ИсключатьОплаченные", Истина);
	
	ДанныеРаботниковПоВедомостям = ДенежныеСредстваСервер.ДанныеРаботниковПоВедомостям(СтруктураПараметров);
	
	Если ДанныеРаботниковПоВедомостям.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Зарплата по ведомости полностью выдана (депонирована)';uk='Зарплата за відомістю повністю видана (депонована)'");
	Иначе
		Депоненты.Загрузить(ДанныеРаботниковПоВедомостям);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявке(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Ведомость,
	|	Заявка.Проведен КАК Проведен,
	|	Заявка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Заявка.ХозяйственнаяОперацияПоЗарплате В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком))
	|				ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаХозОперации
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|ГДЕ
	|	Заявка.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.ОшибкаХозОперации Тогда
		ВызватьИсключение НСтр("ru='Депонирование зарплаты вводится на основании выплаты через кассу или раздатчиком';uk='Депонування зарплати вводиться на підставі виплати через касу або роздавальником'");
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ДокументОснование,
		,
		НЕ Реквизиты.Проведен);
	
	ДанныеЗаполнения = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПроверитьДепонируемыеСуммыПоВедомости(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Депоненты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Депоненты.Сумма КАК Сумма,
	|	Депоненты.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДепоненты
	|ИЗ
	|	&Депоненты КАК Депоненты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДепоненты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВТДепоненты.Сумма) КАК Сумма,
	|	МАКСИМУМ(ВТДепоненты.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ Депоненты
	|ИЗ
	|	ВТДепоненты КАК ВТДепоненты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДепоненты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВедомостьВКассу.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВедомостьВКассу.КВыплате) КАК Сумма
	|ПОМЕСТИТЬ ВТДанныеВедомости
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК ВедомостьВКассу
	|ГДЕ
	|	ВедомостьВКассу.Ссылка.Ссылка = &Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьВКассу.Сотрудник.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуРаздатчиком.Сотрудник.ФизическоеЛицо,
	|	СУММА(ВедомостьНаВыплатуРаздатчиком.КВыплате)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК ВедомостьНаВыплатуРаздатчиком
	|ГДЕ
	|	ВедомостьНаВыплатуРаздатчиком.Ссылка = &Ведомость
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуРаздатчиком.Сотрудник.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Депоненты.ФизическоеЛицо,
	|	Депоненты.Сумма КАК ДепонируемаяСумма,
	|	ЕСТЬNULL(ВТДанныеВедомости.Сумма, 0) КАК СуммаПоВедомости,
	|	Депоненты.НомерСтроки
	|ПОМЕСТИТЬ ВТСуммы
	|ИЗ
	|	Депоненты КАК Депоненты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВедомости КАК ВТДанныеВедомости
	|		ПО Депоненты.ФизическоеЛицо = ВТДанныеВедомости.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСуммы.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВТСуммы.СуммаПоВедомости > 0
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Индекс
	|ИЗ
	|	ВТСуммы КАК ВТСуммы
	|ГДЕ
	|	ВТСуммы.ДепонируемаяСумма <> ВТСуммы.СуммаПоВедомости
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Депоненты", Депоненты.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	МассивСообщений = Новый Массив;
	МассивСообщений.Добавить(НСтр("ru='Cумма не соответствует ведомости в строке %1 списка ""Депоненты""';uk='Сума не відповідає відомості в рядку %1 списку ""Депоненти""'"));
	МассивСообщений.Добавить(НСтр("ru='Cотрудник в строке %1 списка ""Депоненты"" отсутствует в ведомости';uk='Співробітник в рядку %1 списку ""Депоненти"" відсутній у відомості'"));
	
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(МассивСообщений[Выборка.Индекс], Выборка.НомерСтроки),
			ЭтотОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Депоненты", Выборка.НомерСтроки, "ФизическоеЛицо"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
