
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		// Создается новый документ, заполним организацию, ответственного, дату увольнения, статью КЗОТ.  
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", 
		"Объект.Организация", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Объект.ДатаУвольнения = ТекущаяДатаСеанса();
		Объект.ДатаПриема = КонецДня(Объект.ДатаУвольнения) + 1;
		Объект.СтатьяКЗОТ = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ОснованияУвольнения.Статья36п5");
		
		// Если передан сотрудник - заполним.
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			СотрудникПриИзмененииНаСервере();
		КонецЕсли; 
		
		ЗаполнитьДанныеФормыПоОрганизации();
		ЗаполнитьДанныеФормыПоНовойОрганизации();
		ПриПолученииДанныхНаСервере(Объект);
		
	КонецЕсли;
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоКатегории(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(),
		КадровыйУчетРасширенный.ПараметрыВыбораКатегорииНачислений());
		
	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	Элементы.РазрядКатегория.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияВКадровыхДокументах");	
	
	РазмерАвансаПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Объект.Организация);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "Сотрудник");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ПослеЗаписиОбъектаСвязанногоСПереводомКДругомуРаботодателю" И (Источник <> Неопределено 
		И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма)) Или Источник = ЭтаФорма  Тогда
		ОбновитьДанныеФормыПоРезультату(ЭтаФорма, Параметр);
		Записать(Новый Структура("РежимЗаписи ", РежимЗаписиДокумента.Запись));
		ОбновитьНадписиНаФорме(ЭтаФорма);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененСтажФизическогоЛица" И Источник.ВладелецФормы = ЭтаФорма Тогда
		УстановитьПредставленияКомандВводаСтажей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РеквизитВДанные(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РасчетЗарплатыФормы.ЗапомнитьРазмерАвансаПоУмолчанию(
		ТекущийОбъект.Аванс, ТекущийОбъект.НоваяОрганизация, ТекущийОбъект.СпособРасчетаАванса);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ДанныеНачисленийВРеквизит(ТекущийОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущаяОрганизацияПриИзменении(Элемент)
	
	ТекущаяОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаУвольненияПриИзменении(Элемент)
	ДатаУвольненияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НоваяОрганизацияПриИзменении(Элемент)
	НоваяОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПозицияШтатногоРасписанияПриИзменении(Элемент)
	ПозицияШтатногоРасписанияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ДолжностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриемаПриИзменении(Элемент)
	ДатаПриемаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		Объект.Аванс = РазмерАвансаПоУмолчанию;
	Иначе
		Объект.Аванс = 0;
	КонецЕсли; 
	
	УстановитьПоказРазмераАванса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтавокПредставлениеНажатие(Элемент, СтандартнаяОбработка)

	Оповещение = Новый ОписаниеОповещения("ПриИзмененииКоличестваСтавок", ЭтотОбъект);
	КадровыйУчетРасширенныйКлиент.ИзменитьКоличествоСтавок(ЭтаФорма, "Объект.КоличествоСтавок", СтандартнаяОбработка, "КоличествоСтавокПредставление", Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПКУПриИзменении(Элемент)
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		ПКУПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрядКатегорияПриИзменении(Элемент)
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		РазрядКатегорияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ НАЧИСЛЕНИЯ

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийВыбор(
		ЭтаФорма, Элемент, Поле, СтандартнаяОбработка, 1, Объект.Сотрудник, Объект.ДатаПриема);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийПриНачалеРедактирования(ЭтаФорма, "Начисления", 1,  Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийНачислениеПриИзменении(
		ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.Сотрудник, ТарифнаяСетка, РазрядКатегория , Объект.ДатаПриема, ТарифнаяСеткаНадбавки, Объект.РазрядКатегория);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗначениеПоказателяПриИзмененииНачисления(Элемент)
	
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(Элементы.Начисления.ТекущиеДанные,
		ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ЭтаФорма, ОписаниеТаблицыНачислений,, 1), 1, ОписаниеТаблицыНачислений, Объект.ДатаПриема);		
	
КонецПроцедуры	

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ОбновитьСсылкиНаРезультаты(Команда)
	ОбновитьСсылкиНаРезультатыНаСервере();
	ОбновитьНадписиНаФорме(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НадписьУвольнениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	СсылкаУвольнение = СтрокаПоТипуЗначения(ЭтаФорма, Тип("ДокументСсылка.Увольнение")).Результат;
	
	Если ЗначениеЗаполнено(СсылкаУвольнение) Тогда
		
		ОткрытьФорму("Документ.Увольнение.Форма.ФормаДокумента", Новый Структура("Ключ", СсылкаУвольнение), ЭтаФорма);
		
	Иначе		
		
		Если МожноСоздатьУвольнение() Тогда
			СоздатьУвольнение();
		Иначе
			СообщитьОНевозможностиСозданияУвольнения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НадписьПриемНаРаботуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	СсылкаПриемНаРаботу = СтрокаПоТипуЗначения(ЭтаФорма, Тип("ДокументСсылка.ПриемНаРаботу")).Результат;
	
	Если ЗначениеЗаполнено(СсылкаПриемНаРаботу) Тогда
		ОткрытьФорму("Документ.ПриемНаРаботу.Форма.ФормаДокумента", Новый Структура("Ключ", СсылкаПриемНаРаботу), ЭтаФорма);		
	Иначе
		Если МожноСоздатьПриемНаРаботу() Тогда
			СоздатьПриемНаРаботу();
		Иначе
			СообщитьОНевозможностиСозданияПриемаНаРаботу();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВходящаяСправкаОЗаработкеДляРасчетаПособийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	СсылкаВходящаяСправка = СтрокаПоТипуЗначения(ЭтаФорма, Тип("ДокументСсылка.ВходящаяСправкаОЗаработкеДляРасчетаПособий")).Результат;
		
	Если ЗначениеЗаполнено(СсылкаВходящаяСправка) Тогда
		
		ОткрытьФорму("Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий.Форма.ФормаДокумента", Новый Структура("Ключ", СсылкаВходящаяСправка), ЭтаФорма);
	Иначе
		
		Если МожноСоздатьВходящуюСправкуОЗаработке() Тогда
			СоздатьВходящуюСправкуОЗаработке();
		Иначе
			СообщитьОНевозможностиСозданияВходящейСправкиОЗаработке();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВводНачальныхОстатковОтпускаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	
	СсылкаВводНачальныхОстатковОтпусков = СтрокаПоТипуЗначения(ЭтаФорма, Тип("ДокументСсылка.ВводНачальныхОстатковОтпусков")).Результат;

	Если ЗначениеЗаполнено(СсылкаВводНачальныхОстатковОтпусков) Тогда
		ОткрытьФорму("Документ.ВводНачальныхОстатковОтпусков.Форма.ФормаДокумента", Новый Структура("Ключ", СсылкаВводНачальныхОстатковОтпусков), ЭтаФорма);
	Иначе

		Если МожноСоздатьВводНачальныхОстатковОтпусков() Тогда
			СоздатьВводНачальныхОстатковОтпусков();
		Иначе
			СообщитьОНевозможностиСозданияВводаНачальныхОстатковОтпусков();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	УстановитьОграниченияНаУровнеЗаписей();
	
    ДоступноДобавлениеВходящейСправкиОЗаработкеДляРасчетаПособий = Ложь;
	ДоступноДобавлениеИсходящейСправкиОЗаработкеДляРасчетаПособий = Ложь;

	ДоступноДобавлениеИзменениеКадровыхПриказов = 
	Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеКадровогоСостоянияРасширенная,ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная");
	
	ПараметрыФО = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
	ДоступенРасчетЗарплаты 		= ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") И Пользователи.РолиДоступны("ЧтениеНачисленнойЗарплатыРасширенная, ДобавлениеИзменениеНачисленнойЗарплатыРасширенная");
	ДоступныПлановыеНачисления 	= ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") И Пользователи.РолиДоступны("ЧтениеДанныхДляНачисленияЗарплатыРасширенная, ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная");
	
	ИспользоватьШтатноеРасписание =  ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	КоличествоСтавокПредставление = КадровыйУчетРасширенныйКлиентСервер.ПредставлениеКоличестваСтавок(Объект.КоличествоСтавок);
	
	ПрочитатьТекущиеКадровыеДанныеСотрудника();
	ПрочитатьТарифнуюСетку();
	
	ОбновитьСсылкиНаРезультатыНаСервере();
	ДополнитьФорму();
	
	Если ДоступныПлановыеНачисления Тогда
		ДанныеНачисленийВРеквизит(ТекущийОбъект);
		УстановитьПоказРазмераАванса(ЭтаФорма);
	КонецЕсли;
	
	ОбновитьНадписиНаФорме(ЭтаФорма);
	
	УстановитьВидимостьРасчетныхПолей();
	
	РазрядыКатегорииДолжностей.УстановитьСвязиПараметровВыбораРазрядаКадровогоПриказа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	Если ДоступныПлановыеНачисления Тогда
		ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
		ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыВидовРасчета, "Начисления", 3);
	КонецЕсли;
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицыВидовРасчета.Вставить("ЗапретитьИзменениеПоказателяТарифнойСетки", Истина);
	ОписаниеТаблицыВидовРасчета.Вставить("ЗапретитьИзменениеПоказателяТарифнойСетки", Истина);
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции

&НаСервере
Процедура ДанныеНачисленийВРеквизит(ТекущийОбъект)
	
	Если ДоступныПлановыеНачисления Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаСотрудников = ТаблицаСотрудников(Объект.ДатаУвольнения - 1);
		
		Если ТаблицаСотрудников.Количество() > 0 Тогда
			ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
			ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДанныеВРеквизит(ТекущийОбъект.Ссылка, ТаблицаСотрудников, ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, , Объект.ДатаПриема);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	Если ДоступныПлановыеНачисления Тогда
		ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
		ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 1);
	КонецЕсли;
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписиНаФорме(Форма)
	
	Если Форма.ДоступноДобавлениеИзменениеКадровыхПриказов Тогда
		Форма.НадписьУвольнение = Форма.Элементы.НадписьУвольнение.Заголовок;
		Форма.НадписьПриемНаРаботу = Форма.Элементы.НадписьПриемНаРаботу.Заголовок;
		Форма.НадписьВводНачальныхОстатковОтпуска = Форма.Элементы.НадписьВводНачальныхОстатковОтпуска.Заголовок;
		
	Иначе
		
		Форма.НадписьУвольнение = НСтр("ru='Приказ об увольнении еще не вводился';uk='Наказ про звільнення ще не вводився'");
		Форма.НадписьПриемНаРаботу = НСтр("ru='Приказ о приеме еще не вводился';uk='Наказ про прийом ще не вводився'");
		Форма.НадписьВводНачальныхОстатковОтпуска = НСтр("ru='Начальные остатки отпуска не вводились';uk='Початкові залишки відпустки не вводилися'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьУвольнение", "Гиперссылка", Форма.ДоступноДобавлениеИзменениеКадровыхПриказов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьПриемНаРаботу", "Гиперссылка", Форма.ДоступноДобавлениеИзменениеКадровыхПриказов);	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьВводНачальныхОстатковОтпуска", "Гиперссылка", Форма.ДоступноДобавлениеИзменениеКадровыхПриказов);
	
	Если Форма.ДоступенРасчетЗарплаты Тогда
		
		Если Форма.ДоступноДобавлениеВходящейСправкиОЗаработкеДляРасчетаПособий Тогда
			Форма.НадписьВходящаяСправкаОЗаработкеДляРасчетаПособий = Форма.Элементы.НадписьВходящаяСправкаОЗаработкеДляРасчетаПособий.Заголовок;
		Иначе
			Форма.НадписьВходящаяСправкаОЗаработкеДляРасчетаПособий = НСтр("ru='Входящая справка о заработке еще не вводилась';uk='Вхідна довідка про заробіток ще не вводилася'");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"НадписьВходящаяСправкаОЗаработкеДляРасчетаПособий",
			"Гиперссылка",
			Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Строка Из Форма.ДействияПриПереводеСотрудника Цикл
		ОбновитьНадписьНаФормеПоСтрокеТЧДействияПриПереводеСотрудника(Форма, Строка)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеФормыПоРезультату(Форма, Результат, ИмяРеквизитаСсылки = "Результат")
	Строка = СтрокаПоТипуЗначения(Форма, ТипЗнч(Результат[ИмяРеквизитаСсылки]));
	
	Если Строка = Неопределено Тогда
	   Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, Результат);	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьНаФормеПоСтрокеТЧДействияПриПереводеСотрудника(Форма, Строка)
	
	ТипРезультата = ТипЗнч(Строка.Результат);
	
	Если ТипРезультата = Тип("ДокументСсылка.Увольнение") Тогда
		УстановитьНадписьСтроки(Форма.НадписьУвольнение, НСтр("ru='Приказ об увольнении';uk='Наказ про звільнення'"), Строка, ТипРезультата);
		УстановитьКартинкуСтроки(Форма.НадписьУвольнениеКартинка, Строка, ТипРезультата);
		УстановитьОтветственногоСтроки(Форма.НадписьУвольнениеОтветственный, Строка);
	ИначеЕсли ТипРезультата = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		УстановитьНадписьСтроки(Форма.НадписьПриемНаРаботу, НСтр("ru='Приказ о приеме на работу';uk='Наказ про прийняття на роботу'"), Строка, ТипРезультата);
		УстановитьКартинкуСтроки(Форма.НадписьПриемНаРаботуКартинка, Строка, ТипРезультата);
		УстановитьОтветственногоСтроки(Форма.НадписьПриемНаРаботуОтветственный, Строка);
	ИначеЕсли ТипРезультата = Тип("ДокументСсылка.ВводНачальныхОстатковОтпусков") Тогда
		УстановитьНадписьСтроки(Форма.НадписьВводНачальныхОстатковОтпуска, НСтр("ru='Документ ввода остатков отпуска';uk='Документ введення залишків відпустки'"), Строка, ТипРезультата);
		УстановитьКартинкуСтроки(Форма.НадписьВводНачальныхОстатковОтпускаКартинка, Строка, ТипРезультата);
		УстановитьОтветственногоСтроки(Форма.НадписьВводНачальныхОстатковОтпускаОтветственный, Строка);
	ИначеЕсли Форма.ДоступенРасчетЗарплаты И Форма.ДоступноДобавлениеВходящейСправкиОЗаработкеДляРасчетаПособий 
		И ТипРезультата = Тип("ДокументСсылка.ВходящаяСправкаОЗаработкеДляРасчетаПособий") Тогда 
		УстановитьНадписьСтроки(Форма.НадписьВходящаяСправкаОЗаработкеДляРасчетаПособий, НСтр("ru='Входящая справка о заработке';uk='Вхідна довідка про заробіток'"), Строка, ТипРезультата);
		УстановитьКартинкуСтроки(Форма.НадписьВходящаяСправкаОЗаработкеДляРасчетаПособийКартинка, Строка, ТипРезультата);
		УстановитьОтветственногоСтроки(Форма.НадписьВходящаяСправкаОЗаработкеДляРасчетаПособийОтветственный, Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкуСтроки(Картинка, Строка, ТипРезультата)
	
	Если НЕ ЗначениеЗаполнено(Строка.Результат) Тогда
		Картинка = 0;
	ИначеЕсли Строка.Проведен Или ТипРезультата = Тип("СправочникСсылка.Сотрудники") 
		Тогда
		Картинка =  1;
	ИначеЕсли НЕ Строка.Проведен И НЕ Строка.ПомеченНаУдаление Тогда
		Картинка =  3;
	ИначеЕсли Строка.ПомеченНаУдаление Тогда
		Картинка =  2;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьСтроки(Надпись, НачалоНадписи, Строка, Тип)
	Если ЗначениеЗаполнено(Строка.Результат) Тогда
		ПредставлениеРезультата = ПредставлениеРезультата(Строка);
		ДополнениеПредставления = ДополнениеПредставленияРезультата(Строка, Тип);
		Надпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 %3", НачалоНадписи, ПредставлениеРезультата, ДополнениеПредставления);	
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтветственногоСтроки(Ответственный, Строка)
	Если ЗначениеЗаполнено(Строка.Ответственный) Тогда
		Ответственный = НСтр("ru='Отв';uk='Отв'") + ".: " + Строка.Ответственный;
	Иначе
		Ответственный = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРезультата(Строка)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(%1 от %2)", Строка.НомерДокумента, Формат(Строка.ДатаДокумента, "ДФ='dd MMM yyyy'"))	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДополнениеПредставленияРезультата(Строка, ТипРезультата)
	
	Если НЕ ЗначениеЗаполнено(Строка.Результат) 
		Или (Строка.Проведен Или ТипРезультата = Тип("СправочникСсылка.Сотрудники") 
				) Тогда
		ДополнительноеПредставление =  "";
	ИначеЕсли НЕ Строка.Проведен И НЕ Строка.ПомеченНаУдаление Тогда
		ДополнительноеПредставление = НСтр("ru='(не проведен)';uk='(не проведений)'");
	ИначеЕсли Строка.ПомеченНаУдаление Тогда
		ДополнительноеПредставление = НСтр("ru='(помечен на удаление)';uk='(позначений на вилучення)'");
	КонецЕсли;
	
	Возврат ДополнительноеПредставление	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПоТипуЗначения(Форма, Тип)
	
	Для каждого Строка Из Форма.ДействияПриПереводеСотрудника Цикл
		ТипРезультата = ТипЗнч(Строка.Результат);
		Если ТипРезультата = Тип Тогда
			Возврат Строка
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


#Область СоздатьУвольнение

&НаКлиенте
Процедура СоздатьУвольнение()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияУвольнения());
	
	ОткрытьФорму("Документ.Увольнение.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция МожноСоздатьУвольнение()
	
	Возврат ЗначениеЗаполнено(Объект.Сотрудник) И
			ЗначениеЗаполнено(Объект.Организация) И
			ЗначениеЗаполнено(Объект.ДатаУвольнения) И
			ЗначениеЗаполнено(Объект.СтатьяКЗОТ);
			
КонецФункции

&НаКлиенте
Процедура СообщитьОНевозможностиСозданияУвольнения()
	ТекстСообщения = НСтр("ru='Перед созданием увольнения необходимо заполнить организацию, сотрудника, дату увольнения и статью КЗоТ.';uk='Перед створенням звільнення необхідно заповнити організацію співробітника, дату звільнення та статтю Кзпп.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Функция ЗначенияЗаполненияУвольнения()
	
	ЗначенияЗаполненияУвольнения = Новый Структура;
	
	ЗначенияЗаполненияУвольнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполненияУвольнения.Вставить("Сотрудник", Объект.Сотрудник);
	ЗначенияЗаполненияУвольнения.Вставить("ДатаУвольнения", Объект.ДатаУвольнения);
	ЗначенияЗаполненияУвольнения.Вставить("СтатьяКЗОТ", Объект.СтатьяКЗОТ);
	ОснованиеУвольнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перевод к другому работодателю %1';uk='Переведення до іншого роботодавця %1'"), ?(ЗначениеЗаполнено(Объект.НоваяОрганизация), "(" + Объект.НоваяОрганизация+ ")" , ""));
	ЗначенияЗаполненияУвольнения.Вставить("ОснованиеУвольнения", ОснованиеУвольнения);	
	
	Возврат ЗначенияЗаполненияУвольнения;
	
КонецФункции 

#КонецОбласти 


#Область СоздатьПриемНаРаботу

&НаКлиенте
Процедура СоздатьПриемНаРаботу()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияПриемаНаРаботу());
	
	ОткрытьФорму("Документ.ПриемНаРаботу.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);		
	
КонецПроцедуры

&НаКлиенте
Функция МожноСоздатьПриемНаРаботу()
	
	Возврат ЗначениеЗаполнено(Объект.Сотрудник)
			И ЗначениеЗаполнено(Объект.НоваяОрганизация)
			И ЗначениеЗаполнено(Объект.Подразделение)
			И ЗначениеЗаполнено(Объект.Должность)
			И ЗначениеЗаполнено(Объект.ДатаПриема)
			И ЗначениеЗаполнено(Объект.КоличествоСтавок);
			
КонецФункции

&НаКлиенте
Процедура СообщитьОНевозможностиСозданияПриемаНаРаботу()
	ТекстСообщения = НСтр("ru='Перед созданием приема на работу необходимо заполнить сотрудника, новую организацию, подразделение, должность, дату увольнения, дату приема, количество ставок и график работы.';uk='Перед створенням прийому на роботу необхідно заповнити співробітника, нову організацію, підрозділ, посаду, дату звільнення, дату прийому, кількість ставок і графік роботи.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Функция ЗначенияЗаполненияПриемаНаРаботу()
	
	ЗначенияЗаполненияПриемаНаРаботу = Новый Структура;
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("Организация", 					Объект.НоваяОрганизация);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("ДатаПриема", 					Объект.ДатаПриема);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("ФизическоеЛицо", 				Объект.ФизическоеЛицо);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("Подразделение", 					Объект.Подразделение);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("Должность", 						Объект.Должность);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("ДолжностьПоШтатномуРасписанию", 	Объект.ДолжностьПоШтатномуРасписанию);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("КоличествоСтавок", 				Объект.КоличествоСтавок);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("ГрафикРаботы", 					Объект.ГрафикРаботы);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("ПКУ", 							Объект.ПКУ);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("РазрядКатегория", 				Объект.РазрядКатегория);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("СпособРасчетаАванса", 			Объект.СпособРасчетаАванса);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("Аванс", 							Объект.Аванс);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("Начисления", 					Объект.Начисления);
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("Показатели", 					Объект.Показатели);
	
	ЗначенияЗаполненияПриемаНаРаботу.Вставить("Сотрудник", 						СотрудникНовойОрганизации());
	
	Возврат ЗначенияЗаполненияПриемаНаРаботу;
	
КонецФункции 

&НаКлиенте
Функция СотрудникНовойОрганизации()
	
	Сотрудник = СтрокаПоТипуЗначения(ЭтаФорма, Тип("СправочникСсылка.Сотрудники")).Результат;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		СоздатьСотрудника();
		Сотрудник = СтрокаПоТипуЗначения(ЭтаФорма, Тип("СправочникСсылка.Сотрудники")).Результат;
	КонецЕсли;
	
	Возврат Сотрудник;	
	
КонецФункции

&НаСервере
Процедура СоздатьСотрудника()
	
	СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ФизическоеЛицо);
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.НоваяОрганизация);
	
	Сотрудник = КадровыйУчет.НеоформленныеСотрудникиФизическихЛиц(СписокФизическихЛиц, ГоловнаяОрганизация, Ложь).Получить(Объект.ФизическоеЛицо).ПолучитьОбъект(); 
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, СписокФизическихЛиц, "Фамилия,Имя,Отчество", ТекущаяДатаСеанса()); 
	
	Если КадровыеДанные.Количество() > 0 Тогда
		КадровыеДанные 	= КадровыеДанные[0];
		Сотрудник.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(КадровыеДанные.Фамилия, КадровыеДанные.Имя, КадровыеДанные.Отчество, "");
	Иначе
		Сотрудник.Наименование = Объект.ФизическоеЛицо.Наименование;
	КонецЕсли;
	
	Сотрудник.Записать();
	
	Если ДоступныПлановыеНачисления Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОтражениеЗарплатыНовогоСотрудникаВБухУчете(Сотрудник.Ссылка);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Строка = СтрокаПоТипуЗначения(ЭтаФорма, ТипЗнч(Сотрудник.Ссылка));
	Строка.Результат = Сотрудник.Ссылка;
	Строка.Ответственный = "";
КонецПроцедуры	


#КонецОбласти 


#Область СоздатьВходящуюСправкуОЗаработке

&НаКлиенте
Процедура СоздатьВходящуюСправкуОЗаработке()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияВходящейСправкиОЗаработке());
	
	ОткрытьФорму("Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Функция МожноСоздатьВходящуюСправкуОЗаработке()
	
	Возврат ЗначениеЗаполнено(Объект.НоваяОрганизация) И
			ЗначениеЗаполнено(СтрокаПоТипуЗначения(ЭтаФорма, Тип("СправочникСсылка.Сотрудники")).Результат);
			
КонецФункции

&НаКлиенте
Процедура СообщитьОНевозможностиСозданияВходящейСправкиОЗаработке()
	ТекстСообщения = НСтр("ru='Перед созданием входящей справки о заработке необходимо заполнить новую организацию и ввести документ приема на новое место работы.';uk='Перед створенням входить довідки про заробіток необхідно заповнити нову організацію та ввести документ прийому на нове місце роботи.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Функция ЗначенияЗаполненияВходящейСправкиОЗаработке()
	
	ЗначенияЗаполненияВходящейСправки = Новый Структура;
	ЗначенияЗаполненияВходящейСправки.Вставить("Организация", Объект.НоваяОрганизация);
	ЗначенияЗаполненияВходящейСправки.Вставить("Страхователь", РаботодательПоОрганизации(Объект.Организация));
	
	Сотрудник = СтрокаПоТипуЗначения(ЭтаФорма, Тип("СправочникСсылка.Сотрудники")).Результат;
	ЗначенияЗаполненияВходящейСправки.Вставить("Сотрудник", Сотрудник);
	
	
	Возврат ЗначенияЗаполненияВходящейСправки;
	
КонецФункции 

&НаСервереБезКонтекста
Функция РаботодательПоОрганизации(Организация)
	Возврат Справочники.Работодатели.РаботодательПоОрганизации(Организация);
КонецФункции


#КонецОбласти 


#Область СоздатьВводНачальныхОстатковОтпусков

&НаКлиенте
Процедура СоздатьВводНачальныхОстатковОтпусков()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполненияВводаНачальныхОстатковОтпусков());
	
	ОткрытьФорму("Документ.ВводНачальныхОстатковОтпусков.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Функция МожноСоздатьВводНачальныхОстатковОтпусков()
	
	Возврат ЗначениеЗаполнено(Объект.Организация) И 
			ЗначениеЗаполнено(Объект.Сотрудник) И
			ЗначениеЗаполнено(Объект.ДатаПриема) И
			ЗначениеЗаполнено(СтрокаПоТипуЗначения(ЭтаФорма, Тип("СправочникСсылка.Сотрудники")).Результат);
			
КонецФункции

&НаКлиенте
Процедура СообщитьОНевозможностиСозданияВводаНачальныхОстатковОтпусков()
	ТекстСообщения = НСтр("ru='Перед вводом начальных остатков отпусков необходимо заполнить организацию, сотрудника, дату приема на работу и ввести документ приема на новое место работы.';uk='Перед введенням початкових залишків відпусток необхідно заповнити організацію співробітника, дату прийому на роботу і ввести документ прийому на нове місце роботи.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Функция ЗначенияЗаполненияВводаНачальныхОстатковОтпусков()
		
	ЗначенияЗаполненияВводаНачальныхОстатковОтпусков = Новый Структура;
	ЗначенияЗаполненияВводаНачальныхОстатковОтпусков.Вставить("Организация", Объект.НоваяОрганизация);
	ЗначенияЗаполненияВводаНачальныхОстатковОтпусков.Вставить("ДатаОстатков", Объект.ДатаПриема);
	
	Сотрудник = СтрокаПоТипуЗначения(ЭтаФорма, Тип("СправочникСсылка.Сотрудники")).Результат;
	ЗначенияЗаполненияВводаНачальныхОстатковОтпусков.Вставить("Сотрудник", Сотрудник);
	
	ДополнитьОстаткамиОтпусковСотрудника(ЗначенияЗаполненияВводаНачальныхОстатковОтпусков);
	
	Возврат ЗначенияЗаполненияВводаНачальныхОстатковОтпусков;
	
КонецФункции 

&НаКлиенте
Процедура ДополнитьОстаткамиОтпусковСотрудника(ЗначенияЗаполненияВводаНачальныхОстатковОтпусков)
	
	ЗначенияЗаполненияВводаНачальныхОстатковОтпусков.Вставить("АдресОстатковОтпускаВХранилище", ОстаткиОтпусковСотрудникаНаДату(Объект.Сотрудник, Объект.ДатаПриема));
		
КонецПроцедуры

&НаСервере
Функция ОстаткиОтпусковСотрудникаНаДату(Сотрудник, Дата)
	
	Адрес = Неопределено;
	
	ОстаткиОтпусковСотрудника 				= ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(Сотрудник, Дата, Истина);
	ОстаткиВРазрезеРабочихЛетИВидовОтпусков = ОстаткиОтпусковСотрудника.ОстаткиВРазрезеРабочихЛетИВидовОтпусков;
	
	Если ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Количество() > 0 Тогда
		ТаблицаОстатков = Новый ТаблицаЗначений;
		ТаблицаОстатков.Колонки.Добавить("ВидЕжегодногоОтпуска");
		ТаблицаОстатков.Колонки.Добавить("РабочийГодНачало");
		ТаблицаОстатков.Колонки.Добавить("РабочийГодОкончание");
		ТаблицаОстатков.Колонки.Добавить("Остаток");
		
		Для каждого ОстатокПоВидуОтпуска Из ОстаткиВРазрезеРабочихЛетИВидовОтпусков Цикл
			Если ОстатокПоВидуОтпуска.ОсталосьДней > 0 Тогда
				ОстатокНовогоСотрудника  						= ТаблицаОстатков.Добавить();
				ОстатокНовогоСотрудника.ВидЕжегодногоОтпуска 	= ОстатокПоВидуОтпуска.ВидЕжегодногоОтпуска;
				ОстатокНовогоСотрудника.РабочийГодНачало 		= ОстатокПоВидуОтпуска.РабочийГодС;
				ОстатокНовогоСотрудника.РабочийГодОкончание 	= ОстатокПоВидуОтпуска.РабочийГодПо;
				ОстатокНовогоСотрудника.Остаток				 	= ОстатокПоВидуОтпуска.ОсталосьДней;
			КонецЕсли;
		КонецЦикла; 
		
		ТаблицаОстатков.Сортировать("ВидЕжегодногоОтпуска, РабочийГодНачало");
		Адрес = ПоместитьВоВременноеХранилище(ТаблицаОстатков, ЭтаФорма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции 

#КонецОбласти 


#Область ПодобратьНовыеКадровыеДанные

&НаСервере
Процедура ПодобратьНовыеКадровыеДанные()
	
	Поля = "Подразделение,Должность,КоличествоСтавок,ГрафикРаботы,Организация";
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, Поля, НачалоДня(Объект.ДатаУвольнения) - 1);
	Если ДанныеСотрудников.Количество() > 0 Тогда
		КадровыеДанныеСотрудника = ДанныеСотрудников[0];
		// Если дата приема не заполнена, установим следующую после даты увольнения.
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПриема) И ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
			Объект.ДатаПриема = КонецДня(Объект.ДатаУвольнения)+1;
		КонецЕсли;
		
		// Подберем по наименованию и заполним новое подразделение.
		Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.Подразделение) И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Объект.Подразделение = ПодобратьНовоеПодразделение(Объект.НоваяОрганизация, КадровыеДанныеСотрудника.Подразделение);
		КонецЕсли;
		
		// Заполним новую должность
		Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.Должность) И НЕ  ЗначениеЗаполнено(Объект.Должность) Тогда
			Объект.Должность = КадровыеДанныеСотрудника.Должность;
		КонецЕсли;
		
		// Заполним новую позицию штатного расписания.
		ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
		Если ИспользоватьШтатноеРасписание И НЕ ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) И ЗначениеЗаполнено(Объект.Подразделение) И ЗначениеЗаполнено(Объект.Должность) Тогда
			Объект.ДолжностьПоШтатномуРасписанию = ПодобратьНовуюДолжностьПоШтатномуРасписанию(Объект.Подразделение, Объект.Должность);
		КонецЕсли;
		
		// Заполним новый график
		Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ГрафикРаботы) И НЕ ЗначениеЗаполнено(Объект.ГрафикРаботы) Тогда
			Объект.ГрафикРаботы = КадровыеДанныеСотрудника.ГрафикРаботы;
		КонецЕсли;
		
		// Заполним новое количество ставок.
		Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.КоличествоСтавок) И НЕ ЗначениеЗаполнено(Объект.КоличествоСтавок) Тогда
			Объект.КоличествоСтавок = КадровыеДанныеСотрудника.КоличествоСтавок;
		КонецЕсли;
	КонецЕсли;
	
	ПодобратьНовыеНачисленияСотрудника();
	ПодобратьНовыйАвансСотрудника();
	
КонецПроцедуры	

&НаСервере
Функция ПодобратьНовоеПодразделение(НоваяОрганизация, СтароеПодразделение)
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Владелец
	|	И ПодразделенияОрганизаций.Наименование = &Наименование";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", НоваяОрганизация);
	Запрос.УстановитьПараметр("Наименование", СтароеПодразделение.Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Подразделение;
	КонецЕсли;
	
	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
КонецФункции	

&НаСервере
Функция ПодобратьНовуюДолжностьПоШтатномуРасписанию(Подразделение, Должность)
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Подразделение = &Подразделение
	|	И ШтатноеРасписание.Должность = &Должность";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Должность", Должность);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДолжностьПоШтатномуРасписанию;
	КонецЕсли;
	
	Возврат Справочники.ШтатноеРасписание.ПустаяСсылка();
КонецФункции	
	
#КонецОбласти


&НаСервере
Процедура ПодобратьНовыеНачисленияСотрудника()
	
	Если ДоступныПлановыеНачисления Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Объект.Начисления.Очистить();
		Объект.Показатели.Очистить();
		
		ТаблицаСотрудников = ТаблицаСотрудников(Объект.ДатаУвольнения - 1);
		
		ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
		
		ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДействующиеНачисленияВРеквизит(Объект.Ссылка, ТаблицаСотрудников, ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.ДатаПриема);
		
		ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
		Если ИспользоватьШтатноеРасписание И ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
			
			ПараметрыЗаполнения = КадровыйУчетРасширенный.ПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания();
			ПараметрыЗаполнения.ДатаСобытия = Объект.ДатаПриема;
			ПараметрыЗаполнения.Сотрудник = Объект.Сотрудник;
			ПараметрыЗаполнения.РазрядКатегорияНадбавки = Объект.РазрядКатегория;
			ПараметрыЗаполнения.ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
			ПараметрыЗаполнения.СохранятьТекущиеЗначения = Истина;
			ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
			ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию = ТекущиеКадровыеДанныеСотрудника.ДолжностьПоШтатномуРасписанию;
			
			КадровыйУчетРасширенный.ЗаполнитьНачисленияПоПозиции(ЭтаФорма, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьНовыйАвансСотрудника()
	Если ДоступныПлановыеНачисления Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаСотрудников = ТаблицаСотрудников(Объект.ДатаУвольнения - 1);
		
		ДанныеОбАвансе = РасчетЗарплатыРасширенный.АвансыСотрудников(ТаблицаСотрудников, Объект.Ссылка);
		
		Если ДанныеОбАвансе.Количество() > 0 Тогда
			Объект.СпособРасчетаАванса = ДанныеОбАвансе[0].СпособРасчетаАванса;
			Объект.Аванс = ДанныеОбАвансе[0].Аванс;
		КонецЕсли;
		
	КонецЕсли
КонецПроцедуры	

&НаСервере
Процедура ОтражениеЗарплатыНовогоСотрудникаВБухУчете(НовыйСотрудник)
	
	БухучетСотрудника = ОтражениеЗарплатыВБухучетеРасширенный.НастройкаБухучетаЗарплатыСотрудника(Объект.Сотрудник.Ссылка, Объект.ДатаПриема);
	Если ЗначениеЗаполнено(БухучетСотрудника.Период) Тогда
		
		НаборЗаписейБухУчета  = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписейБухУчета.Отбор.Сотрудник.Установить(НовыйСотрудник, Истина);
		Запись = НаборЗаписейБухУчета.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,БухучетСотрудника);
		Запись.Сотрудник = НовыйСотрудник;
		Запись.Период = Объект.ДатаПриема;
		НаборЗаписейБухУчета.Записать();
		
	КонецЕсли;
	
КонецПроцедуры	

#Область СервернаяЧастьОбработчиковСобытийЭлементовФормы

&НаСервере
Процедура ТекущаяОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТекущиеКадровыеДанныеСотрудника()
	
	Поля = "ФизическоеЛицо,РазрядКатегория,ДолжностьПоШтатномуРасписанию";
	
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, Поля, ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),Объект.ДатаУвольнения,ТекущаяДатаСеанса()));
	Если ДанныеСотрудников.Количество() > 0 Тогда
		
		КадровыеДанныеСотрудника = Новый Структура(Поля);
		ЗаполнитьЗначенияСвойств(КадровыеДанныеСотрудника, ДанныеСотрудников[0]);
		ТекущиеКадровыеДанныеСотрудника = Новый ФиксированнаяСтруктура(КадровыеДанныеСотрудника);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	ПрочитатьТекущиеКадровыеДанныеСотрудника();
	Если ТекущиеКадровыеДанныеСотрудника <> Неопределено Тогда
		// Заполним физическое лицо
		Объект.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудника.ФизическоеЛицо;
		Объект.РазрядКатегория = ТекущиеКадровыеДанныеСотрудника.РазрядКатегория;
	КонецЕсли;
	
	ОбновитьСсылкиНаРезультатыНаСервере();
	
	ОбновитьНадписиНаФорме(ЭтаФорма);
	
	ПодобратьНовыеКадровыеДанные();
	
	УстановитьПоказРазмераАванса(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаУвольненияПриИзмененииНаСервере()
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПриема) И ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
		Объект.ДатаПриема = КонецДня(Объект.ДатаУвольнения)+1;
	КонецЕсли;
	ПодобратьНовыеКадровыеДанные(); 
КонецПроцедуры

&НаСервере
Процедура НоваяОрганизацияПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	ПодобратьНовыеКадровыеДанные();
	ОбновитьСсылкиНаРезультатыНаСервере();
	ОбновитьНадписиНаФорме(ЭтаФорма);
	ЗаполнитьДанныеФормыПоНовойОрганизации();
		
	РазмерАвансаПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Объект.НоваяОрганизация);
	
КонецПроцедуры

&НаСервере
Процедура ПозицияШтатногоРасписанияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию)
		И (Не ЗначениеЗаполнено(Объект.НоваяОрганизация)
			Или Не ЗначениеЗаполнено(Объект.Подразделение)) Тогда
		
		ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(
			Объект.ДолжностьПоШтатномуРасписанию, Объект.ДатаПриема, Ложь, Ложь);
		
		Если Не ЗначениеЗаполнено(Объект.НоваяОрганизация) Тогда
			Объект.НоваяОрганизация = ДанныеПозиции.Организация;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Объект.Подразделение = ДанныеПозиции.Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
	ПрочитатьТарифнуюСетку();
	ЗаполнитьПКУПоУмолчанию();
	ЗаполнитьРазрядПоУмолчанию();
	ПодобратьНовыеНачисленияСотрудника();
	ПодобратьНовыйАвансСотрудника();
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	ПрочитатьТарифнуюСетку();
	ЗаполнитьРазрядПоУмолчанию();
	ЗаполнитьДанныеТарифнойСетки();
КонецПроцедуры

&НаСервере
Процедура ДатаПриемаПриИзмененииНаСервере()
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание")
		И ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		Если Объект.ДатаПриема < ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДолжностьПоШтатномуРасписанию, "ДатаУтверждения") Тогда
			Объект.ДолжностьПоШтатномуРасписанию = Справочники.ШтатноеРасписание.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	ЗаполнитьДанныеТарифнойСетки();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваСтавок(Результат, ДополнительныеПараметры) Экспорт
	
	ПодобратьНовыеНачисленияСотрудника();
	
КонецПроцедуры

&НаСервере
Процедура ПКУПриИзмененииНаСервере()
	
	ЗаполнитьДанныеТарифнойСетки();
	
КонецПроцедуры

&НаСервере
Процедура РазрядКатегорияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеТарифнойСетки();
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоНовойОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.НоваяОрганизация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.НоваяОрганизация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.РуководительНовойОрганизации");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителяНовойОрганизации");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТарифнойСетки()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияПоказателейТарифныхСеток(
		ЭтаФорма, Объект.Начисления, ОписаниеТаблицыНачислений(), 1, ТарифнаяСетка, РазрядКатегория, Объект.ДатаПриема, ТарифнаяСеткаНадбавки, Объект.РазрядКатегория, , Объект.ПКУ);
		
	ПерезаполнитьДанныеТарифнойСетки = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТарифнуюСетку()
	
	РазрядыКатегорииДолжностей.ПрочитатьДанныеТарифныхСетокДолжностиВФорму(ЭтаФорма, Объект.Должность, Объект.ДолжностьПоШтатномуРасписанию, Объект.ДатаПриема);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПКУПоУмолчанию()

	РазрядыКатегорииДолжностей.ЗаполнитьПКУСотрудникаПоУмолчанию(
		ЭтаФорма, "Объект.ПКУ", Объект.ДатаПриема, Объект.ДолжностьПоШтатномуРасписанию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазрядПоУмолчанию()

	РазрядыКатегорииДолжностей.ЗаполнитьРазрядКатегориюСотрудникаПоУмолчанию(
		ЭтаФорма, "Объект.РазрядКатегория", ТарифнаяСетка, Объект.Должность, 
		Объект.ДолжностьПоШтатномуРасписанию, Объект.Сотрудник, Объект.ДатаПриема);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПоказРазмераАванса(Форма)
	Если Форма.ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда
		РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСсылкиНаРезультатыНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнициализироватьТаблицуРезультатов();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизическоеЛицо", 		Объект.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Объект.НоваяОрганизация));
	Запрос.УстановитьПараметр("Сотрудник", 				Объект.Сотрудник);
	Запрос.УстановитьПараметр("Дата", 					Объект.ДатаУвольнения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Сотрудник КАК Сотрудник,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудники";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТСотрудники");

	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ПриказОбУвольнении");
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Объект.НоваяОрганизация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ФизическоеЛицо);
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 			= Объект.ДатаУвольнения;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные 		= "ПриказОПриеме";
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТСотрудникиОрганизации.Сотрудник,
	|	ВТСотрудникиОрганизации.ПриказОПриеме
	|ПОМЕСТИТЬ ВТСотрудникНовойОрганизации
	|ИЗ
	|	ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТКадровыеДанныеСотрудников.Сотрудник,
	|	ВТКадровыеДанныеСотрудников.ПриказОбУвольнении
	|ПОМЕСТИТЬ ВТСотрудникСтаройОрганизации
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Увольнение.Ссылка КАК Результат,
	|	Увольнение.Ответственный,
	|	Увольнение.Проведен,
	|	Увольнение.ПометкаУдаления КАК ПомеченНаУдаление,
	|	Увольнение.Дата КАК ДатаДокумента,
	|	Увольнение.Номер КАК НомерДокумента
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникСтаройОрганизации КАК ВТСотрудникСтаройОрганизации
	|		ПО Увольнение.Сотрудник = ВТСотрудникСтаройОрганизации.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка,
	|	"""",
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	0
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникНовойОрганизации КАК ВТСотрудникНовойОрганизации
	|		ПО Сотрудники.Ссылка = ВТСотрудникНовойОрганизации.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриемНаРаботу.Ссылка,
	|	ПриемНаРаботу.Ответственный,
	|	ПриемНаРаботу.Проведен,
	|	ПриемНаРаботу.ПометкаУдаления,
	|	ПриемНаРаботу.Дата,
	|	ПриемНаРаботу.Номер
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникНовойОрганизации КАК ВТСотрудникНовойОрганизации
	|		ПО ПриемНаРаботу.Ссылка = ВТСотрудникНовойОрганизации.ПриказОПриеме
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВходящаяСправка.Ссылка,
	|	ВходящаяСправка.Ответственный,
	|	ВходящаяСправка.Проведен,
	|	ВходящаяСправка.ПометкаУдаления,
	|	ВходящаяСправка.Дата,
	|	ВходящаяСправка.Номер
	|ИЗ
	|	Документ.ВходящаяСправкаОЗаработкеДляРасчетаПособий КАК ВходящаяСправка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникНовойОрганизации КАК ВТСотрудникНовойОрганизации
	|		ПО ВходящаяСправка.Сотрудник = ВТСотрудникНовойОрганизации.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатковОтпусков.Ссылка,
	|	ВводНачальныхОстатковОтпусков.Ответственный,
	|	ВводНачальныхОстатковОтпусков.Проведен,
	|	ВводНачальныхОстатковОтпусков.ПометкаУдаления,
	|	ВводНачальныхОстатковОтпусков.Дата,
	|	ВводНачальныхОстатковОтпусков.Номер
	|ИЗ
	|	Документ.ВводНачальныхОстатковОтпусков КАК ВводНачальныхОстатковОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникНовойОрганизации КАК ВТСотрудникНовойОрганизации
	|		ПО ВводНачальныхОстатковОтпусков.Сотрудник = ВТСотрудникНовойОрганизации.Сотрудник";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбновитьДанныеФормыПоРезультату(ЭтаФорма, Выборка);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуРезультатов()
	ДействияПриПереводеСотрудника.Очистить();
	// Инициализируем табличную часть ДействияПриПереводеСотрудника.
	МассивПустыхРезультатов = Новый Массив;
	МассивПустыхРезультатов.Добавить(Документы.Увольнение.ПустаяСсылка());
	МассивПустыхРезультатов.Добавить(Документы.ВходящаяСправкаОЗаработкеДляРасчетаПособий.ПустаяСсылка());
	МассивПустыхРезультатов.Добавить(Справочники.Сотрудники.ПустаяСсылка());
	МассивПустыхРезультатов.Добавить(Документы.ПриемНаРаботу.ПустаяСсылка());
	МассивПустыхРезультатов.Добавить(Документы.ВводНачальныхОстатковОтпусков.ПустаяСсылка());
	Для каждого ПустойРезультат Из МассивПустыхРезультатов Цикл
		НоваяСтрока = ДействияПриПереводеСотрудника.Добавить();
		НоваяСтрока.Результат = ПустойРезультат;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ТаблицаСотрудников(Период)
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		СтрокаСотрудник = ТаблицаСотрудников.Добавить();
		СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
		СтрокаСотрудник.Период = Период;
		
	КонецЕсли;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

&НаСервере
Процедура УстановитьПредставленияКомандВводаСтажей()
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	
	ТаблицаСотрудников = ТаблицаСотрудников(Объект.ДатаПриема);
	
	ЗарплатаКадрыРасширенный.УстановитьПредставленияКомандВводаСтажей(ЭтаФорма, ТаблицаСотрудников, ОписаниеТаблицыВидовРасчета, 1);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()

	Если Не ДоступныПлановыеНачисления Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатаТруда", "Видимость", Ложь);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатаТруда", "Видимость", ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОплатаТруда", "ТолькоПросмотр", Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений);
	КонецЕсли;
	
	Если Не ДоступенРасчетЗарплаты Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНадписьВходящаяСправкаОЗаработкеДляРасчетаПособий", "Видимость", Ложь);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаНадписьВходящаяСправкаОЗаработкеДляРасчетаПособий", "Видимость", Ложь);
	КонецЕсли;
	
	Если Не ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьОграниченияНаУровнеЗаписей();
	
	Если ОграниченияИзменились(БылиОграничения) Тогда 
		
		УстановитьВидимостьРасчетныхПолей();
		
		Если ОграничениеНаЧтениеИзменилось(БылиОграничения) Тогда 
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОграниченияИзменились(БылиОграничения)
	
	ОграниченияИзменились = Истина;	
	
	Если НЕ БылиОграничения = Неопределено Тогда
		
		ОграниченияИзменились = Ложь;
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
			Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
			Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
			
			ОграниченияИзменились = Истина;
			
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ОграниченияИзменились;
	
КонецФункции

&НаСервере
Функция ОграничениеНаЧтениеИзменилось(БылиОграничения)
	
	ОграничениеНаЧтениеИзменилось = Истина;	
	
	Если НЕ БылиОграничения = Неопределено Тогда
		ОграничениеНаЧтениеИзменилось = Ложь;		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
			ОграничениеНаЧтениеИзменилось = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ОграничениеНаЧтениеИзменилось;
	
КонецФункции

&НаСервере
Процедура УстановитьОграниченияНаУровнеЗаписей()

	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПолныеПраваПоРолямТекущаяОрганизация = ИспользуетсяРасчетЗарплаты И Документы.Увольнение.ПолныеПраваНаДокумент();
	ПолныеПраваПоРолямНоваяОрганизация = ИспользуетсяРасчетЗарплаты И Документы.ПриемНаРаботу.ПолныеПраваНаДокумент();
	
	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	// Текущая организация
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = МассивФизическихЛиц;
	
	ЧтениеБезОграниченийТекущаяОрганизация = Ложь;
	ИзменениеБезОграниченийТекущаяОрганизация = Ложь;
	
	Если ПолныеПраваПоРолямТекущаяОрганизация Тогда 
		ИзменениеБезОграниченийТекущаяОрганизация = Не ЗарплатаКадрыРасширенный.ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Изменение", "НачисленнаяЗарплата", ДанныеДляПроверкиОграничений);
		ЧтениеБезОграниченийТекущаяОрганизация = ?(ИзменениеБезОграниченийТекущаяОрганизация, Истина, Не ЗарплатаКадрыРасширенный.ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Чтение", "НачисленнаяЗарплата", ДанныеДляПроверкиОграничений));
	КонецЕсли;	
	
	ИзменениеКадровыхДанныхТекущаяОрганизация = ?(ИзменениеБезОграниченийТекущаяОрганизация, Истина, Не ЗарплатаКадрыРасширенный.ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Изменение", "КадровыеДанные", ДанныеДляПроверкиОграничений));
	
	Если Не ЧтениеБезОграниченийТекущаяОрганизация И Не ИзменениеКадровыхДанныхТекущаяОрганизация Тогда 
		ЧтениеКадровыхДанныхТекущаяОрганизация = Не ЗарплатаКадрыРасширенный.ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Чтение", "КадровыеДанные", ДанныеДляПроверкиОграничений);
		Если Не ЧтениеКадровыхДанныхТекущаяОрганизация Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТекущаяОрганизация", "Видимость", Ложь);
			ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаНадписьУвольнение", "Видимость", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Новая организация
	ДанныеДляПроверкиОграничений.Организация = Объект.НоваяОрганизация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = МассивФизическихЛиц;
	
	ЧтениеБезОграниченийНоваяОрганизация = Ложь;
	ИзменениеБезОграниченийНоваяОрганизация = Ложь;
	
	Если ПолныеПраваПоРолямНоваяОрганизация Тогда 
		ИзменениеБезОграниченийНоваяОрганизация = Не ЗарплатаКадрыРасширенный.ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Изменение", "ПлановыеНачисления", ДанныеДляПроверкиОграничений);
		ЧтениеБезОграниченийНоваяОрганизация = ?(ИзменениеБезОграниченийНоваяОрганизация, Истина, Не ЗарплатаКадрыРасширенный.ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Чтение", "ПлановыеНачисления", ДанныеДляПроверкиОграничений));
	КонецЕсли;	

	ИзменениеКадровыхДанныхНоваяОрганизация = ?(ИзменениеБезОграниченийНоваяОрганизация, Истина, Не ЗарплатаКадрыРасширенный.ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Изменение", "КадровыеДанные", ДанныеДляПроверкиОграничений));
	
	Если Не ЧтениеБезОграниченийНоваяОрганизация И Не ИзменениеКадровыхДанныхНоваяОрганизация Тогда 
		ЧтениеКадровыхДанныхНоваяОрганизация = Не ЗарплатаКадрыРасширенный.ЕстьОграниченияНаУровнеЗаписейПоВидуУчета("Чтение", "КадровыеДанные", ДанныеДляПроверкиОграничений);
		Если Не ЧтениеКадровыхДанныхНоваяОрганизация Тогда 
			ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "НовоеМестоРаботы", "Видимость", Ложь);
			ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаНадписьПриемНаРаботу", "Видимость", Ложь);
			ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаНадписьВводНачальныхОстатковОтпуска", "Видимость", Ложь);
			ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаНадписьВходящаяСправкаОЗаработкеДляРасчетаПособий", "Видимость", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ЧтениеБезОграничений = ЧтениеБезОграниченийТекущаяОрганизация И ЧтениеБезОграниченийНоваяОрганизация;
	ИзменениеБезОграничений = ЧтениеБезОграниченийТекущаяОрганизация И ИзменениеБезОграниченийНоваяОрганизация;
	ИзменениеКадровыхДанных = ИзменениеКадровыхДанныхТекущаяОрганизация И ИзменениеКадровыхДанныхНоваяОрганизация;
	
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных);
	
КонецПроцедуры

#КонецОбласти
