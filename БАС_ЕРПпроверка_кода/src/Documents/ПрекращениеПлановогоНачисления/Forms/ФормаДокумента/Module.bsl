
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ЗаполнитьПервоначальныеЗначения();
		ПрочитатьВремяРегистрации();
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	ЭтотОбъект.ПодробныйРасчетФОТ = Ложь;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	 	
	ПрочитатьВремяРегистрации();
	
	ФОТСотрудниковВРеквизитФормы();

	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьВремяРегистрации();
	
	ФОТСотрудниковВРеквизитФормы();

	УстановитьОтображениеНадписей();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПрекращенияПриИзменении(Элемент)
	ДатаПрекращенияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиФОТ" Тогда
		ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(Элемент.ТекущиеДанные, Элемент.ТекущаяСтрока);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не Копирование 
		И НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ДатаПрекращения = Объект.ДатаПрекращения;
		Элемент.ТекущиеДанные.ВремяРегистрации = ВремяРегистрации;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	СотрудникиСотрудникПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиДатаПрекращенияПриИзменении(Элемент)
	СотрудникиДатаПрекращенияПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ПараметрыОткрытия = Неопределено;
	КадровыйУчетРасширенныйКлиент.ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(
		ЭтаФорма, ПараметрыОткрытия);
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация, 
		,
		Объект.ДатаПрекращения, 
		Объект.ДатаПрекращения,
		Истина, 
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетФОТПодробно(Команда)
	РасчетФОТПодробноНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область СервернаяЧастьОбработчиковСобытийЭлементовФормы

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	ЗаполнитьПоДокументуОснованию();
	ПрочитатьВремяРегистрации();
	ЗаполнитьФОТИСовокупныеСтавкиСотрудников();
	УстановитьОтображениеНадписей();
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДатаПрекращенияПриИзмененииНаСервере()
	
	ПрочитатьВремяРегистрации();
		
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
	Для каждого Сотрудник Из ВыбранноеЗначение Цикл
		
		СтрокаСотрудника = Объект.Сотрудники.Добавить();
		СтрокаСотрудника.Сотрудник = Сотрудник;
		СтрокаСотрудника.ДатаПрекращения = Объект.ДатаПрекращения;
		ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, СтрокаСотрудника);
		
		ЭлементФильтра = ФильтрСотрудников.Добавить();
		ЭлементФильтра.Сотрудник = СтрокаСотрудника.Сотрудник;
		ЭлементФильтра.ДатаИзменения = СтрокаСотрудника.ВремяРегистрации;
		
	КонецЦикла;	
	
	ЗаполнитьФОТИСовокупныеСтавкиСотрудников(ФильтрСотрудников);
	
	УстановитьОтображениеНадписей();
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ЗаполнитьФОТИСовокупнуюСтавкуВСтроке(СтрокаСотрудника);
	
	УстановитьОтображениеНадписей();
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиДатаПрекращенияПриИзмененииНаСервере(ИдентификаторСтроки)
	

	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, СтрокаСотрудника);
	
	ЗаполнитьФОТИСовокупнуюСтавкуВСтроке(СтрокаСотрудника);
	
	УстановитьОтображениеНадписей();
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ПриПолученииДанныхНаСервере

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ПрочитатьВремяРегистрации();	

	ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(ЭтотОбъект);	
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	УстановитьВидимостьКолонокПодробногоРасчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокПодробногоРасчета()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиСовокупнаяТарифнаяСтавка", "Видимость", ЭтотОбъект.ПодробныйРасчетФОТ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиФОТ", "Видимость", ЭтотОбъект.ПодробныйРасчетФОТ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНадписей()
	
	УстановитьПривилегированныйРежим(Истина);
	МассивСотрудников = Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	ЗарплатаКадрыРасширенный.УстановитьТекстНадписиОДокументахВведенныхНаДату(ЭтотОбъект, ВремяРегистрации, 
								МассивСотрудников, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ФОТ

&НаСервере
Процедура ФОТСотрудниковВРеквизитФормы(ФОТСотрудников = Неопределено)
	
	Если ФОТСотрудников = Неопределено Тогда
		
		ФОТСотрудников = ФОТСотрудников();	
		
	КонецЕсли;
	
	Отбор = Новый Структура("Сотрудник");
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		
		Отбор.Сотрудник = СтрокаСотрудника.Сотрудник;
		ФОТСотрудника = ФОТСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		Если ФОТСотрудника <> Неопределено Тогда
			СтрокаСотрудника.ФОТ = ФОТСотрудника;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников)
	
	РассчитываемыеОбъекты = Новый Соответствие;	
	Сотрудники = Новый Соответствие;
	
	Отбор = Новый Структура;
	
	ВремяРегистрацииСотрудников = ВремяРегистрацииСотрудников();
	Для Каждого СтрокаСотрудника Из ПлановыеНачисленияПоказателиСотрудников.Сотрудники Цикл
		
		Отбор.Вставить("Сотрудник", СтрокаСотрудника.Сотрудник);
		
		ОписаниеСотрудника = Новый Структура;
		ОписаниеСотрудника.Вставить("Организация", Объект.Организация);
		ОписаниеСотрудника.Вставить("ДатаРасчета", ВремяРегистрацииСотрудников[СтрокаСотрудника.Сотрудник]);	
		ОписаниеСотрудника.Вставить("Начисления", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
		ОписаниеСотрудника.Вставить("Показатели", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
		
		СтрокиПоСотруднику = ПлановыеНачисленияПоказателиСотрудников.НачисленияСотрудников.НайтиСтроки(Отбор);
		Для Каждого СтрокаНачисления Из СтрокиПоСотруднику Цикл	
			
			Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
			ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
			ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
			ДанныеНачисления.Размер = СтрокаНачисления.Размер;
			
		КонецЦикла;
		
		СтрокиПоСотруднику = ПлановыеНачисленияПоказателиСотрудников.ПоказателиСотрудников.НайтиСтроки(Отбор);
		Для Каждого СтрокаПоказателя Из СтрокиПоСотруднику Цикл	
			
			ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
			ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
			ДанныеПоказателя.ДокументОснование = СтрокаПоказателя.ДокументОснование;
			ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
			
		КонецЦикла;
		
		Сотрудники.Вставить(СтрокаСотрудника.Сотрудник, ОписаниеСотрудника);
		
	КонецЦикла;
	
	РассчитываемыеОбъекты.Вставить(Объект.Ссылка, Сотрудники);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасчетЗарплатыРасширенный.РассчитатьФОТСотрудников(РассчитываемыеОбъекты, Объект.Организация, ВремяРегистрации);
	
	УстановитьПривилегированныйРежим(Ложь);			
	
	Возврат РассчитываемыеОбъекты.Получить(Объект.Ссылка);
	
КонецФункции

&НаСервере
Функция ПрименитьИзмененияВДокументеКФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников)
			
КонецФункции

&НаСервере
Функция ФОТСотрудников()
	
	ФОТСотрудников = Новый Соответствие;
	
	Если ЭтотОбъект.ПодробныйРасчетФОТ Тогда
		
		ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
		
		Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаПрекращения) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементФильтра = ФильтрСотрудников.Добавить();
			ЭлементФильтра.Сотрудник = СтрокаСотрудника.Сотрудник;
			ЭлементФильтра.ДатаИзменения = СтрокаСотрудника.ВремяРегистрации;
			
		КонецЦикла;	
		
		ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников);
		
		ФОТПлановыхНачисленийСотрудников = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
		ПрименитьИзмененияВДокументеКФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников);
		ФОТСотрудников = ФОТСотрудниковПоОписаниюНачислений(ФОТПлановыхНачисленийСотрудников);	
	КонецЕсли;
	
	Возврат ФОТСотрудников;	
	
КонецФункции

&НаСервере
Функция ФОТСотрудниковПоОписаниюНачислений(ФОТНачисленийСотрудников)
	
	ФОТСотрудников = Новый Соответствие;
	
	Для Каждого ОписаниеСотрудника Из ФОТНачисленийСотрудников Цикл
		
		ФОТСотрудника = 0;
		
		Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Значение.Начисления Цикл
			
			ФОТСотрудника = ФОТСотрудника + ОписаниеНачисления.Размер;
			
		КонецЦикла;
		
		ФОТСотрудников.Вставить(ОписаниеСотрудника.Ключ, ФОТСотрудника);	
		
	КонецЦикла;
	
	Возврат ФОТСотрудников;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФОТСотрудниковВФорме()	
	
	ФОТСотрудников = ФОТСотрудников();	
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		
		СтрокаСотрудника.ФОТ = ФОТСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасчетФОТПодробноНаСервере()
	
	Пометка = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиРасчетФОТПодробно", "Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиРасчетФОТПодробно", "Пометка", Не Пометка);
	ЭтотОбъект.ПодробныйРасчетФОТ = Не Пометка;
	
	УстановитьВидимостьКолонокПодробногоРасчета();
	
	Если ЭтотОбъект.ПодробныйРасчетФОТ Тогда
		ЗаполнитьФОТСотрудниковВФорме();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СовокупнаяТарифнаяСтавка

&НаСервере
Процедура ЗаполнитьЗначенияСовокупныхТарифныхСтавокСотрудников(НачисленияСотрудников, ПоказателиСотрудников)
	
	// Удаление текущих данных
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияСотрудников, "Сотрудник", Истина);
	Для Каждого Сотрудник Из МассивСотрудников Цикл 
		Отбор = Новый Структура("Сотрудник", Сотрудник);
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда  
			НайденныеСтроки[0].СовокупнаяТарифнаяСтавка = 0;
			НайденныеСтроки[0].ВидТарифнойСтавки = Неопределено;
		КонецЕсли;	
	КонецЦикла;
	
	// Заполнение документа результатами расчета.
	ЗначенияСовокупныхТарифныхСтавок = ЗначенияСовокупныхТарифныхСтавокСотрудников(НачисленияСотрудников, ПоказателиСотрудников);
	
	Для Каждого ДанныеСотрудника Из ЗначенияСовокупныхТарифныхСтавок Цикл 
		Отбор = Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник);
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда  
			НайденныеСтроки[0].СовокупнаяТарифнаяСтавка = ДанныеСотрудника.СовокупнаяТарифнаяСтавка;
			НайденныеСтроки[0].ВидТарифнойСтавки = ДанныеСотрудника.ВидТарифнойСтавки;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначенияСовокупныхТарифныхСтавокСотрудников(НачисленияСотрудников, ПоказателиСотрудников)  
	
	ИсходныеДанные = ЗарплатаКадрыРасширенный.ИсходныеДанныеРасчетаСовокупныхТарифныхСтавок();
	
	РассчитываемыеСотрудники = Новый Соответствие;
	
	НомерСтроки = 1;
	
	ВремяРегистрацииСотрудников = ВремяРегистрацииСотрудников();
	
	Для Каждого СтрокаНачисления Из НачисленияСотрудников Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.ДатаСобытия = ВремяРегистрацииСотрудников[СтрокаНачисления.Сотрудник];
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник;
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		НоваяСтрока.РазмерФОТ = СтрокаНачисления.Размер;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
		РассчитываемыеСотрудники.Вставить(СтрокаНачисления.Сотрудник, Истина);
		
	КонецЦикла;
	
	ТаблицаПоказателей = ЗарплатаКадрыРасширенный.ПоказателиРасчетаСовокупныхТарифныхСтавок();
	Для каждого СтрокаПоказателя Из ПоказателиСотрудников Цикл
		НоваяСтрокаПоказателя = ТаблицаПоказателей.Добавить();
		НоваяСтрокаПоказателя.Период = ВремяРегистрацииСотрудников[СтрокаНачисления.Сотрудник];
		НоваяСтрокаПоказателя.Сотрудник = СтрокаПоказателя.Сотрудник;
		НоваяСтрокаПоказателя.Показатель = СтрокаПоказателя.Значение;
		НоваяСтрокаПоказателя.Значение = СтрокаПоказателя.Значение;
	КонецЦикла;
	
	ЗначенияСовокупныхТарифныхСтавок = ЗарплатаКадрыРасширенный.ЗначенияСовокупныхТарифныхСтавок(ИсходныеДанные, ВремяРегистрации, ТаблицаПоказателей);
	
	Возврат ЗначенияСовокупныхТарифныхСтавок.Выгрузить();
	
КонецФункции
	
#КонецОбласти

#Область ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента

&НаСервере
Функция ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников = Неопределено)
	
	НачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудников(ФильтрСотрудников);

	ПрименитьИзмененияВДокументеКПлановымНачислениямСотрудников(НачисленияПоказателиСотрудников, ФильтрСотрудников);
	
	Возврат НачисленияПоказателиСотрудников;
	
КонецФункции	   	

&НаСервере
Функция ПлановыеНачисленияПоказателиСотрудников(ФильтрСотрудников = Неопределено)
			
	ПараметрыПолучения = ПараметрыПолученияНачисленийПоказателейСотрудников();
	Если Не ФильтрСотрудников = Неопределено Тогда
		ПараметрыПолучения.Вставить("ИспользоватьФильтрСотрудников", Истина);
		ПараметрыПолучения.Вставить("ФильтрСотрудников", ФильтрСотрудников);
	КонецЕсли;
                    	
	НачисленияПоказателиСотрудников = Документы.ИзменениеПлановыхНачислений.НачисленияПоказателиСотрудников(ПараметрыПолучения);
	
	Возврат НачисленияПоказателиСотрудников;
	
КонецФункции	   	

&НаСервере
Функция НачисленияПоказателиСотрудникаПриведенныеДляФормыРедактирования(ПлановыеНачисленияПоказателиСотрудника, ФОТПлановыхНачисленийСотрудника)
	
	МассивНачислений = Новый Массив;
	МассивПоказателей = Новый Массив;
	
	ИдентификаторСтрокиВидаРасчета = 1;
	
	ПостоянныеПоказателиНачислений = Новый Соответствие;
	
	// Добавление всех начислений сотрудника.
	Для Каждого СтрокаНачислений Из ПлановыеНачисленияПоказателиСотрудника.НачисленияСотрудников Цикл
		
		СтруктураНачисления = Новый Структура("Начисление,ДокументОснование,ИдентификаторСтрокиВидаРасчета,Размер,Действие");
		ЗаполнитьЗначенияСвойств(СтруктураНачисления, СтрокаНачислений);
		СтруктураНачисления.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		
		Отбор = Новый Структура("Начисление, ДокументОснование", СтрокаНачислений.Начисление, СтрокаНачислений.ДокументОснование);
		НайденныеНачисления = ФОТПлановыхНачисленийСотрудника.Начисления.НайтиСтроки(Отбор);
		Если НайденныеНачисления.Количество() > 0 Тогда
			СтруктураНачисления.Размер = НайденныеНачисления[0].Размер; 
		КонецЕсли;
		МассивНачислений.Добавить(СтруктураНачисления);
		
		// Добавление показателей начислений.
		
		ПостоянныеПоказателиНачисления = ПостоянныеПоказателиНачислений.Получить(СтрокаНачислений.Начисление); 
		Если ПостоянныеПоказателиНачисления = Неопределено Тогда
			ПостоянныеПоказателиНачисления = ПостоянныеПоказателиНачисления(СтрокаНачислений.Начисление);
			ПостоянныеПоказателиНачислений.Вставить(СтрокаНачислений.Начисление, ПостоянныеПоказателиНачисления);	
		КонецЕсли;
		
		Для каждого ПостоянныйПоказатель Из ПостоянныеПоказателиНачисления Цикл
			
			СтрокиПоказателей = ПлановыеНачисленияПоказателиСотрудника.ПоказателиСотрудников.НайтиСтроки(Новый Структура("Показатель,ДокументОснование", ПостоянныйПоказатель, СтрокаНачислений.ДокументОснование));
			Если СтрокиПоказателей.Количество() = 0 Тогда
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				Продолжить;
			КонецЕсли;
			
			СтруктураПоказателя = Новый Структура("Показатель,ДокументОснование,ИдентификаторСтрокиВидаРасчета,Значение");
			СтруктураПоказателя.Показатель = СтрокиПоказателей[0].Показатель; 			
			СтруктураПоказателя.ДокументОснование = СтрокиПоказателей[0].ДокументОснование;
			СтруктураПоказателя.Значение = СтрокиПоказателей[0].Значение;
			СтруктураПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			МассивПоказателей.Добавить(СтруктураПоказателя);
			
		КонецЦикла;	  
		
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
		
	КонецЦикла;
	
	Возврат Новый Структура("Начисления,Показатели", МассивНачислений, МассивПоказателей);
	
КонецФункции

&НаСервере
Функция ПараметрыПолученияНачисленийПоказателейСотрудников()
	
	ПараметрыПолучения = Документы.ИзменениеПлановыхНачислений.ПараметрыПолученияНачисленийПоказателейСотрудников();
	ПараметрыПолучения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПолучения.Вставить("Организация", Объект.Организация);
	ПараметрыПолучения.Вставить("ДатаИзменения", Объект.ДатаПрекращения);
	ПараметрыПолучения.Вставить("ДатаОкончания", Объект.ДатаПрекращения);
		
	Возврат ПараметрыПолучения;	
	
КонецФункции

&НаСервере
Процедура ПрименитьИзмененияВДокументеКПлановымНачислениямСотрудников(НачисленияПоказателиСотрудников, ФильтрСотрудников = Неопределено)
	
	НачисленияПоказателиСотрудников.НачисленияСотрудников.Индексы.Добавить("Сотрудник, Начисление, ДокументОснование");
		
	Отбор = Новый Структура("Сотрудник, Начисление, ДокументОснование");
	Для каждого Строка Из Объект.Сотрудники Цикл
		Если ФильтрСотрудников <> Неопределено 
			И ФильтрСотрудников.Найти(Строка.Сотрудник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Отбор.Сотрудник = Строка.Сотрудник;
		Отбор.ДокументОснование = Объект.ДокументОснование;
		Отбор.Начисление = Объект.Начисление;
		СтрокиНачисления = НачисленияПоказателиСотрудников.НачисленияСотрудников.НайтиСтроки(Отбор);
		Если СтрокиНачисления.Количество() > 0 Тогда
			СтрокиНачисления[0].Размер = 0; 
			СтрокиНачисления[0].Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить; 
		КонецЕсли;
	КонецЦикла;	
		
КонецПроцедуры

#КонецОбласти

#Область ФормаРедактированияСоставаНачисленийИУдержаний

&НаКлиенте
Процедура ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ТекущиеДанные, ТекущаяСтрока)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		
		ПараметрыРедактирования = ПараметрыРедактированияСоставаНачисленийИУдержаний(ТекущаяСтрока);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ПараметрыРедактирования, УникальныйИдентификатор));
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", Истина);
		
		ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРедактированияСоставаНачисленийИУдержаний(ТекущаяСтрока)
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ТекущаяСтрока);
	Сотрудник = СтрокаСотрудника.Сотрудник;
	
	ПараметрыРедактирования = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыРедактированияСоставаНачисленийИУдержаний();
	
	ПараметрыРедактирования.ВладелецНачисленийИУдержаний = Сотрудник;
	ПараметрыРедактирования.ДатаРедактирования = СтрокаСотрудника.ВремяРегистрации;
	ПараметрыРедактирования.Организация = Объект.Организация;
	ПараметрыРедактирования.РежимРаботы = 3;
	
	ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
	ЭлементФильтра = ФильтрСотрудников.Добавить();
	ЭлементФильтра.Сотрудник = СтрокаСотрудника.Сотрудник;
	ЭлементФильтра.ДатаИзменения = СтрокаСотрудника.ВремяРегистрации;

	ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников);
	ФОТПлановыхНачисленийСИзменениямиДокумента = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
	ФОТПлановыхНачисленийСотрудникаСИзменениямиДокумента = ФОТПлановыхНачисленийСИзменениямиДокумента.Получить(СтрокаСотрудника.Сотрудник);	
	ПриведенныеНачисленияПоказатели = НачисленияПоказателиСотрудникаПриведенныеДляФормыРедактирования(ПлановыеНачисленияПоказателиСотрудников, ФОТПлановыхНачисленийСотрудникаСИзменениямиДокумента);
	
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.Используется = Истина;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.ИзменятьСоставВидовРасчета = Ложь;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.ИзменятьЗначенияПоказателей = Ложь;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.НомерТаблицы = 1;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.ПоказатьФОТ = Истина;
	
	РедактируемыеНачисления = Новый Массив;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.РедактируемыеНачисления = РедактируемыеНачисления;
	
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.Таблица = ПриведенныеНачисленияПоказатели.Начисления;
	ПараметрыРедактирования.Показатели = ПриведенныеНачисленияПоказатели.Показатели;
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Сотрудники");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",	НСтр("ru='организации';uk='організації'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ДокументОснование",	НСтр("ru='основания';uk='підстави'")));
	Возврат Массив
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьФОТИСовокупнуюСтавкуВСтроке(Строка)
	ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
	ЭлементФильтра = ФильтрСотрудников.Добавить();
	ЭлементФильтра.Сотрудник = Строка.Сотрудник;
	ЭлементФильтра.ДатаИзменения = Строка.ВремяРегистрации;
	
	ЗаполнитьФОТИСовокупныеСтавкиСотрудников(ФильтрСотрудников);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФОТИСовокупныеСтавкиСотрудников(ФильтрСотрудников = Неопределено)
	
	Если ФильтрСотрудников = Неопределено Тогда
		
		ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
		
		Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаСотрудника.ДатаПрекращения) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементФильтра = ФильтрСотрудников.Добавить();
			ЭлементФильтра.Сотрудник = СтрокаСотрудника.Сотрудник;
			ЭлементФильтра.ДатаИзменения = СтрокаСотрудника.ВремяРегистрации;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников);
	
	ФОТПлановыхНачисленийСотрудников = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
	ФОТСотрудников = ФОТСотрудниковПоОписаниюНачислений(ФОТПлановыхНачисленийСотрудников);	
	ФОТСотрудниковВРеквизитФормы(ФОТСотрудников);
	
	ЗаполнитьЗначенияСовокупныхТарифныхСтавокСотрудников(ПлановыеНачисленияПоказателиСотрудников.НачисленияСотрудников, ПлановыеНачисленияПоказателиСотрудников.ПоказателиСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованию()	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьПоДокументуОснованию();
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПервоначальныеЗначения()
	ЗначенияДляЗаполнения = Новый Структура;
	ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Организация") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация) Тогда
		Объект.Организация = Параметры.ЗначенияЗаполнения.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПрекращения) Тогда
		ЗначенияДляЗаполнения.Вставить("ДатаСобытия", "Объект.ДатаПрекращения");
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	Для каждого Строка Из Объект.Сотрудники Цикл
		ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, Строка);
	КонецЦикла;	

	ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Объект.Ссылка, Объект.ДатаПрекращения);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрацииСтроки(Ссылка, Строка)
	Строка.ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Ссылка, Строка.ДатаПрекращения);
КонецПроцедуры

&НаСервере
Функция ВремяРегистрацииСотрудников()
	
	ВремяРегистрацииСотрудников = Новый Соответствие;
	
	Для каждого Строка Из Объект.Сотрудники Цикл
		ВремяРегистрацииСотрудников.Вставить(Строка.Сотрудник, Строка.ВремяРегистрации);
	КонецЦикла;	
	
	Возврат ВремяРегистрацииСотрудников;
	
КонецФункции

&НаСервере
Функция ПостоянныеПоказателиНачисления(Начисление) 
	
	ПостоянныеПоказатели = Новый Массив;
	
	ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
	Для Каждого СтрокаПоказателя Из ИнфоОВидеРасчета.Показатели Цикл
		Если ЭтоПостоянныйПоказатель(СтрокаПоказателя) Тогда
			ПостоянныеПоказатели.Добавить(СтрокаПоказателя.Показатель);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ПостоянныеПоказатели;
	
КонецФункции

&НаСервере
Функция ЭтоПостоянныйПоказатель(СтрокаПоказателя) 
	
	ЭтоПостоянныйПоказатель = Истина;
	
	Если СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
		ПоказательИнфо = ЗарплатаКадрыРасширенныйПовтИсп.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
		Если ПоказательИнфо.СпособПримененияЗначений <> Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное
			Или ПоказательИнфо.ЗначениеРассчитываетсяАвтоматически Тогда
			ЭтоПостоянныйПоказатель = Ложь;	
		КонецЕсли;
	Иначе
		ЭтоПостоянныйПоказатель = Ложь;	
	КонецЕсли;

	Возврат ЭтоПостоянныйПоказатель;
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

