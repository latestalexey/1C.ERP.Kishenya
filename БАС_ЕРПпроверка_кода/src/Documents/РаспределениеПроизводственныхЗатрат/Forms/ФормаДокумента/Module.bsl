&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Параметры.Свойство("ЛимитВОбработке") Тогда
		ЛимитВОбработке = Параметры.ЛимитВОбработке;
	КонецЕсли;
	
	Если Параметры.Свойство("УчетныйОстаток") Тогда
		УчетОстаток = Параметры.УчетныйОстаток;
	КонецЕсли;
	Элементы.СтраницаЭтапы.Видимость = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	КРаспределениюМакс = УчетОстаток - Объект.КоличествоФакт;
	КРаспределениюМин = УчетОстаток - ЛимитВОбработке - Объект.КоличествоФакт;
	ВидЦенПлановойСтоимости = Константы.ВидЦеныПлановойСтоимостиМатериаловРабот.Получить();
	ПартионныйУчетВключен = ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет");
	АналитическийУчетПоГруппамПродукции = ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции");
	ВедетсяУчетСебестоимостиПоВидамЗапасов = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов");
	ЗаполнитьСпискиОтбора();
	УстановитьТекстНадписиБазаРаспределения();
	УстановитьТекстИВидимостьОтбораБазыРаспределения();
	УстановитьВидимостьПоОтборуПоГруппамПродукции();
	УстановитьТекстНадписиОтбораПоГруппамПродукции();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		УстановитьДоступностьСерииВШапке();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.СтраницаВыпускиБезРаспоряжения.Заголовок = НСтр("ru='По выпускам';uk='По випусках'");
	КонецЕсли;
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтоги.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПриЧтенииСозданииНаСервере();
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.РаспределениеПроизводственныхЗатрат.Форма.ФормаПодборПоЭтапам" Тогда
		Модифицированность = Истина;
		ЗаполнитьПодбор(ВыбранноеЗначение.АдресВХранилище, ВыбранноеЗначение.ИмяТабличнойЧасти);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ФормаПодбора" Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий);	
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьДубльДокументТекущегоПериода(Отказ, ТекущийОбъект);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ТекущийОбъект.ОтборПоГруппамПродукции.Очистить();
		Если ИспользоватьОтборПоГруппамПродукции Тогда
			Для Каждого Элемент Из ОтборПоГруппамПродукции Цикл 
				НоваяСтрока = ТекущийОбъект.ОтборПоГруппамПродукции.Добавить();
				НоваяСтрока.ГруппаПродукции = Элемент.Значение;
			КонецЦикла;
		КонецЕсли;
		ТекущийОбъект.ОтборПоМатериалам.Очистить();
		Если Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
			ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов
			ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
			Для Каждого Элемент Из ОтборПоМатериалам Цикл 
				НоваяСтрока = ТекущийОбъект.ОтборПоМатериалам.Добавить();
				НоваяСтрока.Материал = Элемент.Значение;
			КонецЦикла;
		КонецЕсли;
		ТекущийОбъект.ОтборПоВидамРабот.Очистить();
		Если Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
			Для Каждого Элемент Из ОтборПоВидамРабот Цикл 
				НоваяСтрока = ТекущийОбъект.ОтборПоВидамРабот.Добавить();
				НоваяСтрока.ВидРабот = Элемент.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИтоги(Ложь);
	ОбновитьНадписьПериод();
	УстановитьВидимостьНастройкиПравилаРаспределения();
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Если ВладелецФормы <> Неопределено И ВладелецФормы.Имя = "Затраты" Тогда
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Если ВладелецФормы <> Неопределено И ВладелецФормы.Имя = "Затраты" Тогда
		
		ПараметрыПередачи = Новый Структура();
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПараметрыПередачи.Вставить("ФактОстаток", Объект.КоличествоФакт);
			ПараметрыПередачи.Вставить("РаспределеноНаПроизводство",
											Объект.ВыпускиБезРаспоряжения.Итог("Количество")
//++ НЕ УТКА
											+ Объект.ЭтапыГрафикаПроизводства.Итог("Количество")
//-- НЕ УТКА
											+ Объект.КоличествоКРаспределениюПоПравилу);
			ПараметрыПередачи.Вставить("СписаноНаРасходы",            Объект.ПрочиеРасходы.Итог("Количество"));
		Иначе
			ПараметрыПередачи.Вставить("ФактОстаток",                      0);
			ПараметрыПередачи.Вставить("РаспределеноНаПроизводство",       0);
			ПараметрыПередачи.Вставить("СписаноНаРасходы",                 0);
		КонецЕсли;
		
		ПараметрыПередачи.Вставить("Ссылка",               Объект.Ссылка);
		
		Оповестить("Запись_РаспределениеПроизводственныхЗатрат", ПараметрыПередачи);
		
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеТабличнойЧастиВыпускБезРаспоряжения(Отказ);
	ПроверитьНаличиеДанныхДляБазыРаспределения(Отказ);
	Если НЕ Отказ И Объект.КоличествоКРаспределениюПоПравилу = 0 И Объект.ЭтапыГрафикаПроизводства.Количество() = 0
		И Объект.ВыпускиБезРаспоряжения.Количество() = 0 И Объект.ПрочиеРасходы.Количество() = 0
		И Объект.КоличествоФакт = 0 Тогда
		ТекстСообщения = НСтр("ru='Не настроено распределение материалов и работ.';uk='Не налаштований розподіл матеріалів і робіт.'");
		КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных,,"Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьНадписьПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоФактПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусУказанияСерийНажатие(Элемент, СтандартнаяОбработка)

	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий();
	
	ЗначениеВозврата = Неопределено;
	
	ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("СтатусУказанияСерийНажатиеЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура СтатусУказанияСерийНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	
	
	ЗначениеВозврата = Результат;
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовЗакладкиФормыПоПравилу

&НаКлиенте
Процедура ПравилоРаспределенияПриИзменении(Элемент)
	
	УстановитьВидимостьНастройкиПравилаРаспределения();
	ЗаполнитьНастройкиПоУмолчаниюИзПравилаРаспределения(Объект.ПравилоРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоРаспределенияОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимостьНастройкиПравилаРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоГруппамПродукцииПриИзменении(Элемент)
	
	УстановитьВидимостьПоОтборуПоГруппамПродукции();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборБазыРаспределенияНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	ДопПараметрОтбора = "";
	Если Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов") Тогда
		ПараметрыОтбора.Вставить("МассивМатериалов", ОтборПоМатериалам.ВыгрузитьЗначения());
		ДопПараметрОтбора = "ОтборПоМатериалам";
	ИначеЕсли Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов") Тогда
		ПараметрыОтбора.Вставить("МассивВидовРабот", ОтборПоВидамРабот.ВыгрузитьЗначения());
		ДопПараметрОтбора = "ОтборПоВидамРабот";
	КонецЕсли;
	РезультатОтбора = Неопределено;

	ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.Форма.ФормаОтбора",
			ПараметрыОтбора,
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("НадписьОтборНажатиеЗавершение", ЭтотОбъект, ДопПараметрОтбора), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборПоГруппамПродукцииНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("МассивГруппПродукции", ОтборПоГруппамПродукции.ВыгрузитьЗначения());
	РезультатОтбора = Неопределено;

	ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.Форма.ФормаОтбора",
			ПараметрыОтбора,
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("НадписьОтборНажатиеЗавершение", ЭтотОбъект, "ОтборПоГруппамПродукции"), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура КоличествоКРаспределениюПоПравилуПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыГрафикаПроизводства

&НаКлиенте
Процедура ЭтапыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
//++ НЕ УТКА
	Отказ = Истина;
	ОткрытьФормуПодборПоЭтапам();
//-- НЕ УТКА
	Возврат; // В КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриИзменении(Элемент)
	
//++ НЕ УТКА
	ОбновитьИтоги();
//-- НЕ УТКА
	Возврат; // В КА обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыпускПродукцииБезРаспоряжения

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПриИзменении(Элемент)
	
	КоличествоМатериаловВТЧВыпускиБезРаспоряжений = ВыпускиБезРаспоряжения.Итог("Количество");
	Модифицированность = Истина;
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОткрытьПодборВыходныхИзделий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораВыходныхИзделий(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные;
	
	Если Поле.Имя = "ВыпускиБезРаспоряженияДокументВыпуска" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ДокументВыпуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные;
	
	Если Не РазвернутьВыпускиБезРаспоряжения Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия, Спецификация, СтатьяКалькуляции");
	Иначе
		СтруктураОтбора = Новый Структура("ДокументВыпуска, КодСтроки");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	НайденныеСтроки = Объект.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.ВыпускиБезРаспоряжения.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СохранитьДанныеСтроки(Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
	ОбновитьИтоги();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПослеУдаления(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияСтатьяКалькуляцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные;
	
	Если РазвернутьВыпускиБезРаспоряжения Тогда
		ОбновитьТаблицуОбъекта("ВыпускиБезРаспоряжения", ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		УстановитьСтатьюКалькуляцииПоСтроке(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные;
	
	Если РазвернутьВыпускиБезРаспоряжения Тогда
		ОбновитьТаблицуОбъекта("ВыпускиБезРаспоряжения", ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		РаспределитьКоличествоМатериалов(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыПриИзменении(Элемент)
	ОбновитьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтатьяРасходовПриИзменении(Элемент)
	
	ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ЗаполнитьСтатьиКалькуляции(Команда)
	
//++ НЕ УТКА
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЭтапы Тогда
		ЗаполнитьСтатьиКалькуляцииВТабличнойЧасти(Объект.ЭтапыГрафикаПроизводства, 
																Элементы.ЭтапыГрафикаПроизводства.ВыделенныеСтроки);
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыпускиБезРаспоряжения Тогда
//-- НЕ УТКА
		ЗаполнитьСтатьиКалькуляцииВТабличнойЧасти(ВыпускиБезРаспоряжения, 
																Элементы.ВыпускиБезРаспоряжения.ВыделенныеСтроки);
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УказатьСерииВШапке(Команда)

	ОткрытьПодборСерий();

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьПоДокументамВыпуска(Команда)
	
	РазвернутьВыпускиБезРаспоряжения = Не РазвернутьВыпускиБезРаспоряжения;
	Элементы.ВыпускиБезРаспоряженияКнопкаРазвернутьПоДокументамВыпуска.Пометка = РазвернутьВыпускиБезРаспоряжения;
	СвернутьРазвернутьТЧ("ВыпускиБезРаспоряжения", РазвернутьВыпускиБезРаспоряжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНастройкиВПравило(Команда)
	
	ПеренестиНастройкиВПравилоСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеДляБазыРаспределения(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.ВидимостьКомандВариантовОтчетов = Ложь;
	ПараметрыФормы.Отбор = Новый Структура;
	
	ПараметрыФормы.Отбор.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Отбор.Вставить("Подразделение", Объект.Подразделение);
	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	ПараметрыФормы.Отбор.Вставить("НачалоПериода", (НачалоМесяца(ДатаДокумента)));
	ПараметрыФормы.Отбор.Вставить("ОкончаниеПериода", (КонецМесяца(ДатаДокумента)));
	ПараметрыФормы.Отбор.Вставить("ГруппыПродукции", ОтборПоГруппамПродукции.ВыгрузитьЗначения());
	ПараметрыФормы.Отбор.Вставить("ПоВсемГруппамПродукции", ОтборПоГруппамПродукции.Количество() = 0
																			ИЛИ НЕ ИспользоватьОтборПоГруппамПродукции);
	ПараметрыФормы.Отбор.Вставить("ВидыРабот", ОтборПоВидамРабот.ВыгрузитьЗначения());
	ПоВсемВидамРабот = ОтборПоВидамРабот.Количество() = 0
		ИЛИ Объект.БазаРаспределения <> ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов");
	ПараметрыФормы.Отбор.Вставить("ПоВсемВидамРабот", ПоВсемВидамРабот);
	ПараметрыФормы.Отбор.Вставить("Материалы", ОтборПоМатериалам.ВыгрузитьЗначения());
	ПоВсемМатериалам = ОтборПоМатериалам.Количество() = 0
		ИЛИ НЕ (Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов")
				ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов")
				ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов"));
	ПараметрыФормы.Отбор.Вставить("ПоВсемМатериалам", ПоВсемМатериалам);
	Если Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.НормативРасходаМатериала") Тогда
		ПараметрыФормы.Отбор.Вставить("Номенклатура", Объект.Номенклатура);
		ПараметрыФормы.Отбор.Вставить("Характеристика", Объект.Характеристика);
	КонецЕсли;
	ПараметрыФормы.Отбор.Вставить("Назначение", Объект.Назначение);
	ПараметрыФормы.Отбор.Вставить("ПоВсемНазначениям", НЕ ЗначениеЗаполнено(Объект.Назначение));
	ПараметрыФормы.Отбор.Вставить("ВидПлановыхЦен", ВидЦенПлановойСтоимости);
	ПараметрыФормы.Отбор.Вставить("БазаРаспределения", Объект.БазаРаспределения);
	ПараметрыФормы.Отбор.Вставить("ПартионныйУчетВключен", ПартионныйУчетВключен);
	ПараметрыФормы.Отбор.Вставить("АналитическийУчетПоГруппамПродукции", АналитическийУчетПоГруппамПродукции);
	ПараметрыФормы.Отбор.Вставить("НеВедетсяУчетСебестоимостиПоВидамЗапасов", НЕ ВедетсяУчетСебестоимостиПоВидамЗапасов);
	ПараметрыФормы.Отбор.Вставить("ФормироватьВыпускРаботСписанныхНаЗатраты", Ложь);
		
	Если Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов") Тогда
		КлючВарианта = "ПоУказаннымМатериалам";
	ИначеЕсли Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоПродукции")
		ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемПродукции")
		ИЛИ Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесПродукции") Тогда
		КлючВарианта = "ПоПродукции";
	ИначеЕсли Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.НормативРасходаМатериала") Тогда
		КлючВарианта = "ПоНормативам";
	ИначеЕсли Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов") Тогда
		КлючВарианта = "ПоУказаннымТрудозатратам";
	ИначеЕсли Объект.БазаРаспределения = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции") Тогда
		КлючВарианта = "ПоПлановойСтоимости";
	Иначе
		Возврат;
	КонецЕсли;
	ПараметрыФормы.КлючВарианта = КлючВарианта;
	ПараметрыФормы.Отбор.Вставить("КлючВарианта", КлючВарианта);
		
	ОткрытьФорму("Отчет.ДанныеДляБазыРаспределенияРасходов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	РеквизитыПроверкиАналитик = Новый Массив;
	РеквизитыПроверкиАналитик.Добавить("СтатьяРасходовПоРасхождениям, АналитикаРасходовПоРасхождениям");
	РеквизитыПроверкиАналитик.Добавить(Новый Структура("ПрочиеРасходы"));
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, РеквизитыПроверкиАналитик);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УчетОстаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияДокументВыпуска.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазвернутьВыпускиБезРаспоряжения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияПредставлениеДокументовВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазвернутьВыпускиБезРаспоряжения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияПредставлениеДокументовВыпуска.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияДокументВыпуска.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияКодСтроки.Имя);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияСпецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыпускиБезРаспоряжения.Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<без спецификации>';uk='<без специфікації>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПравилоРаспределения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КоличествоКРаспределениюПоПравилу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьяКалькуляции.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КоличествоКРаспределениюПоПравилу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("ПрочиеРасходы"));
		
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура ОбновитьИтоги(ОбновитьКоличествоРаспределено = Истина)
	
	КРаспределениюМакс = УчетОстаток - Объект.КоличествоФакт;
	КРаспределениюМин = УчетОстаток - ЛимитВОбработке - Объект.КоличествоФакт;

	Если ЛимитВОбработке = 0 Тогда
		Состояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Учетный остаток %1 %2. Лимит в обработке не установлен. К распределению %3 %4.';uk='Обліковий залишок %1 %2. Ліміт в обробці не встановлено. До розподілу %3 %4.'"),
				УчетОстаток,
				ЕдиницаИзмерения,
				КРаспределениюМакс,
				ЕдиницаИзмерения);
	Иначе
		Состояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Учетный остаток %1 %2. Лимит в обработке %3 %4. К распределению от %5 до %6 %7.';uk='Обліковий залишок %1 %2. Ліміт в обробці %3 %4. До розподілу від %5 від %6 %7.'"),
				УчетОстаток,
				ЕдиницаИзмерения,
				ЛимитВОбработке,
				ЕдиницаИзмерения,
				КРаспределениюМин,
				КРаспределениюМакс,
				ЕдиницаИзмерения);
	КонецЕсли;
	
//++ НЕ УТКА
	ИтогРаспределеноНаЭтапы = Объект.ЭтапыГрафикаПроизводства.Итог("Количество");
//-- НЕ УТКА
	ИтогРаспределеноНаВыпускиБезРаспоряжений = ВыпускиБезРаспоряжения.Итог("Количество");
	ИтогСписаноНаРасходы = Объект.ПрочиеРасходы.Итог("Количество");
	
	Если ОбновитьКоличествоРаспределено Тогда
		
		Количество = Объект.КоличествоКРаспределениюПоПравилу
//++ НЕ УТКА
						+ ИтогРаспределеноНаЭтапы
//-- НЕ УТКА
						+ ИтогРаспределеноНаВыпускиБезРаспоряжений 
						+ ИтогСписаноНаРасходы;
						
		Объект.Количество = ?(Количество < 0, -Количество, Количество);
		
		Если НоменклатураКлиент.НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
			ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения);
			НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПериод()

	НадписьПериод = ПредставлениеПериода(НачалоМесяца(Объект.Дата), КонецМесяца(Объект.Дата), "ДЛФ=D");
	
КонецПроцедуры

&НаСервере
Процедура ПрочиеРасходыСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	ТекСтрока = Объект.ПрочиеРасходы.НайтиПоИдентификатору(Элементы.ПрочиеРасходы.ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, ТекСтрока.СтатьяРасходов, ТекСтрока.АналитикаРасходов);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

&НаСервере
Процедура ЗаполнитьПодбор(АдресВХранилище, ИмяТабличнойЧасти)
	
	РезультатПодбора = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Для Каждого Строка Из РезультатПодбора Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если ЗначениеЗаполнено(СтатьяКалькуляции) Тогда
			НоваяСтрока.СтатьяКалькуляции = СтатьяКалькуляции;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьюКалькуляцииПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
		Возврат
	КонецЕсли;
	
//++ НЕ УТКА
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Этапы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	Этапы.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.РаспределениеПроизводственныхЗатрат.ЭтапыГрафикаПроизводства КАК Этапы
	|ГДЕ
	|	Этапы.Ссылка.Номенклатура = &Номенклатура
	|	И Этапы.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.СтатьяКалькуляции) Тогда
			СтатьяКалькуляции = Выборка.СтатьяКалькуляции
		Иначе
			Если Выборка.Следующий() Тогда
				СтатьяКалькуляции = Выборка.СтатьяКалькуляции;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
//-- НЕ УТКА

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиКалькуляцииВТабличнойЧасти(ТабЧасть, ВыделенныеСтроки)
	
	СтатьяКалькуляции = Неопределено;

	
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора",,ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьСтатьиКалькуляцииВТабличнойЧастиЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ТабЧасть", ВыделенныеСтроки, ТабЧасть)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьиКалькуляцииВТабличнойЧастиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ТабЧасть = ДополнительныеПараметры.ТабЧасть;
	СтатьяКалькуляции = Результат;

	Если НЕ ЗначениеЗаполнено(СтатьяКалькуляции) Тогда
		Возврат;
	Конецесли;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТабЧасть.НайтиПоИдентификатору(Строка);
		Если СтрокаТаблицы <> Неопределено Тогда
			СохранитьДанныеСтроки(СтрокаТаблицы);
			СтрокаТаблицы.СтатьяКалькуляции = СтатьяКалькуляции;
			Если ТабЧасть = ВыпускиБезРаспоряжения Тогда
				УстановитьСтатьюКалькуляцииПоСтроке(СтрокаТаблицы.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий()
	
	ТекущиеПараметрыУказанияСерий = ПараметрыУказанияСерий;
	СерияРедактируетсяВШапке      = Истина;
		
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма,ТекущиеПараметрыУказанияСерий,"")Тогда
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий();
		
		ЗначениеВозврата = Неопределено;
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	ЗначениеВозврата = Результат;
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	НоменклатураКлиент.ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий);

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий()
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, 0, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыСерий()

	Элементы.УказатьСерииВШапке.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.СтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
 	Элементы.Серия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;

	УстановитьДоступностьСерииВШапке();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСерииВШапке()
	
	Элементы.УказатьСерииВШапке.Доступность = Объект.СтатусУказанияСерий <> 0 И Объект.СтатусУказанияСерий <> 14; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(КэшированныеЗначения)

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, 
				ПараметрыУказанияСерий, КэшированныеЗначения);
	УстановитьДоступностьСерииВШапке();

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РаспределениеПроизводственныхЗатрат));
	
	НастроитьЭлементыСерий();
	
	ЗаполнитьСтатьюКалькуляцииПоУмолчанию();
	Элементы.ГруппаОтборПоВидамПродукции.Видимость = ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции");
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Номенклатура, "ЕдиницаИзмерения");
//++ НЕ УТКА
	Элементы.ЭтапыКоличество.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Количество материала,  работ (%1)';uk='Кількість матеріалу, робіт (%1)'"),
				ЕдиницаИзмерения);
//-- НЕ УТКА
	Элементы.ВыпускиБезРаспоряженияКоличество.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Количество материала,  работ (%1)';uk='Кількість матеріалу, робіт (%1)'"),
				ЕдиницаИзмерения);
	Элементы.ПрочиеРасходыКоличество.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Количество материала,  работ (%1)';uk='Кількість матеріалу, робіт (%1)'"),
				ЕдиницаИзмерения);
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.Номенклатура);
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются ИЛИ ЗначениеЗаполнено(Объект.Характеристика);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПрочиеРасходы);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.ПрочиеРасходы);
	КоличествоМатериаловВТЧВыпускиБезРаспоряжений = ВыпускиБезРаспоряжения.Итог("Количество");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре("ВыпускиБезРаспоряжения");
	СвернутьРазвернутьТЧ("ВыпускиБезРаспоряжения", РазвернутьВыпускиБезРаспоряжения);
	
	ЗатратыСервер.НастроитьПараметрыВыбораПравилРаспределения(
		Объект.Подразделение,
		Неопределено,
		Элементы.ПравилоРаспределения,
		Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеМатериаловИРабот);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеДанныхДляБазыРаспределения(Отказ)
	
	Если Объект.КоличествоКРаспределениюПоПравилу = 0 ИЛИ НЕ ЗначениеЗаполнено(Объект.ПравилоРаспределения)
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	Если Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
		ТекстЗапроса = ПартионныйУчет.Текст_Данные_ПоУказаннымМатериаламРасшифровка();
	ИначеЕсли Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоПродукции
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемПродукции
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесПродукции Тогда
		ТекстЗапроса = ПартионныйУчет.Текст_Данные_ПоПродукцииРасшифровка();
	ИначеЕсли Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.НормативРасходаМатериала Тогда
		ТекстЗапроса = ПартионныйУчет.Текст_Данные_ПоНормативамРасшифровка();
	ИначеЕсли Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции Тогда
		ТекстЗапроса = ПартионныйУчет.Текст_Данные_ПоПлановойСтоимостиРасшифровка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Вес", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("СН.ЕдиницаИзмерения", "СН"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Объем", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("СН.ЕдиницаИзмерения", "СН"));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	Запрос.УстановитьПараметр("НачалоПериода", (НачалоМесяца(ДатаДокумента)));
	Запрос.УстановитьПараметр("ОкончаниеПериода", (КонецМесяца(ДатаДокумента)));
	Запрос.УстановитьПараметр("Номенклатура", Объект.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Объект.Характеристика);
	Запрос.УстановитьПараметр("ГруппыПродукции", ОтборПоГруппамПродукции.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ПоВсемГруппамПродукции", ОтборПоГруппамПродукции.Количество() = 0);
	Запрос.УстановитьПараметр("ВидыРабот", ОтборПоВидамРабот.ВыгрузитьЗначения());
	ПоВсемВидамРабот = ОтборПоВидамРабот.Количество() = 0
		ИЛИ Объект.БазаРаспределения <> Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов;
	Запрос.УстановитьПараметр("ПоВсемВидамРабот", ПоВсемВидамРабот);
	Запрос.УстановитьПараметр("Материалы", ОтборПоМатериалам.ВыгрузитьЗначения());
	ПоВсемМатериалам = ОтборПоМатериалам.Количество() = 0
		ИЛИ НЕ (БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
				ИЛИ БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов
				ИЛИ БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов);
	Запрос.УстановитьПараметр("ПоВсемМатериалам", ПоВсемМатериалам);
	Запрос.УстановитьПараметр("Назначение", Объект.Назначение);
	Запрос.УстановитьПараметр("ПоВсемНазначениям", НЕ ЗначениеЗаполнено(Объект.Назначение));
	Запрос.УстановитьПараметр("ВидПлановыхЦен", ВидЦенПлановойСтоимости);
	Запрос.УстановитьПараметр("БазаРаспределения", Объект.БазаРаспределения);
	Запрос.УстановитьПараметр("ПартионныйУчетВключен", ПартионныйУчетВключен);
	Запрос.УстановитьПараметр("АналитическийУчетПоГруппамПродукции", АналитическийУчетПоГруппамПродукции);
	Запрос.УстановитьПараметр("НеВедетсяУчетСебестоимостиПоВидамЗапасов", НЕ ВедетсяУчетСебестоимостиПоВидамЗапасов);
	Запрос.УстановитьПараметр("ФормироватьВыпускРаботСписанныхНаЗатраты", Ложь);
	
	Если Запрос.Выполнить().Пустой() Тогда
			ТекстСообщения = НСтр("ru='Для введенных настроек распределения по правилу ""%Правило%"" отсутствуют данные для построения базы распределения.';uk='Для введених параметрів розподілу за правилом ""%Правило%"" відсутні дані для побудови бази розподілу.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Правило%", Объект.ПравилоРаспределения);
			КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,"","Объект",Отказ);
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА
&НаКлиенте
Процедура ОткрытьФормуПодборПоЭтапам()
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("Подразделение",			Объект.Подразделение);
	ПараметрыПодбора.Вставить("Организация",			Объект.Организация);
	ПараметрыПодбора.Вставить("Назначение",				Объект.Назначение);
	ПараметрыПодбора.Вставить("ПериодНачало",			НачалоМесяца(Объект.Дата));
	ПараметрыПодбора.Вставить("ПериодОкончание",		КонецМесяца(Объект.Дата));
	ПараметрыПодбора.Вставить("Документ",				Объект.Ссылка);
	
	ОткрытьФорму("Документ.РаспределениеПроизводственныхЗатрат.Форма.ФормаПодборПоЭтапам",
						ПараметрыПодбора,
						ЭтаФорма,,,,
						Неопределено,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
//-- НЕ УТКА

&НаСервере
Процедура ПроверитьДубльДокументТекущегоПериода (Отказ, ТекущийДокумент)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РаспределениеПроизводственныхЗатрат КАК ДД
	|ГДЕ
	|	ДД.Проведен
	|	И ДД.Организация = &Организация
	|	И ДД.Подразделение = &Подразделение
	|	И ДД.Номенклатура = &Номенклатура
	|	И ДД.Характеристика = &Характеристика
	|	И ДД.Дата МЕЖДУ &ПериодНачало И &ПериодОкончание
	|	И НЕ ДД.Ссылка = &ТекущийДокумент
	|	И ДД.Серия = &Серия
	|	И ДД.Назначение = &Назначение");
	
	Запрос.УстановитьПараметр("Организация",	ТекущийДокумент.Организация);
	Запрос.УстановитьПараметр("Подразделение",	ТекущийДокумент.Подразделение);
	Запрос.УстановитьПараметр("ПериодНачало",	НачалоМесяца(ТекущийДокумент.Дата));
	Запрос.УстановитьПараметр("ПериодОкончание",КонецМесяца(ТекущийДокумент.Дата));
	Запрос.УстановитьПараметр("ТекущийДокумент",ТекущийДокумент.Ссылка);
	Запрос.УстановитьПараметр("Номенклатура",	ТекущийДокумент.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",	ТекущийДокумент.Характеристика);
	Запрос.УстановитьПараметр("Серия",	ТекущийДокумент.Серия);
	Запрос.УстановитьПараметр("Назначение",	ТекущийДокумент.Назначение);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		ТекстСообщения = НСтр("ru='В указанном месяце уже существует аналогичный документ.
            |Операция не выполнена.'
            |;uk='У зазначеному місяці вже існує аналогічний документ.
            |Операція не виконана.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьТЧ(ИмяТЧ, Развернуть = Ложь)
	
	Если Не Развернуть Тогда
		
		Если ИмяТЧ = "ВыпускиБезРаспоряжения" Тогда
			КолонкиГруппировок = "Номенклатура, Характеристика, Спецификация, СтатьяКалькуляции, Серия, Упаковка";
			КолонкиСуммирования = "КоличествоУпаковок, Количество";
		КонецЕсли;
		
		ТаблицаЗначений = Объект[ИмяТЧ].Выгрузить(,КолонкиГруппировок + ", " + КолонкиСуммирования);
		ТаблицаЗначений.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		ЭтаФорма[ИмяТЧ].Загрузить(ТаблицаЗначений);
		
		СтруктураОтбора = Новый Структура(КолонкиГруппировок);
		ШаблонПредставления = НСтр("ru='Всего документов выпуска: %1';uk='Всього документів випуску: %1'");
		
		Для Каждого Строка Из ЭтаФорма[ИмяТЧ] Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
			Строка.ПредставлениеДокументовВыпуска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставления,
				НайденныеСтроки.Количество());
			
		КонецЦикла;
	Иначе
		
		ЭтаФорма[ИмяТЧ].Загрузить(Объект[ИмяТЧ].Выгрузить());
		
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(ИмяТЧ);
	КоличествоМатериаловВТЧВыпускиБезРаспоряжений = ВыпускиБезРаспоряжения.Итог("Количество");
	УстановитьНомераСтрок(ЭтаФорма, ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(ИмяТЧ)
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Если ИмяТЧ = "ВыпускиБезРаспоряжения" Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ЭтаФорма[ИмяТЧ], ПараметрыЗаполненияРеквизитов);
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект[ИмяТЧ], ПараметрыЗаполненияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНомераСтрок(Форма, ИмяТЧ)
	
	НомерСтроки = 1;
	Для Каждого Строка Из Форма[ИмяТЧ] Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборВыходныхИзделий()
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.ВыпускиБезРаспоряжения Цикл
			МассивКодовСтрок.Добавить(
				Новый Структура("КодСтроки, ДокументВыпуска",
					СтрокаТЧ.КодСтроки,
					СтрокаТЧ.ДокументВыпуска));
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура("Организация, Дата, Подразделение, Назначение");
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, Объект);
	
	ПараметрыПодбора.Вставить("МассивКодовСтрок", МассивКодовСтрок);
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Документ.РаспределениеПроизводственныхЗатрат.Форма.ФормаПодбораВыходныхИзделий", 
					ПараметрыПодбора, Элементы.ВыпускиБезРаспоряжения,,,, 
					Неопределено, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораВыходныхИзделий(ВыбранноеЗначение)
	
	РазвернутьВыпускиБезРаспоряжения = ВыбранноеЗначение.РазвернутьВыпускиБезРаспоряжения;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДокументВыпуска, КодСтроки");
	
	Для Каждого ЭлементДанных Из СтруктураДанных.Товары Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементДанных);
		СтрокиТЧТовары = Объект.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.ВыпускиБезРаспоряжения.Добавить();
			
		ИначеЕсли СтрокиТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧ = СтрокиТЧТовары[0];
			
		Иначе
			
			Для Каждого СтрокаТоваров Из СтрокиТЧТовары Цикл
				Объект.ВыпускиБезРаспоряжения.Удалить(СтрокаТоваров);
			КонецЦикла;
			
			СтрокаТЧ = Объект.ВыпускиБезРаспоряжения.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЭлементДанных);
		Модифицированность = Истина;
		
	КонецЦикла;
	
	СвернутьРазвернутьТЧ("ВыпускиБезРаспоряжения", ЭтаФорма["РазвернутьВыпускиБезРаспоряжения"]);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеСтроки(ДанныеСтроки)
	
	СохраненныеДанные = Новый Структура("Номенклатура, Характеристика, Серия, Спецификация, СтатьяКалькуляции");
	ЗаполнитьЗначенияСвойств(СохраненныеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуОбъекта(ИмяТЧ, Идентификатор)
	
	ТекущиеДанные = ЭтаФорма[ИмяТЧ].НайтиПоИдентификатору(Идентификатор);
	
	Если ЭтаФорма["Развернуть" + ИмяТЧ] Тогда
		СтруктураОтбора = Новый Структура("ДокументВыпуска, КодСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	Иначе
		Если ИмяТЧ = "ВыпускиБезРаспоряжения" Тогда
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия, Спецификация, СтатьяКалькуляции, Упаковка");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СохраненныеДанные);
	КонецЕсли;
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекущиеДанные, ,"ДокументВыпуска,КодСтроки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьКоличествоМатериалов(Идентификатор)
	
	ТекущиеДанные = ВыпускиБезРаспоряжения.НайтиПоИдентификатору(Идентификатор);
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия, Спецификация, СтатьяКалькуляции, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	
	НайденныеСтроки = Объект.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураОтбора);
	
	Коэффициенты = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Коэффициенты.Добавить(Строка.КоличествоУпаковок);
	КонецЦикла;
	
	РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ТекущиеДанные.Количество, Коэффициенты);
	
	Если РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого Коэффициент Из РезультатРаспределения Цикл
		НайденныеСтроки[Индекс].Количество = Коэффициент;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатьюКалькуляцииПоСтроке(Идентификатор)
	
	ТекущиеДанные = ВыпускиБезРаспоряжения.НайтиПоИдентификатору(Идентификатор);
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия, Спецификация");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	СтруктураОтбора.Вставить("СтатьяКалькуляции", СохраненныеДанные.СтатьяКалькуляции);
	
	НайденныеСтроки = Объект.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураОтбора);
	
	Коэффициенты = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.СтатьяКалькуляции = ТекущиеДанные.СтатьяКалькуляции;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТабличнойЧастиВыпускБезРаспоряжения(Отказ)
	
	ПроверяемыеРеквизиты = Новый СписокЗначений;
	ПроверяемыеРеквизиты.Добавить("Количество", НСтр("ru='Количество материалов, работ';uk='Кількість матеріалів, робіт'"));
	ПроверяемыеРеквизиты.Добавить("СтатьяКалькуляции", НСтр("ru='Статья калькуляции';uk='Стаття калькуляції'"));
	
	ШаблонСообщения = НСтр("ru='Не заполнено поле %1 в строке %2 списка ""На выпуски без распоряжений""';uk='Не заповнено поле %1 в рядку %2 списку ""На випуски без розпоряджень""'");
	ШаблонСообщенияБезНомера = НСтр("ru='Не заполнено поле %1 в списке ""На выпуски без распоряжений""';uk='Не заповнено поле %1 у списку ""На випуски без розпоряджень""'");
	
	Для Каждого Строка Из Объект.ВыпускиБезРаспоряжения Цикл
		
		Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
			
			Если Не ЗначениеЗаполнено(Строка[Реквизит.Значение]) Тогда
				
				Если ЭтаФорма.РазвернутьВыпускиБезРаспоряжения Тогда
					СтруктураОтбора = Новый Структура("ДокументВыпуска, КодСтроки");
				Иначе
					СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Спецификация, Серия");
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
				НайденныеСтроки = ЭтаФорма.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураОтбора);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					НомерСтрокиСообщения = НайденныеСтроки[0].НомерСтроки;
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						Реквизит.Представление,
						НомерСтрокиСообщения);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыпускиБезРаспоряжения", НомерСтрокиСообщения, Реквизит.Значение),
						,
						Отказ);
					
				Иначе
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБезНомера,
						Реквизит.Представление);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"ВыпускиБезРаспоряжения",
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНастройкиПравилаРаспределения()
	
	Если ЗначениеЗаполнено(Объект.ПравилоРаспределения) Тогда
		Элементы.ГруппаСтраницыПоПравилу.ТекущаяСтраница = Элементы.СтраницаПравилоВыбрано;
		Элементы.ПеренестиНастройкиВПравило.Видимость = Истина;
	Иначе
		Элементы.ГруппаСтраницыПоПравилу.ТекущаяСтраница = Элементы.СтраницаПравилоНеВыбрано;
		Элементы.ПеренестиНастройкиВПравило.Видимость = Ложь;
	КонецЕсли;
	УстановитьТекстИВидимостьОтбораБазыРаспределения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчаниюИзПравилаРаспределения(Правило)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	М.Материал
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов.ОтборПоМатериалам КАК М
	|ГДЕ
	|	М.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Р.ВидРабот
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов.ОтборПоВидамРабот КАК Р
	|ГДЕ
	|	Р.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	П.ГруппаПродукции
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов.ОтборПоГруппамПродукции КАК П
	|ГДЕ
	|	П.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	С.СтатьяКалькуляции
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов КАК С
	|ГДЕ
	|	С.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	С.БазаРаспределения
	|ИЗ
	|	Справочник.ПравилаРаспределенияРасходов КАК С
	|ГДЕ
	|	С.Ссылка = &Ссылка
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
	
	Запрос.УстановитьПараметр("Ссылка", Правило);
	Результат = Запрос.ВыполнитьПакет();
	ОтборПоМатериалам.ЗагрузитьЗначения(Результат[0].Выгрузить().ВыгрузитьКолонку("Материал"));
	ОтборПоВидамРабот.ЗагрузитьЗначения(Результат[1].Выгрузить().ВыгрузитьКолонку("ВидРабот"));
	ОтборПоГруппамПродукции.ЗагрузитьЗначения(Результат[2].Выгрузить().ВыгрузитьКолонку("ГруппаПродукции"));
	Объект.СтатьяКалькуляции = ?(НЕ Результат[3].Пустой(),
									   Результат[3].Выгрузить()[0].СтатьяКалькуляции,
									   Справочники.СтатьиКалькуляции.ПустаяСсылка());
	ИспользоватьОтборПоГруппамПродукции = (ОтборПоГруппамПродукции.Количество() > 0);
	Объект.БазаРаспределения = ?(НЕ Результат[4].Пустой(),
									   Результат[4].Выгрузить()[0].БазаРаспределения,
									   Перечисления.ТипыБазыРаспределенияРасходов.ПустаяСсылка());
	УстановитьТекстНадписиБазаРаспределения();
	УстановитьТекстИВидимостьОтбораБазыРаспределения();
	УстановитьВидимостьПоОтборуПоГруппамПродукции();
	УстановитьТекстНадписиОтбораПоГруппамПродукции();
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиОтбора()
	
	ОтборПоГруппамПродукции.ЗагрузитьЗначения(Объект.ОтборПоГруппамПродукции.Выгрузить(, "ГруппаПродукции").ВыгрузитьКолонку("ГруппаПродукции"));
	ИспользоватьОтборПоГруппамПродукции = (ОтборПоГруппамПродукции.Количество() > 0);
	ОтборПоВидамРабот.ЗагрузитьЗначения(Объект.ОтборПоВидамРабот.Выгрузить(, "ВидРабот").ВыгрузитьКолонку("ВидРабот"));
	ОтборПоМатериалам.ЗагрузитьЗначения(Объект.ОтборПоМатериалам.Выгрузить(, "Материал").ВыгрузитьКолонку("Материал"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоОтборуПоГруппамПродукции()
	
	Элементы.НадписьОтборПоГруппамПродукции.Видимость = ИспользоватьОтборПоГруппамПродукции;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиОтбораПоГруппамПродукции()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоГруппамПродукции Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru='Указать группы (виды) продукции';uk='Вказати групи (види) продукції'");
	КонецЕсли;
	Элементы.НадписьОтборПоГруппамПродукции.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиБазаРаспределения()
	
	Элементы.НадписьБазаРаспределения.Заголовок = СокрЛП(Объект.БазаРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстИВидимостьОтбораБазыРаспределения()

	Если Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов
		ИЛИ Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
		Элементы.НадписьОтборБазыРаспределения.Видимость = Истина;
		УстановитьТекстНадписиОтбораПоМатериалам();
	ИначеЕсли Объект.БазаРаспределения = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
		Элементы.НадписьОтборБазыРаспределения.Видимость = Истина;
		УстановитьТекстНадписиОтбораПоВидамРабот();
	Иначе
		Элементы.НадписьОтборБазыРаспределения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиОтбораПоМатериалам()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоМатериалам Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru='Указать материалы';uk='Вказати матеріали'");
	КонецЕсли;
	Элементы.НадписьОтборБазыРаспределения.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиОтбораПоВидамРабот()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоВидамРабот Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru='Указать виды работ';uk='Зазначити види робіт'");
	КонецЕсли;
	Элементы.НадписьОтборБазыРаспределения.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатОтбора = Результат;
	Если ТипЗнч(РезультатОтбора) = Тип("Массив") Тогда
		Если ДополнительныеПараметры = "ОтборПоГруппамПродукции" Тогда
			ОтборПоГруппамПродукции.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТекстНадписиОтбораПоГруппамПродукции();
			Модифицированность = Истина;
		ИначеЕсли ДополнительныеПараметры = "ОтборПоМатериалам" Тогда
			ОтборПоМатериалам.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТекстНадписиОтбораПоМатериалам();
			Модифицированность = Истина;
		ИначеЕсли ДополнительныеПараметры = "ОтборПоВидамРабот" Тогда
			ОтборПоВидамРабот.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТекстНадписиОтбораПоВидамРабот();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПеренестиНастройкиВПравилоСервер()
	
	Правило = Объект.ПравилоРаспределения.ПолучитьОбъект();
	Правило.СтатьяКалькуляции = Объект.СтатьяКалькуляции;
	Материалы = Новый ТаблицаЗначений;
	Материалы.Колонки.Добавить("Материал", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВидыРабот = Новый ТаблицаЗначений;
	ВидыРабот.Колонки.Добавить("ВидРабот", Новый ОписаниеТипов("СправочникСсылка.ВидыРаботСотрудников"));
	ГруппыПродукции = Новый ТаблицаЗначений;
	ГруппыПродукции.Колонки.Добавить("ГруппаПродукции", Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры"));
	Для Каждого Элемент Из ОтборПоМатериалам Цикл
		НоваяСтрока = Материалы.Добавить();
		НоваяСтрока.Материал = Элемент.Значение;
	КонецЦикла;
	Для Каждого Элемент Из ОтборПоВидамРабот Цикл
		НоваяСтрока = ВидыРабот.Добавить();
		НоваяСтрока.ВидРабот = Элемент.Значение;
	КонецЦикла;
	Для Каждого Элемент Из ОтборПоГруппамПродукции Цикл
		НоваяСтрока = ГруппыПродукции.Добавить();
		НоваяСтрока.ГруппаПродукции = Элемент.Значение;
	КонецЦикла;
	
	Правило.ОтборПоМатериалам.Загрузить(Материалы);
	Правило.ОтборПоВидамРабот.Загрузить(ВидыРабот);
	Правило.ОтборПоГруппамПродукции.Загрузить(ГруппыПродукции);
	Правило.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
