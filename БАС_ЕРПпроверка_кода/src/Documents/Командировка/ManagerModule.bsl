#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.Командировка - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.Командировка - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеПоВсемУчетам = Ложь;
	МассивРегистров = Новый Массив;
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
		ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(Объект, Отказ, РежимПроведения);
	КонецЕсли;        
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения.Ссылка, СтруктураВидовУчета);
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		// Подготовка к регистрации перерасчетов
		ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТДанныеДокументов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов);
		ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
		Если РеквизитыДляПроведения.ВнутрисменнаяКомандировка Тогда
			УчетРабочегоВремени.ЗарегистрироватьВнутрисменныеОтклонения(Движения, ДанныеОВремени(РеквизитыДляПроведения), РеквизитыДляПроведения.ПериодРегистрации);
		ИначеЕсли НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаВремяКомандировки Тогда  
			РегистрируемыеДанныеОВремени = ДанныеОВремени(РеквизитыДляПроведения);
			УчетРабочегоВремени.ПроверитьРегистрируемыеДанныхОВремени(РеквизитыДляПроведения.Ссылка, РегистрируемыеДанныеОВремени, Отказ, Истина);
			УчетРабочегоВремени.ЗарегистрироватьРабочееВремяСотрудников(Движения, РегистрируемыеДанныеОВремени, РеквизитыДляПроведения.ПериодРегистрации);
		КонецЕсли;
		
	КонецЕсли;
		
	Если РеквизитыДляПроведения.ДокументРассчитан Тогда 
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
				Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
				
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
				
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(
				Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
					
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);	
					
			УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(
				РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения, Истина);
			
			// - Регистрация начислений и удержаний.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						ДанныеДляПроведения.НачисленияПоСотрудникам,
						ДанныеДляПроведения.УдержанияПоСотрудникам,
						ДанныеДляПроведения.НДФЛПоСотрудникам,
						РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			
			// - страховые взносы
			УчетСтраховыхВзносов.СформироватьИсчисленныеВзносыАвансом(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СтраховыеВзносы);

			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				Модуль.ЗарегистрироватьНачисленияДляРасчетаСохраняемогоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияДляРегистрацииДенежногоСодержания);
				Модуль.ЗарегистрироватьКорректировкиДляРасчетаСохраняемогоДенежногоСодержания(ДанныеДляПроведения.КорректировкиДляРегистрацииДенежногоСодержания, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаНачало, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаОкончание);
			КонецЕсли;
			
			Если РеквизитыДляПроведения.ДлительнаяКомандировка Тогда
				СтруктураПлановыхНачислений = Новый Структура;
				СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ДанныеОПлановыхНачислениях);
				СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателейПлановыхНачислений);
				
				РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(РеквизитыДляПроведения.Ссылка, Движения, СтруктураПлановыхНачислений, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда

			// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
		
			// Корректировки данных для среднего заработка.
			ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка = УчетСреднегоЗаработка.ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка();
			ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка.Организация = РеквизитыДляПроведения.Организация;
			ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка.ФизическоеЛицо = РеквизитыДляПроведения.ФизическоеЛицо;
			
			УчетСреднегоЗаработка.ЗаписатьКорректировкиОбщегоСреднегоЗаработка(
				УчетСреднегоЗаработка.КорректировкиОбщегоСреднегоЗаработкаДокумента(РеквизитыДляПроведения.Ссылка), 
				РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаНачало, 
				РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаОкончание, 
				ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка);
				
		КонецЕсли;
			
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
		ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
		ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
		ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
		ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
		
		Если Не РеквизитыДляПроведения.ВнутрисменнаяКомандировка Тогда
			СостоянияСотрудников.ЗарегистрироватьСостояниеСотрудника(
				Движения, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.Сотрудник, Перечисления.СостоянияСотрудника.Командировка, РеквизитыДляПроведения.ДатаНачала, РеквизитыДляПроведения.ДатаОкончания);
				
		КонецЕсли;
			
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
		   КадровыйУчетРасширенный.ОсвободитьСтавкуВременно(Движения, ДанныеДляПроведения.ПериодыОсвобожденияСтавки);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			Модуль.СформироватьДвиженияКадровыхПриказовЗаявокСотрудников(Движения, ДанныеДляПроведения.ДанныеКадровыхПриказовЗаявокСотрудников);
		КонецЕсли;
		
		// Регистрация перерасчетов
		Если ЕстьПерерасчеты Тогда
			ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		КонецЕсли; 
		
		УчетСреднегоЗаработка.УдалитьПричиныПерерасчетов(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.Командировка);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ о направлении сотрудника в командировку
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
	КомандаПечати.Идентификатор = "ПФ_MXL_Командировка";
	КомандаПечати.Представление = НСтр("ru='Приказ о направлении в командировку';uk='Наказ про направлення у відрядження'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьОплатуКомандировок,НеИспользоватьРасчетЗарплатыРасширенная";
	
	// Командировочное удостоверение.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
	КомандаПечати.Идентификатор = "ПФ_MXL_UK_Удостоверение";
	КомандаПечати.Представление = НСтр("ru='Командировочное удостоверение';uk='Посвідчення про відрядження'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьОплатуКомандировок,НеИспользоватьРасчетЗарплатыРасширенная";
	
	// Служебное задание
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
	КомандаПечати.Идентификатор = "ПФ_MXL_СлужебноеЗадание";
	КомандаПечати.Представление = НСтр("ru='Служебное задание';uk='Службове завдання'");
	КомандаПечати.Порядок = 30;
	КомандаПечати.ФункциональныеОпции = "ИспользоватьОплатуКомандировок,НеИспользоватьРасчетЗарплатыРасширенная";
	
	ФункциональныеОпции = "ИспользоватьОплатуКомандировок,НеИспользоватьРасчетЗарплатыРасширенная";
	
	// Расчет среднего заработка
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.Командировка", ФункциональныеОпции);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДобавитьКомандыПечатиСохраняемогоДенежногоСодержания(
			КомандыПечати, ФункциональныеОпции);
	КонецЕсли; 
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);

КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработка",Истина, ПараметрыВывода);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм, 
				"РасчетСреднегоЗаработка", 
				НСтр("ru='Расчет среднего заработка';uk='Розрахунок середнього заробітку'"), 
				ТабличныйДокумент,
				,
				,
				,
				Истина	// ЭтоМногоязычнаяПечатнаяФорма
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстСообщенияНеЗаполненВидРасчета(ВнутрисменнаяКомандировка) Экспорт
	ТекстСообщения = НСтр("ru='Не найдено ни одного начисления для регистрации %1командировок';uk='Не знайдено жодного нарахування для реєстрації %1відряджень'");
		
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ?(ВнутрисменнаяКомандировка, НСтр("ru='внутрисменных ';uk='внутрішньозмінних '"), ""));	
КонецФункции

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета) 

	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет", "Ссылка.ПериодРегистрации");
		РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			ДанныеКадровыхПриказовЗаявокСотрудников = Модуль.ДанныеДляПроведенияКадровыеПриказыЗаявокСотрудников(РеквизитыДляПроведения.Ссылка);
			ДанныеДляПроведения.Вставить("ДанныеКадровыхПриказовЗаявокСотрудников", ДанныеКадровыхПриказовЗаявокСотрудников);
		КонецЕсли;
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДляПроведения.Сотрудник), РеквизитыДляПроведения.ДатаНачала, КонецДня(РеквизитыДляПроведения.ДатаОкончания) + 1);
			
			Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
				ДанныеИсправленногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДляПроведения.ИсправленныйДокумент, "ФизическоеЛицо,Организация,Сотрудник,ДатаНачала,ДатаОкончания");
				КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеИсправленногоДокумента.Сотрудник), 
																					ДанныеИсправленногоДокумента.ДатаНачала, КонецДня(ДанныеИсправленногоДокумента.ДатаОкончания) + 1, Истина);
			КонецЕсли;
		КонецЕсли;
		 			
		Если РеквизитыДляПроведения.ДлительнаяКомандировка Тогда
			
			ДанныеДляПроведения.Вставить("ДанныеОПлановыхНачислениях", ДанныеОПлановыхНачислениях(РеквизитыДляПроведения));
			ДанныеДляПроведения.Вставить("ЗначенияПоказателейПлановыхНачислений", ЗначенияПоказателейПлановыхНачислений(РеквизитыДляПроведения));
			
		КонецЕсли;

		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			НачисленияДляРегистрацииДенежногоСодержания = Модуль.СведенияОНачисленияхДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет");
			ДанныеДляПроведения.Вставить("НачисленияДляРегистрацииДенежногоСодержания", НачисленияДляРегистрацииДенежногоСодержания);
			КорректировкиДляРегистрацииДенежногоСодержания = Модуль.СведенияОКорректировкахДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка);
			ДанныеДляПроведения.Вставить("КорректировкиДляРегистрацииДенежногоСодержания", КорректировкиДляРегистрацииДенежногоСодержания);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;

КонецФункции

Процедура СоздатьВТДанныеДокументов(ДокументСсылка, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Командировка КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаОкончания, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.Командировка КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДанныеОВремени(РеквизитыДляПроведения) Экспорт
	
	ВидВремениНачисления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДляПроведения.ВидРасчета, "ОбозначениеВТабелеУчетаРабочегоВремени");
	
	ДанныеОВремени = УчетРабочегоВремени.ТаблицаДляРегистрацииВремени();
	
	Если РеквизитыДляПроведения.ВнутрисменнаяКомандировка Тогда
		
		СтрокаДанныхОВремени = ДанныеОВремени.Добавить();
		СтрокаДанныхОВремени.Дата = РеквизитыДляПроведения.ДатаКомандировки;
		СтрокаДанныхОВремени.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		СтрокаДанныхОВремени.ВидВремени = ВидВремениНачисления;
		СтрокаДанныхОВремени.ВидВремениВытесняемый = РеквизитыДляПроведения.ВидВремениЗамещаемый;
		СтрокаДанныхОВремени.Часов = РеквизитыДляПроведения.ОплачиватьЧасов;
		
	Иначе 
		
		Выборка = ВыборкаДанныхГрафикаСотрудника(РеквизитыДляПроведения);
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаДанныхОВремени = ДанныеОВремени.Добавить();
			СтрокаДанныхОВремени.Дата = Выборка.Дата;
			СтрокаДанныхОВремени.Сотрудник = Выборка.Сотрудник;
			СтрокаДанныхОВремени.ВидВремени = ВидВремениНачисления;
			СтрокаДанныхОВремени.ВидВремениВытесняемый = РеквизитыДляПроведения.ВидВремениЗамещаемый;
			СтрокаДанныхОВремени.Дней = Выборка.Дней;
			СтрокаДанныхОВремени.Часов = Выборка.Часов;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеОВремени;
	
КонецФункции

Функция ДанныеОПлановыхНачислениях(РеквизитыДляПроведения)
	
	ДанныеОПлановыхНачислениях = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииПлановыхНачислений(Истина);
	
	ПлановаяКомандировка = ДанныеОПлановыхНачислениях.Добавить();
	ПлановаяКомандировка.ДатаСобытия = КонецМесяца(РеквизитыДляПроведения.ДатаНачала) + 1;
	ПлановаяКомандировка.ДействуетДо = КонецДня(РеквизитыДляПроведения.ДатаОкончания) + 1;
	ПлановаяКомандировка.Сотрудник = РеквизитыДляПроведения.Сотрудник;
	ПлановаяКомандировка.Начисление = РеквизитыДляПроведения.ВидРасчета;
	ПлановаяКомандировка.ДокументОснование = РеквизитыДляПроведения.Ссылка;
	ПлановаяКомандировка.Используется = Истина;
	ПлановаяКомандировка.ФизическоеЛицо = РеквизитыДляПроведения.ФизическоеЛицо;
	ПлановаяКомандировка.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(РеквизитыДляПроведения.Организация);
	
	Возврат ДанныеОПлановыхНачислениях;
	
КонецФункции 

Функция ЗначенияПоказателейПлановыхНачислений(РеквизитыДляПроведения)
	
	ЗначенияПоказателейПлановыхНачислений = Новый ТаблицаЗначений;
	ЗначенияПоказателейПлановыхНачислений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗначенияПоказателейПлановыхНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ЗначенияПоказателейПлановыхНачислений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ЗначенияПоказателейПлановыхНачислений.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	ЗначенияПоказателейПлановыхНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	ЗначенияПоказателейПлановыхНачислений.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ЗначенияПоказателейПлановыхНачислений.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ЗначенияПоказателейПлановыхНачислений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	ПоказательСреднийЗаработок = ЗначенияПоказателейПлановыхНачислений.Добавить();
	Если РеквизитыДляПроведения.РасчетДенежногоСодержания Тогда
		ПоказательСреднийЗаработок.Значение = РеквизитыДляПроведения.СохраняемоеДенежноеСодержание;
		ПоказательСреднийЗаработок.Показатель = Справочники.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание;
	Иначе	
		Если РеквизитыДляПроведения.ОплатитьПоДаннымФОТ Тогда
			ПоказательСреднийЗаработок.Значение = РеквизитыДляПроведения.СтоимостьПоДаннымФОТ;
		Иначе	
			ПоказательСреднийЗаработок.Значение = РеквизитыДляПроведения.СреднийЗаработок;
		КонецЕсли;
		ПоказательСреднийЗаработок.Показатель = Справочники.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий;
	КонецЕсли;
	
	ЗначенияПоказателейПлановыхНачислений.ЗаполнитьЗначения(РеквизитыДляПроведения.Организация, "Организация");
	ЗначенияПоказателейПлановыхНачислений.ЗаполнитьЗначения(РеквизитыДляПроведения.Сотрудник, "Сотрудник");
	ЗначенияПоказателейПлановыхНачислений.ЗаполнитьЗначения(КонецМесяца(РеквизитыДляПроведения.ДатаНачала) + 1, "ДатаСобытия");
	ЗначенияПоказателейПлановыхНачислений.ЗаполнитьЗначения(КонецДня(РеквизитыДляПроведения.ДатаОкончания) + 1, "ДействуетДо");
	ЗначенияПоказателейПлановыхНачислений.ЗаполнитьЗначения(РеквизитыДляПроведения.Ссылка, "ДокументОснование");
	ЗначенияПоказателейПлановыхНачислений.ЗаполнитьЗначения(РеквизитыДляПроведения.ФизическоеЛицо, "ФизическоеЛицо");
	
	Возврат ЗначенияПоказателейПлановыхНачислений;
	
КонецФункции 

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Командировка.Организация,
	|	Командировка.ПериодРегистрации,
	|	Командировка.Ссылка,
	|	Командировка.ПорядокВыплаты,
	|	Командировка.ПланируемаяДатаВыплаты,
	|	Командировка.ДокументРассчитан,
	|	Командировка.Дата,
	|	Командировка.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Командировка.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Командировка.ДлительнаяКомандировка,
	|	Командировка.ФизическоеЛицо,
	|	Командировка.ВнутрисменнаяКомандировка,
	|	Командировка.Сотрудник,
	|	Командировка.ОсвобождатьСтавку,
	|	Командировка.ДатаНачала,
	|	Командировка.ДатаОкончания,
	|	Командировка.ИсправленныйДокумент,
	|	Командировка.ДатаКомандировки,
	|	Командировка.ВидРасчета,
	|	Командировка.ВидВремениЗамещаемый,
	|	Командировка.ОплачиватьЧасов,
	|	Командировка.СохраняемоеДенежноеСодержание,
	|   ВЫБОР КОГДА Командировка.ОплатитьПоДаннымФОТ
	|		ТОГДА
	|       	Командировка.СтоимостьПоДаннымФОТ	
	|       ИНАЧЕ
	|	Командировка.СреднийЗаработок
	|   КОНЕЦ КАК СреднийЗаработок
	|ИЗ
	|	Документ.Командировка КАК Командировка
	|ГДЕ
	|	Командировка.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомандировкаРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	КомандировкаРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	КомандировкаРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	КомандировкаРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	КомандировкаРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	КомандировкаРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	КомандировкаРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.Командировка.РаспределениеПоТерриториямУсловиямТруда КАК КомандировкаРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	КомандировкаРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Организация, ПериодРегистрации, Ссылка, ПорядокВыплаты, ПланируемаяДатаВыплаты, ДокументРассчитан, Дата, 
		| ПериодРасчетаСреднегоЗаработкаНачало, ПериодРасчетаСреднегоЗаработкаОкончание, ДлительнаяКомандировка, ФизическоеЛицо, ВнутрисменнаяКомандировка, Сотрудник, РаспределениеПоТерриториямУсловиямТруда,
		| ОсвобождатьСтавку, ДатаНачала, ДатаОкончания, ИсправленныйДОкумент, ДатаКомандировки, ВидРасчета, ВидВремениЗамещаемый, ОплачиватьЧасов, СохраняемоеДенежноеСодержание, СреднийЗаработок,
		| ОплатитьПоДаннымФОТ, СтоимостьПоДаннымФОТ");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Функция ВыборкаДанныхГрафикаСотрудника(РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	Запрос.УстановитьПараметр("ВыходныеДни", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Командировка.ДатаНачала,
	               |	Командировка.ДатаОкончания,
	               |	Командировка.ДатаОкончания КАК Период,
	               |	Командировка.Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудники
	               |ИЗ
	               |	Документ.Командировка КАК Командировка
	               |ГДЕ
	               |	Командировка.Ссылка = &Ссылка";
				   
	Запрос.Выполнить();		
					   			   
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
		Запрос.МенеджерВременныхТаблиц, 
		НачалоМесяца(РеквизитыДляПроведения.ДатаНачала), 
		КонецМесяца(РеквизитыДляПроведения.ДатаОкончания),
		"МЕСЯЦ",
		"МЕСЯЦ",
		"ВТМесяцы");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Сотрудники.ДатаНачала > Месяцы.Месяц
	               |			ТОГДА Сотрудники.ДатаНачала
	               |		ИНАЧЕ Месяцы.Месяц
	               |	КОНЕЦ КАК ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА Сотрудники.ДатаОкончания < КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ)
	               |			ТОГДА Сотрудники.ДатаОкончания
	               |		ИНАЧЕ КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ)
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	Сотрудники.Период КАК ДатаАктуальности,
	               |	Сотрудники.Сотрудник КАК Сотрудник,
	               |	Месяцы.Месяц
	               |ПОМЕСТИТЬ ВТСотрудникиМесяцы
	               |ИЗ
	               |	ВТСотрудники КАК Сотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТМесяцы КАК Месяцы
	               |		ПО (ИСТИНА)";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанныхУчетаВремени = УчетРабочегоВремени.ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыПолученияДанныхУчетаВремени.ИмяВТСотрудники = "ВТСотрудникиМесяцы";
	
	УчетРабочегоВремени.СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанныхУчетаВремени);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановоеВремя.Сотрудник КАК Сотрудник,
	               |	ПлановоеВремя.Дата КАК Дата,
	               |	СУММА(ПлановоеВремя.ДниПлан) КАК Дней,
	               |	СУММА(ПлановоеВремя.ЧасыПлан) КАК Часов
	               |ИЗ
	               |	ВТПлановоеВремя КАК ПлановоеВремя
	               |ГДЕ
	               |	ПлановоеВремя.ВидУчетаВремени <> &ВыходныеДни
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПлановоеВремя.Сотрудник,
	               |	ПлановоеВремя.Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
				   
	Возврат Запрос.Выполнить().Выбрать();			   
	
КонецФункции

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Организация,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Номер КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА Документ.ВнутрисменнаяКомандировка
	|			ТОГДА Документ.ДатаКомандировки
	|		ИНАЧЕ Документ.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаОтсутствия,
	|	ВЫБОР
	|		КОГДА Документ.ВнутрисменнаяКомандировка
	|			ТОГДА Документ.ДатаКомандировки
	|		ИНАЧЕ Документ.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияОтсутствия,
	|	Документ.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоРасчетногоПериода,
	|	Документ.ПериодРасчетаСреднегоЗаработкаОкончание КАК ОкончаниеРасчетногоПериода,
	|	Документ.ВнутрисменнаяКомандировка,
	|	Документ.ВидУчетаВремениДляСредней,
	|	Документ.ОплатитьПоДаннымФОТ,
	|	Документ.НормаВДнях,
	|	Документ.НормаВЧасах,
	|	ВТКадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени КАК УчетВремениВЧасах,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации
	|ИЗ
	|	Документ.Командировка КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО Документ.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И Документ.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Документ.Организация = Организации.Ссылка
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	ДанныеДокументов = Новый Массив;
	
	Если НЕ Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке("Командировка", МассивСсылок);
		ТаблицаРасшифровкаСоставаФОТ = УчетСреднегоЗаработка.ТаблицыДанныхРасшифровкаСоставаФОТ("Командировка", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			
			ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка(); 
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
			
			ДанныеОНачислениях 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОНачислениях"], 		"Ссылка", Выборка.Ссылка);
			ДанныеОВремени 		= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОВремени"], 			"Ссылка", Выборка.Ссылка);
			ДанныеОбИндексации 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОбИндексации"], 		"Ссылка", Выборка.Ссылка);
			ДанныеФОТ			= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицаРасшифровкаСоставаФОТ, 						"Ссылка", Выборка.Ссылка);
			
			ИспользоватьСреднеЧасовойЗаработок = Выборка.ВнутрисменнаяКомандировка Или Выборка.УчетВремениВЧасах;
			
			ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
			ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
			ДополнительныеПараметры.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
			ДополнительныеПараметры.НачалоПериода = Выборка.НачалоРасчетногоПериода;
			ДополнительныеПараметры.ОкончаниеПериода = Выборка.ОкончаниеРасчетногоПериода;
			ДополнительныеПараметры.ПоЧасам = ИспользоватьСреднеЧасовойЗаработок;
			ДополнительныеПараметры.ВидУчетаВремениДляСредней = Выборка.ВидУчетаВремениДляСредней;
			ДополнительныеПараметры.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010;
			
			Если Выборка.ОплатитьПоДаннымФОТ Тогда
				ДанныеДокумента.ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработкаПоФОТ(ДанныеФОТ, ДанныеОВремени, ДополнительныеПараметры);;
			Иначе
				ДанныеДокумента.ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
			КонецЕсли;
			
			ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок = ИспользоватьСреднеЧасовойЗаработок;
			ДанныеДокумента.ПараметрыРасчета.НачалоРасчетногоПериода = Выборка.НачалоРасчетногоПериода;
			ДанныеДокумента.ПараметрыРасчета.ОкончаниеРасчетногоПериода = Выборка.ОкончаниеРасчетногоПериода;
			
			ДанныеДокументов.Добавить(ДанныеДокумента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.Командировка КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости,СуммированныйУчетРабочегоВремени");
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудники";
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти


#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Ложь);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	"Командировка");
КонецПроцедуры 

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов);	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт 
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);	
КонецФункции

#КонецОбласти


Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

#КонецОбласти

#КонецЕсли