&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.ВариантРаспределения.СписокВыбора.Очистить();
		Элементы.ВариантРаспределения.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоПодразделениямИЭтапамПоПравилам,
																		НСтр("ru='По подразделениям и выпускам по правилам';uk='По підрозділах і випусках за правилами'"));
		Элементы.ВариантРаспределения.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоПодразделениямВручнуюПоЭтапамПоПравилу,
																		НСтр("ru='По подразделениям вручную, по выпускам по правилам';uk='По підрозділах вручну, по випусках за правилами'"));
		Элементы.ВариантРаспределения.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении,
																		НСтр("ru='По выпускам по правилу (в данном подразделении)';uk='По випусках за правилом (в даному підрозділі)'"));
		Элементы.ВариантРаспределения.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям,
																		НСтр("ru='По выпускам по правилу (по всем подразделениям)';uk='По випусках за правилом (по всіх підрозділах)'"));
		Элементы.ВариантРаспределения.СписокВыбора.Добавить(Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям,
																		НСтр("ru='По выпускам вручную (по всем подразделениям)';uk='По випусках вручну (по всіх підрозділах)'"));
		Элементы.ГруппаПоБазеПоЭтапам.Заголовок = НСтр("ru='По выпускам по правилу';uk='По випусках за правилом'");
		Элементы.ГруппаПоБазеВручнуюПоЭтапам.Заголовок = НСтр("ru='По выпускам по правилу';uk='По випусках за правилом'");
		Элементы.ГруппаПоЭтапамПоБазе.Заголовок = НСтр("ru='По выпускам по правилу';uk='По випусках за правилом'");
		Элементы.ГруппаВручную.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаВручную.Видимость = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Элементы.ГруппаНаВыпускиБезРаспоряжений.Заголовок = НСтр("ru='По выпускам вручную';uk='По випусках вручну'");
	КонецЕсли;
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДокументБылПерезаписан = Истина;
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьДубльДокументТекущегоПериода(Отказ, ТекущийОбъект);
	КонецЕсли;

	ТекущийОбъект.ОтборПоГруппамПродукции.Очистить();
	Если ИспользоватьОтборПоГруппамПродукции 
		   И ТекущийОбъект.ВариантРаспределения <> Перечисления.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям Тогда
		Для Каждого Элемент Из ОтборПоГруппамПродукции Цикл 
			НоваяСтрока = ТекущийОбъект.ОтборПоГруппамПродукции.Добавить();
			НоваяСтрока.ГруппаПродукции = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	ТекущийОбъект.ОтборПоМатериалам.Очистить();
	Если Объект.БазаРаспределенияПоЭтапам = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
		ИЛИ Объект.БазаРаспределенияПоЭтапам = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов
		ИЛИ Объект.БазаРаспределенияПоЭтапам = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов Тогда
		Для Каждого Элемент Из ОтборПоМатериалам Цикл 
			НоваяСтрока = ТекущийОбъект.ОтборПоМатериалам.Добавить();
			НоваяСтрока.Материал = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	ТекущийОбъект.ОтборПоВидамРабот.Очистить();
	Если Объект.БазаРаспределенияПоЭтапам = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
		Для Каждого Элемент Из ОтборПоВидамРабот Цикл 
			НоваяСтрока = ТекущийОбъект.ОтборПоВидамРабот.Добавить();
			НоваяСтрока.ВидРабот = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	ТекущийОбъект.ОтборПоПодразделениям.Очистить();
	Если Объект.НаправлениеРаспределения = Перечисления.СпособыРаспределенияСтатейРасходов.ПоПоказателюНаУказанныеПодразделения Тогда
		Для Каждого Элемент Из ОтборПоПодразделениям Цикл 
			НоваяСтрока = ТекущийОбъект.ОтборПоПодразделениям.Добавить();
			НоваяСтрока.Подразделение = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьНадписьПериод();
	УстановитьВидимостьДоступностьПоВариантуРаспределения();
	УстановитьВидимостьПоНастройкамПравилРаспределения();
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Объект.ВариантРаспределения <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоПодразделениямИЭтапамПоПравилам") Тогда
		ОтборПоПодразделениям.Очистить();
		Объект.ОтборПоПодразделениям.Очистить();
	КонецЕсли;
	
	Если НЕ (Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоПодразделениямИЭтапамПоПравилам")
		ИЛИ Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении")
		ИЛИ Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям")) Тогда
		Объект.ДоляСтоимостиПоПравилам = 0;
	КонецЕсли;
	
	Если НЕ ИспользоватьОтборПоГруппамПродукции
		ИЛИ Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям") Тогда
		ОтборПоГруппамПродукции.Очистить();
		Объект.ОтборПоГруппамПродукции.Очистить();
	КонецЕсли;
	
	Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям")
		ИЛИ НЕ (Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов")
					ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов")
					ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов")) Тогда
		ОтборПоМатериалам.Очистить();
		Объект.ОтборПоМатериалам.Очистить();
	КонецЕсли;
	
	Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям")
		ИЛИ Объект.БазаРаспределенияПоЭтапам <> ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов") Тогда
		ОтборПоВидамРабот.Очистить();
		Объект.ОтборПоВидамРабот.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ВладелецФормы <> Неопределено И ВладелецФормы.Имя = "СтатьиРасходов" Тогда
		
		ПараметрыПередачи = Новый Структура();
		ПараметрыПередачи.Вставить("Организация", Объект.Организация);
		ПараметрыПередачи.Вставить("Подразделение", Объект.Подразделение);
		ПараметрыПередачи.Вставить("СтатьяРасходов", Объект.СтатьяРасходов);
		ПараметрыПередачи.Вставить("АналитикаРасходов", Объект.АналитикаРасходов);
		
		Если Объект.Проведен Тогда
			Если ДокументБылПерезаписан Тогда
				ПараметрыПередачи.Вставить("Документ", Объект.Ссылка);
				Если (Объект.ПоБазе.Итог("ДоляСтоимости") 
//++ НЕ УТКА
					+ Объект.Вручную.Итог("ДоляСтоимости")
//-- НЕ УТКА
					+ Объект.ВыпускиБезРаспоряжения.Итог("ДоляСтоимости")
					+ Объект.ДоляСтоимостиПоПравилам) = 0
					И
					Объект.Списание.Итог("ДоляСтоимости") > 0 Тогда
					ПараметрыПередачи.Вставить("Состояние", 
						ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияРасходов.Распределено"));
				ИначеЕсли (Объект.ПоБазе.Итог("ДоляСтоимости") 
//++ НЕ УТКА
					+ Объект.Вручную.Итог("ДоляСтоимости")
//-- НЕ УТКА
					+ Объект.ВыпускиБезРаспоряжения.Итог("ДоляСтоимости")
					+ Объект.ДоляСтоимостиПоПравилам) > 0 Тогда
					ПараметрыПередачи.Вставить("Состояние", 
						ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияРасходов.ГотовоКРаспределениюПоБазе"));
				Иначе
					ПараметрыПередачи.Вставить("Состояние", 
						ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПараметрыПередачи.Вставить("Документ", ПустойДокумент);
			ПараметрыПередачи.Вставить("Состояние", 
				ПредопределенноеЗначение("Перечисление.СостоянияРаспределенияРасходов.ТребуетсяНастройкаРаспределения"));
		КонецЕсли;
			
		Оповестить("Запись_РаспределениеПрочихЗатрат", ПараметрыПередачи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	ПроверитьЗаполнениеТабличнойЧастиВыпускБезРаспоряжения(Отказ);
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТабличнойЧастиВыпускБезРаспоряжения(Отказ)
	
	ПроверяемыеРеквизиты = Новый СписокЗначений;
	ПроверяемыеРеквизиты.Добавить("ДоляСтоимости", НСтр("ru='Доля стоимости';uk='Частка вартості'"));
	ПроверяемыеРеквизиты.Добавить("СтатьяКалькуляции", НСтр("ru='Статья калькуляции';uk='Стаття калькуляції'"));
	
	ШаблонСообщения = НСтр("ru='Не заполнено поле %1 в строке %2 списка ""На выпуски без распоряжений""';uk='Не заповнено поле %1 в рядку %2 списку ""На випуски без розпоряджень""'");
	ШаблонСообщенияБезНомера = НСтр("ru='Не заполнено поле %1 в списке ""На выпуски без распоряжений""';uk='Не заповнено поле %1 у списку ""На випуски без розпоряджень""'");
	
	Для Каждого Строка Из Объект.ВыпускиБезРаспоряжения Цикл
		
		Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
			
			Если Не ЗначениеЗаполнено(Строка[Реквизит.Значение]) Тогда
				
				Если ЭтаФорма.РазвернутьВыпускиБезРаспоряжения Тогда
					СтруктураОтбора = Новый Структура("ДокументВыпуска, КодСтроки");
				Иначе
					СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Назначение, Серия");
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
				НайденныеСтроки = ЭтаФорма.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураОтбора);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					НомерСтрокиСообщения = НайденныеСтроки[0].НомерСтроки;
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						Реквизит.Представление,
						НомерСтрокиСообщения);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыпускиБезРаспоряжения", НомерСтрокиСообщения, Реквизит.Значение),
						,
						Отказ);
					
				Иначе
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияБезНомера,
						Реквизит.Представление);
						
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"ВыпускиБезРаспоряжения",
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьНадписьПериод();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборПоПодразделениямНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатОтбора = Результат;
	Если ТипЗнч(РезультатОтбора) = Тип("Массив") Тогда
		ОтборПоПодразделениям.ЗагрузитьЗначения(РезультатОтбора);
		ОбновитьТестНадписиОтбораПоПодразделениям();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПравилоРаспределенияПоПодразделениямПриИзменении(Элемент)
	
	ПравилоРаспределенияПоПодразделениямПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоРаспределенияПоЭтапамПриИзменении(Элемент)
	
	ПравилоРаспределенияПоЭтапамПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаспределенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВариантРаспределенияСтарый = Объект.ВариантРаспределения;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаспределенияПриИзменении(Элемент)
	
	Если ВариантРаспределенияСтарый = Объект.ВариантРаспределения
		ИЛИ (
			(ВариантРаспределенияСтарый = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении")
			ИЛИ ВариантРаспределенияСтарый = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям"))
			И
			(Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении")
			ИЛИ Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям"))
			)
		Тогда
		Возврат;
	Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ПриИзмененииВариантаРаспределенияЗавершение", ЭтотОбъект),
						НСтр("ru='Настройки распределения будут очищены. Продолжить?';uk='Настройки розподілу будуть очищені. Продовжити?'"),
						РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаспределенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборПоПодразделениямНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("МассивПодразделений", ОтборПоПодразделениям.ВыгрузитьЗначения());
	ДопПараметрОтбора = "ОтборПоПодразделениям";
	РезультатОтбора = Неопределено;

	ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.Форма.ФормаОтбора",
			ПараметрыОтбора,
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("НадписьОтборНажатиеЗавершение", ЭтотОбъект, ДопПараметрОтбора), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗначенияБазыРаспределенияПоЭтапамНажатие(Элемент)
	
	НадписьОтборБазыРаспределенияНажатие();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоБазеОтборПоГруппамПродукцииНажатие(Элемент)
	
	ОтборПоГруппамПродукцииНажатие();
			
КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоПравилуПравилоРаспределенияПриИзменении(Элемент)
	
	ПолучитьНастройкиПравилаРаспределенияПоЭтапам();
	НастроитьФормуПоПравиламРаспределенияПоЭтапам();
	УстановитьВидимостьПоНастройкамПравилРаспределения();
	Объект.СтатьяКалькуляции = ПолучитьСтатьюКалькуляцииДляДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляСтоимостиПоПравиламПриИзменении(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоляСтоимостиПоЭтапамПоПравиламПриИзменении(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗначенияБазыРаспределенияПоПодразделениямНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Дата);
	ПараметрыФормы.Вставить("ТолькоНезаполненные", Истина);
	ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.Форма.ФормаСпискаВручную",
						ПараметрыФормы,
						,,,,,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборБазыРаспределенияНажатие()
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	ДопПараметрОтбора = "";
	Если Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов") Тогда
		ПараметрыОтбора.Вставить("МассивМатериалов", ОтборПоМатериалам.ВыгрузитьЗначения());
		ДопПараметрОтбора = "ОтборПоМатериалам";
	ИначеЕсли Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов") Тогда
		ПараметрыОтбора.Вставить("МассивВидовРабот", ОтборПоВидамРабот.ВыгрузитьЗначения());
		ДопПараметрОтбора = "ОтборПоВидамРабот";
	КонецЕсли;
	РезультатОтбора = Неопределено;

	ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.Форма.ФормаОтбора",
			ПараметрыОтбора,
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("НадписьОтборНажатиеЗавершение", ЭтотОбъект, ДопПараметрОтбора), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеИспользоватьОтборПоГруппамПродукцииПриИзменении(Элемент)
	
	ИспользоватьОтборПоГруппамПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоЭтапамПоПравилуЗначенияБазыРаспределенияНажатие(Элемент)
	
	НадписьОтборБазыРаспределенияНажатие();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоПравилуИспользоватьОтборПоГруппамПродукцииПриИзменении(Элемент)
	
	ИспользоватьОтборПоГруппамПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоПравилуНадписьОтборПоГруппамПродукцииНажатие(Элемент)
	
	ОтборПоГруппамПродукцииНажатие();
			
КонецПроцедуры

&НаКлиенте
Процедура НадписьПоБазеВручнуюЗначенияБазыРаспределенияПоЭтапамНажатие(Элемент)
	
	НадписьОтборБазыРаспределенияНажатие();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоГруппамПродукцииПриИзменении(Элемент)
	
	ИспользоватьОтборПоГруппамПродукции();

КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборПоГруппамПродукцииНажатие(Элемент)
	
	ОтборПоГруппамПродукцииНажатие();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоБазеВручную

&НаКлиенте
Процедура ПоБазеВручнуюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			Элементы.ПоБазеВручную.ТекущиеДанные.СтатьяКалькуляции = Объект.СтатьяКалькуляции;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеВручнуюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьВсегоДолейСтоимости();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоБазеВручнуюПослеУдаления(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВручную

&НаКлиенте
Процедура ВРучнуюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
//++ НЕ УТКА
	Если Не Копирование Тогда
		Отказ = Истина;
		ОткрытьФормуПодборПоЭтапам();
	КонецЕсли;
//-- НЕ УТКА
	Возврат; // В КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ВРучнуюОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
//++ НЕ УТКА
	СтандартнаяОбработка = Ложь; 
	ЗаполнитьПодбор(ВыбранноеЗначение);
//-- НЕ УТКА
	Возврат; // В КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ВРучнуюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
//++ НЕ УТКА
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			Элементы.Вручную.ТекущиеДанные.СтатьяКалькуляции = СтатьяКалькуляции;
		КонецЕсли;
	КонецЕсли;
//-- НЕ УТКА
	Возврат; // В КА обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура ВРучнуюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
//++ НЕ УТКА
	Если Не ОтменаРедактирования Тогда
		ОбновитьВсегоДолейСтоимости();
	КонецЕсли;
//-- НЕ УТКА
	Возврат; // В КА обработчик пустой

КонецПроцедуры

&НаКлиенте
Процедура ВРучнуюПослеУдаления(Элемент)
	
//++ НЕ УТКА
	ОбновитьВсегоДолейСтоимости();
//-- НЕ УТКА
	Возврат; // В КА обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыпускиБезРаспоряжения

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПриИзменении(Элемент)
	СуммаДолейСтоимостиВТЧВыпускиБезРаспоряжений = ВыпускиБезРаспоряжения.Итог("ДоляСтоимости");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОткрытьПодборТоваровПоЗаказу("ВыпускиБезРаспоряжения");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораТоваровИзЗаказа("ВыпускиБезРаспоряжения", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияДоляСтоимостиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные;
	
	Если РазвернутьВыпускиБезРаспоряжения Тогда
		ОбновитьТаблицуОбъекта("ВыпускиБезРаспоряжения", ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		РаспределитьДолюСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные.СтатьяКалькуляции = Объект.СтатьяКалькуляции;
		КонецЕсли;
	КонецЕсли;
	СохранитьДанныеСтроки(Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные;
	
	Если Не РазвернутьВыпускиБезРаспоряжения Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, СтатьяКалькуляции");
	Иначе
		СтруктураОтбора = Новый Структура("ДокументВыпуска, КодСтроки");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	НайденныеСтроки = Объект.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.ВыпускиБезРаспоряжения.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные;
	
	Если Поле.Имя = "ВыпускиБезРаспоряженияДокументВыпуска" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ДокументВыпуска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияСтатьяКалькуляцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыпускиБезРаспоряжения.ТекущиеДанные;
	
	Если РазвернутьВыпускиБезРаспоряжения Тогда
		ОбновитьТаблицуОбъекта("ВыпускиБезРаспоряжения", ТекущиеДанные.ПолучитьИдентификатор());
	Иначе
		УстановитьСтатьюКалькуляцииПоСтроке(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьВсегоДолейСтоимости();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыпускиБезРаспоряженияПослеУдаления(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоБазеСписание

&НаКлиенте
Процедура ПоБазеСписаниеСтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзменении(Элементы.ПоБазеСписание);

КонецПроцедуры

&НаКлиенте
Процедура ПоБазеСписаниеАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АналитикаРасходовНачалоВыбора(Элемент, Элементы.ПоБазеСписание, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура ПоБазеСписаниеАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АналитикаРасходовОбработкаВыбора(Элементы.ПоБазеСписание, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПоБазеСписаниеАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АналитикаРасходовАвтоПодбор(Элементы.ПоБазеСписание, Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПоБазеСписаниеАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	АналитикаРасходовОкончаниеВводаТекста(Элементы.ПоБазеСписание, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеСписаниеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьВсегоДолейСтоимости();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеСписаниеПослеУдаления(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоБазеВручнуюСписание

&НаКлиенте
Процедура ПоБазеВручнуюСписаниеСтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзменении(Элементы.ПоБазеВручнуюСписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеВручнуюСписаниеАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АналитикаРасходовНачалоВыбора(Элемент, Элементы.ПоБазеВручнуюСписание, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеВручнуюСписаниеАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АналитикаРасходовОбработкаВыбора(Элементы.ПоБазеВручнуюСписание, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеВручнуюСписаниеАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АналитикаРасходовАвтоПодбор(Элементы.ПоБазеВручнуюСписание, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеВручнуюСписаниеАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	АналитикаРасходовОкончаниеВводаТекста(Элементы.ПоБазеВручнуюСписание, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеВручнуюСписаниеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьВсегоДолейСтоимости();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоБазеВручнуюСписаниеПослеУдаления(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоЭтапамПоБазеСписание

&НаКлиенте
Процедура ПоЭтапамПоБазеСписаниеСтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзменении(Элементы.ПоЭтапамПоБазеСписание);

КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоБазеСписаниеАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АналитикаРасходовНачалоВыбора(Элемент, Элементы.ПоЭтапамПоБазеСписание, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоБазеСписаниеАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АналитикаРасходовОбработкаВыбора(Элементы.ПоЭтапамПоБазеСписание, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоБазеСписаниеАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АналитикаРасходовАвтоПодбор(Элементы.ПоЭтапамПоБазеСписание, Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоБазеСписаниеАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	АналитикаРасходовОкончаниеВводаТекста(Элементы.ПоЭтапамПоБазеСписание, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоБазеСписаниеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьВсегоДолейСтоимости();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоЭтапамПоБазеСписаниеПослеУдаления(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВручнуюСписание

&НаКлиенте
Процедура ВручнуюСписаниеСтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзменении(Элементы.ВручнуюСписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ВручнуюСписаниеАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АналитикаРасходовНачалоВыбора(Элемент, Элементы.ВручнуюСписание, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура ВручнуюСписаниеАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АналитикаРасходовОбработкаВыбора(Элементы.ВручнуюСписание, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ВручнуюСписаниеАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АналитикаРасходовАвтоПодбор(Элементы.ВручнуюСписание, Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ВручнуюСписаниеАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	АналитикаРасходовОкончаниеВводаТекста(Элементы.ВручнуюСписание, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВручнуюСписаниеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьВсегоДолейСтоимости();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВручнуюСписаниеПослеУдаления(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписание

&НаКлиенте
Процедура СписаниеСтатьяРасходовПриИзменении(Элемент)
	
	СтатьяРасходовПриИзменении(Элементы.Списание);
	
КонецПроцедуры

&НаКлиенте
Процедура СписаниеАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АналитикаРасходовНачалоВыбора(Элемент, Элементы.Списание, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура СписаниеАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АналитикаРасходовОбработкаВыбора(Элементы.Списание, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СписаниеАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	АналитикаРасходовАвтоПодбор(Элементы.Списание, Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СписаниеАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	АналитикаРасходовОкончаниеВводаТекста(Элементы.Списание, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписаниеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьВсегоДолейСтоимости();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписаниеПослеУдаления(Элемент)
	
	ОбновитьВсегоДолейСтоимости();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоБазеВручную Тогда
		ТабЧасть = Объект.ПоБазе;
		ВыделенныеСтроки = Элементы.ПоБазеВручную.ВыделенныеСтроки;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВручную Тогда
		Если Элементы.ГруппаСтраницыВручную.ТекущаяСтраница = Элементы.ГруппаНаВыпускиБезРаспоряжений Тогда
			ТабЧасть = ВыпускиБезРаспоряжения;
			ВыделенныеСтроки = Элементы.ВыпускиБезРаспоряжения.ВыделенныеСтроки;
//++ НЕ УТКА
		ИначеЕсли Элементы.ГруппаСтраницыВручную.ТекущаяСтраница = Элементы.ГруппаВручную Тогда
			ТабЧасть = Объект.Вручную;
			ВыделенныеСтроки = Элементы.Вручную.ВыделенныеСтроки;
//-- НЕ УТКА
		КонецЕсли;
	КонецЕсли;
	
	СтатьяКалькуляцииДляЗаполнения = Неопределено;
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора", , 
					ЭтаФорма,,,, 
					Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект, Новый Структура("ВыделенныеСтроки, ТабЧасть", ВыделенныеСтроки, ТабЧасть)),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ТабЧасть = ДополнительныеПараметры.ТабЧасть;
	СтатьяКалькуляцииДляЗаполнения = Результат;

	Если НЕ ЗначениеЗаполнено(СтатьяКалькуляцииДляЗаполнения) Тогда
		Возврат;
	Конецесли;

	Для Каждого Строка Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = ТабЧасть.НайтиПоИдентификатору(Строка);
		Если СтрокаТаблицы <> Неопределено Тогда
			СохранитьДанныеСтроки(СтрокаТаблицы);
			СтрокаТаблицы.СтатьяКалькуляции = СтатьяКалькуляцииДляЗаполнения;
			Если ТабЧасть = ВыпускиБезРаспоряжения Тогда
				Если РазвернутьВыпускиБезРаспоряжения Тогда
					ОбновитьТаблицуОбъекта("ВыпускиБезРаспоряжения", СтрокаТаблицы.ПолучитьИдентификатор());
				Иначе
					УстановитьСтатьюКалькуляцииПоСтроке(СтрокаТаблицы.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНастройкиРаспределенияВСтатью(Команда)
	
	ПеренестиНастройкиПравилаРаспределенияВСтатьюСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДанныеДляБазыРаспределения(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.ВидимостьКомандВариантовОтчетов = Ложь;
	ПараметрыФормы.Отбор = Новый Структура;
	
	ПараметрыФормы.Отбор.Вставить("Организация", Объект.Организация);
	
	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	ПараметрыФормы.Отбор.Вставить("НачалоПериода", (НачалоМесяца(ДатаДокумента)));
	ПараметрыФормы.Отбор.Вставить("ОкончаниеПериода", (КонецМесяца(ДатаДокумента)));
	ПараметрыФормы.Отбор.Вставить("ГруппыПродукции", ОтборПоГруппамПродукции.ВыгрузитьЗначения());
	ПараметрыФормы.Отбор.Вставить("ПоВсемГруппамПродукции", ОтборПоГруппамПродукции.Количество() = 0
																			ИЛИ НЕ ИспользоватьОтборПоГруппамПродукции);
	ПараметрыФормы.Отбор.Вставить("ВидыРабот", ОтборПоВидамРабот.ВыгрузитьЗначения());
	ПоВсемВидамРабот = ОтборПоВидамРабот.Количество() = 0
		ИЛИ Объект.БазаРаспределенияПоЭтапам <> ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов");
	ПараметрыФормы.Отбор.Вставить("ПоВсемВидамРабот", ПоВсемВидамРабот);
	ПараметрыФормы.Отбор.Вставить("Материалы", ОтборПоМатериалам.ВыгрузитьЗначения());
	ПоВсемМатериалам = ОтборПоМатериалам.Количество() = 0
		ИЛИ НЕ (Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов")
				ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов")
				ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов"));
	ПараметрыФормы.Отбор.Вставить("ПоВсемМатериалам", ПоВсемМатериалам);
	ПараметрыФормы.Отбор.Вставить("Назначение", ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"));
	ПараметрыФормы.Отбор.Вставить("ПоВсемНазначениям", Истина);
	ПараметрыФормы.Отбор.Вставить("ВидПлановыхЦен", ВидЦенПлановойСтоимости);
	ПараметрыФормы.Отбор.Вставить("БазаРаспределения", Объект.БазаРаспределенияПоЭтапам);
	ПараметрыФормы.Отбор.Вставить("ПартионныйУчетВключен", ПартионныйУчетВключен);
	ПараметрыФормы.Отбор.Вставить("АналитическийУчетПоГруппамПродукции", АналитическийУчетПоГруппамПродукции);
	ПараметрыФормы.Отбор.Вставить("НеВедетсяУчетСебестоимостиПоВидамЗапасов", НЕ ВедетсяУчетСебестоимостиПоВидамЗапасов);
	ПараметрыФормы.Отбор.Вставить("ФормироватьВыпускРаботСписанныхНаЗатраты", Истина);
	
	Если Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов")
		ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов") Тогда
		КлючВарианта = "ПоУказаннымМатериалам";
	ИначеЕсли Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоПродукции")
		ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ОбъемПродукции")
		ИЛИ Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ВесПродукции") Тогда
		КлючВарианта = "ПоПродукции";
	ИначеЕсли Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов") Тогда
		КлючВарианта = "ПоУказаннымТрудозатратам";
	ИначеЕсли Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ПлановаяСтоимостьПродукции") Тогда
		КлючВарианта = "ПоПлановойСтоимости";
	ИначеЕсли Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.СуммаМатериальныхЗатрат") Тогда
		КлючВарианта = "ПоМатЗатратам";
	ИначеЕсли Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.СуммаРасходовНаОплатуТруда") Тогда
		КлючВарианта = "ПоЗатратамНаОплатуТруда";
	ИначеЕсли Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.НормативыОплатыТруда") Тогда
		КлючВарианта = "ПоНормЗатратамНаОплатуТруда";
	Иначе
		Возврат;
	КонецЕсли;
	ПараметрыФормы.КлючВарианта = КлючВарианта;
	ПараметрыФормы.Отбор.Вставить("КлючВарианта", КлючВарианта);
		
	ОткрытьФорму("Отчет.ДанныеДляБазыРаспределенияРасходов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНастройкиПравилаРаспределенияПоПодразделениямВСправочник(Команда)
	
	ПеренестиНастройкиПравилаРаспределенияПоПодразделениямВСправочникСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочник(Команда)
	
	ПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочникСервер();
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура РазвернутьВыпускиБезРаспоряжения(Команда)
	
	РазвернутьВыпускиБезРаспоряжения = Не РазвернутьВыпускиБезРаспоряжения;
	Элементы.ВыпускиБезРаспоряженияРазвернутьПоРаспоряжениям.Пометка = РазвернутьВыпускиБезРаспоряжения;
	СвернутьРазвернутьТЧ("ВыпускиБезРаспоряжения", РазвернутьВыпускиБезРаспоряжения);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки.

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияДокументВыпуска.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияКодСтроки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазвернутьВыпускиБезРаспоряжения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияПредставлениеДокументовВыпуска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазвернутьВыпускиБезРаспоряжения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияПредставлениеДокументовВыпуска.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияДокументВыпуска.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыпускиБезРаспоряженияКодСтроки.Имя);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоБазеСписаниеАналитикаРасходов");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоБазеВручнуюСписаниеАналитикаРасходов");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПоЭтапамПоБазеСписаниеАналитикаРасходов");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ВручнуюСписаниеАналитикаРасходов");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СписаниеАналитикаРасходов");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Списание.АналитикаРасходовОбязательна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВРучнуюСпецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Вручную.Спецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<без спецификации>';uk='<без специфікації>'"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры

#Область Подбор

//++ НЕ УТКА
&НаКлиенте
Процедура ОткрытьФормуПодборПоЭтапам()

	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("ПроизводственныеЗатраты", Ложь);
	ПараметрыПодбора.Вставить("Подразделение", 			Объект.Подразделение);
	ПараметрыПодбора.Вставить("Организация", 				Объект.Организация);
	ПараметрыПодбора.Вставить("ПериодНачало",				НачалоМесяца(Объект.Дата));
	ПараметрыПодбора.Вставить("ПериодОкончание",			КонецМесяца(Объект.Дата));
	ПараметрыПодбора.Вставить("Документ", 					Объект.Ссылка);
	
	ОткрытьФорму("Документ.РаспределениеПроизводственныхЗатрат.Форма.ФормаПодборПоЭтапам",
						  ПараметрыПодбора,
						  Элементы.ВРучную,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодбор(АдресВХранилище)
	
	РезультатПодбора = ПолучитьИзВременногоХранилища(АдресВХранилище.АдресВХранилище);
	Подбор.Загрузить(РезультатПодбора);
	
	Для Каждого ПодобраннаяСтрока Из Подбор Цикл
			
		СтрокаТабличнойЧасти = Объект.ВРучную.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПодобраннаяСтрока);
		
		Если ЗначениеЗаполнено(Объект.СтатьяКалькуляции) Тогда
			СтрокаТабличнойЧасти.СтатьяКалькуляции = Объект.СтатьяКалькуляции;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

#Область СписаниеНаРасходы

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(ТЧ)
	
	СтрокаТаблицы = ТЧ.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		СтатьяРасходовПриИзмененииСервер(ТЧ.ТекущаяСтрока, КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовНачалоВыбора(Элемент, ТЧ, СтандартнаяОбработка)
	
	СтрокаТаблицы = ТЧ.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОбработкаВыбора(ТЧ, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = ТЧ.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовАвтоПодбор(ТЧ, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ТЧ.ТекущиеДанные.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовОкончаниеВводаТекста(ТЧ, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ТЧ.ТекущиеДанные.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииСервер(ТекущаяСтрока, КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.Списание.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
		Объект,
		СтрокаТаблицы.СтатьяРасходов,
		СтрокаТаблицы.АналитикаРасходов);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна, АналитикаРасходовЗаказРеализация");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьУсловноеОформление();
	ВидЦенПлановойСтоимости = Константы.ВидЦеныПлановойСтоимостиМатериаловРабот.Получить();
	ПартионныйУчетВключен = ПолучитьФункциональнуюОпцию("ИспользоватьПартионныйУчет");
	АналитическийУчетПоГруппамПродукции = ПолучитьФункциональнуюОпцию("АналитическийУчетПоГруппамПродукции");
	ВедетсяУчетСебестоимостиПоВидамЗапасов = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов");
	Элементы.ГруппаПоБазеОтборПоВидамПродукции.Видимость = АналитическийУчетПоГруппамПродукции;
	Элементы.ГруппаОтборПоВидамПродукции.Видимость = АналитическийУчетПоГруппамПродукции;
	Элементы.ГруппаПоЭтапамПоПравилуОтборПоВидамПродукции.Видимость = АналитическийУчетПоГруппамПродукции;

	ПустойДокумент = Документы.РаспределениеПрочихЗатрат.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяКалькуляции) Тогда
		Объект.СтатьяКалькуляции = Документы.РаспределениеПрочихЗатрат.ПолучитьСтатьюКалькуляцииДляДокумента(Объект.СтатьяРасходов, Объект.ПравилоРаспределенияПоЭтапам);
	КонецЕсли;
	ОпределитьВидимостьИСуммуРасходовПоСтатье();
	ЗаполнитьСпискиОтбора();
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ПравилоРаспределенияПоПодразделениям) Тогда
		ПолучитьНастройкиПравилаРаспределенияПоПодразделениям();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.ПравилоРаспределенияПоЭтапам) Тогда
		ПолучитьНастройкиПравилаРаспределенияПоЭтапам();
	КонецЕсли;
	НастроитьФормуПоПравиламРаспределенияПоПодразделениям();
	НастроитьФормуПоПравиламРаспределенияПоЭтапам();
	УстановитьВидимостьПоНастройкамПравилРаспределения();
	СуммаДолейСтоимостиВТЧВыпускиБезРаспоряжений = ВыпускиБезРаспоряжения.Итог("ДоляСтоимости");
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре("ВыпускиБезРаспоряжения");
	СвернутьРазвернутьТЧ("ВыпускиБезРаспоряжения", РазвернутьВыпускиБезРаспоряжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПериод()

	НадписьПериод = ПредставлениеПериода(НачалоМесяца(Объект.Дата), КонецМесяца(Объект.Дата), "ДЛФ=D");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДубльДокументТекущегоПериода (Отказ, ТекущийДокумент)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РаспределениеПрочихЗатрат.Ссылка
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат КАК РаспределениеПрочихЗатрат
	|ГДЕ
	|	РаспределениеПрочихЗатрат.Проведен
	|	И РаспределениеПрочихЗатрат.Организация = &Организация
	|	И РаспределениеПрочихЗатрат.Подразделение = &Подразделение
	|	И РаспределениеПрочихЗатрат.СтатьяРасходов = &СтатьяРасходов
	|	И РаспределениеПрочихЗатрат.АналитикаРасходов = &АналитикаРасходов
	|	И РаспределениеПрочихЗатрат.Дата МЕЖДУ &ПериодНачало И &ПериодОкончание
	|	И НЕ РаспределениеПрочихЗатрат.Ссылка = &ТекущийДокумент");
	
	Запрос.УстановитьПараметр("Организация",		ТекущийДокумент.Организация);
	Запрос.УстановитьПараметр("Подразделение",		ТекущийДокумент.Подразделение);
	Запрос.УстановитьПараметр("ПериодНачало",		НачалоМесяца(ТекущийДокумент.Дата));
	Запрос.УстановитьПараметр("ПериодОкончание",	КонецМесяца(ТекущийДокумент.Дата));
	Запрос.УстановитьПараметр("ТекущийДокумент",	ТекущийДокумент.Ссылка);
	Запрос.УстановитьПараметр("СтатьяРасходов",		ТекущийДокумент.СтатьяРасходов);
	Запрос.УстановитьПараметр("АналитикаРасходов",	ТекущийДокумент.АналитикаРасходов);
		
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru='В указанном периоде уже существует аналогичный документ.
                                   |Операция не выполнена.'
                                   |;uk='У зазначеному періоді вже існує аналогічний документ.
                                   |Операція не виконана.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНастройкиПравилаРаспределенияВСтатьюСервер()
	
	СтатьяРасходов = Объект.СтатьяРасходов.ПолучитьОбъект();
	СтатьяРасходов.СпособРаспределенияНаПроизводственныеЗатраты = Объект.ВариантРаспределения;
	СтатьяРасходов.ПравилоРаспределенияПоЭтапамПроизводства = Объект.ПравилоРаспределенияПоЭтапам;
	СтатьяРасходов.ПравилоРаспределенияПоПодразделениям = Объект.ПравилоРаспределенияПоПодразделениям;
	СтатьяРасходов.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТестНадписиОтбораПоПодразделениям()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоПодразделениям Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru='Указать подразделения';uk='Вказати підрозділи'");
	КонецЕсли;
	НадписьОтборПоПодразделениям = ТекстНадписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоДолейСтоимости()
	
	ВсегоДолейСтоимостиПоПравилам = Объект.ДоляСтоимостиПоПравилам + Объект.Списание.Итог("ДоляСтоимости");
	ВсегоДолейСтоимостиПоБазе =  Объект.ПоБазе.Итог("ДоляСтоимости") + Объект.Списание.Итог("ДоляСтоимости");
	ВсегоДолейСтоимостиВручную = + Объект.ВыпускиБезРаспоряжения.Итог("ДоляСтоимости")
//++ НЕ УТКА
											+ Объект.Вручную.Итог("ДоляСтоимости")
//-- НЕ УТКА
											+ Объект.Списание.Итог("ДоляСтоимости");
	ВсегоДолейСтоимостиСписание = Объект.Списание.Итог("ДоляСтоимости");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваровПоЗаказу(ИмяТЧ)
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
			МассивКодовСтрок.Добавить(
				Новый Структура("КодСтроки, ДокументВыпуска",
					СтрокаТЧ.КодСтроки,
					СтрокаТЧ.ДокументВыпуска));
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура("Организация, Дата, Подразделение");
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодбора, Объект);
	
	ПараметрыПодбора.Вставить("МассивКодовСтрок", МассивКодовСтрок);
	ПараметрыПодбора.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Документ.РаспределениеПроизводственныхЗатрат.Форма.ФормаПодбораВыходныхИзделий", 
					ПараметрыПодбора, Элементы[ИмяТЧ],,,, 
					Неопределено, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(ИмяТЧ, ВыбранноеЗначение)
	
	РазвернутьВыпускиБезРаспоряжения = ВыбранноеЗначение.РазвернутьВыпускиБезРаспоряжения;
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДокументВыпуска, КодСтроки");
	
	Для Каждого ЭлементДанных Из СтруктураДанных.Товары Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементДанных);
		СтрокиТЧТовары = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект[ИмяТЧ].Добавить();
			
		ИначеЕсли СтрокиТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧ = СтрокиТЧТовары[0];
			
		Иначе
			
			Для Каждого СтрокаТоваров Из СтрокиТЧТовары Цикл
				Объект[ИмяТЧ].Удалить(СтрокаТоваров);
			КонецЦикла;
			
			СтрокаТЧ = Объект[ИмяТЧ].Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЭлементДанных);
		Модифицированность = Истина;
		
	КонецЦикла;
	
	СвернутьРазвернутьТЧ(ИмяТЧ, ЭтаФорма["Развернуть" + ИмяТЧ]);
	
КонецПроцедуры

&НаСервере
Процедура СвернутьРазвернутьТЧ(ИмяТЧ, Развернуть = Ложь)
	
	Если Не Развернуть Тогда
		
		Если ИмяТЧ = "ВыпускиБезРаспоряжения" Тогда
			КолонкиГруппировок = "Номенклатура, Характеристика, СтатьяКалькуляции, Серия, Упаковка, Назначение";
			КолонкиСуммирования = "КоличествоУпаковок, Количество, ДоляСтоимости";
		КонецЕсли;
		
		ТаблицаЗначений = Объект[ИмяТЧ].Выгрузить(,КолонкиГруппировок + ", " + КолонкиСуммирования);
		ТаблицаЗначений.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
		ЭтаФорма[ИмяТЧ].Загрузить(ТаблицаЗначений);
		
		СтруктураОтбора = Новый Структура(КолонкиГруппировок);
		ШаблонПредставления = НСтр("ru='Всего документов: %1';uk='Всього документів: %1'");
		
		Для Каждого Строка Из ЭтаФорма[ИмяТЧ] Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
			НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
			Строка.ПредставлениеРаспоряжений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставления,
				НайденныеСтроки.Количество());
			
		КонецЦикла;
	Иначе
		
		ЭтаФорма[ИмяТЧ].Загрузить(Объект[ИмяТЧ].Выгрузить());
		
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(ИмяТЧ);
	СуммаДолейСтоимостиВТЧВыпускиБезРаспоряжений = ВыпускиБезРаспоряжения.Итог("ДоляСтоимости");
	УстановитьНомераСтрок(ЭтаФорма, ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(ИмяТЧ)
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Если ИмяТЧ = "ВыпускиБезРаспоряжения" Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(ЭтаФорма[ИмяТЧ], ПараметрыЗаполненияРеквизитов);
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект[ИмяТЧ], ПараметрыЗаполненияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНомераСтрок(Форма, ИмяТЧ)
	
	НомерСтроки = 1;
	Для Каждого Строка Из Форма[ИмяТЧ] Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьДолюСтоимости(Идентификатор)
	
	ТекущиеДанные = ВыпускиБезРаспоряжения.НайтиПоИдентификатору(Идентификатор);
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, СтатьяКалькуляции, Серия, Упаковка, Назначение");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	
	НайденныеСтроки = Объект.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураОтбора);
	
	Коэффициенты = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Коэффициенты.Добавить(Строка.КоличествоУпаковок);
	КонецЦикла;
	
	РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ТекущиеДанные.ДоляСтоимости, Коэффициенты);
	
	Если РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = 0;
	Для Каждого Коэффициент Из РезультатРаспределения Цикл
		НайденныеСтроки[Индекс].ДоляСтоимости = Коэффициент;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуОбъекта(ИмяТЧ, Идентификатор)
	
	ТекущиеДанные = ЭтаФорма[ИмяТЧ].НайтиПоИдентификатору(Идентификатор);
	
	Если ЭтаФорма["Развернуть" + ИмяТЧ] Тогда
		СтруктураОтбора = Новый Структура("ДокументВыпуска, КодСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	Иначе
		Если ИмяТЧ = "ВыпускиБезРаспоряжения" Тогда
			СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия, Назначение, СтатьяКалькуляции");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СохраненныеДанные);
	КонецЕсли;
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекущиеДанные, ,"ДокументВыпуска,КодСтроки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьДанныеСтроки(ДанныеСтроки)
	
	СохраненныеДанные = Новый Структура("Номенклатура, Характеристика, СтатьяКалькуляции");
	ЗаполнитьЗначенияСвойств(СохраненныеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатьюКалькуляцииПоСтроке(Идентификатор)
	
	ТекущиеДанные = ВыпускиБезРаспоряжения.НайтиПоИдентификатору(Идентификатор);
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
	СтруктураОтбора.Вставить("СтатьяКалькуляции", СохраненныеДанные.СтатьяКалькуляции);
	
	НайденныеСтроки = Объект.ВыпускиБезРаспоряжения.НайтиСтроки(СтруктураОтбора);
	
	Коэффициенты = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Строка.СтатьяКалькуляции = ТекущиеДанные.СтатьяКалькуляции;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВариантаРаспределенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПриИзмененииВариантаРаспределенияНаСервере();
		УстановитьВидимостьДоступностьПоВариантуРаспределения();
	Иначе
		Объект.ВариантРаспределения = ВариантРаспределенияСтарый;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВариантаРаспределенияНаСервере()
	Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоПодразделениямИЭтапамПоПравилам") Тогда
		Объект.ПоБазе.Очистить();
		Объект.Вручную.Очистить();
		Объект.ВыпускиБезРаспоряжения.Очистить();
	ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоПодразделениямВручнуюПоЭтапамПоПравилу") Тогда
		Объект.Вручную.Очистить();
		Объект.ВыпускиБезРаспоряжения.Очистить();
		Объект.ПравилоРаспределенияПоПодразделениям = ПредопределенноеЗначение("Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка");
		Объект.БазаРаспределенияПоПодразделениям = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка");
		Объект.НаправлениеРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПустаяСсылка");
		Объект.ОтборПоПодразделениям.Очистить();
		ОтборПоПодразделениям.Очистить();
	ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям") Тогда
		Объект.ПоБазе.Очистить();
		Объект.ДоляСтоимостиПоПравилам = 0;
		Объект.ПравилоРаспределенияПоПодразделениям = ПредопределенноеЗначение("Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка");
		Объект.БазаРаспределенияПоПодразделениям = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка");
		Объект.НаправлениеРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПустаяСсылка");
		Объект.ОтборПоПодразделениям.Очистить();
		Объект.ПравилоРаспределенияПоЭтапам = ПредопределенноеЗначение("Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка");
		Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка");
		Объект.ОтборПоМатериалам.Очистить();
		Объект.ОтборПоВидамРабот.Очистить();
		Объект.ОтборПоГруппамПродукции.Очистить();
		ИспользоватьОтборПоГруппамПродукции = Ложь;
		Объект.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
		ОтборПоПодразделениям.Очистить();
		ОтборПоМатериалам.Очистить();
		ОтборПоВидамРабот.Очистить();
		ОтборПоГруппамПродукции.Очистить();
	ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении")
		ИЛИ Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям") Тогда
		Объект.ПоБазе.Очистить();
		Объект.Вручную.Очистить();
		Объект.ВыпускиБезРаспоряжения.Очистить();
		Объект.ПравилоРаспределенияПоПодразделениям = ПредопределенноеЗначение("Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка");
		Объект.БазаРаспределенияПоПодразделениям = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка");
		Объект.НаправлениеРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПустаяСсылка");
		Объект.ОтборПоПодразделениям.Очистить();
		ОтборПоПодразделениям.Очистить();
	ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.НаДругиеСтатьиРасходов") Тогда
		Объект.ПоБазе.Очистить();
		Объект.Вручную.Очистить();
		Объект.ВыпускиБезРаспоряжения.Очистить();
		Объект.ДоляСтоимостиПоПравилам = 0;
		Объект.ПравилоРаспределенияПоПодразделениям = ПредопределенноеЗначение("Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка");
		Объект.БазаРаспределенияПоПодразделениям = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка");
		Объект.НаправлениеРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПустаяСсылка");
		Объект.ОтборПоПодразделениям.Очистить();
		Объект.ПравилоРаспределенияПоЭтапам = ПредопределенноеЗначение("Справочник.ПравилаРаспределенияРасходов.ПустаяСсылка");
		Объект.БазаРаспределенияПоЭтапам = ПредопределенноеЗначение("Перечисление.ТипыБазыРаспределенияРасходов.ПустаяСсылка");
		Объект.ОтборПоМатериалам.Очистить();
		Объект.ОтборПоВидамРабот.Очистить();
		Объект.ОтборПоГруппамПродукции.Очистить();
		ИспользоватьОтборПоГруппамПродукции = Ложь;
		Объект.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
		ОтборПоПодразделениям.Очистить();
		ОтборПоМатериалам.Очистить();
		ОтборПоВидамРабот.Очистить();
		ОтборПоГруппамПродукции.Очистить();
	КонецЕсли;
	УстановитьВидимостьПоНастройкамПравилРаспределения();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьПоВариантуРаспределения()
	
	Если Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоПодразделениямИЭтапамПоПравилам") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоБазе;
	ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоПодразделениямВручнуюПоЭтапамПоПравилу") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоБазеВручную;
	ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамВручнуюПоВсемПодразделениям") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВручную;
	ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуВДанномПодразделении")
			ИЛИ Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.ПоЭтапамПоПравилуПоВсемПодразделениям") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоЭтапамПоБазе;
	ИначеЕсли Объект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.СпособыРаспределенияСтатейРасходов.НаДругиеСтатьиРасходов") Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписание;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьИСуммуРасходовПоСтатье()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	РегистрНакопления.ДвиженияНоменклатураДоходыРасходы.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			СтатьяДоходовРасходов = &Статья
		|				И АналитикаРасходов = &Аналитика) КАК Движения");
	
	Запрос.УстановитьПараметр("Статья", Объект.СтатьяРасходов);
	Запрос.УстановитьПараметр("Аналитика", Объект.АналитикаРасходов);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.Дата));
	
	ЕстьОборотыПоСтатье = НЕ Запрос.Выполнить().Пустой();
	Если НЕ ЕстьОборотыПоСтатье Тогда
		Элементы.ГруппаСуммы.Видимость = Истина;
		Элементы.ГруппаБезСумм.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСуммы.Видимость = Ложь;
		Элементы.ГруппаБезСумм.Видимость = Истина;
	КонецЕсли;
	
	Если ЕстьОборотыПоСтатье Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаПоступилоПрочихРасходов() + "
		|ВЫБРАТЬ
		|	Т.ПоступилоУпр,
		|	Т.ПоступилоРегл,
		|	Т.ПоступилоПостояннаяРазница,
		|	Т.ПоступилоВременнаяРазница
		|ИЗ
		|	ВТПоступило КАК Т
		|ГДЕ
		|	Т.СтатьяРасходов = &Статья
		|	И Т.АналитикаРасходов = &Аналитика";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("СписокОрганизаций", Объект.Организация);
	Запрос.УстановитьПараметр("СписокПодразделений", Объект.Подразделение);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Ложь);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Ложь);
	Запрос.УстановитьПараметр("Статья", Объект.СтатьяРасходов);
	Запрос.УстановитьПараметр("Аналитика", Объект.АналитикаРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();

	ШаблонПредставления = НСтр("ru='%1 (%2)';uk='%1 (%2)'");
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ПоступилоУпр = 0;
	ПоступилоРегл = 0;
	ПоступилоПостояннаяРазница = 0;
	ПоступилоВременнаяРазница = 0;
	
	Если Выборка.Следующий() Тогда
		ПоступилоУпр = Выборка.ПоступилоУпр;
		ПоступилоРегл = Выборка.ПоступилоРегл;
		ПоступилоПостояннаяРазница = Выборка.ПоступилоПостояннаяРазница;
		ПоступилоВременнаяРазница = Выборка.ПоступилоВременнаяРазница;
	КонецЕсли;
	
	Элементы.Сумма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонПредставления,
		ПоступилоУпр,
		ВалютаУпр);
	Элементы.СуммаРегл.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонПредставления,
		ПоступилоРегл,
		ВалютаРегл);
	Если ПоступилоРегл > 0 Тогда
		Элементы.ГруппаРегл.Видимость = Истина;
		Элементы.ГруппаПРВР.Видимость = Ложь;
	ИначеЕсли ПоступилоПостояннаяРазница > 0 ИЛИ ПоступилоВременнаяРазница > 0 Тогда
		Элементы.СуммаПР.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			ПоступилоПостояннаяРазница,
			ВалютаРегл);
		Элементы.СуммаВР.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			ПоступилоВременнаяРазница,
			ВалютаРегл);
		Элементы.ГруппаРегл.Видимость = Ложь;
		Элементы.ГруппаПРВР.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиПравилаРаспределенияПоПодразделениям()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Правила.БазаРаспределения,
		|	Правила.НаправлениеРаспределения
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов КАК Правила
		|ГДЕ
		|	Правила.Ссылка = &Правило
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборПоПодразделениям.Подразделение
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов.ОтборПоПодразделениям КАК ОтборПоПодразделениям
		|ГДЕ
		|	ОтборПоПодразделениям.Ссылка = &Правило");
	
	Запрос.УстановитьПараметр("Правило", Объект.ПравилоРаспределенияПоПодразделениям);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Выборка.Следующий();
	
	Объект.НаправлениеРаспределения = Выборка.НаправлениеРаспределения;
	Объект.БазаРаспределенияПоПодразделениям = Выборка.БазаРаспределения;
	ОтборПоПодразделениям.ЗагрузитьЗначения(Результат[1].Выгрузить().ВыгрузитьКолонку("Подразделение"));

КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиПравилаРаспределенияПоЭтапам()
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Правила.БазаРаспределения
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов КАК Правила
		|ГДЕ
		|	Правила.Ссылка = &Правило
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборПоМатериалам.Материал
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов.ОтборПоМатериалам КАК ОтборПоМатериалам
		|ГДЕ
		|	ОтборПоМатериалам.Ссылка = &Правило
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборПоВидамРабот.ВидРабот
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов.ОтборПоВидамРабот КАК ОтборПоВидамРабот
		|ГДЕ
		|	ОтборПоВидамРабот.Ссылка = &Правило
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтборПоГруппамПродукции.ГруппаПродукции
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов.ОтборПоГруппамПродукции КАК ОтборПоГруппамПродукции
		|ГДЕ
		|	ОтборПоГруппамПродукции.Ссылка = &Правило");
	
	Запрос.УстановитьПараметр("Правило", Объект.ПравилоРаспределенияПоЭтапам);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Выборка.Следующий();
	
	Объект.БазаРаспределенияПоЭтапам = Выборка.БазаРаспределения;
	ОтборПоМатериалам.ЗагрузитьЗначения(Результат[1].Выгрузить().ВыгрузитьКолонку("Материал"));
	ОтборПоВидамРабот.ЗагрузитьЗначения(Результат[2].Выгрузить().ВыгрузитьКолонку("ВидРабот"));
	ОтборПоГруппамПродукции.ЗагрузитьЗначения(Результат[3].Выгрузить().ВыгрузитьКолонку("ГруппаПродукции"));

КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравиламРаспределенияПоПодразделениям()
	
	Элементы.НадписьНаправлениеРаспределения.Заголовок = Строка(Объект.НаправлениеРаспределения);
	Элементы.НадписьБазаРаспределенияПоПодразделениям.Заголовок = Строка(Объект.БазаРаспределенияПоПодразделениям);
	УстановитьТестНадписиОтбораПоПодразделениям();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравиламРаспределенияПоЭтапам()
	
	Элементы.НадписьБазаРаспределенияПоЭтапам.Заголовок = Строка(Объект.БазаРаспределенияПоЭтапам);
	Элементы.НадписьПоБазеВручнуюБазаРаспределенияПоЭтапам.Заголовок = Строка(Объект.БазаРаспределенияПоЭтапам);
	Элементы.НадписьПоЭтапамПоПравилуБазаРаспределения.Заголовок = Строка(Объект.БазаРаспределенияПоЭтапам);
	ИспользоватьОтборПоГруппамПродукции = ОтборПоГруппамПродукции.Количество();
	УстановитьВидимостьПоОтборуПоГруппамПродукции();
	УстановитьТестНадписиОтбораПоГруппамПродукции();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоНастройкамПравилРаспределения()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилоРаспределенияПоПодразделениям) Тогда
		Элементы.ГруппаПоБазеПоПодразделениямНастройки.Видимость = Ложь;
		Элементы.ПоБазеПеренестиНастройкиПравилаРаспределенияПоПодразделениямВСправочник.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПоБазеПоПодразделениямНастройки.Видимость = Истина;
		Элементы.ПоБазеПеренестиНастройкиПравилаРаспределенияПоПодразделениямВСправочник.Видимость = Истина;
		Если Объект.НаправлениеРаспределения = Перечисления.СпособыРаспределенияСтатейРасходов.ПоПоказателюНаУказанныеПодразделения Тогда
			Элементы.НадписьОтборПоПодразделениям.Видимость = Истина;
		Иначе
			Элементы.НадписьОтборПоПодразделениям.Видимость = Ложь;
		КонецЕсли;
		Элементы.НадписьЗначенияБазыРаспределенияПоПодразделениям.Видимость = 
			Объект.БазаРаспределенияПоПодразделениям = Перечисления.ТипыБазыРаспределенияРасходов.ВводитсяЕжемесячно
			ИЛИ Объект.БазаРаспределенияПоПодразделениям = Перечисления.ТипыБазыРаспределенияРасходов.ВводитсяПриИзменении;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПравилоРаспределенияПоЭтапам) Тогда
		Элементы.ГруппаПоБазеПоЭтапамНастройки.Видимость = Ложь;
		Элементы.ГруппаПравилоПоЭтапамНастройки.Видимость = Ложь;
		Элементы.ГруппаПоЭтапамПоПравилуНастройки.Видимость = Ложь;
		Элементы.ПоБазеПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочник.Видимость = Ложь;
		Элементы.ПоБазеВручнуюПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочник.Видимость = Ложь;
		Элементы.ПоЭтапамПоПравилуПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочник.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПоБазеПоЭтапамНастройки.Видимость = Истина;
		Элементы.ГруппаПравилоПоЭтапамНастройки.Видимость = Истина;
		Элементы.ГруппаПоЭтапамПоПравилуНастройки.Видимость = Истина;
		Элементы.ПоБазеПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочник.Видимость = Истина;
		Элементы.ПоБазеВручнуюПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочник.Видимость = Истина;
		Элементы.ПоЭтапамПоПравилуПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочник.Видимость = Истина;
		
		Если Объект.БазаРаспределенияПоЭтапам = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоУказанныхМатериалов
			ИЛИ Объект.БазаРаспределенияПоЭтапам = Перечисления.ТипыБазыРаспределенияРасходов.ОбъемУказанныхМатериалов
			ИЛИ Объект.БазаРаспределенияПоЭтапам = Перечисления.ТипыБазыРаспределенияРасходов.ВесУказанныхМатериалов Тогда
			Элементы.НадписьЗначенияБазыРаспределенияПоЭтапам.Видимость = Истина;
			Элементы.НадписьПоБазеВручнуюЗначенияБазыРаспределенияПоЭтапам.Видимость = Истина;
			Элементы.НадписьПоЭтапамПоПравилуЗначенияБазыРаспределения.Видимость = Истина;
			УстановитьТестНадписиОтбораПоМатериалам();
		ИначеЕсли Объект.БазаРаспределенияПоЭтапам = Перечисления.ТипыБазыРаспределенияРасходов.КоличествоРаботУказанныхВидов Тогда
			Элементы.НадписьЗначенияБазыРаспределенияПоЭтапам.Видимость = Истина;
			Элементы.НадписьПоБазеВручнуюЗначенияБазыРаспределенияПоЭтапам.Видимость = Истина;
			Элементы.НадписьПоЭтапамПоПравилуЗначенияБазыРаспределения.Видимость = Истина;
			УстановитьТестНадписиОтбораПоВидамРабот();
		Иначе
			Элементы.НадписьЗначенияБазыРаспределенияПоЭтапам.Видимость = Ложь;
			Элементы.НадписьПоБазеВручнуюЗначенияБазыРаспределенияПоЭтапам.Видимость = Ложь;
			Элементы.НадписьПоЭтапамПоПравилуЗначенияБазыРаспределения.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЗатратыСервер.НастроитьПараметрыВыбораПравилРаспределения(
		Объект.Подразделение,
		Объект.ВариантРаспределения,
		Элементы.ПоЭтапамПоПравилуПравилоРаспределения,
		Перечисления.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоОтборуПоГруппамПродукции()
	
	Элементы.НадписьПоБазеОтборПоГруппамПродукции.Видимость = ИспользоватьОтборПоГруппамПродукции;
	Элементы.НадписьОтборПоГруппамПродукции.Видимость = ИспользоватьОтборПоГруппамПродукции;
	Элементы.ПоЭтапамПоПравилуНадписьОтборПоГруппамПродукции.Видимость = ИспользоватьОтборПоГруппамПродукции;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТестНадписиОтбораПоПодразделениям()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоПодразделениям Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru='Указать подразделения';uk='Вказати підрозділи'");
	КонецЕсли;
	Элементы.НадписьОтборПоПодразделениям.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТестНадписиОтбораПоМатериалам()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоМатериалам Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru='Указать материалы';uk='Вказати матеріали'");
	КонецЕсли;
	Элементы.НадписьЗначенияБазыРаспределенияПоЭтапам.Заголовок = ТекстНадписи;
	Элементы.НадписьПоБазеВручнуюЗначенияБазыРаспределенияПоЭтапам.Заголовок = ТекстНадписи;
	Элементы.НадписьПоЭтапамПоПравилуЗначенияБазыРаспределения.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТестНадписиОтбораПоВидамРабот()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоВидамРабот Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru='Указать виды работ';uk='Зазначити види робіт'");
	КонецЕсли;
	Элементы.НадписьЗначенияБазыРаспределенияПоЭтапам.Заголовок = ТекстНадписи;
	Элементы.НадписьПоБазеВручнуюЗначенияБазыРаспределенияПоЭтапам.Заголовок = ТекстНадписи;
	Элементы.НадписьПоЭтапамПоПравилуЗначенияБазыРаспределения.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТестНадписиОтбораПоГруппамПродукции()
	
	ТекстНадписи = "";
	Для Каждого Элемент Из ОтборПоГруппамПродукции Цикл 
		ТекстНадписи = ТекстНадписи + ?(ТекстНадписи = "", "", "; ") + СокрЛП(Элемент.Значение);
	КонецЦикла;
	Если ТекстНадписи = "" Тогда
		ТекстНадписи = НСтр("ru='Указать группы (виды) продукции';uk='Вказати групи (види) продукції'");
	КонецЕсли;
	Элементы.НадписьПоБазеОтборПоГруппамПродукции.Заголовок = ТекстНадписи;
	Элементы.НадписьОтборПоГруппамПродукции.Заголовок = ТекстНадписи;
	Элементы.ПоЭтапамПоПравилуНадписьОтборПоГруппамПродукции.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОтборНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатОтбора = Результат;
	Если ТипЗнч(РезультатОтбора) = Тип("Массив") Тогда
		Если ДополнительныеПараметры = "ОтборПоГруппамПродукции" Тогда
			ОтборПоГруппамПродукции.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТестНадписиОтбораПоГруппамПродукции();
			Модифицированность = Истина;
		ИначеЕсли ДополнительныеПараметры = "ОтборПоМатериалам" Тогда
			ОтборПоМатериалам.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТестНадписиОтбораПоМатериалам();
			Модифицированность = Истина;
		ИначеЕсли ДополнительныеПараметры = "ОтборПоВидамРабот" Тогда
			ОтборПоВидамРабот.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТестНадписиОтбораПоВидамРабот();
			Модифицированность = Истина;
		ИначеЕсли ДополнительныеПараметры = "ОтборПоПодразделениям" Тогда
			ОтборПоПодразделениям.ЗагрузитьЗначения(РезультатОтбора);
			УстановитьТестНадписиОтбораПоПодразделениям();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПеренестиНастройкиПравилаРаспределенияПоПодразделениямВСправочникСервер()
	
	Правило = Объект.ПравилоРаспределенияПоПодразделениям.ПолучитьОбъект();
	Правило.НаправлениеРаспределения = Объект.НаправлениеРаспределения;
	Правило.БазаРаспределения = Объект.БазаРаспределенияПоПодразделениям;
	Правило.ОтборПоПодразделениям.Очистить();
	Для Каждого Элемент Из ОтборПоПодразделениям Цикл 
		НоваяСтрока = Правило.ОтборПоПодразделениям.Добавить();
		НоваяСтрока.Подразделение = Элемент.Значение;
	КонецЦикла;
	Правило.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНастройкиПравилаРаспределенияПоЭтапамВСправочникСервер()
	
	Правило = Объект.ПравилоРаспределенияПоЭтапам.ПолучитьОбъект();
	Правило.БазаРаспределения = Объект.БазаРаспределенияПоЭтапам;
	Правило.СтатьяКалькуляции = Объект.СтатьяКалькуляции;
	Правило.ОтборПоМатериалам.Очистить();
	Для Каждого Элемент Из ОтборПоМатериалам Цикл 
		НоваяСтрока = Правило.ОтборПоМатериалам.Добавить();
		НоваяСтрока.Материал = Элемент.Значение;
	КонецЦикла;
	Правило.ОтборПоВидамРабот.Очистить();
	Для Каждого Элемент Из ОтборПоВидамРабот Цикл 
		НоваяСтрока = Правило.ОтборПоВидамРабот.Добавить();
		НоваяСтрока.ВидРабот = Элемент.Значение;
	КонецЦикла;
	Правило.ОтборПоГруппамПродукции.Очистить();
	Если ИспользоватьОтборПоГруппамПродукции Тогда
		Для Каждого Элемент Из ОтборПоГруппамПродукции Цикл 
			НоваяСтрока = Правило.ОтборПоГруппамПродукции.Добавить();
			НоваяСтрока.ГруппаПродукции = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	Правило.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоГруппамПродукции()
	
	УстановитьВидимостьПоОтборуПоГруппамПродукции();
	УстановитьТестНадписиОтбораПоГруппамПродукции();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоГруппамПродукцииНажатие()
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("МассивГруппПродукции", ОтборПоГруппамПродукции.ВыгрузитьЗначения());
	РезультатОтбора = Неопределено;

	ОткрытьФорму("Справочник.ПравилаРаспределенияРасходов.Форма.ФормаОтбора",
			ПараметрыОтбора,
			ЭтаФорма,,,, 
			Новый ОписаниеОповещения("НадписьОтборНажатиеЗавершение", ЭтотОбъект, "ОтборПоГруппамПродукции"), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиОтбора()
	
	ОтборПоГруппамПродукции.ЗагрузитьЗначения(Объект.ОтборПоГруппамПродукции.Выгрузить(, "ГруппаПродукции").ВыгрузитьКолонку("ГруппаПродукции"));
	ИспользоватьОтборПоГруппамПродукции = ИспользоватьОтборПоГруппамПродукции ИЛИ (ОтборПоГруппамПродукции.Количество() > 0);
	ОтборПоВидамРабот.ЗагрузитьЗначения(Объект.ОтборПоВидамРабот.Выгрузить(, "ВидРабот").ВыгрузитьКолонку("ВидРабот"));
	ОтборПоМатериалам.ЗагрузитьЗначения(Объект.ОтборПоМатериалам.Выгрузить(, "Материал").ВыгрузитьКолонку("Материал"));
	ОтборПоПодразделениям.ЗагрузитьЗначения(Объект.ОтборПоПодразделениям.Выгрузить(, "Подразделение").ВыгрузитьКолонку("Подразделение"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатьюКалькуляцииДляДокумента()
	
	Возврат Документы.РаспределениеПрочихЗатрат.ПолучитьСтатьюКалькуляцииДляДокумента(Объект.СтатьяРасходов, Объект.ПравилоРаспределенияПоЭтапам);
	
КонецФункции

&НаСервере
Процедура ПравилоРаспределенияПоПодразделениямПриИзмененииНаСервере()
	ПолучитьНастройкиПравилаРаспределенияПоПодразделениям();
	НастроитьФормуПоПравиламРаспределенияПоПодразделениям();
	УстановитьВидимостьПоНастройкамПравилРаспределения();
КонецПроцедуры

&НаСервере
Процедура ПравилоРаспределенияПоЭтапамПриИзмененииНаСервере()
	ПолучитьНастройкиПравилаРаспределенияПоЭтапам();
	НастроитьФормуПоПравиламРаспределенияПоЭтапам();
	УстановитьВидимостьПоНастройкамПравилРаспределения();
	Объект.СтатьяКалькуляции = ПолучитьСтатьюКалькуляцииДляДокумента();
КонецПроцедуры

#КонецОбласти

#КонецОбласти
