
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		
		// СтандартныеПодсистемы.ВерсионированиеОбъектов
		ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

		// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		
		// СтандартныеПодсистемы.Печать
		УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.Печать
		
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;

	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	УстановитьРазмерАванса = Ложь;
	
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		КадровыйУчетФормы.ФормаКадровогоДокументаПриСозданииНаСервере(ЭтаФорма);
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
			КадровыйУчетРасширенный.ПроверитьПравоИнтерактивногоСозданияКадровыхПриказовСотрудника();
			РасчетЗарплатыФормы.УстановитьСпособРасчетаАвансаПоУмолчанию(Объект.СпособРасчетаАванса);
			УстановитьРазмерАванса = Истина;
		Иначе
			
			Параметры.Свойство("АдресСпискаПодобранныхСотрудников", ис);
			Параметры.Свойство("НомераДоговоровТекущегоДокумента", НомераДоговоровТекущегоДокумента);
			
			РедактированиеСтрокиСписочногоДокумента = Истина;
			Объект.ЕжегодныеОтпуска.Очистить();
			
			СтрокаСписочногоДокумента = Параметры.СтрокаСписочногоДокумента;
			ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияЗаполненныхСвойств(Объект, СтрокаСписочногоДокумента);
			
			Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				РасчетЗарплатыФормы.УстановитьСпособРасчетаАвансаПоУмолчанию(Объект.СпособРасчетаАванса);
				УстановитьРазмерАванса = Истина;
			КонецЕсли; 
			
			ТабличныеЧастиОбъекта = СтрокаСписочногоДокумента.ТабличныеЧасти;
			Для каждого ОписаниеТабличнойЧасти Из ТабличныеЧастиОбъекта Цикл
				
				Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
					Продолжить;
				КонецЕсли; 
				
				Для каждого СтрокаТЧ Из ОписаниеТабличнойЧасти.Значение Цикл
					ЗаполнитьЗначенияСвойств(Объект[ОписаниеТабличнойЧасти.Ключ].Добавить(), СтрокаТЧ);
				КонецЦикла;
		
			КонецЦикла;
			
			ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет; 
			АвтоЗаголовок = Ложь;
			
			Заголовок = НСтр("ru='Прием на работу';uk='Прийом на роботу'");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"РасчетчикГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"БронированиеПозиции",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"Организация",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ГруппаНомерДатаПриказаОПриеме",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОснованиеПредставителяНанимателя",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПодвалДокументаГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КоманднаяПанельФормы",
				"Видимость",
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОК",
				"КнопкаПоУмолчанию",
				Истина);
			
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Объект.ДатаПриема) Тогда
			Объект.ДатаПриема = ТекущаяДатаСеанса();
		КонецЕсли;
		
		// Очистим реквизит Сотрудник, если он уже принят.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Параметры.ЗначениеКопирования.Проведен Тогда
			Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
			Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Начисления") 
			И Параметры.ЗначенияЗаполнения.Начисления <> Неопределено 
			И Параметры.ЗначенияЗаполнения.Начисления.Количество() > 0 Тогда 
			Объект.Начисления.Загрузить(Параметры.ЗначенияЗаполнения.Начисления.Выгрузить());
		КонецЕсли;
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Показатели") 
			И Параметры.ЗначенияЗаполнения.Показатели <> Неопределено 
			И Параметры.ЗначенияЗаполнения.Показатели.Количество() > 0 Тогда 
			Объект.Показатели.Загрузить(Параметры.ЗначенияЗаполнения.Показатели.Выгрузить());
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ГрафикРаботы) Тогда
			
			ЗначенияДляЗаполнения = Новый Структура;
			ФиксированныеЗначения = Новый Массив;
			
			Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
				ЗначенияДляЗаполнения.Вставить("ДолжностьПоШтатномуРасписанию", "Объект.ДолжностьПоШтатномуРасписанию");
				ФиксированныеЗначения.Добавить("ДолжностьПоШтатномуРасписанию");
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
				ФиксированныеЗначения.Добавить("Организация");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
				ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
				ФиксированныеЗначения.Добавить("Подразделение");
			КонецЕсли;
			
			Если ФиксированныеЗначения.Количество() > 0 Тогда
				ЗначенияДляЗаполнения.Вставить("ГрафикРаботы", "Объект.ГрафикРаботы");
				ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения, ФиксированныеЗначения);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не РедактированиеСтрокиСписочногоДокумента И ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			УстановитьВидЗанятостиНовогоСотрудника();
		КонецЕсли;
	
		УстановитьУсловияПриема(ЭтаФорма);
		
		ПриПолученииДанныхНаСервере(Объект);
		
		Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
			ЗаполнитьДанныеФормыПоОрганизации();
		КонецЕсли;
		
	КонецЕсли;
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоКатегории(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(),
		КадровыйУчетРасширенный.ПараметрыВыбораКатегорииНачислений());
		
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(),
		КадровыйУчетРасширенный.ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(ЭтаФорма));	
	
	КадровыйУчетФормыРасширенный.УстановитьОтображениеКнопкиРедактироватьФОТ(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(ЭтаФорма, "НачисленияУтверждены");
	
	Если ИспользуетсяРасчетЗарплаты И Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.НачисленияУтверждены Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияЗаполнитьПоПозиции",
		"Видимость",
		ИспользоватьШтатноеРасписание);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЕжегодныеОтпускаЗаполнитьЕжегодныеОтпускаПоПозиции",
		"Видимость",
		ИспользоватьШтатноеРасписание);
		
	КадровыйУчетФормыРасширенный.РазместитьКомандуПроверкиШтатномуРасписанию(ЭтаФорма);
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаСведенияЛевая",
			"ОтображатьЗаголовок",
			Ложь);
		
	КонецЕсли; 
		
	Элементы.РазрядКатегория.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегорияВКадровыхДокументах");	
	
	УстановитьНадписьПраваНаОтпуск();
	ПрочитатьРазмерАвансаПоУмолчанию(УстановитьРазмерАванса);
	
	Если Параметры.Ключ.Пустая() И Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		
		Если Объект.Начисления.Количество() > 0 Тогда
			РассчитатьФОТНаСервере();
			ЗарплатаКадрыРасширенный.РассчитатьЗначенияСовокупныхТарифныхСтавок(ЭтаФорма, ВремяРегистрации, ОписаниеТаблицыНачислений(), , Объект.Сотрудник, Объект.ГрафикРаботы, Объект.КоличествоСтавок);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "Сотрудник");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДатыСозданияРМ(ЭтаФорма);
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененСтажФизическогоЛица" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ПриИзмененииСтажа();
		ВыполнитьРасчетФОТ();
	КонецЕсли;
	
	Если Источник = Объект.ФизическоеЛицо Тогда
		
		Если ИмяСобытия = "ОтредактированаИсторияКлассногоЧина" Тогда
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда
				УстановитьПредставлениеКлассногоЧинаРангаНаСервере(ЭтаФорма.КлассныйЧинРангПредставление, Объект.Сотрудник);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыЕжегодныеОтпуска" Тогда
		ЗагрузитьЕжегодныеОтпуска(Параметр.ЕжегодныеОтпуска);
	КонецЕсли;
	
	Если ИмяСобытия = "ИсправленДокумент" И Источник = Объект.Ссылка Тогда
		ДанныеВРеквизит();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененСтажФизическогоЛица" И Источник.ВладелецФормы = ЭтаФорма Тогда
		УстановитьВидимостьПредупрежденияОНезаполненномСтаже();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПредставлениеКлассногоЧинаРангаНаСервере(РеквизитФормы, Сотрудник)

	Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
	Модуль.УстановитьПредставлениеКлассногоЧинаРанга(РеквизитФормы, Сотрудник);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПроведениеДокументаПриемНаРаботу");
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения
		И Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда
		
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РеквизитВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗапомнитьРазмерАвансаПоУмолчанию(
		ТекущийОбъект.Аванс, ТекущийОбъект.Организация, ТекущийОбъект.СпособРасчетаАванса);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	ПрочитатьВремяРегистрации();
	ДанныеВРеквизит();
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Сотрудник", ЭтаФорма.Объект.Сотрудник);
	Оповестить("ДокументПриемНаРаботуПослеЗаписи", ПараметрыОповещения, ЭтаФорма);
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтаФорма);
	
	ПараметрыОповещения.Вставить("Проведен", ЭтаФорма.Объект.Проведен);
	ПараметрыОповещения.Вставить("ПомеченНаУдаление", ЭтаФорма.Объект.ПометкаУдаления);
	ПараметрыОповещения.Вставить("Результат", ЭтаФорма.Объект.Ссылка);
	ПараметрыОповещения.Вставить("Ответственный", ЭтаФорма.Объект.Ответственный);
	ПараметрыОповещения.Вставить("ДатаДокумента", ЭтаФорма.Объект.Дата);
	ПараметрыОповещения.Вставить("НомерДокумента", ЭтаФорма.Объект.Номер);
	Оповестить("ПослеЗаписиОбъектаСвязанногоСПереводомКДругомуРаботодателю", ПараметрыОповещения, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Оповестить("ИсправленДокумент", , Объект.ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли; 
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитВДанные(ТекущийОбъект);
	
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаСтрокиСписочногоДокумента", Истина);
	КонецЕсли; 
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПринятНаНовоеРабочееМестоПриИзменении(Элемент)
	
	УстановитьВидимостьДатыСозданияРМ(ЭтаФорма);
	ДанныеШтатногоРасписанияНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеШтатногоРасписанияНаКлиенте()
		Если ЭтаФорма.Элементы.ДатаСозданияРабочегоМеста.Видимость Тогда
		Если ИспользоватьИсториюШтатногоРасписания() И ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
			Объект.ДатаСозданияРабочегоМеста = ДанныеШтатногоРасписания(Объект.ДолжностьПоШтатномуРасписанию, Объект.ДатаПриема);
		ИначеЕсли НЕ ИспользоватьИсториюШтатногоРасписания() И ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
			Объект.ДатаСозданияРабочегоМеста = ПолучитьДатуСозданияРабочегоМестаНаСервере(Объект.ДолжностьПоШтатномуРасписанию);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнена должность по штатному расписанию");
			Объект.ПринятНаНовоеРабочееМесто = Ложь;
			УстановитьВидимостьДатыСозданияРМ(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуСозданияРабочегоМестаНаСервере(Должность)
	
	 Возврат УправлениеШтатнымРасписаниемФормы.ПолучитьДатуСозданияРабочегоМестаНаСервере(Должность)
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДатыСозданияРМ(Форма)
	
	Форма.Элементы.ДатаСозданияРабочегоМеста.Видимость = Форма.Объект.ПринятНаНовоеРабочееМесто;
	
КонецПроцедуры

&НаСервере
Функция ДанныеШтатногоРасписания(Должность, Дата)
	
	Возврат УправлениеШтатнымРасписаниемФормы.ДанныеШтатногоРасписания(Должность, Дата);	
	
КонецФункции	

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОчиститьПолеПринятНаНовоеРабочееМесто();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ИзменениеСотрудникаВФормеДокументаПриемНаРаботу");		
	
	СотрудникПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	ОчиститьПолеПринятНаНовоеРабочееМесто();
	
КонецПроцедуры

&НаКлиенте
Процедура ТерриторияПриИзменении(Элемент)
	
	ТерриторияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПКУПриИзменении(Элемент)
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		ВыполнитьРасчетФОТ(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрядКатегорияПриИзменении(Элемент)
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		ВыполнитьРасчетФОТ(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтавокПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПриИзмененииКоличестваСтавок", ЭтотОбъект);
	КадровыйУчетРасширенныйКлиент.ИзменитьКоличествоСтавок(ЭтаФорма, "Объект.КоличествоСтавок", СтандартнаяОбработка, "КоличествоСтавокПредставление", Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицияШтатногоРасписанияПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ИзменениеПозицииШРВФормеДокументаПриемНаРаботу");
	
	ЗаполнитьПоПозицииНаСервере();
	Если Объект.ПринятНаНовоеРабочееМесто Тогда
		УстановитьВидимостьДатыСозданияРМ(ЭтаФорма);
		ДанныеШтатногоРасписанияНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	
	ДолжностьПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриемаПриИзменении(Элемент)
	
	ДатаПриемаПриИзмененииНаСервере();
	ВыполнитьРасчетФОТ(Истина);
	Если Объект.ПринятНаНовоеРабочееМесто Тогда
		УстановитьВидимостьДатыСозданияРМ(ЭтаФорма);
		ДанныеШтатногоРасписанияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаАвансаПриИзменении(Элемент)
	
	Если Объект.СпособРасчетаАванса = ПредопределенноеЗначение("Перечисление.СпособыРасчетаАванса.ПроцентомОтТарифа") Тогда
		Объект.Аванс = РазмерАвансаПоУмолчанию;
	Иначе
		Объект.Аванс = 0;
	КонецЕсли; 
	
	УстановитьПоказРазмераАванса(ЭтаФорма);
	УстановитьСвойствоНачисленияУтверждены();
	
КонецПроцедуры

&НаКлиенте
Процедура АвансРазмерГруппаСтраницаФиксированнойСуммойВеличинаПриИзменении(Элемент)
	
	УстановитьСвойствоНачисленияУтверждены();
	
КонецПроцедуры

&НаКлиенте
Процедура АвансРазмерГруппаСтраницаПроцентомОтТарифаВеличинаПриИзменении(Элемент)
	
	УстановитьСвойствоНачисленияУтверждены();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикПриИзменении(Элемент)
	
	ВыполнитьРасчетФОТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗанятостиПриИзменении(Элемент)
	
	СотрудникиКлиент.ПроверитьКонфликтыВидаЗанятостиССуществующимиСотрудниками(
		Объект.Сотрудник,
		Объект.ФизическоеЛицо,
		Объект.Организация,
		Объект.ВидЗанятости,
		Объект.ДатаПриема);
		
	УстановитьУсловияПриема(ЭтаФорма);
	ВидЗанятостиПредыдущий = Объект.ВидЗанятости;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриИзменении(Элемент)
	
	УстановитьСвойствоНачисленияУтверждены();
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийВыбор(
		ЭтаФорма, Элемент, Поле, СтандартнаяОбработка, 1, Объект.Сотрудник, Объект.ДатаПриема);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийПриНачалеРедактирования(ЭтаФорма, "Начисления", 1);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийНачислениеПриИзменении(
		ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.Сотрудник, ТарифнаяСетка, РазрядКатегория, ВремяРегистрации, ТарифнаяСеткаНадбавки, Объект.РазрядКатегория, , , Объект.ПКУ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийРассчитатьФОТПриОкончанииРедактирования(ЭтаФорма, Элемент, 1, ОписаниеТаблицыНачислений()) Тогда
		ВыполнитьРасчетФОТ();
	Иначе
		РассчитатьИтогиПоФОТ(ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	ВыполнитьРасчетФОТ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПересчитатьФОТДокумента(Элемент)
	
	ВыполнитьРасчетФОТ();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПересчитатьИтогиФОТДокумента(Элемент)
	
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияУтвержденыПриИзменении(Элемент)
	
	Объект.БронированиеПозиции = Ложь;
	НачисленияУтвержденыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НачисленияУтвержденыПриИзмененииНаСервере()
	ЗарплатаКадрыРасширенный.УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(ЭтаФорма, "НачисленияУтверждены");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьДокументыВведенныеПозже(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.ДокументыВведенныеПозже);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРанееВведенныеДокументы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.РанееВведенныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПриемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("УсловияПриемаЗавершениеВвода", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элемент.ТекстРедактирования,
		НСтр("ru='Условия приема';uk='Умови прийому'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИныеУсловияДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ИныеУсловияДоговораЗавершениеВвода", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элемент.ТекстРедактирования,
		НСтр("ru='Иные условия';uk='Інші умови'"));

КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеРабочегоМестаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОборудованиеРабочегоМестаЗавершениеВвода", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элемент.ТекстРедактирования,
		НСтр("ru='Оборудование рабочего места';uk='Обладнання робочого місця'"));
		
КонецПроцедуры

&НаКлиенте
Процедура СрокЗаключенияДоговораНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СрокЗаключенияДоговораЗавершениеВвода", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элемент.ТекстРедактирования,
		НСтр("ru='Срок заключения договора';uk='Термін укладання договору'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПредставителяНанимателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОснованиеПредставителяНанимателяЗавершениеВвода", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элемент.ТекстРедактирования,
		НСтр("ru='Основание представителя нанимателя';uk='Підстава представника наймача'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ВидАктаГосорганаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВидАктаГосорганаЗавершениеВвода", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение,
		Элемент.ТекстРедактирования,
		НСтр("ru='Вид акта государственного органа';uk='Вид акта державного органу'"));
		
КонецПроцедуры

&НаКлиенте
Процедура СрочныйДоговорПриИзменении(Элемент)
	СрочныйДоговорПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	ВидДоговораПриИзмененииНаСервере();
	ВидДоговораПредыдущий = Объект.ВидДоговора;
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗавершенияТрудовогоДоговораПриИзменении(Элемент)
	
	Если НЕ Объект.СрочныйДоговор Тогда
		Объект.СрочныйДоговор = ЗначениеЗаполнено(Объект.ДатаЗавершенияТрудовогоДоговора);
	КонецЕсли;
	
	УстановитьОтображениеПодсказкиДлительностиИспытательногоСрока(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГрейдПриИзменении(Элемент)
	
	ГрейдПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьИспытательногоСрокаПриИзменении(Элемент)
	
	УстановитьОтображениеПодсказкиДлительностиИспытательногоСрока(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтажиНеЗаданыНадписьНажатие(Элемент)
	
	ЗапрашиваемыеВидыСтажа = ВидыСтажаВЛисткеНетрудоспособности();
	ВидыСтажа = Новый ФиксированныйМассив(ЗапрашиваемыеВидыСтажа.ВидыСтажа);
	НеобязательныеВидыСтажа = Новый ФиксированноеСоответствие(ЗапрашиваемыеВидыСтажа.НеобязательныеВидыСтажа);
	
	КадровыйУчетРасширенныйКлиент.ОткрытьФормуРедактированияСтажейСотрудника(ЭтотОбъект, Объект.Сотрудник, Объект.ДатаПриема, ВидыСтажа, , , , НеобязательныеВидыСтажа);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийТаблицыФормыПоказатели

&НаКлиенте
Процедура ПоказателиПриИзменении(Элемент)
	
	УстановитьСвойствоНачисленияУтверждены();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаПоТочностиДополнительногоПоказателя(ЭтотОбъект, "Показатели", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаПоТочностиДополнительногоПоказателя(ЭтотОбъект, "Показатели", 1);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготы

&НаКлиенте
Процедура ЛьготыПриИзменении(Элемент)
	
	РассчитатьИтогиПоРазмеруЛьгот(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗарплатаКадрыРасширенныйКлиент.РедактированиеСоставаНачисленийПриНачалеРедактирования(ЭтотОбъект, "Льготы", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийРассчитатьФОТПриОкончанииРедактирования(ЭтотОбъект, Элемент, 1, ОписаниеТаблицыЛьгот()) Тогда
		ПериодОжидания = ЗарплатаКадрыРасширенныйКлиент.ПериодОжиданияЗапускаАвтоматическогоРасчета();
		Если ПериодОжидания > 0 Тогда
			ПодключитьОбработчикОжидания("РассчитатьРазмерЛьготНаКлиенте", ПериодОжидания, Истина);
		КонецЕсли; 
	Иначе
		РассчитатьИтогиПоРазмеруЛьгот(ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыЛьготаПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот();
	ЗарплатаКадрыРасширенныйКлиент.ВводПлановыхНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1, Объект.Сотрудник, ТарифнаяСетка, РазрядКатегория, ВремяРегистрации, ТарифнаяСеткаНадбавки, Объект.РазрядКатегория, , , Объект.ПКУ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПослеУдаления(Элемент)
	
	ПериодОжидания = ЗарплатаКадрыРасширенныйКлиент.ПериодОжиданияЗапускаАвтоматическогоРасчета();
	Если ПериодОжидания > 0 Тогда
		ПодключитьОбработчикОжидания("РассчитатьРазмерЛьготНаКлиенте", ПериодОжидания, Истина);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Команда", Команда);
		
		ТекстВопроса = НСтр("ru='Данные еще не записаны.
                |Выполнение печати возможно только после записи данных.
                |Данные будут записаны.'
                |;uk='Дані ще не записані.
                |Виконання друку можливо тільки після запису даних.
                |Дані будуть записані.'");
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключаемуюКомандуПечатиПодтверждениеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(Объект.Ссылка, "ПриемНаРаботу");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "ПриемНаРаботу");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(Объект.ИсправленныйДокумент, "ПриемНаРаботу");
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура ПроверитьНаСоответствиеШтатномуРасписанию(Команда)
	КадровыйУчетРасширенныйКлиент.ПроверитьНаСоответствиеШтатномуРасписанию(ЭтаФорма, Объект, Объект.ИсправленныйДокумент);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЕжегодныеОтпуска(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЕжегодныеОтпуска", ЕжегодныеОтпускаСотрудника());
	ПараметрыОткрытия.Вставить("Сотрудник", Объект.Сотрудник);
	ПараметрыОткрытия.Вставить("ДатаСобытия", Объект.ДатаПриема);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ДолжностьПоШтатномуРасписанию", Объект.ДолжностьПоШтатномуРасписанию);
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыОткрытия.Вставить("Территория", Объект.Территория);
	ПараметрыОткрытия.Вставить("Должность", Объект.Должность);

	ОткрытьФорму("Документ.ПриемНаРаботу.Форма.ФормаРедактированияПравНаОтпуск", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисленияПоПозиции(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьНачисленияПоПозицииЗавершение", ЭтотОбъект);
	ЗарплатаКадрыРасширенныйКлиент.ПроверитьВозможностьОчисткиТабличныхЧастей(ЭтаФорма, "Начисления", Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачисленияПоПозицииЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	
	Если Не Отказ Тогда
		ЗаполнитьНачисленияПоПозицииНаСервере();
		Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
			ВыполнитьРасчетФОТ();
		КонецЕсли;
	КонецЕсли; 
	
	УстановитьСвойствоНачисленияУтверждены();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФОТ(Команда)
	
	РедактироватьФОТ = НЕ Элементы.РедактироватьФОТ.Пометка;
	Элементы.РедактироватьФОТ.Пометка = РедактироватьФОТ;
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьВидимостьВкладаВФОТРНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма, РедактироватьФОТ);
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	РассчитатьФОТНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассныйЧинРангИзменить(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("КлассныеЧиныРангиКлиент");
		Модуль.РедактироватьКлассныйЧинРанг(Объект.Сотрудник, ЭтаФорма);  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРазмерЛьгот(Команда)
	
	Элементы.РедактироватьРазмерЛьгот.Пометка = Не Элементы.РедактироватьРазмерЛьгот.Пометка;
	УстановитьВидимостьРазмераЛьгот(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРазмерЛьгот(Команда)
	
	РассчитатьРазмерЛьготНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	Если Модифицированность Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		Иначе
			
			ОписаниеДокумента = СтруктураСОписаниемДокумента();
			Если РегистрацияНачисленийДоступна Тогда
				ЗапомнитьРазмерАвансаПоУмолчанию(Объект.Аванс, Объект.Организация, Объект.СпособРасчетаАванса);
			КонецЕсли; 

			Модифицированность = Ложь;
			
		КонецЕсли;
		
	Иначе
		ОписаниеДокумента = Неопределено;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть(ОписаниеДокумента);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьНомерДоговору(Команда)
	
	Объект.ТрудовойДоговорНомер = НомерСледующегоТрудовогоДоговора(Объект.Организация, НомераДоговоровТекущегоДокумента);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	НачатьИнициализациюФормы(ТекущийОбъект);
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(ТекущийОбъект);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(ТекущийОбъект)
	
	УстановитьДоступностьРегистрацииНачислений();
	
	ИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоСтавокПредставление = КадровыйУчетРасширенныйКлиентСервер.ПредставлениеКоличестваСтавок(Объект.КоличествоСтавок);
	
	ПрочитатьВремяРегистрации();
	
	ЗаполнитьСведенияСотрудника();
	
	ДополнитьФорму(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнитьФорму(Ложь);
	ДополнитьФорму();
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	УстановитьФункциональныеОпцииФормы();
	
	ДанныеВРеквизит();
	ПрочитатьТарифнуюСетку();
	
	УстановитьПоказРазмераАванса(ЭтаФорма);
	
	УстановитьВидимостьРасчетныхПолей();
	УстановитьВидимостьРазмераЛьгот(ЭтотОбъект);
	
	ВидЗанятостиПредыдущий = ТекущийОбъект.ВидЗанятости;
	ВидДоговораПредыдущий = ТекущийОбъект.ВидДоговора;
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейПересчетаТарифнойСтавки(ЭтаФорма, ОписаниеТаблицыНачислений(), ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	ЗарплатаКадрыРасширенный.УстановитьТекстПоясненияКПорядкуПересчетаТарифныхСтавок(ЭтаФорма, "ПорядокРасчетаСтоимостиЕдиницыВремени");
	ЗарплатаКадрыРасширенный.УстановитьРазмерностьСовокупнойТарифнойСтавки(ЭтаФорма);
	ЗарплатаКадрыРасширенный.УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(ЭтаФорма, Объект.ВидТарифнойСтавки,"СовокупнаяТарифнаяСтавкаРазмерность");
	
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	РассчитатьИтогиПоРазмеруЛьгот(ЭтотОбъект);
	ЗапомнитьУсловияПриемаПозицииШтатногоРасписания();
	
	УстановитьОтображениеНадписей();     

	ОписаниеФормы = ОписаниеФормыРедактирующейДанныеКонтрактаДоговора();
	КонтрактыДоговорыСотрудниковФормы.НастроитьФормуПоВидуДоговора(ЭтотОбъект, ОписаниеФормы, Объект.ВидДоговора);
	КонтрактыДоговорыСотрудниковФормы.ЗаполнитьСписокВыбораВидаДоговора(Элементы.ВидДоговора.СписокВыбора,"РаботникиИСлужащие"); 
	КонтрактыДоговорыСотрудниковФормы.УстановитьДоступностьПолейСрочногоТрудовогоДоговора(ЭтотОбъект, ОписаниеФормы, Истина, Объект.СрочныйДоговор);
	
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВидДоговора",
			"ТолькоПросмотр",
			Истина);
		
	КонецЕсли; 
	
	РазрядыКатегорииДолжностей.УстановитьСвязиПараметровВыбораРазрядаКадровогоПриказа(ЭтотОбъект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
		Модуль.УстановитьПредставлениеКлассногоЧинаРанга(ЭтаФорма.КлассныйЧинРангПредставление, Объект.Сотрудник);  
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.УстановитьЗначениеПодсказкиГрейда(ЭтотОбъект, Объект.Грейд);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.УстановитьВидимостьГруппыЛьготы(Элементы);
	КонецЕсли;
	
	Если Объект.Проведен
		И Не Объект.БронированиеПозиции
		И ПолучитьФункциональнуюОпциюФормы("ИспользоватьБронированиеПозиций") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"БронированиеПозиции",
			"Видимость",
			Ложь);
		
	КонецЕсли; 
	
	УстановитьОтображениеПодсказкиДлительностиИспытательногоСрока(ЭтаФорма);
	
	Если НЕ ЭтаФорма.ИспользоватьШтатноеРасписание Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПринятНаНовоеРабочееМесто",
			"Видимость",
			Ложь);
	Объект.ПринятНаНовоеРабочееМесто = Ложь;		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложеного создания.	
		
		// Создание элементов.
		ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтаФорма, НСтр("ru='Приказом установлены ежемесячные начисления';uk='Наказом встановлено щомісячні нарахування'"), "РасчетчикГруппа", "НачисленияУтверждены");
		ЗарплатаКадрыРасширенный.СформироватьСписокВыбораПорядкаПересчета(Элементы, РегистрацияНачисленийДоступна);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
			Модуль.ГруппаГрейдДополнитьФормуКадровогоПриказа(ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачислений(), "Начисления", 3, РегистрацияНачисленийДоступна И ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		ЗарплатаКадрыРасширенный.РедактированиеСоставаНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыЛьгот(), "Начисления", 3, РегистрацияНачисленийДоступна И ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		ПроверяемыеРеквизитыНаСоответствие = РеквизитыПроверяемыеНаСоответствие(ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ЭтаФорма, ОписаниеТаблицыЛьгот(),, 3), ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		УправлениеШтатнымРасписаниемФормы.ПроверкаШтатногоРасписанияПодготовитьТаблицуФормы(
			ЭтаФорма, ПроверяемыеРеквизитыНаСоответствие, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(
			ЭтотОбъект, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(
			ЭтаФорма, Истина, Ложь, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьФормуКадровогоДокумента(ЭтотОбъект, ОписаниеТаблицыЛьгот(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура РассчитатьЗначенияСовокупныхТарифныхСтавокИФОТ()
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейПересчетаТарифнойСтавки(ЭтаФорма, ОписаниеТаблицыНачислений(), ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	ЗарплатаКадрыРасширенный.РассчитатьЗначенияСовокупныхТарифныхСтавок(ЭтаФорма, ВремяРегистрации, ОписаниеТаблицыНачислений(), , Объект.Сотрудник, Объект.ГрафикРаботы, Объект.КоличествоСтавок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетФОТ(ЗаполнитьДанныеТарифнойСетки = Ложь)
	
	Если ЗаполнитьДанныеТарифнойСетки Тогда
		ПерезаполнитьДанныеТарифнойСетки = Истина;;
	КонецЕсли;
	ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьФОТНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФОТНаКлиенте()
	
	РассчитатьФОТНаСервере();
	ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьФОТНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПерезаполнитьДанныеТарифнойСетки Тогда
		ЗаполнитьДанныеТарифнойСеткиНаСервере();
	КонецЕсли; 
	
	РасчетЗарплатыРасширенный.РассчитатьФОТВФормеСОднимСотрудником(
		ЭтаФорма,
		Объект.Сотрудник,
		Объект.Организация,
		ВремяРегистрации,
		ОписаниеТаблицыНачислений(),
		Объект.ГрафикРаботы,
		Объект.Подразделение,
		Объект.КоличествоСтавок);
		
	УстановитьПривилегированныйРежим(Ложь);
	
	РассчитатьЗначенияСовокупныхТарифныхСтавокИФОТ();
	РассчитатьИтогиПоФОТ(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизит()
	
	ТекущаяДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1);
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот();
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 1);
	
	УстановитьПредставленияКомандВводаСтажей();
	
	Если Не ЭтаФорма.Параметры.Ключ.Пустая() Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма, "ПериодическиеСведения");
	КонецЕсли;
	ИсправлениеДокументовЗарплатаКадры.УстановитьПоляИсправления(ЭтаФорма, "ПериодическиеСведения");
	
КонецПроцедуры

&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 1);	
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот();
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписаниеТаблицыВидовРасчета, 1, Ложь);	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Функция ПроверкаПередЗаписьюНаСервере(РезультатыПроверки, ДанныеОЗанятыхПозициях) Экспорт
	Возврат КадровыйУчетРасширенный.ПроверкаСоответствияШтатномуРасписанию(ДанныеОЗанятыхПозициях, Объект.Ссылка, Истина, РезультатыПроверки, Объект.ИсправленныйДокумент);
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеОЗанятыхПозициях() Экспорт 
	
	ДанныеОЗанятыхПозициях = Новый Массив;
	
	ЭлементДанных = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(ОбщегоНазначенияКлиент.ДатаСеанса());
	ЭлементДанных.Период 					= ВремяРегистрации;
	ЭлементДанных.ПозицияШтатногоРасписания = ?(ИспользоватьШтатноеРасписание, Объект.ДолжностьПоШтатномуРасписанию, Объект.Должность);
	ЭлементДанных.Сотрудник					= Объект.Сотрудник;
	ЭлементДанных.КоличествоСтавок			= Объект.КоличествоСтавок;
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда
		ДанныеОНачислениях = КадровыйУчетРасширенныйКлиентСервер.ДанныеОНачисленияхВФорме(
			ЭтаФорма,
			Объект.Начисления,
			Объект.Показатели,
			ОписаниеТаблицыНачислений());
		ЭлементДанных.ФОТ = ФОТ;
		ЭлементДанных.Грейд = Объект.Грейд;
	Иначе
		ДанныеОНачислениях = Неопределено;
	КонецЕсли;
	ЭлементДанных.ДанныеОНачислениях = ДанныеОНачислениях;
	ДанныеОЗанятыхПозициях.Добавить(ЭлементДанных);
	
	Если ЗначениеЗаполнено(Объект.ДатаЗавершенияТрудовогоДоговора) Тогда
		ЭлементДанных = УправлениеШтатнымРасписаниемКлиентСервер.СтруктураДанныхОЗанятыхПозициях(ОбщегоНазначенияКлиент.ДатаСеанса());
		ЭлементДанных.Период = Объект.ДатаЗавершенияТрудовогоДоговора;
		ЭлементДанных.ПозицияШтатногоРасписания = ?(ИспользоватьШтатноеРасписание, Объект.ДолжностьПоШтатномуРасписанию, Объект.Должность);
		ЭлементДанных.Сотрудник = Объект.Сотрудник;
		ЭлементДанных.КоличествоСтавок = - Объект.КоличествоСтавок;
		ЭлементДанных.ДанныеОНачислениях = Неопределено;
		ДанныеОЗанятыхПозициях.Добавить(ЭлементДанных);
	КонецЕсли;
	
	Возврат ДанныеОЗанятыхПозициях;
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗначенияДляЗаполнения = Новый Структура;
	ЗначенияДляЗаполнения.Вставить("Организация",	"Объект.Организация");
	ЗначенияДляЗаполнения.Вставить("Подразделение",	"Объект.Подразделение");
	ЗначенияДляЗаполнения.Вставить("ГрафикРаботы",	"Объект.ГрафикРаботы");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
		
	ПрочитатьРазмерАвансаПоУмолчанию(Истина);
	УстановитьВидЗанятостиНовогоСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолеПринятНаНовоеРабочееМесто()
	
	Объект.ПринятНаНовоеРабочееМесто = Ложь;
	Объект.ДатаСозданияРабочегоМеста = Неопределено;
	УстановитьВидимостьДатыСозданияРМ(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	ЗначенияДляЗаполнения = Новый Структура;
	ЗначенияДляЗаполнения.Вставить("Подразделение",	"Объект.Подразделение");
	ЗначенияДляЗаполнения.Вставить("ГрафикРаботы",	"Объект.ГрафикРаботы");
			
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Подразделение"));
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПозицииНаСервере()
	
	РеквизитыПозиции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДолжностьПоШтатномуРасписанию, "Подразделение,Должность");
	Объект.Подразделение = РеквизитыПозиции.Подразделение;
	Объект.Должность = РеквизитыПозиции.Должность;
	
	ЗапомнитьУсловияПриемаПозицииШтатногоРасписания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	
	ЗаполнитьГрафикРаботыПоПозицииНаСервере();
	ЗаполнитьНачисленияПоПозицииНаСервере();
	ПрочитатьТарифнуюСетку();
	ЗаполнитьПКУПоУмолчанию();
	ЗаполнитьРазрядПоУмолчанию();
	ЗаполнитьГрейдПоУмолчанию();
	РассчитатьФОТНаСервере();
	ЗаполнитьЕжегодныеОтпускаПоПозицииНаСервере();
	УстановитьУсловияПриема(ЭтаФорма);
	ЗаполнитьЛьготыПоПозиции();
	РассчитатьРазмерЛьготНаСервере();
	
	ЗаполнитьКатегориюЕСВПоУмолчанию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекущаяДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрафикРаботыПоПозицииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("ДолжностьПоШтатномуРасписанию", "Объект.ДолжностьПоШтатномуРасписанию");
		ЗначенияДляЗаполнения.Вставить("ГрафикРаботы", "Объект.ГрафикРаботы");
				
		ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ДолжностьПоШтатномуРасписанию"));
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПКУПоУмолчанию()
	
	БылПКУ = Объект.ПКУ;
	
	РазрядыКатегорииДолжностей.ЗаполнитьПКУСотрудникаПоУмолчанию(
		ЭтаФорма, "Объект.ПКУ", Объект.ДатаПриема, Объект.ДолжностьПоШтатномуРасписанию);
		
	Если ЗначениеЗаполнено(Объект.ПКУ) И Объект.ПКУ <> БылПКУ Тогда 
		ПерезаполнитьДанныеТарифнойСетки = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазрядПоУмолчанию()
	
	БылРазряд = Объект.РазрядКатегория;
	
	РазрядыКатегорииДолжностей.ЗаполнитьРазрядКатегориюСотрудникаПоУмолчанию(
		ЭтаФорма, "Объект.РазрядКатегория", ТарифнаяСетка, Объект.Должность, 
		Объект.ДолжностьПоШтатномуРасписанию, Объект.Сотрудник, Объект.ДатаПриема);
		
	Если ЗначениеЗаполнено(Объект.РазрядКатегория) И Объект.РазрядКатегория <> БылРазряд Тогда 
		ПерезаполнитьДанныеТарифнойСетки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрейдПоУмолчанию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		Позиция = ?(ИспользоватьШтатноеРасписание, Объект.ДолжностьПоШтатномуРасписанию, Объект.Должность); 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Объект.Грейд = Модуль.ГрейдПозиции(Позиция);
		Модуль.УстановитьЗначениеПодсказкиГрейда(ЭтотОбъект, Объект.Грейд);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ГрейдПриИзмененииНаСервере()
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
	Модуль.УстановитьЗначениеПодсказкиГрейда(ЭтотОбъект, Объект.Грейд);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоПозицииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		ПараметрыЗаполнения = КадровыйУчетРасширенный.ПараметрыЗаполненияНачисленийПоПозицииШтатногоРасписания();
		
		ПараметрыЗаполнения.ДатаСобытия = Объект.ДатаПриема;
		ПараметрыЗаполнения.Сотрудник = Объект.Сотрудник;
		ПараметрыЗаполнения.РазрядКатегорияНадбавки = Объект.РазрядКатегория;
		ПараметрыЗаполнения.ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений();
		ПараметрыЗаполнения.ДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
		ПараметрыЗаполнения.ТекущаяДолжностьПоШтатномуРасписанию = ТекущаяДолжностьПоШтатномуРасписанию;
		ПараметрыЗаполнения.ПКУ = Объект.ПКУ;
		
		КадровыйУчетРасширенный.ЗаполнитьНачисленияПоПозиции(ЭтаФорма, ПараметрыЗаполнения);
		УстановитьПредставленияКомандВводаСтажей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЕжегодныеОтпускаПоПозицииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		СтруктураПараметров = ОстаткиОтпусков.ОписаниеПараметровДляЗаполнитьЕжегоднымиОтпускамиСотрудника();
		СтруктураПараметров.Регистратор = Объект.Ссылка;
		СтруктураПараметров.Сотрудник = Объект.Сотрудник;
		СтруктураПараметров.ДатаСобытия = Объект.ДатаПриема;
		СтруктураПараметров.ДолжностьПоШтатномуРасписанию = Объект.ДолжностьПоШтатномуРасписанию;
		СтруктураПараметров.Организация = Объект.Организация;
		СтруктураПараметров.Подразделение = Объект.Подразделение;
		СтруктураПараметров.Территория = Объект.Территория;
		СтруктураПараметров.Должность = Объект.Должность;
		
		ОстаткиОтпусков.ЗаполнитьЕжегоднымиОтпускамиСотрудника(Объект.ЕжегодныеОтпуска, СтруктураПараметров);
		
		УстановитьНадписьПраваНаОтпуск();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКатегориюЕСВПоУмолчанию()
	
	БылаКатегория = Объект.КатегорияЕСВ;
	
	УчетСтраховыхВзносов.ЗаполнитьКатегориюЕСВПоУмолчанию(
		ЭтаФорма, "Объект.КатегорияЕСВ", Объект.Сотрудник, Объект.ДатаПриема, Объект.Организация, Объект.ДолжностьПоШтатномуРасписанию.Должность);
		
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицыВидовРасчета =
		РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений(Истина, Ложь);
	ОписаниеТаблицыВидовРасчета.Вставить("ЗапретитьИзменениеПоказателяТарифнойСетки", Истина);
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "";
	
	Возврат ОписаниеТаблицыВидовРасчета;	
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыЛьгот()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыПлановыхНачислений(Ложь, Ложь);
	ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Льготы";
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета = "Льгота";
	ОписаниеТаблицыВидовРасчета.ПутьКДанным = "Объект.Льготы";
	ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей = "Объект.Показатели";
	ОписаниеТаблицыВидовРасчета.НомерТаблицы = 1;
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаФиксРасчет = "ЛьготыФиксРасчет";
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "";
	
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыПроверяемыеНаСоответствие(КоличествоПоказателей, ЧтениеБезОграничений)
	
	РеквизитыПроверяемыеНаСоответствие = Новый Структура("РеквизитыШапки,ТабличныеЧасти", Новый Соответствие, Новый Соответствие);
	
	// Раскрашенностью реквизитов шапки документа, придется управлять программно.
	РеквизитыПроверяемыеНаСоответствие.РеквизитыШапки.Вставить("ДолжностьПоШтатномуРасписанию", "ПозицияШтатногоРасписания");
	РеквизитыПроверяемыеНаСоответствие.РеквизитыШапки.Вставить("КоличествоСтавок", "КоличествоСтавок");
	
	Если ЧтениеБезОграничений Тогда
		
		ОписаниеСоответствияПоказателей = Новый Соответствие;
		Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
			ОписаниеСоответствияПоказателей.Вставить("Показатель" + НомерПоказателя, "Показатель" + НомерПоказателя + "НеСоответствуетПозиции");
			ОписаниеСоответствияПоказателей.Вставить("Значение" + НомерПоказателя, "Значение" + НомерПоказателя + "НеСоответствуетПозиции");
		КонецЦикла;
		
		СтруктураОписанияТЧНачисления = УправлениеШтатнымРасписаниемКлиентСервер.ОписаниеРеквизитовПроверяемыхНаСоответствие();
		СтруктураОписанияТЧНачисления.СтруктураПоиска = Новый Структура("Начисление");
		РеквизитНесоответствияСтроки = Новый Структура("ИмяРеквизита,ИмяРеквизитаНесоответствия", "Начисление", "НачислениеНеСоответствуетПозиции");
		СтруктураОписанияТЧНачисления.РеквизитНесоответствияСтроки = РеквизитНесоответствияСтроки;
		СтруктураОписанияТЧНачисления.РасшифровкаНачислений = Истина;
		СтруктураОписанияТЧНачисления.ОписаниеСоответствияПоказателей = ОписаниеСоответствияПоказателей;
		СтруктураОписанияТЧНачисления.МаксимальноеКоличествоПоказателей = КоличествоПоказателей;
		
		РеквизитыПроверяемыеНаСоответствие.ТабличныеЧасти.Вставить("Начисления", СтруктураОписанияТЧНачисления);
		
	КонецЕсли; 
	
	Возврат РеквизитыПроверяемыеНаСоответствие;
	
КонецФункции

&НаКлиенте
Функция РеквизитыПроверяемыеНаСоответствиеНаКлиенте() Экспорт
	
	Возврат РеквизитыПроверяемыеНаСоответствие(
		ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ЭтаФорма, ОписаниеТаблицыНачислений(),, 3), ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
КонецФункции

&НаСервере
Процедура УстановитьВидЗанятостиНовогоСотрудника()
	
	УстановитьВидЗанятостиНовогоСотрудника = Истина;
	
	Если РедактированиеСтрокиСписочногоДокумента
		И Не ПустаяСтрока(ис) Тогда
		
		УстановитьВидЗанятостиНовогоСотрудника = Ложь;
		
		ПодобранныеСотрудники = ПолучитьИзВременногоХранилища(ис);
		Если ПодобранныеСотрудники.Найти(Объект.Сотрудник) = Неопределено Тогда
			
			КадровыйУчетРасширенный.УстановитьВидЗанятостиНовогоСотрудникаВСтрокеПриемаНаРаботуСписком(
				Объект, ПодобранныеСотрудники);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если УстановитьВидЗанятостиНовогоСотрудника Тогда
		Объект.ВидЗанятости = СотрудникиВызовСервера.ПолучитьВидЗанятостиДляНовогоСотрудника(Объект.Сотрудник, Объект.Организация);
	КонецЕсли;
	
	УстановитьУсловияПриема(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловияПриема(Форма)
	
	УсловияПриема = УсловияПриемаПоВидуЗанятостиИВидуДоговора(Форма.Объект.ВидЗанятости, Форма.Объект.ВидДоговора);
	
	УсловияПриемаПриОткрытии = УсловияПриемаПоВидуЗанятостиИВидуДоговора(Форма.ВидЗанятостиПредыдущий, Форма.ВидДоговораПредыдущий);
	
	Если ПустаяСтрока(Форма.Объект.УсловияПриема) 
		ИЛИ СтрНайти(Форма.Объект.УсловияПриема, УсловияПриемаПриОткрытии) > 0 Тогда
		
		Форма.Объект.УсловияПриема = УсловияПриема + ?(ПустаяСтрока(Форма.УсловияПриемаПозицииШтатногоРасписания), "", ", " + Форма.УсловияПриемаПозицииШтатногоРасписания);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УсловияПриемаПоВидуЗанятостиИВидуДоговора(ВидЗанятости, ВидДоговора)
	
	Если ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровССотрудниками.КонтрактГосслужащего") Тогда
		УсловияПриема = НСтр("ru='Замещение должности государственной гражданской службы';uk='Заміщення посади державної громадянської служби'");
	ИначеЕсли ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего") Тогда
		УсловияПриема = НСтр("ru='Замещение должности муниципальной службы';uk='Заміщення посади муніципальної служби'");
	Иначе	
		Если ВидЗанятости = ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы") Тогда
			УсловияПриема = НСтр("ru='Основное место работы, полная занятость';uk='Основне місце роботи, повна зайнятість'");
		Иначе
			УсловияПриема = НСтр("ru='Работа по совместительству, сокращенная рабочая неделя';uk='Робота за сумісництвом, скорочений робочий тиждень'");
		КонецЕсли; 
	КонецЕсли;
	
	Возврат УсловияПриема;
	
КонецФункции

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	ПрочитатьВремяРегистрации();
	
	ЗаполнитьСведенияСотрудника();
	УстановитьВидЗанятостиНовогоСотрудника();

	ЗаполнитьКатегориюЕСВПоУмолчанию();

	СтруктураПараметров = ОстаткиОтпусков.ОписаниеПараметровДляЗаполнитьЕжегоднымиОтпускамиСотрудника();
	СтруктураПараметров.Регистратор = Объект.Ссылка;
	СтруктураПараметров.Сотрудник = Объект.Сотрудник;
	СтруктураПараметров.ДатаСобытия = Объект.ДатаПриема;
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.Подразделение = Объект.Подразделение;
	СтруктураПараметров.Территория = Объект.Территория;
	СтруктураПараметров.Должность = Объект.Должность;
	
	ОстаткиОтпусков.ЗаполнитьЕжегоднымиОтпускамиСотрудника(Объект.ЕжегодныеОтпуска, СтруктураПараметров);
	
	УстановитьНадписьПраваНаОтпуск();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
		Модуль.УстановитьПредставлениеКлассногоЧинаРанга(ЭтаФорма.КлассныйЧинРангПредставление, Объект.Сотрудник);  
	КонецЕсли;
	
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияСотрудника()

	УстановитьЗначенияПоУмолчанию = Истина;
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаПриема) Тогда
			ДатаСобытия = Объект.ДатаПриема;
		Иначе
			ДатаСобытия = ТекущаяДатаСеанса();
		КонецЕсли;
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ГоловнаяОрганизация", ДатаСобытия);
		Если КадровыеДанные.Количество() > 0 Тогда
			ГоловнаяОрганизацияСотрудника = КадровыеДанные[0].ГоловнаяОрганизация;
			УстановитьЗначенияПоУмолчанию = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если УстановитьЗначенияПоУмолчанию Тогда
		ГоловнаяОрганизацияСотрудника = Справочники.Организации.ПустаяСсылка();
	КонецЕсли; 
	
	СвязиПараметровВыбора = Новый Массив;
	Если ЗначениеЗаполнено(ГоловнаяОрганизацияСотрудника) Тогда
		Связь = Новый СвязьПараметраВыбора("Отбор.ГоловнаяОрганизация", "ГоловнаяОрганизацияСотрудника");
		СвязиПараметровВыбора.Добавить(Связь);
	КонецЕсли; 
		
	Элементы.Организация.СвязиПараметровВыбора  = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	УстановитьВидимостьПредупрежденияОНезаполненномСтаже();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПоказРазмераАванса(Форма)
	РасчетЗарплатыКлиентСервер.УстановитьПоказРазмераАванса(Форма);
КонецПроцедуры	

&НаСервере
Процедура ДатаПриемаПриИзмененииНаСервере()
	
	ПрочитатьВремяРегистрации();
	
	Если ИспользоватьШтатноеРасписание
		И ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания")
		И ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		
		Если Объект.ДатаПриема < ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДолжностьПоШтатномуРасписанию, "ДатаУтверждения") Тогда
			Объект.ДолжностьПоШтатномуРасписанию = Справочники.ШтатноеРасписание.ПустаяСсылка();
		Иначе
			
			Если ЗначениеЗаполнено(Объект.ДатаПриема) Тогда
				ЗаполнитьПоПозицииНаСервере();
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПредставленияКомандВводаСтажей();
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	
	УстановитьОтображениеНадписей();
	
	ПодходящаяДатаДокумента = Документы.ПриемНаРаботу.ПодходящаяДатаДокумента(Объект.ДатаПриема);
	Если ЗначениеЗаполнено(ПодходящаяДатаДокумента)
		И ПодходящаяДатаДокумента < НачалоДня(Объект.Дата) Тогда
		
		Объект.Дата = ПодходящаяДатаДокумента;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоНачисленияУтверждены()
	
	Если ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
		Объект.НачисленияУтверждены = Истина;
		ЗарплатаКадрыРасширенный.УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(ЭтаФорма, "НачисленияУтверждены");
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("НачислениеИтогРазмерГлавное");
	ИменаЭлементов.Добавить("ГруппаСведенияЛевая");
	ИменаЭлементов.Добавить("Показатели");
	ИменаЭлементов.Добавить("КомандныеПанелиЛьгот");
	ИменаЭлементов.Добавить("ГруппаАванс");
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейМногофункциональныхДокументов(ЭтаФорма, ИменаЭлементов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачисленияИтогРазмер",
		"ТолькоПросмотр",
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачислениеИтогРазмерГлавное",
		"ТолькоПросмотр",
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РазмерЛьгот",
		"ТолькоПросмотр",
		Истина);
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказателиГруппа", "Видимость", Ложь);
		КонецЕсли;
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьВидимостьВкладаВФОТРНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма, Элементы.РедактироватьФОТ.Пометка);
		ЗарплатаКадрыРасширенный.УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьДоступностьРегистрацииНачислений();
	
	Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
		Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
		
		Объект.НачисленияУтверждены = ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
		
		УстановитьВидимостьРасчетныхПолей();
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоФОТ(Форма)
	
	Форма.ФОТ = ЗарплатаКадрыРасширенныйКлиентСервер.ИтогиПоФОТ(Форма, ОписаниеТаблицыНачислений());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставленияКомандВводаСтажей()
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаСотрудник = ТаблицаСотрудников.Добавить();
	СтрокаСотрудник.Сотрудник = Объект.Сотрудник;
	СтрокаСотрудник.Период = Объект.ДатаПриема;
	
	ЗарплатаКадрыРасширенный.УстановитьПредставленияКомандВводаСтажей(ЭтаФорма, ТаблицаСотрудников, ОписаниеТаблицыВидовРасчета, 1);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтажа()
	
	УстановитьПредставленияКомандВводаСтажей();
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьТарифнуюСетку()
	
	РазрядыКатегорииДолжностей.ПрочитатьДанныеТарифныхСетокДолжностиВФорму(ЭтаФорма, Объект.Должность, Объект.ДолжностьПоШтатномуРасписанию, Объект.ДатаПриема);
	
КонецПроцедуры

&НаСервере
Процедура ДолжностьПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	ПрочитатьТарифнуюСетку();
	ЗаполнитьРазрядПоУмолчанию();
	ЗаполнитьДанныеТарифнойСеткиНаСервере();
	ЗаполнитьГрейдПоУмолчанию();
	ЗаполнитьЛьготыПоПозиции();
	РассчитатьРазмерЛьготНаСервере();
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	
	ОстаткиОтпусков.ПрименитьНастройкиИспользованияОтпускаЗаВредность(
		Объект.ЕжегодныеОтпуска, ?(ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию), Объект.ДолжностьПоШтатномуРасписанию, Объект.Должность));
		
	УстановитьНадписьПраваНаОтпуск();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТарифнойСеткиНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияПоказателейТарифныхСеток(
		ЭтаФорма, Объект.Начисления, ОписаниеТаблицыНачислений(), 1, ТарифнаяСетка, РазрядКатегория, ВремяРегистрации, ТарифнаяСеткаНадбавки, Объект.РазрядКатегория, , Объект.ПКУ);
		
	ПерезаполнитьДанныеТарифнойСетки = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Объект.Ссылка, Объект.ДатаПриема);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНадписей()
	
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник);
	ЗарплатаКадрыРасширенный.УстановитьТекстНадписиОДокументахВведенныхНаДату(ЭтотОбъект, ВремяРегистрации, 
		МассивСотрудников, Объект.Ссылка, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений, Объект.ИсправленныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваСтавок(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьНачисленияПоПозицииНаСервере();
	ВыполнитьРасчетФОТ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛьготыПоПозиции()
	
	Если ИспользоватьШтатноеРасписание И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ПрочитатьЛьготыПозиции(ЭтотОбъект, Объект.ДолжностьПоШтатномуРасписанию, ОписаниеТаблицыЛьгот(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРазмерЛьготНаКлиенте()
	
	РассчитатьРазмерЛьготНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьРазмерЛьготНаСервере()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.РассчитатьРазмерЛьготВФормеСОднимСотрудником(ЭтотОбъект, ОписаниеТаблицыЛьгот());
		РассчитатьИтогиПоРазмеруЛьгот(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоРазмеруЛьгот(Форма)
	
	Форма.РазмерЛьгот = ЗарплатаКадрыРасширенныйКлиентСервер.ИтогиПоФОТ(Форма, ОписаниеТаблицыЛьгот());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьРазмераЛьгот(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
		"ЛьготыРазмер", "Видимость", Форма.Элементы.РедактироватьРазмерЛьгот.Пометка);

КонецПроцедуры

&НаСервере
Функция СтруктураСОписаниемДокумента()
	
	РеквизитВДанные(Объект);

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным("Документ.ПриемНаРаботу");
	ЗарплатаКадрыРасширенный.ЗаполнитьОбъектПоОбразцу(ОписаниеДокумента, Объект);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

&НаСервере
Функция ТребуетсяВводСтажа()
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("КатегорииСтажа", Документы.БольничныйЛист.КатегорииСтажаВЛисткеНетрудоспособности());
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтажиФизическихЛиц.ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.СтажиФизическихЛиц КАК СтажиФизическихЛиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	               |		ПО СтажиФизическихЛиц.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
	               |			И (Сотрудники.Ссылка = &Сотрудник)
	               |			И (СтажиФизическихЛиц.ВидСтажа.КатегорияСтажа В (&КатегорииСтажа))";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыСтажаВЛисткеНетрудоспособности() Экспорт 
	
	Возврат Документы.БольничныйЛист.ВидыСтажаВЛисткеНетрудоспособности();
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПредупрежденияОНезаполненномСтаже()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтажиНеЗаданыГруппа", "Видимость", ТребуетсяВводСтажа());
	
КонецПроцедуры

#Область ЗаписьДокумента

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	ЗаписатьНаКлиенте(Истина, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено)

	Если РасчетНеобходимоВыполнить Тогда
		РассчитатьФОТНаКлиенте();
	КонецЕсли;
	
	КадровыйУчетРасширенныйКлиент.ПередЗаписьюКадровогоДокументаВФорме(ЭтаФорма, Объект, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);  
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключаемуюКомандуПечатиПодтверждениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", ?(Объект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		ЗаписатьНаКлиенте(Ложь, ПараметрыЗаписи);
		Если Объект.Ссылка.Пустая() Или ЭтаФорма.Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(ДополнительныеПараметры.Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеДанныхКонтрактаДоговора

&НаСервере
Функция ОписаниеФормыРедактирующейДанныеКонтрактаДоговора()
	
	ОписаниеФормы = КонтрактыДоговорыСотрудниковФормы.ОписаниеФормыРедактирующейДанныеКонтрактаДоговора();
	ОписаниеФормы.Вставить("ИмяЭлементаПредставитель", 				"Руководитель");
	ОписаниеФормы.Вставить("ИмяЭлементаДолжностьПредставителя", 	"ДолжностьРуководителя");
	ОписаниеФормы.Вставить("ОснованиеСрочногоДоговораПредыдущее", 	"ОснованиеСрочногоДоговораПредыдущее");
	
	Возврат ОписаниеФормы;
	
КонецФункции

&НаСервере
Процедура СрочныйДоговорПриИзмененииНаСервере()	
	
	Объект.ДатаЗавершенияТрудовогоДоговора = '00010101';
	КонтрактыДоговорыСотрудниковФормы.УстановитьДоступностьПолейСрочногоТрудовогоДоговора(ЭтотОбъект, ОписаниеФормыРедактирующейДанныеКонтрактаДоговора(), Истина, Объект.СрочныйДоговор);
	
	УстановитьОтображениеПодсказкиДлительностиИспытательногоСрока(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидДоговораПриИзмененииНаСервере()
	
	КонтрактыДоговорыСотрудниковФормы.НастроитьФормуПоВидуДоговора(ЭтотОбъект, ОписаниеФормыРедактирующейДанныеКонтрактаДоговора(), Объект.ВидДоговора);
	УстановитьУсловияПриема(ЭтаФорма);
	
	КадровыйУчетРасширенный.УстановитьПараметрыВыбораНачисленийПоОтношениюКДенежномуСодержанию(
		ЭтаФорма,
		ОписаниеТаблицыНачислений(),
		КадровыйУчетРасширенный.ЗначениеПараметраВыбораНачисленийПоОтношениюКДенежномуСодержанию(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПриемаЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Объект.УсловияПриема = ВведенныйТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИныеУсловияДоговораЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Объект.ИныеУсловияДоговора = ВведенныйТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеРабочегоМестаЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Объект.ОборудованиеРабочегоМеста = ВведенныйТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокЗаключенияДоговораЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Объект.СрокЗаключенияДоговора = ВведенныйТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПредставителяНанимателяЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Объект.ОснованиеПредставителяНанимателя = ВведенныйТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАктаГосорганаЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	Объект.ВидАктаГосоргана = ВведенныйТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьУсловияПриемаПозицииШтатногоРасписания()
	
	Если ЗначениеЗаполнено(Объект.ДолжностьПоШтатномуРасписанию) Тогда
		ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(Объект.ДолжностьПоШтатномуРасписанию, Объект.ДатаПриема, Ложь);
		УсловияПриемаПозицииШтатногоРасписания = ДанныеПозиции.УсловияПриема;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЕжегодныеОтпускаСотрудника()
	
	СтрокиТЧЕжегодныеОтпуска = Объект.ЕжегодныеОтпуска.Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СтрокиТЧЕжегодныеОтпуска);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьЕжегодныеОтпуска(ЕжегодныеОтпуска)

	Объект.ЕжегодныеОтпуска.Загрузить(ЕжегодныеОтпуска.Выгрузить());
	
	УстановитьНадписьПраваНаОтпуск();

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПодсказкиДлительностиИспытательногоСрока(Форма)
	
	ТекстПодсказки = "";
	
	Если ЗначениеЗаполнено(Форма.Объект.ДлительностьИспытательногоСрока) Тогда
		
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма, "ДлительностьИспытательногоСрока", ТекстПодсказки);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДлительностьИспытательногоСрока",
		"ОтображениеПодсказки",
		?(ПустаяСтрока(ТекстПодсказки), ОтображениеПодсказки.Кнопка, ОтображениеПодсказки.ОтображатьСправа));
	
КонецПроцедуры

&НаСервере
Процедура ТерриторияПриИзмененииНаСервере()
	
	УстановитьНадписьПраваНаОтпуск();
	
	УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях()
	
	Если ИспользоватьШтатноеРасписание Тогда
		ДолжностьСотрудника = Объект.ДолжностьПоШтатномуРасписанию;
	Иначе
		ДолжностьСотрудника = Объект.Должность;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях(
		ЭтаФорма, Объект.Сотрудник, ВремяРегистрации, Объект.Подразделение, Объект.Организация, Объект.Территория, ДолжностьСотрудника);
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьНадписьПраваНаОтпуск()

	ПраваНаОтпускаЗаполнены = (Объект.ЕжегодныеОтпуска.Количество() > 0);
	
	НадписьПраваНаОтпуск = ОстаткиОтпусков.НадписьПраваНаОтпуск(Объект.ЕжегодныеОтпуска, ТолькоПросмотр);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РедактироватьЕжегодныеОтпуска",
		"Заголовок",
		?(ПраваНаОтпускаЗаполнены, НСтр("ru='Редактировать';uk='Редагувати'"), НСтр("ru='Ввести права на отпуск';uk='Ввести права на відпустку'")));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РедактироватьЕжегодныеОтпуска",
		"Видимость",
		НЕ ТолькоПросмотр);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьПраваНаОтпуск",
		"Видимость",
		ПраваНаОтпускаЗаполнены ИЛИ ТолькоПросмотр);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерСледующегоТрудовогоДоговора(Организация, НомераДоговоровТекущегоДокумента)
	
	Возврат КадровыйУчетРасширенный.НомерСледующегоТрудовогоДоговора(Организация, НомераДоговоровТекущегоДокумента);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗапомнитьРазмерАвансаПоУмолчанию(Аванс, Организация, СпособРасчетаАванса)
	
	РасчетЗарплатыФормы.ЗапомнитьРазмерАвансаПоУмолчанию(
		Аванс, Организация, СпособРасчетаАванса);
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРазмерАвансаПоУмолчанию(УстановитьРазмерАванса)
	
	РазмерАвансаПоУмолчанию = РасчетЗарплатыФормы.РазмерАвансаВПроцентахПоУмолчанию(Объект.Организация);
	Если УстановитьРазмерАванса Тогда
		Если Объект.СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа Тогда
			Объект.Аванс = РазмерАвансаПоУмолчанию;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ИспользоватьИсториюШтатногоРасписания()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	
КонецФункции