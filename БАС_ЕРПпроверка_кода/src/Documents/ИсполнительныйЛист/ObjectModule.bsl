#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Сотрудник") Тогда
			ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения.Сотрудник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;		
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
		Сумма = Неопределено;
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
		ВидБазы = Неопределено;
	КонецЕсли;
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Процентом Тогда
		Процент = Неопределено;
	КонецЕсли;
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Долей Тогда
		Числитель = Неопределено;
		Знаменатель = Неопределено;
	КонецЕсли;
	
	Если ВидБазы <> Перечисления.ВидыБазыУдержанияПоИсполнительномуДокументу.Заработок Тогда
		УчитыватьБольничныеЛисты = Неопределено;
	КонецЕсли;
	
	Если ВидБазы <> Перечисления.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум Тогда
		ПрожиточныйМинимум = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидБазы <> Перечисления.ВидыБазыУдержанияПоИсполнительномуДокументу.ПрожиточныйМинимум Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПрожиточныйМинимум");
	КонецЕсли;
	
	Если СпособРасчета = Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидБазы");
	КонецЕсли;
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.ФиксированнойСуммой Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сумма");
	КонецЕсли;
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Процентом Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Процент");
	КонецЕсли;
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаУдержанияПоИсполнительномуДокументу.Долей Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Числитель");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Знаменатель");
	КонецЕсли;
	
	Если ВидИсполнительногоДокумента <> Перечисления.ВидыИсполнительныхДокументов.СоглашениеОбУплатеАлиментов Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Дети");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлатежныйАгент) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "УдержаниеВознагражденияПлатежногоАгента");
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ПроверитьПериодРегистратораНачисленийУдержаний(ДатаДействия, ДатаОкончания, ЭтотОбъект, "ДатаОкончания", Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения(); 
	
	ДвиженияПоДетям = ДанныеДляПроведения.Дети;
	
	ДвиженияУдержаний = Новый Структура;
	ДвиженияУдержаний.Вставить("ДанныеПлановыхУдержаний", ДанныеДляПроведения.ПлановыеУдержания);
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхУдержаний(Движения, ДвиженияУдержаний);
	
	Если ДвиженияПоДетям.Количество() Тогда
		РасчетЗарплатыРасширенный.СформироватьДвиженияПоРегиструДетиПоИсполнительномуДокументу(Движения, ДвиженияПоДетям);
	КонецЕсли;
	
	ИсполнительныеЛисты.ЗарегистрироватьУсловияИсполнительногоЛиста(
		Движения, ДатаДействия, Ссылка, ДанныеДляПроведения.УсловияИсполнительногоЛиста);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучателиУдержаний = РасчетЗарплатыРасширенный.НоваяТаблицаПолучателиУдержаний();
	
	НоваяСтрока = ПолучателиУдержаний.Добавить();
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	НоваяСтрока.Удержание = Удержание;
	НоваяСтрока.Контрагент = Получатель;
	
	НоваяСтрока = ПолучателиУдержаний.Добавить();
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
	НоваяСтрока.Удержание = УдержаниеВознагражденияПлатежногоАгента;
	НоваяСтрока.Контрагент = ПлатежныйАгент;
	
	РасчетЗарплатыРасширенный.ЗарегистрироватьПолучателяУдержания(ПолучателиУдержаний, Организация, Ссылка);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсполнительныйЛист.ДатаДействия КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ИсполнительныйЛист.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ИсполнительныйЛист.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ИсполнительныйЛист.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ИсполнительныйЛист.ФизическоеЛицо,
	|	ИсполнительныйЛист.Организация КАК Организация,
	|	ИсполнительныйЛист.Удержание,
	|	ИсполнительныйЛист.Ссылка КАК ДокументОснование,
	|	0 КАК Размер,
	|	ИСТИНА КАК Используется
	|ИЗ
	|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|ГДЕ
	|	ИсполнительныйЛист.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсполнительныйЛист.ДатаДействия,
	|	ВЫБОР
	|		КОГДА ИсполнительныйЛист.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ИсполнительныйЛист.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ИсполнительныйЛист.ДатаОкончания
	|	КОНЕЦ,
	|	ИсполнительныйЛист.ФизическоеЛицо,
	|	ИсполнительныйЛист.Организация,
	|	ИсполнительныйЛист.УдержаниеВознагражденияПлатежногоАгента,
	|	ИсполнительныйЛист.Ссылка,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|ГДЕ
	|	ИсполнительныйЛист.Ссылка = &ДокументСсылка
	|	И ИсполнительныйЛист.ПлатежныйАгент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительныйЛист.СпособРасчета,
	|	ИсполнительныйЛист.ВидБазы,
	|	ИсполнительныйЛист.Процент,
	|	ИсполнительныйЛист.Сумма,
	|	ИсполнительныйЛист.Числитель,
	|	ИсполнительныйЛист.Знаменатель,
	|	ИсполнительныйЛист.ПрожиточныйМинимум,
	|	ИсполнительныйЛист.Предел,
	|	ИсполнительныйЛист.УчитыватьБольничныеЛисты,
	|	ИсполнительныйЛист.Получатель,
	|	ИсполнительныйЛист.ПлатежныйАгент,
	|	ИсполнительныйЛист.ТарифПлатежногоАгента,
	|	ИсполнительныйЛист.УвеличиватьУдержанияДоМинимума
	|ИЗ
	|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
	|ГДЕ
	|	ИсполнительныйЛист.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнительныйЛистДети.Ссылка КАК ИсполнительныйДокумент,
	|	ИсполнительныйЛистДети.ФизическоеЛицо КАК Ребенок,
	|	ИсполнительныйЛистДети.ДатаРождения,
	|	ИсполнительныйЛистДети.ДатаОкончания,
	|	ИсполнительныйЛистДети.Нетрудоспособен,
	|	ИсполнительныйЛистДети.Ссылка.Дата КАК Период,
	|	ИСТИНА КАК Учитывать,
	|	ИсполнительныйЛистДети.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ИсполнительныйЛист.Дети КАК ИсполнительныйЛистДети
	|ГДЕ
	|	ИсполнительныйЛистДети.Ссылка = &ДокументСсылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПлановыеУдержания = РезультатыЗапроса[0].Выгрузить();	
	
	//Если УвеличиватьУдержанияДоМинимума Тогда
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ТабДети.ФизическоеЛицо,
	//	|	ТабДети.ДатаРождения,
	//	|	ТабДети.ДатаОкончания,
	//	|	ТабДети.Нетрудоспособен
	//	|ПОМЕСТИТЬ ТабДетиОбщая
	//	|ИЗ
	//	|	&ТабДети КАК ТабДети
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ТабДетиОбщая.ФизическоеЛицо,
	//	|	ТабДетиОбщая.ДатаРождения,
	//	|	ТабДетиОбщая.ДатаОкончания,
	//	|	ТабДетиОбщая.Нетрудоспособен
	//	|ИЗ
	//	|	ТабДетиОбщая КАК ТабДетиОбщая
	//	|ГДЕ
	//	|	ТабДетиОбщая.ДатаОкончания > &МаксимальнаяДата";
	//	
	//	Запрос.УстановитьПараметр("ТабДети", Дети.Выгрузить());
	//	Запрос.УстановитьПараметр("МаксимальнаяДата", Дата);
	//	Результат = Запрос.Выполнить().Выгрузить();
	//	Результат.Колонки.Добавить("СуммаУдержания");
	//	Для Каждого Строка из Результат Цикл
	//		
	//		Если Строка.Нетрудоспособен Тогда
	//			//нетрудоспособен
	//			СоциальнаяГруппа = Перечисления.СоциальныеГруппыНаселения.НеТрудоспособные;
	//		ИначеЕсли ДобавитьМесяц(НачалоМесяца(Строка.ДатаРождения), 6*12) >= НачалоМесяца(Дата) Тогда
	//			//До 6 лет
	//			СоциальнаяГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо6;
	//		Иначе 
	//			//до 18 лет
	//			СоциальнаяГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо18;
	//		КонецЕсли;	
	//		ДанныеПрожиточногоМинимума = РегистрыСведений.ПрожиточныеМинимумы.СрезПоследних(Дата, Новый Структура("СоциальнаяГруппа",СоциальнаяГруппа)); 
	//		Строка.СуммаУдержания = ДанныеПрожиточногоМинимума[0].Размер * 0.5;
	//	КонецЦикла;	
	//	ПлановыеУдержания[0].Размер = Результат.Итог("СуммаУдержания");  
	//КонецЕсли;
	
	Возврат Новый Структура("ПлановыеУдержания, УсловияИсполнительногоЛиста, Дети", 
	ПлановыеУдержания, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатыЗапроса[1].Выгрузить()[0]), РезультатыЗапроса[2].Выгрузить());
	
КонецФункции

#КонецОбласти

#КонецЕсли
