#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическиеЛица.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли; 
	
	// Порядок выплаты заполняем значением по умолчанию (важно для документоа, созданных до появления реквизита ПорядокВыплаты)
	Если ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка() Тогда
		ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	КонецЕсли;
	
	ПериодыПерерасчета = "";
	
	ПериодыПерерасчетов = НачисленияПерерасчет.Выгрузить(, "ДатаНачала");
	ПериодыПерерасчетов.Свернуть("ДатаНачала");
	ПериодыПерерасчетов.Сортировать("ДатаНачала");
	
	НепрерывныеПериоды = Новый ТаблицаЗначений;
	НепрерывныеПериоды.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	НепрерывныеПериоды.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата"));
	
	НепрерывныйПериод = Неопределено;
	Для каждого СтрокаПериода Из ПериодыПерерасчетов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПериода.ДатаНачала) Тогда
			Продолжить;
		КонецЕсли;
		
		ПериодПерерасчета = НачалоМесяца(СтрокаПериода.ДатаНачала);
		
		Если НепрерывныйПериод = Неопределено ИЛИ НепрерывныйПериод.Окончание + 1 < ПериодПерерасчета Тогда
			НепрерывныйПериод = НепрерывныеПериоды.Добавить();
			НепрерывныйПериод.Начало = ПериодПерерасчета;
		КонецЕсли;
		
		НепрерывныйПериод.Окончание = КонецМесяца(ПериодПерерасчета);
		
	КонецЦикла;
	
	ДобавитьЗапятую = Ложь;
	Для каждого НепрерывныйПериод Из НепрерывныеПериоды Цикл
		
		Если ДобавитьЗапятую Тогда
			ПериодыПерерасчета = ПериодыПерерасчета + ", ";
		Иначе
			ДобавитьЗапятую = Истина;
		КонецЕсли; 
		
		Если НепрерывныйПериод.Начало = НачалоМесяца(НепрерывныйПериод.Окончание) Тогда
			ПредставлениеПериода = Формат(НепрерывныйПериод.Начало, "ДФ='ММММ гггг'");
		Иначе
			ПредставлениеПериода = Формат(НепрерывныйПериод.Начало, "ДФ='ММММ гггг'") + " - " + Формат(НепрерывныйПериод.Окончание, "ДФ='ММММ гггг'");
		КонецЕсли;
		
		ПериодыПерерасчета = ПериодыПерерасчета + ПредставлениеПериода;
		
	КонецЦикла;
	
	ДокументПроведен =  Неопределено;
	ДополнительныеСвойства.Свойство("Проведен", ДокументПроведен);
	
	Если Проведен ИЛИ ДокументПроведен = Истина Тогда
		ПерерасчетЗарплаты.ПериодыРасчетаСотрудников(ЭтотОбъект);
	КонецЕсли; 
	
	Документы.НачислениеЗарплаты.ЗаполнитьПредставлениеРаспределенияРезультатовРасчета(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьПериодДействияНачислений(Отказ);
	
	ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
	ПараметрыПроверки.Организация = Организация;
	ПараметрыПроверки.ПериодРегистрации = МесяцНачисления;
	ПараметрыПроверки.Документ = Ссылка;
	ПараметрыПроверки.Начисления = Начисления;
	
	РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		
		Для каждого СтрокаПоДоговору Из НачисленияПоДоговорам Цикл
			
			Если ЗначениеЗаполнено(СтрокаПоДоговору.ДокументОснование) Тогда
				
				СотрудникДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПоДоговору.ДокументОснование, "Сотрудник");
				Если СтрокаПоДоговору.Сотрудник <> СотрудникДоговора Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В строке %1, табличной части ""Начисления по договорам"" для сотрудника %2 указан договор другого сотрудника (%3)';uk='У рядку %1, табличній частині ""Нарахування за договорами"" для співробітника %2 вказаний договір іншого співробітника (%3)'"),
						СтрокаПоДоговору.НомерСтроки,
						СтрокаПоДоговору.Сотрудник,
						СотрудникДоговора);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, , "Объект.НачисленияПоДоговорам[" + Формат(СтрокаПоДоговору.НомерСтроки -1, "ЧН=; ЧГ=") + "].ДокументОснование" , , Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не РежимДоначисления Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПорядокВыплаты");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
	КонецЕсли;
	
	ПроверитьВыплатуПособийУчастникомПроектаПоПрямымВыплатамФСС(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.НачислениеЗарплаты.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
	// Резервы отпусков 3286
	ДанныеДляПроведения = ОтражениеЗарплатыВУчете.НоваяСтруктураРезультатыРасчетаЗарплаты();
	ДанныеДляПроведения.НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить();
	ДанныеДляПроведения.СтраховыеВзносы = Движения.СтраховыеВзносыПоФизическимЛицам.Выгрузить();
	СтрокаСписокТаблиц = "НачисленнаяЗарплатаИВзносы";
	// Конец
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПерерасчетЗарплаты.ВосстановлениеПерерасчетов(Ссылка);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.


Процедура ПроверитьПериодДействияНачислений(Отказ)
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = ЭтотОбъект.Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Начисления", "Начисления"));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Пособия", "Пособия"));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Удержания", "Удержания", "Удержание"));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
КонецПроцедуры

Процедура ПроверитьВыплатуПособийУчастникомПроектаПоПрямымВыплатамФСС(Отказ)
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
