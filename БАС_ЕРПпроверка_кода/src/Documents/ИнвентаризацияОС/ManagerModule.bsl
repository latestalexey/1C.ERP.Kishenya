
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список команд создания на основании.
//
// Параметры:
// 		КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.ПеремещениеОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.ПринятиеКУчетуОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.СписаниеОС.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ИнвентаризацияОС) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ИнвентаризацияОС.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ИнвентаризацияОС);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
//
// Параметры:
// 		КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	Возврат; //В дальнейшем будет добавлен код команд
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт




	// Инвентаризационная опись ОС
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ИнвентаризационнаяОпись";
	КомандаПечати.Представление = НСтр("ru='Инвентаризационная опись';uk='Інвентаризаційний опис'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Сличительная ведомость
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СличительнаяВедомость";
	КомандаПечати.Представление = НСтр("ru='Сличительная ведомость';uk='Звіряльна відомість'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Инвентарный список ОС (ОЗ-9)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОЗ9";
	КомандаПечати.Представление = НСтр("ru='Форма ОЗ-9';uk='Форма ОЗ-9'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИнвентаризационнаяОпись") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИнвентаризационнаяОпись", НСтр("ru='Инвентаризационная опись';uk='Інвентаризаційний опис'"), 
			ПечатьИнвентаризационнаяОпись(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИнвентаризацияОС.ПФ_MXL_UK_ИнвентаризационнаяОпись");
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СличительнаяВедомость") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СличительнаяВедомость", НСтр("ru='Сличительная ведомость';uk='Звіряльна відомість'"), 
			ПечатьСличительнаяВедомость(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИнвентаризацияОС.ПФ_MXL_UK_СличительнаяВедомость");
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОЗ9") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,"ОЗ9", НСтр("ru='Форма ОЗ-9';uk='Форма ОЗ-9'"), 
			ПечатьОЗ9(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИнвентаризацияОС.ПФ_MXL_UK_ОЗ9");
		
	КонецЕсли;
	
	
КонецПроцедуры


// Функция формирует табличный документ по регламентированной форме ОЗ-9
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
Функция ПечатьОЗ9(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент         = Новый ТабличныйДокумент();
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияОС.ПФ_MXL_UK_ОЗ9");
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",         Ссылка);
		Запрос.УстановитьПараметр("ТекДата",        Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("ТекОрганизация", Ссылка.Организация);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ИнвентаризацияОС.Дата                                   КАК ДатаАкта,
		|	ИнвентаризацияОС.Номер                                  КАК НомерАкта,
		|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК Подразделение,
		|	ВЫРАЗИТЬ(ИнвентаризацияОС.Организация.НаименованиеПолное 
		|	                          КАК СТРОКА(1000))             КАК Организация,
		|	ИнвентаризацияОС.Организация.КодПоЕДРПОУ                КАК ЕДРПОУ
		|ИЗ
		|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
		|ГДЕ
		|	ИнвентаризацияОС.Ссылка = &Ссылка";
		
		
		ВыборкаПоШапке = Запрос.Выполнить().Выбрать();
		ВыборкаПоШапке.Следующий();
		
		СписокОС = Ссылка.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаДок"             , Ссылка.Дата);
		Запрос.УстановитьПараметр("МоментДок"           , Ссылка.МоментВремени());
		Запрос.УстановитьПараметр("Организация"         , Ссылка.Организация);
		Запрос.УстановитьПараметр("Ссылка"              , Ссылка.Ссылка);
		Запрос.УстановитьПараметр("СписокОС"            , СписокОС);
		Запрос.УстановитьПараметр("СостояниеСнятоСУчета", Перечисления.СостоянияОС.СнятоСУчета);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияОС.Период                        КАК ДатаДок,
		|	ПервоначальныеСведенияОС.Регистратор.Номер             КАК НомерДок,
		|	ПервоначальныеСведенияОС.ИнвентарныйНомер              КАК ИнвентарныйНомер,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК НаименованиеОС,
		|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимость       КАК БалансоваяСтоимость,
		|	СостояниеОС.НомерСписания                              КАК НомерСписания,
		|	СостояниеОС.ДатаСписания                               КАК ДатаСписания,
		|	СостояниеОС.ПричинаСписания                            КАК ПричинаСписания
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|			               &МоментДок,
		|			               Организация = &Организация
		|			               И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			(ВЫБРАТЬ
		|				СостоянияОС.ОсновноеСредство  КАК ОсновноеСредство,
		|				СостоянияОС.Регистратор.Номер КАК НомерСписания,
		|				СостоянияОС.ДатаСостояния     КАК ДатаСписания,
		|				ВЫБОР
		|					КОГДА СостоянияОС.Регистратор ССЫЛКА Документ.СписаниеОС
		|						ТОГДА СостоянияОС.Регистратор.ПричинаСписания
		|					ИНАЧЕ ""Передача""
		|				КОНЕЦ                         КАК ПричинаСписания
		|			ИЗ
		|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
		|			ГДЕ
		|				СостоянияОС.Организация = &Организация
		|				И СостоянияОС.ОсновноеСредство В(&СписокОС)
		|				И СостоянияОС.Состояние = &СостояниеСнятоСУчета
		|				И СостоянияОС.ДатаСостояния <= &ДатаДок) КАК СостояниеОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СостояниеОС.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Ссылка";

		ВыборкаПоОС = Запрос.Выполнить().Выбрать();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаПоШапке);
		ОбластьМакета.Параметры.Организация = СокрП(ВыборкаПоШапке.Организация);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Номера = Макет.ПолучитьОбласть("Номера");
		ТабличныйДокумент.Вывести(Номера);
		ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("R"+ ТабличныйДокумент.ВысотаТаблицы);
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		
		Пока ВыборкаПоОС.Следующий() Цикл
			
			ОбластьСтрока.Параметры.Заполнить(ВыборкаПоОС);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
	
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);

	КонецЦикла;	
	
	Возврат ТабличныйДокумент;

КонецФункции // ПечатьОЗ9()

Функция ПечатьИнвентаризационнаяОпись(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_ИнвентаризационнаяОпись";
	
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб             = Истина;
	
	// Всегда на украинском языке
	КодЯзыкаПечать = "uk";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияОС.ПФ_MXL_UK_ИнвентаризационнаяОпись");
	
	// Получаем области макета для вывода в табличный документ
	Шапка            = Макет.ПолучитьОбласть("Шапка");
	Подпись          = Макет.ПолучитьОбласть("Подпись");
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");	
	Итоги            = Макет.ПолучитьОбласть("Итоги");	
	Дно	             = Макет.ПолучитьОбласть("Дно");	
	СтрокаСтраница 	 = Макет.ПолучитьОбласть("СтрокаСтраница");	
	НумерацияКолонокТаблицы = Макет.ПолучитьОбласть("НумерацияКолонокТаблицы");	

	// Создаем колонки Таблицы итогов
	ТаблицаИтогов = Новый ТаблицаЗначений();
	ТаблицаИтогов.Колонки.Добавить("ПорядковыйНомерИтогов");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеФактическое");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьФактическая");
	ТаблицаИтогов.Колонки.Добавить("ИтогНаличиеПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогСтоимостьПоДаннымУчета");
	ТаблицаИтогов.Колонки.Добавить("ИтогНакопленнаяАмортизация");
	ТаблицаИтогов.Колонки.Добавить("ИтогБалансоваяСтоимость");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru='Председатель комиссии';uk='Голова комісії'",КодЯзыкаПечать));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru='Члены комиссии';uk='Члени комісії'",КодЯзыкаПечать));
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияОС.Дата КАК Дата,
		|	ИнвентаризацияОС.Номер КАК Номер,
		|	ИнвентаризацияОС.Организация КАК Организация,
		|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
		|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
		|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
		|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
		|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
		|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер
		|ИЗ
		|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
		|ГДЕ
		|	ИнвентаризацияОС.Ссылка = &Ссылка";
		
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Ссылка);
		
		СписокОС = Ссылка.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("Организация", Ссылка.Организация);
		Запрос.УстановитьПараметр("Дата",        Ссылка.Дата);
		Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
		Запрос.УстановитьПараметр("СубконтоОС",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
		|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК ОсновноеСредствоНаименованиеПолное,
		|	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
		|	ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	ИнвентаризацияОСОС.ОсновноеСредство.Изготовитель КАК Изготовитель,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
		|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
		|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НаличиеПоДаннымУчета,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НаличиеФактическое,
		|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
		|	ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
		|	МестонахождениеОСБухгалтерскийУчет.МОЛ КАК МОЛ,
		|	ИнвентаризацияОСОС.НакопленнаяАмортизация КАК НакопленнаяАмортизация,
		|	(ИнвентаризацияОСОС.СтоимостьПоДаннымУчета - ЕстьNULL(АмортизацияОС.СуммаОстатокКт, 0)) КАК БалансоваяСтоимость
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|		&Дата,Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК СчетаБухгалтерскогоУчетаОС
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Дата, , &СубконтоОС, Организация = &Организация И Субконто1 В (&ОсновноеСредство)) КАК АмортизацияОС
		|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = АмортизацияОС.Субконто1
		|			И СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации = АмортизацияОС.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПараметрыАмортизацииОСБухгалтерскийУчет
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчет
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	МОЛ	
		|";
		
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата);
		
		ВыборкаМОЛ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаМОЛ.Следующий() Цикл
			
			ВыборкаОС = ВыборкаМОЛ.Выбрать();
			
			СписокСчетов = Новый Массив;
			СтрокаСчетов = "";
			Пока ВыборкаОС.Следующий() Цикл
				СчетУчета = ВыборкаОС.СчетУчета; 
				Если СписокСчетов.Найти(СчетУчета) = Неопределено Тогда
					СписокСчетов.Добавить(СчетУчета);
					
					Если НЕ ПустаяСтрока(СтрокаСчетов) Тогда
						СтрокаСчетов = СтрокаСчетов + ", " + СокрЛП(СчетУчета);
					Иначе	
						СтрокаСчетов = СокрЛП(СчетУчета);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	
			
			ВыборкаОС.Сбросить();
			
			Если ТабДокумент.КоличествоСтраниц() > 0 Тогда 
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;	
			
			//////////////////////////////////////////////////////////////////////
			// 1-я страница формы
			
			// Выведем шапку документа
			
			Шапка.Параметры.Заполнить(Док);
			Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,"ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,ИнформацияОСтатусеПлательщикаНалогов",,КодЯзыкаПечать);
			Шапка.Параметры.ОрганизацияКодПоОКПО = БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОбОрганизации);
			Шапка.Параметры.Подразделение        = Док.ПодразделениеПредставление;
			
			//Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
			Шапка.Параметры.ДатаДокумента  		= Док.Дата;
			
			Шапка.Параметры.СписокСчетов  		= СтрокаСчетов;
			
			//ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Ссылка.Организация, ВыборкаМОЛ.МОЛ, Ссылка.Дата);
			ОсновныеСотрудникиФизическихЛицМОЛ = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ВыборкаМОЛ.МОЛ, Истина, Ссылка.Организация, Ссылка.Дата);
			Если ЗначениеЗаполнено(ОсновныеСотрудникиФизическихЛицМОЛ) Тогда
				Для каждого Строка Из ОсновныеСотрудникиФизическихЛицМОЛ Цикл
				    ДанныеМОЛВыборка = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Строка.Сотрудник, "Должность", Ссылка.Дата);			
				КонецЦикла;
				Для каждого СтрокаДанныеМОЛ Из ДанныеМОЛВыборка Цикл			
					ДанныеМОЛДолжность 		= СтрокаДанныеМОЛ.Должность;
					ДанныеМОЛПредставление 	= СтрокаДанныеМОЛ.ФизическоеЛицо;			
				КонецЦикла;
			КонецЕсли;
			
			Шапка.Параметры.Должность  			= ДанныеМОЛДолжность;
			Шапка.Параметры.РасшифровкаПодписи  = ДанныеМОЛПредставление;
			
			ТабДокумент.Вывести(Шапка);
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			//////////////////////////////////////////////////////////////////////
			// 2-я страница формы
			
			// Выведем заголовок таблицы	
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			ТабДокумент.Вывести(НумерацияКолонокТаблицы);
			
			ПорядковыйНомерИтогов = 1; // счетчик количества итоговых строк в таблице
			
			НаличиеФактическоеПоСтранице     = 0;
			СтоимостьФактическаяПоСтранице   = 0;
			НаличиеПоДаннымУчетаПоСтранице   = 0;
			СтоимостьПоДаннымУчетаПоСтранице = 0;
			
			НакопленнаяАмортизацияПоСтранице = 0;
			БалансоваяСтоимостьПоСтранице 	 = 0;
			
			ПорядковыйНомерСтроки = 0; // счетчик количества строк в таблице
			
			ТаблицаИтогов.Очистить();
			
			// Выведем строки таблицы
			Пока ВыборкаОС.Следующий() Цикл
				
				СтрокаОС = ВыборкаОС;
				
				ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
				
				СтрокаТаблицы   = Макет.ПолучитьОбласть("СтрокаТаблицы");
				
				СтрокаТаблицы.Параметры.Заполнить(СтрокаОС);
				
				СтрокаТаблицы.Параметры.НомерСтроки = ПорядковыйНомерСтроки;
				
				Если ЗначениеЗаполнено(СтрокаОС.Изготовитель) Тогда
					СтрокаТаблицы.Параметры.ОсновноеСредствоНаименованиеПолное = СокрЛП(СтрокаТаблицы.Параметры.ОсновноеСредствоНаименованиеПолное) + " (виробник: " + СокрЛП(СтрокаОС.Изготовитель) + ")";
				КонецЕсли;	
				
				// Присвоим имена с номерами строк областям таблицы.
				// Номера потребуются для включения/отключения видимости значений в ячейках.
				СтрокаТаблицы.Области.НаличиеФактическое.Имя     = "НаличиеФактическое" + СтрокаОС.НомерСтроки;
				СтрокаТаблицы.Области.СтоимостьФактическая.Имя   = "СтоимостьФактическая" + СтрокаОС.НомерСтроки;
				СтрокаТаблицы.Области.НаличиеПоДаннымУчета.Имя   = "НаличиеПоДаннымУчета" + СтрокаОС.НомерСтроки;
				СтрокаТаблицы.Области.СтоимостьПоДаннымУчета.Имя = "СтоимостьПоДаннымУчета" + СтрокаОС.НомерСтроки;
				
				СтрокаСПодвалом = Новый Массив;
				СтрокаСПодвалом.Добавить(СтрокаТаблицы);
				СтрокаСПодвалом.Добавить(ИтогоПоСтранице);
				СтрокаСПодвалом.Добавить(Итоги);
				
				Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
					
					// Добавим значения итогов по странице в таблицу итогов.
					// Они потребуются при включении видимости значений ячеек.
					НоваяСтрока = ТаблицаИтогов.Добавить();
					НоваяСтрока.ПорядковыйНомерИтогов 		= ПорядковыйНомерИтогов;
					НоваяСтрока.ИтогНаличиеФактическое 		= НаличиеФактическоеПоСтранице;
					НоваяСтрока.ИтогСтоимостьФактическая 	= СтоимостьФактическаяПоСтранице;
					НоваяСтрока.ИтогНаличиеПоДаннымУчета 	= НаличиеПоДаннымУчетаПоСтранице;
					НоваяСтрока.ИтогСтоимостьПоДаннымУчета 	= СтоимостьПоДаннымУчетаПоСтранице;
					НоваяСтрока.ИтогНакопленнаяАмортизация 	= НакопленнаяАмортизацияПоСтранице;
					НоваяСтрока.ИтогБалансоваяСтоимость	  	= БалансоваяСтоимостьПоСтранице;
					
					ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Выведем заголовок таблицы	
					//ТабДокумент.Вывести(ЗаголовокТаблицы);
					ТабДокумент.Вывести(НумерацияКолонокТаблицы);
					
					НаличиеФактическоеПоСтранице     = 0;
					СтоимостьФактическаяПоСтранице   = 0;
					НаличиеПоДаннымУчетаПоСтранице   = 0;
					СтоимостьПоДаннымУчетаПоСтранице = 0;
					
					НакопленнаяАмортизацияПоСтранице = 0;
					БалансоваяСтоимостьПоСтранице    = 0;
					
					
				КонецЕсли;
				
				ТабДокумент.Вывести(СтрокаТаблицы);
				
				НаличиеФактическоеПоСтранице     = НаличиеФактическоеПоСтранице + СтрокаОС.НаличиеФактическое;
				СтоимостьФактическаяПоСтранице   = СтоимостьФактическаяПоСтранице + СтрокаОС.СтоимостьФактическая;
				НаличиеПоДаннымУчетаПоСтранице   = НаличиеПоДаннымУчетаПоСтранице + СтрокаОС.НаличиеПоДаннымУчета;
				СтоимостьПоДаннымУчетаПоСтранице = СтоимостьПоДаннымУчетаПоСтранице + СтрокаОС.СтоимостьПоДаннымУчета;
				
				НакопленнаяАмортизацияПоСтранице = НакопленнаяАмортизацияПоСтранице + СтрокаОС.НакопленнаяАмортизация;
				БалансоваяСтоимостьПоСтранице    = БалансоваяСтоимостьПоСтранице + СтрокаОС.БалансоваяСтоимость;
				
			КонецЦикла;		
			
			ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			
			// Присвоим имена с порядковыми номерами итогов областям таблицы.
			// Номера потребуются для включения/отключения видимости значений в ячейках.
			ИтогоПоСтранице.Области.ИтогНаличиеФактическое.Имя     = "ИтогНаличиеФактическое" + ПорядковыйНомерИтогов;
			ИтогоПоСтранице.Области.ИтогСтоимостьФактическая.Имя   = "ИтогСтоимостьФактическая" + ПорядковыйНомерИтогов;
			ИтогоПоСтранице.Области.ИтогНаличиеПоДаннымУчета.Имя   = "ИтогНаличиеПоДаннымУчета" + ПорядковыйНомерИтогов;
			ИтогоПоСтранице.Области.ИтогСтоимостьПоДаннымУчета.Имя = "ИтогСтоимостьПоДаннымУчета" + ПорядковыйНомерИтогов;
			
			// Добавим значения итогов по странице в таблицу итогов.
			// Они потребуются при включении видимости значений ячеек.
			НоваяСтрока = ТаблицаИтогов.Добавить();
			НоваяСтрока.ПорядковыйНомерИтогов 		= ПорядковыйНомерИтогов;
			НоваяСтрока.ИтогНаличиеФактическое 		= НаличиеФактическоеПоСтранице;
			НоваяСтрока.ИтогСтоимостьФактическая 	= СтоимостьФактическаяПоСтранице;
			НоваяСтрока.ИтогНаличиеПоДаннымУчета 	= НаличиеПоДаннымУчетаПоСтранице;
			НоваяСтрока.ИтогСтоимостьПоДаннымУчета 	= СтоимостьПоДаннымУчетаПоСтранице;
			НоваяСтрока.ИтогНакопленнаяАмортизация 	= НакопленнаяАмортизацияПоСтранице;
			НоваяСтрока.ИтогБалансоваяСтоимость	  	= БалансоваяСтоимостьПоСтранице;

			ИтогСтоимостьФактическая   = ТаблицаИтогов.Итог("ИтогСтоимостьФактическая");
			ИтогНаличиеФактическое     = ТаблицаИтогов.Итог("ИтогНаличиеФактическое");
			ИтогСтоимостьПоДаннымУчета = ТаблицаИтогов.Итог("ИтогСтоимостьПоДаннымУчета");
			ИтогНаличиеПоДаннымУчета   = ТаблицаИтогов.Итог("ИтогНаличиеПоДаннымУчета");
			ИтогНакопленнаяАмортизация = ТаблицаИтогов.Итог("ИтогНакопленнаяАмортизация");
			ИтогБалансоваяСтоимость    = ТаблицаИтогов.Итог("ИтогБалансоваяСтоимость");
			
			// Выведем заголовок итогов по странице
			ИтогоПоСтранице.Параметры.ИтогСтоимостьФактическая   = ИтогСтоимостьФактическая;
			ИтогоПоСтранице.Параметры.ИтогНаличиеФактическое     = ИтогНаличиеФактическое;
			ИтогоПоСтранице.Параметры.ИтогСтоимостьПоДаннымУчета = ИтогСтоимостьПоДаннымУчета;
			ИтогоПоСтранице.Параметры.ИтогНаличиеПоДаннымУчета   = ИтогНаличиеПоДаннымУчета;
			ИтогоПоСтранице.Параметры.ИтогНакопленнаяАмортизация = ИтогНакопленнаяАмортизация;
			ИтогоПоСтранице.Параметры.ИтогБалансоваяСтоимость 	 = ИтогБалансоваяСтоимость;
			
			//ТабДокумент.Вывести(СтрокаСтраница);
			ТабДокумент.Вывести(ИтогоПоСтранице);
			
			Итоги = Макет.ПолучитьОбласть("Итоги");	
			
			// Присвоим имена с порядковыми номерами итогов областям таблицы.
			// Номера потребуются для включения/отключения видимости значений в ячейках.
			Итоги.Области.КоличествоФактическоеПрописью.Имя   = "КоличествоФактическоеПрописью" + ПорядковыйНомерИтогов;
			Итоги.Области.СтоимостьФактическаяПрописью.Имя    = "СтоимостьФактическаяПрописью" + ПорядковыйНомерИтогов;
			
			КоличествоФактическоеПрописью = ЧислоПрописью(ИтогНаличиеФактическое,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,ж,,,,,0");
			СтоимостьФактическаяПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогСтоимостьФактическая, Константы.ВалютаРегламентированногоУчета.Получить(),,КодЯзыкаПечать);
			
			КоличествоПрописью 	= ЧислоПрописью(ИтогНаличиеПоДаннымУчета,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,ж,,,,,0");
			СуммаПрописью  		= РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтогСтоимостьПоДаннымУчета, Константы.ВалютаРегламентированногоУчета.Получить(),,КодЯзыкаПечать);
			
			// Выведем итоговые строки
			Итоги.Параметры.КоличествоПорядковыхНомеровПрописью = ЧислоПрописью(ПорядковыйНомерСтроки,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать), ",,,м,,,,,0");
			Итоги.Параметры.КоличествоФактическоеПрописью       = КоличествоФактическоеПрописью;
			Итоги.Параметры.СтоимостьФактическаяПрописью        = СтоимостьФактическаяПрописью;
			Итоги.Параметры.КоличествоПрописью       			= КоличествоПрописью;
			Итоги.Параметры.СуммаПрописью        				= СуммаПрописью;
			
			ТабДокумент.Вывести(Итоги);
			
			ПорядковыйНомерИтогов = ПорядковыйНомерИтогов + 1;
			
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			////////////////////////////////////////////////////////////////////////
			//// 3-я страница формы
			
			// Выведем подпись председателя инвентаризационной комиссии
			Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
			Подпись.Параметры.Должность                = ВыборкаПоКомиссии.ПредседательКомиссииДолжность;
			Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии.ПредседательКомиссииФИО;
				
			ТабДокумент.Вывести(Подпись);
			
			// Выведем подписи членов комиссии
			ВыводитьЗаголовок = Истина;
			
			НаименованиеЧленовКомиссии = Новый Массив;
			НаименованиеЧленовКомиссии.Добавить("ПервыйЧленКомиссии");
			НаименованиеЧленовКомиссии.Добавить("ВторойЧленКомиссии");
			НаименованиеЧленовКомиссии.Добавить("ТретийЧленКомиссии");
			
			// Сначала выведем членов комиссии из выборки
			Для Каждого ЧленКомиссии Из НаименованиеЧленовКомиссии Цикл
				
				Если НЕ ТабДокумент.ПроверитьВывод(Подпись) Тогда
					
					// Выведем разрыв страницы
					ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
				
				КонецЕсли;
				
				Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
				                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
															   "");
				Подпись.Параметры.Должность                = ВыборкаПоКомиссии[ЧленКомиссии + "Должность"];
				Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии[ЧленКомиссии + "ФИО"];
				
				ТабДокумент.Вывести(Подпись);
				
				ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
				
			КонецЦикла;
			
			Дно.Параметры.ПорядковыйНомер = ПорядковыйНомерСтроки;
			
			Дно.Параметры.Должность 		 	= ДанныеМОЛДолжность;
			Дно.Параметры.РасшифровкаПодписи 	= ДанныеМОЛПредставление;
			
			ТабДокумент.Вывести(Дно);
		
		КонецЦикла;
		
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьСличительнаяВедомость(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияОС_СличительнаяВедомость";
	// Зададим параметры макета по умолчанию
	ТабДокумент.ПолеСверху              = 10;
	ТабДокумент.ПолеСлева               = 0;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 0;
	ТабДокумент.РазмерКолонтитулаСверху = 10;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб             = Истина;
	
	// Всегда на украинском языке
	КодЯзыкаПечать = "uk";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИнвентаризацияОС.ПФ_MXL_UK_СличительнаяВедомость");
	
	// Получаем области макета для вывода в табличный документ
	Шапка                     = Макет.ПолучитьОбласть("Шапка");
	ЗаголовокТаблицы          = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	СтрокаТаблицы             = Макет.ПолучитьОбласть("СтрокаТаблицы");
	ПодвалТаблицы             = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ПодписьГлавногоБухгалтера = Макет.ПолучитьОбласть("ПодписьГлавногоБухгалтера");
	Подпись                   = Макет.ПолучитьОбласть("Подпись");
	НумерацияКолонокТаблицы 	= Макет.ПолучитьОбласть("НумерацияКолонокТаблицы");	
	Дно                   		= Макет.ПолучитьОбласть("Дно");
	
	// Варианты заголовков разделов с подписями печатной формы	
	ЗаголовокРазделаПодписей = Новый Структура();
	ЗаголовокРазделаПодписей.Вставить("ПредседательКомиссии", НСтр("ru='Председатель инвентаризационной комиссии';uk='Голова інвентаризаційної комісії'",КодЯзыкаПечать));
	ЗаголовокРазделаПодписей.Вставить("ЧленыКомиссии",        НСтр("ru='Члены инвентаризационной комиссии';uk='Члени інвентаризаційної комісії'",КодЯзыкаПечать));
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияОС.Дата КАК Дата,
		|	ИнвентаризацияОС.Номер КАК Номер,
		|	ИнвентаризацияОС.Организация КАК Организация,
		|	ИнвентаризацияОС.ПодразделениеОрганизации.Представление КАК ПодразделениеПредставление,
		|	ИнвентаризацияОС.ПодразделениеОрганизации.Код КАК ПодразделениеКод,
		|	ИнвентаризацияОС.ДатаНачалаИнвентаризации КАК ДатаНачалаИнвентаризации,
		|	ИнвентаризацияОС.ДатаОкончанияИнвентаризации КАК ДатаОкончанияИнвентаризации,
		|	ИнвентаризацияОС.ДокументОснованиеВид КАК ДокументОснованиеВид,
		|	ИнвентаризацияОС.ДокументОснованиеДата КАК ДокументОснованиеДата,
		|	ИнвентаризацияОС.ДокументОснованиеНомер КАК ДокументОснованиеНомер
		|ИЗ
		|	Документ.ИнвентаризацияОС КАК ИнвентаризацияОС
		|ГДЕ
		|	ИнвентаризацияОС.Ссылка = &Ссылка";
		
		Док = Запрос.Выполнить().Выбрать();
		Док.Следующий();
		
		СписокОС = Ссылка.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("Организация", Ссылка.Организация);
		Запрос.УстановитьПараметр("ОсновноеСредство", СписокОС);
		Запрос.УстановитьПараметр("Дата",        Ссылка.Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнвентаризацияОСОС.НомерСтроки КАК НомерСтроки,
		|	ИнвентаризацияОСОС.ОсновноеСредство КАК ОсновноеСредство,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НаименованиеПолное КАК ОсновноеСредствоНаименованиеПолное,
		|	ИнвентаризацияОСОС.ОсновноеСредство.ДатаВыпуска КАК ДатаВыпуска,
		|	ИнвентаризацияОСОС.ОсновноеСредство.ЗаводскойНомер КАК ЗаводскойНомер,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	МестонахождениеОСБухгалтерскийУчет.МОЛ КАК МОЛ,
		|	ИнвентаризацияОСОС.ОсновноеСредство.НомерПаспорта КАК НомерПаспорта,
		|	ИнвентаризацияОСОС.СтоимостьПоДаннымУчета КАК СтоимостьПоДаннымУчета,
		|	ИнвентаризацияОСОС.СтоимостьФактическая КАК СтоимостьФактическая,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияОСОС.НаличиеПоДаннымУчета = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НаличиеПоДаннымУчета,
		|	ВЫБОР
		|		КОГДА ИнвентаризацияОСОС.НаличиеФактическое = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НаличиеФактическое
		|ИЗ
		|	Документ.ИнвентаризацияОС.ОС КАК ИнвентаризацияОСОС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|		&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчет
		|		ПО ИнвентаризацияОСОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
		|ГДЕ
		|	ИнвентаризацияОСОС.Ссылка = &Ссылка
		|	И (ИнвентаризацияОСОС.СтоимостьПоДаннымУчета <> ИнвентаризацияОСОС.СтоимостьФактическая 
		|		ИЛИ ИнвентаризацияОСОС.НаличиеПоДаннымУчета <> ИнвентаризацияОСОС.НаличиеФактическое)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		ТаблицаОС = Запрос.Выполнить().Выгрузить();
		
		ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Ссылка);
		
		// Выведем шапку документа
		СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Ссылка.Организация, Ссылка.Дата);
		
		Шапка.Параметры.Заполнить(Док);
		Шапка.Параметры.Организация          = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации,"ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,ИнформацияОСтатусеПлательщикаНалогов",,КодЯзыкаПечать);
		Шапка.Параметры.ОрганизацияКодПоОКПО = БухгалтерскийУчетПереопределяемый.ПолучитьКодОрганизации(СведенияОбОрганизации);
		
		//Шапка.Параметры.НомерДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(Док);
		Шапка.Параметры.ДатаДокумента  = Ссылка.Дата;
		
		ТабДокумент.Вывести(Шапка);
		
		// Выведем заголовок таблицы	
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		ТабДокумент.Вывести(НумерацияКолонокТаблицы);
		
		// Создадим переменные для накопления итогов по каждой странице
		ИтогИзлишекКоличество   = 0;
		ИтогИзлишекСтоимость    = 0;
		ИтогНедостачаКоличество = 0;
		ИтогНедостачаСтоимость  = 0;
		
		ПорядковыйНомерСтроки = 0; // счетчик количества строк в таблице
		
		// Выведем строки таблицы
		Для Каждого СтрокаОС Из ТаблицаОС Цикл
			
			ПорядковыйНомерСтроки = ПорядковыйНомерСтроки + 1;
			
			СтрокаТаблицы.Параметры.Заполнить(СтрокаОС);
			
			СтрокаТаблицы.Параметры.НомерСтроки = ПорядковыйНомерСтроки;
			
			СтрокаСПодвалом = Новый Массив;
			СтрокаСПодвалом.Добавить(СтрокаТаблицы);
			СтрокаСПодвалом.Добавить(ПодвалТаблицы);
			Если (ТаблицаОС.Индекс(СтрокаОС) + 1) = ТаблицаОС.Количество() Тогда // если последняя строка, должна
				СтрокаСПодвалом.Добавить(ПодписьГлавногоБухгалтера);             // помещаться и подпись гл.бухгалтера
			КонецЕсли;
			
			Если НЕ ТабДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				// Выведем заголовок таблицы	
				ТабДокумент.Вывести(НумерацияКолонокТаблицы);
				
			КонецЕсли;
			
			РазницаПоНаличию   = СтрокаОС.НаличиеФактическое - СтрокаОС.НаличиеПоДаннымУчета;
			РазницаПоСтоимости = СтрокаОС.СтоимостьФактическая - СтрокаОС.СтоимостьПоДаннымУчета;
			
			ИзлишекКоличество   = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
			ИзлишекСтоимость    = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
			НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
			НедостачаСтоимость  = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, 0);
			
			ИтогИзлишекКоличество   = ИтогИзлишекКоличество + ИзлишекКоличество;
			ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость + ИзлишекСтоимость;
			ИтогНедостачаКоличество = ИтогНедостачаКоличество + НедостачаКоличество;
			ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость + НедостачаСтоимость;
			
			СтрокаТаблицы.Параметры.ИзлишекКоличество   = ИзлишекКоличество;
			СтрокаТаблицы.Параметры.ИзлишекСтоимость    = ИзлишекСтоимость;
			СтрокаТаблицы.Параметры.НедостачаКоличество = НедостачаКоличество;
			СтрокаТаблицы.Параметры.НедостачаСтоимость  = НедостачаСтоимость;
			
			//ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Ссылка.Организация, СтрокаОС.МОЛ, Ссылка.Дата);
			ОсновныеСотрудникиФизическихЛицМОЛ = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СтрокаОС.МОЛ, Истина, Ссылка.Организация, Ссылка.Дата);
			Если ЗначениеЗаполнено(ОсновныеСотрудникиФизическихЛицМОЛ) Тогда
				Для каждого Строка Из ОсновныеСотрудникиФизическихЛицМОЛ Цикл
				    ДанныеМОЛВыборка = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Строка.Сотрудник, "Должность", Ссылка.Дата);			
				КонецЦикла;
				Для каждого СтрокаДанныеМОЛ Из ДанныеМОЛВыборка Цикл			
					СтрокаТаблицы.Параметры.ФИО 	= СтрокаДанныеМОЛ.ФизическоеЛицо;			
				КонецЦикла;
			КонецЕсли;
			//СтрокаТаблицы.Параметры.ФИО = ДанныеМОЛ.Представление;

			ТабДокумент.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		// Выведем подвал таблицы
		ПодвалТаблицы.Параметры.ИтогИзлишекКоличество   = ИтогИзлишекКоличество;
		ПодвалТаблицы.Параметры.ИтогИзлишекСтоимость    = ИтогИзлишекСтоимость;
		ПодвалТаблицы.Параметры.ИтогНедостачаКоличество = ИтогНедостачаКоличество;
		ПодвалТаблицы.Параметры.ИтогНедостачаСтоимость  = ИтогНедостачаСтоимость;
		
		ТабДокумент.Вывести(ПодвалТаблицы);
		
		// Выведем подпись бухгалтера
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Док.Организация, Док.Дата);
		
		ПодписьГлавногоБухгалтера.Параметры.РасшифровкаПодписи = Руководители.ГлавныйБухгалтерПредставление;
		
		ТабДокумент.Вывести(ПодписьГлавногоБухгалтера);
		
		// Проверим, помещаются ли шапка подписей и одна подпись
		Подписи = Новый Массив;
		Подписи.Добавить(Подпись);
		
		Если НЕ ТабДокумент.ПроверитьВывод(Подписи) Тогда
				
			// Выведем разрыв страницы
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		КонецЕсли;

		// Выведем подпись председателя инвентаризационной комиссии
		Подпись.Параметры.ЗаголовокРазделаПодписей = ЗаголовокРазделаПодписей.ПредседательКомиссии;
		Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии.ПредседательКомиссииФИО;
			
		ТабДокумент.Вывести(Подпись);
		
		// Выведем подписи членов комиссии
		ВыводитьЗаголовок = Истина;
		
		НаименованиеЧленовКомиссии = Новый Массив;
		НаименованиеЧленовКомиссии.Добавить("ПервыйЧленКомиссии");
		НаименованиеЧленовКомиссии.Добавить("ВторойЧленКомиссии");
		НаименованиеЧленовКомиссии.Добавить("ТретийЧленКомиссии");
		
		// Сначала выведем членов комиссии из выборки
		Для Каждого ЧленКомиссии Из НаименованиеЧленовКомиссии Цикл
			
			Если НЕ ТабДокумент.ПроверитьВывод(Подпись) Тогда
				
				// Выведем разрыв страницы
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ВыводитьЗаголовок = Истина; // на новой странице выведем заголовок набора подписей
			
			КонецЕсли;
			
			Подпись.Параметры.ЗаголовокРазделаПодписей = ?(ВыводитьЗаголовок, 
			                                               ЗаголовокРазделаПодписей.ЧленыКомиссии,
														   "");
			Подпись.Параметры.РасшифровкаПодписи       = ВыборкаПоКомиссии[ЧленКомиссии + "ФИО"];
			
			ТабДокумент.Вывести(Подпись);
			
			ВыводитьЗаголовок = Ложь; // в следующей итерации вывод заголовка не нужен
			
		КонецЦикла;
		
		ТабДокумент.Вывести(Дно);		
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции






#КонецОбласти

#КонецОбласти

#КонецЕсли
