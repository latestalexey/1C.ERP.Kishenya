
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПравоДоступа = ПравоДоступа("Изменение", Метаданные.Документы.ВыработкаСотрудников);
	
	Если Не ПравоДоступа Тогда
		Элементы.БригадныеНарядыСоздать.Видимость = Ложь;
		Элементы.ГруппаТрудозатратыКОформлению.Видимость = Ложь;
		Элементы.БригадныеНарядыСоздатьНарядНаПроизводство.Доступность = Ложь;
		Элементы.БригадныеНарядыСоздатьНарядНаРемонт.Доступность = Ложь;
		Элементы.БригадныеНарядыСоздатьНарядНаПрочиеРаботы.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ОбработатьПараметрыФормы(Параметры) Тогда
		
		ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ВыработкаСотрудниковФормаСписка", "ПараметрыОтбора");
		Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
	ПравоДоступаПроизводство = Ложь;
	ПравоДоступаРемонты = Ложь;
	
	//++ НЕ УТКА
	ПравоДоступаПроизводство = ПравоДоступа("Просмотр", Метаданные.Документы.МаршрутныйЛистПроизводства);
	ПравоДоступаРемонты = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаРемонт);
	
	Если ПравоДоступаПроизводство Тогда
		ДоступныеВидыНарядов.Добавить(Перечисления.ВидыБригадныхНарядов.Производство);
	КонецЕсли;
	Если ПравоДоступаРемонты Тогда
		ДоступныеВидыНарядов.Добавить(Перечисления.ВидыБригадныхНарядов.Ремонт);
	КонецЕсли;
	//-- НЕ УТКА
	
	ДоступныеВидыНарядов.Добавить(Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы);
	
	Элементы.ОтборВидНаряда.СписокВыбора.Добавить(Перечисления.ВидыБригадныхНарядов.ПустаяСсылка(), НСтр("ru='Любой';uk='Будь-який'"));
	Для Каждого Строка Из ДоступныеВидыНарядов Цикл
		Элементы.ОтборВидНаряда.СписокВыбора.Добавить(Строка.Значение);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(БригадныеНаряды, "ПроизводствоПоРаспоряжениям", НСтр("ru='Производство (по распоряжению)';uk='Виробництво (за розпорядженням)'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(БригадныеНаряды, "ПроизводствоБезРаспоряжений", НСтр("ru='Производство (без распоряжений)';uk='Виробництво (без розпоряджень)'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(БригадныеНаряды, "ДоступныеВидыНарядов", ДоступныеВидыНарядов.ВыгрузитьЗначения());
	
	Элементы.БригадныеНарядыСоздатьНарядНаПроизводство.Видимость = ПравоДоступаПроизводство;
	Элементы.БригадныеНарядыСоздатьНарядНаРемонт.Видимость = ПравоДоступаРемонты;
	
	//++ НЕ УТКА
	ОпределитьУправлениеМаршрутнымиЛистами();
	//-- НЕ УТКА
	
	ПриИзмененииОтборов();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.БригадныеНарядыКомандыФормы);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "БригадныеНаряды", "БригадныеНарядыДата");


КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//++ НЕ УТКА
	Если ИмяСобытия = "Запись_ВыработкаСотрудников" Или ИмяСобытия = "Запись_ЗаказНаРемонт" Тогда
		ЗаполнитьТрудозатратыКОформлению();
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат; // в КА обработчик пустой
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидНарядаПриИзменении(Элемент)
	
	ВидНарядаПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура БригадаПриИзменении(Элемент)
	
	БригадаПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрПриИзменении(Элемент)
	
	РабочийЦентрПриИзмененииВызовСервера();
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТрудозатратПроизводства

&НаКлиенте
Процедура ТрудозатратыКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ТрудозатратыКОформлениюБригада" Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.Бригада);
		ИначеЕсли Поле.Имя = "ТрудозатратыКОформлениюВидРабот" Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.ВидРабот);
		ИначеЕсли Поле.Имя = "ТрудозатратыКОформлениюРаспоряжение" Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.Распоряжение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.БригадныеНаряды);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.БригадныеНаряды);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ОбновитьДанныеВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернутьПоРаспоряжениям(Команда)
	
	РазвернутьПоРаспоряжениямПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОформитьПоРаспоряжению(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.ТрудозатратыКОформлению.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Команда не может быть выполнена для указанного объекта.';uk='Команда не може бути виконана для зазначеного об''єкта.'"));
		
		Возврат;
	КонецЕсли;
	
	МассивВидовРабот = Новый Массив;
	МассивРаспоряжений = Новый Массив;
	
	ВыделенныеСтроки = Элементы.ТрудозатратыКОформлению.ВыделенныеСтроки;
	ТекБригада = Неопределено;
	ТекОрганизация = Неопределено;
	ТекВидНаряда = Неопределено;
	
	Отказ = Ложь;
	
	Для Каждого НомерСтроки из ВыделенныеСтроки Цикл
		
		Строка = Элементы.ТрудозатратыКОформлению.ДанныеСтроки(НомерСтроки);
		
		Если ТекБригада = Неопределено ИЛИ ТекОрганизация = Неопределено ИЛИ ТекВидНаряда = Неопределено Тогда
			ТекБригада = Строка.Бригада;
			ТекОрганизация = Строка.Организация;
			ТекВидНаряда = Строка.ВидНаряда;
		КонецЕсли;
		
		Если ТекБригада <> Строка.Бригада Тогда
			ТекстПредупреждения = НСтр("ru='Документ может быть сформирован только по одной бригаде.';uk='Документ може бути сформований тільки по одній бригаді.'");
			Отказ = Истина;
		ИначеЕсли ТекОрганизация <> Строка.Организация Тогда
			ТекстПредупреждения = НСтр("ru='Документ может быть сформирован только по одной организации.';uk='Документ може бути сформований лише по одній організації.'");
			Отказ = Истина;
		ИначеЕсли ТекВидНаряда <> Строка.ВидНаряда Тогда
			ТекстПредупреждения = НСтр("ru='Документ может быть сформирован только по одному виду наряда.';uk='Документ може бути сформований тільки по одному виду наряду.'");
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		МассивВидовРабот.Добавить(Строка.ВидРабот);
		
		Если ОтображатьРаспоряжения Тогда
			МассивРаспоряжений.Добавить(Строка.Распоряжение);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация",        ТекОрганизация);
	ЗначенияЗаполнения.Вставить("ВидНаряда",          ТекВидНаряда);
	ЗначенияЗаполнения.Вставить("ПоРаспоряжениям",    Истина);
	ЗначенияЗаполнения.Вставить("МассивВидовРабот",   МассивВидовРабот);
	ЗначенияЗаполнения.Вставить("МассивРаспоряжений", МассивРаспоряжений);
	
	//++ НЕ УТКА
	Если НЕ ОтборРабочийЦентр.Пустая() Тогда
		ЗначенияЗаполнения.Вставить("РабочийЦентр", ОтборРабочийЦентр);
	КонецЕсли;
	//-- НЕ УТКА
	
	ЗначенияЗаполненияНаСервере(ЗначенияЗаполнения, ТекБригада);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ВыработкаСотрудников.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьНарядНаПроизводствоПоРаспоряжению(Команда)
	
	СоздатьНаряд(ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Производство"), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьНарядНаПроизводствоБезРаспоряжения(Команда)
	СоздатьНаряд(ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Производство"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьНарядНаРемонт(Команда)
	
	СоздатьНаряд(ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Ремонт"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьНарядНаПрочиеРаботы(Команда)
	
	СоздатьНаряд(ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.ПрочиеРаботы"));
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.БригадныеНаряды);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.БригадныеНаряды);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаСервере
Процедура ПриИзмененииОтборов()

	УстановитьОтборПоПодразделению();
	УстановитьОтборПоВидуНаряда();
	УстановитьОтборПоБригаде();
	РазвернутьПоРаспоряжениям();
	
	ОбновитьДанныеВызовСервера();
	
	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()
	
	ПараметрыОтбора = Новый Структура("Бригада,ОтборВидНаряда,ОтборРабочийЦентр,ОтображатьРаспоряжения,Подразделение");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("ВыработкаСотрудниковФормаСписка", "ПараметрыОтбора", ПараметрыОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииВызовСервера()
	
	//++ НЕ УТКА
	ОпределитьУправлениеМаршрутнымиЛистами();
	//-- НЕ УТКА
	
	УстановитьОтборПоПодразделению();
	ЗаполнитьТрудозатратыКОформлению();
	
	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ВидНарядаПриИзмененииВызовСервера()

	УстановитьОтборПоВидуНаряда();
	ЗаполнитьТрудозатратыКОформлению();

	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура БригадаПриИзмененииВызовСервера()

	УстановитьОтборПоБригаде();
	ЗаполнитьТрудозатратыКОформлению();

	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура РабочийЦентрПриИзмененииВызовСервера()

	ЗаполнитьТрудозатратыКОформлению();

	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьПоРаспоряжениямПриИзмененииВызовСервера()

	ОтображатьРаспоряжения = НЕ ОтображатьРаспоряжения;
	РазвернутьПоРаспоряжениям();

	ЗаполнитьТрудозатратыКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделению()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		БригадныеНаряды, 
		"Подразделение", 
		Подразделение, 
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(Подразделение));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоБригаде()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		БригадныеНаряды, 
		"Бригада", 
		Бригада, 
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(Бригада));
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВидуНаряда()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		БригадныеНаряды,
		"ВидНаряда",
		ОтборВидНаряда,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборВидНаряда));
	
КонецПроцедуры

&НаСервере
Процедура РазвернутьПоРаспоряжениям()

	Элементы.ТрудозатратыКОформлениюРазвернутьПоРаспоряжениям.Пометка = ОтображатьРаспоряжения;
	Элементы.ТрудозатратыКОформлениюГруппаРаспоряжение.Видимость      = ОтображатьРаспоряжения;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьДанныеВызовСервера()
	
	ЗаполнитьТрудозатратыКОформлению();

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТрудозатратыКОформлению()
	
	//++ НЕ УТКА
	
	ТрудозатратыКОформлению.Очистить();
	
	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Бригада) Тогда
		СтруктураОтбора.Вставить("Бригада", Бригада);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборРабочийЦентр) Тогда
		СтруктураОтбора.Вставить("РабочийЦентр", ОтборРабочийЦентр);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборВидНаряда) Тогда
		СтруктураОтбора.Вставить("ВидНаряда", ОтборВидНаряда);
	Иначе
		СтруктураОтбора.Вставить("МассивДоступныхВидовНарядов", ДоступныеВидыНарядов);
	КонецЕсли;
	
	ТаблицаТрудозатратыКОформлению = Документы.ВыработкаСотрудников.ТрудозатратыКОформлению(СтруктураОтбора);
	
	Если НЕ ОтображатьРаспоряжения Тогда
		ТаблицаТрудозатратыКОформлению.Свернуть("Бригада,ВидНаряда,ВидРабот,Подразделение,Организация", "Количество");
		ТаблицаТрудозатратыКОформлению.Сортировать("Бригада,ВидНаряда,ВидРабот,Подразделение,Организация");
	Иначе
		ТаблицаТрудозатратыКОформлению.Сортировать("Бригада,ВидНаряда,ВидРабот,Подразделение,Организация,Распоряжение");
	КонецЕсли;
	
	ТрудозатратыКОформлению.Загрузить(ТаблицаТрудозатратыКОформлению);
	
	//-- НЕ УТКА
	
	Возврат; // в КА обработчик пустой.
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеНарядов

&НаСервере
Функция ЗначенияЗаполненияНаСервере(ЗначенияЗаполнения, Бригада)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Бригада, "Подразделение, ПрименятьРаспределениеПоКТУ");
	ЗначенияЗаполнения.Вставить("Бригада", Бригада);
	ЗначенияЗаполнения.Вставить("Подразделение", Реквизиты.Подразделение);
	ЗначенияЗаполнения.Вставить("Автораспределение", Реквизиты.ПрименятьРаспределениеПоКТУ);
	
КонецФункции

&НаКлиенте
Процедура СоздатьНаряд(ВидНаряда, ПоРаспоряжениям = Ложь)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидНаряда", ВидНаряда);
	ЗначенияЗаполнения.Вставить("ПоРаспоряжениям", ПоРаспоряжениям);
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ЗначенияЗаполнения.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Бригада) Тогда
		ЗначенияЗаполнения.Вставить("Бригада", Бригада);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ВыработкаСотрудников.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ОбработатьПараметрыФормы(ПараметрыФормы)
	
	ПараметрыОбработаны = Ложь;
	
	Если ПараметрыФормы.Свойство("СтруктураБыстрогоОтбора") Тогда
		
		Бригада        = ПараметрыФормы.СтруктураБыстрогоОтбора.Бригада;
		ОтборВидНаряда = ПараметрыФормы.СтруктураБыстрогоОтбора.ВидНаряда;
		Подразделение  = ПараметрыФормы.СтруктураБыстрогоОтбора.Подразделение;
		
		ПараметрыОбработаны = Истина;
		
		Возврат ПараметрыОбработаны;
		
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("Подразделение") Тогда
		Подразделение = ПараметрыФормы.Подразделение;
		ПараметрыОбработаны = Истина;
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("РабочийЦентр") Тогда
		ОтборРабочийЦентр = ПараметрыФормы.РабочийЦентр;
		ПараметрыОбработаны = Истина;
	КонецЕсли;
	
	Если ПараметрыФормы.Свойство("ПерейтиКСписку") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаБригадныеНаряды;
	КонецЕсли;
	
	Возврат ПараметрыОбработаны;
	
КонецФункции

//++ НЕ УТКА

&НаСервере
Процедура ОпределитьУправлениеМаршрутнымиЛистами()

	Если НЕ Подразделение.Пустая() Тогда
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
		УправлениеМаршрутнымиЛистами = ПараметрыПодразделения.УправлениеМаршрутнымиЛистами;
	Иначе
		УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПустаяСсылка();
		ОтборРабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
	КонецЕсли;

	ВидимостьОтбораПоРЦ = (НЕ Подразделение.Пустая());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборРабочийЦентр", "Видимость", ВидимостьОтбораПоРЦ);
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти
