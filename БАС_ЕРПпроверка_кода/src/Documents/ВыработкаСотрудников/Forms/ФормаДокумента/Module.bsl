&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = Константы.ВалютаРасценокВидовРабот.Получить();
	КонецЕсли;
	
	ПриЧтенииСозданииНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ВыработкаСотрудников.Форма.ФормаВыбораРаспоряжения" Тогда
		
		ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
		
		ПересчитатьСумму();
		
		РаспределитьРаботыПоКТУ = Истина;
		РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
		
		УстановитьОтборПоВидуРабот();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ВыработкаСотрудников.Форма.ПодборПоРаспоряжениям" Тогда
		
		ОбработкаПодбораРаспоряжений(ВыбранноеЗначение.АдресВХранилище);
		
		УстановитьОтборПоВидуРабот();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВыработкаСотрудников", ПараметрыЗаписи, Объект.Ссылка);
	УстановитьОтборПоВидуРабот();
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РаспределитьРаботыПоКТУ = Ложь;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Автораспределение Тогда
		
		Если Объект.ВидыРабот.Итог("Сумма") <> Объект.Сотрудники.Итог("Сумма") Тогда
			ТекстСообщения = НСтр("ru='Результат распределения не совпадает с количеством по виду работ';uk='Результат розподілу не збігається з кількістю по виду робіт'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		
		Если Объект.Сотрудники.Количество() > 0 и Объект.Сотрудники.Итог("НормативныйКТУ") = 0 Тогда
			ТекстСообщения = НСтр("ru='Не заполнена колонка КТУ списка сотрудников';uk='Не заповнена колонка КТУ списку співробітників'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
		
	Иначе
		
		Для Каждого Строка из Объект.ВидыРабот Цикл
			
			Если Строка.Сумма <> Строка.СуммаРаспределено Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Результат распределения не совпадает с суммой по виду работ в строке %1.';uk='Результат розподілу не збігається з сумою по виду робіт в рядку %1.'"), Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , 
					"ВидыРабот", "Объект", Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвтораспределениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	ТекстВопроса = Неопределено;
	
	Если Объект.Сотрудники.Количество() > 0 И (Объект.Автораспределение Или ТекущиеДанные = Неопределено) Тогда
		ТекстВопроса = НСтр("ru='Список ""Сотрудники"" будет очищен. Продолжить?';uk='Список ""Співробітники"" буде очищено. Продовжити?'");
	ИначеЕсли Объект.Сотрудники.Количество() > 0 И ТекущиеДанные <> Неопределено Тогда
		ТекстВопроса = НСтр("ru='Список ""Сотрудники"" будет привязан к выделенному виду работ (%1). Продолжить?';uk='Список ""Співробітники"" буде прив''язаний до виділеного виду робіт (%1). Продовжити?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ТекущиеДанные.ВидРабот);
	КонецЕсли;
	
	Если ТекстВопроса <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриИзмененииРежимаРаспределенияНаКлиенте", ЭтотОбъект, ТекущиеДанные);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПриИзмененииРежимаРаспределенияНаКлиенте(КодВозвратаДиалога.Да, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаРаспределенияНаКлиенте(ОтветНаВопрос, ТекущиеДанные) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.Автораспределение = Не Объект.Автораспределение;
		Возврат;
	КонецЕсли;
	
	КлючСтроки = Неопределено;
	
	Для Каждого Строка из Объект.ВидыРабот Цикл
		
		Если Объект.Автораспределение Тогда
			Строка.КлючСтроки = "";
		Иначе
			Строка.КлючСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Если ТекущиеДанные = Строка Тогда
			КлючСтроки = Строка.КлючСтроки;
		КонецЕсли;
		
		Строка.КоличествоРаспределено = 0;
		Строка.СуммаРаспределено = 0;
		
	КонецЦикла;
	
	Если Объект.Сотрудники.Количество() > 0 И (Объект.Автораспределение Или ТекущиеДанные = Неопределено
		Или КлючСтроки = Неопределено) Тогда
		//Список ""Сотрудники"" будет очищен.
		Объект.Сотрудники.Очистить();
	ИначеЕсли Объект.Сотрудники.Количество() > 0 Тогда
		//Список ""Сотрудники"" будет привязан к выделенному виду работ.
		
		Для Каждого Строка Из Объект.Сотрудники Цикл
			Строка.КлючСтроки = КлючСтроки;
			Строка.Сумма = 0;
			Строка.Количество = 0;
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.Сотрудники.ОтборСтрок = Новый ФиксированнаяСтруктура();
	
	РаспределитьРаботыПоКТУ = Ложь;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	УстановитьОтборПоВидуРабот();
	
	Если Объект.Автораспределение Тогда 
		НадписьЗаголовкаТаблицы = НСтр("ru='Сотрудники (по документу в целом)';uk='Співробітники (по документу в цілому)'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура БригадаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Бригада) Тогда
		БригадаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНарядаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СохраненныеЗначения = Объект.ВидНаряда;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНарядаПриИзменении(Элемент)
	
	Если СохраненныеЗначения = Объект.ВидНаряда Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидНаряда = ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.ПрочиеРаботы") Тогда
		Объект.ПоРаспоряжениям = Ложь;
	ИначеЕсли Объект.ВидНаряда = ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.Ремонт") Тогда
		Объект.ПоРаспоряжениям = Истина;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("Распоряжение, КодСтрокиРаспоряжения, СтатьяКалькуляции, СпособОтраженияЗарплаты");
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	
	Для Каждого Строка Из Объект.ВидыРабот Цикл
		ЗаполнитьЗначенияСвойств(Строка, СтруктураЗаполнения);
	КонецЦикла;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоРаспоряжениямПриИзменении(Элемент)
	
	ТекстВопроса = Неопределено;
	
	Распоряжение = Неопределено;
	
	Если Объект.ПоРаспоряжениям Тогда
		
		Если Объект.ВидыРабот.Количество() = 0 Тогда
			ТекстВопроса = НСтр("ru='Список Виды работ будет заполнен по остаткам к оформлению. Продолжить?';uk='Список Види робіт буде заповнений за залишками до оформлення. Продовжити?'");
		Иначе
			ТекстВопроса = НСтр("ru='Строки в списке Виды работ будут привязаны к заказам. Строки, которые невозможно привязать будут удалены. Продолжить?';uk='Рядки в списку Види робіт будуть прив''язані до замовлень. Рядки, які неможливо прив''язати будуть вилучені. Продовжити?'");
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВидыРабот.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Строки в списке Виды работ перестанут быть связанными с заказами. Продолжить?';uk='Рядки в списку Види робіт перестануть бути пов''язаними із замовленнями. Продовжити?'");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстВопроса <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоРаспоряжениямПриИзмененииНаКлиенте", ЭтотОбъект, Распоряжение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПоРаспоряжениямПриИзмененииНаКлиенте(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоРаспоряжениямПриИзмененииНаКлиенте(ОтветНаВопрос, Распоряжение) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.ПоРаспоряжениям = Не Объект.ПоРаспоряжениям;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		Объект.Распоряжение = Распоряжение;
	КонецЕсли;
	
	Если Объект.ПоРаспоряжениям Тогда
		
		//++ НЕ УТКА
		
		Если Объект.ВидыРабот.Количество() = 0 Тогда
			// Список Виды работ будет заполнен по остаткам к оформлению.
			ЗаполнитьПоОстаткамНаСервере();
			УстановитьОтборПоВидуРабот();
			
		Иначе
			//Строки в списке Виды работ будут привязаны к распоряжениям. Строки, которые невозможно привязать к распоряжениям будут удалены.
			ПривязатьСтрокиКРаспоряжениям();
		КонецЕсли;
		
		//-- НЕ УТКА
		
	Иначе
		
		Если Объект.ВидыРабот.Количество() > 0 Тогда
			//Строки в списке Виды работ перестанут быть связанными с распоряжениями.
			СтруктураЗаполнения = Новый Структура("Распоряжение, КодСтрокиРаспоряжения, СтатьяКалькуляции, СпособОтраженияЗарплаты");
			
			Для Каждого Строка Из Объект.ВидыРабот Цикл
				ЗаполнитьЗначенияСвойств(Строка, СтруктураЗаполнения);
			КонецЦикла;
			
		КонецЕсли;
		
		Объект.Распоряжение = Неопределено;
		СписокЗаказов.Очистить();
		
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказамВФорме();
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ПривязатьСтрокиКРаспоряжениям()
	
	СтруктураОтбора = Новый Структура("Ссылка, Организация, Подразделение, Бригада, ВидНаряда, Дата");
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Объект);
	
	МассивВидовРабот = Новый Массив;
	Для Каждого Строка Из Объект.ВидыРабот Цикл
		МассивВидовРабот.Добавить(Строка.ВидРабот);
	КонецЦикла;
	
	СтруктураОтбора.Вставить(МассивВидовРабот);
	
	ТаблицаКОформлению = Документы.ВыработкаСотрудников.ТрудозатратыКОформлению(СтруктураОтбора);
	
	УдаляемыеСтроки = Новый Массив;
	СтруктураОтбора = Новый Структура("ВидРабот");
	
	Для Каждого Строка Из Объект.ВидыРабот Цикл
		
		СтруктураОтбора.ВидРабот = Строка.ВидРабот;
		НайденныеСтроки = ТаблицаКОформлению.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаляемыеСтроки.Добавить(Строка);
		Иначе
			ЗаполнитьЗначенияСвойств(Строка, НайденныеСтроки[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("КлючСтроки");
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		
		Если Не Объект.Автораспределение Тогда
			СтруктураОтбора.КлючСтроки = Строка.КлючСтроки;
			НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураОтбора);
			Для Каждого Сотрудник Из НайденныеСтроки Цикл
				Объект.Сотрудники.Удалить(Сотрудник);
			КонецЦикла;
		КонецЕсли;
		
		Объект.ВидыРабот.Удалить(Строка);
	КонецЦикла;
	
	РассчитатьИтогиРаспределения();
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура НадписьЗаголовокРаспоряженияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
		СписокЗаказов,
		НСтр("ru='Распоряжения на оформление выработки сотрудников (%КоличествоДокументов%)';uk='Розпорядження на оформлення виробітку працівників (%КоличествоДокументов%)'")),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРабот

&НаКлиенте
Процедура ВидыРаботПриИзменении(Элемент)
	
	РаспределитьРаботыПоКТУ = Истина;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Поле = Элементы.ВидыРаботРаспоряжение Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Распоряжение) Тогда
			ПоказатьЗначение(Неопределено, ТекущиеДанные.Распоряжение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботРаспоряжениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Перем ТекстОшибки;
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидРабот) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не заполнена колонка ""Вид работ"" в строке %1';uk='Не заповнена колонка ""Вид робіт"" у рядку %1'"),
			ТекущиеДанные.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ВидыРабот", ТекущиеДанные.НомерСтроки, "ВидРабот"),,
			Отказ);
	КонецЕсли;
	
	РеквизитыДляПроверки = Новый Массив;
	РеквизитыДляПроверки.Добавить("Организация");
	РеквизитыДляПроверки.Добавить("Бригада");
	
	ПроверитьЗаполнениеРеквизитов(РеквизитыДляПроверки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ссылка, ВидРабот, Бригада, Организация, ВидНаряда");
	ПараметрыФормы.Ссылка = Объект.Ссылка;
	ПараметрыФормы.ВидРабот = ТекущиеДанные.ВидРабот;
	ПараметрыФормы.Бригада = Объект.Бригада;
	ПараметрыФормы.Организация = Объект.Организация;
	ПараметрыФормы.ВидНаряда = Объект.ВидНаряда;
	
	ОткрытьФорму("Документ.ВыработкаСотрудников.Форма.ФормаВыбораРаспоряжения", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботКоличествоРасценкаПриИзменении(Элемент)
	
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	Если ТекущиеДанные.Расценка > 0 Тогда
		ТекущиеДанные.Количество = ТекущиеДанные.Сумма / ТекущиеДанные.Расценка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	Если Не Объект.Автораспределение и ТекущиеДанные <> Неопределено Тогда
		
		Элементы.Сотрудники.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", ТекущиеДанные.КлючСтроки);
		
		НадписьЗаголовкаТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудники (строка %1: %2)';uk='Співробітники (рядок %1: %2)'"), ТекущиеДанные.НомерСтроки, ТекущиеДанные.ВидРабот);
		
	ИначеЕсли Не Объект.Автораспределение Тогда
		
		НадписьЗаголовкаТаблицы = НСтр("ru='Сотрудники';uk='Співробітники'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботПередУдалением(Элемент, Отказ)
	
	Если Не Объект.Автораспределение Тогда
		
		ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
		
		Для Каждого Строка из НайденныеСтроки Цикл
			
			Объект.Сотрудники.Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтрокиРаспоряжения = 0;
	КонецЕсли;
	
	Если Не Объект.Автораспределение и НоваяСтрока Тогда
		КлючСтроки = Новый УникальныйИдентификатор;
		ТекущиеДанные.КлючСтроки = КлючСтроки;
		Элементы.Сотрудники.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", КлючСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботВидРаботПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРаботВидРаботПриИзмененииНаСервере(ТекущиеДанные.НомерСтроки);
	
	ПересчитатьСумму();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРаботПослеУдаления(Элемент)
	
	Если Не Объект.Автораспределение И Элементы.ВидыРабот.ТекущиеДанные = Неопределено Тогда
		НадписьЗаголовкаТаблицы = НСтр("ru='Сотрудники';uk='Співробітники'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВидыРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	Если Не Объект.Автораспределение и ТекущиеДанные <> Неопределено Тогда
		
		Элементы.Сотрудники.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", ТекущиеДанные.КлючСтроки);
		
		НадписьЗаголовкаТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Сотрудники (строка %1: %2)';uk='Співробітники (рядок %1: %2)'"), ТекущиеДанные.НомерСтроки, ТекущиеДанные.ВидРабот);
		
	ИначеЕсли Не Объект.Автораспределение Тогда
		
		НадписьЗаголовкаТаблицы = НСтр("ru='Сотрудники';uk='Співробітники'");
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено И Не Объект.Автораспределение Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для добавления сотрудников требуется указать вид работ.';uk='Для додавання співробітників потрібно зазначити вид робіт.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если НоваяСтрока И Не Объект.Автораспределение Тогда
		ТекущиеДанные.КлючСтроки = Элементы.ВидыРабот.ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
	Если НоваяСтрока И Объект.Автораспределение Тогда
		ТекущиеДанные.НормативныйКТУ = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	
	РаспределитьРаботыПоКТУ = Истина;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	
	РаспределитьРаботыПоКТУ = Истина;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСуммаПриИзменении(Элемент)
	
	Расценка = Элементы.ВидыРабот.ТекущиеДанные.Расценка;
	
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	Если Расценка > 0 Тогда
		ТекущиеДанные.Количество = ТекущиеДанные.Сумма / Расценка;
	Иначе
		ТекущиеДанные.Количество = 0;
	КонецЕсли;
	
	РаспределитьРаботыПоКТУ = Ложь;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиКоличествоПриИзменении(Элемент)
	
	Расценка = Элементы.ВидыРабот.ТекущиеДанные.Расценка;
	ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * Расценка;
	
	РаспределитьРаботыПоКТУ = Ложь;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаспределитьРаботыПоКТУ = Истина;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура ЗаполнитьПоОстаткамКОформлению(Команда)
	
	//++ НЕ УТКА
	
	Отказ = Ложь;
	
	РеквизитыДляПроверки = Новый Массив;
	РеквизитыДляПроверки.Добавить("Организация");
	РеквизитыДляПроверки.Добавить("Бригада");
	
	ПроверитьЗаполнениеРеквизитов(РеквизитыДляПроверки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = Неопределено;
	
	Если Объект.ВидыРабот.Количество() > 0 И Объект.Автораспределение Тогда
		ТекстВопроса = НСтр("ru='Список Виды работ будет перезаполнен. Продолжить?';uk='Список Види робіт буде перезаповнений. Продовжити?'");
	ИначеЕсли (Объект.ВидыРабот.Количество() > 0 Или Объект.Сотрудники.Количество() > 0) И Не Объект.Автораспределение Тогда
		ТекстВопроса = НСтр("ru='Списки Виды работ и Сотрудники будут перезаполнены. Продолжить?';uk='Списки Види робіт і Співробітники будуть переповнені сьогодні. Продовжити?'");
	КонецЕсли;
	
	Если ТекстВопроса <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамКОформлениюНаКлиенте", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПоОстаткамКОформлениюНаКлиенте(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // в КА обработчик пустой
	
КонецПроцедуры

//++ НЕ УТКА

&НаКлиенте
Процедура ЗаполнитьПоОстаткамКОформлениюНаКлиенте(ОтветНаВопрос, Параметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСервере();
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

//-- НЕ УТКА

&НаКлиенте
Процедура ЗаполнитьСотрудниковПоСоставу(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru='Поле ""Организация"" не заполнено';uk='Поле ""Організація"" не заповнене'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Бригада) Тогда
		ТекстСообщения = НСтр("ru='Поле ""Бригада"" не заполнено';uk='Поле ""Бригада"" не заповнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Бригада", "Объект");
		Возврат;
	КонецЕсли;
	
	ЕстьДанныеДляЗаполнения = Истина;
	
	Если Объект.Автораспределение Тогда
		
		ЗаполнитьСотрудниковПоСоставуБригадыНаСервере(,ЕстьДанныеДляЗаполнения);
		
	Иначе
		
		ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Выберете строку вида работ, по которой требуется заполнить исполнителей.';uk='Виберіть рядок виду робіт, за якою потрібно заповнити виконавців.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ВидыРабот", "Объект");
			Возврат;
		Иначе
			ЗаполнитьСотрудниковПоСоставуБригадыНаСервере(ТекущиеДанные.КлючСтроки,ЕстьДанныеДляЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЕстьДанныеДляЗаполнения Тогда
		ТекстСообщения = НСтр("ru='Состав бригады не задан.';uk='Склад бригади не заданий.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УстановитьОтборПоВидуРабот();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоРаспоряжениям(Команда)
	
	Отказ = Ложь;
	
	РеквизитыДляПроверки = Новый Массив;
	РеквизитыДляПроверки.Добавить("Организация");
	РеквизитыДляПроверки.Добавить("Бригада");
	
	ПроверитьЗаполнениеРеквизитов(РеквизитыДляПроверки, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ссылка, ВидНаряда, Организация, Бригада, Подразделение");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьВидыРаботВХранилище(УникальныйИдентификатор));
	
	ОткрытьФорму("Документ.ВыработкаСотрудников.Форма.ПодборПоРаспоряжениям", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// то, что требуется распределить выделяется красным

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботКоличествоРаспределено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботСуммаРаспределено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автораспределение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидыРабот.СуммаРаспределить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидыРабот.КоличествоРаспределить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтличающейсяСтрокиДокумента);

	// если распределить равно нулю, то ноль не отображаем (количество)

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботКоличествоРаспределено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидыРабот.КоличествоРаспределить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	// если распределить равно нулю, то нуль не отображаем (сумма)

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботСуммаРаспределено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидыРабот.СуммаРаспределить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");

	// распоряжение оформляется как гиперссылка

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботРаспоряжение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидыРабот.Распоряжение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);

	// распоряжение только для просмотра, если заполнено

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботРаспоряжение.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидыРабот.КодСтрокиРаспоряжения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Распоряжение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботКоличествоРаспределено.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СотрудникиКоличество.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботСуммаРаспределено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автораспределение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СотрудникиСумма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СотрудникиКоличество.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автораспределение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СотрудникиНормативныйКТУ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Автораспределение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботСтатьяКалькуляции.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидНаряда");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыБригадныхНарядов.Производство;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботСпособОтражения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидНаряда");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыБригадныхНарядов.Производство;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботРаспоряжение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидНаряда");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботНомерСтроки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботВидРабот.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботВидРаботЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботРаспоряжение.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботСтатьяКалькуляции.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботРасценка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботКоличество.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботСумма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыРаботСуммаРаспределено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидНаряда");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидыРабот.КодСтрокиРаспоряжения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьСоставОпераций();
	
	РаспределитьРаботыПоКТУ = Ложь;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		Элементы.ВидыРаботРасценка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Расценка, %1';uk='Розцінка, %1'"), Объект.Валюта);
	Иначе
		Элементы.ГруппаПредупреждение.Видимость = Истина;
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
	НадписьЗаголовкаТаблицы = НСтр("ru='Сотрудники (по документу в целом)';uk='Співробітники (по документу в цілому)'");
	
	ОбновитьИнформациюПоЗаказамВФорме();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ВыработкаСотрудников.ИменаРеквизитовПоВидуНаряда(
		Объект.ВидНаряда,
		Объект.ПоРаспоряжениям,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);

	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Элементы.ПоЗаказу.Доступность = Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.Производство;
	Элементы.ПоЗаказам.Доступность = Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.Производство;
	Элементы.ВидыРаботГруппаПродукции.ТолькоПросмотр = Объект.ПоРаспоряжениям;
	Элементы.СтраницыЗаказ.Видимость = ПолучитьФункциональнуюОпцию("УправлениеПредприятием");
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСумму()
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Расценка;
	
	Если Не Объект.Автораспределение Тогда
		
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("КлючСтроки", ТекущиеДанные.КлючСтроки));
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Строка.Сумма = Строка.Количество * ТекущиеДанные.Расценка;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидыРаботВидРаботПриИзмененииНаСервере(НомерСтроки)
	
	ДанныеСтроки = Объект.ВидыРабот[НомерСтроки - 1];
	
	Если Не Объект.Автораспределение Тогда
		
		НадписьЗаголовкаТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудники (строка %1: %2)';uk='Співробітники (рядок %1: %2)'"), НомерСтроки, СокрЛП(ДанныеСтроки.ВидРабот));
		
	КонецЕсли;
	
	ДанныеСтроки.Расценка = Справочники.ВидыРаботСотрудников.ДействующаяРасценкаВидаРабот(ДанныеСтроки.ВидРабот, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудниковПоСоставуБригадыНаСервере(КлючСтроки = Неопределено, ЕстьДанныеДляЗаполнения = Истина)
	
	Документы.ВыработкаСотрудников.ЗаполнитьСотрудниковПоСоставуБригады(Объект, КлючСтроки, ЕстьДанныеДляЗаполнения);
	РаспределитьРаботыПоКТУ = Истина;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
КонецПроцедуры

//++ НЕ УТКА

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	Документы.ВыработкаСотрудников.ЗаполнитьПоОстаткам(Объект, Ложь);
	
	РаспределитьРаботыПоКТУ = Ложь;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
	ОбновитьИнформациюПоЗаказамВФорме();
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

//-- НЕ УТКА

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Бригада) Тогда
		ПодразделениеБригады = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Бригада, "Подразделение");
		
		Если ПодразделениеБригады <> Объект.Подразделение Тогда
			Объект.Бригада = Справочники.Бригады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БригадаПриИзмененииНаСервере()
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Бригада, "Подразделение, Организация");
	
	Объект.Подразделение = Реквизиты.Подразделение;
	Объект.Организация = Реквизиты.Организация;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ = Ложь)
	
	Если Объект.Автораспределение Тогда
		
		Если РаспределитьРаботыПоКТУ Тогда
			Документы.ВыработкаСотрудников.РаспределитьРаботыПоКТУ(Объект);
		КонецЕсли;
		
		ВидыРаботИтог = Объект.ВидыРабот.Итог("Сумма");
		СотрудникиИтог = Объект.Сотрудники.Итог("Сумма");
		
		Для Каждого Строка из Объект.ВидыРабот Цикл
			Если ВидыРаботИтог = СотрудникиИтог Тогда
				
				Строка.СуммаРаспределено = Строка.Сумма;
				Строка.КоличествоРаспределено = Строка.Количество;
				
				Строка.КоличествоРаспределить = Строка.Количество - Строка.КоличествоРаспределено;
				Строка.СуммаРаспределить = Строка.Сумма - Строка.СуммаРаспределено;
				
			Иначе
				
				Строка.СуммаРаспределено = 0;
				Строка.КоличествоРаспределено = 0;
				
				Строка.КоличествоРаспределить = Строка.Количество - Строка.КоличествоРаспределено;
				Строка.СуммаРаспределить = Строка.Сумма - Строка.СуммаРаспределено;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СтруктураОтбора = Новый Структура;
		
		Для Каждого СтрокаВидРабот из Объект.ВидыРабот Цикл
			
			СтруктураОтбора.Вставить("КлючСтроки", СтрокаВидРабот.КлючСтроки);
			
			СотрудникиВидаРабот = Объект.Сотрудники.НайтиСтроки(СтруктураОтбора);
			
			КоличествоВидРаботРаспределено = 0;
			СуммаВидРаботРаспределено = 0;
			
			Для Каждого СтрокаСотрудник из СотрудникиВидаРабот Цикл
				
				КоличествоВидРаботРаспределено = КоличествоВидРаботРаспределено + СтрокаСотрудник.Количество;
				СуммаВидРаботРаспределено = СуммаВидРаботРаспределено + СтрокаСотрудник.Сумма;
				
			КонецЦикла;
			
			СтрокаВидРабот.КоличествоРаспределено = КоличествоВидРаботРаспределено;
			СтрокаВидРабот.СуммаРаспределено = СуммаВидРаботРаспределено;
			
			СтрокаВидРабот.КоличествоРаспределить = СтрокаВидРабот.Количество - СтрокаВидРабот.КоличествоРаспределено;
			СтрокаВидРабот.СуммаРаспределить = СтрокаВидРабот.Сумма - СтрокаВидРабот.СуммаРаспределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказамВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоВидуРабот()
	
	Если Не Объект.Автораспределение Тогда
		
		ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			Элементы.Сотрудники.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСтроки", Элементы.ВидыРабот.ТекущиеДанные.КлючСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитов(СтруктураРеквизитов, Отказ = Ложь)
	
	ШаблонСообщения = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
	
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл
		
		Если НЕ ЗначениеЗаполнено(Объект[Реквизит]) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Реквизит);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Реквизит, "Объект", Отказ);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВидыРаботВХранилище(УникальныйИдентификатор)
	
	Таблица = Объект.ВидыРабот.Выгрузить(,"ВидРабот, Распоряжение, КодСтрокиРаспоряжения");
	
	Возврат ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораРаспоряжений(АдресВХранилище)
	
	Таблица = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Объект.ВидыРабот.Загрузить(Таблица);
	Если Не Объект.Автораспределение Тогда
		
		Для Каждого Строка Из Объект.ВидыРабот Цикл 
			Строка.КлючСтроки = Новый УникальныйИдентификатор;
		КонецЦикла;
	КонецЕсли;
	
	РаспределитьРаботыПоКТУ = Истина;
	РассчитатьИтогиРаспределения(РаспределитьРаботыПоКТУ);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоЗаказамВФорме()
	
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(
		СписокЗаказов,
		Объект.Распоряжение,
		НадписьЗаголовокРаспоряжения,
		Элементы,
		Неопределено,
		Объект.ВидыРабот,
		"Распоряжение",
		Истина,
		НСтр("ru='Всего заказов';uk='Всього замовлень'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСоставОпераций()
	
	Поле = Элементы.ВидНаряда;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыБригадныхНарядов.Производство);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ВидыБригадныхНарядов.Ремонт);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

