#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") Тогда
			Если ДанныеЗаполнения.Действие = "Исправить" Тогда
				
				ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, 
												ДанныеЗаполнения.Ссылка, 
												"ДокументРассчитан,ДокументЗаполнения", 
												"ДанныеОбИндексации,Начисления,НачисленияПерерасчет,
												|НДФЛ,ОтработанноеВремяДляСреднегоОбщий,ПогашениеЗаймов,
												|Показатели,ПримененныеВычетыНаДетейИИмущественные,
												|РаспределениеРезультатовНачислений,РаспределениеРезультатовУдержаний,
												|СреднийЗаработокОбщий,Удержания");
				
				ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
				ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
					Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
					Модуль.ЗаполнитьОтпускПоЗаявкеСотрудника(ЭтотОбъект, ДанныеЗаполнения);
				КонецЕсли;
				
			ИначеЕсли ДанныеЗаполнения.Действие = "Заполнить" Тогда
				
				ЗаполнитьПоДаннымЗаполнения(ДанныеЗаполнения);
				
			ИначеЕсли ДанныеЗаполнения.Действие = "ЗаполнитьПоЗаявке" Тогда
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
					Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
					Модуль.ЗаполнитьОтпускПоЗаявкеСотрудника(ЭтотОбъект, ДанныеЗаполнения);
				КонецЕсли;
				
			ИначеЕсли ДанныеЗаполнения.Действие = "ЗаполнитьИзОбучения" Тогда
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда 
					Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
					Модуль.ЗаполнитьОтпускИзДокументаОбучения(ЭтотОбъект, ДанныеЗаполнения);
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ДанныеЗаполнения.Свойство("Сотрудник") И ЗначениеЗаполнено(ДанныеЗаполнения.Сотрудник) Тогда
			ДанныеЗаполнения = ДанныеЗаполнения.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ОбработкаЗаполненияМногофункциональногоДокумента(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.Отпуск.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
	// Резервы отпусков 3286
	ДанныеДляПроведения = ОтражениеЗарплатыВУчете.НоваяСтруктураРезультатыРасчетаЗарплаты();
	ДанныеДляПроведения.НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить();
	СтрокаСписокТаблиц = "НачисленнаяЗарплатаИВзносы";
	ОтражениеЗарплатыВФинансовомУчетеУП.СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения, СтрокаСписокТаблиц);
	// Конец
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	КонтейнерОшибок = Неопределено;
	
	ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок);	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ЭтотОбъект, Отказ);
		
		Если ДокументРассчитан Тогда 
			
			ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок);                                                                        
			
			ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
			ПроверитьПериодДействияНачислений(Отказ);
			
			Если Не Отказ Тогда
				
				ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
				ПараметрыПроверки.Организация = Организация;
				ПараметрыПроверки.ПериодРегистрации = ПериодРегистрации;
				ПараметрыПроверки.Документ = Ссылка;
				ПараметрыПроверки.Начисления = Начисления;
				ПараметрыПроверки.НачисленияПерерасчет = НачисленияПерерасчет;
				ПараметрыПроверки.ИсправленныйДокумент = ИсправленныйДокумент;
				ПараметрыПроверки.ОсновныеНачисления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидРасчетаОсновногоОтпуска);
				
				РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	

	Документы.Отпуск.ПроверитьРаботающих(ЭтотОбъект, Отказ);
	
	ПроверитьПериодРаботыЗаКоторыйПредоставляетсяОтпуск(КонтейнерОшибок);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, Отказ);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ПроверитьНаличиеКадровогоПриказаПоЗаявкеСотрудника(ЗаявкаСотрудника, Сотрудник, Ссылка, Отказ);
	КонецЕсли;
	       		
	УдалитьПроверенныеРеквизиты(ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодыОтсутствий = Документы.Отпуск.ПериодыОтсутствий(ЭтотОбъект);
	ПериодОтсутствия = Документы.Отпуск.ПериодОтсутствия(ПериодыОтсутствий);
	ДатаНачалаПериодаОтсутствия = ПериодОтсутствия.НачалоПериода;
	ДатаОкончанияПериодаОтсутствия  = ПериодОтсутствия.ОкончаниеПериода;
	
	ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачалаПериодаОтсутствия, ДатаОкончанияПериодаОтсутствия);
	
	ЗарплатаКадрыРасширенный.ПередЗаписьюМногофункциональногоДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПерерасчетЗарплаты.УдалениеПерерасчетаПоРегистратору(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДаннымЗаполнения(ДанныеЗаполнения)
	
	Если ЭтоНовый() Тогда
		
		ДокументЗаполнения = ДанныеЗаполнения.Ссылка;
		Организация = ДанныеЗаполнения.Организация;
		Сотрудник = ДанныеЗаполнения.Сотрудник;
		
		ДанныеЗаполнения.Свойство("Руководитель", Руководитель);
		ДанныеЗаполнения.Свойство("ДолжностьРуководителя", ДолжностьРуководителя);
		
		ПредоставитьОсновнойОтпуск = Ложь;
		
	КонецЕсли;
		
	РанняяДатаОтпуска = '00010101';
	Для каждого ДанныеОтпуска Из ДанныеЗаполнения.ДанныеОтпусков Цикл
		
		Если РанняяДатаОтпуска > ДанныеОтпуска.ДатаНачала
			ИЛИ РанняяДатаОтпуска = '00010101' Тогда
			
			РанняяДатаОтпуска = ДанныеОтпуска.ДатаНачала;
			
		КонецЕсли; 
		
		КоличествоДнейКомпенсации = ?(ДанныеОтпуска.Свойство("КоличествоДнейКомпенсации"), ДанныеОтпуска.КоличествоДнейКомпенсации, 0);
		
		Если (ДанныеЗаполнения.Свойство("АвторасчетПериодаПредоставления")
			И ДанныеЗаполнения.АвторасчетПериодаПредоставления)
			ИЛИ НЕ ДанныеОтпуска.Свойство("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск")
			ИЛИ НЕ ДанныеОтпуска.Свойство("КонецПериодаЗаКоторыйПредоставляетсяОтпуск") Тогда
			
		    // Если необходимо рассчитать период предоставления отпуска - рассчитываем.
			СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
			СтруктураПараметров.Сотрудник = Сотрудник;
			СтруктураПараметров.ТекущийРегистратор = Ссылка;
			СтруктураПараметров.ВидОтпуска = ДанныеОтпуска.ВидОтпуска;
			СтруктураПараметров.ДатаНачала = ДанныеОтпуска.ДатаНачала;
			СтруктураПараметров.ДатаОкончания = ДанныеОтпуска.ДатаОкончания;
			СтруктураПараметров.ДатаКомпенсации = ?(ЗначениеЗаполнено(ПериодРегистрации), ПериодРегистрации, НачалоМесяца(ТекущаяДатаСеанса()));
			СтруктураПараметров.КоличествоДнейКомпенсации = ?(ЗначениеЗаполнено(КоличествоДнейКомпенсации), КоличествоДнейКомпенсации, КоличествоДнейКомпенсацииОсновногоОтпуска);
			РабочийПериодОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
			
			НачалоПериодаПредоставления = РабочийПериодОтпуска.РабочийГодС;
			КонецПериодаПредоставления = РабочийПериодОтпуска.РабочийГодПо;
		Иначе
			// Если нет - копируем из данных заполнения.
			НачалоПериодаПредоставления = ДанныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск;
			КонецПериодаПредоставления = ДанныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск;
		КонецЕсли;
			
		Если ДанныеОтпуска.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
			
			Если ДанныеОтпуска.Свойство("Основание") Тогда
				Основание = ДанныеОтпуска.Основание;
			КонецЕсли;
			
			ДатаНачалаОсновногоОтпуска = ДанныеОтпуска.ДатаНачала;
			ДатаОкончанияОсновногоОтпуска = ДанныеОтпуска.ДатаОкончания;
			
			КоличествоДнейОсновногоОтпуска = ДанныеОтпуска.КоличествоДней;
			КоличествоДнейКомпенсацииОсновногоОтпуска = КоличествоДнейКомпенсации;
			
			ПредоставитьОсновнойОтпуск = КоличествоДнейОсновногоОтпуска <> 0;
			
			ПредоставитьКомпенсациюОсновногоОтпуска = КоличествоДнейКомпенсацииОсновногоОтпуска <> 0;
			
			НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= НачалоПериодаПредоставления;
			КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= КонецПериодаПредоставления;
			
			Если ЗначениеЗаполнено(ДанныеОтпуска.ВидОтпускаПрежний)
				И ДанныеОтпуска.ВидОтпускаПрежний <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				
				СтрокиОтпуска = ДополнительныеОтпуска.НайтиСтроки(Новый Структура("ВидОтпуска", ДанныеОтпуска.ВидОтпускаПрежний));
				Если СтрокиОтпуска.Количество() > 0 Тогда
					
					ДополнительныеОтпуска.Удалить(СтрокиОтпуска[0]);
					ПредоставитьДополнительныйОтпуск = ДополнительныеОтпуска.Количество() > 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ПредоставитьДополнительныйОтпуск = Истина;
			
			Если ЗначениеЗаполнено(ДанныеОтпуска.ВидОтпускаПрежний) Тогда
				
				Если ДанныеОтпуска.ВидОтпускаПрежний = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				
					ПредоставитьОсновнойОтпуск = Ложь;
				
					ДатаНачалаОсновногоОтпуска = '00010101';
					ДатаОкончанияОсновногоОтпуска = '00010101';
				
					КоличествоДнейОсновногоОтпуска = 0;
					КоличествоДнейКомпенсацииОсновногоОтпуска = 0;
					ПредоставитьКомпенсациюОсновногоОтпуска = Ложь;
					
					НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
					КонецПериодаЗаКоторыйПредоставляетсяОтпуск = '00010101';
					
					ИскомыйВидОтпуска = ДанныеОтпуска.ВидОтпуска;

				Иначе
					ИскомыйВидОтпуска = ДанныеОтпуска.ВидОтпускаПрежний;
				КонецЕсли
				
			Иначе
				ИскомыйВидОтпуска = ДанныеОтпуска.ВидОтпуска;
			КонецЕсли;
			
			СтрокиОтпуска = ДополнительныеОтпуска.НайтиСтроки(Новый Структура("ВидОтпуска", ИскомыйВидОтпуска));
			Если СтрокиОтпуска.Количество() > 0 Тогда
				СтрокаДополнительногоОтпуска = СтрокиОтпуска[0];
			Иначе
				СтрокаДополнительногоОтпуска = ДополнительныеОтпуска.Добавить();
			КонецЕсли;
			
			Если ДанныеОтпуска.Свойство("Основание") Тогда
				СтрокаДополнительногоОтпуска.Основание = ДанныеОтпуска.Основание;
			КонецЕсли;
			СтрокаДополнительногоОтпуска.ВидОтпуска = ДанныеОтпуска.ВидОтпуска;
			
			СтрокаДополнительногоОтпуска.ДатаНачала = ДанныеОтпуска.ДатаНачала;
			СтрокаДополнительногоОтпуска.ДатаОкончания = ДанныеОтпуска.ДатаОкончания;
			
			СтрокаДополнительногоОтпуска.КоличествоДней = ДанныеОтпуска.КоличествоДней;
			СтрокаДополнительногоОтпуска.КоличествоДнейКомпенсации = КоличествоДнейКомпенсации;
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДополнительногоОтпуска.ВидОтпуска, "ОтпускЯвляетсяЕжегодным") Тогда
				СтрокаДополнительногоОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск = НачалоПериодаПредоставления;
				СтрокаДополнительногоОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск = КонецПериодаПредоставления;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДатаНачалаСобытия = РанняяДатаОтпуска;
	
	// Определим категории начислений.
	Если РасчетДенежногоСодержания Тогда
		КатегорияОтпуск = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска;
	Иначе
		КатегорияОтпуск = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
	КонецЕсли;
	ОтборОтпуск = Новый Структура("ВидОтпуска,ВидВремени");
	ОтборОтпуск.ВидВремени = Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное;
	ОтборОтпуск.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	НачисленияОсновногоОтпуска = РасчетЗарплаты.НачисленияПоКатегории(КатегорияОтпуск, ОтборОтпуск);
	Если НачисленияОсновногоОтпуска.Количество() = 1 Тогда
		ВидРасчетаОсновногоОтпуска = НачисленияОсновногоОтпуска[0];
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачалаСобытия) И ЗначениеЗаполнено(Сотрудник) Тогда
		ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(ДатаНачалаСобытия, Сотрудник, ВидРасчетаОсновногоОтпуска);
		ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
		ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
	КонецЕсли;
	
	ПроизводственныйКалендарьСотрудника = КалендарныеГрафики.ПроизводственныйКалендарьУкраины();
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ГрафикРаботы");
		Если КадровыеДанныеСотрудника.Количество() > 0
			И ЗначениеЗаполнено(КадровыеДанныеСотрудника[0].ГрафикРаботы) Тогда
			ПроизводственныйКалендарьСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КадровыеДанныеСотрудника[0].ГрафикРаботы, "ПроизводственныйКалендарь");
		КонецЕсли; 
	КонецЕсли;
	
	ПланируемаяДатыВыплатыОтпуска = Документы.Отпуск.ПланируемаяДатыВыплатыОтпуска(ДатаНачалаСобытия, ПроизводственныйКалендарьСотрудника);
	Если ПланируемаяДатыВыплатыОтпуска <> Неопределено Тогда
		ПланируемаяДатаВыплаты = ПланируемаяДатыВыплатыОтпуска;
	КонецЕсли;														
	
	Если ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(РанняяДатаОтпуска) Тогда
			Дата = РанняяДатаОтпуска;
		Иначе
			Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ПериодРегистрации = НачалоМесяца(Дата);
	
		Если ЗначениеЗаполнено(Организация) Тогда
			
			ЗапрашиваемыеЗначения = Новый Структура;
			ЗапрашиваемыеЗначения.Вставить("Организация", "Организация");
			
			Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
				ЗапрашиваемыеЗначения.Вставить("Руководитель", "Руководитель");
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ДолжностьРуководителя) Тогда
				ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "ДолжностьРуководителя");
			КонецЕсли; 
			
			ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "ГлавныйБухгалтер");
			ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Бухгалтер");
			
			ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "РаботникКадровойСлужбы");
			ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "ДолжностьРаботникаКадровойСлужбы");
			
			ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтотОбъект, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));
			
		КонецЕсли; 
		
	КонецЕсли;
			
КонецПроцедуры

#Область ПроверкаЗаполненияДокумента

Функция ДокументГотовКРасчету(ВыводитьСообщения = Истина) Экспорт
	
	КонтейнерОшибок = Неопределено;
	
	ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок);
	
	ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок, Истина);                                                                        
		
	КонтейнерСодержитОшибки = Ложь;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(КонтейнерОшибок, КонтейнерСодержитОшибки);
	
	Если Не ВыводитьСообщения Тогда
		
		ПолучитьСообщенияПользователю(Истина);		
		
	КонецЕсли;
	
	Возврат Не КонтейнерСодержитОшибки;	
	
КонецФункции

Процедура ПроверитьЗаполнениеРеквизитовШапки(КонтейнерОшибок)
	
	Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
		ТекстСообщения = НСтр("ru='Не указан период регистрации.';uk='Не зазначений період реєстрації.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПериодРегистрации", ТекстСообщения, "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = НСтр("ru='Поле ""Организация"" обязательно к заполнению.';uk='Поле ""Організація"" обов''язкове до заповнення.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Организация", ТекстСообщения, "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		ТекстСообщения = НСтр("ru='Поле ""Сотрудник"" обязательно к заполнению.';uk='Поле ""Співробітник"" обов''язкове до заповнення.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.Сотрудник", ТекстСообщения, "");
	КонецЕсли;

	Если НЕ ПредоставитьОсновнойОтпуск 
		И НЕ ПредоставитьКомпенсациюОсновногоОтпуска 
		И НЕ ПредоставитьДополнительныйОтпуск 
		И НЕ ПредоставитьМатериальнуюПомощьПриОтпуске Тогда
		ТекстСообщения = НСтр("ru='Документом не оплачивается ни основной, ни дополнительный отпуск.';uk='Документом не оплачується ні основна, ні додаткова відпустка.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.", ТекстСообщения, "");
	КонецЕсли;
	
	Если ПредоставитьОсновнойОтпуск Тогда
		Если НЕ ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И НЕ ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) Тогда
			Если НЕ ПредоставитьКомпенсациюОсновногоОтпуска Тогда
				ТекстСообщения = НСтр("ru='Необходимо заполнить даты начала и окончания отпуска.';uk='Необхідно заповнити дати початку і закінчення відпустки.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаОсновногоОтпуска", ТекстСообщения, "");
			Иначе
				ТекстСообщения = НСтр("ru='Флажок оплаты основного отпуска взведен, но не одно поле не заполнено. Снимите флажок, или заполните даты основного отпуска.';uk='Прапорець оплати основної відпустки зведений, але не одне поле не заповнене. Зніміть прапорець, або заповніть дати основної відпустки.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПредоставитьОсновнойОтпуск", ТекстСообщения, "");
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) Тогда
				ТекстСообщения = НСтр("ru='Не заполнена дата начала основного отпуска.';uk='Не заповнено дата початку основної відпустки.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаНачалаОсновногоОтпуска", ТекстСообщения, "");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) И ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) Тогда
				ТекстСообщения = НСтр("ru='Не заполнена дата окончания основного отпуска.';uk='Не заповнено дата закінчення основної відпустки.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончанияОсновногоОтпуска", ТекстСообщения, "");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) И ДатаНачалаОсновногоОтпуска > ДатаОкончанияОсновногоОтпуска Тогда
				ТекстСообщения = НСтр("ru='Дата окончания основного отпуска не может быть меньше даты начала.';uk='Дата закінчення основної відпустки не може бути менша дати початку.'");
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДатаОкончанияОсновногоОтпуска", ТекстСообщения, "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		Если НЕ	ЗначениеЗаполнено(КоличествоДнейКомпенсацииОсновногоОтпуска) Тогда
			ТекстСообщения = НСтр("ru='Флажок оплаты компенсации основного отпуска взведен, но не указано количество дней. Снимите флажок или укажите количество дней компенсации';uk='Прапорець оплати компенсації основної відпустки зведений, але не зазначено кількість днів. Зніміть прапорець або вкажіть кількість днів компенсації'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПредоставитьКомпенсациюОсновногоОтпуска", ТекстСообщения, "");
		КонецЕсли;
	КонецЕсли;

	Если ПредоставитьДополнительныйОтпуск Тогда
		Если ДополнительныеОтпуска.Количество() < 1 Тогда                            			
			ТекстСообщения = НСтр("ru='Флажок оплаты дополнительных отпусков взведен, но не один отпуск не добавлен. Снимите флажок или добавьте дополнительный отпуск.';uk='Прапорець оплати додаткових відпусток зведений, але не одну відпустку не додано. Зніміть прапорець або додайте додаткову відпустку.'");
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска", ТекстСообщения, "");
		Иначе
			
			Если ПредоставитьОсновнойОтпуск Тогда
				Период = Новый Структура;
				Период.Вставить("НомерСтроки", 0);
				Период.Вставить("ДатаНачала", ДатаНачалаОсновногоОтпуска);
				Период.Вставить("ДатаОкончания", ДатаОкончанияОсновногоОтпуска);
				НомераСтрок = ПересеченияПериодов(Период, ДополнительныеОтпуска);
				Если ЗначениеЗаполнено(НомераСтрок) Тогда
					ТекстСообщения = НСтр("ru='Период основного отпуска пересекается с периодами следующих строк дополнительных отпусков: %1.';uk='Період основної відпустки перетинається з періодами наступних рядків додаткових відпусток: %1.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомераСтрок);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска", ТекстСообщения, "");
				КонецЕсли;
			КонецЕсли;
			
			Для каждого ДополнительныйОтпуск Из ДополнительныеОтпуска Цикл
				ИндексСтроки = ДополнительныйОтпуск.НомерСтроки - 1;
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ВидОтпуска) Тогда
					ТекстСообщения = НСтр("ru='В строке %1 не заполнен вид дополнительного отпуска.';uk='У рядку %1 не заповнений вид додаткової відпустки.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ВидОтпуска", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания)
					И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДнейКомпенсации) Тогда
					ТекстСообщения = НСтр("ru='В строке %1 не заполнены ни даты отпуска, ни количество дней компенсации.';uk='У рядку %1 не заповнені ні дати відпустки, ні кількість днів компенсації.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаНачала", ТекстСообщения, "", ИндексСтроки);
				Иначе
					Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) Тогда
						ТекстСообщения = НСтр("ru='В строке %1 не заполнена дата начала отпуска.';uk='У рядку %1 не заповнено дату початку відпустки.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаНачала", ТекстСообщения, "", ИндексСтроки);
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) Тогда
						ТекстСообщения = НСтр("ru='В строке %1 не заполнена дата окончания отпуска.';uk='У рядку %1 не заповнено дату закінчення відпустки.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаОкончания", ТекстСообщения, "", ИндексСтроки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) 
						И ДополнительныйОтпуск.ДатаНачала > ДополнительныйОтпуск.ДатаОкончания Тогда
						ТекстСообщения = НСтр("ru='В строке %1 дата окончания отпуска меньше даты начала.';uk='У рядку %1 дата закінчення відпустки менше дати початку.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаОкончания", ТекстСообщения, "", ИндексСтроки);
					КонецЕсли;
					Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) 
						И ДополнительныйОтпуск.ДатаНачала <= ДополнительныйОтпуск.ДатаОкончания  Тогда
						НомераСтрок = ПересеченияПериодов(ДополнительныйОтпуск, ДополнительныеОтпуска);
						Если ЗначениеЗаполнено(НомераСтрок) Тогда
							ТекстСообщения = НСтр("ru='Период строки %1 пересекается с периодами следующих строк: %2.';uk='Період рядка %1 перетинається з періодами наступних рядків: %2.'");
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки, НомераСтрок);
							ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ДатаОкончания", ТекстСообщения, "", ИндексСтроки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	    	
	ПроверитьЦелостностьПериодаОтпуска(КонтейнерОшибок);

КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовНеобходимыхДляРасчета(КонтейнерОшибок, ПроверкаПередРасчетом = Ложь)
	
	Если Не ДокументРассчитан И Не ПроверкаПередРасчетом Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПредоставитьОсновнойОтпуск 
		И ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) 
		И НЕ ЗначениеЗаполнено(ВидРасчетаОсновногоОтпуска) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияОсновногоОтпуска")  Тогда
			ТекстСообщения = НСтр("ru='Не выбран вид начисления для оплаты основного отпуска.';uk='Не вибрано вид нарахування для оплати основної відпустки.'");
		Иначе
			ТекстСообщения = НСтр("ru='Не удалось подобрать вид начисления для оплаты основного отпуска.';uk='Не вдалося підібрати вид нарахування для оплати основної відпустки.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидРасчетаОсновногоОтпуска", ТекстСообщения, "");
		
	КонецЕсли;
	
	Если ПредоставитьКомпенсациюОсновногоОтпуска 
		И Не ЗначениеЗаполнено(ВидРасчетаКомпенсацииОсновногоОтпуска) Тогда
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска") Тогда 
			ТекстСообщения = НСтр("ru='Не выбран вид начисления для оплаты компенсации основного отпуска.';uk='Не вибрано вид нарахування для оплати компенсації основної відпустки.'");
		Иначе
			ТекстСообщения = НСтр("ru='Не удалось подобрать вид начисления для оплаты компенсации основного отпуска.';uk='Не вдалося підібрати вид нарахування для оплати компенсації основної відпустки.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидРасчетаКомпенсацииОсновногоОтпуска", ТекстСообщения, "");
	КонецЕсли; 
	
	Если ПредоставитьДополнительныйОтпуск Тогда
		Для каждого ДополнительныйОтпуск Из ДополнительныеОтпуска Цикл
			ИндексСтроки = ДополнительныйОтпуск.НомерСтроки - 1;
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала)	И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ВидРасчета) Тогда
				Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияДополнительногоОтпуска") Тогда
					ТекстСообщения = НСтр("ru='В строке %1 не выбран вид начисления для оплаты отпуска.';uk='У рядку %1 не вибрано вид нарахування для оплати відпустки.'");
					ЗначениеПодстановки = ДополнительныйОтпуск.НомерСтроки;
				Иначе 
					ТекстСообщения = НСтр("ru='Не удалось подобрать вид начисления для оплаты %1.';uk='Не вдалося підібрати вид нарахування для оплати %1.'"); 
					ЗначениеПодстановки = ДополнительныйОтпуск.ВидОтпуска;
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗначениеПодстановки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ВидРасчета", ТекстСообщения, "", ИндексСтроки);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДнейКомпенсации) И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ВидРасчетаКомпенсации) Тогда
				Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска") Тогда 	
					ТекстСообщения = НСтр("ru='В строке %1 не выбран вид начисления для оплаты компенсации отпуска.';uk='У рядку %1 не вибрано вид нарахування для оплати компенсації відпустки.'");
					ЗначениеПодстановки = ДополнительныйОтпуск.НомерСтроки;
				Иначе 
					ТекстСообщения = НСтр("ru='Не удалось подобрать вид начисления для оплаты компенсации %1.';uk='Не вдалося підібрати вид нарахування для оплати компенсації %1.'"); 
					ЗначениеПодстановки = ДополнительныйОтпуск.ВидОтпуска;
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЗначениеПодстановки);
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].ВидРасчетаКомпенсации", ТекстСообщения, "", ИндексСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПредоставитьМатериальнуюПомощьПриОтпуске 
		И ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску") 
		И Не ЗначениеЗаполнено(ВидРасчетаМатериальнойПомощиПриОтпуске) Тогда
		ТекстСообщения = НСтр("ru='Не выбран вид начисления для выплаты материальной помощи к отпуску.';uk='Не вибрано вид нарахування для виплати матеріальної допомоги до відпустки.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ВидРасчетаМатериальнойПомощиПриОтпуске", ТекстСообщения, "");
	КонецЕсли;
	
	ПроверитьЗаполнениеПланируемойДатыВыплаты(КонтейнерОшибок, ПроверкаПередРасчетом);
	
КонецПроцедуры

Процедура ПроверитьЦелостностьПериодаОтпуска(КонтейнерОшибок)
	
	ПериодыРазрывов = ПериодыРазрывов();
	
	Для каждого ПериодРазрыва Из ПериодыРазрывов Цикл
		Если НачалоДня(ПериодРазрыва.ДатаНачала) = НачалоДня(ПериодРазрыва.ДатаОкончания) Тогда
			ТекстСообщения = НСтр("ru='Период отпуска прерывается %1.';uk='Період відпустки переривається %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(ПериодРазрыва.ДатаНачала,"ДЛФ=D"));
		Иначе 				
			ТекстСообщения = НСтр("ru='Период отпуска прерывается с %1 по %2.';uk='Період відпустки переривається з %1 по %2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(ПериодРазрыва.ДатаНачала,"ДЛФ=D"), Формат(ПериодРазрыва.ДатаОкончания,"ДЛФ=D"));
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПериодРазрыва" + ПериодРазрыва.ДатаНачала, ТекстСообщения, "");
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПланируемойДатыВыплаты(КонтейнерОшибок, ПроверкаПередРасчетом)
	
	МассивНачисленийДокумента = Новый Массив;
	
	Если НЕ ПроверкаПередРасчетом Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, Начисления.ВыгрузитьКолонку("Начисление"), Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, НачисленияПерерасчет.ВыгрузитьКолонку("Начисление"), Истина);
	КонецЕсли;
	
	Если УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, МассивНачисленийДокумента)
		И Не ЗначениеЗаполнено(ПланируемаяДатаВыплаты) Тогда
		ТекстСообщения = НСтр("ru='Дата выплаты обязательна к заполнению при выплате в межрасчет.';uk='Дата виплати обов''язкова до заповнення при виплаті у міжрозр. період.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ПланируемаяДатаВыплаты", ТекстСообщения, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПериодРаботыЗаКоторыйПредоставляетсяОтпуск(КонтейнерОшибок)
	
	Если ПредоставитьОсновнойОтпуск Или ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		Если ЗначениеЗаполнено(НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) И ЗначениеЗаполнено(КонецПериодаЗаКоторыйПредоставляетсяОтпуск) 
			И НачалоПериодаЗаКоторыйПредоставляетсяОтпуск > КонецПериодаЗаКоторыйПредоставляетсяОтпуск Тогда
			ТекстСообщения = НСтр("ru  = 'Начало периода работы за который предоставляется отпуск (компенсация) не может быть больше окончания этого периода.'"); 
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "");
		КонецЕсли;
	КонецЕсли;
	
	Если ПредоставитьДополнительныйОтпуск Тогда 
		ВидыОтпусков = ЭтотОбъект.ДополнительныеОтпуска.ВыгрузитьКолонку("ВидОтпуска");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтпусков.Ссылка КАК ВидОтпуска
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	ВидыОтпусков.ОтпускБезОплаты = ЛОЖЬ
		|	И ВидыОтпусков.Ссылка В(&ВидыОтпусков)
		|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным = ИСТИНА";
		Запрос.УстановитьПараметр("ВидыОтпусков", ВидыОтпусков);
		
		ЕжегодныеОтпуска = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОтпуска");
		
		Для каждого ДополнительныйОтпуск Из ДополнительныеОтпуска Цикл
			
			ИндексСтроки = ДополнительныйОтпуск.НомерСтроки - 1;
			
			Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДней) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЕжегодныеОтпуска.Найти(ДополнительныйОтпуск.ВидОтпуска) = Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск) Тогда
					ТекстСообщения = НСтр("ru='В строке %1 не указан период за который предоставляется отпуск.';uk='У рядку %1 не зазначено період за який надається відпустка.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И ЗначениеЗаполнено(ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск) Тогда
					ТекстСообщения = НСтр("ru='В строке %1 не заполнена дата начала периода за который предоставляется отпуск.';uk='У рядку %1 не заповнено дату початку періоду за який надається відпустка.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И ЗначениеЗаполнено(ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) Тогда
					ТекстСообщения = НСтр("ru='В строке %1 не заполнена дата окончания периода за который предоставляется отпуск.';uk='У рядку %1 не заповнено дату закінчення періоду за який надається відпустка.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].КонецПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И ЗначениеЗаполнено(ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск) 
					И ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск > ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск Тогда
					ТекстСообщения = НСтр("ru='В строке %1 дата окончания периода за который предоставляется отпуск меньше даты начала.';uk='У рядку %1 дата закінчення періоду за який надається відпустка менше дати початку.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДополнительныйОтпуск.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(КонтейнерОшибок, "Объект.ДополнительныеОтпуска[%1].НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", ТекстСообщения, "", ИндексСтроки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПересеченияПериодов(ПроверяемыйПериод, Периоды)
	НомераСтрок = "";
	Если ЗначениеЗаполнено(ПроверяемыйПериод.ДатаНачала) Тогда
		
		Для каждого Период Из Периоды Цикл
			Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
				Продолжить;
			КонецЕсли;
			Если ПроверяемыйПериод.НомерСтроки < Период.НомерСтроки Тогда
				Если ПроверяемыйПериод.ДатаНачала <= Период.ДатаНачала И ПроверяемыйПериод.ДатаОкончания >= Период.ДатаНачала Тогда
					НомераСтрок = НомераСтрок + ", " + Период.НомерСтроки; 
					Продолжить;
				КонецЕсли;
				Если ПроверяемыйПериод.ДатаНачала >= Период.ДатаНачала И ПроверяемыйПериод.ДатаНачала <= Период.ДатаОкончания Тогда
					НомераСтрок = НомераСтрок + ", " + Период.НомерСтроки; 
					Продолжить;
				КонецЕсли;
				Если ПроверяемыйПериод.ДатаОкончания >= Период.ДатаНачала И ПроверяемыйПериод.ДатаОкончания <= Период.ДатаОкончания Тогда
					НомераСтрок = НомераСтрок + ", " + Период.НомерСтроки; 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Возврат Прав(НомераСтрок, СтрДлина(НомераСтрок) - 2);
КонецФункции

Функция ПериодыРазрывов()
	
	ПериодыОтпусков = Новый ТаблицаЗначений;
	ПериодыОтпусков.Колонки.Добавить("ДатаНачала"); 
	ПериодыОтпусков.Колонки.Добавить("ДатаОкончания");
	
	ПериодыРазрывов = ПериодыОтпусков.СкопироватьКолонки();
	
	Если ПредоставитьОсновнойОтпуск Тогда
		ПериодОсновногоОтпуска = ПериодыОтпусков.Добавить();
		ПериодОсновногоОтпуска.ДатаНачала 		= ДатаНачалаОсновногоОтпуска;
		ПериодОсновногоОтпуска.ДатаОкончания 	= ДатаОкончанияОсновногоОтпуска;
	КонецЕсли;
	
	Если ПредоставитьДополнительныйОтпуск Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеОтпуска, ПериодыОтпусков);
	КонецЕсли;
	
	Компенсации = ПериодыОтпусков.НайтиСтроки(Новый Структура("ДатаНачала", '00010101'));
	Для каждого СтрокаКомпенсации Из Компенсации Цикл
		ПериодыОтпусков.Удалить(СтрокаКомпенсации);
	КонецЦикла;
	
	ПериодыОтпусков.Сортировать("ДатаНачала, ДатаОкончания");
	
	КоличествоПериодов = ПериодыОтпусков.Количество();
	Индекс = 0;
	Пока Индекс < КоличествоПериодов - 1 Цикл
		ТекущийПериод 	= ПериодыОтпусков[Индекс];
		СледующийПериод = ПериодыОтпусков[Индекс + 1];
		
		Если КонецДня(ТекущийПериод.ДатаОкончания) + 1 < НачалоДня(СледующийПериод.ДатаНачала) Тогда
			ПериодРазрыва = ПериодыРазрывов.Добавить();
			ПериодРазрыва.ДатаНачала = КонецДня(ТекущийПериод.ДатаОкончания) + 1;
			ПериодРазрыва.ДатаОкончания = НачалоДня(СледующийПериод.ДатаНачала) - 1;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат ПериодыРазрывов
КонецФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = ЭтотОбъект.Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Начисления", НСтр("ru='Начисления';uk='Нарахування'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Удержания", НСтр("ru='Удержания';uk='Утримання'"), "Удержание"));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru='Перерасчет прошлого периода';uk='Перерахунок минулого періоду'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
КонецПроцедуры

Процедура УдалитьПроверенныеРеквизиты(ПроверяемыеРеквизиты)
	
	Если ПроверяемыеРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудник");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
