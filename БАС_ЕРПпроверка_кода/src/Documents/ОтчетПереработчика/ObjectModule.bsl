#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет условия продаж в отчете переработчика
//
// Параметры:
//	УсловияЗакупок - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт 
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияЗакупок.Валюта;
	НаправлениеДеятельности = УсловияЗакупок.НаправлениеДеятельности;	
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ФормаОплаты) Тогда
		ФормаОплаты = УсловияЗакупок.ФормаОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация <> Организация Тогда
		
		Организация = УсловияЗакупок.Организация;
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.ФормаОплаты				= ФормаОплаты;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) Тогда
		Контрагент = УсловияЗакупок.Контрагент;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		Контрагент,
		ФормаОплаты,
		БанковскийСчетКонтрагента);
		
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
			
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
			ПараметрыОбъектаССоглашением(),
			ХозяйственнаяОперация,
			Валюта);
			
		Если ВалютаВзаиморасчетов.Пустая() И Не Договор.Пустая() Тогда
			ВалютаВзаиморасчетов = Договор.ВалютаВзаиморасчетов;
		КонецЕсли;
	
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(
			Договор,
			БанковскийСчетОрганизации,
			БанковскийСчетКонтрагента);	
			
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности,  , Договор);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияЗакупок.ГруппаФинансовогоУчета;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия закупок по торговому соглашению с поставщиком
//
// Параметры:
//	ПересчитатьЦены - Булево - Истина, если необходимо пересчитать цены в табличной части документа
//
Процедура ЗаполнитьУсловияЗакупокПоУмолчанию() Экспорт 
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, Новый Структура);
		
		ЦеныЗаполнены = Ложь;
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("СписокПродукции") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
			Если ДанныеЗаполнения.ПоЗаказам Тогда
				ЗаполнитьНаОснованииЗаказаПереработчику(ДанныеЗаполнения.МассивРаспоряжений[0], ДанныеЗаполнения.СписокПродукции);
			Иначе
				ЗаполнитьНаОснованииПоступлений(ДанныеЗаполнения.МассивРаспоряжений, ДанныеЗаполнения.СписокПродукции);
			КонецЕсли; 
		КонецЕсли; 
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеОтПереработчика") Тогда
		
		МассивРаспоряжений = Новый Массив;
		МассивРаспоряжений.Добавить(ДанныеЗаполнения);
		ЗаполнитьНаОснованииПоступлений(МассивРаспоряжений);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		
		ЗаполнитьНаОснованииЗаказаПереработчику(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения) 
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Продукция";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	Если ПоЗаказам И ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		МаксимальныйНомерГруппыЗатрат = 0;
		Услуги.Очистить();
		ДанныеСтроки = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЭтотОбъект);
	КонецЕсли; 
	
	СуммаДокумента = СуммаСНДС;
	
	Для Каждого ТекСтрока Из Продукция Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказПереработчику) Тогда
			ТекСтрока.ЗаказПереработчику = ЗаказПереработчику;
		КонецЕсли;
		Если ТекСтрока.НомерГруппыЗатрат <> 0 
			И ПоЗаказам 
			И ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
			ТекСтрока.НомерГруппыЗатрат = 0;
		КонецЕсли; 
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Материалы Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказПереработчику) Тогда
			ТекСтрока.ЗаказПереработчику = ЗаказПереработчику;
		КонецЕсли;
		Если ТекСтрока.НомерГруппыЗатрат <> 0 
			И ПоЗаказам 
			И ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
			ТекСтрока.НомерГруппыЗатрат = 0;
		КонецЕсли; 
		
	КонецЦикла;
	
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(ЭтотОбъект);
	СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(
		СуммаВзаиморасчетов,
		ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС));
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект, РежимЗаписи);
	
	
	ПараметрыОбъекта = ПараметрыОбъектаССоглашением();
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ПараметрыОбъекта);
	
	ВидыЗапасов.Очистить();
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика,
			Неопределено,
			Партнер,
			Партнер);
		
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		ИменаПолей.СтатусУказанияСерий = 0;
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Продукция, МестаУчета, ИменаПолей);
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Материалы, МестаУчета, ИменаПолей);
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Услуги,    МестаУчета, ИменаПолей);
		
		ЗаполнитьВидыЗапасов(Отказ);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Услуги);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ) 
	
	Если ОбменДанными.Загрузка Или ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) 
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ПоЗаказам Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.ДокументПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("Материалы.ДокументПоступления");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.ДокументПоступления");
	КонецЕсли; 
	
#Область ТЧ_Характеристика_и_Количество
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
		
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Материалы";
	ПараметрыПроверки.ПроверитьВозможностьОкругления = Ложь;
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
	ПараметрыПроверки.ИмяТЧ = "Материалы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
	ПараметрыПроверки.ИмяТЧ = "Услуги";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
#КонецОбласти
	
#Область ТЧ_ЗаказПереработчику_ТипСтоимости_и_ДоляСтоимости
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.ДоляСтоимости");
	
	Для ТекИндекс = 0 По Продукция.Количество() - 1 Цикл
		
		ТекСтрока = Продукция[ТекИндекс];
		
		Если ТекСтрока.ТипСтоимости = Перечисления.ТипыСтоимостиВыходныхИзделий.Фиксированная
			И НЕ ПоЗаказам 
			И ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
			
			ТекстОшибки = НСтр("ru='Выбор фиксированной стоимости доступен если группировка затрат ""По спецификациям продукции"" или ""Без группировки""';uk='Вибір фіксованої вартості доступний якщо групування витрат ""По специфікаціям продукції"" або ""Без групування""'");
			ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", ТекСтрока.НомерСтроки, "ТипСтоимости");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат,ТипСтоимости", 
							ТекСтрока.НомерГруппыЗатрат, Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается);
  		ПродукцияГруппы = Продукция.НайтиСтроки(СтруктураПоиска);
		
		// 
		КоличествоРассчитываемыхСтрок = ПродукцияГруппы.Количество();
		
		Если КоличествоРассчитываемыхСтрок = 0 Тогда
			
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ТекСтрока.НомерГруппыЗатрат);
   			СписокСтрок = Материалы.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				
				ТекстОшибки = НСтр("ru='Нельзя указывать сырье и материалы, когда вся продукция указана с типом стоимости ""Фиксированная""';uk='Не можна зазначати сировину і матеріали, коли вся продукція зазначена з типом вартості ""Фіксована""'");
				ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Продукция",
					ТекСтрока.НомерСтроки,
					"Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		// ДоляСтоимости
		Если ПродукцияГруппы.Количество() > 1
		   И ТекСтрока.ТипСтоимости = Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается
		   И ТекСтрока.ДоляСтоимости = 0 Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Доля стоимости"" в строке %НомерСтроки% списка ""Продукция""';uk='Не заповнено поле ""Частка вартості"" в рядку %НомерСтроки% списку ""Продукція""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ТекСтрока.НомерСтроки);
			
			ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Продукция",
				ТекСтрока.НомерСтроки,
				"ДоляСтоимости");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ПутьКТЧ, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
#КонецОбласти
	
#Область ТЧ_ДатаПлатежа
	ВзаиморасчетыСервер.ПроверитьДатуПлатежа(ЭтотОбъект, Отказ);
	
	ПараметрыОбъекта = ПараметрыОбъектаССоглашением();
	ПорядокРасчетовПоДокументу = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ПараметрыОбъекта);
	Если ПорядокРасчетовПоДокументу <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПлатежа");
	КонецЕсли;
#КонецОбласти
	
#Область Шапка_НоменклатураХарактеристика
	Если Не ПроверятьУказаниеРаботы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Номенклатура");
	КонецЕсли;
	Если Не Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
#КонецОбласти

#Область Услуги

	Если ПоЗаказам И ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Услуги.СтавкаНДС");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("СтавкаНДС");
	КонецЕсли; 

#КонецОбласти

#Область НаправлениеДеятелньости

	Если ЗначениеЗаполнено(НаправлениеДеятельности) 
		ИЛИ НЕ НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
#КонецОбласти

	ПроверитьСоответствиеЗаказу(Отказ);

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения) 
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ОтчетПереработчика.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьУслугиПереработчиковКОформлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПереданныеПереработчику(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПолученныеОтПереработчика(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПрочиеРасходыНезавершенногоПроизводства(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииНезавершенногоПроизводства(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	НДСВходящийСервер.ОтразитьНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(ДополнительныеСвойства, Движения, Отказ);
	НДСВходящийСервер.ОтразитьНДСРасчетНалоговогоКредита(ДополнительныеСвойства, Движения, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	// Контроль и запись движений
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ) 
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьНаОснованииЗаказаПереработчику(ДокументОснование, СписокПродукции = Неопределено) Экспорт
	
	ПоЗаказам = Истина;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПереработчику.Сделка                    КАК Сделка,
	|	ЗаказПереработчику.Ссылка                    КАК ЗаказПереработчику,
	|	ЗаказПереработчику.Партнер                   КАК Партнер,
	|	ЗаказПереработчику.Контрагент                КАК Контрагент,
	|	ЗаказПереработчику.Договор                   КАК Договор,
	|	ВЫБОР
	|		КОГДА ЗаказПереработчику.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЗаказПереработчику.Валюта
	|		ИНАЧЕ ЗаказПереработчику.Договор.ВалютаВзаиморасчетов
	|	КОНЕЦ                                        КАК ВалютаВзаиморасчетов,
	|	ЗаказПереработчику.Организация               КАК Организация,
	|	ЗаказПереработчику.Статус                    КАК СтатусДокумента,
	|	ЗаказПереработчику.Подразделение             КАК Подразделение,
	|	ЗаказПереработчику.Валюта                    КАК Валюта,
	|	ЛОЖЬ                                         КАК ЦенаВключаетНДС,
	|	ЗаказПереработчику.ФормаОплаты               КАК ФормаОплаты,
	|	ЗаказПереработчику.ПорядокРасчетов           КАК ПорядокРасчетов,
	|	ЗаказПереработчику.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ЗаказПереработчику.НалоговоеНазначение       КАК НалоговоеНазначение,
	|	ЗаказПереработчику.Руководитель              КАК Руководитель,
	|	ЗаказПереработчику.ГлавныйБухгалтер          КАК ГлавныйБухгалтер,
	|	ЗаказПереработчику.Номенклатура              КАК Номенклатура,
	|	ЗаказПереработчику.Характеристика            КАК Характеристика,
	|	ЗаказПереработчику.СтатьяКалькуляции         КАК СтатьяКалькуляции,
	|	ЗаказПереработчику.СтавкаНДС                 КАК СтавкаНДС,
	|	ЗаказПереработчику.БанковскийСчет            КАК БанковскийСчетОрганизации,
	|	0 КАК Сумма,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаСНДС,
	|	ЗаказПереработчику.Содержание                КАК Содержание,
	|	ЗаказПереработчику.ГруппировкаЗатрат         КАК ГруппировкаЗатрат,
	|	ЗаказПереработчику.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕ ЗаказПереработчику.Проведен               КАК ЕстьОшибкиПроведен,
	|	ВЫБОР ЗаказПереработчику.Статус
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|ГДЕ
	|	ЗаказПереработчику.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РеквизитыЗаказа = Запрос.Выполнить().Выбрать();
	РеквизитыЗаказа.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПереработчикам.КИсполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПереработчикам.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		РеквизитыЗаказа.ЗаказПереработчику,
		РеквизитыЗаказа.СтатусДокумента,
		РеквизитыЗаказа.ЕстьОшибкиПроведен,
		РеквизитыЗаказа.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	// Заполнение шапки.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(
		Договор,
		БанковскийСчетОрганизации,
		БанковскийСчетКонтрагента);
	
	Документы.ОтчетПереработчика.ЗаполнитьПоЗаказуПереработчику(ЗаказПереработчику, ЭтотОбъект);
	
	ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказПереработчику, Продукция, "ЗаказПереработчику");
	Если Не ЗначениеЗаполнено(ЗаказПереработчику) Тогда
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказПереработчику, Материалы, "ЗаказПереработчику");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
		Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииПоступлений(МассивРаспоряжений, СписокПродукции = Неопределено)

	ПоЗаказам = Ложь;
	ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.Организация)                 КАК Организация,
	|	МАКСИМУМ(ТаблицаДокумента.Партнер)                     КАК Партнер,
	|	МАКСИМУМ(ТаблицаДокумента.Подразделение)               КАК Подразделение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокумента.Подразделение)   КАК ПодразделениеКоличество,
	|	МАКСИМУМ(ТаблицаДокумента.Контрагент)                  КАК Контрагент,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокумента.Контрагент)      КАК КонтрагентКоличество,
	|	МАКСИМУМ(ТаблицаДокумента.Договор)                     КАК Договор,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокумента.Договор)         КАК ДоговорКоличество,
	|	МАКСИМУМ(ТаблицаДокумента.НалоговоеНазначение)         КАК НалоговоеНазначение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаДокумента.НалоговоеНазначение) КАК НалоговоеНазначениеКоличество,
	|	МАКСИМУМ(НЕ ТаблицаДокумента.Проведен)                 КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ПоступлениеОтПереработчика КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивРаспоряжений)";
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	
	Результат = Запрос.Выполнить();
	РеквизитыДокумента = Результат.Выбрать();
	
	РеквизитыДокумента.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыДокумента);
	
	Если МассивРаспоряжений.Количество() = 1 Тогда
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			МассивРаспоряжений[0],
			Неопределено,
			РеквизитыДокумента.ЕстьОшибкиПроведен);
	КонецЕсли; 
		
	// Очистка реквизитов если в основании они различные
	Если РеквизитыДокумента.КонтрагентКоличество <> 1 Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если РеквизитыДокумента.ДоговорКоличество <> 1 Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	Если РеквизитыДокумента.ПодразделениеКоличество <> 1 Тогда
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	Если РеквизитыДокумента.НалоговоеНазначениеКоличество <> 1 Тогда
		НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
	КонецЕсли;
	
	Документы.ОтчетПереработчика.ЗаполнитьПоПоступлениям(ЭтотОбъект, МассивРаспоряжений, СписокПродукции);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено) 
	
	Менеджер                  = Пользователи.ТекущийПользователь();
    Валюта                    = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
    ВалютаВзаиморасчетов      = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ВалютаВзаиморасчетов);	
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент,  , БанковскийСчетКонтрагента);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Организация;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ХозяйственнаяОперация     = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика;
	
	Если Не ЗначениеЗаполнено(НалоговоеНазначение) Тогда
		НалоговоеНазначение = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеМатериаловНаВыпускПродукции

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	// Сообщение о возможных ошибках
	ШаблонСообщения = НСтр("ru='Номенклатура %НоменклатураХарактеристика%
        |Оформлено больше чем передано на %Количество% %Единица% распоряжения %Заказ%'
        |;uk='Номенклатура %НоменклатураХарактеристика%
        |Оформлено більше ніж передано на %Количество% %Единица% розпорядження %Заказ%'");
	
	ДанныеСообщения = Новый Структура("ЗаказПереработчику, Количество, Номенклатура, Характеристика, ЕдиницаИзмерения");
	
	// Установим блокировку
	УстановитьБлокировкуТоваровПереданныхПереработчику();
	
	// Получим информацию об остатках видов запасов
	Если ЗначениеЗаполнено(НаправлениеДеятельности) Тогда
		Назначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаправлениеДеятельности, "Назначение");
	Иначе
		Назначение = Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	ТаблицаВидовЗапасов = ЗапасыСервер.ТаблицаОстатковТоваровПереданныхПереработчику(Ссылка,
							Материалы,
							Назначение,
							Дата,
							ДополнительныеСвойства);
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Аналитика.КлючАналитики  КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура   КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	ПРЕДСТАВЛЕНИЕ(Справочник.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК Справочник
	|	ПО
	|		Аналитика.Номенклатура = Справочник.Ссылка
	|
	|ГДЕ
	|	Аналитика.КлючАналитики В(&КлючиАналитик)");
	
	КлючиАналитик = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Материалы.ВыгрузитьКолонку("АналитикаУчетаНоменклатуры"));
	Запрос.УстановитьПараметр("КлючиАналитик", КлючиАналитик);
	
	ТабДанныхАналитики = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаМатериалов Из Материалы Цикл
		
		// Общее количество и стоимость к распределению
		КоличествоКРаспред = СтрокаМатериалов.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаМатериалов);
		
		// Определим виды запасов для каждой строки
		Для Каждого СтрокаЗапасов Из ТаблицаВидовЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Определеим распределяемое клоичество и стоимость
			РаспредКоличество = Мин(КоличествоКРаспред, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			НоваяСтрока.СтатьяКалькуляции = СтрокаМатериалов.СтатьяКалькуляции;
			НоваяСтрока.ЗаказПереработчику = СтрокаМатериалов.ЗаказПереработчику;
			НоваяСтрока.НомерГруппыЗатрат = СтрокаМатериалов.НомерГруппыЗатрат;
			НоваяСтрока.ДокументПоступления = СтрокаМатериалов.ДокументПоступления;
			
			НоваяСтрока.Количество = РаспредКоличество;
			КоличествоКРаспред = КоличествоКРаспред - РаспредКоличество;
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - РаспредКоличество;
			
			Если КоличествоКРаспред = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Удалим распределенные строки, чтобы заново их не искать
		МассивУдаляемыхСтрок = ТаблицаВидовЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
		Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
			ТаблицаВидовЗапасов.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Если не удалось определить все виды запасов, то возможно есть ошибка с остатками,
		// либо отчет переработчику вводится ДО передачи переработчику, что тоже является ошибкой
		Если Не КоличествоКРаспред = 0 Тогда
			
			// Добавим строку без вида запасов ...
			НоваяСтрока = ВидыЗапасов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалов);
			НоваяСтрока.Количество = КоличествоКРаспред;
			
			// ... и сообщим об ошибке
			ЗаполнитьЗначенияСвойств(ДанныеСообщения, НоваяСтрока);
			
			СтрокаДанныхАналитики = ТабДанныхАналитики.Найти(НоваяСтрока.АналитикаУчетаНоменклатуры, "АналитикаУчетаНоменклатуры");
			Если Не СтрокаДанныханалитики = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСообщения, СтрокаДанныхАналитики);
			КонецЕсли;
			
			ТекстСообщения = СформироватьТекстСообщенияОбОшибке(ШаблонСообщения, ДанныеСообщения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, , , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьБлокировкуТоваровПереданныхПереработчику()
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыПереданныеПереработчику");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Материалы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("АналитикаУчетаНоменклатуры", "АналитикаУчетаНоменклатуры");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция СформироватьТекстСообщенияОбОшибке(Знач ТекстСообщения, ДанныеСообщения)
	
	ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
		ДанныеСообщения.Номенклатура,
		ДанныеСообщения.Характеристика);
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураХарактеристика%", ПредставлениеНоменклатуры);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(ДанныеСообщения.Количество));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(ДанныеСообщения.ЕдиницаИзмерения));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%",      Строка(ДанныеСообщения.ЗаказПереработчику));
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыОбъектаССоглашением(ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация, ПорядокРасчетов";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура СформироватьСписокРегистровДляКонтроля() 
	
	Массив = Новый Массив;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.РасчетыСПоставщиками);
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ПроверитьСоответствиеЗаказу(Отказ)

	Если НЕ ПоЗаказам ИЛИ ЗаказПереработчику.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПереработчику.ГруппировкаЗатрат
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|ГДЕ
	|	ЗаказПереработчику.Ссылка = &ЗаказПереработчику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПереработчикуУслуги.НомерГруппыЗатрат
	|ИЗ
	|	Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
	|ГДЕ
	|	ЗаказПереработчикуУслуги.Ссылка = &ЗаказПереработчику";
	
	Запрос.УстановитьПараметр("ЗаказПереработчику", ЗаказПереработчику);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[0].Выбрать();
	Выборка.Следующий();
	Если Выборка.ГруппировкаЗатрат <> ГруппировкаЗатрат Тогда
		ТекстСообщения = НСтр("ru='Группировка затрат не соответствует группировке указанной в заказе. Необходимо снять флаг ""Переработка по заказу"" и повторно установить.';uk='Групування витрат не відповідає групуванняю зазначеному в замовленні. Необхідно зняти прапор ""Переробка по замовленнх"" і повторно встановити.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ГруппировкаЗатрат",, Отказ);
	КонецЕсли; 
	
	Если ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		УслугиЗаказа = Результат[1].Выгрузить();
		Для каждого СтрокаУслуга Из Услуги Цикл
			Если УслугиЗаказа.Найти(СтрокаУслуга.НомерГруппыЗатрат, "НомерГруппыЗатрат") = Неопределено Тогда
				ТекстСообщения = НСтр("ru='В заказе отсутствует услуга с номером группы затрат %1. Возможно, заказ был изменен после создания отчета переработчика. Необходимо удалить услугу в строке %2 и при необходимости повторно подобрать продукцию из заказа.';uk='У замовленні відсутня послуга з номером групи витрат %1. Можливо, замовлення було змінено після створення звіту переробника. Необхідно вилучити послугу в рядку %2 і при необхідності повторно підібрати продукцію із замовлення.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(СтрокаУслуга.НомерГруппыЗатрат, "ЧН=0; ЧГ=0"), Формат(СтрокаУслуга.НомерСтроки, "ЧН=0; ЧГ=0"));
				ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", СтрокаУслуга.НомерСтроки, "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКТЧ, , Отказ);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
