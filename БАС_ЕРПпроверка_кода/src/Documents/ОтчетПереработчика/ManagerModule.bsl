#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


#Область Заполнение

// Заполняет таблицу товаров по остаткам переданных/полученных ТМЦ по массиву заказов
//
// Параметры:
//	ДанныеОтбора            - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//	Товары                  - ДанныеФормыКоллекция - таблица товаров, в которую будут помещены остатки заказов
//	МассивЗаказов           - Массив - заказы, по которым будут отобраны остатки
//	Отгрузка                - Булево - Истина - ТЧ Материалы, Ложь - ТЧ Продукция
//
Процедура ЗаполнитьПоОстаткамЗаказов(ПараметрыЗаполнения, Товары, МассивЗаказов, Отгрузка = Ложь) Экспорт
	
	// Данные по остаткам товаров заказа.
	ВыборкаТовары = ПолучитьРезультатЗапросаПоОстаткамЗаказов(ПараметрыЗаполнения, МассивЗаказов, Отгрузка).Выбрать();
	
	// Заполнение таблицы
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоУпаковок = ВыборкаТовары.Количество / ВыборкаТовары.Коэффициент;
		
		Если КоличествоУпаковок > 0 Тогда
			
			СтрокаТаб = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаТовары);
			СтрокаТаб.КоличествоУпаковок = КоличествоУпаковок;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу товаров по массиву заказов
//
// Параметры:
//	Товары                  - ДанныеФормыКоллекция - таблица товаров, в которую будут помещены данные заказов
//	МассивЗаказов           - Массив - заказы, по которым будут отобраны данные
//	Отгрузка                - Булево - Истина - ТЧ Материалы, Ложь - ТЧ Продукция
//
Процедура ЗаполнитьПоЗаказу(ПараметрыЗаполнения, Товары, МассивЗаказов, Отгрузка = Ложь) Экспорт
	
	// Данные по остаткам товаров заказа.
	ВыборкаТовары = ПолучитьРезультатЗапросаПоЗаказам(МассивЗаказов, Отгрузка).Выбрать();
	
	// Заполнение таблицы
	Пока ВыборкаТовары.Следующий() Цикл
		
		СтрокаТаб = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаТовары);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет документ по заказу переработчику
// Если по заказу есть поступление продукции, которое еще не попало в отчет, то берется оно
// Если поступления нет, то берется остаток продукции заказа
//
// Параметры:
//  Заказ	 			- ДокументСсылка.ЗаказПереработчику - заказ по которому нужно заполнить
//  Объект	 			- ДокументОбъект, ДанныеФормыКоллекция - документ который нужно заполнить
//  НомераГруппыЗатрат	- Массив - можно передать номера группы затрат, чтобы заполнить только сырье и материалы по продукции
//
Процедура ЗаполнитьПоЗаказуПереработчику(Заказ, Объект, НомераГруппыЗатрат = Неопределено) Экспорт

	// Получение данных
	#Область Запрос
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Аналитика.КлючАналитики
	|ПОМЕСТИТЬ Аналитика 
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Склад = ЗаказПереработчику.Партнер
	|ГДЕ
	|	ЗаказПереработчику.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. ПродукцияКОформлению
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура             КАК Номенклатура,
	|	Аналитика.Характеристика           КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки            КАК КодСтроки,
	|	ТаблицаЗаказы.ТипСтоимости         КАК ТипСтоимости,
	|	ЕСТЬNULL(ТаблицаПродукция.НомерГруппыЗатрат, 0) КАК НомерГруппыЗатрат,
	|	СУММА(ТаблицаЗаказы.Количество)    КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		КодСтроки                  КАК КодСтроки,
	|		ТипСтоимости               КАК ТипСтоимости,
	|		КоличествоОстаток          КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(, Распоряжение = &Заказ) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		КодСтроки                  КАК КодСтроки,
	|		ТипСтоимости               КАК ТипСтоимости,
	|		ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-Количество
	|		ИНАЧЕ
	|			Количество
	|		КОНЕЦ                      КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика КАК Т
	|	ГДЕ
	|		Регистратор = &Регистратор 
	|		И Активность
	|		И Распоряжение = &Заказ
	|
	|	) КАК ТаблицаЗаказы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ТаблицаПродукция
	|	ПО ТаблицаПродукция.Ссылка = &Заказ
	|		И ТаблицаПродукция.КодСтроки = ТаблицаЗаказы.КодСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаЗаказы.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	ТаблицаЗаказы.ТипСтоимости,
	|	ЕСТЬNULL(ТаблицаПродукция.НомерГруппыЗатрат, 0),
	|	ТаблицаЗаказы.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2. ПродукцияКПоступлению
	|ВЫБРАТЬ
	|	Т.Номенклатура         КАК Номенклатура,
	|	Т.Характеристика       КАК Характеристика,
	|	Т.КодСтроки            КАК КодСтроки,
	|	Т.КОформлениюОстаток   КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Заказ) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3. ПродукцияЗаказа
	|ВЫБРАТЬ
	|	ЗаказПродукция.НомерСтроки          КАК НомерСтроки,
	|	ЗаказПродукция.Номенклатура         КАК Номенклатура,
	|	ЗаказПродукция.Характеристика       КАК Характеристика,
	|	ЗаказПродукция.НомерГруппыЗатрат    КАК НомерГруппыЗатрат,
	|	ЗаказПродукция.КодСтроки            КАК КодСтроки,
	|	ЗаказПродукция.Количество           КАК Количество,
	|	ЗаказПродукция.ДоляСтоимости        КАК ДоляСтоимости,
	|	ЗаказПродукция.Упаковка             КАК Упаковка,
	|   ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиПродукция, 1) КАК КоэффициентУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ЗаказПродукция
	|ГДЕ
	|	ЗаказПродукция.Ссылка = &Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПродукция.НомерСтроки          КАК НомерСтроки,
	|	ЗаказПродукция.Номенклатура         КАК Номенклатура,
	|	ЗаказПродукция.Характеристика       КАК Характеристика,
	|	ЗаказПродукция.НомерГруппыЗатрат    КАК НомерГруппыЗатрат,
	|	ЗаказПродукция.КодСтроки            КАК КодСтроки,
	|	ЗаказПродукция.Количество           КАК Количество,
	|	0                                   КАК ДоляСтоимости,
	|	ЗаказПродукция.Упаковка             КАК Упаковка,
	|   ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиПродукция, 1) КАК КоэффициентУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная) КАК ТипСтоимости
	|ИЗ
	|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ЗаказПродукция
	|ГДЕ
	|	ЗаказПродукция.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4. ОстаткиМатериалов
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура                   КАК Номенклатура,
	|	Аналитика.Характеристика                 КАК Характеристика,
	|	СУММА(ТаблицаЗаказы.Количество)          КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		КоличествоОстаток          КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеПереработчику.Остатки(
	|				,
	|				АналитикаУчетаНоменклатуры В
	|					(ВЫБРАТЬ
	|						Аналитика.КлючАналитики
	|					ИЗ
	|						Аналитика)) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-Количество
	|		ИНАЧЕ
	|			Количество
	|		КОНЕЦ                      КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеПереработчику КАК Т
	|	ГДЕ
	|		Регистратор = &Регистратор 
	|		И Активность
	|		И АналитикаУчетаНоменклатуры В
	|					(ВЫБРАТЬ
	|						Аналитика.КлючАналитики
	|					ИЗ
	|						Аналитика)
	|	) КАК ТаблицаЗаказы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаЗаказы.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5. МатериалыЗаказа
	|ВЫБРАТЬ
	|	ЗаказМатериалы.НомерСтроки          КАК НомерСтроки,
	|	ЗаказМатериалы.Номенклатура         КАК Номенклатура,
	|	ЗаказМатериалы.Характеристика       КАК Характеристика,
	|	ЗаказМатериалы.КодСтроки            КАК КодСтроки,
	|	ЗаказМатериалы.Количество           КАК Количество,
	|	ЗаказМатериалы.СтатьяКалькуляции    КАК СтатьяКалькуляции,
	|	ЗаказМатериалы.НомерГруппыЗатрат    КАК НомерГруппыЗатрат,
	|	ЗаказМатериалы.Упаковка             КАК Упаковка,
	|  ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиМатериалы, 1) КАК КоэффициентУпаковки
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ЗаказМатериалы
	|ГДЕ
	|	ЗаказМатериалы.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 6. УслугиЗаказа
	|ВЫБРАТЬ
	|	ЗаказУслуги.НомерСтроки          КАК НомерСтроки,
	|	ЗаказУслуги.Номенклатура         КАК Номенклатура,
	|	ЗаказУслуги.Характеристика       КАК Характеристика,
	|	ЗаказУслуги.Спецификация         КАК Спецификация,
	|	ЗаказУслуги.Сумма                КАК Сумма,
	|	ЗаказУслуги.СуммаНДС             КАК СуммаНДС,
	|	ЗаказУслуги.СтавкаНДС            КАК СтавкаНДС,
	|	ЗаказУслуги.СтатьяКалькуляции    КАК СтатьяКалькуляции,
	|	ЗаказУслуги.НомерГруппыЗатрат    КАК НомерГруппыЗатрат
	|ИЗ
	|	Документ.ЗаказПереработчику.Услуги КАК ЗаказУслуги
	|ГДЕ
	|	ЗаказУслуги.Ссылка = &Заказ";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиПродукция",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказПродукция.Упаковка",
		"ЗаказПродукция.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиМатериалы",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказМатериалы.Упаковка",
		"ЗаказМатериалы.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	ПродукцияКОформлению = Результат[1].Выгрузить();
	ПродукцияКПоступлению = Результат[2].Выгрузить();
	ПродукцияЗаказа = Результат[3].Выгрузить();
	МатериалыЗаказа = Результат[5].Выгрузить();
	УслугиЗаказа = Результат[6].Выгрузить();
	#КонецОбласти
	
	Если НомераГруппыЗатрат = Неопределено Тогда
	
		// Заполнение продукции по остаткам к оформлению
		#Область ПродукцияПоОстаткамКОформлению
		ЕстьПродукцияКОформлению = Ложь;
		Для каждого СтрокаКОформлению Из ПродукцияКОформлению Цикл
			
			Если СтрокаКОформлению.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПродукцияКОформлению = Истина;
			
			Если СтрокаКОформлению.КодСтроки <> 0 Тогда
				
				// Поступление по заказу
				СтруктураПоиска = Новый Структура("КодСтроки", СтрокаКОформлению.КодСтроки);
			 	СписокСтрок = ПродукцияЗаказа.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаЗаказа Из СписокСтрок Цикл
					СтрокаПродукция = Объект.Продукция.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаЗаказа);
					СтрокаПродукция.Количество = Мин(СтрокаЗаказа.Количество, СтрокаКОформлению.Количество);
					СтрокаПродукция.КоличествоУпаковок = СтрокаПродукция.Количество / СтрокаЗаказа.КоэффициентУпаковки;
					
					СтрокаУслуга = УслугиЗаказа.Найти(СтрокаПродукция.НомерГруппыЗатрат, "НомерГруппыЗатрат");
					Если СтрокаУслуга <> Неопределено Тогда
						СтрокаПродукция.Спецификация = СтрокаУслуга.Спецификация;
					КонецЕсли; 
					
					СтрокаКОформлению.Количество = СтрокаКОформлению.Количество - СтрокаПродукция.Количество;
					Если СтрокаКОформлению.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				// Поступление сверх заказа
				СтрокаПродукция = Объект.Продукция.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаКОформлению);
				СтрокаПродукция.КоличествоУпаковок = СтрокаПродукция.Количество;
				
			КонецЕсли;
			
		КонецЦикла; 
		#КонецОбласти
		
		// Заполнение продукции по остаткам заказа
		#Область ПродукцияПоОстаткамЗаказа
		Если НЕ ЕстьПродукцияКОформлению Тогда
			Для каждого СтрокаКПоступлению Из ПродукцияКПоступлению Цикл
				
				СтруктураПоиска = Новый Структура("КодСтроки", СтрокаКПоступлению.КодСтроки);
			 	СписокСтрок = ПродукцияЗаказа.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаЗаказа Из СписокСтрок Цикл
					СтрокаПродукция = Объект.Продукция.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаЗаказа);
					СтрокаПродукция.Количество = Мин(СтрокаЗаказа.Количество, СтрокаКПоступлению.Количество);
					СтрокаПродукция.КоличествоУпаковок = СтрокаПродукция.Количество / СтрокаЗаказа.КоэффициентУпаковки;
					
					СтрокаУслуга = УслугиЗаказа.Найти(СтрокаПродукция.НомерГруппыЗатрат, "НомерГруппыЗатрат");
					Если СтрокаУслуга <> Неопределено Тогда
						СтрокаПродукция.Спецификация = СтрокаУслуга.Спецификация;
					КонецЕсли; 
					
					СтрокаКПоступлению.Количество = СтрокаКПоступлению.Количество - СтрокаПродукция.Количество;
					Если СтрокаКПоступлению.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла; 
		КонецЕсли; 
		#КонецОбласти
		
	КонецЕсли; 
		
	СтруктураПоиска = Новый Структура("ТипСтоимости", Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается);
	ВыходныеИзделияЗаказовКопия = ПродукцияЗаказа.Скопировать(СтруктураПоиска);
	ВыходныеИзделияЗаказовКопия.Свернуть("НомерГруппыЗатрат,Номенклатура,Характеристика", "Количество");
	
	// Услуги
	#Область Услуги
	СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Ложь);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	Для каждого СтрокаУслугаЗаказа Из УслугиЗаказа Цикл
		Если НомераГруппыЗатрат <> Неопределено
			И НомераГруппыЗатрат.Найти(СтрокаУслугаЗаказа.НомерГруппыЗатрат) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслугаЗаказа.НомерГруппыЗатрат);
   		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслугаЗаказа.НомерГруппыЗатрат);
   		СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокаУслуга = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуга, СтрокаУслугаЗаказа);
		Иначе
			СтрокаУслуга = СписокСтрок[0];
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		ФактическаяПродукция = Объект.Продукция.Выгрузить(СтруктураПоиска, "Номенклатура,Характеристика,Количество");
		ФактическаяПродукция.Свернуть("Номенклатура,Характеристика", "Количество");
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат");
	  	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУслуга);
  		НормативнаяПродукция = ВыходныеИзделияЗаказовКопия.Скопировать(СтруктураПоиска);
		КоэффициентНормативов = КоэффициентНормативов(ФактическаяПродукция, НормативнаяПродукция);
		
		СтрокаУслуга.Сумма = СтрокаУслугаЗаказа.Сумма * КоэффициентНормативов;
		СтрокаУслуга.Сумма = Мин(СтрокаУслугаЗаказа.Сумма, СтрокаУслуга.Сумма);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаУслуга, СтруктураДействий, Неопределено);
		
	КонецЦикла; 
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки 
		И Объект.Услуги.Количество() <> 0 Тогда
		СтрокаУслуга = Объект.Услуги[0];
		Объект.Сумма     = СтрокаУслуга.Сумма;
		Объект.СтавкаНДС = СтрокаУслуга.СтавкаНДС;
	КонецЕсли;
	Объект.Сумма = Объект.Услуги.Итог("Сумма");
	Объект.СуммаСНДС = Объект.Услуги.Итог("СуммаСНДС");
	Объект.СуммаНДС = Объект.Услуги.Итог("СуммаНДС");
	Объект.СуммаДокумента = Объект.СуммаСНДС;
	#КонецОбласти
	
	// Заполнение материалов пропорционально продукции
	#Область Материалы
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		Если НомераГруппыЗатрат <> Неопределено И НомераГруппыЗатрат.Найти(СтрокаУслуга.НомерГруппыЗатрат) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		ФактическаяПродукция = Объект.Продукция.Выгрузить(СтруктураПоиска, "Номенклатура,Характеристика,Количество");
		ФактическаяПродукция.Свернуть("Номенклатура,Характеристика", "Количество");
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат");
	  	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУслуга);
  		НормативнаяПродукция = ВыходныеИзделияЗаказовКопия.Скопировать(СтруктураПоиска);
		КоэффициентНормативов = КоэффициентНормативов(ФактическаяПродукция, НормативнаяПродукция);
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат");
	   	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУслуга);
		Нормативы = МатериалыЗаказа.НайтиСтроки(СтруктураПоиска);
		ЗаполнитьПоНормативам(Объект.Материалы, Нормативы, КоэффициентНормативов, СтрокаУслуга.НомерГруппыЗатрат);
				
	КонецЦикла; 
	#КонецОбласти
	
КонецПроцедуры

// Заполняет документ по поступлениям от переработчика
//
// Параметры:
//  Объект				- ДокументОбъект, ДанныеФормыКоллекция - документ который нужно заполнить
//  МассивРаспоряжений	- Массив - список поступления
//  СписокПродукции		- Массив - можно список продукции, чтобы заполнить только по ней
//
Процедура ЗаполнитьПоПоступлениям(Объект, МассивРаспоряжений, СписокПродукции = Неопределено) экспорт

	Если МассивРаспоряжений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ПоступлениеОтПереработчика"));
	ТаблицаПродукции.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число"));

	Если СписокПродукции <> Неопределено Тогда
		Для каждого ДанныеПродукции Из СписокПродукции Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПродукции.Добавить(), ДанныеПродукции);
		КонецЦикла; 
	КонецЕсли; 
	
	// Получение данных
	#Область Запрос
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗаказы.ДокументПоступления  КАК ДокументПоступления,
	|	Аналитика.Номенклатура             КАК Номенклатура,
	|	Аналитика.Характеристика           КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки            КАК КодСтроки,
	|	ТаблицаЗаказы.ТипСтоимости         КАК ТипСтоимости,
	|	СУММА(ТаблицаЗаказы.Количество)    КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		Распоряжение               КАК ДокументПоступления,
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		КодСтроки                  КАК КодСтроки,
	|		ТипСтоимости               КАК ТипСтоимости,
	|		КоличествоОстаток          КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(, Распоряжение В (&МассивРаспоряжений)) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Распоряжение               КАК ДокументПоступления,
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		КодСтроки                  КАК КодСтроки,
	|		ТипСтоимости               КАК ТипСтоимости,
	|		ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-Количество
	|		ИНАЧЕ
	|			Количество
	|		КОНЕЦ                      КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика КАК Т
	|	ГДЕ
	|		Регистратор = &Регистратор 
	|		И Активность
	|		И Распоряжение В (&МассивРаспоряжений)
	|
	|	) КАК ТаблицаЗаказы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО ТаблицаЗаказы.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.ДокументПоступления,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	ТаблицаЗаказы.ТипСтоимости,
	|	ТаблицаЗаказы.КодСтроки
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. ПродукцияПоступлений
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Ссылка               КАК ДокументПоступления,
	|	ТаблицаПродукция.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура         КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика       КАК Характеристика,
	|	ТаблицаПродукция.КодСтроки            КАК КодСтроки,
	|	ТаблицаПродукция.Количество           КАК Количество,
	|	ТаблицаПродукция.Упаковка             КАК Упаковка,
	|   ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиПродукция, 1) КАК КоэффициентУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости
	|ИЗ
	|	Документ.ПоступлениеОтПереработчика.Товары КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Ссылка В (&МассивРаспоряжений)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Ссылка               КАК ДокументПоступления,
	|	ТаблицаПродукция.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаПродукция.Номенклатура         КАК Номенклатура,
	|	ТаблицаПродукция.Характеристика       КАК Характеристика,
	|	ТаблицаПродукция.КодСтроки            КАК КодСтроки,
	|	ТаблицаПродукция.Количество           КАК Количество,
	|	ТаблицаПродукция.Упаковка             КАК Упаковка,
	|   ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиПродукция, 1) КАК КоэффициентУпаковки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная) КАК ТипСтоимости
	|ИЗ
	|	Документ.ПоступлениеОтПереработчика.ВозвратныеОтходы КАК ТаблицаПродукция
	|ГДЕ
	|	ТаблицаПродукция.Ссылка В (&МассивРаспоряжений)";
	
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиПродукция",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаПродукция.Упаковка",
		"ТаблицаПродукция.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	ПродукцияКОформлению = Результат[0].Выгрузить();
	ПродукцияПоступлений = Результат[1].Выгрузить();
	#КонецОбласти
	
	// Заполнение продукции по остаткам к оформлению
	#Область ПродукцияПоОстаткамКОформлению
	Для каждого СтрокаКОформлению Из ПродукцияКОформлению Цикл
		
		Если СписокПродукции <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтроки", СтрокаКОформлению.ДокументПоступления, СтрокаКОформлению.КодСтроки);
			СписокСтрок = ТаблицаПродукции.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ДокументПоступления,КодСтроки");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКОформлению);
	 	ПродукцияТекущегоПоступления = ПродукцияПоступлений.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаПоступления Из ПродукцияТекущегоПоступления Цикл
			
			СтруктураПоиска = Новый Структура("ДокументПоступления,КодСтроки");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоступления);
   			СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				
				СтрокаПродукция = Объект.Продукция.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаПоступления);
				
				ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
														Объект.Подразделение, 
														СтрокаПродукция.Номенклатура, 
														СтрокаПродукция.Характеристика, 
														Объект.Дата);
														
				Если ДанныеСпецификации <> Неопределено Тогда
					СтрокаПродукция.Спецификация = ДанныеСпецификации.Спецификация;
				КонецЕсли;
														
				СтрокаПродукция.НомерГруппыЗатрат = ПереработкаНаСторонеКлиентСервер.НомерГруппыЗатратВОтчетеПереработчика(Объект, СтрокаПродукция);
				
			Иначе
				
				СтрокаПродукция = СписокСтрок[0];
				ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаПоступления);
				
			КонецЕсли;
			
			СтрокаПродукция.Количество = Мин(СтрокаПоступления.Количество, СтрокаКОформлению.Количество);
			СтрокаПродукция.КоличествоУпаковок = СтрокаПродукция.Количество / СтрокаПоступления.КоэффициентУпаковки;
			
			// Добавление новой услуги если это новая группа затрат
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаПродукция.НомерГруппыЗатрат);
			СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				СтрокаУслуга = Объект.Услуги.Добавить();
				СтрокаУслуга.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
				СтрокаУслуга.ДокументПоступления = СтрокаПродукция.ДокументПоступления;
			КонецЕсли;
			
			СтрокаКОформлению.Количество = СтрокаКОформлению.Количество - СтрокаПродукция.Количество;
			Если СтрокаКОформлению.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 
	#КонецОбласти
	
	// Заполнение материалов по спецификациям
	#Область Материалы
	НомераГруппыЗатрат = Новый Массив;
	СписокНоменклатуры = Новый Массив;
	
	Для каждого ТекущиеДанные Из Объект.Продукция Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НомераГруппыЗатрат.Найти(ТекущиеДанные.НомерГруппыЗатрат) = Неопределено Тогда
			ДанныеПоНоменклатуре = Новый Структура;
			ДанныеПоНоменклатуре.Вставить("Номенклатура",        ТекущиеДанные.Номенклатура);
			ДанныеПоНоменклатуре.Вставить("Характеристика",      ТекущиеДанные.Характеристика);
			ДанныеПоНоменклатуре.Вставить("Подразделение",       Объект.Подразделение);
			ДанныеПоНоменклатуре.Вставить("Спецификация",        ТекущиеДанные.Спецификация);
			ДанныеПоНоменклатуре.Вставить("Количество",          ТекущиеДанные.Количество);
			ДанныеПоНоменклатуре.Вставить("Упаковка",            ТекущиеДанные.Упаковка);
			ДанныеПоНоменклатуре.Вставить("НомерГруппыЗатрат",   ТекущиеДанные.НомерГруппыЗатрат);
			ДанныеПоНоменклатуре.Вставить("ДокументПоступления", ТекущиеДанные.ДокументПоступления);
			
			СписокНоменклатуры.Добавить(ДанныеПоНоменклатуре);
			НомераГруппыЗатрат.Добавить(ТекущиеДанные.НомерГруппыЗатрат);
		КонецЕсли; 
		
		ЗаполнитьМатериалыПоСпецификации(СписокНоменклатуры, Объект);
		
	КонецЦикла;	
	
	#КонецОбласти
	
КонецПроцедуры

// Заполняет сырье и материалы по спецификаци продукции
//
// Параметры:
//  СписокНоменклатуры	- Массив - список продукции по которой нужно заполнить
//  Объект				- ДокументОбъект, ДанныеФормыКоллекция - документ который нужно заполнить
//
Процедура ЗаполнитьМатериалыПоСпецификации(СписокНоменклатуры, Объект) Экспорт

	ДанныеСпецификаций = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры);
	ДопЗначения = Новый Структура("ДокументПоступления");
	Для ИндексТекущихДанных = 0 По СписокНоменклатуры.ВГраница() Цикл
	
		СтруктураДанных = ДанныеСпецификаций.Получить(ИндексТекущихДанных);
		Если СтруктураДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоНоменклатуре = СписокНоменклатуры.Получить(ИндексТекущихДанных);
		ЗаполнитьЗначенияСвойств(ДопЗначения, ДанныеПоНоменклатуре);
		
		// Материалы
		Документы.ЗаказПереработчику.ЗаполнитьПоНормативам(
				Объект.Материалы, 
				СтруктураДанных.МатериалыИУслуги, 
				1, 
				ДанныеПоНоменклатуре.НомерГруппыЗатрат,
				ДопЗначения);
				
		// Услуги		
		Если НЕ СтруктураДанных.МногоэтапныйПроизводственныйПроцесс И СтруктураДанных.Этапы[0].ПроизводствоНаСтороне Тогда
			ДаннныеЭтапа = СтруктураДанных.Этапы[0];
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ДанныеПоНоменклатуре.НомерГруппыЗатрат);
			СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				СтрокаУслуга = СписокСтрок[0];
				СтрокаУслуга.Номенклатура = ДаннныеЭтапа.УслугаПереработчика;
				СтрокаУслуга.Характеристика = ДаннныеЭтапа.ХарактеристикаУслугиПереработчика;
				СтрокаУслуга.СтатьяКалькуляции = ДаннныеЭтапа.СтатьяКалькуляции;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеПоРеглУчетуУКР

Функция ТекстОтраженияВРеглУчетеУКР() Экспорт
	
#Область ТекстСписанияВПроизводство // (Дт 23, 9 :: Кт 206)
	ТекстСписанияВПроизводство = 
	"ВЫБРАТЬ //// Списание на расходы товаров (Дт 23, 9 :: Кт 206)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата			КАК Период,
	|	Операция.Организация	КАК Организация,
	|	НЕОПРЕДЕЛЕНО			КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Стоимости.Сумма, Строки.Сумма) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы)			КАК ВидСчетаДт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)КАК АналитикаУчетаДт,
	|	Операция.Партнер											КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК ВалютаДт,
	|	Операция.Подразделение										КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)	КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)	КАК СчетДт,
	|	ЕСТЬNULL(Стоимости.ГруппаПродукции, Строки.ГруппаПродукции)	КАК СубконтоДт1,
	|	Строки.Номенклатура											КАК СубконтоДт2,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.МатериальныеЗатраты)	КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0			 КАК СуммаНУДт,
	|	0			 КАК СуммаПРДт,
	|	0			 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО 												КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности								КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку)	КАК СчетКт,
	|	ВЫБОР КОГДА Строки.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		Строки.Контрагент
	|	ИНАЧЕ
	|		Операция.Контрагент
	|	КОНЕЦ				КАК СубконтоКт1,
	|	Строки.Номенклатура	КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО		КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	ВЫБОР КОГДА Операция.Подразделение = ЕСТЬNULL(Стоимости.Подразделение, Строки.Подразделение)
	|		ИЛИ СТроки.Номенклатура.ГруппаАналитическогоУчета = ЕСТЬNULL(Стоимости.ГруппаПродукции, Строки.ГруппаПродукции)
	|		ТОГДА Строки.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Списание на расходы товаров"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПереработчика КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтроки КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСтоимости КАК Стоимости
	|	ПО
	|		Строки.Ссылка = Стоимости.Ссылка
	|		И Строки.Номенклатура = Стоимости.Номенклатура
	|		И Строки.Склад = Стоимости.Склад
	|		И Строки.ГруппаФинансовогоУчета = Стоимости.ГруппаФинансовогоУчета
	|		И Строки.ТипЗапасов = Стоимости.ТипЗапасов
	|		И Строки.Контрагент = Стоимости.Контрагент
	|		И Строки.СтатьяРасходов = Стоимости.СтатьяРасходов
	|		И Стоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|ГДЕ
	|	НЕ Строки.ТипЗапасов В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|";
#КонецОбласти
	
#Область ТекстЗакупкаУслуги // (Дт 23, 9 :: Кт 63)
	ТекстЗакупкаУслуги = "
	|ВЫБРАТЬ //// Поступление услуг (Дт 23, 9 :: Кт 63)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата		 КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО		 КАК ИдентификаторСтроки,
	|
	|	ВЫБОР КОГДА Операция.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) ТОГДА
	|		ЕСТЬNULL(СУММА(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл), МАКСИМУМ(Операция.СуммаСНДС))
	|	ИНАЧЕ
	|		ЕСТЬNULL(СУММА(Суммы.СуммаБезНДСРегл), МАКСИМУМ(Операция.СуммаСНДС - Операция.СуммаНДС))
	|	КОНЕЦ КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы)				КАК ВидСчетаДт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)	КАК АналитикаУчетаДт,
	|	Операция.Партнер												КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО													КАК ВалютаДт,
	|	Операция.Подразделение											КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)		КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	НЕОПРЕДЕЛЕНО													КАК СчетДт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)	КАК СубконтоДт1,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее)					КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО													КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)	КАК ВидСчетаКт,
	|	ЕСТЬNULL(Расчеты.ГруппаФинансовогоУчета, Операция.ГруппаФинансовогоУчета) КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО													КАК МестоУчетаКт,
	|
	|	Операция.ВалютаВзаиморасчетов	КАК ВалютаКт,
	|	ЕСТЬNULL(Расчеты.Подразделение, Операция.Подразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(Расчеты.НаправлениеДеятельности, Операция.НаправлениеДеятельности) КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	НЕОПРЕДЕЛЕНО					КАК СчетКт,
	|	Операция.Контрагент				КАК СубконтоКт1,
	|	Операция.Договор				КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО					КАК СубконтоКт3,
	|
	|	МАКСИМУМ(
	|		ВЫБОР КОГДА Операция.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) ТОГДА
	|			Операция.СуммаВзаиморасчетов
	|		ИНАЧЕ
	|			Операция.СуммаВзаиморасчетов - Операция.СуммаНДСВзаиморасчетов
	|		КОНЕЦ) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Поступление услуг"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПереработчика КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПереработчика.Услуги КАК Строки
	|	ПО
	|		Строки.Ссылка = ДокументыКОтражению.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Операция.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Расчеты КАК Расчеты
	|	ПО 
	|		Операция.Ссылка = Расчеты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	Операция.Дата,
	|	Операция.Организация,
	|	Операция.Партнер,
	|	Операция.Подразделение,
	|	ЕСТЬNULL(Расчеты.ГруппаФинансовогоУчета, Операция.ГруппаФинансовогоУчета),
	|	Операция.ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(Расчеты.Подразделение, Операция.Подразделение),
	|	ЕСТЬNULL(Расчеты.НаправлениеДеятельности, Операция.НаправлениеДеятельности),
	|	Операция.Контрагент,
	|	Операция.Договор
	|";
#КонецОбласти
	
#Область ТекстЗакупкаНДСОжидаемый // (Дт 6442 :: Кт 63)
	ТекстЗакупкаНДСОжидаемый = "
	|ВЫБРАТЬ //// НДС при приобретении (Дт 6442 :: Кт 63)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата			КАК Период,
	|	Операция.Организация	КАК Организация,
	|	НЕОПРЕДЕЛЕНО			КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(СУММА(Суммы.СуммаНДСРегл), МАКСИМУМ(Операция.СуммаНДС)) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный) КАК СчетДт,
	|	Операция.Контрагент	КАК СубконтоДт1,
	|	Операция.Договор	КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО		КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками) КАК ВидСчетаКт,
	|	ЕСТЬNULL(Расчеты.ГруппаФинансовогоУчета, Операция.ГруппаФинансовогоУчета) КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.ВалютаВзаиморасчетов	КАК ВалютаКт,
	|	ЕСТЬNULL(Расчеты.Подразделение, Операция.Подразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(Расчеты.НаправлениеДеятельности, Операция.НаправлениеДеятельности) КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	НЕОПРЕДЕЛЕНО					КАК СчетКт,
	|	Операция.Контрагент				КАК СубконтоКт1,
	|	Операция.Договор				КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО					КАК СубконтоКт3,
	|
	|	МАКСИМУМ(Операция.СуммаНДСВзаиморасчетов) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""НДС при приобретении"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПереработчика КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПереработчика.Услуги КАК Строки
	|	ПО
	|		Строки.Ссылка = ДокументыКОтражению.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Операция.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Расчеты КАК Расчеты
	|	ПО 
	|		Операция.Ссылка = Расчеты.Ссылка
	|	
	|ГДЕ
	|	НЕ Операция.НалоговоеНазначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	Операция.Дата,
	|	Операция.Организация,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалоговыйКредитНеподтвержденный),
	|	Операция.Контрагент,
	|	ЕСТЬNULL(Расчеты.ГруппаФинансовогоУчета, Операция.ГруппаФинансовогоУчета),
	|	ЕСТЬNULL(Расчеты.Подразделение, Операция.Подразделение),
	|	ЕСТЬNULL(Расчеты.НаправлениеДеятельности, Операция.НаправлениеДеятельности)
	|";
#КонецОбласти
	
#Область ТекстСписанияВПроизводствоМатериаловДавальца // (Дт  :: Кт 0222)
	ТекстСписанияВПроизводствоМатериаловДавальца = 
	"ВЫБРАТЬ //// Передача товаров давальца в производство (Дт  :: Кт 0222)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата			КАК Период,
	|	Операция.Организация	КАК Организация,
	|	НЕОПРЕДЕЛЕНО			КАК ИдентификаторСтроки,
	|
	|	0 КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)										КАК ВалютаКт,
	|	Операция.Подразделение															КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)						КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве)	КАК СчетКт,
	|
	|	Строки.ВидЗапасов.Контрагент	КАК СубконтоКт1,
	|	Аналитика.Номенклатура			КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО					КАК СубконтоКт3,
	|
	|	0					КАК ВалютнаяСуммаКт,
	|	Строки.Количество	КАК КоличествоКт,
	|	0					КАК СуммаНУКт,
	|	0					КАК СуммаПРКт,
	|	0					КАК СуммаВРКт,
	|	""Передача товаров давальца в производство"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПереработчика КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетПереработчика.ВидыЗапасов КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|		И Строки.ВидЗапасов.ТипЗапасов В (ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца),
	|										  ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца))
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		Аналитика.КлючАналитики = Строки.АналитикаУчетаНоменклатуры
	|";
#КонецОбласти

	Возврат ""
	+                      ТекстСписанияВПроизводство
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстСписанияВПроизводствоМатериаловДавальца
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗакупкаУслуги
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗакупкаНДСОжидаемый
	+ "";
	
КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчетеУКР() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	МАКСИМУМ(Расчеты.ЗаказПоставщику.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(Расчеты.ЗаказПоставщику.ГруппаФинансовогоУчета) КАК ГруппаФинансовогоУчета,
	|	МАКСИМУМ(Аналитика.НаправлениеДеятельности) КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ Расчеты
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	ПО ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО 
	|	Ссылка
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Осуществляет вычисление текущего состояния по поступлению без заказа
//
// Параметры:
//	ЗаказПоставщику         - ДокументСсылка.ПоступлениеТоваровУслуг - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ОтчетПереработчика, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ОтчетПереработчика) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ 
		// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|	ВЫБОР КОГДА Отчет.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			И Отчет.Проведен
		|			И ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) > 0 ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(ОстаткиРасчетов.КОплатеПриход, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СуммаОплаты,
		// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|	ВЫБОР КОГДА Отчет.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			И Отчет.Проведен
		|			И ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) > 0 ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(ОстаткиРасчетов.КОплатеПриход, 0) * 100 / ОстаткиРасчетов.КОплатеРасход КАК ЧИСЛО(15, 0))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОплаты,
		// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
		|	ВЫБОР КОГДА Отчет.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			И Отчет.Проведен
		|			И ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) > 0
		|			И ЕСТЬNULL(АктуальныеРасчеты.КОплатеОстаток, 0) < 0 ТОГДА
		|		ВЫРАЗИТЬ (-ЕСТЬNULL(АктуальныеРасчеты.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СуммаПросроченнойОплаты,
		// СУММА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////////////
		|	ВЫБОР КОГДА Отчет.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			И Отчет.Проведен
		|			И ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) > 0 ТОГДА
		|		ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0)
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СуммаПоступления,
		// ПРОЦЕНТ ПОСТУПЛЕНИЯ //////////////////////////////////////////////////////
		|	ВЫБОР КОГДА Отчет.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			И Отчет.Проведен
		|			И ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) > 0 ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) * 100 / ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) КАК ЧИСЛО(15, 0))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентПоступления,
		// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|	ВЫБОР КОГДА Отчет.Проведен
		|			И (ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) > 0 ИЛИ
		|				Отчет.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)) ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(ОстаткиРасчетов.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СуммаДолга,
		|	ВЫБОР КОГДА Отчет.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|			И Отчет.Проведен
		|			И ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0) > 0 ТОГДА
		|		ВЫБОР КОГДА ЕСТЬNULL(ОстаткиРасчетов.СуммаКонечныйОстаток, 0) > 0 ТОГДА
		|			ВЫРАЗИТЬ ((ЕСТЬNULL(ОстаткиРасчетов.СуммаКонечныйОстаток, 0) * 100 / ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0)) КАК ЧИСЛО(15, 0))
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ ((ЕСТЬNULL(-ОстаткиРасчетов.СуммаКонечныйОстаток, 0) * 100 / ЕСТЬNULL(ОстаткиРасчетов.КОплатеРасход, 0)) КАК ЧИСЛО(15, 0))
		|		КОНЕЦ
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентДолга,
		|ВЫБОР
		|	КОГДА
		|		Отчет.Проведен И
		|		Отчет.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	ТОГДА
		|		-ОстаткиРасчетов.КОплатеКонечныйОстаток
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаКОплате
		|ИЗ
		|	Документ.ОтчетПереработчика КАК Отчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(, , , , ЗаказПоставщику = &РасчетныйДокумент) КАК ОстаткиРасчетов
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказПоставщику = &РасчетныйДокумент) КАК АктуальныеРасчеты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Отчет.Ссылка = &ОтчетПереработчика");
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетПереработчика, "ПорядокРасчетов");
		
		РасчетныйДокумент = ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ОтчетПереработчика);
		
		Запрос.УстановитьПараметр("ОтчетПереработчика", ОтчетПереработчика);
		Запрос.УстановитьПараметр("РасчетныйДокумент",  РасчетныйДокумент);
		Запрос.УстановитьПараметр("ТекущаяДата",        НачалоДня(ТекущаяДата()));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов() 
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты",             0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПоступления",        0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты",           0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентПоступления",      0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПросроченнойОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга",              0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга",            0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате",            0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	Документы.ПоступлениеОтПереработчика.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);

КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ОтчетПереработчика) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ОтчетПереработчика.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ОтчетПереработчика);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоНаСтороне";

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;

	// Рабочее место
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "РабочееМесто";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "РабочееМесто";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ЗаказПереработчику КАК ЗаказПереработчику,
	|	ДанныеДокумента.ПоЗаказам КАК ПоЗаказам,
	|	ДанныеДокумента.СуммаСНДС КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаСНДС КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ПоЗаказу = Выборка.ПоЗаказам;
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ПоЗаказу = Ложь;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, ПоЗаказу, СуммаДокумента, СуммаВзаиморасчетов",
		Дата,
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика,
		ПоЗаказу,
		СуммаДокумента,
		СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		Если ПравоДоступа("Изменение", Метаданные.Документы.ОтчетПереработчика) Тогда
			ВыбраннаяФорма = "РабочееМесто";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаУслугиПереработчиковКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыПереданныеПереработчику(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыПолученныеОтПереработчика(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПроизводственныхЗатрат(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСРасчетНалоговогоКредита(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетПереработчика.Ссылка                  КАК Ссылка,
	|	ОтчетПереработчика.Дата                    КАК Период,
	|	ОтчетПереработчика.Валюта                  КАК Валюта,
	|	ОтчетПереработчика.Партнер                 КАК Партнер,
	|	ОтчетПереработчика.Контрагент              КАК Контрагент,
	|	ОтчетПереработчика.Организация             КАК Организация,
	|	ОтчетПереработчика.Подразделение           КАК Подразделение,
	|	ОтчетПереработчика.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ОтчетПереработчика.Договор                 КАК Договор,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Поставка) КАК ВидПоставки,
	|	ОтчетПереработчика.ДатаПлатежа             КАК ДатаПлатежа,
	|	ОтчетПереработчика.ФормаОплаты             КАК ФормаОплаты,
	|	ОтчетПереработчика.ВалютаВзаиморасчетов    КАК ВалютаВзаиморасчетов,
	|	ОтчетПереработчика.ПоЗаказам               КАК ПоЗаказам,
	|	ОтчетПереработчика.ЗаказПереработчику      КАК ЗаказПереработчику,
	|	ДокЗаказПереработчику.Валюта               КАК ВалютаЗаказа,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)  КАК ТипЗапасов,
	|	ЛОЖЬ                                       КАК ОбособленныйУчетТоваровПоСделке,
	|	НЕОПРЕДЕЛЕНО                               КАК ВариантОбособленногоУчетаТоваров,
	|
	|	ОтчетПереработчика.СтавкаНДС               КАК СтавкаНДС,
	|	ОтчетПереработчика.НалоговоеНазначение     КАК НалоговоеНазначениеВыпуска,
	|	ОтчетПереработчика.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО                               КАК Серия,
	|	ОтчетПереработчика.Подразделение           КАК Склад,
	|	ОтчетПереработчика.ГруппировкаЗатрат       КАК ГруппировкаЗатрат,
	|
	|	ОтчетПереработчика.СуммаСНДС               КАК СтоимостьУслуги,
	|
	|	ВЫБОР КОГДА ОтчетПереработчика.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                      КАК РасчетыПоДоговорам,
	|
	|	ВЫБОР КОГДА ОтчетПереработчика.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                      КАК РасчетыПоНакладным,
	|	ОтчетПереработчика.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЕСТЬNULL(ОтчетПереработчика.НаправлениеДеятельности.Назначение,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
	|	
	|	ЕСТЬNULL(ОтчетПереработчика.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) КАК ГрафикИсполненияВДоговоре
	|
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ДокЗаказПереработчику
	|		ПО ДокЗаказПереработчику.Ссылка = ОтчетПереработчика.ЗаказПереработчику
	|	
	|ГДЕ
	|	ОтчетПереработчика.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",              Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов", ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС",        			 НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ВидПоставки",                     			 Реквизиты.ВидПоставки);
	Запрос.УстановитьПараметр("МоментОпределенияБазыНДС",                    НДСВходящийСервер.ОпределитьМоментОпределенияБазыНДС(Реквизиты.ВидПоставки, Реквизиты.ХозяйственнаяОперация, Реквизиты.Организация, Реквизиты.Договор));
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Запрос.Параметры));
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаАналитикаУчетаПартий(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПартий") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПартии = Новый Структура("ГруппаФинансовогоУчета, Поставщик, Контрагент, НалоговоеНазначение, СтавкаНДС",
		Справочники.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка(),
		Запрос.Параметры.Партнер,
		Запрос.Параметры.Контрагент,
		Запрос.Параметры.НалоговоеНазначениеВыпуска, 
		Запрос.Параметры.СтавкаНДС);
		
	АналитикаУчетаПартий = Справочники.КлючиАналитикиУчетаПартий.КлючиАналитикиУчетаПартийДокумента(РеквизитыПартии);
	
	Запрос.УстановитьПараметр("АналитикаУчетаПартий", АналитикаУчетаПартий);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаВидЗапасовРаботы(Запрос)
	
	Если Запрос.Параметры.Свойство("ВидЗапасовРаботы") Тогда
		Возврат;
	КонецЕсли;
	
	ВидЗапасовРаботы = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
		Запрос.Параметры.Организация,
		Запрос.Параметры.ХозяйственнаяОперация,
		Запрос.Параметры,
		Запрос.Параметры.НалоговоеНазначениеВыпуска
	);
		
	Запрос.УстановитьПараметр("ВидЗапасовРаботы", ВидЗапасовРаботы);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаРаспределенныеДанные(Запрос)
	
	Если Запрос.Параметры.Свойство("ТаблицаРаспределенныхМатериалов")
		И Запрос.Параметры.Свойство("ТаблицаРаспределенныхВозвОтходов") Тогда
		Возврат;
	КонецЕсли;
	
	РаспределенныеДанные = РаспределитьУслугуМатериалыНаВыпускПродукции(Запрос.Параметры.Ссылка, Запрос.Параметры);
	
	Запрос.УстановитьПараметр("ТаблицаРаспределенныхМатериалов",   РаспределенныеДанные.РаспределенныеМатериалы);
	Запрос.УстановитьПараметр("ТаблицаРаспределенныхВозвОтходов",  РаспределенныеДанные.РаспределенныеВозвОтходы);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуЗаказа")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.Валюта,
																				Запрос.Параметры.ВалютаЗаказа,
																				Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуЗаказа", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",    Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",   Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Функция ТекстЗапросаВтТаблицаМатериалы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаМатериалы";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                  КАК Ссылка,
	|	&Партнер                                 КАК Склад,
	|	&Организация                             КАК Организация,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	АналитикаНоменклатуры.Номенклатура       КАК Номенклатура,
	|	АналитикаНоменклатуры.Характеристика     КАК Характеристика,
	|	ТаблицаТовары.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаТовары.ВидЗапасов.НалоговоеНазначение КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеВыпуска              КАК НалоговоеНазначениеВыпуска,
	|	ТаблицаТовары.ВидЗапасов.ТипЗапасов      КАК ТипЗапасов,
	|	ТаблицаТовары.Количество                 КАК Количество
	|
	|ПОМЕСТИТЬ ВтТаблицаМатериалы
	|
	|ИЗ
	|	Документ.ОтчетПереработчика.ВидыЗапасов КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО 
	|		ТаблицаТовары.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРаспределенныеМатериалы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтРаспределенныеМатериалы";
	УстановитьПараметрыЗапросаРаспределенныеДанные(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.КодСтроки               КАК КодСтроки,
	|	ТаблицаТовары.НомерСтроки             КАК НомерСтроки,
	|	ТаблицаТовары.ЗаказПереработчику      КАК ЗаказПереработчику,
	|	ТаблицаТовары.ТипСтоимости            КАК ТипСтоимости,
	|	ТаблицаТовары.АналитикаУчетаПродукции КАК АналитикаУчетаПродукции,
	|	ТаблицаТовары.АналитикаУчетаМатериала КАК АналитикаУчетаМатериала,
	|	ТаблицаТовары.АналитикаУчетаУслуги    КАК АналитикаУчетаУслуги,
	|	ТаблицаТовары.ВидЗапасов              КАК ВидЗапасов,
	|	ТаблицаТовары.Этап                    КАК Этап,
	|	ТаблицаТовары.СтатьяКалькуляции       КАК СтатьяКалькуляции,
	|	ТаблицаТовары.СтатьяКалькуляцииУслуги КАК СтатьяКалькуляцииУслуги,
	|	ТаблицаТовары.ДокументПоступления     КАК ДокументПоступления,
	|	ТаблицаТовары.НомерГруппыЗатрат       КАК НомерГруппыЗатрат,
	|	ТаблицаТовары.Количество              КАК Количество,
	|	ТаблицаТовары.Стоимость               КАК Стоимость,
	|	ТаблицаТовары.СтоимостьБезНДС         КАК СтоимостьБезНДС,
	|	ТаблицаТовары.СтоимостьРегл           КАК СтоимостьРегл,
	|	ТаблицаТовары.СтоимостьБезНДСРегл     КАК СтоимостьБезНДСРегл,
	|	ТаблицаТовары.СуммаНДС                КАК СуммаНДС,
	|	ТаблицаТовары.КоличествоРаботы        КАК КоличествоРаботы
	|
	|ПОМЕСТИТЬ ВтРаспределенныеМатериалы
	|
	|ИЗ
	|	&ТаблицаРаспределенныхМатериалов КАК ТаблицаТовары
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтРаспределенныеВозвратныеОтходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтРаспределенныеВозвратныеОтходы";
	УстановитьПараметрыЗапросаРаспределенныеДанные(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ТаблицаТовары.ЗаказПереработчику       КАК ЗаказПереработчику,
	|	ТаблицаТовары.АналитикаУчетаПродукции  КАК АналитикаУчетаПродукции,
	|	ТаблицаТовары.АналитикаУчетаВозвОтхода КАК АналитикаУчетаВозвОтхода,
	|	ТаблицаТовары.КодСтрокиВозвОтхода      КАК КодСтрокиВозвОтхода,
	|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
	|	ТаблицаТовары.Количество               КАК Количество
	|
	|ПОМЕСТИТЬ ВтРаспределенныеВозвратныеОтходы
	|
	|ИЗ
	|	&ТаблицаРаспределенныхВозвОтходов КАК ТаблицаТовары
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыПереданныеПереработчику(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыПереданныеПереработчику";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаМатериалы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаМатериалы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	НачалоПериода(&Период, День)             КАК Период,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.ВидЗапасов                 КАК ВидЗапасов,
	|	ТаблицаТовары.Количество                 КАК Количество
	|ИЗ
	|	ВтТаблицаМатериалы КАК ТаблицаТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтТаблицаМатериалы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаМатериалы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтРаспределенныеМатериалы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРаспределенныеМатериалы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	УстановитьПараметрыЗапросаВидЗапасовРаботы(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеПереработчику) КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	&НалоговоеНазначениеВыпуска КАК НалоговоеНазначение,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРегл,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК КорРазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КорВидЗапасов,
	|	&НалоговоеНазначениеВыпуска КАК КорНалоговоеНазначение,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов
	|ИЗ
	|	ВтТаблицаМатериалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Порядок,
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	&НалоговоеНазначениеВыпуска КАК НалоговоеНазначение,
	|
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьРеглБезНДС,
	|	0 КАК НДСРегл,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	НЕОПРЕДЕЛЕНО КАК КорРазделУчета,
	|
	|	НЕОПРЕДЕЛЕНО КАК КорВидЗапасов,
	|	&НалоговоеНазначениеВыпуска КАК КорНалоговоеНазначение,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаУчетаНоменклатуры,
	|
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов
	|ИЗ
	|	ВтТаблицаМатериалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК Порядок,
	|	0 КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	Аналитика.Ссылка КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		&ВидЗапасовРаботы
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидЗапасов,
	|	&НалоговоеНазначениеВыпуска КАК НалоговоеНазначение,
	|	СУММА(ТаблицаТовары.КоличествоРаботы) КАК Количество,
	|	СУММА(ТаблицаТовары.Стоимость) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ТаблицаТовары.СтоимостьРегл) КАК СтоимостьРегл,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДСРегл) КАК СтоимостьРеглБезНДС,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК НДСРегл,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	НЕОПРЕДЕЛЕНО КАК КорРазделУчета,
	|
	|	НЕОПРЕДЕЛЕНО КАК КорВидЗапасов,
	|	&НалоговоеНазначениеВыпуска КАК КорНалоговоеНазначение,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаУчетаНоменклатуры,
	|
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходовСписания,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов
	|ИЗ
	|	ВтРаспределенныеМатериалы КАК ТаблицаТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Ссылка = ТаблицаТовары.АналитикаУчетаУслуги
	|ГДЕ
	|	ТаблицаТовары.Стоимость <> 0
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтрокиДокумента
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУслугиПереработчиковКОформлению(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "УслугиПереработчиковКОформлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&ЗаказПереработчику                    КАК ЗаказПереработчику,
	|	&СтоимостьУслуги * &КоэффициентПересчетаВВалютуЗаказа КАК Сумма
	|ГДЕ
	|	&ПоЗаказам
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыПолученныеОтПереработчика(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыПолученныеОтПереработчика";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	НачалоПериода(&Период, День)             КАК Период,
	|	ВЫБОР
	|		КОГДА &ПоЗаказам
	|			ТОГДА ТаблицаТовары.ЗаказПереработчику
	|		ИНАЧЕ ТаблицаТовары.ДокументПоступления
	|	КОНЕЦ                                    КАК Распоряжение,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
	|	ТаблицаТовары.ТипСтоимости               КАК ТипСтоимости,
	|	ТаблицаТовары.Количество                 КАК Количество
	|ИЗ
	|	Документ.ОтчетПереработчика.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	УстановитьПараметрыЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	&Период                                КАК ДатаРегистратора,
	|	&ДатаПлатежа                           КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам             КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам 
	|			ТОГДА &Договор
	|		КОГДА &ПоЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА Отчет.ЗаказПереработчику
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ                                  КАК ЗаказПоставщику,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам И &ПоЗаказам ТОГДА
	|		Отчет.ЗаказПереработчику
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК ЗакупкаПоЗаказу,
	|
	|	&ВалютаВзаиморасчетов                  КАК Валюта,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                           КАК ФормаОплаты,
	|
	|	Отчет.СуммаВзаиморасчетов              КАК Сумма,
	|	ВЫРАЗИТЬ(Отчет.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(Отчет.СуммаДокумента * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))  КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА (НЕ &ПоЗаказам ИЛИ &РасчетыПоНакладным) И НЕ &ГрафикИсполненияВДоговоре
	|			ТОГДА Отчет.СуммаВзаиморасчетов              
	|		ИНАЧЕ 0
	|	КОНЕЦ                                  КАК КОплате,
	|	ВЫБОР 
	|		КОГДА &ПоЗаказам ИЛИ &ГрафикИсполненияВДоговоре
	|			ТОГДА Отчет.СуммаВзаиморасчетов              
	|		ИНАЧЕ 0
	|	КОНЕЦ                                  КАК КПоступлению,
	|	&Организация КАК Организация
	|ИЗ
	|	Документ.ОтчетПереработчика КАК Отчет
	|ГДЕ
	|	Отчет.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходыНезавершенногоПроизводства";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтРаспределенныеМатериалы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРаспределенныеМатериалы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДвиженияПоРегистру.ВидДвижения			КАК ВидДвижения,
	|	ДвиженияПоРегистру.Период				КАК Период,
	|	ДвиженияПоРегистру.Организация			КАК Организация,
	|	ДвиженияПоРегистру.Подразделение		КАК Подразделение,
	|	ДвиженияПоРегистру.ЗаказНаПроизводство	КАК ЗаказНаПроизводство,
	|	ДвиженияПоРегистру.КодСтрокиПродукция	КАК КодСтрокиПродукция,
	|	ДвиженияПоРегистру.Этап					КАК Этап,
	|	ДвиженияПоРегистру.СтатьяКалькуляции	КАК СтатьяКалькуляции,
	|	ДвиженияПоРегистру.Стоимость			КАК Стоимость,
	|	ДвиженияПоРегистру.СтоимостьБезНДС		КАК СтоимостьБезНДС,
	|	ДвиженияПоРегистру.СтоимостьБезНДСРегл  КАК СтоимостьРеглБезНДС,
	|	ДвиженияПоРегистру.СуммаНДС             КАК НДСРегл,
	|	&НалоговоеНазначениеВыпуска             КАК НалоговоеНазначение,
	|	ДвиженияПоРегистру.СтоимостьРегл		КАК СтоимостьРегл
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|		&Период									КАК Период,
	|		&Организация							КАК Организация,
	|		&Подразделение							КАК Подразделение,
	|		&ЗаказПереработчику						КАК ЗаказНаПроизводство,
	|		ТаблицаТовары.КодСтроки					КАК КодСтрокиПродукция,
	|		ТаблицаТовары.Этап						КАК Этап,
	|		ТаблицаТовары.СтатьяКалькуляции         КАК СтатьяКалькуляции,
	|		СУММА(ТаблицаТовары.Стоимость)			КАК Стоимость,
	|		СУММА(ТаблицаТовары.СтоимостьБезНДС)	КАК СтоимостьБезНДС,
	|		СУММА(ТаблицаТовары.СтоимостьБезНДСРегл) КАК СтоимостьБезНДСРегл,
	|		СУММА(ТаблицаТовары.СуммаНДС)	        КАК СуммаНДС,
	|		СУММА(ТаблицаТовары.СтоимостьРегл)		КАК СтоимостьРегл
	|
	|	ИЗ
	|		ВтРаспределенныеМатериалы КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.АналитикаУчетаУслуги = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаТовары.КодСтроки,
	|		ТаблицаТовары.Этап,
	|		ТаблицаТовары.СтатьяКалькуляции
	|
	|	) КАК ДвиженияПоРегистру
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПроизводственныхЗатрат(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПроизводственныхЗатрат";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтРаспределенныеМатериалы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРаспределенныеМатериалы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	УстановитьПараметрыЗапросаВидЗапасовРаботы(Запрос);
	УстановитьПараметрыЗапросаАналитикаУчетаПартий(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.АналитикаУчетаУслуги КАК АналитикаУчетаНоменклатуры,
	|	&ВидЗапасовРаботы КАК ВидЗапасов,
	|	&Ссылка КАК ДокументПоступления,
	|	&АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО КАК ЗаказНаПроизводство,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначение,
	|	0. КАК КодСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО КАК Этап,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяКалькуляции,
	|	НЕОПРЕДЕЛЕНО КАК НомерГруппыЗатрат,
	|	СУММА(ТаблицаТовары.КоличествоРаботы) КАК Количество,
	|	СУММА(ТаблицаТовары.Стоимость) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДСРегл) КАК СтоимостьРегл,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК НДСРегл
	|ИЗ
	|	ВтРаспределенныеМатериалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.АналитикаУчетаУслуги <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	И ТаблицаТовары.Стоимость <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.АналитикаУчетаУслуги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.АналитикаУчетаУслуги КАК АналитикаУчетаНоменклатуры,
	|	&ВидЗапасовРаботы КАК ВидЗапасов,
	|	&Ссылка КАК ДокументПоступления,
	|	&АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	(ВЫБОР
	|		КОГДА &ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.ДокументПоступления
	|		ИНАЧЕ &ЗаказПереработчику КОНЕЦ) КАК ЗаказНаПроизводство,
	|	&НалоговоеНазначениеВыпуска КАК НалоговоеНазначение,
	|	ТаблицаТовары.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаТовары.Этап КАК Этап,
	|	ТаблицаТовары.СтатьяКалькуляцииУслуги КАК СтатьяКалькуляции,
	|	ТаблицаТовары.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	СУММА(ТаблицаТовары.КоличествоРаботы) КАК Количество,
	|	СУММА(ТаблицаТовары.Стоимость) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДСРегл) КАК СтоимостьРегл,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК НДСРегл
	|ИЗ
	|	ВтРаспределенныеМатериалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.АналитикаУчетаУслуги <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	И ТаблицаТовары.Стоимость <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	(ВЫБОР
	|		КОГДА &ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.ДокументПоступления
	|		ИНАЧЕ &ЗаказПереработчику КОНЕЦ),
	|	ТаблицаТовары.КодСтроки,
	|	ТаблицаТовары.Этап,
	|	ТаблицаТовары.СтатьяКалькуляцииУслуги,
	|	ТаблицаТовары.АналитикаУчетаУслуги,
	|	ТаблицаТовары.НомерГруппыЗатрат
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииНезавершенногоПроизводства";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтРаспределенныеМатериалы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРаспределенныеМатериалы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	УстановитьПараметрыЗапросаВидЗапасовРаботы(Запрос);
	УстановитьПараметрыЗапросаАналитикаУчетаПартий(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.АналитикаУчетаУслуги КАК АналитикаУчетаНоменклатуры,
	|	&ВидЗапасовРаботы КАК ВидЗапасов,
	|	&ЗаказПереработчику КАК ЗаказНаПроизводство,
	|	ТаблицаТовары.КодСтроки КАК КодСтрокиПродукция,
	|	&Ссылка КАК ДокументПоступления,
	|	ТаблицаТовары.Этап КАК Этап,
	|	ТаблицаТовары.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	&АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаТовары.ДокументПоступления КАК ДокументВыпуска,
	|	&НалоговоеНазначениеВыпуска КАК НалоговоеНазначениеВыпуска,
	|	СУММА(ТаблицаТовары.КоличествоРаботы) КАК Количество,
	|	СУММА(ТаблицаТовары.Стоимость) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДСРегл) КАК СтоимостьРегл,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК НДСРегл
	|ИЗ
	|	ВтРаспределенныеМатериалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.АналитикаУчетаУслуги <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	И ТаблицаТовары.Стоимость <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.КодСтроки,
	|	ТаблицаТовары.Этап,
	|	ТаблицаТовары.СтатьяКалькуляции,
	|	ТаблицаТовары.АналитикаУчетаУслуги,
	|	ТаблицаТовары.ДокументПоступления
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период	КАК Период,
	|	&Валюта КАК Валюта,
	|	Строки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Строки.СтавкаНДС КАК СтавкаНДС,
	|	Строки.СуммаСНДС - Строки.СуммаНДС КАК СуммаБезНДС,
	|	Строки.СуммаНДС КАК СуммаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)	КАК ТипРасчетов,
	|
	|	ВЫБОР КОГДА Строки.СуммаСНДС - Строки.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаБезНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаБезНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР КОГДА Строки.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНДСРегл
	|ИЗ
	|	Документ.ОтчетПереработчика.Услуги КАК Строки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = &Ссылка
	|		И ДанныеРегистра.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И &Валюта <> &ВалютаРегламентированногоУчета
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МатериалыИРаботыВПроизводстве";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтРаспределенныеМатериалы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРаспределенныеМатериалы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтРаспределенныеВозвратныеОтходы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРаспределенныеВозвратныеОтходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1											КАК Порядок,
	|	МатериалыИУслуги.НомерСтроки				КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)		КАК ВидДвижения,
	|	&Период										КАК Период,
	|	&Период										КАК ДатаРегистратора,
	|	&Организация								КАК Организация,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Склад КАК Подразделение,
	|	МатериалыИУслуги.АналитикаУчетаМатериала	КАК АналитикаУчетаНоменклатуры,
	|	МатериалыИУслуги.Количество					КАК Количество,
	|	МатериалыИУслуги.СтатьяКалькуляции			КАК СтатьяКалькуляции,
	|	НЕОПРЕДЕЛЕНО								КАК Этап,
	|	(ВЫБОР
	|		КОГДА &ПоЗаказам ТОГДА МатериалыИУслуги.ЗаказПереработчику
	|		ИНАЧЕ МатериалыИУслуги.ДокументПоступления КОНЕЦ) КАК ЗаказНаПроизводство,
	|	&НалоговоеНазначениеВыпуска                 КАК НалоговоеНазначение,
	|	МатериалыИУслуги.КодСтроки					КАК КодСтрокиПродукция,
	|	МатериалыИУслуги.ВидЗапасов.Назначение		КАК Назначение
	|ИЗ
	|	ВтРаспределенныеМатериалы КАК МатериалыИУслуги
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Ссылка = МатериалыИУслуги.АналитикаУчетаМатериала
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2											КАК Порядок,
	|	ВозвратныеОтходы.НомерСтроки				КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)		КАК ВидДвижения,
	|	&Период										КАК Период,
	|	&Период										КАК ДатаРегистратора,
	|	&Организация								КАК Организация,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	Аналитика.Серия,
	|	Аналитика.Склад КАК Подразделение,
	|	ВозвратныеОтходы.АналитикаУчетаВозвОтхода	КАК АналитикаУчетаНоменклатуры,
	|	-ВозвратныеОтходы.Количество				КАК Количество,
	|	НЕОПРЕДЕЛЕНО								КАК СтатьяКалькуляции,
	|	НЕОПРЕДЕЛЕНО								КАК Этап,
	|	ВозвратныеОтходы.ЗаказПереработчику			КАК ЗаказНаПроизводство,
	|	&НалоговоеНазначениеВыпуска                 КАК НалоговоеНазначение,
	|	ВозвратныеОтходы.КодСтроки					КАК КодСтрокиПродукция,
	|	&Назначение 								КАК Назначение
	|ИЗ
	|	ВтРаспределенныеВозвратныеОтходы КАК ВозвратныеОтходы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Ссылка = ВозвратныеОтходы.АналитикаУчетаВозвОтхода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтРаспределенныеМатериалы", ТекстыЗапроса) Тогда
		ТекстЗапросаВтРаспределенныеМатериалы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|	&Период									КАК Период,
	|	&Организация							КАК Организация,
	|	&Подразделение							КАК Подразделение,
	|	СУММА(ТаблицаТовары.Стоимость)			КАК Сумма,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДС)	КАК СуммаБезНДС,
	|	СУММА(ТаблицаТовары.СтоимостьРегл)		КАК СуммаРегл,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДСРегл) КАК СуммаРеглБезНДС,
	|	СУММА(ТаблицаТовары.СуммаНДС)           КАК НДСРегл,
	|	&НалоговоеНазначениеВыпуска             КАК НалоговоеНазначение,
	|	&ХозяйственнаяОперация					КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтРаспределенныеМатериалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.АналитикаУчетаУслуги = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	И ТаблицаТовары.Стоимость <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)	КАК ВидДвижения,
	|	&Период									КАК Период,
	|	&Организация							КАК Организация,
	|	&Подразделение							КАК Подразделение,
	|	СУММА(ТаблицаТовары.Стоимость)			КАК Сумма,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДС)	КАК СуммаБезНДС,
	|	СУММА(ТаблицаТовары.СтоимостьРегл)		КАК СуммаРегл,
	|	СУММА(ТаблицаТовары.СтоимостьБезНДСРегл) КАК СуммаРеглБезНДС,
	|	СУММА(ТаблицаТовары.СуммаНДС)           КАК НДСРегл,
	|	&НалоговоеНазначениеВыпуска             КАК НалоговоеНазначение,
	|	&ХозяйственнаяОперация					КАК ХозяйственнаяОперация
	|ИЗ
	|	ВтРаспределенныеМатериалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.АналитикаУчетаУслуги = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	И ТаблицаТовары.Стоимость <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.КодСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов(Запрос, ТекстыЗапроса, Регистры)
    
    ИмяРегистра = "НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам 
	|			ТОГДА &Договор
	|		КОГДА &ПоЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА &ЗаказПереработчику
	|		ИНАЧЕ
	|			&Ссылка
	|	КОНЕЦ КАК ОбъектРасчетов,	
	|
	|	&ВидПоставки КАК ВидПоставки,
	|
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	&НалоговоеНазначениеВыпуска КАК НалоговоеНазначение,
	|	ТаблицаТовары.СуммаСНДС КАК СуммаВзаиморасчетов,
	|	ВЫБОР КОГДА (НЕ &ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая)) ТОГДА
	|		ТаблицаТовары.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНДСКредит,
	|
	|	НЕОПРЕДЕЛЕНО КАК ДатаВходящегоНалоговогоДокумента,
	|	&Ссылка КАК ДокументПоставки
	|ИЗ
	|	Документ.ОтчетПереработчика.Услуги КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|   И &ОрганизацияПлательщикНДС
	|   И &ВалютаРегламентированногоУчета = &ВалютаВзаиморасчетов
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаНДСРасчетНалоговогоКредита(Запрос, ТекстыЗапроса, Регистры)
    
    ИмяРегистра = "НДСРасчетНалоговогоКредита";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам 
	|			ТОГДА &Договор
	|		КОГДА &ПоЗаказам И НЕ &РасчетыПоНакладным
	|			ТОГДА &ЗаказПереработчику
	|		ИНАЧЕ
	|			&Ссылка
	|   КОНЕЦ КАК ОбъектРасчетов,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|
	|	&Ссылка КАК ДокументПоставки,
	|	&МоментОпределенияБазыНДС КАК МоментОпределенияБазыНДС,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДС) КАК СуммаПоставкиТребующаяРегистрацииНН,
	|   0 КАК СуммаПоставкиНеТребующаяРегистрацииНН
	|ИЗ
	|	Документ.ОтчетПереработчика.Услуги КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрганизацияПлательщикНДС
	|   И &ВалютаРегламентированногоУчета = &ВалютаВзаиморасчетов
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции


#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// Печатные формы не предусмотрены
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция КоэффициентНормативов(ФактическаяПродукция, НормативнаяПродукция) Экспорт

	Коэффициент = 0;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
	Для каждого СтрокаФакт Из ФактическаяПродукция Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаФакт);
  		СписокСтрок = НормативнаяПродукция.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНорматив Из СписокСтрок Цикл
			Коэффициент = Макс(СтрокаФакт.Количество / СтрокаНорматив.Количество, Коэффициент);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Коэффициент;

КонецФункции

Процедура ЗаполнитьПоНормативам(Приемник, Нормативы, КоэффициентНормативов, НомерГруппыЗатрат) Экспорт

	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппыЗатрат);
 	СписокСтрок = Приемник.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		Приемник.Удалить(ДанныеСтроки);
	КонецЦикла; 
	
	Для каждого СтрокаЗаказа Из Нормативы Цикл
		СтрокаДокумента = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаЗаказа);
		СтрокаДокумента.Количество = СтрокаЗаказа.Количество * КоэффициентНормативов;
		СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество / СтрокаЗаказа.КоэффициентУпаковки;
		СтрокаДокумента.НомерГруппыЗатрат = НомерГруппыЗатрат;
	КонецЦикла;
	
КонецПроцедуры 

// Функция распределяет материалы на выпускаемую продукцию
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ОтчетПереработчика - документ, которым оформляется распределение использованных материалов
//
// Вовращаемое значение:
//	Таблица значений - Таблица материалов с видами запасов распределенная на выпуск
//
Функция РаспределитьУслугуМатериалыНаВыпускПродукции(ДокументСсылка, Реквизиты)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТовары.ДоляСтоимости              КАК ДоляСтоимости,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
	|	ТаблицаТовары.НомерГруппыЗатрат          КАК НомерГруппыЗатрат,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаТовары.ЗаказПереработчику         КАК ЗаказПереработчику,
	|	ТаблицаТовары.ТипСтоимости               КАК ТипСтоимости,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаПродукции,
	|	ТаблицаТовары.ДокументПоступления        КАК ДокументПоступления,
	|
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаМатериала,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)                     КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)               КАК СтатьяКалькуляции,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)               КАК СтатьяКалькуляцииУслуги,
	|
	|	0 КАК Количество,
	|	0 КАК КоличествоРаботы,
	|	0 КАК СтоимостьБезНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьБезНДСРегл,
	|	0 КАК Стоимость,
	|	0 КАК СуммаНДС
	|ИЗ
	|	Документ.ОтчетПереработчика.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаПродукции,
	|	ТаблицаТовары.НомерСтроки				 КАК НомерСтроки,
	|	ТаблицаТовары.ЗаказПереработчику		 КАК ЗаказПереработчику,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаВозвОтхода,
	|	ТаблицаТовары.КодСтроки 				 КАК КодСтрокиВозвОтхода,
	|	ТаблицаТовары.НомерГруппыЗатрат          КАК НомерГруппыЗатрат,
	|	ТаблицаТовары.ДокументПоступления        КАК ДокументПоступления,
	|	0										 КАК КодСтроки,
	|	ТаблицаТовары.Количество 				 КАК Количество
	|ИЗ
	|	Документ.ОтчетПереработчика.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ТипСтоимости = ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерГруппыЗатрат          КАК НомерГруппыЗатрат,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаМатериала,
	|	ТаблицаТовары.ВидЗапасов 				 КАК ВидЗапасов,
	|	ТаблицаТовары.СтатьяКалькуляции			 КАК СтатьяКалькуляции,
	|	ТаблицаТовары.ДокументПоступления        КАК ДокументПоступления,
	|	ТаблицаТовары.Количество 				 КАК Количество
	|ИЗ
	|	Документ.ОтчетПереработчика.ВидыЗапасов КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерГруппыЗатрат           КАК НомерГруппыЗатрат,
	|	ТаблицаУслуги.СтатьяКалькуляции           КАК СтатьяКалькуляцииУслуги,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаУслуги,
	|	ТаблицаУслуги.ДокументПоступления         КАК ДокументПоступления,
	|
	|	ЕСТЬNULL(ЗаказПереработчикуУслуги.Этап, 
	|			ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)) КАК Этап,
	|
	|	ВЫБОР 
	|		КОГДА &ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета И Не Суммы.СуммаБезНДСРегл ЕСТЬ NULL
	|			ТОГДА Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(ТаблицаУслуги.СуммаСНДС * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СтоимостьУслуги,
	|
	|	ВЫБОР 
	|		КОГДА &ВалютаУправленческогоУчета = &ВалютаРегламентированногоУчета И Не Суммы.СуммаБезНДСРегл ЕСТЬ NULL
	|			ТОГДА Суммы.СуммаБезНДСРегл
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2))
	|	КОНЕЦ КАК СтоимостьУслугиБезНДС,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, ТаблицаУслуги.СуммаНДС) КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС) КАК СтоимостьУслугиБезНДСРегл,
	|	ВЫБОР КОГДА &ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиНДС.Необлагаемая) 
	|	ТОГДА
	|		ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, ТаблицаУслуги.СуммаСНДС)
	|	ИНАЧЕ
	|		ЕСТЬNULL(Суммы.СуммаБезНДСРегл, ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС)
	|	КОНЕЦ КАК СтоимостьУслугиРегл
	|ИЗ
	|	Документ.ОтчетПереработчика.Услуги КАК ТаблицаУслуги
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
	|		ПО ЗаказПереработчикуУслуги.Ссылка = &ЗаказПереработчику
	|			И ЗаказПереработчикуУслуги.НомерГруппыЗатрат = ТаблицаУслуги.НомерГруппыЗатрат
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|		ПО Суммы.Регистратор = ТаблицаУслуги.Ссылка
	|		И Суммы.ИдентификаторСтроки = ТаблицаУслуги.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		И Суммы.СуммаБезНДС = (ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС)
	|		И Суммы.СуммаНДС = ТаблицаУслуги.СуммаНДС
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ЗаказПереработчику", Реквизиты.ЗаказПереработчику);
	Запрос.УстановитьПараметр("ВидДеятельностиНДС", Реквизиты.ВидДеятельностиНДС);
	Запрос.УстановитьПараметр("Валюта", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ВалютаЗаказа", Реквизиты.ВалютаЗаказа);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаПродукции         = ПакетРезультатов[0].Выгрузить();
	ТаблицаВозвратныхОтходов = ПакетРезультатов[1].Выгрузить();
	ТаблицаМатериалов        = ПакетРезультатов[2].Выгрузить();
	ТаблицаУслуг             = ПакетРезультатов[3].Выгрузить();
	РаспределенныеМатериалы  = ТаблицаПродукции.СкопироватьКолонки();
	РаспределенныеВозвОтходы = ТаблицаВозвратныхОтходов.СкопироватьКолонки();

	РаспределенныеМатериалы.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	РаспределенныеМатериалы.Колонки.Добавить("АналитикаУчетаУслуги", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры"));

	Для каждого СтрокаУслуга Из ТаблицаУслуг Цикл
		
		Если Реквизиты.ПоЗаказам И Реквизиты.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
			СписокПродукции   = ТаблицаПродукции;
	  		СписокВозвОтходов = ТаблицаВозвратныхОтходов;
	  		СписокМатериалов  = ТаблицаМатериалов;
		Иначе
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат, ДокументПоступления", СтрокаУслуга.НомерГруппыЗатрат, СтрокаУслуга.ДокументПоступления);
	  		СписокПродукции   = ТаблицаПродукции.НайтиСтроки(СтруктураПоиска);
	  		СписокВозвОтходов = ТаблицаВозвратныхОтходов.НайтиСтроки(СтруктураПоиска);
	  		СписокМатериалов  = ТаблицаМатериалов.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		СтрокПродукции   = СписокПродукции.Количество();
		СтрокВозвОтходов = СписокВозвОтходов.Количество();
		СтрокМатериалов  = СписокМатериалов.Количество();
		
		МассивКоэффициентов = Новый Массив;
		Для каждого ДанныеСтроки Из СписокПродукции Цикл
			МассивКоэффициентов.Добавить(?(ДанныеСтроки.ДоляСтоимости <> 0, ДанныеСтроки.ДоляСтоимости, 1));
		КонецЦикла; 
		Если МассивКоэффициентов.Количество() = 1 Тогда
			МассивКоэффициентов[0] = 1;
		КонецЕсли;
		
		// Сумма к распределению
		СуммаКРаспред = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СтрокаУслуга.СтоимостьУслуги,
			МассивКоэффициентов,
			2);
		
		СуммаБезНДСКРаспред = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СтрокаУслуга.СтоимостьУслугиБезНДС,
			МассивКоэффициентов,
			2);
		
		СуммаРеглКРаспред = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СтрокаУслуга.СтоимостьУслугиРегл,
			МассивКоэффициентов,
			2);
			
		СуммаБезНДСРеглКРаспред = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СтрокаУслуга.СтоимостьУслугиБезНДСРегл,
			МассивКоэффициентов,
			2);
			
		СуммаНДСКРаспред = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СтрокаУслуга.СуммаНДС,
			МассивКоэффициентов,
			2);
			
		РаботаКРаспред = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			1,
			МассивКоэффициентов,
			3);	
		
		// Распределим материалы на выпущенную продукцию
		Для ИндексМатериалов = 0 по СтрокМатериалов - 1 Цикл
			
			СтрокаМатериалов = СписокМатериалов[ИндексМатериалов];
			
			// Количество к распределению
			КоличествоКРаспред = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
				СтрокаМатериалов.Количество,
				МассивКоэффициентов,
				3);
				
			Для ИндексПродукции = 0 по СтрокПродукции - 1 Цикл
				
				// Нечего распределять
				Если КоличествоКРаспред[ИндексПродукции] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПродукции = СписокПродукции[ИндексПродукции];
				
				НоваяСтрока = РаспределенныеМатериалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПродукции);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериалов, "АналитикаУчетаМатериала, ВидЗапасов, СтатьяКалькуляции");
				НоваяСтрока.Этап = СтрокаУслуга.Этап;
				НоваяСтрока.АналитикаУчетаУслуги = СтрокаУслуга.АналитикаУчетаУслуги;
				НоваяСтрока.СтатьяКалькуляцииУслуги = СтрокаУслуга.СтатьяКалькуляцииУслуги;
				
				НоваяСтрока.Количество      = КоличествоКРаспред[ИндексПродукции];
				НоваяСтрока.Стоимость       = СуммаКРаспред[ИндексПродукции];
				НоваяСтрока.СтоимостьБезНДС = СуммаБезНДСКРаспред[ИндексПродукции];
				НоваяСтрока.СтоимостьРегл   = СуммаРеглКРаспред[ИндексПродукции];
				НоваяСтрока.СтоимостьБезНДСРегл  = СуммаБезНДСРеглКРаспред[ИндексПродукции];
				Если СуммаНДСКРаспред <> Неопределено Тогда
					НоваяСтрока.СуммаНДС = СуммаНДСКРаспред[ИндексПродукции];
				КонецЕсли;
				НоваяСтрока.КоличествоРаботы = РаботаКРаспред[ИндексПродукции];
				
				СуммаКРаспред[ИндексПродукции]       = 0; // Распределяем стоимость услуги только на первую строку с материалом
				СуммаБезНДСКРаспред[ИндексПродукции] = 0; // Распределяем стоимость услуги только на первую строку с материалом
				СуммаРеглКРаспред[ИндексПродукции]   = 0; // Распределяем стоимость услуги только на первую строку с материалом
				СуммаБезНДСРеглКРаспред[ИндексПродукции] = 0; // Распределяем стоимость услуги только на первую строку с материалом
				Если СуммаНДСКРаспред <> Неопределено Тогда
					СуммаНДСКРаспред[ИндексПродукции]= 0; // Распределяем стоимость услуги только на первую строку с материалом
				КонецЕсли;
				РаботаКРаспред[ИндексПродукции]      = 0; // Распределяем стоимость услуги только на первую строку с материалом
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Распределим возвратные отходы на продукцию
		Для ИндексВозвОтходов = 0 по СтрокВозвОтходов - 1 Цикл
			
			СтрокаВозвОтходов = СписокВозвОтходов[ИндексВозвОтходов];
			
			// Количество к распределению
			КоличествоКРаспред = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
				СтрокаВозвОтходов.Количество,
				МассивКоэффициентов,
				3);
			
			Для ИндексПродукции = 0 по СтрокПродукции - 1 Цикл
				
				// Нечего распределять
				Если КоличествоКРаспред[ИндексПродукции] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПродукции = СписокПродукции[ИндексПродукции];
				
				НоваяСтрока = РаспределенныеВозвОтходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПродукции);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозвОтходов, "АналитикаУчетаВозвОтхода, КодСтрокиВозвОтхода");
				
				НоваяСтрока.Количество = КоличествоКРаспред[ИндексПродукции];
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЦикла; 
	
	РаспределенныеДанные = Новый Структура;
	РаспределенныеДанные.Вставить("РаспределенныеМатериалы", РаспределенныеМатериалы);
	РаспределенныеДанные.Вставить("РаспределенныеВозвОтходы", РаспределенныеВозвОтходы);
	
	Возврат РаспределенныеДанные;
	
КонецФункции

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ДанныеОтбора  - Структура - поля, по которым будут отобраны остатки заказов
//	МассивЗаказов - Массив - заказы, по которым будут отобраны остатки
//	Отгрузка      - Булево - Истина - ТЧ Материалы, Ложь - ТЧ Продукция
//
// Вовращаемое значение:
//	Результат запроса - результат запроса по непоставленной части заказов
//
Функция ПолучитьРезультатЗапросаПоОстаткамЗаказов(ПараметрыЗаполнения, МассивЗаказов, Отгрузка = Ложь) 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПродукцияПоЗаказу.Ссылка                 КАК Ссылка,
	|	ПродукцияПоЗаказу.НомерСтроки            КАК НомерСтроки,
	|	ПродукцияПоЗаказу.КодСтроки              КАК КодСтроки,
	|	ПродукцияПоЗаказу.ДоляСтоимости          КАК ДоляСтоимости,
	|	ПродукцияПоЗаказу.Количество             КАК Количество,
	|	ПродукцияПоЗаказу.Упаковка               КАК Упаковка
	|
	|ПОМЕСТИТЬ ТаблицаПоступленийПоЗаказу
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ПродукцияПоЗаказу
	|ГДЕ
	|	ПродукцияПоЗаказу.Ссылка В (&МассивЗаказов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратныеОтходыяПоЗаказу.Ссылка                 КАК Ссылка,
	|	ВозвратныеОтходыяПоЗаказу.НомерСтроки            КАК НомерСтроки,
	|	ВозвратныеОтходыяПоЗаказу.КодСтроки              КАК КодСтроки,
	|	0                                                КАК ДоляСтоимости,
	|	ВозвратныеОтходыяПоЗаказу.Количество             КАК Количество,
	|	ВозвратныеОтходыяПоЗаказу.Упаковка               КАК Упаковка
	|ИЗ
	|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ВозвратныеОтходыяПоЗаказу
	|ГДЕ
	|	ВозвратныеОтходыяПоЗаказу.Ссылка В (&МассивЗаказов)
	|
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.ЗаказПереработчику         КАК ЗаказПереработчику,
	|	Аналитика.Номенклатура                   КАК Номенклатура,
	|	Аналитика.Характеристика                 КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки                  КАК КодСтроки,
	|	ТаблицаЗаказы.ТипСтоимости               КАК ТипСтоимости,
	|	СУММА(ТаблицаЗаказы.Количество)          КАК Количество
	|
	|ПОМЕСТИТЬ ТаблицаОстатки
	|
	|ИЗ
	//   Остатки по товарам, полученным от переработчика
	|	(ВЫБРАТЬ
	|		Распоряжение               КАК ЗаказПереработчику,
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		КодСтроки                  КАК КодСтроки,
	|		ТипСтоимости               КАК ТипСтоимости,
	|		КоличествоОстаток          КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(, Распоряжение В (&МассивЗаказов)) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	//   Остатки по товарам, полученным от переработчика (Движения документа, вызывающего процедуру запонлнения)
	|	ВЫБРАТЬ
	|		Распоряжение               КАК ЗаказПереработчику,
	|		АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		КодСтроки                  КАК КодСтроки,
	|		ТипСтоимости               КАК ТипСтоимости,
	|		ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-Количество
	|		ИНАЧЕ
	|			Количество
	|		КОНЕЦ                      КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика КАК Т
	|	ГДЕ
	|		Регистратор = &Регистратор И Распоряжение В (&МассивЗаказов) И Активность
	|
	|	) КАК ТаблицаЗаказы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаЗаказы.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.ЗаказПереработчику,
	|	Аналитика.Номенклатура,
	|	Аналитика.Характеристика,
	|	ТаблицаЗаказы.ТипСтоимости,
	|	ТаблицаЗаказы.КодСтроки
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.Количество) > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказПереработчику      КАК ЗаказПереработчику,
	|	ЗаказТовары.НомерСтроки                КАК НомерСтрокиЗаказа,
	|	ТаблицаОстатки.Номенклатура            КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика          КАК Характеристика,
	|	ТаблицаОстатки.КодСтроки               КАК КодСтроки,
	|	ТаблицаОстатки.Количество              КАК Количество,
	|	ТаблицаОстатки.ТипСтоимости            КАК ТипСтоимости,
	|	Заказ.Сделка                           КАК Сделка,
	|	ЕСТЬNULL(ЗаказТовары.ДоляСтоимости, 0) КАК ДоляСтоимости,
	|	ЕСТЬNULL(ЗаказТовары.Количество, 0)    КАК КоличествоПоЗаказу,
	|	ЕСТЬNULL(ЗаказТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяКалькуляции,
	|	ТаблицаОстатки.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|
	|	ВЫБОР КОГДА ЗаказТовары.Упаковка ЕСТЬ NULL
	|			ИЛИ ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		1
	|	ИНАЧЕ
	|		&ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ                                  КАК Коэффициент
	|
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ЗаказПереработчику КАК Заказ
	|		ПО
	|			ТаблицаОстатки.ЗаказПереработчику = Заказ.Ссылка
	|
	//      Левое соединение, т.к. возможно поступление СВЕРХ заказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ТаблицаПоступленийПоЗаказу КАК ЗаказТовары
	|		ПО
	|			ТаблицаОстатки.ЗаказПереработчику = ЗаказТовары.Ссылка
	|			И ТаблицаОстатки.КодСтроки        = ЗаказТовары.КодСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПереработчику,
	|	НомерСтрокиЗаказа";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Регистратор",   ПараметрыЗаполнения.Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	МассивЗаказов - Массив - заказы, по которым будут отобраны остатки
//	Отгрузка      - Булево - Истина - ТЧ Материалы, Ложь - ТЧ Продукция
//
// Вовращаемое значение:
//	Результат запроса - результат запроса по непоставленной части заказов
//
Функция ПолучитьРезультатЗапросаПоЗаказам(МассивЗаказов, Отгрузка) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("Отгрузка", Отгрузка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки        КАК НомерСтрокиЗаказа,
	|	ТаблицаТовары.Ссылка             КАК ЗаказПереработчику,
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика     КАК Характеристика,
	|	ТаблицаТовары.Упаковка           КАК Упаковка,
	|	ТаблицаТовары.КодСтроки          КАК КодСтроки,
	|	НЕОПРЕДЕЛЕНО                     КАК СтатьяКалькуляции,
	|	Значение(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
	|	ТаблицаТовары.ДоляСтоимости      КАК ДоляСтоимости,
	|	ТаблицаТовары.Количество         КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ТаблицаТовары
	|		ПО Заказ.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Не &Отгрузка И Заказ.Ссылка В(&МассивЗаказов)
	|	И ТаблицаТовары.КоличествоУпаковок > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки        КАК НомерСтрокиЗаказа,
	|	ТаблицаТовары.Ссылка             КАК ЗаказПереработчику,
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика     КАК Характеристика,
	|	ТаблицаТовары.Упаковка           КАК Упаковка,
	|	ТаблицаТовары.КодСтроки          КАК КодСтроки,
	|	НЕОПРЕДЕЛЕНО                     КАК СтатьяКалькуляции,
	|	Значение(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная) КАК ТипСтоимости,
	|	НЕОПРЕДЕЛЕНО                     КАК ДоляСтоимости,
	|	ТаблицаТовары.Количество         КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ТаблицаТовары
	|		ПО Заказ.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Не &Отгрузка И Заказ.Ссылка В(&МассивЗаказов)
	|	И ТаблицаТовары.КоличествоУпаковок > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки        КАК НомерСтрокиЗаказа,
	|	ТаблицаТовары.Ссылка             КАК ЗаказПереработчику,
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика     КАК Характеристика,
	|	ТаблицаТовары.Упаковка           КАК Упаковка,
	|	ТаблицаТовары.КодСтроки          КАК КодСтроки,
	|	ТаблицаТовары.СтатьяКалькуляции  КАК СтатьяКалькуляции,
	|	НЕОПРЕДЕЛЕНО                     КАК ТипСтоимости,
	|	НЕОПРЕДЕЛЕНО                     КАК ДоляСтоимости,
	|	ТаблицаТовары.Количество         КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Материалы КАК ТаблицаТовары
	|		ПО Заказ.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	&Отгрузка И Заказ.Ссылка В(&МассивЗаказов)
	|	И ТаблицаТовары.КоличествоУпаковок > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиЗаказа";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ОтчетПереработчика.Форма.РабочееМесто";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетПереработчика))
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПереработчику)
		И (ПравоДоступа("Добавление", Метаданные.Документы.ОтчетПереработчика)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ОтчетПереработчика))
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(Получено.Распоряжение) КАК ОтчетыПереработчиковКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки КАК Получено
	|
	|ГДЕ
	|	Получено.КоличествоОстаток > 0";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ПроизводствоНаСтороне
	ДелоРодитель = ТекущиеДела.Найти("ПроизводствоНаСтороне", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ПроизводствоНаСтороне";
		ДелоРодитель.Представление  = НСтр("ru='Производство на стороне';uk='Виробництво на стороні'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Производство;
	КонецЕсли;
	
	// ОтчетыПереработчиковКОформлению
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "ГруппаКОформлению");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ОтчетыПереработчиковКОформлению";
	Дело.ЕстьДела       = Результат.ОтчетыПереработчиковКОформлению > 0;
	Дело.Представление  = НСтр("ru='Отчеты переработчиков к оформлению';uk='Звіти переробників до оформлення'");
	Дело.Количество     = Результат.ОтчетыПереработчиковКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ПроизводствоНаСтороне";
	
	Если Результат.ОтчетыПереработчиковКОформлению > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы


#КонецОбласти

#КонецОбласти

#КонецЕсли
