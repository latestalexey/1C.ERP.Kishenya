#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем ОтчетИнициализирован;
Перем НастройкиВывода;

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	ИнициализироватьОтчет();
	
	Если КлючВарианта = "РасчетнаяВедомость" Тогда
		
		Попытка
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ФормаРасчетнаяВедомость";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			// Нужно проверить включена ли группировка по подразделениям.
			ЕстьГруппировкаПоПодразделению = Ложь;
			ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
			
			Если Не ЕстьГруппировкаПоПодразделению Тогда
				Для каждого ЭлементСортировки Из НастройкиОтчета.Порядок.Элементы Цикл
					Если ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение.РеквизитДопУпорядочивания") Тогда
						ЭлементСортировки.Использование = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИзменитьГруппировкиВариантаРасчетнаяВедомость(НастройкиОтчета.Структура, ЕстьГруппировкаПоПодразделению);
			ПараметрДополнитьВедомостьПустымиСтроками = Новый ПараметрКомпоновкиДанных("ДополнитьВедомостьПустымиСтроками");
			ДополнитьВедомостьПустымиСтроками = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрДополнитьВедомостьПустымиСтроками).Значение;
			ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_РасчетнаяВедомость");
			
			Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
			
			Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
			Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
			Макеты.Строка = Макет.ПолучитьОбласть("Строка");
			Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
			Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
			Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			
			Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
			
			Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
				Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
					ВывестиОрганизациюРасчетнаяВедомость(СтрокаОрганизации, 
						ДокументРезультат, 
						Макеты, 
						ЕстьГруппировкаПоПодразделению, 
						СоответствиеПользовательскихПолей,
						КлючВарианта,
						ДополнитьВедомостьПустымиСтроками);
				КонецЦикла;
			КонецЦикла;
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета Расчетная ведомость внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту Розрахункова відомість внесені критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "РасчетныйЛисток"
		Или КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования"
		Или КлючВарианта = "РасчетныйЛистокПоРабочимМестам"
		Или КлючВарианта = "РасчетныйЛистокПоРабочимМестамИСРазбивкойПоИсточникамФинансирования" Тогда
		
		Попытка
			
			ВыводитьПоРабочимМестам = (КлючВарианта = "РасчетныйЛистокПоРабочимМестам")
				Или (КлючВарианта = "РасчетныйЛистокПоРабочимМестамИСРазбивкойПоИсточникамФинансирования");
			
			ГруппироватьПоИсточникамФинансирования = (КлючВарианта = "РасчетныйЛистокСРазбивкойПоИсточникамФинансирования")
				Или (КлючВарианта = "РасчетныйЛистокПоРабочимМестамИСРазбивкойПоИсточникамФинансирования");
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетныйЛисток";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Период") Тогда
				НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период);
			КонецЕсли; 
			
			ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
			ЗарплатаКадрыОтчеты.НастроитьВариантОтчетаРасчетныйЛисток(НастройкиОтчета);
			
			// Нужно проверить включена ли группировка по подразделениям.
			ЕстьГруппировкаПоПодразделению = Ложь;
			ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
			Если НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Использование Тогда
				ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
			КонецЕсли; 
			
			НастройкиВывода = НастройкиВыводаРасчетногоЛистка();
			
			
			Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Ложь Тогда
				ОтключитьИспользованиеПолей(НастройкиОтчета, "ОтработаноДней,ОтработаноЧасов,ОплаченоДней,ОплаченоЧасов,ВремяВЧасах");
			КонецЕсли; 
			
			Если НастройкиВывода.ВыводитьПоказателиНачислений = Ложь Тогда
				ОтключитьИспользованиеПолей(НастройкиОтчета, "Показатель,Значение");
			КонецЕсли; 
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , ДанныеРасшифровки, Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Если ВыводитьПоРабочимМестам Тогда
				
				Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_РасчетныйЛисток");
				
				Макеты = Новый Структура("Шапка1,АвансовыеПлатежи,Шапка2,Подработка,НачисленоУдержано,ПрочиеВыплачено,Льготы,СтрокаДвижений,Итог12,Итог34,Итог56,Сальдо,Группировка,СтатьяФинансирования,ИтогСтатьяФинансирования,Итог12ВНатуральнойФорме");
				
				Макеты.Шапка1 = Макет.ПолучитьОбласть("Шапка1");
				Макеты.АвансовыеПлатежи = Макет.ПолучитьОбласть("АвансовыеПлатежи");
				Макеты.Шапка2 = Макет.ПолучитьОбласть("Шапка2");
				Макеты.Подработка = Макет.ПолучитьОбласть("Подработка");
				Макеты.НачисленоУдержано = Макет.ПолучитьОбласть("НачисленоУдержано");
				Макеты.ПрочиеВыплачено = Макет.ПолучитьОбласть("ПрочиеВыплачено");
				Макеты.Льготы = Макет.ПолучитьОбласть("Льготы");
				Макеты.СтрокаДвижений = Макет.ПолучитьОбласть("СтрокаДвижений");
				Макеты.Итог12 = Макет.ПолучитьОбласть("Итог12");
				Макеты.Итог12ВНатуральнойФорме = Макет.ПолучитьОбласть("Итог12ВНатуральнойФорме");
				Макеты.Итог34 = Макет.ПолучитьОбласть("Итог34");
				Макеты.Итог56 = Макет.ПолучитьОбласть("Итог56");
				Макеты.Сальдо = Макет.ПолучитьОбласть("Сальдо");
				Макеты.Группировка = Макет.ПолучитьОбласть("Группировка");
				Макеты.СтатьяФинансирования = Макет.ПолучитьОбласть("СтатьяФинансирования");
				Макеты.ИтогСтатьяФинансирования = Макет.ПолучитьОбласть("ИтогСтатьяФинансирования");
			
			Иначе
				Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_РасчетныйЛистокНастраиваемый");
			КонецЕсли;
			
			ЕстьГруппировкаПоОрганизации = МожноГруппировать(НастройкиОтчета.Порядок, "Организация");
			
			
			Организация = Неопределено;
			Подразделение = Неопределено;
			
			ДокументРезультатСтраница = Новый ТабличныйДокумент;
			Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
				
				Если ВыводитьПоРабочимМестам = Истина Тогда
					
					ДанныеПоНДФЛИВзносам = ДанныеПоНДФЛИВзносам(СтрокаМесяца.Строки, СтрокаМесяца.МесяцНачисления, Истина, Ложь);
					
				ИначеЕсли НастройкиВывода.ВыводитьОсобенностиРасчетаНДФЛ = Истина
					Или НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВФСС = Истина Тогда
					
					ДанныеПоНДФЛИВзносам = ДанныеПоНДФЛИВзносам(СтрокаМесяца.Строки, СтрокаМесяца.МесяцНачисления, НастройкиВывода.ВыводитьОсобенностиРасчетаНДФЛ, НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВФСС);
					
				Иначе
					ДанныеПоНДФЛИВзносам = Неопределено;
				КонецЕсли;
				
				Если Не ВыводитьПоРабочимМестам Тогда
					
					ДанныеПоФизическимЛицам = Новый Массив;
					ДанныеПоФизическомуЛицу = Неопределено;
					
					ТекущееФизическоеЛицо = Неопределено;
					Для Каждого СтрокаГоловногоСотрудника Из СтрокаМесяца.Строки Цикл
						
						Если ТекущееФизическоеЛицо <> СтрокаГоловногоСотрудника.ФизическоеЛицо Тогда
							
							Если ТекущееФизическоеЛицо <> Неопределено Тогда
								ДанныеПоФизическимЛицам.Добавить(ДанныеПоФизическомуЛицу);
							КонецЕсли; 
							
							ТекущееФизическоеЛицо = СтрокаГоловногоСотрудника.ФизическоеЛицо;
							
							ДанныеПоФизическомуЛицу = Новый Структура;
							ДанныеПоФизическомуЛицу.Вставить("ФизическоеЛицо", СтрокаГоловногоСотрудника.ФизическоеЛицо);
							ДанныеПоФизическомуЛицу.Вставить("Организация", СтрокаГоловногоСотрудника.Организация);
							ДанныеПоФизическомуЛицу.Вставить("Подразделение", СтрокаГоловногоСотрудника.ПодразделениеГоловногоСотрудникаНаКонецПериода);
							ДанныеПоФизическомуЛицу.Вставить("ГоловныеСотрудники", Новый Массив);
							
						КонецЕсли; 
						
						ДанныеПоФизическомуЛицу.ГоловныеСотрудники.Добавить(СтрокаГоловногоСотрудника);
						
					КонецЦикла;
					
					Если ТекущееФизическоеЛицо <> Неопределено Тогда
						ДанныеПоФизическимЛицам.Добавить(ДанныеПоФизическомуЛицу);
					КонецЕсли;
					
					КоллекцияДанных = ДанныеПоФизическимЛицам;
					
				Иначе
					КоллекцияДанных = СтрокаМесяца.Строки;
				КонецЕсли;
				
				Для каждого СтрокаКоллекции Из КоллекцияДанных Цикл
					
					Если ВыводитьПоРабочимМестам Тогда
						
						Если ЕстьГруппировкаПоОрганизации И Организация <> СтрокаКоллекции.Организация Тогда
							
							Макеты.Группировка.Параметры.НазваниеПараметра = НСтр("ru='Организация';uk='Організація'");
							Макеты.Группировка.Параметры.Значение = СтрокаКоллекции.Организация;
							
							ДокументРезультат.Вывести(Макеты.Группировка);
							Организация = СтрокаКоллекции.Организация;
							
						КонецЕсли; 
						
						Если ЕстьГруппировкаПоПодразделению И Подразделение <> СтрокаКоллекции.ПодразделениеГоловногоСотрудникаНаКонецПериода Тогда
							
							Макеты.Группировка.Параметры.НазваниеПараметра = НСтр("ru='Подразделение';uk='Підрозділ'");
							Макеты.Группировка.Параметры.Значение = СтрокаКоллекции.ПодразделениеГоловногоСотрудникаНаКонецПериода;
							
							ДокументРезультат.Вывести(Макеты.Группировка);
							Подразделение = СтрокаКоллекции.ПодразделениеГоловногоСотрудникаНаКонецПериода;
							
						КонецЕсли; 
						
						ВыводимаяКоллекция = СтрокаКоллекции;
						ВывестиСотрудникаРасчетныйЛистокПоРабочимМестам(ВыводимаяКоллекция, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования);
						
					Иначе
						
						Если ЕстьГруппировкаПоОрганизации И Организация <> СтрокаКоллекции.Организация Тогда
							
							ПараметрыГруппировки = Новый Структура("НазваниеПараметра, Значение",НСтр("ru='Организация';uk='Організація'"));
							ПараметрыГруппировки.Значение = СтрокаКоллекции.Организация;
							
							Область = Макет.ПолучитьОбласть("Группировка");
							Область.Параметры.Заполнить(ПараметрыГруппировки);
							
							ДокументРезультатСтраница.Вывести(Область);
							Организация = СтрокаКоллекции.Организация;
							
						КонецЕсли; 
						
						Если ЕстьГруппировкаПоПодразделению И Подразделение <> СтрокаКоллекции.Подразделение Тогда
							
							ПараметрыГруппировки = Новый Структура("НазваниеПараметра, Значение", НСтр("ru='Подразделение';uk='Підрозділ'"));
							ПараметрыГруппировки.Значение = СтрокаКоллекции.Подразделение;
							
							Область = Макет.ПолучитьОбласть("Группировка");
							Область.Параметры.Заполнить(ПараметрыГруппировки);
							
							ДокументРезультатСтраница.Вывести(Область);
							Подразделение = СтрокаКоллекции.Подразделение;
							
						КонецЕсли; 
						
						ВыводимаяКоллекция = СтрокаКоллекции.ГоловныеСотрудники;
						ВывестиСотрудникаРасчетныйЛисток(ВыводимаяКоллекция, ДокументРезультат, ДокументРезультатСтраница, Макет, СоответствиеПользовательскихПолей, ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ДокументРезультатСтраница.ВысотаСтраницы > 0 Тогда
				
				Если ДокументРезультат.ВысотаСтраницы > 0 Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ДокументРезультат.Вывести(ДокументРезультатСтраница);
				
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета ""Расчетный листок"" внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту ""Розрахунковий листок"" внесено критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "П6" Тогда
		Попытка
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТиповаяФормаП6";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.АвтоМасштаб = Истина;
			
		
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			ФИОГлавногоБухгалтера = "";
			ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГлавныйБухгалтер"));
			Если ЗначениеПараметра <> Неопределено
				И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
				
				КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ЗначениеПараметра.Значение, "ИОФамилия", ТекущаяДата());
				Если КадровыеДанные.Количество() > 0 Тогда
					ФИОГлавногоБухгалтера = КадровыеДанные[0].ИОФамилия;
				КонецЕсли; 
				
			КонецЕсли; 

			
			ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_UK_П6");
			Макеты = Новый Структура("ОбластьОтчета");
			Макеты.ОбластьОтчета = Макет.ПолучитьОбласть("ОбластьОтчета");
			
			Для каждого СтрокаМесяца Из ДанныеОтчета.Строки Цикл
				
				ДанныеПоФизическимЛицам = Новый Массив;
				ДанныеПоФизическомуЛицу = Неопределено;
				
				ТекущееФизическоеЛицо = Неопределено;
				Для Каждого СтрокаГоловногоСотрудника Из СтрокаМесяца.Строки Цикл
					
					Если ТекущееФизическоеЛицо <> СтрокаГоловногоСотрудника.ФизическоеЛицо Тогда
						
						Если ТекущееФизическоеЛицо <> Неопределено Тогда
							ДанныеПоФизическимЛицам.Добавить(ДанныеПоФизическомуЛицу);
						КонецЕсли; 
						
						ТекущееФизическоеЛицо = СтрокаГоловногоСотрудника.ФизическоеЛицо;
						
						ДанныеПоФизическомуЛицу = Новый Структура;
						ДанныеПоФизическомуЛицу.Вставить("ФизическоеЛицо", СтрокаГоловногоСотрудника.ФизическоеЛицо);
						ДанныеПоФизическомуЛицу.Вставить("Организация", СтрокаГоловногоСотрудника.Организация);
						ДанныеПоФизическомуЛицу.Вставить("Подразделение", СтрокаГоловногоСотрудника.ПодразделениеГоловногоСотрудникаНаКонецПериода);
						ДанныеПоФизическомуЛицу.Вставить("ГоловныеСотрудники", Новый Массив);
						
					КонецЕсли; 
					
					ДанныеПоФизическомуЛицу.ГоловныеСотрудники.Добавить(СтрокаГоловногоСотрудника);
					
				КонецЦикла;
				
				Если ТекущееФизическоеЛицо <> Неопределено Тогда
					ДанныеПоФизическимЛицам.Добавить(ДанныеПоФизическомуЛицу);
				КонецЕсли;
				
				КоллекцияДанных = ДанныеПоФизическимЛицам;
				
				Для каждого СтрокаКоллекции Из КоллекцияДанных Цикл
					ВыводимаяКоллекция = СтрокаКоллекции.ГоловныеСотрудники;
					ВывестиОрганизациюП6(ВыводимаяКоллекция, ДокументРезультат, Макет, Макеты, СоответствиеПользовательскихПолей,ФИОГлавногоБухгалтера);
				КонецЦикла;		
			КонецЦикла;
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета Типовая форма П-6 внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту Типова форма П-6 внесено критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;
	ИначеЕсли КлючВарианта = "П7" Тогда
		Попытка
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТиповаяФормаП7";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.АвтоМасштаб = Истина;
			
		
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			ФИОГлавногоБухгалтера = "";
			ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГлавныйБухгалтер"));
			Если ЗначениеПараметра <> Неопределено
				И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
				
				КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ЗначениеПараметра.Значение, "ИОФамилия", ТекущаяДата());
				Если КадровыеДанные.Количество() > 0 Тогда
					ФИОГлавногоБухгалтера = КадровыеДанные[0].ИОФамилия;
				КонецЕсли; 
				
			КонецЕсли; 

			
			ЗарплатаКадрыОтчеты.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДанныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_UK_П7");
			Макеты = Новый Структура("ОбластьОтчета, ОбластьТаблицы");
			Макеты.ОбластьОтчета = Макет.ПолучитьОбласть("ОбластьОтчета");
			Макеты.ОбластьТаблицы = Макет.ПолучитьОбласть("ОбластьТаблицы");
			
			Для каждого СтрокаОрганизации Из ДанныеОтчета.Строки Цикл
				Если НЕ (СтрокаОрганизации.МесяцНачисления = Неопределено И СтрокаОрганизации.Организация = Неопределено) Тогда
					ВывестиОрганизациюП7(СтрокаОрганизации, ДокументРезультат, Макет, Макеты, СоответствиеПользовательскихПолей,ФИОГлавногоБухгалтера);
				КонецЕсли;	
			КонецЦикла;
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета Типовая форма П-7 внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту Типова форма П-7 внесено критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;

	Иначе
		
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	Если Не ОтчетИнициализирован Тогда
		
		ЗаполнитьОбщиеИсточникиДанных = Ложь;
		
		Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			
			Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
				И (СтрНайти(НаборДанных.Запрос, "ОбщиеЗапросы_") > 0
				Или СтрНайти(НаборДанных.Запрос, "Представления_") > 0) Тогда
				
				ЗаполнитьОбщиеИсточникиДанных = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаполнитьОбщиеИсточникиДанных Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
			УчетНачисленнойЗарплаты.ДополнитьАнализНачисленийИУдержаний(ЭтотОбъект);
			
		КонецЕсли; 
		
		ОтчетИнициализирован = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы <> "СхемаИнициализирована" Тогда
		
		ИнициализироватьОтчет();
		ЗарплатаКадрыОтчеты.ОтчетАнализНачисленийИУдержанийПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
		
		КлючСхемы = "СхемаИнициализирована";
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает значение Истина, если в группировках элементов структуры присутствует поле "Период регистрации".
//
Функция НайтиМесяцНачисления(Структура) Экспорт
	
	ЕстьПоле = Ложь;
	
	Если ТипЗнч(Структура) <> Тип("ГруппировкаКомпоновкиДанных")
       И ТипЗнч(Структура) <> Тип("ГруппировкаТаблицыКомпоновкиДанных")
	   И ТипЗнч(Структура) <> Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеМесяцНачисления = Новый ПолеКомпоновкиДанных("МесяцНачисления");
	
	Для каждого ПолеГруппировки Из Структура.ПоляГруппировки.Элементы Цикл
		
		Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеМесяцНачисления Тогда
			
			ЕстьПоле = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПоле И Структура.Структура.Количество() <> 0 Тогда
		
		ЕстьПоле = НайтиМесяцНачисления(Структура.Структура[0]);
		
	КонецЕсли;
	
	Возврат ЕстьПоле;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету РасчетнаяВедомость.

Процедура ВывестиОрганизациюРасчетнаяВедомость(СтрокаОрганизации, 
	ДокументРезультат, 
	Макеты, 
	ЕстьГруппировкаПоПодразделению, 
	СоответствиеПользовательскихПолей,
	КлючВарианта,
	ДополнитьВедомостьПустымиСтроками)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ЕстьОплатаВНатуральнойФорме = (СтрокаОрганизации[СоответствиеПользовательскихПолей["НачисленоВНатуральнойФорме"]] <> 0);
		
	Если ЕстьГруппировкаПоПодразделению Тогда
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеРасчетнаяВедомость(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей,
				ЕстьОплатаВНатуральнойФорме, КлючВарианта, ДополнитьВедомостьПустымиСтроками);
		КонецЦикла;
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		КВыплатеПоВедомости = 0;
		
		Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
	

		Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
			Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
		КонецЕсли; 
		ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		НомерСтроки = 0;
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость();
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл	
				ВывестиСотрудникаРасчетнаяВедомость(НомерСтроки, 
					СтрокаСотрудника, 
					ДокументРезультат, 
					Макеты, 
					СоответствиеПользовательскихПолей, 
					ПромежуточныеИтоги, 
					КВыплатеПоВедомости, 
					ЕстьОплатаВНатуральнойФорме,
					КлючВарианта);
			КонецЦикла;
		КонецЦикла;
		ДополнитьСтраницуРасчетнаяВедомость(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги, ДополнитьВедомостьПустымиСтроками);
		Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
		Макеты.Подвал.Параметры.ПараметрыДанныхОтветственный = ИОФамилияФизическогоЛица(Макеты.Подвал.Параметры.ПараметрыДанныхОтветственный);
		
		Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	
	
		ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
		ДокументРезультат.Вывести(Макеты.Подвал);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодразделениеРасчетнаяВедомость(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, 
	ЕстьОплатаВНатуральнойФорме, КлючВарианта, ДополнитьВедомостьПустымиСтроками)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	КВыплатеПоВедомости = 0;
	
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.Шапка.Параметры.Заполнить(СтрокаПодразделения);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода) Тогда
		Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода = Макеты.ШапкаДокумента.Параметры.ПодразделениеНаКонецПериода.ПолноеНаименование();
	КонецЕсли; 
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.Шапка);
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость();
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаРасчетнаяВедомость(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, 
			ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме, КлючВарианта);
	КонецЦикла;
	ДополнитьСтраницуРасчетнаяВедомость(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги, ДополнитьВедомостьПустымиСтроками);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаПодразделения);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Макеты.Подвал.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.Подвал.Параметры.ПараметрыДанныхОтветственный = ИОФамилияФизическогоЛица(Макеты.Подвал.Параметры.ПараметрыДанныхОтветственный);
	
	Макеты.ИтогоПоВедомости.Параметры.КВыплате = КВыплатеПоВедомости;
	
			
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
	
КонецПроцедуры

Процедура ВывестиСотрудникаРасчетнаяВедомость(НомерСтроки,	СтрокаСотрудника, ДокументРезультат, Макеты, 
	СоответствиеПользовательскихПолей, ПромежуточныеИтоги, КВыплатеПоВедомости, ЕстьОплатаВНатуральнойФорме, КлючВарианта)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	НомерСтроки = НомерСтроки + 1;
	
	МакетСотрудника = Новый ТабличныйДокумент;
	
	ПромежуточныеИтогиПоСотруднику = ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость();
	
	НесколькоРабочихМест = СтрокаСотрудника.Строки.Количество() > 1;
		
	Макеты.Строка.Параметры.Заполнить(СтрокаСотрудника);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
	
	ОтработаноРабочихДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихДней")];
	ОтработаноРабочихЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихЧасов")];
	
	Если ЗначениеЗаполнено(ОтработаноРабочихДней) И ОтработаноРабочихДней > 0 Тогда 
		Макеты.Строка.Параметры.ОтработаноРабочихДней = "" + ОтработаноРабочихДней + " (" + ОтработаноРабочихЧасов + ")";
	Иначе
		Макеты.Строка.Параметры.ОтработаноРабочихДней = "";
	КонецЕсли;
	
	
	Макеты.Строка.Параметры.НомерПП = НомерСтроки;
	Если Макеты.Строка.Параметры.КВыплате < 0 Тогда
		Макеты.Строка.Параметры.КВыплате = 0;
	КонецЕсли;
	
	
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтогиПоСотруднику, Макеты.Строка.Параметры);
	КВыплатеПоВедомости = КВыплатеПоВедомости + Макеты.Строка.Параметры.КВыплате;
	
	Если НесколькоРабочихМест Тогда
		
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
		Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей, "ДолгЗаОрганизацией,ДолгЗаСотрудником,ВсегоНачислено,НДФЛ,ПрочиеУдержания,ВсегоУдержано,КВыплате");
		
	КонецЕсли;
	
	МакетСотрудника.Вывести(Макеты.Строка);
	
	
	Если МакетСотрудника.ВысотаТаблицы > 1 Тогда
		
		// Номер по порядку
		МакетСотрудника.Область(1, 1, МакетСотрудника.ВысотаТаблицы, 1).Объединить();
		// Табельный номер
		МакетСотрудника.Область(1, 2, МакетСотрудника.ВысотаТаблицы, 2).Объединить();
		// ФИО
		МакетСотрудника.Область(1, 3, МакетСотрудника.ВысотаТаблицы, 3).Объединить();
		// Всего начислено
		МакетСотрудника.Область(1, 17, МакетСотрудника.ВысотаТаблицы, 17).Объединить();
		// НДФЛ
		МакетСотрудника.Область(1, 18, МакетСотрудника.ВысотаТаблицы, 19).Объединить();
		// Прочие удержания
		МакетСотрудника.Область(1, 20, МакетСотрудника.ВысотаТаблицы, 20).Объединить();
		// Всего удержано
		МакетСотрудника.Область(1, 21, МакетСотрудника.ВысотаТаблицы, 22).Объединить();
		// Задолженность за организацией.
		МакетСотрудника.Область(1, 23, МакетСотрудника.ВысотаТаблицы, 23).Объединить();
		// Задолженность за работников.
		МакетСотрудника.Область(1, 24, МакетСотрудника.ВысотаТаблицы, 24).Объединить();
		// К выплате
		МакетСотрудника.Область(1, 25, МакетСотрудника.ВысотаТаблицы, 25).Объединить();
		
	КонецЕсли; 
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(МакетСотрудника);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
		
		ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость();
		
	КонецЕсли;
	
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ПромежуточныеИтогиПоСотруднику);
	
	ДокументРезультат.Вывести(МакетСотрудника);
	
КонецПроцедуры

Процедура ДополнитьСтраницуРасчетнаяВедомость(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги, ДополнитьВедомостьПустымиСтроками)
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.ПустаяСтрока);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Если ДополнитьВедомостьПустымиСтроками Тогда 
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Цикл
			ДокументРезультат.Вывести(Макеты.ПустаяСтрока);
		КонецЦикла;
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость()
	
	ПромежуточныеИтоги = Новый Структура;
	
	ПромежуточныеИтоги.Вставить("НачисленоПовременно", 0);
	ПромежуточныеИтоги.Вставить("НачисленоСдельно", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеДоходы", 0);
	ПромежуточныеИтоги.Вставить("Премии", 0);
	ПромежуточныеИтоги.Вставить("ОплатаОтпуска", 0);
	ПромежуточныеИтоги.Вставить("ИндексацияЗарплаты", 0);
	ПромежуточныеИтоги.Вставить("ОплатаБольничногоЛистаЗаСчетПредприятия", 0);
	ПромежуточныеИтоги.Вставить("ОплатаБольничногоЛиста", 0);
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("НДФЛ", 0);
	ПромежуточныеИтоги.Вставить("ВоенныйСбор", 0);
	ПромежуточныеИтоги.Вставить("Аванс", 0);
	ПромежуточныеИтоги.Вставить("ВыплатаВМежрасчетныйПериод", 0);
	ПромежуточныеИтоги.Вставить("ИсполнительныйЛист", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеУдержания", 0);
	ПромежуточныеИтоги.Вставить("ВсегоУдержано", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаОрганизацией", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаСотрудником", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету РасчетныйЛисток.

Функция ДанныеПоНДФЛИВзносам(СтрокиСотрудников, МесяцНачисления, ВыводитьОсобенностиРасчетаНДФЛ, ВыводитьИнформациюОНачисленныхВзносахВФСС)
	
	ВозвращаемыеДанные = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", СтрокиСотрудников.ВыгрузитьКолонку("ГоловнойСотрудник"));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(МесяцНачисления));
	
	Запрос.Текст =
	 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	 	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	 	|ПОМЕСТИТЬ ВТФизическиеЛица
	 	|ИЗ
	 	|	Справочник.Сотрудники КАК Сотрудники
	 	|ГДЕ
	 	|	Сотрудники.Ссылка В(&Сотрудники)";
		
	Запрос.Выполнить();
		
	// Подготовка сведений об НДФЛ
	Запрос.Текст =
	
	 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 	|	ИсчисленныйНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	 	|	ИсчисленныйНДФЛ.Организация КАК Организация,
	 	|	СУММА(ИсчисленныйНДФЛ.ДоходОборот) КАК ОблагаемыйДоход,
		
	 	|	ИсчисленныйНДФЛ.Период КАК МесяцНачисления
	 	|{ВЫБРАТЬ
	 	|	ФизическоеЛицо.*,
	 	|	Организация.*,
	 	|	ОблагаемыйДоход,
	 	|	МесяцНачисления}
	 	|ИЗ
	 	|	РегистрНакопления.ИсчисленныйНДФЛ.Обороты(
	 	|			&НачалоПериода,
	 	|			&КонецПериода,
	 	|			Месяц,
	 	|			КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ВоенныйСбор)
	 	|				И ФизическоеЛицо В
	 	|					(ВЫБРАТЬ
	 	|						ФизическиеЛица.ФизическоеЛицо
	 	|					ИЗ
	 	|						ВТФизическиеЛица КАК ФизическиеЛица)) КАК ИсчисленныйНДФЛ
	 	|{ГДЕ
	 	|	ИсчисленныйНДФЛ.ФизическоеЛицо.*,
	 	|	ИсчисленныйНДФЛ.Организация.*,
	 	|	ИсчисленныйНДФЛ.Период КАК МесяцНачисления}
	 	|
	 	|СГРУППИРОВАТЬ ПО
	 	|	ИсчисленныйНДФЛ.Период,
	 	|	ИсчисленныйНДФЛ.Организация,
	 	|	ИсчисленныйНДФЛ.ФизическоеЛицо";
			
		ВозвращаемыеДанные.Вставить("НДФЛ", Запрос.Выполнить().Выгрузить());
		 
	//Военный сбор
	
		Запрос.Текст =
	 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 	|	ИсчисленныйНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	 	|	ИсчисленныйНДФЛ.Организация КАК Организация,
	 	|	СУММА(ИсчисленныйНДФЛ.НалогОборот) КАК ВоенныйСбор,
		
	 	|	ИсчисленныйНДФЛ.Период КАК МесяцНачисления
	 	|{ВЫБРАТЬ
	 	|	ФизическоеЛицо.*,
	 	|	Организация.*,
	 	|	ВоенныйСбор,
	 	|	МесяцНачисления}
	 	|ИЗ
	 	|	РегистрНакопления.ИсчисленныйНДФЛ.Обороты(
	 	|			&НачалоПериода,
	 	|			&КонецПериода,
	 	|			Месяц,
	 	|			КодДохода = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ВоенныйСбор)
	 	|				И ФизическоеЛицо В
	 	|					(ВЫБРАТЬ
	 	|						ФизическиеЛица.ФизическоеЛицо
	 	|					ИЗ
	 	|						ВТФизическиеЛица КАК ФизическиеЛица)) КАК ИсчисленныйНДФЛ
	 	|{ГДЕ
	 	|	ИсчисленныйНДФЛ.ФизическоеЛицо.*,
	 	|	ИсчисленныйНДФЛ.Организация.*,
	 	|	ИсчисленныйНДФЛ.Период КАК МесяцНачисления}
	 	|
	 	|СГРУППИРОВАТЬ ПО
	 	|	ИсчисленныйНДФЛ.Период,
	 	|	ИсчисленныйНДФЛ.Организация,
	 	|	ИсчисленныйНДФЛ.ФизическоеЛицо";
			
		ВозвращаемыеДанные.Вставить("ВС", Запрос.Выполнить().Выгрузить());

	
	// Подготовка сведений о взносах
	Если ВыводитьИнформациюОНачисленныхВзносахВФСС Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	&НачалоПериода КАК МесяцНачисления,
			|	ИсчисленныеСтраховыеВзносыОбороты.Организация,
			|	ИсчисленныеСтраховыеВзносыОбороты.ФизическоеЛицо,
			|	СУММА(ИсчисленныеСтраховыеВзносыОбороты.СуммаОборот) КАК Сумма
			|ИЗ
			|	РегистрНакопления.ИсчисленныеСтраховыеВзносы.Обороты(
			|			&НачалоПериода,
			|			&КонецПериода,
			|			Месяц,
			|			ФизическоеЛицо В
			|				(ВЫБРАТЬ
			|					ФизическиеЛица.ФизическоеЛицо
			|				ИЗ
			|					ВТФизическиеЛица КАК ФизическиеЛица)) КАК ИсчисленныеСтраховыеВзносыОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсчисленныеСтраховыеВзносыОбороты.ФизическоеЛицо,
			|	ИсчисленныеСтраховыеВзносыОбороты.Организация,
			|	ИсчисленныеСтраховыеВзносыОбороты.СуммаОборот";
			
		ВозвращаемыеДанные.Вставить("Взносы", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции

Процедура ВывестиСотрудникаРасчетныйЛисток(СтрокиГоловныхСотрудников, ДокументРезультатПромежуточный, ДокументРезультатСтраница, Макет, СоответствиеПользовательскихПолей, ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	НастройкиВывода = НастройкиВыводаРасчетногоЛистка();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	СтрокаПервогоГоловногоСотрудника = СтрокиГоловныхСотрудников[0];
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0].Строки[0];
	Иначе
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0];
	КонецЕсли;
	
	СтрокаДанныхПоНДФЛ = Неопределено;
	
	ВсегоВзносов = 0;
	Если НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВФСС = Истина Тогда
		
		Если ГруппироватьПоИсточникамФинансирования Тогда
			
			Организации = Новый Массив;
			Для каждого СтрокаСтатьиФинансирования Из СтрокиГоловныхСотрудников Цикл
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Организации, ОбщегоНазначения.ВыгрузитьКолонку(СтрокаСтатьиФинансирования.Строки, "Организация", Истина), Истина);
			КонецЦикла;
			
		Иначе
			Организации = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиГоловныхСотрудников, "Организация", Истина);
		КонецЕсли;
		
		Для каждого Организация Из Организации Цикл
			
			СтрокиДанныхПоВзносам = ДанныеПоНДФЛИВзносам.Взносы.НайтиСтроки(Новый Структура("ФизическоеЛицо,Организация", СтрокаШапки.СотрудникФизическоеЛицо, Организация));
			Если СтрокиДанныхПоВзносам.Количество() > 0 Тогда
				
				СтрокаДанныхПоВзносам = СтрокиДанныхПоВзносам[0];
				ВсегоВзносов = СтрокаДанныхПоВзносам.Сумма;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РазделительЛистков = Новый ТабличныйДокумент;
	ВывестиОбластиСтроки(РазделительЛистков, Макет, "РазделительЛистков", НастройкиВывода);
	
	#Область ВыводШапки
	
	ПараметрыШапки = Новый Структура("Месяц,СотрудникФизическоеЛицоФИО,СотрудникКод,КВыплате");
	ЗаполнитьЗначенияСвойств(ПараметрыШапки, СтрокаШапки);
	
	ПараметрыШапки.Месяц = ВРег(Формат(СтрокаШапки.МесяцНачисления, НСтр("ru=""Л=ru_RU; ДФ='ММММ гггг'"";uk=""Л=uk_UA; ДФ='ММММ гггг'""")));
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "Шапка", НастройкиВывода, ПараметрыШапки);
	
	Если НастройкиВывода.ВыводитьСуммуНачисленнойЗарплатыВРазделеКВыплате = Истина Тогда
		
		КВыплате = 0;
		Для каждого СтрокаСотрудника Из СтрокиГоловныхСотрудников Цикл
			КВыплате = КВыплате + СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("КВыплате")];
		КонецЦикла;
		
		ПараметрыШапки.КВыплате = КВыплате;
		ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "Шапка", НастройкиВывода, ПараметрыШапки);
		НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено));
		
	Иначе
		НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено));
	КонецЕсли;
	
	#КонецОбласти
	
	
	#Область ВыводРабочегоМеста
	
	ПараметрыРабочегоМеста = Новый Структура("Организация,Подразделение,Должность,РазрядКатегория,Оклад");
	ПараметрыРабочегоМеста.Организация = СтрокаШапки.Организация;
	
	Если ЗначениеЗаполнено(СтрокаШапки.ПодразделениеГоловногоСотрудникаНаКонецПериода) Тогда
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений Тогда
			ПараметрыРабочегоМеста.Подразделение = СтрокаШапки.ПодразделениеГоловногоСотрудникаНаКонецПериода.ПолноеНаименование();
		Иначе
			ПараметрыРабочегоМеста.Подразделение = СтрокаШапки.ПодразделениеГоловногоСотрудникаНаКонецПериода;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПараметрыРабочегоМеста.Должность = СтрокаШапки.ДолжностьГоловногоСотрудникаНаКонецПериода;
	
	Если СтрокаПервогоГоловногоСотрудника.Владелец().Колонки.Найти("РазрядКатегорияаНаКонецПериода") <> Неопределено
		И ЗначениеЗаполнено(СтрокаПервогоГоловногоСотрудника.РазрядКатегорияГоловногоСотрудникаНаКонецПериода) Тогда
		
		ПараметрыРабочегоМеста.РазрядКатегория = ", " + СтрокаПервогоГоловногоСотрудника.РазрядКатегорияГоловногоСотрудникаНаКонецПериода;
		
	КонецЕсли; 
	
	ПараметрыРабочегоМеста.Оклад = СтрокаШапки.ТарифнаяСтавкаНаКонецПериода;
	
	ВывестиОбластиСтроки(ДокументРезультат, Макет, "РабочееМесто", НастройкиВывода, ПараметрыРабочегоМеста);
	
	// Объединение ячеек для поля Организация
	НастроитьОбъединение(ДокументРезультат, 5, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) - 4, ДокументРезультат.ВысотаТаблицы - 1);
	
	// Объединение ячеек для поля Подразделение
	НастроитьОбъединение(ДокументРезультат, 5, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) - 4);
	
	// Объединение ячеек для поля Должность
	НастроитьОбъединение(ДокументРезультат, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + 5,
		ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено) - 4, ДокументРезультат.ВысотаТаблицы - 1);
	
	#КонецОбласти
	
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		ИтогиПоГруппам = ВывестиГруппировкиПоСтатьямФинансирования(ДокументРезультат, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей);
	Иначе
		ИтогиПоГруппам = ВывестиТелоРасчетногоЛистка(ДокументРезультат, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей);
	КонецЕсли;
	
	// Взаимные задолженности взаиморасчетов
	ВывестиИтогиВзаиморасчетов(ДокументРезультат, Макет, НастройкиВывода, ИтогиПоГруппам);
	
	// Остатки взаиморасчетов по НДФЛ
	Если СтрокаДанныхПоНДФЛ <> Неопределено
		И (СтрокаДанныхПоНДФЛ.СуммаДолгНаНачалоПериодаНДФЛ <> 0
			Или СтрокаДанныхПоНДФЛ.СуммаДолгНаКонецПериодаНДФЛ <> 0) Тогда
			
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ВТомЧислеНДФЛ", НастройкиВывода, СтрокаДанныхПоНДФЛ);
		
		НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено, "СуммаНачислено"));
		НастроитьОбъединение(ДокументРезультат, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + 1,
			ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено, "СуммаУдержаноВыплачено"));
	
	КонецЕсли; 
		
	// Вычеты НДФЛ, авансовые платежи
	Если НастройкиВывода.ВыводитьОсобенностиРасчетаНДФЛ = Истина И СтрокаДанныхПоНДФЛ <> Неопределено
		Или НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВФСС = Истина И ВсегоВзносов <> 0 Тогда
		
		ТекстСекции = "";
		
		Если НастройкиВывода.ВыводитьИнформациюОНачисленныхВзносахВФСС = Истина Тогда
			
			Если ВсегоВзносов <> 0 Тогда
				
				ТекстСекции = ТекстСекции
					+ СтрокаСНепереносимымиПробелами(НСтр("ru='Страховые взносы в ФСС';uk='Страхові внески до ФСС'") + ": " + Формат(ВсегоВзносов, "ЧДЦ=2; ЧН="));
				
			КонецЕсли; 
			
		КонецЕсли;
		
	
		Если Не ПустаяСтрока(ТекстСекции) Тогда
			ВывестиОбластиСтроки(ДокументРезультат, Макет, "ПодвалТаблицы", НастройкиВывода);
		КонецЕсли; 
		
		ВывестиОбластиТекстовуюОбласть(ДокументРезультат, Макет, НастройкиВывода, СокрЛП(ТекстСекции));
		
	КонецЕсли;
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(РазделительЛистков);
	ВыводимыеОбласти.Добавить(ДокументРезультат);
	
	Если ДокументРезультатСтраница.ВысотаТаблицы = 0 Тогда
		ВыводимыеОбласти.Удалить(0);
	ИначеЕсли НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультатСтраница, ВыводимыеОбласти) Тогда
		
		ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
		ДокументРезультатПромежуточный.Вывести(ДокументРезультатСтраница);
		
		ДокументРезультатСтраница = Новый ТабличныйДокумент;
		ВыводимыеОбласти.Удалить(0);
		
	КонецЕсли;
	
	Для каждого ВыводимаяОбласть Из ВыводимыеОбласти Цикл
		ДокументРезультатСтраница.Вывести(ВыводимаяОбласть);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСотрудникаРасчетныйЛистокПоРабочимМестам(СтрокиГоловныхСотрудников, ДокументРезультатПромежуточный, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛИВзносам, ГруппироватьПоИсточникамФинансирования)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	СтрокаПервогоГоловногоСотрудника = СтрокиГоловныхСотрудников;
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0].Строки[0];
	Иначе
		СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0];
	КонецЕсли;
	
	Макеты.Шапка1.Параметры.Заполнить(СтрокаШапки);
	Макеты.Шапка1.Параметры.ПериодПредставление = Формат(СтрокаШапки.МесяцНачисления, НСтр("ru=""Л=ru_RU; ДФ='ММММ гггг'"";uk=""Л=uk_UA; ДФ='ММММ гггг'"""));
	
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка1, СтрокаШапки, СоответствиеПользовательскихПолей);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка1, СтрокаПервогоГоловногоСотрудника, СоответствиеПользовательскихПолей, "КВыплате");

	Если СтрокаПервогоГоловногоСотрудника.Владелец().Колонки.Найти("РазрядКатегорияГоловногоСотрудникаНаКонецПериода") <> Неопределено
		И ЗначениеЗаполнено(СтрокаПервогоГоловногоСотрудника.РазрядКатегорияГоловногоСотрудникаНаКонецПериода) Тогда
		Макеты.Шапка1.Параметры.РазрядКатегорияСотрудника = ", " + СтрокаПервогоГоловногоСотрудника.РазрядКатегорияГоловногоСотрудникаНаКонецПериода;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Макеты.Шапка1.Параметры.КВыплате) ИЛИ Макеты.Шапка1.Параметры.КВыплате < 0 Тогда
		Макеты.Шапка1.Параметры.КВыплате = 0;
	КонецЕсли;
	
	СтрокаДанныхПоНДФЛ = ДанныеПоНДФЛИВзносам.НДФЛ.Найти(СтрокаШапки.СотрудникФизическоеЛицо, "ФизическоеЛицо");
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Шапка1.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли; 
	
	Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода) Тогда
		Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода = Макеты.Шапка1.Параметры.ПодразделениеГоловногоСотрудникаНаКонецПериода.ПолноеНаименование();
	КонецЕсли; 
	
	ДокументРезультат.Вывести(Макеты.Шапка1);
	
	
	ДокументРезультат.Вывести(Макеты.Шапка2);
	
	Если ГруппироватьПоИсточникамФинансирования Тогда
		ИтогиПоГруппам = ВывестиГруппировкиПоСтатьямФинансированияПоРабочимМестам(ДокументРезультат, СтрокиГоловныхСотрудников,  Макеты, СоответствиеПользовательскихПолей);
	Иначе
		ИтогиПоГруппам = ВывестиТелоРасчетногоЛисткаПоРабочимМестам(ДокументРезультат, СтрокиГоловныхСотрудников, Макеты, СоответствиеПользовательскихПолей);
	КонецЕсли;
	
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Сальдо.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца) И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца';uk='Борг за підприємством на кінець місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца;
	ИначеЕсли ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаКонецМесяца) И ИтогиПоГруппам.СуммаДолгаНаКонецМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца';uk='Борг за працівником на кінець місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = -ИтогиПоГруппам.СуммаДолгаНаКонецМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца';uk='Борг за підприємством на кінець місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца) И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца';uk='Борг за підприємством на початок місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца;
	ИначеЕсли ЗначениеЗаполнено(ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца) И ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца';uk='Борг за працівником на початок місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = -ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца';uk='Борг за підприємством на початок місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = "";
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Сальдо);
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультатПромежуточный, ДокументРезультат) Тогда
		ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ДокументРезультатПромежуточный.Вывести(ДокументРезультат);
	
КонецПроцедуры

Функция ВывестиГруппировкиПоСтатьямФинансирования(ДокументРезультат, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = Новый Структура("СуммаДолгаНаНачалоМесяца,СуммаДолгаНаКонецМесяца", 0, 0);
	
	// Сбор сведений по всем рабочим местам
	СтатьиФинансирования = Новый Массив;
	СтрокиПоСтатьямФинансирования = Новый Соответствие;
	
	Для каждого СтрокаСотрудника Из СтрокиГоловныхСотрудников Цикл
		
		Для каждого СтрокаСтатьи Из СтрокаСотрудника.Строки Цикл
			
			СтрокиПоСтатьям = СтрокиПоСтатьямФинансирования.Получить(СтрокаСтатьи.СтатьяФинансирования);
			Если СтрокиПоСтатьям = Неопределено Тогда
				СтатьиФинансирования.Добавить(СтрокаСтатьи.СтатьяФинансирования);
				СтрокиПоСтатьям = Новый Массив;
			КонецЕсли;
			
			СтрокиПоСтатьям.Добавить(СтрокаСтатьи);
			СтрокиПоСтатьямФинансирования.Вставить(СтрокаСтатьи.СтатьяФинансирования, СтрокиПоСтатьям);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтатьяФинансирования Из СтатьиФинансирования Цикл
		
		СтрокиПоСтатьям = СтрокиПоСтатьямФинансирования.Получить(СтатьяФинансирования);
		
		Область = Макет.ПолучитьОбласть("СтатьяФинансирования");
		
		Если ЗначениеЗаполнено(СтатьяФинансирования) Тогда
			
			Область.Параметры.СтатьяФинансирования =
				?(ЗначениеЗаполнено(СтрокиПоСтатьям[0].СтатьяФинансированияКод), "(" + СтрокиПоСтатьям[0].СтатьяФинансированияКод + ")", "")
				+ ?(ЗначениеЗаполнено(СтрокиПоСтатьям[0].СтатьяФинансированияНаименование) , " " + СтрокиПоСтатьям[0].СтатьяФинансированияНаименование, "");
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(Область);
		
		ИтогиПоСтатье = ВывестиТелоРасчетногоЛистка(ДокументРезультат, Макет, НастройкиВывода, СтрокиПоСтатьям, СоответствиеПользовательскихПолей);
		
		ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца + ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
		ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца + ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
		
		ВывестиИтогиВзаиморасчетов(ДокументРезультат, Макет, НастройкиВывода, ИтогиПоГруппам);
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("СтатьяФинансирования");
	Область.Параметры.СтатьяФинансирования = НСтр("ru='Итого по всем статьям финансирования';uk='Разом за всіма статтями фінансування'");
	ДокументРезультат.Вывести(Область);
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция ВывестиГруппировкиПоСтатьямФинансированияПоРабочимМестам(ДокументРезультат, СтрокиГоловныхСотрудников,  Макеты, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = Новый Структура("СуммаДолгаНаНачалоМесяца,СуммаДолгаНаКонецМесяца", 0, 0);
	
	СтатьиФинансирования = Новый Массив;
	СтрокиПоСтатьямФинансирования = Новый Соответствие;
	
	Для каждого СтрокаСотрудника Из СтрокиГоловныхСотрудников.Строки Цикл
		
		СтрокиПоСтатьям = СтрокиПоСтатьямФинансирования.Получить(СтрокаСотрудника.СтатьяФинансирования);
		Если СтрокиПоСтатьям = Неопределено Тогда
			СтатьиФинансирования.Добавить(СтрокаСотрудника.СтатьяФинансирования);
			СтрокиПоСтатьям = Новый Массив;
		КонецЕсли; 
		СтрокиПоСтатьям.Добавить(СтрокаСотрудника);
		
		СтрокиПоСтатьямФинансирования.Вставить(СтрокаСотрудника.СтатьяФинансирования, СтрокиПоСтатьям);
		
	КонецЦикла;
	
	Для каждого СтатьяФинансирования Из СтатьиФинансирования Цикл
		
		СтрокиПоСтатьям = СтрокиПоСтатьямФинансирования.Получить(СтатьяФинансирования);
		Для каждого СтрокаСтатьи Из СтрокиПоСтатьям Цикл
			
			Макеты.СтатьяФинансирования.Параметры.Заполнить(СтрокаСтатьи);
			
			Если ЗначениеЗаполнено(СтатьяФинансирования) Тогда
				
				Макеты.СтатьяФинансирования.Параметры.СтатьяФинансирования =
					?(ЗначениеЗаполнено(СтрокиПоСтатьям[0].СтатьяФинансированияКод), "(" + СтрокиПоСтатьям[0].СтатьяФинансированияКод + ")", "")
					+ ?(ЗначениеЗаполнено(СтрокиПоСтатьям[0].СтатьяФинансированияНаименование) , " " + СтрокиПоСтатьям[0].СтатьяФинансированияНаименование, "");
				
			КонецЕсли;
			
			ДокументРезультат.Вывести(Макеты.СтатьяФинансирования);
			
			ИтогиПоСтатье = ВывестиТелоРасчетногоЛисткаПоРабочимМестам(ДокументРезультат, СтрокаСтатьи, Макеты, СоответствиеПользовательскихПолей);
			
			ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца + ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
			ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца + ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
			
			Если ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаКонецМесяца) И ИтогиПоСтатье.СуммаДолгаНаКонецМесяца >= 0 Тогда
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца';uk='Борг за підприємством на кінець місяця'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
			ИначеЕсли ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаКонецМесяца) И ИтогиПоСтатье.СуммаДолгаНаКонецМесяца < 0 Тогда
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца';uk='Борг за працівником на кінець місяця'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = -ИтогиПоСтатье.СуммаДолгаНаКонецМесяца;
			Иначе
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца';uk='Борг за підприємством на кінець місяця'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаКонецПериода = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца) И ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца >= 0 Тогда
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца';uk='Борг за підприємством на початок місяця'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
			ИначеЕсли ЗначениеЗаполнено(ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца) И ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца < 0 Тогда
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца';uk='Борг за працівником на початок місяця'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = -ИтогиПоСтатье.СуммаДолгаНаНачалоМесяца;
			Иначе
				Макеты.ИтогСтатьяФинансирования.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца';uk='Борг за підприємством на початок місяця'");
				Макеты.ИтогСтатьяФинансирования.Параметры.СуммаДолгНаНачалоПериода = "";
			КонецЕсли;
			
			ДокументРезультат.Вывести(Макеты.ИтогСтатьяФинансирования);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Макеты.СтатьяФинансирования.Параметры.СтатьяФинансирования =
		НСтр("ru='Итого по всем статьям финансирования';uk='Разом за всіма статтями фінансування'");
	ДокументРезультат.Вывести(Макеты.СтатьяФинансирования);
		
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция ВывестиТелоРасчетногоЛистка(ДокументРезультат, Макет, НастройкиВывода, СтрокиГоловныхСотрудников, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = Новый Структура;
	ИтогиПоГруппам.Вставить("СуммаДолгаНаНачалоМесяца", 0);
	ИтогиПоГруппам.Вставить("СуммаДолгаНаКонецМесяца", 0);
	
	#Область СборСведений
	
	ИтогиРазделов = Новый Структура;
	ИтогиРазделов.Вставить("Начислено", 0);
	ИтогиРазделов.Вставить("Удержано", 0);
	ИтогиРазделов.Вставить("Выплачено", 0);
	ИтогиРазделов.Вставить("НачисленоВНатуральнойФорме", 0);
	
	ИмяПоляСуммаНачислено = СоответствиеПользовательскихПолей.Получить("СуммаНачислено");
	ИмяПоляСуммаНачисленоВНатуральнойФорме = СоответствиеПользовательскихПолей.Получить("СуммаНачисленоВНатуральнойФорме");
	ИмяПоляСуммаУдержано = СоответствиеПользовательскихПолей.Получить("СуммаУдержано");
	ИмяПоляСуммаСправочно = СоответствиеПользовательскихПолей.Получить("СуммаНачислено");
	ИмяПоляСуммаЛьготы = СоответствиеПользовательскихПолей.Получить("СуммаНачислено");
	ИмяПоляСуммаВыплачено = СоответствиеПользовательскихПолей.Получить("СуммаУдержано");
	
	КоллекцияНачислено = Новый ТаблицаЗначений;
	КоллекцияНачислено.Колонки.Добавить("ВидРасчета");
	КоллекцияНачислено.Колонки.Добавить("ПериодДействия");
	КоллекцияНачислено.Колонки.Добавить("ОтработаноДней");
	КоллекцияНачислено.Колонки.Добавить("ОтработаноЧасов");
	КоллекцияНачислено.Колонки.Добавить("ОплаченоДней");
	КоллекцияНачислено.Колонки.Добавить("ОплаченоЧасов");
	КоллекцияНачислено.Колонки.Добавить("Сумма");
	КоллекцияНачислено.Колонки.Добавить("Показатель");
	КоллекцияНачислено.Колонки.Добавить("Значение");
	
	КоллекцияУдержано = Новый ТаблицаЗначений;
	КоллекцияУдержано.Колонки.Добавить("ВидРасчета");
	КоллекцияУдержано.Колонки.Добавить("ПериодДействия");
	КоллекцияУдержано.Колонки.Добавить("Сумма");
	
	КоллекцияВыплачено = Новый ТаблицаЗначений;
	КоллекцияВыплачено.Колонки.Добавить("ВидРасчета");
	КоллекцияВыплачено.Колонки.Добавить("ПериодДействия");
	КоллекцияВыплачено.Колонки.Добавить("Сумма");
	
	КоллекцииРазделов = Новый Структура;
	КоллекцииРазделов.Вставить("Начислено", Новый Массив);
	КоллекцииРазделов.Вставить("Удержано", 	КоллекцияУдержано);
	КоллекцииРазделов.Вставить("Выплачено", КоллекцияВыплачено);
	КоллекцииРазделов.Вставить("Льготы", 	Новый Массив);
	КоллекцииРазделов.Вставить("Справочно", Новый Массив);
	
	ИзвестныеСтрокиУдержаний = Новый Соответствие;
	ИзвестныеСтрокиСправочно = Новый Соответствие;
	ИзвестныеСтрокиВыплат = Новый Соответствие;
	ИзвестныеСтрокиЛьготы = Новый Соответствие;
	
	Для каждого СтрокаГоловногоСотрудника Из СтрокиГоловныхСотрудников Цикл
		
		Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
			
			// Начислено
			РабочееМесто = Новый Структура("СтрокаСотрудника,СтрокиНачислений", СтрокаСотрудника, КоллекцияНачислено.Скопировать());
			
			МинимальныйПериодПерерасчетов = Неопределено;
			МаксимальныйПериодПерерасчетов = Неопределено;
			
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаНачислений Из СтрокаГруппы.Строки Цикл
					
					СтрокаКоллекции = РабочееМесто.СтрокиНачислений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаНачислений);
					
					Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
						
						Если СтрокаНачислений.МесяцНачисления = СтрокаНачислений.ПериодДействия
							Или Не ЗначениеЗаполнено(СтрокаНачислений.ПериодДействия)
								И ЗначениеЗаполнено(СтрокаНачислений.ДатаНачала)
								И СтрокаНачислений.МесяцНачисления = НачалоМесяца(СтрокаНачислений.ДатаНачала) Тогда
							
							Если ЗначениеЗаполнено(СтрокаНачислений.ДатаНачала) И ЗначениеЗаполнено(СтрокаНачислений.ДатаОкончания) Тогда
								
								Если СтрокаНачислений.ДатаНачала <> СтрокаНачислений.ПериодДействия
									Или СтрокаНачислений.ДатаОкончания <> НачалоДня(КонецМесяца(СтрокаНачислений.ПериодДействия)) Тогда
									
									СтрокаКоллекции.ПериодДействия = Формат(СтрокаНачислений.ДатаНачала, НСтр("ru=""Л=ru_RU; ДФ='дд.ММ'"";uk=""Л=uk_UA; ДФ='дд.ММ'""")) + "-"
										+ Формат(СтрокаНачислений.ДатаОкончания, НСтр("ru=""Л=ru_RU; ДФ='дд.ММ'"";uk=""Л=uk_UA; ДФ='дд.ММ'"""));
									
								КонецЕсли;
									
							КонецЕсли; 
							
						Иначе
							
							ПериодДействия = ?(ЗначениеЗаполнено(СтрокаНачислений.ПериодДействия), СтрокаНачислений.ПериодДействия, НачалоМесяца(СтрокаНачислений.ДатаНачала));
							Если МинимальныйПериодПерерасчетов = Неопределено
								Или МинимальныйПериодПерерасчетов > ПериодДействия Тогда
								
								МинимальныйПериодПерерасчетов = ПериодДействия;
								
							КонецЕсли;
							
							Если МаксимальныйПериодПерерасчетов = Неопределено
								Или МаксимальныйПериодПерерасчетов < ПериодДействия Тогда
								
								МаксимальныйПериодПерерасчетов = ПериодДействия;
								
							КонецЕсли;
							
							СтрокаКоллекции.ПериодДействия = Неопределено;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Истина Тогда
						
						СтрокаКоллекции.ОплаченоДней = 0;
						СтрокаКоллекции.ОплаченоЧасов = 0;
						
						УчетВремениВЧасах = СтрокаНачислений.ВремяВЧасах = Истина;
						
						Если УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаНачислений.ОплаченоЧасов) И СтрокаНачислений.ОплаченоЧасов > 0 Тогда
							СтрокаКоллекции.ОплаченоЧасов = СтрокаНачислений.ОплаченоЧасов;
						ИначеЕсли НЕ УчетВремениВЧасах И ЗначениеЗаполнено(СтрокаНачислений.ОплаченоДней) И СтрокаНачислений.ОплаченоДней > 0 Тогда
							СтрокаКоллекции.ОплаченоДней = СтрокаНачислений.ОплаченоДней;
						КонецЕсли;
						
					КонецЕсли;
					
					СтрокаКоллекции.Сумма = СтрокаНачислений[ИмяПоляСуммаНачислено];
					
					ИтогиРазделов.Начислено = ИтогиРазделов.Начислено + СтрокаНачислений[ИмяПоляСуммаНачислено];
					ИтогиРазделов.НачисленоВНатуральнойФорме = ИтогиРазделов.НачисленоВНатуральнойФорме + СтрокаНачислений[ИмяПоляСуммаНачисленоВНатуральнойФорме];					
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если РабочееМесто.СтрокиНачислений.Количество() > 0 Тогда
				
				СворачиваемыеКолонки = "ВидРасчета";
				СуммируемыеКолонки = "Сумма";
				
				Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",ПериодДействия";
				КонецЕсли;
				
				Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Истина Тогда
					СуммируемыеКолонки = СуммируемыеКолонки + ",ОтработаноДней,ОтработаноЧасов,ОплаченоДней,ОплаченоЧасов";
				КонецЕсли; 
				
				Если НастройкиВывода.ВыводитьПоказателиНачислений = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",Показатель,Значение";
				КонецЕсли; 
				
				РабочееМесто.СтрокиНачислений.Свернуть(СворачиваемыеКолонки, СуммируемыеКолонки);
				
				Если НастройкиВывода.ВыводитьПериодыНачислений = Истина
					И МинимальныйПериодПерерасчетов <> Неопределено Тогда
					
					Если МинимальныйПериодПерерасчетов = МаксимальныйПериодПерерасчетов Тогда
						ПредставлениеПериода = Формат(МинимальныйПериодПерерасчетов, НСтр("ru=""Л=ru_RU; ДФ='МММ гггг'"";uk=""Л=uk_UA; ДФ='МММ гггг'"""));
					Иначе
						ПредставлениеПериода = Формат(МинимальныйПериодПерерасчетов, НСтр("ru=""Л=ru_RU; ДФ='МММ'"";uk=""Л=uk_UA; ДФ='МММ'""")) + "-" + Формат(МаксимальныйПериодПерерасчетов, НСтр("ru=""Л=ru_RU; ДФ='МММ'"";uk=""Л=uk_UA; ДФ='МММ'"""));
					КонецЕсли;
					
					СтрокиПерерасчетов = РабочееМесто.СтрокиНачислений.НайтиСтроки(Новый Структура("ПериодДействия", Неопределено));
					Для каждого СтрокаПерерасчетов Из СтрокиПерерасчетов Цикл
						
						УдалитьСтроку = Истина;
						Для каждого ИмяКолонки Из СтрРазделить(СуммируемыеКолонки, ",") Цикл
							Если СтрокаПерерасчетов[ИмяКолонки] <> 0 Тогда
								УдалитьСтроку = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если УдалитьСтроку Тогда
							РабочееМесто.СтрокиНачислений.Удалить(СтрокаПерерасчетов);
						Иначе
							СтрокаПерерасчетов.ПериодДействия = ПредставлениеПериода;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли; 
				
				КоллекцииРазделов.Начислено.Добавить(РабочееМесто);
				
			КонецЕсли; 
			
			// Удержано
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаУдержаний Из СтрокаГруппы.Строки Цикл
					
					СтрокаКоллекции = ИзвестныеСтрокиУдержаний.Получить(СтрокаУдержаний.ВидРасчета);
					Если СтрокаКоллекции = Неопределено Тогда
						СтрокаКоллекции = КоллекцииРазделов.Удержано.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаКоллекции, СтрокаУдержаний);
						СтрокаКоллекции.Сумма = СтрокаУдержаний[ИмяПоляСуммаУдержано];
						ИзвестныеСтрокиУдержаний.Вставить(СтрокаКоллекции.ВидРасчета, СтрокаКоллекции);
					Иначе
						СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаУдержаний[ИмяПоляСуммаУдержано];
					КонецЕсли;
					
					ИтогиРазделов.Удержано = ИтогиРазделов.Удержано + СтрокаУдержаний[ИмяПоляСуммаУдержано];
					
				КонецЦикла;
				
				СворачиваемыеКолонки = "ВидРасчета";
				Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",ПериодДействия";
				КонецЕсли;
				КоллекцииРазделов.Удержано.Свернуть(СворачиваемыеКолонки, "Сумма");
				
			КонецЕсли;
			
			// Выплачено
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				
				Для каждого СтрокаВыплачено Из СтрокаГруппы.Строки Цикл
					
					Для каждого СтрокаСРегистратором Из СтрокаВыплачено.Строки Цикл
						
						СтрокаКоллекции = ИзвестныеСтрокиВыплат.Получить(СтрокаСРегистратором.Регистратор);
						Если СтрокаКоллекции = Неопределено Тогда
							
							СтрокаКоллекции = КоллекцииРазделов.Выплачено.Добавить();
							СтрокаКоллекции.ВидРасчета = Строка(СтрокаСРегистратором.ВидРасчета);
							
							Если НастройкиВывода.ДетализироватьВыплатыПоВедомостям = Истина 
								И ЗначениеЗаполнено(СтрокаСРегистратором.Регистратор) Тогда
								
								УстановитьПривилегированныйРежим(Истина);
								СвойстваРегистратора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаСРегистратором.Регистратор, "Номер,Дата");
								УстановитьПривилегированныйРежим(Ложь);
								
								СтрокаКоллекции.ВидРасчета = СтрокаКоллекции.ВидРасчета + " "
									+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СвойстваРегистратора.Номер, Истина, Истина)	+ " "
								    + НСтр("ru='от';uk='від'") + " " + Формат(СвойстваРегистратора.Дата, НСтр("ru=""Л=ru_RU; ДФ='dd.MM.yy'"";uk=""Л=uk_UA; ДФ='dd.MM.yy'"""));
								
							КонецЕсли;
							
							Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
								СтрокаКоллекции.ПериодДействия = СтрокаСРегистратором.ПериодДействия;
							КонецЕсли;
							
							СтрокаКоллекции.Сумма = СтрокаСРегистратором[ИмяПоляСуммаВыплачено];
							
							ИзвестныеСтрокиВыплат.Вставить(СтрокаСРегистратором.Регистратор, СтрокаКоллекции);
							
						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаСРегистратором[ИмяПоляСуммаВыплачено];
						КонецЕсли;
						
					КонецЦикла;
					
					ИтогиРазделов.Выплачено = ИтогиРазделов.Выплачено + СтрокаВыплачено[ИмяПоляСуммаВыплачено];
					
				КонецЦикла;
				
				СворачиваемыеКолонки = "ВидРасчета";
				Если НастройкиВывода.ВыводитьПериодыНачислений = Истина Тогда
					СворачиваемыеКолонки = СворачиваемыеКолонки + ",ПериодДействия";
				КонецЕсли;
				КоллекцииРазделов.Выплачено.Свернуть(СворачиваемыеКолонки, "Сумма");
				
			КонецЕсли;
			
			// Льготы
			Если НастройкиВывода.ВыводитьИнформациюОЛьготах = Истина Тогда
				
				СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Льготы, "Группа");
				Если СтрокаГруппы <> Неопределено Тогда
					
					Для каждого СтрокаЛьготы Из СтрокаГруппы.Строки Цикл
						
						СтрокаКоллекции = ИзвестныеСтрокиЛьготы.Получить(СтрокаЛьготы.ВидРасчета);
						Если СтрокаКоллекции = Неопределено Тогда
							СтрокаКоллекции = Новый Структура("ВидРасчета,Сумма");
							СтрокаКоллекции.ВидРасчета = СтрокаЛьготы.ВидРасчета;
							СтрокаКоллекции.Сумма = СтрокаЛьготы[ИмяПоляСуммаЛьготы];
							КоллекцииРазделов.Льготы.Добавить(СтрокаКоллекции);
							ИзвестныеСтрокиЛьготы.Вставить(СтрокаЛьготы.ВидРасчета, СтрокаКоллекции);
						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаЛьготы[ИмяПоляСуммаЛьготы];
						КонецЕсли; 
						
					КонецЦикла;
				
				КонецЕсли;
			
			КонецЕсли; 
			
			// Справочно
			Если НастройкиВывода.ВыводитьСправочнуюИнформацию = Истина Тогда
				
				СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");

				Если СтрокаГруппы <> Неопределено Тогда
					
					Для каждого СтрокаСправочно Из СтрокаГруппы.Строки Цикл
						
						СтрокаКоллекции = ИзвестныеСтрокиСправочно.Получить(СтрокаСправочно.ВидРасчета);
						Если СтрокаКоллекции = Неопределено Тогда
							СтрокаКоллекции = Новый Структура("ВидРасчета,Сумма");
							СтрокаКоллекции.ВидРасчета = СтрокаСправочно.ВидРасчета;
							СтрокаКоллекции.Сумма = СтрокаСправочно[ИмяПоляСуммаСправочно];
							КоллекцииРазделов.Справочно.Добавить(СтрокаКоллекции);
							ИзвестныеСтрокиСправочно.Вставить(СтрокаСправочно.ВидРасчета, СтрокаКоллекции);
						Иначе
							СтрокаКоллекции.Сумма = СтрокаКоллекции.Сумма + СтрокаСправочно[ИмяПоляСуммаСправочно];
						КонецЕсли; 
						
					КонецЦикла;
				
				КонецЕсли;
				
			КонецЕсли; 
			
			// Начальное сальдо
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца + СтрокаГруппы.Сумма;
			КонецЕсли;
			
			// КонечноеСальдо
			СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
			Если СтрокаГруппы <> Неопределено Тогда
				ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = ИтогиПоГруппам.СуммаДолгаНаКонецМесяца + СтрокаГруппы.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьСтрокиСНулевойСуммой(КоллекцииРазделов.Выплачено);
	
	#КонецОбласти
	
	#Область ВыводТела
	
	СтрокНачислено = 0;
	Для каждого СтрокиРабочегоМеста Из КоллекцииРазделов.Начислено Цикл
		СтрокНачислено = СтрокНачислено + СтрокиРабочегоМеста.СтрокиНачислений.Количество() + 1;
	КонецЦикла;
	
	Если ИтогиРазделов.НачисленоВНатуральнойФорме <> 0 Тогда
		ЕстьИтогиПоНачисленоВНатуральнойФорме = Истина;
		СтрокНачислено = СтрокНачислено + 1;
	Иначе
		ЕстьИтогиПоНачисленоВНатуральнойФорме = Ложь;
	КонецЕсли; 
	
	КоличествоСтрокУдержано = КоллекцииРазделов.Удержано.Количество();
	КоличествоСтрокВыплачено = КоллекцииРазделов.Выплачено.Количество();
	СтрокУдержаноВыплачено = КоличествоСтрокУдержано + КоличествоСтрокВыплачено + 2;
	
	// Вывод шапки
	Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Истина Тогда
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ШапкаТаблицы", НастройкиВывода);
	Иначе
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ШапкаТаблицыНизкая", НастройкиВывода);
	КонецЕсли;
	
	// Вывод таблиц Начислено, Удержано, Выплачено
	
	СтрокВыведено = 0;
	НомерРабочегоМеста = 0;
	ИндексРабочегоМеста = 0;
	СтрокРабочегоМеста = 0;
	
	Пока СтрокВыведено < СтрокНачислено Или СтрокВыведено < СтрокУдержаноВыплачено Цикл
		
		ВывестиРасшифровку = Ложь;
		ПараметрыЗаполненияРасшифровки = Новый Структура("ВидРасчетаРасшифровка");
		
		// Вывод Начислено
		ПрисоединитьОбласть = Ложь;
		Если КоллекцииРазделов.Начислено.Количество() = 0 Тогда
			
			Если СтрокВыведено = 0 Тогда
				ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "ЗаголовокНачисленоУдержано", НастройкиВывода);
			Иначе
				ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "Строка", НастройкиВывода);
			КонецЕсли;
			
		ИначеЕсли ИндексРабочегоМеста < КоллекцииРазделов.Начислено.Количество() Тогда
			
			ПараметрыЗаполнения = Новый Структура("РабочееМесто,ВидРасчета,ПериодДействия,ОтработаноДней,ОтработаноЧасов,ОплаченныеДниЧасы,Сумма");
			
			РабочееМесто = КоллекцииРазделов.Начислено[ИндексРабочегоМеста];
			Если СтрокВыведено = 0 Или ЕстьИтогиПоНачисленоВНатуральнойФорме И СтрокВыведено = 1 Тогда
				
				Если СтрокВыведено = 0 Тогда
					ИмяОбластиСтроки = "ЗаголовокНачисленоУдержано";
					ИндексСтрокиНачислено = 0;
					ПараметрыЗаполнения.Сумма = ИтогиРазделов.Начислено;
				Иначе
					ИмяОбластиСтроки = "ЗаголовокНачисленоВНатуральнойФорме";
					ПараметрыЗаполнения.Сумма = ИтогиРазделов.НачисленоВНатуральнойФорме;
				КонецЕсли;
				
			Иначе
				
				Если ИндексСтрокиНачислено < 0 Тогда
					
					ИмяОбластиСтроки = "ЗаголовокРабочееМестоВыплачено";
					Если РабочееМесто.СтрокаСотрудника.Сотрудник <> РабочееМесто.СтрокаСотрудника.ГоловнойСотрудник Тогда
						ПараметрыЗаполнения.РабочееМесто = РабочееМесто.СтрокаСотрудника.СотрудникУточнениеНаименования;
					Иначе
						ПараметрыЗаполнения.РабочееМесто = 
							Строка(РабочееМесто.СтрокаСотрудника.ДолжностьНаКонецПериода)
							+ " (" + РабочееМесто.СтрокаСотрудника.ВидЗанятостиГоловногоСотрудникаНаКонецПериода + ")";
					КонецЕсли;
						
				Иначе
					
					ИмяОбластиСтроки = "Строка";
					Если ИндексСтрокиНачислено < РабочееМесто.СтрокиНачислений.Количество() Тогда
						
						СтрокаНачислений = РабочееМесто.СтрокиНачислений[ИндексСтрокиНачислено];
						ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, СтрокаНачислений);
						Если НастройкиВывода.ВыводитьПериодыНачислений = Истина 
							И ЗначениеЗаполнено(СтрокаНачислений.ПериодДействия) Тогда
							ПараметрыЗаполнения.ПериодДействия = Формат(СтрокаНачислений.ПериодДействия, НСтр("ru=""Л=ru_RU; ДФ='МММ гггг'"";uk=""Л=uk_UA; ДФ='МММ гггг'"""));
						КонецЕсли;	
						Если НастройкиВывода.ВыводитьПоказателиНачислений = Истина
							И ЗначениеЗаполнено(СтрокаНачислений.Показатель) Тогда
							
							ВывестиРасшифровку = Истина;
							ПараметрыЗаполненияРасшифровки.ВидРасчетаРасшифровка = Строка(СтрокаНачислений.Показатель) + ":  " + СтрокаНачислений.Значение;
							
						КонецЕсли; 
						
						Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя = Истина Тогда
							
							Если ЗначениеЗаполнено(СтрокаНачислений.ОплаченоДней) И СтрокаНачислений.ОплаченоДней > 0 Тогда
								ПараметрыЗаполнения.ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоДней, "ЧДЦ=2; ЧН=") + НСтр("ru=' дн.';uk=' дн.'");
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СтрокаНачислений.ОплаченоЧасов) И СтрокаНачислений.ОплаченоЧасов > 0 Тогда
								Если Не ПустаяСтрока(ПараметрыЗаполнения.ОплаченныеДниЧасы) Тогда
									ПараметрыЗаполнения.ОплаченныеДниЧасы = ПараметрыЗаполнения.ОплаченныеДниЧасы + " " + НСтр("ru='и';uk='і'") + " ";
								КонецЕсли; 
								ПараметрыЗаполнения.ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоЧасов, "ЧДЦ=2; ЧН=") + НСтр("ru=' чс.';uk=' год.'");
							КонецЕсли;
							
						КонецЕсли; 
						
					КонецЕсли; 
						
				КонецЕсли;
				
				ИндексСтрокиНачислено = ИндексСтрокиНачислено + 1;
				
				Если ИндексСтрокиНачислено >= РабочееМесто.СтрокиНачислений.Количество() Тогда
					ИндексРабочегоМеста = ИндексРабочегоМеста + 1;
					ИндексСтрокиНачислено = -1;
				КонецЕсли;
				
			КонецЕсли; 
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, ПараметрыЗаполнения);
			
		Иначе
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "Строка", НастройкиВывода);
			
		КонецЕсли;
		
		// Вывод Удержано, Выплачено
		Если СтрокВыведено <= СтрокУдержаноВыплачено Тогда
			
			ПараметрыЗаполнения = Новый Структура("ВидРасчета,ПериодДействия,Сумма");
			
			ИндексСтрокиУдержано = СтрокВыведено - 1;
			Если ИндексСтрокиУдержано < КоличествоСтрокУдержано Тогда
				
				Если ИндексСтрокиУдержано = -1 Тогда
					ИмяОбластиСтроки = "ЗаголовокНачисленоУдержано";
					ИмяОбластиРасшифровки = "ЗаголовокРасшифровка";
					ПараметрыЗаполнения.Сумма = ИтогиРазделов.Удержано;
				Иначе
					
					ИмяОбластиСтроки = "Строка";
					ИмяОбластиРасшифровки = "СтрокаРасшифровка";
					ПараметрыЗаполнения = КоллекцииРазделов.Удержано[ИндексСтрокиУдержано];
					Если НастройкиВывода.ВыводитьПериодыНачислений = Истина 
						И ЗначениеЗаполнено(КоллекцииРазделов.Удержано[ИндексСтрокиУдержано].ПериодДействия) Тогда
							ПараметрыЗаполнения.ПериодДействия = Формат(КоллекцииРазделов.Удержано[ИндексСтрокиУдержано].ПериодДействия, НСтр("ru=""Л=ru_RU; ДФ='МММ гггг'"";uk=""Л=uk_UA; ДФ='МММ гггг'"""));
					КонецЕсли;	
				КонецЕсли; 
				
			Иначе
				
				ИндексСтрокиВыплачено = СтрокВыведено - 2 - КоличествоСтрокУдержано;
				Если ИндексСтрокиВыплачено < КоличествоСтрокВыплачено Тогда
					
					Если ИндексСтрокиВыплачено = -1 Тогда
						ИмяОбластиСтроки = "ЗаголовокРабочееМестоВыплачено";
						ИмяОбластиРасшифровки = "ЗаголовокРасшифровка";
						ПараметрыЗаполнения.Сумма = ИтогиРазделов.Выплачено;
					Иначе
						
						ИмяОбластиСтроки = "Строка";
						ИмяОбластиРасшифровки = "СтрокаРасшифровка";
						ПараметрыЗаполнения = КоллекцииРазделов.Выплачено[ИндексСтрокиВыплачено];
						Если НастройкиВывода.ВыводитьПериодыНачислений = Истина
							И ЗначениеЗаполнено(КоллекцииРазделов.Выплачено[ИндексСтрокиВыплачено].ПериодДействия) Тогда
							ПараметрыЗаполнения.ПериодДействия = Формат(КоллекцииРазделов.Выплачено[ИндексСтрокиВыплачено].ПериодДействия, НСтр("ru=""Л=ru_RU; ДФ='МММ гггг'"";uk=""Л=uk_UA; ДФ='МММ гггг'"""));
						КонецЕсли;	
					КонецЕсли; 
					
				Иначе
					ИмяОбластиСтроки = "Строка";
					ИмяОбластиРасшифровки = "СтрокаРасшифровка";
				КонецЕсли; 
				
			КонецЕсли; 
			
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, ПараметрыЗаполнения);
			
		Иначе
			
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, "Строка", НастройкиВывода);
			
		КонецЕсли;
		
		Если ВывестиРасшифровку Тогда
			
			ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, "СтрокаРасшифровка", НастройкиВывода, ПараметрыЗаполненияРасшифровки);
			ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиРасшифровки, НастройкиВывода);
			
		КонецЕсли; 
		
		СтрокВыведено = СтрокВыведено + 1;
		
	КонецЦикла;
	
	ВывестиОбластиСтроки(ДокументРезультат, Макет, "ПодвалТаблицы", НастройкиВывода);
	
	// Льготы
	
	Если КоллекцииРазделов.Льготы.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("ШапкаЛьготы");
		ДокументРезультат.Вывести(Область);
		
		ВывестиТелоСправочнойИнформации(ДокументРезультат, Макет, КоллекцииРазделов.Льготы);
		
	КонецЕсли; 
	
	// Справочно
	
	Если КоллекцииРазделов.Справочно.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("ШапкаСправочно");
		ДокументРезультат.Вывести(Область);
		
		ВывестиТелоСправочнойИнформации(ДокументРезультат, Макет, КоллекцииРазделов.Справочно);
		
	КонецЕсли; 
	
	#КонецОбласти
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция ВывестиТелоРасчетногоЛисткаПоРабочимМестам(ДокументРезультат, СтрокаГоловногоСотрудника, Макеты, СоответствиеПользовательскихПолей)
	
	ИтогиПоГруппам = Новый Структура("СуммаДолгаНаНачалоМесяца,СуммаДолгаНаКонецМесяца", 0, 0);
	
	СуммаНачисленоВНатуральнойФорме = 0;
	СуммаНачисления = 0;
	СуммаУдержания = 0;
	
	КоллекцияРабочихМест = Новый Массив;
	СтрокиУдержаний = Новый Соответствие;
	ИмяПоляСуммаУдержано = СоответствиеПользовательскихПолей.Получить("СуммаУдержано");
	
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл
		
		ЭлементКоллекции = Новый Структура("СтрокаСотрудника,СтрокиНачислений,СтрокиУдержаний", СтрокаСотрудника, Новый Массив, Новый Массив);
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			
			Для каждого СтрокаНачислений Из СтрокаГруппы.Строки Цикл
				ЭлементКоллекции.СтрокиНачислений.Добавить(СтрокаНачислений);
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			
			Для каждого СтрокаУдержаний Из СтрокаГруппы.Строки Цикл
				
				СтрокаКоллекции = СтрокиУдержаний.Получить(СтрокаУдержаний.ВидРасчета);
				Если СтрокаКоллекции = Неопределено Тогда
					СтрокаКоллекции = СтрокаУдержаний;
				Иначе
					СтрокаКоллекции[ИмяПоляСуммаУдержано] = СтрокаКоллекции[ИмяПоляСуммаУдержано] + СтрокаУдержаний[ИмяПоляСуммаУдержано];
				КонецЕсли;
				СтрокиУдержаний.Вставить(СтрокаКоллекции.ВидРасчета, СтрокаКоллекции);
				
			КонецЦикла;
			
		КонецЕсли;
		
		КоллекцияРабочихМест.Добавить(ЭлементКоллекции);
		
	КонецЦикла;
	
	Если СтрокиУдержаний.Количество() > 0 Тогда
		КоллекцияРабочихМест[0].СтрокиУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиУдержаний, "Значение");
	КонецЕсли; 
	
	ШапкаВыводилась = Ложь;
	Для каждого РабочееМесто Из КоллекцияРабочихМест Цикл
		
		СтрокаСотрудника = РабочееМесто.СтрокаСотрудника;
		СтрокиНачислений = РабочееМесто.СтрокиНачислений;
		СтрокиУдержаний = РабочееМесто.СтрокиУдержаний;
		
		Если СтрокиНачислений.Количество() > 0 ИЛИ СтрокиУдержаний.Количество() > 0 Тогда
			
			Если НЕ ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.НачисленоУдержано);
				ШапкаВыводилась = Истина;
			КонецЕсли; 
			
			Если СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
				ЗаполнитьЗначенияСвойств(Макеты.Подработка.Параметры, СтрокаСотрудника);
				ДокументРезультат.Вывести(Макеты.Подработка);
			КонецЕсли; 
		
			НомерСтроки = 0;
			Пока НомерСтроки < СтрокиНачислений.Количество() ИЛИ НомерСтроки < СтрокиУдержаний.Количество() Цикл
				
				Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
					Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
				КонецЦикла;
				
				Если НомерСтроки < СтрокиНачислений.Количество() Тогда
					
					СтрокаНачислений = СтрокиНачислений[НомерСтроки];
					Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = Формат(СтрокаНачислений.ПериодДействия,НСтр("ru=""Л=ru_RU; ДФ='МММ.гггг'"";uk=""Л=uk_UA; ДФ='МММ.гггг'"""));
					
					УчетВремениВЧасах = СтрокаНачислений.ВремяВЧасах = Истина;
					
				Если УчетВремениВЧасах И СтрокаНачислений.ОплаченоЧасов > 0 Тогда
						ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоЧасов, "ЧДЦ=2; ЧН=") + НСтр("ru=' чс.';uk=' год.'");
					ИначеЕсли НЕ УчетВремениВЧасах И СтрокаНачислений.ОплаченоДней > 0 Тогда
						ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоДней, "ЧДЦ=2; ЧН=") + НСтр("ru=' дн.';uk=' дн.'");
					Иначе
						ОплаченныеДниЧасы = 0;
					КонецЕсли;
					
					Макеты.СтрокаДвижений.Параметры.ОплаченныеДниЧасы = ОплаченныеДниЧасы;
					ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры, СтрокаНачислений, "ОтработаноДней,ОтработаноЧасов");
					
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаНачислений,
						СоответствиеПользовательскихПолей,
						"Начисление,СуммаНачислено");
						
					СуммаНачисления = СуммаНачисления + СтрокаНачислений[СоответствиеПользовательскихПолей.Получить("СуммаНачислено")];
					
				КонецЕсли;
				
				Если НомерСтроки < СтрокиУдержаний.Количество() Тогда
					
					СтрокаУдержаний = СтрокиУдержаний[НомерСтроки];
					Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = Формат(СтрокаУдержаний.ПериодДействия, НСтр("ru=""Л=ru_RU; ДФ='МММ гггг'"";uk=""Л=uk_UA; ДФ='МММ гггг'"""));
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаУдержаний,
						СоответствиеПользовательскихПолей,
						"Удержание,СуммаУдержано");
						
					СуммаУдержания = СуммаУдержания + СтрокаУдержаний[СоответствиеПользовательскихПолей.Получить("СуммаУдержано")];
							
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
				
			КонецЦикла;
			
			Если ТипЗнч(СтрокиНачислений) <> Тип("Массив") Тогда
				СуммаНачисления = СуммаНачисления + СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
				СуммаНачисленоВНатуральнойФорме = СуммаНачисленоВНатуральнойФорме + СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачисленоВНатуральнойФорме"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если СуммаНачисления <> 0 ИЛИ СуммаУдержания <> 0 Тогда
		Макеты.Итог12.Параметры.СуммаНачисления = СуммаНачисления;
		Макеты.Итог12.Параметры.СуммаУдержания = СуммаУдержания;
		ДокументРезультат.Вывести(Макеты.Итог12);
	КонецЕсли;
	
	Если СуммаНачисленоВНатуральнойФорме <> 0 Тогда
		Макеты.Итог12ВНатуральнойФорме.Параметры.СуммаНачисления = СуммаНачисленоВНатуральнойФорме;
		ДокументРезультат.Вывести(Макеты.Итог12ВНатуральнойФорме);
	КонецЕсли;
	
	СуммаДолгаНаНачалоМесяца = 0;
	СуммаДолгаНаКонецМесяца = 0;
	
	СуммаНачисления = 0;
	СуммаВыплат = 0;
	
	ШапкаВыводилась = Ложь;
	
	Для каждого СтрокаСотрудника Из СтрокаГоловногоСотрудника.Строки Цикл	
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");
		Если СтрокаГруппы = Неопределено Тогда
			СтрокиСправочно = Новый Массив;
		Иначе
			СтрокиСправочно = СтрокаГруппы.Строки;
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
		Если СтрокаГруппы = Неопределено Тогда
			СтрокиВыплачено = Новый Массив;
		Иначе
			СтрокиВыплачено = СтрокаГруппы.Строки;
		КонецЕсли;
		
		Если СтрокиСправочно.Количество() > 0 ИЛИ СтрокиВыплачено.Количество() > 0 Тогда
			
			Если НЕ ШапкаВыводилась Тогда
				ДокументРезультат.Вывести(Макеты.ПрочиеВыплачено);
				ШапкаВыводилась = Истина;
			КонецЕсли; 
			
			Если СтрокаСотрудника.Сотрудник <> СтрокаСотрудника.ГоловнойСотрудник Тогда
				ЗаполнитьЗначенияСвойств(Макеты.Подработка.Параметры, СтрокаСотрудника);
				ДокументРезультат.Вывести(Макеты.Подработка);
			КонецЕсли; 
		
			НомерСтроки = 0;
			Пока НомерСтроки < СтрокиСправочно.Количество() ИЛИ НомерСтроки < СтрокиВыплачено.Количество() Цикл
				
				Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
					Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
				КонецЦикла;
				
				Если НомерСтроки < СтрокиСправочно.Количество() Тогда
					
					СтрокаСправочно = СтрокиСправочно[НомерСтроки];
					Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = Формат(СтрокаСправочно.ПериодДействия,НСтр("ru=""Л=ru_RU; ДФ='МММ.гггг'"";uk=""Л=uk_UA; ДФ='МММ.гггг'"""));
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаСправочно,
						СоответствиеПользовательскихПолей,
						"Начисление,СуммаНачислено");
					
				КонецЕсли;
				
				Если НомерСтроки < СтрокиВыплачено.Количество() Тогда
					
					СтрокаВыплачено = СтрокиВыплачено[НомерСтроки];
					
					ПредставлениеРегистраторов = "";
					Регистраторы = Новый Соответствие;
					Для каждого СтрокаСРегистратором Из СтрокаВыплачено.Строки Цикл
						Если ЗначениеЗаполнено(СтрокаСРегистратором.Регистратор) Тогда
							СвойстваРегистратора = Новый Структура("Номер,Дата");
							ЗаполнитьЗначенияСвойств(СвойстваРегистратора, СтрокаСРегистратором.Регистратор);
							Регистраторы.Вставить(СтрокаСРегистратором.Регистратор, СвойстваРегистратора);
						КонецЕсли; 
					КонецЦикла;
					
					Для каждого СвойстваРегистратора Из Регистраторы Цикл
						ПредставлениеРегистраторов = ?(ПустаяСтрока(ПредставлениеРегистраторов), "", ПредставлениеРегистраторов + ", ")
							+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СвойстваРегистратора.Значение.Номер, Истина, Истина)
							+ " " + НСтр("ru='от';uk='від'") + " " + Формат(СвойстваРегистратора.Значение.Дата, НСтр("ru=""Л=ru_RU; ДФ='dd.MM.yy'"";uk=""Л=uk_UA; ДФ='dd.MM.yy'"""));
					КонецЦикла;
					Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = Формат(СтрокаВыплачено.ПериодДействия,НСтр("ru=""Л=ru_RU; ДФ='МММ гггг'"";uk=""Л=uk_UA; ДФ='МММ гггг'"""));
					ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(
						Макеты.СтрокаДвижений,
						СтрокаВыплачено,
						СоответствиеПользовательскихПолей,
						"Удержание,СуммаУдержано");
						
					Если Не ПустаяСтрока(ПредставлениеРегистраторов) Тогда
						Макеты.СтрокаДвижений.Параметры.Удержание = Строка(Макеты.СтрокаДвижений.Параметры.Удержание) + " (" + ПредставлениеРегистраторов + ")";
					КонецЕсли; 
					
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
				
			КонецЦикла;
			
			Если ТипЗнч(СтрокиСправочно) <> Тип("Массив") Тогда
				СуммаНачисления = СуммаНачисления + СтрокиСправочно.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
			КонецЕсли;
			
			Если ТипЗнч(СтрокиВыплачено) <> Тип("Массив") Тогда
				СуммаВыплат	 = СуммаВыплат + СтрокиВыплачено.Итог(СоответствиеПользовательскихПолей.Получить("СуммаУдержано"));
			КонецЕсли;
			
		КонецЕсли; 
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			СуммаДолгаНаНачалоМесяца = СуммаДолгаНаНачалоМесяца + СтрокаГруппы.Сумма;
		КонецЕсли;
		
		СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
		Если СтрокаГруппы <> Неопределено Тогда
			СуммаДолгаНаКонецМесяца = СуммаДолгаНаКонецМесяца + СтрокаГруппы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммаНачисления <> 0 ИЛИ СуммаВыплат <> 0 Тогда
		Макеты.Итог34.Параметры.СуммаНачисления = СуммаНачисления;
		Макеты.Итог34.Параметры.СуммаВыплат	 = СуммаВыплат;
		ДокументРезультат.Вывести(Макеты.Итог34);
	КонецЕсли;
	
	ИтогиПоГруппам.СуммаДолгаНаНачалоМесяца = СуммаДолгаНаНачалоМесяца;
	ИтогиПоГруппам.СуммаДолгаНаКонецМесяца = СуммаДолгаНаКонецМесяца;
	
	СуммаНачисления = 0;
	ШапкаВыводилась = Ложь;
	
	Если СуммаНачисления <> 0 Тогда
		Макеты.Итог56.Параметры.СуммаНачисления = СуммаНачисления;
		ДокументРезультат.Вывести(Макеты.Итог56);
	КонецЕсли;
	
	Возврат ИтогиПоГруппам;
	
КонецФункции

Функция МожноГруппировать(Порядок, ИмяПоляГруппировки)
	
	ГруппировкаВозможна = Ложь;

	Для каждого ЭлементПорядка Из Порядок.Элементы Цикл
		
		Если ЭлементПорядка.Использование Тогда
			
			Если ТипЗнч(ЭлементПорядка) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("МесяцНачисления") Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки) Тогда
				
				ГруппировкаВозможна = Истина;
				Прервать;
				
			ИначеЕсли ЭлементПорядка.Поле <> Новый ПолеКомпоновкиДанных("Организация") Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГруппировкаВозможна;
	
КонецФункции

// Вспомогательные методы вывода настраиваемого расчетного листка

Процедура ВывестиОбластиСтроки(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры = Неопределено)
	
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры);
	ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры)
	
КонецПроцедуры

Процедура ВывестиОбластиТекстовуюОбласть(ДокументРезультат, Макет, НастройкиВывода, ТекстСекции)
	
	Если Не ПустаяСтрока(ТекстСекции) Тогда
			
		ПараметрыТекстовойСекции = Новый Структура("ТекстСекции", ТекстСекции);
		
		ВывестиОбластиСтроки(ДокументРезультат, Макет, "ТекстоваяИнформация", НастройкиВывода, ПараметрыТекстовойСекции);
		НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры = Неопределено)
	
	ПрисоединитьОбласть = Ложь;
	Для каждого ИмяОбласти Из НастройкиВывода.ИменаОбластейНачислено Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбластиСтроки + "|" + ИмяОбласти);
		Если Параметры <> Неопределено Тогда
			Область.Параметры.Заполнить(Параметры);
		КонецЕсли; 
		
		Если ПрисоединитьОбласть Тогда
			ДокументРезультат.Присоединить(Область);
		Иначе
			ДокументРезультат.Вывести(Область);
			ПрисоединитьОбласть = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, Параметры = Неопределено)
	
	Для каждого ИмяОбласти Из НастройкиВывода.ИменаОбластейУдержаноВыплачено Цикл
		
		Область = Макет.ПолучитьОбласть(ИмяОбластиСтроки + "|" + ИмяОбласти);
		Если Параметры <> Неопределено Тогда
			Область.Параметры.Заполнить(Параметры);
		КонецЕсли; 
		
		ДокументРезультат.Присоединить(Область);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкиВыводаРасчетногоЛистка()
	
	Если НастройкиВывода <> Неопределено Тогда
		Возврат НастройкиВывода;
	КонецЕсли; 
	
	НастройкиВывода = Новый Структура;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ИмяПараметра = "ВыводитьСуммуНачисленнойЗарплатыВРазделеКВыплате";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьПериодыНачислений";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьОтработанноеОплаченноеВремя";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ДетализироватьВыплатыПоВедомостям";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьСправочнуюИнформацию";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьИнформациюОЛьготах";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьПоказателиНачислений";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьОсобенностиРасчетаНДФЛ";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИмяПараметра = "ВыводитьИнформациюОНачисленныхВзносахВФСС";
	НастройкиВывода.Вставить(ИмяПараметра, ЗначениеПараметра(НастройкиОтчета, ИмяПараметра));
	
	ИменаОбластейНачислено = "ВидНачислено";
	ИменаОбластейУдержаноВыплачено = "ВидУдержаноВыплачено";
	
	Если НастройкиВывода.ВыводитьПериодыНачислений <> Ложь Тогда
		ИменаОбластейНачислено = ИменаОбластейНачислено + ",ПериодНачислено";
		ИменаОбластейУдержаноВыплачено = ИменаОбластейУдержаноВыплачено + ",ПериодУдержаноВыплачено";
	КонецЕсли; 
	
	Если НастройкиВывода.ВыводитьОтработанноеОплаченноеВремя <> Ложь Тогда
		ИменаОбластейНачислено = ИменаОбластейНачислено + ",РабочиеОплаченныеДни";
	КонецЕсли; 
	
	ИменаОбластейНачислено = ИменаОбластейНачислено + ",СуммаНачислено";
	ИменаОбластейУдержаноВыплачено = ИменаОбластейУдержаноВыплачено + ",СуммаУдержаноВыплачено";
	
	НастройкиВывода.Вставить("ИменаОбластейНачислено", СтрРазделить(ИменаОбластейНачислено, ","));
	НастройкиВывода.Вставить("ИменаОбластейУдержаноВыплачено", СтрРазделить(ИменаОбластейУдержаноВыплачено, ","));
	
	Возврат НастройкиВывода;
	
КонецФункции

Функция ЗначениеПараметра(НастройкиОтчета, ИмяПараметра)

	Значение = Неопределено;
	ПараметрОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ПараметрОтчета <> Неопределено И ПараметрОтчета.Использование = Истина Тогда
		Значение = ПараметрОтчета.Значение;
	КонецЕсли; 
	
	Возврат Значение;
	
КонецФункции

Процедура ОтключитьИспользованиеПолей(НастройкиОтчета, ИменаПолей)
	
	СписокПолей = СтрРазделить(ИменаПолей, ",");
	ОтключитьИспользованиеВыбранныхПолей(НастройкиОтчета.Выбор, СписокПолей);
	ОтключитьИспользованиеВыбранныхПолейСтруктуры(НастройкиОтчета.Структура, СписокПолей);
	
КонецПроцедуры

Процедура ОтключитьИспользованиеВыбранныхПолейСтруктуры(СтруктураНастроек, СписокПолей)
	
	Для каждого ЭлементСтруктуры Из СтруктураНастроек Цикл
		
		ОтключитьИспользованиеВыбранныхПолей(ЭлементСтруктуры.Выбор, СписокПолей);
		ОтключитьИспользованиеВыбранныхПолей(ЭлементСтруктуры.ПоляГруппировки, СписокПолей);
		
		ОтключитьИспользованиеВыбранныхПолейСтруктуры(ЭлементСтруктуры.Структура, СписокПолей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьИспользованиеВыбранныхПолей(ЭлементСтруктурыСПолями, СписокПолей)
	
	Для каждого ВыбранныйЭлемент Из ЭлементСтруктурыСПолями.Элементы Цикл
		
		Для каждого ИмяПоля Из СписокПолей Цикл
			
			Если ВыбранныйЭлемент.Использование Тогда
				
				Если ТипЗнч(ВыбранныйЭлемент) = Тип("ВыбранноеПолеКомпоновкиДанных")
					Или ТипЗнч(ВыбранныйЭлемент) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
					
					Если ВыбранныйЭлемент.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
						ВыбранныйЭлемент.Использование = Ложь;
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НастроитьОбъединение(ДокументРезультат, НомерКолонки, Ширина, НомерСтроки = Неопределено)
	
	Если НомерСтроки = Неопределено Тогда
		НомерСтроки = ДокументРезультат.ВысотаТаблицы;
	КонецЕсли; 
	
	Область = ДокументРезультат.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки + Ширина - 1);
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Область.Объединить();
	
КонецФункции

Функция ШиринаОбластей(Макет, ИменаОбластей, СтрокаИменИсключаемыхОбластей = "")
	
	Ширина = 0;
	ИсключаемыеОбласти = СтрРазделить(ВРег(СтрокаИменИсключаемыхОбластей), ",");
	
	Для каждого ИмяОбласти Из ИменаОбластей Цикл
		
		Если ИсключаемыеОбласти.Найти(ВРег(ИмяОбласти)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Область = Макет.ПолучитьОбласть("Строка|" + ИмяОбласти);
		Ширина = Ширина + Область.ШиринаТаблицы;
		
	КонецЦикла;
	
	Возврат Ширина;
	
КонецФункции

Процедура УдалитьСтрокиСНулевойСуммой(КоллекцияСтрок)
	
	СтрокиКУдалению = Новый Массив;
	
	Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Если СтрокаКоллекции.Сумма = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаКоллекции);
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		КоллекцияСтрок.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиИтогиВзаиморасчетов(ДокументРезультат, Макет, НастройкиВывода, Итоги)
	
	ПараметрыИтогов = Новый Структура("ДолгНаНачало,ДолгНаКонец");
	
	ИмяОбластиСтроки = "ДолгЗаПредприятием";
	Если ЗначениеЗаполнено(Итоги.СуммаДолгаНаНачалоМесяца) Тогда
		
		Если Итоги.СуммаДолгаНаНачалоМесяца > 0 Тогда
			ПараметрыИтогов.ДолгНаНачало = Итоги.СуммаДолгаНаНачалоМесяца;
		Иначе
			ИмяОбластиСтроки = "ДолгЗаРаботником";
			ПараметрыИтогов.ДолгНаНачало = - Итоги.СуммаДолгаНаНачалоМесяца;
		КонецЕсли;
		
	КонецЕсли; 
	
	ВывестиОбластиСтрокиНачислено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, ПараметрыИтогов);
	НастроитьОбъединение(ДокументРезультат, 1, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено, "СуммаНачислено"));
	
	ИмяОбластиСтроки = "ДолгЗаПредприятием";
	Если ЗначениеЗаполнено(Итоги.СуммаДолгаНаКонецМесяца) Тогда
		
		Если Итоги.СуммаДолгаНаКонецМесяца > 0 Тогда
			ПараметрыИтогов.ДолгНаКонец = Итоги.СуммаДолгаНаКонецМесяца;
		Иначе
			ИмяОбластиСтроки = "ДолгЗаРаботником";
			ПараметрыИтогов.ДолгНаКонец = - Итоги.СуммаДолгаНаКонецМесяца;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПрисоединитьОбластиСтрокиУдержаноВыплачено(ДокументРезультат, Макет, ИмяОбластиСтроки, НастройкиВывода, ПараметрыИтогов);
	
	НастроитьОбъединение(ДокументРезультат, ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейНачислено) + 1,
		ШиринаОбластей(Макет, НастройкиВывода.ИменаОбластейУдержаноВыплачено, "СуммаУдержаноВыплачено"));
		
КонецПроцедуры

Процедура ВывестиТелоСправочнойИнформации(ДокументРезультат, Макет, КоллекцияСправочныхДанных)
	
	КоличествоСекций = КоличествоСекций(ДокументРезультат);
		
	НомерСекции = 0;
	Для каждого СтрокаСправочно Из КоллекцияСправочныхДанных Цикл
		
		Область = Макет.ПолучитьОбласть("СуммаЛьготыСправочно|ЛьготыСправочно");
		ЗаполнитьЗначенияСвойств(Область.Параметры, СтрокаСправочно);
		
		Если НомерСекции = 0 Тогда
			ДокументРезультат.Вывести(Область);
		Иначе
			ДокументРезультат.Присоединить(Область);
		КонецЕсли;
		
		НомерСекции = НомерСекции + 1;
		Если НомерСекции = КоличествоСекций Тогда
			НомерСекции = 0;
		КонецЕсли; 
		
	КонецЦикла;
		
КонецПроцедуры

Функция КоличествоСекций(ДокументРезультат)
	
	Возврат Цел((ДокументРезультат.ШиринаТаблицы  + 1) / 11);
	
КонецФункции

Функция СтрокаСНепереносимымиПробелами(ИсходнаяСтрока)
	
	Возврат СтрЗаменить(ИсходнаяСтрока, " ", Символы.НПП);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета Типовая форма П-6

Процедура ВывестиОрганизациюП6(СтрокиГоловныхСотрудников, ДокументРезультат, Макет, Макеты, СоответствиеПользовательскихПолей, ФИОГлавногоБухгалтера)
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	СтрокаПервогоГоловногоСотрудника = СтрокиГоловныхСотрудников[0];
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОбластьОтчета");
	
	СтрокаШапки = СтрокаПервогоГоловногоСотрудника.Строки[0];
			
	ПараметрыРабочегоМеста = Новый Структура("Организация,КодПоЕДРПОУ,Подразделение,Должность,КодДолжности,Оклад,СотрудникКод,Пол,ФИО,КодПоДРФО,ОтработаноДней,ОтработаноЧасов,МесяцНачисления");
	ПараметрыРабочегоМеста.Организация = СтрокаШапки.Организация;
	ПараметрыРабочегоМеста.КодПоЕДРПОУ = СтрокаШапки.ОрганизацияКодПоЕДРПОУ;
	ПараметрыРабочегоМеста.ОтработаноДней = СтрокаШапки.ОтработаноДней;	
	ПараметрыРабочегоМеста.ОтработаноЧасов = СтрокаШапки.ОтработаноЧасов;
	ПараметрыРабочегоМеста.МесяцНачисления = Формат(СтрокаШапки.МесяцНачисления, НСтр("ru=""Л=ru_RU; ДФ='ММММ гггг'"";uk=""Л=uk_UA; ДФ='ММММ гггг'"""));

	Если ЗначениеЗаполнено(СтрокаШапки.ПодразделениеГоловногоСотрудникаНаКонецПериода) Тогда
		ПараметрыРабочегоМеста.Подразделение = СтрокаШапки.ПодразделениеГоловногоСотрудникаНаКонецПериода;
	КонецЕсли; 
	ПараметрыРабочегоМеста.ФИО = СтрокаШапки.ГоловнойСотрудникФизическоеЛицоФИО;
	ПараметрыРабочегоМеста.КодПоДРФО = СтрокаШапки.ГоловнойСотрудникФизическоеЛицоКодПоДРФО;
	
	ПараметрыРабочегоМеста.Должность = СтрокаШапки.ДолжностьГоловногоСотрудникаНаКонецПериода;
	Если ЗначениеЗаполнено(СтрокаШапки.ДолжностьГоловногоСотрудникаНаКонецПериода) Тогда
		ПараметрыРабочегоМеста.КодДолжности = СтрокаШапки.ДолжностьГоловногоСотрудникаНаКонецПериодаКодКП
	КонецЕсли;	
	ПараметрыРабочегоМеста.СотрудникКод = СтрокаШапки.СотрудникКод;
	ПараметрыРабочегоМеста.Оклад = СтрокаШапки.ТарифнаяСтавкаНаКонецПериода;
	Если СтрокаШапки.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		ПараметрыРабочегоМеста.Пол = "ж"
	ИначеЕсли СтрокаШапки.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда	
		ПараметрыРабочегоМеста.Пол = "ч"
	КонецЕсли;
	
	СтруктураПользовательскихПолей = Новый Структура;
	
	Для Каждого СтрокаСоответствия Из СоответствиеПользовательскихПолей Цикл
		Если НЕ (СтрокаСоответствия.Ключ = "ПорядокГоловногоСотрудника") И НЕ (СтрокаСоответствия.Ключ = "ПорядокОсновногоРабочегоМеста") Тогда 
			СтруктураПользовательскихПолей.Вставить(СтрокаСоответствия.Ключ, 0)
		КонецЕсли;	
	КонецЦикла;	
	
	ЗначениеПользовательскогоПоля = 0;
	ИмяПользовательскогоПоля = "";
	Для Каждого СтрокаСотрудника Из СтрокиГоловныхСотрудников Цикл
		Для Каждого СтрокаПоля Из СтруктураПользовательскихПолей Цикл
			ИмяПользовательскогоПоля = СтрокаПоля.Ключ;
			ЗначениеПользовательскогоПоля = СтрокаСотрудника[СоответствиеПользовательскихПолей[ИмяПользовательскогоПоля]];
			СтруктураПользовательскихПолей.Вставить(СтрокаПоля.Ключ, СтрокаПоля.Значение + ЗначениеПользовательскогоПоля);
		КонецЦикла;	
	КонецЦикла;
	
	Макеты.ОбластьОтчета.Параметры.Заполнить(ПараметрыРабочегоМеста); 
	Макеты.ОбластьОтчета.Параметры.Дата = ТекущаяДата();
	Макеты.ОбластьОтчета.Параметры.ФИОГлавногоБухгалтера = ФИОГлавногоБухгалтера;
	ЗаполнитьЗначенияСвойств(Макеты.ОбластьОтчета.Параметры, СтруктураПользовательскихПолей);
	
	ДокументРезультат.Вывести(Макеты.ОбластьОтчета);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета Типовая форма П-7

Процедура ВывестиОрганизациюП7(СтрокаОрганизации, ДокументРезультат, Макет, Макеты, СоответствиеПользовательскихПолей, ФИОГлавногоБухгалтера)
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОбластьОтчета");
	ОбластьТаблицы = Макет.ПолучитьОбласть("ОбластьТаблицы");
   	Макеты.ОбластьОтчета.Параметры.Заполнить(СтрокаОрганизации); 
	Макеты.ОбластьОтчета.Параметры.Заполнить(СтрокаОрганизации); 

   	Макеты.ОбластьТаблицы.Параметры.Заполнить(СтрокаОрганизации); 
	Макеты.ОбластьОтчета.Параметры.Дата = ТекущаяДата();
	Макеты.ОбластьТаблицы.Параметры.ФИОГлавногоБухгалтера = ФИОГлавногоБухгалтера;
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ОбластьОтчета, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ОбластьТаблицы, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.ОбластьОтчета);
	ДокументРезультат.Вывести(Макеты.ОбластьТаблицы);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции.

Функция ИОФамилияФизическогоЛица(ФизическоеЛицо)
	
	ИОФамилия = "";
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ФизическоеЛицо, "ИОФамилия");
		Если КадровыеДанные.Количество() > 0 Тогда
			ИОФамилия = КадровыеДанные[0].ИОФамилия;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИОФамилия;
	
КонецФункции

Процедура ИзменитьГруппировкиВариантаРасчетнаяВедомость(Структура, ЕстьГруппировкаПоПодразделению)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "Подразделение" Тогда
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Истина;
			Иначе
				ЭлементСтруктуры.Использование = Ложь;
			КонецЕсли;
		ИначеЕсли ЭлементСтруктуры.Имя = "Сотрудник" Тогда
			Если ЕстьГруппировкаПоПодразделению Тогда
				ЭлементСтруктуры.Использование = Ложь;
			Иначе
				ЭлементСтруктуры.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИзменитьГруппировкиВариантаРасчетнаяВедомость(ЭлементСтруктуры.Структура, ЕстьГруппировкаПоПодразделению);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнение строк промежуточного итога.
//
Процедура ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ДанныеСтроки) Экспорт
	
	Для каждого ПромежуточныйИтог Из ПромежуточныеИтоги Цикл
		ПромежуточныеИтоги.Вставить(ПромежуточныйИтог.Ключ, ПромежуточныйИтог.Значение + ДанныеСтроки[ПромежуточныйИтог.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

ОтчетИнициализирован = Ложь;

#КонецЕсли