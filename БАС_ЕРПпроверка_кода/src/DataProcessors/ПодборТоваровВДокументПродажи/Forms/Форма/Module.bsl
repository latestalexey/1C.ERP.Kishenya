&НаКлиенте
Перем КэшированныеЗначения; //текущая номенклатура для передачи в обработчики ожидания

&НаКлиенте
Перем ВыполняетсяЗакрытие Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.';uk='Передбачено відкриття обробки тільки з документів.'");
	КонецЕсли;
	
	КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма";
	
	ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстатки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПодборТоваровКлиент.ПередЗакрытиемФормыПодбораТоваров(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиФормыНаСервере();
	АдресТоваровВХранилище = АдресТоваровВХранилище();
	
	Если ПеренестиВДокумент И АдресТоваровВХранилище <> Неопределено Тогда
		Структура = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		ОповеститьОВыборе(Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПараметрыКомплекта = Новый Структура;
		ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
		ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
		
		АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
		ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
		ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
		ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыОткрытия.Вставить("Валюта", Валюта);
		ПараметрыОткрытия.Вставить("Соглашение", Соглашение);
		ПараметрыОткрытия.Вставить("Дата", Дата);
		ПараметрыОткрытия.Вставить("ЗапретРедактированияСоставаНабора", ЗапретРедактированияСоставаНабора);
		ПараметрыОткрытия.Вставить("ЗапретРедактированияЦены", ЗапретРедактированияЦеныНабора);
		ПараметрыОткрытия.Вставить("ПересчитатьСуммы", Истина);
		ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
		ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
		
		ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ПомощникНового" Тогда
		Если ЗначениеЗаполнено(СтрокаПоискаНоменклатура) Тогда
			ВыполнитьПоискНоменклатуры();
		КонецЕсли;
		ПриЗаписиНовойНоменклатурыНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ХарактеристикиНоменклатуры.Форма.ПомощникНового" Тогда
		ПриЗаписиНовойХарактеристикиНаСервере(ВыбранноеЗначение);
	КонецЕсли;

	Если ИсточникВыбора.ИмяФормы = "Справочник.Номенклатура.Форма.ПомощникНового" 
		Или ИсточникВыбора.ИмяФормы = "Справочник.ХарактеристикиНоменклатуры.Форма.ПомощникНового" Тогда
		
		ДобавитьВКорзину(ТоварДляДобавленияВКорзину);
		ТоварДляДобавленияВКорзину = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийСтрокПоиска

&НаКлиенте
Процедура СтрокаПоискаНоменклатураПриИзменении(Элемент)
	
	ВыполнитьПоискНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоискаНоменклатура = "";
	
	СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаХарактеристикиПриИзменении(Элемент)
	
	ВыполнитьПоискХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаХарактеристикиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоискаХарактеристики = "";
	
	СнятьОтборПоСтрокеПоискаХарактеристикиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФлаговТочногоСоответствия

&НаКлиенте
Процедура НайтиНоменклатуруПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоискНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиХарактеристикиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоискХарактеристик();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ВидНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриНажатииНаИнформационнуюНадпись(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОстаткиНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриИзмененииОтображенияОстатковПоСкладамДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаДоПриИзменении(Элемент)
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаОтПриИзменении(Элемент)
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СегментПриИзменении(Элемент)
	
	СегментНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ТолькоВНаличииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	
	ИспользоватьФильтрыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИсходногоКачестваПриИзменении(Элемент)
	
	НоменклатураИсходногоКачестваПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКорзина

&НаКлиенте
Процедура КорзинаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",    ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка",     Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	Иначе
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка", Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	Иначе
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка", Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураПересчетаЦены = Новый Структура("ИспользоватьРучныеСкидки");
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах",СтруктураПересчетаЦены);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Корзина.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретащитьВКорзинуНаСервере(ПараметрыПеретаскивания.Значение);
	
	Если Не ИспользоватьНоменклатуруПродаваемуюСовместно Тогда	
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПриИзменении(Элемент)
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	Иначе	
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НаборыКлиент.БлокируемыйЭлемент(Поле) Тогда
		
		ТекущаяСтрока = Объект.Корзина.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
			
			ПараметрыКомплекта = Новый Структура;
			ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
			ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
			
			АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
			ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
			ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
			ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
			ПараметрыОткрытия.Вставить("Валюта", Валюта);
			ПараметрыОткрытия.Вставить("Соглашение", Соглашение);
			ПараметрыОткрытия.Вставить("Дата", Дата);
			ПараметрыОткрытия.Вставить("ЗапретРедактированияСоставаНабора", ЗапретРедактированияСоставаНабора);
			ПараметрыОткрытия.Вставить("ЗапретРедактированияЦены", ЗапретРедактированияЦеныНабора);
			ПараметрыОткрытия.Вставить("ПересчитатьСуммы", Истина);
			ПараметрыОткрытия.Вставить("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры.ВыгрузитьЗначения());
			ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
			ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
			
			ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Корзина", Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОтборов

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент.ДеревоОтборовВыбор(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ДеревоОтборовОтборПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовПередНачаломИзменения(Элемент, Отказ)
	
	ПодборТоваровКлиент.ДеревоОтборовПередНачаломИзменения(ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении(ЭтаФорма, Новый ОписаниеОповещения("ДеревоОтборовПриИзмененииЗавершение", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ПодборТоваровКлиент.ОбработчикАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОстаткиТоваров

&НаКлиенте
Процедура ОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТекущаяСтрокаНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыОстатков = ОстаткиТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицыОстатков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтрокаТаблицыОстатков.СкладДоступенДляВыбора Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Данный склад не был выбран в редактируемом документе.';uk='Даний склад не був обраний в редагованому документі.'"));
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиНоменклатуры 
		И ТекущаяСтрокаНоменклатуры.ХарактеристикиИспользуются 
		И Не НавигацияПоХарактеристикам Тогда
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОстаткиТоваровВыборЗавершение", ЭтотОбъект), НСтр("ru='Не выбрана характеристика. Перейти к выбору характеристик?';uk='Не вибрана характеристика. Перейти до вибору характеристик?'"), РежимДиалогаВопрос.ОКОтмена);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	Если НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(ЭтаФорма)].ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаНоменклатуры);
	КонецЕсли;
	
	Если ТекущаяСтрокаНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
		ПараметрыТовара.Склад = СтрокаТаблицыОстатков.Склад;
	КонецЕсли;
	
	ПараметрыТовара.ДатаОтгрузки = СтрокаТаблицыОстатков.Период;
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        ПерейтиКСпискуХарактеристик();
		ПодборТоваровКлиент.ПослеПереходаКСпискуХарактеристик(ЭтаФорма);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскиванияОстатков(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодборТаблицаХарактеристики

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыХарактеристик(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку характеристик.
	Оповещение = Новый ОписаниеОповещения("ПодборТаблицаХарактеристикиВыборЗавершение", ЭтотОбъект, 
		Новый Структура("Элемент", Элемент));
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыХарактеристик(ЭтаФорма, Элемент, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицыХарактеристик = ДополнительныеПараметры.Элемент.ТекущиеДанные;
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	ПараметрыТовара.ХарактеристикиИспользуются = Истина;
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	ПараметрыТовара.ЭтоУслуга = ТекущаяСтрокаНоменклатуры.ЭтоУслуга;	
	Если ТекущаяСтрокаНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти И Склады.Количество() = 1 Тогда
		ПараметрыТовара.Склад = Склады.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);

КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку номенклатуры.
	Оповещение = Новый ОписаниеОповещения("ПодборТаблицаНоменклатураВыборЗавершение", ЭтотОбъект, 
		Новый Структура("Элемент", Элемент));
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокаТаблицыНоменклатуры = ДополнительныеПараметры.Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиНоменклатуры 
		И СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются Тогда
		
		ПерейтиКСпискуХарактеристик();
		ПодборТоваровКлиент.ПослеПереходаКСпискуХарактеристик(ЭтаФорма);
		
	Иначе
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара(СтрокаТаблицыНоменклатуры.Номенклатура);
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
		
		Если (СтрокаТаблицыНоменклатуры.ЭтоТовар) И РежимПодбораИспользоватьСкладыВТабличнойЧасти И Склады.Количество() = 1 Тогда
			ПараметрыТовара.Склад = Склады.Получить(0).Значение;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		ДобавитьВКорзину(ПараметрыТовара);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКачества

&НаКлиенте
Процедура СписокКачестваПометкаПриИзменении(Элемент)
	
	СписокКачестваПометкаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьТекущийЭлементНавигация(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементНавигация(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСписокТоваров(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСписокТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементКорзина(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементКорзина(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСтрокаПоиска(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = Не ЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ТекущееСообщениеПользователю = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатуры(Команда)
	
	ПодборТоваровКлиент.ЦеныНоменклатуры(Этаформа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуру(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СПодобраннойНоменклатуройСовместноПродается(Команда)
	
	СПодобраннойНоменклатуройСовместноПродаетсяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураСАналогичнымиСвойствами(Команда)
	
	НоменклатураСАналогичнымиСвойствамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДругогоКачества(Команда)
	
	ТоварыДругогоКачестваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыСозданияНовойНоменклатурыНаСервере(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюХарактеристику(Команда)
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ПомощникНового", ПараметрыСозданияНовойХарактеристикиНаСервере(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборыПоСвойствам(Команда)
	
	СброситьОтборыПоСвойствамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Обработка.ПодборТоваровВДокументПродажи.Форма.Команда.СоставНабора");
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	Если НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(ЭтаФорма)].ТекущиеДанные;
		
		Если СтрокаТаблицыХарактеристик = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	Иначе
		
		Если ТекущаяСтрокаНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаНоменклатуры);
	КонецЕсли;
	
	Если ПараметрыТовара.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Просмотр состава набора доступен только для номенклатуры типа ""Набор""';uk='Перегляд складу набору доступний тільки для номенклатури типу ""Набір""'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыТовара.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика",                    ПараметрыТовара.Характеристика);
		ПараметрыФормы.Вставить("ВидЦены",                           ПараметрыТовара.ВидЦены);
		ПараметрыФормы.Вставить("Соглашение",                        Соглашение);
		ПараметрыФормы.Вставить("Упаковка",                          ПараметрыТовара.Упаковка);
		ПараметрыФормы.Вставить("Цена",                              ПараметрыТовара.Цена);
		ПараметрыФормы.Вставить("Склад",                             ПараметрыТовара.Склад);
		ПараметрыФормы.Вставить("ДатаОтгрузки",                      ПараметрыТовара.ДатаОтгрузки);
		ПараметрыФормы.Вставить("ЭтоУслуга",                         ПараметрыТовара.ЭтоУслуга);
		ПараметрыФормы.Вставить("ЭтоТовар",                          ПараметрыТовара.ЭтоТовар);
		ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыТовара.ТипНоменклатуры);
		ПараметрыФормы.Вставить("Дата",                              Дата);
		ПараметрыФормы.Вставить("Валюта",                            Валюта);
		ПараметрыФормы.Вставить("СкрытьЦену",                        РежимПодбораБезСуммовыхПараметров);
		ПараметрыФормы.Вставить("РедактироватьЦену",                 Истина);
		ПараметрыФормы.Вставить("РедактироватьВидЦены",              Элементы.КорзинаВидЦены.Видимость);
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",          ИспользоватьДатыОтгрузки);
		ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", РежимПодбораИспользоватьСкладыВТабличнойЧасти);
		ПараметрыФормы.Вставить("ЦенаВключаетНДС",                   Объект.ЦенаВключаетНДС);
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",              СкрыватьРучныеСкидки Или РежимПодбораБезСуммовыхПараметров);
		ПараметрыФормы.Вставить("ИспользоватьРучныеСкидкиВПродажах", ИспользоватьРучныеСкидкиВПродажах);
		ПараметрыФормы.Вставить("Склады",                            Склады.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ВидыЦен",                           ВидыЦен.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ОтображатьОстатки",                 ОтображатьОстатки);
		
		Если ИспользоватьРучныеСкидкиВПродажах Тогда
			АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилищеНаСервере(ПараметрыТовара);
		Иначе
			АдресВоВременномХранилище = Неопределено;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		
		ПодобранныеТовары = Неопределено;

		
		ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма.СоставНабора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("СоставНабораЗавершение", ЭтотОбъект, Новый Структура("ПараметрыТовара", ПараметрыТовара)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыТовара = ДополнительныеПараметры.ПараметрыТовара;
    
    
    ПодобранныеТовары = Результат;
    
    Если ПодобранныеТовары = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    НовыеСтроки = Новый Массив;
    
    Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
        НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
        
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
        ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
        
        НовыеСтроки.Добавить(НоваяСтрока);
    КонецЦикла;
    
    ТекстОповещения = ДобавитьВКорзинуНаКлиенте(ПараметрыТовара, НовыеСтроки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтрокаПоискаНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоискНоменклатурыНеУдачный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтрокаПоискаХарактеристики.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоискХарактеристикНеУдачный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "КорзинаНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Корзина.Упаковка");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаЦена.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаСумма.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корзина.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "КорзинаХарактеристика",
																		     "Объект.Корзина.ХарактеристикиИспользуются");

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма, 
									                     "КорзинаВидЦены", 
                                                         "Объект.Корзина.ВидЦены");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиТоваров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиТоваров.СкладДоступенДляВыбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияНоменклатуры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыНоменклатуры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКачества.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантНавигации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокВариантовНавигации = Новый СписокЗначений;
	СписокВариантовНавигации.Добавить(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам);
	СписокВариантовНавигации.Добавить(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам);
	ОтборЭлемента.ПравоеЗначение = СписокВариантовНавигации;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НавигацияПоХарактеристикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ОтборХарактеристик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидНоменклатуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборЦенаОт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборЦенаДо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборЦенаОт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтборЦенаДо");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборЦенаДо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "СписокСтандартныйПоискНоменклатураЕдиницаИзмерения", 
                                                                   "СписокНоменклатура.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "СписокРасширенныйПоискНоменклатураЕдиницаИзмерения", 
                                                                   "СписокНоменклатура.Упаковка");
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "СписокСтандартныйПоискХарактеристикиЕдиницаИзмерения", 
                                                                   "СписокХарактеристики.Упаковка");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "СписокРасширенныйПоискХарактеристикиЕдиницаИзмерения", 
                                                                   "СписокХарактеристики.Упаковка");
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КорзинаИндексСовместноПродаваемыеТовары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимПодбораБезСуммовыхПараметров");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиТоваровПериодОписание.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиТоваров.Период");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
	//
	
	Если Не ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураДоступно.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Набор;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<набор>';uk='<набір>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
	
	КонецЕсли;
	
	//
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураЦена.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураЦена.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ВариантРасчетаЦеныНабора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<набор>';uk='<набір>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
	КонецЕсли;
	//
	
	Если Не ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Набор;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<набор>';uk='<набір>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
	
	КонецЕсли;
	
	//
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиЦена.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиЦена.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ВариантРасчетаЦеныНабора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<набор>';uk='<набір>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
	КонецЕсли;
	
	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Корзина");
	
	//
	
	ПодборТоваровСервер.УстановитьУсловноеОформлениеДинамическихСписков(ЭтаФорма);
	
КонецПроцедуры

#Область ОбработчикиСобытийНаСервере

&НаСервере
Процедура СегментНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииСегментаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураИсходногоКачестваПриИзмененииНаСервере()
	
	ПодборТоваровСервер.НоменклатураИсходногоКачестваПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуХарактеристик() 
	ПодборТоваровСервер.ПерейтиКСпискуХарактеристик(ЭтаФорма);
КонецПроцедуры		

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	
	ПодборТоваровКлиент.ПолучитьИнформациюОТовареПриПродаже(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьВКорзинуНаКлиенте(ПараметрыТовара, НовыеСтроки)
	
	Отбор = Новый Структура("НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, Цена, ВидЦены, Склад, ПроцентРучнойСкидки, СрокПоставки");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, НоваяСтрока);
		
		Если ИспользоватьДатыОтгрузки Тогда
			Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		КонецЕсли;
		
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 ИЛИ НоваяСтрока.Погрешность <> 0 Тогда
			
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", НоваяСтрока.Погрешность);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
			
		Иначе
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
		Если Не ПоказыватьПодобранныеТовары Тогда
			
			ТекстОповещения = Символы.ПС + НСтр("ru='Товар ""[Товар]"" стоимостью [Цена] [Валюта] в количестве [КоличествоУпаковок] [ЕдиницаИзмерения] добавлен в корзину';uk='Товар ""[Товар]"" вартістю [Цена] [Валюта] у кількості [КоличествоУпаковок] [ЕдиницаИзмерения] додано в кошик'");
			
			ВставляемыеЗначения = Новый Структура("Товар, Цена, Валюта, КоличествоУпаковок, ЕдиницаИзмерения");
			
			ВставляемыеЗначения.Товар              = Строка(ТекущаяСтрока.Номенклатура) + ?(ЗначениеЗаполнено(НоваяСтрока.Характеристика)," (" + НоваяСтрока.Характеристика + ")","");
			ВставляемыеЗначения.Цена               = Формат(ТекущаяСтрока.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=");
			ВставляемыеЗначения.Валюта             = Валюта;
			ВставляемыеЗначения.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка), НоваяСтрока.Упаковка, НСтр("ru='ед.';uk='од.'"));
			ВставляемыеЗначения.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок;
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОповещения, ВставляемыеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НовыеСтроки.Количество() > 0 Тогда
		Элементы.Корзина.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ТекстОповещения;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыТовара)
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьКоличество И Не РежимПодбораБезКоличественныхПараметров Тогда
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыТовара.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика",                    ПараметрыТовара.Характеристика);
		ПараметрыФормы.Вставить("ВидЦены",                           ПараметрыТовара.ВидЦены);
		ПараметрыФормы.Вставить("Соглашение",                        Соглашение);
		ПараметрыФормы.Вставить("Упаковка",                          ПараметрыТовара.Упаковка);
		ПараметрыФормы.Вставить("Цена",                              ПараметрыТовара.Цена);
		ПараметрыФормы.Вставить("Склад",                             ПараметрыТовара.Склад);
		ПараметрыФормы.Вставить("ДатаОтгрузки",                      ПараметрыТовара.ДатаОтгрузки);
		ПараметрыФормы.Вставить("ЭтоУслуга",                         ПараметрыТовара.ЭтоУслуга);
		ПараметрыФормы.Вставить("ЭтоТовар",                          ПараметрыТовара.ЭтоТовар);
		ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыТовара.ТипНоменклатуры);
		ПараметрыФормы.Вставить("Дата",                              Дата);
		ПараметрыФормы.Вставить("Валюта",                            Валюта);
		ПараметрыФормы.Вставить("СкрытьЦену",                        РежимПодбораБезСуммовыхПараметров);
		ПараметрыФормы.Вставить("РедактироватьЦену",                 Истина);
		ПараметрыФормы.Вставить("РедактироватьВидЦены",              Элементы.КорзинаВидЦены.Видимость);
		ПараметрыФормы.Вставить("Склады",                            Склады.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",          ИспользоватьДатыОтгрузки);
		ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", РежимПодбораИспользоватьСкладыВТабличнойЧасти);
		ПараметрыФормы.Вставить("ЦенаВключаетНДС",                   Объект.ЦенаВключаетНДС);
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",              СкрыватьРучныеСкидки Или РежимПодбораБезСуммовыхПараметров);
		ПараметрыФормы.Вставить("ИспользоватьРучныеСкидкиВПродажах", ИспользоватьРучныеСкидкиВПродажах);
		ПараметрыФормы.Вставить("ВидыЦен",                           ВидыЦен.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ОтображатьОстатки",                 ОтображатьОстатки);
		ПараметрыФормы.Вставить("БезОтбораПоВключениюНДСВЦену",      БезОтбораПоВключениюНДСВЦену);
		
		Если ИспользоватьРучныеСкидкиВПродажах Тогда
			АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилищеНаСервере(ПараметрыТовара);
		Иначе
			АдресВоВременномХранилище = Неопределено;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
		
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор") Тогда
			ИмяФормыЗапросаКоличества = "Обработка.ПодборТоваровВДокументПродажи.Форма.СоставНабора";
		Иначе
			ИмяФормыЗапросаКоличества = "Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличества";
		КонецЕсли;
		
		ОткрытьФорму(
			ИмяФормыЗапросаКоличества, 
			ПараметрыФормы, 
			ЭтаФорма,
			,
			,
			,
			Новый ОписаниеОповещения("ДобавитьВКорзинуПослеВыбораКоличества", ЭтотОбъект, ПараметрыТовара),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	Иначе
		
		НовыеСтроки = Новый Массив;
		
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
			И (Не НеРазбиватьНаборыПоКомплектующим) Тогда
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ПараметрыТовара);
			ПараметрыКомплектующих.НоменклатураНабора   = ПараметрыТовара.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = ПараметрыТовара.Характеристика;
			Если Склады.Количество() = 1 Тогда
				ПараметрыКомплектующих.Склад = Склады.Получить(0).Значение;
			КонецЕсли;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата", Дата);
			ДополнительныеПараметры.Вставить("Валюта", Валюта);
			ДополнительныеПараметры.Вставить("Склады", Склады.ВыгрузитьЗначения());
			ДополнительныеПараметры.Вставить("Соглашение", Соглашение);
			ДополнительныеПараметры.Вставить("Цена", ПараметрыТовара.Цена);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				НовыеСтроки.Добавить(ПодобранныйТовар);
			КонецЦикла;
			
		Иначе
			НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Упаковка) Тогда
				НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
			КонецЕсли;
			
			НовыеСтроки.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьВКорзинуЗавершение(ПараметрыТовара, НовыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуПослеВыбораКоличества(ПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если ПодобранныеТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеСтроки = Новый Массив;
	
	Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
		
		НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныеПараметры);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
		
		НовыеСтроки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ДобавитьВКорзинуЗавершение(ДополнительныеПараметры, НовыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзинуЗавершение(ПараметрыТовара, НовыеСтроки)
	
	ТекстОповещения = ДобавитьВКорзинуНаКлиенте(ПараметрыТовара, НовыеСтроки);
	
	Если Не ПоказыватьПодобранныеТовары Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Товар добавлен в корзину';uk='Товар додано в кошик'"), , ТекстОповещения);
	КонецЕсли;
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	Иначе
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
	// Если добавление товара в корзину производилось при заполненной строке поиска,
	// то вернуть фокус ввода на строку поиска.
	ИмяТекущегоЭлементаСтрокиПоиска = ПодборТоваровКлиент.ИмяТекущегоЭлементаСтрокиПоиска(ЭтаФорма);
	Если ЗначениеЗаполнено(ЭтаФорма[ИмяТекущегоЭлементаСтрокиПоиска]) Тогда
		ПодборТоваровКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеретащитьВКорзинуНаСервере(Данные)
	
	НовыеСтроки = Новый Массив;
	Для Каждого ПараметрыТовара Из Данные Цикл
		Если ПараметрыТовара.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
			И (Не НеРазбиватьНаборыПоКомплектующим) Тогда
			
			ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ПараметрыТовара);
			ПараметрыКомплектующих.НоменклатураНабора   = ПараметрыТовара.Номенклатура;
			ПараметрыКомплектующих.ХарактеристикаНабора = ПараметрыТовара.Характеристика;
			Если Склады.Количество() = 1 Тогда
				ПараметрыКомплектующих.Склад = Склады.Получить(0).Значение;
			КонецЕсли;
			ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Дата", Дата);
			ДополнительныеПараметры.Вставить("Валюта", Валюта);
			ДополнительныеПараметры.Вставить("Склады", Склады.ВыгрузитьЗначения());
			ДополнительныеПараметры.Вставить("Соглашение", Соглашение);
			ДополнительныеПараметры.Вставить("Цена", ПараметрыТовара.Цена);
			ПодобранныеТовары = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);
			
			Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
				НовыеСтроки.Добавить(ПодобранныйТовар);
			КонецЦикла;
			
		Иначе
			НовыеСтроки.Добавить(ПараметрыТовара);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Если НоваяСтрока.Упаковка.Пустая() Тогда 
			НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("НоменклатураНабора",         НоваяСтрока.НоменклатураНабора);
		Отбор.Вставить("ХарактеристикаНабора",       НоваяСтрока.ХарактеристикаНабора);
		Отбор.Вставить("Номенклатура",               НоваяСтрока.Номенклатура);
		Отбор.Вставить("Характеристика",             НоваяСтрока.Характеристика);
		Отбор.Вставить("ХарактеристикиИспользуются", НоваяСтрока.ХарактеристикиИспользуются);
		Отбор.Вставить("Упаковка",                   НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",                       НоваяСтрока.Цена);
		Отбор.Вставить("ВидЦены",                    НоваяСтрока.ВидЦены);
		Отбор.Вставить("Склад",                      НоваяСтрока.Склад);
		Отбор.Вставить("ПроцентРучнойСкидки",        НоваяСтрока.ПроцентРучнойСкидки);
		
		Если ИспользоватьДатыОтгрузки Тогда
			Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		КонецЕсли;
		
		Отбор.Вставить("СрокПоставки", НоваяСтрока.СрокПоставки);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 ИЛИ НоваяСтрока.Погрешность <> 0 Тогда
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", Перечисления.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", НоваяСтрока.Погрешность);
		Иначе
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		ПараметрыСтроки = Новый Структура("Номенклатура, Характеристика, Упаковка, Цена, Количество, КоличествоУпаковок, Сумма, ВидЦены, Склад, ДатаОтгрузки, СрокПоставки, ИндексСовместноПродаваемыеТовары, ПроцентРучнойСкидки, СуммаРучнойСкидки");
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущаяСтрока);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыСтроки);
		
	КонецЦикла;
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаКлиенте
Процедура ВыполнитьПоискНоменклатуры()
	
	ПодборТоваровКлиент.ВыполнениеРасширенногоПоискаВозможно(ЭтаФорма, 
		Новый ОписаниеОповещения("ВыполнитьПоискНоменклатурыЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ВыполнитьПоискНоменклатурыНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаНоменклатуры(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискНоменклатурыНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СнятьОтборПоСтрокеПоискаНоменклатурыНаСервере()
	
	ПодборТоваровКлиентСервер.СнятьОтборПоСтрокеПоискаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискХарактеристик()
	
	ПодборТоваровКлиент.ВыполнениеРасширенногоПоискаВозможно(ЭтаФорма, 
		Новый ОписаниеОповещения("ВыполнитьПоискХарактеристикЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискХарактеристикЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ВыполнитьПоискХарактеристикНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаХарактеристик(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискХарактеристикНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СнятьОтборПоСтрокеПоискаХарактеристикиНаСервере()
	
	ПодборТоваровКлиентСервер.СнятьОтборПоСтрокеПоискаХарактеристик(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВариантомНавигации

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
 	ПодборТоваровКлиент.ПриАктивизацииСтрокиСпискаВидыНоменклатуры(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
	
		ВидНоменклатурыПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВариантНавигацииНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	НадписьВариантНавигацииНавигационнойСсылкиНаСервере(НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура НадписьВариантНавигацииНавигационнойСсылкиНаСервере(НавигационнаяСсылка, СтандартнаяОбработка)
	ПодборТоваровСервер.НадписьВариантНавигацииНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылка, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантНавигации(Команда)
	ПодборТоваровКлиент.ИзменитьВариантНавигации(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантНавигацииЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено 
		Или ВариантНавигации = Результат.Значение Тогда
		Возврат;
	КонецЕсли;
	
	ВариантНавигации = Результат.Значение;
	ВариантНавигацииПриИзмененииНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВариантаНавигации(ЭтаФорма);
	  
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Товары = Объект.Корзина.Выгрузить();
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаСервере
Функция АдресТоваровВХранилище()
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		АдресВХранилище = ПоместитьТоварыВХранилище();
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Процедура НастроитьПоиск(Команда)
	
	ПодборТоваровКлиент.НастроитьПоиск(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийНаСервере

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	ПодборТоваровСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТолькоВНаличииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборТолькоВНаличии(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВидаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СписокКачестваПометкаПриИзмененииНаСервере()
	
	ПодборТоваровСервер.СписокКачестваПометкаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураСАналогичнымиСвойствамиНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииОтображенияНоменклатураСАналогичнымиСвойствами(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СПодобраннойНоменклатуройСовместноПродаетсяНаСервере()
	
	ПодборТоваровСервер.ПриУстановкеОтбораПоНоменклатуреПродаваемойСовместно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКорзиныНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииКорзины(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыДругогоКачестваНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреДругогоКачества(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СброситьОтборыПоСвойствамНаСервере()
	
	ПодборТоваровСервер.СброситьОтборыПоСвойствам(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНовойНоменклатурыНаСервере(НовыйЭлементНоменклатуры)
	
	ПодборТоваровСервер.ПриЗаписиНовойНоменклатуры(ЭтаФорма, НовыйЭлементНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНовойХарактеристикиНаСервере(НовыйЭлементХарактеристик)
	
	ПодборТоваровСервер.ПриЗаписиНовойХарактеристики(ЭтаФорма, НовыйЭлементХарактеристик);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияНовойНоменклатурыНаСервере()
	
	Возврат ПодборТоваровСервер.ПараметрыСозданияНовойНоменклатуры(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция ПараметрыСозданияНовойХарактеристикиНаСервере()
	
	Возврат ПодборТоваровСервер.ПараметрыСозданияНовойХарактеристики(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилищеНаСервере(ПараметрыТовара)
	
	Возврат ПодборТоваровСервер.АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилище(ЭтаФорма, ПараметрыТовара);
	
КонецФункции

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатурыРасширенныйПоиск(Команда)
	
	ПодборТоваровКлиент.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатурыСтандартныйПоиск(Команда)
	
	ПодборТоваровКлиент.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры) Экспорт
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Корзина");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	Колонки.Добавить("Сумма");
	Если Не Форма.СкрыватьРучныеСкидки Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	
	Возврат Колонки;
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	Данные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Отбор = Новый Структура;
	Отбор.Вставить("НоменклатураНабора", Данные.НоменклатураНабора);
	Отбор.Вставить("ХарактеристикаНабора", Данные.ХарактеристикаНабора);
	
	СтрокиКомплекта = Объект.Корзина.НайтиСтроки(Отбор);
	
	Колонки = КолонкиНабора(ЭтаФорма);
	
	Для Каждого СтрокаТЧ Из Данные.Комплектующие Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерСтроки", СтрокаТЧ.НомерСтрокиДокумента);
		
		НайденныеСтроки = Объект.Корзина.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			Для Каждого Колонка Из Колонки Цикл
				НайденныеСтроки[0][Колонка] = СтрокаТЧ[Колонка];
			КонецЦикла;
			
			ИндексСтроки = СтрокиКомплекта.Найти(НайденныеСтроки[0]);
			Если Не ИндексСтроки = Неопределено Тогда
				СтрокиКомплекта.Удалить(ИндексСтроки);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = Объект.Корзина.Добавить();
			НоваяСтрока.НоменклатураНабора = Данные.НоменклатураНабора;
			НоваяСтрока.ХарактеристикаНабора = Данные.ХарактеристикаНабора;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(НоваяСтрока.НоменклатураНабора), 1, 0);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКомплекта Из СтрокиКомплекта Цикл
		Объект.Корзина.Удалить(СтрокаКомплекта);
	КонецЦикла;
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	Иначе	
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Корзина", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Корзина", ДополнительныйПараметр);
	КонецЕсли;
	
	Если ИспользоватьНоменклатуруПродаваемуюСовместно Тогда
		ПриИзмененииКорзиныНаСервере()
	Иначе	
		ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

#КонецОбласти


#КонецОбласти

ВыполняетсяЗакрытие = Ложь;