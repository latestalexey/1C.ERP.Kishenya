#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда	

#Область СлужебныеПроцедурыИФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	ДанныеДокументов = ДанныеДокументовРасчетаСреднегоЗаработка(МассивОбъектов);

	// Проверяем, нужно ли для макета РасчетСреднегоЗаработка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработка",, ПараметрыВывода);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка", НСтр("ru='Расчет среднего заработка';uk='Розрахунок середнього заробітку'"), ТабличныйДокумент,,,,Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем, нужно ли для макета РасчетСреднегоЗаработкаВыходногоПособия формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработкаВыходногоПособия",, ПараметрыВывода);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия", НСтр("ru='Расчет среднего заработка (для выходного пособия)';uk='Розрахунок середнього заробітку (для вихідної допомоги)'"), ТабличныйДокумент,,,,Истина);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

#Область ОбщийСреднийЗаработок

// Функция возвращает табличный документ - печатную форму расчета среднего заработка.
//
Функция ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, ИмяМакета, ВыводитьЗаголовок = Истина, ПараметрыВывода) Экспорт
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетСреднегоЗаработка";
	
	Если ИмяМакета = "РасчетСреднегоЗаработкаКомпактный" Тогда
		ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработкаКомпактный(ТабличныйДокумент, ОбъектыПечати, ИмяМакета, ДанныеДокументов, КодЯзыкаПечать);			
	Иначе	
		ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработка(ТабличныйДокумент, ОбъектыПечати, ИмяМакета, ДанныеДокументов, ВыводитьЗаголовок, КодЯзыкаПечать);							
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции 	

// Подготавливает табличный документ с печатными формами для массива ссылок.
//
// Параметры:
//	МассивСсылок 		- массив ссылок на документы поддерживающие печать среднего заработка.
//	ВыводитьЗаголовок 	- признак того, что надо формировать полную печатную форму.
//	ИмяМакета 			- имя варианта печати среднего заработка.
//
// Возвращаемое значение - структура в которой содержатся
// 		- ТабличныйДокумент, табличный документ с областями для каждой ссылки из массива ссылок.
// 		- ОбъектыПечати, соответствие, ключом которой является ссылка, а значением - имя области табличного документа,
// 			в которой хранится печатная форма для этой ссылки.
//
Функция ОбластиДляВстраивания(ДанныеДокументов, ИмяМакета, ВыводитьЗаголовок = Ложь, ПараметрыВывода) Экспорт
	
	ОбъектыПечати = ОбъектыПечатиДляВстраиваемыхОбластей();
	
	ТабличныйДокумент = ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, ИмяМакета, ВыводитьЗаголовок, ПараметрыВывода);
	
	Возврат Новый Структура("ОбъектыПечати,ТабличныйДокумент", ОбъектыПечати, ТабличныйДокумент);
	
КонецФункции

#Область ПолныйВариант

Процедура ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработка(ТабличныйДокумент, ОбъектыПечати, ИмяМакета, ДанныеДокументов, ВыводитьЗаголовок, КодЯзыкаПечать)
		
	ЗначенияПараметров = Новый Структура;
	
	Для каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		Если ТипЗнч(ДанныеДокумента.РеквизитыДокумента.Ссылка) = Тип("ДокументСсылка.Командировка") Тогда
			ЭтоКомандировка = Истина;
			ОплатитьПоДаннымФОТ = ДанныеДокумента.РеквизитыДокумента.ОплатитьПоДаннымФОТ;
		Иначе
			ЭтоКомандировка = Ложь;
			ОплатитьПоДаннымФОТ = Ложь;
		КонецЕсли;
		
		Если ОплатитьПоДаннымФОТ = Истина Тогда
			ИспользуетсяИндексация = Ложь;
		Иначе
			ИспользуетсяИндексация = ИспользуетсяИндексация(ДанныеДокумента.ДанныеРасчетаСреднего.Заработок);
		КонецЕсли;

		Если ОплатитьПоДаннымФОТ = Истина Тогда
			ДанныеОЗаработке = ДанныеДокумента.ДанныеРасчетаСреднего.Заработок;
		Иначе
			ДанныеОЗаработке = ПреобразоватьДанныеОЗаработкеВТаблицыЗначений(ДанныеДокумента.ДанныеРасчетаСреднего.Заработок);
		КонецЕсли;
		ОтработанноеВремя = ПреобразоватьДанныеОВремениВТаблицуЗначений(ДанныеДокумента.ДанныеРасчетаСреднего.ОтработанноеВремя);

		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Подготовим макеты для формирования табличного документа.
		ОбластиМакета = ОбластиМакетаСреднегоЗаработка(ИспользуетсяИндексация, ДанныеДокумента.ПараметрыРасчета.СпособРасчета, КодЯзыкаПечать, ЭтоКомандировка);
		
		Если ВыводитьЗаголовок Тогда
			ВывестиШапку(ТабличныйДокумент, ОбластиМакета.ОбластьШапка, ДанныеДокумента.РеквизитыДокумента, ДанныеДокумента.КадровыеДанныеСотрудника, ДанныеДокумента.ПараметрыРасчета, КодЯзыкаПечать);
		КонецЕсли;
		
		
		
		РезультирующаяТаблица = Новый ТаблицаЗначений;
		Если ОплатитьПоДаннымФОТ Тогда
			РезультирующаяТаблица = ДанныеОЗаработке;
		Иначе
			ОбъединитьТаблицыДляВывода(РезультирующаяТаблица, ДанныеОЗаработке, ОтработанноеВремя.Скопировать(), ИспользуетсяИндексация);
		КонецЕсли;
		Если ОплатитьПоДаннымФОТ Тогда
			ВывестиОтработанноеВремя(ДанныеДокумента.РеквизитыДокумента.ВидУчетаВремениДляСредней, ТабличныйДокумент, ОбластиМакета.ПоДаннымФОТШапка, ОбластиМакета.ПоДаннымФОТСтрока, ОбластиМакета.ПоДаннымФОТРасшифровка, РезультирующаяТаблица, ОплатитьПоДаннымФОТ, ДанныеДокумента.РеквизитыДокумента.НормаВДнях, ДанныеДокумента.РеквизитыДокумента.НормаВЧасах, КодЯзыкаПечать);
		Иначе
			ВывестиОтработанноеВремя(ДанныеДокумента.РеквизитыДокумента.ВидУчетаВремениДляСредней, ТабличныйДокумент, ОбластиМакета.ОбластьШапкаОтработанногоВремени, ОбластиМакета.ОбластьСтрокаОтработанногоВремени, ОбластиМакета.ОбластьПодвалОтработанногоВремени, РезультирующаяТаблица, ОплатитьПоДаннымФОТ, ДанныеДокумента.РеквизитыДокумента.НормаВДнях, ДанныеДокумента.РеквизитыДокумента.НормаВЧасах, КодЯзыкаПечать);
		КонецЕсли;
		
		Если ДанныеДокумента.ДанныеНачислений <> Неопределено И ДанныеДокумента.ДанныеНачислений.Количество() > 0 Тогда
			ВывестиТаблицуНачислений(ТабличныйДокумент, ОбластиМакета.ОбластьНачисленияШапка, ОбластиМакета.ОбластьНачисленияСтрока, ДанныеДокумента.ДанныеНачислений);
		КонецЕсли;
		
		ВывестиОбластьОтветственный(ТабличныйДокумент, ОбластиМакета.ОбластьОтветственный, ДанныеДокумента.РеквизитыДокумента);
		
		
		
		
		
		ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.РеквизитыДокумента.Ссылка, ДанныеДокумента.РеквизитыДокумента.Сотрудник);

	КонецЦикла;
	
КонецПроцедуры 

Процедура ОбъединитьТаблицыДляВывода(РезультирующаяТаблица, ДанныеОЗаработке, ТаблицаОтработанногоВремени, ИспользуетсяИндексация)
	
	СтруктураПромежуточныхТаблиц = ПодготовитьНаборыДанных(ДанныеОЗаработке, ТаблицаОтработанногоВремени);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтработанноеВремя", СтруктураПромежуточныхТаблиц.ОтработанноеВремя); 
	Запрос.УстановитьПараметр("МесячныеПремии", СтруктураПромежуточныхТаблиц.ПремииМесячные); 
	Запрос.УстановитьПараметр("ГодовыеПремии", СтруктураПромежуточныхТаблиц.ПремииГодовые); 
	Запрос.УстановитьПараметр("Зароботок", СтруктураПромежуточныхТаблиц.Зароботок); 
	Запрос.УстановитьПараметр("ИспользуетсяИндексация", ИспользуетсяИндексация); 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПремииМесячные.Месяц,
		|	ПремииМесячные.ОтработаноДней,
		|	ПремииМесячные.ОтработаноЧасов,
		|	ПремииМесячные.КалендарныхДней,
		|	ПремииМесячные.СреднемесячноеКоличествоДней,
		|	ПремииМесячные.Учтено КАК УчтеноВремени
		|ПОМЕСТИТЬ ВТОтработанноеВремя
		|ИЗ
		|	&ОтработанноеВремя КАК ПремииМесячные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МесячныеПремии.Месяц,
		|	МесячныеПремии.Учтено КАК МесячнаяПремия
		|ПОМЕСТИТЬ ВТМесячныеПремии
		|ИЗ
		|	&МесячныеПремии КАК МесячныеПремии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОтработанноеВремя.Месяц,
		|	ВТОтработанноеВремя.ОтработаноДней,
		|	ВТОтработанноеВремя.ОтработаноЧасов,
		|	ВТОтработанноеВремя.КалендарныхДней,
		|	ВТОтработанноеВремя.СреднемесячноеКоличествоДней,
		|	ВТОтработанноеВремя.УчтеноВремени,
		|	ЕСТЬNULL(ВТМесячныеПремии.МесячнаяПремия, 0) КАК МесячнаяПремия
		|ПОМЕСТИТЬ ВТОтрВремяПремииМесячные
		|ИЗ
		|	ВТОтработанноеВремя КАК ВТОтработанноеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМесячныеПремии КАК ВТМесячныеПремии
		|		ПО ВТОтработанноеВремя.Месяц = ВТМесячныеПремии.Месяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПремииГодовые.Месяц,
		|	ПремииГодовые.Учтено
		|ПОМЕСТИТЬ ВТГодовыеПремии
		|ИЗ
		|	&ГодовыеПремии КАК ПремииГодовые
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОтрВремяПремииМесячные.Месяц,
		|	ВТОтрВремяПремииМесячные.ОтработаноДней,
		|	ВТОтрВремяПремииМесячные.ОтработаноЧасов,
		|	ВТОтрВремяПремииМесячные.КалендарныхДней,
		|	ВТОтрВремяПремииМесячные.СреднемесячноеКоличествоДней,
		|	ВТОтрВремяПремииМесячные.УчтеноВремени,
		|	ВТОтрВремяПремииМесячные.МесячнаяПремия,
		|	ЕСТЬNULL(ВТГодовыеПремии.Учтено, 0) КАК ГодоваяПремия
		|ПОМЕСТИТЬ ВТОтработанноеВремяСПремиями
		|ИЗ
		|	ВТОтрВремяПремииМесячные КАК ВТОтрВремяПремииМесячные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГодовыеПремии КАК ВТГодовыеПремии
		|		ПО ВТОтрВремяПремииМесячные.Месяц = ВТГодовыеПремии.Месяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Зароботок.Месяц,
		|	ВЫБОР
		|		КОГДА &ИспользуетсяИндексация
		|			ТОГДА Зароботок.Учтено
		|		ИНАЧЕ Зароботок.Сумма
		|	КОНЕЦ КАК РасчетнаяСумма,
		|	Зароботок.КоэффициентИндексации КАК Коэффициент
		|ПОМЕСТИТЬ ВТЗароботок
		|ИЗ
		|	&Зароботок КАК Зароботок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОтработанноеВремяСПремиями.Месяц КАК Месяц,
		|	ВТОтработанноеВремяСПремиями.ОтработаноДней,
		|	ВТОтработанноеВремяСПремиями.ОтработаноЧасов,
		|	ВТОтработанноеВремяСПремиями.КалендарныхДней,
		|	ВТОтработанноеВремяСПремиями.СреднемесячноеКоличествоДней,
		|	ВТОтработанноеВремяСПремиями.УчтеноВремени,
		|	ВЫБОР
		|		КОГДА &ИспользуетсяИндексация
		|				И ЕСТЬNULL(ВТЗароботок.Коэффициент, 0) <> 0
		|			ТОГДА ВТОтработанноеВремяСПремиями.МесячнаяПремия * ЕСТЬNULL(ВТЗароботок.Коэффициент, 0)
		|		ИНАЧЕ ВТОтработанноеВремяСПремиями.МесячнаяПремия
		|	КОНЕЦ КАК МесячнаяПремия,
		|	ВЫБОР
		|		КОГДА &ИспользуетсяИндексация
		|				И ЕСТЬNULL(ВТЗароботок.Коэффициент, 0) <> 0
		|			ТОГДА ВТОтработанноеВремяСПремиями.ГодоваяПремия * ЕСТЬNULL(ВТЗароботок.Коэффициент, 0)
		|		ИНАЧЕ ВТОтработанноеВремяСПремиями.ГодоваяПремия
		|	КОНЕЦ КАК ГодоваяПремия,
		|	ЕСТЬNULL(ВТЗароботок.РасчетнаяСумма, 0) КАК СуммаЗароботка,
		|	ЕСТЬNULL(ВТЗароботок.Коэффициент, 1) КАК Коэффициент
		|ИЗ
		|	ВТОтработанноеВремяСПремиями КАК ВТОтработанноеВремяСПремиями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗароботок КАК ВТЗароботок
		|		ПО ВТОтработанноеВремяСПремиями.Месяц = ВТЗароботок.Месяц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
	
	РезультирующаяТаблица = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Функция ПодготовитьНаборыДанных(ДанныеОЗаработке, ТаблицаОтработанногоВремени)

	ОписаниеТиповДата		 = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТиповЧисла4 	 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(4,0));
	ОписаниеТиповЧисла15	 = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15,2));
	
	//Формирование Таблицы месячных премий за расчетный период
	ПремииМесячные = Новый ТаблицаЗначений;
	ПремииМесячные.Колонки.Добавить("Месяц",ОписаниеТиповДата);
	ПремииМесячные.Колонки.Добавить("Учтено",ОписаниеТиповЧисла15);
	
	Для каждого Строка Из ДанныеОЗаработке.ПремииМесячные Цикл
		ЗаполнитьЗначенияСвойств(ПремииМесячные.Добавить(),Строка);
	КонецЦикла;
	
	ПремииМесячные.Свернуть("Месяц", "Учтено");
	
	//Формирование Таблицы отработанного времени за расчетный период
	ОтработанноеВремя = Новый ТаблицаЗначений;
	ОтработанноеВремя.Колонки.Добавить("Месяц",ОписаниеТиповДата);
	ОтработанноеВремя.Колонки.Добавить("ОтработаноДней",ОписаниеТиповЧисла4);
	ОтработанноеВремя.Колонки.Добавить("ОтработаноЧасов",ОписаниеТиповЧисла4);
	ОтработанноеВремя.Колонки.Добавить("КалендарныхДней",ОписаниеТиповЧисла4);
	ОтработанноеВремя.Колонки.Добавить("СреднемесячноеКоличествоДней",ОписаниеТиповЧисла15);
	ОтработанноеВремя.Колонки.Добавить("Учтено",ОписаниеТиповЧисла15);
	
	Для каждого Строка Из ТаблицаОтработанногоВремени Цикл
		ЗаполнитьЗначенияСвойств(ОтработанноеВремя.Добавить(),Строка);
	КонецЦикла;
	
	//Формирование Таблицы годовых премий за расчетный период
	ПремииГодовые = Новый ТаблицаЗначений;
	ПремииГодовые.Колонки.Добавить("Месяц",ОписаниеТиповДата);
	ПремииГодовые.Колонки.Добавить("Учтено",ОписаниеТиповЧисла15);
	
	Для каждого Строка Из ДанныеОЗаработке.ПремииГодовые Цикл
		ЗаполнитьЗначенияСвойств(ПремииГодовые.Добавить(),Строка);
	КонецЦикла;	
	
	//Формирование Таблицы зароботка за расчетный период
	Зароботок = Новый ТаблицаЗначений;
	Зароботок.Колонки.Добавить("Месяц",ОписаниеТиповДата);
	Зароботок.Колонки.Добавить("Учтено",ОписаниеТиповЧисла15);
	Зароботок.Колонки.Добавить("Сумма",ОписаниеТиповЧисла15);
	Зароботок.Колонки.Добавить("КоэффициентИндексации",ОписаниеТиповЧисла15);
	
	Для каждого Строка Из ДанныеОЗаработке.Заработок Цикл
		ЗаполнитьЗначенияСвойств(Зароботок.Добавить(),Строка);
	КонецЦикла;	
	
	Возврат Новый Структура("ПремииМесячные, ПремииГодовые, ОтработанноеВремя, Зароботок", ПремииМесячные, ПремииГодовые, ОтработанноеВремя, Зароботок); 
	
КонецФункции	

Процедура ВывестиШапку(ТабличныйДокумент, ОбластьШапка, РеквизитыДокумента, КадровыеДанныеСотрудника, ПараметрыРасчета, КодЯзыкаПечать)

	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("СинонимДокумента", 				РеквизитыДокумента.Ссылка.Метаданные().Синоним);
	ЗначенияПараметров.Вставить("НомерДокумента", 					ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СокрЛП(РеквизитыДокумента.НомерДокумента), Истина, Истина));
	ЗначенияПараметров.Вставить("ДатаДокумента", 					Формат(РеквизитыДокумента.ДатаДокумента, "ДЛФ=DD;Л=" + КодЯзыкаПечать));
	ЗначенияПараметров.Вставить("Ссылка", 							РеквизитыДокумента.Ссылка);                                                                                                                         
	ЗначенияПараметров.Вставить("НаименованиеОрганизации", 			РеквизитыДокумента.НаименованиеОрганизации);
	ЗначенияПараметров.Вставить("Организация", 						?(ЗначениеЗаполнено(РеквизитыДокумента.ПолноеНаименованиеОрганизации), РеквизитыДокумента.ПолноеНаименованиеОрганизации, РеквизитыДокумента.НаименованиеОрганизации));
	ЗначенияПараметров.Вставить("ДатаНачалаОтсутствия", 			Формат(РеквизитыДокумента.ДатаНачалаОтсутствия, "ДЛФ=D"));
	ЗначенияПараметров.Вставить("ДатаОкончанияОтсутствия", 			Формат(РеквизитыДокумента.ДатаОкончанияОтсутствия, "ДЛФ=D"));
	Если РеквизитыДокумента.ВидОтпуска = "Основной отпуск" Тогда
		ВидОтпуска = НСтр("ru='Основной отпуск';uk='Основна відпустка'",КодЯзыкаПечать);
	ИначеЕсли РеквизитыДокумента.ВидОтпуска = "Дополнительный отпуск" Тогда
		ВидОтпуска = НСтр("ru='Дополнительный отпуск';uk='Додаткова відпустка'",КодЯзыкаПечать);
	Иначе
		ВидОтпуска = РеквизитыДокумента.ВидОтпуска;
	КонецЕсли;
	ЗначенияПараметров.Вставить("ВидОтпуска", 						ВидОтпуска);
	
	ЗначенияПараметров.Вставить("Сотрудник", 						РеквизитыДокумента.Сотрудник);
	ЗначенияПараметров.Вставить("ФИОРаботника", 					КадровыеДанныеСотрудника.ФИОПолные);
	ЗначенияПараметров.Вставить("ТабельныйНомер", 					ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(КадровыеДанныеСотрудника.ТабельныйНомер, Истина, Истина));
	ЗначенияПараметров.Вставить("ВидЗанятости", 					КадровыеДанныеСотрудника.ВидЗанятости);
	ЗначенияПараметров.Вставить("Подразделение", 					КадровыеДанныеСотрудника.Подразделение);
	ЗначенияПараметров.Вставить("Должность", 						КадровыеДанныеСотрудника.Должность);		
	
	ЗначенияПараметров.Вставить("СпособРасчета", 					?(ЗначениеЗаполнено(ПараметрыРасчета.СпособРасчета), ПараметрыРасчета.СпособРасчета, НСтр("ru='Общий средний заработок';uk='Загальний середній заробіток'")));
	ЗначенияПараметров.Вставить("ДатаНачалаРасчетногоПериода", 		Формат(ПараметрыРасчета.НачалоРасчетногоПериода,"ДЛФ=D"));
	ЗначенияПараметров.Вставить("ДатаОкончанияРасчетногоПериода", 	Формат(ПараметрыРасчета.ОкончаниеРасчетногоПериода,"ДЛФ=D"));
	
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры


Процедура ВывестиОтработанноеВремя(ВидУчетаВремениДляСредней, ТабличныйДокумент, ОбластьШапкаОтработанногоВремени, ОбластьСтрокаОтработанногоВремени, ОбластьПодвалОтработанногоВремени, РезультирующаяТаблица, ОплатитьПоДаннымФОТ, НормаВДнях, НормаВЧасах, КодЯзыкаПечать)


	ТабличныйДокумент.Вывести(ОбластьШапкаОтработанногоВремени);
	
	Для каждого Строка Из РезультирующаяТаблица Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаОтработанногоВремени.Параметры, Строка);
		Если НЕ ОплатитьПоДаннымФОТ Тогда
			ОбластьСтрокаОтработанногоВремени.Параметры.Месяц = Формат(Строка.Месяц, "ДФ='MMMM yyyy';Л=" + КодЯзыкаПечать); 
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьСтрокаОтработанногоВремени);
	КонецЦикла;
	
	ЗначенияПараметров = Новый Структура;
	
	Если ОплатитьПоДаннымФОТ Тогда
		ЗначенияПараметров.Вставить("УчтеноЗаработок",      	УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "СуммаЗароботка"));
		Если ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
			УчтеноВремени 				= НормаВЧасах;
			СреднедневнойЗаработок 		= УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ЗначенияПараметров.УчтеноЗаработок, УчтеноВремени);
			ОписаниеСреднегоЗаработка	= НСтр("ru='Расчет выполнен исходя из часовой заработной платы';uk='Розрахунок виконаний виходячи з годинної заробітної плати'",КодЯзыкаПечать);
		Иначе
			УчтеноВремени 				= НормаВДнях;
			СреднедневнойЗаработок 		= УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ЗначенияПараметров.УчтеноЗаработок, УчтеноВремени);
			ОписаниеСреднегоЗаработка	= НСтр("ru='Расчет выполнен исходя из дневной заработной платы';uk='Розрахунок виконаний виходячи з денної заробітної плати'",КодЯзыкаПечать);
		КонецЕсли;
		ЗначенияПараметров.Вставить("УчтеноВремени", 			УчтеноВремени);
		ЗначенияПараметров.Вставить("СреднедневнойЗаработок", 	СреднедневнойЗаработок);	
		ЗначенияПараметров.Вставить("ОписаниеСреднегоЗаработка", ОписаниеСреднегоЗаработка);		

	Иначе
		ЗначенияПараметров.Вставить("КалендарныхДней", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "КалендарныхДней"));
		ЗначенияПараметров.Вставить("ОтработаноДней", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "ОтработаноДней"));
		ЗначенияПараметров.Вставить("ОтработаноЧасов", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "ОтработаноЧасов"));
		ЗначенияПараметров.Вставить("СуммаЗароботка", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "СуммаЗароботка"));
		ЗначенияПараметров.Вставить("ГодоваяПремия", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "ГодоваяПремия"));
		ЗначенияПараметров.Вставить("МесячнаяПремия", 			УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "МесячнаяПремия"));
		ЗначенияПараметров.Вставить("УчтеноЗаработок", 			ЗначенияПараметров.СуммаЗароботка + ЗначенияПараметров.ГодоваяПремия + ЗначенияПараметров.МесячнаяПремия);	
		СреднемесячноеКоличествоДней = УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "СреднемесячноеКоличествоДней");
		УчтеноВремени 				= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(РезультирующаяТаблица, "УчтеноВремени");
		Если СреднемесячноеКоличествоДней > 0 Тогда
			УчтеноВремени 				= СреднемесячноеКоличествоДней;
			ОписаниеСреднегоЗаработка	= НСтр("ru='Расчет произведен по окладу';uk='Розрахунок виконано по окладу'",КодЯзыкаПечать);
		ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
			ОписаниеСреднегоЗаработка	= НСтр("ru='Среднечасовая (по рабочим часам)';uk='Середньогодинна (по робочих годинах)'",КодЯзыкаПечать);
		Иначе
			ОписаниеСреднегоЗаработка	= НСтр("ru='Среднедневная (по рабочим дням)';uk='Середньоденна (по робочих днях)'",КодЯзыкаПечать);
		КонецЕсли;
		СреднедневнойЗаработок 		= УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ЗначенияПараметров.УчтеноЗаработок, УчтеноВремени);
		ЗначенияПараметров.Вставить("УчтеноВремени", 			УчтеноВремени);
		ЗначенияПараметров.Вставить("СреднедневнойЗаработок", 	СреднедневнойЗаработок);	
		ЗначенияПараметров.Вставить("ОписаниеСреднегоЗаработка", ОписаниеСреднегоЗаработка);		
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОбластьПодвалОтработанногоВремени.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьПодвалОтработанногоВремени);
	
КонецПроцедуры

Процедура ВывестиТаблицуНачислений(ТабличныйДокумент, ОбластьШапкаНачислений, ОбластьСтрокаНачислений, ДанныеТаблицы)
	
	ТабличныйДокумент.Вывести(ОбластьШапкаНачислений);

	Для каждого Строка Из ДанныеТаблицы Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаНачислений.Параметры, Строка);
		ТабличныйДокумент.Вывести(ОбластьСтрокаНачислений);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиОбластьОтветственный(ТабличныйДокумент, ОбластьОтветственный, РеквизитыДокумента)
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("Ответственный", 		РеквизитыДокумента.Ответственный);
	ЗаполнитьЗначенияСвойств(ОбластьОтветственный.Параметры, ЗначенияПараметров);
	ТабличныйДокумент.Вывести(ОбластьОтветственный);
	
КонецПроцедуры	
	







Функция ОбластиМакетаСреднегоЗаработка(ИспользуетсяИндексация = Истина, СпособРасчетаОтпуска = Неопределено, КодЯзыкаПечать, ЭтоКомандировка)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьРасчетаСреднегоЗаработка.ПФ_MXL_РасчетСреднегоЗаработка", КодЯзыкаПечать);
	
	ОбластиМакета = Новый Структура;
	
	Если ЭтоКомандировка Тогда 
		ОбластиМакета.Вставить("ОбластьШапка", 	Макет.ПолучитьОбласть("ШапкаКомандировка"));
	Иначе
		ОбластиМакета.Вставить("ОбластьШапка", 	Макет.ПолучитьОбласть("Шапка"));
	КонецЕсли;		
	
	
	ОбластиМакета.Вставить("ОбластьШапкаОтработанногоВремени",  	Макет.ПолучитьОбласть("ОтработанноеВремяШапкаОтпуск"));
	ОбластиМакета.Вставить("ОбластьСтрокаОтработанногоВремени",  	Макет.ПолучитьОбласть("ОтработанноеВремяСтрокаОтпуск"));
	ОбластиМакета.Вставить("ОбластьПодвалОтработанногоВремени",  	Макет.ПолучитьОбласть("ОтработанноеВремяПодвалОтпуск"));
	
	ОбластиМакета.Вставить("ОбластьНачисленияШапка",  				Макет.ПолучитьОбласть("НачисленияШапка"));
	ОбластиМакета.Вставить("ОбластьНачисленияСтрока",  				Макет.ПолучитьОбласть("НачисленияСтрока"));
	
	ОбластиМакета.Вставить("ПоДаннымФОТШапка",  					Макет.ПолучитьОбласть("ПоДаннымФОТШапка"));
	ОбластиМакета.Вставить("ПоДаннымФОТСтрока",  					Макет.ПолучитьОбласть("ПоДаннымФОТСтрока"));
	ОбластиМакета.Вставить("ПоДаннымФОТРасшифровка",  				Макет.ПолучитьОбласть("ПоДаннымФОТРасшифровка"));

	ОбластиМакета.Вставить("ОбластьОтветственный",  				Макет.ПолучитьОбласть("Ответственный"));
	
	Возврат ОбластиМакета;	
	
КонецФункции 

Функция ПреобразоватьДанныеОЗаработкеВТаблицыЗначений(ДанныеОЗаработке)
	
	Заработок 				= Новый Массив;
	ПремииГодовые	 		= Новый Массив;
	ПремииМесячные	 		= Новый Массив;

	ГодовыеПремии = Новый Массив;
	ГодовыеПремии.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом);
	ГодовыеПремии.Добавить(Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой);
	
	Для каждого СтрокаЗаработка Из ДанныеОЗаработке Цикл
		Если Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии().Найти(СтрокаЗаработка.СоставнаяЧасть) <> Неопределено Тогда
			Если ГодовыеПремии.Найти(СтрокаЗаработка.СоставнаяЧасть) <> Неопределено Тогда
				ПремииГодовые.Добавить(СтрокаЗаработка);
			Иначе
				ПремииМесячные.Добавить(СтрокаЗаработка);
			КонецЕсли;	
		Иначе
			Заработок.Добавить(СтрокаЗаработка);
		КонецЕсли;
	КонецЦикла;		
	
	Заработок = МассивСтруктурВТаблицуЗначений(Заработок);
	Если Заработок.Количество() > 0 Тогда
		Заработок.Сортировать("Месяц");
	КонецЕсли;
	
	
	ПремииГодовые = МассивСтруктурВТаблицуЗначений(ПремииГодовые);
	ПремииМесячные = МассивСтруктурВТаблицуЗначений(ПремииМесячные);
	
	Если ПремииМесячные.Количество() > 0 Тогда
		ПремииМесячные.Сортировать("Месяц");
	КонецЕсли;

	
	Возврат Новый Структура("Заработок,ПремииМесячные, ПремииГодовые", Заработок, ПремииМесячные, ПремииГодовые);
	
КонецФункции

Функция ПреобразоватьДанныеОВремениВТаблицуЗначений(ОтработанноеВремя)
	
	ОтработанноеВремя = МассивСтруктурВТаблицуЗначений(ОтработанноеВремя);  	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		ОтработанноеВремя.Сортировать("Месяц");		
	КонецЕсли;
	
	Возврат ОтработанноеВремя;	
	
КонецФункции

Функция ИспользуетсяИндексация(Заработок)
	
	ИспользуетсяИндексация = Ложь;
	
	Для каждого СтрокаЗаработка Из Заработок Цикл
		Если СтрокаЗаработка.КоэффициентИндексации > 1 Тогда
			ИспользуетсяИндексация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	
	Возврат ИспользуетсяИндексация;	
	
	
КонецФункции 
	
#КонецОбласти

#Область КомпактныйВариант

Процедура ЗаполнитьТабличныйДокументРасчетаСреднегоЗаработкаКомпактный(ТабличныйДокумент, ОбъектыПечати, ИмяМакета, ДанныеДокументов, КодЯзыкаПечать)
		
	ЗначенияПараметров = Новый Структура;

	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		
		// Подготовим макеты для формирования табличного документа.
		ОбластиМакета = ОбластиМакетаСреднегоЗаработкаКомпактный(ДанныеДокумента.РеквизитыДокумента.ОплатитьПоДаннымФОТ, КодЯзыкаПечать);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ЗначенияПараметров.Очистить();
		ЗначенияПараметров.Вставить("ЕдиницаИзмеренияВремени", НазваниеЕдиницыИзмеренияВремени(ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок));	
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьШапкаКомпактный.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьШапкаКомпактный);
		
		Если ДанныеДокумента.РеквизитыДокумента.ОплатитьПоДаннымФОТ = Истина Тогда
			СводнаяТаблица = ДанныеДокумента.ДанныеРасчетаСреднего.Заработок;
		Иначе
			СводнаяТаблица = СводнаяТаблицаЗаработкаИВремени(ДанныеДокумента.ДанныеРасчетаСреднего.Заработок, ДанныеДокумента.ДанныеРасчетаСреднего.ОтработанноеВремя);
		КонецЕсли;
		
		Для каждого Строка Из СводнаяТаблица Цикл														
			ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьСтрокаКомпактный.Параметры, Строка);
			ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьСтрокаКомпактный);
		КонецЦикла;
		
		ЗначенияПараметров.Очистить();
		
		Если ДанныеДокумента.РеквизитыДокумента.ОплатитьПоДаннымФОТ = Истина Тогда
			ЗначенияПараметров.Вставить("Заработок", 				СводнаяТаблица.Итог("СуммаЗароботка"));
			ЗначенияПараметров.Вставить("УчтеноЗаработок", 			ЗначенияПараметров.Заработок);	
			Если ДанныеДокумента.РеквизитыДокумента.ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				УчтеноВремени 				= ДанныеДокумента.РеквизитыДокумента.НормаВЧасах;
				ОписаниеСреднегоЗаработка	= НСтр("ru='Расчет выполнен исходя из часовой заработной платы';uk='Розрахунок виконаний виходячи з годинної заробітної плати'",КодЯзыкаПечать);
			Иначе
				УчтеноВремени				= ДанныеДокумента.РеквизитыДокумента.НормаВДнях;
				ОписаниеСреднегоЗаработка	= НСтр("ru='Расчет выполнен исходя из дневной заработной платы';uk='Розрахунок виконаний виходячи з денної заробітної плати'",КодЯзыкаПечать);
			КонецЕсли;
			ЗначенияПараметров.Вставить("УчтеноВремени", 			 УчтеноВремени);
			ЗначенияПараметров.Вставить("ОписаниеСреднегоЗаработка", ОписаниеСреднегоЗаработка);
			ЗначенияПараметров.Вставить("СреднедневнойЗаработок", 	 УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ЗначенияПараметров.УчтеноЗаработок, ЗначенияПараметров.УчтеноВремени));	
		Иначе
			ЗначенияПараметров.Вставить("Заработок", 				СводнаяТаблица.Итог("Заработок"));	
			ЗначенияПараметров.Вставить("Премии", 					СводнаяТаблица.Итог("Премии"));	
			ЗначенияПараметров.Вставить("УчтеноЗаработок", 			ЗначенияПараметров.Заработок + ЗначенияПараметров.Премии);	
			ЗначенияПараметров.Вставить("УчтеноВремени", 			СводнаяТаблица.Итог("Время"));	
			ЗначенияПараметров.Вставить("СреднедневнойЗаработок", 	УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ЗначенияПараметров.УчтеноЗаработок, ЗначенияПараметров.УчтеноВремени));	
			Если ДанныеДокумента.РеквизитыДокумента.ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОписаниеСреднегоЗаработка	= НСтр("ru='Среднечасовая (по рабочим часам)';uk='Середньогодинна (по робочих годинах)'",КодЯзыкаПечать);
			Иначе
				ОписаниеСреднегоЗаработка	= НСтр("ru='Среднедневная (по рабочим дням)';uk='Середньоденна (по робочих днях)'",КодЯзыкаПечать);
			КонецЕсли;
			ЗначенияПараметров.Вставить("ОписаниеСреднегоЗаработка", ОписаниеСреднегоЗаработка);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбластиМакета.ОбластьПодвалКомпактный.Параметры, ЗначенияПараметров);
		ТабличныйДокумент.Вывести(ОбластиМакета.ОбластьПодвалКомпактный);
		
		ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.РеквизитыДокумента.Ссылка, ДанныеДокумента.РеквизитыДокумента.Сотрудник);
	КонецЦикла;
	
КонецПроцедуры 

Функция СводнаяТаблицаЗаработкаИВремени(Заработок, Время)
	
	СводнаяТаблица = Новый ТаблицаЗначений;
	СводнаяТаблица.Колонки.Добавить("Месяц", 		Новый ОписаниеТипов("Дата"));
	СводнаяТаблица.Колонки.Добавить("Заработок", 	Новый ОписаниеТипов("Число"));
	СводнаяТаблица.Колонки.Добавить("Премии", 		Новый ОписаниеТипов("Число"));
	СводнаяТаблица.Колонки.Добавить("Время", 		Новый ОписаниеТипов("Число"));
	
	Для каждого Строка Из Заработок Цикл
		НоваяСтрока 			= СводнаяТаблица.Добавить();
		НоваяСтрока.Месяц 		= Строка.Месяц;
		Если Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.Премии().Найти(Строка.СоставнаяЧасть) <> Неопределено Тогда
			НоваяСтрока.Премии 		= Строка.Учтено;
		Иначе
			НоваяСтрока.Заработок 	= Строка.Учтено;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Строка Из Время Цикл
		НоваяСтрока 		= СводнаяТаблица.Добавить();
		НоваяСтрока.Месяц 	= Строка.Месяц;
		НоваяСтрока.Время 	= Строка.Учтено;
	КонецЦикла;
	
	СводнаяТаблица.Свернуть("Месяц", "Заработок,Премии,Время");
	СводнаяТаблица.Сортировать("Месяц");
	
	Возврат СводнаяТаблица;
	
КонецФункции

Функция ОбластиМакетаСреднегоЗаработкаКомпактный(ОплатитьПоДаннымФОТ, КодЯзыкаПечать)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьРасчетаСреднегоЗаработка.ПФ_MXL_РасчетСреднегоЗаработка",КодЯзыкаПечать);
	
	ОбластиМакета = Новый Структура;
	Если ОплатитьПоДаннымФОТ = Истина Тогда
		ОбластиМакета.Вставить("ОбластьШапкаКомпактный",  Макет.ПолучитьОбласть("ПоДаннымФОТШапка"));
		ОбластиМакета.Вставить("ОбластьСтрокаКомпактный", Макет.ПолучитьОбласть("ПоДаннымФОТСтрока"));
		ОбластиМакета.Вставить("ОбластьПодвалКомпактный", Макет.ПолучитьОбласть("ПоДаннымФОТРасшифровка"));
	Иначе
		ОбластиМакета.Вставить("ОбластьШапкаКомпактный",  Макет.ПолучитьОбласть("ШапкаКомпактный"));
		ОбластиМакета.Вставить("ОбластьСтрокаКомпактный", Макет.ПолучитьОбласть("СтрокаКомпактный"));
		ОбластиМакета.Вставить("ОбластьПодвалКомпактный", Макет.ПолучитьОбласть("ПодвалКомпактный"));
	КонецЕсли;
	
	Возврат ОбластиМакета;	
	
КонецФункции 
	
#КонецОбласти

Функция НазваниеЕдиницыИзмеренияВремени(ИспользоватьСреднеЧасовойЗаработок)
	Возврат ?(ИспользоватьСреднеЧасовойЗаработок, НСтр("ru='часов';uk='годин'"), НСтр("ru='дней';uk='днів'"));
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Если МассивСтруктур.Количество() = 0 Тогда
		Возврат ТаблицаЗначений;
	КонецЕсли;
	
	Для каждого Свойство Из МассивСтруктур[0] Цикл
		ТаблицаЗначений.Колонки.Добавить(Свойство.Ключ);
	КонецЦикла;
	
	Для каждого Элемент Из МассивСтруктур Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(), Элемент);
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура УстановитьНомерРазделаВОбласти(НомерРаздела, Область)
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("НомерРаздела", НомерРаздела);
	ЗаполнитьЗначенияСвойств(Область.Параметры, ЗначенияПараметров);
	НомерРаздела = НомерРаздела + 1;
КонецПроцедуры

Функция ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка() Экспорт 
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("РеквизитыДокумента", 			ПустаяСтруктураРеквизитовДокументаДляПечатиСреднегоЗаработка());
	СтруктураДанных.Вставить("КадровыеДанныеСотрудника", 	ПустаяСтруктураКадровыхДанныхСотрудникаДляПечатиСреднегоЗаработка());
	СтруктураДанных.Вставить("ПараметрыРасчета", 			ПустаяСтруктураПараметровРасчетаСреднегоЗаработка());
	СтруктураДанных.Вставить("ДанныеРасчетаСреднего", 		Новый Массив); 
	СтруктураДанных.Вставить("ДанныеНачислений", 			);
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПустаяСтруктураРеквизитовДокументаДляПечатиСреднегоЗаработка()
	
	ПустаяСтруктура = Новый Структура;
	
	ПустаяСтруктура.Вставить("Ссылка");
	ПустаяСтруктура.Вставить("Организация");
	ПустаяСтруктура.Вставить("Сотрудник");
	ПустаяСтруктура.Вставить("ПолноеНаименованиеОрганизации");
	ПустаяСтруктура.Вставить("НаименованиеОрганизации");
	ПустаяСтруктура.Вставить("КодПоОКПО");
	ПустаяСтруктура.Вставить("ИНН");
	ПустаяСтруктура.Вставить("КПП");
	ПустаяСтруктура.Вставить("НомерДокумента");
	ПустаяСтруктура.Вставить("ДатаДокумента");
	ПустаяСтруктура.Вставить("ДатаНачалаОтсутствия");
	ПустаяСтруктура.Вставить("ДатаОкончанияОтсутствия");
	ПустаяСтруктура.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
	ПустаяСтруктура.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	ПустаяСтруктура.Вставить("Ответственный");
	ПустаяСтруктура.Вставить("ВидОтпуска");
		
	ПустаяСтруктура.Вставить("ВидУчетаВремениДляСредней");
	ПустаяСтруктура.Вставить("ОплатитьПоДаннымФОТ");
	ПустаяСтруктура.Вставить("НормаВДнях");
	ПустаяСтруктура.Вставить("НормаВЧасах");
	
	Возврат ПустаяСтруктура;

КонецФункции

Функция ПустаяСтруктураКадровыхДанныхСотрудникаДляПечатиСреднегоЗаработка()
	
	ПустаяСтруктура = Новый Структура;
	ПустаяСтруктура.Вставить("ФизическоеЛицо");
	ПустаяСтруктура.Вставить("ФИОПолные");
	ПустаяСтруктура.Вставить("ТабельныйНомер");
	ПустаяСтруктура.Вставить("Подразделение");
	ПустаяСтруктура.Вставить("Должность");
	ПустаяСтруктура.Вставить("ВидЗанятости");
	
	Возврат ПустаяСтруктура;

КонецФункции

Функция ПустаяСтруктураПараметровРасчетаСреднегоЗаработка()
	
	ПустаяСтруктура = Новый Структура;
	ПустаяСтруктура.Вставить("СпособРасчета");
	ПустаяСтруктура.Вставить("ИспользоватьСреднеЧасовойЗаработок");
	ПустаяСтруктура.Вставить("НачалоРасчетногоПериода");
	ПустаяСтруктура.Вставить("ОкончаниеРасчетногоПериода");
	
	Возврат ПустаяСтруктура;

КонецФункции

Функция ДанныеДокументовРасчетаСреднегоЗаработка(МассивСсылок)
	
	ДанныеДокументов = Новый Массив;
	
	ДокументыСгруппированныеПоТипам = ДокументыСгруппированныеПоТипам(МассивСсылок);
	
	Для каждого ОписаниеТипаДокумента Из ДокументыСгруппированныеПоТипам Цикл
		
		Менеджер = ОписаниеТипаДокумента.Ключ;
		МассивСсылок = ОписаниеТипаДокумента.Значение;
		
		ДанныеДокументовПоТипу = Менеджер.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеДокументов, ДанныеДокументовПоТипу);
	     		
	КонецЦикла;

	Возврат ДанныеДокументов
	
КонецФункции

#КонецОбласти



Функция ДокументыСгруппированныеПоТипам(МассивСсылок)
	
	ДокументыСгруппированныеПоТипам = Новый Соответствие;
	
	Для каждого Ссылка Из МассивСсылок Цикл
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
		
		МассивСсылок = ДокументыСгруппированныеПоТипам.Получить(Менеджер);
		
		Если МассивСсылок = Неопределено Тогда
			ДокументыСгруппированныеПоТипам.Вставить(Менеджер, Новый Массив);
			МассивСсылок = ДокументыСгруппированныеПоТипам.Получить(Менеджер);
		КонецЕсли;
		
		МассивСсылок.Добавить(Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументыСгруппированныеПоТипам;
	
КонецФункции

#Область ИменованиеОбластейДляНавигацииПоТабличномуДокументу

// Задает область печати объекта в табличном документе.
// Применяется для связывания области в табличном документе, с объектом печати (ссылка).
// Необходимо вызывать при формировании очередной области печатной формы в табличном
// документе.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма;
//  НомерСтрокиНачало - Число - позиция начала очередной области в документе;
//  ОбъектыПечати - СписокЗначений - список объектов печати;
//  Ссылка - ЛюбаяСсылка - объект печати.
Процедура ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка, Сотрудник) Экспорт
	
	Если ТипЗнч(ОбъектыПечати) = Тип("СписокЗначений") Тогда
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
	иначе
		ЗадатьОбластьПечатиВстраиваемойОбласти(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка, Сотрудник);		
	КонецЕсли;	
	
КонецПроцедуры

Функция ОбъектыПечатиДляВстраиваемыхОбластей() Экспорт
	ОбъектыПечати = Новый ТаблицаЗначений;
	ОбъектыПечати.Колонки.Добавить("Ссылка");
	ОбъектыПечати.Колонки.Добавить("Сотрудник");
	ОбъектыПечати.Колонки.Добавить("ИмяОбласти");
	Возврат ОбъектыПечати;
КонецФункции 

Функция ИмяВстраиваемойОбласти(ОбъектыПечати, Ссылка, Сотрудник = Неопределено) Экспорт
	
	ИмяВстраиваемойОбласти = Неопределено;
	ВстраиваемаяОбласть = ВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник);
	Если НЕ ВстраиваемаяОбласть = Неопределено Тогда
	   ИмяВстраиваемойОбласти = ВстраиваемаяОбласть.ИмяОбласти;
	КонецЕсли;
	
	Возврат ИмяВстраиваемойОбласти;
	
КонецФункции

Процедура ЗадатьОбластьПечатиВстраиваемойОбласти(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка, Сотрудник)
	
	Элемент = ВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник);
	Если Элемент = Неопределено Тогда
		Элемент = НоваяВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник);
		Элемент.ИмяОбласти = "Документ_" + Формат(ОбъектыПечати.Количество() + 1, "ЧН=; ЧГ=");
	КонецЕсли;
	
	НомерСтрокиОкончание = ТабличныйДокумент.ВысотаТаблицы;
	ТабличныйДокумент.Область(НомерСтрокиНачало, , НомерСтрокиОкончание, ).Имя = Элемент.ИмяОбласти;		
	
КонецПроцедуры

Функция ВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник = Неопределено)
	
	ВстраиваемаяОбласть = Неопределено;
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ВстраиваемаяОбласть;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ссылка", Ссылка);
	Если НЕ Сотрудник = Неопределено Тогда
		Отбор.Вставить("Сотрудник", Сотрудник);
	КонецЕсли;
	
	СтрокиПоОтбору = ОбъектыПечати.НайтиСтроки(Отбор);
	Если СтрокиПоОтбору.Количество() > 0 Тогда
		ВстраиваемаяОбласть = СтрокиПоОтбору[0];
	КонецЕсли;
	
	Возврат ВстраиваемаяОбласть;

КонецФункции

Функция НоваяВстраиваемаяОбласть(ОбъектыПечати, Ссылка, Сотрудник)
	НоваяВстраиваемаяОбласть = ОбъектыПечати.Добавить();
	НоваяВстраиваемаяОбласть.Ссылка = Ссылка;
	НоваяВстраиваемаяОбласть.Сотрудник = Сотрудник;
	Возврат НоваяВстраиваемаяОбласть;	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли