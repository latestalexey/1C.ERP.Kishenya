&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ЗначениеПустаяДата Экспорт;

&НаКлиенте
Перем одТипУзлаXML_КонецЭлемента  Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("АвтоТестОбмена", АвтоТестОбмена) Тогда
		Если НЕ Параметры.Свойство("ИмяФайлаДанных", Объект.ИмяФайлаДанных)
			И НЕ (Параметры.Свойство("ПутьКБазе", Объект.ПутьКБазе)
				И Параметры.Свойство("АутентификацияWindowsИнформационнойБазыДляПодключения", Объект.АутентификацияWindowsИнформационнойБазыДляПодключения)
				И Параметры.Свойство("ПользовательИнформационнойБазыДляПодключения", Объект.ПользовательИнформационнойБазыДляПодключения)
				И Параметры.Свойство("ПарольИнформационнойБазыДляПодключения", Объект.ПарольИнформационнойБазыДляПодключения)) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	РазделениеВключено                                = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	ЗагрузитьБазовуюНСИ                               = Истина;
	ЗагрузитьДанныеМеждународногоУчетаИБюджетирования = Ложь;
	ЗагрузитьДанныеУпрУчета                           = Истина;
	ЗагрузитьРеглУчет                                 = Истина;
	ЗагрузитьЗУП                                      = Истина;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СтрокаВерсия = Лев(СистемнаяИнформация.ВерсияПриложения,3);
	ПлатформаWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
						ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
	
	Если Не ПлатформаWindows Или Объект.ТаблицаПути.Количество() = 0 Тогда
		ПеренумероватьЗаголовкиШагов("Файл");
	КонецЕсли;
	
	Объект.ВерсияПлатформыИнформационнойБазыДляПодключения = "V" + СтрЗаменить(СтрокаВерсия, ".", "");
	Объект.МетаданныеИмя                  = Метаданные.Имя;
	Объект.ИспользоватьМногооборотнуюТару = Истина;
	Объект.ВыгружатьСерии                 = Истина;
	Объект.СворачиватьХарактеристики      = Истина;
	Объект.ДатаОстатков                   = НачалоГода(ТекущаяДатаСеанса());
		
	Элементы.ДекорацияНазваниеКонфигурацииПриемника.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.ДекорацияНазваниеКонфигурацииПриемника.Заголовок, Метаданные.Синоним);
		
	Элементы.ДекорацияНазваниеКонфигурацииПриемникаИзФайла.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.ДекорацияНазваниеКонфигурацииПриемникаИзФайла.Заголовок,
																Метаданные.Синоним);
		
	ПериодГод = Год(ТекущаяДатаСеанса()) - 2;
	ПериодГодСтрока = Формат(ПериодГод, "ЧГ=0");
	
	Объект.КонфигурацияИсточник = Параметры.КонфигурацияИсточник;
	Объект.КонфигурацияПриемник = Метаданные.Имя;
	НаименованиеКонфигурацииИсточника = НСтр("ru='""Управление производственным предприятием для Украины"", ред.1.3';uk='""Управління виробничим підприємством для України"", ред. 1.3'");
		
	Элементы.НаименованиеВалютыПредставленияМСФО.Видимость = ?(Объект.КонфигурацияИсточник = "УПП", Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьЗаголовкиШагов(ВариантВыгрузки)
	
	Если ВариантВыгрузки = "Файл" Тогда 
		
		Элементы.ГруппаВыгрузка.Видимость = Ложь;
		
		Если Не ПлатформаWindows Тогда
			Элементы.ДекорацияШаг2.Заголовок = НСтр("ru='Шаг 1. Выбор файла с данными';uk='Крок 1. Вибір файлу з даними'");
			Элементы.ДекорацияШаг5.Заголовок = НСтр("ru='Шаг 2. Загрузка данных в информационную базу';uk='Крок 2. Завантаження даних в інформаційну базу'");
		Иначе
			Элементы.ДекорацияШаг2.Заголовок = НСтр("ru='Шаг 2. Выбор файла с данными';uk='Крок 2. Вибір файлу з даними'");
			Элементы.ДекорацияШаг5.Заголовок = НСтр("ru='Шаг 3. Загрузка данных в информационную базу';uk='Крок 3. Завантаження даних в інформаційну базу'");
		КонецЕсли;
	Иначе
		
		Элементы.ГруппаВыгрузка.Видимость = Истина;
		
		Если Не ПлатформаWindows Тогда
			Элементы.ДекорацияШаг2.Заголовок = НСтр("ru='Шаг 4. Выбор файла с данными';uk='Крок 4. Вибір файлу з даними'");
			Элементы.ДекорацияШаг5.Заголовок = НСтр("ru='Шаг 5. Выгрузка и загрузка данных в информационную базу';uk='Крок 5. Вивантаження і завантаження даних в інформаційну базу'");
		Иначе
			Элементы.ДекорацияШаг2.Заголовок = НСтр("ru='Шаг 5. Выбор файла с данными';uk='Крок 5. Вибір файлу з даними'");
			Элементы.ДекорацияШаг5.Заголовок = НСтр("ru='Шаг 6. Выгрузка и загрузка данных в информационную базу';uk='Крок 6. Вивантаження і завантаження даних в інформаційну базу'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
 	Если Объект.МетаданныеИмя <> "BASERP" Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Данная обработка предназначена для запуска в программе 
            |""BAS ERP"", ред.2.1'
            |;uk='Ця обробка призначена для запуску в програмі 
            |""BAS ERP"", ред. 2.1'"));
		Отказ = Истина;
	КонецЕсли;
	
	СтатусВыполненнойЗагрузки = Ложь;
	
	ТекстОшибки = РезультатПолученияСпискаИБ();

	// Устанавливаем текущую таблицу переходов
	Если НЕ РазделениеВключено И ПлатформаWindows Тогда
		
		Если Объект.ТаблицаПути.Количество() > 0 Тогда
			ТаблицаПереходовПоСценарию();
		Иначе
			ТаблицаПереходовПоСценариюОСLinux();
		КонецЕсли;
	Иначе
		ТаблицаПереходовПоСценариюОСLinux();
	КонецЕсли;
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
	Элементы.Декорация1_4.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.Декорация1_4.Заголовок, НаименованиеКонфигурацииИсточника);
	Элементы.Декорация1_7.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Элементы.Декорация1_7.Заголовок, НаименованиеКонфигурацииИсточника);
	
	Если АвтоТестОбмена Тогда
		#Если ВебКлиент Тогда
			ТекстСообщения = НСтр("ru='Автотест переноса данных не может выполняться в режиме Веб-клиента.';uk='Автотест перенесення даних не може виконуватися в режимі Веб-клієнта.'");
			ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения);
			АвтотестЗавершить();
		#Иначе
			Автотест();
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыДиалога = Новый Структура("Заголовок, Фильтр", НСтр("ru='Выберите путь к файлу выгрузки данных';uk='Виберіть шлях до файлу вивантаження даних'"), 
														"ZIP-файл (*.zip)|*.zip");
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",               Объект);
	ДополнительныеПараметры.Вставить("ИмяСвойства",          "ИмяФайлаДанных");
	ДополнительныеПараметры.Вставить("ПараметрыДиалога",     ПараметрыДиалога);
	
	ПроверитьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры, "ОбработчикВыбораФайлаЗавершение");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОшибкиНажатие(Элемент)
	
	ПодготовитьОтчетОбОшибках();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗагрузкаИзФайлаНажатие(Элемент)
	
	РезультатПолученияСпискаИБ();
	ПеренумероватьЗаголовкиШагов("Файл");
	ИзменитьПорядковыйНомерПерехода(+2);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрямоеПодключениеНажатие(Элемент)
	
	ПеренумероватьЗаголовкиШагов("ПрямоеПодключение");
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитовПрямогоПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитовПрямогоПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПутиПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТаблицаПути.ТекущиеДанные <> Неопределено Тогда
		ИмяИБ = Элементы.ТаблицаПути.ТекущиеДанные.Имя + " (" + Элементы.ТаблицаПути.ТекущиеДанные.Путь + ")";
	КонецЕсли;
	
КонецПроцедуры

#Область РазделОбработчиковСобытийПерехода

// Обработчик выполняется при открытии страницы помощника "СтраницаПриветствие"
//
// Параметры:
//
//Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад
&НаКлиенте
Функция Подключаемый_СтраницаПриветствие_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если НЕ АвтоТестОбмена Тогда
		Элементы.КомандаДалее.КнопкаПоУмолчанию = Истина;
		Объект.ПутьКБазе = "";
		Объект.ТаблицаПути.Очистить();
		ТаблицаОшибок.Очистить();
	КонецЕсли;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаОжидания"
//
// Параметры:
//
//  Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад.
//
// Логика данного обработчика пропускает отображение
// страницы помощника "СтраницаОжидания", если выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ИнициализацияПеременных();
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжидания;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаНСИ"
//
// Параметры:
//
//Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад
&НаКлиенте
Функция Подключаемый_СтраницаНСИ_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
	ИначеЕсли ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда
		Элементы.КомандаДалее2.КнопкаПоУмолчанию = Истина;
		Если ДеревоОсновныхПравил.ПолучитьЭлементы().Количество() = 0 Тогда
			ЗагрузитьПравилаОбмена("ДеревоОсновныхПравил", "ПравилаОбмена");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаВыборОрганизаций_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкиИзФайла_ПриПереходеНазад(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда // тогда надо на Шаг 1 попасть
		ПорядковыйНомерПерехода = ПорядковыйНомерПерехода - 1;
	КонецЕсли;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаЗУП"
//
// Параметры:
//
//Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад
&НаКлиенте
Функция Подключаемый_СтраницаЗУП_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда
		ИзменитьПорядковыйНомерПерехода(-1);
	Иначе
		Элементы.КомандаДалее4.КнопкаПоУмолчанию = Истина;
		
		Если ДеревоПравилЗУП.ПолучитьЭлементы().Количество() = 0 Тогда
			ЗагрузитьПравилаОбмена("ДеревоПравилЗУП", "ПравилаОбменаЗУП");
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаПодключенияНапрямую"
//
// Параметры:
//
//Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад
&НаКлиенте
Функция Подключаемый_СтраницаПодключенияНапрямую_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ПропуститьСтраницу = АвтоТестОбмена;
	
	РезультатПолученияСпискаИБ();
	
	Если Объект.ТаблицаПути.Количество() = 0 Тогда
		Элементы.Проверить.Доступность = Ложь;
	ИначеЕсли Объект.ПутьКБазе <> "" Тогда
		ПараметрыОтбора = Новый Структура("Путь", Объект.ПутьКБазе);
		НайденныеСтроки = Объект.ТаблицаПути.НайтиСтроки(ПараметрыОтбора);
		Элементы.ТаблицаПути.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Элементы.КомандаДалее2.КнопкаПоУмолчанию = Истина;
	УстановитьВидимостьРеквизитовПрямогоПодключения();
	СписокЭтаповВыгрузки = Новый СписокЗначений;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаПодключенияНапрямую"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПодключенияНапрямую_ПриПереходеДалее(Отказ)
	
	Если Элементы.ТаблицаПути.ТекущиеДанные <> Неопределено Тогда
		ЭтапКонвертации = НСтр("ru='Подключение к информационной базе';uk='Підключення до інформаційної бази'");
		РезультатПопыткиПодключения = ПроверитьПодключениеКИБ();
		Если РезультатПопыткиПодключения = НСтр("ru='Успех';uk='Успіх'") Тогда
			ДеревоОсновныхПравил.ПолучитьЭлементы().Очистить();
			ДеревоПравилЗУП.ПолучитьЭлементы().Очистить();
			ТаблицаОрганизаций.Очистить();
			
			ПорядковыйНомерПерехода = ПорядковыйНомерПерехода + 1;
			
			ЗагрузитьПравилаОбмена("ДеревоОсновныхПравил", "ПравилаОбмена");
		Иначе
			Если РезультатПопыткиПодключения = НСтр("ru='Ошибка подключения';uk='Помилка підключення'") Тогда
				ПоказатьПредупреждение(Неопределено, НСтр("ru='Не удалось подключиться к информационной базе';uk='Не вдалося підключитися до інформаційної бази'"));
			ИначеЕсли РезультатПопыткиПодключения = НСтр("ru='Ошибка - не та конфигурация';uk='Помилка - не та конфігурація'") Тогда
				ПоказатьПредупреждение(Неопределено, НСтр("ru  = 'Выбранная информационная база не является конфигурацией 
					|""Управление производственным предприятием для Украины"". Выберите требуемую конфигурацию'"));
			КонецЕсли;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаПодключенияНапрямую"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаПодключенияНапрямую_ПриПереходеНазад(Отказ)
	
	Если НЕ АвтоТестОбмена Тогда
		Объект.ПутьКБазе = "";
		Объект.ТаблицаПути.Очистить();
	КонецЕсли;
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаЗагрузкиИзФайла"
//
// Параметры:
//
//Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад
&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкиИзФайла_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда
		СписокЭтаповВыгрузки = Новый СписокЗначений;
	Иначе
		ИзменитьПорядковыйНомерПерехода(-1);
	КонецЕсли;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаЗагрузкиИзФайла"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкиИзФайла_ПриПереходеДалее(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.ИмяФайлаДанных) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Необходимо выбрать файл для загрузки данных';uk='Необхідно вибрати файл для завантаження даних'"));
		Отказ = Истина;
	Иначе
		Если ТаблицаОрганизаций.Количество() > 1 Тогда
			ИзменитьПорядковыйНомерПерехода(+3);
		Иначе
			ИзменитьПорядковыйНомерПерехода(+2);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПриПереходеНазад(Отказ)
	
	ТаблицаОшибок.Очистить();
	
КонецФункции

#КонецОбласти

#Область РазделИнициализацииПереходовПомощника

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	Если ТаблицаОрганизаций.Количество() > 1 Тогда
		
		ТаблицаПереходовНоваяСтрока(1, "СтраницаНачало", "СтраницаНавигацииНачало", "СтраницаДекорации", 
									"СтраницаПриветствие_ПриОткрытии", "");
		ТаблицаПереходовНоваяСтрока(2, "СтраницаПодключенияНапрямую", "СтраницаНавигацииНазадДалее", "СтраницаДекорации", 
									"СтраницаПодключенияНапрямую_ПриОткрытии","СтраницаПодключенияНапрямую_ПриПереходеДалее",
									"СтраницаПодключенияНапрямую_ПриПереходеНазад");
		ТаблицаПереходовНоваяСтрока(3, "СтраницаЗагрузкиИзФайла", "СтраницаНавигацииНазадДалее", "СтраницаДекорации", 
									"СтраницаЗагрузкиИзФайла_ПриОткрытии", "СтраницаЗагрузкиИзфайла_ПриПереходеДалее", 
									"СтраницаЗагрузкиИзФайла_ПриПереходеНазад");
		ТаблицаПереходовНоваяСтрока(4, "СтраницаВыборОрганизаций", "СтраницаНавигацииНазадДалее", "СтраницаДекорации", 
									"СтраницаВыборОрганизаций_ПриОткрытии", "", "");
		ТаблицаПереходовНоваяСтрока(5, "СтраницаНСИ", "СтраницаНавигацииНазадДалее",  "СтраницаДекорации", 
									"СтраницаНСИ_ПриОткрытии", "","");
		ТаблицаПереходовНоваяСтрока(6, "СтраницаЗУП", "СтраницаНавигацииЗагрузить", "СтраницаДекорации", 
									"СтраницаЗУП_ПриОткрытии", "");
		ТаблицаПереходовНоваяСтрока(7, "СтраницаОжидания", "СтраницаНавигацииОкончание", "СтраницаДекорации", 
									"СтраницаОжидания_ПриОткрытии", "", "СтраницаОжидания_ПриПереходеНазад");
		
	Иначе
	
		ТаблицаПереходовНоваяСтрока(1, "СтраницаНачало", "СтраницаНавигацииНачало", "СтраницаДекорации", 
									"СтраницаПриветствие_ПриОткрытии", "");
		ТаблицаПереходовНоваяСтрока(2, "СтраницаПодключенияНапрямую", "СтраницаНавигацииНазадДалее", "СтраницаДекорации", 
									"СтраницаПодключенияНапрямую_ПриОткрытии","СтраницаПодключенияНапрямую_ПриПереходеДалее",
									"СтраницаПодключенияНапрямую_ПриПереходеНазад");
		ТаблицаПереходовНоваяСтрока(3, "СтраницаЗагрузкиИзФайла", "СтраницаНавигацииНазадДалее", "СтраницаДекорации", 
									"СтраницаЗагрузкиИзФайла_ПриОткрытии", "СтраницаЗагрузкиИзфайла_ПриПереходеДалее", 
									"СтраницаЗагрузкиИзФайла_ПриПереходеНазад");
		ТаблицаПереходовНоваяСтрока(4, "СтраницаНСИ", "СтраницаНавигацииНазадДалее",  "СтраницаДекорации", 
									"СтраницаНСИ_ПриОткрытии", "","");
		ТаблицаПереходовНоваяСтрока(5, "СтраницаЗУП", "СтраницаНавигацииЗагрузить", "СтраницаДекорации", 
									"СтраницаЗУП_ПриОткрытии", "");
		ТаблицаПереходовНоваяСтрока(6, "СтраницаОжидания", "СтраницаНавигацииОкончание", "СтраницаДекорации", 
									"СтраницаОжидания_ПриОткрытии", "", "СтраницаОжидания_ПриПереходеНазад");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПереходовПоСценариюОСLinux()
	
	ТаблицаПереходов.Очистить();
	ТаблицаОрганизаций.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаЗагрузкиИзФайла", "СтраницаНавигацииЗагрузить", "СтраницаДекорации", 
								"СтраницаЗагрузкиИзФайла_ПриОткрытии", "СтраницаЗагрузкиИзфайла_ПриПереходеДалее", 
								"СтраницаЗагрузкиИзФайла_ПриПереходеНазад");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаНСИ", "СтраницаНавигацииНазадДалее",  "СтраницаДекорации", 
								"СтраницаНСИ_ПриОткрытии", "","");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаЗУП", "СтраницаНавигацииЗагрузить", "СтраницаДекорации", 
								"СтраницаЗУП_ПриОткрытии", "");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаОжидания", "СтраницаНавигацииОкончание", "СтраницаДекорации", 
								"СтраницаОжидания_ПриОткрытии", "", "СтраницаОжидания_ПриПереходеНазад");
		
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) – Число. Порядковый номер перехода, который соответствует текущему шагу 
//  перехода
//  ИмяОсновнойСтраницы (обязательный) – Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему 
//  номеру перехода
//  ИмяСтраницыНавигации (обязательный) – Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему 
//  номеру перехода
//  ИмяСтраницыДекорации (необязательный) – Строка. Имя страницы панели "ПанельДекорации", которая соответствует 
//  текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) – Строка. Имя функции-обработчика события открытия текущей страницы 
//  помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) – Строка. Имя функции-обработчика события перехода на следующую 
//  страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) – Строка. Имя функции-обработчика события перехода на предыдущую 
//  страницу помощника
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = ""
									)
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	ПорядковыйНомерПерехода = Значение;
	Если ПорядковыйНомерПерехода < 0 Тогда
		ПорядковыйНомерПерехода = 0;
	КонецЕсли;
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее И ПорядковыйНомерПерехода <> 1 Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", 
															ПорядковыйНомерПерехода - 1));
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			Попытка
				А = Вычислить(ИмяПроцедуры);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", 
														ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Попытка
				А = Вычислить(ИмяПроцедуры);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецПопытки;
			
			Если Отказ Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", 
														ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Попытка
			А = Вычислить(ИмяПроцедуры);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
		КонецПопытки;
		
		Если Отказ Тогда
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			Возврат;
		ИначеЕсли ПропуститьСтраницу Тогда
			Если ЭтоПереходДалее Тогда
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				Возврат;
			Иначе
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", 
															ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если СтрокаПереходаТекущая.ИмяОсновнойСтраницы = "СтраницаОжидания" И СписокЭтаповВыгрузки.Количество() = 0
		И НЕ ВыполняетсяПомещениеФайлов Тогда
		ПодключитьОбработчикОжидания("ВыгрузкаЗагрузкаДанныхНачать", 0.1, Истина);
		Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжидания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОсновныхПравил

&НаКлиенте
Процедура ДеревоОсновныхПравилОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоОсновныхПравил.ТекущиеДанные;
	Если ТекущиеДанные.Наименование = НСтр("ru='Настройки параметров учета';uk='Настройки параметрів обліку'") Тогда
		ТекущиеДанные.Отметка = Истина;
	КонецЕсли;	
	ПроставитьОтметкиВверхВниз(ТекущиеДанные);	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПравилЗУП

&НаКлиенте
Процедура ДеревоЗУПОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПравилЗУП.ТекущиеДанные;
	ПроставитьОтметкиВверхВниз(ТекущиеДанные);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница <> Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаНачало Тогда
		ИзменитьПорядковыйНомерПерехода(+1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	Если Объект.ТаблицаПути.Количество() > 0 Тогда
		Ответ = ПроверитьПодключениеКИБ();
		Если Ответ = НСтр("ru='Ошибка подключения';uk='Помилка підключення'") Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Не удалось подключиться к информационной базе.';uk='Не вдалося підключитися до інформаційної бази.'"));
		ИначеЕсли Ответ = НСтр("ru='Ошибка - не та конфигурация';uk='Помилка - не та конфігурація'") Тогда
			ТекстПредупреждения = НСтр("ru='Выбранная информационная база не является программой 
                |%1. Выберите другую информационную базу.'
                |;uk='Обрана інформаційна база не є програмою 
                |%1. Виберіть іншу інформаційну базу.'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстПредупреждения, НаименованиеКонфигурацииИсточника);
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		ИначеЕсли Ответ = НСтр("ru='Текущая версия правил предназначена для релиза конфигурации не ниже %1';uk='Поточна версія правил призначена для релізу конфігурації не нижче %1'") Тогда
			ПоказатьПредупреждение(Неопределено, Ответ);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru='Подключение успешно установлено.';uk='Підключення успішно встановлене.'"));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Выберите базу из списка для подключения.';uk='Виберіть базу зі списку для підключення.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	УстановитьДляВсехПометку(1);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	УстановитьДляВсехПометку(0);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ИнициализацияПеременных()
	
	ОписаниеЭтапов = Новый Соответствие;
	ОписаниеЭтапов.Вставить(2, "Выгрузка");
	ОписаниеЭтапов.Вставить(3, "Загрузка");
	ОписаниеЭтапов.Вставить(4, "Проверка");
	
	Этапы = Новый ФиксированноеСоответствие(ОписаниеЭтапов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьОшибкиФайлаПротокола(ИмяФайлаПротокола)
	
	ОбработатьФайлПротокола(ИмяФайлаПротокола);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьФайлПротокола(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	ФайлПротокола = Новый ТекстовыйДокумент;
	ФайлПротокола.Прочитать(ИмяФайла);
	
	Если АвтоТестОбмена Тогда
		ТекстПротокола = ФайлПротокола.ПолучитьТекст();
		Разделитель = ?(Найти(ТекстПротокола, "Ошибка!") > 0, "Ошибка!", "Ошибка.");
		МассивОшибок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПротокола, Разделитель, Истина);
		Для Каждого ОписаниеОшибки Из МассивОшибок Цикл
			ЗафиксироватьОшибку(ЭтаФорма, ОписаниеОшибки, "");
		КонецЦикла;
	Иначе
		Для Номер = 1 По ФайлПротокола.КоличествоСтрок() Цикл
			СтрокаРезультата = ФайлПротокола.ПолучитьСтроку(Номер);
			
			Если (ПустаяСтрока(СтрокаРезультата))
				Или СокрЛП(СтрокаРезультата) = ""
				Или СтрНайти(СтрокаРезультата, НСтр("ru='Начало выгрузки';uk='Початок вивантаження'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='ПРАВИЛО ВЫГРУЗКИ ДАННЫХ';uk='ПРАВИЛО ВИВАНТАЖЕННЯ ДАНИХ'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='ВЫГРУЗКА ОБЪЕКТА';uk='ВИВАНТАЖЕННЯ ОБ''ЄКТА'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='Конвертация объекта';uk='Конвертація об''єкта'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='Ошибка.';uk='Помилка.'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='Окончание выгрузки';uk='Закінчення вивантаження'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='Ошибка!!!';uk='Помилка!!!'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='ИмяПКО';uk='ИмяПКО'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='ТипОбъекта';uk='ТипОбъекта'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='КодСообщения';uk='КодСообщения'")) > 0
				Или СтрНайти(СтрокаРезультата, НСтр("ru='Загрузка объекта';uk='Завантаження об''єкта'")) > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОшибок = СтрокаРезультата;
			ЗафиксироватьОшибку(ЭтаФорма, ТекстОшибок, "", Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбработкуЗагрузитьПравила(ИБИсточник, ИмяФайлаПравил, ИмяФайлаПротокола = "")
	
	ОбработкаОбмена = ИБИсточник.Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена                           = "Выгрузка";
	ОбработкаОбмена.ИмяФайлаПравилОбмена                  = ИмяФайлаПравил;
	ОбработкаОбмена.РежимОтладкиАлгоритмов                = 1;
	ОбработкаОбмена.ВыводВПротоколИнформационныхСообщений = НЕ АвтоТестОбмена;
	ОбработкаОбмена.ВыводВПротоколСообщенийОбОшибках      = Истина;

	Если ЗначениеЗаполнено(ИмяФайлаПротокола) Тогда
		ОбработкаОбмена.ИмяФайлаПротоколаОбмена = ИмяФайлаПротокола;
	КонецЕсли;
		
	ОбработкаОбмена.ЗагрузитьПравилаОбмена(ИмяФайлаПравил, "XMLФайл");
	
	Если Элементы.НаименованиеВалютыПредставленияМСФО.СписокВыбора.Количество() = 0 Тогда
		Выборка = ИБИсточник.Справочники.Валюты.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не Выборка.ПометкаУдаления Тогда
				Элементы.НаименованиеВалютыПредставленияМСФО.СписокВыбора.Добавить(Выборка.Наименование);
			КонецЕсли;
		КонецЦикла;
		Если Объект.КонфигурацияИсточник = "УПП" Тогда
			Объект.НаименованиеВалютыПредставленияМСФО = ИБИсточник.Константы.ВалютаМеждународногоУчета.Получить().Наименование;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбмена.Параметры, Объект);
	
	Если ОбработкаОбмена.Параметры.Свойство("ДатаНачалаПереносаРасчетныхДанных") Тогда
		ОбработкаОбмена.Параметры.ДатаНачалаПереносаРасчетныхДанных = Дата(ПериодГод, 1, 1);
	КонецЕсли;
	Если ОбработкаОбмена.Параметры.Свойство("МесяцНачалаЭксплуатации") Тогда
		ОбработкаОбмена.Параметры.МесяцНачалаЭксплуатации = НачалоДня(Объект.ДатаОстатков);
	КонецЕсли;
	Если ОбработкаОбмена.Параметры.Свойство("ПереноситьНачисленияПредыдущейПрограммы") Тогда
		ОбработкаОбмена.Параметры.ПереноситьНачисленияПредыдущейПрограммы = ЛОЖЬ;
	КонецЕсли;

	Если ОбработкаОбмена.Параметры.Свойство("Организации") Тогда
		ЕстьОтключенные = Ложь;
		Массив = Новый Массив;
		Для Каждого Строка Из ТаблицаОрганизаций Цикл
			
			Если Строка.Отметка Тогда
				Массив.Добавить(Строка.Организация);
			КонецЕсли;
			Если Не ЕстьОтключенные И Не Строка.Отметка Тогда
				ЕстьОтключенные = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОтключенные Тогда
			ОбработкаОбмена.Параметры.Организации = Массив;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбработкаОбмена;
	
КонецФункции

&НаСервере
Функция ОпределитьКонфигурациюИПолучитьФайлы(НомерРелизаКонфигурации, ИмяКонвертацияПравила,
											ИмяВременногоФайлаПравил, КаталогВыгрузкиЗагрузки,
											ИмяВременногоФайлаПротокола)
	
	ИмяВременногоФайлаПравил  = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайлаПравил = РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяКонвертацияПравила);
	ДвоичныеДанныеФайлаПравил.Записать(ИмяВременногоФайлаПравил);
	
	КаталогВыгрузкиЗагрузки  = КаталогВременныхФайлов();
	
	ИмяВременногоФайлаПротокола = ПолучитьИмяВременногоФайла("txt");
	
	ИзменитьТекстПравилПриНеобходимости(ИмяВременногоФайлаПравил, ИмяКонвертацияПравила, Объект.КонфигурацияИсточник, Объект.КонфигурацияПриемник);
	
	ФайлОбмена = Новый ЧтениеXML();
	ФайлОбмена.ОткрытьФайл(ИмяВременногоФайлаПравил);
	Пока ФайлОбмена.Прочитать() Цикл
		Если ФайлОбмена.ЛокальноеИмя = "Источник" Тогда
			НомерРелиза =  ФайлОбмена.ПолучитьАтрибут("ВерсияКонфигурации");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерРелизаКонфигурации, НомерРелиза) < 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Текущая версия правил предназначена для релиза конфигурации не ниже %1';uk='Поточна версія правил призначена для релізу конфігурації не нижче %1'"), НомерРелиза);
		
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, 
							НСтр("ru='Рекомендуется обновить релиз конфигурации информационной базы, 
                            |из которой производится перенос данных.'
                            |;uk='Рекомендується оновити реліз конфігурації інформаційної бази, 
                            |з якої виконується перенесення даних.'"));
							
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВыполнитьЗагрузкуДанныхНаСервере(СписокЭтаповВыгрузки, ПомещенныеФайлы, ЗагрузкаЧерезПодключениеКБазе)
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("СписокЭтаповВыгрузки", СписокЭтаповВыгрузки);
	ПараметрыВыгрузки.Вставить("ПомещенныеФайлы", ПомещенныеФайлы);
	ПараметрыВыгрузки.Вставить("ЗагрузкаЧерезПодключениеКБазе", ЗагрузкаЧерезПодключениеКБазе);

	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	ЗагрузитьДанныеВИБ(ПараметрыВыгрузки, АдресХранилища);
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено", Истина);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗафиксироватьОшибку(Форма, ТекстОшибки, ТекстРекомендации = "", ВажнаяОшибка = Истина)
	
	Этап = Форма.ЭтапКонвертации;
	Автотест = Форма.АвтоТестОбмена;
	Если ЗначениеЗаполнено(Этап) И НЕ Автотест ИЛИ Автотест И ВажнаяОшибка Тогда
		НоваяОшибка = Форма.ТаблицаОшибок.Добавить();
		НоваяОшибка.Этап			= Этап;
		НоваяОшибка.Ошибка			= ТекстОшибки;
		НоваяОшибка.Рекомендации	= ТекстРекомендации;
		НоваяОшибка.Расшифровка		= Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	ИмяЗакладки = "НеВыполняется";
	Если Состояние = "ВОчереди" Тогда
		НомерСостояния = 1;
	ИначеЕсли Состояние = "Выполняется" Тогда
		НомерСостояния = 2;
		ИмяЗакладки = "Выполняется";
	ИначеЕсли Состояние = "Ошибка" Тогда
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
	ИначеЕсли Состояние = "Успех" Тогда
		НомерСостояния = 4;
		ИмяЗакладки = "Выполнено";
	Иначе
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
	КонецЕсли;
		
	Если ОднаКартинка Тогда
		
		ЭтапСтрока = Этапы.Получить(Этап);
		Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
		Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];

	Иначе
		
		Для НомерКартинки = Этап По Этапы.Количество() Цикл
			ЭтапСтрока = Этапы.Получить(НомерКартинки+1);
			Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
			Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПравилаОбмена(ИмяДерева, ИмяПравилОбмена)

	Уид = Новый УникальныйИдентификатор();
	ИмяФайлаПравил = КаталогВременныхФайлов() + Уид + ".xml";
	
	МакетПравилОбмена = ПолучитьМакет(ИмяПравилОбмена);
	МакетПравилОбмена.Записать(ИмяФайлаПравил);
	ИзменитьТекстПравилПриНеобходимости(ИмяФайлаПравил, ИмяПравилОбмена, Объект.КонфигурацияИсточник, Объект.КонфигурацияПриемник);
	
	ОбъектБазы = ПолучитьНовыйCOMОбъект();
	ИБИсточник = ОбъектБазы.Connect(ПолучитьСтрокуПодключенияВыбраннойБазы());
	
	Обработка = ПолучитьОбработкуЗагрузитьПравила(ИБИсточник, ИмяФайлаПравил, );
	
	Если ТаблицаОрганизаций.Количество() = 0 Тогда
		ЗаполнитьТаблицуОрганизаций(ИБИсточник);
	КонецЕсли;
	
	ТаблицаПравилВыгрузки = Обработка.ТаблицаПравилВыгрузки.Скопировать();
	
	ДобавитьСтрокиВДеревоРекурсивно(ТаблицаПравилВыгрузки, ИмяДерева);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНовыйCOMОбъект()
	
	Возврат Новый COMОбъект(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИмяCOMСоединителя);
	
КонецФункции

&НаСервере
Функция ПолучитьМакет(Имя)
	 Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(Имя);
КонецФункции

&НаСервере
Функция ПолучитьСтрокуПодключенияВыбраннойБазы()
	
	Строка = Объект.ПутьКБазе;
	Если Не Объект.АутентификацияWindowsИнформационнойБазыДляПодключения Тогда
		Если ЗначениеЗаполнено(Объект.ПользовательИнформационнойБазыДляПодключения) Тогда
			Строка = Строка + ";Usr=""" + Объект.ПользовательИнформационнойБазыДляПодключения + """"; 
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ПарольИнформационнойБазыДляПодключения) Тогда
			Строка = Строка + ";Pwd=""" + Объект.ПарольИнформационнойБазыДляПодключения + """";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСтрокиВДеревоРекурсивно(Таблица, ИмяДерева, УровеньДерева=Неопределено)
	
	ЭтоВерхнийУровень = Ложь;
	Если УровеньДерева = Неопределено Тогда
		ЭтоВерхнийУровень = Истина;
		Если ИмяДерева = "ДеревоОсновныхПравил" Тогда
			УровеньДерева = ДеревоОсновныхПравил.ПолучитьЭлементы();
		ИначеЕсли ИмяДерева = "ДеревоПравилЗУП" Тогда
			УровеньДерева = ДеревоПравилЗУП.ПолучитьЭлементы();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из Таблица.Rows Цикл
		
		Если Строка.Наименование = "(не готово)" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = УровеньДерева.Добавить();
		НоваяСтрока.Наименование = Строка.Наименование;
		НоваяСтрока.Имя = Строка.Имя;
		НоваяСтрока.Отметка = Строка.Включить;
		ДобавитьСтрокиВДеревоРекурсивно(Строка, ИмяДерева, НоваяСтрока.ПолучитьЭлементы());
	КонецЦикла;
	
	Если ЭтоВерхнийУровень Тогда
		// потом часть групп надо назначить серыми
		Для Каждого ТекДанные Из УровеньДерева Цикл
			ПроставитьОтметкиВверхВниз(ТекДанные);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРеквизитовПрямогоПодключения()
	
	Элементы.ГруппаФайловыйВариант.Видимость = Объект.ТипИнформационнойБазыДляПодключения;
	Элементы.ГруппаСервернаяБаза.Видимость   = Не Объект.ТипИнформационнойБазыДляПодключения;
	Элементы.ГруппаЛогинПароль.Видимость     = Не Объект.АутентификацияWindowsИнформационнойБазыДляПодключения;
			
КонецПроцедуры

// Процедура получает из реестра путь к каталогам текущего пользователя,
// а по указанному пути получает список зарегистрированных ИБ.
//
&НаКлиенте
Функция РезультатПолученияСпискаИБ()
	
	Объект.ТаблицаПути.Очистить();
	ТекстОшибки = "";
	#Если ВебКлиент Тогда
		Возврат ТекстОшибки;
	#КонецЕсли
	
	Если АвтоТестОбмена Тогда
		Если ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда
			НоваяСтрока = Объект.ТаблицаПути.Добавить();
			НоваяСтрока.Имя = Объект.ПутьКБазе;
			НоваяСтрока.Путь = Объект.ПутьКБазе;
		КонецЕсли;
	Иначе
		Попытка
			
			ScrptCtrl = Новый COMObject("MSScriptControl.ScriptControl");
			ScrptCtrl.Language = "vbscript";
			ScrptCtrl.AddCode("
			|Function Get1CV8Titles()
			|	const HKEY_CURRENT_USER = &H80000001
			|	Set oReg=GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")
			|	strKeyPath = ""Volatile Environment""
			|	oReg.EnumValues HKEY_CURRENT_USER, strKeyPath, arrValues
			|	strInfo=vbNullString
			|   Get1CV8Titles = strInfo
			|	On Error Resume Next
			|	For i = LBound(arrValues) To UBound(arrValues)		
			|		call oReg.GetStringValue(HKEY_CURRENT_USER,strKeyPath,arrValues(i),Value)
			|       if (arrValues(i) = ""APPDATA"") then
			|		    strInfo=Value
			|       end if
			|	Next		
			| 	Get1CV8Titles = strInfo
			|End Function
			|");
			
			// Пути к базам 8.2
			// пути к локальным базам
			Путь = СокрЛП(ScrptCtrl.Run("Get1CV8Titles")) + "\1C\1CEStart\ibases.v8i";
			Файл = Новый Файл(Путь);
			Если Файл.Существует() Тогда
				РазложитьПуть(Путь);
			КонецЕсли;
			
			//пути к общим базам
			Путь = СокрЛП(ScrptCtrl.Run("Get1CV8Titles")) + "\1C\1CEStart\ibases.v8l";
			Файл = Новый Файл(Путь);
			Если Файл.Существует() Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(Путь);
				КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
				Если КоличествоСтрок <> 0 Тогда
					Для НомСтр = 1 По КоличествоСтрок Цикл
						Путь = ТекстовыйДокумент.ПолучитьСтроку(НомСтр);
						Файл = Новый Файл(Путь);
						Если Файл.Существует() Тогда
							РазложитьПуть(Путь);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Возврат ТекстОшибки;
		КонецПопытки;
		
		Объект.ТаблицаПути.Сортировать("Имя");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура РазложитьПуть(Путь)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(Путь);
	
	Если ТекстовыйДокумент.КоличествоСтрок() <> 0 Тогда
		
		КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
		Для НомСтр = 1 По КоличествоСтрок Цикл
			ИмяИБ = "";
			ПутьИБ = "";
			ТекСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомСтр);
			Если Лев(ТекСтрока,1) = "[" И Прав(ТекСтрока,1) = "]" Тогда
				ИмяИБ = Сред(ТекСтрока,2,СтрДлина(ТекСтрока)-2);
				НомСтр = НомСтр + 1;
				ТекСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомСтр);
				Если СтрНайти(ТекСтрока, "Connect=File=") <> 0 Тогда // файловые базы
					ПутьИБ = Сред(ТекСтрока,9, СтрДлина(ТекСтрока)-9);
					
					НоваяСтрока = Объект.ТаблицаПути.Добавить();
					НоваяСтрока.Имя = ИмяИБ;
					НоваяСтрока.Путь = ПутьИБ;
					
				ИначеЕсли СтрНайти(ТекСтрока, "Connect=Srvr=") <> 0 Тогда // серверные 
					ПутьИБ = Сред(ТекСтрока,9, СтрДлина(ТекСтрока)-9);
					
					НоваяСтрока = Объект.ТаблицаПути.Добавить();
					НоваяСтрока.Имя = ИмяИБ;
					НоваяСтрока.Путь = ПутьИБ;
					
				КонецЕсли;
				
				Если НомСтр >= КоличествоСтрок Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СравнитьВерсии(ИБИсточник, ИмяПравил)
	
	НомерРелизаКонфигурации = ИБИСточник.Метаданные.Версия;
	
	#Если ВебКлиент Тогда
		СоздатьКаталог("C:\Temp");
		ИмяВременногоФайлаПравил  = "C:\Temp\" + Строка(Новый УникальныйИдентификатор()) + ".xml";
	#Иначе
		ИмяВременногоФайлаПравил  = ПолучитьИмяВременногоФайла("xml");
	#КонецЕсли	
	
	ДвоичныеДанныеФайлаПравил = ПолучитьМакет(ИмяПравил);
	ДвоичныеДанныеФайлаПравил.Записать(ИмяВременногоФайлаПравил);
	ИзменитьТекстПравилПриНеобходимости(ИмяВременногоФайлаПравил, ИмяПравил, Объект.КонфигурацияИсточник, Объект.КонфигурацияПриемник);
	
	ФайлОбмена = Новый ЧтениеXML();
	ФайлОбмена.ОткрытьФайл(ИмяВременногоФайлаПравил);
	Пока ФайлОбмена.Прочитать() Цикл
		Если ФайлОбмена.ЛокальноеИмя = "Источник" Тогда
			МинимальныйНомерРелиза = ФайлОбмена.ПолучитьАтрибут("ВерсияКонфигурации");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ФайлОбмена.Закрыть();

	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерРелизаКонфигурации, МинимальныйНомерРелиза) < 0 Тогда
		ПодстрокаИмениПравил = НСтр("ru='основных правил';uk='основних правил'");
		Если ИмяПравил = "ПравилаОбменаЗУП" Тогда
			ПодстрокаИмениПравил = НСтр("ru='правил переноса данных зарплаты';uk='правил переносу даних зарплати'");
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Текущая версия %1 предназначена для релиза конфигурации не ниже %2';uk='Поточна версія %1 призначена для релізу конфігурації не нижче %2'"),
			ПодстрокаИмениПравил,
			МинимальныйНомерРелиза);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения,
			НСтр("ru='Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных';uk='Рекомендується оновити реліз конфігурації інформаційної бази, з якої виконується перенесення даних'"));
		Возврат ТекстСообщения;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Попытка подключения к ИБ
//
&НаКлиенте
Функция ПроверитьПодключениеКИБ()
	
	Если НЕ АвтоТестОбмена Тогда
		Объект.ПутьКБазе = Объект.ТаблицаПути.Получить(Элементы.ТаблицаПути.ТекущиеДанные.НомерСтроки-1).Путь;
	КонецЕсли;
	СтрокаПодключения = ПолучитьСтрокуПодключенияВыбраннойБазы();
	ОбъектБазы = ПолучитьНовыйCOMОбъект();
	БезОшибок = Истина;
	Инфо = Неопределено;
	ИБИсточник = Неопределено;

	Попытка
		ИБИсточник = ОбъектБазы.Connect(СтрокаПодключения);
	Исключение
		БезОшибок = Ложь;
		Инфо = ОписаниеОшибки();
	КонецПопытки;
	Если НЕ БезОшибок И СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		// Возможно, не зарегистрирована компонента COM-соединитель.
		БезОшибок = Истина;
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
		// Попытка повторного соединения.
		Попытка
			ИБИсточник = ОбъектБазы.Connect(СтрокаПодключения);
		Исключение
			БезОшибок = Ложь;
			Инфо = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;

	Если НЕ БезОшибок Тогда
		СообщениеПользователю = Новый СообщениеПользователю();
		СообщениеПользователю.Текст = Инфо;
		СообщениеПользователю.Сообщить();
		ЗафиксироватьОшибку(ЭтаФорма, Инфо);
		Возврат НСтр("ru='Ошибка подключения';uk='Помилка підключення'");
	КонецЕсли;
	Попытка
		ИмяКонфигурации = ИБИсточник.Метаданные.Имя;
		Если ИмяКонфигурации = "УправлениеПроизводственнымПредприятиемДляУкраины" Тогда 
			
			ТекстСообщения = СравнитьВерсии(ИБИсточник, "ПравилаОбмена");
			ТекстСообщенияЗУП = СравнитьВерсии(ИБИсточник, "ПравилаОбменаЗУП");
			
			Если ТекстСообщения = "" И ТекстСообщенияЗУП = "" Тогда
				Возврат НСтр("ru='Успех';uk='Успіх'");
			Иначе
				Возврат ТекстСообщения + ТекстСообщенияЗУП;
			КонецЕсли;
			
		Иначе
			Сообщение = НСтр("ru='Выбранная информационная база не является программой 
            |%1. Выберите другую информационную базу.'
            |;uk='Обрана інформаційна база не є програмою 
            |%1. Виберіть іншу інформаційну базу.'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, НаименованиеКонфигурацииИсточника);
			СообщениеПользователю = Новый СообщениеПользователю();
			СообщениеПользователю.Текст = Сообщение;
			СообщениеПользователю.Сообщить();
			Возврат НСтр("ru='Ошибка - не та конфигурация';uk='Помилка - не та конфігурація'");
		КонецЕсли;
		
	Исключение
		Сообщение = ОписаниеОшибки();
		СообщениеПользователю = Новый СообщениеПользователю();
		СообщениеПользователю.Текст = Сообщение;
		СообщениеПользователю.Сообщить();
		ЗафиксироватьОшибку(ЭтаФорма, Сообщение);
		Возврат НСтр("ru='Ошибка подключения';uk='Помилка підключення'");
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ОтключитьПВДВыбранныеПользователем(ТаблицаПравилВыгрузки, ИмяПравилОбмена)
	
	СписокИменОтключить = Новый СписокЗначений;
	Если ИмяПравилОбмена = "ПравилаОбмена" Тогда
		ДобавитьКодыДеревоРекурсивно(ДеревоОсновныхПравил, СписокИменОтключить);
	Иначе
		ДобавитьКодыДеревоРекурсивно(ДеревоПравилЗУП, СписокИменОтключить);
	КонецЕсли;
	
	ОтключитьПравилаТаблицыПВДРекурсивно(ТаблицаПравилВыгрузки, СписокИменОтключить);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПравилаТаблицыПВДРекурсивно(ТаблицаПВД, СписокИмен)
	
	Для Каждого Строка Из ТаблицаПВД.Rows Цикл
		Если СписокИмен.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			Строка.Включить = Ложь;
		КонецЕсли;
		ОтключитьПравилаТаблицыПВДРекурсивно(Строка, СписокИмен);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКодыДеревоРекурсивно(ТекущаяСтрокаДерева, СписокИмен)
	
	Попытка
		Если ТипЗнч(ТекущаяСтрокаДерева) <> Тип("ДанныеФормыДерево") И ТекущаяСтрокаДерева.Отметка = 0 Тогда
			СписокИмен.Добавить(ТекущаяСтрокаДерева.Имя);
		КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрокаДерева) = Тип("ДанныеФормыДерево") Или ТекущаяСтрокаДерева.Отметка = 2
			 Или ТекущаяСтрокаДерева.Отметка = 0 Тогда
			
			Для Каждого Строка Из ТекущаяСтрокаДерева.ПолучитьЭлементы() Цикл
				ДобавитьКодыДеревоРекурсивно(Строка, СписокИмен);
			КонецЦикла;
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если АвтоТестОбмена Тогда
			ЗафиксироватьОшибку(ЭтаФорма, ТекстОшибки);
		Иначе
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Сообщить();
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьОтчетОбОшибках()
	
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках);
	ОтчетОбОшибках.ТолькоПросмотр		= Истина;
	ОтчетОбОшибках.ОтображатьЗаголовки	= Ложь;
	ОтчетОбОшибках.ОтображатьСетку		= Ложь;
	ОтчетОбОшибках.Показать(НСтр("ru='Список комментариев и ошибок';uk='Список коментарів і помилок'"));
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках)
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СписокОшибок");
	
	ОбластьШапка             = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока            = Макет.ПолучитьОбласть("Строка");
	ОбластьЗаголовокВыгрузка = Макет.ПолучитьОбласть("ЗаголовокВыгрузка");
	ОбластьЗаголовокЗагрузка = Макет.ПолучитьОбласть("ЗаголовокЗагрузка");
	ОбластьЗаголовокПроверка = Макет.ПолучитьОбласть("ЗаголовокПроверка");
	ОбластьШапкаТаблицы      = Макет.ПолучитьОбласть("ШапкаТаблицы");
	
	ОбластьШапка.Параметры.ИмяИБ = ИмяИБ;
	ОбластьШапка.Параметры.ПутьКИБ = Объект.ПутьКБазе;
	ОбластьШапка.Параметры.НазваниеТипаПодключения = НСтр("ru='Путь к информационной базе';uk='Шлях до інформаційної бази'") + ":";
	Если Не ЗначениеЗаполнено(Объект.ПутьКБазе) И ЗначениеЗаполнено(Объект.ИмяФайлаДанных) Тогда
		ОбластьШапка.Параметры.НазваниеТипаПодключения = НСтр("ru='Путь к файлу данных:';uk='Шлях до файлу даних:'");
		ОбластьШапка.Параметры.ПутьКИБ = Объект.ИмяФайлаДанных;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	НайденЭтапПроверкаДанных = Ложь;
	Для Каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		Если СтрокаОшибки.Этап = НСтр("ru='Проверка данных';uk='Перевірка даних'") Тогда
			НайденЭтапПроверкаДанных = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденЭтапПроверкаДанных Тогда
		// Меняем порядок в таблице ошибок. Необходимо проверку добавить в конец списка.
		ИндексНачалоЗагрузки = -1;
		СтрокаНачалаПроверки = Неопределено;
		Для Каждого Строка Из ТаблицаОшибок Цикл
			Если СтрНайти(Строка.Ошибка, НСтр("ru='Начало загрузки:';uk='Початок завантаження:'")) > 0 Тогда
				// следующая строка от найденной с текстом "Начало загрузки"
				СтрокаНачалаПроверки = ТаблицаОшибок.Получить(ТаблицаОшибок.Индекс(Строка) + 1); 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаНачалаПроверки <> Неопределено И ТаблицаОшибок.Количество()>=6 Тогда
			
			ИндексНачала = ТаблицаОшибок.Индекс(СтрокаНачалаПроверки);
			Если СтрНайти(ТаблицаОшибок.Получить(ТаблицаОшибок.Количество()-6).Ошибка, "Окончание") > 0 Тогда
				ИндексОкончания = ТаблицаОшибок.Количество()-12;
			Иначе
				ИндексОкончания = ТаблицаОшибок.Количество()-6;
			КонецЕсли;
			
			Индекс = ИндексНачала;
			Пока Индекс <= ИндексОкончания Цикл
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаОшибок.Получить(Индекс));
				НоваяСтрока.Этап = НСтр("ru='Проверка данных';uk='Перевірка даних'");
				Индекс = Индекс + 1;
			КонецЦикла;
			
			Индекс = ИндексОкончания;
			Пока Индекс >= ИндексНачала Цикл
				ТаблицаОшибок.Удалить(ТаблицаОшибок.Получить(Индекс));
				Индекс = Индекс - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
	ВыведенЗаголовокВыгрузки = Ложь;
	ВыведенЗаголовокЗагрузки = Ложь;
	ВыведенЗаголовокПроверки = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		Если Не ВыведенЗаголовокВыгрузки И СтрНайти(СтрокаТаблицы.Этап, "Выгрузка") > 0 Тогда
			ОтчетОбОшибках.Вывести(ОбластьЗаголовокВыгрузка);
			ОтчетОбОшибках.Вывести(ОбластьШапкаТаблицы);
			ВыведенЗаголовокВыгрузки = Истина;
		КонецЕсли;
		Если Не ВыведенЗаголовокЗагрузки И СтрНайти(СтрокаТаблицы.Этап, "Загрузка") > 0 Тогда
			ОтчетОбОшибках.Вывести(ОбластьЗаголовокЗагрузка);
			ОтчетОбОшибках.Вывести(ОбластьШапкаТаблицы);
			ВыведенЗаголовокЗагрузки = Истина;
		КонецЕсли;
		Если Не ВыведенЗаголовокПроверки И СтрНайти(СтрокаТаблицы.Этап, "Проверка") > 0 Тогда
			ОтчетОбОшибках.Вывести(ОбластьЗаголовокПроверка);
			ОтчетОбОшибках.Вывести(ОбластьШапкаТаблицы);
			ВыведенЗаголовокПроверки = Истина;
		КонецЕсли;
					
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		
		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивноеДерево()
	
	Дерево = Неопределено;
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаНСИ Тогда
		Дерево = ДеревоОсновныхПравил;
	ИначеЕсли Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.ПанельОсновная.ПодчиненныеЭлементы.СтраницаЗУП Тогда
		Дерево = ДеревоПравилЗУП;
	Иначе
		Дерево = ТаблицаОрганизаций;
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДляВсехПометку(Пометка)
	
	Дерево = ПолучитьАктивноеДерево();
	Если Дерево = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Дерево = ТаблицаОрганизаций Тогда
		
		Для Каждого Строка Из ТаблицаОрганизаций Цикл
			Строка.Отметка = Пометка;
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
			Если Строка.Наименование = НСтр("ru='Настройки параметров учета';uk='Настройки параметрів обліку'") Тогда
				Продолжить;
			КонецЕсли;
			Строка.Отметка = Пометка;
			ПроставитьПометкиВниз(Строка);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроставитьОтметкиВверхВниз(ТекущиеДанные)
	
	ТекущиеДанные.Отметка = ТекущиеДанные.Отметка % 2;
	
	ПроставитьПометкиВниз(ТекущиеДанные);
	ПроставитьПометкиВверх(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Отметка;
	Для каждого Потомок из Потомки Цикл
		Потомок.Отметка = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекущиеДанные)
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для каждого Потомок из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.Отметка = 1);
			НеВсеЛожь = НеВсеЛожь ИЛИ Булево(Потомок.Отметка);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.Отметка = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.Отметка = 2;
		Иначе
			Родитель.Отметка = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПутиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаСервере
Процедура РаспаковатьФайлСДанными(Отказ, ТекстСообщения)
	
	ФайлОбмена = Новый Файл(Объект.ИмяФайлаДанных);
	АдресОсновныеДанные = Неопределено;
	АдресДанныеЗУП = Неопределено;
	Архив = Новый ЧтениеZipФайла(Объект.ИмяФайлаДанных);
	СписокЭтаповВыгрузки = Новый СписокЗначений;
	Для Счетчик = 0 По Архив.Элементы.Количество() - 1 Цикл
		Если Архив.Элементы[Счетчик].Расширение <> "xml" Тогда
			Продолжить;
		КонецЕсли;
		Архив.Извлечь(Архив.Элементы[Счетчик], ФайлОбмена.Путь);
		
		Если Найти(Архив.Элементы[Счетчик].Имя, "УППУП_ОД") Тогда
			// Основные данные
			СписокЭтаповВыгрузки.Добавить(ФайлОбмена.Путь + Архив.Элементы[Счетчик].Имя, НСтр("ru='Загрузка 1/2';uk='Завантаження 1/2'"));
		ИначеЕсли Найти(Архив.Элементы[Счетчик].Имя, "УППУП_ЗУП") Тогда
			// ЗУП данные
			СписокЭтаповВыгрузки.Добавить(ФайлОбмена.Путь + Архив.Элементы[Счетчик].Имя, НСтр("ru='Загрузка 2/2';uk='Завантаження 2/2'"));
		Иначе
			ТекстСообщения = НСтр("ru='Ошибка формата файла. Выберите корректный файл выгрузки данных';uk='Помилка формату файлу. Виберіть коректний файл вивантаження даних'");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодГодСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодГод = ПериодГод + Направление;
	ОписаниеПериодов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПериодов()
	
	ПериодГодСтрока = Формат(ПериодГод, "ЧГ=0");
	
КонецПроцедуры

// Загрузка из выгруженных файлов с помощью универсальной обработки. Через структуру осуществляется
// возврат результата загрузки.
//
// Параметры:
//  ПараметрыВыгрузки - структура этапов выгрузки, содержит файлы выгрузки по одному для каждого этапа
//  АдресХранилища    - адрес пути к временному хранилищу для помещения результата выполнения
//
&НаСервере
Процедура ЗагрузитьДанныеВИБ(ПараметрыВыгрузки, АдресХранилища)
	
	СписокОшибок = Новый СписокЗначений;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Номер = 1;
	РезультатВыполнения = Новый Структура;
	
	Если ПараметрыВыгрузки.ЗагрузкаЧерезПодключениеКБазе Тогда
		КоллекцияДляОбработки = ПараметрыВыгрузки.ПомещенныеФайлы;
		НахождениеОбъекта = "";
	Иначе
		КоллекцияДляОбработки = ПараметрыВыгрузки.СписокЭтаповВыгрузки;
	КонецЕсли;
	
	
	Для Каждого ОбъектОбработки Из КоллекцияДляОбработки Цикл
		
		ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
		ОбработкаОбмена.РежимОбмена = "Загрузка";
		ОбработкаОбмена.РежимОтладкиАлгоритмов = 1;
		ОбработкаОбмена.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
		ОбработкаОбмена.НеВыводитьНикакихИнформационныхСообщенийПользователю = Истина;
		ОбработкаОбмена.ВыводВПротоколИнформационныхСообщений      = НЕ АвтоТестОбмена;
		ОбработкаОбмена.ВыводВПротоколСообщенийОбОшибках           = Истина;
		ОбработкаОбмена.ИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла("txt");
		
		Если ПараметрыВыгрузки.ЗагрузкаЧерезПодключениеКБазе Тогда
			АдресОбъекта = ОбъектОбработки.Хранение;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресОбъекта);
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
			ОбработкаОбмена.ИмяФайлаОбмена = ИмяВременногоФайла;

		Иначе
			ОбработкаОбмена.ИмяФайлаОбмена = ОбъектОбработки.Значение;
			Если РазделениеВключено Тогда
				// Передадим правила загрузки из макета конфигурации.
				Если Найти(ОбъектОбработки.Значение, "УППУП_ОД") Тогда
					// Основные данные
					ИмяМакета = "ПравилаОбмена";
				Иначе
					// ЗУП данные
					ИмяМакета = "ПравилаОбменаЗУП";
				КонецЕсли;
				МакетПравилОбмена = ПолучитьМакет(ИмяМакета);
				
				ВремУИД = Новый УникальныйИдентификатор();
				ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + ВремУИД + ".xml";
				МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
				ИзменитьТекстПравилПриНеобходимости(ИмяВременногоФайлаПравилОбмена, ИмяМакета, Объект.КонфигурацияИсточник, Объект.КонфигурацияПриемник);
				ОбработкаОбмена.БезопаснаяЗагрузка = Истина;
				ОбработкаОбмена.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
			КонецЕсли
		КонецЕсли;
		
		Попытка
			ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
		Исключение
			ТекстСообщения = НСтр("ru='При чтении данных произошла ошибка:';uk='При читанні даних сталася помилка:'") + Символы.ПС
									+ ОписаниеОшибки()+ Символы.ПС + НСтр("ru='Ошибка в формате файла данных';uk='Помилка у форматі файлу даних'") + ".";
			
			РезультатВыполнения.Вставить("ТекстСообщения" + Номер, ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка" + Номер, Истина);
			РезультатВыполнения.Вставить("ИмяФайлаПротоколаОбмена" + Номер, ОбработкаОбмена.ИмяФайлаПротоколаОбмена);
			
			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
			Возврат;
		КонецПопытки;
			
		Если НЕ ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
			ТекстСообщения = НСтр("ru='При чтении данных произошла ошибка';uk='При читанні даних виникла помилка'") + ".";
			
			РезультатВыполнения.Вставить("ТекстСообщения" + Номер, ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка" + Номер, Истина);
			РезультатВыполнения.Вставить("ИмяФайлаПротоколаОбмена" + Номер, ОбработкаОбмена.ИмяФайлаПротоколаОбмена);
			
			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбработкаОбмена.Параметры, Объект);
	
		ОбработкаОбмена.ВыполнитьЗагрузку();
		
		Если ОбработкаОбмена.ФлагОшибки Тогда
			ТекстСообщения = НСтр("ru='При загрузке данных произошла ошибка';uk='При завантаженні даних сталася помилка'") + ".";
			
			РезультатВыполнения.Вставить("ТекстСообщения" + Номер, ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка" + Номер, Истина);
			РезультатВыполнения.Вставить("СписокОшибок" + Номер, СписокОшибок);
			РезультатВыполнения.Вставить("ИмяФайлаПротоколаОбмена" + Номер, ОбработкаОбмена.ИмяФайлаПротоколаОбмена);
			
		Иначе
			ТекстСообщения =  НСтр("ru='Загрузка данных завершена';uk='Завантаження даних завершене'") + ".";
			
			РезультатВыполнения.Вставить("ТекстСообщения" + Номер,           ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка" + Номер,                   Истина);
			РезультатВыполнения.Вставить("НачалоПериодаВыгрузки" + Номер,    ОбработкаОбмена.ДатаНачала);
			РезультатВыполнения.Вставить("ОкончаниеПериодаВыгрузки" + Номер, ОбработкаОбмена.ДатаОкончания);
			РезультатВыполнения.Вставить("СписокОшибок" + Номер,             СписокОшибок);
			РезультатВыполнения.Вставить("ИмяФайлаПротоколаОбмена" + Номер,  ОбработкаОбмена.ИмяФайлаПротоколаОбмена);
			
		КонецЕсли;
		Если НЕ ПараметрыВыгрузки.ЗагрузкаЧерезПодключениеКБазе Тогда
			УдалитьФайлы(ОбъектОбработки.Значение);
		КонецЕсли;
		Номер = Номер + 1;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуОрганизаций(ИБИсточник)
	
	ТаблицаОрганизаций.Очистить();
	
	Запрос = ИБИсточник.NewObject("Запрос");
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Наименование КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОрганизаций.Добавить(), 
								Новый Структура("Организация, Отметка", Выборка.Организация, Истина));
	КонецЦикла;
	
	// Устанавливаем текущую таблицу переходов
	Если НЕ РазделениеВключено И ПлатформаWindows Тогда
		Если Объект.ТаблицаПути.Количество() > 0 Тогда
			ТаблицаПереходовПоСценарию();
		Иначе
			ТаблицаПереходовПоСценариюОСLinux();
		КонецЕсли;
	Иначе
		ТаблицаПереходовПоСценариюОСLinux();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьТекстПравилПриНеобходимости(ИмяВременногоФайлаПравил, ИмяПравилОбмена, КонфигурацияИсточник, КонфигурацияПриемник)
	Если КонфигурацияИсточник = "УПП" И КонфигурацияПриемник = "BASERP" Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьФрагментТекста(ТекстДокумент, НомерСтрокиНачало, НомерСтрокиКонец)
	ЧислоСтрокУдалить = НомерСтрокиКонец - НомерСтрокиНачало + 1;
	Для НомСтр = 1 По ЧислоСтрокУдалить Цикл
		ТекстДокумент.УдалитьСтроку(НомерСтрокиКонец - НомСтр + 1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУстановкуРасширенияРаботыСФайлами(ДополнительныеПараметры, ИмяОповещения)
	ТекстПредупреждения = НСтр("ru='Для данной операции необходимо установить расширение для веб-клиента платформы.';uk='Для цієї операції необхідно встановити розширення для веб-клієнта платформи.'");
	Оповещение = Новый ОписаниеОповещения(ИмяОповещения, ЭтотОбъект, ДополнительныеПараметры);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредупреждения, Ложь);
КонецПроцедуры

// Обработчик немодального завершения диалога выбора каталога.
//
&НаКлиенте
Процедура ОбработчикВыбораФайлаЗавершение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСвойства = ДополнительныеПараметры.ИмяСвойства;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ЗаполнитьЗначенияСвойств(Диалог, ДополнительныеПараметры.ПараметрыДиалога);
	
	Диалог.ПолноеИмяФайла = Объект[ИмяСвойства];
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьФайлЗавершениеОтображенияДиалогаВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершениеОтображенияДиалогаВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект[ДополнительныеПараметры.ИмяСвойства] = ВыбранныеФайлы[0];
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
КонецПроцедуры


#Область ВыгрузкаИЗагрузкаДанных

&НаКлиенте
Процедура ВыгрузкаЗагрузкаДанныхНачать()
	
	Состояние(НСтр("ru='Выполняется загрузка данных. Пожалуйста, подождите...';uk='Виконується завантаження даних. Будь ласка, почекайте...'"));
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда
		Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.ПроцессФайл;
	Иначе
		Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Процесс;
	КонецЕсли;
	
	Попытка
		Перерисовать(2, "ВОчереди");
		
		Если ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда // Непосредственный перенос данных через СОМ.
			ИБИсточник = Неопределено;
			СписокЭтаповВыгрузки = Новый СписокЗначений;
			Если ПодключитьсяКИБ(ИБИсточник) Тогда
				ПараметрыВыгрузки = Новый Структура("ИБИсточник, Итерация, БезОшибок", ИБИсточник, 1, Истина);
				ВыгрузкаДанныхВыполнить(Истина, ПараметрыВыгрузки);
			Иначе
				ЗагрузкаДанныхНачать();
			КонецЕсли;
		Иначе // Загрузка из файла.
			Отказ = Ложь;
			ТекстСообщения = "";
			РаспаковатьФайлСДанными(Отказ, ТекстСообщения);
			Если Отказ Тогда
				ПоказатьПредупреждение(Неопределено, ТекстСообщения);
				ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения);
				ИзменитьПорядковыйНомерПерехода(-1);
				ВыгрузкаЗагрузкаДанныхЗакончить(Ложь);
			Иначе
				ЗагрузкаДанныхНачать();
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru='При переносе данных произошла ошибка:';uk='При перенесенні даних сталася помилка:'") + Символы.ПС + ОписаниеОшибки();
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения);
		ВыгрузкаЗагрузкаДанныхЗакончить(Ложь);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ПодключитьсяКИБ(ИБИсточник)
	// Шаг №1 - подключение к ИБ.
	ЭтапКонвертации = НСтр("ru='Подключение к информационной базе';uk='Підключення до інформаційної бази'");
	Перерисовать(2, "Выполняется", Истина);
	ОбновитьОтображениеДанных();
	Состояние(НСтр("ru='Выполняется подключение к информационной базе-источнику. Пожалуйста, подождите...';uk='Виконується підключення до інформаційної бази-джерела. Будь ласка, зачекайте...'"));
	
	БезОшибок = Истина;
	Инфо = Неопределено;
	ИБИсточник = Неопределено;
	СтрокаПодключения = ПолучитьСтрокуПодключенияВыбраннойБазы();
	COMСоединитель = ПолучитьНовыйCOMОбъект();
	Попытка
		ИБИсточник = COMСоединитель.Connect(СтрокаПодключения);
	Исключение
		БезОшибок = Ложь;
		Инфо = ИнформацияОбОшибке();
	КонецПопытки;
	Если НЕ БезОшибок И СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
		// Возможно, не зарегистрирована компонента COM-соединитель.
		БезОшибок = Истина;
		ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
		// Попытка повторного соединения.
		Попытка
			ИБИсточник = COMСоединитель.Connect(СтрокаПодключения);
		Исключение
			БезОшибок = Ложь;
			Инфо = ИнформацияОбОшибке();
		КонецПопытки;
	КонецЕсли;

	Если НЕ БезОшибок Тогда
		Перерисовать(2);
		Описание = "";
		Пока Инфо <> Неопределено Цикл
			Описание = Описание + Символы.ПС + Инфо.Описание;
			Инфо = Инфо.Причина;
		КонецЦикла;
		ТекстСообщения = НСтр("ru='Не удалось произвести подключение к информационной базе';uk='Не вдалося зробити підключення до інформаційної бази'") + ": " + Описание;
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения,
							НСтр("ru='Возможные причины:
                                |- На компьютере неправильно установлена версия платформы.
                                |- Пользователь отменил подключение к информационной базе, либо была попытка немонопольного подключения.
                                |Рекомендации:
                                |- Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его
                                |  в информационной базе, из которой производится перенос данных.
                                |- Повторите перенос данных обеспечив монопольный доступ к информационной базе.'
                                |;uk='Можливі причини:
                                |- На комп''ютері неправильно встановлена версія платформи.
                                |- Користувач скасував підключення до інформаційної бази, або була спроба немонопольного підключення.
                                |Рекомендації:
                                |- Скористайтеся варіантом завантаження даних з файлу, попередньо сформувавши його
                                |в інформаційній базі, з якої виробляється перенос даних.
                                |- Повторіть перенесення даних забезпечивши монопольний доступ до інформаційної бази.'"));
		БезОшибок = Ложь;
	КонецЕсли;
	
	Возврат БезОшибок;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузкаДанныхВыполнить(Результат, ДополнительныеДанные) Экспорт
	
	Итерация = ДополнительныеДанные.Итерация;
	Если Итерация > 2 Тогда // Выход.
		ЗагрузкаДанныхНачать();
	Иначе
		Если Итерация = 1 Тогда
			ИмяКонвертацияПравила = "ПравилаОбмена";
		Иначе // 2.
			ИмяКонвертацияПравила = "ПравилаОбменаЗУП";
		КонецЕсли;
		ДополнительныеДанные.БезОшибок = ДополнительныеДанные.БезОшибок И Результат;
		ДополнительныеДанные.Итерация = Итерация + 1;
		ОбработчикПродолжения = Новый ОписаниеОповещения("ВыгрузкаДанныхВыполнить", ЭтотОбъект, ДополнительныеДанные);
		ВыгрузитьДанныеПоПравилам(ДополнительныеДанные.ИБИсточник, ИмяКонвертацияПравила, ОбработчикПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеПоПравилам(ИБИсточник, ИмяКонвертацияПравила, ОбработчикПродолжения)
	
	ИдентификаторКонфигурации = ИБИсточник.Метаданные.Имя;
	НомерРелизаКонфигурации	  = ИБИсточник.Метаданные.Версия;
	
	ИмяФайлаПравил          = "";
	КаталогВыгрузкиЗагрузки = "";
	ИмяФайлаПротокола       = "";
	
	Ошибка = ОпределитьКонфигурациюИПолучитьФайлы(
		НомерРелизаКонфигурации,
		ИмяКонвертацияПравила,
		ИмяФайлаПравил,
		КаталогВыгрузкиЗагрузки,
		ИмяФайлаПротокола);
		
	Если НЕ Ошибка Тогда
		Перерисовать(2, "Успех", Истина);
		
		// Шаг № 2 выгрузка данных
		ЭтапКонвертации = НСтр("ru='Выгрузка данных';uk='Вивантаження даних'");
		Перерисовать(2, "Выполняется", Истина);
		ОбновитьОтображениеДанных();
		
		ВыгружаемыеДанные = "";
		
		БезОшибок = Истина;
		Попытка
			ОбработкаОбмена = ПолучитьОбработкуЗагрузитьПравила(ИБИсточник, ИмяФайлаПравил, ИмяФайлаПротокола);
			ОтключитьПВДВыбранныеПользователем(ОбработкаОбмена.ТаблицаПравилВыгрузки, ИмяКонвертацияПравила);
		Исключение
			Перерисовать(2);
			Инфо = ИнформацияОбОшибке();
			Описание = "";
			Пока Инфо <> Неопределено Цикл
				Описание = Описание + Символы.ПС + Инфо.Описание;
				Инфо = Инфо.Причина;
			КонецЦикла;
			ТекстСообщения = НСтр("ru='Не удалось загрузить правила переноса данных';uk='Не вдалося завантажити правила перенесення даних'") + ": " + Описание;
			ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения,
								НСтр("ru='Возможно, в правилах конвертации ошибка. Обратитесь в техническую поддержку.';uk='Можливо, в правилах конвертації помилка. Зверніться в технічну підтримку.'"));
			БезОшибок = Ложь;
		КонецПопытки;
		
		Если БезОшибок Тогда
			Попытка
				КорневыеСтрокиПравилВыгрузки = ОбработкаОбмена.ТаблицаПравилВыгрузки.Строки;
				КоличествоЭтаповВыгрузки = 2;
				УИД = Новый УникальныйИдентификатор;
				мПрефиксФайловВыгрузки = "УППАУ" + УИД;
				
				Если ИмяКонвертацияПравила = "ПравилаОбмена" Тогда
					ТекущийНомерВыгрузки = 1;
				Иначе
					ТекущийНомерВыгрузки = 2;
				КонецЕсли;
				
				Перерисовать(3, "Выполняется", Истина);
				
				Если ТекущийНомерВыгрузки = 1 Тогда
					ЭтапКонвертации = НСтр("ru='Выгрузка основных данных';uk='Вивантаження основних даних'");
				Иначе
					ЭтапКонвертации = НСтр("ru='Выгрузка данных зарплаты и кадрового учета';uk='Вивантаження даних зарплати та кадрового обліку'");
				КонецЕсли;
				
				ЭтапКонвертации = НСтр("ru='Выгрузка данных';uk='Вивантаження даних'") + ": " + ИмяКонвертацияПравила + " (" + ТекущийНомерВыгрузки + 
										"/" + КоличествоЭтаповВыгрузки + ")";
				
				ОбработкаПрерыванияПользователя();
				ОбновитьОтображениеДанных();
				
				НомерСтроки = 1;
				
				ОбработкаОбмена.ИмяФайлаОбмена = КаталогВыгрузкиЗагрузки + мПрефиксФайловВыгрузки + Прав("000" + НомерСтроки, 3)
												 + ".xml";
				
				Состояние(НСтр("ru='Выполняется выгрузка данных. Пожалуйста, подождите...';uk='Виконується вивантаження даних. Будь ласка, почекайте...'"));
				
				ОбработкаОбмена.ВыполнитьВыгрузку();
				
				ЗафиксироватьОшибкиФайлаПротокола(ИмяФайлаПротокола);
				
				ТекстСообщения = НСтр("ru='Успешно прошла выгрузка в файл %1 по правилам %2';uk='Успішно пройшло вивантаження у файл %1 за правилами %2'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ОбработкаОбмена.ИмяФайлаОбмена);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ИмяКонвертацияПравила);
				ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, "", Ложь);
				СписокЭтаповВыгрузки.Добавить(ОбработкаОбмена.ИмяФайлаОбмена, ИмяКонвертацияПравила + " (" + 
											ТекущийНомерВыгрузки + "/" + КоличествоЭтаповВыгрузки + ")");
				
			Исключение
				Перерисовать(2);
				Если ПустаяСтрока(ВыгружаемыеДанные) Тогда
					ЗафиксироватьОшибку(ЭтаФорма, НСтр("ru='Не удалось начать перенос данных';uk='Не вдалося почати перенесення даних'"), 
					НСтр("ru='Возможно, с информационной базой работают пользователи или неправильно был введен 
                    |пароль пользователя. Перенос данных возможен только при наличии монопольного доступа к информационной базе,
                    |из которой выгружаются данные.'
                    |;uk='Можливо, з інформаційною базою працюють користувачі або неправильно був введений 
                    |пароль користувача. Перенесення даних можливе тільки при наявності монопольного доступу до інформаційної бази,
                    |з якої вивантажуються дані.'"));
				Иначе
					ТекстСообщения = НСтр("ru='Перенос данных завершился аварийно';uk='Перенесення даних завершилося аварійно'") + ": " + ВыгружаемыеДанные;
					ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Воспользуйтесь вариантом загрузки данных из файла,
                    | предварительно сформировав его в информационной базе, из которой производится перенос данных.'
                    |;uk='Скористайтеся варіантом завантаження даних з файлу,
                    |попередньо сформувавши його в інформаційній базі, з якої виконується переносення даних.'"));
				КонецЕсли;
				БезОшибок = Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработчикПродолжения, БезОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхНачать()
	
	Если СписокЭтаповВыгрузки.Количество() > 0 Тогда
		Перерисовать(2, "Успех", Истина);
		
		// Шаг № 3 инициализация обмена и загрузка данных
		ЭтапКонвертации = НСтр("ru='Загрузка данных';uk='Завантаження даних'");
		
		Состояние(НСтр("ru='Выполняется загрузка данных. Пожалуйста, подождите...';uk='Виконується завантаження даних. Будь ласка, почекайте...'"));
		Перерисовать(3, "Выполняется", Истина);
		
		Если ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда // Непосредственный перенос данных через СОМ.
			ЗагрузкаДанныхПоместитьФайлыВХранилище();
		Иначе
			ЗагрузкаДанныхВыполнить();
		КонецЕсли;
	Иначе
		// сообщаем об ошибке выгрузки
		Перерисовать(2, "Ошибка", Истина);
		Перерисовать(3, "Ошибка", Истина);
		Перерисовать(4, "Ошибка", Истина);
		ВыгрузкаЗагрузкаДанныхЗакончить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#Область ПомещениеФайловВХранилище

&НаКлиенте
Процедура ЗагрузкаДанныхПоместитьФайлыВХранилище()
	
	// Данные для загрузки размещены во временных файлах.
	ПомещаемыеФайлы = Новый Массив;
	ПомещенныеФайлы = Новый Массив;
	МассивВызовов   = Новый Массив;
	
	Попытка
		Для Каждого ФайлДанных Из СписокЭтаповВыгрузки Цикл
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ФайлДанных.Значение);
			ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		КонецЦикла;
		
		МассивОписаний = Новый Массив;
		
		МассивОписаний.Добавить("ПоместитьФайлы");
		МассивОписаний.Добавить(ПомещаемыеФайлы);
		МассивОписаний.Добавить(ПомещенныеФайлы);
		МассивОписаний.Добавить("");
		МассивОписаний.Добавить(Ложь);
		МассивВызовов.Добавить(МассивОписаний);
		
		Если АвтоТестОбмена Тогда
			#Если НЕ ВебКлиент Тогда
				Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
					ЗагрузкаДанныхВыполнить(ПомещенныеФайлы);
				Иначе
					ТекстСообщения = НСтр("ru='Не удалось поместить файл выгрузки в хранилище.';uk='Не вдалось помістити файл вивантаження в сховище.'");
					ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения);
					ЗагрузкаДанныхЗакончить(Ложь);
				КонецЕсли;
			#КонецЕсли
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхПоместитьФайлыВХранилищеВыполнить", ЭтотОбъект, ПомещаемыеФайлы);
			НачатьЗапросРазрешенияПользователя(ОписаниеОповещения, МассивВызовов);
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru='При помещении файлов во временное хранилище произошла ошибка:';uk='При поміщенні файлів у тимчасове сховище сталася помилка:'") + Символы.ПС + ОписаниеОшибки();
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения);
		ЗагрузкаДанныхЗакончить(Ложь);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхПоместитьФайлыВХранилищеВыполнить(РазрешенияПолучены, ПомещаемыеФайлы) Экспорт
	
	Если РазрешенияПолучены Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхПоместитьФайлыВХранилищеЗавершить", ЭтотОбъект);
		НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
	Иначе
		ТекстСообщения = НСтр("ru='Не удалось получить данные для загрузки.
            |Загрузка данных не выполнена.'
            |;uk='Не вдалося отримати дані для завантаження.
            |Завантаження даних не виконано.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения);
		ЗагрузкаДанныхЗакончить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхПоместитьФайлыВХранилищеЗавершить(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено ИЛИ ПомещенныеФайлы.Количество() <> СписокЭтаповВыгрузки.Количество() Тогда
		Перерисовать(3);
		ТекстСообщения = НСтр("ru='Не удалось получить данные для загрузки.';uk='Не вдалося отримати дані для завантаження.'");
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения,  НСтр("ru='Укажите корректный путь к файлу данных.';uk='Вкажіть правильний шлях до файлу даних.'"));
		ЗагрузкаДанныхЗакончить(Ложь);
	Иначе
		ЗагрузкаДанныхВыполнить(ПомещенныеФайлы)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗагрузкаДанныхВыполнить(ПомещенныеФайлы = Неопределено)
	
	Состояние(НСтр("ru='Выполняется загрузка данных. Пожалуйста, подождите...';uk='Виконується завантаження даних. Будь ласка, почекайте...'"));
	ЗагрузкаВыполнена = Ложь;
	Попытка
		Результат = ВыполнитьЗагрузкуДанныхНаСервере(СписокЭтаповВыгрузки, ПомещенныеФайлы, ЗначениеЗаполнено(Объект.ПутьКБазе));
		ЗагрузкаВыполнена = Результат.ЗаданиеВыполнено;
		Номер = 1;
		Пока Результат.Свойство("ИмяФайлаПротоколаОбмена" + Номер,) Цикл
			ЗафиксироватьОшибкиФайлаПротокола(Результат["ИмяФайлаПротоколаОбмена" + Номер]);
			Номер = Номер + 1;
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru='При загрузке данных произошла ошибка:';uk='При завантаженні даних сталася помилка:'") + Символы.ПС + ОписаниеОшибки();
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения);
	КонецПопытки;
	
	ЗагрузкаДанныхЗакончить(ЗагрузкаВыполнена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхЗакончить(Результат)
	
	Перерисовать(3, "Успех", Истина);
	Перерисовать(4, "Успех", Истина);
	Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Успех;
		
	Элементы.ГиперссылкаОшибки.Заголовок = НСтр("ru='Список комментариев и ошибок (количество';uk='Список коментарів і помилок (кількість'")
											+ ": " + ТаблицаОшибок.Количество() + ")";
	Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Ошибки;
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжидания;
	
	ВыгрузкаЗагрузкаДанныхЗакончить(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаЗагрузкаДанныхЗакончить(Результат)
	
	Если АвтоТестОбмена Тогда
		АвтотестЗавершить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



&НаКлиенте
Процедура Автотест()
	
	Попытка
		ИнициализацияПеременных();
		Если ЗначениеЗаполнено(Объект.ПутьКБазе) Тогда
			ЗагрузитьПравилаОбмена("ДеревоОсновныхПравил", "ПравилаОбмена");
			ЗагрузитьПравилаОбмена("ДеревоПравилЗУП", "ПравилаОбменаЗУП");
		КонецЕсли;
		ВыгрузкаЗагрузкаДанныхНачать();
	Исключение
		ЗафиксироватьОшибку(ЭтаФорма, ОписаниеОшибки());
		АвтотестЗавершить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтотестЗавершить()
	
	Если ТипЗнч(ЭтаФорма.ОписаниеОповещенияОЗакрытии) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ЭтаФорма.ОписаниеОповещенияОЗакрытии, ТаблицаОшибок);
		ЭтаФорма.ОписаниеОповещенияОЗакрытии = Неопределено;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти