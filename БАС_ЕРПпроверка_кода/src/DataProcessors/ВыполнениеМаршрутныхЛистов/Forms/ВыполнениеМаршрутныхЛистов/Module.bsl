
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПриИзмененииПодразделенияВызовСервера();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПриИзмененииПодразделенияВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ПриИзмененииОтборовВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаРабочегоМестаПриАктивизации(Элемент)
	
	ОпределитьТекущийЭлементСхемы();
	ПоказатьОписаниеЭлемента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаРабочегоМестаВыбор(Элемент)
	
	ОбработатьВыборЭлементаСхемы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОбновитьДанныеФормы(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		ОбновитьДанные();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаСервере
Процедура ПриИзмененииОтборовВызовСервера()

	ОбновитьДанные();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПодразделенияВызовСервера()

	Если НЕ Подразделение.Пустая() Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаСхема;
		
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
		УправлениеМаршрутнымиЛистами = ПараметрыПодразделения.УправлениеМаршрутнымиЛистами;
		ГрафикРаботы = Строка(ПараметрыПодразделения.ГрафикРаботы);
		
		ПриИзмененииОтборовВызовСервера();
		
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаНеВыбраноПодразделение;
		УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьДанные()

	Если Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = "";
	ОписаниеЭлементовСхемы.Очистить();
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Установим нужную схему
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		ИмяШаблонаМакета = "МетодикаББВ";
	Иначе
		ИмяШаблонаМакета = "ПооперационноеПланирование";
	КонецЕсли;
	СхемаРабочегоМеста = Обработки.ВыполнениеМаршрутныхЛистов.ПолучитьМакет(ИмяШаблонаМакета);
	
	// Определим виды рабочих центров, которые относятся к выбранному РЦ
	Если НЕ ОтборРабочийЦентр.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РабочиеЦентры.ВидРабочегоЦентра
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	РабочиеЦентры.Ссылка В ИЕРАРХИИ(&РабочийЦентр)";
		Запрос.УстановитьПараметр("РабочийЦентр", ОтборРабочийЦентр);
		
		ВидыРабочихЦентров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра");
	Иначе
		ВидыРабочихЦентров = Новый Массив;
	КонецЕсли; 
	
	// Заполним схему данными
	ЗаполнитьФункциюВыработкаСотрудников(ВидыРабочихЦентров);
	ЗаполнитьФункциюВыпускПродукции(ВидыРабочихЦентров);
	
	Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
		ЗаполнитьФункциюВводДанныхОВыполнении(ВидыРабочихЦентров);
	Иначе
		ЗаполнитьФункциюВыполнениеОпераций();
	КонецЕсли;

	ДобавитьОписаниеЭлементаСхемы("Форма_МаршрутныеЛисты_КВыполнению", 
								НСтр("ru='Маршрутные листы переданные к выполнению';uk='Маршрутні листи передані до виконання'"), 
								НСтр("ru='Позволяет открыть список маршрутных листов переданных к выполнению.';uk='Дозволяє відкрити список маршрутних листів переданих до виконання.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_МаршрутныеЛисты_Выполнен", 
								НСтр("ru='Выполненные маршрутные листы';uk='Виконані маршрутні листи'"), 
								НСтр("ru='Позволяет открыть список выполненных маршрутных листов.';uk='Дозволяє відкрити список виконаних маршрутних листів.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_Бригады", 
								НСтр("ru='Бригады';uk='Бригади'"), 
								НСтр("ru='Позволяет открыть список бригад.';uk='Дозволяє відкрити список бригад.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_ПечатьСуточныеЗадания", 
								НСтр("ru='Сменно-суточные задания';uk='Змінно-добові завдання'"), 
								НСтр("ru='Позволяет сформировать сменно-суточные задания.';uk='Дозволяє сформувати змінно-добові завдання.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Данные_Трудозатраты", 
								НСтр("ru='Трудозатраты';uk='Трудовитрати'"), 
								НСтр("ru='Работы выполненные бригадами.';uk='Роботи виконані бригадами.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Данные_ОтклоненияОтРасписания", 
								НСтр("ru='Отклонения от расписания';uk='Відхилення від розкладу'"), 
								НСтр("ru='При выполнении операций могут возникать отклонения от расписания.
                                            |При возникновении отклонения требуется перепланировать выполнение операций.'
                                            |;uk='При виконанні операцій можуть виникати відхилення від розкладу.
                                            |При виникненні відхилення потрібно перепланувати виконання операцій.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Данные_ФактическиеДанныеПоМаршрутномуЛисту", 
								НСтр("ru='Фактический расход материалов, выпуск изделий и выполнение работ';uk='Фактичне витрачання матеріалів, випуск виробів і виконання робіт'"), 
								НСтр("ru='При выполнении операций можно ввести отклонения или фактический расход материалов, выпуск изделий и выполнение работ.';uk='При виконанні операцій можна ввести відхилення або фактичне витрачання матеріалів, випуск виробів і виконання робіт.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_СоставБригад", 
								НСтр("ru='Состав бригад';uk='Склад бригад'"), 
								НСтр("ru='Позволяет сформировать состав бригад.';uk='Дозволяє сформувати склад бригад.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Форма_ВыпускПродукции", 
								НСтр("ru='Выпуск продукции';uk='Випуск продукції'"), 
								НСтр("ru='Позволяет открыть оформленный выпуско продукции.';uk='Дозволяє відкрити оформлений випуск продукції.'"));
								
	ДобавитьОписаниеЭлементаСхемы("Функция_ОтметкаВыполнения", 
								НСтр("ru='Отметка выполнения маршрутных листов';uk='Відмітка виконання маршрутних листів'"), 
								НСтр("ru='Для оформления выпуска продукции и выполнения работ и услуг требуется отметить выполнение маршрутных листов.';uk='Для оформлення випуску продукції і виконання робіт і послуг потрібно відмітити виконання маршрутних листів.'"));
								
	ПоказатьОписаниеЭлемента(ЭтаФорма);
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьДанныеФункции(ИмяФункции, ЗаголовокФункции, ОписаниеФункции, ШаблонПоказатель1, ШаблонПоказатель2, ШаблонОписаниеПоказатель1, ШаблонОписаниеПоказатель2, ШаблонПустойПоказатель = Неопределено, Показатель1 = Неопределено, Показатель2 = Неопределено)

	ТекстТекущееСостояние = "";
	ТекстПоказатель1      = "";
	ТекстПоказатель2      = "";
	ТекстПустойПоказатель = "";
	
	Если ЗначениеЗаполнено(Показатель1) Тогда
		ТекстПоказатель1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоказатель1, Показатель1);
		ТекстТекущееСостояние = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписаниеПоказатель1, Показатель1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатель2) Тогда
		ТекстПоказатель2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоказатель2, Показатель2);
		ТекстТекущееСостояние = ТекстТекущееСостояние + ?(ТекстТекущееСостояние = "", "", Символы.ПС)
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписаниеПоказатель2, Показатель2);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Показатель1) И  НЕ ЗначениеЗаполнено(Показатель2) Тогда
		Если ШаблонПустойПоказатель <> Неопределено Тогда
			ТекстПустойПоказатель = ШаблонПустойПоказатель;
			ТекстТекущееСостояние = ШаблонПустойПоказатель;
		Иначе
			ТекстПустойПоказатель = НСтр("ru='- нет задач';uk='- немає задач'");
			ТекстТекущееСостояние = НСтр("ru='- нет задач';uk='- немає задач'");
		КонецЕсли; 
	КонецЕсли; 
	
	ЭлементСхемы = СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("Показатель1_" + ИмяФункции);
	Если ЭлементСхемы <> Неопределено Тогда
		ЭлементСхемы.Наименование = ТекстПоказатель1;
	КонецЕсли; 
	
	ЭлементСхемы = СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("Показатель2_" + ИмяФункции);
	Если ЭлементСхемы <> Неопределено Тогда
		ЭлементСхемы.Наименование = ТекстПоказатель2;
	КонецЕсли; 
	
	ЭлементСхемы = СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("ПустойПоказатель_" + ИмяФункции);
	Если ЭлементСхемы <> Неопределено Тогда
		ЭлементСхемы.Наименование = ТекстПустойПоказатель;
	КонецЕсли; 
	
	ШаблонОписания = НСтр("ru='%1
                                |
                                |Текущее состояние:
                                |%2'
                                |;uk='%1
                                |
                                |Поточний стан:
                                |%2'");
								
	ОписаниеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания, ОписаниеФункции, ТекстТекущееСостояние);
											
	ДобавитьОписаниеЭлементаСхемы("Функция_" + ИмяФункции, ЗаголовокФункции, ОписаниеЭлемента);

КонецПроцедуры
 
&НаСервере
Процедура ДобавитьОписаниеЭлементаСхемы(ИмяЭлемента, Заголовок, Описание)

	НовоеОписание = ОписаниеЭлементовСхемы.Добавить();
	НовоеОписание.ИмяЭлемента = ИмяЭлемента;
	НовоеОписание.Заголовок = Заголовок;
	НовоеОписание.Описание = Описание;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциюВыработкаСотрудников(ВидыРабочихЦентров)

	Оформить = 0;
	
	Если ОтборРабочийЦентр.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
		|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
		|ИЗ
		|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(, Бригада.Подразделение = &Подразделение) КАК ТрудозатратыКОформлению";
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Оформить = Запрос.Выполнить().Выгрузить().Количество();
		
	Иначе	
		
		Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
			
			// При ББВ/УББВ отбор по рабочему центру 
			// устанавливается для видов РЦ маршрутного листа
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
			|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
			|ИЗ
			|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
			|			,
			|			Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
			|				И Бригада.Подразделение = &Подразделение) КАК ТрудозатратыКОформлению
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводства
			|		ПО (МаршрутныйЛистПроизводства.Ссылка = ТрудозатратыКОформлению.Распоряжение)
			|			И (МаршрутныйЛистПроизводства.ВидРабочегоЦентра В (&ВидыРабочихЦентров))";
			
			Запрос.УстановитьПараметр("Подразделение",      Подразделение);
			Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
			
			Оформить = Запрос.Выполнить().Выгрузить().Количество();
			
		Иначе	
			
			// При пооперационном планировании отбор по рабочему центру 
			// устанавливается для рабочих центров завершенных операций
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
			|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
			|ИЗ
			|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
			|			,
			|			Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
			|				И Бригада.Подразделение = &Подразделение) КАК ТрудозатратыКОформлению
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК МаршрутныйЛистПроизводстваТрудозатраты
			|		ПО (МаршрутныйЛистПроизводстваТрудозатраты.Ссылка = ТрудозатратыКОформлению.Распоряжение)
			|			И (МаршрутныйЛистПроизводстваТрудозатраты.НомерСтроки = ТрудозатратыКОформлению.КодСтрокиРаспоряжения)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
			|		ПО (МаршрутныйЛистПроизводстваОперации.Ссылка = МаршрутныйЛистПроизводстваТрудозатраты.Ссылка)
			|			И (МаршрутныйЛистПроизводстваОперации.КлючСвязи = МаршрутныйЛистПроизводстваТрудозатраты.КлючСвязиОперации)
			|			И (МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра В (&ВидыРабочихЦентров))
			|ГДЕ
			|	ВЫБОР
			|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
			|				ТОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеСформировано)
			|					ИЛИ МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеАктуально)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеЗапланировано)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &ОтметкаНаДату
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
			|		КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)";
			
			Запрос.УстановитьПараметр("Подразделение",      Подразделение);
			Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
			Запрос.УстановитьПараметр("ОтметкаНаДату",      ТекущаяДата);
			
			Оформить = Запрос.Выполнить().Выгрузить().Количество();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ДобавитьДанныеФункции("ВыработкаСотрудников", 
						НСтр("ru='Выработка сотрудников';uk='Виробіток співробітників'"),
						НСтр("ru='Позволяет оформить выработку сотрудников по выполненным работам.';uk='Дозволяє оформити виробіток співробітників по виконаних роботах.'"),
						, 
						НСтр("ru='- оформить %1';uk='- оформити %1'"),
						,
						НСтр("ru='- необходимо оформить выработку по %1 видам работ';uk='- необхідно оформити виробіток за %1 видами робіт'"),,
						,
						Оформить);
						
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциюВыпускПродукции(ВидыРабочихЦентров)

	Если ОтборРабочийЦентр.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспоряженияНаВыпуск.Распоряжение КАК Распоряжение,
		|	РаспоряженияНаВыпуск.КодСтроки КАК КодСтроки
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
		|			,
		|			(&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|					ИЛИ Распоряжение.Подразделение = &Подразделение)
		|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК РаспоряженияНаВыпуск
		|ГДЕ
		|	РаспоряженияНаВыпуск.КОформлениюОстаток > 0";
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		
		Оформить = Запрос.Выполнить().Выгрузить().Количество();
		
	Иначе	
		
		Если УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.МетодикаББВ Тогда
			
			// При ББВ/УББВ отбор по рабочему центру 
			// устанавливается для видов РЦ маршрутного листа
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаспоряженияНаВыпуск.Распоряжение КАК Распоряжение,
			|	РаспоряженияНаВыпуск.КодСтроки КАК КодСтроки
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
			|			,
			|			(&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|					ИЛИ Распоряжение.Подразделение = &Подразделение)
			|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК РаспоряженияНаВыпуск
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводства
			|		ПО (МаршрутныйЛистПроизводства.Ссылка = РаспоряженияНаВыпуск.Распоряжение)
			|			И (МаршрутныйЛистПроизводства.ВидРабочегоЦентра В (&ВидыРабочихЦентров))
			|ГДЕ
			|	РаспоряженияНаВыпуск.КОформлениюОстаток > 0";
			
			Запрос.УстановитьПараметр("Подразделение",      Подразделение);
			Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
			
			Оформить = Запрос.Выполнить().Выгрузить().Количество();
			
		Иначе	
			
			// При пооперационном планировании отбор по рабочему центру 
			// устанавливается для рабочих центров завершенных операций
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаспоряженияНаВыпуск.Распоряжение КАК Распоряжение,
			|	РаспоряженияНаВыпуск.КодСтроки КАК КодСтроки
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
			|			,
			|			(&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
			|					ИЛИ Распоряжение.Подразделение = &Подразделение)
			|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК РаспоряженияНаВыпуск
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК МаршрутныйЛистПроизводстваВыходныеИзделия
			|		ПО (МаршрутныйЛистПроизводстваВыходныеИзделия.Ссылка = РаспоряженияНаВыпуск.Распоряжение)
			|			И (МаршрутныйЛистПроизводстваВыходныеИзделия.КодСтроки = РаспоряженияНаВыпуск.КодСтроки)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
			|		ПО (МаршрутныйЛистПроизводстваОперации.Ссылка = МаршрутныйЛистПроизводстваВыходныеИзделия.Ссылка)
			|			И (МаршрутныйЛистПроизводстваОперации.КлючСвязи = МаршрутныйЛистПроизводстваВыходныеИзделия.КлючСвязиОперации)
			|			И (МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра В (&ВидыРабочихЦентров))
			|ГДЕ
			|	РаспоряженияНаВыпуск.КОформлениюОстаток > 0
			|	И ВЫБОР
			|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
			|				ТОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеСформировано)
			|					ИЛИ МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеАктуально)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеЗапланировано)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
			|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &ОтметкаНаДату
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
			|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
			|		КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)";
			
			Запрос.УстановитьПараметр("Подразделение",      Подразделение);
			Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
			Запрос.УстановитьПараметр("ОтметкаНаДату",      ТекущаяДата);
			
			Оформить = Запрос.Выполнить().Выгрузить().Количество();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ДобавитьДанныеФункции("ВыпускПродукции", 
						НСтр("ru='Выпуск продукции';uk='Випуск продукції'"),
						НСтр("ru='Позволяет оформить выпуск продукции.';uk='Дозволяє оформити випуск продукції.'"),
						, 
						НСтр("ru='- оформить %1';uk='- оформити %1'"),
						,
						НСтр("ru='- необходимо оформить выпуск по %1 маршрутным листам';uk='- необхідно оформити випуск за %1 маршрутними листами'"),,
						,
						Оформить);
						
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциюВыполнениеОпераций()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало <= &КонецДня
	|					И МаршрутныйЛистПроизводстваОперации.Окончание >= &НачалоДня
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыполнитьНаСегодня,
	|	СУММА(ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &КонецДня
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредстоитВыполнить
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	|		ПО (МаршрутныйЛистПроизводстваОперации.Ссылка = МаршрутныйЛистПроизводства.Ссылка)
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Проведен
	|	И МаршрутныйЛистПроизводства.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению),
	|											ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется))
	|	И МаршрутныйЛистПроизводства.Подразделение = &Подразделение
	|	И ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|				ТОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеСформировано)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеЗапланировано)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &ОтметкаНаДату
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|		КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато), ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато))
	|	И (&РабочийЦентр = ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|			ИЛИ ВЫБОР
	|				КОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентрПоРасписанию <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|					ТОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентрПоРасписанию
	|				КОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
	|					ТОГДА МаршрутныйЛистПроизводстваОперации.РабочийЦентр
	|				ИНАЧЕ МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра
	|			КОНЕЦ В ИЕРАРХИИ (&РабочийЦентр))";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("РабочийЦентр",  ОтборРабочийЦентр);
	Запрос.УстановитьПараметр("ОтметкаНаДату", ТекущаяДата);
	Запрос.УстановитьПараметр("НачалоДня",     НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("КонецДня",      КонецДня(ТекущаяДата));
	
	ВыполнитьНаСегодня = 0;
	ПредстоитВыполнить = 0;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ВыполнитьНаСегодня = Выборка.ВыполнитьНаСегодня;
		ПредстоитВыполнить = Выборка.ПредстоитВыполнить;
	КонецЕсли; 
	
	ДобавитьДанныеФункции("ВыполнениеОпераций", 
						НСтр("ru='Выполнение операций';uk='Виконання операцій'"),
						НСтр("ru='Позволяет отразить выполнение операций, ввести фактический расход материалов, выпуск изделий и выполнение работ, сформировать сменно-суточные задания.';uk='Дозволяє відобразити виконання операцій, ввести фактичне витрачання матеріалів, випуск виробів і виконання робіт, сформувати змінно-добові завдання.'"),
						НСтр("ru='- на сегодня %1';uk='- на сьогодні %1'"),
						НСтр("ru='- предстоит %1';uk='- передбачається %1'"),
						НСтр("ru='- на сегодня запланировано %1 операций';uk='- на сьогодні заплановано %1 операцій'"),
						НСтр("ru='- в последующие дни предстоит выполнить %1 операций';uk='- у наступні дні належить виконати %1 операцій'"),
						НСтр("ru='- на сегодня нет задач';uk='- на сьогодні немає задач'"),
						ВыполнитьНаСегодня,
						ПредстоитВыполнить);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункциюВводДанныхОВыполнении(ВидыРабочихЦентров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МаршрутныйЛистПроизводства.Ссылка), 0) КАК Выполняется
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводства
	|ГДЕ
	|	МаршрутныйЛистПроизводства.Ссылка.Подразделение = &Подразделение
	|	И МаршрутныйЛистПроизводства.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется)
	|	И МаршрутныйЛистПроизводства.Ссылка.Проведен
	|	И (НЕ &ИспользоватьОтборПоВидамРЦ
	|			ИЛИ МаршрутныйЛистПроизводства.ВидРабочегоЦентра В (&ВидыРабочихЦентров))";
	
	Запрос.УстановитьПараметр("Подразделение",      Подразделение);
	Запрос.УстановитьПараметр("ВидыРабочихЦентров", ВидыРабочихЦентров);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоВидамРЦ", НЕ ОтборРабочийЦентр.Пустая());
	
	Выполняется = 0;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Выполняется = Выборка.Выполняется;
	КонецЕсли; 

	ДобавитьДанныеФункции("ВводДанныхОВыполнении", 
						НСтр("ru='Ввод данных о выполнении';uk='Введення даних про виконання'"),
						НСтр("ru='Позволяет отметить выполнение маршрутных листов.';uk='Дозволяє відзначити виконання маршрутних листів.'"),
						, 
						НСтр("ru='- выполняется %1';uk='- виконується %1'"),
						,
						НСтр("ru='- выполняется %1 маршрутных листов';uk='- виконується %1 маршрутних листів'"),,
						,
						Выполняется);
						
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОбработатьВыборЭлементаСхемы()
	
	Если ИмяТекущегоЭлемента = "" ИЛИ Подразделение.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Подразделение, РабочийЦентр", Подразделение, ОтборРабочийЦентр);
	
	Если СтрНайти(ИмяТекущегоЭлемента, "ВыполнениеОпераций") <> 0 Тогда
		
		ОткрытьФорму("Обработка.ВыполнениеОпераций.Форма", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_ВыработкаСотрудников") <> 0 Тогда
		
		ПараметрыФормы.Вставить("ОтборВидНаряда", ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.ПустаяСсылка"));
		ПараметрыФормы.Вставить("ПерейтиКСписку");
		ОткрытьФорму("Документ.ВыработкаСотрудников.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ВыработкаСотрудников") <> 0 Тогда
		
		ПараметрыФормы.Вставить("ОтборВидНаряда", ПредопределенноеЗначение("Перечисление.ВидыБригадныхНарядов.ПустаяСсылка"));
		ОткрытьФорму("Документ.ВыработкаСотрудников.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ПечатьСуточныеЗадания") <> 0 Тогда
		
		ОперативныйУчетПроизводстваКлиент.ОткрытьФормуДляПечатиСменноСуточныхЗаданий(ЭтаФорма, ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_ВыпускПродукции") <> 0 Тогда
		
		ПараметрыФормы.Вставить("ПерейтиКСписку");
		ОткрытьФорму("Документ.ВыпускПродукции.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ВыпускПродукции") <> 0 Тогда
		
		ОткрытьФорму("Документ.ВыпускПродукции.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ОтметкаВыполнения") <> 0 Тогда
		
		МетодикаУправления = МетодикаУправленияМаршрутнымиЛистами(Подразделение);
		Если МетодикаУправления = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ") Тогда
			ОткрытьФорму("Обработка.ДиспетчированиеПроизводства.Форма", ПараметрыФормы);
		ИначеЕсли МетодикаУправления = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование")
			ИЛИ МетодикаУправления = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций") Тогда
			ОперативныйУчетПроизводстваКлиент.ОткрытьФормуДиспетчированиеПооперационное(МетодикаУправления, Подразделение);
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_МаршрутныеЛисты_КВыполнению") <> 0 Тогда
		
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению"));
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_МаршрутныеЛисты_Выполнен") <> 0 Тогда
		
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен"));
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_Бригады") <> 0 Тогда
		
		ОткрытьФорму("Справочник.Бригады.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "Форма_СоставБригад") <> 0 Тогда
		
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен"));
		ОткрытьФорму("Документ.ФормированиеСоставаБригады.ФормаСписка", ПараметрыФормы);
		
	ИначеЕсли СтрНайти(ИмяТекущегоЭлемента, "ВводДанныхОВыполнении") <> 0 Тогда
		
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется"));
		ОткрытьФорму("Документ.МаршрутныйЛистПроизводства.ФормаСписка", ПараметрыФормы);
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьТекущийЭлементСхемы()

	Если Элементы.СхемаРабочегоМеста.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = Элементы.СхемаРабочегоМеста.ТекущийЭлемент.Имя;
	
	// Если выбран показатель, то сделаем активным функцию в которую входит показатель
	Если СтрНайти(ИмяТекущегоЭлемента, "Показатель") <> 0 Тогда
		ИмяТекущегоЭлемента = "Функция" + Сред(ИмяТекущегоЭлемента, СтрНайти(ИмяТекущегоЭлемента, "_"));
		Элементы.СхемаРабочегоМеста.ТекущийЭлемент = СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти(ИмяТекущегоЭлемента);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьОписаниеЭлемента(Форма)
	
	#Если НЕ ВебКлиент Тогда
		
	ТекстЗаголовка = НСтр("ru='Подсказка';uk='Підказка'");
	ТекстОписание  = НСтр("ru='При выборе элемента двойным щелчком открывается рабочее место.
                                |При выборе элемента одним щелчком отображается пояснение.'
                                |;uk='При виборі елемента подвійним клацанням відкривається робоче місце.
                                |При виборі елемента одним клацанням відображається пояснення.'");
	
	Если Форма.ИмяТекущегоЭлемента <> "" Тогда
		Для каждого ОписаниеЭлемента Из Форма.ОписаниеЭлементовСхемы Цикл
			Если СтрНайти(Форма.ИмяТекущегоЭлемента, ОписаниеЭлемента.ИмяЭлемента) <> 0 Тогда
				ТекстЗаголовка = ОписаниеЭлемента.Заголовок;
				ТекстОписание  = ОписаниеЭлемента.Описание;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	ЭлементСхемы = Форма.СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("ОписаниеФункции_Заголовок");
	ЭлементСхемы.Наименование = ТекстЗаголовка;
	
	ЭлементСхемы = Форма.СхемаРабочегоМеста.ЭлементыГрафическойСхемы.Найти("ОписаниеФункции_Текст");
	ЭлементСхемы.Наименование = ТекстОписание;
	
	#КонецЕсли 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МетодикаУправленияМаршрутнымиЛистами(Подразделение)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "УправлениеМаршрутнымиЛистами");
	
КонецФункции

#КонецОбласти

#КонецОбласти
