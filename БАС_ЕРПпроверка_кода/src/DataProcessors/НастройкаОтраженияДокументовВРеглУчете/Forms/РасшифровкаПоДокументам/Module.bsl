#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НачальныйТекстЗапроса = Список.ТекстЗапроса;
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеФормы();
	
	#Область ПервоначальноеЗаполнениеПоПараметрам
	
	Если Параметры.Свойство("ДатаОкончанияПериода") И Не Параметры.ДатаОкончанияПериода = '39991231' Тогда
		КонецПериода = Параметры.ДатаОкончанияПериода;
		УстановитьОтборПоПериоду(Список, НачалоПериода, КонецПериода);
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоДокументКорректировки") Тогда
		
		Для каждого ЭлементСпискаДокументов из СписокТипыДокументов Цикл
			ЭлементСпискаДокументов.Пометка = ?(ЭлементСпискаДокументов.Значение = "Документ.ОперацияБух", 
				Параметры.ЭтоДокументКорректировки, Не Параметры.ЭтоДокументКорректировки);
		КонецЦикла;				
		
		УстановитьОтборПоТипуДокументов(Список, СписокТипыДокументов);
		ОбновитьПредставлениеТипДокументаОтбор(ТипДокументаОтбор, СписокТипыДокументов);
		
	КонецЕсли;
		
	Параметры.Отбор.Свойство("Организация", Организация);
	Параметры.Отбор.Свойство("СтатусОтражения", СтатусОтражения);
	Параметры.Отбор.Свойство("СтатусПроверки", СтатусПроверки);
		
	#КонецОбласти
	
	УстановитьТекстЗапроса();
	
#Область УстановкаЗначенийПеречисленийДляПроверок
	СтатусАвтоматическогоОтраженияВУчете = Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете;
	СтатусРучногоОтраженияВУчете		 = Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную;
	СтатусПроверенногоДокумента			 = Перечисления.ЭтапыПроверкиДокументаВРеглУчете.Проверен;
	РучноеОтражениеДокументов			 = ПолучитьФункциональнуюОпцию("ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету");
#КонецОбласти
	
	#Область УстановкаДоступностиКомандНаОснованииПереданныхОтборов
	
	УстановитьДоступностьЭлементовПоСтатусуОтражения();
	
	Если Не Элементы.Найти("СписокПроверить") = Неопределено И Не Элементы.Найти("СписокОтменитьПроверку") = Неопределено Тогда
		Элементы.СписокПроверить.Доступность = Не ЗначениеЗаполнено(СтатусПроверки) ИЛИ Не СтатусПроверки = СтатусПроверенногоДокумента;
		Элементы.СписокОтменитьПроверку.Доступность = Не ЗначениеЗаполнено(СтатусПроверки) ИЛИ СтатусПроверки = СтатусПроверенногоДокумента;
	КонецЕсли;
		
	Если Параметры.Свойство("ЭтоДокументКорректировки") Тогда
		Элементы.СоздатьНаОсновании.Доступность = Не Параметры.ЭтоДокументКорректировки;
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборОбъектовМетаданных" Тогда
		
		Если ТипЗнч(Параметр) = Тип("СписокЗначений") Тогда
			
			Для каждого ЭлементТипаДокумента из СписокТипыДокументов Цикл
				
				ЭлементВыбранныхТиповВФормеВыбора = Параметр.НайтиПоЗначению(ЭлементТипаДокумента.Значение);
				
				ЭлементТипаДокумента.Пометка = Не ЭлементВыбранныхТиповВФормеВыбора = Неопределено;
				
			КонецЦикла;
			
			ОбновитьПредставлениеТипДокументаОтбор(ТипДокументаОтбор, СписокТипыДокументов);
			УстановитьОтборПоТипуДокументов(Список, СписокТипыДокументов);
			УстановитьТекстЗапроса();
			Элементы.Список.Обновить();
			Элементы.СоздатьНаОсновании.Доступность = Не (Параметр.Количество() = 1 И Параметр.Получить(0).Значение = "Документ.ОперацияБух");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Отражение документов в регламентированном учете"
		ИЛИ ИмяСобытия = "Запись_СтатусПроверкиДокумента" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		Если Источник = "ИспользоватьПроверкуДокументовПоРегламентированномуУчету"
			ИЛИ Источник = "РазрешатьИзменятьПроверенныеДокументыПоРеглУчету"
			ИЛИ Источник = "ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету" Тогда
			
			ОбновитьДанныеФормы();
			
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяСобытия = "РасшифровкаПоДокументам_ИзмененийУсловийОтбора" Тогда
			
		ОбновитьСтруктуруОтбораФормы(Параметр);
		Активизировать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Оповестить("ЗакрытаФормаСпискаДокументов");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СписокТипыДокументовПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ФильтрПоОбъектамМетаданных, ВыбранныеОбъектыМетаданных, НачальноеЗначениеВыбора");
	
	СписокТиповДокументов = Новый СписокЗначений;
	Для каждого ЭлементСпискаТипаДокументов из СписокТипыДокументов Цикл
		СписокТиповДокументов.Добавить(ЭлементСпискаТипаДокументов.Значение);
	КонецЦикла;
	ПараметрыФормы.ФильтрПоОбъектамМетаданных = СписокТиповДокументов;
	
	СписокВыбранныхТиповДокументов = Новый СписокЗначений;
	ЭлементБезПометки = Неопределено;
	Для каждого ЭлементСпискаТипаДокументов из СписокТипыДокументов Цикл
		Если ЭлементСпискаТипаДокументов.Пометка Тогда
			СписокВыбранныхТиповДокументов.Добавить(ЭлементСпискаТипаДокументов.Значение);
		Иначе
			ЭлементБезПометки = ЭлементСпискаТипаДокументов;
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.ВыбранныеОбъектыМетаданных = СписокВыбранныхТиповДокументов;
	
	Если СписокВыбранныхТиповДокументов.Количество() > 10 Тогда
		// Спозиционируем выбор на последнем элементе который не выбран.
		ПараметрыФормы.НачальноеЗначениеВыбора = ЭлементБезПометки.Значение;
	ИначеЕсли СписокВыбранныхТиповДокументов.Количество() = 0 Тогда
		// Выбранных элементов нет вообще, поэтому спозиционируем на первом элементе всего списка.
		ПараметрыФормы.НачальноеЗначениеВыбора = СписокТиповДокументов.Получить(0).Значение;
	Иначе
		// Выбранных элементов несколько, спозиционируем выбор на первом из них.
		ПараметрыФормы.НачальноеЗначениеВыбора = СписокВыбранныхТиповДокументов.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Отбор по типам документов';uk='Відбір за типами документів'"));
		
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокТипыДокументовПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьОтборПоТипуДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация, , , ЗначениеЗаполнено(Организация));
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	УстановитьОтборПоПериоду(Список, НачалоПериода, КонецПериода);
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	УстановитьОтборПоПериоду(Список, НачалоПериода, КонецПериода);
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтраженияОтборПриИзменении(Элемент)
	
	ВидСравненияСтатусаОтражения = ?(ТипЗнч(СтатусОтражения) = Тип("СписокЗначений"),
		ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусОтражения", СтатусОтражения,
		ВидСравненияСтатусаОтражения, , Не СтатусОтражения.Пустая());
		
	УстановитьДоступностьЭлементовПоСтатусуОтражения();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПроверкиОтборПриИзменении(Элемент)
	
	ВидСравненияСтатусаПроверки = ?(ТипЗнч(СтатусПроверки) = Тип("СписокЗначений"),
		ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусПроверки", СтатусПроверки,
		ВидСравненияСтатусаПроверки, , Не СтатусПроверки.Пустая());
		
	Если Не Элементы.Найти("СписокПроверить") = Неопределено И Не Элементы.Найти("СписокОтменитьПроверку") = Неопределено Тогда
		Элементы.СписокПроверить.Доступность = Не ЗначениеЗаполнено(СтатусПроверки) ИЛИ Не СтатусПроверки = СтатусПроверенногоДокумента;
		Элементы.СписокОтменитьПроверку.Доступность = Не ЗначениеЗаполнено(СтатусПроверки) ИЛИ СтатусПроверки = СтатусПроверенногоДокумента;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСписка

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаСписка = Элементы.Список.ТекущиеДанные;
	ПоказатьЗначение(Неопределено, СтрокаСписка.Документ);
	
КонецПроцедуры // СписокВыбор()

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПолучитьКомментарий", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТестироватьСозданиеПроводок(Команда)
	
	СтрокаСписка = Элементы.Список.ТекущиеДанные;
	Если СтрокаСписка <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("ДокументСсылка", СтрокаСписка.Документ);
		ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ТестированиеПроводок", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВУчете(Команда)
	МассивДляОтражения = Новый Массив;
	МассивДокументов = Новый Массив;
	Для каждого Стр из Элементы.Список.ВыделенныеСтроки Цикл
		СтруктураОтражения = Новый Структура("Документ, СтатусОтражения");
		ЗаполнитьЗначенияСвойств(СтруктураОтражения, Элементы.Список.ДанныеСтроки(Стр));
		МассивДляОтражения.Добавить(СтруктураОтражения);
		МассивДокументов.Добавить(СтруктураОтражения.Документ);
	КонецЦикла;
	ОтразитьДокументыВУчетеНаСервере(МассивДляОтражения);
	Оповестить("Отражение документов в регламентированном учете", МассивДокументов, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроверку(Команда)
	
	МассивДокументов = Новый Массив;
	Для каждого Стр из Элементы.Список.ВыделенныеСтроки Цикл
		Данные = Элементы.Список.ДанныеСтроки(Стр);
		Если Не Данные.СтатусПроверки.Пустая() Тогда
			МассивДокументов.Добавить(Данные.Документ);
		КонецЕсли;
	КонецЦикла;
	
	СообщениеОбОшибках = УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, Ложь);
	
	Если МассивДокументов.Количество() > 0 Тогда
		Оповестить("Запись_СтатусПроверкиДокумента", МассивДокументов, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибках) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибках);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтражениеВУчете(Команда)
	МассивДляОтражения = Новый Массив;
	МассивДокументов = Новый Массив;
	Для каждого Стр из Элементы.Список.ВыделенныеСтроки Цикл
		СтруктураОтражения = Новый Структура("Документ, СтатусОтражения");
		ЗаполнитьЗначенияСвойств(СтруктураОтражения, Элементы.Список.ДанныеСтроки(Стр));
		МассивДляОтражения.Добавить(СтруктураОтражения);
		МассивДокументов.Добавить(СтруктураОтражения.Документ);
	КонецЦикла;
	ОтменитьОтражениеДокументовВУчетеНаСервере(МассивДляОтражения);
	Оповестить("Отражение документов в регламентированном учете", МассивДокументов, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	МассивДокументов = Новый Массив;
	Для каждого Стр из Элементы.Список.ВыделенныеСтроки Цикл
		Данные = Элементы.Список.ДанныеСтроки(Стр);
		Если Не Данные.СтатусПроверки.Пустая() Тогда
			МассивДокументов.Добавить(Данные.Документ);
		КонецЕсли;
	КонецЦикла;
	
	СообщениеОбОшибках = УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, Истина);
	
	Если МассивДокументов.Количество() > 0 Тогда
		Оповестить("Запись_СтатусПроверкиДокумента", МассивДокументов, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибках) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибках);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииКорректировку(Команда)
	
	МассивДокументов = Новый Массив;
	ТекущаяОрганизация = Организация;
	Для каждого Стр из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Стр);
		Если Не ТипЗнч(ДанныеСтроки.Документ) = Тип("ДокументСсылка.ОперацияБух") Тогда
			МассивДокументов.Добавить(ДанныеСтроки.Документ);
		КонецЕсли;
		Если ТекущаяОрганизация.Пустая() Тогда
			ТекущаяОрганизация = ДанныеСтроки.Организация;
		ИначеЕсли Не ТекущаяОрганизация = ДанныеСтроки.Организация Тогда
			ТекстОшибки = НСтр("ru='Документ корректировки можно ввести только для документов по одной организации!';uk='Документ коригування можна ввести тільки для документів з однієї організації!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() Тогда
		ПараметрыОперации = Новый Структура("Основание", МассивДокументов);
		ОткрытьФорму("Документ.ОперацияБух.ФормаОбъекта", ПараметрыОперации);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данную команду нельзя выполнить для операции регл. учета.';uk='Дану команду неможна виконати для операції регл. обліку.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроводкиРеглУчета(Команда)
	
	Документ = Элементы.Список.ТекущиеДанные.Документ;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОперацияБух") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данную команду нельзя выполнить для операции регл. учета.';uk='Дану команду неможна виконати для операції регл. обліку.'"));
	Иначе
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Регистратор", Документ));
		ОткрытьФорму("Обработка.ОтражениеДокументовВРеглУчете.Форма.ПроводкиРегламентированногоУчета",
			ПараметрыФормы,
			Команда,
			Документ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСчетаУчета(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Организация", ТекущаяСтрока.Организация);
	ОткрытьФорму("Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаНастройки", 
		СтруктураПараметры, 
		ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДанныеФормы()
	
	ДокументыОтражаютсяВручную = ПолучитьФункциональнуюОпцию("ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДокументыОтражаютсяВручную", ДокументыОтражаютсяВручную);
	
	МассивТиповДокументов = Метаданные.РегистрыСведений.ОтражениеДокументовВРеглУчете.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") Тогда
		
		ТипыПроверяемыхДокументов = Метаданные.РегистрыСведений.СтатусыПроверкиДокументов.Измерения.Документ.Тип.Типы();
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СписокПроверяемыхТипов", ТипыПроверяемыхДокументов);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивТиповДокументов, ТипыПроверяемыхДокументов, Истина);
		
		ЗаполнитьСписокВыбораСтатусаПроверки();
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СписокПроверяемыхТипов", Новый Массив);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЕстьБлокировка", Ложь);
		
	КонецЕсли;
	
	Для каждого ТипДокумента из МассивТиповДокументов Цикл
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
		СписокТипыДокументов.Добавить(МетаданныеДокумента.ПолноеИмя(), МетаданныеДокумента.Представление());
		
	КонецЦикла;
	
	СписокТипыДокументов.СортироватьПоЗначению();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруОтбораФормы(ПараметрыОтбора) Экспорт
	
	Если ПараметрыОтбора.Свойство("ДатаОкончанияПериода") Тогда
		КонецПериода = ?(ПараметрыОтбора.ДатаОкончанияПериода = '39991231', Дата(1,1,1), ПараметрыОтбора.ДатаОкончанияПериода);
		УстановитьОтборПоПериоду(Список, НачалоПериода, КонецПериода);
	КонецЕсли;
		
	Если ПараметрыОтбора.Свойство("ЭтоДокументКорректировки") Тогда
		
		Для каждого ЭлементСпискаДокументов из СписокТипыДокументов Цикл
			ЭлементСпискаДокументов.Пометка = ?(ЭлементСпискаДокументов.Значение = "Документ.ОперацияБух", 
				ПараметрыОтбора.ЭтоДокументКорректировки, Не ПараметрыОтбора.ЭтоДокументКорректировки);
		КонецЦикла;				
		
		УстановитьОтборПоТипуДокументов(Список, СписокТипыДокументов);
		ОбновитьПредставлениеТипДокументаОтбор(ТипДокументаОтбор, СписокТипыДокументов);
		Элементы.СоздатьНаОсновании.Доступность = Не ПараметрыОтбора.ЭтоДокументКорректировки;
		
	Иначе
		
		ОчиститьОтборПоТипуДокументов();
		Элементы.СоздатьНаОсновании.Доступность = Истина;
		
	КонецЕсли;
	
	Если ПараметрыОтбора.Отбор.Свойство("Организация", Организация) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация",
			Организация, , , ЗначениеЗаполнено(Организация));
	КонецЕсли;
	
	ПараметрыОтбора.Отбор.Свойство("СтатусОтражения", СтатусОтражения);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусОтражения",
		СтатусОтражения, , , ЗначениеЗаполнено(СтатусОтражения));
	
	ПараметрыОтбора.Отбор.Свойство("СтатусПроверки", СтатусПроверки);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "СтатусПроверки",
		СтатусПроверки, , , ЗначениеЗаполнено(СтатусПроверки));
		
	УстановитьДоступностьЭлементовПоСтатусуОтражения();
		
	Если Не Элементы.Найти("СписокПроверить") = Неопределено И Не Элементы.Найти("СписокОтменитьПроверку") = Неопределено Тогда
		Элементы.СписокПроверить.Доступность = Не ЗначениеЗаполнено(СтатусПроверки) ИЛИ Не СтатусПроверки = СтатусПроверенногоДокумента;
		Элементы.СписокОтменитьПроверку.Доступность = Не ЗначениеЗаполнено(СтатусПроверки) ИЛИ СтатусПроверки = СтатусПроверенногоДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	УстановитьОтборПоПериоду(Список, НачалоПериода, КонецПериода);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеТипДокументаОтбор(ТипДокументаОтбор, СписокТипыДокументов)
	
	ТипДокументаОтбор = "";
	
	Для каждого ЭлементСпискаТиповДокументов Из СписокТипыДокументов Цикл
		Если ЭлементСпискаТиповДокументов.Пометка Тогда
			ТипДокументаОтбор = ТипДокументаОтбор + 
				?(ЗначениеЗаполнено(ТипДокументаОтбор), ", ", "") + ЭлементСпискаТиповДокументов.Представление;
		КонецЕсли;
	КонецЦикла;			
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоТипуДокументов(Список, СписокТипыДокументов)
	
	СписокВыбранныхТиповДокументов = Новый СписокЗначений;
	
	Для каждого ЭлементСпискаДокументов из СписокТипыДокументов Цикл
		Если ЭлементСпискаДокументов.Пометка Тогда
			ТипДокумента = Тип(СтрЗаменить(ЭлементСпискаДокументов.Значение, "Документ.", "ДокументСсылка."));
			СписокВыбранныхТиповДокументов.Добавить(ТипДокумента);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТипДокумента", СписокВыбранныхТиповДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке, , СписокВыбранныхТиповДокументов.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтборПоТипуДокументов()
	СписокТипыДокументов.ЗаполнитьПометки(Ложь);
	УстановитьОтборПоТипуДокументов(Список, СписокТипыДокументов);
	СписокТипыДокументовПредставление = "";
	ТипДокументаОтбор = "";
	УстановитьТекстЗапроса();
	Элементы.СоздатьНаОсновании.Доступность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборПоПериоду(Список, НачалоПериода, КонецПериода)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "НачалоПериода", НачалоПериода, ЗначениеЗаполнено(НачалоПериода)); 
		             
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "КонецПериода", КонецПериода, ЗначениеЗаполнено(КонецПериода)); 
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусаПроверки()
	
	СписокВыбора = Элементы.СтатусПроверкиОтбор.СписокВыбора;
	ЭтапыПроверки = Перечисления.ЭтапыПроверкиДокументаВРеглУчете;
	
	СписокВыбора.Очистить();
	                          
	СписокВыбора.Добавить(ЭтапыПроверки.Проверен, Строка(ЭтапыПроверки.Проверен));
	СписокВыбора.Добавить(ЭтапыПроверки.НеПроверен, Строка(ЭтапыПроверки.НеПроверен));
	
	РазрешатьИзменятьПроверенныеДокументыПоРеглУчету = ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЕстьБлокировка", Не РазрешатьИзменятьПроверенныеДокументыПоРеглУчету);
	
	Если РазрешатьИзменятьПроверенныеДокументыПоРеглУчету Тогда
		
		СписокВыбора.Добавить(ЭтапыПроверки.КПовторнойПроверке, Строка(ЭтапыПроверки.КПовторнойПроверке));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьСтатусПроверкиНаСервереИВернутьОшибки(МассивДокументов, СтатусПроверки)
	
	СтрокаОшибок = "";
	ДанныеОбОшибках = Новый Соответствие;
	
	РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументов(МассивДокументов, ДанныеОбОшибках, СтатусПроверки);
	
	Если ДанныеОбОшибках.Количество() Тогда
		
		Для каждого Ошибка из ДанныеОбОшибках Цикл
			СтрокаОшибок = СтрокаОшибок + Ошибка.Значение + ";" + Символы.ПС;
			ИндексОшибочногоДокументаВМассиве = МассивДокументов.Найти(Ошибка.Ключ);
			Если Не ИндексОшибочногоДокументаВМассиве = Неопределено Тогда
				МассивДокументов.Удалить(ИндексОшибочногоДокументаВМассиве);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаОшибок;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтразитьДокументыВУчетеНаСервере(МассивДанных)
	
	МассивДокументовДляАвтоматическогоОтражения = Новый Массив;
	МассивДокументовДляРучногоОтражения = Новый Массив;
	
	Для каждого СтруктураДанных из МассивДанных Цикл
		
		Если СтруктураДанных.СтатусОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете
			ИЛИ СтруктураДанных.СтатусОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета Тогда
			
				МассивДокументовДляАвтоматическогоОтражения.Добавить(СтруктураДанных.Документ);
				
		КонецЕсли;

		// Возможна ситуация когда функциональная опция ручного отражения снята, но документы отраженные вручную есть - для них тоже надо делать отражение:
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету")
			И (СтруктураДанных.СтатусОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную
			ИЛИ СтруктураДанных.СтатусОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную) Тогда
			
			МассивДокументовДляАвтоматическогоОтражения.Добавить(СтруктураДанных.Документ);
			Продолжить; // в данном случае эти документы не должны попадать к ручному отражению.
				
		КонецЕсли;
			
		Если СтруктураДанных.СтатусОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВУчетеВручную Тогда
			
			МассивДокументовДляРучногоОтражения.Добавить(СтруктураДанных.Документ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеглУчетПроведениеСервер.ОтразитьДокументыВРеглУчете(МассивДокументовДляАвтоматическогоОтражения);
	
	ЗаписатьНовыйСтатусОтражения(МассивДокументовДляРучногоОтражения, Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьОтражениеДокументовВУчетеНаСервере(МассивДанных)
	
	СтатусыОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете;
	
	СписокТиповИсключений = ИсключенияДляПереотражения();
	
	МассивДокументовДляАвтоматическогоОтражения = Новый Массив;
	МассивДокументовДляРучногоОтражения = Новый Массив;
	
	ТекстСообщения = "";
	
	Для каждого СтруктураДанных из МассивДанных Цикл
		
		// Будем отменять отражение только для автоматически отраженных документов, так как ставить на подтверждение вручную измененные документы видится излишним.

		Если СтруктураДанных.СтатусОтражения = СтатусыОтражения.ОтраженоВРеглУчете Тогда
			
			// Обработаем исключения документов, для которых нельзя откатить отражение в регл. учете:
			Если Не СписокТиповИсключений.Найти(ТипЗнч(СтруктураДанных.Документ)) = Неопределено Тогда
				ШаблонСообщения = НСтр("ru='Для документа ""%1"" невозможно отменить отражение в учете.';uk='Для документа ""%1"" неможливо скасувати відображення в обліку.'");
				ШаблонСообщения = СтрШаблон(ШаблонСообщения, СтруктураДанных.Документ);
				ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "") + ШаблонСообщения;
				Продолжить;
			КонецЕсли;
			
			МассивДокументовДляАвтоматическогоОтражения.Добавить(СтруктураДанных.Документ);
				
		КонецЕсли;
		
		// Возможна ситуация когда функциональная опция ручного отражения снята, но документы отраженные вручную есть - для них тоже надо снимать отражение:
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРучнуюКорректировкуПроводокПоРеглУчету") И
			(СтруктураДанных.СтатусОтражения = СтатусыОтражения.КОтражениюВУчетеВручную ИЛИ СтруктураДанных.СтатусОтражения = СтатусыОтражения.ОтраженоВУчетеВручную) Тогда
			
			МассивДокументовДляАвтоматическогоОтражения.Добавить(СтруктураДанных.Документ);
				
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьНовыйСтатусОтражения(МассивДокументовДляАвтоматическогоОтражения, Перечисления.СтатусыОтраженияДокументовВРеглУчете.КОтражениюВРеглУчете);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНовыйСтатусОтражения(МассивДокументов, СтатусОтражения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеДокументовВРеглУчете.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
	|ГДЕ
	|	ОтражениеДокументовВРеглУчете.Регистратор В(&МассивДокументов)
	|	И ОтражениеДокументовВРеглУчете.Статус <> &НовыйСтатус
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументовВРеглУчете.Период,
	|	ОтражениеДокументовВРеглУчете.Регистратор,
	|	ОтражениеДокументовВРеглУчете.Организация,
	|	ОтражениеДокументовВРеглУчете.ДатаОтражения,
	|	&НовыйСтатус КАК Статус,
	|	ОтражениеДокументовВРеглУчете.Комментарий
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документы КАК Документы
	|	ПО
	|		ОтражениеДокументовВРеглУчете.Регистратор = Документы.Ссылка
	|ИТОГИ ПО
	|	Регистратор";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("НовыйСтатус", СтатусОтражения);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НаборЗаписей = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
	ПараметрыБлокировки	= Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрСведений", "ОтражениеДокументовВРеглУчете.НаборЗаписей");
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();

		Попытка
			
			ЗначенияБлокировки	= Новый Структура("Регистратор", ВыборкаДокументов.Регистратор);
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(ПараметрыБлокировки, ЗначенияБлокировки);
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
			
			Выборка = ВыборкаДокументов.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ЗаписьОтражения = НаборЗаписей.Добавить();
			   	ЗаполнитьЗначенияСвойств(ЗаписьОтражения, Выборка);
			
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			СообщениеОбОшибке = НСтр("ru='Для документа %Документ%, операция изменения статуса отражения не выполнена.';uk='Для документа %Документ%, операція зміни статусу відображення не виконана.'");
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Документ%", ВыборкаДокументов.Регистратор);
			ЗаписьЖурналаРегистрации(НСтр("ru='Операция не выполнена.';uk='Операція не виконана.'"), УровеньЖурналаРегистрации.Ошибка, ВыборкаДокументов.Регистратор.Метаданные(), ВыборкаДокументов.Регистратор, СообщениеОбОшибке);
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИсключенияДляПереотражения()
	
	СписокТиповИсключений = Новый Массив;
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.АмортизацияНМА"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.АмортизацияОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ПередачаОСАрендатору"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ВозвратОСОтАрендатора"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ВыбытиеАрендованныхОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ИзменениеПараметровОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.МодернизацияОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ПеремещениеОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ПереоценкаНМА"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ПереоценкаОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеНМА"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.СписаниеНМА"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.СписаниеОС"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.РемонтОС"));	
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.ОперацияБух"));
	СписокТиповИсключений.Добавить(Тип("ДокументСсылка.РегламентнаяОперация"));
	
	Возврат СписокТиповИсключений;
	
КонецФункции

#Область ФормированиеЗапроса

&НаСервере
Процедура УстановитьТекстЗапроса()
	
	ТекстЗапроса = НачальныйТекстЗапроса;
	
	ТипыДополнительныхДанных = Новый Соответствие;
	ТипыДополнительныхДанных.Вставить("Автор", Тип("СправочникСсылка.Пользователи"));
	ТипыДополнительныхДанных.Вставить("Договор", Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ТипыДополнительныхДанных.Вставить("Касса", Тип("СправочникСсылка.Кассы"));
	ТипыДополнительныхДанных.Вставить("Контрагент", Тип("СправочникСсылка.Контрагенты"));
	ТипыДополнительныхДанных.Вставить("Партнер", Тип("СправочникСсылка.Партнеры"));
	ТипыДополнительныхДанных.Вставить("Склад", Тип("СправочникСсылка.Склады"));
	ТипыДополнительныхДанных.Вставить("ХозяйственнаяОперация", Тип("ПеречислениеСсылка.ХозяйственныеОперации"));
	ТипыДополнительныхДанных.Вставить("СуммаДокумента", Тип("Число"));
	ТипыДополнительныхДанных.Вставить("Валюта", Тип("СправочникСсылка.Валюты"));
	
	ДополнительныеДанные = Новый Соответствие;
	Для каждого ТипДополнительныхДанных из ТипыДополнительныхДанных Цикл
		ДополнительныеДанные.Вставить(ТипДополнительныхДанных.Ключ, "");
	КонецЦикла;
			
	ТекстСвязки = "";
	ШаблонПоля = Символы.ПС + "КОГДА СгруппированныеДанные.Документ ССЫЛКА Документ.%1" + Символы.ПС + "ТОГДА %2";
	ШаблонСвязки = Символы.ПС + "{ЛЕВОЕ СОЕДИНЕНИЕ Документ.%1 КАК Таблица%1" + Символы.ПС + "ПО СгруппированныеДанные.Документ = Таблица%1.Ссылка" + Символы.ПС + "И (Таблица%1.Проведен)}";
	
	Для каждого ТипДокумента из ЭтотОбъект.СписокТипыДокументов Цикл
		
		Если Не ТипДокумента.Пометка И Не ТипДокументаОтбор = "" Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеДокумента = Метаданные.НайтиПоПолномуИмени(ТипДокумента.Значение);
		
		Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Поле из ДополнительныеДанные Цикл
			
			ТекущаяСтрокаПоля = ПолучитьСтрокуПоля(Поле.Ключ, ТипыДополнительныхДанных.Получить(Поле.Ключ), МетаданныеДокумента);
			Если ЗначениеЗаполнено(ТекущаяСтрокаПоля) Тогда
				ТекущаяСтрокаПоля = СтрШаблон(ТекущаяСтрокаПоля, "Таблица"+МетаданныеДокумента.Имя);
				ДополнительныеДанные.Вставить(Поле.Ключ, Поле.Значение + СтрШаблон(ШаблонПоля, МетаданныеДокумента.Имя, ТекущаяСтрокаПоля));
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстСвязки = ТекстСвязки + СтрШаблон(ШаблонСвязки, МетаданныеДокумента.Имя);
		
	КонецЦикла;
	
	Для каждого Поле из ДополнительныеДанные Цикл
		
		ТипПоля = ТипыДополнительныхДанных.Получить(Поле.Ключ);
		Если ТипПоля = Тип("Строка") Тогда
			ПустоеЗначениеПоля = """""";
			ПриводимыйТип = "СТРОКА";
		ИначеЕсли ТипПоля = Тип("Число") Тогда
			ПустоеЗначениеПоля = "0";
			ПриводимыйТип = "ЧИСЛО";
		Иначе
			ПолноеИмя = Метаданные.НайтиПоТипу(ТипПоля).ПолноеИмя();
			ПустоеЗначениеПоля = "ЗНАЧЕНИЕ(" + ПолноеИмя + ".ПустаяСсылка)";
			ПриводимыйТип = ПолноеИмя;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Поле.Значение) Тогда
			СтрокаПоляВЗапросе = "ВЫБОР" + Поле.Значение + Символы.ПС + "ИНАЧЕ %1" + Символы.ПС + "КОНЕЦ";
			СтрокаПоляВЗапросе = СтрШаблон(СтрокаПоляВЗапросе, ПустоеЗначениеПоля);
		Иначе
			СтрокаПоляВЗапросе = ПустоеЗначениеПоля;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&"+Поле.Ключ, СтрокаПоляВЗапросе);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//#Таблица", ТекстСвязки);
	
	Список.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуПоля(ИмяПоля, Тип, МетаданныеДокумента)
	       
	Если ИмяПоля = "Автор" Тогда
		Реквизит = МетаданныеДокумента.Реквизиты.Найти("Автор");
		Если Не Реквизит = Неопределено И Реквизит.Тип.СодержитТип(Тип) Тогда
			Возврат "%1."+"Автор";
		КонецЕсли;
		Реквизит = МетаданныеДокумента.Реквизиты.Найти("Ответственный");
		Если Не Реквизит = Неопределено И Реквизит.Тип.СодержитТип(Тип) Тогда
			Возврат "%1."+"Ответственный";
		КонецЕсли;
	Иначе
		Реквизит = МетаданныеДокумента.Реквизиты.Найти(ИмяПоля);
		Если Не Реквизит = Неопределено И Реквизит.Тип.СодержитТип(Тип) Тогда
			Возврат "%1."+ИмяПоля;
		КонецЕсли;
	КонецЕсли;
	
	// Обработаем исключение:
	Если ИмяПоля = "Контрагент" И МетаданныеДокумента.Имя = "ВзаимозачетЗадолженности" Тогда
		Возврат "ВЫБОР КОГДА %1.КонтрагентДебитор ССЫЛКА Справочник.Контрагенты ТОГДА %1.КонтрагентДебитор ИНАЧЕ %1.КонтрагентКредитор КОНЕЦ";
	КонецЕсли;
	Если ИмяПоля = "Склад" И МетаданныеДокумента.Имя = "ПеремещениеТоваров" Тогда
		Возврат "%1.СкладОтправитель";
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип) Тогда
			МассивРеквизитов.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат "%1."+МассивРеквизитов.Получить(0);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуОтражения()
	
	Элементы.СписокОтразитьВУчете.Доступность = Не ЗначениеЗаполнено(СтатусОтражения) ИЛИ Не РучноеОтражениеДокументов
		ИЛИ Не СтатусОтражения = СтатусАвтоматическогоОтраженияВУчете И Не СтатусОтражения = СтатусРучногоОтраженияВУчете;
	Элементы.СписокСнятьОтражениеВУчете.Доступность = Не ЗначениеЗаполнено(СтатусОтражения) ИЛИ Не РучноеОтражениеДокументов
		ИЛИ СтатусОтражения = СтатусАвтоматическогоОтраженияВУчете;
		
	Элементы.ГруппаКомментарий.Видимость = (СтатусОтражения = Перечисления.СтатусыОтраженияДокументовВРеглУчете.НеУказаныСчетаУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКомментарий()
	
	Если Не Элементы.ГруппаКомментарий.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьКомментарийСервер(ТекущаяСтрока.Документ, ТекущаяСтрока.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКомментарийСервер(Документ, Организация)
	
	Комментарий = РеглУчетПроведениеСервер.СводныйКомментарийПоДокументу(Документ, Организация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
