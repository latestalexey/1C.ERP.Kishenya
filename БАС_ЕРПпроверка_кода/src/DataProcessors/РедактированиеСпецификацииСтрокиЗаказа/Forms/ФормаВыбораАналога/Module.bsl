&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Аналоги.ТекстЗапроса = СтрЗаменить(Аналоги.ТекстЗапроса,
										"&ТекстЗапросаКоэффициентУпаковки",
										Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
										"РазрешениеНаЗаменуАналоги.Упаковка",
										"РазрешениеНаЗаменуАналоги.Номенклатура"));
	
	Материалы.ТекстЗапроса = СтрЗаменить(Материалы.ТекстЗапроса,
										"&ТекстЗапросаКоэффициентУпаковки",
										Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
										"РазрешениеНаЗаменуМатериалы.Упаковка",
										"РазрешениеНаЗаменуМатериалы.Номенклатура"));
										
	ХарактеристикиИспользуются	= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	ДатаОкончанияДействияРазрешений = Параметры.ДатаОкончанияДействияРазрешений;
	
	Номенклатура				= Параметры.Материал;
	Характеристика				= Параметры.ХарактеристикаМатериала;
	Упаковка					= Параметры.УпаковкаМатериала;
	КоличествоУпаковок			= Параметры.КоличествоУпаковокМатериала;
	Количество					= Параметры.КоличествоМатериала;
	ЗаказатьНаСклад				= Параметры.ЗаказатьНаСклад;
	
	ИсходноеКоличество			= Параметры.КоличествоМатериала;
	ИсходнаяУпаковка			= Параметры.УпаковкаМатериала;
	ИсходнаяЕдиницаИзмерения	= Номенклатура.ЕдиницаИзмерения;
	
	Если ЗначениеЗаполнено(Параметры.ЗаказНаПроизводство) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ЗаказНаПроизводство, "Номер, Дата");
		
		ЗаказНаПроизводствоНомер	= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Реквизиты.Номер);
		ЗаказНаПроизводствоДата		= Формат(Реквизиты.Дата, "ДФ='dd.MM.yyyy ""г"".'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗаказКлиента) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.ЗаказКлиента, "Номер, Дата");
		
		ЗаказКлиентаНомер			= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Реквизиты.Номер);
		ЗаказКлиентаДата			= Формат(Реквизиты.Дата, "ДФ='dd.MM.yyyy ""г"".'");
	КонецЕсли;
	
	ШаблонЗаголовка = НСтр("ru='Аналоги материала ""%1"" (%2 %3)';uk='Аналоги матеріалу ""%1"" (%2 %3)'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, СокрЛП(Номенклатура), КоличествоУпаковок,
		?(ЗначениеЗаполнено(Упаковка), СокрЛП(Упаковка), ИсходнаяЕдиницаИзмерения));
	
	НаборУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "НаборУпаковок");
	
	Элементы.Упаковка.Видимость			= ЗначениеЗаполнено(НаборУпаковок);
	Элементы.ЕдиницаИзмерения.Видимость	= Не ЗначениеЗаполнено(НаборУпаковок);
	
	ПараметрыВыбора = Новый Структура("Номенклатура", Номенклатура);
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения"), ПараметрыВыбора);
	
	СписокВыбора = Элементы.Упаковка.СписокВыбора;
	
	Для Каждого ЗначениеВыбора из ДанныеВыбора Цикл
		СписокВыбора.Добавить(ЗначениеВыбора.Значение, ЗначениеВыбора.Представление);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Упаковка) Тогда
		Упаковка = Объект.Упаковка;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Дата",					ДатаОкончанияДействияРазрешений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Подразделение",			Параметры.Подразделение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЗаказНаПроизводство",	Параметры.ЗаказНаПроизводство);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЗаказКлиента",			Параметры.ЗаказКлиента);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Спецификация",			Параметры.Спецификация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "КлючСвязи",				Параметры.КлючСвязиСпецификация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Материал",				Номенклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ХарактеристикаМатериала",Характеристика);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Изделие",				Параметры.Изделие);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ХарактеристикаИзделия",	Параметры.ХарактеристикаИзделия);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "КоличествоПоЗаказу",	Количество);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Дата",				ТекущаяДата);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Ссылка",				Документы.РазрешениеНаЗаменуМатериалов.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Подразделение",		Параметры.Подразделение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Кратность",			1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Дата",					ТекущаяДата);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Ссылка",				Документы.РазрешениеНаЗаменуМатериалов.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Подразделение",		Параметры.Подразделение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Кратность",			1);
	
	Если Не ЗаказатьНаСклад Тогда
		
		Элементы.МатериалыВНаличии.Видимость = Ложь;
		Элементы.МатериалыДоступно.Видимость = Ложь;
		
		Элементы.АналогиВНаличии.Видимость = Ложь;
		Элементы.АналогиДоступно.Видимость = Ложь;
		
	КонецЕсли;
	
	ОткрытиеФормы = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ПриИзмененииКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОбластиДействияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличестваНеДостаточноДляЗамены Тогда
		
		ШаблонПредупреждения = НСтр("ru='Нельзя заменить %1 %2 материала на %3 %4';uk='Не можна замінити %1 %2 матеріалу на %3 %4'");
		
		Кратность = КратностьЗамены(Количество, ТекущиеДанные.КоличествоМатериалаПоДокументу);
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, 
			КоличествоУпаковок,
			?(ЗначениеЗаполнено(Упаковка), Упаковка, ИсходнаяЕдиницаИзмерения),
			ТекущиеДанные.КоличествоМатериалаПоДокументу * Кратность,
			?(ЗначениеЗаполнено(ТекущиеДанные.УпаковкаМатериала), ТекущиеДанные.УпаковкаМатериала, ТекущиеДанные.МатериалЕдиницаИзмерения));
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	ПоСпецификации = ЗначениеЗаполнено(ТекущиеДанные.Спецификация);
	
	АдресВХранилище = ЗначениеВыбораНаСервере(ТекущиеДанные.Ссылка, ТекущиеДанные.КоличествоМатериалаПоДокументу,
		ПоСпецификации, Этаформа.ВладелецФормы.УникальныйИдентификатор);
	
	ОповеститьОВыборе(Новый Структура("ВыполняемаяОперация, АдресВХранилище", "ВыборАналога", АдресВХранилище));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ОткрытиеФормы Тогда
		
		ОткрытиеФормы = Ложь;
		ОбработчикАктивизацииСтрокиСписок();
		
	Иначе
		
		ПодключитьОбработчикОжидания("ОбработчикАктивизацииСтрокиСписок", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	#Область СтандартноеОформление
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "МатериалыХарактеристика",
																		     "Материалы.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "АналогиХарактеристика",
																		     "Аналоги.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																   "МатериалыЕдиницаИзмерения",
																   "Материалы.Упаковка");
																   
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																   "АналогиЕдиницаИзмерения",
																   "Аналоги.Упаковка");
																   
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма,
																   "ЕдиницаИзмеренияАналога",
																   "Список.УпаковкаАналога");
	#КонецОбласти

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Аналог.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПростаяЗамена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<составной>';uk='<складовий>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УпаковкаАналога.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.УпаковкаАналога");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УпаковкаАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницаИзмеренияАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокХарактеристикаАналога.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПростаяЗамена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Заказ клиента, Спецификация';uk='Замовлення на виробництво, Замовлення клієнта, Специфікація'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Спецификация';uk='Замовлення на виробництво, Специфікація'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ клиента, Спецификация';uk='Замовлення клієнта, Специфікація'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Спецификация';uk='Специфікація'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 4;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Заказ клиента, Подразделение, Изделие, Характеристика изделия';uk='Замовлення на виробництво, Замовлення клієнта, Підрозділ, Виріб, Характеристика виробу'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 5;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Заказ клиента, Подразделение, Изделие';uk='Замовлення на виробництво, Замовлення клієнта, Підрозділ, Виріб'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 6;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Заказ клиента, Изделие, Характеристика изделия';uk='Замовлення на виробництво, Замовлення клієнта, Виріб, Характеристика виробу'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 7;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Заказ клиента, Изделие';uk='Замовлення на виробництво, Замовлення клієнта, Виріб'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 8;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Подразделение, Изделие, Характеристика изделия';uk='Замовлення на виробництво, Підрозділ, Виріб, Характеристика виробу'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 9;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Подразделение, Изделие';uk='Замовлення на виробництво, Підрозділ, Виріб'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 10;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ клиента, Подразделение, Изделие, Характеристика изделия';uk='Замовлення клієнта, Підрозділ, Виріб, Характеристика виробу'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 11;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ клиента, Подразделение, Изделие';uk='Замовлення клієнта, Підрозділ, Виріб'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 12;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Изделие, Характеристика изделия';uk='Замовлення на виробництво, Виріб, Характеристика виробу'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 13;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство, Изделие';uk='Замовлення на виробництво, Виріб'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 14;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ клиента, Изделие, Характеристика изделия';uk='Замовлення клієнта, Виріб, Характеристика виробу'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 15;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ клиента, Изделие';uk='Замовлення клієнта, Виріб'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 16;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Подразделение, Изделие, Характеристика изделия';uk='Підрозділ, Виріб, Характеристика виробу'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 17;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Подразделение, Изделие';uk='Підрозділ, Виріб'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 18;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ на производство';uk='Замовлення на виробництво'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 19;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Заказ клиента';uk='Замовлення клієнта'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 20;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Подразделение';uk='Підрозділ'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 21;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Изделие, Характеристика изделия';uk='Виріб, Характеристика виробу'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 22;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Изделие';uk='Виріб'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПорядокСортировки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПорядокСортировки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 23;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='По предприятию в целом';uk='По підприємству в цілому'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиВНаличии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.ВНаличииОстаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='нет';uk='немає'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиДоступно.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.Доступно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='нет';uk='немає'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыВНаличии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.ВНаличииОстаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='нет';uk='немає'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыДоступно.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.Доступно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='нет';uk='немає'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Материалы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Аналоги.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.КоличестваНеДостаточноДляЗамены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАктивизацииСтрокиСписок()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кратность = КратностьЗамены(Количество, ТекущиеДанные.КоличествоМатериалаПоДокументу);
	
	Если ТекСсылка <> ТекущиеДанные.Ссылка или ТекКратность <> Кратность Тогда
		ТекСсылка = ТекущиеДанные.Ссылка;
		ТекКратность = Кратность;
		
		УстановитьПараметрыДинамическихСписковНаСервере();
		
		ОбновитьПредставлениеОбластиДействия(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписковНаСервере(КоличествоПоЗаказу = Неопределено)
	
	Если КоличествоПоЗаказу <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "КоличествоПоЗаказу", КоличествоПоЗаказу);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Ссылка", ТекСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Кратность", ТекКратность);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Ссылка", ТекСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Кратность", ТекКратность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличества()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ЭтаФорма, СтруктураДействий, КэшированныеЗначения);
	
	Если Количество = 0 или Количество > ИсходноеКоличество Тогда
		
		Количество = ИсходноеКоличество;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ЭтаФорма, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекКратность = КратностьЗамены(Количество, ТекущиеДанные.КоличествоМатериалаПоДокументу);
	
	УстановитьПараметрыДинамическихСписковНаСервере(Количество);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеОбластиДействия(ТекущиеДанные)
	
	ПредставлениеОбластиДействия = "";
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончанияДействия) Тогда
		ШаблонПредставления = НСтр("ru='С %1 по %2 для';uk='З %1 по %2 для'") + " ";
		ТекстПредставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Формат(ТекущиеДанные.ДатаНачалаДействия, "ДЛФ=D"),
			Формат(ТекущиеДанные.ДатаОкончанияДействия, "ДЛФ=D"));
	Иначе
		ШаблонПредставления = НСтр("ru='С %1 для';uk='З %1 для'") + " ";
		ТекстПредставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Формат(ТекущиеДанные.ДатаНачалаДействия, "ДЛФ=D"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказНаПроизводство) Тогда
		
		ШаблонПредставления = НСтр("ru='заказа на производство №%1 от %2;';uk='замовлення на виробництво №%1 від %2;'") + " ";
		ПредставлениеОбластиДействия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ЗаказНаПроизводствоНомер, ЗаказНаПроизводствоДата);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗаказКлиента) Тогда
		
		ШаблонПредставления = НСтр("ru='заказа клиента №%1 от %2;';uk='замовлення клієнта №%1 від %2;'") + " ";
		ПредставлениеОбластиДействия = ПредставлениеОбластиДействия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ЗаказКлиентаНомер, ЗаказКлиентаДата);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
		
		ШаблонПредставления = НСтр("ru='подразделения ""%1"";';uk='підрозділи ""%1"";'") + " ";
		ПредставлениеОбластиДействия = ПредставлениеОбластиДействия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.Подразделение);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
		
		ШаблонПредставления = НСтр("ru='спецификации ""%1"";';uk='специфікації ""%1"";'") + " ";
		ПредставлениеОбластиДействия = ПредставлениеОбластиДействия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.Спецификация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Изделие) Тогда
		
		ШаблонПредставления = НСтр("ru='изделия ""%1"";';uk='вироби ""%1"";'") + " ";
		ПредставлениеОбластиДействия = ПредставлениеОбластиДействия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.Изделие);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаИзделия) Тогда
		
		ШаблонПредставления = НСтр("ru='характеристики ""%1"";';uk='характеристики ""%1"";'") + " ";
		ПредставлениеОбластиДействия = ПредставлениеОбластиДействия + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.ХарактеристикаИзделия);
		
	КонецЕсли;
	
	Если СтрДлина(ПредставлениеОбластиДействия) > 0 Тогда
		ПредставлениеОбластиДействия = Лев(ПредставлениеОбластиДействия, СтрДлина(ПредставлениеОбластиДействия) - 2);
	Иначе
		ПредставлениеОбластиДействия = ПредставлениеОбластиДействия + НСтр("ru='предприятия в целом';uk='підприємства в цілому'");
	КонецЕсли;
	
	ПредставлениеОбластиДействия = ТекстПредставления + ПредставлениеОбластиДействия;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеВыбораНаСервере(Ссылка, КоличествоПоДокументу, ПоСпецификации, Идентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Материалы.Номенклатура КАК Номенклатура,
	|	Материалы.Характеристика КАК Характеристика,
	|	Материалы.Количество * &Кратность КАК Количество,
	|	ВЫРАЗИТЬ(Материалы.Количество * &Кратность / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК КоличествоУпаковок,
	|	Материалы.Упаковка КАК Упаковка,
	|	Материалы.КлючСвязиСпецификация КАК КлючСвязиСпецификация
	|ИЗ
	|	Документ.РазрешениеНаЗаменуМатериалов.Материалы КАК Материалы
	|ГДЕ
	|	Материалы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналоги.Номенклатура КАК Номенклатура,
	|	Аналоги.Характеристика КАК Характеристика,
	|	Аналоги.Количество * &Кратность КАК Количество,
	|	ВЫРАЗИТЬ(Аналоги.Количество * &Кратность / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК КоличествоУпаковок,
	|	Аналоги.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА Аналоги.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Документ.РазрешениеНаЗаменуМатериалов.Аналоги КАК Аналоги
	|ГДЕ
	|	Аналоги.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Материалы.Упаковка",
			"Материалы.Номенклатура"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Аналоги.Упаковка",
			"Аналоги.Номенклатура"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Кратность", КратностьЗамены(Количество, КоличествоПоДокументу));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ЗначениеВыбора = Новый Структура("Материалы, Аналоги");
	
	ЗначениеВыбора.Материалы = Результат[0].Выгрузить();
	ЗначениеВыбора.Аналоги = Результат[1].Выгрузить();
	
	ЗначениеВыбора.Вставить("ПоСпецификации", ПоСпецификации);
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеВыбора, Идентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КратностьЗамены(КоличествоКЗамене, КоличествоВДокументеЗамены)
	
	Кратность = КоличествоКЗамене / КоличествоВДокументеЗамены;
	
	Если Кратность > Цел(Кратность) Тогда
		ТекКратность = Цел(Кратность) + 1;
	Иначе
		ТекКратность = Макс(Цел(Кратность), 1);
	КонецЕсли;
	
	Возврат ТекКратность;
	
КонецФункции

#КонецОбласти
