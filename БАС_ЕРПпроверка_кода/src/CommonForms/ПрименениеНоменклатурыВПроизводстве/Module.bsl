
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуПоПравам();
	
	// Инициализация констант
	ОснованиеНоменклатура = Параметры.Основание;
	ОтборИспользованиеМатериала = "Используется";
	ОтборИспользованиеВидаРабочегоЦентра = "Используется";
	
	СписокПодразделенийНаФорме.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка(), "1");
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеНоменклатура, "ИспользованиеХарактеристик,Наименование");
	
	ХарактеристикиИспользуются = (ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
									И РеквизитыНоменклатуры.ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
									
	Если НЕ ХарактеристикиИспользуются Тогда
		Элементы.УправлениеСпецификациямиГруппаХарактеристикаСпецификация.ОтображатьВШапке = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимСпецификацииИзделия") Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Спецификации изделия %1';uk='Специфікації виробу %1'"),
								РеквизитыНоменклатуры.Наименование);
								
		Элементы.СтраницаРазрешенияНаЗамену.Видимость = Ложь;
		Элементы.СтраницаМаршрутныеКарты.Видимость = Ложь;
		Элементы.СтраницаСтруктураИзделия.Видимость = Ложь;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Заголовок = НСтр("ru='Производство';uk='Виробництво'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМаршрутныхКарт, "ОтборИзделие", ОснованиеНоменклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокСпецификаций, "ОтборИзделие", ОснованиеНоменклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПлановыхКалькуляций, "ОтборИзделие", ОснованиеНоменклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРазрешений, "ОтборПоНоменклатуре", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРазрешений, "РазрешенияНоменклатура", ОснованиеНоменклатура);
	
	РазрешенияУстановитьОтборПоНоменклатуре();
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.КалькуляцииОтветственный.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ПлановаяКалькуляция));
		
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.МаршрутныеКартыОтветственный.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Справочники.МаршрутныеКарты));
		
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.РазрешенияОтветственный.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.РазрешениеНаЗаменуМатериалов));
		
	ИнициализацияДереваСпецификаций();
	
	ЗаполнитьУправлениеСпецификациями();
	
	Если Параметры.Свойство("АктивизироватьСпецификацию") Тогда
		СтруктураПоиска = Новый Структура("Спецификация", Параметры.АктивизироватьСпецификацию);
		СписокСтрок = УправлениеСпецификациями.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Элементы.УправлениеСпецификациями.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСтруктуруИзделия = Истина;
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РесурсныеСпецификации" 
		ИЛИ ИмяСобытия = "Запись_ОсновныеМаршрутныеКарты" 
		ИЛИ ИмяСобытия = "Запись_ОсновныеСпецификации" Тогда

		ОбновитьДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ВыборДействующихСпецификаций" Тогда
		
		ТекущиеДанные.ПолучитьЭлементы().Очистить();
		ТекущиеДанные.Спецификация = ВыбранноеЗначение;
		ТекущиеДанные.ЕстьСпецификация = ЗначениеЗаполнено(ТекущиеДанные.Спецификация);
		
		Если ТекущиеДанные.ЕстьСпецификация Тогда
			ДеревоСпецификацийПриИзмененииНаСервере(ТекущиеДанные.Идентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	РазвернутьДеревоСпецификаций(ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпецификацииСтатусПриИзменении(Элемент)
	
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИспользованиеМатериалаПриИзменении(Элемент)
	
	Если ПустаяСтрока(ОтборИспользованиеМатериала) Тогда
		ОтборИспользованиеМатериала = "Используется";
	КонецЕсли; 
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборМатериалПриИзменении(Элемент)
	
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИспользованиеВидаРабочегоЦентраПриИзменении(Элемент)
	
	Если ПустаяСтрока(ОтборИспользованиеВидаРабочегоЦентра) Тогда
		ОтборИспользованиеВидаРабочегоЦентра = "Используется";
	КонецЕсли;
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидРабочегоЦентраПриИзменении(Элемент)
	
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеКартыСтатусПриИзменении(Элемент)
	МаршрутныеКартыУстановитьОтборПоСтатусу(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеКартыОтветственныйПриИзменении(Элемент)
	МаршрутныеКартыУстановитьОтборПоОтветственному(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныеКартыПодразделениеПриИзменении(Элемент)
	МаршрутныеКартыУстановитьОтборПоПодразделению(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияСтатусПриИзменении(Элемент)
	РазрешенияУстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияСпецификацияПриИзменении(Элемент)
	РазрешенияУстановитьОтборПоСпецификации();
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияОтветственныйПриИзменении(Элемент)
	РазрешенияУстановитьОтборПоОтветственному();
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцииСтатусПриИзменении(Элемент)
	КалькуляцииУстановитьОтборПоСтатусу(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцииВидПриИзменении(Элемент)
	КалькуляцииУстановитьОтборПоОбъекту(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КалькуляцииОтветственныйПриИзменении(Элемент)
	КалькуляцииУстановитьОтборПоОтветственному(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаСтруктураИзделия
		И ОбновитьСтруктуруИзделия Тогда
		
		СформироватьДеревоСпецификацийНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СписокСтрок = ДеревоСпецификаций.ПолучитьЭлементы();
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
											Неопределено, 
											ОснованиеНоменклатура, 
											ДеревоХарактеристикаНоменклатуры, 
											ДеревоДата, 
											СписокСтрок[0].Спецификация);
											
	Если ДанныеСпецификации <> Неопределено Тогда
		СписокСтрок[0].Спецификация = ДанныеСпецификации.Спецификация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУправлениеСпецификациями

&НаКлиенте
Процедура УправлениеСпецификациямиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		КопироватьРесурснуюСпецификациюВСпискеУправлениеСпецификациями();
		Возврат
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Основание = Новый Структура;
		Основание.Вставить("Номенклатура", ОснованиеНоменклатура);
		Основание.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	Иначе
		Основание = ОснованиеНоменклатура;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Основание);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСпецификациямиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСпецификациямиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.СпецификацияХарактеристика) 
		И ТекущиеДанные.ТипСтроки = 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.СпецификацияХарактеристика);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеСпецификациямиПодразделениеПриИзменении(Элемент)
	
	УстановитьОсновнуюСпецификацию(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМаршрутныеКарты

&НаКлиенте
Процедура СписокМаршрутныхКартПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		КопироватьМаршрутнуюКарту();
		
	ИначеЕсли НЕ ОснованиеНоменклатура.Пустая() Тогда
		
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ОснованиеНоменклатура);
		ОткрытьФорму("Справочник.МаршрутныеКарты.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпецификации

&НаКлиенте
Процедура СписокСпецификацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Группа Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		КопироватьРесурснуюСпецификациюВСпискеСписокСпецификаций();
		
	ИначеЕсли НЕ ОснованиеНоменклатура.Пустая() Тогда
		
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", ОснованиеНоменклатура);
		ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКалькуляции

&НаКлиенте
Процедура СписокПлановыхКалькуляцийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОснованиеНоменклатура);
	
	ЗначенияЗаполнения = Новый Структура("МассивОбъектов, ТипОснования", МассивОбъектов, Тип("СправочникСсылка.Номенклатура"));
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ПлановаяКалькуляция.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазрешения

&НаКлиенте
Процедура СписокРазрешенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не Копирование и НЕ ОснованиеНоменклатура.Пустая() и РазрешенияСпецификация.Пустая() Тогда
		
		Отказ = Истина;
		
		Основание = Новый Структура;
		
		Основание.Вставить("Материал", ОснованиеНоменклатура);
		
		ПараметрыФормы = Новый Структура("Основание", Основание);
		
		ОткрытьФорму("Документ.РазрешениеНаЗаменуМатериалов.ФормаОбъекта", ПараметрыФормы, , Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоСпецификаций

&НаКлиенте
Процедура ДеревоСпецификацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоСпецификацийНоменклатура" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) И 
		ТипЗнч(Элемент.ТекущиеДанные.Номенклатура) <> Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиДерева",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийСпецификацияПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	ТекущиеДанные.ЕстьСпецификация = Ложь;
	ТекущиеДанные.ПолучитьЭлементы().Очистить();
	
	Если ТипЗнч(ТекущиеДанные.Спецификация) = Тип("СправочникСсылка.РесурсныеСпецификации") и ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
		
		ТекущиеДанные.ЕстьСпецификация = Истина;
		ДеревоСпецификацийПриИзмененииНаСервере(ТекущиеДанные.Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацийСпецификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	ПараметрыОткрытия.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	ПараметрыОткрытия.Вставить("ВсеСпецификации", Истина);
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ВыборДействующихСпецификаций", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДоступныхСпецификаций

&НаКлиенте
Процедура СписокДоступныхСпецификацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокДоступныхСпецификаций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.Спецификация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КомандаСпискаУправлениеСпецификациями

&НаКлиенте
Процедура КомандыИзменитьСпецификацию(Команда)
	
	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Спецификация);
	ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВРазработке(Команда)
	
	УстановитьСтатусСпецификации("ВРазработке", НСтр("ru='В разработке';uk='В розробці'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусДействует(Команда)
	
	УстановитьСтатусСпецификации("Действует", НСтр("ru='Действует';uk='Діє'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусЗакрыта(Команда)
	
	УстановитьСтатусСпецификации("Закрыта", НСтр("ru='Закрыта';uk='Закрита'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСравнитьСпецификации(Команда)
	
	СписокИсточников = ПолучитьВыделенныеСпецификацииВСпискеУправлениеСпецификациями();
	Если СписокИсточников.Количество() <> 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокИсточников", СписокИсточников);
		ОткрытьФорму("Обработка.СравнениеСпецификаций.Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоСпецификации(Команда)
	
	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Спецификация, СформироватьПриОткрытии, Заголовок, РежимОтображения",
		ТекущиеДанные.Спецификация, Истина, НСтр("ru='Дерево спецификации';uk='Дерево специфікації'"), "Спецификация");
	
	ОткрытьФорму("Обработка.ДеревоРесурсныхСпецификаций.Форма", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	ОбновитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДерево(Команда)
	
	СформироватьДеревоСпецификацийНаСервере();
	
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		РазвернутьДеревоСпецификаций(ТекущиеДанные.Идентификатор);
	Иначе
		РазвернутьДеревоСпецификаций();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОсновнойСпецификацией(Команда)
	
	ТекущиеДанныеДерево = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	ТекущиеДанныеСписокДоступных = Элементы.СписокДоступныхСпецификаций.ТекущиеДанные;
	
	Если ТекущиеДанныеДерево = Неопределено или ТекущиеДанныеСписокДоступных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанныеСписокДоступных.Спецификация) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОшибки = Новый Структура;
	СвойстваСпецификации = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ТекущиеДанныеСписокДоступных.Спецификация, "Статус");
	
	Если НЕ УправлениеДаннымиОбИзделияхКлиентСервер.СпецификациюМожноНазначитьОсновной(СвойстваСпецификации, СтруктураОшибки) Тогда
		ПоказатьПредупреждение(,СтруктураОшибки.ТекстОшибки,, НСтр("ru='Назначить основной спецификацией';uk='Призначити основною специфікацією'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Спецификация, Номенклатура, Характеристика", 
		ТекущиеДанныеСписокДоступных.Спецификация, ТекущиеДанныеДерево.Номенклатура, ТекущиеДанныеДерево.Характеристика);
	
	ОткрытьФорму("РегистрСведений.ОсновныеСпецификации.Форма.НазначитьОсновнойСпецификацией", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка"));
	
	ИменаМакетов = "ДеревоСпецификаций";
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.ДеревоРесурсныхСпецификаций",
		ИменаМакетов,
		ПараметрКоманды,
		ЭтаФорма,
		ПолучитьПараметры());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Спецификации

&НаКлиенте
Процедура КопироватьРесурснуюСпецификациюВСпискеСписокСпецификаций()

	ТекущиеДанные = Элементы.СписокСпецификаций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьРесурснуюСпецификациюВСпискеСписокСпецификацийЗавершение", ЭтотОбъект);
	УправлениеДаннымиОбИзделияхКлиент.КопироватьРесурснуюСпецификацию(ТекущиеДанные.Ссылка, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура КопироватьРесурснуюСпецификациюВСпискеСписокСпецификацийЗавершение(Ссылка, ДополнительныеПараметры) Экспорт

	Если Ссылка <> Неопределено Тогда
		Элементы.СписокСпецификаций.ТекущаяСтрока = Ссылка;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУправлениеСпецификациями(ТекущаяСпецификацияХарактеристика = Неопределено)
	
	Если НЕ ПравоПросмотраСпецификаций Тогда
		Возврат
	КонецЕсли;
	
	// Запомним текущую строку, чтобы потом сделать ее активной
	Если ТекущаяСпецификацияХарактеристика = Неопределено Тогда
		ТекущаяСтрока = Элементы.УправлениеСпецификациями.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = УправлениеСпецификациями.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущаяСпецификацияХарактеристика = ТекущиеДанные.СпецификацияХарактеристика;
		КонецЕсли; 
	КонецЕсли; 
	
	УправлениеСпецификациями.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 0
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаВыходныеИзделия.Ссылка КАК Спецификация,
	|	ТаблицаВыходныеИзделия.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СпецификацииИХарактеристикиБезОтбора
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|ГДЕ
	|	ТаблицаВыходныеИзделия.Номенклатура = &Номенклатура
	|	И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.ПустаяСсылка)
	|			ИЛИ ТаблицаВыходныеИзделия.Ссылка.Статус = &Статус)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Спецификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаМатериалыИУслуги.Ссылка КАК Спецификация
	|ПОМЕСТИТЬ СпецификацииСОтборомПоМатериалу
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|ГДЕ
	|	ТаблицаМатериалыИУслуги.Номенклатура = &Материал
	|	И &Материал <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТаблицаМатериалыИУслуги.Ссылка В
	|			(ВЫБРАТЬ
	|				СпецификацииИХарактеристикиБезОтбора.Спецификация
	|			ИЗ
	|				СпецификацииИХарактеристикиБезОтбора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЭтапыПроизводства.Владелец КАК Спецификация
	|ПОМЕСТИТЬ СпецификацииСОтборомПоВидуРабочегоЦентра
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК ТаблицаЭтапыПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыПроизводства.ВидыРабочихЦентров КАК ВидыРабочихЦентровЭтапов
	|		ПО (ВидыРабочихЦентровЭтапов.Ссылка = ТаблицаЭтапыПроизводства.Ссылка)
	|			И (ВидыРабочихЦентровЭтапов.ВидРабочегоЦентра = &ВидРабочегоЦентра)
	|			И (&ВидРабочегоЦентра <> ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка))
	|ГДЕ
	|	ТаблицаЭтапыПроизводства.Владелец В
	|			(ВЫБРАТЬ
	|				СпецификацииИХарактеристикиБезОтбора.Спецификация
	|			ИЗ
	|				СпецификацииИХарактеристикиБезОтбора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпецификацииИХарактеристикиБезОтбора.Спецификация КАК Спецификация,
	|	СпецификацииИХарактеристикиБезОтбора.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СпецификацииИХарактеристики
	|ИЗ
	|	СпецификацииИХарактеристикиБезОтбора КАК СпецификацииИХарактеристикиБезОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСОтборомПоМатериалу КАК СпецификацииСОтборомПоМатериалу
	|		ПО (СпецификацииСОтборомПоМатериалу.Спецификация = СпецификацииИХарактеристикиБезОтбора.Спецификация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииСОтборомПоВидуРабочегоЦентра КАК СпецификацииСОтборомПоВидуРабочегоЦентра
	|		ПО (СпецификацииСОтборомПоВидуРабочегоЦентра.Спецификация = СпецификацииИХарактеристикиБезОтбора.Спецификация)
	|ГДЕ
	|	(&Материал = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ &ИспользованиеМатериала = ""Используется""
	|				И НЕ СпецификацииСОтборомПоМатериалу.Спецификация ЕСТЬ NULL 
	|			ИЛИ &ИспользованиеМатериала = ""НеИспользуется""
	|				И СпецификацииСОтборомПоМатериалу.Спецификация ЕСТЬ NULL )
	|	И (&ВидРабочегоЦентра = ЗНАЧЕНИЕ(Справочник.ВидыРабочихЦентров.ПустаяСсылка)
	|			ИЛИ &ИспользованиеВидаРабочегоЦентра = ""Используется""
	|				И НЕ СпецификацииСОтборомПоВидуРабочегоЦентра.Спецификация ЕСТЬ NULL 
	|			ИЛИ &ИспользованиеВидаРабочегоЦентра = ""НеИспользуется""
	|				И СпецификацииСОтборомПоВидуРабочегоЦентра.Спецификация ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникРесурсныеСпецификации.Ссылка КАК Спецификация,
	|	СправочникРесурсныеСпецификации.Статус КАК Статус,
	|	СправочникРесурсныеСпецификации.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК СправочникРесурсныеСпецификации
	|ГДЕ
	|	СправочникРесурсныеСпецификации.Ссылка В
	|			(ВЫБРАТЬ
	|				СпецификацииИХарактеристики.Спецификация
	|			ИЗ
	|				СпецификацииИХарактеристики КАК СпецификацииИХарактеристики)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	// 5
	|	СпецификацииИХарактеристики.Характеристика,
	|	СпецификацииИХарактеристики.Спецификация,
	|	СпецификацииИХарактеристики.Спецификация.Представление КАК СпецификацияПредставление,
	|	СпецификацииИХарактеристики.Характеристика.Представление КАК ХарактеристикаПредставление
	|ИЗ
	|	СпецификацииИХарактеристики КАК СпецификацииИХарактеристики
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацииИХарактеристики.Характеристика.Наименование,
	|	СпецификацииИХарактеристики.Спецификация.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	// 6
	|	ОсновныеСпецификации.Характеристика,
	|	ОсновныеСпецификации.Подразделение,
	|	ОсновныеСпецификации.Подразделение.Представление КАК ПодразделениеПредставление,
	|	ОсновныеСпецификации.Спецификация
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификации КАК ОсновныеСпецификации
	|ГДЕ
	|	ОсновныеСпецификации.Спецификация В
	|			(ВЫБРАТЬ
	|				СпецификацииИХарактеристики.Спецификация
	|			ИЗ
	|				СпецификацииИХарактеристики КАК СпецификацииИХарактеристики)";
	
	Запрос.УстановитьПараметр("Номенклатура", ОснованиеНоменклатура);
	Запрос.УстановитьПараметр("Статус", СпецификацииСтатус);
	Запрос.УстановитьПараметр("ИспользованиеМатериала", ОтборИспользованиеМатериала);
	Запрос.УстановитьПараметр("Материал", ОтборМатериал);
	Запрос.УстановитьПараметр("ИспользованиеВидаРабочегоЦентра", ОтборИспользованиеВидаРабочегоЦентра);
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ОтборВидРабочегоЦентра);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаСпецификаций               = Результат[4].Выгрузить();
	ТаблицаХарактеристикИСпецификаций = Результат[5].Выгрузить();
	ТаблицаОсновныхСпецификаций       = Результат[6].Выгрузить();
	
	// Добавим подразделения на форму и в таблицу
	СписокПодразделений = Новый СписокЗначений;
	Для каждого ДанныеСтроки Из ТаблицаОсновныхСпецификаций Цикл
		СписокПодразделений.Добавить(ДанныеСтроки.Подразделение, ДанныеСтроки.ПодразделениеПредставление);
	КонецЦикла;
	ДобавитьПодразделенияИзПараметровОбеспечения(СписокПодразделений);
	СписокПодразделений.СортироватьПоПредставлению();
	ОбновитьСоставПодразделений(СписокПодразделений);
	
	// Заполним список спецификаций
	ТаблицаХарактеристик = ТаблицаХарактеристикИСпецификаций.Скопировать();
	ТаблицаХарактеристик.Свернуть("Характеристика");
	
	Для каждого ДанныеХарактеристика Из ТаблицаХарактеристик Цикл
		Если ХарактеристикиИспользуются Тогда
			СтрокаХарактеристика = УправлениеСпецификациями.Добавить();
			СтрокаХарактеристика.ТипСтроки = 1;
			СтрокаХарактеристика.СпецификацияХарактеристика = ДанныеХарактеристика.Характеристика;
			СтрокаХарактеристика.Характеристика = ДанныеХарактеристика.Характеристика;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Характеристика", ДанныеХарактеристика.Характеристика);
  		СписокСтрок = ТаблицаХарактеристикИСпецификаций.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСпецификация Из СписокСтрок Цикл
			СтрокаСпецификация = УправлениеСпецификациями.Добавить();
			СтрокаСпецификация.ТипСтроки = 0;
			СтрокаСпецификация.СпецификацияХарактеристика = ДанныеСпецификация.Спецификация;
			СтрокаСпецификация.Характеристика = ДанныеХарактеристика.Характеристика;
			
			РеквизитыСпецификации = ТаблицаСпецификаций.Найти(ДанныеСпецификация.Спецификация, "Спецификация");
			ЗаполнитьЗначенияСвойств(СтрокаСпецификация, РеквизитыСпецификации);
			
			// Заполним признак основной спецификации
			Для каждого ЭлементСписка Из СписокПодразделенийНаФорме Цикл
				ИмяКолонки = "Подразделение" + ЭлементСписка.Представление;
				ЗаполнитьПризнакОсновнойСпецификации(
							СтрокаСпецификация, 
							ЭлементСписка.Значение, 
							ИмяКолонки,
							ТаблицаОсновныхСпецификаций);
							
				Если СтрокаСпецификация[ИмяКолонки] Тогда
					СтрокаСпецификация.ОсновнаяСпецификация = Истина;
				КонецЕсли; 
			КонецЦикла;
			
		КонецЦикла; 
	КонецЦикла; 
	
	УстановитьСтрокуУправлениеСпецификациями(ТекущаяСпецификацияХарактеристика, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакОсновнойСпецификации(СтрокаСпецификация, Подразделение, ИмяКолонки, ТаблицаОсновныхСпецификаций)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Характеристика", СтрокаСпецификация.Характеристика); 
	СтруктураПоиска.Вставить("Спецификация",   СтрокаСпецификация.Спецификация); 
	СтруктураПоиска.Вставить("Подразделение",  Подразделение); 
   	СписокСтрок = ТаблицаОсновныхСпецификаций.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		СтрокаСпецификация[ИмяКолонки] = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПодразделенияИзПараметровОбеспечения(СписокПодразделений)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураПредприятия.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия";
	
	РазрешенныеПодразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей.Подразделение КАК Подразделение,
	|	ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей.Подразделение.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ВариантыОбеспеченияТоварами КАК ВариантыОбеспеченияТоварами
	|ГДЕ
	|	ВариантыОбеспеченияТоварами.Номенклатура = &Номенклатура
	|	И ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|	И ВариантыОбеспеченияТоварами.РеквизитДопУпорядочивания = 1
	|	И ВариантыОбеспеченияТоварами.СпособОбеспеченияПотребностей.Подразделение В(&РазрешенныеПодразделения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрСпособ.Подразделение,
	|	СпрСпособ.Подразделение.Представление
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СхемыОбеспечения КАК ТаблицаСхемы
	|		ПО ТаблицаСхемы.СхемаОбеспечения = СпрНоменклатура.СхемаОбеспечения
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
	|		ПО СпрСпособ.Ссылка = ТаблицаСхемы.СпособОбеспеченияПотребностей
	|		 И СпрСпособ.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|		 И СпрСпособ.Подразделение В(&РазрешенныеПодразделения)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|	И СпрНоменклатура.ТипНоменклатуры В(
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|	И НЕ СпрСпособ.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрСпособ.Подразделение,
	|	СпрСпособ.Подразделение.Представление
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
	|		ПО СпрСпособ.Ссылка = СпрНоменклатура.СпособОбеспеченияПотребностей
	|		 И СпрСпособ.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|		 И СпрСпособ.Подразделение В(&РазрешенныеПодразделения)
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ СпрСпособ.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыОбеспеченияРаботами.СпособОбеспеченияПотребностей.Подразделение,
	|	ВариантыОбеспеченияРаботами.СпособОбеспеченияПотребностей.Подразделение.Представление
	|ИЗ
	|	РегистрСведений.ВариантыОбеспеченияРаботами КАК ВариантыОбеспеченияРаботами
	|ГДЕ
	|	ВариантыОбеспеченияРаботами.Номенклатура = &Номенклатура
	|	И ВариантыОбеспеченияРаботами.СпособОбеспеченияПотребностей.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|	И ВариантыОбеспеченияРаботами.РеквизитДопУпорядочивания = 1
	|	И ВариантыОбеспеченияРаботами.СпособОбеспеченияПотребностей.Подразделение В(&РазрешенныеПодразделения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсновнойСпособОбеспеченияПотребностей.Значение.Подразделение,
	|	ОсновнойСпособОбеспеченияПотребностей.Значение.Подразделение.Представление
	|ИЗ
	|	Константа.ОсновнойСпособОбеспеченияПотребностей КАК ОсновнойСпособОбеспеченияПотребностей
	|ГДЕ
	|	ОсновнойСпособОбеспеченияПотребностей.Значение.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|	И ОсновнойСпособОбеспеченияПотребностей.Значение.Подразделение В(&РазрешенныеПодразделения)";
	
	Запрос.УстановитьПараметр("Номенклатура", ОснованиеНоменклатура);
	Запрос.УстановитьПараметр("РазрешенныеПодразделения", РазрешенныеПодразделения);	
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СписокПодразделений.НайтиПоЗначению(Выборка.Подразделение) = Неопределено Тогда
			СписокПодразделений.Добавить(Выборка.Подразделение, Выборка.Представление);
		КонецЕсли; 
	
	КонецЦикла;

КонецПроцедуры
 
&НаСервере
Процедура ОбновитьСоставПодразделений(СписокПодразделений)

	МассивДобавляемыхРеквизитов   = Новый Массив;
	МассивУдаляемыхРеквизитов     = Новый Массив;
	МассивУдаляемыхЭлементовФормы = Новый Массив;
	
	ИдентификторПодразделения = 0;
	Для каждого ЭлементСписка Из СписокПодразделенийНаФорме Цикл
		ИдентификторПодразделения = Макс(Число(ЭлементСписка.Представление));
	КонецЦикла;
	ИдентификторПодразделения = ИдентификторПодразделения + 1;
	
	// Добавим новые подразделения как колонки списка
	Для каждого ЭлементСписка Из СписокПодразделений Цикл
		
		ДанныеПодразделенияНаФорме = СписокПодразделенийНаФорме.НайтиПоЗначению(ЭлементСписка.Значение);
		Если ДанныеПодразделенияНаФорме = Неопределено Тогда
			// Этого подразделения еще нет на форме
			
			ТекущаяКолонкаИмя = "Подразделение" + Формат(ИдентификторПодразделения, "ЧГ=0");
			
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ТекущаяКолонкаИмя, 
				Новый ОписаниеТипов("Булево"),
				"УправлениеСпецификациями", ЭлементСписка.Представление));
				
			СписокПодразделенийНаФорме.Добавить(ЭлементСписка.Значение, Формат(ИдентификторПодразделения, "ЧГ=0"));
			ИдентификторПодразделения = ИдентификторПодразделения + 1;
			
		КонецЕсли; 
	КонецЦикла;
	
	// Удалим лишние подразделения
	УдаленныеПодразделенияНаФорме = Новый Массив;
	Для каждого ЭлементСписка Из СписокПодразделенийНаФорме Цикл
		Если ЭлементСписка.Значение = Справочники.СтруктураПредприятия.ПустаяСсылка() Тогда
			// Нельзя удалять "в любом подразделении"
			Продолжить;
		КонецЕсли;
		
		Если СписокПодразделений.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
			МассивУдаляемыхРеквизитов.Добавить("УправлениеСпецификациями.Подразделение" + ЭлементСписка.Представление);
			
			ТекущаяКолонкаИмя = "УправлениеСпецификациямиПодразделение" + ЭлементСписка.Представление;
			Элементы.Удалить(Элементы[ТекущаяКолонкаИмя]);
			
			УдаленныеПодразделенияНаФорме.Добавить(ЭлементСписка);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого ЭлементСписка Из УдаленныеПодразделенияНаФорме Цикл
		СписокПодразделенийНаФорме.Удалить(ЭлементСписка);
	КонецЦикла; 
	
	// Удаляем и добавляем реквизиты формы
	Если МассивДобавляемыхРеквизитов.Количество() > 0 ИЛИ МассивУдаляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	КонецЕсли;
	
	// Добавим новые подразделения на форму
	ГруппаКолонокПодразделений = Элементы.УправлениеСпецификациямиГруппаНастройкаОсновнойСпецификации;
	Для каждого РеквизитФормы Из МассивДобавляемыхРеквизитов Цикл
		
		ТекущаяКолонкаИмя = "УправлениеСпецификациями" + РеквизитФормы.Имя;
		
		// Определим куда нужно добавить новое подразделение
		ЭлементСледующееПодразделение = Неопределено;
		НашлиТекущий = Ложь;
		Для каждого ЭлементСписка Из СписокПодразделений Цикл
			Если НашлиТекущий Тогда
				ИдентификторПодразделения = СписокПодразделенийНаФорме.НайтиПоЗначению(ЭлементСписка.Значение).Представление;
				ИмяЭлемента = "УправлениеСпецификациямиПодразделение" + ИдентификторПодразделения;
				ЭлементСледующееПодразделение = Элементы.Найти(ИмяЭлемента);
				Если ЭлементСледующееПодразделение <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			ИначеЕсли ЭлементСписка.Представление = РеквизитФормы.Заголовок Тогда
				НашлиТекущий = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементСледующееПодразделение <> Неопределено Тогда
			НовыйЭлемент = Элементы.Вставить(ТекущаяКолонкаИмя, 
												Тип("ПолеФормы"), 
												ГруппаКолонокПодразделений, 
												ЭлементСледующееПодразделение);
		Иначе
			НовыйЭлемент = Элементы.Добавить(ТекущаяКолонкаИмя, 
												Тип("ПолеФормы"), 
												ГруппаКолонокПодразделений);
		КонецЕсли;
		
		НовыйЭлемент.ПутьКДанным = "УправлениеСпецификациями." + РеквизитФормы.Имя;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "УправлениеСпецификациямиПодразделениеПриИзменении");
	
	КонецЦикла; 
	
	// Настроим внешний вид колонок в зависимости от наличия подразделений
	Если СписокПодразделенийНаФорме.Количество() = 1 Тогда
		Элементы.УправлениеСпецификациямиГруппаНастройкаОсновнойСпецификации.ОтображатьВШапке = Ложь;
		Элементы.УправлениеСпецификациямиПодразделение1.Заголовок = НСтр("ru='Основная в любом подразделении';uk='Основна у будь-якому підрозділі'");
	Иначе
		Элементы.УправлениеСпецификациямиГруппаНастройкаОсновнойСпецификации.ОтображатьВШапке = Истина;
		Элементы.УправлениеСпецификациямиПодразделение1.Заголовок = НСтр("ru='В любом подразделении';uk='У будь-якому підрозділі'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнуюСпецификацию(ТекущаяКолонкаИмя)

	ТекущаяСтрока = Элементы.УправлениеСпецификациями.ТекущаяСтрока;
	ТекущиеДанные = УправлениеСпецификациями.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ИдентификторПодразделения = Сред(ТекущаяКолонкаИмя, СтрДлина("УправлениеСпецификациямиПодразделение") + 1);
	Если ТекущиеДанные["Подразделение" + ИдентификторПодразделения] Тогда
		Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСпецификаций.Действует") Тогда
			ТекущиеДанные["Подразделение" + ИдентификторПодразделения] = Ложь;
			ПоказатьПредупреждение(, НСтр("ru='Спецификация может быть основной только в статусе ""Действует"".';uk='Специфікація може бути основною тільки в статусі ""Діє"".'"));
			Возврат
		КонецЕсли;
	КонецЕсли;

	УстановитьОсновнуюСпецификациюНаСервере(ИдентификторПодразделения);
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьОсновнуюСпецификациюНаСервере(ИдентификторПодразделения)

	ПодразделениеСпецификации = Неопределено;
	Для каждого ЭлементСписка Из СписокПодразделенийНаФорме Цикл
		Если ЭлементСписка.Представление = ИдентификторПодразделения Тогда
			ПодразделениеСпецификации = ЭлементСписка.Значение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ПодразделениеСпецификации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.УправлениеСпецификациями.ТекущаяСтрока;
	ТекущиеДанные = УправлениеСпецификациями.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ТекущиеДанные["Подразделение" + ИдентификторПодразделения] Тогда
		СвойстваЗаписи = Новый Структура;
		СвойстваЗаписи.Вставить("Номенклатура",   ОснованиеНоменклатура);
		СвойстваЗаписи.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		СвойстваЗаписи.Вставить("Спецификация",   ТекущиеДанные.Спецификация);
		СвойстваЗаписи.Вставить("Подразделение",  ПодразделениеСпецификации);
		
		УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновнойСпецификацией(СвойстваЗаписи);
	Иначе
		ЗаписьРегистра = РегистрыСведений.ОсновныеСпецификации.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Номенклатура   = ОснованиеНоменклатура;
		ЗаписьРегистра.Характеристика = ТекущиеДанные.Характеристика;
		ЗаписьРегистра.Подразделение  = ПодразделениеСпецификации;
		ЗаписьРегистра.Удалить();
	КонецЕсли; 
	
	ЗаполнитьУправлениеСпецификациями();
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьРесурснуюСпецификациюВСпискеУправлениеСпецификациями()

	ТекущиеДанные = Элементы.УправлениеСпецификациями.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипСтроки <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьРесурснуюСпецификациюВСпискеУправлениеСпецификациямиЗавершение", ЭтотОбъект);
	УправлениеДаннымиОбИзделияхКлиент.КопироватьРесурснуюСпецификацию(ТекущиеДанные.Спецификация, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура КопироватьРесурснуюСпецификациюВСпискеУправлениеСпецификациямиЗавершение(Ссылка, ДополнительныеПараметры) Экспорт

	ЗаполнитьУправлениеСпецификациями(Ссылка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтрокуУправлениеСпецификациями(ТекущаяСпецификацияХарактеристика, Форма)

	Если ТекущаяСпецификацияХарактеристика <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("СпецификацияХарактеристика", ТекущаяСпецификацияХарактеристика);
  		СписокСтрок = Форма.УправлениеСпецификациями.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			Форма.Элементы.УправлениеСпецификациями.ТекущаяСтрока = СписокСтрок[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСпецификации(ЗначениеСтатуса, ПредставлениеСтатуса)

	ВыделенныеСсылки = ПолучитьВыделенныеСпецификацииВСпискеУправлениеСпецификациями();
	УправлениеДаннымиОбИзделияхКлиент.УстановитьСтатусСпецификаций(ЗначениеСтатуса, ПредставлениеСтатуса, ВыделенныеСсылки);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыделенныеСпецификацииВСпискеУправлениеСпецификациями()

	ВыделенныеСсылки = Новый Массив;
	Для каждого ТекущаяСтрока Из Элементы.УправлениеСпецификациями.ВыделенныеСтроки Цикл
		ТекущиеДанные = УправлениеСпецификациями.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные.ТипСтроки = 0 Тогда
			ВыделенныеСсылки.Добавить(ТекущиеДанные.Спецификация);
		КонецЕсли; 
	КонецЦикла; 

	Возврат ВыделенныеСсылки;
	
КонецФункции

#КонецОбласти

#Область МаршрутныеКарты

&НаКлиентеНаСервереБезКонтекста
Процедура МаршрутныеКартыУстановитьОтборПоСтатусу(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокМаршрутныхКарт, 
		"Статус", 
		Форма.МаршрутныеКартыСтатус, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.МаршрутныеКартыСтатус));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МаршрутныеКартыУстановитьОтборПоПодразделению(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокМаршрутныхКарт, 
		"Подразделение", 
		Форма.МаршрутныеКартыПодразделение, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.МаршрутныеКартыПодразделение));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МаршрутныеКартыУстановитьОтборПоОтветственному(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокМаршрутныхКарт, 
		"Ответственный", 
		Форма.МаршрутныеКартыОтветственный, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.МаршрутныеКартыОтветственный));

КонецПроцедуры

&НаКлиенте
Процедура КопироватьМаршрутнуюКарту()

	ТекстВопроса = НСтр("ru='Будет создана и записана копия маршрутной карты (включая техоперации).
                                |Скопировать?'
                                |;uk='Буде створена та записана копія маршрутної карти (включаючи техоперации).
                                |Скопіювати?'");
	СписокКнопок = Новый СписокЗначений;								
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Скопировать';uk='Скопіювати'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросКопироватьМаршрутнуюКарту", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопироватьМаршрутнуюКарту(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокМаршрутныхКарт.ТекущиеДанные;
	
	Ссылка = КопироватьМаршрутнуюКартуНаСервере(ТекущиеДанные.Ссылка);
	Если Ссылка <> Неопределено Тогда
		Элементы.СписокМаршрутныхКарт.ТекущаяСтрока = Ссылка;
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.МаршрутныеКарты"));
		Оповестить("Запись_ТехнологическиеОперации");
		ОткрытьФорму("Справочник.МаршрутныеКарты.ФормаОбъекта", Новый Структура("Ключ", Ссылка));
	Иначе
		ПоказатьПредупреждение(,НСтр("ru='Не удалось скопировать маршрутную карту.';uk='Не вдалося скопіювати маршрутну карту.'"));
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция КопироватьМаршрутнуюКартуНаСервере(Источник)

	НачатьТранзакцию();
	
	Объект = Источник.Скопировать();
	Попытка
		Объект.Записать();
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ Справочники.МаршрутныеКарты.ЗапонитьПоМаршрутнойКарте(Объект, Источник, Объект.Ссылка) Тогда
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Объект.Записать();
	Исключение
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Калькуляции

&НаКлиентеНаСервереБезКонтекста
Процедура КалькуляцииУстановитьОтборПоСтатусу(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокПлановыхКалькуляций,
		"Статус", 
		Форма.КалькуляцииСтатус, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.КалькуляцииСтатус));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КалькуляцииУстановитьОтборПоОбъекту(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокПлановыхКалькуляций,
		"ОбъектКалькуляции", 
		Форма.КалькуляцииОбъект, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.КалькуляцииОбъект));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КалькуляцииУстановитьОтборПоОтветственному(Форма)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокПлановыхКалькуляций,
		"Ответственный", 
		Форма.КалькуляцииОтветственный, 
		ВидСравненияКомпоновкиДанных.Равно,
		, 
		ЗначениеЗаполнено(Форма.КалькуляцииОтветственный));

КонецПроцедуры

#КонецОбласти

#Область РазрешенияНаЗаменуМатериалов

&НаСервере
Процедура РазрешенияУстановитьОтборПоСтатусу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРазрешений,
		"Статус",
		РазрешенияСтатус,
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(РазрешенияСтатус));
	
КонецПроцедуры

&НаСервере
Процедура РазрешенияУстановитьОтборПоСпецификации()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРазрешений,
		"Спецификация",
		РазрешенияСпецификация,
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(РазрешенияСпецификация));
	
КонецПроцедуры

&НаСервере
Процедура РазрешенияУстановитьОтборПоОтветственному()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРазрешений,
		"Ответственный",
		РазрешенияОтветственный,
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(РазрешенияОтветственный));
	
КонецПроцедуры

&НаСервере
Процедура РазрешенияУстановитьОтборПоНоменклатуре()
	
	Если ЗначениеЗаполнено(ОснованиеНоменклатура) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРазрешений, "ОтборПоНоменклатуре", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРазрешений, "РазрешенияНоменклатура", ОснованиеНоменклатура);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокРазрешений, "ОтборПоНоменклатуре", Ложь);
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ИспользованиеНоменклатурыВНСИПроизводства.Аналог);
	СписокЗначений.Добавить(Перечисления.ИспользованиеНоменклатурыВНСИПроизводства.Изделие);
	СписокЗначений.Добавить(Перечисления.ИспользованиеНоменклатурыВНСИПроизводства.Материал);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРазрешений,
		"ИспользуетсяКак",
		СписокЗначений,
		ВидСравненияКомпоновкиДанных.ВСписке,
		, // Представление - автоматически
		ЗначениеЗаполнено(ОснованиеНоменклатура));
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоСпецификаций

&НаСервере
Процедура ИнициализацияДереваСпецификаций()

	Если НЕ ХарактеристикиИспользуются Тогда
		Элементы.ДеревоХарактеристикаНоменклатуры.Доступность = Ложь;
	КонецЕсли;
	
	ДеревоДата = ТекущаяДатаСеанса();
	ДеревоВыводитьЭтапы = Истина;
	ДеревоВыводитьВыходныеИзделия = Истина;
	ДеревоВыводитьМатериалы = Истина;
	ДеревоВыводитьТрудозатраты = Истина;
	
	УправлениеДаннымиОбИзделиях.НастроитьУсловноеОформлениеДереваСпецификаций(УсловноеОформление);
	
	УстановитьПараметрыСпискаДоступныхСпецификаций(ОснованиеНоменклатура);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиДерева()
	
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(ТекущиеДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			НовыйОтборНоменклатура = ТекущиеДанные.Номенклатура;
		Иначе
			НовыйОтборНоменклатура = Неопределено;
		КонецЕсли;
		
		НовыйОтборХарактеристика = ТекущиеДанные.Характеристика;
		
	Иначе
		НовыйОтборНоменклатура = Неопределено;
		НовыйОтборХарактеристика = Неопределено;
	КонецЕсли;
	
	ТекущийОтборНоменклатура = СписокДоступныхСпецификаций.Параметры.Элементы.Найти("Номенклатура").Значение;
	ТекущийОтборХарактеристика = СписокДоступныхСпецификаций.Параметры.Элементы.Найти("Характеристика").Значение;
	
	Если НовыйОтборНоменклатура <> ТекущийОтборНоменклатура или НовыйОтборХарактеристика <> ТекущийОтборХарактеристика Тогда
		УстановитьПараметрыСпискаДоступныхСпецификаций(НовыйОтборНоменклатура, НовыйОтборХарактеристика);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоСпецификацийПриИзмененииНаСервере(Идентификатор)
	
	Дерево = РеквизитФормыВЗначение("ДеревоСпецификаций");
	
	СтрокаСпецификации = Дерево.Строки.Найти(Идентификатор, "Идентификатор", Истина);
	
	// Проверка спецификации.
	
	Отказ = Ложь;
	УправлениеДаннымиОбИзделиях.ЗаполнитьКоличествоВыходногоИзделияСпецификации(Новый Структура, СтрокаСпецификации.Спецификация,
		СтрокаСпецификации.Номенклатура, СтрокаСпецификации.Характеристика, Отказ);
	
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Изделие по выбранной спецификации не производится.';uk='Виріб за вибраною специфікацію не виробляється.'"),
			,
			"ДеревоСпецификаций");
		
		Возврат
	КонецЕсли;
	
	ПараметрыДерева = Новый Структура;
	ПараметрыДерева.Вставить("Дата", ДеревоДата);
	ПараметрыДерева.Вставить("ВыводитьЭтапы", ДеревоВыводитьЭтапы);
	ПараметрыДерева.Вставить("ВыводитьВыходныеИзделия", ДеревоВыводитьВыходныеИзделия);
	ПараметрыДерева.Вставить("ВыводитьМатериалы", ДеревоВыводитьМатериалы);
	ПараметрыДерева.Вставить("ВыводитьТрудозатраты", ДеревоВыводитьТрудозатраты);
	ПараметрыДерева.Вставить("Спецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	ПараметрыДерева.Вставить("РазузловыватьПолуфабрикаты", Истина);
	ПараметрыДерева.Вставить("АдресВХранилище", Неопределено);
	
	ИспользованныеСпецификации = Новый Массив;
	
	Если ИспользованныеСпецификации.Найти(СтрокаСпецификации.Спецификация) = Неопределено Тогда
		
		УправлениеДаннымиОбИзделиях.ЗаполнитьСтрокиДерева(ПараметрыДерева, Дерево, СтрокаСпецификации, ИспользованныеСпецификации);
		ЗначениеВРеквизитФормы(Дерево, "ДеревоСпецификаций");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаДоступныхСпецификаций(ТекущаяНоменклатура, ТекущаяХарактеристика = Неопределено)
	
	СписокДоступныхСпецификаций.Параметры.УстановитьЗначениеПараметра("Номенклатура", ТекущаяНоменклатура);
	СписокДоступныхСпецификаций.Параметры.УстановитьЗначениеПараметра("Характеристика", ?(ЗначениеЗаполнено(ТекущаяХарактеристика), ТекущаяХарактеристика, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()));
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоСпецификацийНаСервере()
	
	ОбновитьСтруктуруИзделия = Ложь;
	
	Дерево = РеквизитФормыВЗначение("ДеревоСпецификаций");
	
	Если Дерево.Строки.Количество() <> 0 Тогда
		ТекущаяСпецификация = Дерево.Строки[0].Спецификация;
	Иначе
		ТекущаяСпецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
	КонецЕсли; 	
	
	ПараметрыДерева = Новый Структура;
	ПараметрыДерева.Вставить("Дата", ДеревоДата);
	ПараметрыДерева.Вставить("ВыводитьЭтапы", ДеревоВыводитьЭтапы);
	ПараметрыДерева.Вставить("ВыводитьВыходныеИзделия", ДеревоВыводитьВыходныеИзделия);
	ПараметрыДерева.Вставить("ВыводитьМатериалы", ДеревоВыводитьМатериалы);
	ПараметрыДерева.Вставить("ВыводитьТрудозатраты", ДеревоВыводитьТрудозатраты);
	ПараметрыДерева.Вставить("Спецификация", ТекущаяСпецификация);
	ПараметрыДерева.Вставить("РазузловыватьПолуфабрикаты", Истина);
	ПараметрыДерева.Вставить("АдресВХранилище", Неопределено);
	
	УправлениеДаннымиОбИзделиях.ПостроитьДеревоСпецификаций(ПараметрыДерева, Дерево, ОснованиеНоменклатура, ДеревоХарактеристикаНоменклатуры);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоСпецификаций");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоСпецификаций(Идентификатор = Неопределено)
	
	ТекущиеДанные = Элементы.ДеревоСпецификаций.ТекущиеДанные;
	
	// Разворачиваем дерево и установливаем текущую строку.
	Для Каждого Строка из ДеревоСпецификаций.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСпецификаций.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущаяСтрока = НайтиСтрокуПоИдентификатору(ДеревоСпецификаций.ПолучитьЭлементы(), Идентификатор);
		Если ТекущаяСтрока <> Неопределено Тогда
			Элементы.ДеревоСпецификаций.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуПоИдентификатору(КоллекцияЭлементовДерева, Идентификатор)
	
	Для Каждого Строка из КоллекцияЭлементовДерева Цикл
		
		Если Строка.Идентификатор = Идентификатор Тогда
			Возврат Строка;
		Иначе
			Результат = НайтиСтрокуПоИдентификатору(Строка.ПолучитьЭлементы(), Идентификатор);
			Если Результат <> Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметры()
	
	ДеревоСпецификацийЗначение = РеквизитФормыВЗначение("ДеревоСпецификаций");
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ДеревоСпецификацийЗначение, УникальныйИдентификатор));
	
	Возврат ПараметрыПечати;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеСпискаСпецификаций(УсловноеОформление, Элементы.УправлениеСпецификациями.Имя);
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеСпискаСпецификаций(СписокСпецификаций.УсловноеОформление);

	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УправлениеСпецификациями.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеСпецификациями.ТипСтроки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УправлениеСпецификациямиСпецификацияХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УправлениеСпецификациями.СпецификацияХарактеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравам()

	ПравоПросмотраСпецификаций		= ПравоДоступа("Просмотр", Метаданные.Справочники.РесурсныеСпецификации);
	ПравоДоступаКалькуляции			= ПравоДоступа("Просмотр", Метаданные.Документы.ПлановаяКалькуляция);
	ПравоДоступаРазрешения			= ПравоДоступа("Просмотр", Метаданные.Документы.РазрешениеНаЗаменуМатериалов);
	ПравоДоступаМаршрутныеКарты		= ПравоДоступа("Просмотр", Метаданные.Справочники.МаршрутныеКарты);
	ПравоДоступаДеревоСпецификаций	= ПравоДоступа("Использование", Метаданные.Обработки.ДеревоРесурсныхСпецификаций);
	
	Если Не ПравоПросмотраСпецификаций И Не ПравоДоступаМаршрутныеКарты И Не ПравоДоступаРазрешения И Не ПравоДоступаДеревоСпецификаций
			И Не ПравоДоступаКалькуляции Тогда
		Возврат;
	КонецЕсли;
	
	ПравоРедактированияСпецификаций = ПравоДоступа("Редактирование", Метаданные.Справочники.РесурсныеСпецификации);
	Если НЕ ПравоРедактированияСпецификаций Тогда
		Элементы.УправлениеСпецификациями.ТолькоПросмотр = Истина;
		Элементы.УправлениеСпецификациями.ИзменятьСоставСтрок = Ложь;
		Элементы.СписокУстановитьСтатусВРазработке.Видимость = Ложь;
		Элементы.СписокУстановитьСтатусДействует.Видимость = Ложь;
		Элементы.СписокУстановитьСтатусЗакрыта.Видимость = Ложь;
	КонецЕсли; 
	
	Если Не ПравоПросмотраСпецификаций Тогда
		Элементы.СтраницаСпецификацииГдеНоменклатураИзделие.Видимость = Ложь;
		Элементы.СтраницаСпецификацииГдеНоменклатураМатериал.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаКалькуляции Тогда
		Элементы.СтраницаПлановыеКалькуляции.Видимость = Ложь;
		Элементы.ГруппаОтборыКалькуляции.Видимость = Ложь;
		Элементы.СписокПлановыхКалькуляций.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаРазрешения Тогда
		Элементы.СтраницаРазрешенияНаЗамену.Видимость = Ложь;
		Элементы.ГруппаОтборыРазрешения.Видимость = Ложь;
		Элементы.СписокРазрешений.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаМаршрутныеКарты Тогда
		Элементы.СтраницаМаршрутныеКарты.Видимость = Ложь;
		Элементы.ГруппаОтборыМаршрутныхКарт.Видимость = Ложь;
		Элементы.СписокМаршрутныхКарт.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаДеревоСпецификаций Тогда
		Элементы.СтраницаСтруктураИзделия.Видимость = Ложь;
		Элементы.ГруппаСтруктураИзделияШапка.Видимость = Ложь;
		Элементы.ДеревоСпецификаций.Видимость = Ложь;
		Элементы.СписокДоступныхСпецификаций.Видимость = Ложь;
	КонецЕсли;

	Если НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.ДеревоРесурсныхСпецификаций) Тогда
		Элементы.УправлениеСпецификациямиДеревоСпецификации.Видимость = Ложь;
	КонецЕсли; 
		 
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.СравнениеСпецификаций) Тогда
		Элементы.УправлениеСпецификациямиСравнитьСпецификации.Видимость = Ложь;
	КонецЕсли; 
		 
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	ЗаполнитьУправлениеСпецификациями();
	Элементы.СписокСпецификаций.Обновить();
	Элементы.СписокРазрешений.Обновить();
	Элементы.СписокМаршрутныхКарт.Обновить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
