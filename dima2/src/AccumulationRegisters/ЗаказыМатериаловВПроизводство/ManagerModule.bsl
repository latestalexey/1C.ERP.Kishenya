#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Обеспечение

// Получает оформленное накладными по заказам количество.
//
// Параметры:
//  ТаблицаОтбора - ТаблицаЗначений - Таблица с полями "Ссылка" и "КодСтроки", строки должны быть уникальными.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с полями "Ссылка", "КодСтроки", "Количество". Для каждой пары Заказ-КодСтроки содержит
//                    оформленное накладными количество.
//
Функция ТаблицаОформлено(ТаблицаОтбора) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка    КАК Ссылка,
		|	Таблица.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВтОтбор
		|ИЗ
		|	&ТаблицаОтбора КАК Таблица
		|ГДЕ
		|	Таблица.КодСтроки > 0
		|;
		|
		|////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отбор.КодСтроки КАК КодСтроки,
		|	Отбор.Ссылка    КАК Ссылка,
		|	МАКСИМУМ(РегистрЗаказы.Номенклатура)   КАК Номенклатура,
		|	МАКСИМУМ(РегистрЗаказы.Характеристика) КАК Характеристика,
		|	МАКСИМУМ(РегистрЗаказы.Склад)          КАК Склад,
		|	МАКСИМУМ(РегистрЗаказы.Серия)          КАК Серия,
		|	СУММА(РегистрЗаказы.КОформлению) КАК Количество
		|ИЗ
		|	ВтОтбор КАК Отбор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыМатериаловВПроизводство КАК РегистрЗаказы
		|		ПО РегистрЗаказы.Распоряжение = Отбор.Ссылка
		|		 И РегистрЗаказы.КодСтроки = Отбор.КодСтроки
		|		 И РегистрЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		 И РегистрЗаказы.КОформлению <> 0
		|		 И РегистрЗаказы.Активность
		|СГРУППИРОВАТЬ ПО
		|	Отбор.Ссылка, Отбор.КодСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Таблица.Индексы.Добавить("Ссылка, КодСтроки");
	
	Возврат Таблица;
	
КонецФункции

//Возвращает текст запроса заказанного количества из заказов, согласно отборам компоновки.
//Строки заказов с вариантами обеспечения Отгрузить и Отгрузить обособленно не учитываются.
//Текст запроса используется в обработке "Состояние обеспечения" для получения заказанного по заказам количества.
//
//Параметры:
//	ЕстьФильтр - Булево - Признак, определяющий необходимость предварительной фильтрации выборки по заказам,
//	                      передаваемым параметром "Заказы".
//
//Возвращаемое значение:
//	Строка - Текст запроса.
//
Функция ТекстЗапросаЗаказовКОбеспечению(ЕстьФильтр) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.Распоряжение КАК Заказ,
		|	Т.КодСтроки    КАК КодСтроки,
		|	Т.ЗаказаноОстаток - Т.КОформлениюОстаток КАК Количество
		|ПОМЕСТИТЬ ВтРегистрЗаказыМатериаловВПроизводство
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(,
		|		{Склад.* КАК Склад,
		|		Распоряжение.* КАК Заказ} Распоряжение В (&Заказы)) КАК Т
		|ГДЕ
		|	Т.ЗаказаноОстаток > Т.КОформлениюОстаток
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ, КодСтроки
		|;
		|
		|////////////////////////////////////////////
		|";

	Если Не ЕстьФильтр Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " Распоряжение В (&Заказы)", "");
	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

//Возвращает текст запроса заказов, согласно отборам компоновки.
//Строки заказов с вариантами обеспечения Отгрузить и Отгрузить обособленно не учитываются.
//Текст запроса используется в обработке "Состояние обеспечения" для получения заказов,
//содержащих указанную номенклатуру на указанном складе.
//
//Возвращаемое значение:
// Строка - текст запроса.
//
Функция ТекстЗапросаЗаказовНоменклатуры() Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Распоряжение КАК Заказ
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(,
		|		{Склад.* КАК Склад, Номенклатура.* КАК Номенклатура}) КАК Т
		|ГДЕ
		|	Т.ЗаказаноОстаток > Т.КОформлениюОстаток";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

// Возвращает незакрытые (не полностью оформленные) заказы
//
// Параметры:
//  Склад						 - СправочникСсылка.Склады - 
//  ДатаПроверкиОрдерногоСклада	 - Дата - Дата начала применения ордерной схемы на складе
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция РаспоряженияРМВнутреннееТовародвижение(Склад, РаспоряженияДляПересчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Распоряжение КАК Распоряжение,
		|	Таблица.Склад        КАК Склад,
		|	
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.Серия              КАК Серия,
		|	Таблица.Назначение         КАК Назначение,
		|	Таблица.КОформлениюОстаток КАК КОформлениюОстаток
		|
		|ПОМЕСТИТЬ ВтОстатки
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки() КАК Таблица
		|;
		|
		|/////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Распоряжение КАК Распоряжение,
		|	Таблица.Склад        КАК Склад
		|ПОМЕСТИТЬ ВтЕстьНакладные
		|ИЗ
		|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Обороты(,,,
		|		(Распоряжение, Склад) В(
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Фильтр.Распоряжение КАК Распоряжение,
		|				Фильтр.Склад        КАК Склад
		|			ИЗ
		|				ВтОстатки КАК Фильтр)) КАК Таблица
		|ГДЕ
		|	Таблица.КОформлениюРасход > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение, Склад
		|;
		|
		|////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таблица.Распоряжение КАК Ссылка,
		|	Таблица.Склад        КАК Склад,
		|	
		|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаЕстьНакладные.Распоряжение ЕСТЬ NULL ТОГДА
		|				1 // условие выполняется для всех строк распоряжения одновременно.
		|			КОГДА Таблица.КОформлениюОстаток = 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				2
		|		КОНЕЦ)                           КАК СостояниеНакладной,
		|	
		|	МАКСИМУМ(ВЫБОР КОГДА СпрСклады.Ссылка ЕСТЬ NULL ТОГДА
		|				4 // ОРДЕРА НЕ ИСПОЛЬЗУЮТСЯ
		|			ИНАЧЕ
		|			0 // ОРДЕРНАЯ СХЕМА.
		|		КОНЕЦ)                           КАК СостояниеОрдера,
		|		
		|	4                                    КАК СостояниеПриходногоОрдера,
		|	ТИПЗНАЧЕНИЯ(Таблица.Распоряжение)    КАК Тип
		|ИЗ
		|	ВтОстатки КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЕстьНакладные КАК ТаблицаЕстьНакладные
		|		ПО ТаблицаЕстьНакладные.Распоряжение = Таблица.Распоряжение
		|		 И ТаблицаЕстьНакладные.Склад        = Таблица.Склад
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО СпрСклады.Ссылка = Таблица.Склад
		|		 И СпрСклады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|		 И СпрСклады.ДатаНачалаОрдернойСхемыПриОтгрузке <= &НачалоТекущегоДня
		|		
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Распоряжение,
		|	Таблица.Склад
		|
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР КОГДА ТаблицаЕстьНакладные.Распоряжение ЕСТЬ NULL ТОГДА
		|				1 // условие выполняется для всех строк распоряжения одновременно.
		|			КОГДА Таблица.КОформлениюОстаток = 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				2
		|		КОНЕЦ) > 0";
	
	ТекстУсловийЗапроса = "";
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ТекстУсловия = "Склад = &Склад";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ТекстУсловия;
		Запрос.УстановитьПараметр("Склад", Склад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РаспоряженияДляПересчета) Тогда
		ТекстУсловия = "Распоряжение В (&Распоряжения)";
		ТекстУсловийЗапроса = ТекстУсловийЗапроса + ?(ЗначениеЗаполнено(ТекстУсловийЗапроса), " И " + ТекстУсловия, ТекстУсловия);
		Запрос.УстановитьПараметр("Распоряжения", РаспоряженияДляПересчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстУсловийЗапроса) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Остатки(", "Остатки(" + ", " + ТекстУсловийЗапроса);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыМатериаловВПроизводство) Тогда
		Результат = Запрос.Выполнить().Выгрузить();
		Возврат Результат;
	Иначе
		Возврат Новый ТаблицаЗначений();
	КонецЕсли;
	
КонецФункции

// Возвращает остаток к оформлению по переданному списку заказов
//
// Параметры:
//  МассивЗаказов	 - Массив - Массив заказов
//  Склад			 - СправочникСсылка.Склады - 
//  Подразделение	 - СправочникСсылка.СтруктураПредприятия - 
//  СписокМатериалов - ТаблицаЗначений - 
// 		- Номенклатура - СправочникСсылка.Номенклатура
// 		- Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// 		- Назначение - СправочникСсылка.Назначения
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция КОформлениюОстатокРМВнутреннееТовародвижение(МассивЗаказов, Склад = Неопределено, Подразделение = Неопределено, СписокМатериалов = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Если СписокМатериалов <> Неопределено Тогда
		Запрос = Новый Запрос();
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СписокМатериалов", СписокМатериалов.Выгрузить());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокМатериалов.Номенклатура КАК Номенклатура,
		|	СписокМатериалов.Характеристика КАК Характеристика,
		|	СписокМатериалов.Назначение КАК Назначение,
		|	СписокМатериалов.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВтСписокМатериалов
		|ИЗ
		|	&СписокМатериалов КАК СписокМатериалов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Назначение";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОстатки.Распоряжение,
	|	ТаблицаОстатки.Номенклатура,
	|	ТаблицаОстатки.Характеристика,
	|	ТаблицаОстатки.КодСтроки,
	|	ТаблицаОстатки.Серия,
	|	ТаблицаОстатки.Назначение,
	|	ТаблицаОстатки.КОформлениюОстаток КАК Количество
	|ПОМЕСТИТЬ ВтЗаказыМатериалов
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(
	|			,
	|			Распоряжение В (&Заказы)
	|				И Склад = &Склад
	|				И Подразделение = &Подразделение
	|				//&Отбор 
	|				) КАК ТаблицаОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаОстатки.Распоряжение,
	|	ТаблицаОстатки.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.Распоряжение,
	|	ТаблицаОстатки.Номенклатура,
	|	ТаблицаОстатки.Характеристика,
	|	ТаблицаОстатки.КодСтроки,
	|	ТаблицаОстатки.Серия,
	|	ТаблицаОстатки.Назначение,
	|	ТаблицаОстатки.Количество,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаОстатки.Распоряжение ССЫЛКА Документ.ЗаказМатериаловВПроизводство
	|			ТОГДА ТаблицаОстатки.Назначение
	|		КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОГДА Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|				И ТаблицаОстатки.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаОстатки.Распоряжение КАК Документ.ЗаказМатериаловВПроизводство).Назначение
	|		ИНАЧЕ ТаблицаОстатки.Назначение
	|	КОНЕЦ КАК НазначениеОтправителя
	|ИЗ
	|	ВтЗаказыМатериалов КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(
	|				,
	|				,
	|				,
	|				(Распоряжение, КодСтроки) В
	|					(ВЫБРАТЬ
	|						Т.Распоряжение,
	|						Т.КодСтроки
	|					ИЗ
	|						ВтЗаказыМатериалов КАК Т)) КАК Таблица
	|		ПО ТаблицаОстатки.Распоряжение = Таблица.Распоряжение
	|			И ТаблицаОстатки.КодСтроки = Таблица.КодСтроки";
	
	ОтборПоМатериалам = ? (СписокМатериалов = Неопределено, "", 
		" И (Номенклатура, Характеристика, Назначение) В
		|	(ВЫБРАТЬ
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Назначение
		|	ИЗ
		|		ВтСписокМатериалов КАК Таблица)");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//&Отбор", ОтборПоМатериалам);
	
	КодыСтрокЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат КодыСтрокЗаказов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТКА

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#КонецЕсли