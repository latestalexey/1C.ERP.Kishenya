#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//++ НЕ УТ
#Область ПрограммныйИнтерфейс
//++ НЕ УТКА

// Определяет источники уточнения счета, доступные в регистре и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета()
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов,
		Новый Структура(СвойстваИсточника, "ГФУДоходовРасходов"));
	
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений()
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаДоходовРасходов, "АналитикаДоходовРасходовПодразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.АналитикаУчетаПрочихАктивовПассивов, "АналитикаАктивовПассивов");
	
	Возврат ИсточникиПодразделений;
	
КонецФункции

// Определяет источники заполнения субконто.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ИсточникиСубконто()
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("КорСтатья");
	МассивСубконто.Добавить("КорАналитикаДоходов");
	МассивСубконто.Добавить("КорАналитикаРасходов");
	МассивСубконто.Добавить("КорАналитикаАктивовПассивов");
	МассивСубконто.Добавить("ВидОперацииПоЗарплате");
	
	МассивСубконто.Добавить("Статья");
	МассивСубконто.Добавить("АналитикаДоходов");
	МассивСубконто.Добавить("АналитикаРасходов");
	МассивСубконто.Добавить("АналитикаАктивовПассивов");
	МассивСубконто.Добавить("ВидОперацииПоЗарплате");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);
	
КонецФункции

// Определяет показатели в валюте регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте()
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	ПоказателиВВалюте.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаВВалюте, Новый Структура(СвойстваПоказателей, "Валюта"));
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет документы отражаемые в международном учете.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.ДокументыКОтражениюВМеждународномУчете()
//
Функция ДокументыКОтражениюВМеждународномУчете() Экспорт

	ДокументыКОтражению = Новый Массив;
	ДокументыКОтражению.Добавить("ОтражениеЗарплатыВФинансовомУчете");
	ДокументыКОтражению.Добавить("ПрочиеДоходыРасходы");
	ДокументыКОтражению.Добавить("ПоступлениеПредметовЛизинга");
	ДокументыКОтражению.Добавить("НачислениеОценочныхОбязательствПоОтпускам");
	ДокументыКОтражению.Добавить("РемонтОС");
	
	Возврат ДокументыКОтражению;

КонецФункции
//-- НЕ УТКА

// Определяет показатели регистра.
// Подробнее см. ОбщийМодуль.МеждународныйУчетСерверПовтИсп.Показатели()
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "Сумма", "ВалютаУпр"));
    МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаРегл", "ВалютаРегл"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "СуммаВВалюте", "Валюта"));
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.Сумма, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	Возврат "РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы";
КонецФункции


Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Строки.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы КАК Строки
	|ГДЕ
	|	Строки.Статья = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НалогиИВзносыСОплатыТруда)
	|	ИЛИ Строки.КорСтатья = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НалогиИВзносыСОплатыТруда)");
	
	СписокРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
    
    ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяОбъекта();
    
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокРегистраторов, ДополнительныеПараметрыОтметки);
	
КонецПроцедуры

// Обработчик обновления BAS УТ 3.2.3
// Перекладывает суммы с неиспользуемой статьи пассивов "НалогиИВзносыСОплатыТруда" на новую - "Налоги".
// Помимо статьи перезаполняется аналитика.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		Неопределено,
		ПолноеИмяОбъекта(),
		МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Не Результат.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Период КАК Период,
	|	Регистр.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиДвиженияДоходыРасходыПрочиеАктивыПассивы КАК ДляОбработки
	|		ПО Регистр.Регистратор = ДляОбработки.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Ссылка");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументы.Ссылка);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументы.Ссылка);
			НаборЗаписей.Прочитать();
			
			Для Каждого Строка Из НаборЗаписей Цикл
				
				Если Строка.Статья = ПланыВидовХарактеристик.СтатьиАктивовПассивов.НалогиИВзносыСОплатыТруда Тогда
					
					Строка.Статья = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Налоги;
					
					
				КонецЕсли;
				
				Если Строка.КорСтатья = ПланыВидовХарактеристик.СтатьиАктивовПассивов.НалогиИВзносыСОплатыТруда Тогда
					
					Строка.КорСтатья = ПланыВидовХарактеристик.СтатьиАктивовПассивов.Налоги;
					
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать движения документа %Документ% по регистру ""Движения Доходы/Расходы - Прочие активы/пассивы"". Причина: %Причина%';uk='Не вдалося обробити рухи документа %Документ% регістру ""Рухи Доходи/Витрати - Інші активи/пасиви"". Причина: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаДокументы.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ВыборкаДокументы.Ссылка.Метаданные(), ВыборкаДокументы.Ссылка, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли