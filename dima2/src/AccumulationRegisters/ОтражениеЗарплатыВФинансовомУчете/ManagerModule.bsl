#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Функция ПолноеИмяОбъекта()
	Возврат "РегистрНакопления.ОтражениеЗарплатыВФинансовомУчете";
КонецФункции

// Обработчик обновления 2.1.3
// В записях регистра ОтражениеЗарплатыВФинансовомУчете меняет тип измерения ТипНалога с 
// ПеречислениеСсылка.ВидыОперацийПоЗарплате на ПеречислениеСсылка.ТипыНалогов
//
Процедура ЗарегистироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Строки.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ОтражениеЗарплатыВФинансовомУчете КАК Строки
	|ГДЕ
	|	Строки.ТипНалога ССЫЛКА Перечисление.ВидыОперацийПоЗарплате");
	
	СписокРегистраторов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ДополнительныеПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметрыОтметки.ЭтоДвижения = Истина;
	ДополнительныеПараметрыОтметки.ПолноеИмяРегистра = ПолноеИмяОбъекта();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокРегистраторов, ДополнительныеПараметрыОтметки);
	
КонецПроцедуры

// Обработчик обновления 2.1.3
// В записях регистра ОтражениеЗарплатыВФинансовомУчете меняет тип измерения ТипНалога с 
// ПеречислениеСсылка.ВидыОперацийПоЗарплате на ПеречислениеСсылка.ТипыНалогов
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
		Параметры.Очередь,
		Неопределено,
		ПолноеИмяОбъекта(),
		МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Не Результат.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Период КАК Период,
	|	Регистр.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ОтражениеЗарплатыВФинансовомУчете КАК Регистр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДляОбработкиОтражениеЗарплатыВФинансовомУчете КАК ДляОбработки
	|		ПО Регистр.Регистратор = ДляОбработки.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ,
	|	Ссылка");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОтражениеЗарплатыВФинансовомУчете.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументы.Ссылка);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.ОтражениеЗарплатыВФинансовомУчете.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументы.Ссылка);
			НаборЗаписей.Прочитать();
			
			Для Каждого Строка Из НаборЗаписей Цикл
				
				Если ЗначениеЗаполнено(Строка.ТипНалога) Тогда
					Индекс = Перечисления.ВидыОперацийПоЗарплате.Индекс(Строка.ТипНалога);
				
					Имя = Метаданные.Перечисления.ВидыОперацийПоЗарплате.ЗначенияПеречисления[Индекс].Имя;
					ИскомоеЗначение = Метаданные.Перечисления.ТипыНалогов.ЗначенияПеречисления.Найти(Имя);
					Если ИскомоеЗначение <> Неопределено Тогда
						Строка.ТипНалога = ИскомоеЗначение;
					Иначе
						Строка.ТипНалога = Перечисления.ТипыНалогов.ПустаяСсылка();;
					КонецЕсли;
					
				Иначе
					Строка.ТипНалога = Перечисления.ТипыНалогов.ПустаяСсылка();
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать движения документа %Документ% по регистру ""Отражение зарплаты"". Причина: %Причина%';uk='Не вдалося обробити рухи документа %Документ% регістру ""Відображення зарплати"". Причина: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ВыборкаДокументы.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				ВыборкаДокументы.Ссылка.Метаданные(), ВыборкаДокументы.Ссылка, ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
