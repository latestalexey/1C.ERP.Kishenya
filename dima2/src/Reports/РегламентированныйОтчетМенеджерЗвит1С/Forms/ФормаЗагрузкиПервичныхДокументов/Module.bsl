&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	                                  
	СоздаватьДокументыДатойВыпискиКонтрагентом 	= Истина;
	
	Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");

	Параметры.Свойство("НачПериода", НачПериода);
	Параметры.Свойство("КонПериода", КонПериода);
	
	ИдКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	
	Если Не ЗначениеЗаполнено(НачПериода) Тогда
		НачПериода = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонПериода) Тогда
		КонПериода = ТекущаяДата();
	КонецЕсли;
	
	Если НачПериода > КонПериода Тогда
		НачПериода = КонПериода;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Элементы.ТипДокумента.СписокВыбора.Добавить("Рахунок");
	Элементы.ТипДокумента.СписокВыбора.Добавить("Акт");
	Элементы.ТипДокумента.СписокВыбора.Добавить("Накладна");
	ТипДокумента = Элементы.ТипДокумента.СписокВыбора[0].Значение;
	
	Если Параметры.Свойство("ТипДокумента") Тогда
		ТипДокумента = Параметры.ТипДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСписокНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Укажите организацию!';uk='Укажіть організацію!'"));
		Возврат;
	КонецЕсли;
	
	Если    НачПериода = '00010101'
		ИЛИ НачПериода = '00010101' Тогда
		ПоказатьПредупреждение(,НСтр("ru='Укажите период выписки!';uk='Зазначте період виписки!'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокНаКлиенте();
	                              
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНаКлиенте()
	
	Перем КодОрганизации, ЕДРПОУКонтрагента; 
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если    НачПериода = '00010101'
		ИЛИ НачПериода = '00010101' Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Неопределено, Организация) Тогда
		ПоказатьПредупреждение(,(НСтр("ru='Не удалось запустить ""FREDO ДокМен""';uk='Не вдалося запустити ""FREDO ДокМен""'")));
		Возврат;
	КонецЕсли;
	
	ДокументыЗвит1С.Очистить();

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	КодОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, КонПериода, СписокПоказателей).КодПоЕДРПОУ;
	КодОрганизации = СокрЛП(КодОрганизации); 
	
	// проверим, та ли организация открыта в Звите. Иначе никакого действия не произойдет
	Попытка
		ТекстОшибки = "";
		
		РезультатСоздания = глКомпонентаЗвит1С.OpenCreateRTFReport(КодОрганизации,"1CPAX", 0, 1, 2017,""+Новый УникальныйИдентификатор).CreateResult;
	
		Если РезультатСоздания = -3 Тогда
			ТекстОшибки = НСтр("ru='ЕДРПОУ организации указанной в обработке не совпадает с текущем ЕДРПОУ в ""FREDO ДокМен""
	                            |Переключите текущую организацию в ""FREDO ДокМен"" и повторите операцию еще раз';uk= 'ЄДРПОУ організації зазначеної в обробці не збігається з поточним ЄДРПОУ в ""FREDO ДокМен""
	                            |Переключіть поточну організацію в ""FREDO ДокМен"" і повторіть операцію ще раз'");
		ИначеЕсли РезультатСоздания = -6 Тогда	
	        ТекстОшибки = НСтр("ru='Отсутствует лицензия FREDO ДокМен для работы с ЭДО';uk= 'Відсутня ліцензія в FREDO ДокМен для роботи з ЕДО'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Сообщить(ТекстОшибки);
			Возврат;
		КонецЕсли;
	Исключение
		ТекстОшибкиДляОтладки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЕДРПОУКонтрагента = ЕДРПОУКонтрагента(Контрагент);
	КонецЕсли;
	
	Если ТипДокумента = "Рахунок" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		docType = 10103;
		ТаблицаДокЗвит1С = глКомпонентаЗвит1С.GetPrimaryReestr(docType, 2, НачПериода, КонецДня(КонПериода));
		Если НЕ ТаблицаДокЗвит1С = Неопределено Тогда
			ЕстьСтрока = ТаблицаДокЗвит1С.First("MAIN");
			Пока ЕстьСтрока Цикл
				ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ЕДРПОУКонтрагента, "Рахунок");
				ЕстьСтрока = ТаблицаДокЗвит1С.Next("MAIN");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	Если ТипДокумента = "Акт" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		docType = 10104;
		ТаблицаДокЗвит1С = глКомпонентаЗвит1С.GetPrimaryReestr(docType, 2, НачПериода, КонецДня(КонПериода));
		Если НЕ ТаблицаДокЗвит1С = Неопределено Тогда
			ЕстьСтрока = ТаблицаДокЗвит1С.First("MAIN");
			Пока ЕстьСтрока Цикл
				ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ЕДРПОУКонтрагента, "Акт");
				ЕстьСтрока = ТаблицаДокЗвит1С.Next("MAIN");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДокумента = "Накладна" ИЛИ НЕ ЗначениеЗаполнено(ТипДокумента) Тогда
		docType = 10105;
		ТаблицаДокЗвит1С = глКомпонентаЗвит1С.GetPrimaryReestr(docType, 2, НачПериода, КонецДня(КонПериода));
		Если НЕ ТаблицаДокЗвит1С = Неопределено Тогда
			ЕстьСтрока = ТаблицаДокЗвит1С.First("MAIN");
			Пока ЕстьСтрока Цикл
				ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ЕДРПОУКонтрагента, "Накладна");
				ЕстьСтрока = ТаблицаДокЗвит1С.Next("MAIN");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСсылкиДокументовНаСервере();
	
	ЗаполнитьКонтрагентовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ЕДРПОУКонтрагента, ТекТипДокумента)
	
	КодОрганизацииЗвит1С  	= ТаблицаДокЗвит1С.GetValue( "MAIN", "FIRM_EDRPOU" );
	Если НЕ   КодОрганизацииЗвит1С = КодОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСхемыЗвит1С = ТаблицаДокЗвит1С.GetValue( "MAIN", "CharCode" );
	
	Если Лев(ИмяСхемыЗвит1С, 5) = "1CPAX" Тогда
		ТекТипДокумента = "Рахунок";
	ИначеЕсли Лев(ИмяСхемыЗвит1С, 5) = "AKT1C" Тогда
		ТекТипДокумента = "Акт";
	ИначеЕсли Лев(ИмяСхемыЗвит1С, 4) = "1CBH" Тогда
		ТекТипДокумента = "Накладна";
	КонецЕсли;
	
	ЕДРПОУКонтрагентаЗвит1С = ТаблицаДокЗвит1С.GetValue( "MAIN", "Partner_EDRPOU" );

	Если ЗначениеЗаполнено(ЕДРПОУКонтрагента) И НЕ (ЕДРПОУКонтрагентаЗвит1С = ЕДРПОУКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ДокументыЗвит1С.Добавить();
	
	НоваяСтрока.ТипДокумента = ТекТипДокумента;
	НоваяСтрока.Организация  = Организация;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		НоваяСтрока.Контрагент = Контрагент;
	КонецЕсли;
	
	НоваяСтрока.КонтрагентЕДРПОУ = ЕДРПОУКонтрагентаЗвит1С;
	
	НоваяСтрока.ДатаДокумента  	 = ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_DATE");
	НоваяСтрока.Номер 			 = ТаблицаДокЗвит1С.GetValue("MAIN", "DOC_NUM");
	
	НоваяСтрока.СуммаНДС 	   = ТаблицаДокЗвит1С.GetValue("MAIN", "VATSUM");
	НоваяСтрока.СуммаДокумента = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOCSUM");
	
	НоваяСтрока.DOC_ID   = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_ID" );
	НоваяСтрока.CharCode = ИмяСхемыЗвит1С;
	
	РезультатОткрытия = Неопределено;
	Попытка
		Результат = глКомпонентаЗвит1С.OpenReport(НоваяСтрока.DOC_ID);		
		РезультатОткрытия = Результат.CreateResult;
	Исключение
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("Ошибка загрузки. При получении документа ID=" + НоваяСтрока.DOC_ID + " :" + ОписаниеОшибки());
		КонецЕсли;
	КонецПопытки;
	
	Если РезультатОткрытия = 1 Тогда
		
		Если    ВРЕГ(ЛЕВ(ИмяСхемыЗвит1С,5)) = "1CPAX"
			ИЛИ ВРЕГ(ЛЕВ(ИмяСхемыЗвит1С,5)) = "AKT1C"
			ИЛИ ВРЕГ(ЛЕВ(ИмяСхемыЗвит1С,4)) = "1CBH" Тогда
			// дата и номер договора
			НоваяСтрока.ДоговорНомер = Результат.GetValue( "MAIN", "DOG_NUM");	
			НоваяСтрока.ДоговорДата  = Результат.GetValue( "MAIN", "DOG_DATE");	
		КонецЕсли;                          
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОпределитьТипДокументаПоСсылкеНаСервере(Документ) Экспорт

	Результат  = Неопределено;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" 
		ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "BASУТ" Тогда
			
		Если    ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			Результат = "Рахунок";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Результат  = "Акт";
			
			// если есть только услуги - то акт, иначе - накладная
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	1 КАК Поле1
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |	И НЕ Док.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
								  
			Запрос.УстановитьПараметр("Документ", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если  Выборка.Следующий() Тогда
				Результат  = "Накладна";	
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе	
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
			Результат = "Рахунок";
			
		ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Результат  = "Накладна";
			
			// если есть только услуги - то акт, иначе - накладная
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			                      |	""Товары"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
								  
			                      |ОБЪЕДИНИТЬ
								  |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""Оборудование"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Оборудование КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
			                      |
								  
								  |ОБЪЕДИНИТЬ
								  |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""ОбъектыСтроительства"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.ОбъектыСтроительства КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
								  
								  |ОБЪЕДИНИТЬ
								  |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""БланкиСтрогогоУчета"" КАК ВидНоменклатуры
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.БланкиСтрогогоУчета КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ
								  
								  |ОБЪЕДИНИТЬ
								  |ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	""Услуги""
			                      |ИЗ
			                      |	Документ.ПоступлениеТоваровУслуг.Услуги КАК Док
			                      |ГДЕ
			                      |	Док.Ссылка = &Документ");
								  
			Запрос.УстановитьПараметр("Документ", Документ);
			Выборка = Запрос.Выполнить().Выбрать();
			Если  Выборка.Следующий()
				И Выборка.ВидНоменклатуры = "Услуги" Тогда
				Результат  = "Акт";	
			КонецЕсли;		
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Процедура ЗаполнитьСсылкиДокументовНаСервере_ЕРП()
	
	Если ДокументыЗвит1С.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// заполняем ссылки существующих документов (и контрагентов из документов) по ID
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка,
	               |	Док.Ссылка.Организация,
	               |	Док.Ссылка.Контрагент,
	               |	Док.Ссылка.Контрагент.КодПоЕДРПОУ КАК КонтрагентЕДРПОУ,
	               |	Док.Ссылка.НомерПоДаннымПоставщика КАК НомерВходящегоДокумента,
	               |	Док.Ссылка.ДатаПоДаннымПоставщика КАК ДатаВходящегоДокумента,
	               |	Док.Ссылка.Звит1С_DOC_ID КАК DOC_ID,
	               |	Док.Ссылка.СуммаДокумента КАК СуммаДокумента,
	               |	СУММА(Док.СуммаНДС) КАК СуммаНДС
	               |ИЗ
	               |	Документ.ЗаказПоставщику.Товары КАК Док
	               |ГДЕ
	               |	Док.Ссылка.ДатаПоДаннымПоставщика >= &НачДата
	               |	И Док.Ссылка.ДатаПоДаннымПоставщика <= &КонДата
	               |	И Док.Ссылка.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.Ссылка,
	               |	Док.Ссылка.Организация,
	               |	Док.Ссылка.Контрагент,
	               |	Док.Ссылка.Контрагент.КодПоЕДРПОУ,
	               |	Док.Ссылка.НомерПоДаннымПоставщика,
	               |	Док.Ссылка.ДатаПоДаннымПоставщика,
	               |	Док.Ссылка.Звит1С_DOC_ID,
	               |	Док.Ссылка.СуммаДокумента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Док.Ссылка,
	               |	Док.Ссылка.Организация,
	               |	Док.Ссылка.Контрагент,
	               |	Док.Ссылка.Контрагент.КодПоЕДРПОУ,
	               |	Док.Ссылка.НомерВходящегоДокумента,
	               |	Док.Ссылка.ДатаВходящегоДокумента,
	               |	Док.Ссылка.Звит1С_DOC_ID,
	               |	Док.Ссылка.СуммаДокумента,
	               |	СУММА(Док.СуммаНДС)
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
	               |ГДЕ
	               |	Док.Ссылка.ДатаВходящегоДокумента >= &НачДата
	               |	И Док.Ссылка.ДатаВходящегоДокумента <= &КонДата
	               |	И Док.Ссылка.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Док.Ссылка,
	               |	Док.Ссылка.Организация,
	               |	Док.Ссылка.Контрагент,
	               |	Док.Ссылка.Контрагент.КодПоЕДРПОУ,
	               |	Док.Ссылка.НомерВходящегоДокумента,
	               |	Док.Ссылка.ДатаВходящегоДокумента,
	               |	Док.Ссылка.Звит1С_DOC_ID,
	               |	Док.Ссылка.СуммаДокумента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Док.Ссылка.Звит1С_DOC_ID УБЫВ";
				   
		
	
	ТабДат = ДокументыЗвит1С.Выгрузить(, "ДатаДокумента");ТабДат.Сортировать("ДатаДокумента");
	
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ТабДат[0].ДатаДокумента));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ТабДат[ТабДат.Количество()-1].ДатаДокумента));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		
		Если ЗначениеЗаполнено(Выборка.DOC_ID) Тогда
			СтруктураПоиска.Вставить("DOC_ID", Выборка.DOC_ID);
		Иначе	
			ТекТипДокумента = ОпределитьТипДокументаПоСсылкеНаСервере(Выборка.Ссылка);
			СтруктураПоиска.Вставить("ТипДокумента", ТекТипДокумента);
		КонецЕсли;
		
		СтруктураПоиска.Вставить("КонтрагентЕДРПОУ",СокрЛП(Выборка.КонтрагентЕДРПОУ));
		СтруктураПоиска.Вставить("Номер",			СокрЛП(Выборка.НомерВходящегоДокумента));
		СтруктураПоиска.Вставить("ДатаДокумента",	Выборка.ДатаВходящегоДокумента);
		
		СуществующиеДокБезСвязиСоЗвит = ДокументыЗвит1С.НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из СуществующиеДокБезСвязиСоЗвит Цикл
			
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеются дубли документов в 1С: ';uk='Є дублі документів в 1С: '") + "(" + Выборка.Ссылка+") ";
				Продолжить;
			КонецЕсли;
			
			Строка.Контрагент = Выборка.Контрагент;
			Строка.Ссылка 	  = Выборка.Ссылка;
			
			Если Строка.СуммаДокумента <> Выборка.СуммаДокумента Тогда
				Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеется расхождение в сумме документа! ';uk='Є розбіжність у сумі документа! '");
			КонецЕсли;
			Если    Строка.ТипДокумента = "Рахунок"
				ИЛИ Строка.ТипДокумента = "Акт"
				ИЛИ Строка.ТипДокумента = "Накладна" Тогда
				
				Если Строка.СуммаНДС <> Выборка.СуммаНДС Тогда
					Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеется расхождение в сумме НДС документа! ';uk='Є розбіжність у сумі ПДВ документа! '");
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.DOC_ID = Строка.DOC_ID Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				ПервДок = Выборка.Ссылка.ПолучитьОбъект();
				ПервДок.Звит1С_DOC_ID  = Строка.DOC_ID;
				ПервДок.Записать();			
				
			Исключение
				
				Строка.Комментарий = НСтр("ru='Для документа 1С не установлена связь документом из """"FREDO ДокМен"""". Необходимо загрузить XML в документ 1С.';uk='Для документа 1С не встановлений зв''язок документом з """" FREDO ДокМен """". Необхідно завантажити XML до документу 1С.'");
				Строка.Флаг = Истина;
				
			КонецПопытки;
		
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиДокументовНаСервере_БП()
	
	Если ДокументыЗвит1С.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// заполняем ссылки существующих документов (и контрагентов из документов) по ID
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Док.Ссылка,
				   |	Док.Организация,
	               |	Док.Контрагент,
	               |	Док.Контрагент,
	               |	Док.Контрагент.КодПоЕДРПОУ КАК КонтрагентЕДРПОУ,
	               |	Док.НомерВходящегоДокумента,
	               |	Док.ДатаВходящегоДокумента,
	               |	Док.ВидОперации,
	               |	Док.Звит1С_DOC_ID КАК DOC_ID,
				   |	Док.СуммаДокумента КАК СуммаДокумента
	               |ИЗ
	               |	Документ.СчетНаОплатуПоставщика КАК Док
	               |ГДЕ
	               |	  Док.ДатаВходящегоДокумента >= &НачДата
	               |	И Док.ДатаВходящегоДокумента <= &КонДата
				   |	И Док.Организация = &Организация
				   |
				   | ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Док.Ссылка,
				   |	Док.Организация,
	               |	Док.Контрагент,
	               |	Док.Контрагент,
	               |	Док.Контрагент.КодПоЕДРПОУ КАК КонтрагентЕДРПОУ,
	               |	Док.НомерВходящегоДокумента,
	               |	Док.ДатаВходящегоДокумента,
	               |	Док.ВидОперации,
	               |	Док.Звит1С_DOC_ID КАК DOC_ID,
				   |	Док.СуммаДокумента КАК СуммаДокумента
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг КАК Док
	               |ГДЕ
	               |	  Док.ДатаВходящегоДокумента >= &НачДата
	               |	И Док.ДатаВходящегоДокумента <= &КонДата
				   |	И Док.Организация = &Организация				   
				   |УПОРЯДОЧИТЬ ПО
	               |	Док.Звит1С_DOC_ID УБЫВ";
				   
		
	
	ТабДат = ДокументыЗвит1С.Выгрузить(, "ДатаДокумента");ТабДат.Сортировать("ДатаДокумента");
	
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ТабДат[0].ДатаДокумента));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ТабДат[ТабДат.Количество()-1].ДатаДокумента));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		
		ТекТипДокумента = ОпределитьТипДокументаПоСсылкеНаСервере(Выборка.Ссылка);
		
		СтруктураПоиска.Вставить("ТипДокумента", ТекТипДокумента);
		
		СтруктураПоиска.Вставить("КонтрагентЕДРПОУ",СокрЛП(Выборка.КонтрагентЕДРПОУ));
		СтруктураПоиска.Вставить("Номер",			СокрЛП(Выборка.НомерВходящегоДокумента));
		СтруктураПоиска.Вставить("ДатаДокумента",	Выборка.ДатаВходящегоДокумента);
		
		СуществующиеДокБезСвязиСоЗвит = ДокументыЗвит1С.НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из СуществующиеДокБезСвязиСоЗвит Цикл
			
			Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
				Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеются дубли документов в 1С: ';uk='Є дублі документів в 1С: '") + "(" + Выборка.Ссылка+") ";
				Продолжить;
			КонецЕсли;
			
			Строка.Контрагент = Выборка.Контрагент;
			Строка.Ссылка 	  = Выборка.Ссылка;
			
			Если Строка.СуммаДокумента <> Выборка.СуммаДокумента Тогда
				Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеется расхождение в сумме документа! ';uk='Є розбіжність у сумі документа! '");
			КонецЕсли;
			Если    Строка.ТипДокумента = "Рахунок"
				ИЛИ Строка.ТипДокумента = "Акт"
				ИЛИ Строка.ТипДокумента = "Накладна" Тогда
				
				СуммаНДС = 0;
				Если ИдКонфигурации = "БП" Тогда
					Выполнить("СуммаНДС = УчетНДС.ПолучитьНДСДокумента(Выборка.Ссылка);");
				КонецЕсли;
				
				Если Строка.СуммаНДС <> СуммаНДС Тогда
					Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеется расхождение в сумме НДС документа! ';uk='Є розбіжність у сумі ПДВ документа! '");
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.DOC_ID = Строка.DOC_ID Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				
				ПервДок = Выборка.Ссылка.ПолучитьОбъект();
				ПервДок.Звит1С_DOC_ID  = Строка.DOC_ID;
				ПервДок.Записать();			
				
			Исключение
				
				Строка.Комментарий = НСтр("ru='Для документа 1С не установлена связь документом из """"FREDO ДокМен"""". Необходимо загрузить XML в документ 1С.';uk='Для документа 1С не встановлений зв''язок документом з """" FREDO ДокМен """". Необхідно завантажити XML до документу 1С.'");
				Строка.Флаг = Истина;
				
			КонецПопытки;
		
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиДокументовНаСервере()
	
	Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
		ЗаполнитьСсылкиДокументовНаСервере_ЕРП();
	Иначе	
		ЗаполнитьСсылкиДокументовНаСервере_БП();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтрагентовНаСервере()
	
	// ищем подходящих контрагентов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Спр.Ссылка,
	               |	Спр.КодПоЕДРПОУ КАК КонтрагентЕДРПОУ
	               |ИЗ
	               |	Справочник.Контрагенты КАК Спр
	               |ГДЕ
	               |	Спр.КодПоЕДРПОУ В(&МассивЕДРПОУ)
	               |
				   |";
				   
	МассивЕДРПОУ    = Новый Массив();
	Для каждого Строка Из ДокументыЗвит1С Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
			МассивЕДРПОУ.ДОбавить(Строка.КонтрагентЕДРПОУ);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивЕДРПОУ", МассивЕДРПОУ);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Для каждого Строка Из ДокументыЗвит1С.НайтиСтроки(Новый Структура("Контрагент, КонтрагентЕДРПОУ", Справочники.Контрагенты.ПустаяСсылка(), СокрЛП(Выборка.КонтрагентЕДРПОУ))) Цикл
			Строка.Контрагент = Выборка.Ссылка;
		КонецЦикла;
		
	КонецЦикла;	
	
	// проставляем флажки для загрузки документов
	Для каждого Строка Из ДокументыЗвит1С Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			Строка.Флаг = Истина;
			
			Если Строка.Контрагент.Пустая() Тогда
				Строка.Флаг = Ложь;
				Строка.Комментарий = НСтр("ru='В 1С не обнаружен контрагент с Кодом (ЕДРПОУ/ДРФО): ';uk='В 1С не виявлений контрагент з Кодом (ЕДРПОУ/ДРФО):'") + Строка.КонтрагентЕДРПОУ;
			КонецЕсли; 
			
		ИначеЕсли НЕ ПустаяСтрока(Строка.Комментарий) Тогда
			
			Строка.Флаг = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ДокументыЗвит1С.Сортировать("ДатаДокумента, Контрагент, ТипДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПериод(Команда)

	мНастройкаПериода = Новый СтандартныйПериод();
	
	мНастройкаПериода.ДатаНачала    = НачПериода;
	мНастройкаПериода.ДатаОкончания = КонПериода;

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = мНастройкаПериода;
	
	Диалог.Показать(Новый ОписаниеОповещения("НастроитьПериодОкончание", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПериодОкончание(мНастройкаПериода, ДопПараметры) Экспорт

	Если НЕ мНастройкаПериода = Неопределено Тогда

		НачПериода = мНастройкаПериода.ДатаНачала;
		КонПериода = мНастройкаПериода.ДатаОкончания;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ВыдаватьСообщениеОбОкончании = Ложь;
	
	Для каждого Строка Из ДокументыЗвит1С Цикл
		
		ДанныеЭДОШапка   = Строка.ДанныеЭДОШапка;
		ДанныеЭДОТаблица = Строка.ДанныеЭДОТаблица;
		
		// очищаем данные
		ДанныеЭДОШапка.Очистить();
		ДанныеЭДОТаблица.Очистить();
		
		Если НЕ Строка.Флаг Тогда
			Продолжить;					
		КонецЕсли;	

		ВыдаватьСообщениеОбОкончании = Истина;
		
		// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
		Если  ВРЕГ(ЛЕВ(Строка.charCode,5)) <> "1CPAX"
			И ВРЕГ(ЛЕВ(Строка.charCode,5)) <> "AKT1C" 
			И ВРЕГ(ЛЕВ(Строка.charCode,4)) <> "1CBH"  Тогда		
			Продолжить;
		КонецЕсли;
		
		РезультатОткрытия = Неопределено;
		
		Попытка
			Результат = глКомпонентаЗвит1С.OpenReport(Строка.DOC_ID);
			РезультатОткрытия = Результат.CreateResult;
		Исключение
			Если глМенеджерЗвит1С.ФлагОтладки Тогда
				Сообщить("Ошибка загрузки. Заполнение ТЧ док в 1С. При получении документа ID=" + Строка.DOC_ID + " :" +  ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;	
		
		Строка.ДанныеЭдоРезультатОткрытия = РезультатОткрытия;
		
		Если НЕ РезультатОткрытия = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЭДОШапка.Добавить(Результат.GetValue("MAIN", "FIELD"), "ТипКода");
		
		// заполняем табличную часть
		ЕстьСтрока = Результат.First("TAB1"); 
		Пока ЕстьСтрока Цикл
			
			СтрокаТаблицы = ДанныеЭДОТаблица.Добавить();
			ДанныеСтроки = СтрокаТаблицы.ЗначенияРеквизитов;
			
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_NAME1"), "НоменклатураПоставщика");
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_A2"), 				  "КодАртикул");
			
			// тип номенклатуры отсутствует только в актах
			Если НЕ ВРЕГ(ЛЕВ(Строка.charCode,5)) = "AKT1C" Тогда
				ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_T"), "ТипНоменклатуры");
			КонецЕсли;
			
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_CHARCODEUMEASURE"),	"ЕдиницаИзмерения");
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_NOMENKLATURA_NUMHBUMEASURE"),		"ЕдиницаИзмеренияКод");
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_A3"),		"Количество");
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_A5"),		"Цена");
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_A6"),		"Сумма");
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_FIELD8"), 	"СуммаБезСкидки");
			ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_A4"), 		"СуммаСкидки");
			
			// ставка НДС отсутствует в некоторых типах шаблонов
			Если  НЕ Строка.charCode = "1CPAXB"
				И НЕ Строка.charCode = "AKT1CB" 
				И НЕ Строка.charCode = "1CBHB" Тогда
				Попытка
					ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "TAB1_ST_PDV"), "СтавкаНДС");
				Исключение
					ДанныеСтроки.Добавить(Результат.GetValue( "TAB1", "T1_F2"),		  "СтавкаНДС");
				КонецПопытки;
			КонецЕсли;
			
			ЕстьСтрока = Результат.Next("TAB1");
			
		КонецЦикла;
				
	КонецЦикла;			
	
	ЗагрузитьДокументНаСервере();
	ОбновитьСписокНаКлиенте();
	
	Если ВыдаватьСообщениеОбОкончании Тогда
	    ТекстСообщения = НСтр("ru='Загрузка документов завершена!';uk= 'Завантаження документів виконане!'");
	Иначе	
		ТекстСообщения = НСтр("ru='Нет документов для загрузки!';uk= 'Нема документів для завантаження!'");	
	КонецЕсли;
	
	ПоказатьПредупреждение(,ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументНаСервере_ЕРП()
Перем ДанныеУпаковки, КэшированныеЗначения;	
	ВЫПОЛНИТЬ("КэшированныеЗначения =  ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения()");
	
	// получим данные по номенклатуре контрагентов
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Контрагент", ДокументыЗвит1С.Выгрузить(,"Контрагент"));
	Запрос.Текст = "ВЫБРАТЬ
				   |	НоменклатураКонтрагентов.Ссылка КАК Ссылка,
				   |	НоменклатураКонтрагентов.Владелец КАК Партнер,
	               |	НоменклатураКонтрагентов.Номенклатура,
				   |	НоменклатураКонтрагентов.Характеристика,
				   |	НоменклатураКонтрагентов.Упаковка,
	               |	НоменклатураКонтрагентов.Идентификатор КАК КодНоменклатурыКонтрагента,
	               |	НоменклатураКонтрагентов.Артикул КАК АртикулНоменклатурыКонтрагента,
	               |	НоменклатураКонтрагентов.Наименование КАК НаименованиеНоменклатурыКонтрагента
	               |ИЗ
	               |	Справочник.НоменклатураПоставщиков КАК НоменклатураКонтрагентов
	               |ГДЕ
	               |	НоменклатураКонтрагентов.Владелец В
	               |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |				Справочник.Контрагенты.Партнер КАК Партнер
	               |			ИЗ
	               |				Справочник.Контрагенты
	               |			ГДЕ
	               |				Справочник.Контрагенты.Ссылка В (&Контрагент))";
	
	ДанныеПоНоменклатуреКонтрагентов = Запрос.Выполнить().Выгрузить();

	Для каждого Строка Из ДокументыЗвит1С Цикл
	
		Если НЕ Строка.Флаг Тогда
			Продолжить;
		КонецЕсли;	
		
		ДанныеЭДОШапка   = ПреобразоватьВСтруктуру(Строка.ДанныеЭДОШапка);
		ДанныеЭДОТаблица = Строка.ДанныеЭДОТаблица;
		
		Если    Строка.ТипДокумента = "Рахунок"
			ИЛИ Строка.ТипДокумента = "Акт"
			ИЛИ Строка.ТипДокумента = "Накладна" Тогда
			
			Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
				
				Если    Строка.ТипДокумента = "Рахунок" Тогда
					ПервДок = Документы["ЗаказПоставщику"].СоздатьДокумент();	
				ИначеЕсли Строка.ТипДокумента = "Акт"
					  ИЛИ Строка.ТипДокумента = "Накладна" Тогда
					ПервДок = Документы["ПоступлениеТоваровУслуг"].СоздатьДокумент();
				КонецЕсли;
				
			Иначе
				
				ПервДок = Строка.Ссылка.ПолучитьОбъект();
				ПервДок.Товары.Очистить();
				Если Строка.ТипДокумента = "Рахунок" Тогда
				ИначеЕсли Строка.ТипДокумента = "Акт"
					  ИЛИ Строка.ТипДокумента = "Накладна" Тогда
					ПервДок.Серии.Очистить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ПервДок.Заполнить(Неопределено);

		ПервДок.Дата 		= НачалоДня(ТекущаяДата());
		Если СоздаватьДокументыДатойВыпискиКонтрагентом = Истина Тогда
			ПервДок.Дата    = НачалоДня(Строка.ДатаДокумента);
		КонецЕсли;
		
		ПервДок.Организация = Строка.Организация;
		ПервДок.Контрагент  = Строка.Контрагент;
		ПервДок.Партнер     = Строка.Контрагент.Партнер;
		
		Если Строка.ТипДокумента = "Рахунок" Тогда
			ПервДок.НомерПоДаннымПоставщика = Строка.Номер;
			ПервДок.ДатаПоДаннымПоставщика  = Строка.ДатаДокумента;
			ПервДок.Статус					= Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
			ПервДок.Приоритет				= Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Неопределено);			
			
		Иначе
			ПервДок.НомерВходящегоДокумента = Строка.Номер;
			ПервДок.ДатаВходящегоДокумента  = Строка.ДатаДокумента;
		КонецЕсли;	
		ПервДок.Звит1С_DOC_ID   = Строка.DOC_ID;
				
		// договор контрагента
		ДоговорКонтрагентаДата  = Строка.ДоговорДата;
		ДоговорКонтрагентаНомер = Строка.ДоговорНомер;
		
		Если  ЗначениеЗаполнено(ПервДок.Контрагент)
			И ЗначениеЗаполнено(ДоговорКонтрагентаДата)
			И ЗначениеЗаполнено(ДоговорКонтрагентаНомер) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Спр.Ссылка
			               |ИЗ
			               |	Справочник.ДоговорыКонтрагентов КАК Спр
			               |ГДЕ
			               |	Спр.Контрагент = &Контрагент
			               |	И Спр.Дата = &ДоговорКонтрагентаДата
			               |	И Спр.Номер = &ДоговорКонтрагентаНомер";
					   
			Запрос.УстановитьПараметр("Контрагент", 			 ПервДок.Контрагент);				   
			Запрос.УстановитьПараметр("ДоговорКонтрагентаДата",  ДоговорКонтрагентаДата);
			Запрос.УстановитьПараметр("ДоговорКонтрагентаНомер", ДоговорКонтрагентаНомер);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПервДок.Договор = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПервДок.Договор) Тогда
		    ПервДок.ХозяйственнаяОперация = ПервДок.Договор.ХозяйственнаяОперация;
		Иначе	
			ПервДок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		КонецЕсли;
		
		
		Если Строка.ДанныеЭДОРезультатОткрытия = 1 Тогда
			
			Если Строка.ТипДокумента = "Рахунок" Тогда
				
				ПервДок.Валюта  = мВалютаРегламентированногоУчета;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,5)) = "1CPAX" Тогда
					// шаблон обмена FREDO ДокМен
					
					УчитыватьНДС     		 = (Строка.charCode <> "1CPAXB");
					ПервДок.ЦенаВключаетНДС  = (Строка.charCode = "1CPAX");
					
					ТипКода = ДанныеЭДОШапка.ТипКода;
					
					СтрокаСМаксимальнымНДС = Неопределено;
					
					// заполняем табличную часть
					КодСтроки = 0;
					Для каждого ДанныеСтрокиСписок Из ДанныеЭДОТаблица Цикл
					
						ДанныеСтроки = ПреобразоватьВСтруктуру(ДанныеСтрокиСписок.ЗначенияРеквизитов);
						
						НоменклатураПоставщика = ДанныеСтроки.НоменклатураПоставщика;
						КодАртикул	 		   = ДанныеСтроки.КодАртикул;
						
						ТипНоменклатуры = 		ДанныеСтроки.ТипНоменклатуры;
						
						ЕдиницаИзмерения = 		ДанныеСтроки.ЕдиницаИзмерения;
						ЕдиницаИзмеренияКод = 	ДанныеСтроки.ЕдиницаИзмеренияКод;
						Количество = 			ДанныеСтроки.Количество;
						Цена = 					ДанныеСтроки.Цена;
						Сумма = 				ДанныеСтроки.Сумма;
						СуммаБезСкидки = 		ДанныеСтроки.СуммаБезСкидки;
						СуммаСкидки = 			ДанныеСтроки.СуммаСкидки;
						
						СтрокаПервДок = ПервДок.Товары.Добавить();
						
						СтрокаПервДок.КодСтроки = КодСтроки;
						КодСтроки = КодСтроки + 1;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Партнер", Строка.Контрагент.Партнер);
						
						// ищем по наименованию + код/артикул
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						Если Нрег(ТипКода) = "код" Тогда
							СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
						ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
						    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
						КонецЕсли;
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						// если не нашли - то строго по наименованию
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("код");
							СтруктураПоискаНоменклатуры.Удалить("артикул");
							НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						КонецЕсли;
						
						// если не нашли то по коду/артикулу
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
							КонецЕсли;
							НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						КонецЕсли;						
						
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							НайденнаяНоменклатураПоставщика	= НайденнаяНоменклатураПоставщика[0];
						Иначе
							// создадим запись по номенклатуре поставщика
							НовСоответвеНоменклатуры 				= Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
							НовСоответвеНоменклатуры.Владелец 		= Строка.Контрагент.Партнер;
							НовСоответвеНоменклатуры.Наименование 	= НоменклатураПоставщика;
							Если Нрег(ТипКода) = "код" Тогда
								НовСоответвеНоменклатуры.Идентификатор = КодАртикул;
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
								НовСоответвеНоменклатуры.Артикул = КодАртикул;
							КонецЕсли;
							НовСоответвеНоменклатуры.УстановитьНовыйКод();
							
							НовСоответвеНоменклатуры.ОбменДанными.Загрузка = Истина;		
							Попытка
								НовСоответвеНоменклатуры.Записать();
							Исключение
								Сообщить(НСтр("ru='Не удалось создать новую запись о номенклатуре поставщика ';uk= 'Не вдалося створити новий запис по номенклатурі постачальника '") + НоменклатураПоставщика); 
								Сообщить(НСтр("ru='	Контрагент: ';uk= '	Контрагент: '") + Строка.Контрагент + Символы.ПС); 
							КонецПопытки;
							НайденнаяНоменклатураПоставщика = НовСоответвеНоменклатуры.Ссылка;
						КонецЕсли;
						
						СтрокаПервДок.НоменклатураПоставщика = НайденнаяНоменклатураПоставщика.Ссылка;
						
						ЗаполнитьЗначенияСвойств(СтрокаПервДок, НайденнаяНоменклатураПоставщика, "Номенклатура, Характеристика, Упаковка"); 
						       
						// количество и цены
						СтрокаПервДок.КоличествоУпаковок = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						СтрокаПервДок.СуммаСНДС	 = Сумма; // при расчете НДС "сверху" определим НДС позже 						
						
						Если ЗначениеЗаполнено(СтрокаПервДок.Упаковка) Тогда
							ВЫПОЛНИТЬ("ДанныеУпаковки = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьКоэффициентУпаковки(СтрокаПервДок.Упаковка, КэшированныеЗначения, СтрокаПервДок.Номенклатура)");
				    		СтрокаПервДок.Количество = СтрокаПервДок.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
							Если ДанныеУпаковки.НужноОкруглятьКоличество Тогда
								СтрокаПервДок.Количество = Окр(СтрокаПервДок.Количество, 0 ,РежимОкругления.Окр15как20);
							КонецЕсли;
						Иначе
							СтрокаПервДок.Количество = СтрокаПервДок.КоличествоУпаковок;
						КонецЕсли;
						
						// Скидки
						Если  НЕ СуммаСкидки = 0
							И НЕ Цена * Количество  = 0 Тогда
							СтрокаПервДок.СуммаРучнойСкидки   = СуммаСкидки;
							СтрокаПервДок.ПроцентРучнойСкидки = 100 - 100 * Сумма / Цена / Количество;	
						КонецЕсли;
						
						// Сумма НДС, Сумма СНДС
						Если УчитыватьНДС Тогда
												
							СтавкаНДС = ДанныеСтроки.СтавкаНДС;
							
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.ЦенаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.ЦенаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
						КонецЕсли;
						
						СтрокаПервДок.СуммаСНДС	 = СтрокаПервДок.СуммаСНДС + ?(ПервДок.ЦенаВключаетНДС, 0, СтрокаПервДок.СуммаНДС);
						
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Товары.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС  = СтрокаСМаксимальнымНДС.СуммаНДС  + ОшибкаОкругленияНДС;
						СтрокаСМаксимальнымНДС.СуммаСНДС = СтрокаСМаксимальнымНДС.СуммаСНДС + ?(ПервДок.ЦенаВключаетНДС, 0, ОшибкаОкругленияНДС);
					КонецЕсли;
					
				Иначе
					
					Сообщить("Завантаження табличних частин для рахунків """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Товары.Добавить();
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.ЦенаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
			ИначеЕсли Строка.ТипДокумента = "Акт" Тогда
				
				ПервДок.Валюта = мВалютаРегламентированногоУчета;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,5)) = "AKT1C" Тогда
					// шаблон обмена FREDO ДокМен
					
					УчитыватьНДС     		 = (Строка.charCode <> "AKT1CB");
					ПервДок.ЦенаВключаетНДС = (Строка.charCode = "AKT1C");
					
					ТипКода = ДанныеЭДОШапка.ТипКода;
					
					СтрокаСМаксимальнымНДС = Неопределено;
					
					// заполняем табличную часть
					КодСтроки = 0;
					Для каждого ДанныеСтрокиСписок Из ДанныеЭДОТаблица Цикл
					
						ДанныеСтроки = ПреобразоватьВСтруктуру(ДанныеСтрокиСписок.ЗначенияРеквизитов);
						
						НоменклатураПоставщика = ДанныеСтроки.НоменклатураПоставщика;
						КодАртикул	 		   = ДанныеСтроки.КодАртикул;
						
						//ТипНоменклатуры = 		ДанныеСтроки.ТипНоменклатуры;
						
						ЕдиницаИзмерения = 		ДанныеСтроки.ЕдиницаИзмерения;
						ЕдиницаИзмеренияКод = 	ДанныеСтроки.ЕдиницаИзмеренияКод;
						Количество = 			ДанныеСтроки.Количество;
						Цена = 					ДанныеСтроки.Цена;
						Сумма = 				ДанныеСтроки.Сумма;
						СуммаБезСкидки = 		ДанныеСтроки.СуммаБезСкидки;
						СуммаСкидки = 			ДанныеСтроки.СуммаСкидки;
						
						СтрокаПервДок = ПервДок.Товары.Добавить();
						
						СтрокаПервДок.КодСтроки = КодСтроки;
						КодСтроки = КодСтроки + 1;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Партнер", Строка.Контрагент.Партнер);
						
						// ищем по наименованию + код/артикул
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						Если Нрег(ТипКода) = "код" Тогда
							СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
						ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
						    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
						КонецЕсли;
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						// если не нашли - то строго по наименованию
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("код");
							СтруктураПоискаНоменклатуры.Удалить("артикул");
							НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						КонецЕсли;
						
						// если не нашли то по коду/артикулу
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
							КонецЕсли;
							НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						КонецЕсли;						
						
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							НайденнаяНоменклатураПоставщика	= НайденнаяНоменклатураПоставщика[0];
						Иначе
							// создадим запись по номенклатуре поставщика
							НовСоответвеНоменклатуры 				= Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
							НовСоответвеНоменклатуры.Владелец 		= Строка.Контрагент.Партнер;
							НовСоответвеНоменклатуры.Наименование 	= НоменклатураПоставщика;
							Если Нрег(ТипКода) = "код" Тогда
								НовСоответвеНоменклатуры.Идентификатор = КодАртикул;
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
								НовСоответвеНоменклатуры.Артикул = КодАртикул;
							КонецЕсли;
							НовСоответвеНоменклатуры.УстановитьНовыйКод();
							
							НовСоответвеНоменклатуры.ОбменДанными.Загрузка = Истина;		
							Попытка
								НовСоответвеНоменклатуры.Записать();
							Исключение
								Сообщить(НСтр("ru='Не удалось создать новую запись о номенклатуре поставщика ';uk= 'Не вдалося створити новий запис по номенклатурі постачальника '") + НоменклатураПоставщика); 
								Сообщить(НСтр("ru='	Контрагент: ';uk= '	Контрагент: '") + Строка.Контрагент + Символы.ПС); 
							КонецПопытки;
							НайденнаяНоменклатураПоставщика = НовСоответвеНоменклатуры.Ссылка;
						КонецЕсли;
						
						СтрокаПервДок.НоменклатураПоставщика = НайденнаяНоменклатураПоставщика.Ссылка;
						
						ЗаполнитьЗначенияСвойств(СтрокаПервДок, НайденнаяНоменклатураПоставщика, "Номенклатура, Характеристика, Упаковка"); 
						
						// номенклатура должна быть только услуги/работы.
						Если  СтрокаПервДок.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга 
							И СтрокаПервДок.Номенклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
						
							СтрокаПервДок.Номенклатура = Неопределено;	
							СтрокаПервДок.Характеристика = Неопределено;
							СтрокаПервДок.Упаковка = Неопределено;
						
						КонецЕсли;
						
						// количество и цены
						СтрокаПервДок.КоличествоУпаковок = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						СтрокаПервДок.СуммаСНДС	 = Сумма; // при расчете НДС "сверху" определим НДС позже 						
						
						Если ЗначениеЗаполнено(СтрокаПервДок.Упаковка) Тогда
							ВЫПОЛНИТЬ("ДанныеУпаковки = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьКоэффициентУпаковки(СтрокаПервДок.Упаковка, КэшированныеЗначения, СтрокаПервДок.Номенклатура)");
				    		СтрокаПервДок.Количество = СтрокаПервДок.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
							Если ДанныеУпаковки.НужноОкруглятьКоличество Тогда
								СтрокаПервДок.Количество = Окр(СтрокаПервДок.Количество, 0 ,РежимОкругления.Окр15как20);
							КонецЕсли;
						Иначе
							СтрокаПервДок.Количество = СтрокаПервДок.КоличествоУпаковок;
						КонецЕсли;
						
						// Скидки
						Если  НЕ СуммаСкидки = 0
							И НЕ Цена * Количество  = 0 Тогда
							СтрокаПервДок.СуммаРучнойСкидки   = СуммаСкидки;
							СтрокаПервДок.ПроцентРучнойСкидки = 100 - 100 * Сумма / Цена / Количество;	
						КонецЕсли;
						
						// Сумма НДС, Сумма СНДС
						Если УчитыватьНДС Тогда
												
							СтавкаНДС = ДанныеСтроки.СтавкаНДС;
							
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.ЦенаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.ЦенаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
						КонецЕсли;
						
						СтрокаПервДок.СуммаСНДС	 = СтрокаПервДок.СуммаСНДС + ?(ПервДок.ЦенаВключаетНДС, 0, СтрокаПервДок.СуммаНДС);
						
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Товары.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС  = СтрокаСМаксимальнымНДС.СуммаНДС  + ОшибкаОкругленияНДС;
						СтрокаСМаксимальнымНДС.СуммаСНДС = СтрокаСМаксимальнымНДС.СуммаСНДС + ?(ПервДок.ЦенаВключаетНДС, 0, ОшибкаОкругленияНДС);
					КонецЕсли;
					

				Иначе
					
					Сообщить("Завантаження табличних частин для Актів виконаних робіт """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Услуги.Добавить();
					СтрокаПервДок.Содержание = "Загальна сума акта (завантаження табличних частин актів """  + Строка.charCode + """ не передбачено)";
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.СуммаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
			ИначеЕсли Строка.ТипДокумента = "Накладна" Тогда
				
				ПервДок.Валюта = мВалютаРегламентированногоУчета;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,4)) = "1CBH" Тогда
					// шаблон обмена FREDO ДокМен
					
					УчитыватьНДС     		 = (Строка.charCode <> "1CBHB");
					ПервДок.ЦенаВключаетНДС  = (Строка.charCode = "1CBH");
					
					СтрокаСМаксимальнымНДС = Неопределено;
					
					ТипКода = ДанныеЭДОШапка.ТипКода;
					
					// заполняем табличную часть
					КодСтроки = 0;
					Для каждого ДанныеСтрокиСписок Из ДанныеЭДОТаблица Цикл
					
						ДанныеСтроки = ПреобразоватьВСтруктуру(ДанныеСтрокиСписок.ЗначенияРеквизитов);
						
						НоменклатураПоставщика = ДанныеСтроки.НоменклатураПоставщика;
						КодАртикул	 		   = ДанныеСтроки.КодАртикул;
						
						ТипНоменклатуры = 		ДанныеСтроки.ТипНоменклатуры;
						
						ЕдиницаИзмерения = 		ДанныеСтроки.ЕдиницаИзмерения;
						ЕдиницаИзмеренияКод = 	ДанныеСтроки.ЕдиницаИзмеренияКод;
						Количество = 			ДанныеСтроки.Количество;
						Цена = 					ДанныеСтроки.Цена;
						Сумма = 				ДанныеСтроки.Сумма;
						СуммаБезСкидки = 		ДанныеСтроки.СуммаБезСкидки;
						СуммаСкидки = 			ДанныеСтроки.СуммаСкидки;
						
						СтрокаПервДок = ПервДок.Товары.Добавить();
						
						СтрокаПервДок.КодСтроки = КодСтроки;
						КодСтроки = КодСтроки + 1;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Партнер", Строка.Контрагент.Партнер);
						
						// ищем по наименованию + код/артикул
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						Если Нрег(ТипКода) = "код" Тогда
							СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
						ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
						    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
						КонецЕсли;
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						// если не нашли - то строго по наименованию
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("код");
							СтруктураПоискаНоменклатуры.Удалить("артикул");
							НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						КонецЕсли;
						
						// если не нашли то по коду/артикулу
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
							КонецЕсли;
							НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						КонецЕсли;						
						
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							НайденнаяНоменклатураПоставщика	= НайденнаяНоменклатураПоставщика[0];
						Иначе
							// создадим запись по номенклатуре поставщика
							НовСоответвеНоменклатуры 				= Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
							НовСоответвеНоменклатуры.Владелец 		= Строка.Контрагент.Партнер;
							НовСоответвеНоменклатуры.Наименование 	= НоменклатураПоставщика;
							Если Нрег(ТипКода) = "код" Тогда
								НовСоответвеНоменклатуры.Идентификатор = КодАртикул;
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
								НовСоответвеНоменклатуры.Артикул = КодАртикул;
							КонецЕсли;
							НовСоответвеНоменклатуры.УстановитьНовыйКод();
							
							НовСоответвеНоменклатуры.ОбменДанными.Загрузка = Истина;		
							Попытка
								НовСоответвеНоменклатуры.Записать();
							Исключение
								Сообщить(НСтр("ru='Не удалось создать новую запись о номенклатуре поставщика ';uk= 'Не вдалося створити новий запис по номенклатурі постачальника '") + НоменклатураПоставщика); 
								Сообщить(НСтр("ru='	Контрагент: ';uk= '	Контрагент: '") + Строка.Контрагент + Символы.ПС); 
							КонецПопытки;
							НайденнаяНоменклатураПоставщика = НовСоответвеНоменклатуры.Ссылка;
						КонецЕсли;
						
						СтрокаПервДок.НоменклатураПоставщика = НайденнаяНоменклатураПоставщика.Ссылка;
						
						ЗаполнитьЗначенияСвойств(СтрокаПервДок, НайденнаяНоменклатураПоставщика, "Номенклатура, Характеристика, Упаковка"); 
						       
						// количество и цены
						СтрокаПервДок.КоличествоУпаковок = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						СтрокаПервДок.СуммаСНДС	 = Сумма; // при расчете НДС "сверху" определим НДС позже 						
						
						Если ЗначениеЗаполнено(СтрокаПервДок.Упаковка) Тогда
							ВЫПОЛНИТЬ("ДанныеУпаковки = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьКоэффициентУпаковки(СтрокаПервДок.Упаковка, КэшированныеЗначения, СтрокаПервДок.Номенклатура)");
				    		СтрокаПервДок.Количество = СтрокаПервДок.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
							Если ДанныеУпаковки.НужноОкруглятьКоличество Тогда
								СтрокаПервДок.Количество = Окр(СтрокаПервДок.Количество, 0 ,РежимОкругления.Окр15как20);
							КонецЕсли;
						Иначе
							СтрокаПервДок.Количество = СтрокаПервДок.КоличествоУпаковок;
						КонецЕсли;
						
						// Скидки
						Если  НЕ СуммаСкидки = 0
							И НЕ Цена * Количество  = 0 Тогда
							СтрокаПервДок.СуммаРучнойСкидки   = СуммаСкидки;
							СтрокаПервДок.ПроцентРучнойСкидки = 100 - 100 * Сумма / Цена / Количество;	
						КонецЕсли;
						
						// Сумма НДС, Сумма СНДС
						Если УчитыватьНДС Тогда
												
							СтавкаНДС = ДанныеСтроки.СтавкаНДС;
							
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.ЦенаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.ЦенаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
						КонецЕсли;
						
						СтрокаПервДок.СуммаСНДС	 = СтрокаПервДок.СуммаСНДС + ?(ПервДок.ЦенаВключаетНДС, 0, СтрокаПервДок.СуммаНДС);
						
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Товары.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС  = СтрокаСМаксимальнымНДС.СуммаНДС  + ОшибкаОкругленияНДС;
						СтрокаСМаксимальнымНДС.СуммаСНДС = СтрокаСМаксимальнымНДС.СуммаСНДС + ?(ПервДок.ЦенаВключаетНДС, 0, ОшибкаОкругленияНДС);
					КонецЕсли;
					
				//ИначеЕсли	
					
				Иначе
					
					Сообщить("Завантаження табличних частин для накладних """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Товары.Добавить();
					СтрокаПервДок.НаименованиеПоставщика = "Загальна сума накладної до оплати (завантаження табличних частин рахунків """  + Строка.charCode + """ не передбачено)";
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.СуммаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Сообщить("Не вдалося завантажити табличні частини в документ: " + ПервДок);
		КонецЕсли;
		
		ПервДок.Автор = Пользователи.ТекущийПользователь();
		
		ПервДок.УстановитьНовыйНомер();
		ПервДок.Записать();
		
		Строка.Ссылка = ПервДок.Ссылка;
		
		Строка.Флаг = Ложь;
		
		Строка.ДанныеЭДОШапка.Очистить();
		Строка.ДанныеЭДОТаблица.Очистить();
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументНаСервере_БП()
	
	// получим данные по номенклатуре контрагентов
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Контрагент", ДокументыЗвит1С.Выгрузить(,"Контрагент"));
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураКонтрагентов.Контрагент,
	               |	НоменклатураКонтрагентов.Номенклатура,
	               |	НоменклатураКонтрагентов.КодНоменклатурыКонтрагента,
	               |	НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента,
	               |	НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента
	               |ИЗ
	               |	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	               |ГДЕ
	               |	НоменклатураКонтрагентов.Контрагент В(&Контрагент)";
	
	ДанныеПоНоменклатуреКонтрагентов = Запрос.Выполнить().Выгрузить();

	Для каждого Строка Из ДокументыЗвит1С Цикл
	
		Если НЕ Строка.Флаг Тогда
			Продолжить;
		КонецЕсли;	
		
		ДанныеЭДОШапка   = ПреобразоватьВСтруктуру(Строка.ДанныеЭДОШапка);
		ДанныеЭДОТаблица = Строка.ДанныеЭДОТаблица;
		
		Если    Строка.ТипДокумента = "Рахунок"
			ИЛИ Строка.ТипДокумента = "Акт"
			ИЛИ Строка.ТипДокумента = "Накладна" Тогда
			
			Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
				
				Если    Строка.ТипДокумента = "Рахунок" Тогда
					ПервДок = Документы["СчетНаОплатуПоставщика"].СоздатьДокумент();	
				ИначеЕсли Строка.ТипДокумента = "Акт"
					  ИЛИ Строка.ТипДокумента = "Накладна" Тогда
					ПервДок = Документы["ПоступлениеТоваровУслуг"].СоздатьДокумент();
				КонецЕсли;
				
			Иначе
				
				ПервДок = Строка.Ссылка.ПолучитьОбъект();
				ПервДок.Товары.Очистить();
				ПервДок.Услуги.Очистить();
				ПервДок.ВозвратнаяТара.Очистить();
				ПервДок.Оборудование.Очистить();
				ПервДок.ОбъектыСтроительства.Очистить();
				Если Строка.ТипДокумента = "Рахунок" Тогда
					ПервДок.НематериальныеАктивы.Очистить();
				ИначеЕсли Строка.ТипДокумента = "Акт"
					  ИЛИ Строка.ТипДокумента = "Накладна" Тогда
					ПервДок.БланкиСтрогогоУчета.Очистить();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ПервДок.Дата 		= НачалоДня(ТекущаяДата());
		Если СоздаватьДокументыДатойВыпискиКонтрагентом = Истина Тогда
			ПервДок.Дата    = НачалоДня(Строка.ДатаДокумента);
		КонецЕсли;
		
		ПервДок.Организация = Строка.Организация;
		ПервДок.Контрагент  = Строка.Контрагент;
		
		Если Строка.ТипДокумента = "Рахунок" Тогда
			ПервДок.ВидОперации = Перечисления.ВидыОперацийСчетНаОплатуПоставщика.ПокупкаКомиссия;
		ИначеЕсли    Строка.ТипДокумента = "Акт"
			ИЛИ Строка.ТипДокумента = "Накладна" Тогда
			ПервДок.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
		КонецЕсли;
		
		ПервДок.НомерВходящегоДокумента = Строка.Номер;
		ПервДок.ДатаВходящегоДокумента  = Строка.ДатаДокумента;
		
		ПервДок.Звит1С_DOC_ID   = Строка.DOC_ID;
				
		// договор контрагента
		ДоговорКонтрагентаДата  = Строка.ДоговорДата;
		ДоговорКонтрагентаНомер = Строка.ДоговорНомер;
		
		Если  ЗначениеЗаполнено(ПервДок.Контрагент)
			И ЗначениеЗаполнено(ДоговорКонтрагентаДата)
			И ЗначениеЗаполнено(ДоговорКонтрагентаНомер) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
		               |	Спр.Ссылка
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК Спр
		               |ГДЕ
					   |	Спр.Владелец = &Контрагент
					   |	И Спр.Дата 	 = &ДоговорКонтрагентаДата
					   |	И Спр.Номер  = &ДоговорКонтрагентаНомер
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Спр.Код УБЫВ";
					   
			Запрос.УстановитьПараметр("Контрагент", 			 ПервДок.Контрагент);				   
			Запрос.УстановитьПараметр("ДоговорКонтрагентаДата",  ДоговорКонтрагентаДата);
			Запрос.УстановитьПараметр("ДоговорКонтрагентаНомер", ДоговорКонтрагентаНомер);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПервДок.ДоговорКонтрагента = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если  ИдКонфигурации = "БП"  Тогда
			ЗаполнениеДокументов.Заполнить(ПервДок);
			Если    Строка.ТипДокумента = "Акт"
				ИЛИ Строка.ТипДокумента = "Накладна" Тогда
				Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(ПервДок);
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.ДанныеЭДОРезультатОткрытия = 1 Тогда
			
			Если Строка.ТипДокумента = "Рахунок" Тогда
				
				ПервДок.ВалютаДокумента  = мВалютаРегламентированногоУчета;
				ПервДок.КратностьВзаиморасчетов = 1; 
				ПервДок.КурсВзаиморасчетов = 1;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,5)) = "1CPAX" Тогда
					// шаблон обмена FREDO ДокМен
					
					УчитыватьНДС     		 = (Строка.charCode <> "1CPAXB");
					ПервДок.СуммаВключаетНДС = (Строка.charCode = "1CPAX");
					
					ТипКода = ДанныеЭДОШапка.ТипКода;
					
					СтрокаСМаксимальнымНДС = Неопределено;
					
					// заполняем табличную часть
					Для каждого ДанныеСтрокиСписок Из ДанныеЭДОТаблица Цикл
					
						ДанныеСтроки = ПреобразоватьВСтруктуру(ДанныеСтрокиСписок.ЗначенияРеквизитов);
						
						НоменклатураПоставщика = ДанныеСтроки.НоменклатураПоставщика;
						КодАртикул	 		   = ДанныеСтроки.КодАртикул;
						
						ТипНоменклатуры = 		ДанныеСтроки.ТипНоменклатуры;
						
						ЕдиницаИзмерения = 		ДанныеСтроки.ЕдиницаИзмерения;
						ЕдиницаИзмеренияКод = 	ДанныеСтроки.ЕдиницаИзмеренияКод;
						Количество = 			ДанныеСтроки.Количество;
						Цена = 					ДанныеСтроки.Цена;
						Сумма = 				ДанныеСтроки.Сумма;
						СуммаБезСкидки = 		ДанныеСтроки.СуммаБезСкидки;
						СуммаСкидки = 			ДанныеСтроки.СуммаСкидки;
						
						ЕдиницаИзмерения1С = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СокрЛП(ЕдиницаИзмеренияКод));						
						Если    НЕ ЗначениеЗаполнено(ЕдиницаИзмерения1С) 
							ИЛИ НЕ ИдКонфигурации = "БП" Тогда
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (од. виміру: " + ЕдиницаИзмерения + ")";	
						КонецЕсли;
						Если ЗначениеЗаполнено(КодАртикул) Тогда                                                    
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (" + Нрег(ТипКода) +  ": " + КодАртикул + ")";	
						КонецЕсли;
						
						Если ВРЕГ(Лев(ТипНоменклатуры,1)) = "Т" Тогда
							СтрокаПервДок = ПервДок.Товары.Добавить();
							СтрокаПервДок.НаименованиеПоставщика = НоменклатураПоставщика;
							Если ИдКонфигурации = "БП" Тогда
								СтрокаПервДок.ЕдиницаИзмерения = ЕдиницаИзмерения1С;
							КонецЕсли;
						Иначе	
							// все остальное заносим в ТЧ услуги
							СтрокаПервДок = ПервДок.Услуги.Добавить();
							СтрокаПервДок.Содержание = НоменклатураПоставщика;
						КонецЕсли;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Контрагент", Строка.Контрагент);
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							КонецЕсли;
						КонецЕсли;
						
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							СтрокаПервДок.Номенклатура 		= НайденнаяНоменклатураПоставщика[0].Номенклатура;
							Если ВРЕГ(Лев(ТипНоменклатуры,1)) = "Т" Тогда
								Если ИдКонфигурации = "БП" Тогда
									ДанныеПоЕдиницеИзмерения = СтрокаПервДок.Номенклатура.ЕдиницыИзмерения.Найти(СтрокаПервДок.ЕдиницаИзмерения);
									Если НЕ ДанныеПоЕдиницеИзмерения = Неопределено Тогда
										СтрокаПервДок.Коэффициент 		= ДанныеПоЕдиницеИзмерения.Коэффициент;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаПервДок.Количество = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						
						Если УчитыватьНДС Тогда
												
							СтавкаНДС = ДанныеСтроки.СтавкаНДС;
							
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
						КонецЕсли;
						
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Товары.Итог("СуммаНДС") - ПервДок.Услуги.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС = СтрокаСМаксимальнымНДС.СуммаНДС + ОшибкаОкругленияНДС;
					КонецЕсли;
					
				Иначе
					
					Сообщить("Завантаження табличних частин для рахунків """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Товары.Добавить();
					СтрокаПервДок.НаименованиеПоставщика = "Загальна сума рахунку до оплати (завантаження табличних частин рахунків """  + Строка.charCode + """ не передбачено)";
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.СуммаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
			ИначеЕсли Строка.ТипДокумента = "Акт" Тогда
				
				ПервДок.ВалютаДокумента  = мВалютаРегламентированногоУчета;
				ПервДок.КратностьВзаиморасчетов = 1; 
				ПервДок.КурсВзаиморасчетов = 1;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,5)) = "AKT1C" Тогда
					// шаблон обмена FREDO ДокМен
					
					УчитыватьНДС     		 = (Строка.charCode <> "AKT1CB");
					ПервДок.СуммаВключаетНДС = (Строка.charCode = "AKT1C");
					
					ТипКода = ДанныеЭДОШапка.ТипКода;
					
					СтрокаСМаксимальнымНДС = Неопределено;
			
					ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС, Ссылка,
													|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
													|Контрагент, Звит1С_DOC_ID, 
													|РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ЭтоКомиссия");
						
					ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ПервДок);							
					
					// заполняем табличную часть
					Для каждого ДанныеСтрокиСписок Из ДанныеЭДОТаблица Цикл
					
						ДанныеСтроки = ПреобразоватьВСтруктуру(ДанныеСтрокиСписок.ЗначенияРеквизитов);
						
						НоменклатураПоставщика = ДанныеСтроки.НоменклатураПоставщика;
						КодАртикул	 		   = ДанныеСтроки.КодАртикул;
						
						ЕдиницаИзмерения = 		ДанныеСтроки.ЕдиницаИзмерения;
						ЕдиницаИзмеренияКод = 	ДанныеСтроки.ЕдиницаИзмеренияКод;
						Количество = 			ДанныеСтроки.Количество;
						Цена = 					ДанныеСтроки.Цена;
						Сумма = 				ДанныеСтроки.Сумма;
						СуммаБезСкидки = 		ДанныеСтроки.СуммаБезСкидки;
						СуммаСкидки = 			ДанныеСтроки.СуммаСкидки;
						
						ЕдиницаИзмерения1С = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СокрЛП(ЕдиницаИзмеренияКод));						
						Если Не ЗначениеЗаполнено(ЕдиницаИзмерения1С) Тогда
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (од. виміру: " + ЕдиницаИзмерения + ")";	
						КонецЕсли;
						Если ЗначениеЗаполнено(КодАртикул) Тогда                                                    
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (" + Нрег(ТипКода) +  ": " + КодАртикул + ")";	
						КонецЕсли;
						
						// все остальное заносим в ТЧ услуги
						СтрокаПервДок = ПервДок.Услуги.Добавить();
						СтрокаПервДок.Содержание = НоменклатураПоставщика;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Контрагент", Строка.Контрагент);
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							КонецЕсли;
						КонецЕсли;
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							СтрокаПервДок.Номенклатура = НайденнаяНоменклатураПоставщика[0].Номенклатура;
						КонецЕсли;
						
						СтрокаПервДок.Количество = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						
						Если УчитыватьНДС Тогда
												
							СтавкаНДС = ДанныеСтроки.СтавкаНДС;
							
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
						КонецЕсли;
						
						Если ИдКонфигурации = "БП" Тогда
							СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаПервДок.Номенклатура, ДанныеОбъекта);
							Если НЕ СведенияОНоменклатуре = Неопределено Тогда
								Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
									ДанныеОбъекта, СтрокаПервДок, "Услуги", СведенияОНоменклатуре);
							КонецЕсли;
						КонецЕсли;
					
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Услуги.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС = СтрокаСМаксимальнымНДС.СуммаНДС + ОшибкаОкругленияНДС;
					КонецЕсли;
					
				Иначе
					
					Сообщить("Завантаження табличних частин для Актів виконаних робіт """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Услуги.Добавить();
					СтрокаПервДок.Содержание = "Загальна сума акта (завантаження табличних частин актів """  + Строка.charCode + """ не передбачено)";
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.СуммаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;	
				
			ИначеЕсли Строка.ТипДокумента = "Накладна" Тогда
				
				ПервДок.ВалютаДокумента  = мВалютаРегламентированногоУчета;
				ПервДок.КратностьВзаиморасчетов = 1; 
				ПервДок.КурсВзаиморасчетов = 1;
				
				// загрузку ТЧ мы обеспечиваем лишь для определенных типов шаблонов Звита
				Если ВРЕГ(ЛЕВ(Строка.charCode,4)) = "1CBH" Тогда
					// шаблон обмена FREDO ДокМен
					
					УчитыватьНДС     		 = (Строка.charCode <> "1CBHB");
					ПервДок.СуммаВключаетНДС = (Строка.charCode = "1CBH");
					
					ТипКода = ДанныеЭДОШапка.ТипКода;
					
					СтрокаСМаксимальнымНДС = Неопределено;
					
					ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ТипЦен, СуммаВключаетНДС, Ссылка,
													|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов,
													|Контрагент, Звит1С_DOC_ID, 
													|РассчитыватьСуммаВРознице, ЗаполнятьСтавкуНДСВРознице, ЭтоКомиссия");
						
					ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ПервДок);							
					
					// заполняем табличную часть
					Для каждого ДанныеСтрокиСписок Из ДанныеЭДОТаблица Цикл
					
						ДанныеСтроки = ПреобразоватьВСтруктуру(ДанныеСтрокиСписок.ЗначенияРеквизитов);
						
						НоменклатураПоставщика =ДанныеСтроки.НоменклатураПоставщика;
						КодАртикул	 	= 		ДанныеСтроки.КодАртикул;
						
						ТипНоменклатуры = 		ДанныеСтроки.ТипНоменклатуры;
						
						ЕдиницаИзмерения = 		ДанныеСтроки.ЕдиницаИзмерения;
						ЕдиницаИзмеренияКод = 	ДанныеСтроки.ЕдиницаИзмеренияКод;
						Количество = 			ДанныеСтроки.Количество;
						Цена = 					ДанныеСтроки.Цена;
						Сумма = 				ДанныеСтроки.Сумма;
						СуммаБезСкидки = 		ДанныеСтроки.СуммаБезСкидки;
						СуммаСкидки = 			ДанныеСтроки.СуммаСкидки;
						
						ЕдиницаИзмерения1С = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СокрЛП(ЕдиницаИзмеренияКод));						
						Если    НЕ ЗначениеЗаполнено(ЕдиницаИзмерения1С) 
							ИЛИ НЕ ИдКонфигурации = "БП" Тогда
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (од. виміру: " + ЕдиницаИзмерения + ")";	
						КонецЕсли;

						Если ЗначениеЗаполнено(КодАртикул) Тогда                                                    
							НоменклатураПоставщика = "" + НоменклатураПоставщика + " (" + Нрег(ТипКода) +  ": " + КодАртикул + ")";	
						КонецЕсли;
						
						ИмяТЧ = "Товары";
						Если ВРЕГ(Лев(ТипНоменклатуры,1)) = "Т" Тогда
							ИмяТЧ = "Товары";
							СтрокаПервДок = ПервДок[ИмяТЧ].Добавить();
							СтрокаПервДок.НаименованиеПоставщика = НоменклатураПоставщика;
							Если ИдКонфигурации = "БП" Тогда
								СтрокаПервДок.ЕдиницаИзмерения = ЕдиницаИзмерения1С;
							КонецЕсли;
						Иначе	
							// все остальное заносим в ТЧ услуги
							ИмяТЧ = "Услуги";
							СтрокаПервДок = ПервДок[ИмяТЧ].Добавить();
							СтрокаПервДок.Содержание = НоменклатураПоставщика;
						КонецЕсли;
						
						СтруктураПоискаНоменклатуры = Новый Структура("Контрагент", Строка.Контрагент);
						СтруктураПоискаНоменклатуры.Вставить("НаименованиеНоменклатурыКонтрагента", НоменклатураПоставщика);
						НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
						
						Если НайденнаяНоменклатураПоставщика.Количество() = 0 Тогда
							СтруктураПоискаНоменклатуры.Удалить("НаименованиеНоменклатурыКонтрагента");
							Если Нрег(ТипКода) = "код" Тогда
								СтруктураПоискаНоменклатуры.Вставить("КодНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							ИначеЕсли Нрег(ТипКода) = "артикул" Тогда	
							    СтруктураПоискаНоменклатуры.Вставить("АртикулНоменклатурыКонтрагента", КодАртикул);
								НайденнаяНоменклатураПоставщика = ДанныеПоНоменклатуреКонтрагентов.найтиСтроки(СтруктураПоискаНоменклатуры);
							КонецЕсли;
						КонецЕсли;
						Если НайденнаяНоменклатураПоставщика.Количество() > 0 Тогда
							СтрокаПервДок.Номенклатура 		= НайденнаяНоменклатураПоставщика[0].Номенклатура;
							Если ВРЕГ(Лев(ТипНоменклатуры,1)) = "Т" Тогда
								Если ИдКонфигурации = "БП" Тогда
									ДанныеПоЕдиницеИзмерения = СтрокаПервДок.Номенклатура.ЕдиницыИзмерения.Найти(СтрокаПервДок.ЕдиницаИзмерения);
									Если НЕ ДанныеПоЕдиницеИзмерения = Неопределено Тогда
										СтрокаПервДок.Коэффициент 		= ДанныеПоЕдиницеИзмерения.Коэффициент;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						СтрокаПервДок.Количество = Количество;
						СтрокаПервДок.Цена  	 = Цена;
						СтрокаПервДок.Сумма		 = Сумма;
						
						Если УчитыватьНДС Тогда
												
							СтавкаНДС = ДанныеСтроки.СтавкаНДС;
							
							Если СтавкаНДС  = "20" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.2 * 0.2;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.2;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "7" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;	
								Если ПервДок.СуммаВключаетНДС Тогда
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма / 1.07 * 0.07;
								Иначе
									СтрокаПервДок.СуммаНДС = СтрокаПервДок.Сумма * 0.07;
								КонецЕсли;
							ИначеЕсли СтавкаНДС  = "0" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;		
							ИначеЕсли СтавкаНДС  = "Б" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;		
							ИначеЕсли СтавкаНДС  = "Н" Тогда
								СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;		
							КонецЕсли;
							
							Если СтрокаСМаксимальнымНДС = Неопределено Тогда
								СтрокаСМаксимальнымНДС = СтрокаПервДок;
							ИначеЕсли СтрокаСМаксимальнымНДС.СуммаНДС < СтрокаПервДок.СуммаНДС Тогда
							    СтрокаСМаксимальнымНДС = СтрокаПервДок;
							КонецЕсли;
							
						Иначе	
							СтрокаПервДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
						КонецЕсли;
						
						Если ИдКонфигурации = "БП" Тогда
							СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(СтрокаПервДок.Номенклатура, ДанныеОбъекта);
							Если НЕ СведенияОНоменклатуре = Неопределено Тогда
								Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
									ДанныеОбъекта, СтрокаПервДок, ИмяТЧ, СведенияОНоменклатуре);
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
					
					ОшибкаОкругленияНДС = Строка.СуммаНДС - ПервДок.Товары.Итог("СуммаНДС") - ПервДок.Услуги.Итог("СуммаНДС");
					Если  НЕ ОшибкаОкругленияНДС = 0
						И НЕ СтрокаСМаксимальнымНДС = Неопределено Тогда
						СтрокаСМаксимальнымНДС.СуммаНДС = СтрокаСМаксимальнымНДС.СуммаНДС + ОшибкаОкругленияНДС;
					КонецЕсли;
					
				//ИначеЕсли	
					
				Иначе
					
					Сообщить("Завантаження табличних частин для накладних """ + Строка.charCode + """ не передбачено!");
					
					СтрокаПервДок = ПервДок.Товары.Добавить();
					СтрокаПервДок.НаименованиеПоставщика = "Загальна сума накладної до оплати (завантаження табличних частин рахунків """  + Строка.charCode + """ не передбачено)";
					
					СтрокаПервДок.Сумма = Строка.СуммаДокумента;
					Если Строка.СуммаНДС > 0 Тогда
						СтрокаПервДок.СуммаНДС = Строка.СуммаНДС;
						ПервДок.СуммаВключаетНДС = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Сообщить("Не вдалося завантажити табличні частини в документ: " + ПервДок);
		КонецЕсли;
		
		ПервДок.Ответственный = Пользователи.ТекущийПользователь();
		
		ПервДок.УстановитьНовыйНомер();
		ПервДок.Записать();
		
		Строка.Ссылка = ПервДок.Ссылка;
		
		Строка.Флаг = Ложь;
		
		Строка.ДанныеЭДОШапка.Очистить();
		Строка.ДанныеЭДОТаблица.Очистить();
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументНаСервере()
	
	Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
		ЗагрузитьДокументНаСервере_ЕРП();	
	Иначе
		ЗагрузитьДокументНаСервере_БП();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗвит1СКонтрагентПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) Тогда
		ТекущаяСтрока.Флаг = Ложь;
		Возврат;
	КонецЕсли;
	
	Если    СокрЛП(ЕДРПОУКонтрагента(ТекущаяСтрока.Контрагент))  <> ТекущаяСтрока.КонтрагентЕДРПОУ Тогда
		
		Сообщить(НСтр("ru='У контрагента не совпадает Код (ЕДРПОУ/ДРФО)!';uk='У контрагента не збігається Код (ЕДРПОУ/ДРФО)!'"));
		ТекущаяСтрока.Контрагент = "";
	    ТекущаяСтрока.Флаг = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
		ТекущаяСтрока.Флаг = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗвит1СФлагПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) И ТекущаяСтрока.Флаг Тогда
		
		ТекущаяСтрока.Флаг = Ложь;
		Сообщить(НСтр("ru='Необходимо указать контрагента!';uk='Необхідно зазначити контрагента!'"));	
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура XMLОткрытьВЗвит1С(Команда)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось запустить ""FREDO ДокМен""';uk='Не вдалося запустити ""FREDO ДокМен""'"));
		Возврат;
	КонецЕсли;
	
	Результат = глКомпонентаЗвит1С.ShowReport(ТекущаяСтрока.DOC_ID);
	
	Если Результат = 0 Тогда
		глКомпонентаЗвит1С.Bring1CToFront();		
		Возврат;
	КонецЕсли;

	глКомпонентаЗвит1С.BringZvitToFront();
	
КонецПроцедуры

&НаСервере
Функция ЕДРПОУКонтрагента(Контрагент)

	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КодПоЕДРПОУ"));	
	
КонецФункции

&НаСервере
Функция ПреобразоватьВСтруктуру(СписокЗначений)

	Результат = Новый Структура; 
	
	Для каждого Элемент Из СписокЗначений Цикл
		Результат.Вставить(Элемент.Представление, Элемент.Значение);		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции 
