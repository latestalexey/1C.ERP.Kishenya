#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПриСозданииНаСервере = Истина;
	
	//Для непосредственного формирования отчета
	Настройки.Вставить("Внешний", Истина);
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Попытка
		ХранимыеПараметрыОтчета = Форма.Параметры.ХранимыеПараметрыОтчета;
	Исключение
		ВызватьИсключение НСтр("ru='Открытие отчета возможно только при расшифровке из бюджетных отчетов';uk='Відкриття звіту можливе тільки при розшифровці з бюджетних звітів'");
	КонецПопытки;
	
	ДополнительныеСвойства = Новый Структура();
	Для Каждого КлючИЗначение из ХранимыеПараметрыОтчета Цикл
		ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	АдресПараметровОтчета = ПоместитьВоВременноеХранилище(ДополнительныеСвойства, Форма.УникальныйИдентификатор);
	
	РеквизитФормы = Новый РеквизитФормы("АдресПараметровОтчета", Новый ОписаниеТипов("Строка"));
	МассивДобавления = Новый Массив;
	МассивДобавления.Добавить(РеквизитФормы);
	Форма.ИзменитьРеквизиты(МассивДобавления);
	
	Форма.АдресПараметровОтчета = АдресПараметровОтчета;
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ФормаОтчетаПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("АдресПараметровОтчета", ЭтаФорма.АдресПараметровОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ДополнительныеСвойства = КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ДанныеОтчета = Новый ТаблицаЗначений;
	ДанныеОтчета.Колонки.Добавить("ИмяОперанда");
	ДанныеОтчета.Колонки.Добавить("ЗначениеОперанда");
	ДанныеОтчета.Колонки.Добавить("ОписаниеОперанда");
	ДанныеОтчета.Колонки.Добавить("ДопИнформация");
	ДанныеОтчета.Колонки.Добавить("АдресПараметровОтчета");
	ДанныеОтчета.Колонки.Добавить("ИндексСтрокиДанных");
	ДанныеОтчета.Колонки.Добавить("ИмяПоказателя");
	ДанныеОтчета.Колонки.Добавить("НомерПервогоСимвола");
	ДанныеОтчета.Колонки.Добавить("ПорядокРасчета");
	
	ХранимыеДополнительныеСвойства = Неопределено;
	Если ДополнительныеСвойства.Свойство("АдресПараметровОтчета") Тогда
		АдресПараметровОтчета = ДополнительныеСвойства.АдресПараметровОтчета;
		Если ЭтоАдресВременногоХранилища(АдресПараметровОтчета) Тогда
			ХранимыеДополнительныеСвойства = ПолучитьИзВременногоХранилища(АдресПараметровОтчета);
		КонецЕсли;
	КонецЕсли;
	
	Если ХранимыеДополнительныеСвойства = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Отчет может быть вызван только для расшифровки значения бюджетного отчета или экземпляра бюджета';uk='Звіт може бути викликано тільки для розшифровки значення бюджетного звіту або примірника бюджету'");
	КонецЕсли;
	
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(ХранимыеДополнительныеСвойства.АдресДанныхЯчеек);
	СтрокаДанныхЯчеек = ДанныеЯчеек[ХранимыеДополнительныеСвойства.ИндексСтрокиДанных];
	
	ВидБюджета = ХранимыеДополнительныеСвойства.ВидБюджета;
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета,
																СтруктураКолонокТаблицыДанных, ХранимыеДополнительныеСвойства.РежимФормирования);
	
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	ХранимыеДополнительныеСвойства.Вставить("СтруктураЯчеек", СтруктураЯчеек);
	ХранимыеДополнительныеСвойства.Вставить("ПараметрыЯчеек", ПараметрыЯчеек);
	ХранимыеДополнительныеСвойства.Вставить("АдресПараметровОтчета", АдресПараметровОтчета);
	
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиОтчета, "ИмяПроизводногоПоказателя", 	ИмяПроизводногоПоказателя(СтрокаДанныхЯчеек, ПараметрыЯчеек));
	
	ДанныеШапки = Новый ТаблицаЗначений;
	ДанныеШапки.Колонки.Добавить("Группировка");
	ДанныеШапки.Колонки.Добавить("Значение");
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("ru='Параметры отчета:';uk='Параметри звіту:'");
	НоваяСтрока.Значение = ПараметрыОтчета(ХранимыеДополнительныеСвойства);
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("ru='Отбор:';uk='Відбір:'");
	НоваяСтрока.Значение = ОтборИГруппировки(СтрокаДанныхЯчеек, ХранимыеДополнительныеСвойства);
	
	Формула = Формула(СтрокаДанныхЯчеек, ПараметрыЯчеек);
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("ru='Формула:';uk='Формула:'");
	НоваяСтрока.Значение = Формула;
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("ru='Примечание:';uk='Примітка:'");
	НоваяСтрока.Значение = Примечание(СтрокаДанныхЯчеек, ПараметрыЯчеек);
	
	ДеталиФормулы = ДеталиФормулы(СтрокаДанныхЯчеек, ДанныеЯчеек, Формула, ХранимыеДополнительныеСвойства, ДанныеОтчета, СтруктураКолонокТаблицыДанных);
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("ru='Вычисления:';uk='Обчислення:'");
	НоваяСтрока.Значение = ДеталиФормулы.Вычисление;
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("ru='Результат:';uk='Результат:'");
	НоваяСтрока.Значение = ДеталиФормулы.Результат;
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ДанныеОтчета", ДанныеОтчета);
	ВнешниеНаборы.Вставить("ДанныеШапки", ДанныеШапки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Примечание(СтрокаДанныхЯчеек, ПараметрыЯчеек)
	
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	
	Примечание = "";
	Макет = Перечисления.ВидыФормулБюджетирования.ПолучитьМакет("ОписаниеФункций");
	Для Каждого Значение из Метаданные.Перечисления.ВидыФормулБюджетирования.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = Перечисления.ВидыФормулБюджетирования[Значение.Имя];
		ИмяФормулы = Перечисления.ВидыФормулБюджетирования.ИмяФункции(ЗначениеПеречисления);
		Если СтрНайти(ПараметрыЯчейки.Формула, ИмяФормулы) Тогда
			Попытка
				Область = Макет.ПолучитьОбласть(ИмяФормулы);
			Исключение
				Продолжить;
			КонецПопытки;
			Примечание = Примечание + Область.Область(1, 1).Текст + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Примечание = СокрЛП(Примечание);
	Если ПустаяСтрока(Примечание) Тогда
		Примечание = "-";
	КонецЕсли;
	
	Возврат Примечание;
	
КонецФункции

Процедура ДобавитьСтрокуЗначения(ДанныеЯчеек, СтрокаДанныхЯчеек, ДанныеОтчета, СтрокаЛога, ДополнительныеСвойства)
	Перем СтрокаСсылки;
	
	ПараметрыЯчеек = ДополнительныеСвойства.ПараметрыЯчеек;
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	
	ИмяОперанда = СтрокаЛога.ИмяОперанда;
	
	Если СтрокаЛога.СтрокаОснование = -1 Тогда
		
		//ненайденный операнд
		СтруктураПоиска = Новый Структура("Строка, Колонка");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанныхЯчеек);
		
		СтрокиОснование = ДополнительныеСвойства.СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаОснование из СтрокиОснование Цикл
			ПараметрЯчейки = ДополнительныеСвойства.ПараметрыЯчеек.Найти(СтрокаОснование.ИндексСтроки, "ИндексСтроки");
			Если СтрокаЛога.ИмяОперанда = ПараметрЯчейки.ИмяОперанда Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВидЭлемента = СтрокаОснование.ВидОперанда;
		
		//ячейки таблицы отображаем в квадратных скобках
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			ИмяОперанда = "[" + ИмяОперанда + "]";
		КонецЕсли;
		
	Иначе
		
		СтрокаОснование = ДанныеЯчеек[СтрокаЛога.СтрокаОснование];
		ВидЭлемента = СтрокаЛога.ВидЭлемента;
		
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда //ссылка на ячейку
		ОписаниеОперанда = НСтр("ru='Ссылка на ячейку таблицы';uk='Посилання на комірку таблиці'");
		Если Не ЗначениеЗаполнено(ПараметрыЯчейки.ОперандСтрока) И Не ЗначениеЗаполнено(ПараметрыЯчейки.ОперандКолонка) Тогда
			ДопИнформация = "";
		Иначе
			ДопИнформация = "[" + 
			ПараметрыЯчейки.ОперандСтрока.НаименованиеДляПечати + 
			?(ЗначениеЗаполнено(ПараметрыЯчейки.ОперандКолонка), "; " + 
			ПараметрыЯчейки.ОперандКолонка.НаименованиеДляПечати, "") + "]";
		КонецЕсли;
	Иначе
		ОписаниеОперанда = Строка(ВидЭлемента);
		ОпределяющийЭлемент = ЭлементОпределяющийЗначениеСтроки(СтрокаОснование, ДополнительныеСвойства.ПараметрыЯчеек, ВидЭлемента);
		
		Показатели = Неопределено;
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			ОписаниеОперанда = ОписаниеОперанда + " """ + СтрокаОснование.ПоказательБюджетов + """";
			Показатели = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ОпределяющийЭлемент, "ТипЗначенияПоказателя");
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			ОписаниеОперанда = ОписаниеОперанда + " """ + СтрокаОснование.СтатьяБюджетов + """";
		Иначе
			ОписаниеОперанда = ОписаниеОперанда + " """ + ОпределяющийЭлемент.НаименованиеДляПечати + """";
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			ИмяПоказателя = "Количество";
		ИначеЕсли ПараметрыЯчейки.ФлагЗначение Тогда
			ИмяПоказателя = "Значение";
		ИначеЕсли ПараметрыЯчейки.ФлагСумма Тогда
			ИмяПоказателя = "Сумма";
		Иначе
			ВызватьИсключение НСтр("ru='Не определен показатель расшифровки';uk='Не визначено показник розшифровки'");
		КонецЕсли;
		
		ДопИнформация = ИмяПоказателя + ?(ПараметрыЯчейки.ОбратныйЗнак, ", (-)", "");
		Если Показатели <> Неопределено Тогда
			ДопИнформация = ДопИнформация + ", " + Показатели;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = ДанныеОтчета.Добавить();
	НоваяСтрока.ИмяОперанда = ИмяОперанда;
	НоваяСтрока.ЗначениеОперанда = СтрокаЛога.Значение;
	НоваяСтрока.ОписаниеОперанда = ОписаниеОперанда;
	НоваяСтрока.ДопИнформация = ДопИнформация;
	
	ИмяОперандаДляПоиска = ИмяОперанда;
	СимволыПеречисления = СтрНайти(ИмяОперандаДляПоиска, " #");
	Если СимволыПеречисления Тогда
		ИмяОперандаДляПоиска = Сред(ИмяОперандаДляПоиска, 1, СимволыПеречисления - 1);
	КонецЕсли;
	
	НоваяСтрока.НомерПервогоСимвола = СтрНайти(ПараметрыЯчейки.Формула, ИмяОперандаДляПоиска);
	НоваяСтрока.ПорядокРасчета = ДанныеОтчета.Количество();
	
	Если СтрокаЛога.СтрокаОснование <> -1 Тогда
		НоваяСтрока.АдресПараметровОтчета = ДополнительныеСвойства.АдресПараметровОтчета;
		НоваяСтрока.ИндексСтрокиДанных = СтрокаЛога.СтрокаОснование;
		НоваяСтрока.ИмяПоказателя = СтрокаЛога.ИмяПоказателя;
	КонецЕсли;
	
КонецПроцедуры

Функция ДеталиФормулы(СтрокаДанныхЯчеек, ДанныеЯчеек, Формула, ДополнительныеСвойства, ДанныеОтчета, СтруктураКолонок)
	
	ЛогРасчета = Новый Массив;
	ЗначениеВычисления = БюджетнаяОтчетностьВыводСервер.РассчитатьЗначениеЯчейки(
									ДанныеЯчеек, ДополнительныеСвойства.ПараметрыЯчеек,
									БюджетнаяОтчетностьВыводСервер.ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонок, ДополнительныеСвойства),
									СтрокаДанныхЯчеек, ДополнительныеСвойства.ИмяПоказателя, , ЛогРасчета);
	
	ПараметрыЯчейки = ДополнительныеСвойства.ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	ВычисленнаяФормула = Формула;
	
	МассивЗначений = Новый Массив;
	Для Каждого СтрокаЛога из ЛогРасчета Цикл
		МассивЗначений.Добавить(СтрокаЛога.Значение);
		Если Не ТипЗнч(СтрокаЛога.Значение) = Тип("Массив") Тогда //значение учтено в других записях
			ДобавитьСтрокуЗначения(ДанныеЯчеек, СтрокаДанныхЯчеек, ДанныеОтчета, СтрокаЛога, ДополнительныеСвойства);
			ЗначениеДляФормулы = СтрокаЛога.Значение;
		Иначе
			ЗначениеДляФормулы = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(СтрокаЛога.Значение, "; ");
		КонецЕсли;
		ИмяОперанда = "[" + СтрокаЛога.ИмяОперанда + "]";
		ВычисленнаяФормула = СтрЗаменить(ВычисленнаяФормула, ИмяОперанда, ЗначениеДляФормулы);
	КонецЦикла;
	
	Если СтрНайти(ВычисленнаяФормула, "МассивЗначений") Тогда
		Представление = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивЗначений, "; ");
		ВычисленнаяФормула = СтрЗаменить(ВычисленнаяФормула, "МассивЗначений", Представление);
	КонецЕсли;
	
	Возврат Новый Структура("Вычисление, Результат", ВычисленнаяФормула, ЗначениеВычисления);
	
КонецФункции

Функция ПараметрыОтчета(ПараметрыОтчета)
	
	Результат = НСтр("ru='Начало периода: %1%2Окончание периода: %3%4Дата актуальности: %5';uk='Початок періоду: %1%2Закінчення періоду: %3%4Дата актуальності: %5'");
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Результат, 
			Формат(ПараметрыОтчета.НачалоПериода, "ДЛФ=D"), Символы.ПС, 
			Формат(ПараметрыОтчета.КонецПериода, "ДЛФ=D"), Символы.ПС,
			Формат(ПараметрыОтчета.ДатаАктуальности, "ДЛФ=D"));
		
	Возврат Результат;
		
КонецФункции

Функция Формула(СтрокаДанныхЯчеек, ПараметрыЯчеек)
	
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	Результат = ПараметрыЯчейки.ПредставлениеФормулы;
	Если ПустаяСтрока(Результат) Тогда
		Результат = ПараметрыЯчейки.Формула;
	КонецЕсли;
	Результат = СтрЗаменить(Результат, "МассивЗначений", НСтр("ru=' [Ячейки группы] ';uk=' [Комірки групи] '"));
	
	ПреобразованнаяФормула = "";
	ЗаменитьКвадратныеСкобки = Ложь;
	Для Сч = 1 по СтрДлина(Результат) Цикл
		Если Сред(Результат, Сч - 4, 5) = "ИТОГ(" Тогда
			ЗаменитьКвадратныеСкобки = Истина;
		КонецЕсли;
		Символ = Сред(Результат, Сч, 1);
		Если ЗаменитьКвадратныеСкобки Тогда
			Если Символ = "[" ИЛИ Символ = "]" Тогда
				Символ = """";
			КонецЕсли;
			Если Символ = "," Тогда
				ЗаменитьКвадратныеСкобки = Ложь;
			КонецЕсли;
		КонецЕсли;
		ПреобразованнаяФормула = ПреобразованнаяФормула + Символ;
	КонецЦикла;
	
	Возврат ПреобразованнаяФормула;
	
КонецФункции

Функция ОтборИГруппировки(ДанныеЯчеек, ДополнительныеСвойства)
	
	СтруктураОписанияОтчета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(
																			ДополнительныеСвойства.ВидБюджета);
																			
	Группировки = "";
	Для Каждого Измерение из СтруктураОписанияОтчета.Измерения Цикл
		Если ЗначениеЗаполнено(ДанныеЯчеек[Измерение]) Тогда
			Группировки = Группировки + Измерение + ": " + ДанныеЯчеек[Измерение] + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из СтруктураОписанияОтчета.ВидыАналитик Цикл
		ИмяВида = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		Если ЗначениеЗаполнено(ДанныеЯчеек[ИмяВида]) Тогда
			Группировки = Группировки + Измерение + ": " + ДанныеЯчеек[ИмяВида] + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	Для Каждого Периодичность из УпорядоченныеПериодичности Цикл
		Если СтруктураОписанияОтчета.Периодичности.Найти(Периодичность) <> Неопределено Тогда
			Значение = ДанныеЯчеек["Период" + ?(ЗначениеЗаполнено(Периодичность), ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность), "")];
			Если ЗначениеЗаполнено(Значение) Тогда
				ПредставлениеПериода = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(Значение, Периодичность);
				Группировки = Группировки + "Период: " + ПредставлениеПериода + Символы.ПС;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Группировки = СокрЛП(Группировки);
	
	Возврат СокрЛП(Группировки);
	
КонецФункции

Функция ЭлементОпределяющийЗначениеСтроки(СтрокаДанныхЯчеек, ПараметрыЯчеек, ВидЭлемента)
	
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	
	Если Не ПараметрыЯчейки.СложнаяТаблица Тогда
		
		Если СтрокаДанныхЯчеек.Строка.ВидЭлемента = ВидЭлемента Тогда
			Возврат СтрокаДанныхЯчеек.Строка;
		Иначе
			Возврат СтрокаДанныхЯчеек.Колонка;
		КонецЕсли;
		
	Иначе
		
		Если СтрокаДанныхЯчеек.Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Возврат СтрокаДанныхЯчеек.Строка;
		ИначеЕсли СтрокаДанныхЯчеек.Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Возврат СтрокаДанныхЯчеек.Колонка;
		КонецЕсли;
		
		Если СтрокаДанныхЯчеек.Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			Возврат СтрокаДанныхЯчеек.Строка;
		ИначеЕсли СтрокаДанныхЯчеек.Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			Возврат СтрокаДанныхЯчеек.Колонка;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВЫРАЗИТЬ(&Строка КАК Справочник.ЭлементыФинансовыхОтчетов).Владелец КАК ВидБюджета,
		                      |	&Строка КАК Строка,
		                      |	&Колонка КАК Колонка
		                      |ПОМЕСТИТЬ Фильтр
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	ВидБюджета,
		                      |	Строка,
		                      |	Колонка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ
		                      |	ЭлементыФинансовыхОтчетовЭлементыТаблицы.Элемент,
		                      |	ЭлементыФинансовыхОтчетов.НаименованиеДляПечати
		                      |ИЗ
		                      |	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.ЭлементыТаблицы КАК ЭлементыФинансовыхОтчетовЭлементыТаблицы
		                      |		ПО ЭлементыФинансовыхОтчетов.Ссылка = ЭлементыФинансовыхОтчетовЭлементыТаблицы.Ссылка
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		                      |		ПО ЭлементыФинансовыхОтчетов.Владелец = Фильтр.ВидБюджета
		                      |			И (ЭлементыФинансовыхОтчетовЭлементыТаблицы.Строка = Фильтр.Строка)
		                      |			И (ЭлементыФинансовыхОтчетовЭлементыТаблицы.Колонка = Фильтр.Колонка)");
		
		Запрос.УстановитьПараметр("Строка", СтрокаДанныхЯчеек.Строка);
		Запрос.УстановитьПараметр("Колонка", СтрокаДанныхЯчеек.Колонка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Элемент;
	КонецЕсли;
	
КонецФункции

Функция ИмяПроизводногоПоказателя(СтрокаДанныхЯчеек, ПараметрыЯчеек)
	
	Элемент = ЭлементОпределяющийЗначениеСтроки(СтрокаДанныхЯчеек, ПараметрыЯчеек, 
									Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	Возврат Элемент.НаименованиеДляПечати;
	
КонецФункции

#КонецОбласти

#КонецЕсли

