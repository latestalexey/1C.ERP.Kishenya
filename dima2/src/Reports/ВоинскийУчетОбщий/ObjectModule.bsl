#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	ИнициализироватьОтчет();

	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();				   

	ДокументРезультат.Очистить();
	
	КлючВарианта = ЗарплатаКадрыОтчеты.КлючВарианта(КомпоновщикНастроек);
	Если КлючВарианта = "СписокГражданПодлежащихПостановкеНаВоинскийУчет" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокГражданПодлежащихПостановкеНаВоинскийУчет";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетСписокГражданПодлежащихПостановкеНаВоинскийУчет(ДокументРезультат, ДанныеОтчета, ДатаОтчета);
		
	ИначеЕсли КлючВарианта = "СписокЮношей15_16Лет" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокЮношей15_16Лет";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ПараметрДатаРожденияНачало = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРожденияНачало"));	
		
		Если ПараметрДатаРожденияНачало <> Неопределено Тогда
			ПараметрДатаРожденияНачало.Значение = КонецДня(ДобавитьМесяц(ДатаОтчета, -17*12));
			ПараметрДатаРожденияНачало.Использование = Истина;
		КонецЕсли;
		
		ПараметрДатаРожденияКонец = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРожденияКонец"));	
		
		Если ПараметрДатаРожденияКонец <> Неопределено Тогда
			ПараметрДатаРожденияКонец.Значение = КонецДня(ДобавитьМесяц(ДатаОтчета, -15*12));
			ПараметрДатаРожденияКонец.Использование = Истина;
		КонецЕсли;
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетСписокЮношей15_16Лет(ДокументРезультат, ДанныеОтчета, ДатаОтчета);
		
	ИначеЕсли КлючВарианта = "СписокПервоначальнойПостановкиНаВоинскийУчет" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокПервоначальнойПостановкиНаВоинскийУчет";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ГодПостановкиНаУчет = Год(ДатаОтчета);
		
		ПараметрГодПостановкиНаУчет = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ГодПостановкиНаУчет"));
		
		Если ПараметрГодПостановкиНаУчет <> Неопределено Тогда
			
			Если ТипЗнч(ПараметрГодПостановкиНаУчет.Значение) = Тип("Неопределено") Или ПараметрГодПостановкиНаУчет.Значение = 0 Тогда
				ПараметрГодПостановкиНаУчет.Значение = ГодПостановкиНаУчет;
			КонецЕсли;
			
			ГодПостановкиНаУчет = ПараметрГодПостановкиНаУчет.Значение;
			
		КонецЕсли;
		
		НачалоОтчетногоГода = Дата(ГодПостановкиНаУчет, 1, 1);
		
		ПараметрДатаРожденияНачало = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРожденияНачало"));	
		
		Если ПараметрДатаРожденияНачало <> Неопределено Тогда
			ПараметрДатаРожденияНачало.Значение = ДобавитьМесяц(НачалоОтчетногоГода, -17*12);
			ПараметрДатаРожденияНачало.Использование = Истина;
		КонецЕсли;
		
		ПараметрДатаРожденияКонец = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаРожденияКонец"));	
		
		Если ПараметрДатаРожденияКонец <> Неопределено Тогда
			ПараметрДатаРожденияКонец.Значение = КонецГода(ДобавитьМесяц(НачалоОтчетногоГода, -17*12));
			ПараметрДатаРожденияКонец.Использование = Истина;
		КонецЕсли;
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетСписокПервоначальнойПостановкиНаВоинскийУчет(ДокументРезультат, ДанныеОтчета, ДатаОтчета, НачалоОтчетногоГода);
		
	ИначеЕсли КлючВарианта = "СписокДляСверкиСВоенкоматом" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписокДляСверкиСВоенкоматом";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета);
		
		ДанныеОтчета = Новый ДеревоЗначений;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетСписокДляСверкиСВоенкоматом(ДокументРезультат, ДанныеОтчета, ДатаОтчета);
	ИначеЕсли КлючВарианта = "ИзвещениеОПриемеУвольнении" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИзвещениеОПриемеУвольнении";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета);
		
		ДанныеОтчета = Новый ТаблицаЗначений;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ВывестиМакетИзвещениеОПриемеУвольнении(ДокументРезультат, ДанныеОтчета, ДатаОтчета);
		
	ИначеЕсли КлючВарианта = "ПринятыеУволенныеВоеннообязанные" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятыеУволенныеВоеннообязанные";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	ИначеЕсли КлючВарианта = "ПринятыеУволенныеПризывники" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПринятыеУволенныеПризывники";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	ИначеЕсли КлючВарианта = "АнализКарточекВоинскогоУчета" Тогда
		
		// Параметры документа
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнализКарточекВоинскогоУчета";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		ДатаОтчета = '00010101';
		
		УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
		
		// Создадим и инициализируем процессор компоновки.
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		// Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету СписокГражданПодлежащихПостановкеНаВоинскийУчет.

Процедура ВывестиМакетСписокГражданПодлежащихПостановкеНаВоинскийУчет(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	Макет 		  = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокГражданПодлежащихПостановкеНаВоинскийУчет");
	Заголовок 	  = Макет.ПолучитьОбласть("Заголовок");
	Шапка 		  = Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 		  = Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация);
		
		ЗаполнитьЗначенияСвойств(Заголовок.Параметры, ПараметрыЗаголовка);
		ЗаполнитьЗначенияСвойств(Подвал.Параметры, ПараметрыЗаголовка);
		
		ДокументРезультат.Вывести(Заголовок);
		ДокументРезультат.Вывести(Шапка);
		
		КоличествоСтрок = ДанныеОрганизации.Строки.Количество();
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, ТекСтрока);
			СтрокаТаблицы.Параметры.ДатаМестоРождения = Формат(ТекСтрока.ДатаРождения, "ДЛФ=Д") + ?(ЗначениеЗаполнено(ТекСтрока.МестоРождения), ", " + ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ТекСтрока.МестоРождения), "");
			ДокументРезультат.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету СписокЮношейДляОВК.

Процедура ВывестиМакетСписокЮношей15_16Лет(ДокументРезультат, ДанныеОтчета, ДатаОтчета)

	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет 		  = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокЮношей15_16Лет");
	Заголовок 	  = Макет.ПолучитьОбласть("Заголовок");
	Шапка 		  = Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 		  = Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация);
		
		ЗаполнитьЗначенияСвойств(Заголовок.Параметры, ПараметрыЗаголовка);
		ЗаполнитьЗначенияСвойств(Подвал.Параметры, ПараметрыЗаголовка);
		
		ДокументРезультат.Вывести(Заголовок);
		ДокументРезультат.Вывести(Шапка);
		
		КоличествоСтрок = ДанныеОрганизации.Строки.Количество();
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, ТекСтрока);
			ДокументРезультат.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету СписокПервоначальнойПостановкиНаВоинскийУчет.

Процедура ВывестиМакетСписокПервоначальнойПостановкиНаВоинскийУчет(ДокументРезультат, ДанныеОтчета, ДатаОтчета, НачалоОтчетногоГода)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	Макет 		  = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_UK_СписокПервоначальнойПостановкиНаВоинскийУчет");
	Заголовок 	  = Макет.ПолучитьОбласть("Заголовок");
	Шапка 		  = Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 		  = Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация);
		
		ЗаполнитьЗначенияСвойств(Заголовок.Параметры, ПараметрыЗаголовка);
		ЗаполнитьЗначенияСвойств(Подвал.Параметры, ПараметрыЗаголовка);
		
		Заголовок.Параметры.ГодРождения 		= Формат(ДобавитьМесяц(НачалоОтчетногоГода, -17*12), "ДФ=""гггг""");
		
		ДокументРезультат.Вывести(Заголовок);
		ДокументРезультат.Вывести(Шапка);
		
		КоличествоСтрок = ДанныеОрганизации.Строки.Количество();
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, ТекСтрока);
			
			Если ТекСтрока.Старше17 Тогда 
				СтрокаТаблицы.Параметры.ФИОПолные = Строка(СтрокаТаблицы.Параметры.ФИОПолные) + ", " + Формат(ТекСтрока.ДатаРождения, "ДФ=""гггг""") + " " + НСтр("uk = 'р.н.'");
			КонецЕсли;

			ДокументРезультат.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету СписокДляСверкиСВоенкоматом.

Процедура ВывестиМакетСписокДляСверкиСВоенкоматом(ДокументРезультат, ДанныеОтчета, ДатаОтчета)

	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	Макет 		  = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_СписокДляСверкиСВоенкоматом");
	Заголовок 	  = Макет.ПолучитьОбласть("Заголовок");
	Шапка 		  = Макет.ПолучитьОбласть("Шапка");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Подвал 		  = Макет.ПолучитьОбласть("Подвал");
	
	ВыводимыеОбласти = Новый Массив;
	ВыводимыеОбласти.Добавить(СтрокаТаблицы);
	ВыводимыеОбласти.Добавить(Подвал);
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация);
		
		ЗаполнитьЗначенияСвойств(Заголовок.Параметры, ПараметрыЗаголовка);
		ЗаполнитьЗначенияСвойств(Подвал.Параметры, ПараметрыЗаголовка);
		
		ДокументРезультат.Вывести(Заголовок);
		ДокументРезультат.Вывести(Шапка);
		
		КоличествоСтрок = ДанныеОрганизации.Строки.Количество();
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			Если ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке < КоличествоСтрок 
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаТаблицы) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			ИначеЕсли ТекСтрока.СистемныеПоляНомерПоПорядкуВГруппировке = КоличествоСтрок
				И Не ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, ТекСтрока);
			ДокументРезультат.Вывести(СтрокаТаблицы);
			
		КонецЦикла;
		
		ДокументРезультат.Вывести(Подвал);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету КарточкаОповещения.

Процедура ВывестиМакетКарточкаОповещения(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет 	 = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_КарточкаОповещения");
	Карточка = Макет.ПолучитьОбласть("Карточка");
	
	Для Каждого ТекСтрока Из ДанныеОтчета Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Карточка.Параметры, ТекСтрока);
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(Карточка.Параметры.Подразделение) Тогда
			Карточка.Параметры.Подразделение = Карточка.Параметры.Подразделение.ПолноеНаименование();
		КонецЕсли;
		
		ДокументРезультат.Вывести(Карточка);
		
	КонецЦикла;
	
	Если ДанныеОтчета.Количество() = 0 Тогда 
		ДокументРезультат.Вывести(Карточка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету РаспискаПриПриемеДокументов.

Процедура ВывестиМакетРаспискаПриПриемеДокументов(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет 	 = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_РаспискаПриПриемеДокументов");
	Расписка = Макет.ПолучитьОбласть("Расписка");
	
	Для Каждого ТекСтрока Из ДанныеОтчета Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Расписка.Параметры, ТекСтрока);
		
		ДокументРезультат.Вывести(Расписка);
		
	КонецЦикла;
	
	Если ДанныеОтчета.Количество() = 0 Тогда 
		ДокументРезультат.Вывести(Расписка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету КарточкаУчета.

Процедура ВывестиМакетКарточкаУчета(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	Макет 			= УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_КарточкаУчета");
	ОбластьКарточка = Макет.ПолучитьОбласть("Лист1Карточки");
	
	Для Каждого ДанныеОрганизации Из ДанныеОтчета.Строки Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ДанныеОрганизации.Организация);
		
		КодыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОрганизации.Организация,"КодПоОКПО,ИНН,ОГРН,КодОКВЭД,КодОКОПФ,КодОКФС,НаименованиеОКВЭД,НаименованиеОКОПФ,НаименованиеОКФС");
		РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(ДанныеОрганизации.Организация, ДатаОтчета);
		КодыОрганизацииИзРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане,"КодПоОКАТО");
		
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, ПараметрыЗаголовка);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, КодыОрганизации);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, КодыОрганизацииИзРегистрации);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры, ДанныеОрганизации);
		
		ТелефоныПодписантов = ТелефоныПодписантов(ПараметрыЗаголовка);
		
		Если ЗначениеЗаполнено(ПараметрыЗаголовка.Руководитель) Тогда 
			ТелефонРуководителя = ТелефоныПодписантов[ПараметрыЗаголовка.Руководитель];
			Если ЗначениеЗаполнено(ТелефонРуководителя) Тогда 
				Если ЗначениеЗаполнено(ОбластьКарточка.Параметры.ДолжностьРуководителя) Тогда
					ОбластьКарточка.Параметры.ТелефонФакс = ", " + ТелефонРуководителя;
				Иначе
					ОбластьКарточка.Параметры.ТелефонФакс = ТелефонРуководителя;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЗаголовка.ОтветственныйЗаВУР) Тогда 
			ТелефонОтветственногоЗаВУР = ТелефоныПодписантов[ПараметрыЗаголовка.ОтветственныйЗаВУР];
			Если ЗначениеЗаполнено(ТелефонОтветственногоЗаВУР) Тогда 
				ОбластьКарточка.Параметры.ТелефонОтветственногоЗаВУР = ", " + ТелефонОтветственногоЗаВУР;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьКарточка.Параметры.ЕстьЗабронированные = ЗначениеЗаполнено(ДанныеОрганизации.ВсегоВЗапасеЗабронировано);
		
		ДокументРезультат.Вывести(ОбластьКарточка);
			
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирования отчета по макету ИзвещениеОПриемеУвольнении.

Процедура ВывестиМакетИзвещениеОПриемеУвольнении(ДокументРезультат, ДанныеОтчета, ДатаОтчета)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет 	   = УправлениеПечатью.МакетПечатнойФормы("Отчет.ВоинскийУчетОбщий.ПФ_MXL_ИзвещениеОПриемеУвольнении");
	Прием 	   = Макет.ПолучитьОбласть("Прием");
	Увольнение = Макет.ПолучитьОбласть("Увольнение");
	
	Для Каждого ТекСтрока Из ДанныеОтчета Цикл 
		
		ПараметрыЗаголовка = ПараметрыЗаголовкаСтруктура(ДатаОтчета, ТекСтрока.Организация);
	
		Если ТекСтрока.ДатаПриема <= ТекСтрока.ПараметрыДанныхПериод
			И ТекСтрока.ДатаПриема >= ТекСтрока.ПараметрыДанныхНачалоПериода Тогда
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Прием.Параметры, ПараметрыЗаголовка);
			ЗаполнитьЗначенияСвойств(Прием.Параметры, ТекСтрока);
			ДокументРезультат.Вывести(Прием);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ДатаУвольнения) И ТекСтрока.ДатаУвольнения <= ТекСтрока.ПараметрыДанныхПериод 
			И ТекСтрока.ДатаУвольнения >= ТекСтрока.ПараметрыДанныхНачалоПериода Тогда
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Увольнение.Параметры, ПараметрыЗаголовка);
			ЗаполнитьЗначенияСвойств(Увольнение.Параметры, ТекСтрока);
			ДокументРезультат.Вывести(Увольнение);
			
		КонецЕсли;	
			
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции.

Процедура УстановитьДатуОтчета(НастройкиОтчета, ДатаОтчета)
	
	ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		
		УстановитьДатуОтчета = Ложь;
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("Неопределено") Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("Дата")
			И ЗначениеПараметраПериод.Значение = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если ТипЗнч(ЗначениеПараметраПериод.Значение) = Тип("СтандартнаяДатаНачала")
			И Дата(ЗначениеПараметраПериод.Значение) = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если УстановитьДатуОтчета Тогда
			ЗначениеПараметраПериод.Значение = ТекущаяДатаСеанса();
		КонецЕсли; 
		
		ДатаОтчета = Дата(ЗначениеПараметраПериод.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПериодОтчета(НастройкиОтчета, ДатаОтчета)
	
	ЗначениеПараметраПериодОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	
	Если ЗначениеПараметраПериодОтчета <> Неопределено И ЗначениеПараметраПериодОтчета.Значение <> '00010101' Тогда
		
		НачалоПериода = ЗначениеПараметраПериодОтчета.Значение.ДатаНачала;
		КонецПериода  = ЗначениеПараметраПериодОтчета.Значение.ДатаОкончания;
		
		Если НачалоПериода = '00010101' Тогда
			ЗначениеПараметраПериодОтчета.Значение.ДатаНачала = НачалоМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Если КонецПериода = '00010101' Тогда
			ЗначениеПараметраПериодОтчета.Значение.ДатаОкончания  = КонецМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		
		Если ЗначениеПараметраПериод <> Неопределено Тогда
			ЗначениеПараметраПериод.Значение = НачалоДня(ЗначениеПараметраПериодОтчета.Значение.ДатаОкончания);
		КонецЕсли;	
		
		ДатаОтчета = Дата(ЗначениеПараметраПериод.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗаголовкаСтруктура(ДатаОтчета, Организация)
	
	ПараметрыЗаголовка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "Наименование, НаименованиеПолное");
	
	ПолноеНаименованиеОрганизации = ?(ЗначениеЗаполнено(ПараметрыЗаголовка.НаименованиеПолное), ПараметрыЗаголовка.НаименованиеПолное, ПараметрыЗаголовка.Наименование);
	
	ПараметрыЗаголовка.Вставить("ДатаОтчета", ДатаОтчета);
	ПараметрыЗаголовка.Вставить("Организация", Организация);
	ПараметрыЗаголовка.Вставить("ПолноеНаименованиеОрганизации", ПолноеНаименованиеОрганизации);
	ПараметрыЗаголовка.Вставить("ЮрАдресОрганизации", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
	ПараметрыЗаголовка.Вставить("ФактАдресОрганизации", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации));
	ПараметрыЗаголовка.Вставить("ПочтовыйАдресОрганизации", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации));
	
	ЗаполнитьПодписантов(ПараметрыЗаголовка, Организация, ДатаОтчета);
	
	Возврат ПараметрыЗаголовка;
	
КонецФункции

Процедура ЗаполнитьПодписантов(ПараметрыЗаголовка, Организация, ДатаОтчета)
	
	ПараметрыЗаполнения = Новый Структура("Руководитель,РуководительРасшифровкаПодписи,ДолжностьРуководителя,ОтветственныйЗаВУР,ФИОРуководителя,"
		+ "ОтветственныйЗаВУРРасшифровкаПодписи,ДолжностьОтветственногоЗаВУР,ФИООтветственногоЗаВУР");

	КлючиОтветственныхЛиц = "";
	
	НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрРуководитель = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Руководитель"));	
	Если ПараметрРуководитель <> Неопределено И ПараметрРуководитель.Использование Тогда
		Если ЗначениеЗаполнено(ПараметрРуководитель.Значение) Тогда
			ПараметрыЗаполнения.Руководитель = ПараметрРуководитель.Значение;
		КонецЕсли; 
	Иначе
		КлючиОтветственныхЛиц = "Руководитель";
	КонецЕсли;
	
	ПараметрДолжностьРуководителя = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьРуководителя"));	
	Если ПараметрДолжностьРуководителя <> Неопределено И ПараметрДолжностьРуководителя.Использование Тогда
		ПараметрыЗаполнения.ДолжностьРуководителя = ПараметрДолжностьРуководителя.Значение;
	Иначе
		КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "ДолжностьРуководителяСтрокой";
	КонецЕсли;
	
	ПараметрОтветственныйЗаВУР = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтветственныйЗаВУР"));	
	Если ПараметрОтветственныйЗаВУР <> Неопределено И ПараметрОтветственныйЗаВУР.Использование Тогда
		Если ЗначениеЗаполнено(ПараметрОтветственныйЗаВУР.Значение) Тогда
			ПараметрыЗаполнения.ОтветственныйЗаВУР = ПараметрОтветственныйЗаВУР.Значение;
		КонецЕсли; 
	Иначе
		КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "ОтветственныйЗаВУР";
	КонецЕсли;
	
	ПараметрДолжностьОтветственногоЗаВУР = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьОтветственногоЗаВУР"));	
	Если ПараметрДолжностьОтветственногоЗаВУР <> Неопределено И ПараметрДолжностьОтветственногоЗаВУР.Использование Тогда
		ПараметрыЗаполнения.ДолжностьОтветственногоЗаВУР = ПараметрДолжностьОтветственногоЗаВУР.Значение;
	Иначе
		КлючиОтветственныхЛиц = ?(ПустаяСтрока(КлючиОтветственныхЛиц), "", КлючиОтветственныхЛиц + ",") + "ДолжностьОтветственногоЗаВУРСтрокой";
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючиОтветственныхЛиц) Тогда
		
		ОтветственныеЛица = Новый Структура("Организация," + КлючиОтветственныхЛиц, Организация);
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ОтветственныеЛица, ДатаОтчета);
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ОтветственныеЛица);
		Если ОтветственныеЛица.Свойство("ДолжностьРуководителяСтрокой") И ЗначениеЗаполнено(ОтветственныеЛица.ДолжностьРуководителяСтрокой) Тогда
			ПараметрыЗаполнения.ДолжностьРуководителя = ОтветственныеЛица.ДолжностьРуководителяСтрокой;
		КонецЕсли;
		Если ОтветственныеЛица.Свойство("ДолжностьОтветственногоЗаВУРСтрокой") И ЗначениеЗаполнено(ОтветственныеЛица.ДолжностьОтветственногоЗаВУРСтрокой) Тогда
			ПараметрыЗаполнения.ДолжностьОтветственногоЗаВУР = ОтветственныеЛица.ДолжностьОтветственногоЗаВУРСтрокой;
		КонецЕсли; 
		
	КонецЕсли; 
	
	МассивФизЛиц = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.Руководитель) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.Руководитель);
	КонецЕсли; 
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ОтветственныйЗаВУР) Тогда
		МассивФизЛиц.Добавить(ПараметрыЗаполнения.ОтветственныйЗаВУР);
	КонецЕсли; 
	
	Если МассивФизЛиц.Количество() > 0 Тогда
		
		ФИОФизЛиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаОтчета, МассивФизЛиц);
		
		ФИОРуководителя = ФИОФизЛиц[ПараметрыЗаполнения.Руководитель];
		Если ЗначениеЗаполнено(ФИОРуководителя) Тогда
			ПараметрыЗаполнения.РуководительРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИОРуководителя);
			ПараметрыЗаполнения.ФИОРуководителя = ФИОРуководителя.Фамилия + " " + ФИОРуководителя.Имя + " " + ФИОРуководителя.Отчество;
		КонецЕсли; 

		ФИООтветственногоЗаВУР = ФИОФизЛиц[ПараметрыЗаполнения.ОтветственныйЗаВУР];
		Если ЗначениеЗаполнено(ФИООтветственногоЗаВУР) Тогда
			ПараметрыЗаполнения.ОтветственныйЗаВУРРасшифровкаПодписи = ФизическиеЛицаЗарплатаКадры.РасшифровкаПодписи(ФИООтветственногоЗаВУР);
			ПараметрыЗаполнения.ФИООтветственногоЗаВУР = ФИООтветственногоЗаВУР.Фамилия + " " + ФИООтветственногоЗаВУР.Имя + " " + ФИООтветственногоЗаВУР.Отчество;
		КонецЕсли; 

	КонецЕсли; 
	
	Для каждого КлючИЗначение Из ПараметрыЗаполнения Цикл
		ПараметрыЗаголовка.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ТелефоныПодписантов(ПараметрыЗаголовка)
	
	МассивФизическихЛиц = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыЗаголовка.Руководитель) Тогда 
		МассивФизическихЛиц.Добавить(ПараметрыЗаголовка.Руководитель);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗаголовка.ОтветственныйЗаВУР) Тогда 
		МассивФизическихЛиц.Добавить(ПараметрыЗаголовка.ОтветственныйЗаВУР);
	КонецЕсли;
	
	ТелефоныПодписантов = Новый Соответствие;
	Если МассивФизическихЛиц.Количество() = 0 Тогда 
		Возврат ТелефоныПодписантов;
	КонецЕсли;
	
	РабочиеТелефоныПодписантов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивФизическихЛиц,	
		Перечисления.ТипыКонтактнойИнформации.Телефон, 
		Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		
	Для Каждого ДанныеПодписанта Из РабочиеТелефоныПодписантов Цикл 
		ТелефоныПодписантов.Вставить(ДанныеПодписанта.Объект, НСтр("ru='тел';uk='тіл'") + ". " + ДанныеПодписанта.Представление);
	КонецЦикла;
	
	Возврат ТелефоныПодписантов;
	
КонецФункции

#КонецОбласти

#КонецЕсли
