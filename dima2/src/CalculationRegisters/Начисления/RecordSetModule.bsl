#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов)
	ЗаполнитьРеквизитМесяц();
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнение набора записей дублированными начислениями внутренних совместителей и подработок
	Если Не ДополнительныеСвойства.Свойство("ЭтоВременныйНаборЗаписей") Тогда
		РегистрыРасчета.Начисления.ДополнитьНаборЗаписейНачислениямиСовместителейИПодработок(ЭтотОбъект);
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Регистратор = Отбор.Регистратор.Значение;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаписываемыеДвижения.Сотрудник КАК Сотрудник,
		|	ЗаписываемыеДвижения.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТСотрудникиПредыдущиеПериодыРегистратора
		|ИЗ
		|	РегистрРасчета.Начисления КАК ЗаписываемыеДвижения
		|ГДЕ
		|	ЗаписываемыеДвижения.Регистратор = &Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодДействия";
		
	Запрос.Выполнить();
	
	ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнение набора записей дублированными начислениями внутренних совместителей и подработок
	Если ДополнительныеСвойства.Свойство("ЭтоВременныйНаборЗаписей") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.МенеджерВременныхТаблиц;
	
	Регистратор = Отбор.Регистратор.Значение;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаписываемыеДвижения.Сотрудник КАК Сотрудник,
		|	ЗаписываемыеДвижения.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТСотрудникиПериодыРегистратораПредварительно
		|ИЗ
		|	РегистрРасчета.Начисления КАК ЗаписываемыеДвижения
		|ГДЕ
		|	ЕСТЬNULL(ЗаписываемыеДвижения.Регистратор, &Регистратор) = &Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ЗаписываемыеДвижения.Сотрудник, ПредыдущиеДвижения.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ЗаписываемыеДвижения.ПериодДействия, ПредыдущиеДвижения.ПериодДействия) КАК ПериодДействия
		|ПОМЕСТИТЬ ВТСотрудникиПериодыРегистратора
		|ИЗ
		|	ВТСотрудникиПериодыРегистратораПредварительно КАК ЗаписываемыеДвижения
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТСотрудникиПредыдущиеПериодыРегистратора КАК ПредыдущиеДвижения
		|		ПО ЗаписываемыеДвижения.Сотрудник = ПредыдущиеДвижения.Сотрудник
		|			И ЗаписываемыеДвижения.ПериодДействия = ПредыдущиеДвижения.ПериодДействия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыРегистратора.Сотрудник КАК Сотрудник,
		|	ПериодыРегистратора.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТСотрудникиПериодыДействия
		|ИЗ
		|	ВТСотрудникиПериодыРегистратора КАК ПериодыРегистратора
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТНачисленияСЗачетомНормыВремени
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ЗачетНормыВремени
		|	И НЕ Начисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы))
		|	И Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|	НачисленияФактическийПериодДействия.Организация КАК Организация,
		|	НачисленияФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
		|	НачисленияФактическийПериодДействия.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ПериодДействияНачало,
		|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ПериодДействияКонец,
		|	НачисленияФактическийПериодДействия.Сторно,
		|	НачисленияФактическийПериодДействия.ВидРасчета,
		|	НачисленияФактическийПериодДействия.Регистратор
		|ПОМЕСТИТЬ ВТНачисленияФактическийПериодДействия
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			ВидРасчета В
		|					(ВЫБРАТЬ
		|						Начисления.ВидРасчета
		|					ИЗ
		|						ВТНачисленияСЗачетомНормыВремени КАК Начисления)
		|				И (Сотрудник, ПериодДействия) В
		|					(ВЫБРАТЬ
		|						ОсновныеНачисления.Сотрудник,
		|						ОсновныеНачисления.ПериодДействия
		|					ИЗ
		|						ВТСотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК НачисленияФактическийПериодДействия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодДействия";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСторно.Сотрудник КАК Сотрудник,
		|	НачисленияСторно.Организация КАК Организация,
		|	НачисленияСторно.ПериодДействия КАК ПериодДействия,
		|	НачисленияСторно.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияСторно.ПериодДействияНачало КАК ДатаНачала,
		|	НачисленияСторно.ПериодДействияКонец КАК ДатаОкончания,
		|	НачисленияСторно.Регистратор КАК Регистратор,
		|	Начисления.ПериодРегистрации КАК ПериодРегистрацииПогашения,
		|	Начисления.ПериодДействияНачало КАК ДатаНачалаПогашения,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончанияПогашения,
		|	Начисления.Регистратор КАК РегистраторПогашения
		|ИЗ
		|	ВТНачисленияФактическийПериодДействия КАК НачисленияСторно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериодыРегистратора КАК СотрудникиПериодыРегистратора
		|		ПО (СотрудникиПериодыРегистратора.Сотрудник = НачисленияСторно.Сотрудник)
		|			И (СотрудникиПериодыРегистратора.ПериодДействия = НачисленияСторно.ПериодДействия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияФактическийПериодДействия КАК Начисления
		|		ПО НачисленияСторно.Сотрудник = Начисления.Сотрудник
		|			И (НЕ Начисления.Сторно)
		|			И НачисленияСторно.ПериодРегистрации <= Начисления.ПериодРегистрации
		|			И НачисленияСторно.ПериодДействия = Начисления.ПериодДействия
		|			И НачисленияСторно.ПериодДействияНачало < Начисления.ПериодДействияКонец
		|			И НачисленияСторно.ПериодДействияКонец > Начисления.ПериодДействияНачало
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ПериодДействия";
	
	РассчитатьПериодыДоначислений(Запрос.Выполнить().Выбрать());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьРеквизитМесяц() Экспорт
	Для Каждого СтрокаНабора Из ЭтотОбъект Цикл
		СтрокаНабора.Месяц = СтрокаНабора.ПериодДействия;		
	КонецЦикла;		
КонецПроцедуры

Процедура РассчитатьПериодыДоначислений(Выборка)
	
	ТекущийСотрудник = Неопределено;
	ТекущийПериодДействия = Неопределено;
	ОрганизацияТекущегоСотрудника = Неопределено;
	
	ПериодыДействия = Новый ТаблицаЗначений;
	ПериодыДействия.Колонки.Добавить("ПериодРегистрации");
	ПериодыДействия.Колонки.Добавить("Погашение");
	ПериодыДействия.Колонки.Добавить("ДатаНачала");
	ПериодыДействия.Колонки.Добавить("ДатаОкончания");
	ПериодыДействия.Колонки.Добавить("Регистратор");
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Сотрудник <> ТекущийСотрудник 
			Или Выборка.ПериодДействия <> ТекущийПериодДействия 
			Или Выборка.Организация <> ОрганизацияТекущегоСотрудника Тогда
			
			Если ТекущийСотрудник <> Неопределено Тогда 
				ЗарегистрироватьДоначисленияПерерасчеты(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия);
			КонецЕсли;
			
			ТекущийСотрудник = Выборка.Сотрудник;
			ТекущийПериодДействия = Выборка.ПериодДействия;
			ОрганизацияТекущегоСотрудника = Выборка.Организация;
			
		КонецЕсли;
		
		Период = ПериодыДействия.Добавить();
		Период.Погашение 			= Ложь;
		Период.ПериодРегистрации 	= Выборка.ПериодРегистрации;
		Период.ДатаНачала 			= Выборка.ДатаНачала;
		Период.ДатаОкончания 		= Выборка.ДатаОкончания;
		Период.Регистратор 			= Выборка.Регистратор;
		
		Если Выборка.ДатаНачалаПогашения <> Null Тогда
			
			Период = ПериодыДействия.Добавить();
			Период.Погашение 			= Истина;
			Период.ПериодРегистрации 	= Выборка.ПериодРегистрацииПогашения;
			Период.ДатаНачала 			= Выборка.ДатаНачалаПогашения;
			Период.ДатаОкончания 		= Выборка.ДатаОкончанияПогашения;
			Период.Регистратор 			= Выборка.РегистраторПогашения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийСотрудник <> Неопределено Тогда
		ЗарегистрироватьДоначисленияПерерасчеты(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьДоначисленияПерерасчеты(ПериодыДействия, ТекущийСотрудник, ОрганизацияТекущегоСотрудника, ТекущийПериодДействия)
	
	ПериодыДоначисления = Новый ТаблицаЗначений;
	ПериодыДоначисления.Колонки.Добавить("Регистратор");
	ПериодыДоначисления.Колонки.Добавить("РегистраторПредставление");
	ПериодыДоначисления.Колонки.Добавить("ВидРасчета");
	ПериодыДоначисления.Колонки.Добавить("ДатаНачала");
	ПериодыДоначисления.Колонки.Добавить("ДатаОкончания");
	
	ПериодыДействия.Сортировать("ПериодРегистрации, Погашение");
	Для Каждого Период Из ПериодыДействия Цикл
		
		Если Период.Погашение Тогда
			УдалитьПериод(ПериодыДоначисления, Период.ДатаНачала, Период.ДатаОкончания);
		Иначе
			ДобавитьПериод(ПериодыДоначисления, Период.ДатаНачала, Период.ДатаОкончания, Период.Регистратор);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.ПерерасчетЗарплаты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(ТекущийСотрудник);
	НаборЗаписей.Отбор.ПериодДействия.Установить(ТекущийПериодДействия);
	НаборЗаписей.Отбор.Организация.Установить(ОрганизацияТекущегоСотрудника);
	НаборЗаписей.Отбор.Доначисление.Установить(Истина);
	
	Для Каждого Период Из ПериодыДоначисления Цикл
		Строка = НаборЗаписей.Добавить();
		Строка.Организация		= ОрганизацияТекущегоСотрудника;
		Строка.Сотрудник		= ТекущийСотрудник;
		Строка.ФизическоеЛицо	= ТекущийСотрудник.ФизическоеЛицо;
		Строка.ПериодДействия	= ТекущийПериодДействия;
		Строка.ДокументОснование= Период.Регистратор;
		Строка.Доначисление		= Истина;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	ПериодыДействия.Очистить();
	
КонецПроцедуры

Процедура ДобавитьПериод(Периоды, Начало, Окончание, Регистратор)
	
	НоваяСтрока = Периоды.Добавить();
	НоваяСтрока.Регистратор = Регистратор;
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	// обработаем полученные периоды
	Периоды.Сортировать("ДатаНачала");
	ПрошлаяДатаНачала = '0001-01-01';
	ПрошлаяДатаОкончания = '0001-01-01';
	ПрошлыйРегистратор = Неопределено;
	ПрошлаяСтрока = Неопределено;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПериода Из Периоды Цикл
		
		Если СтрокаПериода.ДатаНачала <= ПрошлаяДатаОкончания + 1 Тогда
			//склеим периоды
			СтрокаПериода.ДатаНачала = Мин(СтрокаПериода.ДатаНачала, ПрошлаяДатаНачала);
			СтрокаПериода.ДатаОкончания = Макс(СтрокаПериода.ДатаОкончания, ПрошлаяДатаОкончания);
			СтрокиКУдалению.Добавить(ПрошлаяСтрока);
		КонецЕсли;
		
		ПрошлаяДатаНачала = СтрокаПериода.ДатаНачала;
		ПрошлаяДатаОкончания = СтрокаПериода.ДатаОкончания;
		ПрошлыйРегистратор = СтрокаПериода.Регистратор;
		ПрошлаяСтрока = СтрокаПериода;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Периоды.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПериод(ПериодыДоначисления, ДатаНачала, ДатаОкончания)
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого СтрокаПериода Из ПериодыДоначисления Цикл
		
		Если ДатаНачала <= СтрокаПериода.ДатаНачала 
			И ДатаОкончания > СтрокаПериода.ДатаНачала 
			И ДатаОкончания < СтрокаПериода.ДатаОкончания Тогда
			
			СтрокаПериода.ДатаНачала = ДатаОкончания + 1;
			
		ИначеЕсли ДатаНачала > СтрокаПериода.ДатаНачала 
			И ДатаНачала < СтрокаПериода.ДатаОкончания 
			И ДатаОкончания >= СтрокаПериода.ДатаОкончания Тогда 
			
			СтрокаПериода.ДатаОкончания = ДатаНачала - 1;
			
		ИначеЕсли ДатаНачала > СтрокаПериода.ДатаНачала
			И ДатаОкончания < СтрокаПериода.ДатаОкончания Тогда
			
			// добавим новый период
			НоваяСтрока = ПериодыДоначисления.Добавить();
			НоваяСтрока.ДатаНачала = ДатаОкончания + 1;
			НоваяСтрока.ДатаОкончания = СтрокаПериода.ДатаОкончания;
			
			// сокартим прежний            
			СтрокаПериода.ДатаОкончания = ДатаНачала - 1;
			
		ИначеЕсли ДатаНачала <= СтрокаПериода.ДатаНачала 
			И ДатаОкончания >= СтрокаПериода.ДатаОкончания Тогда
			
			СтрокиКУдалению.Добавить(СтрокаПериода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ПериодыДоначисления.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли