#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура устанавливает длительность переданной задачи.
//
// Параметры:
//  Задача  - ЗадачаОбъект.БюджетнаяЗадача - задача, которой ставим срок.
//  ЭтапПодготовкиБюджетов  - Справочник.ЭтапыПодготовкиБюджетов - шаг процесса на основании которого заполняем срок исполнения.
//
Процедура УстановитьДлительностьЗадачи(Задача, ЭтапПодготовкиБюджетов) Экспорт
	
	ДлительностьЭтапа = 1;
	Если ЗначениеЗаполнено(ЭтапПодготовкиБюджетов.Длительность) Тогда
		ДлительностьЭтапа = ЭтапПодготовкиБюджетов.Длительность;
	КонецЕсли;
	
	ДатаЗадачи = Задача.Дата;
	
	Если ЭтапПодготовкиБюджетов.ТипДлительности = Перечисления.ТипыСроковЭтаповПодготовкиБюджетов.ВКалендарныхДнях Тогда
		Задача.СрокИсполнения = КонецДня(ДатаЗадачи + (ДлительностьЭтапа - 1) * 86400);
	Иначе
		График = Константы.ОсновнойКалендарьПредприятия.Получить();
		Задача.СрокИсполнения = КонецДня(КалендарныеГрафики.ПолучитьДатуПоКалендарю(График, ДатаЗадачи, ДлительностьЭтапа - 1));
	КонецЕсли;
	
КонецПроцедуры

// Формирует бюджетные задачи на основании расписания бюджетного процесса.
//
Процедура ФормированиеБюджетныхЗадач(МодельБюджетирования = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	МоделиБюджетирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МоделиБюджетирования КАК МоделиБюджетирования
		|ГДЕ
		|	НЕ МоделиБюджетирования.ЭтоГруппа
		|	И НЕ МоделиБюджетирования.ПометкаУдаления
		|	И МоделиБюджетирования.Статус = &СтатусДействует");
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.СтатусыМоделейБюджетирования.Действует);
	Если МодельБюджетирования <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", МодельБюджетирования);
	КонецЕсли;
	ВыборкаМоделейБюджетирования = Запрос.Выполнить().Выбрать();
	Пока ВыборкаМоделейБюджетирования.Следующий() Цикл
		СформироватьБюджетныеЗадачиПоМодели(ВыборкаМоделейБюджетирования.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Формирует оповещения по бюджетным задачам.
//
Процедура ФормированиеОповещенийПоБюджетнымЗадачам() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОповещенияДляЗадачБюджетирования") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьОповещенияПоБюджетнымЗадачам();
	
КонецПроцедуры

// Формирует дерево подчиненных задач по реквизиту "основная задача".
//
// Параметры:
//  Задача - ЗадачаСсылка.БюджетнаяЗадача - задача, для которой определяются подчиненные задачи.
//
Функция ПолучитьДеревоПодчиненныхЗадач(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Компановка = Отчеты.ВыполнениеЗадачБюджетногоПроцесса.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Вариант = Компановка.ВариантыНастроек.Найти("СвязанныеЗадачи");
	
	КомпановщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпановщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Компановка));
	КомпановщикНастроек.ЗагрузитьНастройки(Вариант.Настройки);
	
	Отбор = КомпановщикНастроек.Настройки.Отбор;
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.ПравоеЗначение = Задача;
	
	НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Задача.ОсновнаяЗадача");
	НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	НовыйОтбор.Использование = Истина;
	
	НастройкиКомпоновкиДанных = КомпановщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Компановка, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);
	ПроцессорКомпоновки.Сбросить();
	
	Результат = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу утверждаемых документов по шагам процесса.
//
// Параметры:
//  Действие - ПеречислениеСсылка.ТипыДействийШаговБюджетныхПроцессов - действие.
//  НастройкаДействия - ТаблицаЗначений - таблица действий.
//  Период - Дата - период действия задачи.
//
Функция УтверждаемыеДокументыПоШагуПроцесса(Действие, НастройкаДействия, Период) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("ЭтапПодготовкиБюджетов");
	
	Если Действие <> Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкаДействия <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Имя", "УтверждаемыеЭтапыПодготовкиБюджетов");
		НайденныеСтроки = НастройкаДействия.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() Тогда
			УтверждаемыеШагиПроцесса = НайденныеСтроки[0].Значение;
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
			                      |	БюджетнаяЗадачаСписокДокументов.Документ КАК Документ,
			                      |	БюджетнаяЗадача.ЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов
			                      |ИЗ
			                      |	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
			                      |		ЛЕВОЕ СОЕДИНЕНИЕ Задача.БюджетнаяЗадача.СписокДокументов КАК БюджетнаяЗадачаСписокДокументов
			                      |		ПО БюджетнаяЗадачаСписокДокументов.Ссылка = БюджетнаяЗадача.Ссылка
			                      |ГДЕ
			                      |	БюджетнаяЗадача.ЭтапПодготовкиБюджетов В(&УтверждаемыеШагиПроцесса)
			                      |	И БюджетнаяЗадача.Период = &Период
			                      |	И НЕ БюджетнаяЗадача.ПометкаУдаления
			                      |	И БюджетнаяЗадача.Выполнена
			                      |	И НЕ БюджетнаяЗадачаСписокДокументов.Документ ЕСТЬ NULL ");
			Запрос.УстановитьПараметр("УтверждаемыеШагиПроцесса", УтверждаемыеШагиПроцесса);
			Запрос.УстановитьПараметр("Период", Период);
			Результат = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет необходимость создания нового документа.
// 
// Параметры:
//  Документ - Текущий документ из списка документов бюджетной задачи или "Неопределено".
//  Действие - ПеречислениеСсылка.ТипыДействийЭтаповПодготовкиБюджетов.
//  ДобавитьВСписок - Признак использования списка документов в "Бюджетной задаче".
//
// Возвращаемое значение:
//  Истина - Если необходимо создать новый документ.
//  Ложь   - Если нет необходимости создавать новый документ.
//
Функция НеобходимоСозданиеНовогоДокумента(Документ, Действие, ДобавитьВСписок) Экспорт
	
	Результат = Ложь;

	ДействияБезСозданияДокумента = Новый Массив;
	ДействияБезСозданияДокумента.Добавить(Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.Прочее);
	ДействияБезСозданияДокумента.Добавить(Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УтверждениеБюджетов);
	
	Если Не ЗначениеЗаполнено(Документ) И ДействияБезСозданияДокумента.Найти(Действие) = Неопределено 
		ИЛИ ДобавитьВСписок Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает документ "ЭкземплярБюджета" в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа.
//                                         Период, МодельБюджетирования, ЭтапПодготовкиБюджетов.
// 	НастройкиДействия        - ТаблицаЗначений - настройки создания документа.
//
Функция СоздатьЭкземплярБюджета(ПараметрыНовогодокумента, НастройкаДействия, Проводить = Ложь, НеПроверятьСуществующиеДокументы = Ложь) Экспорт
	
	ПериодДокумента = ПараметрыНовогодокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Реквизиты = Новый Структура("Периодичность, ВыполнятьАвтоматически", "Родитель.Периодичность");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыНовогодокумента.ЭтапПодготовкиБюджетов, Реквизиты);
	Периодичность = Реквизиты.Периодичность;
	ВыполнятьАвтоматически = Реквизиты.ВыполнятьАвтоматически;
	
	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
	КонецПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
	
	ВидБюджета = Неопределено;
	СтрокаВидаБюджета = НастройкаДействия.НайтиСтроки(Новый Структура("Имя", "ВидБюджета"));
	Если СтрокаВидаБюджета.Количество() Тогда
		ВидБюджета = СтрокаВидаБюджета[0].Значение;
	КонецЕсли;
	Если ВидБюджета = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках действия не определен вид бюджета для создания документа.';uk='У настройках дії не визначений вид бюджету для створення документа.'"));
		Возврат Неопределено;
	КонецЕсли;
	Если Не Справочники.ВидыБюджетов.ВидБюджетаЗаполненПравильно(ВидБюджета) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура();
	Для Каждого Настройка Из НастройкаДействия Цикл
		Если ЗначениеЗаполнено(Настройка.Значение) Тогда
			ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияЗаполнения.Вставить("НачалоПериода",		НачалоПериода);
	ЗначенияЗаполнения.Вставить("ОкончаниеПериода",		КонецПериода);
	ЗначенияЗаполнения.Вставить("МодельБюджетирования",	ПараметрыНовогодокумента.МодельБюджетирования);
	ЗначенияЗаполнения.Вставить("ВидБюджета",			ВидБюджета);
	
	МассивДокументы = Неопределено;
	Если Не НеПроверятьСуществующиеДокументы Тогда
		МассивДокументы = НайтиДокументПоЗначениямЗаполнения("ЭкземплярБюджета", ЗначенияЗаполнения);
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	Если МассивДокументы = Неопределено Тогда
		ЭкземплярБюджета = Документы.ЭкземплярБюджета.СоздатьДокумент();
		ЭкземплярБюджета.Заполнить(ЗначенияЗаполнения);
		ЭкземплярБюджета.Дата = ТекущаяДатаСеанса();
		МассивОбъектов.Добавить(ЭкземплярБюджета);
	Иначе
		Для Каждого Документ из МассивДокументы Цикл
			ЭкземплярБюджета = Документ.ПолучитьОбъект();
			МассивОбъектов.Добавить(ЭкземплярБюджета);
		КонецЦикла;
	КонецЕсли;
	
	МассивДокументы = Новый Массив;
	Для Каждого ЭкземплярБюджета из МассивОбъектов Цикл
		
		//Заполняется документ только на автоматическом этапе или новый документ
		Если Документ = Неопределено ИЛИ ВыполнятьАвтоматически Тогда
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			Документы.ЭкземплярБюджета.ЗаполнитьБюджетПоДаннымИнформационнойБазы(ЭкземплярБюджета, АдресХранилища);
		КонецЕсли;
		
		ЭкземплярБюджета.Записать();
		Если Проводить Тогда
			ЭкземплярБюджета.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		МассивДокументы.Добавить(ЭкземплярБюджета.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивДокументы;
	
КонецФункции

// Создает документ "ЛимитыРасходаДенежныхСредств" в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа.
//                                         Период, МодельБюджетирования.
// 	НастройкиДействия        - ТаблицаЗначений - настройки создания документа.
//
Функция СоздатьЛимитыРасходаДенежныхСредств(ПараметрыНовогодокумента, НастройкаДействия) Экспорт
	
	ПериодДокумента = ПараметрыНовогодокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура();
	Для Каждого Настройка из НастройкаДействия Цикл
		Если ЗначениеЗаполнено(Настройка.Значение) Тогда
			ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияЗаполнения.Вставить("Период", НачалоМесяца(ПериодДокумента));
	
	ЛимитыРасходаДенежныхСредств = Документы.ЛимитыРасходаДенежныхСредств.СоздатьДокумент();
	ЛимитыРасходаДенежныхСредств.Заполнить(ЗначенияЗаполнения);
	ЛимитыРасходаДенежныхСредств.ЗаполнитьПоДаннымБюджетирования(ПараметрыНовогодокумента.МодельБюджетирования);
	
	ЛимитыРасходаДенежныхСредств.Дата = ТекущаяДатаСеанса();
	ЛимитыРасходаДенежныхСредств.Записать();
	
	Возврат ЛимитыРасходаДенежныхСредств.Ссылка;
	
КонецФункции

// Создает документ ввода плана по типу в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа.
//                                         Период.
// 	НастройкиДействия        - ТаблицаЗначений - настройки создания документа.
//
Функция СоздатьПлан(ПараметрыНовогоДокумента, НастройкаДействия) Экспорт
	
	ПериодДокумента = ПараметрыНовогодокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура();
	Для Каждого Настройка из НастройкаДействия Цикл
		Если ЗначениеЗаполнено(Настройка.Значение) Тогда
			ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
		КонецЕсли;
	КонецЦикла; 
	
	ТипПлана = Неопределено;
	Сценарий = Неопределено;
	ВидПлана = Неопределено;
	Если Не ЗначенияЗаполнения.Свойство("ТипПлана", ТипПлана) Или Не ЗначениеЗаполнено(ТипПлана) Тогда
		ВызватьИсключение НСтр("ru='В настройках действия не определен Тип плана.';uk='У настройках дії не визначений Тип плану.'");
	ИначеЕсли Не ЗначенияЗаполнения.Свойство("Сценарий", Сценарий) Или Не ЗначениеЗаполнено(Сценарий) Тогда
		ВызватьИсключение НСтр("ru='В настройках действия не определен Сценарий планирования.';uk='У настройках дії не визначений Сценарій планування.'");
	ИначеЕсли Не ЗначенияЗаполнения.Свойство("ВидПлана", ВидПлана) Или Не ЗначениеЗаполнено(ВидПлана) Тогда
		ВызватьИсключение НСтр("ru='В настройках действия не определен Вид плана.';uk='У настройках дії не визначений Вид плану.'");
	КонецЕсли;
	
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "Периодичность");
	СценарийБюджетирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сценарий, "СценарийБюджетирования");
	НачалоПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуНачалаБлижайшегоПериода(ПериодДокумента, Периодичность);
	ОкончаниеПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(НачалоПериода, Периодичность, 1);
	ЗначенияЗаполнения.Вставить("СценарийБюджетирования", СценарийБюджетирования);
	ЗначенияЗаполнения.Вставить("Периодичность", Периодичность);
	ЗначенияЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ЗначенияЗаполнения.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	ЗначенияЗаполнения.Вставить("ОтражаетсяВБюджетировании", Истина);
	
	План = Документы[ОбщегоНазначения.ИмяЗначенияПеречисления(ТипПлана)].СоздатьДокумент();
	План.Заполнить(ЗначенияЗаполнения);
	План.Дата = ТекущаяДатаСеанса();
	План.Записать();
	
	Возврат План.Ссылка;
	
КонецФункции

// Создает документ "УстановкаЗначенийНефинансовыхПоказателей" в соотвествии с настройками действия.
//
// Параметры:
//  ПараметрыНовогодокумента - Структура - Параметры для заполнения объекта документа.
//                                         Период, ЭтапПодготовкиБюджетов.
// 	НастройкиДействия        - ТаблицаЗначений - настройки создания документа.
//
Функция СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогодокумента, НастройкаДействия, Проводить = Ложь) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	Для Каждого Настройка Из НастройкаДействия Цикл
		Если ЗначениеЗаполнено(Настройка.Значение) Тогда
			ЗначенияЗаполнения.Вставить(Настройка.Имя, Настройка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПериодДокумента = ПараметрыНовогодокумента.Период;
	Если Не ЗначениеЗаполнено(ПериодДокумента) Тогда
		ПериодДокумента = ТекущаяДатаСеанса();
	КонецЕсли;

	Реквизиты = Новый Структура("Периодичность, ВыполнятьАвтоматически", "Родитель.Периодичность");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыНовогодокумента.ЭтапПодготовкиБюджетов, Реквизиты);
	Периодичность = Реквизиты.Периодичность;
	ВыполнятьАвтоматически = Реквизиты.ВыполнятьАвтоматически;

	НачалоПериода = БюджетированиеКлиентСервер.ДатаНачалаПериода(ПериодДокумента, Периодичность);
	ЗначенияЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	
	Если ЗначенияЗаполнения.Свойство("ШаблонВвода") Тогда
		ТаблицаНФПОпределения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияЗаполнения.ШаблонВвода, "ПоказателиШаблона");
		НФПОпределения = ТаблицаНФПОпределения.Выгрузить()[0].Показатель;
	ИначеЕсли ЗначенияЗаполнения.Свойство("НефинансовыйПоказатель") Тогда
		НФПОпределения = ЗначенияЗаполнения.НефинансовыйПоказатель;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='В настройках действия не определен нефинансовый показатель для создания документа.';uk='У настройках дії не визначений нефінансовий показник для створення документа.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	НуженПериодОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НФПОпределения, "УстанавливатьЗначениеНаКаждыйПериод");
	Если НуженПериодОкончания Тогда
		ОкончаниеПериода = БюджетированиеКлиентСервер.ДатаКонцаПериода(ПериодДокумента, Периодичность);
		ЗначенияЗаполнения.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	КонецЕсли;
	
	Документ = НайтиДокументПоЗначениямЗаполнения("УстановкаЗначенийНефинансовыхПоказателей", ЗначенияЗаполнения);
	Если Документ = Неопределено Тогда
		УстановкаНефинансовыхПоказателей = Документы.УстановкаЗначенийНефинансовыхПоказателей.СоздатьДокумент();
		УстановкаНефинансовыхПоказателей.Заполнить(ЗначенияЗаполнения);
		УстановкаНефинансовыхПоказателей.Дата = ТекущаяДатаСеанса();
	Иначе
		УстановкаНефинансовыхПоказателей = Документ.ПолучитьОбъект();
	КонецЕсли;
	
	//Заполняется документ только на автоматическом этапе или новый документ
	Если Документ = Неопределено ИЛИ ВыполнятьАвтоматически Тогда
		ОбъектИПараметрыРасчета = Новый Структура;
		ОбъектИПараметрыРасчета.Вставить("Объект", УстановкаНефинансовыхПоказателей);
		Документы.УстановкаЗначенийНефинансовыхПоказателей.НастроитьОбъектПередЗаполнением(ОбъектИПараметрыРасчета);
		Если ОбъектИПараметрыРасчета.СтруктураОписанияВвода.Свойство("ПравилаЗаполнения") Тогда
			Документы.УстановкаЗначенийНефинансовыхПоказателей.ЗаполнитьНастроенныйДокумент(ОбъектИПараметрыРасчета, Истина);
			Документы.УстановкаЗначенийНефинансовыхПоказателей.СохранитьТабличнуюЧастьВДокумент(ОбъектИПараметрыРасчета, УстановкаНефинансовыхПоказателей);
		КонецЕсли;
	КонецЕсли;
	
	УстановкаНефинансовыхПоказателей.Записать();
	
	Если Проводить Тогда
		УстановкаНефинансовыхПоказателей.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Возврат УстановкаНефинансовыхПоказателей.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьБюджетныеЗадачиПоМодели(МодельБюджетирования)
	
	ТаблицаЗадач = Справочники.МоделиБюджетирования.ПолучитьБюджетныеЗадачи(МодельБюджетирования, , ТекущаяДата(), Истина, Истина);
	ТаблицаСвязейЗадач = Справочники.МоделиБюджетирования.ПолучитьТаблицуСвязейЗадач(ТаблицаЗадач);
	
	Запрос = Новый Запрос();
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("ТаблицаЗадач", ТаблицаЗадач);
	Запрос.УстановитьПараметр("ТаблицаСвязейЗадач", ТаблицаСвязейЗадач);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ФормироватьЗадачиАвтоматически", 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МодельБюджетирования, "АвтоматическиФормироватьЗадачи"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Табл.НомерЗадачи,
	|	Табл.ЭтапПодготовкиБюджетов,
	|	Табл.ПовторяемыйЭтапПодготовкиБюджетов,
	|	Табл.ПроцессПодготовкиБюджетов,
	|	Табл.Период,
	|	Табл.ЗадачаВыполнена,
	|	Табл.Задача,
	|	ВЫБОР
	|		КОГДА Табл.Задача <> ЗНАЧЕНИЕ(Задача.БюджетнаяЗадача.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗадачаСформирована,
	|	Табл.ДатаНачала,
	|	Табл.ДатаОкончанияФакт
	|ПОМЕСТИТЬ ТаблицаЗадач
	|ИЗ
	|	&ТаблицаЗадач КАК Табл
	|ГДЕ
	|	(&ФормироватьЗадачиАвтоматически = ИСТИНА
	|			ИЛИ Табл.ПроцессПодготовкиБюджетов <> ЗНАЧЕНИЕ(Документ.ПроцессПодготовкиБюджетов.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Табл.Задача,
	|	Табл.ПредыдущаяЗадача
	|ПОМЕСТИТЬ ТаблицаСвязей
	|ИЗ
	|	&ТаблицаСвязейЗадач КАК Табл
	|ГДЕ
	|	Табл.ПредыдущаяЗадача <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ПовторяемыйЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ПроцессПодготовкиБюджетов,
	|	МАКСИМУМ(ТаблицаЗадач.Период) КАК Период
	|ПОМЕСТИТЬ МаксимальныеПериодыВыполненныхЗадач
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|ГДЕ
	|	ТаблицаЗадач.ЗадачаСформирована
	|	И ТаблицаЗадач.ЗадачаВыполнена
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ПовторяемыйЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ПроцессПодготовкиБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗадач.НомерЗадачи,
	|	ТаблицаЗадач.ЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ПовторяемыйЭтапПодготовкиБюджетов,
	|	ТаблицаЗадач.ПроцессПодготовкиБюджетов,
	|	ТаблицаЗадач.Период,
	|	ТаблицаЗадач.ЗадачаВыполнена,
	|	ТаблицаЗадач.Задача,
	|	ТаблицаЗадач.ЗадачаСформирована,
	|	ТаблицаЗадач.ДатаНачала
	|ПОМЕСТИТЬ ПериодыПоследующиеЗаВыполнением
	|ИЗ
	|	ТаблицаЗадач КАК ТаблицаЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеПериодыВыполненныхЗадач КАК МаксимальныеПериодыВыполненныхЗадач
	|		ПО ТаблицаЗадач.ЭтапПодготовкиБюджетов = МаксимальныеПериодыВыполненныхЗадач.ЭтапПодготовкиБюджетов
	|			И ТаблицаЗадач.ПовторяемыйЭтапПодготовкиБюджетов = МаксимальныеПериодыВыполненныхЗадач.ПовторяемыйЭтапПодготовкиБюджетов
	|			И ТаблицаЗадач.ПроцессПодготовкиБюджетов = МаксимальныеПериодыВыполненныхЗадач.ПроцессПодготовкиБюджетов
	|ГДЕ
	|	ТаблицаЗадач.Период > ЕСТЬNULL(МаксимальныеПериодыВыполненныхЗадач.Период, ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПоследующиеЗаВыполнением.НомерЗадачи,
	|	ПериодыПоследующиеЗаВыполнением.Период,
	|	ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетов,
	|	ПериодыПоследующиеЗаВыполнением.ПовторяемыйЭтапПодготовкиБюджетов,
	|	ПериодыПоследующиеЗаВыполнением.ПроцессПодготовкиБюджетов
	|ПОМЕСТИТЬ ЗадачиКФормированию
	|ИЗ
	|	ПериодыПоследующиеЗаВыполнением КАК ПериодыПоследующиеЗаВыполнением
	|ГДЕ
	|	НЕ (ПериодыПоследующиеЗаВыполнением.ЭтапПодготовкиБюджетов, ПериодыПоследующиеЗаВыполнением.ПовторяемыйЭтапПодготовкиБюджетов, ПериодыПоследующиеЗаВыполнением.ПроцессПодготовкиБюджетов) В
	|				(ВЫБРАТЬ
	|					Фильтр.ЭтапПодготовкиБюджетов,
	|					Фильтр.ПовторяемыйЭтапПодготовкиБюджетов,
	|					Фильтр.ПроцессПодготовкиБюджетов
	|				ИЗ
	|					ПериодыПоследующиеЗаВыполнением КАК Фильтр
	|				ГДЕ
	|					Фильтр.ЗадачаСформирована)
	|	И ПериодыПоследующиеЗаВыполнением.ДатаНачала <= &ТекущаяДата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКФормированию.ЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов,
	|	ЗадачиКФормированию.ПовторяемыйЭтапПодготовкиБюджетов,
	|	ЗадачиКФормированию.ПроцессПодготовкиБюджетов,
	|	МИНИМУМ(ЗадачиКФормированию.Период) КАК Период
	|ПОМЕСТИТЬ Фильтр
	|ИЗ
	|	ЗадачиКФормированию КАК ЗадачиКФормированию
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиКФормированию.ЭтапПодготовкиБюджетов,
	|	ЗадачиКФормированию.ПовторяемыйЭтапПодготовкиБюджетов,
	|	ЗадачиКФормированию.ПроцессПодготовкиБюджетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКФормированию.НомерЗадачи
	|ПОМЕСТИТЬ ЗадачиКФормированиюМинимальныйПериод
	|ИЗ
	|	ЗадачиКФормированию КАК ЗадачиКФормированию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
	|		ПО ЗадачиКФормированию.ЭтапПодготовкиБюджетов = Фильтр.ЭтапПодготовкиБюджетов
	|			И ЗадачиКФормированию.ПовторяемыйЭтапПодготовкиБюджетов = Фильтр.ПовторяемыйЭтапПодготовкиБюджетов
	|			И ЗадачиКФормированию.ПроцессПодготовкиБюджетов = Фильтр.ПроцессПодготовкиБюджетов
	|			И ЗадачиКФормированию.Период = Фильтр.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКФормированию.НомерЗадачи,
	|	ТаблицаСвязей.ПредыдущаяЗадача,
	|	ТаблицаЗадач.ДатаОкончанияФакт
	|ПОМЕСТИТЬ НомерПредыдущихЗадач
	|ИЗ
	|	ЗадачиКФормированиюМинимальныйПериод КАК ЗадачиКФормированию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСвязей КАК ТаблицаСвязей
	|		ПО ЗадачиКФормированию.НомерЗадачи = ТаблицаСвязей.Задача
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
	|		ПО (ТаблицаСвязей.ПредыдущаяЗадача = ТаблицаЗадач.НомерЗадачи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомерПредыдущихЗадач.НомерЗадачи,
	|	МАКСИМУМ(ТаблицаЗадач.ДатаОкончанияФакт) КАК ДатаОкончанияФакт
	|ИЗ
	|	НомерПредыдущихЗадач КАК НомерПредыдущихЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗадач КАК ТаблицаЗадач
	|		ПО НомерПредыдущихЗадач.ПредыдущаяЗадача = ТаблицаЗадач.НомерЗадачи
	|
	|СГРУППИРОВАТЬ ПО
	|	НомерПредыдущихЗадач.НомерЗадачи
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(ТаблицаЗадач.ЗадачаВыполнена, ИСТИНА)) = ИСТИНА";
	//пояснение к условию: 
	//МИНИМУМ - на тот случай, если выполнена только одна из задач параллельной группы
	//ИСТИНА в ЕСТЬNULL - на случай, если задача не имеет предыдущих задач
	
	МассивЭтапов = ТаблицаЗадач.ВыгрузитьКолонку("ЭтапПодготовкиБюджетов");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивЭтапов, ТаблицаЗадач.ВыгрузитьКолонку("ПовторяемыйЭтапПодготовкиБюджетов"), Истина);
	МассивЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭтапов);
	
	СоответствиеФлагов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивЭтапов, "ВыполнятьАвтоматически, НастройкаДействия");
	
	МассивПроцессов = ТаблицаЗадач.ВыгрузитьКолонку("ПроцессПодготовкиБюджетов");
	МассивПроцессов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПроцессов);
	ПараметрыДополненияОписания = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивПроцессов, "Ответственный, ДополнениеКОписанию, Дата");
	
	ЕстьАвтоВыполняемыеЗадачи = Ложь;
	НомерЗадачКФормированию = Запрос.Выполнить().Выгрузить();
	Для Каждого ЗадачаКФормированию из НомерЗадачКФормированию Цикл
		СтрокаЗадачи = ТаблицаЗадач.Найти(ЗадачаКФормированию.НомерЗадачи, "НомерЗадачи");
		ЗадачаОбъект = Задачи.БюджетнаяЗадача.СоздатьЗадачу();
		
		ЗадачаОбъект.УстановитьНовыйНомер();
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ТаблицаЗадач", ТаблицаЗадач);
		ЗадачаОбъект.Период = СтрокаЗадачи.Период;
		Если ЗначениеЗаполнено(СтрокаЗадачи.ПовторяемыйЭтапПодготовкиБюджетов) Тогда
			ВыполнятьАвтоматически = СоответствиеФлагов[СтрокаЗадачи.ПовторяемыйЭтапПодготовкиБюджетов].ВыполнятьАвтоматически;
			ЗадачаОбъект.Заполнить(СтрокаЗадачи.ПовторяемыйЭтапПодготовкиБюджетов);
			НастройкаОсновногоЭтапа = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетов].НастройкаДействия.Получить();
			НастройкаЭтапа = СоответствиеФлагов[СтрокаЗадачи.ПовторяемыйЭтапПодготовкиБюджетов].НастройкаДействия.Получить();
			Для Каждого СтрокаОсновногоЭтапа из НастройкаОсновногоЭтапа Цикл
				НайденнаяСтрока = НастройкаЭтапа.Найти(СтрокаОсновногоЭтапа.Имя, "Имя");
				Если НайденнаяСтрока <> Неопределено Тогда
					НайденнаяСтрока.Значение = СтрокаОсновногоЭтапа.Значение;
				КонецЕсли;
			КонецЦикла;
			ЗадачаОбъект.НастройкаДействия = Новый ХранилищеЗначения(НастройкаЭтапа);
		Иначе
			ВыполнятьАвтоматически = СоответствиеФлагов[СтрокаЗадачи.ЭтапПодготовкиБюджетов].ВыполнятьАвтоматически;
			ЗадачаОбъект.Заполнить(СтрокаЗадачи.ЭтапПодготовкиБюджетов);
		КонецЕсли;
		
		ЗадачаОбъект.ЭтапПодготовкиБюджетов = СтрокаЗадачи.ЭтапПодготовкиБюджетов;
		ЗадачаОбъект.ПовторяемыйЭтапПодготовкиБюджетов = СтрокаЗадачи.ПовторяемыйЭтапПодготовкиБюджетов;
		ЗадачаОбъект.ПроцессПодготовкиБюджетов = СтрокаЗадачи.ПроцессПодготовкиБюджетов;
		
		Если ЗначениеЗаполнено(ЗадачаОбъект.ПроцессПодготовкиБюджетов) Тогда
			СтруктураДополнениеКОписанию = ПараметрыДополненияОписания[ЗадачаОбъект.ПроцессПодготовкиБюджетов];
			Если ЗначениеЗаполнено(СтруктураДополнениеКОписанию.ДополнениеКОписанию) Тогда
				Если ЗначениеЗаполнено(ЗадачаОбъект.ОписаниеЗадачи) Тогда
					ПостФикс = ЗадачаОбъект.ОписаниеЗадачи;
				КонецЕсли;
				ЗадачаОбъект.ОписаниеЗадачи = Строка(СтруктураДополнениеКОписанию.Дата) + ", " + СтруктураДополнениеКОписанию.Ответственный + ":" + Символы.ПС;
				ЗадачаОбъект.ОписаниеЗадачи = ЗадачаОбъект.ОписаниеЗадачи + СокрЛП(СтруктураДополнениеКОписанию.ДополнениеКОписанию) + Символы.ПС + Символы.ПС;
				ЗадачаОбъект.ОписаниеЗадачи = ЗадачаОбъект.ОписаниеЗадачи + ПостФикс;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВыполнятьАвтоматически Тогда
			Если Не ЗначениеЗаполнено(ЗадачаКФормированию.ДатаОкончанияФакт) Тогда
				ЗадачаОбъект.Дата = СтрокаЗадачи.ДатаНачала;
			Иначе
				ЗадачаОбъект.Дата = Макс(ЗадачаКФормированию.ДатаОкончанияФакт + 1, СтрокаЗадачи.ДатаНачала);
			КонецЕсли;
			УстановитьДлительностьЗадачи(ЗадачаОбъект, СтрокаЗадачи.ЭтапПодготовкиБюджетов);
		Иначе
			ЗадачаОбъект.Дата = ТекущаяДата();
			ЗадачаОбъект.СрокИсполнения = ТекущаяДата();
		КонецЕсли;
		
		Если Задачи.БюджетнаяЗадача.НеобходимоСозданиеНовогоДокумента(Неопределено, ЗадачаОбъект.Действие, Ложь) Тогда
			
			Если ЗадачаОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводЭкземпляраБюджета Тогда
				ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования, ЭтапПодготовкиБюджетов");
				ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, ЗадачаОбъект);
				МассивДокументы = Задачи.БюджетнаяЗадача.СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, 
																	ЗадачаОбъект.НастройкаДействия.Получить(), Истина);
			ИначеЕсли ЗадачаОбъект.Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
				ПараметрыНовогоДокумента = Новый Структура("Период, ЭтапПодготовкиБюджетов");
				ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, ЗадачаОбъект);
				МассивДокументы = Задачи.БюджетнаяЗадача.СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогоДокумента, 
																						ЗадачаОбъект.НастройкаДействия.Получить());
			КонецЕсли;
			
			Если МассивДокументы <> Неопределено Тогда
				Если ТипЗнч(МассивДокументы) <> Тип("Массив") Тогда
					МассивДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МассивДокументы);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ЗадачаОбъект.СписокДокументов, МассивДокументы, "Документ");
			КонецЕсли;
			
		КонецЕсли;
			
		ЗадачаОбъект.Записать();
		
		Если ВыполнятьАвтоматически Тогда
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("РежимФормированияЗадач");
			ЗадачаОбъект.ВыполнитьЗадачу();
			ЕстьАвтоВыполняемыеЗадачи = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьАвтоВыполняемыеЗадачи Тогда
		СформироватьБюджетныеЗадачиПоМодели(МодельБюджетирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОповещенияПоБюджетнымЗадачам()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	Задача_БюджетнаяЗадача.Ссылка КАК БюджетнаяЗадача,
		|	Задача_БюджетнаяЗадача.СрокИсполнения КАК СрокИсполнения,
		|	ВЫБОР
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения < &ТекущаяДата
		|			ТОГДА &ЗадачаПросрочена
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения = &ТекущаяДата
		|			ТОГДА &ЗадачаПодходитСрок
		|		КОГДА Задача_БюджетнаяЗадача.СрокИсполнения > &ТекущаяДата
		|			ТОГДА &ЗадачаПоступила
		|	КОНЕЦ КАК АктуальноеОповещение
		|ПОМЕСТИТЬ ТекущиеЗадачи
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК Задача_БюджетнаяЗадача
		|ГДЕ
		|	НЕ Задача_БюджетнаяЗадача.ПометкаУдаления
		|	И НЕ Задача_БюджетнаяЗадача.Выполнена
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БюджетнаяЗадача,
		|	АктуальноеОповещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеЗадачи.БюджетнаяЗадача КАК БюджетнаяЗадача,
		|	ТекущиеЗадачи.АктуальноеОповещение,
		|	ВЫБОР
		|		КОГДА ТекущиеЗадачи.АктуальноеОповещение = &ЗадачаПодходитСрок
		|				И ОповещениеОПоступлении.ВидОповещения ЕСТЬ NULL 
		|			ТОГДА &ЗадачаПоступила
		|		ИНАЧЕ ТекущиеЗадачи.АктуальноеОповещение
		|	КОНЕЦ КАК ВидОповещения,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Наименование,
		|	ТекущиеЗадачи.БюджетнаяЗадача.СрокИсполнения,
		|	ТекущиеЗадачи.БюджетнаяЗадача.МодельБюджетирования.ВложениеКОповещениям,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Исполнитель,
		|	ТекущиеЗадачи.БюджетнаяЗадача.Исполнитель.Представление,
		|	ТекущиеЗадачи.БюджетнаяЗадача.ЭтапПодготовкиБюджетов
		|ПОМЕСТИТЬ ОповещенияНаОтправку
		|ИЗ
		|	ТекущиеЗадачи КАК ТекущиеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтправленныеОповещенияПоБюджетнымЗадачам КАК ОповещениеОПоступлении
		|		ПО ТекущиеЗадачи.БюджетнаяЗадача = ОповещениеОПоступлении.БюджетнаяЗадача
		|			И (ОповещениеОПоступлении.ВидОповещения = &ЗадачаПоступила)
		|ГДЕ
		|	НЕ (ТекущиеЗадачи.БюджетнаяЗадача, ТекущиеЗадачи.АктуальноеОповещение) В
		|				(ВЫБРАТЬ
		|					ОтправленныеОповещенияПоБюджетнымЗадачам.БюджетнаяЗадача,
		|					ОтправленныеОповещенияПоБюджетнымЗадачам.ВидОповещения
		|				ИЗ
		|					РегистрСведений.ОтправленныеОповещенияПоБюджетнымЗадачам КАК ОтправленныеОповещенияПоБюджетнымЗадачам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОповещенияНаОтправку.БюджетнаяЗадача,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаНаименование КАК НаименованиеЗадачи,
		|	ОповещенияНаОтправку.АктуальноеОповещение,
		|	ОповещенияНаОтправку.ВидОповещения,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаСрокИсполнения КАК СрокИсполнения,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаМодельБюджетированияВложениеКОповещениям КАК МодельБюджетированияВложение,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаЭтапПодготовкиБюджетов КАК ЭтапПодготовкиБюджетов,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаИсполнитель КАК Исполнитель,
		|	ОповещенияНаОтправку.БюджетнаяЗадачаИсполнительПредставление КАК ИсполнительПредставление,
		|	ПользователиКонтактнаяИнформация.АдресЭП КАК ИсполнительАдресЭП
		|ИЗ
		|	ОповещенияНаОтправку КАК ОповещенияНаОтправку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
		|		ПО ОповещенияНаОтправку.БюджетнаяЗадачаИсполнитель = ПользователиКонтактнаяИнформация.Ссылка
		|			И (ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
		|
		|УПОРЯДОЧИТЬ ПО
		|	СрокИсполнения");
	Запрос.УстановитьПараметр("ТекущаяДата",		НАЧАЛОДНЯ(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ЗадачаПоступила",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПоступила);
	Запрос.УстановитьПараметр("ЗадачаПодходитСрок",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПодходитСрок);
	Запрос.УстановитьПараметр("ЗадачаПросрочена",	Перечисления.ВидыОповещенийБюджетныхЗадач.ЗадачаПросрочена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	Попытка
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Соединение = Новый ИнтернетПочта;
		Соединение.Подключиться(Профиль);
	Исключение
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось установить соединение с почтовым сервером: (%1)';uk='Не вдалося встановити з''єднання з поштовим сервером: (%1)'"),
				ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("БюджетныйПроцесс.ОтправкаОповещения",
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,СообщениеОбОшибке);
		Возврат;
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
				
		СообщениеОбОшибке = Неопределено;
		
		Попытка
			ИдентификаторПисьма = СоздатьИОтправитьПочтовоеСообщениеОповещения(УчетнаяЗапись, Выборка, Соединение);
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если СообщениеОбОшибке = Неопределено Тогда
			МенеджерЗаписи = РегистрыСведений.ОтправленныеОповещенияПоБюджетнымЗадачам.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.БюджетнаяЗадача				= Выборка.БюджетнаяЗадача;
			МенеджерЗаписи.ВидОповещения				= Выборка.АктуальноеОповещение;
			МенеджерЗаписи.ВидОтправленногоОповещения	= Выборка.ВидОповещения;
			МенеджерЗаписи.Записать();
		Иначе
			ЗаписьЖурналаРегистрации("БюджетныйПроцесс.ОтправкаОповещения",
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Подсистемы.БюджетированиеИПланирование,,
					СообщениеОбОшибке,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		КонецЕсли;
		
	КонецЦикла;

		
КонецПроцедуры

Функция СоздатьИОтправитьПочтовоеСообщениеОповещения(УчетнаяЗапись, ЭлементВыборкиНаОтправку, Соединение)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиентСервер =
			ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
		
		РасширениеДляФайловПодписи = МодульЭлектроннаяПодписьКлиентСервер.ПерсональныеНастройки(
			).РасширениеДляФайловПодписи;
	Иначе
		РасширениеДляФайловПодписи = "p7s";
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;
		
	ПараметрыПодстановки = Новый Структура();
	ПараметрыПодстановки.Вставить("БюджетнаяЗадача",				ЭлементВыборкиНаОтправку.БюджетнаяЗадача);
	ПараметрыПодстановки.Вставить("Исполнитель",					ЭлементВыборкиНаОтправку.Исполнитель);
	ПараметрыПодстановки.Вставить("ИсполнительПредставление",		ЭлементВыборкиНаОтправку.ИсполнительПредставление);
	ПараметрыПодстановки.Вставить("НаименованиеЗадачи",				ЭлементВыборкиНаОтправку.НаименованиеЗадачи);	
	ПараметрыПодстановки.Вставить("СрокИсполнения",					ЭлементВыборкиНаОтправку.СрокИсполнения);
	
	ПараметрыПисьма = Перечисления.ВидыОповещенийБюджетныхЗадач.ПолучитьПараметрыПисьмаПоШаблону(ЭлементВыборкиНаОтправку.ВидОповещения, ПараметрыПодстановки);
	
	Адресаты = Новый Массив;
	Адресаты.Добавить(Новый Структура("Адрес, Представление", ЭлементВыборкиНаОтправку.ИсполнительАдресЭП, ЭлементВыборкиНаОтправку.ИсполнительПредставление));
	
	ПараметрыПисьма.Вставить("Кому", Адресаты);
	
	СоотвВложения = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Файлы.Наименование КАК ПолноеНаименование,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ЭлектронныеПодписи.(
		|		НомерСтроки,
		|		Подпись
		|	)
		|ИЗ
		|	Справочник.ЭтапыПодготовкиБюджетовПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ЭтапПодготовкиБюджетов
		|;
		|ВЫБРАТЬ
		|	Файлы.Наименование КАК ПолноеНаименование,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ЭлектронныеПодписи.(
		|		НомерСтроки,
		|		Подпись
		|	)
		|ИЗ
		|	Справочник.МоделиБюджетированияПрисоединенныеФайлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка = &МодельБюджетированияВложение";
	Запрос.УстановитьПараметр("ЭтапПодготовкиБюджетов",			ЭлементВыборкиНаОтправку.ЭтапПодготовкиБюджетов);
	Запрос.УстановитьПараметр("МодельБюджетированияВложение",	ЭлементВыборкиНаОтправку.МодельБюджетированияВложение);

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Для Каждого ПакетЗапроса Из РезультатЗапроса Цикл
		Выборка = ПакетЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИмяФайла = Выборка.ПолноеНаименование + ?(Выборка.Расширение = "", "", "." + Выборка.Расширение);
			СоотвВложения.Вставить(ИмяФайла, ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка));
			Для каждого ЭП Из Выборка.ЭлектронныеПодписи.Выгрузить() Цикл
				СоотвВложения.Вставить(Выборка.ПолноеНаименование + "-DS("+ ЭП.НомерСтроки + ")." +
					РасширениеДляФайловПодписи, ЭП.Подпись.Получить());
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ИмяЯрлыкаИБ = Неопределено;
	Если ПараметрыПисьма.Свойство("ИмяЯрлыкаИБ", ИмяЯрлыкаИБ) Тогда
		ИмяФайлаВложения = ?(НЕ ПустаяСтрока(ИмяЯрлыкаИБ),
			ИмяЯрлыкаИБ, НСтр("ru='Запустить информационную базу';uk='Запустити інформаційну базу'")) + ".v8i";
		СоотвВложения.Вставить(ИмяФайлаВложения, ПолучитьДвоичныеДанныеЯрлыкаИБ());
		ПараметрыПисьма.Удалить("ИмяЯрлыкаИБ");
	КонецЕсли;
	
	ПараметрыПисьма.Вставить("Вложения", СоотвВложения);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма, Соединение);
	
КонецФункции

Функция ПолучитьДвоичныеДанныеЯрлыкаИБ()
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	
	ТекстЯрлыка = "["+?(ПустаяСтрока(ЗаголовокСистемы), СтрокаСоединения, ЗаголовокСистемы)+"]
		|Connect="+СтрокаСоединения+"
		|App=Auto
		|WA=1";

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстЯрлыка);	
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	УдалитьФайлы(ИмяВременногоФайла);

	Возврат Адрес;
	
КонецФункции

Функция ТекущийДокумент(СписокДокументов)
	
	Возврат ?(СписокДокументов.Количество(), СписокДокументов[СписокДокументов.Количество()-1].Документ, Неопределено);
	
КонецФункции

Функция ВыполнитьДействие(Объект, НастройкаДействия, Записывать = Ложь, НеПроверятьСуществующиеДокументы = Ложь) Экспорт
	
	Действие = Объект.Действие;
	Документ = ТекущийДокумент(Объект.СписокДокументов);
	
	ВидимостьСписка = Ложь;
	СтрокаНастроек = НастройкаДействия.Найти("ВидБюджета","Имя");
	Если СтрокаНастроек <> Неопределено Тогда
		ВидБюджета = СтрокаНастроек.Значение;
		ВидимостьСписка = Справочники.ВидыБюджетов.ВидБюджетаСодержитАналитикиШапки(ВидБюджета);
	КонецЕсли;
	
	Если Задачи.БюджетнаяЗадача.НеобходимоСозданиеНовогоДокумента(Документ, Действие, ВидимостьСписка) Тогда
		
		Если Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводЭкземпляраБюджета Тогда
			ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования, ЭтапПодготовкиБюджетов");
			ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
			Если ЗначениеЗаполнено(Объект.ПовторяемыйЭтапПодготовкиБюджетов) Тогда
				ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов = Объект.ПовторяемыйЭтапПодготовкиБюджетов;
			КонецЕсли;
			Документ = Задачи.БюджетнаяЗадача.СоздатьЭкземплярБюджета(ПараметрыНовогоДокумента, НастройкаДействия, , НеПроверятьСуществующиеДокументы);
			
		ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЛимитовРасходаДС Тогда
			ПараметрыНовогоДокумента = Новый Структура("Период, МодельБюджетирования");
			ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
			Документ = Задачи.БюджетнаяЗадача.СоздатьЛимитыРасходаДенежныхСредств(ПараметрыНовогоДокумента, НастройкаДействия);
			
		ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.ВводПлана Тогда
			ПараметрыНовогоДокумента = Новый Структура("Период");
			ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
			Документ = Задачи.БюджетнаяЗадача.СоздатьПлан(ПараметрыНовогоДокумента, НастройкаДействия);
			
		ИначеЕсли Действие = Перечисления.ТипыДействийЭтаповПодготовкиБюджетов.УстановкаЗначенийНефинансовыхПоказателей Тогда
			ПараметрыНовогоДокумента = Новый Структура("Период, ЭтапПодготовкиБюджетов");
			ЗаполнитьЗначенияСвойств(ПараметрыНовогоДокумента, Объект);
			Если ЗначениеЗаполнено(Объект.ПовторяемыйЭтапПодготовкиБюджетов) Тогда
				ПараметрыНовогоДокумента.ЭтапПодготовкиБюджетов = Объект.ПовторяемыйЭтапПодготовкиБюджетов;
			КонецЕсли;
			Документ = Задачи.БюджетнаяЗадача.СоздатьУстановкуЗначенийНефинансовыхПоказателей(ПараметрыНовогоДокумента, НастройкаДействия);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Документ) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Записывать = Истина;
		
		Если ТипЗнч(Документ) = Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.СписокДокументов, Документ, "Документ");
		Иначе
			Объект.СписокДокументов.Добавить().Документ = Документ;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФормыОбъекта = "";
	ПараметрыФормы = Новый Структура();
	Уникальность = Ложь;
	
	Документ = ТекущийДокумент(Объект.СписокДокументов);
	ИмяФормыОбъекта = "Документ." + Документ.Метаданные().Имя + ".ФормаОбъекта";
	ПараметрыФормы.Вставить("Ключ", Документ);
	ПараметрыФормы.Вставить("НФП_ЗаполнитьЗначенияПоУмолчанию", Истина);
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФормы", ИмяФормыОбъекта);
	Результат.Вставить("ПараметрыФормы", ПараметрыФормы);
	Результат.Вставить("Уникальность", Уникальность);
	
	Возврат Результат;
	
КонецФункции

Функция НайтиДокументПоЗначениямЗаполнения(ИмяТаблицы, ЗначенияЗаполнения)
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ Ссылка ИЗ Документ." + ИмяТаблицы + " ГДЕ НЕ ПометкаУдаления ";
	Для Каждого КлючиИЗначение из ЗначенияЗаполнения Цикл
		Значение = КлючиИЗначение.Значение;
		Если КлючиИЗначение.Ключ = "ОкончаниеПериода" Тогда
			Значение = НачалоДня(Значение);
		КонецЕсли;
		Запрос.Параметры.Вставить(КлючиИЗначение.Ключ, Значение);
		ТекстЗапроса = ТекстЗапроса + " И " + КлючиИЗначение.Ключ + " = &" + КлючиИЗначение.Ключ;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Результат.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Доступность = (Пользователи.ЭтоПолноправныйПользователь()
			ИЛИ ПравоДоступа("Редактирование", Метаданные.Задачи.БюджетнаяЗадача));
		
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя                = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(1), 0) КАК КоличествоЗадач
		|{ВЫБРАТЬ
		|	КоличествоЗадач}
		|ИЗ
		|	Задача.БюджетнаяЗадача КАК БюджетнаяЗадача
		|{ГДЕ
		|	БюджетнаяЗадача.ПометкаУдаления,
		|	БюджетнаяЗадача.Выполнена,
		|	БюджетнаяЗадача.Исполнитель.*,
		|	БюджетнаяЗадача.СрокИсполнения}";

	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Ложь;
	НаборДанных.Запрос			= ТекстЗапроса;
	НаборДанных.Имя				= "НаборДанных";
	НаборДанных.ИсточникДанных	= "ИсточникДанных";
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
		
	ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоЗадач");
	
	ГруппировкаКомпоновки = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновки.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	НастройкиПоИсполнителю = ПолучитьНастройкиКомпоновкиДляЗадачПоИсполнителю();
	
	НастройкиКомпоновкиПросрочено = ПолучитьНастройкиКомпоновкиДляПросроченныхЗадач();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиПросрочено.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаСегодня = ПолучитьНастройкиКомпоновкиДляЗадачНаСегодня();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаСегодня.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаНеделю = ПолучитьНастройкиКомпоновкиДляЗадачНаНеделю();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаНеделю.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	НастройкиКомпоновкиНаСледующуюНеделю = ПолучитьНастройкиКомпоновкиДляЗадачНаСледующуюНеделю();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновкиНаСледующуюНеделю.Отбор,
														НастройкиПоИсполнителю.Отбор, Ложь);
	
	ОтборыПоказателей = Новый Структура(
	    "КоличествоПросрочено, КоличествоНаСегодня, КоличествоНаНеделю, КоличествоНаСледующуюНеделю", 
			НастройкиКомпоновкиПросрочено.Отбор,
				НастройкиКомпоновкиНаСегодня.Отбор,
					НастройкиКомпоновкиНаНеделю.Отбор,
						НастройкиКомпоновкиНаСледующуюНеделю.Отбор);
	
	ЧисловыеПоказатели = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ОтборыПоказателей Цикл
		
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор,
															ЭлементСтруктуры.Значение);
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,,
													Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,);
		
		РезультатКомпоновки = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(РезультатКомпоновки);
		
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		ЧисловыеПоказатели.Вставить(ЭлементСтруктуры.Ключ, РезультатКомпоновки[0].КоличествоЗадач);
		
	КонецЦикла;
	
	ЕстьДела = ЧисловыеПоказатели.КоличествоПросрочено > 0 
		ИЛИ ЧисловыеПоказатели.КоличествоНаСегодня > 0 
			ИЛИ ЧисловыеПоказатели.КоличествоНаНеделю > 0 
				ИЛИ ЧисловыеПоказатели.КоличествоНаСледующуюНеделю > 0;
		
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "БюджетныеЗадачи";
	ДелоРодитель.Представление  = НСтр("ru='Бюджетные задачи';uk='Бюджетні задачі'");
	ДелоРодитель.ЕстьДела       = ЕстьДела;
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.БюджетированиеИПланирование;
	
	ИмяФормы = "Задача.БюджетнаяЗадача.Форма.ФормаСпискаМоиЗадачи";
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru='Просроченные задачи';uk='Прострочені задачі'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Мои бюджетные задачи (%1)';uk='Мої бюджетні задачі (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессПросроченныеЗадачи";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоПросрочено > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоПросрочено;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДополнительныеПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиПросрочено, Новый Структура("Заголовок", ЗаголовокФормыСписка), "Просрочено");
										
	Дело.Владелец       = "БюджетныеЗадачи";
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru='На сегодня';uk='На сьогодні'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Мои бюджетные задачи (%1)';uk='Мої бюджетні задачі (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаСегодня";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаСегодня > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДополнительныеПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаСегодня, Новый Структура("Заголовок", ЗаголовокФормыСписка), "НаСегодня");
	Дело.Владелец       = "БюджетныеЗадачи";	
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru='На неделю';uk='На тиждень'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Мои бюджетные задачи (%1)';uk='Мої бюджетні задачі (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаНеделю";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаНеделю > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаНеделю;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДополнительныеПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаНеделю, Новый Структура("Заголовок", ЗаголовокФормыСписка), "НаНеделю");
	Дело.Владелец       = "БюджетныеЗадачи";
	
	Дело = ТекущиеДела.Добавить();
	ПредставлениеДела = НСтр("ru='На следующую неделю';uk='На наступний тиждень'");
	ЗаголовокФормыСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Мои бюджетные задачи (%1)';uk='Мої бюджетні задачі (%1)'"), ПредставлениеДела);
	Дело.Идентификатор  = "БюджетныйПроцессЗадачиНаСледующуюНеделю";
	Дело.ЕстьДела       = ЧисловыеПоказатели.КоличествоНаСледующуюНеделю > 0;
	Дело.Представление  = ПредставлениеДела;
	Дело.Количество     = ЧисловыеПоказатели.КоличествоНаСледующуюНеделю;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ДополнительныеПараметры, КлючНазначенияИспользования",
							НастройкиКомпоновкиНаСледующуюНеделю, Новый Структура("Заголовок", ЗаголовокФормыСписка), "НаСледующуюНеделю");
	Дело.Владелец       = "БюджетныеЗадачи";
	
КонецПроцедуры

// Функция возвращает настройки компоновки данных для отбора задач по исполнителю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачПоИсполнителю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
 	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Выполнена");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
 	ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Исполнитель");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
 	ЭлементОтбора.ПравоеЗначение	= Пользователи.АвторизованныйПользователь();
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора просроченных задач.
Функция ПолучитьНастройкиКомпоновкиДляПросроченныхЗадач()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
 	ЭлементОтбора.ПравоеЗначение	= '00010101';
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Меньше;
 	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаНачала;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на сегодня.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаСегодня()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	
 	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");   
 	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаНачала;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
 	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на неделю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаНеделю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Сегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
			
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
 	ЭлементОтбора.ПравоеЗначение	= Сегодня.ДатаОкончания;
	
 	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");   
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
 	ЭлементОтбора.ПравоеЗначение	= ЭтаНеделя.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

// Функция возвращает настройки компоновки данных для отбора задач на следующую неделю.
Функция ПолучитьНастройкиКомпоновкиДляЗадачНаСледующуюНеделю()
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	ЭтаНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтаНеделя);
	СледующаяНеделя = Новый СтандартныйПериод(ВариантСтандартногоПериода.СледующаяНеделя);
	
	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Больше;
 	ЭлементОтбора.ПравоеЗначение	= ЭтаНеделя.ДатаОкончания;
	
 	ЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СрокИсполнения");
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
 	ЭлементОтбора.ПравоеЗначение	= СледующаяНеделя.ДатаОкончания;
	
	Возврат НастройкиКомпоновки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли