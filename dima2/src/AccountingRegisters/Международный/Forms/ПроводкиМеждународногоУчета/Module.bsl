
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Регистратор") Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие этой формы не предусмотрено!';uk='Безпосереднє відкриття цієї форми не передбачено!'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	УстановитьУсловноеОформление();

	Документ = Параметры.Отбор.Регистратор;
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата");
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РегламентнаяОперацияМеждународныйУчет")
		И Документ.ТипОперации = Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления Тогда
		Элементы.Сумма.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	УстановитьЗаголовкиСумм();
	
	ПолучитьСостояниеОтраженияДокумента();
	ОбновитьДатуЗапретаФормированияПроводок();

	Если РучнаяКорректировкаПроводок
		И СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную
		И НаборЗаписей.Количество() = 0 Тогда
		ЗаполнитьПроводкиАвтоматическиСервер();
	КонецЕсли;
	
	УстановитьВидКоманднойПанелиНабораЗаписей();
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПовторноеОткрытиеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьПредставлениеВидовСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Перем АвтоматическоеОтражение;
	
	Если РучнаяКорректировкаПроводок Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("АвтоматическоеОтражение", АвтоматическоеОтражение) Тогда
		Если НЕ АвтоматическоеОтражение Тогда
			Отказ = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЗадаватьВопросПередЗаписью = Истина;
	Если ПараметрыЗаписи.Свойство("ЗадаватьВопросПередЗаписью") Тогда
		ЗадаватьВопросПередЗаписью = ПараметрыЗаписи.ЗадаватьВопросПередЗаписью;
	КонецЕсли;
	
	Если ЗадаватьВопросПередЗаписью И НаборЗаписей.Количество() > 0 Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросПередЗаписью", ЭтотОбъект, ПараметрыЗаписи);
		ТекстВопроса = НСтр("ru='Проводки будут сформированы автоматически. Продолжить?';uk='Проводки будуть сформовані автоматично. Продовжити?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписыватьПустойНабор", Истина);
	
	Если РучнаяКорректировкаПроводок Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.Загрузить(ОтразитьВМеждународномУчетеАвтоматически());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РучнаяКорректировкаПроводок Тогда
		ЗаписатьСтатусОтраженияВМеждународномУчете();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПолучитьСостояниеОтраженияДокумента();
	ЗаполнитьПредставлениеВидовСубконто();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОбИзмененииОтраженияДокументаВМеждународномУчете();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РучнаяКорректировкаПроводокПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы("РучнаяКорректировкаПроводок");
	
	Если РучнаяКорректировкаПроводок И НаборЗаписей.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru='Заполнить проводки автоматически?';uk='Заповнити проводки автоматично?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросПередАвтоматическимЗаполнениемПроводок", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаборЗаписей

&НаКлиенте
Процедура НаборЗаписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Не РучнаяКорректировкаПроводок Тогда
		Значение = Элемент.ТекущиеДанные[Поле.Имя];
		Если ЗначениеЗаполнено(Значение) 
			И ТипЗнч(Значение) <> Тип("Число") 
			И ТипЗнч(Значение) <> Тип("Дата")
			И ТипЗнч(Значение) <> Тип("Булево") Тогда
			ПоказатьЗначение(, Значение);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаборЗаписейПередНачаломИзменения(Элемент, Отказ)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НаборЗаписей.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПредставлениеВидовСубконто(ТекущиеДанные.СчетДт, "Дт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Счет = Элементы.НаборЗаписей.ТекущиеДанные.СчетКт;
	ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидыДвиженийБухгалтерии.Дебет");
	ОткрытьФормуВыбораСчета(ВидДвижения, Счет, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НаборЗаписей.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПредставлениеВидовСубконто(ТекущиеДанные.СчетКт, "Кт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Счет = Элементы.НаборЗаписей.ТекущиеДанные.СчетДт;
	ВидДвижения = ПредопределенноеЗначение("Перечисление.ВидыДвиженийБухгалтерии.Кредит");
	ОткрытьФормуВыбораСчета(ВидДвижения, Счет, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСчета(ВидДвижения, Счет, Владелец)

	ТекущиеДанные = Элементы.НаборЗаписей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ТекущиеДанные.Организация);
	ПараметрыФормы.Вставить("ВидДвижения", ВидДвижения);
	ПараметрыФормы.Вставить("Счет", Счет);
	ОткрытьФорму("ПланСчетов.Международный.Форма.ФормаВыбораСПодборомСчетов", ПараметрыФормы, Владелец);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	Если СтатусОтраженияДокумента = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете")
		И НЕ Модифицированность Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	РезультатЗаписи = Записать(Новый Структура("ЗакрыватьПриЗаписи", Истина));
	Если РезультатЗаписи И РучнаяКорректировкаПроводок Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВМеждународномУчете(Команда)
	
	ОчиститьСообщения();
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроводкиАвтоматически(Команда)
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru='Существующие проводки будут удалены. Продолжить?';uk='Існуючі проводки будуть вилучені. Продовжити?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросПередАвтоматическимЗаполнениемПроводок", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПроводкиАвтоматическиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьАктуальностьПроводок(Команда)
	
	ПодтвердитьАктуальностьПроводокСервер();
	ОповеститьОбИзмененииОтраженияДокументаВМеждународномУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура СторнироватьПроводки(Команда)
	
	ПараметрыОперации = Новый Структура("Основание", Документ);
	ОткрытьФорму("Документ.ОперацияМеждународный.ФормаОбъекта", ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОтражения(Команда)
	ОбновитьСостояниеОтраженияНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ОтображениеВидаСубконтоДт1
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоДт1");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоДт1");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
#КонецОбласти

#Область ОтображениеВидаСубконтоДт2
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоДт2");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоДт2");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
#КонецОбласти

#Область ОтображениеВидаСубконтоДт3
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоДт3");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетДт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоДт3");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
#КонецОбласти
	
#Область ОтображениеВидаСубконтоКт1
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоКт1");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоКт1");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
#КонецОбласти

#Область ОтображениеВидаСубконтоКт2
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоКт2");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоКт2");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
#КонецОбласти

#Область ОтображениеВидаСубконтоКт3
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоКт3");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетКт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконтоКт3");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
#КонецОбласти

#Область ТекстОбычнаяПроводка
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипПроводки");
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.ТипПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Обычная';uk='Звичайна'"));
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ПовторноеОткрытиеСервер()

	ПолучитьСостояниеОтраженияДокумента();
	УстановитьДоступностьЭлементовФормы();
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен");
	Если НЕ ДокументПроведен 
		ИЛИ (ДокументПроведен И НЕ РучнаяКорректировкаПроводок) Тогда
        ПеречитатьНаборЗаписей();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы(ИдентификаторСобытия = Неопределено)

	Если ИдентификаторСобытия = "РучнаяКорректировкаПроводок" ИЛИ ИдентификаторСобытия = Неопределено Тогда
		УстановитьДоступностьПриИзмененииРучнаяКорректировкаПроводок();
	КонецЕсли;

	Если ИдентификаторСобытия = Неопределено Тогда
		УстановитьДоступностьПриОткрытииФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриИзмененииРучнаяКорректировкаПроводок()

	Для каждого ЭлементФормы Из Элементы.ГруппаПроводкиМеждународногоУчета.ПодчиненныеЭлементы Цикл
		ЭлементФормы.ТолькоПросмотр = НЕ РучнаяКорректировкаПроводок;
	КонецЦикла;
	
	УстановитьДоступностьАвтоматическогоОтраженияВМеждународномУчете();
	
	Элементы.ЗаполнитьПроводкиАвтоматически.Видимость = РучнаяКорректировкаПроводок;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьАвтоматическогоОтраженияВМеждународномУчете()

	СтатусыОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете;		
	
	Элементы.ФормаГруппаКомандыАвтоматическогоОтражения.Видимость = НЕ РучнаяКорректировкаПроводок;
	Элементы.ФормаОтразитьВМеждународномУчете.Доступность = Не СтатусОтраженияДокумента = СтатусыОтражения.ОтраженоВУчете
		И Не СтатусОтраженияДокумента.Пустая();
		
	Элементы.ГруппаДокумент.Видимость = НЕ РучнаяКорректировкаПроводок
		ИЛИ СтатусОтраженияДокумента = СтатусыОтражения.ОтраженоВУчетеВручную
		ИЛИ СтатусОтраженияДокумента = СтатусыОтражения.КОтражениюВУчетеВручную;
	
	Элементы.ФормаОтразитьВМеждународномУчете.КнопкаПоУмолчанию = Не РучнаяКорректировкаПроводок;
	Элементы.ФормаГруппаКомандыРучногоОтражения.Видимость = РучнаяКорректировкаПроводок;
	Элементы.ПодтвердитьАктуальностьПроводок.Видимость = РучнаяКорректировкаПроводок И СтатусОтраженияДокумента = СтатусыОтражения.КОтражениюВУчетеВручную;
	Элементы.ПодтвердитьАктуальностьПроводок.КнопкаПоУмолчанию = РучнаяКорректировкаПроводок И СтатусОтраженияДокумента = СтатусыОтражения.КОтражениюВУчетеВручную;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = РучнаяКорректировкаПроводок И Не СтатусОтраженияДокумента = СтатусыОтражения.КОтражениюВУчетеВручную;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = РучнаяКорректировкаПроводок И Не СтатусОтраженияДокумента = СтатусыОтражения.КОтражениюВУчетеВручную;
	Элементы.КоманднаяПанельНабораЗаписей.Видимость = РучнаяКорректировкаПроводок;
	Если РучнаяКорректировкаПроводок Тогда
		Элементы.ФормаГруппаСтандартныеКоманды.Ширина = ?(СтатусОтраженияДокумента = СтатусыОтражения.КОтражениюВУчетеВручную, 33, 22);
	Иначе
		Элементы.ФормаГруппаСтандартныеКоманды.Ширина = 28;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПриОткрытииФормы()
	
	ДокументПроводится = (Документ.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить);
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен");
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = ДокументПроводится ИЛИ ДокументПроведен;
	ТолькоПросмотр = НЕ (ДокументПроводится ИЛИ ДокументПроведен);
	
	Элементы.СоздатьНаОсновании.Доступность = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ОперацияМеждународный) И (ДокументПроводится ИЛИ ДокументПроведен);
	Элементы.ФормаГруппаСтандартныеКоманды.Доступность = ДокументПроводится ИЛИ ДокументПроведен;
	Элементы.РучнаяКорректировкаПроводок.Доступность = ДокументПроводится ИЛИ ДокументПроведен;

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВопросПередАвтоматическимЗаполнениемПроводок(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПроводкиАвтоматическиСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СтатусРучнойКорректировкиПроводок()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ОтражениеДокументов.Регистратор КАК Регистратор
	|	
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Регистратор = &Документ
	|	И ОтражениеДокументов.Статус В (
	|		Значение(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную),
	|		Значение(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную))
	|";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

&НаСервере
Процедура ЗаполнитьПроводкиАвтоматическиСервер()

	ПроводкиДокумента = МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете(,КонецМесяца(ДатаДокумента), Документ, Ложь);
	
	НаборЗаписей.Загрузить(ПроводкиДокумента);
	
	ЗаполнитьПредставлениеВидовСубконто();

КонецПроцедуры

&НаСервере
Функция ОтразитьВМеждународномУчетеАвтоматически()

	ПроводкиДокумента = МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете(,КонецМесяца(ДатаДокумента), Документ, Ложь);
	
	МеждународныйУчетПроведениеСервер.ОбновитьСтатусОтраженияДокумента(ПроводкиДокумента, Документ);
	
	ПроводкиДокумента = МеждународныйУчетПроведениеСервер.ЗаписываемыеПроводки(ПроводкиДокумента);

	Возврат ПроводкиДокумента;

КонецФункции

&НаСервере
Процедура ПолучитьСостояниеОтраженияДокумента()
	
	РучнаяКорректировкаПроводок = СтатусРучнойКорректировкиПроводок();
	
	ЕстьПроводки = ЕстьПроводкиДокументаПоМеждународномуУчету();
	
	ТаблицаОтраженияДокумента = ТаблицаОтраженияДокументаВМеждународномУчете();
	ПолучитьСтатусОтраженияДокумента(ТаблицаОтраженияДокумента);
	
	Комментарий = КомментарийКОтражениюДокумента(ТаблицаОтраженияДокумента);
	Элементы.Комментарий.Видимость = ЗначениеЗаполнено(Комментарий);
	
	Организация = Неопределено;
	Состояние = "";
	
	Элементы.КартинкаВнимание.Видимость = Ложь;
	Элементы.ПодтвердитьАктуальностьПроводок.Видимость = Ложь;
	Элементы.ПроверитьПравилаОтраженияВУчете.Видимость = Ложь;
	
	Если ТаблицаОтраженияДокумента.Количество() > 0 Тогда 
		
		Организация = ТаблицаОтраженияДокумента[0].Организация;
		
		Если СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
			
			Состояние = НСтр("ru='Документ отражен в международном учете вручную.';uk='Документ відображений в міжнародному обліку вручну.'");
			Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			
		ИначеЕсли СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете Тогда
			
			Состояние = НСтр("ru='Ожидается отражение в регл. учете';uk='Очікується відображення в регл. обліку'");
			Элементы.Состояние.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			
		ИначеЕсли СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете Тогда
			
			Состояние = НСтр("ru='Отсутствуют правила отражения в международном учете.';uk='Відсутні правила відображення в міжнародному обліку.'");
			Элементы.Состояние.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			Элементы.ПроверитьПравилаОтраженияВУчете.Видимость = Истина;
			
		ИначеЕсли СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете Тогда
			
			Состояние = НСтр("ru='Документ отражен в международном учете.';uk='Документ відображений в міжнародному обліку.'");
			Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			
		ИначеЕсли СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете Тогда
			Если ЕстьПроводки Тогда
				ТекстНеактуальныеПроводки = НСтр("ru='Проводки могут быть неактуальными.';uk='Проводки можуть бути неактуальними.'");
				Состояние = НСтр("ru='Ожидается повторное отражение документа в международном учете.';uk='Очікується повторне відображення документа в міжнародному обліку.'") + " " + ТекстНеактуальныеПроводки;
				Элементы.Состояние.ЦветТекста = ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет;
				Элементы.КартинкаВнимание.Видимость = Истина;
			Иначе
				Состояние = НСтр("ru='Ожидается отражение документа в международном учете.';uk='Очікується відображення документа в міжнародному обліку.'");
				Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			КонецЕсли;
			
		ИначеЕсли СтатусОтраженияДокумента = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную Тогда
			Если ЕстьПроводки Тогда
				Состояние = НСтр("ru='Скорректируйте проводки документа или подтвердите актуальность текущих проводок';uk='Скоригуйте проводки документа або підтвердіть актуальність поточних проводок'");
				Элементы.Состояние.ЦветТекста = ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет;
				Элементы.КартинкаВнимание.Видимость = Истина;
				Элементы.ПодтвердитьАктуальностьПроводок.Видимость = Истина;
			Иначе
				Состояние = НСтр("ru='Требуется ручное отражение документа в международном учете.';uk='Потрібно ручне відображення документа в міжнародному обліку.'");
				Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЕстьПроводки Тогда
			Состояние = НСтр("ru='Документ отражен в международном учете.';uk='Документ відображений в міжнародному обліку.'");
			Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		Иначе
			Состояние = НСтр("ru='Документ не проведен.';uk='Документ не проведено.'");
			Элементы.Состояние.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			Элементы.ЗаполнитьПроводкиАвтоматически.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПроводкиДокументаПоМеждународномуУчету()

	Возврат НаборЗаписей.Количество() > 0;

КонецФункции

&НаСервере
Функция ТаблицаОтраженияДокументаВМеждународномУчете()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Период КАК Дата,
	|	ДанныеРегистра.Статус КАК Статус,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика,
	|	ДанныеРегистра.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Регистратор = &Регистратор
	|";
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура ПолучитьСтатусОтраженияДокумента(ТаблицаОтраженияДокумента)

	Статус = Неопределено;
	ПриоритетыСтатусов = ПриоритетыСтатусов();

	Для каждого Строка Из ТаблицаОтраженияДокумента Цикл
		Статус = Статус(ПриоритетыСтатусов, Статус, Строка.Статус);
	КонецЦикла;
	
	СтатусОтраженияДокумента = Статус;

КонецПроцедуры

&НаСервере
Функция КомментарийКОтражениюДокумента(ТаблицаОтраженияДокумента)

	Комментарий = "";
	Для каждого Строка Из ТаблицаОтраженияДокумента Цикл
		Комментарий = Комментарий + ?(ПустаяСтрока(Комментарий), "", Символы.ПС) + Строка.Комментарий;
	КонецЦикла;
	
	Возврат Комментарий;

КонецФункции

&НаСервере
Функция ПриоритетыСтатусов()

	ПриоритетыСтатусов = Новый Соответствие;
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете, 1);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную, 2);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную, 3);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете, 4);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете, 5);
	ПриоритетыСтатусов.Вставить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете, 6);
	
	Возврат ПриоритетыСтатусов;

КонецФункции

&НаСервере
Функция Статус(ПриоритетыСтатусов, ТекущийСтатус, НовыйСтатус)

	ПриоритетТекущегоСтатуса = ПриоритетыСтатусов.Получить(ТекущийСтатус);
	ПриоритетНовогоСтатуса = ПриоритетыСтатусов.Получить(НовыйСтатус);
	Возврат ?(ПриоритетТекущегоСтатуса = Неопределено ИЛИ ПриоритетНовогоСтатуса < ПриоритетТекущегоСтатуса, НовыйСтатус, ТекущийСтатус);

КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОтраженияДокументаВМеждународномУчете()

	Оповестить("Запись_ОтражениеДокументовВМеждународномУчете");

КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатусОтраженияВМеждународномУчете()

	Если РучнаяКорректировкаПроводок Тогда
		ОтражениеДокументовВМеждународномУчете = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
		ОтражениеДокументовВМеждународномУчете.Отбор.Регистратор.Установить(Документ);
		ОтражениеДокументовВМеждународномУчете.Прочитать();
		Для каждого Запись Из ОтражениеДокументовВМеждународномУчете Цикл
			Запись.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную;
		КонецЦикла;
		ОтражениеДокументовВМеждународномУчете.Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеВидовСубконто()

	Для каждого Запись Из НаборЗаписей Цикл
		ЗаполнитьЗначенияСвойств(Запись, ПредставлениеВидовСубконто(Запись.СчетДт, "Дт"));
		ЗаполнитьЗначенияСвойств(Запись, ПредставлениеВидовСубконто(Запись.СчетКт, "Кт"));
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПредставлениеВидовСубконто(Счет, ВидДвижения)

	ПредставлениеВидовСубконто = Новый Структура;
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	КоличествоВидовСубконто = Счет.ВидыСубконто.Количество();
	Для К = 1 По МаксКоличествоСубконто Цикл
		ПредставлениеВидаСубконто = ?(КоличествоВидовСубконто >= К, "<" + Счет.ВидыСубконто[К - 1].ВидСубконто + ">", Неопределено);
		ПредставлениеВидовСубконто.Вставить("ПредставлениеВидСубконто" + ВидДвижения + К, ПредставлениеВидаСубконто);
	КонецЦикла;

	Возврат ПредставлениеВидовСубконто;

КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиСумм()

	ВалютыМеждународногоУчета = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();
	ЗаголовокСуммы = НСтр("ru='Сумма (%ФункциональнаяВалюта%)';uk='Сума (%ФункциональнаяВалюта%)'");
	Элементы.Сумма.Заголовок = СтрЗаменить(ЗаголовокСуммы, "%ФункциональнаяВалюта%", ВалютыМеждународногоУчета.Функциональная);
	ЗаголовокСуммыПредставления = НСтр("ru='Сумма представления (%ВалютаПредставления%)';uk='Сума представлення (%ВалютаПредставления%)'");
	Элементы.СуммаПредставления.Заголовок = СтрЗаменить(ЗаголовокСуммыПредставления, "%ВалютаПредставления%", ВалютыМеждународногоУчета.Представления);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВопросПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("АвтоматическоеОтражение", Истина);
		Записать(ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("ЗакрыватьПриЗаписи") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодтвердитьАктуальностьПроводокСервер()

	ЗаписатьСтатусОтраженияВМеждународномУчете();
	ПолучитьСостояниеОтраженияДокумента();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуЗапретаФормированияПроводок()

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Документ.Метаданные()) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,"Организация,Дата");
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата");
		Реквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	ДатаЗапрета = МеждународныйУчетСерверПовтИсп.ДатаЗапретаФормированияПроводок(Реквизиты.Организация);
	Элементы.СоздатьНаОсновании.Видимость = Реквизиты.Дата <= ДатаЗапрета И ЗначениеЗаполнено(ДатаЗапрета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДокументОтраженВМеждународномУчете" 
			И Источник = Документ Тогда
		ПовторноеОткрытиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравилаОтраженияВУчете(Команда)
	
	АдресРезультатаПроверки = "";
	НеобходимаНастройкаПравил = ПроверитьНастройкуПравилОтраженияВУчетеСервер(АдресРезультатаПроверки);
	
	Если Не НеобходимаНастройкаПравил Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросОтразитьВУчете", ЭтотОбъект);
		ТекстСообщения = НСтр("ru='Настроены все необходимые правила отражения. Попробовать отразить документ в учете?';uk='Настроєні всі необхідні правила відображення. Спробувати відобразити документ в обліку?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Документ", Документ);
	ПараметрыФормы.Вставить("АдресРезультатаПроверки", АдресРезультатаПроверки);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОповещенияФормыНеобходимыеПравилаОтраженияВУчете", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.НеобходимыеПравилаОтраженияВУчетеПоДокументу", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНастройкуПравилОтраженияВУчетеСервер(АдресВоВременномХранилище)
	
	РезультатПроверки = Обработки.ОтражениеДокументовВМеждународномУчете.ПроверитьНастройкуПравилОтраженияУчете(Организация, Документ);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РезультатПроверки, УникальныйИдентификатор);
	
	НеобходимаНастройкаПравил = 
		РезультатПроверки.ХозяйственныеОперацииБезПравилОтражения.Количество() 
		Или РезультатПроверки.СчетаБезПравилОтражения.Количество();
		
	Возврат НеобходимаНастройкаПравил;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияВопросОтразитьВУчете(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗадаватьВопросПередЗаписью", Ложь);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияФормыНеобходимыеПравилаОтраженияВУчете(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОтразитьДокументВМеждународномУчете = Ложь;
	Если ТипЗнч(ПараметрыЗакрытия) = Тип("Структура")
		 И ПараметрыЗакрытия.Свойство("ОтразитьДокументВМеждународномУчете") Тогда
		ОтразитьДокументВМеждународномУчете = ПараметрыЗакрытия.ОтразитьДокументВМеждународномУчете; 
	КонецЕсли;
	
	Если ОтразитьДокументВМеждународномУчете Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗадаватьВопросПередЗаписью", Ложь);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеОтраженияНаСервере()
	
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен");
	Если НЕ ДокументПроведен 
		ИЛИ (ДокументПроведен И НЕ РучнаяКорректировкаПроводок) Тогда
        ПеречитатьНаборЗаписей();
	КонецЕсли;
	ПолучитьСостояниеОтраженияДокумента();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидКоманднойПанелиНабораЗаписей()	
	
	Элементы.КоманднаяПанельНабораЗаписей.ПодчиненныеЭлементы.НаборЗаписейДобавить.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	Элементы.КоманднаяПанельНабораЗаписей.ПодчиненныеЭлементы.НаборЗаписейУдалить.ТолькоВоВсехДействиях = Ложь;
	Элементы.КоманднаяПанельНабораЗаписей.ПодчиненныеЭлементы.НаборЗаписейУдалить.Отображение = ОтображениеКнопки.Картинка;
	
	Элементы.КоманднаяПанельНабораЗаписей.ПодчиненныеЭлементы.НаборЗаписейСкопировать.ТолькоВоВсехДействиях = Ложь;
	Элементы.КоманднаяПанельНабораЗаписей.ПодчиненныеЭлементы.НаборЗаписейСкопировать.Отображение = ОтображениеКнопки.Картинка;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНаборЗаписей()	
    
    НаборЗаписей.Очистить();
    
    Запрос = Новый Запрос;
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	МеждународныйДвиженияССубконто.*
    |ИЗ
    |	РегистрБухгалтерии.Международный.ДвиженияССубконто(,,Регистратор = &Документ,,) КАК МеждународныйДвиженияССубконто
    |";
    
    Запрос.УстановитьПараметр("Документ", Документ);
    РезультатЗапроса = Запрос.Выполнить();
    Если Не РезультатЗапроса.Пустой() Тогда
        Выборка = РезультатЗапроса.Выбрать();
        Пока Выборка.Следующий() Цикл
            ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);	
        КонецЦикла; 
    КонецЕсли; 
    
КонецПроцедуры

#КонецОбласти
