
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОСВызовСервера.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	МассивОсновныхСредств = Объект.ОС.Выгрузить(ДобавленныеСтроки, "ОсновноеСредство").ВыгрузитьКолонку("ОсновноеСредство");	
	ОсновныеСредстваКоды = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОсновныхСредств, "Код");
	
	Для каждого Строка Из ДобавленныеСтроки Цикл
		
		Если ЗначениеЗаполнено(Строка.ИнвентарныйНомер) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКоды = ОсновныеСредстваКоды.Получить(Строка.ОсновноеСредство);
		Если СтруктураКоды <> Неопределено Тогда 
			Строка.ИнвентарныйНомер = СтруктураКоды.Код;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ОбъектыЭксплуатации.Форма.ФормаВыбора" Тогда
		Если ВыбранноеЗначение.Количество() > 0 Тогда
			КодыОбъектов = СоответствиеКодовПоОбъектамЭксплуатации(ВыбранноеЗначение);
			Для Каждого КлючИЗначение Из КодыОбъектов Цикл
				Строка = Объект.ОС.Добавить();
				Строка.ОсновноеСредство = КлючИЗначение.Ключ;
				Строка.ИнвентарныйНомер = КлючИЗначение.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Для Каждого Строка Из Объект.ОС Цикл
		ОповеститьОбИзменении(Строка.ОсновноеСредство);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	Если НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности Или Объект.ОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответы = Новый СписокЗначений;
	Ответы.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Продолжить';uk='Продовжити'"));
	Ответы.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить';uk='Скасувати'"));
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("НаправлениеДеятельностиПриИзмененииОбработкаОповещения", ЭтаФорма),
		НСтр("ru='При изменении направления деятельности табличная часть документа будет очищена';uk='При зміні напрямку діяльності таблична частина документа буде очищена'"),
		Ответы);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзмененииОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Объект.НаправлениеДеятельности = НаправлениеДеятельностиДоИзменения;
	Иначе
		НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
		Объект.ОС.Очистить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура БУНачислятьАмортизациюПриИзменении(Элемент)
	
	Если Объект.НачислятьАмортизациюБУ <> Объект.НачислятьАмортизациюНУ Тогда
		Объект.НачислятьАмортизациюНУ = Объект.НачислятьАмортизациюБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БУМетодНачисленияАмортизацииПриИзменении(Элемент)
	
	БУМетодНачисленияАмортизацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура БУМетодНачисленияАмортизацииПриИзмененииНаСервере()
	
	ОбновитьСвойстваЭлементов("ПараметрыАмортизации");
	
	Если Объект.МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
       Объект.СпособНачисленияАмортизацииНУ = Объект.МетодНачисленияАмортизацииБУ;
 	Иначе
       Объект.СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
 	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БУСрокИспользованияПриИзменении(Элемент)
	
	Если Объект.СрокИспользованияНУ = 0
		Или СрокИспользованияБУ = Объект.СрокИспользованияНУ Тогда
		
		Объект.СрокИспользованияНУ = Объект.СрокИспользованияБУ;
		НУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияНУ);
		
	КонецЕсли;
	
	БУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияБУ);
	
	СрокИспользованияБУ = Объект.СрокИспользованияБУ;
	
КонецПроцедуры


&НаКлиенте
Процедура БУНалогообложениеНДСПриИзменении(Элемент)
	ОбновитьСвойстваЭлементов("НалоговоеНазначение");
КонецПроцедуры

&НаКлиенте
Процедура НУСрокИспользованияПриИзменении(Элемент)
	
	НУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияНУ);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияПриИзменении(Элемент)
	
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(
		Объект.АдресМестонахождения,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияОчистка(Элемент, СтандартнаяОбработка)
	
	АдресМестонахожденияЗначенияПолей = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
		УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
			АдресМестонахожденияЗначенияПолей),
		ЭтотОбъект,
		Новый ОписаниеОповещения("АдресМестонахожденияЗавершениеВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияЗавершениеВыбора(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы)<>Тип("Структура") Тогда
		// не было измнений в данных
		Возврат;
	КонецЕсли;
	
	АдресМестонахожденияЗначенияПолей = РезультатОткрытияФормы.КонтактнаяИнформация;
	Объект.АдресМестонахождения = РезультатОткрытияФормы.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		СтатьяРасходовПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
	
	СтатьяРасходовДоИзменения = Объект.СтатьяРасходов;
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходов;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииНаСервере()
	
	АналитикаРасходовОбязательна = 
		ЗначениеЗаполнено(Объект.СтатьяРасходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходов, "КонтролироватьЗаполнениеАналитики");
	
КонецПроцедуры

&НаКлиенте
Процедура АналитикаРасходовПриИзменении(Элемент)
	
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходов;
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	
	ГруппаОСПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ГруппаОСПриИзмененииСервер()
	
	ОбновитьСвойстваЭлементов("ОтражениеРасходовПоНалогу");
	
КонецПроцедуры


&НаКлиенте
Процедура ПередаватьАмортизациюВДругуюОрганизациюПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементов("ПередаватьРасходыВДругуюОрганизацию");
	
	Если Не Объект.ПередаватьРасходыВДругуюОрганизацию Тогда
		Объект.ОрганизацияПолучательРасходов = Неопределено;
		Объект.СчетПередачиРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементов("Организация");
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиОС

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	СтоимостьБУ = ТекущиеДанные.СтоимостьБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	ЭлементКоллекции = Элементы.ОС.ТекущиеДанные;
	Если ЗначениеЗаполнено(ЭлементКоллекции.ОсновноеСредство) Тогда
		ЭлементКоллекции.ИнвентарныйНомер = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ЭлементКоллекции.ОсновноеСредство, "Код");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	
	Если ТекущиеДанные.СтоимостьНУ = ОССтоимостьБУ Тогда
		ТекущиеДанные.СтоимостьНУ = ТекущиеДанные.СтоимостьБУ;
		ОССтоимостьБУ = ТекущиеДанные.СтоимостьБУ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьНУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	
КонецПроцедуры

&НаКлиенте
Процедура ОССтоимостьПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОС.ТекущиеДанные;
	ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	Если ТекущиеДанные.СтоимостьВР < 0 Тогда
		ТекущиеДанные.СтоимостьНУ = ТекущиеДанные.СтоимостьНУ + ТекущиеДанные.СтоимостьВР;
		ТекущиеДанные.СтоимостьВР = ТекущиеДанные.СтоимостьБУ - ТекущиеДанные.СтоимостьНУ - ТекущиеДанные.СтоимостьПР;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ОсновноеСредство = УправлениеВнеоборотнымиАктивамиКлиент.ПолучитьОСДляЗаполнениеПоНаименованию(
	ПараметрыЗаполненияПоНаименованию(ЭтаФорма));
	
	Если ЗначениеЗаполнено(ОсновноеСредство) Тогда
		ЗаполнитьПоНаименованиюСервер(ОсновноеСредство);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.НеПринятоКУчету"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.СнятоСУчета"));
	МассивСостояний.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету"));
	
	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("БУСостояние", МассивСостояний);
	ПараметрыОтбор.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контекст", "БУ, МФУ");
	ПараметрыФормы.Вставить("ДатаСведений", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущийРегистратор", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбор);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#Область СтандартныеПодсистемы

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		"СтатьяРасходов, АналитикаРасходов");
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	НаправлениеДеятельностиДоИзменения = Объект.НаправлениеДеятельности;
	
	УказыватьНаправлениеВоВнеоборотныхАктивах = ЗначениеНастроекПовтИсп.УказыватьНаправлениеВоВнеоборотныхАктивах();
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(
		Объект.АдресМестонахождения,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	БУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияБУ);
	
	НУСрокИспользованияРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияНУ);
		
	
	ОбновитьСвойстваЭлементов();
	
	СрокИспользованияБУ = Объект.СрокИспользованияБУ;
	
	СтатьяРасходовДоИзменения = Объект.СтатьяРасходов;
	АналитикаРасходовДоИзменения = Объект.АналитикаРасходов;
	
	
	АналитикаРасходовОбязательна =
		ЗначениеЗаполнено(Объект.СтатьяРасходов)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходов, "КонтролироватьЗаполнениеАналитики");
	
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементов(Параметры=Неопределено)
	
	ОбновитьВсе = (Параметры = Неопределено);
	Действия = Новый Структура(Параметры);
	
			
		
		
		
	
	Если ОбновитьВсе Или Действия.Свойство("СчетУчета") Тогда
		Элементы.БУСпособНачисленияАмортизации.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСпособовАмортизацииБУ(Объект.СчетУчета));
		Элементы.НУСпособНачисленияАмортизации.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСпособовАмортизацииБУ(Объект.СчетУчета,Ложь));
		Если  Объект.СчетУчета.Родитель = ПланыСчетов.Хозрасчетный.ОсновныеСредства Тогда
			Объект.СчетАмортизации = ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств;	
		ИначеЕсли Объект.СчетУчета = ПланыСчетов.Хозрасчетный.БиблиотечныеФондыИндивидуально 
			 ИЛИ Объект.СчетУчета = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыИндивидуально Тогда
			Объект.СчетАмортизации = ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовИндивидуально;
		ИначеЕсли Объект.СчетУчета = ПланыСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно 
			 ИЛИ Объект.СчетУчета = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно Тогда
			Объект.СчетАмортизации = ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("ПараметрыАмортизации") Тогда
			Элементы.БУСрокИспользования.АвтоОтметкаНезаполненного = (
			Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка	
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._100
			Или Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._50_50);
		Если Не Элементы.БУСрокИспользования.АвтоОтметкаНезаполненного Тогда
			Элементы.БУСрокИспользования.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		
		Элементы.ПараметрыИГрафикиАмортизации.Видимость = (
			Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);	
		Элементы.ОСПоказательНаработки.Видимость = (
			Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
		Элементы.ГруппаБУСрокИспользования.Видимость = (
		    Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);	
		Элементы.ЛиквидационнаяСтоимостьБУ.Видимость = (
		 	Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
		Если Элементы.ЛиквидационнаяСтоимостьБУ.Видимость = Ложь Тогда
		   Объект.ЛиквидационнаяСтоимостьБУ = 0;
		КонецЕсли; 	
			
		
		Если Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._50_50
			ИЛИ Объект.МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда
		    Объект.НачислятьАмортизациюНУ = (Объект.НачислятьАмортизациюБУ = Истина);
			Элементы.НУНачислятьАмортизацию.Доступность = Ложь;
		Иначе 
			Элементы.НУНачислятьАмортизацию.Доступность = Истина;
		КонецЕсли; 	
					
		Элементы.ОСПоказательНаработкиЕдиницаИзмерения.Видимость = (
			Элементы.ОСПоказательНаработки.Видимость);
		
		Элементы.ОСОбъемНаработки.Видимость = (
			Элементы.ОСПоказательНаработки.Видимость);
			
		
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("НалоговоеНазначение") Тогда
		Если Объект.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Элементы.ГруппаНУАмортизация.Видимость = Ложь;
			Элементы.НУНачислитьАмортизацию.Видимость = Ложь;
			Элементы.НУСпособНачисленияАмортизации.Видимость = Ложь;
		Иначе 
			Элементы.ГруппаНУАмортизация.Видимость = Истина;
			Элементы.НУНачислитьАмортизацию.Видимость = Истина;
			Элементы.НУСпособНачисленияАмортизации.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ОбновитьВсе Или Действия.Свойство("ПередаватьРасходыВДругуюОрганизацию") Тогда
		
		Элементы.ОрганизацияПолучательРасходов.Доступность = Объект.ПередаватьРасходыВДругуюОрганизацию;
		Элементы.СчетПередачиРасходов.Доступность = Объект.ПередаватьРасходыВДругуюОрганизацию;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Действия.Свойство("Организация") Тогда
		
		ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация);
		
		Элементы.ПередаватьРасходыВДругуюОрганизацию.Видимость = ЕстьСвязанныеОрганизации;
		Элементы.ОрганизацияПолучательРасходов.Видимость = ЕстьСвязанныеОрганизации;
		Элементы.СчетПередачиРасходов.Видимость = ЕстьСвязанныеОрганизации;
		
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
		
		Если ЗначениеЗаполнено(Объект. Организация)  Тогда
			Элементы.ГруппаБУАмортизация.Видимость = Истина;
			Элементы.СчетАмортизации.Видимость = Истина;
			Элементы.БУНачислитьАмортизацию.Видимость = Истина;
		Иначе
			Элементы.НУНачислитьАмортизацию.Видимость = Ложь;
			Элементы.БУНачислитьАмортизацию.Видимость = Ложь;
			Элементы.ГруппаНУАмортизация.Видимость = Ложь;
			Элементы.НУСпособНачисленияАмортизации.Видимость = Ложь;
			Элементы.ГруппаБУАмортизация.Видимость = Ложь;
			Элементы.СчетАмортизации.Видимость = Ложь;
		КонецЕсли;

		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияПоНаименованию(Форма)
	
	Результат = Новый Структура;
	Результат.Вставить("Форма", Форма);
	Результат.Вставить("Объект", Форма.Объект);
	Результат.Вставить("ИмяТабличнойЧасти", "ОС");
	Результат.Вставить("ПолучатьИнвентарныйНомерИзКода", Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоНаименованиюСервер(Знач ОсновноеСредство)
	
	УчетОСВызовСервера.ДозаполнитьТабличнуюЧастьОсновнымиСредствамиПоНаименованию(
		ПараметрыЗаполненияПоНаименованию(ЭтаФорма),
		ОсновноеСредство);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоответствиеКодовПоОбъектамЭксплуатации(МассивОбъектов)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОбъектов, "Код");
	
КонецФункции

&НаСервере
Функция ПолучитьСписокСпособовАмортизацииБУ(СчетУчетаБУ,СписокСпособовБУ=Истина) Экспорт
	
	СписокПеречисления = Новый Массив;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	Если СписокСпособовБУ Тогда
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	КонецЕсли; 		
	
	Если ЗначениеЗаполнено(СчетУчетаБУ) 
	   И СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа) Тогда		  
	   
	   	Если СчетУчетаБУ.Родитель = ПланыСчетов.Хозрасчетный.БиблиотечныеФонды 
		 ИЛИ СчетУчетаБУ.Родитель = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивы Тогда			
			СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС._50_50);
			СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС._100);			
		КонецЕсли;
		
	Иначе	
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка);
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный);		
	КонецЕсли;
	
	Возврат СписокПеречисления;
	
КонецФункции

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	ОпределитьСчетАмортизации(ЭтаФорма.Объект.СчетУчета);	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСчетАмортизации(СчетУчетОС) Экспорт
	ОбновитьСвойстваЭлементов("СчетУчета");
КонецПроцедуры	

&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

















