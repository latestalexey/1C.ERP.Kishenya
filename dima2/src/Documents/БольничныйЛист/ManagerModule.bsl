#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Получает данные для заполнения документа по первичному листку нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 см. описание метода ПоследнийДеньБолезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ДанныеПервичногоБольничногоЛиста(ПервичныйБольничныйЛист, ИсключаемыеДокументы = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА БольничныйЛист.ЯвляетсяПродолжениемБолезни
	|			ТОГДА БольничныйЛист.ПервичныйБольничныйЛист
	|		ИНАЧЕ БольничныйЛист.Ссылка
	|	КОНЕЦ КАК ПервичныйБольничныйЛист,
	|	ИСТИНА КАК ЯвляетсяПродолжениемБолезни,
	|	БольничныйЛист.Организация,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности КАК НомерПервичногоЛисткаНетрудоспособности,
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНарушенияРежима,
	|	БольничныйЛист.ДоплачиватьДоСреднегоЗаработка,
	|	БольничныйЛист.СтажЛет,
	|	БольничныйЛист.СтажМесяцев,
	|	БольничныйЛист.СтажРасширенныйЛет,
	|	БольничныйЛист.СтажРасширенныйМесяцев,
	|	БольничныйЛист.СтажЗа12МесяцевВМесяцах,
	|	БольничныйЛист.СтажВМесяцах,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	БольничныйЛист.ПроцентОплатыБезЛьгот,
	|	БольничныйЛист.ОграничениеПособияБезЛьгот,
	|	БольничныйЛист.ПрименятьЛьготыПриНачисленииПособия,
	|	БольничныйЛист.ЛьготаПоПособию,
	|	БольничныйЛист.ПричинаНетрудоспособности,
	|	БольничныйЛист.ДатаНачалаСобытия,
	|	БольничныйЛист.ДатаНачалаПоловиннойОплаты,
	|	БольничныйЛист.ПроцентОплаты,
	|	БольничныйЛист.ОграничениеПособия,
	|	БольничныйЛист.УчитыватьЗаработокПредыдущихСтрахователей,
	|	БольничныйЛист.СлучайУходаЗаБольнымРебенком,
	|	БольничныйЛист.НазначитьПособие,
	|	БольничныйЛист.РасчетПоПравилам2010Года,
	|	БольничныйЛист.ВидОплатыПособия,
	|	БольничныйЛист.ВидОплатыЗаСчетРаботодателя,
	|	БольничныйЛист.ВидНеоплачиваемогоВремени,
	|	БольничныйЛист.ВидРасчетаДоплаты,
	|	БольничныйЛист.ПроцентДоплатыЗаДниНетрудоспособности,
	|	БольничныйЛист.ДоляНеполногоВремени,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход1,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход2
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ПервичныйБольничныйЛист);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеПервичногоДокумента = Новый Структура;
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ДанныеПервичногоДокумента.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;
	
	ДатаНачала = ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы) + 86400;
	ДанныеПервичногоДокумента.Вставить("ДатаНачала", ДатаНачала);
	ДанныеПервичногоДокумента.Вставить("ДатаНачалаОплаты", ДатаНачала);	
	
	Возврат ДанныеПервичногоДокумента;
	
КонецФункции

// Определяет последний день болезни, оформленной несколькими листками нетрудоспособности.
//
// Параметры:
//  ПервичныйБольничныйЛист - ДокументСсылка.БольничныйЛист
//                 первичный листок нетрудоспособности.
//  ИсключаемыеДокументы - массив из ДокументСсылка.БольничныйЛист
//                 массив листков нетрудоспособности, которые не нужно учитывать при определении последнего дня болезни.
//
// Возвращаемое значение:
//   Дата - последний день болезни, зарегистрированной по переданному б/л.
//
Функция ПоследнийДеньБолезни(ПервичныйБольничныйЛист, ИсключаемыеДокументы  = Неопределено) Экспорт 

	ДатаОкончанияБолезни = '00010101';
	
	Если Не ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		Возврат	ДатаОкончанияБолезни;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &ПервичныйБольничныйЛист
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛист.ДатаОкончания
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ПервичныйБольничныйЛист = &ПервичныйБольничныйЛист
	|	И НЕ БольничныйЛист.Ссылка В (&ИсключаемыеДокументы)
	|	И БольничныйЛист.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОкончания УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПервичныйБольничныйЛист", ПервичныйБольничныйЛист);
	Запрос.УстановитьПараметр("ИсключаемыеДокументы", ?(ИсключаемыеДокументы = Неопределено, Новый Массив, ИсключаемыеДокументы));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ДатаОкончанияБолезни = Выборка.ДатаОкончания;
	КонецЕсли;

	Возврат	ДатаОкончанияБолезни;
	
КонецФункции
	
	
	
	

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.БольничныйЛист - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.БольничныйЛист - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеПоВсемУчетам = Ложь;
	МассивРегистров = Новый Массив;
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
		ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(Объект, Отказ, РежимПроведения);
	КонецЕсли;                                                                                                	
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
	
	Если РеквизитыДляПроведения.ДокументРассчитан Тогда 
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
			Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(
			Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
			
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);	
			
			УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(
				РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения, Истина, Истина);
			
			// - Регистрация начислений и удержаний.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
			ДанныеДляПроведения.НачисленияПоСотрудникам,
			ДанныеДляПроведения.УдержанияПоСотрудникам,
			ДанныеДляПроведения.НДФЛПоСотрудникам,
			РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			
			// - регистрация пособий
			
			// Займы
			// - взаиморасчеты по займам
			ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
			
			// - Регистрация займов в учете заработной платы.
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьПогашениеЗаймов(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияЗаймов, РеквизитыДляПроведения.ПорядокВыплаты);
			
			
			// - страховые взносы
			УчетСтраховыхВзносов.СформироватьИсчисленныеВзносыАвансом(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СтраховыеВзносы);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				Модуль.ЗарегистрироватьНачисленияДляРасчетаСохраняемогоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияДляРегистрацииДенежногоСодержания);
			КонецЕсли;

		КонецЕсли;
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда

			// Учет среднего заработка (регистрация начислений).
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
			Если Не СокрЛП(РеквизитыДляПроведения.НомерЛисткаНетрудоспособности) = "" Тогда
				УчетПособийСоциальногоСтрахованияРасширенный.ЗарегистрироватьУчтенныеДляСреднегоЗаработкаФСССуммы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.НомерЛисткаНетрудоспособности, ДанныеДляПроведения.УчтенныеДанныеСреднегоЗаработкаФСС);	
			КонецЕсли;	
		КонецЕсли;
							
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
		ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
		ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
		ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
		ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
		
		СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(Движения, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.ДанныеСостоянийСотрудников);
		
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			КадровыйУчетРасширенный.ОсвободитьСтавкуВременно(Движения, ДанныеДляПроведения.ПериодыОсвобожденияСтавки);
		КонецЕсли;
		
		УчетСреднегоЗаработка.УдалитьПричиныПерерасчетов(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		// Ресстр отпусков
		Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			
			КадровыйУчетРасширенный.ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеДляПроведения.ДанныеРеестраОтпусков, Отказ);
		КонецЕсли;
	
		
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.БольничныйЛист);
	
КонецФункции

Функция ВидыСтажаВЛисткеНетрудоспособности() Экспорт 
	КатегорииСтажа = КатегорииСтажаВЛисткеНетрудоспособности();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСтажа.Ссылка,
	|	ВидыСтажа.КатегорияСтажа
	|ИЗ
	|	Справочник.ВидыСтажа КАК ВидыСтажа
	|ГДЕ
	|	ВидыСтажа.КатегорияСтажа В(&КатегорииСтажа)";
	Запрос.УстановитьПараметр("КатегорииСтажа", КатегорииСтажа);
	Результат = Запрос.Выполнить();
	ВидыСтажа = Новый Массив;
	НеобязательныеВидыСтажа = Новый Соответствие;
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ВидыСтажа.Добавить(Выборка.Ссылка);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Новый Структура("ВидыСтажа, НеобязательныеВидыСтажа", ВидыСтажа, НеобязательныеВидыСтажа);
КонецФункции

Функция КатегорииСтажаВЛисткеНетрудоспособности() Экспорт 
	КатегорииСтажа = Новый Массив;
	КатегорииСтажа.Добавить(Перечисления.КатегорииСтажа.Страховой);
	Возврат КатегорииСтажа;
КонецФункции

Процедура ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Ссылка,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ЛОЖЬ КАК Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
	|ПОМЕСТИТЬ ВТНачисленияДляУчетаПособий
	|ИЗ
	|	Документ.БольничныйЛист.Начисления КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачислений.Сторно
	|			ТОГДА ТаблицаНачислений.СторнируемыйДокумент
	|		ИНАЧЕ ТаблицаНачислений.Ссылка
	|	КОНЕЦ,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	ТаблицаНачислений.РезультатВТомЧислеЗаСчетФБ
	|ИЗ
	|	Документ.БольничныйЛист.НачисленияПерерасчет КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Выполнить();
	

	
КонецПроцедуры

Процедура ЗаполнитьДанныеСостоянийСотрудника(РеквизитыДляПроведения, ДанныеДляПроведения, ДругиеСотрудники)
	
	ДанныеСостояний = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	Если РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		НоваяСтрока = ДанныеСостояний.Добавить();
		НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам;
		НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
		НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
	Иначе
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
			// Если расчет зарплаты отключен, то считаем весь период "оплаченной болезнью".
			НоваяСтрока = ДанныеСостояний.Добавить();
			НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
			НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.Болезнь;
			НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
			НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
		Иначе
			Если Не РеквизитыДляПроведения.НазначитьПособие Тогда
				// Весь период без оплаты
				НоваяСтрока = ДанныеСостояний.Добавить();
				НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
				НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
				НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
				НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
			Иначе
				Если РеквизитыДляПроведения.ДатаНачала < РеквизитыДляПроведения.ДатаНачалаОплаты Тогда
					// Если оплата начинается позже, то интервал перед - это болезнь без оплаты.
					НоваяСтрока = ДанныеСостояний.Добавить();
					НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
					НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
					НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачала;
					НоваяСтрока.Окончание = НачалоДня(РеквизитыДляПроведения.ДатаНачалаОплаты) - 1;
				КонецЕсли;
				НоваяСтрока = ДанныеСостояний.Добавить();
				НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
				НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.Болезнь;
				НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачалаОплаты;
				НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончанияОплаты;
				Если РеквизитыДляПроведения.ДатаОкончанияОплаты < РеквизитыДляПроведения.ДатаОкончания Тогда
					// Если оплата заканчивается раньше, то интервал - это болезнь без оплаты.
					НоваяСтрока = ДанныеСостояний.Добавить();
					НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
					НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.БолезньБезОплаты;
					НоваяСтрока.Начало = КонецДня(РеквизитыДляПроведения.ДатаОкончанияОплаты) + 1;
					НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДляПроведения.ДанныеСостоянийСотрудников = ДанныеСостояний;
	
КонецПроцедуры

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета) 
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет", "Ссылка.ПериодРегистрации");
		РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		
		ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения);
			
		ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, НачалоДня(РеквизитыДляПроведения.ДатаНачалаСобытия) - 1, "Ссылка.ПериодРегистрации");
		
		ДругиеСотрудники = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(
		РеквизитыДляПроведения.ФизическоеЛицо, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ДатаНачала, РеквизитыДляПроведения.ДатаОкончания);
		
		ЗаполнитьДанныеСостоянийСотрудника(РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения, ДругиеСотрудники);
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДляПроведения.Сотрудник);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ДругиеСотрудники);
			КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, МассивСотрудников, РеквизитыДляПроведения.ДатаНачала, КонецДня(РеквизитыДляПроведения.ДатаОкончания) + 1);
			
			Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
				ДанныеИсправленногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДляПроведения.ИсправленныйДокумент, "ФизическоеЛицо,Организация,Сотрудник,ДатаНачала,ДатаОкончания");
				
				ДругиеСотрудникиИсправленногоДокумента = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(ДанныеИсправленногоДокумента.ФизическоеЛицо, 
				ДанныеИсправленногоДокумента.Организация, ДанныеИсправленногоДокумента.Сотрудник, 
				ДанныеИсправленногоДокумента.ДатаНачала, ДанныеИсправленногоДокумента.ДатаОкончания);
				
				МассивСотрудниковИсправленногоДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеИсправленногоДокумента.Сотрудник);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудниковИсправленногоДокумента, ДругиеСотрудникиИсправленногоДокумента);
				КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, МассивСотрудниковИсправленногоДокумента, ДанныеИсправленногоДокумента.ДатаНачала,  КонецДня(ДанныеИсправленногоДокумента.ДатаОкончания) + 1, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			НачисленияДляРегистрацииДенежногоСодержания = Модуль.СведенияОНачисленияхДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет");
			ДанныеДляПроведения.Вставить("НачисленияДляРегистрацииДенежногоСодержания", НачисленияДляРегистрацииДенежногоСодержания);
		КонецЕсли;
		
		ЗаполнитьДанныеРеестраОтпусков(РеквизитыДляПроведения, ДанныеДляПроведения);
		
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		Если Не РеквизитыДляПроведения.НомерЛисткаНетрудоспособности = "" Тогда
			УчтенныеДанныеСреднегоЗаработкаФСС = РеквизитыДляПроведения.Ссылка.СреднийЗаработокФСС.Выгрузить();	
			ДанныеДляПроведения.Вставить("УчтенныеДанныеСреднегоЗаработкаФСС",УчтенныеДанныеСреднегоЗаработкаФСС);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
				
КонецФункции

Процедура ЗаполнитьДанныеРеестраОтпусков(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	Если Не РеквизитыДляПроведения.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРеестраОтпусков = КадровыйУчетРасширенный.ТаблицаРеестраОтпусков();
	
	Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.Номер);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.Ссылка КАК ДокументОснование,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачалаПериодаОтсутствия,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончанияПериодаОтсутствия,
	|	""Отпуск по беременности и родам"" КАК ВидОтпуска,
	|	БольничныйЛист.ФизическоеЛицо
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерСтр = 1;
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Номер = НомерСтр;
		
		НоваяСтрока.КоличествоДнейОтпуска = (КонецДня(Выборка.ДатаОкончанияПериодаОтсутствия) - НачалоДня(Выборка.ДатаНачалаПериодаОтсутствия))/86400;
		
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.ДатаНачалаПериодаОтсутствия);
		
		НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
		
		НоваяСтрока.Основание = Основание;
		
		НомерСтр = НомерСтр + 1;
		
	КонецЦикла;	
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраОтпусков", ДанныеРеестраОтпусков);
	
КонецПроцедуры

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка,
	|	БольничныйЛист.Организация,
	|	БольничныйЛист.ПериодРегистрации,
	|	БольничныйЛист.ДокументРассчитан,
	|	БольничныйЛист.ПорядокВыплаты,
	|	БольничныйЛист.Дата,
	|	БольничныйЛист.ПланируемаяДатаВыплаты,
	|	БольничныйЛист.ДатаНачалаСобытия,
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныйЛист.ОсвобождатьСтавку,
	|	БольничныйЛист.ПричинаНетрудоспособности,
	|	БольничныйЛист.ДатаНачала,
	|	БольничныйЛист.ДатаОкончания,
	|	БольничныйЛист.НазначитьПособие,
	|	БольничныйЛист.ДатаНачалаОплаты,
	|	БольничныйЛист.ДатаОкончанияОплаты,
	|	БольничныйЛист.ФизическоеЛицо,
	|	БольничныйЛист.ИсправленныйДокумент,
	|	БольничныйЛист.Номер,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.СлучайУходаЗаБольнымРебенком,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход1,
	|	БольничныйЛист.ДатаНачалаРодственник1,
	|	БольничныйЛист.ДатаОкончанияРодственник1,
	|	БольничныйЛист.РодственникЗаКоторымОсуществляетсяУход2,
	|	БольничныйЛист.ДатаНачалаРодственник2,
	|	БольничныйЛист.ДатаОкончанияРодственник2
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.БольничныйЛист.РаспределениеПоТерриториямУсловиямТруда КАК БольничныйЛистРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	БольничныйЛистРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ПериодРегистрации, ДокументРассчитан, ПорядокВыплаты, Дата, ПланируемаяДатаВыплаты, 
		| ДатаНачалаСобытия, Сотрудник, ПериодРасчетаСреднегоЗаработкаНачало, ПериодРасчетаСреднегоЗаработкаОкончание, ОсвобождатьСтавку, ПричинаНетрудоспособности, 
		| ДатаНачала, ДатаОкончания, НазначитьПособие, ДатаНачалаОплаты, ДатаОкончанияОплаты, ФизическоеЛицо, ИсправленныйДокумент, Номер, СлучайУходаЗаБольнымРебенком, 
		| НомерЛисткаНетрудоспособности,
		| РодственникЗаКоторымОсуществляетсяУход1, ДатаНачалаРодственник1, ДатаОкончанияРодственник1, РодственникЗаКоторымОсуществляетсяУход2, ДатаНачалаРодственник2, 
		| ДатаОкончанияРодственник2, РаспределениеПоТерриториямУсловиямТруда");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Расчет среднего заработка
	УчетПособийСоциальногоСтрахованияРасширенный.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.БольничныйЛист");
	
	Если Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты,ЧтениеРабочегоВремениНачисленнойЗарплаты", , Ложь) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни") Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Документ.БольничныйЛист";
			КомандаПечати.Идентификатор = "ПФ_MXL_ДоплатаЗаДниНетрудоспособности";
			КомандаПечати.Представление = НСтр("ru='Приказ о доплате за дни болезни';uk='Наказ про доплату за дні хвороби'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
			КомандаПечати.Порядок = 10; 
		КонецЕсли; 
	КонецЕсли; 
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);
	
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ДоплатаЗаДниНетрудоспособности") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ДоплатаЗаДниНетрудоспособности", НСтр("ru='Доплата за дни нетрудоспособности';uk='Доплата за дні непрацездатності'"),
		ТабличныйДокументДоплатаЗаДниНетрудоспособности(УправлениеПечатью.МакетПечатнойФормы("Документ.БольничныйЛист.ПФ_MXL_ДоплатаЗаДниНетрудоспособности", ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм), МассивОбъектов, ОбъектыПечати), ,
		"Документ.БольничныйЛист.ПФ_MXL_ДоплатаЗаДниНетрудоспособности",, Истина);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати,,, ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка", НСтр("ru='Расчет среднего заработка';uk='Розрахунок середнього заробітку'"), ТабличныйДокумент,,,,Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаСреднегоЗаработка.ДанныеДокументовРасчетаСреднегоЗаработка.
//   ИмяМакета          - строка, вариант печати расчета среднего заработка.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТруда,
	|	БольничныйЛист.Организация,
	|	БольничныйЛист.Дата КАК ДатаДокумента,
	|	БольничныйЛист.Номер КАК НомерДокумента,
	|	БольничныйЛист.ДатаНачала КАК ДатаНачалаОтсутствия,
	|	БольничныйЛист.ДатаОкончания КАК ДатаОкончанияОтсутствия,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	БольничныйЛист.СреднийДневнойЗаработок,
	|	БольничныйЛист.НомерЛисткаНетрудоспособности,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаНачало,
	|	БольничныйЛист.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	БольничныйЛист.УчитыватьЗаработокПредыдущихСтрахователей,
	|	БольничныйЛист.ПричинаНетрудоспособности,
	|	БольничныйЛист.ОграничениеПособия
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО БольничныйЛист.Организация = Организации.Ссылка
	|		ПО ДанныеДокументов.Ссылка = БольничныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период";	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработкаФСС.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка();
			
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
			ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
			ПривестиДатуКСтрокеНачалоОкончаниеПериода(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);
			
			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			ДанныеДокумента.ПараметрыРасчета = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ПараметрыРасчета;
			ДанныеДокумента.ДанныеРасчетаСреднего = ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС.ДанныеРасчетаСреднего;
			
			ДанныеДокументов.Добавить(ДанныеДокумента);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура ПривестиДатуКСтрокеНачалоОкончаниеПериода(Структура, Выборка)
	
	Структура.ПериодРасчетаСреднегоЗаработкаМесяцНачало = Формат(Выборка.ПериодРасчетаСреднегоЗаработкаНачало, "ДФ='ММММ гггг'");
	Структура.ПериодРасчетаСреднегоЗаработкаМесяцОкончание = Формат(Выборка.ПериодРасчетаСреднегоЗаработкаОкончание, "ДФ='ММММ гггг'");
		
 КонецПроцедуры	


Процедура СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Сотрудник,
	|	БольничныйЛист.ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости");
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("СреднийЗаработокОбщий",		 				Ложь);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Истина);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru='Больничный лист';uk='Лікарняний лист'"));
КонецПроцедуры 
	
// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов);	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт 
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);	
КонецФункции

#КонецОбласти


#Область ПечатьДоплатаЗаДниНетрудоспособности

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о доплате за дни нетрудоспособности.
//
// Параметры:
//	МассивОбъектов - массив сотрудников.
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в
//                   которой был выведен объект).
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументДоплатаЗаДниНетрудоспособности(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ДоплатаЗаДниНетрудоспособности";
	
	ДанныеДляПечатиРасчетаПособия = ДанныеДляПечатиДоплатыЗаДниНетрудоспособности(МассивОбъектов);
	
	ВывестиДанныеДоплатыЗаДниНетрудоспособностиВТабличныйДокумент(Макет, ДокументРезультат, ДанныеДляПечатиРасчетаПособия, ОбъектыПечати);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДляПечатиДоплатыЗаДниНетрудоспособности(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка,
	|	БольничныеЛисты.Руководитель,
	|	БольничныеЛисты.ДатаНачала КАК Дата
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныеЛисты
	|ГДЕ
	|	БольничныеЛисты.Ссылка В(&МассивСсылок)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Руководитель"), "ВТДанныеДокументов");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныеЛисты.Ссылка,
	|	БольничныеЛисты.Сотрудник,
	|	БольничныеЛисты.ФизическоеЛицо,
	|	БольничныеЛисты.ПроцентДоплатыЗаДниНетрудоспособности КАК ПроцентДоплаты,
	|	БольничныеЛисты.ДоплачиватьДоСреднегоЗаработка,
	|	БольничныеЛисты.Номер КАК НомерДокумента,
	|	БольничныеЛисты.Дата КАК ДатаДокумента,
	|	БольничныеЛисты.НомерЛисткаНетрудоспособности КАК НомерЛН,
	|	БольничныеЛисты.ДатаНачала,
	|	БольничныеЛисты.ДатаОкончания,
	|	БольничныеЛисты.ДатаНачалаОплаты,
	|	БольничныеЛисты.ДатаОкончанияОплаты,
	|	ВЫБОР
	|		КОГДА ОрганизацияСправочник.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ОрганизацияСправочник.Наименование
	|		ИНАЧЕ ОрганизацияСправочник.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ФИООтветственныхЛиц.РасшифровкаПодписи КАК РуководительРасшифровкаПодписи,
	|	БольничныеЛисты.ДолжностьРуководителя
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныеЛисты
	|		ПО ВТДанныеДокументов.Ссылка = БольничныеЛисты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
	|		ПО (БольничныеЛисты.Ссылка = ФИООтветственныхЛиц.Ссылка)
	|			И (БольничныеЛисты.ДатаНачала = ФИООтветственныхЛиц.Дата)
	|			И (БольничныеЛисты.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОрганизацияСправочник
	|		ПО (БольничныеЛисты.Организация = ОрганизацияСправочник.Ссылка)";
	
	Результат = Запрос.Выполнить();              
	
	СписокСотрудников = Результат.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, "ФамилияИО,ИОФамилия,Подразделение,Должность,ТабельныйНомер,Пол,ФИОПолные");
	
	Возврат Новый Структура("ДанныеЛН, КадровыеДанныеСотрудников", Результат.Выбрать(), КадровыеДанныеСотрудников);
	
КонецФункции 

Процедура ВывестиДанныеДоплатыЗаДниНетрудоспособностиВТабличныйДокумент(Макет, ДокументРезультат, ДанныеДляПечатиРасчетаПособия, ОбъектыПечати)
	
	ДанныеЛН					= ДанныеДляПечатиРасчетаПособия.ДанныеЛН;
	КадровыеДанныеСотрудников 	= ДанныеДляПечатиРасчетаПособия.КадровыеДанныеСотрудников;
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеЛН.Следующий() Цикл
		
		Если НЕ ДанныеЛН.ДоплачиватьДоСреднегоЗаработка Тогда
			ТекстСообщения = НСтр("ru='%1: Доплата за дни временной нетрудоспособности не производится.';uk='%1: Доплата за дні тимчасової непрацездатності не проводиться.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеЛН.Ссылка));
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало 		= ДокументРезультат.ВысотаТаблицы + 1;

		СекцияПриказ 			= Макет.ПолучитьОбласть("Приказ");
		
		ЗаполняемыеСвойства = "НаименованиеОрганизации,ПроцентДоплаты,НомерДокумента,ДатаДокумента,НомерЛН,ДатаНачала,ДатаОкончания,ДатаНачалаОплаты,ДатаОкончанияОплаты,РуководительРасшифровкаПодписи,ДолжностьРуководителя";
		ЗаполнитьЗначенияСвойств(СекцияПриказ.Параметры, ДанныеЛН, ЗаполняемыеСвойства);
		ФорматнаяСтрокаДаты = "ДЛФ=D";
		СекцияПриказ.Параметры.НаименованиеОрганизации 	= СокрЛП(СекцияПриказ.Параметры.НаименованиеОрганизации);
		СекцияПриказ.Параметры.ДатаНачала 				= Формат(СекцияПриказ.Параметры.ДатаНачала, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаОкончания 			= Формат(СекцияПриказ.Параметры.ДатаОкончания, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаНачалаОплаты 		= Формат(СекцияПриказ.Параметры.ДатаНачалаОплаты, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаОкончанияОплаты 		= Формат(СекцияПриказ.Параметры.ДатаОкончанияОплаты, ФорматнаяСтрокаДаты);
		СекцияПриказ.Параметры.ДатаДокумента 			= Формат(СекцияПриказ.Параметры.ДатаДокумента, ФорматнаяСтрокаДаты);
		
		ЗаполняемыеСвойства = "ФамилияИО,Подразделение,Должность,ТабельныйНомер";
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(ДанныеЛН.Сотрудник);
		ЗаполнитьЗначенияСвойств(СекцияПриказ.Параметры, КадровыеДанныеСотрудника, ЗаполняемыеСвойства);
		
		ФИОВПадеже = КадровыеДанныеСотрудника.ФИОПолные;
		ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(КадровыеДанныеСотрудника.ФИОПолные), 2, ФИОВПадеже, КадровыеДанныеСотрудника.Пол);
		СекцияПриказ.Параметры.ФамилияИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИОВПадеже);
		
		СекцияПриказ.Параметры.СотрудникРасшифровкаПодписи = КадровыеДанныеСотрудника.ИОФамилия;
		
		ДокументРезультат.Вывести(СекцияПриказ);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, 
		НомерСтрокиНачало, ОбъектыПечати, ДанныеЛН.Ссылка);

	КонецЦикла;		
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ДанныеДляРасчетаСреднегоЗаработка

// Возвращает описание документов с полями ПараметрыРасчета и ДанныеРасчетаСреднего. 
// 	ПараметрыРасчета - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
// 	ДанныеРасчетаСреднего - см. УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.ДанныеРасчетаСреднегоЗаработкаФСС
//
// Параметры:
//	 МассивСсылок 		- массив ссылок на документ БольничныйЛист, по которым получаем данные.
// 
// Возвращаемое значение: Соответсвие, ключ - ссылка на больничный лист, значение - Структура("ПараметрыРасчета,ДанныеРасчетаСреднего") 
//
Функция ДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(МассивСсылок) Экспорт
	
	ДанныеДокументов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);

	УчетПособийСоциальногоСтрахования.СоздатьВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС(Запрос.МенеджерВременныхТаблиц, МассивСсылок);
	  	
	СоздатьВТКадровыеДанныеСотрудниковБольничныхЛистов(Запрос, МассивСсылок);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Сотрудник,
	|	ДанныеДокументов.ДатаНачалаСобытия,
	|	ДанныеДокументов.ПрименятьПредельнуюВеличину,
	|	ДанныеДокументов.ИспользоватьДниБолезниУходаЗаДетьми,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаПервыйГод,
	|	ДанныеДокументов.ПериодРасчетаСреднегоЗаработкаВторойГод,
	|	ДанныеДокументов.УчитыватьЗаработокПредыдущихСтрахователей,
	|	ДанныеДокументов.РасчетПоПравилам2010Года,
	|	ДанныеДокументов.ДоляНеполногоВремени,
	|	ДанныеДокументов.МинимальныйРазмерОплатыТрудаРФ,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДанныеДокументовДляРасчетаСреднегоЗаработкаФСС КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО ДанныеДокументов.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И ДанныеДокументов.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период";	
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ТаблицыДанныхОСреднем = УчетПособийСоциальногоСтрахования.ТаблицыДанныхСреднегоЗаработкаФСС("БольничныйЛист", МассивСсылок);
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС();
			ЗаполнитьЗначенияСвойств(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, Выборка);

			ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС = УчетПособийСоциальногоСтрахования.ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС(РеквизитыДокументаДляРасчетаСреднегоЗаработкаФСС, ТаблицыДанныхОСреднем);
			
			ДанныеДокументов.Вставить(Выборка.Ссылка, ДанныеДокументаДляРасчетаСреднегоЗаработкаФСС);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ДанныеДокументов;
	
КонецФункции

#КонецОбласти 

Функция ДатаНаступленияСтраховогоСлучая(Ссылка) Экспорт 
	
	ДатаНаступленияСтраховогоСлучая = Неопределено;
	
	Если ЗначениеЗаполнено(Ссылка) И ТипЗнч(Ссылка) = Тип("ДокументСсылка.БольничныйЛист") Тогда
		ДатаНаступленияСтраховогоСлучая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаНачалаСобытия");
	КонецЕсли;
	
	Возврат ДатаНаступленияСтраховогоСлучая;	
	
КонецФункции

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы.

// Процедура заполняет процент доплаты до среднего заработка за дни нетрудоспособности.
//
Процедура ЗаполнитьПроцентДоплатыЗаДниНетрудоспособности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольничныйЛист.Ссылка
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|ГДЕ
	|	БольничныйЛист.ДоплачиватьДоСреднегоЗаработка = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.ПроцентДоплатыЗаДниНетрудоспособности = 100;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;	                 
	КонецЕсли;
	
КонецПроцедуры

Функция ПериодОтсутствия(ПериодыОтсутствий) Экспорт
	
	ПериодОтсутствия = Новый Структура("НачалоПериода,ОкончаниеПериода", '00010101', '00010101');
	
	Для каждого Период Из ПериодыОтсутствий Цикл
		Если ЗначениеЗаполнено(Период.НачалоПериода) Тогда
			Если НЕ ЗначениеЗаполнено(ПериодОтсутствия.НачалоПериода) Тогда
				ПериодОтсутствия.НачалоПериода = Период.НачалоПериода;
			Иначе
				ПериодОтсутствия.НачалоПериода = Мин(ПериодОтсутствия.НачалоПериода, Период.НачалоПериода);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Период.ОкончаниеПериода) Тогда
			ПериодОтсутствия.ОкончаниеПериода = Макс(ПериодОтсутствия.ОкончаниеПериода, Период.ОкончаниеПериода);
		КонецЕсли;	   
	КонецЦикла;
	
	Возврат ПериодОтсутствия;
	
КонецФункции
Функция ПериодыОтсутствий(Объект) Экспорт
	
	ПериодыОтсутствий = Новый ТаблицаЗначений;
	ПериодыОтсутствий.Колонки.Добавить("НачалоПериода");
	ПериодыОтсутствий.Колонки.Добавить("ОкончаниеПериода");
	
	КонецИнтервала = Дата(1,1,1);
	
	ПериодОтсутствия = ПериодыОтсутствий.Добавить();
	ПериодОтсутствия.НачалоПериода = Объект.ДатаНачала;
	ПериодОтсутствия.ОкончаниеПериода  = Объект.ДатаОкончания;
	КонецИнтервала = Макс(КонецИнтервала, ПериодОтсутствия.ОкончаниеПериода);
	
	
	Возврат ПериодыОтсутствий;
	
КонецФункции

#КонецОбласти

#КонецЕсли
