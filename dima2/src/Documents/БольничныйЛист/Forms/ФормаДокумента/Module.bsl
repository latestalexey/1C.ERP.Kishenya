&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда  // форм	а нового
		ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
		ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", Ложь, Ложь, Ложь);
		ДоступноИзменение = Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеПособийФСС");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьПараметрыВыбораИДоступностьНачислений(ЭтаФорма);	
	
	Если Параметры.Ключ.Пустая() Тогда  // форма нового
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
			Объект.Сотрудник = Параметры.Сотрудник;
			ОбработатьИзменениеСотрудникаНаСервере();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			// Заполнение "пустого" документа.
			ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
				"Объект.Организация",
				"Объект.Ответственный",
				"Объект.ПериодРегистрации");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
			
		Иначе
			// Заполнение "заполненного" документа.
			ЗначенияДляЗаполнения = Новый Структура("Ответственный, Месяц",
				"Объект.Ответственный",
				"Объект.ПериодРегистрации");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		
		УстановитьПроцентДоплатыЗаДниНетрудоспособности();
		
		// Заполняем реквизиты единственными начислениями
		// вид оплаты пособия.
		ЗаполнитьНачисленияВДокументе();
		
		ЗаполнитьПериодРасчетаСреднегоЗаработка(Истина);
		
		Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
			
			ВремяНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
			ПерезаполнитьИРассчитатьДокумент(Ложь);
			ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("РасчетДокументаБольничныйЛист", ВремяНачалаЗамера);
			
		Иначе
			ОчиститьРассчитанныеДанные();
			ПерезаполнятьСреднийЗаработок = Истина;
		КонецЕсли;	
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
	Иначе
		
		Если Параметры.Свойство("ВыполнитьПерезаполнениеСведенийОСреднемЗаработке") Тогда
			
			ПерезаполнятьСреднийЗаработок = Истина;
			Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
				
				ВремяНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
				ПерезаполнитьИРассчитатьДокумент(Ложь);
				ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("РасчетДокументаБольничныйЛист", ВремяНачалаЗамера);
				
			Иначе
				ОчиститьРассчитанныеДанные();
			КонецЕсли;	
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если РегистрацияНачисленийДоступна Тогда 
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КонецЕсли;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
		Если Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.ДокументРассчитан Тогда 
			ТолькоПросмотр = Истина;
			ЭтотОбъект.Элементы.НадписьСтаж.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
	
	УстановитьСвойствоРассчитатьЗарплату();
	УстановитьЗаголовокФлажкаРассчитатьЗарплату();
	
	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	ОпределитьВариантДоплаты();
	
	ОбновитьФормуПоВариантуДоплаты();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "Сотрудник");
	КонецЕсли; 
	
	ОкончательныйРасчетНДФЛ = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнениеВыполнено = Ложь;
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РасчетНеобходимоВыполнить Тогда
		Если НеобходимоПерезаполнитьНачисления Тогда
			ПерезаполнитьИРассчитатьНачисления();
		Иначе
			РассчитатьНачисления();
		КонецЕсли; 
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПроведениеДокументаБольничныйЛист");
	КонецЕсли;
	     
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РеквизитыВДанные(ТекущийОбъект);
	Если ЗаполнениеВыполнено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыСреднегоЗаработка", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыЗарплаты", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Ссылка", ЭтаФорма.Объект.Ссылка);
	Оповестить("ДокументБольничныйЛистПослеЗаписи", ПараметрыОповещения, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Оповестить("ИсправленДокумент", , Объект.ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
// Конец СтандартныеПодсистемы.Свойства

	Если ИспользуетсяРасчетЗарплаты Тогда
		УчетПособийОбработкаОповещения(ИмяСобытия, Параметр, Источник);
		
		Если ИмяСобытия = "ИзмененСтажФизическогоЛица" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьСтажиСотрудника();
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеНДФЛНаСервере(Параметр);
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаУдержаний" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеУдержанийНаСервере(Параметр);
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
			ОбновитьОбъектыНачисленияИзФормы(ЭтаФорма);
		ИначеЕсли ИмяСобытия = "ИзмененоРаспределениеИсточниковФинансирования" Тогда
			ЗарплатаКадрыРасширенныйКлиент.ОбработкаОповещенияИзмененияРаспределенияИсточниковФинансирования(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		ИначеЕсли (ИмяСобытия = "ИзмененоСторнированиеНачислений" Или ИмяСобытия = "ИсправленДокумент") И Источник = Объект.Ссылка Тогда
			ДанныеВРеквизиты();
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаВзносов" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеВзносовНаСервере(Параметр);
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
		КонецЕсли;
		Если ИмяСобытия = "ДокументБольничныйЛистПослеЗаписи" 
		И Источник.ВладелецФормы = ЭтаФорма Тогда
			ЗаполнитьОтсутствияПоДругимМестамРаботы();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтаФорма.НачисленоФСС <> 0 Тогда
		УстановитьПредставлениеОплаты();
	Иначе
		ЭтаФорма.ОплатыПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ИсточникВыбора.ВладелецФормы) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ВладелецФормы = ЭтаФорма И ЗначениеЗаполнено(ВыбранноеЗначение) 
		И ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.БольничныйЛист") Тогда
	    Объект.ПервичныйБольничныйЛист = ВыбранноеЗначение;
		УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтаФорма);
		ПервичныйБольничныйЛистПриИзмененииНаСервере();
		ВыполнитьПерезаполнениеИРасчетНачислений();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ОписаниеДокумента", ОписаниеДокумента(ЭтаФорма));
	ПараметрыДокумента.Вставить("ОписаниеТаблицФормы", СтруктураОписанияТаблицДляРаспределенияРезультата(ЭтаФорма));
	ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержаний(Отказ, ЭтаФорма, ПараметрыДокумента);
	
	// До проверки объекта создаем его, дозаполняем и сами проверяем.
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		ОбработатьСообщенияПользователю();
	КонецЕсли;
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Отсутствия по другим местам работы.
&НаКлиенте
Процедура ОтсутствияПоДругимМестамРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОтсутствияПоДругимМестамРаботыСсылка" Тогда
		
		СтандартнаяОбработка = Ложь;	
		
		Строка = ЭтотОбъект.ОтсутствияПоДругимМестамРаботы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ПоказатьЗначение(, Строка.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	СкорректироватьДатуНачалаОплаты();
	СкорректироватьДатуОкончания();
	
	ДатаНачалаПриИзмененииНаСервере();
	
	ПриИзмененииДатыОсвобожденияОтРаботы();

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииДатыОсвобожденияОтРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПособияПриИзменении(Элемент)
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяПродолжениемБолезниПриИзменении(Элемент)
	
	ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере();
	
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ИзменениеСотрудникаВФормеДокументаБольничныйЛист");	
	
	ОбработатьИзменениеСотрудникаНаСервере();
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНарушенияРежимаПриИзменении(Элемент)
	
	ВыполнитьПерезаполнениеИРасчетНачислений();

КонецПроцедуры

&НаКлиенте
Процедура ДоплачиватьДоСреднегоЗаработкаПриИзменении(Элемент)
	
	УстановитьСвойстваПолейДоплатыЗаДниНетрудоспособности(ЭтотОбъект);
	
	ДоплачиватьДоСреднегоЗаработкаПриИзмененииНаСервере();
	
	ВыполнитьПерезаполнениеИРасчетНачислений();

КонецПроцедуры

&НаКлиенте
Процедура ДоплачиватьДоДенежногоСодержанияПриИзменении(Элемент)

	УстановитьСвойстваПолейДоплатыЗаДниНетрудоспособности(ЭтаФорма);
	
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
	ОбновитьФормуПоВариантуДоплаты();
		
КонецПроцедуры

&НаКлиенте
Процедура ПроцентДоплатыЗаДниНетрудоспособностиПриИзменении(Элемент)
	
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаНетрудоспособностиПриИзменении(Элемент)
	
	ПричинаНетрудоспособностиПриИзмененииНаСервере();
	
	ВыполнитьПерезаполнениеИРасчетНачислений();
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
	ПриИзмененииМесяцаНачисления();

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
		
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаЗаявлениеНаВыплатуПособияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаВводДополнительныхДанныхНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПорядокВыплатыПриИзменении(Элемент)
	
	РассчитатьСПерезаполнением = Неопределено;
	УстановитьВидимостьУдержаний(ЭтаФорма);
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	БылоРассчитатьЗарплату = Объект.РассчитатьЗарплату;
	УстановитьСвойствоРассчитатьЗарплату();
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
	Если Объект.РассчитатьЗарплату И БылоРассчитатьЗарплату <> Объект.РассчитатьЗарплату Тогда 
		ВыполнитьПерезаполнениеИРасчетНачислений();
	Иначе
		ВыполнитьРасчетНачислений();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		ВыполнитьРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаОплатыПриИзменении(Элемент)
	
	УстановитьДоступностьВидаОплатыЗаСчетРаботодателя(ЭтаФорма);
	УстановитьДоступностьВидаНеоплачиваемогоВремени(ЭтаФорма);
	ОбновитьДнейОплатыПособия(ЭтаФорма);
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОплатыПриИзменении(Элемент)
	
	УстановитьДоступностьВидаОплатыЗаСчетРаботодателя(ЭтаФорма);
	УстановитьДоступностьВидаНеоплачиваемогоВремени(ЭтаФорма);
	ОбновитьДнейОплатыПособия(ЭтаФорма);
	ДатаОкончанияОплатыПриИзмененииНаСервере();
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименятьЛьготыПриНачисленииПособияПриИзменении(Элемент)
	
	УстановитьДоступностьЛьготаПоПособию(ЭтаФорма);

	Если НЕ Объект.ПрименятьЛьготыПриНачисленииПособия Тогда
		Объект.ЛьготаПоПособию = Неопределено;
	Иначе
		Объект.ЛьготаПоПособию = ПредопределенноеЗначение("Перечисление.ОснованияЛьготПоПособию.Чернобыль");
	КонецЕсли;
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
	
	ВыполнитьПерезаполнениеИРасчетНачислений();
	УстановитьВидимостьСуммыЧернобыльскойЛьготы(ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготаПоПособиюПриИзменении(Элемент)
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
	ВыполнитьПерезаполнениеИРасчетНачислений();
	УстановитьВидимостьСуммыЧернобыльскойЛьготы(ЭтаФорма)
КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыБезЛьготПриИзменении(Элемент)
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ОграничениеПособияБезЛьготПриИзменении(Элемент)
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьЗаработокПредыдущихСтрахователейПриИзменении(Элемент)
	Если Не Объект.УчитыватьЗаработокПредыдущихСтрахователей Тогда
		Объект.ПериодРасчетаСреднегоЗаработкаНачало = Дата('00010101');
	КонецЕсли;
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	ВыполнитьПерезаполнениеИРасчетНачислений();

КонецПроцедуры

&НаКлиенте
Процедура ПроцентОплатыПриИзменении(Элемент)
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыПособияПриИзменении(Элемент)
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ВидОплатыЗаСчетРаботодателяПриИзменении(Элемент)
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ВидНеоплачиваемогоВремениПриИзменении(Элемент)
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаДоплатыПриИзменении(Элемент)
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументРассчитанПриИзменении(Элемент)
	ДокументРассчитанПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументРассчитанПриИзмененииНаСервере()
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПособиеПриИзменении(Элемент)
	
	УстановитьДоступностьПолейОписывающихПараметрыРасчетаПособия(ЭтаФорма);
	
	УстановитьДоступностьВидаОплатыПособия(ЭтаФорма);
	УстановитьДоступностьВидаНеоплачиваемогоВремени(ЭтаФорма);
	УстановитьПараметрыВыбораВидаОплатыПособия(ЭтаФорма);
	УстановитьПараметрыВыбораВидаНеоплачиваемогоВремени(ЭтаФорма);
	ОбновитьДнейОплатыПособия(ЭтаФорма);
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаСобытияПриИзменении(Элемент)
	
	
	// Больничный за счет работодателя.
	УстановитьДоступностьВидаОплатыЗаСчетРаботодателя(ЭтаФорма);
	
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
	
	ПриИзмененииДатыНачалаСобытия();
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
КонецПроцедуры


&НаКлиенте
Процедура НадписьПервичныйЛистокНетрудоспособностиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЕстьФиксированныеДанные(ЭтаФорма) Тогда
		Оповещение = Новый ОписаниеОповещения("НадписьПервичныйЛистокНетрудоспособностиНажатиеПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Ручные исправления таблиц документа будут потеряны. Продолжить?';uk='Ручні виправлення таблиць документа будуть втрачені. Продовжити?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		НадписьПервичныйЛистокНетрудоспособностиНажатиеПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПервичныйЛистокНетрудоспособностиНажатиеПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ПараметрыОтбора.Вставить("ДатаОкончания", НачалоДня(НачалоДня(Объект.ДатаНачала)-1));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ПараметрыОтбора.Вставить("Сотрудник", Объект.Сотрудник);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПричинаНетрудоспособности) Тогда
		ПараметрыОтбора.Вставить("ПричинаНетрудоспособности", Объект.ПричинаНетрудоспособности);
	КонецЕсли;
	
	ПараметрыОткрытияФормыВыбора = Новый Структура;
	ПараметрыОткрытияФормыВыбора.Вставить("РежимВыбораПервичногоБольничногоЛиста", Истина);
	Если ПараметрыОтбора.Количество() > 0 Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("Отбор", ПараметрыОтбора);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ПервичныйБольничныйЛист", Объект.ПервичныйБольничныйЛист);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыОткрытияФормыВыбора.Вставить("ТекущийДокумент", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Документ.БольничныйЛист.ФормаВыбора", ПараметрыОткрытияФормыВыбора, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСтажНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЕстьФиксированныеДанные(ЭтаФорма) Тогда
		Оповещение = Новый ОписаниеОповещения("НадписьСтажНажатиеПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Ручные исправления таблиц документа будут потеряны. Продолжить?';uk='Ручні виправлення таблиць документа будуть втрачені. Продовжити?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		НадписьСтажНажатиеПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура НадписьСтажНажатиеПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;

	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Текст = НСтр("ru='Не выбран сотрудник';uk='Не вибрано співробітник'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.Сотрудник", ,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Текст = НСтр("ru='Не заполнена дата начала освобождения от работы';uk='Не заповнено дата початку звільнення від роботи'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "Объект.ДатаНачала", ,Отказ);
	КонецЕсли;
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ЗапрашиваемыеВидыСтажа = ВидыСтажаВЛисткеНетрудоспособности();
	ВидыСтажа = Новый ФиксированныйМассив(ЗапрашиваемыеВидыСтажа.ВидыСтажа);
	НеобязательныеВидыСтажа = Новый ФиксированноеСоответствие(ЗапрашиваемыеВидыСтажа.НеобязательныеВидыСтажа);
	
	КадровыйУчетРасширенныйКлиент.ОткрытьФормуРедактированияСтажейСотрудника(ЭтотОбъект, Объект.Сотрудник, Объект.ДатаНачалаСобытия, ВидыСтажа, , , , НеобязательныеВидыСтажа);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗарплатуПриИзменении(Элемент)
	
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Начисления

&НаКлиенте
Процедура НачисленияПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);	
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	ОбновитьОбъектыНачисленияИзФормы(ЭтаФорма);
	Если ЭтаФорма.НачисленоФСС <> 0 Тогда
		УстановитьПредставлениеОплаты();
	Иначе
		ЭтаФорма.ОплатыПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыНачислений = ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыНачислений, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений, Ложь, Истина);
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	ОбновитьОбъектыНачисленияИзФормы(ЭтаФорма);
	Если ЭтаФорма.НачисленоФСС <> 0 Тогда
		УстановитьПредставлениеОплаты();
	Иначе
		ЭтаФорма.ОплатыПредставление = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненностьДанныхИнформационныйТекстОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УчетСреднегоЗаработкаКлиент.ПоказатьПричиныПерерасчетаСреднегоЗаработка(Объект.Ссылка,
		СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НачисленияПерерасчет

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	ОбновитьОбъектыНачисленияИзФормы(ЭтаФорма);
	Если ЭтаФорма.НачисленоФСС <> 0 Тогда
		УстановитьПредставлениеОплаты();
	Иначе
		ЭтаФорма.ОплатыПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);	
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	РасчетЗарплатыРасширенныйКлиент.ПередУдалениемСтрокиПерерасчета(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетРезультатПриИзменении(Элемент)
	ОбновитьПерерасчетИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Ложь, Истина); 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(Объект.Ссылка, "БольничныйЛист");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Сторнировать(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Сторнировать(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "БольничныйЛист");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(Объект.ИсправленныйДокумент, "БольничныйЛист");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКСторно(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКСторно(ЭтаФорма.ДокументСторно);
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокЗавершение", ЭтотОбъект);
	УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаФСС(ПараметрыРедактированияСреднегоЗаработка(), ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт 
	
	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнятьСреднийЗаработок = Ложь;

	ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования);
	ВыполнитьПерезаполнениеИРасчетНачислений();

КонецПроцедуры

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ОчиститьСообщения();
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма)) Тогда
		ПерезаполнитьИРассчитатьНачисления(Истина);
	Иначе 
		ОчиститьРассчитанныеДанные();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеУдержаний(Команда)
	
	РасчетЗарплатыРасширенныйКлиент.ОткрытьФормуПодробнееОРасчетеУдержаний(Объект, "БольничныйЛист", ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Команда)
	
	УчетНДФЛКлиентРасширенный.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект, "БольничныйЛист", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеВзносов(Команда)
	
	УчетСтраховыхВзносовКлиент.ОткрытьФормуПодробнееОРасчетеВзносов(Объект, "БольничныйЛист", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежноеСодержание(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьОткрытьДенежноеСодержаниеЗавершение", ЭтотОбъект);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
		Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(Объект, "БольничныйЛист","СохраняемоеДенежноеСодержание", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Оповещение);
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ОформитьБольничныйСовместителю(Команда)
	
	Совместитель = Неопределено;
	ОрганизацияСовместителя = Неопределено;
	
	Если ЭтотОбъект.ДругиеСотрудникиФизическогоЛица.Количество() = 1 Тогда
		ОрганизацияСовместителя = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Организация;
		Совместитель = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Сотрудник;
	КонецЕсли;
	
	ОткрытьФормуНовогоБольничногоСовместителя(Совместитель, ОрганизацияСовместителя);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения)
	
	ПараметрыДляРаспределения.ОписаниеДокумента       = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	ОтражениеЗарплатыВБухучетеРасширенный.РаспределитьЗависимыеРезультатыВФорме(ЭтаФорма, ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата(Форма) Экспорт

	ОписанияТаблиц = Новый Структура;
	ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
	ОписанияТаблиц.Вставить("ПогашениеЗаймов", ОписаниеТаблицыПогашениеЗаймов());
	
	Возврат ОписанияТаблиц;

КонецФункции

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	НачатьИнициализациюФормы();
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы();

	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	Если ЭтаФорма.НачисленоФСС <> 0 Тогда
		УстановитьПредставлениеОплаты();
	Иначе
		ЭтаФорма.ОплатыПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы()

	// Устанавливаем значения реквизитов формы.
	ДоступноИзменение = Пользователи.РолиДоступны("ПолныеПрава,ДобавлениеИзменениеПособийФСС");
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	УстановитьДоступностьРегистрацииНачислений();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ЗаполнитьРеквизитФормыНазначенияРасчетаДенежногоСодержания(ЭтаФорма);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПрочитатьПостоянныеКадровыеДанныеСотрудника();
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	УстановитьВидимостьОтсутствияПоДругимМестамРаботы();
	
	ДополнитьФорму(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы()

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнитьФорму(Ложь);
	ДополнитьФорму();
	
	ПрочитатьДатуУвольненияСотрудника();
	ПрочитатьДатуПриемаСотрудника();
	УстановитьДоступностьПорядкаВыплаты();
	УстановитьВидимостьПерерасчетов();
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	УстановитьВидимостьУдержаний(ЭтаФорма);
	УстановитьВидимостьРасчетныхПолей();
	УстановитьИнфонадписьРасчетаСреднегоЗаработка(); 
	УстановитьСвойстваПоляПервичногоБольничногоЛиста(ЭтаФорма);
	УстановитьСвойстваПолейДоплатыЗаДниНетрудоспособности(ЭтаФорма);
	НастроитьЭлементыДополненияПричиныНетрудоспособности();
	УстановитьДоступностьПолейПоПервичномуБольничномуЛисту(ЭтаФорма);
	УстановитьДоступностьПолейОписывающихПараметрыРасчетаПособия(ЭтаФорма);
	УстановитьДоступностьУчитыватьДанныеСтрахователей(ЭтаФорма);
		
	УстановитьДоступностьЛьготаПоПособию(ЭтаФорма);

	// чтение данных
	ДанныеВРеквизиты();
	
	ДляСотрудникаВведенСтраховойСтаж = ДанныеОСтажеСотрудника().ДляСотрудникаВведенСтраховойСтаж;	
	
	ОбновитьНадписьСтаж(ЭтаФорма);
	ОбновитьНадписьСтажМенее182Дней(ЭтаФорма);
	
	УстановитьВидимостьПредупрежденияОНезаполненномСтаже();
	
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	ОбновитьПерерасчетИтог(ЭтаФорма);
	   	
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтаФорма);
	ОбновитьНадписьДнейОплатыПособия(ЭтаФорма);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	
	УстановитьФункциональныеОпцииФормы();
	
	
	ПерезаполнятьСреднийЗаработок = Истина;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		БылаПричинаНетрудоспособности = Объект.ПричинаНетрудоспособности;
	КонецЕсли;
	
	Если ЭтаФорма.НачисленоФСС <> 0 Тогда
		УстановитьПредставлениеОплаты();
	Иначе
		ЭтаФорма.ОплатыПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложеного создания.	
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		
		// Создание элементов.
		ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтаФорма, НСтр("ru='Расчет утвердил';uk='Розрахунок затвердив'"), , , "Рассчитал");
		ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
		КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		
	Иначе
	
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыУдержаний(), "Удержания", , Ложь,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыСохраняемоеДенежноеСодержание(), "Начисления", , Ложь,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		КонецЕсли;	
			
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(
			ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(
			ЭтаФорма,,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(
			ЭтаФорма,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура ПрочитатьПостоянныеКадровыеДанныеСотрудника()
	
	УстановитьДругихСотрудниковФизическогоЛица();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));

	УстановитьПривилегированныйРежим(Истина);
	
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРедактированияСреднегоЗаработка()
	
	ПараметрыРедактирования = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРедактированияСреднегоЗаработкаФССПоДокументу();
	ПараметрыРедактирования.ДокументСсылка = Объект.Ссылка;
	ПараметрыРедактирования.Сотрудник = Объект.Сотрудник;
	ПараметрыРедактирования.Организация = Объект.Организация;
	ПараметрыРедактирования.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРедактирования.НачалоПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРедактирования.ОкончаниеПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаОкончание; 
	ПараметрыРедактирования.ФиксПериодРасчета = Объект.ФиксПериодРасчетаСреднегоЗаработка; 
	ПараметрыРедактирования.ГодыПериодаРасчета = УчетПособийСоциальногоСтрахования.ГодыПериодаРасчетаСреднего(Объект);
	ПараметрыРедактирования.МесяцыПериодаРасчета = УчетПособийСоциальногоСтрахования.МесяцыПериодаРасчетаСреднего(Объект);
	ПараметрыРедактирования.СуммаПределаСредней = УчетПособийСоциальногоСтрахования.СуммаПределаСредней(Объект.ПериодРасчетаСреднегоЗаработкаОкончание);
	ПараметрыРедактирования.РучнаяКорректировкаСреднегоЗаработка = Объект.РучнаяКорректировкаСреднегоЗаработка;
	ПараметрыРедактирования.СреднийДневнойЗаработок = Объект.СреднийДневнойЗаработок;
	ПараметрыРедактирования.ПричинаНетрудоспособности = Объект.ПричинаНетрудоспособности;
	ПараметрыРедактирования.НомерЛисткаНетрудоспособности = Объект.НомерЛисткаНетрудоспособности;
	
	ПараметрыРедактирования.ПорядокРасчета = ПорядокРасчетаСреднегоЗаработкаФСС();
	ПараметрыРедактирования.ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРедактирования.ИспользоватьДниБолезниУходаЗаДетьми	= ПараметрыРедактирования.ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми;
	ПараметрыРедактирования.УчитыватьЗаработокПредыдущихСтрахователей = Объект.УчитыватьЗаработокПредыдущихСтрахователей;

	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьТаблицыДанныхСреднегоЗаработкаФССПоДокументу(Объект, ПараметрыРедактирования);
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

&НаСервере
Функция ДатыИзменений()
	
	// Создаем таблицу точек на оси времени и начислений которые с ними связаны
	// затем строим из этих точек интервалы.
	ДатыИзменений = Новый ТаблицаЗначений;
	ДатыИзменений.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ДатыИзменений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Если Не Объект.НазначитьПособие Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНачала;
		НоваяДата.Начисление = Объект.ВидНеоплачиваемогоВремени;
		Возврат ДатыИзменений;
	КонецЕсли;
	
	Если Объект.ДатаНачала < Объект.ДатаНачалаОплаты Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНачала;
		НоваяДата.Начисление = Объект.ВидНеоплачиваемогоВремени;
	КонецЕсли;
	
	ДатаНачалаОплатыЗаСчетФСС = Объект.ДатаНачалаСобытия + УчетПособийСоциальногоСтрахованияКлиентСервер.КоличествоДнейЗаСчетРаботодателя(Объект.ДатаНачалаСобытия, Объект.ПричинаНетрудоспособности) * УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	Если (Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание) 
		Или (Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание)
		Или (Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве) Тогда	
		
		Если ДатаНачалаОплатыЗаСчетФСС > Объект.ДатаНачалаОплаты Тогда
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачалаОплаты;
			НоваяДата.Начисление = Объект.ВидОплатыЗаСчетРаботодателя;
			// Оплата за счет ФСС
			Если ДатаНачалаОплатыЗаСчетФСС <= Объект.ДатаОкончанияОплаты Тогда
				НоваяДата = ДатыИзменений.Добавить();
				НоваяДата.Дата = ДатаНачалаОплатыЗаСчетФСС;
				НоваяДата.Начисление = Объект.ВидОплатыПособия;
			КонецЕсли;
		Иначе
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачалаОплаты;
			НоваяДата.Начисление = Объект.ВидОплатыПособия;
		КонецЕсли;
	Иначе
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНачалаОплаты;
		НоваяДата.Начисление = Объект.ВидОплатыПособия;
		
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияОплаты)
			И Объект.ДатаНачалаПоловиннойОплаты > Объект.ДатаНачалаОплаты
			И Объект.ДатаНачалаПоловиннойОплаты <= Объект.ДатаОкончанияОплаты Тогда
			НоваяДата = ДатыИзменений.Добавить();
			НоваяДата.Дата = Объект.ДатаНачалаПоловиннойОплаты;
			НоваяДата.Начисление = Объект.ВидОплатыПособия;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНарушенияРежима) 
		И Объект.ДатаНарушенияРежима > Объект.ДатаНачалаОплаты
		И Объект.ДатаНарушенияРежима <= Объект.ДатаОкончанияОплаты
		И ДатыИзменений.Найти(Объект.ДатаНарушенияРежима, "Дата") = Неопределено Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаНарушенияРежима;
		Если Объект.ДатаНарушенияРежима >= ДатаНачалаОплатыЗаСчетФСС 
			Или Не Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
			НоваяДата.Начисление = Объект.ВидОплатыПособия;
		Иначе
			НоваяДата.Начисление = Объект.ВидОплатыЗаСчетРаботодателя;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДатаОкончанияОплаты < Объект.ДатаОкончания Тогда
		НоваяДата = ДатыИзменений.Добавить();
		НоваяДата.Дата = Объект.ДатаОкончанияОплаты + УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
		НоваяДата.Начисление = Объект.ВидНеоплачиваемогоВремени;
	КонецЕсли;
	
	Возврат ДатыИзменений;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЛьготаПоПособию(Форма)
	
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат
	КонецЕсли;

	Доступен = Форма.Объект.ПрименятьЛьготыПриНачисленииПособия;
		
	Форма.Элементы.ЛьготаПоПособию.Доступность = Доступен;
	Форма.Элементы.ПроцентОплатыБезЛьгот.Доступность = Доступен;
	Форма.Элементы.ОграничениеПособияБезЛьгот.Доступность = Доступен;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьДнейОсвобожденияОтРаботы(Форма)
	
	Форма.НадписьДнейОсвобожденияОтРаботы = НадписьДнейВПериодеНетрудоспособности(Форма.Объект.ДатаНачала, Форма.Объект.ДатаОкончания);
	
	ОбновитьНадписьДнейОплатыПособия(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьДнейОплатыПособия(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Форма.Объект.ДнейОплаты) Тогда
		Если (Форма.Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.Профзаболевание") ИЛИ
			Форма.Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ТравмаНаПроизводстве") ИЛИ
			Форма.Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам")) Тогда
			Форма.НадписьДнейОплатыПособия = Строка(Форма.Объект.ДнейОплаты) + НСтр("ru=' дн.';uk=' дн.'")
		Иначе	
			Форма.НадписьДнейОплатыПособия = Строка(Форма.Объект.ДнейОплаты) + НСтр("ru=' дн.';uk=' дн.'") + ?(Форма.Объект.ДнейОплатыЗаСчетФСС > 0,НСтр("ru=', в т.ч. за счет ФСС ';uk=', в т. ч. за рахунок ФСС '") 
			+ Строка(Форма.Объект.ДнейОплатыЗаСчетФСС) + НСтр("ru=' дн.';uk=' дн.'"),"")
		КонецЕсли;	
	Иначе
		Форма.НадписьДнейОплатыПособия = "";	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДнейОплатыПособия(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Форма.Объект.ДатаНачалаОплаты) И ЗначениеЗаполнено(Форма.Объект.ДатаОкончанияОплаты)
		И Форма.Объект.ДатаНачалаОплаты <= Форма.Объект.ДатаОкончанияОплаты И Форма.Объект.НазначитьПособие Тогда
		ДнейОсвобожденияОтРаботы = КонецДня(Форма.Объект.ДатаОкончанияОплаты) - НачалоДня(Форма.Объект.ДатаНачалаОплаты) + 1;
		Форма.Объект.ДнейОплаты = ДнейОсвобожденияОтРаботы / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
		ОбновитьНадписьДнейОплатыПособия(Форма);
	Иначе
		Форма.Объект.ДнейОплаты = 0;
		Форма.НадписьДнейОплатыПособия = "";	
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораИДоступностьНачислений(Форма)
	
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат
	КонецЕсли;
	
	УстановитьПараметрыВыбораВидаОплатыПособия(Форма);
	УстановитьПараметрыВыбораВидаНеоплачиваемогоВремени(Форма);
	УстановитьДоступностьВидаОплатыПособия(Форма);
	УстановитьДоступностьВидаОплатыЗаСчетРаботодателя(Форма);
	УстановитьДоступностьВидаНеоплачиваемогоВремени(Форма);
	УстановитьВидимостьСуммыЧернобыльскойЛьготы(Форма)

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВидаОплатыПособия(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Доступность = Объект.НазначитьПособие;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидОплатыПособия", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидОплатыПособия", "АвтоОтметкаНезаполненного", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидОплатыПособия", "ОтметкаНезаполненного", ЗначениеЗаполнено(Объект.ВидОплатыПособия));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВидаОплатыЗаСчетРаботодателя(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Доступность = Ложь;
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ОбщееЗаболевание")
		И Объект.ДатаНачалаСобытия + УчетПособийСоциальногоСтрахованияКлиентСервер.КоличествоДнейЗаСчетРаботодателя(Объект.ДатаНачалаСобытия, Объект.ПричинаНетрудоспособности) * УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток() > Объект.ДатаНачалаОплаты Тогда
		Доступность = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидОплатыЗаСчетРаботодателя", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидОплатыЗаСчетРаботодателя", "АвтоОтметкаНезаполненного", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидОплатыЗаСчетРаботодателя", "ОтметкаНезаполненного", ЗначениеЗаполнено(Объект.ВидОплатыЗаСчетРаботодателя));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьВидаНеоплачиваемогоВремени(Форма)
	
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;	

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Доступность = Ложь;
	Если Не Объект.НазначитьПособие Тогда
		Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ДатаНачала < Объект.ДатаНачалаОплаты Тогда
		Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ДатаОкончанияОплаты < Объект.ДатаОкончания Тогда
		Доступность = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидНеоплачиваемогоВремени", "Доступность", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидНеоплачиваемогоВремени", "АвтоОтметкаНезаполненного", Доступность);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ВидНеоплачиваемогоВремени", "ОтметкаНезаполненного", ЗначениеЗаполнено(Объект.ВидОплатыЗаСчетРаботодателя));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВидаОплатыПособия(Форма)
	
	// Выбор вида оплаты пособия зависит от причины нетрудоспособности.
	КатегорияНачисления = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНачисленияПоПричинеНетрудоспособности(Форма.Объект.ПричинаНетрудоспособности);
	
	УстановитьПараметрыВыбораВидаРасчетаПоКатегории(Форма, "ВидОплатыПособия", КатегорияНачисления);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВидаНеоплачиваемогоВремени(Форма)

	// Выбор вида неоплачиваемого времени зависит от причины нетрудоспособности.
	КатегорияНачисления = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНачисленияПоПричинеНетрудоспособности(Форма.Объект.ПричинаНетрудоспособности);
	
	УстановитьПараметрыВыбораВидаРасчетаПоКатегории(Форма, "ВидНеоплачиваемогоВремени", КатегорияНачисления);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВидаРасчетаПоКатегории(Форма, ИмяПоляВыбора, КатегорияНачисления)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти(ИмяПоляВыбора) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметровВыбора = Элементы[ИмяПоляВыбора].ПараметрыВыбора;
	
	// Составляем модифицируемый массив параметров выбора.
	СтруктураПараметров = Новый Соответствие;
	Для Каждого ПараметрВыбора Из МассивПараметровВыбора Цикл
		СтруктураПараметров.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
	КонецЦикла;
	
	// Добавляем отбор по категории начисления.
	СтруктураПараметров.Вставить("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", КатегорияНачисления);
	
	МассивПараметров = Новый Массив;
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		МассивПараметров.Добавить(Новый ПараметрВыбора(КлючИЗначение.Ключ, КлючИЗначение.Значение));
	КонецЦикла;
	
	Элементы[ИмяПоляВыбора].ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры
&НаСервере
Процедура УстановитьДругихСотрудниковФизическогоЛица()

	ЭтотОбъект.ДругиеСотрудникиФизическогоЛица = Новый ФиксированныйМассив(Новый Массив);
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ФизическоеЛицо, ГоловнаяОрганизация");
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников[0];
		ЭтотОбъект.ДругиеСотрудникиФизическогоЛица = ДругиеСотрудникиФизическогоЛица(Объект.Сотрудник, КадровыеДанныеСотрудника.ФизическоеЛицо, КадровыеДанныеСотрудника.ГоловнаяОрганизация);
	КонецЕсли;

КонецПроцедуры
&НаСервереБезКонтекста
Функция ДругиеСотрудникиФизическогоЛица(Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация)
	
	ДанныеДругихСотрудниковФизическогоЛица = Новый Массив;	
	
	Если ЗначениеЗаполнено(Сотрудник)
		И ЗначениеЗаполнено(ФизическоеЛицо)
		И ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		
		ДругиеСотрудникиФизическогоЛица = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(ФизическоеЛицо, ГоловнаяОрганизация, Сотрудник, '00010101', '00010101');
		
		Если ДругиеСотрудникиФизическогоЛица.Количество() > 0  Тогда
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДругиеСотрудникиФизическогоЛица, "Организация");
			
			Для каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
				
				ДанныеДругогоСотрудникаФизическогоЛица = Новый Структура("Сотрудник, Организация", КадровыеДанныеСотрудника.Сотрудник, КадровыеДанныеСотрудника.Организация);
				
				ДанныеДругихСотрудниковФизическогоЛица.Добавить(Новый ФиксированнаяСтруктура(ДанныеДругогоСотрудникаФизическогоЛица));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ДанныеДругихСотрудниковФизическогоЛица);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНачисленияВДокументе()
	
	ЗаполнитьВидыОплатыПособия();
	
	ЗаполнитьВидНеоплачиваемогоВремени();
	
	ЗаполнитьВидОплатыЗаСчетРаботодателя();
	
	ЗаполнитьВидРасчетаДоплатыЗаДниБолезни();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыОплатыПособия()
	
	Если Не ИспользуетсяРасчетЗарплаты
		Или (Не ИзмениласьКатегорияОплатыПособия()
		И ЗначениеЗаполнено(Объект.ВидОплатыПособия)) Тогда
	     Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
		
	Объект.ВидОплатыПособия = Неопределено;
	
	Категория = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНачисленияПоПричинеНетрудоспособности(Объект.ПричинаНетрудоспособности);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидОплатыПособия, Категория);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидНеоплачиваемогоВремени()
	
	Если Не ИспользуетсяРасчетЗарплаты 
		Или (Не ИзмениласьКатегорияНеоплачиваемогоВремени()
		И ЗначениеЗаполнено(Объект.ВидНеоплачиваемогоВремени)) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Объект.ВидНеоплачиваемогоВремени = Неопределено;
	
	Категория = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНеоплачиваемогоВремениПоПричинеНетрудоспособности(Объект.ПричинаНетрудоспособности);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидНеоплачиваемогоВремени, Категория);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидОплатыЗаСчетРаботодателя()
	
	Если Не ИспользуетсяРасчетЗарплаты
		Или ЗначениеЗаполнено(Объект.ВидОплатыЗаСчетРаботодателя) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Вид оплаты за счет работодателя.
	Объект.ВидОплатыЗаСчетРаботодателя = Неопределено;
	Категория = УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНачисленияОплатаБольничногоЛистаЗаСчетРаботодателя();
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидОплатыЗаСчетРаботодателя, Категория);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидРасчетаДоплатыЗаДниБолезни()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	// доплата до среднего
	Если Объект.ДоплачиватьДоСреднегоЗаработка 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидРасчетаДоплаты, "КатегорияНачисленияИлиНеоплаченногоВремени") <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни") Тогда
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
			ЭтаФорма, Объект.ВидРасчетаДоплаты, Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
		КонецЕсли;
	КонецЕсли;
	
	// доплата до сохраняемого денежного содержания
	Если Объект.ДоплачиватьДоДенежногоСодержания  
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидРасчетаДоплаты, "КатегорияНачисленияИлиНеоплаченногоВремени") <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни Тогда
		Если ДоплачиватьДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
			ЭтаФорма, Объект.ВидРасчетаДоплаты, Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоДенежногоСодержанияЗаДниБолезни);
		КонецЕсли;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ИзмениласьКатегорияОплатыПособия()
	
	Возврат УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНачисленияПоПричинеНетрудоспособности(Объект.ПричинаНетрудоспособности) <> УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНачисленияПоПричинеНетрудоспособности(БылаПричинаНетрудоспособности);
	
КонецФункции

&НаСервере
Функция ИзмениласьКатегорияНеоплачиваемогоВремени()
	
	Возврат УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНеоплачиваемогоВремениПоПричинеНетрудоспособности(Объект.ПричинаНетрудоспособности) <> УчетПособийСоциальногоСтрахованияРасширенныйКлиентСервер.КатегорияНеоплачиваемогоВремениПоПричинеНетрудоспособности(БылаПричинаНетрудоспособности);
	
КонецФункции

&НаСервере
Функция ТаблицаИнтерваловОплаты()
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("Начисление");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачала");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаОкончания");
	ТаблицаИнтервалов.Колонки.Добавить("Длительность");
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) 
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) 
		Или Объект.ДатаНачала > Объект.ДатаОкончания Тогда
		Возврат ТаблицаИнтервалов;
	КонецЕсли;
	
	ДатыИзменений = ДатыИзменений();
	ДатыИзменений.Сортировать("Дата");
	
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаДаты Из ДатыИзменений Цикл
		НовыйИнтервал = ТаблицаИнтервалов.Добавить();
		НовыйИнтервал.ДатаНачала = СтрокаДаты.Дата;
		НовыйИнтервал.Начисление = СтрокаДаты.Начисление;
		Если ПредыдущаяСтрока <> Неопределено Тогда
			ПредыдущаяСтрока.ДатаОкончания = СтрокаДаты.Дата - 1;
		КонецЕсли;
		ПредыдущаяСтрока = НовыйИнтервал;
	КонецЦикла;
	
	НовыйИнтервал.ДатаОкончания = Объект.ДатаОкончания;
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования)
	
	// Переносит данные учета среднего заработка (результат работы формы "калькулятора") 
	// в таблицы документа.
	
	Объект.СреднийЗаработокФСС.Очистить();
	Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
	Объект.СреднийЗаработокДанныеСтрахователей.Очистить();
	Объект.ПериодыБолезниУходаЗаДетьми.Очистить();
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьДанныеУчетаСреднегоЗаработкаФСС(Объект, РезультатРедактирования, ЭтаФорма);
	
	Объект.ФиксПериодРасчетаСреднегоЗаработка = РезультатРедактирования.ФиксПериодРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаНачало = РезультатРедактирования.НачалоПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = РезультатРедактирования.ОкончаниеПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = РезультатРедактирования.ГодыПериодаРасчета[0];
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = РезультатРедактирования.ГодыПериодаРасчета[1];
	
	Объект.СреднийДневнойЗаработок = РезультатРедактирования.СреднийЗаработок;
	Объект.РучнаяКорректировкаСреднегоЗаработка = РезультатРедактирования.РучнаяКорректировкаСреднегоЗаработка;
								
	УстановитьИнфонадписьРасчетаСреднегоЗаработка();
	
КонецПроцедуры	

&НаСервере
Функция ДанныеОСтажеСотрудника()

	УстановитьПривилегированныйРежим(Истина);
	
	// Поля стажа СтажЛет, СтажМесяцев автозаполняются по данным о стаже С категорией
	// КатегорииСтажа.РасширенныйСтраховой, если такового нет, то по стажу с категорией КатегорииСтажа.Страховой. 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Заполняем исходные данные для получения стажа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	ВидыСтажа.Ссылка КАК ВидСтажа,
	|	&ДатаНачалаСобытия КАК Дата
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыСтажа КАК ВидыСтажа
	|		ПО (ВидыСтажа.КатегорияСтажа В (&КатегорииСтажа))
	|			И (Сотрудники.Ссылка = &Сотрудник)";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия", ?(ЗначениеЗаполнено(Объект.ДатаНачалаСобытия), Объект.ДатаНачалаСобытия, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("КатегорииСтажа", Документы.БольничныйЛист.КатегорииСтажаВЛисткеНетрудоспособности());
	Запрос.Выполнить();
	
	// Создаем таблицу стажей
	КадровыйУчетРасширенный.СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РасширенныйСтажДляБЛ.РазмерМесяцев, 0) КАК СтажВМесяцахРасширенный,
	|	ЕСТЬNULL(СтажДляБЛ.РазмерМесяцев, 0) КАК СтажВМесяцах,
	|	ВЫБОР
	|		КОГДА СтажДляБЛ.Сотрудник ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДляСотрудникаВведенСтраховойСтаж
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиСотрудников КАК РасширенныйСтажДляБЛ
	|		ПО Сотрудники.Ссылка = РасширенныйСтажДляБЛ.Сотрудник
	|			И (РасширенныйСтажДляБЛ.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.РасширенныйСтраховой))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтажиСотрудников КАК СтажДляБЛ
	|		ПО Сотрудники.Ссылка = СтажДляБЛ.Сотрудник
	|			И (СтажДляБЛ.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Страховой))
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник); 
	ДанныеОСтажеСотрудника = Запрос.Выполнить().Выбрать();
	ДанныеОСтажеСотрудника.Следующий();
	Возврат ДанныеОСтажеСотрудника;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтаж()
	
	Если Не ИспользуетсяРасчетЗарплаты Или 
		Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОСтажеСотрудника = ДанныеОСтажеСотрудника();
	ДляСотрудникаВведенСтраховойСтаж = ДанныеОСтажеСотрудника.ДляСотрудникаВведенСтраховойСтаж;	
	
	СтажЛет 				= Цел(ДанныеОСтажеСотрудника.СтажВМесяцах / 12);
	СтажМесяцев 			= ДанныеОСтажеСотрудника.СтажВМесяцах % 12;
	СтажРасширенныйЛет 		= Цел(ДанныеОСтажеСотрудника.СтажВМесяцахРасширенный / 12);
	СтажРасширенныйМесяцев 	= ДанныеОСтажеСотрудника.СтажВМесяцахРасширенный % 12;
	СтажВМесяцах 			= ?(ДанныеОСтажеСотрудника.СтажВМесяцах >= 96, 96, ДанныеОСтажеСотрудника.СтажВМесяцах);
	
	Если НЕ Объект.СтажЛет = СтажЛет
		Или НЕ Объект.СтажМесяцев = СтажМесяцев
		Или НЕ Объект.СтажРасширенныйЛет = СтажРасширенныйЛет
		Или НЕ Объект.СтажРасширенныйМесяцев = СтажРасширенныйМесяцев 
		Или НЕ Объект.СтажВМесяцах = СтажВМесяцах Тогда
		
		ЭтотОбъект.Модифицированность = Истина;
		
		Объект.СтажЛет 					= СтажЛет;
		Объект.СтажМесяцев 				= СтажМесяцев;
		Объект.СтажРасширенныйЛет 		= СтажРасширенныйЛет;
		Объект.СтажРасширенныйМесяцев 	= СтажРасширенныйМесяцев;
		Объект.СтажВМесяцах = СтажВМесяцах;
	КонецЕсли;	
	

	ОбновитьНадписьСтаж(ЭтаФорма);
	
	УстановитьВидимостьПредупрежденияОНезаполненномСтаже();
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьСтажМенее182Дней(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Если Форма.Объект.СтажМенее182Дней Тогда
		Форма.НадписьСтажМенее182Дней = НСтр("ru='(Стаж за последние 12 месяцев меньше 182 дн.)';uk='(Стаж за останні 12 місяців менше 182 дн.)'")
	Иначе	
		Форма.НадписьСтажМенее182Дней = "";
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтажЗаПоследние12Месяцев()
	
	Если Не ИспользуетсяРасчетЗарплаты Или 
		НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаПриемаСотрудника) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)Тогда
			Объект.СтажМенее182дней = Ложь;
			Объект.СтажЗа12МесяцевВМесяцах = 0;
		Возврат;
	КонецЕсли;
	
	ДатаОтсчетаСтажа12Мес = ДобавитьМесяц(Объект.ДатаНачалаСобытия, -12);
	Если ДатаОтсчетаСтажа12Мес >= ЭтаФорма.ДатаПриемаСотрудника Тогда
		Объект.СтажЗа12МесяцевВМесяцах = 12;
		Возврат;
	КонецЕсли;
	
	ДнейСтажаОтДатыПриема = (НачалоДня(Объект.ДатаНачалаСобытия) - НачалоДня(ЭтаФорма.ДатаПриемаСотрудника))/(60*60*24);
		
	ФизическоеЛицо = Неопределено;
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ФизическоеЛицо", Объект.ДатаНачалаСобытия);
	Если НЕ КадровыеДанные.Количество() = 0 Тогда
		ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
	КонецЕсли;

	ДнейСтажаДругихСтрахователей = КадровыйУчетРасширенный.ДнейСтажаДругихСтрахователейЗа12Месяцев(ДатаОтсчетаСтажа12Мес,Объект.ДатаНачалаСобытия, ФизическоеЛицо);
	СтажДней = ДнейСтажаОтДатыПриема + ДнейСтажаДругихСтрахователей;
	Объект.СтажЗа12МесяцевВМесяцах = Цел(СтажДней/30);
	Если СтажДней < 182 Тогда
		Объект.СтажМенее182дней = Истина	
	КонецЕсли;
	
	ОбновитьНадписьСтажМенее182Дней(ЭтаФорма)
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтажвМесяцах()
	
	Если Не ИспользуетсяРасчетЗарплаты Или 
		НЕ ЗначениеЗаполнено(ЭтаФорма.ДатаПриемаСотрудника) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаНачалаСобытия)Тогда
			Объект.СтажВМесяцах = 0;
		Возврат;
	КонецЕсли;
	
	Если Объект.СтажЗа12МесяцевВМесяцах  > 0 И Объект.СтажВМесяцах = 0 Тогда
		Объект.СтажВМесяцах = Объект.СтажЗа12МесяцевВМесяцах;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоКадровымДаннымСотрудника()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, Объект.Сотрудник, "Подразделение,ЛьготаПриНачисленииПособий,ВидЗанятости,ДоляНеполногоРабочегоВремени", Объект.ДатаНачалаСобытия);
	
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДоляНеполногоВремени = КадровыеДанные[0].ДоляНеполногоРабочегоВремени;
	
	
	Объект.ОсновноеМестоРаботы = КадровыеДанные[0].ВидЗанятости  = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;

	// Льгота подвергшимся воздействию радиации.
	Если ЗначениеЗаполнено(КадровыеДанные[0].ЛьготаПриНачисленииПособий) Тогда
		Объект.ПрименятьЛьготыПриНачисленииПособия = Истина;
		Объект.ЛьготаПоПособию = КадровыеДанные[0].ЛьготаПриНачисленииПособий;
		УстановитьДоступностьЛьготаПоПособию(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыНачалаСобытия()
	
	Если НЕ ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;	

	// Обновляем период расчета среднего заработка.
	Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	УстановитьСвойствоРассчитатьЗарплату();
	
	ОпределитьВариантДоплаты();
	ОбновитьФормуПоВариантуДоплаты();
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
Функция НадписьДнейВПериодеНетрудоспособности(ДатаНачала, ДатаОкончания)
	
	НадписьДнейВПериодеНетрудоспособности = "";	
	
	Если ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(ДатаНачала)
		И ДатаНачала <= ДатаОкончания Тогда
		ДнейВПериодеНетрудоспособности = КонецДня(ДатаОкончания) - НачалоДня(ДатаНачала) + 1;
		ДнейВПериодеНетрудоспособности = ДнейВПериодеНетрудоспособности / УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
		НадписьДнейВПериодеНетрудоспособности = Строка(ДнейВПериодеНетрудоспособности) + НСтр("ru=' дн.';uk=' дн.'");
	КонецЕсли;
	
	Возврат НадписьДнейВПериодеНетрудоспособности;
	
КонецФункции

// Выполнение расчета начислений.

&НаКлиенте
Процедура ВыполнитьПерезаполнениеИРасчетНачислений(ВыводитьСообщения = Ложь)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Если ВыводитьСообщения Тогда
		ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "ОбработчикПерезаполнитьИРассчитатьНачисленияСВыводомСообщений");
	Иначе
		ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "ОбработчикПерезаполнитьИРассчитатьНачисления");
	КонецЕсли;
	НеобходимоПерезаполнитьНачисления = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполнитьИРассчитатьНачисления()
	
	ПерезаполнитьИРассчитатьНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполнитьИРассчитатьНачисленияСВыводомСообщений()
	
	ПерезаполнитьИРассчитатьНачисления(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьИРассчитатьНачисления(ВыводитьСообщения = Ложь)
	
	Если НЕ РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		ОчиститьРассчитанныеДанные();  
		ПерезаполнятьСреднийЗаработок = Истина;
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
		Возврат;
	КонецЕсли;	
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РасчетДокументаБольничныйЛист");

	ПерезаполнитьИРассчитатьДокумент(ВыводитьСообщения);
	ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	НеобходимоПерезаполнитьНачисления = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьИРассчитатьДокумент(ВыводитьСообщения)
	
	НачатьТранзакцию();
	
	ПерезаполнитьНачисления(ВыводитьСообщения);
	РассчитатьНачисленияНаСервере();
	
	ОтменитьТранзакцию();
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетНачислений()
	
	Если НеобходимоПерезаполнитьНачисления Тогда
		ВыполнитьПерезаполнениеИРасчетНачислений();
	Иначе 
		ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьНачисления");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления()
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РасчетДокументаБольничныйЛист");
	
	ОчиститьРассчитанныеДанные(Ложь);	
	
	ОписаниеРассчитываемойТаблицы = Новый Структура("ИмяТаблицы", "Удержания");
	РассчитатьНачисленияНаСервере(ОписаниеРассчитываемойТаблицы);
	ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНачисления(ВыводитьСообщения)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;
	 
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьРассчитанныеДанные(Истина);
	
	ЗаполнитьНачисленияВДокументе();
	
	ТекущийОбъект = ЭтаФорма.РеквизитФормыВЗначение("Объект");
	Если НЕ ТекущийОбъект.ДокументГотовКРасчету(ВыводитьСообщения) Тогда
		ОбработатьСообщенияПользователю();
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
		ПерезаполнятьСреднийЗаработок = Истина;
		Возврат;
	КонецЕсли;	
	
	ПоказательСреднийЗаработокФСС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	
	ТаблицаИнтервалов = ТаблицаИнтерваловОплаты();
	ГраницыИнтервалов = ГраницыИнтервалов(ТаблицаИнтервалов);
	
	ЗаполненСреднийЗаработокФСС = Объект.СреднийЗаработокФСС.Количество() > 0;
	Если Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаНачало)
		Или Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ЗаполнитьПериодРасчетаСреднегоЗаработка(НЕ ЗаполненСреднийЗаработокФСС);
	Иначе
		Если ПерезаполнятьСреднийЗаработок И Не ТекущийОбъект.РучнаяКорректировкаСреднегоЗаработка Тогда
			ОбновитьДанныеДляРасчетаСреднего();
		КонецЕсли;
	КонецЕсли;
	
	ПерезаполнятьСреднийЗаработок = Истина;
	
	ИзвестныеПоказатели = Новый Соответствие;
	ИзвестныеПоказатели.Вставить(ПоказательСреднийЗаработокФСС, Новый Структура("Значение", Объект.СреднийДневнойЗаработок));
	
	Начало = Неопределено;
	Окончание = Неопределено;
	
	Для Каждого СтрокаИнтервалов Из ТаблицаИнтервалов Цикл
		
		ДанныеДляНачисленияЗарплаты = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
			Объект.Организация, СтрокаИнтервалов.ДатаНачала, СтрокаИнтервалов.ДатаОкончания, Объект.ПериодРегистрации, Объект.Сотрудник, СтрокаИнтервалов.Начисление, Объект.Ссылка, ИзвестныеПоказатели);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляНачисленияЗарплаты, Объект.Начисления);
		Если Начало = Неопределено Тогда
			Начало = СтрокаИнтервалов.ДатаНачала;
		Иначе
			Начало = Мин(Начало, СтрокаИнтервалов.ДатаНачала);
		КонецЕсли;
		Если Окончание = Неопределено Тогда
			Окончание = СтрокаИнтервалов.ДатаОкончания;
		Иначе
			Окончание = Макс(Окончание, СтрокаИнтервалов.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	
	// Доплачиваем до среднего заработка.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни") 
		И Объект.ДоплачиватьДоСреднегоЗаработка 
		И ЗначениеЗаполнено(Объект.ВидРасчетаДоплаты) Тогда
		
		ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();		
		ПараметрыРасчета.ПрименятьПредельнуюВеличину = Ложь; 
		
		ИзвестныеПоказатели.Вставить(ПоказательСреднийЗаработокФСС, Новый Структура("Значение", УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета)));
		
		ПоказательПроцентДоплатыЗаДниНетрудоспособности = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаДниНетрудоспособности");
		ИзвестныеПоказатели.Вставить(ПоказательПроцентДоплатыЗаДниНетрудоспособности, Новый Структура("Значение", Объект.ПроцентДоплатыЗаДниНетрудоспособности));
		
		ДанныеДляНачисленияЗарплаты = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
		Объект.Организация, Начало, Окончание, Объект.ПериодРегистрации, Объект.Сотрудник, Объект.ВидРасчетаДоплаты, Объект.Ссылка, ИзвестныеПоказатели);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляНачисленияЗарплаты, Объект.Начисления);
		
	ИначеЕсли Объект.ДоплачиватьДоДенежногоСодержания 
		И ЗначениеЗаполнено(Объект.ВидРасчетаДоплаты) Тогда
		
		ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();		
		ПараметрыРасчета.ПрименятьПредельнуюВеличину = Ложь; 

		ОписаниеЗначения = Новый Структура("Значение", Объект.СохраняемоеДенежноеСодержание);
		СохраняемоеДенежноеСодержаниеСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
		ИзвестныеПоказатели = Новый Соответствие;
		ИзвестныеПоказатели.Вставить(СохраняемоеДенежноеСодержаниеСсылка, ОписаниеЗначения);
		
		ДанныеДляНачисленияЗарплаты = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
		Объект.Организация, Начало, Окончание, Объект.ПериодРегистрации, Объект.Сотрудник, Объект.ВидРасчетаДоплаты, Объект.Ссылка, ИзвестныеПоказатели);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляНачисленияЗарплаты, Объект.Начисления);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправления(Объект.Организация, Объект.ПериодРегистрации, Объект.ИсправленныйДокумент, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка);
	Иначе
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчета(Объект.ПериодРегистрации, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка);
	КонецЕсли;

	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		// Рассчитываем зарплату
		РассчитатьЗарплатуЗаПериодДоНачалаОтсутствия();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере(ОписаниеРассчитываемойТаблицы = Неопределено, СохранятьИсправления = Ложь)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияПерерасчет, "Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), Истина);
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	
	Сотрудники = ЗарплатаКадрыРасширенный.СотрудникиТаблицДокумента(Объект, ОписанияТаблиц, Сотрудники); 
	
	Если ОписаниеРассчитываемойТаблицы = Неопределено Тогда
		СохраняемыйПорядокВыплаты = Объект.ПорядокВыплаты;
		Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		
		ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
		ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеРассчитываемойТаблицы;
		ДополнительныеПараметры.СохранятьИсправления = СохранятьИсправления;
		ДополнительныеПараметры.РассчитыватьНДФЛБезусловно  = Ложь;
		
		РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудники, ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
		ОчиститьРезультатРасчетаОплатыЗаСчетФСС();
		
		Объект.ПорядокВыплаты = СохраняемыйПорядокВыплаты;
		
		ОписаниеРассчитываемойТаблицы = Новый Структура("ИмяТаблицы", "Удержания");
	КонецЕсли;
	
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		// Удержания (рассчитываем, если выплата в межрасчетный период).
		СтрокиУдержаний = РасчетЗарплатыРасширенный.ДанныеДляУдержанияЗарплаты(
			Объект.Организация, Объект.ПериодРегистрации, КонецМесяца(Объект.ПериодРегистрации), , Объект.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиУдержаний, Объект.Удержания);
	КонецЕсли;

	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеРассчитываемойТаблицы;
	ДополнительныеПараметры.СохранятьИсправления = СохранятьИсправления;
	ДополнительныеПараметры.РассчитыватьНДФЛБезусловно  = Ложь;
	
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудники, ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	ОбновитьПерерасчетИтог(ЭтаФорма);
	ОбновитьОбъектыНачисленияИзФормы(ЭтаФорма);
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());

	УстановитьВидимостьПерерасчетов();
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
	УстановитьСвойствоДокументРассчитан();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтаФорма.НачисленоФСС <> 0 Тогда
		УстановитьПредставлениеОплаты();
	Иначе
		ЭтаФорма.ОплатыПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРезультатРасчетаОплатыЗаСчетФСС()
	   	
	СотрудникиФизическиеЛица = Новый Массив;

	ИнформацияОНесколькихВидахРасчета = РасчетЗарплатыРасширенный.ИнформацияОНесколькихВидахРасчета(Объект.Начисления.Выгрузить(,"Начисление").ВыгрузитьКолонку("Начисление"));
	
	Для каждого СтрокаНачисления Из Объект.Начисления Цикл
		ИнформацияОВидеРасчета = ИнформацияОНесколькихВидахРасчета.Получить(СтрокаНачисления.Начисление);
		Если ИнформацияОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста
			Или ИнформацияОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам
			Или ИнформацияОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание
			Или ИнформацияОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве Тогда
			СотрудникиФизическиеЛица.Добавить(СтрокаНачисления.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Если СотрудникиФизическиеЛица.Количество() > 0 Тогда
		ПараметрыДляРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеПараметровДляРаспределенияДанныхЗаполнения();
		ПараметрыДляРаспределения.РаспределятьНачисления = Истина;
		ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
		ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныеФормыПоСотрудникам(СотрудникиФизическиеЛица, ЭтотОбъект, ОписаниеДокумента(ЭтотОбъект), ПараметрыДляРаспределения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ГраницыИнтервалов(ТаблицаИнтервалов)
	
	Границы = Новый СтандартныйПериод;
	
	Границы.ДатаНачала = Дата(1, 1, 1);
	Границы.ДатаОкончания = Дата(1, 1, 1);
	
	Для Каждого СтрокаТаблицы Из ТаблицаИнтервалов Цикл
		Если Не ЗначениеЗаполнено(Границы.ДатаНачала) Тогда
			Границы.ДатаНачала = СтрокаТаблицы.ДатаНачала;
		КонецЕсли;
		Границы.ДатаНачала = Мин(Границы.ДатаНачала, СтрокаТаблицы.ДатаНачала);
		Границы.ДатаОкончания = Макс(Границы.ДатаОкончания, СтрокаТаблицы.ДатаОкончания);
	КонецЦикла;
	
	Возврат Границы;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	РассчитатьСотрудникаНаСервере();
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере()
	
	РассчитатьНачисленияНаСервере(, Истина);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВсеНаСервере(ОписаниеТаблицы = Неопределено)
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	ДополнительныеПараметры.РассчитыватьНДФЛБезусловно  = Ложь;
	
	// Выполняем пересчет коллекций документа.
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляРасчетаСреднего()
	
	Если НЕ ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Или Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОбработки = УчетПособийСоциальногоСтрахованияРасширенный.ПараметрыОбновленияДанныхУчетаСреднегоЗаработкаФСС();
	ПараметрыОбработки.ДанныеОНачислениях = Объект.СреднийЗаработокФСС;
	ПараметрыОбработки.ДанныеОВремени = Объект.ОтработанноеВремяДляСреднегоФСС;
	ПараметрыОбработки.ДанныеСтрахователей = Объект.СреднийЗаработокДанныеСтрахователей; 
	ПараметрыОбработки.ПериодыОтсутствий = Объект.ПериодыБолезниУходаЗаДетьми;
	ПараметрыОбработки.ПорядокРасчета = ПорядокРасчетаСреднегоЗаработкаФСС();
	ПараметрыОбработки.УчитыватьЗаработокПредыдущихСтрахователей = Объект.УчитыватьЗаработокПредыдущихСтрахователей;	
	ПараметрыОбработки.ПричинаНетрудоспособности = Объект.ПричинаНетрудоспособности;
	ПараметрыОбработки.НомерЛисткаНетрудоспособности = Объект.НомерЛисткаНетрудоспособности;
	ПараметрыОбработки.ДокументСсылка = Объект.Ссылка;
	УчетПособийСоциальногоСтрахованияРасширенный.ОбновитьДанныеУчетаСреднегоЗаработкаФСС(Объект.Сотрудник, Объект.ПериодРасчетаСреднегоЗаработкаНачало, Объект.ПериодРасчетаСреднегоЗаработкаОкончание, ПараметрыОбработки);
	
	Если Объект.ДоплачиватьДоДенежногоСодержания Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.ОбновитьДанныеСохраняемогоДенежногоСодержанияДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьСреднийЗаработок();

	УстановитьИнфонадписьРасчетаСреднегоЗаработка();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Для расчета среднего дневного заработка заполняем структуру параметров.
	ПараметрыРасчета = ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	
	Объект.СреднийДневнойЗаработок = УчетПособийСоциальногоСтрахования.СреднийДневнойЗаработокФСС(ПараметрыРасчета);
	Объект.МинимальныйСреднедневнойЗаработок = УчетПособийСоциальногоСтрахования.МинимальныйСреднедневнойЗаработокФСС(ПараметрыРасчета);
	
	Если Объект.ДоплачиватьДоДенежногоСодержания Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.РассчитатьСохраняемоеДенежноеСодержаниеДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		КонецЕсли;

	КонецЕсли;
	
	ЗаполнениеВыполнено = Истина;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(ПравоНаЧтениеДокументаБезОграничений)
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	Возврат МассивОписанийТаблицФормы  
КонецФункции 

&НаСервере
Функция ПорядокРасчетаСреднегоЗаработкаФСС()
	
	ПорядокРасчета = Неопределено;
	
	ПорядокРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПорядокРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия);
	
	Возврат ПорядокРасчета;
	
КонецФункции 

&НаСервере
Функция ПараметрыРасчетаСреднегоДневногоЗаработкаФСС()
	
	ПараметрыРасчета = УчетПособийСоциальногоСтрахованияКлиентСервер.ПараметрыРасчетаСреднегоДневногоЗаработкаФСС();
	ПараметрыРасчета.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаНачало = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРасчета.ПериодРасчетаСреднегоЗаработкаОкончание = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
	ПараметрыРасчета.РасчетныеГоды = УчетПособийСоциальногоСтрахования.ГодыПериодаРасчетаСреднего(Объект);
	ПараметрыРасчета.РасчетныеМесяцы = УчетПособийСоциальногоСтрахования.МесяцыПериодаРасчетаСреднего(Объект); 
	
	ФизическоеЛицо = Неопределено;
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ФизическоеЛицо", Объект.ДатаНачалаСобытия);
	Если НЕ КадровыеДанные.Количество() = 0 Тогда
		ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
	КонецЕсли;
	
	ПараметрыРасчета.ДанныеНачислений = Объект.СреднийЗаработокФСС;
	ПараметрыРасчета.ДанныеВремени = Объект.ОтработанноеВремяДляСреднегоФСС;
	ПараметрыРасчета.ДанныеСтрахователей = Объект.СреднийЗаработокДанныеСтрахователей;
	ПараметрыРасчета.УчитыватьЗаработокПредыдущихСтрахователей = Объект.УчитыватьЗаработокПредыдущихСтрахователей;
	ПараметрыРасчета.ИспользоватьДниБолезниУходаЗаДетьми = Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам");
	ПараметрыРасчета.ПорядокРасчета = ПорядокРасчетаСреднегоЗаработкаФСС();
	ПараметрыРасчета.ДоляНеполногоВремени = Объект.ДоляНеполногоВремени;
	ПараметрыРасчета.Сотрудник = Объект.Сотрудник;
	ПараметрыРасчета.ПричинаНетрудоспособности = Объект.ПричинаНетрудоспособности;
	ПараметрыРасчета.НомерЛисткаНетрудоспособности = Объект.НомерЛисткаНетрудоспособности;
	ПараметрыРасчета.ОграничениеПособия = Объект.ОграничениеПособия;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Подключение механизма расчета начислений.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыСохраняемоеДенежноеСодержание()

	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.ИмяТаблицы									= "ДенежноеСодержание";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.ДенежноеСодержание";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник						= "Сотрудник";
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.НомерТаблицы = 6;
	
	Возврат ОписаниеТаблицы;	

КонецФункции

&НаСервере
Процедура ДанныеВРеквизиты()
	
	Если НЕ ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), 2);
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), 2);
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыУдержаний(), 2);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыСохраняемоеДенежноеСодержание(), 2);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
	
	ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	Если Не ЭтаФорма.Параметры.Ключ.Пустая() Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма);
	КонецЕсли;
	ИсправлениеДокументовЗарплатаКадры.УстановитьПоляИсправления(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	    Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект.Показатели.Очистить();
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, ОписаниеТаблицыСохраняемоеДенежноеСодержание());
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));	
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы	= "Начисления";
	ОписаниеТаблицы.ПутьКДанным	= "Объект.Начисления";
	ОписаниеТаблицы.ИмяРеквизитаПериод	= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей = "ДатыНачисления";
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов 		= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы = "Начисления,Удержания,НДФЛ";
	
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы	= "НачисленияПерерасчет";
	ОписаниеТаблицы.ПутьКДанным	= "Объект.НачисленияПерерасчет";
	ОписаниеТаблицы.ИмяРеквизитаПериод	= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей = "ДатыНачисленияПерерасчет";
	ОписаниеТаблицы.НомерТаблицы = 1;
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени = ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ЭтоПерерасчеты = Истина;
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПерерасчетРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов 		= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы = "НачисленияПерерасчет,Удержания,НДФЛ";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "Удержания";
	ОписаниеТаблицы.ПутьКДанным = "Объект.Удержания";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета = "Удержание";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	ОписаниеТаблицы.НомерТаблицы = 2;
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "НДФЛ";
	ОписаниеТаблицы.ПутьКДанным = "Объект.НДФЛ";
	ОписаниеТаблицы.ИмяПоляРезультат = "Налог";
	ОписаниеТаблицы.НомерТаблицы = 3;
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
    ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления	= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПогашениеЗаймов()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "ПогашениеЗаймов";
	ОписаниеТаблицы.ПутьКДанным = "Объект.ПогашениеЗаймов";
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.НомерТаблицы = 5;
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	ОписаниеТаблицы.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Истина;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления	= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(ПравоНаЧтениеДокументаБезОграничений)

	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.ПериодРегистрации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.НачисленияИмя = "Начисления";
	Описание.НачисленияПерерасчетИмя = "НачисленияПерерасчет";
	Описание.УдержанияИмя = "Удержания";
	Описание.НДФЛИмя = "НДФЛ";
	Описание.ПогашениеЗаймовИмя = "ПогашениеЗаймов";
	Описание.МесяцНачисленияИмя = "ПериодРегистрации";
	Описание.ИменаПолейНачисления = "ВидОплатыПособия,ВидОплатыЗаСчетРаботодателя,ВидНеоплачиваемогоВремени,НачисленияНачисление";
	Описание.РегистрацияНачисленийДоступна = Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
	Описание.ЕстьОплатаПоСреднемуФСС = Истина;
	
	Описание.ВзносыФОТИмя = "ВзносыФОТ";
	Попытка
		Описание.ПорядокВыплаты = Форма.Объект.ПорядокВыплаты;
	Исключение
		Описание.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Зарплата");
	КонецПопытки;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Месяц", "МесяцНачисленияСтрокой"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Сотрудник", "Объект.Сотрудник"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Причина нетрудоспособн.", "Объект.ПричинаНетрудоспособности"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Освобождение от работы с", "Объект.ДатаНачала"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Освобождение от работы по", "Объект.ДатаОкончания"));	
	Описание.ПроверяемыеПериоды.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеПроверяемогоПериода("Освобождение от работы с", "Объект.ДатаНачала", "Освобождение от работы по", "Объект.ДатаОкончания"));

	Если ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект.НазначитьПособие") Тогда
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Дата начала нетрудоспособности", "Объект.ДатаНачалаСобытия"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Дата начала оплаты", "Объект.ДатаНачалаОплаты"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Дата окончания оплаты", "Объект.ДатаОкончанияОплаты"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Процент оплаты", "Объект.ПроцентОплаты"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Ограничение пособия", "Объект.ОграничениеПособия"));
		
		Описание.ПроверяемыеПериоды.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеПроверяемогоПериода("Дата начала оплаты", "Объект.ДатаНачалаОплаты", "Дата окончания оплаты", "Объект.ДатаОкончанияОплаты"));
	
	КонецЕсли;
	
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата(Форма);
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка(ЗаполнитьБезусловно = Ложь)
	
	Если НЕ ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ПериодИзменился = Ложь;
	
	Если НЕ Объект.ФиксПериодРасчетаСреднегоЗаработка Тогда
		
		ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия, ПорядокРасчетаСреднегоЗаработкаФСС());
		
		Если НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаНачало) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаНачала) 
			Или	НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаОкончания) Тогда
			Если Не (ЭтаФорма.ДатаПриемаСотрудника = Дата('00010101'))  Тогда 
				Если ДобавитьМесяц(НачалоМесяца(Объект.ДатаНачалаСобытия), -12) < ЭтаФорма.ДатаПриемаСотрудника Тогда
					Если КонецМесяца(ДобавитьМесяц(Объект.ДатаНачалаСобытия, -1)) >= ЭтаФорма.ДатаПриемаСотрудника Тогда
						Если День(ЭтаФорма.ДатаПриемаСотрудника) = 1 Тогда
							ПериодРасчетаСреднего.ДатаНачала = ЭтаФорма.ДатаПриемаСотрудника;	
						Иначе
							Если НачалоМесяца(ДобавитьМесяц(Объект.ДатаНачалаСобытия, -1)) = НачалоМесяца(ЭтаФорма.ДатаПриемаСотрудника) Тогда
								ПериодРасчетаСреднего.ДатаНачала = НачалоМесяца(ЭтаФорма.ДатаПриемаСотрудника);	
								ПериодРасчетаСреднего.ДатаОкончания = КонецМесяца(ЭтаФорма.ДатаПриемаСотрудника);	
							Иначе
								ПериодРасчетаСреднего.ДатаНачала = ДобавитьМесяц(НачалоМесяца(ЭтаФорма.ДатаПриемаСотрудника), 1);	
							КонецЕсли;	
						КонецЕсли;
					Иначе
						ПериодРасчетаСреднего.ДатаНачала = НачалоМесяца(ЭтаФорма.ДатаПриемаСотрудника);	
						ПериодРасчетаСреднего.ДатаОкончания = КонецМесяца(ЭтаФорма.ДатаПриемаСотрудника);	
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			
			Объект.ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
			Объект.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
			
			// Период годами
			Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Год(ПериодРасчетаСреднего.ДатаНачала);
			Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = Год(ПериодРасчетаСреднего.ДатаОкончания);
			
			ПериодИзменился = Истина;
			
		КонецЕсли;
	КонецЕсли;
	Если Объект.УчитыватьЗаработокПредыдущихСтрахователей Тогда
		Если ПериодРасчетаСреднего = Неопределено Тогда
			ПериодРасчетаСреднего = УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодРасчетаСреднегоЗаработкаФСС(Объект.ДатаНачалаСобытия, ПорядокРасчетаСреднегоЗаработкаФСС());
		КонецЕсли;	
		ПериодРасчетаСреднего.ДатаНачала = ДобавитьМесяц(НачалоМесяца(Объект.ДатаНачалаСобытия), -12);
		Объект.ПериодРасчетаСреднегоЗаработкаНачало = ПериодРасчетаСреднего.ДатаНачала;
	КонецЕсли;	
	
	Если (ПериодИзменился 
		Или ЗаполнитьБезусловно) И (Не Объект.РучнаяКорректировкаСреднегоЗаработка) Тогда 
		ОбновитьДанныеДляРасчетаСреднего();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей()Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОплаченоДней");
	НачисленияФиксРасчетВремени.Добавить("ОплаченоЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	НачисленияФиксЗаполнение = Новый Массив;
	
	Возврат Новый Структура("Начисления, НачисленияПерерасчет, НДФЛ",
		Новый Структура("ФиксРасчет, ФиксЗаполнение, ФиксСтрока, ФиксРасчетВремени",
			НачисленияФиксРасчет,
			НачисленияФиксЗаполнение,
			НачисленияФиксСтрока,
			НачисленияФиксРасчетВремени),
		Новый Структура("ФиксРасчет, ФиксЗаполнение, ФиксСтрока, ФиксРасчетВремени",
			НачисленияФиксРасчет,
			НачисленияФиксЗаполнение,
			НачисленияФиксСтрока,
			НачисленияФиксРасчетВремени),
		УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов()
	);
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	ОчиститьСообщения();
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обслуживание элементов формы.

&НаКлиенте
Процедура ОплатыПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	ВзаиморасчетыССотрудникамиКлиент.ВедомостьОплатаПоказать(ЭтаФорма, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеОплаты()
	ВедомостьУстановитьПредставлениеОплаты(ЭтаФорма);
КонецПроцедуры

Процедура ВедомостьУстановитьПредставлениеОплаты(Форма)
	
	ПроверкаВыплат = ПроверитьВыплаты(Объект.Ссылка);
	Если ПроверкаВыплат = "Оплачено" Тогда
		Форма.ОплатыПредставление = Новый ФорматированнаяСтрока(НСтр("ru='Оплачено фондом';uk='Сплачено фондом'"),,WebЦвета.Зеленый,,);
	ИначеЕсли ПроверкаВыплат = "Отклонено" Тогда
		Форма.ОплатыПредставление = Новый ФорматированнаяСтрока(НСтр("ru='Больничный отклонен';uk='Лікарняний відхилено'"),,WebЦвета.Красный,,);
	ИначеЕсли ПроверкаВыплат = "Еще нет подтверждения" Тогда	
		СписокОплат = СписокОплат(Форма);
		Форма.ОплатыСписок			= СписокОплат;
		Форма.ОплатыПредставление	= ПредставлениеОплаты(СписокОплат)
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьВыплаты(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ОплатаПособийСоциальногоСтрахования КАК ОплатаПособийСоциальногоСтрахования
	|ГДЕ
	|	ОплатаПособийСоциальногоСтрахования.Организация = &Организация
	|	И ОплатаПособийСоциальногоСтрахования.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", Документ);
	Запрос.УстановитьПараметр("Организация", Документ.Организация);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат "Оплачено"
	Иначе
		ЗапросРасчеты = Новый Запрос;
		ЗапросРасчеты.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСФондамиПоПособиямОбороты.СуммаОборот
		|ИЗ
		|	РегистрНакопления.РасчетыСФондамиПоПособиям.Обороты(, , , ДокументОснование = &ДокументОснование) КАК РасчетыСФондамиПоПособиямОбороты";
		
		ЗапросРасчеты.УстановитьПараметр("ДокументОснование", Документ);
		РезультатЗапросаРасчеты = ЗапросРасчеты.Выполнить().Выбрать();
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Документ.ЗаявлениеРасчетВФСС.Оплаты КАК ЗаявлениеРасчетВФССОплаты
		|ГДЕ
		|	ЗаявлениеРасчетВФССОплаты.ДокументОснование = &ДокументОснование
		|	И ЗаявлениеРасчетВФССОплаты.Ссылка.Проведен
		|	И НЕ ЗаявлениеРасчетВФССОплаты.Ссылка.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаявлениеРасчетВФССОплаты.Ссылка.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("ДокументОснование", Документ);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если НЕ РезультатЗапросаРасчеты.Следующий() И РезультатЗапроса.Следующий() Тогда
			Возврат "Отклонено"
		Иначе
			Возврат "Еще нет подтверждения"
		КонецЕсли;
	КонецЕсли;
	
КонецФункции	
	

Функция СписокОплат(Форма)
	
	СписокОплат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Форма.Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗаявлениеРасчетВФССОплаты.Ссылка.СтатусДокумента,
	|	ЗаявлениеРасчетВФССОплаты.Ссылка
	|ИЗ
	|	Документ.ЗаявлениеРасчетВФСС.Оплаты КАК ЗаявлениеРасчетВФССОплаты
	|ГДЕ
	|	ЗаявлениеРасчетВФССОплаты.Ссылка.Проведен = ИСТИНА
	|	И НЕ ЗаявлениеРасчетВФССОплаты.Ссылка.ПометкаУдаления
	|	И ЗаявлениеРасчетВФССОплаты.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаявлениеРасчетВФССОплаты.Ссылка.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОплат.Добавить(Выборка.Ссылка, Выборка.СтатусДокумента);
	КонецЦикла;	
	
	Возврат СписокОплат
	
КонецФункции	

Функция ПредставлениеОплаты(СписокОплат)  
	
	Если СписокОплат.Количество() = 0 Тогда
		
		ПредставлениеОплаты = Новый ФорматированнаяСтрока(НСтр("ru='Выплаты по больничному за счет ФСС не выполнялись';uk='Виплати за лікарняним за рахунок ФСС не виконувалися'"),,WebЦвета.Синий,,);
		
	Иначе //СписокОплат.Количество() = 1 Тогда	
		
		ПредставлениеДокумента = 
		НРег(Лев(СписокОплат[0].Представление, 1))
		+ Сред(СписокОплат[0].Представление, 2, СтрНайти(СписокОплат[0].Представление, " - ") - 2);
		
		ПредставлениеОплаты = Новый ФорматированнаяСтрока("Оформлено "+ СписокОплат[0].Значение + ", находится в статусе ",
		" ",
		Новый ФорматированнаяСтрока(ПредставлениеДокумента, , WebЦвета.Синий , , "ссылка"));
	КонецЕсли;
	
	Возврат ПредставлениеОплаты
	
КонецФункции


&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	
	УстановитьСвойствоРассчитатьЗарплату();
	
	УстановитьЗаголовокФлажкаРассчитатьЗарплату();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	Если Не Объект.ЯвляетсяПродолжениемБолезни Тогда
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
		ЗаполнитьСтаж();
		ЗаполнитьСтажЗаПоследние12Месяцев();
		ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
		ЗаполнитьОтсутствияПоДругимМестамРаботы();
		
	КонецЕсли;
	
	УстановитьВидимостьПерерасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРассчитанныеДанные(ПерезаполнитьНачисления = Истина)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ПерезаполнитьНачисления Тогда
		Объект.Начисления.Очистить();
		Объект.НачисленияПерерасчет.Очистить();
		Объект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
		Объект.Показатели.Очистить();
		Объект.ПогашениеЗаймов.Очистить();
	КонецЕсли;	
	
	Объект.Удержания.Очистить();
	Объект.НДФЛ.Очистить();
	Объект.ВзносыФОТ.Очистить();
	
	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	ОбновитьОбъектыНачисленияИзФормы(ЭтаФорма);
	ОбновитьПерерасчетИтог(ЭтотОбъект);
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЭтаФорма.НачисленоФСС <> 0 Тогда
		УстановитьПредставлениеОплаты();
	Иначе
		ЭтаФорма.ОплатыПредставление = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнфонадписьРасчетаСреднегоЗаработка()
	
	Если НЕ ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОЗаполненностиДанных = УчетПособийСоциальногоСтрахованияРасширенный.ИнформацияОЗаполненностиДанныхСреднегоЗаработка(
		Объект.Ссылка,
		ЗаполнениеВыполнено,
		ПараметрыРасчетаСреднегоДневногоЗаработкаФСС(),
		Объект.СреднийДневнойЗаработок,
		Объект.МинимальныйСреднедневнойЗаработок
	);
		
	ЗаполненностьДанныхИнформационныйТекст = ИнформацияОЗаполненностиДанных.Текст;
	ЗаполненностьДанныхКартинка	= ИнформацияОЗаполненностиДанных.Картинка;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьПерерасчетов()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПерерасчетыДоступны = ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступны(ЭтаФорма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачисленияПерерасчет", "Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерерасчетГруппа", "Видимость", ПерерасчетыДоступны);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты 
		Или Не Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеТаблицы = Новый Массив;
	ПроверяемыеТаблицы.Добавить("Начисления");
	ПроверяемыеТаблицы.Добавить("НачисленияПерерасчет");
	
	ПроверяемыеНачисления = Новый Массив;
	
	Для каждого ПроверяемаяТаблица Из ПроверяемыеТаблицы Цикл
		НачисленияДокумента = Новый Массив;
		Для каждого Начисление Из Форма.Объект[ПроверяемаяТаблица] Цикл
			НачисленияДокумента.Добавить(Начисление.Начисление);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеНачисления, НачисленияДокумента, Истина);
	КонецЦикла;
	
	АвтоОтметкаНезаполненного = ДатаВыплатыОбязательнаКЗаполнению(Форма.Объект.ПорядокВыплаты, ПроверяемыеНачисления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного); 
	Если Не АвтоОтметкаНезаполненного Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "ОтметкаНезаполненного", Ложь); 
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаВыплатыОбязательнаКЗаполнению(Знач ПорядокВыплаты, Знач ПроверяемыеНачисления)
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, ПроверяемыеНачисления);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьУдержаний(Форма) 
	
	УдержанияДоступны = УдержанияДоступны(Форма);
	// управление доступностью прочих удержанпий, но не НДФЛ
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "УдержаноВсего", "Видимость", УдержанияДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "УдержанияИзменить", "Видимость", УдержанияДоступны);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСуммыЧернобыльскойЛьготы(Форма)
	Если Форма.Объект.ЛьготаПоПособию = ПредопределенноеЗначение("Перечисление.ОснованияЛьготПоПособию.Чернобыль") Тогда
		УстановитьСвойстваПоляСуммыЧернобыльскойЛьготы(Форма, Истина, "СуммаЧернобыльскойЛьготы");
		УстановитьСвойстваПоляСуммыЧернобыльскойЛьготы(Форма, Истина, "НачисленоФССБезЛьгот");
	Иначе
		УстановитьСвойстваПоляСуммыЧернобыльскойЛьготы(Форма, Ложь, "СуммаЧернобыльскойЛьготы");
		УстановитьСвойстваПоляСуммыЧернобыльскойЛьготы(Форма, Ложь, "НачисленоФССБезЛьгот");
	КонецЕсли;	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Функция УдержанияДоступны(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		УдержанияДоступны = Ложь;
	иначе
		УдержанияДоступны = ЭтоМежрасчетнаяВыплата(Форма.Объект.ПорядокВыплаты);
	КонецЕсли;
	
	Возврат УдержанияДоступны;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
		
	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНачисленоУдержаноИтог(Форма)
	
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
	    Возврат;
	КонецЕсли;

	Объект = Форма.Объект;
	
	Форма.НачисленоИтог = 0;
	Форма.НачисленоРаботодатель = 0;
	Форма.НачисленоФСС = 0;


	Для Каждого СтрокаТаблицы Из Объект.Начисления Цикл
		Если СтрокаТаблицы.Начисление = Объект.ВидОплатыПособия Тогда
			Форма.НачисленоФСС = Форма.НачисленоФСС + СтрокаТаблицы.Результат;
		ИначеЕсли СтрокаТаблицы.Начисление = Объект.ВидОплатыЗаСчетРаботодателя Тогда
			Форма.НачисленоРаботодатель = Форма.НачисленоРаботодатель + СтрокаТаблицы.Результат;
		КонецЕсли;
	КонецЦикла;	
	
	Форма.НачисленоИтог = Объект.Начисления.Итог("Результат");
	
	Форма.НДФЛ 				= Объект.НДФЛ.Итог("Налог");
	Форма.ПрочиеУдержания	= Объект.Удержания.Итог("Результат") + Форма.Объект.ПогашениеЗаймов.Итог("ПогашениеЗайма") + Форма.Объект.ПогашениеЗаймов.Итог("ПогашениеПроцентов") + Форма.Объект.ПогашениеЗаймов.Итог("НалогНаМатериальнуюВыгоду");
	Форма.УдержаноИтог		= Форма.НДФЛ + Форма.ПрочиеУдержания;
	Если Объект.ПрименятьЛьготыПриНачисленииПособия Тогда
		Если Объект.ЛьготаПоПособию = ПредопределенноеЗначение("Перечисление.ОснованияЛьготПоПособию.Чернобыль") Тогда
			ПроцентЛьготы = Объект.ПроцентОплаты - Объект.ПроцентОплатыБезЛьгот;
			Форма.СуммаЧернобыльскойЛьготы = Окр(Форма.НачисленоФСС * ПроцентЛьготы / 100, 2);
			Форма.НачисленоФССБезЛьгот = Окр(Форма.НачисленоФСС * Объект.ПроцентОплатыБезЛьгот / 100, 2); 
		Иначе
			Форма.СуммаЧернобыльскойЛьготы = 0;
			Форма.НачисленоФССБезЛьгот = Форма.НачисленоФСС;
		КонецЕсли;	
	КонецЕсли;
	
	Форма.ВзносыФОТ				= Форма.Объект.ВзносыФОТ.Итог("Результат");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОбъектыНачисленияИзФормы(Форма)
	
	Объект = Форма.Объект;
	Объект.НачисленоФСС = Форма.НачисленоФСС;
	Объект.НачисленоРаботодатель = Форма.НачисленоРаботодатель;
	Объект.СуммаЧернобыльскойЛьготы = Форма.СуммаЧернобыльскойЛьготы;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПерерасчетИтог(Форма)
	
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
	    Возврат;
	КонецЕсли;

	Форма.ПерерасчетИтог = Форма.Объект.НачисленияПерерасчет.Итог("Результат");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредупреждениеДокументНеРассчитан(Форма)
	
	Форма.ЗаполненностьДанныхИнформационныйТекст = УчетСреднегоЗаработкаКлиентСервер.ТекстПредупрежденияДокументНеРассчитан();
	Форма.ЗаполненностьДанныхКартинка = БиблиотекаКартинок.Предупреждение;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляПервичногоБольничногоЛиста(Форма)

	Форма.Элементы.НадписьПервичныйЛистокНетрудоспособности.Доступность = Форма.Объект.ЯвляетсяПродолжениемБолезни;
	Если ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист) Тогда
		Форма.НадписьПервичныйЛистокНетрудоспособности 		= Строка(Форма.Объект.ПервичныйБольничныйЛист);
	Иначе
		Форма.НадписьПервичныйЛистокНетрудоспособности 		= НСтр("ru='Выбрать листок нетрудоспособности...';uk='Вибрати листок непрацездатності...'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПолейДоплатыЗаДниНетрудоспособности(Форма)
	
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ПроцентДоплатыЗаДниНетрудоспособности", 
		"Доступность", 
		Форма.Объект.ДоплачиватьДоСреднегоЗаработка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ВидРасчетаДоплаты", 
		"Доступность", 
		Форма.Объект.ДоплачиватьДоСреднегоЗаработка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ВидРасчетаДоплаты", 
		"АвтоОтметкаНезаполненного", 
		Форма.Объект.ДоплачиватьДоСреднегоЗаработка);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ВидРасчетаДоплаты", 
		"ОтметкаНезаполненного", 
		Не ЗначениеЗаполнено(Форма.Объект.ВидРасчетаДоплаты));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДополненияПричиныНетрудоспособности()
	
	Если НЕ ЭтотОбъект.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	Элементы.Страницы.ПодчиненныеЭлементы.УходЗаРодственникамиСтраница.Видимость = Ложь;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы, 
		"СлучайУходаЗаБольнымРебенком", 
		"Видимость", 
		Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком);
		
	Если Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		ЗаголовокГруппыУходЗаРодственниками = НСтр("ru='Уход за детьми';uk='Догляд за дітьми'");
		ЗаголовокПоляРодственник = НСтр("ru='Ребенок';uk='Дитина'");
		ЗаголовокГруппыВторойРодственник = НСтр("ru='Второй ребенок за которым осуществляется уход';uk='Друга дитина за якою здійснюється догляд'");
	иначе
		ЗаголовокГруппыУходЗаРодственниками = НСтр("ru='Уход за родственниками';uk='Догляд за родичами'");
		ЗаголовокПоляРодственник = НСтр("ru='Родственник';uk='Родич'");
		ЗаголовокГруппыВторойРодственник = НСтр("ru='Второй родственник за которым осуществляется уход';uk='Другий родич за яким здійснюється догляд'");
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы, 
		"УходЗаРодственникамиСтраница", 
		"Заголовок", 
		ЗаголовокГруппыУходЗаРодственниками);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы, 
		"ГруппаРодственникЗаКоторымОсуществляетсяУход2", 
		"Заголовок", 
		ЗаголовокГруппыВторойРодственник);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы, 
		"ГруппаРодственникЗаКоторымОсуществляетсяУход2", 
		"ЗаголовокСвернутогоОтображения", 
		ЗаголовокГруппыВторойРодственник);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы, 
		"РодственникЗаКоторымОсуществляетсяУход1", 
		"Заголовок", 
		ЗаголовокПоляРодственник);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		ЭтотОбъект.Элементы, 
		"РодственникЗаКоторымОсуществляетсяУход2", 
		"Заголовок", 
		ЗаголовокПоляРодственник);
		
	Если Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		Элементы.СтраницыДополненияПричиныНетрудоспособности.ТекущаяСтраница = Элементы.СтраницыДополненияПричиныНетрудоспособности.ПодчиненныеЭлементы.СтраницаБеременностьИРоды;
	Иначе
		Элементы.СтраницыДополненияПричиныНетрудоспособности.ТекущаяСтраница = Элементы.СтраницыДополненияПричиныНетрудоспособности.ПодчиненныеЭлементы.СтраницаПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеСреднегоЗаработка()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Объект.СреднийЗаработокФСС.Очистить();
	Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
	Объект.СреднийЗаработокДанныеСтрахователей.Очистить();
	
	Объект.ПериодРасчетаСреднегоЗаработкаНачало  	= Неопределено;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = Неопределено;
	Объект.ПериодРасчетаСреднегоЗаработкаПервыйГод = Неопределено;
	Объект.ПериодРасчетаСреднегоЗаработкаВторойГод = Неопределено;
	Объект.СреднийДневнойЗаработок                 = Неопределено;
	Объект.ФиксПериодРасчетаСреднегоЗаработка      = Неопределено;
	
	ОчиститьРассчитанныеДанные();

	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьФункциональныеОпцииФормы();
	
	Объект.ДенежноеСодержание.Очистить();
	Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
	
	
	РасчетЗарплатыРасширенныйФормы.ОбновитьПлановыеДатыВыплатыПоОрганизации(ЭтаФорма);
	
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	УстановитьПроцентДоплатыЗаДниНетрудоспособности();
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), РегистрацияНачисленийДоступна);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПроцентДоплатыЗаДниНетрудоспособности()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоплатуЗаДниБолезни") 
		Или НЕ ЗначениеЗаполнено(Объект.Организация)
		Или ЗначениеЗаполнено(Объект.ПроцентДоплатыЗаДниНетрудоспособности) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПроцентДоплатыЗаДниНетрудоспособности = РасчетЗарплатыРасширенный.ПроцентДоплатыЗаДниНетрудоспособности(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыОсвобожденияОтРаботы()
	
	ПриИзмененииДатыОсвобожденияОтРаботыНаСервере();
	ВыполнитьПерезаполнениеИРасчетНачислений();
	
	УстановитьДоступностьВидаНеоплачиваемогоВремени(ЭтаФорма);
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтаФорма); 	
	ОбновитьДнейОплатыПособия(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыОсвобожденияОтРаботыНаСервере()
	
	СкорректироватьДнейОплатыИДатуОкончания();
	ПриИзмененииДатыНачалаСобытия();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияОплатыПриИзмененииНаСервере()
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();

КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьДатуНачалаОплаты()
	
	Если НЕ ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;	
	
	Объект.ДатаНачалаОплаты = Объект.ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьДатуОкончания()
	
	Если НЕ ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Объект.ДатаОкончания = Объект.ДатаНачала;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьДатуНачалаПоловиннойОплаты()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Объект.ДатаНачалаПоловиннойОплаты = Неопределено;
	
	ДатаНачалаПоловиннойОплаты = ДатаНачалаПоловиннойОплаты();
	
	Если Объект.ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком 
		Или НЕ ЗначениеЗаполнено(Объект.ДатаНачалаОплаты)
		Или НЕ ЗначениеЗаполнено(Объект.ДатаОкончанияОплаты) 
		Или Объект.ДатаОкончанияОплаты < НачалоДня(ДатаНачалаПоловиннойОплаты) - 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно 
		Или Объект.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно
		Или Объект.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно
		Или Объект.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно
		Или Объект.СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно Тогда
		Объект.ДатаНачалаПоловиннойОплаты = ДатаНачалаПоловиннойОплаты;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ДатаНачалаПоловиннойОплаты()
	
	КоличествоДнейПолнойОплаты = КоличествоДнейПолнойОплаты();	
	
	ДатаНачалаПоловиннойОплаты = Объект.ДатаНачалаСобытия + КоличествоДнейПолнойОплаты * УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	
	Возврат ДатаНачалаПоловиннойОплаты;
	
КонецФункции

&НаСервере
Функция КоличествоДнейПолнойОплаты()
	
	Возврат 10;
	
КонецФункции
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейОписывающихПараметрыРасчетаПособия(Форма)
	
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Поля = Новый Массив;
	Поля.Добавить("ДатаНачалаОплаты");
	Поля.Добавить("ДатаОкончанияОплаты");
	
	ДоступностьПолей = Форма.Объект.НазначитьПособие;
	
	Для Каждого ИмяЭлемента Из Поля Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Доступность", ДоступностьПолей);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "АвтоОтметкаНезаполненного", ДоступностьПолей);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "ОтметкаНезаполненного", Не ЗначениеЗаполнено(Форма.Объект[ИмяЭлемента]));
		Если Не ДоступностьПолей Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Объект." + ИмяЭлемента, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтажиСотрудника()
	ЗаполнитьСтаж();
	ЗаполнитьСтажЗаПоследние12Месяцев();
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
	ВыполнитьПерезаполнениеИРасчетНачислений();
КонецПроцедуры



&НаСервере
Процедура ДоплачиватьДоСреднегоЗаработкаПриИзмененииНаСервере()
	
	ЗаполнитьВидРасчетаДоплатыЗаДниБолезни();

КонецПроцедуры

&НаСервере
Процедура ПричинаНетрудоспособностиПриИзмененииНаСервере()
	
	НастроитьЭлементыДополненияПричиныНетрудоспособности();

	
	СкорректироватьДнейОплатыИДатуОкончания();	
	
	ОбновитьНадписьДнейОсвобожденияОтРаботы(ЭтаФорма); 	
	
	ОбновитьДнейОплатыПособия(ЭтаФорма);
	
	
	УстановитьДоступностьУчитыватьДанныеСтрахователей(ЭтаФорма);
	
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);

	УстановитьСвойствоРассчитатьЗарплату();
	
	
	Если НЕ Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда  
		Объект.ОсвобождатьСтавку = Ложь;
	КонецЕсли;
	
	ЗаполнитьВидыОплатыПособия();
	
	ЗаполнитьВидНеоплачиваемогоВремени();
	
	УстановитьПараметрыВыбораИДоступностьНачислений(ЭтаФорма);	
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Объект.СреднийЗаработокФСС.Очистить();
		Объект.ОтработанноеВремяДляСреднегоФСС.Очистить();
		Объект.СреднийЗаработокДанныеСтрахователей.Очистить();
	КонецЕсли;
	 	
	Если ИспользуетсяРасчетЗарплаты Тогда
		БылаПричинаНетрудоспособности = Объект.ПричинаНетрудоспособности;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьДнейОплатыИДатуОкончания()
	
	Если НЕ ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;	

	УстановитьДнейОплаты();
	
	Объект.ДатаОкончанияОплаты = ?(Объект.ДнейОплаты = 0, Неопределено, Объект.ДатаНачалаОплаты + (Объект.ДнейОплаты * УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток() - 1));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДнейОплаты()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаОплаты) 
		Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДнейОплаты = 0;
		Возврат;
	КонецЕсли;
	
	ДлинаСуток = УчетПособийСоциальногоСтрахованияКлиентСервер.ДлинаСуток();
	
	Если Объект.ДатаНачалаСобытия <> Объект.ДатаНачалаОплаты Тогда
		ДнейКОплате = (Объект.ДатаОкончания - Объект.ДатаНачалаСобытия) / ДлинаСуток + 1;
		ОплаченоРанее = (Объект.ДатаНачалаОплаты - Объект.ДатаНачалаСобытия) / ДлинаСуток;
	Иначе
		ДнейКОплате = (Объект.ДатаОкончания - Объект.ДатаНачалаОплаты) / ДлинаСуток + 1;
		ОплаченоРанее = 0;
	КонецЕсли;
	
	Объект.ДнейОплаты = Макс(ДнейКОплате - ОплаченоРанее, 0);
	КоличествоДнейЗаСчетРаботодателя = УчетПособийСоциальногоСтрахованияКлиентСервер.КоличествоДнейЗаСчетРаботодателя(Объект.ДатаНачалаСобытия, Объект.ПричинаНетрудоспособности);
	
	Если ЗначениеЗаполнено(Объект.ПервичныйБольничныйЛист) Тогда
		ДнейОплатыПервичногоБЛ =  Объект.ПервичныйБольничныйЛист.ДнейОплаты - КоличествоДнейЗаСчетРаботодателя;
		Если ДнейОплатыПервичногоБЛ > 0 Тогда
			Объект.ДнейОплатыЗаСчетФСС = Объект.ДнейОплаты
		Иначе
			КоличествоДнейЗаСчетРаботодателя = КоличествоДнейЗаСчетРаботодателя - Объект.ПервичныйБольничныйЛист.ДнейОплаты;
			Объект.ДнейОплатыЗаСчетФСС = ?((Объект.ДнейОплаты-КоличествоДнейЗаСчетРаботодателя) < 0, 0, (Объект.ДнейОплаты-КоличествоДнейЗаСчетРаботодателя));
		КонецЕсли;
	Иначе
		Объект.ДнейОплатыЗаСчетФСС = ?((Объект.ДнейОплаты-КоличествоДнейЗаСчетРаботодателя) < 0, 0, (Объект.ДнейОплаты-КоличествоДнейЗаСчетРаботодателя));
	КонецЕсли;	
	
	Если (Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком
		Или Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым) 
		И (ЗначениеЗаполнено(Объект.РодственникЗаКоторымОсуществляетсяУход1) 
		Или ЗначениеЗаполнено(Объект.РодственникЗаКоторымОсуществляетсяУход2)) Тогда
		ОстатокОплачиваемыхДнейУходаЗаРодственниками = ЭтотОбъект.ОстатокОплачиваемыхДнейУходаЗаРодственником1 + ЭтотОбъект.ОстатокОплачиваемыхДнейУходаЗаРодственником2;
		Объект.ДнейОплаты = Мин(Объект.ДнейОплаты, ОстатокОплачиваемыхДнейУходаЗаРодственниками);
	КонецЕсли;
	
	ОбновитьНадписьДнейОплатыПособия(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПервичныйБольничныйЛистПриИзмененииНаСервере()
	
	ОчиститьДанныеСреднегоЗаработка();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоПервичномуБольничномуЛисту(Объект.ПервичныйБольничныйЛист);
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	ОбновитьДанныеДляРасчетаСреднего();
	
	УстановитьДоступностьПолейПоПервичномуБольничномуЛисту(ЭтаФорма);
	
	УстановитьДоступностьПолейОписывающихПараметрыРасчетаПособия(ЭтаФорма);
	
	УстановитьПараметрыВыбораИДоступностьНачислений(ЭтаФорма);
	
	ОбновитьДнейОплатыПособия(ЭтаФорма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПолейПоПервичномуБольничномуЛисту(Форма)
	
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	// Поля, доступные только в первичному документе (недоступны в продолжении больничного).
	Поля = Новый Массив;
	Поля.Добавить("ПроцентОплатыБезЛьгот");
	Поля.Добавить("ОграничениеПособияБезЛьгот");
	Поля.Добавить("ЛьготаПоПособию");
	Поля.Добавить("ДатаНачалаСобытия");
	Поля.Добавить("ПроцентОплаты");
	Поля.Добавить("ОграничениеПособия");
	Поля.Добавить("УчитыватьЗаработокПредыдущихСтрахователей");

	ПоляДоступны = Не ЗначениеЗаполнено(Форма.Объект.ПервичныйБольничныйЛист);
	
	Для Каждого Поле Из Поля Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, Поле, "Доступность", ПоляДоступны);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетПособийОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Возврат; 
	
КонецПроцедуры

// ПИЛОТНЫЙ ПРОЕКТ ФСС

&НаСервере
Процедура ОбработатьСообщенияПользователю()
	
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Для Каждого Сообщение Из Сообщения Цикл
		Если СтрНайти(Сообщение.Поле, "ПериодРегистрации") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "ПериодРегистрацииСтрокой";
		КонецЕсли;
		Если СтрНайти(Сообщение.Поле, "ПервичныйБольничныйЛист") Тогда
			Сообщение.Поле = "";
			Сообщение.ПутьКДанным = "НадписьПервичныйЛистокНетрудоспособности";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста


	
//КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьУчитыватьДанныеСтрахователей(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Доступен = Форма.Объект.ПричинаНетрудоспособности <> ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам");
		
	Форма.Элементы.УчитыватьЗаработокПредыдущихСтрахователей.Доступность = Доступен;
	
	Если Не Доступен Тогда
		Форма.Объект.УчитыватьЗаработокПредыдущихСтрахователей = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьРазмерыПособияПоСтажу(Форма)
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;
	
	Объект =  Форма.Объект;
	ДатаУвольненияСотрудника  = Форма.ДатаУвольненияСотрудника;

	Если Объект.ПрименятьЛьготыПриНачисленииПособия Тогда
		Объект.ПроцентОплаты = 100;
		Объект.ОграничениеПособия = ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение"); 
	Иначе
		Объект.ОграничениеПособия = ?(Объект.СтажМенее182дней, 
			ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ"),
			ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение"));
		
		Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда	
			Объект.ПроцентОплаты = 100;
			Объект.ОграничениеПособия = ?(Объект.СтажМенее182дней, 
				ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереДвухММОТ"), 
				ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение"));
			Возврат	
		КонецЕсли;
		Объект.ПроцентОплаты = ПроцентОплатыБольничногоПоСтраховомуСтажу(?(Объект.СтажРасширенныйЛет > Объект.СтажЛет, Объект.СтажРасширенныйЛет, Объект.СтажЛет));
		
	КонецЕсли;
	
	Объект.ОграничениеПособияБезЛьгот = ?(Объект.СтажМенее182дней, 
	ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОграничениеВРазмереММОТ"), 
	ПредопределенноеЗначение("Перечисление.ВидыОграниченияПособия.ОбщееОграничение"));

	
	Если Объект.ПричинаНетрудоспособности = ПредопределенноеЗначение("Перечисление.ПричиныНетрудоспособности.ПоБеременностиИРодам") Тогда	
		Объект.ПроцентОплатыБезЛьгот = 100;
		Возврат	
	КонецЕсли;
	Объект.ПроцентОплатыБезЛьгот = ПроцентОплатыБольничногоПоСтраховомуСтажу(Объект.СтажЛет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловияИсчисленияДляПилотногоПроекта()
	
	Если Объект.УсловияИсчисленияКод1 = "47" Тогда
		Объект.УсловияИсчисленияКод1 = Неопределено;
	КонецЕсли;

	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУвольненияСотрудника  = ДатаУвольненияСотрудника;
	
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) 
		И Объект.ДатаНачалаСобытия > ДатаУвольненияСотрудника Тогда
		Объект.УсловияИсчисленияКод1 = "47";
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроцентОплатыБольничногоПоСтраховомуСтажу(Лет)
	Возврат ?(Лет >= 8, 100,?(Лет >= 5, 70, ?(Лет >= 3, 60, 50)))

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьСтаж(Форма)
	Если НЕ Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	НадписьСтаж  = "";
	
	Если Форма.ДляСотрудникаВведенСтраховойСтаж Тогда
		НадписьСтаж  = НСтр("ru='Страховой стаж: лет - %1; месяцев - %2.';uk='Страховий стаж: років - %1; місяців - %2.'");
		НадписьСтаж  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НадписьСтаж, Форма.Объект.СтажЛет, Форма.Объект.СтажМесяцев);
	ИначеЕсли Форма.ДоступноИзменение Тогда
		НадписьСтаж  =  НСтр("ru='Ввести страховой стаж...';uk='Ввести страховий стаж...'");
	Иначе
		НадписьСтаж  =  НСтр("ru='Страховой стаж не введен';uk='Страховий стаж не введено'");
	КонецЕсли;
	
	Форма.НадписьСтаж = НадписьСтаж;
КонецПроцедуры 

&НаСервере
Процедура ОбработатьИзменениеСотрудникаНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	ОпределитьВариантДоплаты();
	
	ОбновитьФормуПоВариантуДоплаты();
	
	ЗаполнитьВидыОплатыПособия();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьДанныеСреднегоЗаработка();
	
	Объект.ДенежноеСодержание.Очистить();
	Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
			
	Объект.ОсновноеМестоРаботы  				= Истина;
	Объект.ДоляНеполногоВремени  				= 1;
	Объект.ПрименятьЛьготыПриНачисленииПособия 	= Ложь;
	Объект.ЛьготаПоПособию 						= Неопределено;
	Объект.СтажЛет 								= Неопределено;
	Объект.СтажМесяцев 							= Неопределено;
	Объект.СтажРасширенныйЛет 					= Неопределено;
	Объект.СтажРасширенныйМесяцев 				= Неопределено;
	ПрочитатьПостоянныеКадровыеДанныеСотрудника();
	ПрочитатьДатуУвольненияСотрудника();
	ПрочитатьДатуПриемаСотрудника();
	УстановитьПорядокВыплатыУволенному();
	УстановитьДоступностьПорядкаВыплаты();
	УстановитьВидимостьУдержаний(ЭтаФорма);
	УстановитьСвойствоРассчитатьЗарплату();
	ЗаполнитьСтаж();
	ЗаполнитьСтажЗаПоследние12Месяцев();
	ЗаполнитьСтажВМесяцах();
	ЗаполнитьПоКадровымДаннымСотрудника();
	
	ОпределитьРазмерыПособияПоСтажу(ЭтаФорма);
	
	УстановитьУсловияИсчисленияДляПилотногоПроекта();
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	УстановитьВидимостьОтсутствияПоДругимМестамРаботы();
	УстановитьВидимостьСуммыЧернобыльскойЛьготы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОпределитьВариантДоплаты()

	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	ДоплачиватьДоСреднегоЗаДниБолезни = НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни;
	ДоплачиватьДоСохраняемогоДенежногоСодержанияЗаДниБолезни = НастройкиРасчетаЗарплаты.ИспользоватьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	
	ВариантДоплаты = 0;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") И
		 ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
						
		Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ВидДоговора", Объект.ДатаНачалаСобытия);
			ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
			СотрудникСлужащий = (ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего Или ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего);
			
			Если ДоплачиватьДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
				Если СотрудникСлужащий Тогда
					ВариантДоплаты = 2;	
				Иначе
					Если ДоплачиватьДоСреднегоЗаДниБолезни Тогда
						ВариантДоплаты = 1;	
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ДоплачиватьДоСреднегоЗаДниБолезни Тогда
					ВариантДоплаты = 1;	
				КонецЕсли;
			КонецЕсли;				
								
		КонецЕсли;	
			
	Иначе
		
		ВариантДоплаты = ?(ДоплачиватьДоСреднегоЗаДниБолезни, 1, 0);
			    		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоВариантуДоплаты()
	
	Если ВариантДоплаты = 0 Тогда
		Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница = Элементы.ДоплатаОтсутствует;
	ИначеЕсли ВариантДоплаты = 1 Тогда
		Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница = Элементы.ДоплатаДоСреднегоЗаработка;
	ИначеЕсли ВариантДоплаты = 2 Тогда
		Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница = Элементы.ДоплатаДоДенежногоСодержания;
	КонецЕсли;
			
	Если Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница <> Элементы.ДоплатаДоСреднегоЗаработка Тогда
		Объект.ДоплачиватьДоСреднегоЗаработка 			= Ложь;
		Объект.ПроцентДоплатыЗаДниНетрудоспособности 	= 0;
	КонецЕсли;	
	
	Если Элементы.ДоплатаДоСреднегоСтраницы.ТекущаяСтраница <> Элементы.ДоплатаДоДенежногоСодержания Тогда
		Объект.ДоплачиватьДоДенежногоСодержания			= Ложь;
	КонецЕсли;
	
	Если Объект.ДоплачиватьДоДенежногоСодержания Тогда
		ЗаголовокГруппыДенежноеСодержанеиеИнфо = НСтр("ru='Сохраняемое денежное содержание';uk='Зберігається грошове утримання'");
		Элементы.ДенежноеСодержаниеСтраницы.ТекущаяСтраница = Элементы.ДенежноеСодержание;
	Иначе
		ЗаголовокГруппыДенежноеСодержанеиеИнфо = "";
		Элементы.ДенежноеСодержаниеСтраницы.ТекущаяСтраница = Элементы.ДенежноеСодержаниеОтсутствует;
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПорядкаВыплаты()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПорядокВыплаты", "Доступность", НЕ ЗначениеЗаполнено(ДатаУвольненияСотрудника));
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокВыплатыУволенному()
	Если ЗначениеЗаполнено(ДатаУвольненияСотрудника) Тогда
		Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЯвляетсяПродолжениемБолезниПриИзмененииНаСервере()
	
	УстановитьСвойствоРассчитатьЗарплату();
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	Если Не Объект.ЯвляетсяПродолжениемБолезни Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
		Объект.ПервичныйБольничныйЛист = Неопределено; 
		УстановитьДоступностьПолейПоПервичномуБольничномуЛисту(ЭтаФорма);
		ОчиститьДанныеСреднегоЗаработка();  	
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьДатуУвольненияСотрудника()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	ДатаУвольненияСотрудника = Неопределено;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ДатаУвольнения", Объект.ДатаНачалаСобытия);
	Если КадровыеДанные.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаУвольненияСотрудника = КадровыеДанные[0].ДатаУвольнения;
	
КонецПроцедуры
&НаСервере
Процедура ПрочитатьДатуПриемаСотрудника()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	ДатаПриемаСотрудника = Неопределено;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ДатаПриема", Объект.ДатаНачалаСобытия);
	Если КадровыеДанные.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаПриемаСотрудника = КадровыеДанные[0].ДатаПриема;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ.Выгрузить());
	
	Модифицированность = Истина;
	
	ОписаниеТаблицы = ОписаниеТаблицыНДФЛ();
	
	РассчитатьВсеНаСервере(ОписаниеТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВзносовНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.ВзносыФОТ.Загрузить(Параметр.ВзносыФОТ.Выгрузить());
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеУдержанийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.Удержания.Загрузить(Параметр.Удержания.Выгрузить());
	Объект.ПогашениеЗаймов.Загрузить(Параметр.ПогашениеЗаймов.Выгрузить());
	
	ОписаниеТаблицы = ОписаниеТаблицыУдержаний();

	РассчитатьВсеНаСервере(ОписаниеТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоДокументРассчитан()
	
	Если ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
		Объект.ДокументРассчитан = Истина;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Результаты");
	ИменаЭлементов.Добавить("Условия");
	ИменаЭлементов.Добавить("ОплатаСтраница");
	ИменаЭлементов.Добавить("НачисленияСтраница");
	ИменаЭлементов.Добавить("НачисленияПерерасчетСтраница");
	ИменаЭлементов.Добавить("РассчитатьЗарплату");
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейМногофункциональныхДокументов(ЭтаФорма, ИменаЭлементов);
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
		УстановитьВидимостьПерерасчетов();
		УстановитьВидимостьУдержаний(ЭтаФорма);
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "Результаты", "ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляСуммыЧернобыльскойЛьготы(Форма, Видимость, ИмяПоля)

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоля, "Видимость", Видимость);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьДоступностьРегистрацииНачислений();
	
	Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
		Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
		
		Объект.ДокументРассчитан = ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
		Объект.Рассчитал = Неопределено;
		ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
		УстановитьВидимостьРасчетныхПолей();
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФлажкаРассчитатьЗарплату()
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Элементы.РассчитатьЗарплату.Заголовок = НСтр("ru='Рассчитать зарплату за период до начала больничного';uk='Розрахувати зарплату за період до початку лікарняного'");
	Иначе 
		Элементы.РассчитатьЗарплату.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Рассчитать зарплату за %1';uk='Розрахувати зарплату за %1'"), ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Объект.ПериодРегистрации)); 
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойствоРассчитатьЗарплату()
	
	НачалоПериода = Объект.ПериодРегистрации;
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда 
		НачалоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсправленныйДокумент, "ПериодРегистрации");
	КонецЕсли;
	
	ДоступенРасчетЗарплаты = Не Объект.ЯвляетсяПродолжениемБолезни И Объект.ДатаНачалаСобытия > НачалоПериода 
								И Объект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам	
								И ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты);
	
	Если Не ДоступенРасчетЗарплаты Тогда 
		Объект.РассчитатьЗарплату = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитатьЗарплату", "Доступность", ДоступенРасчетЗарплаты);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗарплатуЗаПериодДоНачалаОтсутствия()
	
	УстановитьСвойствоРассчитатьЗарплату();
	
	Если Не Объект.РассчитатьЗарплату Тогда 
		Возврат;
	КонецЕсли;
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник);
	
	Организация = Объект.Организация;
	МесяцНачисления = Объект.ПериодРегистрации;
	
	НачалоПериода = МесяцНачисления;
	ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда 
		НачалоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсправленныйДокумент, "ПериодРегистрации");
	КонецЕсли;
	
	ДатаНачалаОтсутствия = Объект.ДатаНачалаСобытия;
	
	Если ДатаНачалаОтсутствия > НачалоПериода Тогда 
		
		ОкончаниеПериода = Мин(ОкончаниеПериода, НачалоДня(ДатаНачалаОтсутствия) - 1);
		
		// Начисления
		СтрокиНачислений = РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплаты(
		Организация, НачалоПериода, ОкончаниеПериода, МесяцНачисления, , Сотрудники, , , , Объект.Ссылка, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиНачислений, Объект.Начисления);
		
		// Погашение займов
		СтрокиПогашениеЗаймов = РасчетЗарплатыРасширенный.РезультатРасчетаЗаймов(
		Организация, ОкончаниеПериода, Объект.Ссылка, Сотрудники);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПогашениеЗаймов, Объект.ПогашениеЗаймов);
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	
	Возврат УчетНДФЛФормыРасширенный.СведенияОбНДФЛ(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция СведенияОВзносах() Экспорт
	
	ДанныеОВзносах = Новый Структура;

	ДанныеОВзносах.Вставить("ВзносыФОТ", Объект.ВзносыФОТ.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОВзносах, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции


&НаСервере
Функция СведенияОбУдержаниях() Экспорт
	
	Возврат РасчетЗарплатыРасширенный.СведенияОбУдержаниях(ЭтаФорма);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыСтажаВЛисткеНетрудоспособности() Экспорт 
	
	Возврат Документы.БольничныйЛист.ВидыСтажаВЛисткеНетрудоспособности();
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьПредупрежденияОНезаполненномСтаже()
	
	ТребуетсяВводСтажа = ИспользуетсяРасчетЗарплаты И Не ДляСотрудникаВведенСтраховойСтаж И ЗначениеЗаполнено(Объект.Сотрудник);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтажиНеЗаданыГруппа", "Видимость", ТребуетсяВводСтажа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОткрытьДенежноеСодержаниеЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда
		ПерезаполнятьСреднийЗаработок = Ложь;
		ВыполнитьПерезаполнениеИРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	Описания.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
	Возврат Описания;
	
КонецФункции

#Область ОтсутствияПоДругимМестамРаботы
&НаСервере
Процедура ЗаполнитьОтсутствияПоДругимМестамРаботы()
	
	ПериодыОтсутствий = Документы.БольничныйЛист.ПериодыОтсутствий(Объект);
	ПериодОтсутствия = Документы.БольничныйЛист.ПериодОтсутствия(ПериодыОтсутствий);
	
	Если Не ЗначениеЗаполнено(ПериодОтсутствия.НачалоПериода)
		Или Не ЗначениеЗаполнено(ПериодОтсутствия.ОкончаниеПериода) Тогда
		
		ОтсутствияПоДругимМестамРаботы.Очистить();
		Возврат;
		
	КонецЕсли;
	
	КадровыйУчетФормыРасширенный.ЗаполнитьОтсутствияПоДругимМестамРаботы(
		ЭтаФорма, ПериодОтсутствия.НачалоПериода, ПериодОтсутствия.ОкончаниеПериода);
	
КонецПроцедуры
&НаСервере
Процедура УстановитьВидимостьОтсутствияПоДругимМестамРаботы()
	
	ЕстьДругиеСотрудникиФизическогоЛица = ДругиеСотрудникиФизическогоЛица.Количество() > 0;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтсутствияПоДругимМестамРаботы", "Видимость", ЕстьДругиеСотрудникиФизическогоЛица);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтсутствияПоДругимМестамРаботы", "Видимость", ЕстьДругиеСотрудникиФизическогоЛица);
			
КонецПроцедуры 	
&НаКлиенте
Процедура ОткрытьФормуНовогоБольничногоСовместителя(Совместитель = Неопределено, ОрганизацияСовместителя = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Ссылка", Неопределено);
	ДанныеЗаполнения.Вставить("Действие", "Заполнить");
	
	ДанныеЗаполнения.Вставить("Организация", ОрганизацияСовместителя);
	ДанныеЗаполнения.Вставить("Сотрудник", Совместитель);
	
	ДанныеЗаполнения.Вставить("ПричинаНетрудоспособности", Объект.ПричинаНетрудоспособности);
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.БольничныйЛист.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПериодРегистрации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Организация"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Сотрудник"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачала"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаОкончания"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ОграничениеПособия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ЯвляетсяПродолжениемБолезни"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНарушенияРежима"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДоплачиватьДоСреднегоЗаработка"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПроцентДоплатыЗаДниНетрудоспособности"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПричинаНетрудоспособности"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПорядокВыплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачалаОплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаОкончанияОплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПрименятьЛьготыПриНачисленииПособия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ЛьготаПоПособию"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПроцентОплатыБезЛьгот"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ОграничениеПособияБезЛьгот"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "УчитыватьЗаработокПредыдущихСтрахователей"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПроцентОплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДоляНеполногоВремени"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидОплатыПособия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидНеоплачиваемогоВремени"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчетаДоплаты"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "СлучайУходаЗаБольнымРебенком"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "НазначитьПособие"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачалаСобытия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "РассчитатьЗарплату"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "НадписьПервичныйЛистокНетрудоспособности"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "НадписьСтаж"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДоплачиватьДоДенежногоСодержания"));
	КонецЕсли;
	
	Для каждого ОписаниеЭлемента Из Массив Цикл
		ОписаниеЭлемента.Вставить("ПредупреждениеПриРедактировании", ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом());
	КонецЦикла;
	
	Возврат Массив
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ?(ЕстьФиксированныеДанные(Форма), ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.Авто));
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьФиксированныеДанные(Форма)
	Если НЕ Форма.РегистрацияНачисленийДоступна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсправленныйДокументЗаполнен = ЗначениеЗаполнено(Форма.Объект.ИсправленныйДокумент);
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен) 
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен);
КонецФункции 

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры



#КонецОбласти

#КонецОбласти

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
