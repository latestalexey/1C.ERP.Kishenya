#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.ОтпускПоУходуЗаРебенком - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.ОтпускПоУходуЗаРебенком - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеПоВсемУчетам = Ложь;
	МассивРегистров = Новый Массив;
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
		ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(Объект, Отказ, РежимПроведения);
	КонецЕсли;        
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(ДокументСсылка, СтруктураВидовУчета);

	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияРегистраОстатков(Движения.ЗанятыеПозицииШтатногоРасписания, РеквизитыДляПроведения.ИсправленныйДокумент);
		
		// Регистрация состояния.
		ПараметрыСостояния = СостоянияСотрудников.ПараметрыСостоянияФизическогоЛица();
		ПараметрыСостояния.ДокументСсылка = РеквизитыДляПроведения.Ссылка;
		ПараметрыСостояния.Организация = РеквизитыДляПроведения.Организация;
		ПараметрыСостояния.Начало = РеквизитыДляПроведения.ДатаНачала; 
		ПараметрыСостояния.ОкончаниеПредположительно = РеквизитыДляПроведения.ДатаОкончания; 
		// Подбираем состояние.
		ПараметрыСостояния.Состояние = СостоянияСотрудников.СостояниеПоВидуОтпускаУходаЗаРебенком(РеквизитыДляПроведения.ВидОтпуска);
		Если Не РеквизитыДляПроведения.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска Тогда
			ПараметрыСостояния.Состояние = Перечисления.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком;
		КонецЕсли;
		СостоянияСотрудников.ЗарегистрироватьСостояниеФизическогоЛица(Движения, РеквизитыДляПроведения.Сотрудник, ПараметрыСостояния);
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
			Возврат;
		КонецЕсли;
		
		// Подготовка к регистрации перерасчетов
		ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТДанныеДокументов(
			РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляРегистрацииПерерасчетов);
			
		ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		
		ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, РеквизитыДляПроведения.Ссылка);
		
	КонецЕсли;
	
	Если РеквизитыДляПроведения.НачисленияУтверждены Тогда 
		
		Если РеквизитыДляПроведения.РассчитатьЗарплату Тогда 
			
			Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
				
				РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
				
				РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
				
				РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(
					Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
				ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
					
				УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
					Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
				
				УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);	
				
				// НДФЛ
				УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(
					РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, РеквизитыДляПроведения.ДатаНачала - 1, ДанныеДляПроведения, Истина);
				
				// - Регистрация начислений в доходах для страховых взносов.
				УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
					Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
				
				УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СтраховыеВзносы);
				УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.СтраховыеВзносы);

				// - Регистрация начислений и удержаний.
				ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
							Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
							ДанныеДляПроведения.НачисленияПоСотрудникам,
							ДанныеДляПроведения.УдержанияПоСотрудникам,
							ДанныеДляПроведения.НДФЛПоСотрудникам,
							Истина);
					
				// Займы
				// - взаиморасчеты по займам
				ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
				
				// - Регистрация займов в учете заработной платы.
				УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьПогашениеЗаймов(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияЗаймов, РеквизитыДляПроведения.ПорядокВыплаты);
				
				// - Регистрация материальной выгоды в учете НДФЛ.
				ДатаОперацииПоНалогам = РеквизитыДляПроведения.ДатаНачала - 1;
				УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.МатериальнаяВыгода, Ложь);
				УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
				УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
				УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПорядокВыплаты);
				
				Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
					Модуль.ЗарегистрироватьНачисленияДляРасчетаСохраняемогоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияДляРегистрацииДенежногоСодержания);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
				
				// Учет среднего заработка
				УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
			УчетПособийСоциальногоСтрахованияРасширенный.СформироватьДвиженияУсловийОплатыОтпускаПоУходуЗаРебенком(Движения, ДанныеДляПроведения.УсловияОплатыОтпускаПоУходуЗаРебенком);
			
			СтруктураПлановыхНачислений = Новый Структура;
			СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
			СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
			СтруктураПлановыхНачислений.Вставить("ПрименениеДополнительныхПоказателей", ДанныеДляПроведения.ПрименениеДополнительныхПоказателей);
			
			РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(РеквизитыДляПроведения.Ссылка, Движения, СтруктураПлановыхНачислений, Истина);
			РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
			РасчетЗарплатыРасширенный.СформироватьДвиженияЗначенийСовокупныхТарифныхСтавок(Движения, ДанныеДляПроведения.ДанныеСовокупныхТарифныхСтавок);
			
			Если РеквизитыДляПроведения.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска Тогда
				РасчетЗарплатыРасширенный.СформироватьДвиженияПримененияПлановыхНачислений(Движения, ДанныеДляПроведения.ПрименениеНачислений);
			КонецЕсли;
			
		КонецЕсли;
		
			
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
		   КадровыйУчетРасширенный.ОсвободитьСтавкуВременно(Движения, ДанныеДляПроведения.ПериодыОсвобожденияСтавки);
		КонецЕсли;

		// Регистрация перерасчетов
		Если ЕстьПерерасчеты Тогда
			ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		КонецЕсли; 
		
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		КадровыйУчетРасширенный.ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеДляПроведения.ДанныеРеестраОтпусков, Отказ);
		
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.ОтпускПоУходуЗаРебенком);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
	Для каждого Команда Из КомандыПечати Цикл
		Команда.ПроверкаПроведенияПередПечатью = Истина;
	КонецЦикла;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ПолныеПрава,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
		КомандаПечати.Идентификатор = "ПФ_XML_UK_П3";
		КомандаПечати.Представление = НСтр("ru='Приказ о предоставлении отпуска (Форма П-3)';uk='Наказ про надання відпустки (Форма П-3)'");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	
КонецПроцедуры

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Заполняет реквизиты ПорядокВыплаты и ПланируемаяДатаВыплаты
Процедура ЗаполнитьПорядокВыплаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустоеЗначение", Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.Ссылка КАК Ссылка,
	|	ОтпускПоУходуЗаРебенком.ПериодРегистрации КАК ПериодРегистрации
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.ПорядокВыплаты = &ПустоеЗначение";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
		ДокументОбъект.ПланируемаяДатаВыплаты = НачалоДня(КонецМесяца(Выборка.ПериодРегистрации));

		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

Процедура РассчитатьФОТПоДокументу(ДокументОбъект) Экспорт
	
	Если НЕ ДокументОбъект.ИзменитьНачисления Тогда
		Возврат;
	КонецЕсли; 
	
	// Подготовка к расчету ФОТ
	РассчитываемыеОбъекты = Новый Соответствие;
	
	Сотрудники = Новый Соответствие;
	
	ТаблицаСотрудников = ДокументОбъект.Начисления.Выгрузить(, "РабочееМесто");
	ТаблицаСотрудников.Свернуть("РабочееМесто");
	
	Для каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
		
		ОписаниеСотрудника = Новый Структура;
		ОписаниеСотрудника.Вставить("Организация", ДокументОбъект.Организация);
		ОписаниеСотрудника.Вставить("ДатаРасчета", ДокументОбъект.ДатаНачала);
		ОписаниеСотрудника.Вставить("Начисления", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
		ОписаниеСотрудника.Вставить("Показатели", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
		
		НачисленияСотрудника = ДокументОбъект.Начисления.НайтиСтроки(Новый Структура("РабочееМесто", СтрокаТаблицыСотрудников.РабочееМесто));
		
		СписокНачислений = Новый Массив;
		Для Каждого СтрокаНачисления Из НачисленияСотрудника Цикл
			
			ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
			ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
			ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
			ДанныеНачисления.Размер = 0;
			
			ПоказателиНачисления = ДокументОбъект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаНачисления.ИдентификаторСтрокиВидаРасчета));
			Для Каждого СтрокаПоказателя Из ПоказателиНачисления Цикл
				ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
				ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
				ДанныеПоказателя.ДокументОснование = СтрокаНачисления.ДокументОснование;
				ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
			КонецЦикла;
			
		КонецЦикла;
		
		Сотрудники.Вставить(СтрокаТаблицыСотрудников.РабочееМесто, ОписаниеСотрудника);
		
	КонецЦикла;
	
	РассчитываемыеОбъекты.Вставить(ДокументОбъект.Ссылка, Сотрудники);
	
	// Расчет ФОТ
	РасчетЗарплатыРасширенный.РассчитатьФОТСотрудников(РассчитываемыеОбъекты, ДокументОбъект.Организация, ДокументОбъект.ДатаНачала);
	
	// Заполнение документа результатами расчета.
	ОписаниеОбъекта = РассчитываемыеОбъекты.Получить(ДокументОбъект.Ссылка);
	
	Для Каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
		
		ОписаниеСотрудника = ОписаниеОбъекта.Получить(СтрокаТаблицыСотрудников.РабочееМесто);
		
		Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Начисления Цикл
			
			Отбор = Новый Структура("РабочееМесто,Начисление,ДокументОснование", СтрокаТаблицыСотрудников.РабочееМесто, ОписаниеНачисления.Начисление, ОписаниеНачисления.ДокументОснование);
			СтрокиДокумента = ДокументОбъект.Начисления.НайтиСтроки(Отбор);
			Если СтрокиДокумента.Количество() > 0 Тогда
				СтрокиДокумента[0].Размер = ОписаниеНачисления.Размер;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДокументОбъект.Движения.ПлановыеНачисления, ДокументОбъект.Начисления, "РабочееМесто");
	
КонецПроцедуры











Функция ДатаНаступленияСтраховогоСлучая(Ссылка) Экспорт 
	
	ДатаНаступленияСтраховогоСлучая = Неопределено;
	
	Если ЗначениеЗаполнено(Ссылка) И ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		ДатаНаступленияСтраховогоСлучая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаНачала");
	КонецЕсли;
	
	Возврат ДатаНаступленияСтраховогоСлучая;	
	
КонецФункции

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ИдентификаторСтрокПоказателейПособияДоТрехЛет() Экспорт
	Возврат 9 * 1000000;
КонецФункции

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета) 

	ДанныеДляПроведения = РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если РеквизитыДляПроведения.РассчитатьЗарплату И РеквизитыДляПроведения.НачисленияУтверждены Тогда 
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			
			РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "ОплатаТруда,ОплатаЛьгот", "Ссылка.ПериодРегистрации");
			РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "ОплатаТруда,ОплатаЛьгот");
			
			РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
			
			ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, НачалоДня(РеквизитыДляПроведения.ДатаНачала - 1), "Ссылка.ПериодРегистрации");
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка("ОплатаТруда");
			ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
			УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
	
		ЗаполнитьУсловияОплатыОтпускаПоУходуЗаРебенком(РеквизитыДляПроведения, ДанныеДляПроведения);
		
		ЗаполнитьПлановыеНачисленияИПоказатели(РеквизитыДляПроведения, ДанныеДляПроведения);
		
		ЗаполнитьПрименениеПлановыхНачислений(РеквизитыДляПроведения, ДанныеДляПроведения);	
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			ЗаполнитьПериодыОсвобожденияСтавки(РеквизитыДляПроведения, ДанныеДляПроведения);
		КонецЕсли;  
		
		ЗаполнитьПрименениеДополнительныхПоказателей(РеквизитыДляПроведения, ДанныеДляПроведения);
		
		ЗаполнитьПересчетТарифныхСтавок(РеквизитыДляПроведения, ДанныеДляПроведения);	
		
		ЗаполнитьСовокупныеТарифныеСтавки(РеквизитыДляПроведения, ДанныеДляПроведения);
		
		ЗаполнитьДанныеВремениРегистрацииДокумента(РеквизитыДляПроведения, ДанныеДляПроведения);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			НачисленияДляРегистрацииДенежногоСодержания = Модуль.СведенияОНачисленияхДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка, "ОплатаТруда");
			ДанныеДляПроведения.Вставить("НачисленияДляРегистрацииДенежногоСодержания", НачисленияДляРегистрацииДенежногоСодержания);
		КонецЕсли;

		// Данные для Реестра отпусков
		ДанныеРеестраОтпусков = КадровыйУчетРасширенный.ТаблицаРеестраОтпусков();
				
		Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.Номер);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтпускПоУходуЗаРебенком.ОсновнойСотрудник КАК Сотрудник,
		|	ОтпускПоУходуЗаРебенком.Сотрудник КАК ФизическоеЛицо,
		|	ОтпускПоУходуЗаРебенком.Ссылка КАК ДокументОснование,
		|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК ДатаНачалаПериодаОтсутствия,
		|	ОтпускПоУходуЗаРебенком.ДатаОкончания КАК ДатаОкончанияПериодаОтсутствия,
		|	ПРЕДСТАВЛЕНИЕ(ОтпускПоУходуЗаРебенком.ВидОтпуска) КАК ВидОтпуска
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
		|ГДЕ
		|	ОтпускПоУходуЗаРебенком.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомерСтр = 1;
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Номер = НомерСтр;
			
			НоваяСтрока.КоличествоДнейОтпуска = (КонецДня(Выборка.ДатаОкончанияПериодаОтсутствия) - НачалоДня(Выборка.ДатаНачалаПериодаОтсутствия))/86400;
			
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
	   			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.ДатаНачалаПериодаОтсутствия);
	    				
			НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
			
			НоваяСтрока.Основание = Основание;
			
			НомерСтр = НомерСтр + 1;
			
		КонецЦикла;	
		
		ДанныеДляПроведения.Вставить("ДанныеРеестраОтпусков", ДанныеРеестраОтпусков);
		
	КонецЕсли;

	Возврат ДанныеДляПроведения;

КонецФункции

Процедура СоздатьВТДанныеДокументов(ДокументСсылка, Сотрудник, Организация, ВремяРегистрации, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("СписокСотрудников", КадровыйУчетРасширенный.МассивСотрудников(Сотрудник, Организация, ВремяРегистрации));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Организация КАК Организация,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ТаблицаДокумента.Сотрудник = Сотрудники.ФизическоеЛицо
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И Сотрудники.Ссылка В(&СписокСотрудников)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Организация,
		|	Сотрудники.Ссылка,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаОкончания, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ТаблицаДокумента.Сотрудник = Сотрудники.ФизическоеЛицо
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|	И Сотрудники.Ссылка В(&СписокСотрудников)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьУсловияОплатыОтпускаПоУходуЗаРебенком(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	УсловияОплаты = Новый ТаблицаЗначений;
	УсловияОплаты.Колонки.Добавить("СтраховойСлучай");
	УсловияОплаты.Колонки.Добавить("Период");
	УсловияОплаты.Колонки.Добавить("Сотрудник");
	УсловияОплаты.Колонки.Добавить("Организация");
	УсловияОплаты.Колонки.Добавить("ФизическоеЛицо");
	УсловияОплаты.Колонки.Добавить("ДатаНачалаСобытия");
	
		НовыеУсловияОплаты 										= УсловияОплаты.Добавить();
		НовыеУсловияОплаты.СтраховойСлучай 						= РеквизитыДляПроведения.Ссылка;
		НовыеУсловияОплаты.Период 								= РеквизитыДляПроведения.ДатаНачала;
		НовыеУсловияОплаты.ДатаНачалаСобытия 					= РеквизитыДляПроведения.ДатаНачала;
		НовыеУсловияОплаты.Сотрудник 							= РеквизитыДляПроведения.ОсновнойСотрудник;
		НовыеУсловияОплаты.Организация 							= РеквизитыДляПроведения.Организация;
		НовыеУсловияОплаты.ФизическоеЛицо 						= РеквизитыДляПроведения.Сотрудник;
	
	ДанныеДляПроведения.Вставить("УсловияОплатыОтпускаПоУходуЗаРебенком", УсловияОплаты);
	
КонецПроцедуры

Процедура ЗаполнитьПлановыеНачисленияИПоказатели(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	ПлановыеНачисления = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииПлановыхНачислений();
	ЗначенияПоказателей = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииЗначенийПериодическихПоказателей();
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(РеквизитыДляПроведения.Организация);
	
	
	Если РеквизитыДляПроведения.ВыплачиватьПособиеДоТрехЛет Тогда
		ДобавитьПособиеПоУходуДоТрехЛет(РеквизитыДляПроведения, ПлановыеНачисления, ГоловнаяОрганизация);
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ИзменитьНачисления И Не РеквизитыДляПроведения.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска Тогда
		ДобавитьПлановыеНачисления(РеквизитыДляПроведения, ПлановыеНачисления);
		ДобавитьПлановыеПоказатели(РеквизитыДляПроведения, ЗначенияПоказателей);	
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ИзменитьЛьготы И Не РеквизитыДляПроведения.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска Тогда
		ДобавитьЛьготы(РеквизитыДляПроведения, ПлановыеНачисления);
		ДобавитьПоказателиЛьгот(РеквизитыДляПроведения, ЗначенияПоказателей);
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
	
КонецПроцедуры

Процедура ЗаполнитьПрименениеПлановыхНачислений(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	ПрименениеНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииПримененияПлановыхНачислений();
	
	Если РеквизитыДляПроведения.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска Тогда
		
		МассивРабочихМест = КадровыйУчетРасширенный.МассивСотрудников(РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ДатаНачала);

		Для каждого РабочееМесто Из МассивРабочихМест Цикл
			ПустоеПрименениеНачислений = ПрименениеНачислений.Добавить();
			ПустоеПрименениеНачислений.Сотрудник = РабочееМесто;
		КонецЦикла;
		
		ПрименениеНачислений.ЗаполнитьЗначения(РеквизитыДляПроведения.ДатаНачала, "ДатаСобытия");
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПрименениеНачислений", ПрименениеНачислений);
	
КонецПроцедуры

Процедура ЗаполнитьПериодыОсвобожденияСтавки(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	МассивРабочихМест = КадровыйУчетРасширенный.МассивСотрудников(РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ДатаНачала);
	КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, МассивРабочихМест, РеквизитыДляПроведения.ДатаНачала, КонецДня(РеквизитыДляПроведения.ДатаОкончания) + 1);
	
КонецПроцедуры

Процедура ЗаполнитьПрименениеДополнительныхПоказателей(РеквизитыДляПроведения, ДанныеДляПроведения)	
	
	ПрименениеДополнительныхПоказателей = Неопределено;
	
	Если РеквизитыДляПроведения.ИзменитьНачисления 
		И Не РеквизитыДляПроведения.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска Тогда
		Запрос = ЗапросССсылкой(РеквизитыДляПроведения.Ссылка);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка,
			|	ОтпускПоУходуЗаРебенкомПоказатели.Показатель,
			|	ОтпускПоУходуЗаРебенкомПоказатели.РабочееМесто
			|ПОМЕСТИТЬ ВТПоказателиНачислений
			|ИЗ
			|	Документ.ОтпускПоУходуЗаРебенком.Начисления КАК ОтпускПоУходуЗаРебенкомНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком.Показатели КАК ОтпускПоУходуЗаРебенкомПоказатели
			|		ПО ОтпускПоУходуЗаРебенкомНачисления.Ссылка = ОтпускПоУходуЗаРебенкомПоказатели.Ссылка
			|			И ОтпускПоУходуЗаРебенкомНачисления.РабочееМесто = ОтпускПоУходуЗаРебенкомПоказатели.РабочееМесто
			|			И ОтпускПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета = ОтпускПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета
			|ГДЕ
			|	ОтпускПоУходуЗаРебенкомНачисления.Ссылка = &Ссылка
			|	И ОтпускПоУходуЗаРебенкомНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка.ДатаНачала КАК ДатаСобытия,
			|	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка.Организация КАК Организация,
			|	ОтпускПоУходуЗаРебенкомПоказатели.РабочееМесто КАК Сотрудник,
			|	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка.Сотрудник КАК ФизическоеЛицо,
			|	ОтпускПоУходуЗаРебенкомПоказатели.Показатель КАК Показатель,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
			|	ВЫБОР
			|		КОГДА ОтпускПоУходуЗаРебенкомПоказатели.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Применение
			|ИЗ
			|	Документ.ОтпускПоУходуЗаРебенком.Показатели КАК ОтпускПоУходуЗаРебенкомПоказатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиНачислений КАК ПоказателиНачислений
			|		ПО ОтпускПоУходуЗаРебенкомПоказатели.Ссылка = ПоказателиНачислений.Ссылка
			|			И ОтпускПоУходуЗаРебенкомПоказатели.РабочееМесто = ПоказателиНачислений.РабочееМесто
			|			И ОтпускПоУходуЗаРебенкомПоказатели.Показатель = ПоказателиНачислений.Показатель
			|ГДЕ
			|	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка = &Ссылка
			|	И ОтпускПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета = 0
			|	И ОтпускПоУходуЗаРебенкомПоказатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|	И ПоказателиНачислений.Показатель ЕСТЬ NULL ";

		ПрименениеДополнительныхПоказателей = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПрименениеДополнительныхПоказателей", ПрименениеДополнительныхПоказателей);
	
КонецПроцедуры	

Процедура ЗаполнитьПересчетТарифныхСтавок(РеквизитыДляПроведения, ДанныеДляПроведения)	
	
	ПорядокПересчетаТарифнойСтавки = Неопределено;
	
	Если РеквизитыДляПроведения.ИзменитьНачисления И Не РеквизитыДляПроведения.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска Тогда
		Запрос = ЗапросССсылкой(РеквизитыДляПроведения.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПересчетТарифныхСтавок.Ссылка.ДатаНачала КАК ДатаСобытия,
		|	ПересчетТарифныхСтавок.РабочееМесто КАК Сотрудник,
		|	ПересчетТарифныхСтавок.Ссылка.Сотрудник КАК ФизическоеЛицо,
		|	ПересчетТарифныхСтавок.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком.ПересчетТарифныхСтавок КАК ПересчетТарифныхСтавок
		|ГДЕ
		|	ПересчетТарифныхСтавок.Ссылка = &Ссылка";
		
		ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
	
КонецПроцедуры

Процедура ЗаполнитьСовокупныеТарифныеСтавки(РеквизитыДляПроведения, ДанныеДляПроведения)	
	
	ДанныеСовокупныхТарифныхСтавок = Неопределено;
	
	Если РеквизитыДляПроведения.ИзменитьНачисления И Не РеквизитыДляПроведения.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска Тогда
		
		Запрос = ЗапросССсылкой(РеквизитыДляПроведения.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПересчетТарифныхСтавок.Ссылка.ДатаНачала КАК ДатаСобытия,
		|	ПересчетТарифныхСтавок.РабочееМесто КАК Сотрудник,
		|	ПересчетТарифныхСтавок.Ссылка.Сотрудник КАК ФизическоеЛицо,
		|	ПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА ПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ ПересчетТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком.ПересчетТарифныхСтавок КАК ПересчетТарифныхСтавок
		|ГДЕ
		|	ПересчетТарифныхСтавок.Ссылка = &Ссылка";
				
		ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВремениРегистрацииДокумента(РеквизитыДляПроведения, ДанныеДляПроведения)
	
	Запрос = ЗапросССсылкой(РеквизитыДляПроведения.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенкомНачисления.Ссылка.ДатаНачала КАК ДатаСобытия,
	|	ОтпускПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком.Начисления КАК ОтпускПоУходуЗаРебенкомНачисления
	|ГДЕ
	|	ОтпускПоУходуЗаРебенкомНачисления.Ссылка = &Ссылка";
	
	ДанныеДляПроведения.Вставить("СотрудникиДаты", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры


Процедура ДобавитьПособиеПоУходуДоТрехЛет(РеквизитыДляПроведения, ПлановыеНачисления, ГоловнаяОрганизация)
	НовоеПлановоеНачисление = ПлановыеНачисления.Добавить();
	НовоеПлановоеНачисление.ДатаСобытия = РеквизитыДляПроведения.ДатаНачала;
	НовоеПлановоеНачисление.ДействуетДо = КонецДня(РеквизитыДляПроведения.ДатаОкончанияПособияДоТрехЛет) + 1;
	НовоеПлановоеНачисление.Сотрудник = РеквизитыДляПроведения.ОсновнойСотрудник;
	НовоеПлановоеНачисление.ФизическоеЛицо = РеквизитыДляПроведения.Сотрудник;
	НовоеПлановоеНачисление.ГоловнаяОрганизация = ГоловнаяОрганизация;
	НовоеПлановоеНачисление.Начисление = РеквизитыДляПроведения.ПособиеДоТрехЛет;
	НовоеПлановоеНачисление.Используется = Истина;
КонецПроцедуры

Процедура ДобавитьПлановыеНачисления(РеквизитыДляПроведения, ПлановыеНачисления)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК ДатаСобытия,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	|	ОтпускПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ОтпускПоУходуЗаРебенкомНачисления.Начисление,
	|	ОтпускПоУходуЗаРебенкомНачисления.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ОтпускПоУходуЗаРебенкомНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется,
	|	ОтпускПоУходуЗаРебенком.Сотрудник КАК ФизическоеЛицо,
	|	ОтпускПоУходуЗаРебенкомНачисления.Размер,
	|	ОтпускПоУходуЗаРебенком.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком.Начисления КАК ОтпускПоУходуЗаРебенкомНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ПО ОтпускПоУходуЗаРебенкомНачисления.Ссылка = ОтпускПоУходуЗаРебенком.Ссылка
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПлановыеНачисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПлановыеПоказатели(РеквизитыДляПроведения, ЗначенияПоказателей)
	
	Запрос = ЗапросССсылкой(РеквизитыДляПроведения.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.Организация,
	|	ОтпускПоУходуЗаРебенком.Сотрудник КАК ФизическоеЛицо,
	|	ОтпускПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ОтпускПоУходуЗаРебенкомПоказатели.Показатель,
	|	ОтпускПоУходуЗаРебенкомНачисления.ДокументОснование,
	|	ОтпускПоУходуЗаРебенкомПоказатели.Значение,
	|	ОтпускПоУходуЗаРебенком.ДатаНачала КАК ДатаСобытия,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком.Показатели КАК ОтпускПоУходуЗаРебенкомПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком.Начисления КАК ОтпускПоУходуЗаРебенкомНачисления
	|		ПО ОтпускПоУходуЗаРебенкомПоказатели.Ссылка = ОтпускПоУходуЗаРебенкомНачисления.Ссылка
	|			И ОтпускПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета = ОтпускПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета
	|			И (ОтпускПоУходуЗаРебенкомНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|		ПО ОтпускПоУходуЗаРебенкомПоказатели.Ссылка = ОтпускПоУходуЗаРебенком.Ссылка
	|			И (ОтпускПоУходуЗаРебенком.Ссылка = &Ссылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗначенияПоказателей.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЛьготы(РеквизитыДляПроведения, ПлановыеНачисления)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускПоУходуЗаРебенкомЛьготы.Ссылка.ДатаНачала КАК ДатаСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ОтпускПоУходуЗаРебенкомЛьготы.РабочееМесто КАК Сотрудник,
		|	ОтпускПоУходуЗаРебенкомЛьготы.Льгота КАК Начисление,
		|	ОтпускПоУходуЗаРебенкомЛьготы.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ОтпускПоУходуЗаРебенкомЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	ОтпускПоУходуЗаРебенкомЛьготы.Ссылка.Сотрудник КАК ФизическоеЛицо,
		|	ОтпускПоУходуЗаРебенкомЛьготы.Размер КАК Размер,
		|	ОтпускПоУходуЗаРебенкомЛьготы.Ссылка.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком.Льготы КАК ОтпускПоУходуЗаРебенкомЛьготы
		|ГДЕ
		|	ОтпускПоУходуЗаРебенкомЛьготы.Ссылка = &Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПлановыеНачисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиЛьгот(РеквизитыДляПроведения, ЗначенияПоказателей)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка.Организация КАК Организация,
	               |	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка.Сотрудник КАК ФизическоеЛицо,
	               |	ОтпускПоУходуЗаРебенкомЛьготы.РабочееМесто КАК Сотрудник,
	               |	ОтпускПоУходуЗаРебенкомПоказатели.Показатель КАК Показатель,
	               |	ОтпускПоУходуЗаРебенкомЛьготы.ДокументОснование КАК ДокументОснование,
	               |	ОтпускПоУходуЗаРебенкомПоказатели.Значение КАК Значение,
	               |	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка.ДатаНачала КАК ДатаСобытия,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	               |ИЗ
	               |	Документ.ОтпускПоУходуЗаРебенком.Показатели КАК ОтпускПоУходуЗаРебенкомПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтпускПоУходуЗаРебенком.Льготы КАК ОтпускПоУходуЗаРебенкомЛьготы
	               |		ПО ОтпускПоУходуЗаРебенкомПоказатели.Ссылка = ОтпускПоУходуЗаРебенкомЛьготы.Ссылка
	               |			И ОтпускПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета = ОтпускПоУходуЗаРебенкомЛьготы.ИдентификаторСтрокиВидаРасчета
	               |			И (ОтпускПоУходуЗаРебенкомЛьготы.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
	               |			И (ОтпускПоУходуЗаРебенкомПоказатели.Ссылка = &Ссылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗначенияПоказателей.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросССсылкой(ДокументСсылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Возврат Запрос;
КонецФункции 

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенком.Ссылка,
	|	ОтпускПоУходуЗаРебенком.Организация,
	|	ОтпускПоУходуЗаРебенком.ИсправленныйДокумент,
	|	ОтпускПоУходуЗаРебенком.ДатаНачала,
	|	ОтпускПоУходуЗаРебенком.ДатаОкончания,
	|	ОтпускПоУходуЗаРебенком.НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска,
	|	ОтпускПоУходуЗаРебенком.НачисленияУтверждены,
	|	ОтпускПоУходуЗаРебенком.РассчитатьЗарплату,
	|	ОтпускПоУходуЗаРебенком.ПорядокВыплаты,
	|	ОтпускПоУходуЗаРебенком.Дата,
	|	ОтпускПоУходуЗаРебенком.ОсновнойСотрудник,
	|	ОтпускПоУходуЗаРебенком.ОсвобождатьСтавку,
	|	ОтпускПоУходуЗаРебенком.Номер,
	|	ОтпускПоУходуЗаРебенком.Сотрудник,
	|	ОтпускПоУходуЗаРебенком.ВыплачиватьПособиеДоТрехЛет,
	|	ОтпускПоУходуЗаРебенком.ИзменитьНачисления,
	|	ОтпускПоУходуЗаРебенком.ИзменитьЛьготы,
	|	ОтпускПоУходуЗаРебенком.ДатаОкончанияПособияДоТрехЛет,
	|	ОтпускПоУходуЗаРебенком.ВидОтпуска,
	|	ОтпускПоУходуЗаРебенком.ПериодРегистрации
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком КАК ОтпускПоУходуЗаРебенком
	|ГДЕ
	|	ОтпускПоУходуЗаРебенком.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком.РаспределениеПоТерриториямУсловиямТруда КАК ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	ОтпускПоУходуЗаРебенкомРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускПоУходуЗаРебенкомПоказатели.НомерСтроки,
	|	ОтпускПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета,
	|	ОтпускПоУходуЗаРебенкомПоказатели.Показатель,
	|	ОтпускПоУходуЗаРебенкомПоказатели.Значение,
	|	ОтпускПоУходуЗаРебенкомПоказатели.Действие,
	|	ОтпускПоУходуЗаРебенкомПоказатели.РабочееМесто
	|ИЗ
	|	Документ.ОтпускПоУходуЗаРебенком.Показатели КАК ОтпускПоУходуЗаРебенкомПоказатели
	|ГДЕ
	|	ОтпускПоУходуЗаРебенкомПоказатели.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;    
	
	Показатели = Результаты[2].Выгрузить();
	
	РеквизитыДляПроведения.Показатели = Показатели;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ИсправленныйДокумент, ДатаНачала, ДатаОкончания, НеНачислятьЗарплатуИНеВыплачиватьАвансВоВремяОтпуска, 
		| НачисленияУтверждены, РассчитатьЗарплату, ПорядокВыплаты, Дата, ОсновнойСотрудник, ОсвобождатьСтавку, 
		| Номер, Сотрудник,
		| ВыплачиватьПособиеДоТрехЛет, ИзменитьНачисления, ИзменитьЛьготы, ДатаОкончанияПособияДоТрехЛет, ВидОтпуска, 
		| РаспределениеПоТерриториямУсловиямТруда, Показатели, ПериодРегистрации");	
	
		
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

#КонецОбласти

#КонецЕсли
