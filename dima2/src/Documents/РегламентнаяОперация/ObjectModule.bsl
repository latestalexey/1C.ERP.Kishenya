#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция УчетнаяПолитикаСуществует(ОрганизацияДляУчетнойПолитики)
	
	Существует = УчетнаяПолитика.Существует(ОрганизацияДляУчетнойПолитики, Дата, Ложь, Ссылка);
	Отказ      = Не Существует;
	
	Если Не Существует Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для организации %1 на %2 не заполнена учетная политика.';uk='Для організації %1 на %2 не заповнена облікова політика.'"),
			ОрганизацияДляУчетнойПолитики,
			Формат(НачалоМесяца(Дата), "ДФ='MMMM yyyy'"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Организация", "Объект", Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Функция ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок) Экспорт
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Отказ               = Отказ ИЛИ УчетнаяПолитикаСуществует(ГоловнаяОрганизация);
	СтруктураШапки      = Новый Структура();
	
	Если Отказ Тогда
		Возврат СтруктураШапки;
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.ЗагрузитьЗначения(БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация));
	
	СтруктураШапки.Вставить("НачДата",                 НачалоМесяца(Дата));
	СтруктураШапки.Вставить("КонДата",                 КонецМесяца(Дата));
	СтруктураШапки.Вставить("НачГраница",              Новый Граница(СтруктураШапки.НачДата, ВидГраницы.Исключая));
	СтруктураШапки.Вставить("КонГраница",              Новый Граница(СтруктураШапки.КонДата, ВидГраницы.Включая));
	СтруктураШапки.Вставить("НачГода",                 НачалоГода(Дата));
	СтруктураШапки.Вставить("Организация",             Организация);
	СтруктураШапки.Вставить("СписокОрганизаций",       СписокОрганизаций);
	СтруктураШапки.Вставить("Ссылка",                  Ссылка);
	СтруктураШапки.Вставить("Дата",                    Дата);
	СтруктураШапки.Вставить("Номер",                   Номер);
	СтруктураШапки.Вставить("ТипОперации",             ТипОперации);
	СтруктураШапки.Вставить("Заголовок",               Заголовок);
	СтруктураШапки.Вставить("ГоловноеПодразделение",   ГоловнаяОрганизация);
	СтруктураШапки.Вставить("Предприниматель",         (Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
	
	Возврат СтруктураШапки;
	
КонецФункции

Процедура ВыполнитьРегламентнуюОперацию(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ЗаполнитьСтруктуруШапкиДокумента(Отказ, Заголовок);
	

	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПереоценкаВалютныхСредств Тогда
		
		РасчетКурсовыхРазницРегл(СтруктураШапкиДокумента, Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата Тогда
		
		// Закрытие счетов доходов и расходов
		ФормированиеФинансовогоРезультатаУКР(СтруктураШапкиДокумента, Отказ)
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода Тогда
		
		// Операции закрытия года
		ЗакрытиеГодаУКР(СтруктураШапкиДокумента, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#Область НЕУКР


#КонецОбласти 

// Переоценка валютных средств

Процедура РасчетКурсовыхРазницРегл(СтруктураШапкиДокумента, Отказ)
	
	Документы.РегламентнаяОперация.РасчетКурсовыхРазниц(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

// Определение финансового результата

Процедура ФормированиеФинансовогоРезультатаУКР(СтруктураШапкиДокумента, Отказ)
	
	Документы.РегламентнаяОперация.ФормированиеФинансовогоРезультатаУКР(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры

// Закрытие года

Процедура ЗакрытиеГодаУКР(СтруктураШапкиДокумента, Отказ)
	
	Документы.РегламентнаяОперация.ЗакрытиеГодаУКР(СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры


#Область НЕУКР


#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ВремОрганизация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	Если ЗначениеЗаполнено(ВремОрганизация) И Не Организация = ВремОрганизация Тогда
		
		Организация = ВремОрганизация;
		
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		
		ЗначениеИзСтруктуры = Неопределено;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Организация", ЗначениеИзСтруктуры) Тогда
			
			Организация = ЗначениеИзСтруктуры;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не Организация.Пустая() Тогда
		
		// Проверяем наличие проведенных регл. операций в этом месяце по выбранной организации
		ПроверитьДублиДокументов(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Регламентная операция по закрытию месяца.%1';uk='Регламентна операція з закриття місяця.%1'"),
			СокрЛП(ТипОперации)));
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ);
	
	ВыполнитьРегламентнуюОперацию(Отказ);
	
	ОперацииКОтражениюВРеглУчете = Новый Массив;
	
	Если Не Отказ И ОперацииКОтражениюВРеглУчете.Найти(ТипОперации) <> Неопределено Тогда
		РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	//++ НЕ УТКА
	Если Не Отказ И ОперацииКОтражениюВРеглУчете.Найти(ТипОперации) <> Неопределено И ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		МеждународныйУчетПроведениеСервер.ЗарегистрироватьДокументКОтражениюВМеждународномУчете(ЭтотОбъект, Истина);
	КонецЕсли;
	//-- НЕ УТКА
	
	// Сохраним результатаы проведения
	Движения.Записать();
	
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеПроцедуры

Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ новый, то подготовки не требуется, наборы записей и так пусты
	ЭтоНовый = Ложь;
	Если ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый) И ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеРегистры = Неопределено;
	РежимЗаписи         = Неопределено;
	ОтменаПроведения    = ДополнительныеСвойства.Свойство("РежимЗаписи", РежимЗаписи)
	                      И (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	
	Для Каждого НаборЗаписей Из Движения Цикл
		
		// Очищаем наборы записей
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	// Определяем наборы записей, в которых есть движения
	МассивИменРегистров = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
		Ссылка,
		Метаданные().Движения,
		ИсключаемыеРегистры);
	
	// Записываем наборы записей, в которых есть движения
	Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
		Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
	Движения.Записать();
	
КонецПроцедуры

Процедура ПроверитьДублиДокументов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Организация
	|ИЗ
	|	Документ.РегламентнаяОперация КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериодаПериода
	|	И ДанныеДокумента.Ссылка.ТипОперации = &ТипОперации
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.Организация = &Организация");
	
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериодаПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Ссылка",              Ссылка);
	Запрос.УстановитьПараметр("ТипОперации",         ТипОперации);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ШаблонТекста = НСтр("ru='За %1 уже есть проведенный документ ""Регламентная операция - %2"" для организации %3';uk='За %1 вже є проведений документ ""Регламентна операція - %2"" для організації %3'");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста,
				Формат(Дата, "ДФ='ММММ гггг ""г.""'"),
				ТипОперации,
				Выборка.Организация);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Дата", "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область НЕУКР

#КонецОбласти

#Область БлокировкаПриОбновленииИБ

Процедура ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПредставлениеОперации)
	
	ВходящиеДанные = Новый Соответствие;
	
	ВходящиеДанные.Вставить(Метаданные.Документы.РегламентнаяОперация);
	ВходящиеДанные.Вставить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	
	Если ТипОперации = Перечисления.ТипыРегламентныхОпераций.ФормированиеРезервовПоСомнительнымДолгам Тогда
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы);
		ВходящиеДанные.Вставить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.ДолиСписанияКосвенныхРасходов);
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ПереоценкаВалютныхСредств Тогда
		
		ВходящиеДанные.Вставить(Метаданные.РегистрыСведений.КурсыВалют);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ФормированиеФинансовогоРезультата Тогда
		
		
		
	ИначеЕсли ТипОперации = Перечисления.ТипыРегламентныхОпераций.ЗакрытиеГода Тогда
		
		
	КонецЕсли;
	
	ЗакрытиеМесяцаУТВызовСервера.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ВходящиеДанные, ПредставлениеОперации);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#КонецЕсли
