#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "Сотрудник");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, , , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	УчетНДФЛ.СформироватьПрименениеЛьгот(Движения, Отказ, ДанныеДляПроведения(), , Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка на дубли движений
	Запрос = Документы.ПрекращениеЛьготПоНДФЛ.КонфликтующиеРегистраторы(Ссылка, Месяц, Сотрудник);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();   
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = НСтр("ru='Не удалось провести заявление. Чтобы изменить льготы отредактируйте заявление номер %1.';uk='Не вдалося провести заяву. Щоб змінити пільги відредагуйте заява номер для %1.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Регистратор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Регистратор.ПолучитьОбъект());
			Отказ = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПроведения()
	
	ДанныеОЛьготах = Новый Структура(
		"МесяцРегистрации,ФизическоеЛицо,ГоловнаяОрганизация,
		|ИзменитьЛьготыНаДетей,ЛьготыНаДетей,
		|ИзменитьЛичнуюЛьготу,ЛичныеЛьготы");
	
	ЗаполнитьЗначенияСвойств(ДанныеОЛьготах, СведенияДляПрекращенияЛьгот());
	
	ДанныеОЛьготах.Вставить("ЛьготыНаДетей", СведенияОПрекращаемыхЛьготахНаДетей(ДанныеОЛьготах));
	ДанныеОЛьготах.ИзменитьЛьготыНаДетей = ДанныеОЛьготах.ЛьготыНаДетей.Количество() > 0;

	ДанныеОЛьготах.Вставить("ЛичныеЛьготы", СведенияОПрекращаемыхЛичныхЛьготах(ДанныеОЛьготах));
	ДанныеОЛьготах.ИзменитьЛичнуюЛьготу = ДанныеОЛьготах.ЛичныеЛьготы.Количество() > 0;
	
	Возврат ДанныеОЛьготах;
	
КонецФункции

Функция СведенияДляПрекращенияЛьгот()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Месяц КАК МесяцРегистрации,
	|	Док.Сотрудник КАК ФизическоеЛицо,
	|	Док.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.ПрекращениеЛьготПоНДФЛ КАК Док
	|ГДЕ
	|	Док.Ссылка = &Документ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СведенияОПрекращаемыхЛьготахНаДетей(ДанныеОЛьготах)
	
	ТаблицаЛьготыНаДетей = Новый ТаблицаЗначений;
	ТаблицаЛьготыНаДетей.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаЛьготыНаДетей.Колонки.Добавить("МесяцРегистрации");
	ТаблицаЛьготыНаДетей.Колонки.Добавить("Льгота");
	ТаблицаЛьготыНаДетей.Колонки.Добавить("ДатаДействия");
	ТаблицаЛьготыНаДетей.Колонки.Добавить("КоличествоДетей");
	ТаблицаЛьготыНаДетей.Колонки.Добавить("ДействуетДо");
	ТаблицаЛьготыНаДетей.Колонки.Добавить("КоличествоДетейПоОкончании");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Месяц",			Месяц);
	Запрос.УстановитьПараметр("ФизическоеЛицо",	Сотрудник);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛьготыНаДетейНДФЛ.Льгота
	|ИЗ
	|	РегистрСведений.ЛьготыНаДетейНДФЛ КАК ЛьготыНаДетейНДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ЛьготыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации
	|		ИЗ
	|			РегистрСведений.ЛьготыНаДетейНДФЛ КАК ЛьготыНаДетейНДФЛ
	|		ГДЕ
	|			ЛьготыНаДетейНДФЛ.МесяцРегистрации < &Месяц
	|			И ЛьготыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо) КАК ВложенныйЗапрос
	|		ПО ЛьготыНаДетейНДФЛ.МесяцРегистрации = ВложенныйЗапрос.МесяцРегистрации
	|			И (ЛьготыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо)
	|ГДЕ
	|	ЛьготыНаДетейНДФЛ.КоличествоДетей > 0
	|	И ЛьготыНаДетейНДФЛ.ДействуетДо >= &Месяц";
	ЛьготыНаДетейВыборка = Запрос.Выполнить().Выбрать();
	
	Пока ЛьготыНаДетейВыборка.Следующий() Цикл
		ЗаписьОЛьготеНаДетей					= ТаблицаЛьготыНаДетей.Добавить();
		ЗаписьОЛьготеНаДетей.ФизическоеЛицо		= ДанныеОЛьготах.ФизическоеЛицо;
		ЗаписьОЛьготеНаДетей.МесяцРегистрации	= ДанныеОЛьготах.МесяцРегистрации;
		ЗаписьОЛьготеНаДетей.Льгота				= ЛьготыНаДетейВыборка.Льгота;
		ЗаписьОЛьготеНаДетей.ДатаДействия		= ДанныеОЛьготах.МесяцРегистрации;
	КонецЦикла;
	
	Возврат ТаблицаЛьготыНаДетей;
	
КонецФункции

Функция СведенияОПрекращаемыхЛичныхЛьготах(ДанныеОЛьготах)

	ТаблицаЛичныеЛьготы = Новый ТаблицаЗначений;
	ТаблицаЛичныеЛьготы.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаЛичныеЛьготы.Колонки.Добавить("Льгота");
	ТаблицаЛичныеЛьготы.Колонки.Добавить("Актуальность");
	ТаблицаЛичныеЛьготы.Колонки.Добавить("Основание");
	ТаблицаЛичныеЛьготы.Колонки.Добавить("Период");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Месяц",			Месяц);
	Запрос.УстановитьПараметр("ФизическоеЛицо",	Сотрудник);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЛьготыФизическихЛицНДФЛСрезПоследних.Льгота КАК Льгота
	|ИЗ
	|	РегистрСведений.ЛьготыФизическихЛицНДФЛ.СрезПоследних(
	|			&Месяц,
	|			ФизическоеЛицо = &ФизическоеЛицо
	|				И Период < &Месяц
	|				И Актуальность = ИСТИНА) КАК ЛьготыФизическихЛицНДФЛСрезПоследних";
	ЛичныеЛьготыВыборка =  Запрос.Выполнить().Выбрать();
	
	Пока ЛичныеЛьготыВыборка.Следующий() Цикл
		
			ЗаписьОЛичнойЛьготе = ТаблицаЛичныеЛьготы.Добавить();
			
			ЗаписьОЛичнойЛьготе.ФизическоеЛицо				= ДанныеОЛьготах.ФизическоеЛицо;
			ЗаписьОЛичнойЛьготе.Льгота						= ЛичныеЛьготыВыборка.Льгота;
			ЗаписьОЛичнойЛьготе.Период						= Месяц;
			ЗаписьОЛичнойЛьготе.Актуальность				= Ложь;
			
	КонецЦикла;
	
	Возврат ТаблицаЛичныеЛьготы;
	
КонецФункции

#КонецОбласти

#КонецЕсли
