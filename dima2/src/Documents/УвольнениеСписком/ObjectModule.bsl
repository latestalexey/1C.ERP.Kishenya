#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "Сотрудники.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, 
				ДанныеЗаполнения.Ссылка, "ДокументРассчитан");
			
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			
			ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
			
			// Заполним таблицу перерасчета и показателей для нее
			ТаблицаПоказателей = ЭтотОбъект.Показатели.Выгрузить();
			ОписаниеТаблицы = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(Истина);
			ИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + 1;
			Для каждого СтрокаНачисления Из ЭтотОбъект.Начисления Цикл
				НоваяСтрокаПерерасчета = ЭтотОбъект.НачисленияПерерасчет.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, СтрокаНачисления);
				
				НоваяСтрокаПерерасчета.Сторно							= Истина;
				НоваяСтрокаПерерасчета.ФиксСторно						= Истина;
				НоваяСтрокаПерерасчета.СторнируемыйДокумент				= ИсправленныйДокумент;
				НоваяСтрокаПерерасчета.ИдентификаторСтрокиВидаРасчета	= ИдентификаторСтроки;
				НоваяСтрокаПерерасчета.Результат						= - НоваяСтрокаПерерасчета.Результат;
				НоваяСтрокаПерерасчета.СуммаВычета						= - НоваяСтрокаПерерасчета.СуммаВычета;
				НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ		= - НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ;
				НоваяСтрокаПерерасчета.ОтработаноДней					= - НоваяСтрокаПерерасчета.ОтработаноДней;
				НоваяСтрокаПерерасчета.ОтработаноЧасов					= - НоваяСтрокаПерерасчета.ОтработаноЧасов;
				НоваяСтрокаПерерасчета.ОплаченоДней						= - НоваяСтрокаПерерасчета.ОплаченоДней;
				НоваяСтрокаПерерасчета.ОплаченоЧасов					= - НоваяСтрокаПерерасчета.ОплаченоЧасов;
				
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
				
				СтрокиПоказателейНачисления = ТаблицаПоказателей.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаНачисления.ИдентификаторСтрокиВидаРасчета));
				Для Каждого СтрокаПоказателя Из СтрокиПоказателейНачисления Цикл
					НоваяСтрокаПоказателей = ЭтотОбъект.Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателей, СтрокаПоказателя);
					НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = НоваяСтрокаПерерасчета.ИдентификаторСтрокиВидаРасчета;
				КонецЦикла;
			КонецЦикла;
			
			// Заполним таблицу перерасчета пособий и показателей для нее
			ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправленияПособий(
				ЭтотОбъект.ИсправленныйДокумент, ЭтотОбъект.ПериодРегистрации, ЭтотОбъект.Пособия, ЭтотОбъект.ПособияПерерасчет, ЭтотОбъект.НачисленияПерерасчет,
				КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(Истина));
			
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ОбработкаЗаполненияМногофункциональногоДокумента(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.УвольнениеСписком.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
	// Резервы отпусков 3286
	ДанныеДляПроведения = ОтражениеЗарплатыВУчете.НоваяСтруктураРезультатыРасчетаЗарплаты();
	ДанныеДляПроведения.НачисленияУдержания = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить();
	ДанныеДляПроведения.СтраховыеВзносы = Движения.СтраховыеВзносыПоФизическимЛицам.Выгрузить();
	СтрокаСписокТаблиц = "НачисленнаяЗарплатаИВзносы";
	// Конец
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Документы.Увольнение.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Документы.Увольнение.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаСобытия = Дата;
	
	ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ПериодРегистрации);
	ЗарплатаКадрыРасширенный.ПередЗаписьюМногофункциональногоДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
