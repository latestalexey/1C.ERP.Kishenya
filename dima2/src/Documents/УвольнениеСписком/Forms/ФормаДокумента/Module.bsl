#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	Если Параметры.Ключ.Пустая() Тогда  // форма нового
		ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", Ложь, Ложь, Ложь);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
			"Объект.Организация",
			"Объект.Ответственный",
			"Объект.ПериодРегистрации");
			
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗаполнитьДанныеФормыПоОрганизации();
		ПриПолученииДанныхНаСервере(Объект);
		УстановитьПланируемуюДатуВыплаты();
		
	Иначе
		
		Если Параметры.Свойство("Сотрудник") Тогда
			
			СтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Параметры.Сотрудник));
			Если СтрокиСотрудника.Количество() > 0 Тогда
				Элементы.Сотрудники.ТекущаяСтрока = СтрокиСотрудника[0].ПолучитьИдентификатор();
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(ЭтаФорма, "ДокументРассчитан");
	
	Если ИспользуетсяРасчетЗарплаты И Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.ДокументРассчитан Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не КадровыйУчетРасширенный.ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Сотрудники",
			"ИзменятьСоставСтрок",
			Ложь);
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИсправленДокумент" И Источник = Объект.Ссылка Тогда
		ДанныеВРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнениеВыполнено = Неопределено;
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ЗаполнениеВыполнено <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыСреднегоЗаработка", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыЗарплаты", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СотрудникиПерерасчетаЗаработка",
			ОбщегоНазначения.ВыгрузитьКолонку(ЗаполнениеВыполнено, "Ключ"));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_УвольнениеСписком", Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Оповестить("ИсправленДокумент", , Объект.ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьДанныеФормыПоОрганизации();
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	
КонецПроцедуры

// Работа с месяцем начисления "строкой".
&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументРассчитанПриИзменении(Элемент)
	ДокументРассчитанПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	РуководительПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	ГлавныйБухгалтерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерПриИзменении(Элемент)
	БухгалтерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РаботникКадровойСлужбыПриИзменении(Элемент)
	РаботникКадровойСлужбыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	ИсполнительПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	НоваяСтрока = Объект.Сотрудники.Добавить();
	Если Копирование Тогда
		
		ТекущиеДанные = Элементы.Сотрудники.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
		
			НоваяСтрока.ДатаУвольнения = ТекущиеДанные.ДатаУвольнения;
			НоваяСтрока.СтатьяКЗоТ = ТекущиеДанные.СтатьяКЗоТ;
			НоваяСтрока.ОснованиеУвольнения = ТекущиеДанные.ОснованиеУвольнения;
			
		КонецЕсли;
	
	КонецЕсли; 
	
	Элементы.Сотрудники.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	РедактироватьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РедактироватьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	УдаляемыйСотрудник = Элементы.Сотрудники.ТекущиеДанные.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	
	Если ЗначениеЗаполнено(УдаляемыйСотрудник) Тогда
		СотрудникиПослеУдаленияНаСервере();
	КонецЕсли; 
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(Объект.Ссылка, "УвольнениеСписком");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "УвольнениеСписком");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(Объект.ИсправленныйДокумент, "УвольнениеСписком");
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура ПодобратьСотрудников(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация,
		,
		Объект.ПериодРегистрации,
		КонецМесяца(Объект.ПериодРегистрации),
		Истина,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

#КонецОбласти


#Область КлючевыеРеквизитыЗаполненияФормы

&НаСервере
// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	
	Если Не ПроизведеноИзменениеМесяца = Истина Тогда
		Массив.Добавить("Объект.Сотрудники");
	КонецЕсли; 
	
	Массив.Добавить("Объект.ДанныеОбИндексации");
	Массив.Добавить("Объект.ДополнительныеОтпуска");
	Массив.Добавить("Объект.Взносы");
	Массив.Добавить("Объект.ВзносыФОТ");
	Массив.Добавить("Объект.НДФЛ");
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.НачисленияПерерасчет");
	Массив.Добавить("Объект.ОтработанноеВремяДляСреднегоОбщий");
	Массив.Добавить("Объект.ПогашениеЗаймов");
	Массив.Добавить("Объект.Показатели");
	Массив.Добавить("Объект.Пособия");
	Массив.Добавить("Объект.ПособияПерерасчет");
	Массив.Добавить("Объект.СреднийЗаработокОбщий");
	Массив.Добавить("Объект.Удержания");
	Массив.Добавить("Объект.РаспределениеРезультатовНачислений");
	Массив.Добавить("Объект.РаспределениеРезультатовУдержаний");
	Массив.Добавить("Объект.ДенежноеСодержание");
	Массив.Добавить("Объект.ДенежноеСодержаниеФактическиеНачисления");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru='организации';uk='організації'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура СотрудникиПослеУдаленияНаСервере()
	
	ТабличныеЧасти = Новый Структура;
	ТабличныеЧасти.Вставить("ДанныеОбИндексации");
	ТабличныеЧасти.Вставить("ДополнительныеОтпуска");
	ТабличныеЧасти.Вставить("Взносы");
	ТабличныеЧасти.Вставить("ВзносыФОТ");
	ТабличныеЧасти.Вставить("НДФЛ");
	ТабличныеЧасти.Вставить("Начисления");
	ТабличныеЧасти.Вставить("НачисленияПерерасчет");
	ТабличныеЧасти.Вставить("ОтработанноеВремяДляСреднегоОбщий");
	ТабличныеЧасти.Вставить("ПогашениеЗаймов");
	ТабличныеЧасти.Вставить("Показатели");
	ТабличныеЧасти.Вставить("Пособия");
	ТабличныеЧасти.Вставить("ПособияПерерасчет");
	ТабличныеЧасти.Вставить("СреднийЗаработокОбщий");
	ТабличныеЧасти.Вставить("Удержания");
	ТабличныеЧасти.Вставить("РаспределениеРезультатовНачислений");
	ТабличныеЧасти.Вставить("РаспределениеРезультатовУдержаний");
	ТабличныеЧасти.Вставить("ДенежноеСодержание");
	ТабличныеЧасти.Вставить("ДенежноеСодержаниеФактическиеНачисления");
	
	СтруктураОписания = Новый Структура("ТабличныеЧасти", ТабличныеЧасти);
	
	ЗарплатаКадрыРасширенныйКлиентСервер.УдалитьДанныеСотрудникаСписочногоДокумента(
		Объект, СтруктураОписания, УдаляемыйСотрудник);
	УдаляемыйСотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
КонецПроцедуры

&НаСервере
Процедура ДокументРассчитанПриИзменении()
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
КонецПроцедуры

&НаСервере
Процедура РуководительПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ГлавныйБухгалтерПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура БухгалтерПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура РаботникКадровойСлужбыПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ИсполнительПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "Объект.ГлавныйБухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Объект.Бухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "Объект.РаботникКадровойСлужбы");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "Объект.ДолжностьРаботникаКадровойСлужбы");
	
	ЗапрашиваемыеЗначения.Вставить("Исполнитель", "Объект.Исполнитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьИсполнителя", "Объект.ДолжностьИсполнителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	
	Если ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении") Тогда
		ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.Исполнитель");	
	Иначе
		
		Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС") Тогда
			ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.РаботникКадровойСлужбы");
		Иначе
			ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.Бухгалтер", "Объект.РаботникКадровойСлужбы");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура РедактироватьСтроку(ВыполнитьПерезаполнениеСведенийОСреднемЗаработке = Ложь)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ЗаполнениеВыполнено <> Неопределено
		И ЗаполнениеВыполнено.Получить(Элементы.Сотрудники.ТекущиеДанные.Сотрудник) = Истина Тогда
		ДополнительныеПараметры.Вставить("ЗаполнениеВыполнено",  Истина);
	КонецЕсли;
	
	Если ВыполнитьПерезаполнениеСведенийОСреднемЗаработке Тогда
		ДополнительныеПараметры.Вставить("ВыполнитьПерезаполнениеСведенийОСреднемЗаработке", Истина);
	КонецЕсли; 
	
	Если ДополнительныеПараметры.Количество() = 0 Тогда
		ДополнительныеПараметры = Неопределено;
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьРасшифровку", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыРедактированияСтрокиДокумента();
	
	ЗарплатаКадрыРасширенныйКлиент.РедактироватьСтрокуСписочногоДокумента(
		ЭтаФорма, "Документ.Увольнение", Оповещение, ПараметрыОткрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасшифровку(Результат, ДополнительныеУсловия) Экспорт
	
	Если Результат.Свойство("ЗаполнениеВыполнено") Тогда
		
		Если ЗаполнениеВыполнено = Неопределено Тогда
			ЗаполненныеСотрудники = Новый Соответствие;
		Иначе
			ЗаполненныеСотрудники = Новый Соответствие(ЗаполнениеВыполнено);
		КонецЕсли;
		
		Если Результат.ЗаполнениеВыполнено = Истина Тогда
			ЗаполненныеСотрудники.Вставить(Элементы.Сотрудники.ТекущиеДанные.Сотрудник, Истина);
		Иначе
			ЗаполненныеСотрудники.Удалить(Элементы.Сотрудники.ТекущиеДанные.Сотрудник);
		КонецЕсли; 
		
		ЗаполнениеВыполнено = Новый ФиксированноеСоответствие(ЗаполненныеСотрудники);
		
	КонецЕсли; 
	
	УстановитьРасшифровкуСтроки(Элементы.Сотрудники.ТекущаяСтрока);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	ДополнитьФорму();
	ДанныеВРеквизиты();
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму()
	
	ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(ЭтаФорма, Истина, Ложь);
	РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	// заполним предупреждения 
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьДоступностьРегистрацииНачислений();
	
	Если Не ЭтаФорма.Параметры.Ключ.Пустая() Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма);
	КонецЕсли;
	ИсправлениеДокументовЗарплатаКадры.УстановитьПоляИсправления(ЭтаФорма);
	
	ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтаФорма, НСтр("ru='Расчет утвердил';uk='Розрахунок затвердив'"), "РасчетчикГруппа", "ДокументРассчитан", "Рассчитал");
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	ЗаполнитьРасшифровкиСотрудников();
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкиСотрудников()
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		УстановитьРасшифровкуСтроки(СтрокаСотрудника.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасшифровкуСтроки(ИдентификаторСтрокиСотрудника)
	
	Если ИдентификаторСтрокиСотрудника = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрокиСотрудника);
	
	Расшифровка = РасшифровкаСтрокиСотрудника(ИдентификаторСтрокиСотрудника);
	СтрокаСотрудника.Расшифровка = Расшифровка;
	
КонецПроцедуры

&НаСервере
Функция РасшифровкаСтрокиСотрудника(ИдентификаторСтрокиСотрудника)
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтрокиСотрудника);
	
	СтруктураПоиска = Новый Структура("Сотрудник", СтрокаСотрудника.Сотрудник);
	ТекстРасшифровки = "";
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ЧтениеНачисленнойЗарплатыРасширенная") Тогда
		
		Начислено = 0;
		
		СтрокиНачислений = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
			Начислено = Начислено + СтрокаНачисления.Результат;
		КонецЦикла;
		
		СтрокиНачислений = Объект.НачисленияПерерасчет.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
			Начислено = Начислено + СтрокаНачисления.Результат;
		КонецЦикла;
		
		СтрокиНачислений = Объект.Пособия.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
			Начислено = Начислено + СтрокаНачисления.Результат;
		КонецЦикла;
		
		Если Начислено <> 0 Тогда
			ТекстРасшифровки = НСтр("ru='Начислено';uk='Нараховано'") + "=" + Формат(Начислено, "ЧДЦ=2");
		КонецЕсли; 
		
		Удержано = 0;
		
		СтрокиНачислений = Объект.НДФЛ.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
			Удержано = Удержано + СтрокаНачисления.Налог;
		КонецЦикла;
		
		СтрокиНачислений = Объект.Удержания.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
			Удержано = Удержано + СтрокаНачисления.Результат;
		КонецЦикла;
		
		СтрокиНачислений = Объект.ПогашениеЗаймов.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
			Удержано = Удержано + СтрокаНачисления.ПогашениеПроцентов;
			Удержано = Удержано + СтрокаНачисления.ПогашениеЗайма;
			Удержано = Удержано + СтрокаНачисления.НалогНаМатериальнуюВыгоду;
		КонецЦикла;
		
		Если Удержано <> 0 Тогда
			ТекстРасшифровки = ?(ПустаяСтрока(ТекстРасшифровки), "", ТекстРасшифровки + "; ") + НСтр("ru='Удержано';uk='Утримано'") + "=" + Формат(Удержано, "ЧДЦ=2");
		КонецЕсли; 
		
		Если СтрокаСотрудника.СреднийЗаработок <> 0 Тогда
			ТекстРасшифровки = ?(ПустаяСтрока(ТекстРасшифровки), "", ТекстРасшифровки + "; ") + НСтр("ru='Средний заработок';uk='Середній заробіток'") + "=" + Формат(СтрокаСотрудника.СреднийЗаработок, "ЧДЦ=2");
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтрокаСотрудника.ДнейЧасовВыходногоПособия <> 0 Тогда
		
		ИспользуетсяСреднечасовойЗаработок = Ложь;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если СтрокаСотрудника.СуммированныйУчет Тогда
			ИспользуетсяСреднечасовойЗаработок = Истина;
		КонецЕсли;
		
		Если Не ИспользуетсяСреднечасовойЗаработок
			И УчетСреднегоЗаработка.НачислениеИспользуетСреднечасовойЗаработок(СтрокаСотрудника.ВыходноеПособие) Тогда
			
			ИспользуетсяСреднечасовойЗаработок = Истина;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ИспользуетсяСреднечасовойЗаработок Тогда
			НадписьДнейЧасовВыходногоПособия = НСтр("ru='дн.';uk='дн.'");	
		Иначе
			НадписьДнейЧасовВыходногоПособия = НСтр("ru='час.';uk='година.'");	
		КонецЕсли; 
		ТекстРасшифровки = ?(ПустаяСтрока(ТекстРасшифровки), "", ТекстРасшифровки + "; ") + НСтр("ru='Выходное пособие за';uk='Вихідна допомога за'") + " "
			+ Формат(СтрокаСотрудника.ДнейЧасовВыходногоПособия, "ЧДЦ=0") + " " + НадписьДнейЧасовВыходногоПособия;
			
	КонецЕсли; 
		
	Если Не ПустаяСтрока(ТекстРасшифровки)
		И СтрокаСотрудника.ДнейКомпенсацииУдержанияОтпуска > 0
		И ЗначениеЗаполнено(СтрокаСотрудника.ПризнакКомпенсацииУдержанияОтпуска)
		И СтрокаСотрудника.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать Тогда
		
		Если СтрокаСотрудника.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
			ЗаголовокКомпенсации = НСтр("ru='Компенсировано';uk='Компенсовано'");
		Иначе
			ЗаголовокКомпенсации = НСтр("ru='Удержано за';uk='Утримано за'");
		КонецЕсли;
		
		ТекстРасшифровки = ?(ПустаяСтрока(ТекстРасшифровки), "", ТекстРасшифровки + "; ") + ЗаголовокКомпенсации + " "
			+ Формат(СтрокаСотрудника.ДнейКомпенсацииУдержанияОтпуска, "ЧДЦ=0") + " " + НСтр("ru='дн. отпуска';uk='дн. відпустки'") ;
			
	КонецЕсли; 
	
	Если ПустаяСтрока(ТекстРасшифровки) Тогда
		ТекстРасшифровки = НСтр("ru='Нет сведений об увольнении';uk='Немає відомостей про звільнення'");
	КонецЕсли; 
	
	Возврат ТекстРасшифровки;
	
КонецФункции

&НаСервере
Функция ПараметрыОткрытияФормыРедактированияСтрокиДокумента()
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	ПараметрыОткрытия = ЗарплатаКадрыРасширенный.ПараметрыОткрытияФормыРедактированияСтрокиДокумента(Объект, ТекущиеДанные, "Документ.Увольнение");
	ПараметрыОткрытия.Вставить("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников());
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуМногосотрудниковогоДокумента(Результат) Экспорт
	
	ТекущиеДанные = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	ЗарплатаКадрыРасширенный.ЗаполнитьСтрокуМногосотрудниковогоДокумента(Результат, ТекущиеДанные, Объект, КадровыйУчетРасширенныйКлиентСервер.СтруктураОписанийТаблицДокументаУвольнение(РегистрацияНачисленийДоступна)); 
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиОбработкаВыбораНаСервере(ВыбранныеСотрудники)
	
	Если ТипЗнч(ВыбранныеСотрудники) = Тип("Массив") Тогда
		СписокСотрудников = ВыбранныеСотрудники;
	Иначе
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеСотрудники);
	КонецЕсли;
	
	ДобавляемыеСотрудники = Новый Массив;
	Для каждого Сотрудник Из СписокСотрудников Цикл
		
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		ДобавляемыеСотрудники.Добавить(Сотрудник);
		
	КонецЦикла;
	
	СтрокаШаблон = Неопределено;
	Если Объект.Сотрудники.Количество() > 0 Тогда
		
		Если Элементы.Сотрудники.ТекущаяСтрока <> Неопределено Тогда
			СтрокаШаблон = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
		КонецЕсли; 
		
		Если СтрокаШаблон = Неопределено Тогда
			
			ПоследняяСтрокаСотрудников = Объект.Сотрудники[Объект.Сотрудники.Количество() - 1];
			Если ЗначениеЗаполнено(ПоследняяСтрокаСотрудников.ДатаУвольнения) Тогда
				СтрокаШаблон = ПоследняяСтрокаСотрудников;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Для каждого ДобавляемыйСотрудник Из ДобавляемыеСотрудники Цикл
		
		НоваяСтрокаСотрудников = Объект.Сотрудники.Добавить();
		НоваяСтрокаСотрудников.Сотрудник = ДобавляемыйСотрудник;
		
		Если СтрокаШаблон <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСотрудников, СтрокаШаблон, "ДатаУвольнения,СтатьяКЗоТ,ОснованиеУвольнения");
		КонецЕсли; 
		
		УстановитьРасшифровкуСтроки(НоваяСтрокаСотрудников.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ПроизведеноИзменениеМесяца = Истина;
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ПроизведеноИзменениеМесяца = Ложь;
	
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	УстановитьПланируемуюДатуВыплаты();		
	ЗаполнитьРасшифровкиСотрудников();

КонецПроцедуры

&НаСервере
Процедура УстановитьПланируемуюДатуВыплаты()
	
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
			Объект.ПланируемаяДатаВыплаты = НачалоДня(ТекущаяДатаСеанса() + 86400);
		Иначе
			Объект.ПланируемаяДатаВыплаты = ТекущаяДатаСеанса();
		КонецЕсли;
	Иначе
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтаФорма)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОписанияДокумента(Форма)
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("ИзменениеБезОграничений", Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений);
	ПараметрыОписания.Вставить("РегистрацияНачисленийДоступна", Форма.РегистрацияНачисленийДоступна);
	ПараметрыОписания.Вставить("СпособыРасчетаСреднегоЗаработка", Форма.СпособыРасчетаСреднегоЗаработка);
	ПараметрыОписания.Вставить("ПризнакКомпенсацииУдержанияОтпуска", Форма.Объект.ПризнакКомпенсацииУдержанияОтпуска);
	ПараметрыОписания.Вставить("ДнейЧасовВыходногоПособия", Форма.Объект.ДнейЧасовВыходногоПособия);
	
	Возврат ПараметрыОписания;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
		
	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
КонецФункции

#КонецОбласти
