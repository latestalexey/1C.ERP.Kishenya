#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПланов[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа отсутствуют дополнительные проверки
	
КонецФункции

Процедура ЗаполнитьБюджетПоДаннымИнформационнойБазы(Объект, АдресХранилища) Экспорт
	Перем Отказ, ТекстСообщения;
	
	Объект.АналитикаСтатейБюджетов.Очистить();
	Объект.ОборотыПоСтатьямБюджетов.Очистить();
	
	ВалютаСценария = Объект.Сценарий.Валюта;
	ТребоватьУказанияКурсовДляКаждогоПериода = Объект.Сценарий.ТребоватьУказанияКурсовДляКаждогоПериода;
	
	СписокАналитикШапки = Новый СписокЗначений;
	СписокАналитикШапки.ЗагрузитьЗначения(Объект.ВидБюджета.АналитикиШапки.Выгрузить().ВыгрузитьКолонку("ВидАналитики"));
	
	ПараметрыВывода = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(Объект.ВидБюджета,
												Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение);
	
	ОбъектИПараметрыРасчета = СтруктураОбъектаДляРасчетаЯчейки();
	ОбъектИПараметрыРасчета.Объект = Объект;
	ОбъектИПараметрыРасчета.ВалютаСценария = ВалютаСценария;
	ОбъектИПараметрыРасчета.АдресКэшаПараметровСтатей = ПоместитьВоВременноеХранилище(Новый Соответствие);
	ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода = ТребоватьУказанияКурсовДляКаждогоПериода;
	ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета = ПоместитьВоВременноеХранилище(ПараметрыВывода);
	
	АдресТаблицыКурсов = ПоместитьВоВременноеХранилище(ТаблицаКурсов(ОбъектИПараметрыРасчета, ПараметрыВывода, Отказ, ТекстСообщения));
	
	ОбъектИПараметрыРасчета.АдресТаблицыКурсов = АдресТаблицыКурсов;
	
	//заполнение ячеек с автозаполнением
	РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение;
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(Объект, СписокАналитикШапки, ВалютаСценария, 
			ПараметрыВывода, Неопределено, РежимФормирования);
	
	ДанныеЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
	ДанныеЯчеек = ДанныеЭкземпляраБюджета.ДанныеЯчеек;
	
	СтрокиДанных = ДанныеЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент", Истина));
	
	Периодичности = ПараметрыВывода.СтруктураКолонокТаблицыДанных.Периодичности;
	ВидыАналитик = ПараметрыВывода.СтруктураКолонокТаблицыДанных.ВидыАналитик;
	Измерения = ПараметрыВывода.СтруктураКолонокТаблицыДанных.Измерения;
	ПараметрыЯчеек = ПараметрыВывода.СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	ПараметрыПериода = БюджетнаяОтчетностьВыводСервер.ПреобразоватьПараметрыДанныхВДанныеПериодов(
										ПараметрыВывода.СтруктураКолонокТаблицыДанных, ПараметрыОтчета);
	
	КэшРеквизитовСтатей = Новый Соответствие;
	
	Для Каждого СтрокаДанных из СтрокиДанных Цикл
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
		Если ПараметрыЯчейки.РасчетЗаполнение <> "заполнение" Тогда
			Продолжить;
		КонецЕсли;
		
		Расшифровка = Новый Структура;
		Расшифровка.Вставить("СтатьяБюджетов", СтрокаДанных.СтатьяБюджетов);
		Расшифровка.Вставить("Строка", СтрокаДанных.Строка);
		
		Для Каждого Периодичность из Периодичности Цикл
			ИмяПоля = "Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
			Если ЗначениеЗаполнено(СтрокаДанных[ИмяПоля]) Тогда
				Расшифровка.Вставить(ИмяПоля, СтрокаДанных[ИмяПоля]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение из Измерения Цикл
			Если ЗначениеЗаполнено(СтрокаДанных[Измерение]) Тогда
				Расшифровка.Вставить(Измерение, СтрокаДанных[Измерение]);
			КонецЕсли;
		КонецЦикла;
		
		ЗначенияАналитик = Новый Соответствие;
		Расшифровка.Вставить("ЗначенияАналитик", ЗначенияАналитик);
		Для Каждого ВидАналитики из ВидыАналитик Цикл
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Если ЗначениеЗаполнено(СтрокаДанных[ИмяПоля]) Тогда
				ЗначенияАналитик.Вставить(ВидАналитики, СтрокаДанных[ИмяПоля]);
			КонецЕсли;
		КонецЦикла;
		
		ВалютаВывода = ВалютаВводаАналитики(Расшифровка, КэшРеквизитовСтатей);
		Если ЗначениеЗаполнено(ВалютаВывода) Тогда
			Расшифровка.Вставить("Валюта", ВалютаВывода);
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагСумма Тогда
			Расшифровка.Вставить("ИмяПоказателя", "Сумма");
			Значение = БюджетнаяОтчетностьВыводСервер.РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериода, СтрокаДанных, "Сумма");
			РезультатОтражения = ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, Значение,,Истина);
			
			РасшифровкаРасчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Расшифровка);
			РасшифровкаРасчета.Удалить("ЗначенияАналитик");
			РасшифровкаРасчета.Удалить("Валюта");
			БюджетнаяОтчетностьВыводСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВывода, ДанныеЯчеек, ПараметрыОтчета,
																						РасшифровкаРасчета, РезультатОтражения, АдресХранилища);
			РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если РезультатВыполнения <> Неопределено Тогда
				Для Каждого Изменение из РезультатВыполнения.Результат Цикл
					Значение = ?(ЗначениеЗаполнено(Изменение.Значение), Изменение.Значение, Неопределено);
					ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Изменение.Расшифровка, Значение,,Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			Расшифровка.Вставить("ИмяПоказателя", "Количество");
			Значение = БюджетнаяОтчетностьВыводСервер.РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериода, СтрокаДанных, "Количество");
			РезультатОтражения = ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, Значение,,Истина);
			
			РасшифровкаРасчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Расшифровка);
			РасшифровкаРасчета.Удалить("ЗначенияАналитик");
			БюджетнаяОтчетностьВыводСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВывода, ДанныеЯчеек, ПараметрыОтчета,
																						РасшифровкаРасчета, РезультатОтражения, АдресХранилища);
			РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если РезультатВыполнения <> Неопределено Тогда
				Для Каждого Изменение из РезультатВыполнения.Результат Цикл
					Значение = ?(ЗначениеЗаполнено(Изменение.Значение), Изменение.Значение, Неопределено);
					ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Изменение.Расшифровка, Значение,,Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Печать бюджета.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьБюджета";
	КомандаПечати.Представление = НСтр("ru='Печать бюджета';uk='Друк бюджету'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	// Печать бюджета списком.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПечатьБюджетаСписком";
	КомандаПечати.Представление = НСтр("ru='Печать бюджета списком';uk='Друк бюджету списком'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьБюджета") Тогда
		ТибличныйДокумент = СформироватьПечатнуюФормуБюджета(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПечатьБюджета",
			НСтр("ru='Печать бюджета';uk='Друк бюджету'"),
			ТибличныйДокумент);
	КонецЕсли;

	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьБюджетаСписком") Тогда
		ТибличныйДокумент = СформироватьПечатнуюФормуБюджетаСписком(МассивОбъектов, ОбъектыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПечатьБюджетаСписком",
			НСтр("ru='Печать бюджета списком';uk='Друк бюджету списком'"),
			ТибличныйДокумент);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуБюджета(МассивОбъектов, ОбъектыПечати)
	
	Результат = Новый ТабличныйДокумент;
	Результат.АвтоМасштаб = Истина;
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьБюджета";
	
	Запрос = ПолучитьЗапросДанныхВыводаОтчета(МассивОбъектов);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СписокАналитикШапки = Новый СписокЗначений;
		СписокАналитикШапки.ЗагрузитьЗначения(ВыборкаДокументов.АналитикиШапки.Выгрузить().ВыгрузитьКолонку("ВидАналитики"));
		
		РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.ПечатьБюджета;
		
		ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(
			ВыборкаДокументов.ВидБюджета, РежимФормирования);
			
		ПараметрыОтчета = ПодготовитьПараметрыОтчета(ВыборкаДокументов, СписокАналитикШапки,
			ВыборкаДокументов.ВалютаСценария, ПараметрыВыводаВидаБюджета, Неопределено, РежимФормирования);
		
		БюджетныйОтчет = БюджетнаяОтчетностьВыводСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
		
		Результат.Вывести(БюджетныйОтчет.Результат);
		Результат.ВывестиГоризонтальныйРазделительСтраниц();
		
		ВидыАналитикОтчета = ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных.ВидыАналитик;
		
		АналитическаяЗаписка = СформироватьПечатнуюФормуАналитическойЗаписки(ПараметрыОтчета,
												ПараметрыВыводаВидаБюджета.СтруктураКолонокТаблицыДанных, БюджетныйОтчет.Примечания);
		
		Если АналитическаяЗаписка <> Неопределено Тогда
			Результат.Вывести(АналитическаяЗаписка);
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьПечатнуюФормуАналитическойЗаписки(ПараметрыОтчета, СтруктураКолонокТаблицыДанных, Примечания)
	
	Результат = Новый ТабличныйДокумент;
	
	ТаблицаДанных = Примечания.ТаблицаДанных;
	
	Если Не ТаблицаДанных.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Для получения в отчете группировок по статьям бюджетов в порядке возрастания НомераТаблицы и НомераПримечания.
	ТаблицаДанных.Сортировать("НомерТаблицы, НомерПримечания");
	СтатьиБюджетов = ТаблицаДанных.ВыгрузитьКолонку("СтатьяБюджетов");
	СтатьиБюджетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтатьиБюджетов);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	СтатьиБюджетов.Ссылка КАК Ссылка,
		|	СтатьиБюджетов.Ссылка.Представление КАК Представление,
		|	СтатьиБюджетов.КоличествоИспользуемыхАналитик КАК КоличествоАналитик,
		|	СтатьиБюджетов.ВидАналитики1 КАК ВидАналитики1,
		|	СтатьиБюджетов.ВидАналитики1.Представление КАК ПредставлениеАналитики1,
		|	СтатьиБюджетов.ВидАналитики2 КАК ВидАналитики2,
		|	СтатьиБюджетов.ВидАналитики2.Представление КАК ПредставлениеАналитики2,
		|	СтатьиБюджетов.ВидАналитики3 КАК ВидАналитики3,
		|	СтатьиБюджетов.ВидАналитики3.Представление КАК ПредставлениеАналитики3,
		|	СтатьиБюджетов.ВидАналитики4 КАК ВидАналитики4,
		|	СтатьиБюджетов.ВидАналитики4.Представление КАК ПредставлениеАналитики4,
		|	СтатьиБюджетов.ВидАналитики5 КАК ВидАналитики5,
		|	СтатьиБюджетов.ВидАналитики5.Представление КАК ПредставлениеАналитики5,
		|	СтатьиБюджетов.ВидАналитики6 КАК ВидАналитики6,
		|	СтатьиБюджетов.ВидАналитики6.Представление КАК ПредставлениеАналитики6,
		|	СтатьиБюджетов.УчитыватьПоВалюте КАК УчитыватьПоВалюте,
		|	СтатьиБюджетов.УчитыватьПоКоличеству КАК УчитыватьПоКоличеству
		|ИЗ
		|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
		|ГДЕ
		|	СтатьиБюджетов.Ссылка В(&СтатьиБюджетов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭкземплярБюджета.Ответственный.Представление КАК Представление
		|ИЗ
		|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
		|ГДЕ
		|	ЭкземплярБюджета.Ссылка = &ЭкземплярБюджетаСсылка");
	Запрос.УстановитьПараметр("СтатьиБюджетов", СтатьиБюджетов);
	Запрос.УстановитьПараметр("ЭкземплярБюджетаСсылка", ПараметрыОтчета.Документ);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСтатейБюджетов = РезультатЗапроса[0].Выбрать();
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	СКД = Документы.ЭкземплярБюджета.ПолучитьМакет("СхемаКомпоновкиДанныхАналитическойЗаписки");
	Настройки = СКД.НастройкиПоУмолчанию;
	
	ЗаголовокОтчета = НСтр("ru='Аналитическая записка к бюджету';uk='Аналітична записка до бюджету'") + Символы.ПС + """%1""%2";
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтчета, ПараметрыОтчета.ВидБюджета,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));

	ФинОтчеты.УстановитьПараметр(Настройки.ПараметрыВывода, "Заголовок", ЗаголовокОтчета);
	
	// Период.
	Периодичности = СтруктураКолонокТаблицыДанных.Периодичности;
	
	Если Периодичности.Количество() Тогда
		
		УпорядоченыеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
		
		ВыражениеПоля = "ВЫБОР ";
		
		Для Каждого СледующаяПериодичность Из УпорядоченыеПериодичности Цикл
			
			Если Периодичности.Найти(СледующаяПериодичность) = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ИмяПоляНабора = "Период"+?(ЗначениеЗаполнено(СледующаяПериодичность), ОбщегоНазначения.ИмяЗначенияПеречисления(СледующаяПериодичность), "");
			
			ФинОтчеты.НовоеПолеНабора(СКД.НаборыДанных[0], ИмяПоляНабора); 
			
			ВыражениеПоля = ВыражениеПоля + "
				|	КОГДА ЗначениеЗаполнено(" + ИмяПоляНабора + ")
				|		ТОГДА " + ИмяПоляНабора + "
				|";

		КонецЦикла;
			
		ВыражениеПоля = ВыражениеПоля + "
			|	ИНАЧЕ &НачалоПериода
			|КОНЕЦ";
			
	Иначе
			
		ВыражениеПоля = "&НачалоПериода";
	
	КонецЕсли;
	
	ВычисляемоеПоле = ФинОтчеты.НовоеВычисляемоеПоле(СКД, "Период", ВыражениеПоля);
	ВычисляемоеПоле.ТипЗначения = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ФинОтчеты.УстановитьПараметр(ВычисляемоеПоле.Оформление, "Формат","ДФ=dd.MM.yyyy" );
	ФинОтчеты.НовыйПорядок(Настройки, "Период");
	
	ФинОтчеты.УстановитьПараметр(Настройки.ПараметрыДанных, "НачалоПериода", ПараметрыОтчета.НачалоПериода, Истина);
	
	
	// Аналитики.
	ВидыАналитик = СтруктураКолонокТаблицыДанных.ВидыАналитик;
	
	Для Каждого ВидАналитики Из ВидыАналитик Цикл
		ПолеНабора = ФинОтчеты.НовоеПолеНабора(СКД.НаборыДанных[0], 
				ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики)); 
		ФинОтчеты.УстановитьПараметр(ПолеНабора.Оформление, "МинимальнаяШирина", 30);
		ФинОтчеты.УстановитьПараметр(ПолеНабора.Оформление, "МаксимальнаяШирина", 30);
	КонецЦикла;
	
	СтатьиУчитыватьПоВалюте = Новый Массив;
	
	// Порядок статей бюджетов бдует соответствовать возрастанию НомераТаблицы и НомераПримечания.
	Для Каждого СтатьяБюджетов Из СтатьиБюджетов Цикл
		
		ВыборкаСтатейБюджетов.НайтиСледующий(СтатьяБюджетов, "Ссылка");
		
		ГруппировкаПоСтатьеБюджета = ФинОтчеты.НоваяГруппировка(Настройки.Структура);
		ГруппировкаПоСтатьеБюджета.Выбор.Элементы.Очистить();
		
		ГруппировкаПоСтатьеБюджета.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));

		ФинОтчеты.НовыйОтбор(ГруппировкаПоСтатьеБюджета.Отбор, "СтатьяБюджетов", ВыборкаСтатейБюджетов.Ссылка);
		
		ФинОтчеты.УстановитьПараметр(ГруппировкаПоСтатьеБюджета.ПараметрыВывода, "Заголовок", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Статья бюджета ""%1""';uk='Стаття бюджету ""%1""'"), ВыборкаСтатейБюджетов.Представление));
		ФинОтчеты.УстановитьПараметр(ГруппировкаПоСтатьеБюджета.ПараметрыВывода, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		
		ФинОтчеты.НовоеПолеВыбора(ГруппировкаПоСтатьеБюджета, "Адрес", "N");
		
		ФинОтчеты.НовоеПолеВыбора(ГруппировкаПоСтатьеБюджета, "Период");
		
		Для НомерАналитики = 1 По ВыборкаСтатейБюджетов.КоличествоАналитик Цикл
			ВидАналитики = ВыборкаСтатейБюджетов["ВидАналитики"+НомерАналитики];
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Если ВидыАналитик.Найти(ВидАналитики) <> Неопределено Тогда
				ПредставлениеАналитики = ВыборкаСтатейБюджетов["ПредставлениеАналитики"+НомерАналитики];
				ФинОтчеты.НовоеПолеВыбора(ГруппировкаПоСтатьеБюджета, ИмяАналитики, ПредставлениеАналитики);
			КонецЕсли;
		КонецЦикла;
		
		Если ВыборкаСтатейБюджетов.УчитыватьПоКоличеству Тогда
			ФинОтчеты.НовоеПолеВыбора(ГруппировкаПоСтатьеБюджета, "Количество");
		Конецесли;
		
		ФинОтчеты.НовоеПолеВыбора(ГруппировкаПоСтатьеБюджета, "СуммаОтчета", "Сумма");
		
		Если ВыборкаСтатейБюджетов.УчитыватьПоВалюте Тогда
			ФинОтчеты.НовоеПолеВыбора(ГруппировкаПоСтатьеБюджета, "Валюта");
			СтатьиУчитыватьПоВалюте.Добавить(СтатьяБюджетов);
		Конецесли;
		
		ФинОтчеты.НовоеПолеВыбора(ГруппировкаПоСтатьеБюджета, "Примечание");
		
		ВыборкаСтатейБюджетов.Сбросить();
		
	КонецЦикла;
	
	ФинОтчеты.УстановитьПараметр(Настройки.ПараметрыДанных, "СтатьиУчитыватьПоВалюте", СтатьиУчитыватьПоВалюте);
	
	ВыборкаОтветственный = РезультатЗапроса[1].Выбрать();
	ОтветственныйПредставление = ?(ВыборкаОтветственный.Следующий(), ВыборкаОтветственный.Представление, "");
	
	ФинОтчеты.УстановитьПараметр(Настройки.ПараметрыДанных, "ОтветственныйПредставление", ОтветственныйПредставление);
	
	ГруппировкаПоСтатьеБюджета = ФинОтчеты.НоваяГруппировка(Настройки.Структура);
	ГруппировкаПоСтатьеБюджета.Имя = "ОтветственныйПредставление";
	ГруппировкаПоСтатьеБюджета.Выбор.Элементы.Очистить();
	
	// Компоновка.
	ВнешниеИсточники = Новый Структура("ТаблицаДанных", ТаблицаДанных);
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеИсточники);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Результат.АвтоМасштаб = Истина;
	
	Возврат Результат;
	
	
КонецФункции

Функция СформироватьПечатнуюФормуБюджетаСписком(МассивОбъектов, ОбъектыПечати)
	
	Результат = Новый ТабличныйДокумент;
	Результат.АвтоМасштаб = Истина;
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьБюджетаСписком";
	
	Запрос = ПолучитьЗапросДанныхВыводаОтчета(МассивОбъектов);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		СписокАналитикШапки = Новый СписокЗначений;
		СписокАналитикШапки.ЗагрузитьЗначения(ВыборкаДокументов.АналитикиШапки.Выгрузить().ВыгрузитьКолонку("ВидАналитики"));
		
		ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(
			ВыборкаДокументов.ВидБюджета, Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
		
		РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
		ПараметрыОтчета = ПодготовитьПараметрыОтчета(ВыборкаДокументов, СписокАналитикШапки,
			ВыборкаДокументов.ВалютаСценария, ПараметрыВыводаВидаБюджета, Неопределено, РежимФормирования);
		
		БюджетныйОтчет = БюджетнаяОтчетностьВыводСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
		
		ЗаголовокОтчета = НСтр("ru='%1 за период с %2 по %3';uk='%1 за період з %2 по %3'");
		ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтчета,
										ВыборкаДокументов.ВидБюджета,
										Формат(ВыборкаДокументов.НачалоПериода, "ДФ=dd.MM.yyyy"),
										Формат(ВыборкаДокументов.ОкончаниеПериода, "ДФ=dd.MM.yyyy"));
		
		ЗаголовокОтветственный = НСтр("ru='Ответственный: %1';uk='Відповідальний: %1'");
		ЗаголовокОтветственный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтветственный,
										ВыборкаДокументов.Ответственный);
								
		БюджетныйОтчет.ПараметрыВыводаВидаБюджета.Вставить("ЗаголовокОтчета", ЗаголовокОтчета);
		БюджетныйОтчет.ПараметрыВыводаВидаБюджета.Вставить("ЗаголовокОтветственный", ЗаголовокОтветственный);
		
		ДеревоЭлементовБюджета = БюджетныйОтчет.ДеревоСтрокСпискаРедактирования;
		
		Для Каждого СтрокаДереваБюджета Из ДеревоЭлементовБюджета.Строки Цикл
			
			СписокПараметров	= БюджетныйОтчет.ПараметрыВыводаВидаБюджета.СтруктураОписанияСпискаВвода;
			КолонкиПоИзмерениям = Неопределено;
			Если НЕ СоставКолонокКорневогоЭлемента(СтрокаДереваБюджета, СписокПараметров, КолонкиПоИзмерениям) Тогда
				Продолжить;
			КонецЕсли;
			
			ИДТаблицы		= СтрокаДереваБюджета.ИДТаблицы;
			ГлубинаДерева	= Неопределено;
			ПредставленияАналитикПрочее = ПолучитьПредставленияАналитикПрочее(КолонкиПоИзмерениям.СтрокиОснования);
			СхемаКомпоновкиДанных = ПолучитьСКДПечатиДокументаБезГруппировок(ИДТаблицы, КолонкиПоИзмерениям, ГлубинаДерева, 
				БюджетныйОтчет.ПараметрыВыводаВидаБюджета, ПредставленияАналитикПрочее, Истина);
	
			// Вывод результата компоновки в отчет.
			
			Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
			ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
			
			ВнешниеДанные = Новый Структура("ДанныеЯчеек", БюджетныйОтчет.ДанныеЯчеек);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(
				МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки);
			
			ТабличныйДокумент = Новый ТабличныйДокумент;
			
			// Выводим результат в табличный документ.
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
			
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

			Результат.Вывести(ТабличныйДокумент);
			Если ТабличныйДокумент.ВысотаСтраницы Тогда
				БюджетныйОтчет.ПараметрыВыводаВидаБюджета.ЗаголовокОтчета = "";
				БюджетныйОтчет.ПараметрыВыводаВидаБюджета.ЗаголовокОтветственный = "";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТабличныйДокументЭкземпляраБюджета(ДокументСсылка) Экспорт
		
	Запрос = ПолучитьЗапросДанныхВыводаОтчета(ДокументСсылка);
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	ВыборкаДокументов.Следующий();
	
	Если Не ЗначениеЗаполнено(ВыборкаДокументов.ВидБюджета)
		Или Не ЗначениеЗаполнено(ВыборкаДокументов.Сценарий)
		Или Не ЗначениеЗаполнено(ВыборкаДокументов.НачалоПериода)
		Или Не ЗначениеЗаполнено(ВыборкаДокументов.ОкончаниеПериода) Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	СписокАналитикШапки = Новый СписокЗначений;
	СписокАналитикШапки.ЗагрузитьЗначения(ВыборкаДокументов.АналитикиШапки.Выгрузить().ВыгрузитьКолонку("ВидАналитики"));
	
	ПараметрыВыводаВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(
		ВыборкаДокументов.ВидБюджета, Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
	
	РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Документ;
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(ВыборкаДокументов, СписокАналитикШапки,
		ВыборкаДокументов.ВалютаСценария, ПараметрыВыводаВидаБюджета, Неопределено, РежимФормирования);
	
	БюджетныйОтчет = БюджетнаяОтчетностьВыводСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
	
	Возврат БюджетныйОтчет.Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОборотыБюджетов(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭкземплярБюджета.Ссылка,
	|	ЭкземплярБюджета.Дата,
	|	ЭкземплярБюджета.Статус,
	|	ЭкземплярБюджета.Организация,
	|	ЭкземплярБюджета.Подразделение,
	|	ЭкземплярБюджета.Сценарий,
	|	ЭкземплярБюджета.Сценарий.Валюта КАК ВалютаСценария,
	|	ЭкземплярБюджета.МодельБюджетирования,
	|	ЭкземплярБюджета.НачалоПериода,
	|	ЭкземплярБюджета.ОкончаниеПериода
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|ГДЕ
	|	ЭкземплярБюджета.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	СтруктураПараметров = Новый Структура("МодельБюджетирования", Реквизиты.МодельБюджетирования);
	ФормироватьБюджетыПоОрганизациям   = ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоОрганизациям",   СтруктураПараметров);
	ФормироватьБюджетыПоПодразделениям = ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоПодразделениям", СтруктураПараметров);
	
	Запрос.УстановитьПараметр("Ссылка",               Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Дата",                 Реквизиты.Дата);
	Запрос.УстановитьПараметр("Статус",               Реквизиты.Статус);
	Запрос.УстановитьПараметр("Сценарий",             Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("МодельБюджетирования", Реквизиты.МодельБюджетирования);
	Запрос.УстановитьПараметр("НачалоПериода",        Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода",     Реквизиты.ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("Организация",   ?(ФормироватьБюджетыПоОрганизациям,   Реквизиты.Организация,   Неопределено));
	Запрос.УстановитьПараметр("Подразделение", ?(ФормироватьБюджетыПоПодразделениям, Реквизиты.Подразделение, Неопределено));
	
	Запрос.УстановитьПараметр("ВалютаСценария",                 Реквизиты.ВалютаСценария);
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",     Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОборотыБюджетов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОборотыБюджетов";
	
	Если Не ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтСводнаяТаблицаДокумента", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСводнаяТаблицаДокумента(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтОбщиеЗначенияАналитик", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОбщиеЗначенияАналитик(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Дата КАК Период,
	|	&МодельБюджетирования КАК МодельБюджетирования,
	|	&Статус КАК Статус,
	|	СводнаяТаблицаДокумента.ПериодПланирования КАК ПериодПланирования,
	|	СводнаяТаблицаДокумента.СтатьяБюджетов КАК СтатьяБюджетов,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&Сценарий КАК Сценарий,
	|	СводнаяТаблицаДокумента.Валюта,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки1, СводнаяТаблицаДокумента.Аналитика1) КАК Аналитика1,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки2, СводнаяТаблицаДокумента.Аналитика2) КАК Аналитика2,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки3, СводнаяТаблицаДокумента.Аналитика3) КАК Аналитика3,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки4, СводнаяТаблицаДокумента.Аналитика4) КАК Аналитика4,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки5, СводнаяТаблицаДокумента.Аналитика5) КАК Аналитика5,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки6, СводнаяТаблицаДокумента.Аналитика6) КАК Аналитика6,
	|	СводнаяТаблицаДокумента.Количество,
	|	СводнаяТаблицаДокумента.СуммаСценария КАК СуммаСценария,
	|	СводнаяТаблицаДокумента.СуммаУпр КАК СуммаУпр,
	|	СводнаяТаблицаДокумента.СуммаРегл КАК СуммаРегл,
	|	СводнаяТаблицаДокумента.СуммаВВалюте КАК СуммаВВалюте
	|ИЗ
	|	ВтСводнаяТаблицаДокумента КАК СводнаяТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбщиеЗначенияАналитик КАК ОбщиеЗначенияАналитик
	|		ПО СводнаяТаблицаДокумента.СтатьяБюджетов = ОбщиеЗначенияАналитик.СтатьяБюджетов
	|ГДЕ
	|	(СводнаяТаблицаДокумента.Количество <> 0
	|			ИЛИ СводнаяТаблицаДокумента.СуммаСценария <> 0
	|			ИЛИ СводнаяТаблицаДокумента.СуммаУпр <> 0
	|			ИЛИ СводнаяТаблицаДокумента.СуммаРегл <> 0
	|			ИЛИ СводнаяТаблицаДокумента.СуммаВВалюте <> 0)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтСводнаяТаблицаДокумента(Запрос, ТекстыЗапроса)

	ИмяРегистра = "ВтСводнаяТаблицаДокумента"; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтКурсыВалюты", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалюты(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтАналитикаСтатейБюджетов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтАналитикаСтатейБюджетов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОборотыПоСтатьямБюджетов.ПериодПланирования,
	|	ОборотыПоСтатьямБюджетов.ИдентификаторСтроки,
	|	ОборотыПоСтатьямБюджетов.Сумма КАК СуммаСценария,
	|	ОборотыПоСтатьямБюджетов.СуммаВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВалютаСценария = &ВалютаРегламентированногоУчета
	|				ТОГДА ОборотыПоСтатьямБюджетов.Сумма
	|			КОГДА АналитикаСтатейБюджетов.Валюта = &ВалютаРегламентированногоУчета
	|				ТОГДА ОборотыПоСтатьямБюджетов.СуммаВВалюте
	|			ИНАЧЕ ОборотыПоСтатьямБюджетов.СуммаВВалюте * ЕСТЬNULL(КурсыВалютВалюты.Курс, 1) / ЕСТЬNULL(КурсыВалютыРегл.Курс, 1)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВалютаСценария = &ВалютаУправленческогоУчета
	|				ТОГДА ОборотыПоСтатьямБюджетов.Сумма
	|			КОГДА АналитикаСтатейБюджетов.Валюта = &ВалютаУправленческогоУчета
	|				ТОГДА ОборотыПоСтатьямБюджетов.СуммаВВалюте
	|			ИНАЧЕ ОборотыПоСтатьямБюджетов.СуммаВВалюте * ЕСТЬNULL(КурсыВалютВалюты.Курс, 1) / ЕСТЬNULL(КурсыВалютыУпр.Курс, 1)
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	ОборотыПоСтатьямБюджетов.Количество,
	|	АналитикаСтатейБюджетов.СтатьяБюджетов,
	|	АналитикаСтатейБюджетов.Валюта,
	|	АналитикаСтатейБюджетов.Аналитика1 КАК Аналитика1,
	|	АналитикаСтатейБюджетов.Аналитика2 КАК Аналитика2,
	|	АналитикаСтатейБюджетов.Аналитика3 КАК Аналитика3,
	|	АналитикаСтатейБюджетов.Аналитика4 КАК Аналитика4,
	|	АналитикаСтатейБюджетов.Аналитика5 КАК Аналитика5,
	|	АналитикаСтатейБюджетов.Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ ВтСводнаяТаблицаДокумента
	|ИЗ
	|	Документ.ЭкземплярБюджета.ОборотыПоСтатьямБюджетов КАК ОборотыПоСтатьямБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтАналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов
	|		ПО (АналитикаСтатейБюджетов.ИдентификаторСтроки = ОборотыПоСтатьямБюджетов.ИдентификаторСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалюты КАК КурсыВалютВалюты
	|		ПО (КурсыВалютВалюты.Валюта = АналитикаСтатейБюджетов.Валюта)
	|			И (КурсыВалютВалюты.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					КурсыФильтр.Период
	|				ИЗ
	|					ВтКурсыВалюты КАК КурсыФильтр
	|				ГДЕ
	|					КурсыФильтр.Валюта = АналитикаСтатейБюджетов.Валюта
	|					И КурсыФильтр.Период <= ОборотыПоСтатьямБюджетов.ПериодПланирования
	|				УПОРЯДОЧИТЬ ПО
	|					КурсыФильтр.Период УБЫВ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалюты КАК КурсыВалютыУпр
	|		ПО (КурсыВалютыУпр.Валюта = &ВалютаУправленческогоУчета)
	|			И (КурсыВалютыУпр.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					КурсыФильтр.Период
	|				ИЗ
	|					ВтКурсыВалюты КАК КурсыФильтр
	|				ГДЕ
	|					КурсыФильтр.Валюта = &ВалютаУправленческогоУчета
	|					И КурсыФильтр.Период <= ОборотыПоСтатьямБюджетов.ПериодПланирования
	|				УПОРЯДОЧИТЬ ПО
	|					КурсыФильтр.Период УБЫВ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалюты КАК КурсыВалютыРегл
	|		ПО (КурсыВалютыРегл.Валюта = &ВалютаРегламентированногоУчета)
	|			И (КурсыВалютыРегл.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					КурсыФильтр.Период
	|				ИЗ
	|					ВтКурсыВалюты КАК КурсыФильтр
	|				ГДЕ
	|					КурсыФильтр.Валюта = &ВалютаРегламентированногоУчета
	|					И КурсыФильтр.Период <= ОборотыПоСтатьямБюджетов.ПериодПланирования
	|				УПОРЯДОЧИТЬ ПО
	|					КурсыФильтр.Период УБЫВ))
	|ГДЕ
	|	ОборотыПоСтатьямБюджетов.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОборотыПоСтатьямБюджетов.ИдентификаторСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтКурсыВалюты(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКурсыВалюты";
	
	УстановитьПараметрыЗапросаКурсыСценария(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Курсы.Период,
	|	Курсы.Валюта,
	|	Курсы.Курс
	|ПОМЕСТИТЬ ВтКурсыВалюты
	|ИЗ
	|	&КурсыСценария КАК Курсы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Курсы.Валюта,
	|	Курсы.Период";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура УстановитьПараметрыЗапросаКурсыСценария(Запрос)
	
	Если Запрос.Параметры.Свойство("КурсыСценария") Тогда
		Возврат;
	КонецЕсли;
	
	КурсыСценария = Справочники.Сценарии.ТаблицаКурсовСценария(Запрос.Параметры.Сценарий, 
	                                                           , 
	                                                           Запрос.Параметры.НачалоПериода, 
	                                                           Запрос.Параметры.ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("КурсыСценария", КурсыСценария);
	
КонецПроцедуры

Функция ТекстЗапросаВтАналитикаСтатейБюджетов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтАналитикаСтатейБюджетов";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.СтатьяБюджетов,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика1,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика2,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика3,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика4,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика5,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика6,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Валюта,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВтАналитикаСтатейБюджетов
	|ИЗ
	|	Документ.ЭкземплярБюджета.АналитикаСтатейБюджетов КАК ЭкземплярБюджетаАналитикаСтатейБюджетов
	|ГДЕ
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтОбщиеЗначенияАналитик(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОбщиеЗначенияАналитик";
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтФлагиАналитикаИзШапки", ТекстыЗапроса) Тогда
		ТекстЗапросаВтФлагиАналитикаИзШапки(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФлагиАналитикаИзШапки.СтатьяБюджетов,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки1,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки2,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки3,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки4,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки5,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки6
	|ПОМЕСТИТЬ ВтОбщиеЗначенияАналитик
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтФлагиАналитикаИзШапки КАК ФлагиАналитикаИзШапки
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЭкземплярБюджета.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтФлагиАналитикаИзШапки(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтФлагиАналитикаИзШапки";
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтАналитикиШапки", ТекстыЗапроса) Тогда
		ТекстЗапросаВтАналитикиШапки(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтСтатьиБюджета", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСтатьиБюджета(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтатьиБюджета.СтатьяБюджетов,
	|	АналитикаШапки1.НомерСтроки КАК ИсточникАналитикаШапка1,
	|	АналитикаШапки2.НомерСтроки КАК ИсточникАналитикаШапка2,
	|	АналитикаШапки3.НомерСтроки КАК ИсточникАналитикаШапка3,
	|	АналитикаШапки4.НомерСтроки КАК ИсточникАналитикаШапка4,
	|	АналитикаШапки5.НомерСтроки КАК ИсточникАналитикаШапка5,
	|	АналитикаШапки6.НомерСтроки КАК ИсточникАналитикаШапка6
	|ПОМЕСТИТЬ ВтФлагиАналитикаИзШапки
	|ИЗ
	|	ВтСтатьиБюджета КАК СтатьиБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитикиШапки КАК АналитикаШапки1
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики1 = АналитикаШапки1.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитикиШапки КАК АналитикаШапки2
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики2 = АналитикаШапки2.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитикиШапки КАК АналитикаШапки3
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики3 = АналитикаШапки3.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитикиШапки КАК АналитикаШапки4
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики4 = АналитикаШапки4.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитикиШапки КАК АналитикаШапки5
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики5 = АналитикаШапки5.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтАналитикиШапки КАК АналитикаШапки6
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики6 = АналитикаШапки6.ВидАналитики";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтАналитикиШапки(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтАналитикиШапки";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыБюджетовАналитикиШапки.НомерСтроки,
	|	ВидыБюджетовАналитикиШапки.ВидАналитики
	|ПОМЕСТИТЬ ВтАналитикиШапки
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
	|		ПО (ВидыБюджетовАналитикиШапки.Ссылка = ЭкземплярБюджета.ВидБюджета)
	|ГДЕ
	|	ЭкземплярБюджета.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтСтатьиБюджета(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтСтатьиБюджета";
	
	Если Не ПроведениеСервер.ЕстьТаблицаЗапроса("ВтСводнаяТаблицаДокумента", ТекстыЗапроса) Тогда
		ТекстЗапросаВтСводнаяТаблицаДокумента(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СводнаяТаблицаДокумента.СтатьяБюджетов
	|ПОМЕСТИТЬ ВтСтатьиБюджета
	|ИЗ
	|	ВтСводнаяТаблицаДокумента КАК СводнаяТаблицаДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Процедура РассчитатьЭлементыСпискаБюджетаКДобавлению(ДобавляемыеЭлементы, ДобавляемыеКолонки, 
												КолонкиПоИзмерениям, ФиксированныеЗначения = Неопределено) Экспорт
	
	Для Каждого Измерение из КолонкиПоИзмерениям.Измерения Цикл
		
		ЭлементОтчета = КолонкиПоИзмерениям.НастройкиКолонок[Измерение];
		
		ИмяРеквизита = Измерение;
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, 
											ЭлементОтчета.ТипЗначения, 
											"СписокРедактированияБюджета",
											ЭлементОтчета.Заголовок);
		
		ДобавляемыеЭлементы.Добавить(НовыйРеквизит);
		
		НоваяКолонка = Новый Структура("Имя, Тип, Родитель, Заголовок", 
									ИмяРеквизита, "ПолеФормы", 
									"СписокРедактированияБюджета", 
									ЭлементОтчета.Заголовок);
									
		Если ЭлементОтчета.Свойство("СвязиПараметровВыбора") Тогда
			НоваяКолонка.Вставить("СвязиПараметровВыбора", ЭлементОтчета.СвязиПараметровВыбора);
		КонецЕсли;
		
		Если ЭлементОтчета.Свойство("ПараметрыВыбора") Тогда
			НоваяКолонка.Вставить("ПараметрыВыбора", ЭлементОтчета.ПараметрыВыбора);
		КонецЕсли;
		
		Если ЭлементОтчета.Свойство("Формат") Тогда
			НоваяКолонка.Вставить("Формат", ЭлементОтчета.Формат);
		КонецЕсли;
		
		НастройкиВыбора = КолонкиПоИзмерениям.НастройкиВвода[Измерение];
		Если НастройкиВыбора <> Неопределено Тогда
			НоваяКолонка.Вставить("СписокВыбора", НастройкиВыбора);
			Если ФиксированныеЗначения <> Неопределено Тогда
				Если НастройкиВыбора.Количество() = 1 Тогда
					ФиксированныеЗначения.Вставить(Измерение, НастройкиВыбора[0].Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрНайти(Измерение, "Период") Тогда
			НоваяКолонка.Вставить("ТребуютсяПрочие");
			НоваяКолонка.Вставить("ПредставлениеПрочих", "<прочие " + НРег(НовыйРеквизит.Заголовок) + ">");
		КонецЕсли;
		
		ДобавляемыеКолонки.Добавить(НоваяКолонка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиСпискаБюджетаПоТаблице(ДобавляемыеЭлементы, ДобавляемыеКолонки, КолонкиПоИзмерениям,
								СтруктураКолонок, СтруктураАналогРасшифровки, МассивУровней = Неопределено, РодительскаяКолонка = "") Экспорт
	
	Если МассивУровней = Неопределено Тогда
		МассивУровней = Новый Структура;
	КонецЕсли;
	
	Для Каждого КолонкаБюджета из СтруктураКолонок.Строки Цикл
		
		Если ЗначениеЗаполнено(КолонкаБюджета.ФиксированноеЗначение) Тогда
			МассивУровней.Вставить(КолонкаБюджета.ИмяИзмерения, КолонкаБюджета.ФиксированноеЗначение);
		КонецЕсли;
		
		ЛокальныйРодитель = РодительскаяКолонка;
		ТолькоПросмотр = ?(ЗначениеЗаполнено(ЛокальныйРодитель), ЛокальныйРодитель.ТолькоПросмотр, Ложь);
		
		НеВводимаяКолонка = ТолькоПросмотр
			ИЛИ КолонкаБюджета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ КолонкаБюджета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе
			ИЛИ КолонкаБюджета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель;
			
		ИмяРеквизита = "Колонка_" + Формат(ДобавляемыеКолонки.Количество(), "ЧГ=");
		Если Не КолонкаБюджета.Строки.Количество() Тогда
			
			ПутьККолонке = Новый Структура;
			Для Каждого КлючИЗначение из МассивУровней Цикл
				ПутьККолонке.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
			КолонкаЭлементОтчета = Неопределено;
			Если ЗначениеЗаполнено(КолонкаБюджета.ЭлементОтчета) Тогда
				ПутьККолонке.Вставить("Колонка", КолонкаБюджета.ЭлементОтчета);
				КолонкаЭлементОтчета = КолонкаБюджета.ЭлементОтчета;
			ИначеЕсли ЗначениеЗаполнено(РодительскаяКолонка) Тогда
				ПутьККолонке.Вставить("Колонка", РодительскаяКолонка.ЭлементОтчета);
				КолонкаЭлементОтчета = РодительскаяКолонка.ЭлементОтчета;
			КонецЕсли;
			
			Если СтрНайти(КолонкаБюджета.ИмяИзмерения, "#Показатель") Тогда
				ПутьККолонке.Вставить("ИмяПоказателя", СтрЗаменить(КолонкаБюджета.ИмяИзмерения, "#Показатель_", ""));
				Если ПутьККолонке.ИмяПоказателя = "Значение" 
					И Не ПутьККолонке.Свойство("РедактируемоеЗначение") Тогда
					НеВводимаяКолонка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ТипРедактируемогоЗначения = "Число"; 
			ТипыЗначенийПоказателей = Новый Соответствие;
			Если КолонкиПоИзмерениям.НастройкиКолонок.Свойство("ТипыЗначенийПоказателей", ТипыЗначенийПоказателей) Тогда
				ТипРедактируемогоЗначения = ТипыЗначенийПоказателей[КолонкаЭлементОтчета];
			КонецЕсли;
			
			Если ТипРедактируемогоЗначения = "Строка" Тогда
				ТипРедактируемойКолонки = Новый ОписаниеТипов("Строка");
			ИначеЕсли ТипРедактируемогоЗначения = "Булево" Тогда
				ТипРедактируемойКолонки = Новый ОписаниеТипов("Булево");
			Иначе
				ТипРедактируемойКолонки = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
			КонецЕсли;
				
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРедактируемойКолонки, 
											"СписокРедактированияБюджета", КолонкаБюджета.НаименованиеДляПечати);
			
			ДобавляемыеЭлементы.Добавить(НовыйРеквизит);
			ТипКолонки = "ПолеФормы";
			
			СтатьиБюджетов = Неопределено;
			Если КолонкиПоИзмерениям.Свойство("СтатьиБюджетов", СтатьиБюджетов) Тогда
				СтруктураОписания = СтатьиБюджетов[ПутьККолонке.Колонка];
				Если СтруктураОписания = Неопределено Тогда
					НеВводимаяКолонка = Истина;
				Иначе
					СтатьяБюджетов = СтруктураОписания.СтатьяБюджетов;
					РедактируемоеЗначение = СтруктураОписания.РедактируемоеЗначение;
					ИмяПоказателя = СтруктураОписания.ИмяПоказателя;
					Если Не ЗначениеЗаполнено(СтатьяБюджетов)
						И Не ЗначениеЗаполнено(РедактируемоеЗначение) Тогда
						НеВводимаяКолонка = Истина;
					ИначеЕсли ЗначениеЗаполнено(СтатьяБюджетов) Тогда
						ПутьККолонке.Вставить("СтатьяБюджетов", СтатьяБюджетов);
					ИначеЕсли ЗначениеЗаполнено(РедактируемоеЗначение) Тогда
						ПутьККолонке.Вставить("РедактируемоеЗначение", РедактируемоеЗначение);
					КонецЕсли;
					ПутьККолонке.Вставить("ИмяПоказателя", ИмяПоказателя);
				КонецЕсли;
			КонецЕсли;
			
			Если НеВводимаяКолонка Тогда
				ПутьККолонке.Вставить("Расчетная", Истина);
			КонецЕсли;
			
			СтруктураАналогРасшифровки.Вставить(ИмяРеквизита, ПутьККолонке);
			
			ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000));
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита + "Примечание", ТипСтрока, "СписокРедактированияБюджета");
			ДобавляемыеЭлементы.Добавить(НовыйРеквизит);
			
			ТипКартинка = Новый ОписаниеТипов("Картинка");
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита + "КартинкаПримечание", ТипКартинка, "СписокРедактированияБюджета");
			ДобавляемыеЭлементы.Добавить(НовыйРеквизит);
			
			Если Не НеВводимаяКолонка Тогда
				
				ИмяРодителя = ?(ЗначениеЗаполнено(ЛокальныйРодитель), ЛокальныйРодитель.Имя, "СписокРедактированияБюджета");
				ОписаниеКолонки = Новый Структура("Имя, Тип, Родитель, ТолькоПросмотр, Заголовок, Группировка", 
													ИмяРеквизита + "ГруппаВвода", "ГруппаФормы", 
													ИмяРодителя, Ложь, НСтр("ru='Ячейка ввода';uk='Комірка введення'"), ГруппировкаКолонок.ВЯчейке);
				
				ДобавляемыеКолонки.Добавить(ОписаниеКолонки);
				
				ЛокальныйРодитель = ОписаниеКолонки;
				
				ИмяРодителя = ЛокальныйРодитель.Имя;
				
				ЗаголовокКолонки = КолонкаБюджета.НаименованиеДляПечати + " (%1)";
				ЗаголовокКолонки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокКолонки, НСтр("ru='картинка комментария';uk='картинка коментаря'"));
				ОписаниеКолонки = Новый Структура("Имя, Тип, Родитель, ТолькоПросмотр, Заголовок, Вид", 
													ИмяРеквизита + "КартинкаПримечание", "ПолеФормы", ИмяРодителя, Ложь, 
													ЗаголовокКолонки, ВидПоляФормы.ПолеКартинки);
				
				ДобавляемыеКолонки.Добавить(ОписаниеКолонки);
				
			КонецЕсли;
			
		Иначе
			ТипКолонки = "ГруппаФормы";
		КонецЕсли;
		
		ИмяРодителя = ?(ЗначениеЗаполнено(ЛокальныйРодитель), ЛокальныйРодитель.Имя, "СписокРедактированияБюджета");
		ОписаниеКолонки = Новый Структура("Имя, Тип, Родитель, ТолькоПросмотр, Заголовок", 
											ИмяРеквизита, ТипКолонки, ИмяРодителя, НеВводимаяКолонка, КолонкаБюджета.НаименованиеДляПечати);
		ДобавляемыеКолонки.Добавить(ОписаниеКолонки);
		
		Если НеВводимаяКолонка Тогда
			ОписаниеКолонки.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		
		Если ТипКолонки = "ГруппаФормы" Тогда
			ОписаниеКолонки.Вставить("Заголовок", КолонкаБюджета.НаименованиеДляПечати);
		Иначе
			ОписаниеКолонки.Вставить("Формат", "ЧДЦ=2");
		КонецЕсли;
		
		ОписаниеКолонки.Вставить("ЭлементОтчета", КолонкаБюджета.ЭлементОтчета);
		
		ДобавитьКолонкиСпискаБюджетаПоТаблице(ДобавляемыеЭлементы, ДобавляемыеКолонки, КолонкиПоИзмерениям, КолонкаБюджета, 
													СтруктураАналогРасшифровки, МассивУровней, ОписаниеКолонки);
		
		Если ЗначениеЗаполнено(КолонкаБюджета.ФиксированноеЗначение) Тогда
			МассивУровней.Удалить(КолонкаБюджета.ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьИзмененияКолонокСпискаБюджетаНаФорме(Форма, ДобавляемыеЭлементы, ДобавляемыеКолонки, ФиксированныеЗначения = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого УдаляемыйРеквизит из Форма.ПолучитьРеквизиты("СписокРедактированияБюджета") Цикл
		Если УдаляемыйРеквизит.Имя = "ИндексСтроки"
			ИЛИ УдаляемыйРеквизит.Имя = "Загружать" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(УдаляемыйРеквизит.Путь + "." + УдаляемыйРеквизит.Имя);
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеЭлементы, УдаляемыеЭлементы);
	
	СписокЭлементов = Элементы.СписокРедактированияБюджета.ПодчиненныеЭлементы;
	ЕстьЧтоУдалять = Истина;
	Пока ЕстьЧтоУдалять Цикл
		Для Каждого Элемент из СписокЭлементов Цикл
			Если Элемент.Имя = "СписокРедактированияБюджетаЗагружать" Тогда
				Продолжить;
			КонецЕсли;
			Элементы.Удалить(Элемент);
		КонецЦикла;
		СписокЭлементов = Элементы.СписокРедактированияБюджета.ПодчиненныеЭлементы;
		Если СписокЭлементов.Количество() = 1 Тогда
			Если СписокЭлементов[0].Имя = "СписокРедактированияБюджетаЗагружать" Тогда
				ЕстьЧтоУдалять = Ложь;
			КонецЕсли;
		ИначеЕсли Не СписокЭлементов.Количество() Тогда
			ЕстьЧтоУдалять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	УсловноеОформлениеКУдалению = Новый Массив;
	Для Каждого ЭлементУО из УсловноеОформление.Элементы Цикл
		Если СтрНайти(ЭлементУО.Представление, "ДобавленноеУсловноеОформление_") Тогда
			УсловноеОформлениеКУдалению.Добавить(ЭлементУО);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУО из УсловноеОформлениеКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУО);
	КонецЦикла;
	
	Для Каждого Реквизит из ДобавляемыеКолонки Цикл
		Элемент = Элементы.Добавить(Реквизит.Имя, Тип(Реквизит.Тип), Элементы[Реквизит.Родитель]);
		Если Реквизит.Тип = "ПолеФормы" Тогда
			
			Элемент.ПутьКДанным = "СписокРедактированияБюджета." + Реквизит.Имя;
			
			Если Реквизит.Свойство("Вид") Тогда
				Элемент.Вид = Реквизит.Вид;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Иначе
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				УстановитьДоступностьСписокВыбораКолонки(Элемент, Реквизит, ФиксированныеЗначения);
				Элемент.Заголовок = Реквизит.Заголовок;
			КонецЕсли;
			
			Если Реквизит.Свойство("СвязиПараметровВыбора") Тогда
			
				НоваяСвязь = Новый СвязьПараметраВыбора("Отбор." + Реквизит.СвязиПараметровВыбора.Отбор, Реквизит.СвязиПараметровВыбора.ПутьКДанным);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				Элемент.СвязиПараметровВыбора = НовыеСвязи;
			
			КонецЕсли;
			
			Если Реквизит.Свойство("ПараметрыВыбора") Тогда
			
				НоваяСвязь = Новый ПараметрВыбора("Отбор." + Реквизит.ПараметрыВыбора.Отбор, Реквизит.ПараметрыВыбора.Значение);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				Элемент.ПараметрыВыбора = НовыеСвязи;
			
			КонецЕсли;
			
			Если Реквизит.Свойство("Формат") Тогда
				Элемент.Формат = Реквизит.Формат;
				Элемент.ФорматРедактирования = "ДФ=dd.MM.yyyy";
			КонецЕсли;
			
			Если Реквизит.Свойство("ТребуютсяПрочие") Тогда
				
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.ПутьКДанным);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				
				Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				Поле.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Реквизит.ПредставлениеПрочих);
				ЭлементУсловногоОформления.Представление = "ДобавленноеУсловноеОформление_Текст" + Элемент.Имя;
				
			КонецЕсли;
			
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_СписокРедактированияБюджетаОсновнаяКолонкаПриИзменении");
			
			Если Элемент.ТолькоПросмотр Тогда
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.Свойство("ТолькоПросмотр") И Реквизит.ТолькоПросмотр Тогда
				
				Элемент.ТолькоПросмотр = Истина;
				
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				
				Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				Поле.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(237, 237, 237));
				ЭлементУсловногоОформления.Представление = "ДобавленноеУсловноеОформление_Фон" + Элемент.Имя;
				
			КонецЕсли;
			
		Иначе
			
			Если Реквизит.Свойство("Группировка") Тогда
				
				Элемент.Группировка = Реквизит.Группировка;
				
			Иначе
			
				Элемент.Заголовок = Реквизит.Заголовок;
				Элемент.ОтображатьВШапке = Истина;
				Элемент.Группировка = ГруппировкаКолонок.Горизонтальная;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьСписокВыбораКолонки(Элемент, Реквизит, ФиксированныеЗначения) Экспорт
	
	Элемент.ТолькоПросмотр = Ложь;
	
	Если ФиксированныеЗначения <> Неопределено Тогда
		Если ФиксированныеЗначения.Свойство(Реквизит.Имя) Тогда
			Элемент.ТолькоПросмотр = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Элемент.КнопкаВыбора = Истина;
	Элемент.РежимВыбораИзСписка = Ложь;
	Элемент.СписокВыбора.Очистить();
	
	Если Реквизит.Свойство("СписокВыбора") Тогда
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РежимВыбораИзСписка = Истина;
		Для Каждого ЭлементСписка из Реквизит.СписокВыбора Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Функция БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования)
	
	Курс = СтрокиКурса[0].Курс;
	Для Каждого СтрокаКурса из СтрокиКурса Цикл
		Если СтрокаКурса.Период > ПериодПланирования Тогда
			Возврат Курс;
		КонецЕсли;
		Курс = СтрокаКурса.Курс;
	КонецЦикла;
	
	Возврат Курс;
	
КонецФункции

Функция ПересчитатьПоТаблицеКурсов(ОбъектИПараметрыРасчета, Сумма, ПериодПланирования, ВалютаНач, ВалютаКон)
	
	АдресТаблицыКурсов = ОбъектИПараметрыРасчета.АдресТаблицыКурсов;
	ТребоватьУказанияКурсовДляКаждогоПериода = ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода;
	
	ТаблицаКурсов = ПолучитьИзВременногоХранилища(АдресТаблицыКурсов);
	
	Если ТребоватьУказанияКурсовДляКаждогоПериода Тогда
		СтруктураПоиска = Новый Структура("Валюта, Период", ВалютаНач, ПериодПланирования);
	Иначе
		СтруктураПоиска = Новый Структура("Валюта", ВалютаНач);
	КонецЕсли;
	
	СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
	Если Не СтрокиКурса.Количество() Тогда
		ТаблицаКурсов = ОбновитьТаблицуКурсов(ОбъектИПараметрыРасчета, ТаблицаКурсов);
		ПоместитьВоВременноеХранилище(ТаблицаКурсов, АдресТаблицыКурсов);
		СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
		Если Не СтрокиКурса.Количество() Тогда
			Возврат Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребоватьУказанияКурсовДляКаждогоПериода Тогда
		КурсНач 		= СтрокиКурса[0].Курс;
		СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта, Период", ВалютаКон, ПериодПланирования));
		Если Не СтрокиКурса.Количество() Тогда
			Возврат Сумма;
		КонецЕсли;
		КурсКон 		= СтрокиКурса[0].Курс;
	Иначе

		КурсНач 		= БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования);
		СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта", ВалютаКон));
		Если Не СтрокиКурса.Количество() Тогда
			Возврат Сумма;
		КонецЕсли;
		КурсКон 		= БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования);
	КонецЕсли;
	
	Возврат Сумма * КурсНач / КурсКон;
	
КонецФункции

Функция ПодготовитьПараметрыОтчета(Объект, СписокАналитикШапки, ВалютаСценария, ПараметрыВыводаВидаБюджета, 
									ДанныеЯчеек = Неопределено, РежимФормирования) Экспорт
	
	ПараметрыДанных = Новый Структура;
	Если ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоОрганизациям", Новый Структура("МодельБюджетирования", Объект.МодельБюджетирования)) Тогда
		ПараметрыДанных.Вставить("Организация", 	Объект.Организация);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоПодразделениям", Новый Структура("МодельБюджетирования", Объект.МодельБюджетирования)) Тогда
		ПараметрыДанных.Вставить("Подразделение", 	Объект.Подразделение);
	КонецЕсли;
	ПараметрыДанных.Вставить("Валюта", 		ВалютаСценария);
	ПараметрыДанных.Вставить("Сценарий", 	Объект.Сценарий);
	ПараметрыДанных.Вставить("Документ", 	Объект.Ссылка);
	ПараметрыДанных.Вставить("АналитикаСтатейБюджетов", Объект.АналитикаСтатейБюджетов.Выгрузить());
	ПараметрыДанных.Вставить("ОборотыПоСтатьямБюджетов", Объект.ОборотыПоСтатьямБюджетов.Выгрузить());
	ПараметрыДанных.Вставить("АналитикаЗначений", Объект.АналитикаЗначений.Выгрузить());
	ПараметрыДанных.Вставить("ДатаАктуальности", КонецДня(ТекущаяДата()));
	ПараметрыДанных.Вставить("ВариантСумм", Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария);
	ПараметрыДанных.Вставить("ВалютаСценария", ВалютаСценария);
	
	СтатусыДанных = Новый СписокЗначений;
	СтатусыДанных.Добавить(Перечисления.СтатусыПланов.Утвержден);
	СтатусыДанных.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	СтатусыДанных.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
	ПараметрыДанных.Вставить("Статус", СтатусыДанных);
	
	ПараметрыДанных.Вставить("ВидБюджета", Объект.ВидБюджета);
	
	ПараметрыДанных.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВыводаВидаБюджета);
	
	ПараметрыДанных.Вставить("ДанныеЯчеек", ДанныеЯчеек);
	
	ДополнитьПараметрамиПериодами(Объект, ПараметрыДанных);
	
	ДополнительныеФильтрыПоАналитикам = Новый Структура;
	Для Каждого ВидАналитики из СписокАналитикШапки Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики.Значение);
		ДополнительныеФильтрыПоАналитикам.Вставить(ИмяПоля);
		ПараметрыДанных.Вставить(ИмяПоля, Объект["Аналитика" + (СписокАналитикШапки.Индекс(ВидАналитики) + 1)]);
	КонецЦикла;
	
	ПараметрыДанных.Вставить("ДополнительныеФильтрыПоАналитикам", ДополнительныеФильтрыПоАналитикам);
	
	ПараметрыДанных.Вставить("ИспользоватьДляВводаПлана", Истина);
	ПараметрыДанных.Вставить("РежимФормирования", РежимФормирования);
	
	Возврат ПараметрыДанных;
	
КонецФункции

Функция ВалютаВводаАналитики(Расшифровка, КэшРеквизитовСтатей) Экспорт
	
	ОбъектВалютногоУчета = Неопределено;
	Если Не Расшифровка.Свойство("СтатьяБюджетов", ОбъектВалютногоУчета) 
			ИЛИ Не ЗначениеЗаполнено(ОбъектВалютногоУчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыВалютногоУчета = РеквизитыСтатьиБюджетовИзКэша(ОбъектВалютногоУчета, КэшРеквизитовСтатей);
	
	Если Не РеквизитыВалютногоУчета.УчитыватьПоВалюте Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.ВалютаОпределяетсяАналитикой Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеАналитикиВалюты = Расшифровка.ЗначенияАналитик[РеквизитыВалютногоУчета.ВидАналитикиВалюта];
	
	Если Не ЗначениеЗаполнено(ЗначениеАналитикиВалюты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеПоля = КэшРеквизитовСтатей[ЗначениеАналитикиВалюты];
	Валюта = Неопределено;
	Если ЗначениеПоля = Неопределено Тогда
		ЗначениеПоля = Новый Структура;
		Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеАналитикиВалюты, РеквизитыВалютногоУчета.ПутьКАналитикеВалюта);
		ЗначениеПоля.Вставить(РеквизитыВалютногоУчета.ПутьКАналитикеВалюта, Валюта);
		КэшРеквизитовСтатей.Вставить(ЗначениеАналитикиВалюты, ЗначениеПоля);
	Иначе
		Если Не ЗначениеПоля.Свойство(РеквизитыВалютногоУчета.ПутьКАналитикеВалюта, Валюта) Тогда
			Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеАналитикиВалюты, РеквизитыВалютногоУчета.ПутьКАналитикеВалюта);
			ЗначениеПоля.Вставить(РеквизитыВалютногоУчета.ПутьКАналитикеВалюта, Валюта);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Процедура ДополнитьПараметрамиПериодами(Объект, ПараметрыДанных) Экспорт
	
	ПараметрыДанных.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыДанных.Вставить("КонецПериода", Объект.ОкончаниеПериода);
	ПараметрыДанных.Вставить("ГраницаФактДанных", Объект.ГраницаФактДанных);
	
КонецПроцедуры

Функция МаксимальныйНомерПоПорядку(Объект) Экспорт
	
	ТаблицаПорядковыйИндексВвода = Объект.ОборотыПоСтатьямБюджетов.Выгрузить(,"НомерПоПорядку");
	ТаблицаПорядковыйИндексВвода.Сортировать("НомерПоПорядку УБЫВ");
	Если ТаблицаПорядковыйИндексВвода.Количество() Тогда
		ИндексПорядковыйИндексВвода = ТаблицаПорядковыйИндексВвода[0].НомерПоПорядку;
	Иначе
		ИндексПорядковыйИндексВвода = 0;
	КонецЕсли;
	
	Возврат ИндексПорядковыйИндексВвода;
	
КонецФункции

Функция ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, ДанныеПоиска, Добавлять = Истина) Экспорт
	Перем ИдентификаторСтроки;
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	
	СтруктураПоиска = Новый Структура("Аналитика1, Аналитика2, 
										|Аналитика3, Аналитика4, Аналитика5, Аналитика6");
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		СтруктураПоиска.Вставить("СтатьяБюджетов");
		СтруктураПоиска.Вставить("Валюта");
		ИмяТабличнойЧасти = "АналитикаСтатейБюджетов";
	Иначе
		СтруктураПоиска.Вставить("РедактируемоеЗначение");
		Для Сч = 1 по 6 Цикл
			СтруктураПоиска.Вставить("ВидАналитики" + Сч);
		КонецЦикла;
		ИмяТабличнойЧасти = "АналитикаЗначений";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоиска);
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		Если ТипЗнч(ДанныеПоиска) = Тип("Структура") Тогда
			Если ДанныеПоиска.Свойство("Валюта") Тогда
				Если ДанныеПоиска.Валюта = Неопределено Тогда
					СтруктураПоиска.Удалить("Валюта");
				Иначе
					СтруктураПоиска.Валюта = ДанныеПоиска.Валюта;
				КонецЕсли;
			Иначе
				СтруктураПоиска.Валюта = ВалютаСценария;
			КонецЕсли;
		Иначе
			СтруктураПоиска.Валюта = ВалютаСценария;
		КонецЕсли;
	Иначе
		МаксимальныйНомерАналитики = 0;
		Для Сч = 1 по 6 Цикл
			Если ЗначениеЗаполнено(СтруктураПоиска["ВидАналитики" + Сч]) Тогда
				МаксимальныйНомерАналитики = Сч;
			КонецЕсли;
		КонецЦикла;
		СтруктураПоиска.Вставить("КоличествоИспользуемыхАналитик", МаксимальныйНомерАналитики);
	КонецЕсли;
	
	РезультатПоиска = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		Если Добавлять Тогда
			СтрокаАналитикиСтатейБюджетов = Объект[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАналитикиСтатейБюджетов, СтруктураПоиска);
			СтрокаАналитикиСтатейБюджетов.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			ИдентификаторСтроки = СтрокаАналитикиСтатейБюджетов.ИдентификаторСтроки;
		КонецЕсли;
	Иначе
		ИдентификаторСтроки = РезультатПоиска[0].ИдентификаторСтроки;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

Функция НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка, ИмяПоказателя = Неопределено, 
										РасшифровкаАналитика = Неопределено, ТолькоНайти = Ложь) Экспорт
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	РасшифровкаАналитика = ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, , ИмяПоказателя);
	ПериодПланирования   = РасшифровкаАналитика.ПериодПланирования;
	
	ИдентификаторСтроки  = ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, РасшифровкаАналитика);
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	Отбор.Вставить("ПериодПланирования", ПериодПланирования);
	РезультатПоиска = Объект.ОборотыПоСтатьямБюджетов.НайтиСтроки(Отбор);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		
		Если ТолькоНайти Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаОборот = Объект.ОборотыПоСтатьямБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОборот, Отбор);
		СтрокаОборот.НомерПоПорядку = МаксимальныйНомерПоПорядку(Объект) + 1;
		
	Иначе
		
		СтрокаОборот = РезультатПоиска[0];
		
	КонецЕсли;
	
	Возврат СтрокаОборот;
	
КонецФункции

Функция ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, ТекстЗначения, Примечание = Неопределено, РежимЗаполнения = Ложь) Экспорт
	Перем ИмяПоказателя, РасшифровкаАналитика;
	
	Объект = ОбъектИПараметрыРасчета.Объект;
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	
	СтрокаОборот = НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка, ИмяПоказателя, РасшифровкаАналитика);
	Если ТипЗнч(ТекстЗначения) = Тип("Число") Тогда
		Значение = ТекстЗначения;
	ИначеЕсли ИмяПоказателя = "Значение" Тогда
		Значение = ТекстЗначения;
	Иначе
		Попытка
			ЗначениеСтрокой = СтрЗаменить(ТекстЗначения, Символы.НПП, "");
			ЗначениеСтрокой = СтрЗаменить(ТекстЗначения, " ", "");
			Значение = Число(ЗначениеСтрокой);
		Исключение
			Значение = 0;
		КонецПопытки;
	КонецЕсли;
	
	ПериодПланирования = РасшифровкаАналитика.ПериодПланирования;
	
	Если Примечание <> Неопределено Тогда
		СтрокаОборот.Примечание = Примечание;
	КонецЕсли;
	
	Если ИмяПоказателя = "Сумма" Тогда
		
		Валюта = Неопределено;
		Если РасшифровкаАналитика.Свойство("Валюта", Валюта) И Валюта <> ВалютаСценария Тогда
			
			СтрокаОборот.Сумма = ПересчитатьПоТаблицеКурсов(ОбъектИПараметрыРасчета, Значение, ПериодПланирования, Валюта, ВалютаСценария);
			СтрокаОборот.СуммаВВалюте = Значение;
			
		Иначе
			
			СтрокаОборот.Сумма = Значение;
			СтрокаОборот.СуммаВВалюте = Значение;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаОборот[ИмяПоказателя] = Значение;
		
	КонецЕсли;
	
	Результат = Новый Структура("Сумма, СуммаВВалюте, Количество, Значение", 
								СтрокаОборот.Сумма, СтрокаОборот.СуммаВВалюте, СтрокаОборот.Количество, СтрокаОборот.Значение);
	
	Если Не РежимЗаполнения Тогда
		Если СтрокаОборот.Сумма = 0 И СтрокаОборот.СуммаВВалюте = 0 И 
			СтрокаОборот.Количество = 0 И Не ЗначениеЗаполнено(СтрокаОборот.Значение) И
			ПустаяСтрока(СтрокаОборот.Примечание) Тогда
			
			Объект.ОборотыПоСтатьямБюджетов.Удалить(СтрокаОборот);
			ИдентификаторСтроки = ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, РасшифровкаАналитика);
			
			Отбор = Новый Структура();
			Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
			РезультатПоиска = Объект.ОборотыПоСтатьямБюджетов.НайтиСтроки(Отбор);
			Если Не РезультатПоиска.Количество() Тогда
				НайденнаяСтрока = Объект.АналитикаСтатейБюджетов.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
				Если НайденнаяСтрока.Количество() Тогда
					Объект.АналитикаСтатейБюджетов.Удалить(НайденнаяСтрока[0]);
				КонецЕсли;
				НайденнаяСтрока = Объект.АналитикаЗначений.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
				Если НайденнаяСтрока.Количество() Тогда
					Объект.АналитикаЗначений.Удалить(НайденнаяСтрока[0]);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыСтатьиБюджетовИзКэша(СтатьяБюджетов, АдресКэшаПараметровСтатей) Экспорт
	
	Если ЭтоАдресВременногоХранилища(АдресКэшаПараметровСтатей) Тогда
		КэшПараметровСтатей = ПолучитьИзВременногоХранилища(АдресКэшаПараметровСтатей);
	Иначе
		КэшПараметровСтатей = АдресКэшаПараметровСтатей;
	КонецЕсли;
	
	РеквизитыСтатьи = КэшПараметровСтатей[СтатьяБюджетов];
	
	Если РеквизитыСтатьи = Неопределено Тогда
		
		РеквизитыСтатьи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатьяБюджетов, 
		"ВидАналитики1, ВидАналитики2, ВидАналитики3, ВидАналитики4, ВидАналитики5, ВидАналитики6,
		|ВидАналитики1.ТипЗначения, ВидАналитики2.ТипЗначения, ВидАналитики3.ТипЗначения, 
		|ВидАналитики4.ТипЗначения, ВидАналитики5.ТипЗначения, ВидАналитики6.ТипЗначения,
		|УчитыватьПоВалюте, ВалютаОпределяетсяАналитикой, АдресАналитикиВалюта, КоличествоИспользуемыхАналитик");
		
		Если РеквизитыСтатьи.УчитыватьПоВалюте Тогда
			Если РеквизитыСтатьи.ВалютаОпределяетсяАналитикой Тогда
				ВидАналитикиВалюта = "ВидАналитики" + РеквизитыСтатьи.АдресАналитикиВалюта;
				ИмяРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыСтатьи[ВидАналитикиВалюта], "ЗаполнениеВалюты");
				РеквизитыСтатьи.Вставить("ПутьКАналитикеВалюта", ИмяРеквизита);
				РеквизитыСтатьи.Вставить("ИмяАналитикиВалюта", ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыСтатьи[ВидАналитикиВалюта]));
				РеквизитыСтатьи.Вставить("ВидАналитикиВалюта", РеквизитыСтатьи[ВидАналитикиВалюта]);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВидовАналитик = Новый Структура;
		Для Сч = 1 по РеквизитыСтатьи.КоличествоИспользуемыхАналитик Цикл
			ВидАналитики = РеквизитыСтатьи["ВидАналитики" + Сч];
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			СтруктураВидовАналитик.Вставить(ИмяАналитики, ВидАналитики);
		КонецЦикла;
		
		КэшПараметровСтатей.Вставить(СтатьяБюджетов, РеквизитыСтатьи);
		Если ЭтоАдресВременногоХранилища(АдресКэшаПараметровСтатей) Тогда
			ПоместитьВоВременноеХранилище(КэшПараметровСтатей, АдресКэшаПараметровСтатей);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыСтатьи;
	
КонецФункции

Функция ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, РежимПоиска = Ложь, ИмяПоказателя = Неопределено) Экспорт
	Перем СтатьяБюджетов, СтруктураРезультат;
	
	АдресКэшаПараметровСтатей = ОбъектИПараметрыРасчета.АдресКэшаПараметровСтатей;
	Объект = ОбъектИПараметрыРасчета.Объект;
	
	Если Расшифровка.Свойство("СтатьяБюджетов", СтатьяБюджетов)
		И ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		СтруктураРезультат = Новый Структура("СтатьяБюджетов", СтатьяБюджетов);
	ИначеЕсли Расшифровка.Свойство("РедактируемоеЗначение", СтатьяБюджетов)
		И ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		СтруктураРезультат = Новый Структура("РедактируемоеЗначение", СтатьяБюджетов);
	КонецЕсли;
	
	Если СтруктураРезультат = Неопределено Тогда
		Если Не РежимПоиска Тогда
			ВызватьИсключение НСтр("ru='Ошибка в структуре вида бюджета: не определен тип ячейки значения';uk='Помилка в структурі виду бюджету: не визначено тип комірки значення'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИспользуемыеПериоды = Новый Массив;
	Для Каждого КлючИЗначение из Расшифровка Цикл
		Если БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(КлючИЗначение.Ключ, "Период") Тогда
			ИспользуемыеПериоды.Добавить(Перечисления.Периодичность[СтрЗаменить(КлючИЗначение.Ключ, "Период", "")]);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуемыеПериоды.Количество() Тогда
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(ИспользуемыеПериоды);
		СтруктураРезультат.Вставить("ПериодПланирования", Расшифровка["Период" + ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность)]);
	Иначе
		СтруктураРезультат.Вставить("ПериодПланирования", Объект.НачалоПериода);
	КонецЕсли;
	
	ПоказательРасшифровки = Неопределено;
	Если Расшифровка.Свойство("ИмяПоказателя", ПоказательРасшифровки) Тогда
		ИмяПоказателя = ПоказательРасшифровки;
	Иначе
		ИмяПоказателя = "Сумма";
	КонецЕсли;
	
	Валюта = Неопределено;
	Если Расшифровка.Свойство("Валюта", Валюта) Тогда
		СтруктураРезультат.Вставить("Валюта", Валюта);
	КонецЕсли;
	
	Если СтруктураРезультат.Свойство("СтатьяБюджетов") Тогда
		
		РеквизитыСтатьи = РеквизитыСтатьиБюджетовИзКэша(СтатьяБюджетов, АдресКэшаПараметровСтатей);
		
		Для Сч = 1 по 6 Цикл
			
			ВидАналитики = РеквизитыСтатьи["ВидАналитики" + Сч];
			ТипВидаАналитики = РеквизитыСтатьи["ВидАналитики" + Сч + "ТипЗначения"];
			ЗначениеАналитики = Неопределено;
			Если ЗначениеЗаполнено(ВидАналитики) Тогда
				ЗначениеАналитики = Расшифровка.ЗначенияАналитик[ВидАналитики];
				Если ТипЗнч(ЗначениеАналитики) = Тип("Строка")
					И Лев(ЗначениеАналитики, 8) = "<прочие " Тогда
					ЗначениеАналитики = Неопределено;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТипВидаАналитики) Тогда
				ЗначениеАналитики = ТипВидаАналитики.ПривестиЗначение(ЗначениеАналитики);
			КонецЕсли;
			СтруктураРезультат.Вставить("Аналитика" + Сч, ЗначениеАналитики);
			
		КонецЦикла;
		
	Иначе
		
		Сч = 1;
		Для Каждого КлючИЗначение из Расшифровка.ЗначенияАналитик Цикл
			
			ВидАналитики = КлючИЗначение.Ключ;
			ЗначениеАналитики = Неопределено;
			Если ЗначениеЗаполнено(ВидАналитики) Тогда
				ЗначениеАналитики = Расшифровка.ЗначенияАналитик[ВидАналитики];
				Если ТипЗнч(ЗначениеАналитики) = Тип("Строка")
					И Лев(ЗначениеАналитики, 8) = "<прочие " Тогда
					ЗначениеАналитики = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураРезультат.Вставить("Аналитика" + Сч, ВидАналитики.ТипЗначения.ПривестиЗначение(ЗначениеАналитики));
			СтруктураРезультат.Вставить("ВидАналитики" + Сч, ВидАналитики);
			Сч = Сч + 1;
			
		КонецЦикла;
		
		Для СчетчикДополнения = Сч по 6 Цикл
			СтруктураРезультат.Вставить("ВидАналитики" + СчетчикДополнения, ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПустаяСсылка());
			СтруктураРезультат.Вставить("Аналитика" + СчетчикДополнения, Неопределено);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ТаблицаКурсов(ОбъектИПараметрыРасчета, СтруктураПараметров, Отказ, ТекстСообщения) Экспорт
	
	ТребоватьУказанияКурсовДляКаждогоПериода = ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода;
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	Объект = ОбъектИПараметрыРасчета.Объект;
	
	СтруктураЯчеек = СтруктураПараметров.СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураПараметров.СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	КопияСтруктурыЯчеекВалюта = СтруктураЯчеек.Скопировать(,"Валюта");
	КопияСтруктурыЯчеекВалюта.Свернуть("Валюта");
	МассивВалют = КопияСтруктурыЯчеекВалюта.ВыгрузитьКолонку("Валюта");
	
	МассивВалютДокумента = ОбъектИПараметрыРасчета.Объект.АналитикаСтатейБюджетов.Выгрузить(,"Валюта").ВыгрузитьКолонку("Валюта");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют, МассивВалютДокумента, Истина);
	
	МассивДополнительныхВалют = Новый Массив;
	МассивДополнительныхВалют.Добавить(Объект.Сценарий.Валюта);
	МассивДополнительныхВалют.Добавить(Константы.ВалютаУправленческогоУчета.Получить());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют, МассивДополнительныхВалют, Истина);
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВГраница = МассивВалют.ВГраница();
	Удалено = 0;
	
	Для Сч = 0 по ВГраница Цикл
		
		ТекущийИндекс = Сч - Удалено;
		Если Не ЗначениеЗаполнено(МассивВалют[ТекущийИндекс])
			ИЛИ МассивВалют[ТекущийИндекс] = ВалютаРеглУчета Тогда
			
			Удалено = Удалено + 1;
			МассивВалют.Удалить(ТекущийИндекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаКурсов = Справочники.Сценарии.ТаблицаКурсовСценария(Объект.Сценарий, МассивВалют, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
	Если Не ТребоватьУказанияКурсовДляКаждогоПериода Тогда
		
		НоваяСтрока = ТаблицаКурсов.Добавить();
		НоваяСтрока.Период = Объект.НачалоПериода;
		НоваяСтрока.Валюта = ВалютаРеглУчета;
		НоваяСтрока.Курс = 1;
		
		ТаблицаКурсов.Сортировать("Валюта, Период");
		ТаблицаКурсов.Индексы.Добавить("Валюта");
		ТаблицаКурсов.Индексы.Добавить("Валюта, Период");
		
		НеНайденныеВалюты = Новый Массив;
		Для Каждого Валюта из МассивВалют Цикл
			
			СтруктураПоиска = Новый Структура("Валюта, Период", Валюта, Объект.НачалоПериода);
			НайденныеСтроки = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтроки.Количество() Тогда
				НеНайденныеВалюты.Добавить(Валюта);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеНайденныеВалюты.Количество() Тогда
			
			ТекстСообщения = НСтр("ru='Не найдены прогнозные курсы на начало периода для валют: %1';uk='Не знайдено прогнозні курси на початок періоду для валют: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								СтрСоединить(НеНайденныеВалюты, ", "));
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Периодичности = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периодичности, СтруктураПараметров.СтруктураКолонокТаблицыДанных.Периодичности);
		Периодичности.Добавить(Объект.ВидБюджета.Периодичность);
		ПериодичностьПроверкиКурсов = Перечисления.Периодичность.МинимальнаяПериодичность(Периодичности);
		МассивПериодов = БюджетнаяОтчетностьВыводСервер.ПолучитьМассивПериодов(Объект.НачалоПериода, Объект.ОкончаниеПериода, ПериодичностьПроверкиКурсов);
		НеНайденныеКурсы = ТаблицаКурсов.СкопироватьКолонки("Период, Валюта");
		
		Для Каждого Период из МассивПериодов Цикл
			Для Каждого Валюта из МассивВалют Цикл
				СтруктураПоиска = Новый Структура("Валюта, Период", Валюта, Период);
				Если Не ТаблицаКурсов.НайтиСтроки(СтруктураПоиска).Количество() Тогда
					НоваяСтрока = НеНайденныеКурсы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НеНайденныеКурсы.Количество() Тогда
			
			НеНайденныеКурсы.Свернуть("Валюта");
			МассивВалют = НеНайденныеКурсы.ВыгрузитьКолонку("Валюта");
			ТекстСообщения = НСтр("ru='Не найдены прогнозные курсы для валют: %1; курсы должны быть указаны на %2';uk='Не знайдено прогнозні курси валют: %1; курси повинні бути вказані на %2'");
			
			Если ПериодичностьПроверкиКурсов = Перечисления.Периодичность.Декада Тогда
				СклонениеКаждый = НСтр("ru='каждую декаду';uk='кожну декаду'");
			ИначеЕсли ПериодичностьПроверкиКурсов = Перечисления.Периодичность.Неделя Тогда
				СклонениеКаждый = НСтр("ru='каждую неделю';uk='кожен тиждень'");
			Иначе
				СклонениеКаждый = НСтр("ru='каждый %1';uk='кожен %1'");
				СклонениеКаждый = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СклонениеКаждый, НРег(ПериодичностьПроверкиКурсов));
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
										СтрСоединить(МассивВалют, ", "),
										СклонениеКаждый);
			Отказ = Истина;
			
		Иначе
			
			Для Каждого Период из МассивПериодов цикл
				НоваяСтрока = ТаблицаКурсов.Добавить();
				НоваяСтрока.Период = Период;
				НоваяСтрока.Валюта = ВалютаРеглУчета;
				НоваяСтрока.Курс = 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаКурсов;
	
КонецФункции

Функция СтруктураОбъектаДляРасчетаЯчейки() Экспорт
	
	Возврат Новый Структура("Объект, ВалютаСценария, АдресКэшаПараметровСтатей, 
							|ТребоватьУказанияКурсовДляКаждогоПериода, 
							|АдресТаблицыКурсов, ПараметрыВыводаВидаБюджета");
	
КонецФункции

Функция ПолучитьПредставленияАналитикПрочее(СтрокиОснования)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЭлементыФинансовыхОтчетов.Ссылка КАК Ссылка,
		|	ЭлементыФинансовыхОтчетов.НаименованиеДляПечати КАК НаименованиеДляПечати,
		|	ЭлементыФинансовыхОтчетов.РеквизитыВидаЭлемента.(
		|		Реквизит,
		|		Значение
		|	) КАК РеквизитыВидаЭлемента
		|ИЗ
		|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		|ГДЕ
		|	ЭлементыФинансовыхОтчетов.Ссылка В(&СтрокиОснования)
		|	И ЭлементыФинансовыхОтчетов.ЗначениеАналитики = НЕОПРЕДЕЛЕНО");
	Запрос.УстановитьПараметр("СтрокиОснования", СтрокиОснования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ФиксированнаяАналитика = Ложь;
		ЭтоАналитикаПрочее = Ложь;
		ВидАналитики = Неопределено;
		
		ВыборкаРеквизитов = Выборка.РеквизитыВидаЭлемента.Выбрать();
		Пока ВыборкаРеквизитов.Следующий() Цикл
			
			Если ВыборкаРеквизитов.Реквизит = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ТипИзмерения 
				И ВыборкаРеквизитов.Значение = Перечисления.ТипыИзмеренийФинансовогоОтчета.ФиксированнаяАналитика Тогда
				ФиксированнаяАналитика = Истина;
			КонецЕсли;
			
			Если ВыборкаРеквизитов.Реквизит = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ЭтоАналитикаПрочее Тогда
				ЭтоАналитикаПрочее = ВыборкаРеквизитов.Значение;
			КонецЕсли;
			
			Если ВыборкаРеквизитов.Реквизит = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ВидАналитики Тогда
				ВидАналитики = ВыборкаРеквизитов.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВидАналитики) И ФиксированнаяАналитика И ЭтоАналитикаПрочее Тогда
			ЭлементРезультата = Результат.Получить(ВидАналитики);
			Если ЭлементРезультата = Неопределено Тогда
				Результат.Вставить(ВидАналитики, Новый Структура("МассивСтрокОснования, НаименованиеДляПечати",
						Новый Массив, Выборка.НаименованиеДляПечати));
				ЭлементРезультата = Результат.Получить(ВидАналитики);
			Конецесли;
			ЭлементРезультата.МассивСтрокОснования.Добавить(Выборка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСКДПечатиДокументаБезГруппировок(ИДТаблицы, КолонкиПоИзмерениям, ГлубинаДерева, 
		ПараметрыВыводаВидаБюджета, ПредставленияАналитикПрочее = Неопределено, ДляВыводаНаПечать=Ложь) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	СКД = ФинОтчеты.НоваяСхема();
	Набор = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДанныеЯчеек");
	Набор.ИмяОбъекта = "ДанныеЯчеек";
	
	ПараметрыЭкземпляраБюджета = ПараметрыВыводаВидаБюджета;
	КолонкиТаблиц = ПараметрыЭкземпляраБюджета.КолонкиТаблиц;
	ДеревоКолонок = КолонкиТаблиц[ИДТаблицы];
	
	СтруктураОписанияКолонок = ПараметрыЭкземпляраБюджета.СтруктураКолонокТаблицыДанных;
	
	ФинОтчеты.НовоеПолеНабора(Набор, "СтатьяБюджетов",,НСтр("ru='Статья бюджетов';uk='Стаття бюджетів'"));
	ФинОтчеты.НовоеПолеНабора(Набор, "РедактируемоеЗначение",,НСтр("ru='Редактируемое значение';uk='Редаговане значення'"));
	ФинОтчеты.НовоеПолеНабора(Набор, "ОсновнойЭлемент");
	ФинОтчеты.НовоеПолеНабора(Набор, "ВидЭлемента");
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "МинимумНомерПоПорядку");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
	
	ТекстВыражения = "МИНИМУМ(ВЫБОР КОГДА ВидЭлемента = Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов)
						|ТОГДА МинимумНомерПоПорядку ИНАЧЕ 99999999999 КОНЕЦ)";
	
	ФинОтчеты.НовыйРесурс(СКД, "МинимумНомерПоПорядку", , ТекстВыражения);
	
	Для Каждого Измерение Из СтруктураОписанияКолонок.Измерения Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Измерение,, Измерение);
	КонецЦикла;
		
	Для Каждого Измерение Из СтруктураОписанияКолонок.ВидыАналитик Цикл
		ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(Измерение);
		ПолеНабора = ФинОтчеты.НовоеПолеНабора(Набор, ИмяПоля,, Строка(Измерение));
		Если ПредставленияАналитикПрочее <> Неопределено Тогда
			Представление = ПредставленияАналитикПрочее.Получить(Измерение);
			Если Представление <> Неопределено Тогда
				
				ИмяПараметра = "МассивСтрокОснования_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
				
				// Параметр для сравнения.
				Параметр = СКД.Параметры.Добавить();
				Параметр.Имя		= ИмяПараметра;
				Параметр.Значение	= Представление.МассивСтрокОснования;
				Параметр.ОграничениеИспользования = Истина;
				
				// Выражение представления.
				// Представление в отчете для аналитики <прочее>.
				ПолеНабора.ВыражениеПредставления = 
					"ВЫБОР
					|	КОГДА Строка В (&"	+ ИмяПараметра + ")
					|		ТОГДА """		+ Представление.НаименованиеДляПечати + """
					|		ИНАЧЕ "			+ ИмяПоля + "
					|	КОНЕЦ ";
					
					
				// Выражение упорядочивания.
				// Аналитика <прочее> должна идти после аналитики с заполненными значениями.
				ПолеУпорядочивания = ПолеНабора.ВыраженияУпорядочивания.Добавить();
				ПолеУпорядочивания.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				ПолеУпорядочивания.Выражение = 
					"ВЫБОР
					|	КОГДА Строка В (&"	+ ИмяПараметра + ")
					|		ТОГДА 1
					|		ИНАЧЕ 0
					|	КОНЕЦ ";
				
				ПолеУпорядочивания = ПолеНабора.ВыраженияУпорядочивания.Добавить();
				ПолеУпорядочивания.ТипУпорядочивания	= НаправлениеСортировкиКомпоновкиДанных.Возр;
				ПолеУпорядочивания.Выражение			= ИмяПоля;
				ПолеУпорядочивания.Автоупорядочивание	= Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Измерение Из СтруктураОписанияКолонок.Периодичности Цикл
		ИмяИзмерение = ОбщегоНазначения.ИмяЗначенияПеречисления(Измерение);
		ФинОтчеты.НовоеПолеНабора(Набор, "Период" + ИмяИзмерение,, "Период (" + ИмяИзмерение + ")");
	КонецЦикла;
	
	ФинОтчеты.НовоеПолеНабора(Набор, "Сумма");
	ФинОтчеты.НовоеПолеНабора(Набор, "СуммаВал");
	ФинОтчеты.НовоеПолеНабора(Набор, "Количество");
	ФинОтчеты.НовоеПолеНабора(Набор, "Значение");
	
	ГруппировкаПечатнойФормы = Неопределено;
	Для Каждого Измерение из КолонкиПоИзмерениям.Измерения Цикл
		Если ГруппировкаПечатнойФормы = Неопределено Тогда
			ГруппировкаПечатнойФормы = ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, Измерение);
		Иначе
			ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПечатнойФормы, Измерение);
		КонецЕсли;
		Если ДляВыводаНаПечать <> Неопределено Тогда
			ФинОтчеты.НовыйПорядок(СКД.НастройкиПоУмолчанию, Измерение);
		КонецЕсли;
	КонецЦикла;
	
	Если ГруппировкаПечатнойФормы = Неопределено Тогда
		ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура);
	ИначеЕсли ДляВыводаНаПечать Тогда
		ГруппировкаПечатнойФормы = ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура);
		ГруппировкаПечатнойФормы.Выбор.Элементы.Очистить();
	КонецЕсли;
	
	Если ДляВыводаНаПечать И Не ПустаяСтрока(ПараметрыВыводаВидаБюджета.ЗаголовокОтветственный) Тогда
		ФинОтчеты.УстановитьПараметр(СКД.НастройкиПоУмолчанию.Структура[0].ПараметрыВывода,
			"Заголовок", ПараметрыВыводаВидаБюджета.ЗаголовокОтветственный);
	КонецЕсли;	
	
	ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "ОсновнойЭлемент", Истина);
	Отбор = ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "Строка", КолонкиПоИзмерениям.СтрокиОснования);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	ГлубинаДерева = СоздатьПоляВыбораПоДеревуКолонок(СКД, ДеревоКолонок, КолонкиПоИзмерениям, СКД.НастройкиПоУмолчанию.Выбор.Элементы);
	
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВыводитьПараметры", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	ФинОтчеты.НовыйПорядок(СКД.НастройкиПоУмолчанию, "МинимумНомерПоПорядку");
	
	Если ДляВыводаНаПечать И Не ПустаяСтрока(ПараметрыВыводаВидаБюджета.ЗаголовокОтчета) Тогда
		ФинОтчеты.УстановитьПараметр(СКД.НастройкиПоУмолчанию.ПараметрыВывода,
			"Заголовок", ПараметрыВыводаВидаБюджета.ЗаголовокОтчета);
	КонецЕсли;	
	
	Возврат СКД;
	
КонецФункции

Функция ПолучитьЗапросДанныхВыводаОтчета(МассивОбъектов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЭкземплярБюджета.Ссылка КАК Ссылка,
		|	ЭкземплярБюджета.Номер КАК НомерДокумента,
		|	ЭкземплярБюджета.Дата КАК ДатаДокумента,
		|	ЭкземплярБюджета.МодельБюджетирования КАК МодельБюджетирования,
		|	ЭкземплярБюджета.МодельБюджетирования.БюджетыПоОрганизациям КАК БюджетыПоОрганизациям,
		|	ЭкземплярБюджета.МодельБюджетирования.БюджетыПоПодразделениям КАК БюджетыПоПодразделениям,
		|	ЭкземплярБюджета.Организация КАК Организация,
		|	ЭкземплярБюджета.Подразделение КАК Подразделение,
		|	ЭкземплярБюджета.Ответственный.Представление КАК Ответственный,
		|	ЭкземплярБюджета.Сценарий КАК Сценарий,
		|	ЭкземплярБюджета.Сценарий.Валюта КАК ВалютаСценария,
		|	ЭкземплярБюджета.ВидБюджета КАК ВидБюджета,
		|	ЭкземплярБюджета.ВидБюджета.Представление КАК ВидБюджетаПредставление,
		|	ЭкземплярБюджета.НачалоПериода КАК НачалоПериода,
		|	ЭкземплярБюджета.ОкончаниеПериода КАК ОкончаниеПериода,
		|	ЭкземплярБюджета.ГраницаФактДанных КАК ГраницаФактДанных,
		|	ЭкземплярБюджета.Аналитика1 КАК Аналитика1,
		|	ЭкземплярБюджета.Аналитика2 КАК Аналитика2,
		|	ЭкземплярБюджета.Аналитика3 КАК Аналитика3,
		|	ЭкземплярБюджета.Аналитика4 КАК Аналитика4,
		|	ЭкземплярБюджета.Аналитика5 КАК Аналитика5,
		|	ЭкземплярБюджета.Аналитика6 КАК Аналитика6,
		|	ЭкземплярБюджета.ВидБюджета.АналитикиШапки КАК АналитикиШапки,
		|	ЭкземплярБюджета.АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
		|	ЭкземплярБюджета.ОборотыПоСтатьямБюджетов КАК ОборотыПоСтатьямБюджетов,
		|	ЭкземплярБюджета.АналитикаЗначений КАК АналитикаЗначений
		|ИЗ
		|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
		|ГДЕ
		|	ЭкземплярБюджета.Ссылка В(&МассивОбъектов)");
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Возврат Запрос;
	
КонецФункции

Функция СоздатьПоляВыбораПоДеревуКолонок(СКД, ДеревоКолонок, КолонкиПоИзмерениям, ЭлементыДобавления, 
											ЗначенияГруппировок = Неопределено, ТекущаяГлубина = 1, ДляВыводаНаПечать=Ложь)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Если ЗначенияГруппировок = Неопределено Тогда
		ЗначенияГруппировок = Новый Структура;
	КонецЕсли;
	
	ГлубинаУровня = ТекущаяГлубина;
	Для Каждого СтрокаДерева Из ДеревоКолонок.Строки Цикл
		
		ВставленныйКлюч = "";
		Если ЗначениеЗаполнено(СтрокаДерева.ФиксированноеЗначение) Тогда
			ЗначенияГруппировок.Вставить(СтрокаДерева.ИмяИзмерения, СтрокаДерева.ФиксированноеЗначение);
			ВставленныйКлюч = СтрокаДерева.ИмяИзмерения;
		КонецЕсли;
		
		ЗначениеКолонки = СтрокаДерева.ЭлементОтчета;
		Если СтрНайти(СтрокаДерева.ИмяИзмерения, "#Показатель_") Тогда
			ИмяПоказателя = СтрЗаменить(СтрокаДерева.ИмяИзмерения, "#Показатель_", "");
			ЗначенияГруппировок.Вставить("ИмяПоказателя", ИмяПоказателя);
			ВставленныйКлюч = ИмяПоказателя;
			Если ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
				ЗначениеКолонки = СтрокаДерева.Родитель.ЭлементОтчета;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗначениеКолонки) Тогда
			ЗначениеКолонки = Справочники.ЭлементыФинансовыхОтчетов.ПустаяСсылка();
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() Тогда
			
			Элемент = ЭлементыДобавления.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Элемент.Заголовок = СтрокаДерева.НаименованиеДляПечати;
			Элемент.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			ГлубинаУровня = Макс(ГлубинаУровня, СоздатьПоляВыбораПоДеревуКолонок(СКД, СтрокаДерева, КолонкиПоИзмерениям, 
																Элемент.Элементы, ЗначенияГруппировок, ТекущаяГлубина + 1));
			
		Иначе
			
			СтатьиБюджетов = Неопределено;
			Если КолонкиПоИзмерениям.Свойство("СтатьиБюджетов", СтатьиБюджетов) Тогда
				// Параметры ячеек в сложной таблице.
				СтруктураОписания = СтатьиБюджетов[СтрокаДерева.ЭлементОтчета];
				Если СтруктураОписания <> Неопределено Тогда
					// На уровне может не быть статьи.
					ИмяПоказателя = СтруктураОписания.ИмяПоказателя;
					ЗначенияГруппировок.Вставить("ИмяПоказателя", ИмяПоказателя);
				КонецЕсли;
			КонецЕсли;
			
			ПолеРесурса = "";
			ИмяПоказателя = "Сумма";
			
			ИмяПараметра = "Колонка_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
			ПолеРесурса = "Колонка = &" + ИмяПараметра;
			
			Параметр = СКД.Параметры.Найти(ИмяПараметра);
			Если Параметр = Неопределено Тогда
				Параметр = СКД.Параметры.Добавить();
				Параметр.Имя = ИмяПараметра;
				Параметр.Значение = ЗначениеКолонки;
				Параметр.ОграничениеИспользования = Истина;
			КонецЕсли;
			
			Для Каждого КлючИЗначение из ЗначенияГруппировок Цикл
				
				Если КлючИЗначение.Ключ = "ИмяПоказателя" Тогда
					ИмяПоказателя = КлючИЗначение.Значение;
					Продолжить;
				КонецЕсли;
				
				ИмяПараметра = КлючИЗначение.Ключ + "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
				ПолеРесурса = ПолеРесурса + " И " + КлючИЗначение.Ключ + " = &" + ИмяПараметра;
				
				Параметр = СКД.Параметры.Найти(ИмяПараметра);
				Если Параметр = Неопределено Тогда
					Параметр = СКД.Параметры.Добавить();
					Параметр.Имя = ИмяПараметра;
					Параметр.Значение = КлючИЗначение.Значение;
					Параметр.ОграничениеИспользования = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИмяПоказателя = "Сумма"
				И СКД.НаборыДанных.ДанныеЯчеек.Поля.Найти("Валюта") <> Неопределено Тогда
				ИмяПоказателя = "ВЫБОР КОГДА ЗначениеЗаполнено(Валюта) ТОГДА СуммаВал ИНАЧЕ Сумма КОНЕЦ";
			КонецЕсли;
			ПолеРесурса = "СУММА(ВЫБОР КОГДА " + ПолеРесурса + " ТОГДА " + ИмяПоказателя + " КОНЕЦ)";
			
			ИмяПоля = "Ресурс_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, 
								ИмяПоля,
								,,ПолеРесурса);
			
			Элемент = ЭлементыДобавления.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Элемент.Заголовок = СтрокаДерева.НаименованиеДляПечати;
			Элемент.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ВставленныйКлюч) Тогда
			ЗначенияГруппировок.Удалить(ВставленныйКлюч);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГлубинаУровня;
	
КонецФункции

Функция СоставКолонокКорневогоЭлемента(ТекущаяСтрока, СписокПараметров, КолонкиПоИзмерениям) Экспорт
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	Иначе
		ПодчиненныеСтроки = ТекущаяСтрока.Строки;
	КонецЕсли;
		
	Если ПодчиненныеСтроки.Количество() = 1 Тогда
		
		КолонкиПоИзмерениям = СписокПараметров[ПодчиненныеСтроки[0].Строка];
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(КолонкиПоИзмерениям);
		
	Иначе
		
		МассивЭлементов = Новый Массив;
		Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
			КолонкиПоИзмерениямТекущейСтроки = СписокПараметров[ПодчиненнаяСтрока.Строка];
			Если КолонкиПоИзмерениямТекущейСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КолонкиПоИзмерениям = КолонкиПоИзмерениямТекущейСтроки;
			МассивЭлементов.Добавить(КолонкиПоИзмерениям);
		КонецЦикла;
		
		Для Сч = 1 По МассивЭлементов.ВГраница() Цикл
			Если МассивЭлементов[Сч] = Неопределено
				ИЛИ МассивЭлементов[Сч-1] = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			Значение1 = СтрСоединить(МассивЭлементов[Сч].Измерения, ",");
			Значение2 = СтрСоединить(МассивЭлементов[Сч-1].Измерения, ",");
			Если Значение1 <> Значение2 Тогда
				Возврат Ложь;
			КонецЕсли;
			Если МассивЭлементов[Сч].Свойство("СтатьиБюджетов") Тогда
				Для Каждого КлючИЗначение из МассивЭлементов[Сч].СтатьиБюджетов Цикл
					Если МассивЭлементов[Сч-1].СтатьиБюджетов[КлючИЗначение.Ключ].СтатьяБюджетов <> КлючИЗначение.Значение.СтатьяБюджетов
						ИЛИ МассивЭлементов[Сч-1].СтатьиБюджетов[КлючИЗначение.Ключ].ИмяПоказателя <> КлючИЗначение.Значение.ИмяПоказателя Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если КолонкиПоИзмерениям = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтатьиБюджетов = Неопределено;
	КолонкиПоИзмерениям.Свойство("СтатьиБюджетов", СтатьиБюджетов);
	
	КолонкиПоИзмерениям = Новый Структура("Измерения, НастройкиКолонок, НастройкиВвода, СтрокиОснования", 
											КолонкиПоИзмерениям.Измерения, 
											КолонкиПоИзмерениям.НастройкиКолонок, 
											Новый Структура,
											Новый Массив);
											
	Если СтатьиБюджетов <> Неопределено Тогда
		КолонкиПоИзмерениям.Вставить("СтатьиБюджетов", СтатьиБюджетов);
	КонецЕсли;
	
	Для Каждого ЭлементНастройки из КолонкиПоИзмерениям.Измерения Цикл
		
		РезультирующийСписок = Новый СписокЗначений;
		Для Каждого ЭлементМассива из МассивЭлементов Цикл
			Значения = ЭлементМассива.НастройкиВвода[ЭлементНастройки];
			Если Значения = Неопределено Тогда
				РезультирующийСписок = Неопределено;
				Прервать;
			Иначе
				Для Каждого ЭлементСписка из Значения Цикл
					Если РезультирующийСписок.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
						РезультирующийСписок.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		КолонкиПоИзмерениям.НастройкиВвода.Вставить(ЭлементНастройки, РезультирующийСписок);
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива из МассивЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КолонкиПоИзмерениям.СтрокиОснования, ЭлементМассива.СтрокиОснования, Истина);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьТаблицуКурсов(ОбъектИПараметрыРасчета, ПредыдущаяТаблицаКурсов)
	Перем Отказ, ТекстСообщения;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета);
	Если СтруктураПараметров = Неопределено Тогда
		Возврат ПредыдущаяТаблицаКурсов;
	КонецЕсли;
	
	ТаблицаКурсов = ТаблицаКурсов(ОбъектИПараметрыРасчета, СтруктураПараметров, Отказ, ТекстСообщения);
	
	Возврат ТаблицаКурсов;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область Отчеты

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры
	
#КонецОбласти

#КонецЕсли
