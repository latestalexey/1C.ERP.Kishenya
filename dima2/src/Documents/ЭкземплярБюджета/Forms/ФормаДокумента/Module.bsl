
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ЯчейкаПослеВвода;

&НаКлиенте
Перем ПринудительноеЗавершение;

&НаКлиенте
Перем ОткрытДиалогВопросаДубли;

&НаКлиенте
Перем ИзмененияВСпискеОтраженыВДокументе;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗапуститьПроверкуВыполненияОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // возврат при получении формы для анализа
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	АдресКэшаПараметровСтатей = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	ПодготовитьПараметрыВыводаВидаБюджета();
	
	УстановитьДоступностьМоделиБюджетирования();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьПараметрыСценария();
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	ФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(Объект.ВидБюджета, Элементы, Объект.ГраницаФактДанных);
	УстановитьПоляШапкиДокумента();
	
	СформироватьОтчетСервер();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ПредыдущаяСтрокаДереваЭлементов = -1;
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПараметрыОпций = Новый Структура("МодельБюджетирования", Объект.МодельБюджетирования);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
	ИспользоватьУтверждениеБюджетов = ПолучитьФункциональнуюОпциюФормы("ИспользоватьУтверждениеБюджетов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ИсточникВыбора)
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ЭкземплярБюджетаПрисоединенныеФайлы") Тогда
		ЗагрузитьИзExcelНаКлиенте(Результат);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ЭкземплярБюджета.Форма.ФормаСопоставленияЗагружаемыхДанныхИзExcel" Тогда
		ЗагрузитьБюджетНаСервере(Результат);
		ОбновитьБюджет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьДанныеПередЗаписью(ТекущийОбъект);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоматическийПересчет",
		"Пометка",
		АвтоматическоеОбновлениеБюджета);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЭкземплярБюджета", , Объект.Ссылка);
	
	ЭлементыДерева = ДеревоЭлементовБюджета.ПолучитьЭлементы();
	Для Каждого СтрокаДерева из ЭлементыДерева Цикл
		Элементы.ДеревоЭлементовБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидБюджетаПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЭкземплярБюджета.ФормаДокумента.Элемент.ВидБюджета.ПриИзменении");
	
	ПриИзмененииВидаБюджетаСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельБюджетированияПриИзменении(Элемент)
	
	ПриИзмененииМоделиБюджетированияСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельБюджетированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не МодельБюджетированияДействует(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,НСтр("ru='Модель бюджетирования не действует.
                                    |Измените статус у модели для выбора в документе'
                                    |;uk='Модель бюджетування не діє.
                                    |Змініть статус у моделі для вибору в документі'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ПриИзмененииСценарияСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Объект.ОкончаниеПериода = ?(Объект.НачалоПериода > Объект.ОкончаниеПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ПриИзмененииПериодаСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	Объект.НачалоПериода = ?(Объект.НачалоПериода > Объект.ОкончаниеПериода, Объект.ОкончаниеПериода, Объект.НачалоПериода);
	ПриИзмененииПериодаСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	УстановитьНадписьОбновленияИтогов(Истина);
	БюджетПриИзмененииСервер(Область.Имя);
	ЯчейкаПослеВвода = Истина;
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		ЗапуститьПроверкуРасчетаИзменений();
	Иначе
		УстановитьНадписьОбновленияИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Если Не Расшифровка.Свойство("ИндексСтрокиДанных") И Расшифровка.Свойство("Значение") Тогда
			
			Если Расшифровка.Значение <> Неопределено Тогда
				ПоказатьЗначение(Неопределено, Расшифровка.Значение);
			КонецЕсли;
			
		Иначе
			
			Если Не Объект.ПометкаУдаления и ПроверитьЗаполнение() Тогда
				Если Модифицированность или Объект.Ссылка.Пустая() Тогда
					ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияДокументаПередРасшифровкой", ЭтаФорма);
					ТекстВопроса = НСтр("ru='Расшифровка возможна только в проведенном документе. Провести документ?';uk='Розшифровка можлива тільки у проведеному документі. Провести документ?'");
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Иначе
					ПослеСохраненияДокументаПередРасшифровкой(КодВозвратаДиалога.Да, Неопределено);
				КонецЕсли;
			Иначе
				ТекстПредупреждения = НСтр("ru='Расшифровка возможна только в проведенном документе';uk='Розшифровка можлива тільки у проведеному документі'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Бюджет.ТекущаяОбласть;
	
	Если ЯчейкаПослеВвода = Истина Тогда
		
		Если ТекущаяОбласть.Лево = 1 Тогда
			// Это переход на новую строку - установим в качестве текущей области первую ячейку доступную для ввода
			
			ЕстьВводимыеЯчейкиВСтроке = Ложь;
			
			ВерхПоиска = ТекущаяОбласть.Верх;
			Пока Не ЕстьВводимыеЯчейкиВСтроке Цикл
				
				ПравоПоиска = ТекущаяОбласть.Право + 1;
				ЕстьКолонкиДляВвода = Ложь;
				Пока ПравоПоиска <= Бюджет.ШиринаТаблицы Цикл
					
					ОбластьСправа = Бюджет.Область(ВерхПоиска, ПравоПоиска);
					Если ОбластьСправа.СодержитЗначение Тогда
						ЕстьВводимыеЯчейкиВСтроке = Истина;
						Элементы.Бюджет.ТекущаяОбласть = ОбластьСправа;
						Прервать;
					КонецЕсли;
					ПравоПоиска = ПравоПоиска + 1;
					
				КонецЦикла;
				
				Если ЕстьВводимыеЯчейкиВСтроке Тогда
					Прервать;
				КонецЕсли;
				
				ВерхПоиска = ВерхПоиска + 1;
				Если ВерхПоиска > Бюджет.ВысотаТаблицы Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Не ТекущаяОбласть.СодержитЗначение = Истина Тогда
			//Переходы в рамках раздела
			
			ОбластьСнизуСлева = Бюджет.Область(ТекущаяОбласть.Верх + 1, ТекущаяОбласть.Лево - 1);
			Если ОбластьСнизуСлева.СодержитЗначение Тогда
				//Переход на новую строку в текущем разделе
				
				ЛевоПоиска = ОбластьСнизуСлева.Лево;
				Пока ЛевоПоиска >= 2 Цикл
					
					Область = Бюджет.Область(ОбластьСнизуСлева.Верх, ЛевоПоиска);
					Если Не Область.СодержитЗначение Тогда
						Прервать;
					КонецЕсли;
					ОбластьСлеваСнизу = Область;
					ЛевоПоиска = ЛевоПоиска - 1;
					
				КонецЦикла;
				Элементы.Бюджет.ТекущаяОбласть = ОбластьСлеваСнизу;
				
			Иначе
				
				//Переход в следующий раздел через вертикальный разделитель
				ЛевоПоиска = ТекущаяОбласть.Лево + 1;
				ЕстьКолонкиДляВвода = Ложь;
				Пока ЛевоПоиска <= Бюджет.ШиринаТаблицы Цикл
					
					ОбластьСправа = Бюджет.Область(ТекущаяОбласть.Верх, ЛевоПоиска);
					Если ОбластьСправа.СодержитЗначение Тогда
						ЕстьКолонкиДляВвода = Истина;
						Прервать;
					КонецЕсли;
					ЛевоПоиска = ЛевоПоиска + 1;
					
				КонецЦикла;
				Если ЕстьКолонкиДляВвода Тогда
					
					//найдем первую доступную для ввода ячейку
					ОбластьВвода = ОбластьСправа;
					ВерхПоиска = ОбластьСправа.Верх;
					Пока Истина Цикл
						ОбластьСверху = Бюджет.Область(ВерхПоиска, ЛевоПоиска);
						Если Не ОбластьСверху.СодержитЗначение Тогда
							Прервать;
						Иначе
							ОбластьВвода = ОбластьСверху;
						КонецЕсли;
						ВерхПоиска = ВерхПоиска - 1;
					КонецЦикла;
					Элементы.Бюджет.ТекущаяОбласть = ОбластьВвода;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	ЯчейкаПослеВвода = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБюджетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем ИспользоватьДляВводаПлана;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЭкземплярБюджета.ФормаДокумента.Элемент.ВидБюджета.ОбработкаВыбора");
	
	Если Не ВидБюджетаОбработкаВыбораНаСервере(ВыбранноеЗначение, ИспользоватьДляВводаПлана) Тогда
		
		ВыбранноеЗначение = Неопределено;
		СтандартнаяОбработка = Ложь;
		ТекстПредупреждения = НСтр("ru='Вид бюджета не доступен для выбора в экземпляре бюджета:
                                         |%1'
                                         |;uk='Вид бюджету не доступний для вибору в примірнику бюджету:
                                         |%1'");
		Если ИспользоватьДляВводаПлана Тогда
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, 
																НСтр("ru='Обнаружены ошибки';uk='Виявлено помилки'"));
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, 
																НСтр("ru='Установите флаг ""Использовать для ввода плана""';uk='Встановіть прапорець ""Використовувати для введення плану""'"));
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ГраницаФактДанныхНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ВидБюджета, НачалоПериода, ГраницаФактДанных", Объект.ВидБюджета, Объект.НачалоПериода, Объект.ГраницаФактДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьГраницуФакта", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.НастройкаГраницыФакта", ПараметрыФормы,,,,,
						ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДеревоЭлементов

&НаКлиенте
Процедура ДеревоЭлементовБюджетаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьПараметрыСпискаВвода", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСписокРедактированияБюджета

&НаКлиенте
Процедура СписокРедактированияБюджетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИзмененияВСпискеОтраженыВДокументе = Ложь;
	
	Если НоваяСтрока Тогда
		ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
		ФиксированныеЗначения = ПараметрыРедактирования.ФиксированныеЗначения;
		Для Каждого КлючИЗначение из ФиксированныеЗначения Цикл
			Элемент.ТекущиеДанные[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		Для Каждого ИмяКолонки из ПараметрыРедактирования.ИзменяемыеИзмерения Цикл
			Если СтрНайти(ИмяКолонки, "Период") Тогда
				
				Если ЗначениеЗаполнено(Элемент.ТекущиеДанные[ИмяКолонки]) Тогда
					Продолжить;
				КонецЕсли;
				
				Периодичность = СтрЗаменить(ИмяКолонки, "Период", "");
				Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность." + Периодичность);
				Элемент.ТекущиеДанные[ИмяКолонки] = БюджетированиеКлиентСервер.ДатаНачалаПериода(Объект.НачалоПериода, Периодичность);
				
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИзменяемыеКолонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
		Расшифровка = Новый Структура();
		Для Каждого Измерение из ИзменяемыеКолонки Цикл
			Расшифровка.Вставить(Измерение, Элемент.ТекущиеДанные[Измерение]);
		КонецЦикла;
		ПоместитьВоВременноеХранилище(Расшифровка, АдресРедактируемыхЗначенийСтрокиСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкиПередОкончаниемРедактирования(Элемент, Отказ, СтрокаБудетУдаленаАвтоматически)
	Перем РезультатПроверки;
	
	ЕстьОшибки = ЕстьОшибкиВСтрокеРедактированияБюджета(Элемент.ТекущаяСтрока, РезультатПроверки);
	Если ЕстьОшибки Тогда
		
		Если Не СтрокаБудетУдаленаАвтоматически Тогда
			
			Отказ = Истина;
			
			Если РезультатПроверки.Результат = "После ввода значения будет дубль" Тогда
				
				ДопПараметры = Новый Структура("Идентификатор", Элемент.ТекущаяСтрока);
				ОповещениеОРешении = Новый ОписаниеОповещения("ВыборУвеличенияСтроки", ЭтаФорма, ДопПараметры);
				
				ПоказатьВопрос(ОповещениеОРешении, НСтр("ru='Строка с такими полями уже существует. Объединить строки?
                                                        |Да - объединить строки
                                                        |Нет - удалить строку
                                                        |Отмена - продолжить редактирование'
                                                        |;uk='Рядок з такими полями вже існує. Об''єднати рядки?
                                                        |Так - об''єднати рядки
                                                        |Ні - видалити рядок
                                                        |Скасування - продовжити редагування'"), 
														РежимДиалогаВопрос.ДаНетОтмена);
				
				ОткрытДиалогВопросаДубли = Истина;
				
			ИначеЕсли РезультатПроверки.Результат = "Есть недоступные для ввода элемента" Тогда
				
				КолонкаСОшибкой 	= РезультатПроверки.КолонкаСОшибкой;
				
				ШаблонСообщения 	= НСтр("ru='Значение не может быть выбрано в колонке ""%1""';uk='Значення не може бути вибрано в колонці ""%1""'");
				ЗаголовокКолонки 	= Элементы[КолонкаСОшибкой].Заголовок;
				ТекстСообщения 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЗаголовокКолонки);
				РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
				ИндексСтроки 		= СписокРедактированияБюджета.Индекс(РедактируемаяСтрока);
				Поле 				= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СписокРедактированияБюджета", ИндексСтроки + 1, КолонкаСОшибкой);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
				
			ИначеЕсли РезультатПроверки.Результат = "Отличается валюта аналитики" Тогда
				
				ШаблонСообщения 	= НСтр("ru='По строке валюта ввода ""%1"" определена аналитикой. Ввод в другой валюте не допускается';uk='По рядку валюта введення ""%1"" визначена аналітикою. Введення в іншій валюті не допускається'");
				ТекстСообщения 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатПроверки.ДопустимаяВалюта);
				РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
				ИндексСтроки 		= СписокРедактированияБюджета.Индекс(РедактируемаяСтрока);
				Поле 				= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СписокРедактированияБюджета", ИндексСтроки + 1, КолонкаСОшибкой);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура СписокРедактированияБюджетаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ПринудительноеЗавершение = Истина Тогда
		ПринудительноеЗавершение = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ОткрытДиалогВопросаДубли = Истина Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтрокаБудетУдаленаАвтоматически = НоваяСтрока И ОтменаРедактирования;
	
	//что бы не было конфликтов пустых ссылок - приведем незаполненные значения к неопределено
	МассивРедактируемых = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
	Для Каждого Измерение из МассивРедактируемых Цикл
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные[Измерение]) Тогда
			Элемент.ТекущиеДанные[Измерение] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	//Если есть дубли - всегда алгоритм объединения строк
	//если нельзя редактировать текущую строку из отличия в валютах - выдаем предупреждение
	//если выбран неверный элемент - выдаем предупреждение
	РезультатПроверки = ВыполнитьПроверкиПередОкончаниемРедактирования(Элемент, Отказ, СтрокаБудетУдаленаАвтоматически);
	
	//На случай, если отмена от заполнения корректно заполненной строки
	Если РезультатПроверки.Результат <> "После ввода значения будет дубль" Тогда
		
		Если СтрокаБудетУдаленаАвтоматически Тогда
			
			УдалитьСвязанныеСтрокиБюджетаНаСервере(Элемент.ТекущаяСтрока);
			
			//Если изменили значения колонок - очистим предыдущие данные
		ИначеЕсли Не Отказ И Не НоваяСтрока Тогда
			
			ОчиститьДанныеИзменыемыхКолонок(Элемент.ТекущаяСтрока);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРедактированияБюджетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СтрокаБудетУдаленаАвтоматически = НоваяСтрока И ОтменаРедактирования;
	Если Не СтрокаБудетУдаленаАвтоматически Тогда
		Если Не ИзмененияВСпискеОтраженыВДокументе = Истина Тогда
			ОтразитьИзмененияВДанных(Элементы.СписокРедактированияБюджета.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокРедактированияБюджетаОсновнаяКолонкаПриИзменении(Элемент)
	Перем РезультатПроверки;
	
	ИзмененияВСпискеОтраженыВДокументе = Ложь;
	Модифицированность = Истина;
	
	//Проверка дублей
	ИмяКолонки = Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя;
	
	Если СтрНайти(РедактируемыеКолонкиСписка, ИмяКолонки) Тогда
		
		ТекущиеДанные = Элементы.СписокРедактированияБюджета.ТекущиеДанные;
		
		Если СтрНайти(ИмяКолонки, "Период") Тогда
			
			ТекущиеДанные = Элементы.СписокРедактированияБюджета.ТекущиеДанные;
			
			Периодичность = СтрЗаменить(ИмяКолонки, "Период", "");
			Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность." + Периодичность);
			
			Если ТекущиеДанные[ИмяКолонки] < Объект.НачалоПериода Тогда
				ТекущиеДанные[ИмяКолонки] = Макс(ТекущиеДанные[ИмяКолонки], Объект.НачалоПериода);
			ИначеЕсли ТекущиеДанные[ИмяКолонки] > Объект.ОкончаниеПериода Тогда
				ТекущиеДанные[ИмяКолонки] = Мин(ТекущиеДанные[ИмяКолонки], Объект.ОкончаниеПериода);
			КонецЕсли;
			
			ТекущиеДанные[ИмяКолонки] = БюджетированиеКлиентСервер.ДатаНачалаПериода(ТекущиеДанные[ИмяКолонки], Периодичность);
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока = Элементы.СписокРедактированияБюджета.ТекущаяСтрока;
		
		Если ЕстьОшибкиВСтрокеРедактированияБюджета(ТекущаяСтрока, РезультатПроверки) Тогда
			
			Если РезультатПроверки.Результат = "После ввода значения будет дубль" Тогда
			
				ДопПараметры = Новый Структура("ИмяКолонки, Идентификатор", ИмяКолонки, ТекущаяСтрока);
				ОповещениеОРешении = Новый ОписаниеОповещения("ВыборУвеличенияСтроки", ЭтаФорма, ДопПараметры);
				
				ПоказатьВопрос(ОповещениеОРешении, НСтр("ru='Строка с такими полями уже существует. Объединить строки?
                                                        |Да - объединить строки
                                                        |Нет - удалить строку
                                                        |Отмена - продолжить редактирование'
                                                        |;uk='Рядок з такими полями вже існує. Об''єднати рядки?
                                                        |Так - об''єднати рядки
                                                        |Ні - видалити рядок
                                                        |Скасування - продовжити редагування'"), 
														РежимДиалогаВопрос.ДаНетОтмена);
				ОткрытДиалогВопросаДубли = Истина;
			
			КонецЕсли;
			
			//об ошибке сообщим перед окончанием редактирования
			Возврат;
			
		КонецЕсли;
		
		Если Не ИзмененияВСпискеОтраженыВДокументе Тогда
			ИзмененияВСпискеОтраженыВДокументе = Истина;
			ОтразитьИзмененияВДанных(Элементы.СписокРедактированияБюджета.ТекущаяСтрока);
		Иначе
			ОтразитьИзмененияВДанных(Элементы.СписокРедактированияБюджета.ТекущаяСтрока, ИмяКолонки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРедактированияБюджетаПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница <> Элементы.Список Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокРедактированияБюджета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПримечаниеКЗначению = "";
		Элементы.СписокРедактированияГруппаПримечание.ТекущаяСтраница = Элементы.ВводПримечанияНедоступен;
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементСписка = Элементы.СписокРедактированияБюджета.ТекущийЭлемент;
	ИмяКолонки = ТекущийЭлементСписка.Имя;
	МожноВводитьПримечание = Не СтрНайти(РедактируемыеКолонкиСписка, ИмяКолонки) И Не ТекущийЭлементСписка.ТолькоПросмотр;
	
	Если МожноВводитьПримечание Тогда
		ПримечаниеКЗначению = ТекущиеДанные[ИмяКолонки + "Примечание"];
		Элементы.СписокРедактированияГруппаПримечание.ТекущаяСтраница = Элементы.МожноВводитьПримечание;
	Иначе
		ПримечаниеКЗначению = "";
		Элементы.СписокРедактированияГруппаПримечание.ТекущаяСтраница = Элементы.ВводПримечанияНедоступен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРедактированияБюджетаПередУдалением(Элемент, Отказ)
	
	УдалитьСвязанныеСтрокиБюджетаНаСервере(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьНаСервере(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьНаСервере(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьПоВозрастанию(Команда)
	
	УпорядочитьНаСервере(Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя, "ВОЗР");
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьПоУбыванию(Команда)
	
	УпорядочитьНаСервере(Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя, "УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеКЗначениюПриИзменении(Элемент)
	
	ИмяКолонки = Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя;
	ТекущиеДанные = Элементы.СписокРедактированияБюджета.ТекущиеДанные;
	ТекущиеДанные[ИмяКолонки + "Примечание"] = ПримечаниеКЗначению;
	ОтразитьИзмененияВДанных(Элементы.СписокРедактированияБюджета.ТекущаяСтрока, ИмяКолонки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьБюджетИнтерактивно(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЭкземплярБюджета.ФормаДокумента.Команда.ОбновитьБюджет");
	
	СброситьКэшПараметров();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал()
	
	ПараметрыФормыВыбораПериода = Новый Структура("НачалоПериода, КонецПериода", Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьПериодЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбораПериода, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	Перем ИДГруппировки;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЭкземплярБюджета.ФормаДокумента.Команда.РедактироватьСписком");
	
	Если Элементы.РедактироватьСписком.Заголовок = НСтр("ru='Редактировать списком';uk='Редагувати списком'") Тогда
		
		Расшифровка = Бюджет.Область(Бюджет.ТекущаяОбласть.Верх, 1).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") 
			И Расшифровка.Свойство("ИДГруппировки", ИДГруппировки) Тогда
			
			НайденнаяСтрока = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДГруппировки", ИДГруппировки);
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ОбластьБюджета = ОбластьБюджетаПоСтроке(Бюджет, ДеревоЭлементовБюджета.НайтиПоИдентификатору(ТекущаяСтрока).ИДГруппировки);
			Если ОбластьБюджета <> Неопределено Тогда
				Элементы.Бюджет.ТекущаяОбласть = Бюджет.Область(ОбластьБюджета, 1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтраницу();
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Родитель = НайденнаяСтрока.ПолучитьРодителя();
		Если Не Элементы.ДеревоЭлементовБюджета.Развернут(Родитель.ПолучитьИдентификатор()) Тогда
			Пока Родитель <> Неопределено Цикл
				Элементы.ДеревоЭлементовБюджета.Развернуть(Родитель.ПолучитьИдентификатор());
				Родитель = Родитель.ПолучитьРодителя();
			КонецЦикла;
		КонецЕсли;
		Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	Перем ИДТаблицы, КолонкиПоИзмерениям;
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(,НСтр("ru='Функциональность не поддерживается в веб-клиенте';uk='Функціональність не підтримується у веб-клієнті'"));
		Возврат;
	#КонецЕсли
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Перед выгрузкой в эксель документ следует записать';uk='Перед вивантаженням в ексель документ слід записати'"));
		Возврат;
	КонецЕсли;
	
	Если Не МожноВыгрузитьТекущуюТаблицу(Бюджет.ТекущаяОбласть.Верх, ИДТаблицы, КолонкиПоИзмерениям) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Невозможно выгрузить текущую таблицу в однородный структурированный файл';uk='Неможливо вивантажити поточну таблицю в однорідний структурований файл'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыгрузитьВExcelРасширениеПодключено",
		ЭтотОбъект,
		Новый Структура("ИДТаблицы, КолонкиПоИзмерениям", ИДТаблицы, КолонкиПоИзмерениям));
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(,НСтр("ru='Функциональность не поддерживается в веб-клиенте';uk='Функціональність не підтримується у веб-клієнті'"));
		Возврат;
	#КонецЕсли
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьИзExcelРасширениеПодключено",
		ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымБюджетирования(Команда)
	
	Реквизиты = ПодготовитьПараметрыЗаполненияТабличнойЧасти();
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоДаннымБюджетированияЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.ПроверитьВозможностьЗаполненияТабличнойЧасти(
		Оповещение, 
		ЭтаФорма,
		Объект.ОборотыПоСтатьямБюджетов,
		Реквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымБюджетированияЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ЗаполнитьПоДаннымБюджетированияСервер();
	
	ЭлементыДерева = ДеревоЭлементовБюджета.ПолучитьЭлементы();
	Для Каждого СтрокаДерева из ЭлементыДерева Цикл
		Элементы.ДеревоЭлементовБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПериодЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачалоПериода = Результат.НачалоПериода;
	Объект.ОкончаниеПериода = Результат.КонецПериода;
	
	ПриИзмененииПериодаСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьМоделиБюджетирования()
	
	КоличествоДействующихМоделей
		= Справочники.МоделиБюджетирования.КоличествоДействующихМоделейБюджетирования();
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"МодельБюджетирования", 
		"Видимость", 
		КоличествоДействующихМоделей <> 1 Или Не ЗначениеЗаполнено(Объект.МодельБюджетирования));
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеПередЗаписью(ДанныеОбъекта)
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список Тогда
		СформироватьОтчетСервер(Истина);
	КонецЕсли;
	
	ОбъектИПараметрыРасчета = СтруктураДляВызоваПроцедурМодуляМенеджера();
	
	СоответствиеНайденныхИД = Новый Соответствие;
	Для КоординатаХ = 1 по Бюджет.ШиринаТаблицы Цикл
		Для КоординатаУ = 1 по Бюджет.ВысотаТаблицы Цикл
			Расшифровка = Бюджет.Область(КоординатаУ, КоординатаХ).Расшифровка;
			Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
				Расшифровка = Документы.ЭкземплярБюджета.ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, Истина);
				Если Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторСтроки = Документы.ЭкземплярБюджета.ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, Расшифровка, Ложь);
				Если ИдентификаторСтроки <> Неопределено Тогда
					МассивПериодов = СоответствиеНайденныхИД[ИдентификаторСтроки];
					Если МассивПериодов = Неопределено Тогда
						МассивПериодов = Новый Массив;
						СоответствиеНайденныхИД.Вставить(ИдентификаторСтроки, МассивПериодов);
					КонецЕсли;
					МассивПериодов.Добавить(Расшифровка.ПериодПланирования);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаТаблицы из ДанныеОбъекта.АналитикаСтатейБюджетов Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаСтатейБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы из ДанныеОбъекта.АналитикаЗначений Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаЗначений", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы из ДанныеОбъекта.ОборотыПоСтатьямБюджетов Цикл
		МассивПериодов = СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки];
		Если МассивПериодов = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
			Продолжить;
		КонецЕсли;
		Если МассивПериодов.Найти(СтрокаТаблицы.ПериодПланирования) = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТаблицаИСтрока из МассивНаУдаление Цикл
		ДанныеОбъекта[ТаблицаИСтрока.Таблица].Удалить(ТаблицаИСтрока.Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СброситьКэшПараметров()
	
	СтруктураПараметрыВыводаВидаБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	Если СтруктураПараметрыВыводаВидаБюджета <> Неопределено Тогда
		СтруктураПараметрыВыводаВидаБюджета.КэшДанных.Очистить();
	КонецЕсли;
	ПоместитьВоВременноеХранилище(СтруктураПараметрыВыводаВидаБюджета, ПараметрыВыводаВидаБюджета);
	АдресТаблицыКурсов = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыЗаполненияТабличнойЧасти()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("МодельБюджетирования");
	Реквизиты.Вставить("НачалоПериода");
	Реквизиты.Вставить("ОкончаниеПериода");
	Реквизиты.Вставить("Сценарий");
	Реквизиты.Вставить("ВидБюджета");
	Если ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоОрганизациям") Тогда
		Реквизиты.Вставить("Организация");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоПодразделениям") Тогда
		Реквизиты.Вставить("Подразделение");
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Процедура Вставить(Команда)
	Перем ТекстСообщения;
	
	Если Не ВставитьНаСервере(ТекстСообщения) Тогда
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		УстановитьНадписьОбновленияИтогов(Истина);
		ЗапуститьПроверкуРасчетаИзменений();
	Иначе
		УстановитьНадписьОбновленияИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Копировать(Команда)
	КопироватьЯчейкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОчиститьЯчейкиНаСервере();
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		УстановитьНадписьОбновленияИтогов(Истина);
		ЗапуститьПроверкуРасчетаИзменений();
	Иначе
		УстановитьНадписьОбновленияИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПоПериодам(Команда)
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список Тогда
		
		ТекущаяСтрока = Элементы.СписокРедактированияБюджета.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СкопироватьПоПериодамНаСервере();
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица Тогда
		
		ЗапуститьПроверкуВыполненияОтчета();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПоляШапкиДокумента()
	
	БюджетыПоПодразделениям = ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоПодразделениям");
	БюджетыПоОрганизациям = ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоОрганизациям");
	ЕстьГраницаФакта = Справочники.ВидыБюджетов.ВидБюджетаИспользуетГраницуФактическихДанных(Объект.ВидБюджета);
		
	ПодразделениеВправо = Ложь;
	Если БюджетыПоОрганизациям Тогда
		Если Не ЕстьГраницаФакта Тогда
			ПодразделениеВправо = Истина;
		КонецЕсли;
	КонецЕсли;
	Элементы.ПодразделениеЛево.Видимость = Не ПодразделениеВправо;
	Элементы.ПодразделениеПраво.Видимость = ПодразделениеВправо;
	
	НачатьСПравойКолонки = (Число(БюджетыПоОрганизациям) + Число(БюджетыПоПодразделениям) + Число(ЕстьГраницаФакта)) % 2;
	ЛеваяКолонка = Не НачатьСПравойКолонки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыБюджетовАналитикиШапки.НомерСтроки КАК НомерСтроки,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики.ТипЗначения КАК ТипЗначения,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики.Наименование КАК Наименование,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики.ДополнительноеСвойство КАК ДополнительноеСвойство
		|ИЗ
		|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
		|ГДЕ
		|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
		
	Запрос.УстановитьПараметр("ВидБюджета", Объект.ВидБюджета);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СоответствиеЗависимыхТипов = ФинансоваяОтчетностьПовтИсп.СоответствиеОтборовПоВладельцу();
	
	Для Сч = 1 по 6 Цикл
		Элемент = Элементы.Найти("ШапкаАналитика" + Сч);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	МассивВышестоящих = Новый Массив;
	
	СписокАналитикШапки.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		СписокАналитикШапки.Добавить(Выборка.ВидАналитики);
		
		НомерАналитики = Выборка.НомерСтроки;
		Если ЛеваяКолонка Тогда
			НовыйЭлемент = Элементы.Добавить("ШапкаАналитика" + НомерАналитики, Тип("ПолеФормы"), Элементы.ГруппаШапкаЛево);
		Иначе
			НовыйЭлемент = Элементы.Добавить("ШапкаАналитика" + НомерАналитики, Тип("ПолеФормы"), Элементы.ГруппаШапкаПраво);
		КонецЕсли;
		НовыйЭлемент.ПутьКДанным = "Объект.Аналитика" + НомерАналитики;
		НовыйЭлемент.Заголовок = Выборка.Наименование;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ОграничениеТипа = Выборка.ТипЗначения;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииАналитикиШапки");
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 28;
		НовыйЭлемент.ПодсказкаВвода = "<прочие>";
		
		ЛеваяКолонка = Не ЛеваяКолонка;
		
		МассивСвязей = Новый Массив();
		Для Каждого ВышестоящаяАналитика из МассивВышестоящих Цикл
			
			Для Каждого Тип из Выборка.ТипЗначения.Типы() Цикл
				
				ПараметрыВладельца = СоответствиеЗависимыхТипов[Тип];
				Если ПараметрыВладельца = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВВышестоящихАналитикахЕстьВладелец = Ложь;
				
				Для Каждого ПараметрВладельца из ПараметрыВладельца Цикл
					Если ВышестоящаяАналитика.Типы.Найти(ПараметрВладельца.Тип) <> Неопределено Тогда
						ВВышестоящихАналитикахЕстьВладелец = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ВВышестоящихАналитикахЕстьВладелец Тогда
					Продолжить;
				КонецЕсли;
			
				НоваяСвязь = Новый СвязьПараметраВыбора("Отбор." + ПараметрВладельца.Реквизит, "Объект.Аналитика" + ВышестоящаяАналитика.НомерАналитики);
				МассивСвязей.Добавить(НоваяСвязь);
			
			КонецЦикла;
		
		КонецЦикла;
		
		НовыеСвязи = Новый ФиксированныйМассив(МассивСвязей);
		НовыйЭлемент.СвязиПараметровВыбора = НовыеСвязи;
		
		Если Выборка.ТипЗначения.Типы().Найти(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) <> Неопределено Тогда
			
			ПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", Выборка.ДополнительноеСвойство);
			Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрВыбора);
			НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(Массив);
			
		КонецЕсли;
		
		МассивВышестоящих.Добавить(Новый Структура("НомерАналитики, Типы", НомерАналитики, Выборка.ТипЗначения.Типы()));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиШапки(Элемент)
	
	СброситьКэшПараметров();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГраницуФакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ГраницаФактДанных = Результат;
		УстановитьГраницуФактаСервер();
		ОбновитьБюджет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МодельБюджетированияДействует(Модель)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Модель, "Статус") = 
						Перечисления.СтатусыМоделейБюджетирования.Действует;
	
КонецФункции

#Область ЗаполнениеБюджета

&НаСервере
Функция ДополнитьПараметрамиПериодами(ПараметрыДанных = Неопределено)
	
	Если ПараметрыДанных = Неопределено Тогда
		ПараметрыДанных = Новый Структура;
	КонецЕсли;
	
	Документы.ЭкземплярБюджета.ДополнитьПараметрамиПериодами(Объект, ПараметрыДанных);
	
	Возврат ПараметрыДанных;
	
КонецФункции	

&НаСервере
Функция ПодготовитьПараметрыОтчета(Заполнение = Ложь)
	
	РежимФормирования = ?(Заполнение,
							Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение,
							Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
	
	ПараметрыДанных = Документы.ЭкземплярБюджета.ПодготовитьПараметрыОтчета(Объект, СписокАналитикШапки, ВалютаСценария,
								ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета),
								ПолучитьИзВременногоХранилища(АдресДанныхЯчеек), РежимФормирования);
			
	Возврат ПараметрыДанных;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьБюджет(ПересчитатьСвязанные = Ложь)
	
	ПродолжительностьПоследнегоРасчета = 0;
	СформироватьОтчетСервер(Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список);
	ЗапуститьПроверкуВыполненияОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПараметрыВыводаВидаБюджета()
	
	СтруктураПараметров = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(
		Объект.ВидБюджета, Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
		
	ПараметрыВыводаВидаБюджета = ПоместитьВоВременноеХранилище(СтруктураПараметров, УникальныйИдентификатор);
	
	АдресДанныхЯчеек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресПараметровРедактированияСтроки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресРедактируемыхЗначенийСтрокиСписка = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЕстьПериодичность = Ложь;
	Если СтруктураПараметров <> Неопределено Тогда
		ЕстьПериодичность = СтруктураПараметров.СтруктураКолонокТаблицыДанных.Периодичности.Количество();
	КонецЕсли;
	Элементы.СкопироватьПоПериодам.Видимость = ЕстьПериодичность;
	Элементы.БюджетКонтекстноеМенюСкопироватьПоПериодам.Видимость = ЕстьПериодичность;
	Элементы.СписокРедактированияБюджетаКонтекстноеМенюСкопироватьПоПериодам.Видимость = ЕстьПериодичность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымБюджетированияСервер()
	
	Документы.ЭкземплярБюджета.ЗаполнитьБюджетПоДаннымИнформационнойБазы(Объект, АдресХранилища);
	СформироватьОтчетСервер(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияБюджета(Режим = "", СтрокиОснования = Неопределено)
	
	Если Элементы.Бюджет.ОтображениеСостояния.Видимость Тогда
		//бюджет не сформирован
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеЯчеек = Режим = "ОбновитьДанныеЯчеек";
	Пересчет = Режим = "Пересчет";
	
	ЕстьИзмененияКОтражению = Ложь;
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если СтрокиОснования <> Неопределено Тогда
		ПараметрыОтчета.Вставить("СтрокиОснования", СтрокиОснования);
	КонецЕсли;
	
	Если Не ОбновитьДанныеЯчеек Тогда
		ПараметрыОтчета.Вставить("ТолькоРасчетные", Истина);
	КонецЕсли;
	
	Если ФайловаяИБ ИЛИ ОбновитьДанныеЯчеек ИЛИ Пересчет Тогда
		
		ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.ИзмененияЭкземпляраБюджета(ПараметрыОтчета);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
		
	Иначе
		
		РезультатВыполнения = ЗапуститьВыполнениеВФоне(
								УникальныйИдентификатор,
								"БюджетнаяОтчетностьВыводСервер.ПоместитьИзмененияЭкземпляраБюджетаВХранилище",
								ПараметрыОтчета,
								НСтр("ru='Подготовка бюджета';uk='Підготовка бюджету'"));
			
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		
		Попытка
			РезультатВыполнения.Задание.ОжидатьЗавершения(0.7);
			Если ДлительныеОперации.ЗаданиеВыполнено(РезультатВыполнения.ИдентификаторЗадания) Тогда
				РезультатВыполнения.ЗаданиеВыполнено = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ЗагрузитьРезультатРасчетаИзменений(Режим, ИзмененияЭкземпляраБюджета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетСервер(Непосредственно = Ложь, ПересчитатьСвязанные = Ложь)
	
	Если Не МожноОбновитьБюджет() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	ИдентификаторЗадания = Неопределено;
	
	Если ФайловаяИБ ИЛИ Непосредственно Тогда
		ДанныеЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ЗапуститьВыполнениеВФоне(
								УникальныйИдентификатор,
								"БюджетнаяОтчетностьВыводСервер.ПоместитьДанныеЭкземпляраБюджетаВХранилище",
								ПараметрыОтчета,
								НСтр("ru='Подготовка бюджета';uk='Підготовка бюджету'"));
			
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные(ДанныеЭкземпляраБюджета);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Бюджет, "ФормированиеОтчета");
		Элементы.Бюджет.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МожноОбновитьБюджет()
	Перем Отказ, ТекстСообщения;
	
	НезаполненныеПоля = Новый Массив;
	Если Не ЗначениеЗаполнено(Объект.ВидБюджета) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru='Вид бюджета';uk='Вид бюджету'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru='Сценарий';uk='Сценарій'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Или Не ЗначениеЗаполнено(Объект.ОкончаниеПериода) Тогда
		НезаполненныеПоля.Добавить(НСтр("ru='Период';uk='Період'"));
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.Бюджет.ОтображениеСостояния;
	
	Если НезаполненныеПоля.Количество() > 0 Тогда
		
		Бюджет.Очистить();
		
		ШаблонСообщенияСостояния = ?(НезаполненныеПоля.Количество() = 1,
			НСтр("ru='Заполните поле %СписокПолей';uk='Заповніть поле %СписокПолей'"), НСтр("ru='Заполните поля: %СписокПолей';uk='Заповніть поля: %СписокПолей'"));
			
		ОтображениеСостояния.Видимость  = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка   = Новый Картинка;
		ОтображениеСостояния.Текст  = 
			СтрЗаменить(ШаблонСообщенияСостояния, 
				"%СписокПолей", 
				СтрСоединить(НезаполненныеПоля, ", "));
				
		Возврат Ложь;
		
	Иначе
		
		ПроверитьЗаполнитьТаблицуКурсов(Отказ, ТекстСообщения);
		
		Если Отказ = Истина Тогда
			
			Бюджет.Очистить();
			
			ОтображениеСостояния.Видимость  = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка   = Новый Картинка;
			ОтображениеСостояния.Текст  = ТекстСообщения;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтображениеСостояния.Видимость = Ложь;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСервер

&НаСервере
Процедура ПриИзмененииСценарияСервер()
	
	УстановитьПараметрыСценария();
	СброситьКэшПараметров();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМоделиБюджетированияСервер()
	
	ПараметрыОпций = Новый Структура("МодельБюджетирования", Объект.МодельБюджетирования);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
	ИспользоватьУтверждениеБюджетов = ПолучитьФункциональнуюОпциюФормы("ИспользоватьУтверждениеБюджетов");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаБюджетаСервер()
	
	Объект.ОборотыПоСтатьямБюджетов.Очистить();
	Объект.АналитикаСтатейБюджетов.Очистить();
	ПодготовитьПараметрыВыводаВидаБюджета();
	
	Справочники.ВидыБюджетов.ВыровнятьДатыПоПериодичностиБюджета(Объект.ВидБюджета, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	Объект.ГраницаФактДанных = Справочники.ВидыБюджетов.ГраницаФактическихДанныхПоВидуБюджета(Объект.ВидБюджета, Объект.НачалоПериода);
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(Объект.ВидБюджета, Элементы, Объект.ГраницаФактДанных);
	УстановитьПоляШапкиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаСервер()
	
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаОборотов из Объект.ОборотыПоСтатьямБюджетов Цикл
		Если СтрокаОборотов.ПериодПланирования < Объект.НачалоПериода
			ИЛИ СтрокаОборотов.ПериодПланирования > Объект.ОкончаниеПериода Тогда
			МассивКУдалению.Добавить(СтрокаОборотов);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаМассива из МассивКУдалению Цикл
		Объект.ОборотыПоСтатьямБюджетов.Удалить(СтрокаМассива);
	КонецЦикла;
	Идентификаторы = Объект.ОборотыПоСтатьямБюджетов.Выгрузить(,"ИдентификаторСтроки");
	Идентификаторы.Свернуть("ИдентификаторСтроки");
	Идентификаторы.Индексы.Добавить("ИдентификаторСтроки");
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаАналитики из Объект.АналитикаСтатейБюджетов Цикл
		Если Идентификаторы.Найти(СтрокаАналитики.ИдентификаторСтроки) = Неопределено Тогда
			МассивКУдалению.Добавить(СтрокаАналитики);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаМассива из МассивКУдалению Цикл
		Объект.АналитикаСтатейБюджетов.Удалить(СтрокаМассива);
	КонецЦикла;
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаАналитики из Объект.АналитикаЗначений Цикл
		Если Идентификаторы.Найти(СтрокаАналитики.ИдентификаторСтроки) = Неопределено Тогда
			МассивКУдалению.Добавить(СтрокаАналитики);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаМассива из МассивКУдалению Цикл
		Объект.АналитикаЗначений.Удалить(СтрокаМассива);
	КонецЦикла;
	
	МодельДействует = Справочники.МоделиБюджетирования.МодельБюджетированияДействует(Объект.МодельБюджетирования);
		
	Если Не МодельДействует Тогда
		Объект.МодельБюджетирования = Справочники.МоделиБюджетирования.МодельБюджетированияПоУмолчанию();
		ПриИзмененииМоделиБюджетированияСервер();
	КонецЕсли;
	
	УстановитьДоступностьМоделиБюджетирования();
	
	Справочники.ВидыБюджетов.ВыровнятьДатыПоПериодичностиБюджета(Объект.ВидБюджета, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	Объект.ГраницаФактДанных = Справочники.ВидыБюджетов.ГраницаФактическихДанныхПоВидуБюджета(Объект.ВидБюджета, Объект.НачалоПериода);
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(Объект.ВидБюджета, Элементы, Объект.ГраницаФактДанных);
	
	СброситьКэшПараметров();
	
КонецПроцедуры

&НаСервере
Функция ВидБюджетаОбработкаВыбораНаСервере(ВыбранноеЗначение, ИспользоватьДляВводаПлана)
	
	ИспользоватьДляВводаПлана = ВыбранноеЗначение.ИспользоватьДляВводаПлана;
	
	Если Не ИспользоватьДляВводаПлана Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Справочники.ВидыБюджетов.ВидБюджетаЗаполненПравильно(ВыбранноеЗначение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СброситьКэшПараметров();
	
Конецпроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	СброситьКэшПараметров();
	
КонецПроцедуры

&НаСервере
Процедура БюджетПриИзмененииСервер(Знач ИмяОбласти)
	
	ОбластьДанные	= Бюджет.Область(ИмяОбласти);
	Расшифровка		= ОбластьДанные.Расшифровка;
	
	Значение = ОбластьДанные.Значение;
	
	СокращенныеРазряды = 0;
	Если Расшифровка.Свойство("СокращенныеРазряды", СокращенныеРазряды) Тогда
		Значение = Значение * Pow(10, СокращенныеРазряды);
	КонецЕсли;
	
	РезультатОтражения = ОтразитьИзменениеЯчейки(Расшифровка, Значение);
	
	ЕстьИзмененияКОтражению = Истина;
	
	ПараметрыОтчета = ДополнитьПараметрамиПериодами();
	ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, 
																					ПараметрыОтчета, ИмяОбласти, РезультатОтражения, АдресХранилища);
	ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета);
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		
		ОтразитьИзмененияБюджета( , ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Расшифровка.Строка));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьНаСервере(Направление)
	
	ОбъектИПараметрыРасчета = СтруктураДляВызоваПроцедурМодуляМенеджера();
	
	ИДТекущейСтроки = Элементы.СписокРедактированияБюджета.ТекущаяСтрока;
	ТекущаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ИДТекущейСтроки);
	Индекс = СписокРедактированияБюджета.Индекс(ТекущаяСтрока);
	
	Если Индекс + Направление < 0 ИЛИ 
		Индекс + Направление >= СписокРедактированияБюджета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	СтрокаСмещения = СписокРедактированияБюджета[Индекс + Направление];
	
	Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
		
		Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
			Продолжить;
		КонецЕсли;
		
		Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, ТекущаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
		СтрокаДанныхПоТекущей = Документы.ЭкземплярБюджета.НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка);
		Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, СтрокаСмещения, ПараметрыРедактирования.ИзменяемыеИзмерения);
		СтрокаДанныхПоПредыдущей = Документы.ЭкземплярБюджета.НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка);
		
		Тмп = СтрокаДанныхПоТекущей.НомерПоПорядку;
		СтрокаДанныхПоТекущей.НомерПоПорядку = СтрокаДанныхПоПредыдущей.НомерПоПорядку;
		СтрокаДанныхПоПредыдущей.НомерПоПорядку = Тмп;
	
	КонецЦикла;
	
	СписокРедактированияБюджета.Сдвинуть(Индекс, Направление);
	
	ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек", ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования);
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьНаСервере(ИмяЭлемента, Порядок)
	
	ОбъектИПараметрыРасчета = СтруктураДляВызоваПроцедурМодуляМенеджера();
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	Для Каждого СтрокаСписка из СписокРедактированияБюджета Цикл
		Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
		
			Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
				Продолжить;
			КонецЕсли;
			
			Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, СтрокаСписка, ПараметрыРедактирования.ИзменяемыеИзмерения);
			СтрокаДанных = Документы.ЭкземплярБюджета.НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка);
			СтрокаДанных.НомерПоПорядку = 0;
			
		КонецЦикла;
	КонецЦикла;
	
	НомерПоПорядку = Документы.ЭкземплярБюджета.МаксимальныйНомерПоПорядку(Объект);
	
	СписокРедактированияБюджета.Сортировать(ИмяЭлемента + " " + Порядок);
	
	Для Каждого СтрокаСписка из СписокРедактированияБюджета Цикл
		НомерПоПорядку = НомерПоПорядку + 1;
		Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
		
			Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
				Продолжить;
			КонецЕсли;
			
			Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, СтрокаСписка, ПараметрыРедактирования.ИзменяемыеИзмерения);
			СтрокаДанных = Документы.ЭкземплярБюджета.НайтиСтрокуОборотаПоРасшифровке(ОбъектИПараметрыРасчета, Расшифровка);
			СтрокаДанных.НомерПоПорядку = НомерПоПорядку;
			
		КонецЦикла;
	КонецЦикла;
	
	ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек", ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПоПериодамПоРасшифровке(Расшифровка, Значение)
	
	Периодичности = Новый Массив;
	Для Каждого КлючИЗначение из Расшифровка Цикл
		Если СтрНайти(КлючИЗначение.Ключ, "Период") Тогда
			Периодичности.Добавить(Перечисления.Периодичность[СтрЗаменить(КлючИЗначение.Ключ, "Период", "")]);
		КонецЕсли;
	КонецЦикла;
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(Периодичности);
	РабочаяРасшифровка = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Расшифровка);
	
	ИмяМинимальнаяПериодичность = ?(МинимальнаяПериодичность = Неопределено, "", ОбщегоНазначения.ИмяЗначенияПеречисления(МинимальнаяПериодичность));
	
	МассивПериодов = БюджетнаяОтчетностьВыводСервер.ПолучитьМассивПериодов(
						Расшифровка["Период" + ИмяМинимальнаяПериодичность], Объект.ОкончаниеПериода, МинимальнаяПериодичность);
	
	Для Каждого Период из МассивПериодов Цикл
		
		Если Период = Расшифровка["Период" + ИмяМинимальнаяПериодичность] Тогда
			Продолжить;
		КонецЕсли;
		
		РабочаяРасшифровка.Вставить("Период" + ИмяМинимальнаяПериодичность, Период);
		РезультатОтражения = ОтразитьИзменениеЯчейки(РабочаяРасшифровка, Значение);
		
		РасшифровкаСвязанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РабочаяРасшифровка);
		РасшифровкаСвязанных.Удалить("ИндексСтрокиДанных");
		РасшифровкаСвязанных.Удалить("Значение");
		Для Каждого КлючИЗначение из РасшифровкаСвязанных.ЗначенияАналитик Цикл
			РасшифровкаСвязанных.Вставить(ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(КлючИЗначение.Ключ), КлючИЗначение.Значение);
		КонецЦикла;
		РасшифровкаСвязанных.Удалить("ЗначенияАналитик");
		
		ПараметрыОтчета = ДополнитьПараметрамиПериодами();
		ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, 
																			ПараметрыОтчета, РасшифровкаСвязанных, РезультатОтражения, АдресХранилища);
		ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПоПериодамНаСервере()
	
	Модифицированность = Истина;
	
	ПараметрыВидаБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	СтруктураЯчеек = ПараметрыВидаБюджета;
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица Тогда
		
		АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
		
		Для Строка = АктивнаяОбласть.Верх по АктивнаяОбласть.Низ Цикл
			Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
				ОбластьЗначения = Бюджет.Область(Строка, Колонка);
				Если ОбластьЗначения.СодержитЗначение Тогда
					
					СкопироватьПоПериодамПоРасшифровке(ОбластьЗначения.Расшифровка, ОбластьЗначения.Значение);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
		СформироватьОтчетСервер();
		
	Иначе
		
		ИмяКолонки = Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя;
		ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
		РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(Элементы.СписокРедактированияБюджета.ТекущаяСтрока);
	
		Если Не ПараметрыРедактирования.СтруктураАналогРасшифровки.Свойство(ИмяКолонки) Тогда
			Возврат;
		КонецЕсли;
		
		ЗначенияКолонок = ПараметрыРедактирования.СтруктураАналогРасшифровки[ИмяКолонки];
		Расшифровка = РасшифровкаОтчетаПоСтроке(ЗначенияКолонок, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
		
		СкопироватьПоПериодамПоРасшифровке(Расшифровка, РедактируемаяСтрока[ИмяКолонки]);
		
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек", ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования);
		ЗагрузитьДанныеСписка(ПараметрыРедактирования.КолонкиПоИзмерениям, 
								ПараметрыРедактирования.ФиксированныеЗначения, 
								ПараметрыРедактирования.СтруктураАналогРасшифровки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВставитьНаСервере(ТекстПредупреждения)
	
	Значение = КопированиеСтрокСервер.ПолучитьЯчейкиБюджетаИзБуфераОбмена();
	
	ЕдиничноеЗначение = Ложь;
	
	Если Значение.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='Нет данных для вставки';uk='Немає даних для вставки'");
		Возврат Ложь; //нечего вставлять
	ИначеЕсли Значение.Количество() = 1 Тогда
		Если Значение[0].Количество() = 1 Тогда
			ЕдиничноеЗначение = Истина;
			Значение = Значение[0][0];
		КонецЕсли;
	КонецЕсли;
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	Если ЕдиничноеЗначение Тогда
		Для Строка = АктивнаяОбласть.Верх по АктивнаяОбласть.Низ Цикл
			Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
				ОбластьЗначения = Бюджет.Область(Строка, Колонка);
				Если ОбластьЗначения.СодержитЗначение Тогда
					ОбластьЗначения.Значение = Значение;
					ОтразитьИзменениеЯчейки(ОбластьЗначения.Расшифровка, ОбластьЗначения.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ЛевыйУгол = АктивнаяОбласть.Лево;
		ВерхнийУгол = АктивнаяОбласть.Верх;
		Для Строка = 0 по Значение.ВГраница() Цикл
			Для Колонка = 0 по Значение[0].ВГраница() Цикл
				ОбластьЗначения = Бюджет.Область(ВерхнийУгол + Строка, ЛевыйУгол + Колонка);
				Если ОбластьЗначения.СодержитЗначение Тогда
					ОбластьЗначения.Значение = Значение[Строка][Колонка];
					ОтразитьИзменениеЯчейки(ОбластьЗначения.Расшифровка, ОбластьЗначения.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОтразитьИзмененияБюджета();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура КопироватьЯчейкиНаСервере()
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	МассивСтрок = Новый Массив;
	Для Строка = АктивнаяОбласть.Верх по АктивнаяОбласть.Низ Цикл
		МассивКолонок = Новый Массив;
		Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
			ОбластьЗначения = Бюджет.Область(Строка, Колонка);
			Значение = Неопределено;
			Если ОбластьЗначения.СодержитЗначение Тогда
				Значение = ОбластьЗначения.Значение;
			Иначе
				Если Не ПустаяСтрока(ОбластьЗначения.Текст) Тогда
					Попытка
						Значение = Число(ОбластьЗначения.Текст);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			МассивКолонок.Добавить(Значение);
		КонецЦикла;
		МассивСтрок.Добавить(МассивКолонок);
	КонецЦикла;
	
	КопированиеСтрокСервер.ПоместитьВыделенныеЯчейкиБюджетаВБуферОбмена(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЯчейкиНаСервере()
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	Для Строка = АктивнаяОбласть.Верх по АктивнаяОбласть.Низ Цикл
		Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
			ОбластьЗначения = Бюджет.Область(Строка, Колонка);
			Если ОбластьЗначения.СодержитЗначение Тогда
				ОбластьЗначения.Значение = Неопределено;
				РезультатОтражения = ОтразитьИзменениеЯчейки(ОбластьЗначения.Расшифровка, ОбластьЗначения.Значение);
				ПараметрыОтчета = ДополнитьПараметрамиПериодами();
				ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, 
																								ПараметрыОтчета, ОбластьЗначения.Имя, РезультатОтражения, АдресХранилища);
				ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОтразитьИзмененияБюджета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГраницуФактаСервер()
	
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(Объект.ВидБюджета, Элементы, Объект.ГраницаФактДанных);
	СброситьКэшПараметров();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНаСервере()
	
	СтрокиОснования = Неопределено;
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список Тогда
		ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
		Если ПараметрыРедактирования = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокиОснования = ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования;
		Если Не АвтоматическоеОбновлениеБюджета Тогда
			ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	Если ДанныеЯчеек <> Неопределено Тогда
		ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, ДанныеЯчеек, 
																					ПараметрыОтчета, Неопределено, Неопределено, АдресХранилища, Истина);
		ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета);
		ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	КонецЕсли;
	
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица Тогда
		ОтразитьИзмененияБюджета("Пересчет", СтрокиОснования);
	Иначе
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек", СтрокиОснования);
		ЗагрузитьДанныеСписка(ПараметрыРедактирования.КолонкиПоИзмерениям, 
								ПараметрыРедактирования.ФиксированныеЗначения, 
								ПараметрыРедактирования.СтруктураАналогРасшифровки, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Вставить");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			МассивЭлементов,
			"Доступность",
			НЕ ОбщегоНазначения.ПустойБуферОбмена("ЯчейкиБюджета"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Копировать");
	МассивЭлементов.Добавить("Вставить");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаВЭксель

&НаСервере
Функция МожноВыгрузитьТекущуюТаблицу(ВерхТекущейОбласти, ИДТаблицы, КолонкиПоИзмерениям)
	Перем ТекущаяСтрока, ИДГруппировки;
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица Тогда
		
		Расшифровка = Бюджет.Область(ВерхТекущейОбласти, 1).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") 
			И Расшифровка.Свойство("ИДГруппировки", ИДГруппировки) Тогда
			
			ТекущаяСтрока = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДГруппировки", ИДГруппировки);
			
		Иначе
			
			СтрокиДерева = ДеревоЭлементовБюджета.ПолучитьЭлементы();
			Если Не СтрокиДерева.Количество() Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекущаяСтрока = СтрокиДерева[0];
			
		КонецЕсли;
		
	ИначеЕсли Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список Тогда
		
		ИндексТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
		Если ИндексТекущаяСтрока = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекущаяСтрока = ДеревоЭлементовБюджета.НайтиПоИдентификатору(ИндексТекущаяСтрока);
		
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Пока ТекущаяСтрока.ПолучитьРодителя() <> Неопределено Цикл
		
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
	ПараметрыЭкземпляраБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	СписокПараметров = ПараметрыЭкземпляраБюджета.СтруктураОписанияСпискаВвода;
	
	КолонкиПоИзмерениям = Неопределено;
	Если Не Документы.ЭкземплярБюджета.СоставКолонокКорневогоЭлемента(ТекущаяСтрока, СписокПараметров, КолонкиПоИзмерениям) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИДТаблицы = ТекущаяСтрока.ИДТаблицы;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьПрисоединенныйФайлXLS97(ИДТаблицы, КолонкиПоИзмерениям)
	Перем ГлубинаДерева;
	
	СхемаКомпоновкиДанных = Документы.ЭкземплярБюджета.ПолучитьСКДПечатиДокументаБезГруппировок(ИДТаблицы, КолонкиПоИзмерениям, 
		ГлубинаДерева, ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета));
	
	//вывод результата компоновки в отчет
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ВнешниеДанные = Новый Структура("ДанныеЯчеек", ПолучитьИзВременногоХранилища(АдресДанныхЯчеек));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(
		МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	НаСервереУстановленExcel = Ложь;
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
		НаСервереУстановленExcel = Истина;
	Исключение
	КонецПопытки;
	
	Если НаСервереУстановленExcel Тогда
		
		Попытка
			
			Workbook = COMОбъект.Workbooks.Open(ИмяВременногоФайла);
			Sheet = Workbook.Worksheets(1);
			
			// Установка автофильтра на колонки цен
			Sheet.Range(Sheet.Cells(ГлубинаДерева, 1), Sheet.Cells(ГлубинаДерева, 256)).AutoFilter();
			
			Workbook.Save();
			Workbook.Close();
			
			COMОбъект.Quit();
			COMОбъект = 0;
			
		Исключение
			
			ЗаписьЖурналаРегистрации("Бюджетирование.Ввод экземпляров бюджета", УровеньЖурналаРегистрации.Предупреждение, , ,
											НСтр("ru='Не удалось установить автофильтр при выгрузке бюджета в Excel';uk='Не вдалося встановити автофільтр при вивантаженні бюджету в Excel'"));
			
		КонецПопытки;
		
	КонецЕсли;
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор);
	
	ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Бюджет от %1';uk='Бюджет від %1'"),
		Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy ЧЧ.мм.сс'"));
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Объект.Ссылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяФайла);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xls");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);
	
	Файл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище, Неопределено);
		
	Возврат Файл;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьВExcelРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт
	
	Файл = СоздатьПрисоединенныйФайлXLS97(ДополнительныеПараметры.ИДТаблицы, ДополнительныеПараметры.КолонкиПоИзмерениям);
	
	Если Файл = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Не удалось выгрузить бюджет в Excel.';uk='Не вдалося вивантажити бюджет в Excel.'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
		
	ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Файл);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзЭксель

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор, Истина);
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьИзExcelНаКлиенте(ПрисоединенныйФайл)
	Перем ИДТаблицы, КолонкиПоИзмерениям;
	
	Если Не МожноВыгрузитьТекущуюТаблицу(Бюджет.ТекущаяОбласть.Верх, ИДТаблицы, КолонкиПоИзмерениям) Тогда
		ТекстПредупреждения = НСтр("ru='Невозможно выгрузить текущую таблицу в однородный структурированный файл!';uk='Неможливо вивантажити поточну таблицю в однорідний структурований файл!'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(НСтр("ru='Выполняется чтение данных их файла. Пожалуйста подождите...';uk='Виконується читання даних їх файлу. Будь ласка, зачекайте...'") , , , БиблиотекаКартинок.Информация32);
	
	ДанныеФайла = ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	ДополнительныеПараметры = 
		Новый Структура("ИДТаблицы, КолонкиПоИзмерениям", ИДТаблицы, КолонкиПоИзмерениям);
		
	Если Не ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗагрузитьИзExcelНаКлиентеПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПрисоединенныеФайлыКлиент.ПолучитьПрисоединенныйФайл(
			Оповещение,
			ПрисоединенныйФайл,
			УникальныйИдентификатор,
			Новый Структура("ДанныеФайла, ДляРедактирования", ДанныеФайла, Ложь));
		
	Иначе
		
		// Не надо получать файл на диск чтобы не затереть несохраненные изменения
		РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ИмяВременногоФайла         = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		ЗагрузитьИзExcelНаКлиентеПродолжение(
			Новый Структура("ОписаниеОшибки, ПолноеИмяФайла", "", ИмяВременногоФайла),
			ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьИзExcelНаКлиентеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = 
			НСтр("ru='Не удалось загрузить данные из файла Excel. Убедитесь, что на компьютере установлена программа Microsoft Excel. Подробности: %1';uk='Не вдалося завантажити дані з файлу Excel. Переконайтеся, що на комп''ютері встановлена програма Microsoft Excel. Подробиці: %1'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ИмяВременногоФайла 	= Результат.ПолноеИмяФайла;
	ИДТаблицы 			= ДополнительныеПараметры.ИДТаблицы;
	КолонкиПоИзмерениям = ДополнительныеПараметры.КолонкиПоИзмерениям;
	
	Попытка
		Workbook      = COMОбъект.Workbooks.Open(ИмяВременногоФайла);
		Sheet         = Workbook.Worksheets(1);
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru='Не удалось прочитать данные из файла. Подробности: %1';uk='Не вдалося прочитати дані з файлу. Подробиці: %1'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	Значения = Sheet.UsedRange.Value.Выгрузить();
	
	Workbook.Close();
	COMОбъект.Quit();
	COMОбъект = 0;
	
	ПараметрыФормы = Новый Структура("Значения, ИДТаблицы, КолонкиПоИзмерениям,
									|ПараметрыВыводаВидаБюджета, АдресРезультата, 
									|НачалоПериода, ОкончаниеПериода", 
									Значения, ИДТаблицы, КолонкиПоИзмерениям, 
									ПараметрыВыводаВидаБюджета, ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор),
									Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
	ОткрытьФорму("Документ.ЭкземплярБюджета.Форма.ФормаСопоставленияЗагружаемыхДанныхИзExcel", ПараметрыФормы, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьБюджетНаСервере(АдресВоВременномХранилище)
	
	Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ФинОтчеты = ФинансоваяОтчетностьКлиентСервер;
	
	НайденнаяСтрока = ФинОтчеты.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДТаблицы", Результат.ИДТаблицы);
	Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
	УстановитьПараметрыСпискаВводаНаСервере();
	
	ПредыдущееАвтоматическоеОбновление = АвтоматическоеОбновлениеБюджета;
	АвтоматическоеОбновлениеБюджета = Ложь;
	
	Пока СписокРедактированияБюджета.Количество() Цикл
		
		УдалитьСвязанныеСтрокиБюджетаНаСервере(СписокРедактированияБюджета[0].ПолучитьИдентификатор(),,Ложь);
		СписокРедактированияБюджета.Удалить(0);
		
	КонецЦикла;
	
	Для Каждого СтрокаРезультат из Результат.СписокРедактированияБюджета Цикл
		НоваяСтрока = СписокРедактированияБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультат);
		ОтразитьИзмененияВДанных(НоваяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	АвтоматическоеОбновлениеБюджета = ПредыдущееАвтоматическоеОбновление;
	
	НайденнаяСтрока = ФинОтчеты.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДТаблицы", Результат.ИДТаблицы);
	Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийПересчет(Команда)
	
	АвтоматическоеОбновлениеБюджета = Не АвтоматическоеОбновлениеБюджета;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоматическийПересчет",
		"Пометка",
		АвтоматическоеОбновлениеБюджета);
	
	ПродолжительностьПоследнегоРасчета = 0;
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		
		ОбновитьБюджет();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	ДоступностьЭлементов = 
		Не ИспользоватьУтверждениеБюджетов 
		Или (Объект.Статус <> Перечисления.СтатусыПланов.Утвержден);
	
	Элементы.МодельБюджетирования.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.ВидБюджета.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.Сценарий.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.НачалоПериода.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.КонецПериода.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.ВыбратьПериод.Доступность = ДоступностьЭлементов;
	Элементы.Организация.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.ПодразделениеЛево.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.ПодразделениеПраво.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.Бюджет.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.Ответственный.ТолькоПросмотр = Не ДоступностьЭлементов;
	
	Элементы.РедактироватьСписком.Доступность = ДоступностьЭлементов;
	Элементы.ЗаполнитьПоДаннымБюджетирования.Доступность = ДоступностьЭлементов;
	Элементы.ВыгрузитьВExcel.Доступность = ДоступностьЭлементов;
	Элементы.ЗагрузитьИзExcel.Доступность = ДоступностьЭлементов;
	Элементы.Вставить.Доступность = ДоступностьЭлементов;
	Элементы.СкопироватьПоПериодам.Доступность = ДоступностьЭлементов;
	Элементы.Копировать.Доступность = ДоступностьЭлементов;
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список и 
		Не ДоступностьЭлементов Тогда
		УстановитьСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазрешеноРедактированиеАналитики(ТекущаяОбласть, Статус)
	
	Попытка
		Расшифровка = ТекущаяОбласть.Расшифровка;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	РазрешеноРедактированиеАналитики = Ложь;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		РазрешеноРедактированиеАналитики = Расшифровка.Свойство("РазрешеноРедактированиеАналитики");
		Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыПланов.Утвержден") Тогда
			РазрешеноРедактированиеАналитики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РазрешеноРедактированиеАналитики; 
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнитьТаблицуКурсов(Отказ, ТекстСообщения)
	
	Если ЗначениеЗаполнено(АдресТаблицыКурсов) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектИПараметрыРасчета = СтруктураДляВызоваПроцедурМодуляМенеджера();
	ТаблицаКурсов = Документы.ЭкземплярБюджета.ТаблицаКурсов(ОбъектИПараметрыРасчета, СтруктураПараметров, Отказ, ТекстСообщения);
	
	Если Не Отказ = Истина Тогда
		АдресТаблицыКурсов = ПоместитьВоВременноеХранилище(ТаблицаКурсов, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыСценария()
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сценарий, 
		"Валюта, ТребоватьУказанияКурсовДляКаждогоПериода");
	ВалютаСценария = ЗначенияРеквизитов.Валюта;
	ТребоватьУказанияКурсовДляКаждогоПериода = ЗначенияРеквизитов.ТребоватьУказанияКурсовДляКаждогоПериода;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура СценарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Сообщение = Неопределено;
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.Сценарии.ФактическиеДанные") Тогда
		Сообщение = НСтр("ru='Сценарий ""Фактические данные"" не предназначен для ввода данных';uk='Сценарій ""Фактичні дані"" не призначений для введення даних'");
	ИначеЕсли ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.Сценарии.ИсполнениеБюджета") Тогда
		Сообщение = НСтр("ru='Сценарий ""Исполнение бюджета"" не предназначен для ввода данных';uk='Сценарій ""Виконання бюджету"" не призначений для введення даних'");
	КонецЕсли;
	
	Если Сообщение <> Неопределено Тогда
		ПоказатьПредупреждение(,Сообщение);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcelРасширениеПодключено(Результат, ДополнительныеПараметры) Экспорт
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИОтображениеТабличногоБюджета

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			Бюджет.ФиксацияСверху = ФиксацияСверху;
			Бюджет.ФиксацияСлева = ФиксацияСлева;
			Для Каждого СтрокаДерева из ДеревоЭлементовБюджета.ПолучитьЭлементы() Цикл;
				Элементы.ДеревоЭлементовБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
		
	Исключение
		
		ИдентификаторЗадания = Неопределено;
		
		ОтображениеСостояния = Элементы.Бюджет.ОтображениеСостояния;
		Если Не ОтображениеСостояния.Видимость Тогда
			
			ОтображениеСостояния.Видимость  = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка   = Новый Картинка;
			ОтображениеСостояния.Текст  = НСтр("ru='Ошибка формирования бюджета';uk='Помилка формування бюджету'");
			
		КонецЕсли;
		
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПроверкуРасчетаИзменений()
	
	Если Не ФайловаяИБ и ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = 1;
		ПодключитьОбработчикОжидания(
				"ПроверитьРасчетИзменений",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
	Иначе
		УстановитьНадписьОбновленияИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРасчетИзменений()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗапуститьЗаданиеПовторно = Ложь;
			Если ЕстьИзмененияКОтражению Тогда
				ЗапуститьЗаданиеПовторно = Истина;
			КонецЕсли;
			ЗагрузитьРезультатРасчетаИзменений();
			Если ЗапуститьЗаданиеПовторно Тогда
				ВремяПоследнегоРасчета = ТекущаяДата();
				УстановитьНадписьОбновленияИтогов(Истина);
				ОтразитьИзмененияБюджета();
				ЗапуститьПроверкуРасчетаИзменений();
			Иначе
				УстановитьНадписьОбновленияИтогов();
			КонецЕсли;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"ПроверитьРасчетИзменений",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ИдентификаторЗадания = Неопределено;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьОбновленияИтогов(СтартПроцесса = Ложь)
	
	Если Не АвтоматическоеОбновлениеБюджета Тогда
		Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.ПустаяНадпись;
		Возврат;
	КонецЕсли;
	
	Если СтартПроцесса Тогда
		ВремяНачалаРасчета = ТекущаяДата();
	Иначе
		ВремяПоследнегоРасчета = ТекущаяДата();
		ПродолжительностьПоследнегоРасчета = ВремяПоследнегоРасчета - ВремяНачалаРасчета;
	КонецЕсли;
		
	Если ПродолжительностьПоследнегоРасчета > 5 Тогда
		ТекстНадписи = НСтр("ru='Расчет занимает %1 сек.: рекомендуется отключить автообновление итогов';uk='Розрахунок займає %1 сек.: рекомендується відключити автооновлення підсумків'");
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ТекстНадписи, ПродолжительностьПоследнегоРасчета);
	КонецЕсли;
	
	Если ПродолжительностьПоследнегоРасчета > 5 Тогда
		Если СтартПроцесса Тогда
			Элементы.ДекорацияВыполняетсяОтключитьАвтоРасчет.Заголовок = ТекстНадписи;
			Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.ВыполняетсяРасчетСОшибками;
		Иначе
			Элементы.ДекорацияРекомендуетсяОтключитьАвтоРасчет.Заголовок = ТекстНадписи;
			Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.РекомендуетсяОтключитьАвтоРасчет;
		КонецЕсли;
	Иначе
		Если СтартПроцесса Тогда
			Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.ВыполняетсяРасчет;
		Иначе
			Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.ПустаяНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуВыполненияОтчета()
	
	Если Не ФайловаяИБ Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	Иначе
		Бюджет.ФиксацияСверху = ФиксацияСверху;
		Бюджет.ФиксацияСлева = ФиксацияСлева;
		Для Каждого СтрокаДерева из ДеревоЭлементовБюджета.ПолучитьЭлементы() Цикл;
			Элементы.ДеревоЭлементовБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, Знач Параметры, Знач НаименованиеЗадания = "")
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

	Задание = ФоновыеЗадания.Выполнить("РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации", ПараметрыЗадания,, НаименованиеЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	Результат.Вставить("Задание",              Задание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(Знач РезультатВыполнения = Неопределено)
	
	ТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
	ИндексСтроки = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = ДеревоЭлементовБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			ИндексСтроки = ОбластьБюджетаПоСтроке(Бюджет, ТекущиеДанные.ИДГруппировки);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатВыполнения = Неопределено Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Бюджет				= РезультатВыполнения.Результат;
	ФиксацияСлева 		= Бюджет.ФиксацияСлева;
	ФиксацияСверху 		= Бюджет.ФиксацияСверху;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения.ПараметрыВыводаВидаБюджета, ПараметрыВыводаВидаБюджета);
	ПоместитьВоВременноеХранилище(РезультатВыполнения.ДанныеЯчеек, АдресДанныхЯчеек);
	
	ЗначениеВРеквизитФормы(РезультатВыполнения.ДеревоСтрокСпискаРедактирования, "ДеревоЭлементовБюджета");
	
	Если ИндексСтроки <> Неопределено Тогда
		ИДГруппировки = Неопределено;
		Расшифровка = Бюджет.Область(ИндексСтроки, 1).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") 
			И Расшифровка.Свойство("ИДГруппировки", ИДГруппировки) Тогда
			
			НайденнаяСтрока = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДГруппировки", ИДГруппировки);
			Если НайденнаяСтрока <> Неопределено Тогда
				Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДеревоЭлементовБюджета.Обновить();
	
	ЭлементыУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы;
	
	УсловноеОформлениеКУдалению = Новый Массив;
	Для Каждого ЭлементУО из ЭлементыУсловногоОформления Цикл
		Если СтрНайти(ЭлементУО.Представление, "ДобавленноеУОДереваЭлементов_") Тогда
			УсловноеОформлениеКУдалению.Добавить(ЭлементУО);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУО из УсловноеОформлениеКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУО);
	КонецЦикла;
	
	Для Каждого КлючиСтилей из РезультатВыполнения.СтильУровней Цикл
		
		Стили = КлючиСтилей.Значение;
		
		Для Каждого КлючИЗначение из Стили Цикл
			
			Элемент = ЭлементыУсловногоОформления.Добавить();
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоЭлементовБюджета.Уровень");
			ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение 	= КлючИЗначение.Ключ;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоЭлементовБюджета.ИДТаблицы");
			ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение 	= КлючиСтилей.Ключ;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", КлючИЗначение.Значение.ЦветФона);
			
			ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЭлементовБюджетаПредставление");
			
			Элемент.Использование = Истина;
			Элемент.Представление = "ДобавленноеУОДереваЭлементов_" + КлючИЗначение.Ключ;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИдентификаторЗадания = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Бюджет, "НеИспользовать");
	Элементы.Бюджет.ТолькоПросмотр = Ложь;
	УдалитьИзВременногоХранилища(АдресХранилища);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатРасчетаИзменений(Знач Режим = "", РезультатВыполнения = Неопределено)
	
	Если РезультатВыполнения = Неопределено Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеЯчеек = Режим = "ОбновитьДанныеЯчеек";
	
	Если Не ОбновитьДанныеЯчеек Тогда
		
		ПредыдущееЗначениеАвтоЗаполнение = АвтоматическоеОбновлениеБюджета;
		АвтоматическоеОбновлениеБюджета = Ложь;
		
		ЕстьРасшифровка = РезультатВыполнения.Результат.Колонки.Найти("Расшифровка") <> Неопределено;
		
		Для Каждого Изменение из РезультатВыполнения.Результат Цикл
			Значение = ?(ЗначениеЗаполнено(Изменение.Значение), Изменение.Значение, Неопределено);
			Если ЕстьРасшифровка Тогда
				ОтразитьИзменениеЯчейки(Изменение.Расшифровка, Значение);
				Если ЗначениеЗаполнено(Изменение.ИмяОбласти) Тогда
					Область = Бюджет.Область(Изменение.ИмяОбласти);
					Если Область.СодержитЗначение Тогда
						Область.Значение = Значение;
					Иначе
						Область.Текст = Значение;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Область = Бюджет.Область(Изменение.ИмяОбласти);
				Если Область.СодержитЗначение Тогда
					Область.Значение = Значение;
					ОтразитьИзменениеЯчейки(Область.Расшифровка, Значение);
				Иначе
					Область.Текст = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		АвтоматическоеОбновлениеБюджета = ПредыдущееЗначениеАвтоЗаполнение;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения.ПараметрыВыводаВидаБюджета, ПараметрыВыводаВидаБюджета);
	ПоместитьВоВременноеХранилище(РезультатВыполнения.ДанныеЯчеек, АдресДанныхЯчеек);
	
	ИдентификаторЗадания = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилища);
	ЕстьИзмененияКОтражению = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияОтчетаРасшифровки()
	
	Попытка
		Расшифровка = Элементы.Бюджет.ТекущаяОбласть.Расшифровка;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	Возврат БюджетнаяОтчетностьВызовСервера.ПараметрыОткрытияОтчетаРасшифровки(ПараметрыОтчета, Расшифровка, АдресДанныхЯчеек);
	
КонецФункции

&НаКлиенте
Процедура ПослеСохраненияДокументаПередРасшифровкой(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность или Объект.Ссылка.Пустая() Тогда
		ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ПараметрыОткрытия = ПараметрыОткрытияОтчетаРасшифровки();
	Если ПараметрыОткрытия <> Неопределено Тогда
		БюджетнаяОтчетностьКлиент.ОткрытьФормуОтчета(ПараметрыОткрытия, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыводОтображениеИРедактированиеСпискаБюджета

&НаСервере
Процедура ДополнитьРасшифровкуПоПараметрамСтатьи(Расшифровка)
	Перем Значение, ОбъектВалютногоУчета;
	
	ЗначенияАналитик = Новый Соответствие;
	ВидыАналитик = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета).СтруктураКолонокТаблицыДанных.ВидыАналитик;
	Для Каждого ВидАналитики из ВидыАналитик Цикл
		КлючАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		Если Расшифровка.Свойство(КлючАналитики, Значение) Тогда
			ЗначенияАналитик.Вставить(ВидАналитики, Значение);
		КонецЕсли;
	КонецЦикла;
	
	Расшифровка.Вставить("ЗначенияАналитик", ЗначенияАналитик);
	
	Если Не Расшифровка.Свойство("Валюта") Тогда
		
		Если Расшифровка.Свойство("СтатьяБюджетов") Тогда
			КэшПараметровСтатей = Документы.ЭкземплярБюджета.РеквизитыСтатьиБюджетовИзКэша(Расшифровка.СтатьяБюджетов, АдресКэшаПараметровСтатей);
			Если КэшПараметровСтатей.ВалютаОпределяетсяАналитикой Тогда
				Если Расшифровка.Свойство(КэшПараметровСтатей.ИмяАналитикиВалюта, ОбъектВалютногоУчета) Тогда
					Если ЗначениеЗаполнено(ОбъектВалютногоУчета) Тогда
						ВалютаЯчейки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектВалютногоУчета, КэшПараметровСтатей.ПутьКАналитикеВалюта);
						Расшифровка.Вставить("Валюта", ВалютаЯчейки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасшифровкаОтчетаПоСтроке(РасшифровкаКолонки, ТекущаяСтрока, Измерения)
	
	Расшифровка = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасшифровкаКолонки);
	Для Каждого Измерение из Измерения Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока[Измерение]) Тогда
			ТекущаяСтрока[Измерение] = Неопределено;
		КонецЕсли;
		Расшифровка.Вставить(Измерение, ТекущаяСтрока[Измерение]);
	КонецЦикла;
	
	ДополнитьРасшифровкуПоПараметрамСтатьи(Расшифровка);
	
	Возврат Расшифровка;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеСписка(КолонкиПоИзмерениям, ФиксированныеЗначения, СтруктураАналогРасшифровки, ТолькоОбновить = Ложь)
	
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	ПараметрыЭкземпляраБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	ИндексыТаблицыДанныхЯчеек = ПараметрыЭкземпляраБюджета.ИндексыТаблицыДанныхЯчеек;
	ПараметрыЯчеек = ПараметрыЭкземпляраБюджета.СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	Если Не ТолькоОбновить Тогда
		СписокРедактированияБюджета.Очистить();
		ТаблицаОбработки = СписокРедактированияБюджета.Выгрузить(Новый Массив).СкопироватьКолонки();
		ТаблицаОбработки.Колонки.Добавить("МинимумНомерПоПорядку");
	КонецЕсли;
	
	Для Каждого Строка из КолонкиПоИзмерениям.СтрокиОснования Цикл
		
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка", Истина, Строка);
		Для Каждого КлючИЗначение из ФиксированныеЗначения Цикл
			СтруктураПоиска.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		СтрокиДанныхЯчеек = ДанныеЯчеек.Скопировать(СтруктураПоиска);
		СтрокиДанныхЯчеек.Сортировать("МинимумНомерПоПорядку");
		
		СтрокаСвертки = СтрСоединить(КолонкиПоИзмерениям.Измерения, ",");
		СтрокиДанных = СтрокиДанныхЯчеек.Скопировать();
		Если ПустаяСтрока(СтрокаСвертки) Тогда
			СтрокиДанных = Новый Массив;
			СтрокиДанных.Добавить(Новый Структура);
		Иначе
			СтрокиДанных.Свернуть(СтрокаСвертки);
		КонецЕсли;
		
		Для Каждого СтрокаДанных из СтрокиДанных Цикл
			
			СтруктураСумм = Новый Структура;
			СтруктураПримечаний = Новый Структура;
			
			ЕстьЗначимыеКолонки = Ложь;
			
			Для Каждого Расшифровка из СтруктураАналогРасшифровки Цикл
				ТекстИндекса = "ОсновнойЭлемент,Строка";
				СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка", Истина, Строка);
				Для Каждого Измерение из КолонкиПоИзмерениям.Измерения Цикл
					СтруктураПоиска.Вставить(Измерение, СтрокаДанных[Измерение]);
					ТекстИндекса = ТекстИндекса + "," + Измерение;
				КонецЦикла;
				ИмяПоказателя = "Сумма";
				Для Каждого КлючИЗначение из Расшифровка.Значение Цикл
					Если КлючИЗначение.Ключ = "Расчетная" Тогда
						//вспомогательная информация
						Продолжить;
					КонецЕсли;
					Если КлючИЗначение.Ключ = "ИмяПоказателя" Тогда
						ИмяПоказателя = КлючИЗначение.Значение;
						Продолжить;
					КонецЕсли;
					Значение = КлючИЗначение.Значение;
					Если Значение = Неопределено Тогда
						Значение = КолонкиПоИзмерениям.НастройкиКолонок[Измерение].ТипЗначения.ПривестиЗначение(Значение);
					КонецЕсли;
					СтруктураПоиска.Вставить(КлючИЗначение.Ключ, Значение);
					ТекстИндекса = ТекстИндекса + "," + КлючИЗначение.Ключ;
				КонецЦикла;
				
				Если ИндексыТаблицыДанныхЯчеек[ТекстИндекса] = Неопределено Тогда
					ДанныеЯчеек.Индексы.Добавить(ТекстИндекса);
					ИндексыТаблицыДанныхЯчеек.Вставить(ТекстИндекса, Истина);
				КонецЕсли;
				
				НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
				
				Значение = 0; Примечание = "";
				Если НайденныеСтроки.Количество() > 1 Тогда
					ВызватьИсключение НСтр("ru='Ошибка в структуре вида бюджета';uk='Помилка в структурі виду бюджету'")
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					СтрокаДанныхЯчеек = НайденныеСтроки[0];
					Если ИмяПоказателя = "Сумма" И ЗначениеЗаполнено(СтрокаДанныхЯчеек.Валюта) Тогда
						ИмяПоказателя = "СуммаВал";
					КонецЕсли;
					СтрокаПараметров = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
					Если СтрокаДанныхЯчеек.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
						Значение = СтрокаДанныхЯчеек.Значение;
					ИначеЕсли СтрокаДанныхЯчеек.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
						Значение = СтрокаДанныхЯчеек.Значение;
					ИначеЕсли СтрокаПараметров.СложнаяТаблица Тогда
						Значение = Неопределено;
						Если СтрокаПараметров.ФлагСумма Тогда
							Значение = СтрокаДанныхЯчеек[ИмяПоказателя];
						ИначеЕсли СтрокаПараметров.ФлагКоличество Тогда
							Значение = СтрокаДанныхЯчеек.Количество;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(Значение) Тогда
							Значение = 0;
						КонецЕсли;
					Иначе
						Значение = ?(СтрокаДанныхЯчеек[ИмяПоказателя]=Неопределено,0,СтрокаДанныхЯчеек[ИмяПоказателя]);
					КонецЕсли;
					Примечание = СтрокаДанныхЯчеек.Примечание;
				КонецЕсли;
				
				Если Значение <> 0 ИЛИ ТолькоОбновить Тогда
					Если Не Расшифровка.Значение.Свойство("Расчетная") Тогда
						ЕстьЗначимыеКолонки = Истина;
					КонецЕсли;
					СтруктураСумм.Вставить(Расшифровка.Ключ, Значение);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Примечание) Тогда
					СтруктураПримечаний.Вставить(Расшифровка.Ключ + "Примечание", Примечание);
					СтруктураПримечаний.Вставить(Расшифровка.Ключ + "КартинкаПримечание", БиблиотекаКартинок.Комментарий);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТолькоОбновить ИЛИ ЕстьЗначимыеКолонки ИЛИ СтруктураПримечаний.Количество() Тогда
				МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвертки);
				
				СтруктураПоискаВСписке = Новый Структура();
				СтруктураПоискаВДанных = Новый Структура();
				
				Для Каждого Измерение из МассивИзмерений Цикл
					Значение = СтрокаДанных[Измерение];
					СтруктураПоискаВДанных.Вставить(Измерение, Значение);
					Если Значение = Неопределено Тогда
						Значение = КолонкиПоИзмерениям.НастройкиКолонок[Измерение].ТипЗначения.ПривестиЗначение(Значение);
					КонецЕсли;
					СтруктураПоискаВСписке.Вставить(Измерение, Значение);
				КонецЦикла;
				
				Если ТолькоОбновить Тогда
					НайденныеСтроки = СписокРедактированияБюджета.НайтиСтроки(СтруктураПоискаВСписке);
					Если НайденныеСтроки.Количество() Тогда
						НоваяСтрока = НайденныеСтроки[0];
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					НоваяСтрока = ТаблицаОбработки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					СтруктураПоискаВДанных.Вставить("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
					СтрокиДляПоискаНомераПоПорядку = СтрокиДанныхЯчеек.НайтиСтроки(СтруктураПоискаВДанных);
					Для Каждого СтрокаНомера из СтрокиДляПоискаНомераПоПорядку Цикл
						Если СтрокаНомера.МинимумНомерПоПорядку <> Null Тогда
							НоваяСтрока.МинимумНомерПоПорядку = СтрокаНомера.МинимумНомерПоПорядку;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСумм);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПримечаний);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ТолькоОбновить Тогда
		ТаблицаОбработки.Сортировать("МинимумНомерПоПорядку");
		СписокРедактированияБюджета.Загрузить(ТаблицаОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаВводаНаСервере()
	
	ПредыдущаяСтрокаДереваЭлементов = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
	
	ТекстСообщения = НСтр("ru='Редактирование для текущей строки не предусмотрено. Выберите другую строку бюджета';uk='Редагування для поточного рядка не передбачено. Виберіть інший рядок бюджету'");
	Отказ = Ложь;
	ПроверитьЗаполнитьТаблицуКурсов(Отказ, ТекстСообщения);
	Если Не МожноОбновитьБюджет() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Элементы.ПримечаниеКТекущейСтроке.Заголовок = ТекстСообщения;
		Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.ИнформацияОСтроке;
		Возврат;
	КонецЕсли;
	
	ПараметрыЭкземпляраБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	СписокПараметров = ПараметрыЭкземпляраБюджета.СтруктураОписанияСпискаВвода;
	КолонкиТаблиц = ПараметрыЭкземпляраБюджета.КолонкиТаблиц;
	СтруктураЯчеек = ПараметрыЭкземпляраБюджета.СтруктураОписанияОтчета.СтруктураЯчеек;
	
	ИндексТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
	Если ИндексТекущаяСтрока = Неопределено Тогда
		Элементы.ПримечаниеКТекущейСтроке.Заголовок = ТекстСообщения;
		Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.ИнформацияОСтроке;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоЭлементовБюджета.НайтиПоИдентификатору(ИндексТекущаяСтрока);
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		
		КолонкиПоИзмерениям = Неопределено;
		Если Не Документы.ЭкземплярБюджета.СоставКолонокКорневогоЭлемента(ТекущаяСтрока, СписокПараметров, КолонкиПоИзмерениям) Тогда
			Элементы.ПримечаниеКТекущейСтроке.Заголовок = ТекстСообщения;
			Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.ИнформацияОСтроке;
			Возврат;
		КонецЕсли;
		
	Иначе
		
		КолонкиПоИзмерениям = СписокПараметров[ТекущаяСтрока.Строка];
		
	КонецЕсли;
	
	Если КолонкиПоИзмерениям = Неопределено Тогда
		Элементы.ПримечаниеКТекущейСтроке.Заголовок = ТекстСообщения;
		Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.ИнформацияОСтроке;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.СписокРедактирования;
	
	ОписаниеСтроки = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	
	//установка фиксированных значений для строки,
	//если в иерархии дерева уже определены значения группировок
	ФиксированныеЗначения = Новый Структура;
	СтрокаРасчета = ТекущаяСтрока;
	Пока СтрокаРасчета <> Неопределено Цикл
		Если ЗначениеЗаполнено(СтрокаРасчета.ИмяИзмерения) Тогда
			Если КолонкиПоИзмерениям.НастройкиКолонок.Свойство(СтрокаРасчета.ИмяИзмерения) Тогда
				Значение = Неопределено;
				Если Не СтрокаРасчета.ЭтоАналитикаПрочее Тогда
					Значение = СтрокаРасчета.ФиксированноеЗначение;
				КонецЕсли;
				Значение = КолонкиПоИзмерениям.НастройкиКолонок[СтрокаРасчета.ИмяИзмерения].ТипЗначения.ПривестиЗначение(Значение);
				ФиксированныеЗначения.Вставить(СтрокаРасчета.ИмяИзмерения, Значение);
			КонецЕсли;
		КонецЕсли;
		СтрокаРасчета = СтрокаРасчета.ПолучитьРодителя();
	КонецЦикла;
	
	ДобавляемыеЭлементы = Новый Массив;
	ДобавляемыеКолонки = Новый Массив;
	Документы.ЭкземплярБюджета.РассчитатьЭлементыСпискаБюджетаКДобавлению(
							ДобавляемыеЭлементы, ДобавляемыеКолонки, КолонкиПоИзмерениям, ФиксированныеЗначения);
	
	Если ИзмеренияРедактированияСовпадают(ОписаниеСтроки, КолонкиПоИзмерениям, ТекущаяСтрока.ИДТаблицы) Тогда
		
		СтруктураАналогРасшифровки = ОписаниеСтроки.СтруктураАналогРасшифровки;
		Для Каждого Колонка из ДобавляемыеКолонки Цикл
			
			Документы.ЭкземплярБюджета.УстановитьДоступностьСписокВыбораКолонки(Элементы[Колонка.Имя], Колонка, ФиксированныеЗначения);
			
		КонецЦикла;
		
	Иначе
		
		//колонки текущей таблицы
		СтруктураКолонок = КолонкиТаблиц[ТекущаяСтрока.ИДТаблицы];
		
		//структура с ключами полей текущей колонки
		СтруктураАналогРасшифровки = Новый Структура;
		
		Документы.ЭкземплярБюджета.ДобавитьКолонкиСпискаБюджетаПоТаблице(ДобавляемыеЭлементы, ДобавляемыеКолонки, 
														КолонкиПоИзмерениям, СтруктураКолонок, СтруктураАналогРасшифровки);
		
		Документы.ЭкземплярБюджета.ОтразитьИзмененияКолонокСпискаБюджетаНаФорме(ЭтаФорма, ДобавляемыеЭлементы, ДобавляемыеКолонки, ФиксированныеЗначения);
		
		ФиксироватьКолонокСлева = КолонкиПоИзмерениям.Измерения.Количество();
		Если ФиксироватьКолонокСлева <= 3 Тогда
			Элементы.СписокРедактированияБюджета.ФиксацияСлева = ФиксироватьКолонокСлева;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузитьДанныеСписка(КолонкиПоИзмерениям, ФиксированныеЗначения, СтруктураАналогРасшифровки);
	
	ОписаниеСтроки = Новый Структура();
	ОписаниеСтроки.Вставить("ФиксированныеЗначения", ФиксированныеЗначения);
	ОписаниеСтроки.Вставить("СтруктураАналогРасшифровки", СтруктураАналогРасшифровки);
	ОписаниеСтроки.Вставить("ИзменяемыеИзмерения", КолонкиПоИзмерениям.Измерения);
	ОписаниеСтроки.Вставить("КолонкиПоИзмерениям", КолонкиПоИзмерениям);
	ОписаниеСтроки.Вставить("ИДТаблицы", ТекущаяСтрока.ИДТаблицы);
	
	ПоместитьВоВременноеХранилище(ОписаниеСтроки, АдресПараметровРедактированияСтроки);
	
	РедактируемыеКолонкиСписка = СтрСоединить(КолонкиПоИзмерениям.Измерения, ",");
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияВДанных(ИндексСтроки, ИмяКолонки = "")
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ИндексСтроки);
	
	ЕстьИзмененияВСвязанныхЯчейках = Ложь;
	
	Если ИмяКолонки = "" Тогда
		
		Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
			
			ИмяКолонки = КлючИЗначение.Ключ;
			Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
			Если Расшифровка.Свойство("Расчетная") Тогда
				Продолжить;
			КонецЕсли;
			
			ОтразитьИзменениеЯчейки(Расшифровка, РедактируемаяСтрока[ИмяКолонки], РедактируемаяСтрока[ИмяКолонки + "Примечание"]);
			
		КонецЦикла;
		
	Иначе
		
		Если Не ПараметрыРедактирования.СтруктураАналогРасшифровки.Свойство(ИмяКолонки) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РедактируемаяСтрока[ИмяКолонки + "Примечание"]) Тогда
			РедактируемаяСтрока[ИмяКолонки + "КартинкаПримечание"] = БиблиотекаКартинок.Комментарий;
		Иначе
			РедактируемаяСтрока[ИмяКолонки + "КартинкаПримечание"] = Неопределено;
		КонецЕсли;
		
		ЗначенияКолонок = ПараметрыРедактирования.СтруктураАналогРасшифровки[ИмяКолонки];
		Расшифровка = РасшифровкаОтчетаПоСтроке(ЗначенияКолонок, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
		РезультатОтражения = ОтразитьИзменениеЯчейки(Расшифровка, РедактируемаяСтрока[ИмяКолонки], РедактируемаяСтрока[ИмяКолонки + "Примечание"]);
		
		Если АвтоматическоеОбновлениеБюджета Тогда
			
			//Для заполнения соответствующих значений НФП и Производных показателей должны быть заполнены
			//данные заполнены в ячейках
			ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек", ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования);
			
		КонецЕсли;
			
		Расшифровка.Удалить("ЗначенияАналитик");
		Расшифровка.Вставить("СтрокиОснования", ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования);
		ПараметрыОтчета = ДополнитьПараметрамиПериодами();
		ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьВыводСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, 
																		ПараметрыОтчета, Расшифровка, РезультатОтражения, АдресХранилища, , ЕстьИзмененияВСвязанныхЯчейках);
		ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета); // отражение расчета "пересчитываемых"
			
	КонецЕсли;
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек", ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования);
		
	КонецЕсли;
	
	Если АвтоматическоеОбновлениеБюджета ИЛИ ЕстьИзмененияВСвязанныхЯчейках Тогда
		
		//Если были изменения в "связанных" ячейках - отразим изменения в списке
		ЗагрузитьДанныеСписка(ПараметрыРедактирования.КолонкиПоИзмерениям, 
								ПараметрыРедактирования.ФиксированныеЗначения, 
								ПараметрыРедактирования.СтруктураАналогРасшифровки, 
								Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеИзменыемыхКолонок(ТекущаяСтрока)
	
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТребуетсяОчисткаЗначений = Ложь;
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	РасшифровкаПриНачалеРедактирования = ПолучитьИзВременногоХранилища(АдресРедактируемыхЗначенийСтрокиСписка);
	Для Каждого Измерение из ПараметрыРедактирования.ИзменяемыеИзмерения Цикл
		Если РедактируемаяСтрока[Измерение] <> РасшифровкаПриНачалеРедактирования[Измерение] Тогда
			ТребуетсяОчисткаЗначений = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяОчисткаЗначений Тогда
		РасшифровкаПриНачалеРедактирования.Вставить("Валюта", Неопределено);
		УдалитьСвязанныеСтрокиБюджетаНаСервере(ТекущаяСтрока, РасшифровкаПриНачалеРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзмеренияРедактированияСовпадают(ОписаниеСтроки, КолонкиПоИзмерениям, ИДТаблицы)
	
	Если ОписаниеСтроки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Измерения = КолонкиПоИзмерениям.Измерения;
	
	СписокИзмеренийСтарый = СтрСоединить(ОписаниеСтроки.ИзменяемыеИзмерения, ",");
	СписокИзмеренийНовый = СтрСоединить(Измерения, ",");
	
	Если СписокИзмеренийСтарый <> СписокИзмеренийНовый Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОписаниеСтроки.ИДТаблицы <> ИДТаблицы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОписаниеСтроки.КолонкиПоИзмерениям.Свойство("СтатьиБюджетов") Тогда
	
		Для Каждого ОписаниеКолонки из ОписаниеСтроки.СтруктураАналогРасшифровки Цикл
			
			Колонка = ОписаниеКолонки.Значение.Колонка;
			
			СравниваемыеЗначенияСтарые = ОписаниеСтроки.КолонкиПоИзмерениям.СтатьиБюджетов[Колонка];
			СравниваемыеЗначенияНовые = КолонкиПоИзмерениям.СтатьиБюджетов[Колонка];
			
			Если СравниваемыеЗначенияСтарые = Неопределено
				И СравниваемыеЗначенияНовые = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СравниваемыеЗначенияСтарые = Неопределено
				И СравниваемыеЗначенияНовые <> Неопределено 
				ИЛИ 
				СравниваемыеЗначенияСтарые <> Неопределено
				И СравниваемыеЗначенияНовые = Неопределено Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
			Если СравниваемыеЗначенияСтарые.СтатьяБюджетов <> СравниваемыеЗначенияНовые.СтатьяБюджетов
				ИЛИ СравниваемыеЗначенияСтарые.РедактируемоеЗначение <> СравниваемыеЗначенияНовые.РедактируемоеЗначение
				ИЛИ СравниваемыеЗначенияСтарые.ИмяПоказателя <> СравниваемыеЗначенияНовые.ИмяПоказателя Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыборУвеличенияСтроки(Результат, ДополнительныеПараметры) Экспорт
	
	ОткрытДиалогВопросаДубли = Ложь;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПринудительноеЗавершение = Истина;
		ИзмененияВСпискеОтраженыВДокументе = Истина;
		Элементы.СписокРедактированияБюджета.ЗакончитьРедактированиеСтроки(Ложь);
		
		УвеличитьЗначениеСтрокиНаСервере(ДополнительныеПараметры.Идентификатор);
		
		СтрокаТаблицы = СписокРедактированияБюджета.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
		Если СтрокаТаблицы <> Неопределено Тогда
			СписокРедактированияБюджета.Удалить(СписокРедактированияБюджета.Индекс(СтрокаТаблицы));
		КонецЕсли;
		
		Элементы.СписокРедактированияБюджета.Обновить();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ПринудительноеЗавершение = Истина;
		Элементы.СписокРедактированияБюджета.ЗакончитьРедактированиеСтроки(Истина);
		СтрокаТаблицы = СписокРедактированияБюджета.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
		Если СтрокаТаблицы <> Неопределено Тогда
			СписокРедактированияБюджета.Удалить(СписокРедактированияБюджета.Индекс(СтрокаТаблицы));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтразитьИзменениеЯчейки(Расшифровка, ТекстЗначения, Примечание = Неопределено)
	Перем ИмяПоказателя, РасшифровкаАналитика;
	
	ОбъектИПараметрыРасчета = СтруктураДляВызоваПроцедурМодуляМенеджера();
	Результат = Документы.ЭкземплярБюджета.ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, ТекстЗначения, Примечание);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УвеличитьЗначениеСтрокиНаСервере(ИндексСтроки)
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ИндексСтроки);
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	
	СтруктураПоиска = Новый Структура(РедактируемыеКолонкиСписка);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, РедактируемаяСтрока);
	
	НайденныеСтроки = СписокРедактированияБюджета.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока = РедактируемаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
			
			Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока[КлючИЗначение.Ключ] = НайденнаяСтрока[КлючИЗначение.Ключ] + РедактируемаяСтрока[КлючИЗначение.Ключ];
			Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, НайденнаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
			ОтразитьИзменениеЯчейки(Расшифровка, НайденнаяСтрока[КлючИЗначение.Ключ]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек", ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеСтрокиБюджетаНаСервере(ИндексСтроки, Знач РасшифровкаСтроки = Неопределено, ВыполнятьОбновлениеДанныхЯчеек = Истина)
	Перем Значение;
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ИндексСтроки);
	
	Если РасшифровкаСтроки <> Неопределено Тогда
		
		ЗначенияАналитик = Новый Соответствие;
		ВидыАналитик = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета).СтруктураКолонокТаблицыДанных.ВидыАналитик;
		Для Каждого ВидАналитики из ВидыАналитик Цикл
			КлючАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Если РасшифровкаСтроки.Свойство(КлючАналитики, Значение) Тогда
				ЗначенияАналитик.Вставить(ВидАналитики, Значение);
			КонецЕсли;
		КонецЦикла;
		
		РасшифровкаСтроки.Вставить("ЗначенияАналитик", ЗначенияАналитик);
		
	КонецЕсли;
	
	Для Каждого КолонкаСтруктуры из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
	
		Если КолонкаСтруктуры.Значение.Свойство("Расчетная") Тогда
			Продолжить;
		КонецЕсли;
		
		Если РасшифровкаСтроки <> Неопределено Тогда
			Расшифровка = РасшифровкаСтроки;
		Иначе
			Расшифровка = РасшифровкаОтчетаПоСтроке(КолонкаСтруктуры.Значение, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
		КонецЕсли;
		
		ОбрабатыватьКолонку = Расшифровка.Свойство("СтатьяБюджетов") и ЗначениеЗаполнено(Расшифровка.СтатьяБюджетов);
		ОбрабатыватьКолонку = ОбрабатыватьКолонку ИЛИ Расшифровка.Свойство("РедактируемоеЗначение");
		
		Если ОбрабатыватьКолонку Тогда
			ОтразитьИзменениеЯчейки(Расшифровка, 0, "");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполнятьОбновлениеДанныхЯчеек Тогда
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек", ПараметрыРедактирования.КолонкиПоИзмерениям.СтрокиОснования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПослеВводаЗначенияБудетДубль(ТекущаяСтрока)
	
	Если РедактируемыеКолонкиСписка = ""
		И СписокРедактированияБюджета.Количество() > 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(РедактируемыеКолонкиСписка);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, РедактируемаяСтрока);
	
	СтрокиПроверки = СписокРедактированияБюджета.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПроверки.Количество() > 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьНедоступныеЗначенияВЯчейках(ТекущаяСтрока)
	
	СтруктураЯчеек = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета).СтруктураОписанияОтчета.СтруктураЯчеек;
	ТекущиеДанные = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	Измерения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
	
	ТаблицаПоиска = СтруктураЯчеек;
	Для Каждого Измерение из Измерения Цикл
		Если БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Измерение, "Период") Тогда
			Продолжить;
		КонецЕсли;
		Значение = ТекущиеДанные[Измерение];
		Если Не ЗначениеЗаполнено(Значение) Тогда
			ТекущиеДанные[Измерение] = Неопределено;
			Значение = ТекущиеДанные[Измерение];
		КонецЕсли;
		СтруктураПоиска = Новый Структура(Измерение, Значение);
		ВременнаяТаблицаПоиска = ТаблицаПоиска.Скопировать(СтруктураПоиска);
		Если Не ВременнаяТаблицаПоиска.Количество() Тогда
			СтруктураПоиска = Новый Структура("Флаг" + Измерение, "документ");
			ВременнаяТаблицаПоиска = ТаблицаПоиска.Скопировать(СтруктураПоиска);
			Если Не ВременнаяТаблицаПоиска.Количество() Тогда
				Возврат Измерение;
			КонецЕсли;
		КонецЕсли;
		ТаблицаПоиска = ВременнаяТаблицаПоиска;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЕстьНедоступныеДляВводаЭлемента(ТекущаяСтрока, КолонкаСОшибкой = Неопределено)
	
	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Для Каждого Колонка из МассивКолонок Цикл 
		Если Элементы[Колонка].СписокВыбора.Количество() Тогда
			ЗначениеПоиска = РедактируемаяСтрока[Колонка];
			Если Не ЗначениеЗаполнено(ЗначениеПоиска) Тогда
				РедактируемаяСтрока[Колонка] = Неопределено;
				ЗначениеПоиска = РедактируемаяСтрока[Колонка];
			КонецЕсли;
			Если Элементы[Колонка].СписокВыбора.НайтиПоЗначению(ЗначениеПоиска) = Неопределено Тогда
				КолонкаСОшибкой = Колонка;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки = ЕстьНедоступныеЗначенияВЯчейках(ТекущаяСтрока);
	Если РезультатПроверки <> Неопределено Тогда
		КолонкаСОшибкой = РезультатПроверки;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиВСтрокеРедактированияБюджета(ТекущаяСтрока, РезультатПроверки)
	Перем КолонкаСОшибкой, ДопустимаяВалюта;
	
	Если ОтличаетсяВалютаАналитики(ТекущаяСтрока, ДопустимаяВалюта) Тогда
		РезультатПроверки = Новый Структура("Результат, ДопустимаяВалюта", "Отличается валюта аналитики", ДопустимаяВалюта);
		Возврат Истина;
	ИначеЕсли ПослеВводаЗначенияБудетДубль(ТекущаяСтрока) Тогда
		РезультатПроверки = Новый Структура("Результат", "После ввода значения будет дубль");
		Возврат Истина;
	ИначеЕсли ЕстьНедоступныеДляВводаЭлемента(ТекущаяСтрока, КолонкаСОшибкой) Тогда
		РезультатПроверки = Новый Структура("Результат, КолонкаСОшибкой", "Есть недоступные для ввода элемента", КолонкаСОшибкой);
		Возврат Истина;
	Иначе
		РезультатПроверки = Новый Структура("Результат", "ОК");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОтличаетсяВалютаАналитики(ТекущаяСтрока, ДопустимаяВалюта)
	
	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	
	КэшРеквизитовСтатей = Новый Соответствие;
	Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл 
		
		Если ЗначениеЗаполнено(РедактируемаяСтрока[КлючИЗначение.Ключ]) Тогда
			
			РасшифровкаКолонки = КлючИЗначение.Значение;
			Расшифровка = РасшифровкаОтчетаПоСтроке(РасшифровкаКолонки, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
			Валюта = Неопределено;
			Если Расшифровка.Свойство("Валюта", Валюта) Тогда
				ВалютаАналитики = Документы.ЭкземплярБюджета.ВалютаВводаАналитики(Расшифровка, КэшРеквизитовСтатей);
				Если ВалютаАналитики <> Неопределено Тогда
					Если ВалютаАналитики <> Валюта Тогда
						ДопустимаяВалюта = ВалютаАналитики;
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПереключениеРежимаТаблицаСписок

&НаКлиентеНаСервереБезКонтекста
Функция ОбластьБюджетаПоСтроке(Бюджет, ИскомаяСтрока)
	Перем ИДГруппировки;
	
	Для Сч = 1 По Бюджет.ВысотаСтраницы Цикл
		ОбластьБюджета = Бюджет.Область(Сч, 1);
		Расшифровка = ОбластьБюджета.Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") 
			И Расшифровка.Свойство("ИДГруппировки", ИДГруппировки)
			И ИДГруппировки = ИскомаяСтрока Тогда
			
			Возврат ОбластьБюджета.Верх;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено
	
КонецФункции

&НаСервере
Процедура УстановитьСтраницу()
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список Тогда
		Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица;
		Элементы.РедактироватьСписком.Картинка = БиблиотекаКартинок.Вперед;
		Элементы.РедактироватьСписком.Заголовок = НСтр("ru='Редактировать списком';uk='Редагувати списком'");
		Элементы.Добавить.Видимость = Ложь;
		Элементы.Скопировать.Видимость = Ложь;
		Элементы.Изменить.Видимость = Ложь;
		Элементы.Удалить.Видимость = Ложь;
		Элементы.Копировать.Видимость = Истина;
		Элементы.Вставить.Видимость = Истина;
		СформироватьОтчетСервер(Истина);
	Иначе
		Элементы.РедактироватьСписком.Заголовок = НСтр("ru='Табличный ввод';uk='Табличне введення'");
		Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список;
		Элементы.РедактироватьСписком.Картинка = БиблиотекаКартинок.Назад;
		Элементы.Добавить.Видимость = Истина;
		Элементы.Скопировать.Видимость = Истина;
		Элементы.Изменить.Видимость = Истина;
		Элементы.Удалить.Видимость = Истина;
		Элементы.Копировать.Видимость = Ложь;
		Элементы.Вставить.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСпискаВвода()
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница <> Элементы.Список Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока <> ПредыдущаяСтрокаДереваЭлементов Тогда
		УстановитьПараметрыСпискаВводаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПримечание(Команда)
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	Примечание = Неопределено;
	Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
		Для Строка = АктивнаяОбласть.Верх По АктивнаяОбласть.Низ Цикл
			Если Примечание = Неопределено Тогда
				Примечание = Бюджет.Область(Строка, Колонка).Примечание.Текст;
			Иначе
				НовоеПримечание = Бюджет.Область(Строка, Колонка).Примечание.Текст;
				Если НовоеПримечание <> Примечание Тогда
					Примечание = "";
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ПримечаниеЗавершениеВвода", ЭтотОбъект);
	ПоказатьВводСтроки(Оповещение, Примечание, НСтр("ru='Примечание';uk='Примітка'"), 500, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПримечание(Команда)
	
	УдалитьПримечаниеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПримечаниеЗавершениеВводаНаСервере(ВведенныйТекст);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПримечаниеЗавершениеВводаНаСервере(ВведенныйТекст)
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
		Для Строка = АктивнаяОбласть.Верх По АктивнаяОбласть.Низ Цикл
			Область = Бюджет.Область(Строка, Колонка);
			Если Область.СодержитЗначение Тогда
				ОтразитьИзменениеЯчейки(Область.Расшифровка, Область.Текст, ВведенныйТекст);
				Область.Примечание.Текст = ВведенныйТекст;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПримечаниеНаСервере()
	
	ПримечаниеЗавершениеВводаНаСервере("");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ЭкземплярБюджета.ФормаДокумента.Команда.Пересчитать");
	
	ПересчитатьНаСервере();
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаСервере
Функция СтруктураДляВызоваПроцедурМодуляМенеджера()
	
	ОбъектИПараметрыРасчета = Документы.ЭкземплярБюджета.СтруктураОбъектаДляРасчетаЯчейки();
	ОбъектИПараметрыРасчета.Объект 									= Объект;
	ОбъектИПараметрыРасчета.ВалютаСценария 							= ВалютаСценария;
	ОбъектИПараметрыРасчета.АдресКэшаПараметровСтатей 				= АдресКэшаПараметровСтатей;
	ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода = ТребоватьУказанияКурсовДляКаждогоПериода;
	ОбъектИПараметрыРасчета.АдресТаблицыКурсов 						= АдресТаблицыКурсов;
	ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета				= ПараметрыВыводаВидаБюджета;
	
	Возврат ОбъектИПараметрыРасчета;
	
КонецФункции

#КонецОбласти

#КонецОбласти
