#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет условия продаж в заказе поставщику
//
// Параметры:
//	УсловияЗакупок - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И Организация.Пустая() Тогда
		Организация = УсловияЗакупок.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Склад) И Склад.Пустая() Тогда
		
		Склад = УсловияЗакупок.Склад;
		
		СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
		Если СтруктураОтветственного <> Неопределено Тогда
			Принял = СтруктураОтветственного.Ответственный;
			ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) И УсловияЗакупок.Контрагент <> Контрагент Тогда
		Контрагент = УсловияЗакупок.Контрагент;
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
		Параметрыобъекта = ПараметрыОбъектаССоглашением();
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Параметрыобъекта, ХозяйственнаяОперацияДоговора);
		
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(
			Договор,
			БанковскийСчетОрганизации,
			БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия закупок по торговому соглашению с поставщиком
//
// Параметры:
//	ПересчитатьЦены - Булево - Истина, если необходимо пересчитать цены в табличной части документа
//
Процедура ЗаполнитьУсловияЗакупокПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УчитыватьГруппыСкладов", Истина);
		ПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Истина);
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, ПараметрыОтбора);
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
			Контрагент,
			,
			БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

#Область ВспомогательныеПеременные
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

#КонецОбласти

#Область ТчХарактеристикиИКоличество
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(
		ЭтотОбъект,
		МассивНепроверяемыхРеквизитов,
		Отказ);
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

#КонецОбласти

#Область ВозвратнаяТара
	
	Если Не ВернутьМногооборотнуюТару Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВозвратаМногооборотнойТары");
	КонецЕсли;
	
	Если ЗначениеЗаполнено("ДатаВозвратаМногооборотнойТары") И ВернутьМногооборотнуюТару И ДатаВозвратаМногооборотнойТары < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата возврата многооборотной тары не должна быть меньше даты документа.';uk='Дата повернення багатооборотної тари не повинна бути менша дати документа.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаВозвратаМногооборотнойТары",
			,
			Отказ);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	
	Если Не ВернутьМногооборотнуюТару И ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару") Тогда
		
		ТипыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Товары.ВыгрузитьКолонку("Номенклатура"), "ТипНоменклатуры");
		
		Для Каждого Строка Из Товары Цикл
			
			Если ТипыНоменклатуры[Строка.Номенклатура].ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.Цена) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Цена"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнено поле ""Ціна"" у рядку %НомерСтроки% списку ""Товари""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Строка.НомерСтроки, "Цена"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Строка.Сумма) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Сумма"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнено поле ""Сума"" в рядку %НомерСтроки% списку ""Товари""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Строка.НомерСтроки, "Сумма"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
#КонецОбласти

#Область Серии
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПоступлениеСырьяОтДавальца),
		Отказ,
		МассивНепроверяемыхРеквизитов);

#КонецОбласти

#Область ТчЗаказыДавальцев
	
	Если ПоступлениеПоЗаказам И Не ЗначениеЗаполнено(ЗаказДавальца) Тогда
		
		Для ТекИндекс = 0 По Товары.Количество() - 1 Цикл
			
			Если Не ЗначениеЗаполнено(Товары[ТекИндекс].ЗаказДавальца) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено поле ""Заказ давальца"" в строке %НомерСтроки% списка ""Товары""';uk='Не заповнено поле ""Замовлення давальця"" в рядку %НомерСтроки% списку ""Товари""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ЗаказДавальца"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

#КонецОбласти

#Область ИсключимПроверенныеРеквизитыИзДальнейшейПроверки
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

#КонецОбласти

#Область ПроверкаОстальныхРеквизитов
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
	
#КонецОбласти
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Перем СкладПоступления, РеквизитыШапки;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование")
			И  (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказДавальца")
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив")) Тогда
			
			ДанныеЗаполнения.Свойство("СкладПоступления", СкладПоступления);
			ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
			ЗаполнитьДокументНаОснованииЗаказаДавальца(ДанныеЗаполнения.ДокументОснование, СкладПоступления, РеквизитыШапки);
			
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		ЗаполнитьДокументНаОснованииЗаказаДавальца(ДанныеЗаполнения, СкладПоступления);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	Если ПоступлениеПоЗаказам И ЗначениеЗаполнено(ЗаказДавальца) Тогда
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказДавальца) Тогда
				ТекСтрока.ЗаказДавальца = ЗаказДавальца;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПоступлениеСырьяОтДавальца);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект,ПараметрыУказанияСерий);
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект, РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца,
			Склад,
			Подразделение,
			Партнер);
		
		// Если Склад - группа, то для аналитики учета номенклатуры склад берем из ТЧ
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		Если Склад.ЭтоГруппа И Склад.ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных Тогда
			ИменаПолей.Вставить("Произвольный", "Склад");
		КонецЕсли;
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Товары,
			МестаУчета,
			ИменаПолей);
		
		ЗаполнитьВидыЗапасовДокумента();
		ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ЗапасыСервер.ОчиститьАналитикуУчетаПартийВТабличнойЧасти(Товары)
		
	КонецЕсли;
	
	
	ЕстьНазначение = Ложь;
	Если Товары.Количество() > 0 Тогда
		
		Если Не ЗаказДавальца.Пустая() Тогда
			
			ЕстьНазначение = Истина;
			
		Иначе
			
			ПараметрыОтбора = Новый Структура("ЗаказДавальца", Документы.ЗаказДавальца.ПустаяСсылка());
			Если Товары.Количество() <> Товары.НайтиСтроки(ПараметрыОтбора).Количество() Тогда
				ЕстьНазначение = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.ПоступлениеСырьяОтДавальца.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗаказыСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ТоварыКОформлениюПоступления.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	МногооборотнаяТараСервер.ОтразитьПринятуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Согласован               = Ложь;
	ВидЗапасов               = Неопределено;
	ПоступлениеПоЗаказам     = Ложь;
	ЗаказДавальца            = Документы.ЗаказДавальца.ПустаяСсылка();
	ДатаВходящегоДокумента   = Дата(1,1,1);
	НомерВходящегоДокумента  = "";
	
	ДатаВозвратаМногооборотнойТары        = Дата(1,1,1);
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	// Коды строк и заказы переработчикам очищаем во всех строках
	Массив = Новый Массив(Товары.Количество());
	Товары.ЗагрузитьКолонку(Массив, "КодСтроки");
	Товары.ЗагрузитьКолонку(Массив, "ЗаказДавальца");
	
	Серии.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииЗаказаДавальца(Знач ДокументОснование, Знач СкладПоступления = Неопределено, РеквизитыЗаказа = Неопределено)
	
	ТипОснования = ТипЗнч(ДокументОснование);
	ЗаполнятьПоОстаткам = Ложь;
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказДавальца.Ссылка           КАК ЗаказДавальца,
		|	ЗаказДавальца.Сделка           КАК Сделка,
		|	ЗаказДавальца.Партнер          КАК Партнер,
		|	ЗаказДавальца.Контрагент       КАК Контрагент,
		|	ЗаказДавальца.Договор          КАК Договор,
		|	ЗаказДавальца.Организация      КАК Организация,
		|	ЗаказДавальца.Валюта           КАК Валюта,
		|
		|	ВЫБОР КОГДА ЗаказДавальца.СкладПоступления.ЭтоГруппа
		|			  И ЗаказДавальца.СкладПоступления.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах) ТОГДА
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	ИНАЧЕ
		|		ЗаказДавальца.СкладПоступления
		|	КОНЕЦ                          КАК Склад,
		|
		|	ВЫБОР КОГДА ЗаказДавальца.СкладПоступления.ЭтоГруппа
		|			  И ЗаказДавальца.СкладПоступления.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ                          КАК ЗапрещеноВыбиратьГруппуСкладов,
		|
		|	ЗаказДавальца.Статус           КАК СтатусДокумента,
		|	ЗаказДавальца.Подразделение    КАК Подразделение,
		|	НЕ ЗаказДавальца.Проведен      КАК ЕстьОшибкиПроведен,
		|
		|	ВЫБОР КОГДА ЗаказДавальца.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ЗаказДавальца.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|			ИЛИ ЗаказДавальца.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт) ТОГДА
		|		ЛОЖЬ
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ                          КАК ЕстьОшибкиСтатус,
		|
		|	ЗаказДавальца.ВернутьМногооборотнуюТару			КАК ВернутьМногооборотнуюТару,
		|	ЗаказДавальца.СрокВозвратаМногооборотнойТары	КАК СрокВозвратаМногооборотнойТары,
		|	ЗаказДавальца.БанковскийСчет                    КАК БанковскийСчетОрганизации,
		|	ЗаказДавальца.ГруппаФинансовогоУчета            КАК ГруппаФинансовогоУчета
		|ИЗ
		|	Документ.ЗаказДавальца КАК ЗаказДавальца
		|ГДЕ
		|	ЗаказДавальца.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование) КАК ЗаказыОстатки";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказДавальца,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен,
			РеквизитыЗаказа.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ЭтотОбъект,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			Ложь,
			Неопределено);
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ЭтотОбъект,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			Ложь,
			Неопределено);
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказыОстатки.Склад КАК Склад
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&МассивДокументов)) КАК ЗаказыОстатки";
			
			РезультатЗапросаПоСкладам = Запрос.Выполнить();
			МассивСкладов = РезультатЗапросаПоСкладам.Выгрузить().ВыгрузитьКолонку("Склад");
			Склад = РеквизитыЗаказа.СкладПоступления;
			
		КонецЕсли;
		
		Если Валюта.Пустая() Тогда
			Валюта = РеквизитыЗаказа.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(
			Договор,
			БанковскийСчетОрганизации,
			БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	// Заполнение т.ч. товары.
	Если Не ЗначениеЗаполнено(СкладПоступления) Тогда
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			
			// Только услуги
			Если МассивСкладов.Количество() = 0 Тогда
				ЗаполнятьПоОстаткам = Истина;
				
			// Услуги или товары
			ИначеЕсли МассивСкладов.Количество() = 1 Тогда
				СкладПоступления = МассивСкладов[0];
				Склад = СкладПоступления;
				ЗаполнятьПоОстаткам = Истина;
				
			// Услуги и товары
			ИначеЕсли МассивСкладов.Количество() = 2 Тогда
				Если Не ЗначениеЗаполнено(МассивСкладов[0]) Или
					Не ЗначениеЗаполнено(МассивСкладов[1]) Тогда
					СкладПоступления = ?(ЗначениеЗаполнено(МассивСкладов[0]), МассивСкладов[0], МассивСкладов[1]);
					Склад = СкладПоступления;
					ЗаполнятьПоОстаткам = Истина;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ЗаполнятьПоОстаткам = Истина;
			СкладПоступления = Склад;
			
		КонецЕсли;
		
	Иначе
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			Склад = СкладПоступления;
		КонецЕсли;
		ЗаполнятьПоОстаткам = Истина;
		
	КонецЕсли;
	
	Если ЗаполнятьПоОстаткам Тогда
		
		Если ТипОснования = Тип("Массив") Тогда
			МассивЗаказов = ДокументОснование;
		Иначе
			МассивЗаказов = Новый Массив();
			МассивЗаказов.Добавить(ЗаказДавальца);
		КонецЕсли;
		
		Документы.ПоступлениеСырьяОтДавальца.ЗаполнитьПоОстаткамЗаказов(
			ЭтотОбъект,
			Товары,
			?(СкладПоступления = Неопределено, Справочники.Склады.ПустаяСсылка(), СкладПоступления),
			МассивЗаказов);
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(
			ЗаказДавальца,
			Товары,
			"ЗаказДавальца");
		
	КонецЕсли;
	
	ПоступлениеПоЗаказам = Истина;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер                  = Пользователи.ТекущийПользователь();
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Организация;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"), Истина);
	ПоступлениеПоЗаказам      = Истина; // Всегда только по заказам
	
	СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Принял = СтруктураОтветственного.Ответственный;
		ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасовДокумента()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки   КАК НомерСтроки,
	|	ТаблицаТоваров.ЗаказДавальца КАК ЗаказДавальца,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ВидЗапасов    КАК ВидЗапасов
	|
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                   КАК НомерСтроки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры    КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                       КАК Номенклатура,
	|	ВЫБОР КОГДА Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                        КАК ЭтоВозвратнаяТара,
	|	ВЫБОР
	|		КОГДА Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ Заказ.Назначение 
	|	КОНЕЦ 										 КАК Назначение,
	|	&Подразделение                               КАК Подразделение,
	|	&Менеджер                                    КАК Менеджер,
	|	&Организация                                 КАК Организация,
	|	&ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)     КАК ТипЗапасов,
	|	&Соглашение                                  КАК Соглашение,
	|	&Сделка                                      КАК Сделка,
	|	&Валюта                                      КАК Валюта,
	|	&НалоговоеНазначение                         КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации              КАК НалоговоеНазначениеОрганизации,
	|	&Партнер                                     КАК Поставщик,
	|	&Контрагент                                  КАК Контрагент,
	|	&Договор                                     КАК Договор,
	|	НЕОПРЕДЕЛЕНО                                 КАК ГруппаПродукции
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказДавальца КАК Заказ
	|	ПО
	|		ТаблицаТоваров.ЗаказДавальца = Заказ.Ссылка
	|	
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	ИЛИ ВидыЗапасов.ТипЗапасов <> 
	|		ВЫБОР КОГДА Аналитика.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)
	|		КОНЕЦ 
	|	ИЛИ ВидыЗапасов.Организация <> &Организация
	|	ИЛИ (Не &ФормироватьВидыЗапасовПоПоставщикам              И ВидыЗапасов.Поставщик     <> НЕОПРЕДЕЛЕНО)
	|	ИЛИ (Не &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И ВидыЗапасов.Менеджер      <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	ИЛИ (Не &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И ВидыЗапасов.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров",             Товары.Выгрузить(, "НомерСтроки, ЗаказДавальца, АналитикаУчетаНоменклатуры, ВидЗапасов"));
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("Партнер",                    Партнер);
	Запрос.УстановитьПараметр("Контрагент",                 Контрагент);
	Запрос.УстановитьПараметр("Соглашение",                 Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСделка",               Справочники.СделкиСклиентами.ПустаяСсылка());
	Запрос.УстановитьПараметр("Договор",                    Договор);
	Запрос.УстановитьПараметр("Валюта",                     Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Сделка",                     Справочники.СделкиСКлиентами.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговоеНазначение",        Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата));
	Запрос.УстановитьПараметр("Менеджер",                   Менеджер);
	Запрос.УстановитьПараметр("МатериалДавальца",           Перечисления.ТипыЗапасов.МатериалДавальца);
	Запрос.УстановитьПараметр("Подразделение",              Подразделение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",      Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца);
	Запрос.УстановитьПараметр("ПоступлениеПоЗаказам",       ПоступлениеПоЗаказам);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару",  ВернутьМногооборотнуюТару);
	
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению",      ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПоставщикам",              ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПоставщикам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

#КонецОбласти

#Область АналитикиУчетаПартий

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти(ТабличнаяЧасть)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура         КАК Номенклатура,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура         КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО                        КАК СтавкаНДС,
	|	&НалоговоеНазначениеОрганизации     КАК НалоговоеНазначение,
	|	&Поставщик                          КАК Поставщик,
	|	&Контрагент                         КАК Контрагент,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",     ТабличнаяЧасть.Выгрузить(, "НомерСтроки, Номенклатура, АналитикаУчетаПартий"));
	Запрос.УстановитьПараметр("Поставщик",          Партнер);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата));
	
	Запрос.Выполнить();
	
	ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ТабличнаяЧасть);
	
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт
	
	ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти(Товары);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПараметрыОбъектаССоглашением(ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ПринятаяВозвратнаяТара);
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.ЗаказыПоставщикам);
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
