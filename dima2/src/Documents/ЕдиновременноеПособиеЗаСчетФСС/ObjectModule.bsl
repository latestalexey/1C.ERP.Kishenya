#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
		ИначеЕсли ДанныеЗаполнения.Свойство("Сотрудник") И ЗначениеЗаполнено(ДанныеЗаполнения.Сотрудник) Тогда
			ДанныеЗаполнения = ДанныеЗаполнения.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаСобытия);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Не проверяем работет ли человек при выплате пособия стороннему физлицу
	Если Не ПособиеСтороннемуФизлицу() Тогда
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 		= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода		= Дата;
		ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода	= Дата;
		
		КадровыйУчет.ПроверитьРаботающихФизическихЛиц(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
			ПараметрыПолученияСотрудниковОрганизаций,
			Отказ,
			Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "ФизическоеЛицо", "Объект")
		);
	КонецЕсли;
			
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	Если ПорядокВыплаты <> Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ДанныеДляПроведения();
	
	
	Если Не ПособиеСтороннемуФизлицу() Тогда
		
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(ЭтотОбъект.Движения, Отказ, Организация, ПериодРегистрации,
		ДанныеДляПроведения.НачисленияДокумента, Неопределено, Неопределено, Неопределено, ПорядокВыплаты);
		
		// - Регистрация в учете НДФЛ.
		УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, КонецМесяца(ПериодРегистрации), ДанныеДляПроведения.НДФЛ, Истина);
		
		
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
		Движения, Отказ, Организация, ПериодРегистрации,
		ДанныеДляПроведения.НачисленияДокумента,
		Неопределено,
		Неопределено,
		Истина);
	Иначе
		
		УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения.НачисленияДокумента);
		// - Регистрация начислений и удержаний.
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоКонтрагентамАкционерам(
					Движения, Отказ, Организация, ПериодРегистрации,
					ДанныеДляПроведения.НачисленияДокумента,
					Неопределено,
					Неопределено,
					Истина);
		УчетНДФЛРасширенный.СформироватьНачислениеНДФЛПоТаблицеЗначений(Движения, Отказ, Организация, Дата, ДанныеДляПроведения.НДФЛ);
		УчетНДФЛРасширенный.СформироватьПеречислениеНДФЛПоТаблицеЗначений(Движения, Отказ, Организация, Дата, ДанныеДляПроведения.НДФЛ, Истина, Истина);			
					
	КонецЕсли;
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Подготавливает структуру таблиц для проведения.
//
Функция ДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(Ссылка.Сотрудник) Тогда
		ОсновныеСотрудникиФизическихЛиц = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка.ФизическоеЛицо), Истина, Ссылка.Организация, Ссылка.ДатаСобытия);
		Если ОсновныеСотрудникиФизическихЛиц.Количество() > 0 Тогда
			Сотрудник = ОсновныеСотрудникиФизическихЛиц[0].Сотрудник;
			КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОсновныеСотрудникиФизическихЛиц[0].Сотрудник, "Подразделение", Ссылка.ДатаСобытия);
			Если НЕ КадровыеДанные.Количество() = 0 Тогда
				Подразделение = КадровыеДанные[0].Подразделение;
			Иначе
				Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Сотрудник = Ссылка.Сотрудник;
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "Подразделение", Ссылка.ДатаСобытия);
		Если НЕ КадровыеДанные.Количество() = 0 Тогда
			Подразделение = КадровыеДанные[0].Подразделение;
		Иначе
			Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	СоздатьВТДанныеДокумента(Запрос, Сотрудник, Подразделение);
	
	СоздатьВТНачисления(Запрос, Сотрудник, Подразделение);
	
	
	ДанныеДляПроведения.Вставить("НачисленияДокумента", 	НачисленияДокумента(Запрос));
	ДанныеДляПроведения.Вставить("НДФЛ", ТаблицаНДФЛ(Сотрудник, Подразделение));
	ДанныеДляПроведения.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	Возврат ДанныеДляПроведения;
	
КонецФункции 

Процедура СоздатьВТДанныеДокумента(Запрос, Сотрудник, Подразделение);
	
	Запрос.УстановитьПараметр("Сотрудник", 		Сотрудник);
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Запрос.УстановитьПараметр("ТерриторияВыполненияРаботВОрганизации", Подразделение);	
	Запрос.УстановитьПараметр("Статья213", 		ОтражениеЗарплатыВБухучетеРасширенный.СтатьяРасходов213());
	Запрос.УстановитьПараметр("Начисление", Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение);
	
	Запрос.Текст =
	
		"ВЫБРАТЬ
	|	&Сотрудник КАК Сотрудник,
	|	ЕдиновременноеПособие.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&Подразделение КАК Подразделение,
	|	&ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	ВЫБОР
	|		КОГДА ЕдиновременноеПособие.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПустаяСсылка)
	|	КОНЕЦ КАК НачислениеДляРасчетногоЛистка,
	|	ЕдиновременноеПособие.ВидПособия КАК ВидПособияСоциальногоСтрахования,
	|	ЕдиновременноеПособие.Начислено КАК СуммаДохода,
	|	0 КАК СуммаВычетаВзносы,
	|	ЕдиновременноеПособие.ДатаСобытия КАК ДатаНачалаСобытия,
	|	ЕдиновременноеПособие.ДатаСобытия КАК ДатаНачала,
	|	ЕдиновременноеПособие.ДатаСобытия КАК ДатаОкончания,
	|	ЕдиновременноеПособие.СтатьяФинансирования,
	|	&Статья213 КАК СтатьяРасходов,
	|	ЛОЖЬ КАК Сторно,
	|	ЗНАЧЕНИЕ(Документ.ЕдиновременноеПособиеЗаСчетФСС.ПустаяСсылка) КАК СторнируемыйДокумент,
	|	ЕСТЬNULL(Настройка.ГруппаУчета, ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС)) КАК ГруппаУчетаНачислений
	|ПОМЕСТИТЬ ВТНачисленияДокумента
	|ИЗ
	|	Документ.ЕдиновременноеПособиеЗаСчетФСС КАК ЕдиновременноеПособие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаГруппУчетаОсобыхНачисленийИУдержаний КАК Настройка
	|		ПО (Настройка.НачислениеУдержание = &Начисление)
	|ГДЕ
	|	ЕдиновременноеПособие.Ссылка = &Ссылка";

	
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		
		Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	&Сотрудник,
		|	ЕдиновременноеПособие.ФизическоеЛицо,
		|	&Подразделение,
		|	&ТерриторияВыполненияРаботВОрганизации,
		|	ВЫБОР
		|		КОГДА ЕдиновременноеПособие.ВидПособия = ЗНАЧЕНИЕ(Перечисление.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПустаяСсылка)
		|	КОНЕЦ КАК НачислениеДляРасчетногоЛистка,
		|	ЕдиновременноеПособие.ВидПособия КАК ВидПособияСоциальногоСтрахования,
		|	ЕдиновременноеПособие.Начислено * -1 КАК СуммаДохода,
		|	0 КАК СуммаВычетаВзносы,
		|	ЕдиновременноеПособие.ДатаСобытия КАК ДатаНачалаСобытия,
		|	ЕдиновременноеПособие.ДатаСобытия КАК ДатаНачала,
		|	ЕдиновременноеПособие.ДатаСобытия КАК ДатаОкончания,
		|	ЕдиновременноеПособие.СтатьяФинансирования,
		|	&Статья213 КАК СтатьяРасходов,
		|	ИСТИНА КАК Сторно,
		|	ЕдиновременноеПособие.Ссылка КАК СторнируемыйДокумент,
		|	ЕСТЬNULL(Настройка.ГруппаУчета, ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС)) КАК ГруппаУчетаНачислений
		|ИЗ
		|	РегистрСведений.НастройкаГруппУчетаОсобыхНачисленийИУдержаний КАК Настройка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЕдиновременноеПособиеЗаСчетФСС КАК ЕдиновременноеПособие
		|		ПО (Настройка.НачислениеУдержание = &Начисление)
		|ГДЕ
		|	ЕдиновременноеПособие.Ссылка = &ИсправленныйДокумент
		|	И ЕдиновременноеПособие.Проведен";	
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНачисления(Запрос, Сотрудник, Подразделение);
	ОтражениеЗарплатыВБухучете.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТНачисленияДокумента", "Сотрудник,ДатаНачала", Организация, Подразделение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ДатаНачала,
	|	Начисления.НачислениеДляРасчетногоЛистка,
	|	Начисления.Подразделение КАК ПодразделениеОрганизации,
	|	Начисления.Подразделение,
	|	Начисления.СуммаДохода,
	|	Начисления.СуммаВычетаВзносы,
	|	Начисления.ДатаНачала КАК ДатаОкончания,
	|	Начисления.Сторно,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.ВидПособияСоциальногоСтрахования,
	|	Начисления.ДатаНачалаСобытия,
	|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
	|	Начисления.СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА &ИспользоватьСтатьиФинансирования
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.СтатьяФинансирования = ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|						ТОГДА СведенияОБухучетеЗарплатыСотрудников.СтатьяФинансирования
	|					ИНАЧЕ Начисления.СтатьяФинансирования
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяФинансирования,
	|	ЕСТЬNULL(Настройка.ГруппаУчета, ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС)) КАК ГруппаУчетаНачислений,
	|	СведенияОБухучетеЗарплатыСотрудников.ТерриторияВыполненияРаботВОрганизации
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТНачисленияДокумента КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК СведенияОБухучетеЗарплатыСотрудников
	|		ПО Начисления.Сотрудник = СведенияОБухучетеЗарплатыСотрудников.Сотрудник
	|			И Начисления.Подразделение = СведенияОБухучетеЗарплатыСотрудников.Подразделение
	|			И Начисления.ДатаНачала = СведенияОБухучетеЗарплатыСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаГруппУчетаОсобыхНачисленийИУдержаний КАК Настройка
	|		ПО (Настройка.НачислениеУдержание = &Начисление)";
	
	Запрос.УстановитьПараметр("ИспользоватьСтатьиФинансирования", ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата"));
	Запрос.УстановитьПараметр("Начисление", Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение);
	
	Запрос.Выполнить();
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТСведенияОБухучетеЗарплатыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисленияДокумента";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НачисленияДокумента(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.НачислениеДляРасчетногоЛистка КАК Начисление,
	|	СУММА(Начисления.СуммаДохода) КАК Сумма,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	Начисления.СтатьяФинансирования,
	|	Начисления.СтатьяРасходов,
	|	ЕСТЬNULL(Настройка.ГруппаУчета, ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС)) КАК ГруппаУчетаНачислений
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаГруппУчетаОсобыхНачисленийИУдержаний КАК Настройка
	|		ПО (Настройка.НачислениеУдержание = &Начисление)
	|ГДЕ
	|	Начисления.НачислениеДляРасчетногоЛистка <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Начисления.Сотрудник,
	|	Начисления.ФизическоеЛицо,
	|	Начисления.Подразделение,
	|	Начисления.НачислениеДляРасчетногоЛистка,
	|	Начисления.СтатьяФинансирования,
	|	Начисления.СтатьяРасходов,
	|	ЕСТЬNULL(Настройка.ГруппаУчета, ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС))";

	
	Запрос.УстановитьПараметр("Начисление", Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Функция ТаблицаНДФЛ(Сотрудник, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Начисление", Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение);
	Запрос.УстановитьПараметр("КодДохода", 
	УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)[0]);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Запрос.Текст ="ВЫБРАТЬ
	|	&Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&Подразделение КАК Подразделение,
	|	&Подразделение КАК ПодразделениеСотрудника,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.Начислено КАК Сумма,
	|	Начисления.Начислено КАК СуммаДохода,
	|	Начисления.Начислено КАК Доход,
	|	0 КАК Налог,
	|	&Начисление КАК Начисление,
	|	&КодДохода КАК КодДохода,
	|	&ПериодРегистрации КАК ДатаНачала,
	|	&ПериодРегистрации КАК НалоговыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата) КАК ВидЕСВ,
	|	ЛОЖЬ КАК ЭтоОтпускные,
	|	ЕСТЬNULL(Настройка.ГруппаУчета, ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС)) КАК ГруппаУчетаНачислений,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.НДФЛ) КАК ГруппаУчетаУдержаний
	|ИЗ
	|	Документ.ЕдиновременноеПособиеЗаСчетФСС КАК Начисления
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НастройкаГруппУчетаОсобыхНачисленийИУдержаний КАК Настройка
	|	ПО Настройка.НачислениеУдержание = &Начисление
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции







Функция ПособиеСтороннемуФизлицу()
	Возврат ВидПособия = Перечисления.ПереченьПособийСоциальногоСтрахования.ВСвязиСоСмертью И Не ПособиеНаПогребениеСотруднику;
КонецФункции

#КонецОбласти

#КонецЕсли
