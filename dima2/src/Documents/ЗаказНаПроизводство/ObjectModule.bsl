#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Осуществляет расчет графика выпуска
//
Функция РассчитатьГрафикВыпуска() Экспорт
	
	ПараметрыДляРасчетаГрафика = ПараметрыДляРасчетаГрафика();
	РезультатРасчета = Документы.ЗаказНаПроизводство.ПолучитьГрафикВыпускаПродукции(ПараметрыДляРасчетаГрафика);
	ЗагрузитьРезультатРасчетаГрафика(РезультатРасчета, ПараметрыДляРасчетаГрафика);
	
	Возврат РезультатРасчета;
	
КонецФункции

// Получает данные расчет графика выпуска по данным документа
//
Функция ПараметрыДляРасчетаГрафика() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",             Ссылка);
	Результат.Вставить("Назначение",         Назначение);
	Результат.Вставить("НомерВОчереди",      Очередь);
	Результат.Вставить("ПриоритетНомер",     ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приоритет, "РеквизитДопУпорядочивания"));
	Результат.Вставить("ПодразделениеНомер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "РеквизитДопУпорядочивания"));
	Результат.Вставить("Статус",             Статус);
	Результат.Вставить("Отладка",            Ложь);
	
	Результат.Вставить("ИгнорироватьОграниченияДоступностиМатериалов", ИгнорироватьОграниченияДоступностиМатериалов);
	Результат.Вставить("ИгнорироватьОграниченияДоступностиВидовРабочихЦентров", ИгнорироватьОграниченияДоступностиВидовРабочихЦентров);
	Результат.Вставить("НаПустойЗавод", НаПустойЗавод);
	Результат.Вставить("ЗадействоватьРезервДоступности", ЗадействоватьРезервДоступности);
	
	Результат.Вставить("Продукция",             Продукция.Выгрузить());
	Результат.Вставить("Этапы",                 ПолучитьЭтапы());
	Результат.Вставить("ВыходныеИзделия",       ВыходныеИзделия.Выгрузить());
	Результат.Вставить("ВозвратныеОтходы",      ВозвратныеОтходы.Выгрузить());
	Результат.Вставить("МатериалыИУслуги",      ПолучитьМатериалыИУслуги());
	Результат.Вставить("Трудозатраты",          ПолучитьТрудозатраты());
	Результат.Вставить("ВидыРабочихЦентров",    ВидыРабочихЦентровДляРасчетаГрафика());
	Результат.Вставить("ДатыОбеспечения",       ПолучитьДатыОбеспечения());
	
	Результат.Вставить("ПродукцияГрафик",              ПолучитьПродукцияГрафик());
	Результат.Вставить("ЭтапыГрафик",                  ПолучитьЭтапыГрафик());
	Результат.Вставить("ВыходныеИзделияГрафик",        ПолучитьВыходныеИзделияГрафик());
	Результат.Вставить("ВозвратныеОтходыГрафик",       ПолучитьВозвратныеОтходыГрафик());
	Результат.Вставить("МатериалыИУслугиГрафик",       ПолучитьМатериалыИУслугиГрафик());
	Результат.Вставить("ТрудозатратыГрафик",           ПолучитьТрудозатратыГрафик());
	Результат.Вставить("ЗанятостьВидовРабочихЦентров", ПолучитьЗанятостьВидовРабочихЦентров());
	
	Возврат Результат;
	
КонецФункции

// Загружает рассчитанный графика выпуска в документ
//
Процедура ЗагрузитьРезультатРасчетаГрафика(РезультатРасчета, Параметры) Экспорт
	
	Продукция.Загрузить(Параметры.Продукция);
	ПродукцияГрафик.Загрузить(Параметры.ПродукцияГрафик);
	ЭтапыГрафик.Загрузить(Параметры.ЭтапыГрафик);
	ВыходныеИзделияГрафик.Загрузить(Параметры.ВыходныеИзделияГрафик);
	ВозвратныеОтходыГрафик.Загрузить(Параметры.ВозвратныеОтходыГрафик);
	МатериалыИУслугиГрафик.Загрузить(Параметры.МатериалыИУслугиГрафик);
	ТрудозатратыГрафик.Загрузить(Параметры.ТрудозатратыГрафик);
	ЗанятостьВидовРабочихЦентров.Загрузить(Параметры.ЗанятостьВидовРабочихЦентров);
	
	Если РезультатРасчета.Запланирован Тогда
		
		СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет замену спецификаций в заказе
// Поддерживается замена спецификаций для продукции и для материалов, производимых в процессе
//
// Параметры:
//  ДанныеЗамены	- Массив - содержит структуру параметров замены:
//						- КлючСвязи - УникальныйИдентификатор - идентификатор продукции или материала, производимого в процессе
//						- КлючСвязиПродукция - УникальныйИдентификатор - идентификатор продукции для материала, производимого в процессе
//						- Спецификация - СправочникСсылка.РесурсныеСпецификации - новая спецификация
//
Процедура ЗаменитьСпецификации(ДанныеЗамены) Экспорт

	КэшированныеЗначения = Неопределено;
	
	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
	
	// Шаг 1
	// Заменим спецификации в ТЧ Продукция
	#Область ЗаменаПродукция
	
	МассивДанных = Новый Массив;
	МассивКлючейПоКоторымНельзяЗаполнитьСпецификацию = Новый Массив;
	Для каждого ПараметрыЗамены Из ДанныеЗамены Цикл
		
		Если ПараметрыЗамены.КлючСвязиПродукция <> ПустойКлючСвязи Тогда
			Продолжить; //это полуфабрикат
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("КлючСвязи", ПараметрыЗамены.КлючСвязи);
   		СписокСтрок = Продукция.НайтиСтроки(СтруктураПоиска);
		
		// Нужно проверить наличие строки
		// Ее могли удалить при предыдущих заменах
		Если СписокСтрок.Количество() <> 0 Тогда
			
			ДанныеСтроки = СписокСтрок[0];
			ДанныеСтроки.Спецификация = ПараметрыЗамены.Спецификация;
			ДанныеСтроки.ИзмененияЗапрещены = Ложь;
			ДанныеСтроки.ГрафикРассчитан = Ложь;
			
			Если НЕ МожноЗаполнитьПоСпецификации(ДанныеСтроки) Тогда
				// Заполнять по спецификации нельзя если не заполнены реквизиты
				МассивКлючейПоКоторымНельзяЗаполнитьСпецификацию.Добавить(ПараметрыЗамены.КлючСвязи);
				Продолжить;
			КонецЕсли;
			
			МассивДанных.Добавить(ДанныеПоНоменклатуре(ДанныеСтроки));
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПланированиеПроизводства.ЗаполнитьДанныеСпецификаций(ЭтотОбъект, МассивДанных, КэшированныеЗначения);
	
	ПланированиеПроизводства.УдалитьДанныеСпецификаций(ЭтотОбъект, МассивКлючейПоКоторымНельзяЗаполнитьСпецификацию);
	
	#КонецОбласти
	
	// Шаг 2
	// Заменим спецификации полуфабрикатов
	#Область ЗаменаПолуфабрикаты
	
	МассивДанных = Новый Массив;
	МассивКлючейПродукция = Новый Массив;
	МассивКлючейПолуфабрикаты = Новый Массив;
	Для каждого ПараметрыЗамены Из ДанныеЗамены Цикл
		Если ПараметрыЗамены.КлючСвязиПродукция = ПустойКлючСвязи Тогда
			Продолжить; //это продукция
		КонецЕсли;
		
		СтрокаПродукция = Продукция.Найти(ПараметрыЗамены.КлючСвязиПродукция, "КлючСвязи");
		Если СтрокаПродукция <> Неопределено Тогда
			СтрокаПродукция.ГрафикРассчитан = Ложь;
		КонецЕсли;
		
		МассивКлючейПродукция.Добавить(ПараметрыЗамены.КлючСвязиПродукция);
		МассивКлючейПолуфабрикаты.Добавить(ПараметрыЗамены.КлючСвязи);
		
		СтруктураПоиска = Новый Структура("КлючСвязи", ПараметрыЗамены.КлючСвязи);
		СписокСтрок = МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
		
		// Нужно проверить наличие строки
		// Ее могли удалить при предыдущих заменах
		Если СписокСтрок.Количество() <> 0 Тогда
			
			ДанныеСтроки = СписокСтрок[0];
			ДанныеСтроки.ИсточникПолученияПолуфабриката = ПараметрыЗамены.Спецификация;
			
			Если МожноЗаполнитьПоСпецификации(ДанныеСтроки) Тогда
				
				ДанныеПоНоменклатуре = Новый Структура;
				
				ДанныеПоНоменклатуре.Вставить("КлючСвязиПродукция",    ДанныеСтроки.КлючСвязиПродукция);
				ДанныеПоНоменклатуре.Вставить("Номенклатура",          ДанныеСтроки.Номенклатура);
				ДанныеПоНоменклатуре.Вставить("Характеристика",        ДанныеСтроки.Характеристика);
				ДанныеПоНоменклатуре.Вставить("Склад",                 ДанныеСтроки.Склад);
				ДанныеПоНоменклатуре.Вставить("Спецификация",          ДанныеСтроки.ИсточникПолученияПолуфабриката);
				ДанныеПоНоменклатуре.Вставить("Количество",            ДанныеСтроки.Количество);
				ДанныеПоНоменклатуре.Вставить("Упаковка",              ДанныеСтроки.Упаковка);
				ДанныеПоНоменклатуре.Вставить("Подразделение",         Подразделение);
				ДанныеПоНоменклатуре.Вставить("КлючСвязиЭтапы",        ДанныеСтроки.КлючСвязиЭтапы);
				ДанныеПоНоменклатуре.Вставить("КлючСвязиПолуфабрикат", ДанныеСтроки.КлючСвязи);
				
				ДанныеПоНоменклатуре.Вставить("Назначение",            ДанныеСтроки.Назначение);
				ДанныеПоНоменклатуре.Вставить("НазначениеЗаказа",      ЭтотОбъект.Назначение);
				ДанныеПоНоменклатуре.Вставить("ЗаказатьНаСклад",       ДанныеСтроки.ЗаказатьНаСклад);
	
				МассивДанных.Добавить(ДанныеПоНоменклатуре);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	МассивКлючейПродукция = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивКлючейПродукция);
	
	ОчиститьДанныеСвязанныеСМатериаламиВПроцессе(МассивКлючейПолуфабрикаты);
	
	// Если заказ в статусе "К производству" или "Закрыт" то график не очищаем.
	Если Статус = Перечисления.СтатусыЗаказовНаПроизводство.Создан Тогда
		ПланированиеПроизводства.ОчиститьГрафикПродукции(ЭтотОбъект, МассивКлючейПродукция);
	КонецЕсли;
	
	ПланированиеПроизводства.ЗаполнитьСпецификациюЗаказа(ЭтотОбъект, МассивДанных, КэшированныеЗначения, Истина);
	
	Для каждого КлючСвязи Из МассивКлючейПродукция Цикл
		ПланированиеПроизводства.ЗаполнитьКоличествоЭтаповНаЕдиницуСледующегоЭтапаРекурсивно(ЭтотОбъект, КлючСвязи);
	КонецЦикла; 
	
	#КонецОбласти
	
КонецПроцедуры

// Выполняет замену используемых видов РЦ в заказе
//
// Параметры:
//  ДанныеЗамены	- Массив - содержит структуру параметров замены:
//						- КлючСвязиПродукция - УникальныйИдентификатор - идентификатор продукции
//						- КлючСвязиЭтапы - УникальныйИдентификатор - идентификатор этапа
//						- КлючСвязиВидыРабочихЦентров - УникальныйИдентификатор - идентификатор основного вида РЦ
//						- ВидРабочегоЦентра - СправочникСсылка.ВидыРабочихЦентров - новый вид РЦ
//
Процедура ЗаменитьИспользуемыйВидРЦ(ДанныеЗамены) Экспорт

	СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
	
	Для каждого ПараметрыЗамены Из ДанныеЗамены Цикл
		
		// Изменим статус графика
		СтрокаПродукция = Продукция.Найти(ПараметрыЗамены.КлючСвязиПродукция, "КлючСвязи");
		СтрокаПродукция.ГрафикРассчитан = Ложь;
		
		// Изменяем использование основного вида РЦ
		СтруктураПоиска = Новый Структура("КлючСвязиПродукция,КлючСвязиЭтапы,КлючСвязи", 
										ПараметрыЗамены.КлючСвязиПродукция, ПараметрыЗамены.КлючСвязиЭтапы, ПараметрыЗамены.КлючСвязиВидыРабочихЦентров);
		
		СписокСтрок = ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаВидРЦ Из СписокСтрок Цикл
			СтрокаВидРЦ.Использовать = (СтрокаВидРЦ.ВидРабочегоЦентра = ПараметрыЗамены.ВидРабочегоЦентра);
		КонецЦикла;
		
		// Изменяем использование альтернативных видов РЦ
		СтруктураПоиска = Новый Структура("КлючСвязиПродукция,КлючСвязиЭтапы,КлючСвязиВидыРабочихЦентров", 
		ПараметрыЗамены.КлючСвязиПродукция, ПараметрыЗамены.КлючСвязиЭтапы, ПараметрыЗамены.КлючСвязиВидыРабочихЦентров);
		
		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаВидРЦ Из СписокСтрок Цикл
			СтрокаВидРЦ.Использовать = (СтрокаВидРЦ.ВидРабочегоЦентра = ПараметрыЗамены.ВидРабочегоЦентра);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт

	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство[НовыйСтатус];
	Статус = ЗначениеНовогоСтатуса;

	Возврат Истина;

КонецФункции

// Процедура инициализирует параметры актуализации маршрутных листов
//  МассивКодовСтрокПродукции - Массив - массив кодов строк продукции
// 
Процедура ИнициализироватьПараметрыАктуализацииМаршрутныхЛистов(МассивКодовСтрокПродукции = Неопределено) Экспорт
	
	ПланированиеПроизводства.ДобавитьПараметрыАктуализацииМаршрутныхЛистов(ДополнительныеСвойства, Ссылка, МассивКодовСтрокПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	// Подразделение используется при заполнении заказа по спецификации, поэтому получим его заранее
	Ответственный = Пользователи.ТекущийПользователь();
	Подразделение = ЗначениеНастроекПовтИсп.ПолучитьПодразделениеДиспетчерПоУмолчанию(Подразделение, Ответственный);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("АдресПродукция") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		ЗаполнитьПоТаблицеТовары(ДанныеЗаполнения.АдресПродукция);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Товары") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		ЗаполнитьПоТаблицеТовары(ДанныеЗаполнения.Товары);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		ЗаполнитьПоЗаказуДавальца(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкаНаВозврат(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		ЗаполнитьПоЗаказуНаВнутреннееПотребление(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказМатериаловВПроизводство") Тогда
		ЗаполнитьПоЗаказуМатериаловВПроизводство(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ЗаполнитьПоЗаказуНаПеремещение(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
		ЗаполнитьПоЗаказуНаРемонт(ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		ЗаполнитьПоЗаказуНаСборку(ДанныеЗаполнения);
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Приоритет   = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(Приоритет);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеШапкиЗаказаНаПроизводство(Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("Продукция.Подразделение");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("ВыходныеИзделия.Подразделение");
	
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Склад");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвратныеОтходы.Подразделение");
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Продукция.Спецификация");
	КонецЕсли; 
	
	МассивКлючей = Новый Массив;
	Для Каждого Строка из Продукция Цикл
		МассивКлючей.Добавить(Строка.КлючСвязи);
	КонецЦикла;
	
	ПланированиеПроизводства.ПроверитьЗаполнениеСпецификацииВЗаказеНаПроизводство(ЭтотОбъект, МассивКлючей, Отказ);
	
	ПроверитьЗаполнениеКоличества(ПроверяемыеРеквизиты, Отказ);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПланированиеПроизводства.ПроверитьЗаполнениеПродукция(ЭтотОбъект, Отказ);
	
	Если Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Тип("ДокументСсылка.ЗаказНаПроизводство")) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	Документы.ЗаказНаПроизводство.ПроверитьСвязанныеОбъектыОбработаныОбработчикамиОбновления(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "Продукция";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "ВыходныеИзделия";
	ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления = "ВыходныеИзделия.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "ВозвратныеОтходы";
	ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления = "ВозвратныеОтходы.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	ПараметрыОкругления = ОбщегоНазначенияУТ.ПараметрыОкругленияКоличестваШтучныхТоваров();
	ПараметрыОкругления.ИмяТЧ = "МатериалыИУслуги";
	ПараметрыОкругления.УсловиеОтбораСтрокДляОкругления = "МатериалыИУслуги.ЗаказатьНаСклад = ИСТИНА";
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи, ПараметрыОкругления);
	
	// Установка кодов строк в табличной части "Продукция"
	УстановитьКодВСтрокахТабличнойЧасти("Продукция");
	
	// Установка кодов строк в табличной части "МатериалыИУслуги"
	// Применяется свой алгоритм, т.к. код строки должен быть уникальным с учетом корректировок
	УстановитьКодВСтрокахТабличнойЧастиСУчетомКорректировок();
	
	// Установка кодов строк в табличной части "ЭтапыГрафик"
	УстановитьКодВСтрокахТабличнойЧасти("ЭтапыГрафик");
	
	Если НЕ ЗначениеЗаполнено(Очередь) Тогда
		
		Очередь = Документы.ЗаказНаПроизводство.НовыйНомерОчереди();
		
	КонецЕсли;
	
	// Запретим редактирование продукции для которой есть график
	Если Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству Тогда
		СписокСтрок = Продукция.НайтиСтроки(Новый Структура("ИзмененияЗапрещены,ГрафикРассчитан", Ложь, Истина));
		Для каждого СтрокаПродукция Из СписокСтрок Цикл
			Если ПродукцияГрафик.Найти(СтрокаПродукция.КлючСвязи, "КлючСвязиПродукция") <> Неопределено Тогда
				СтрокаПродукция.ИзмененияЗапрещены = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	ПланированиеПроизводства.СоздатьНазначениеЗаказа(ЭтотОбъект);
	
	ПланированиеПроизводства.УдалитьНеиспользуемыеДанныеСпецификации(ЭтотОбъект);
	
	//Даты потребности
	Если Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству
		Или Статус = Перечисления.СтатусыЗаказовНаПроизводство.Закрыт Тогда

			Для Каждого Строка Из МатериалыИУслуги Цикл

				Если Не Строка.ПроизводитсяВПроцессе И Строка.ДатаПотребности = '00010101' Тогда //дата не заполнена

					МассивСтрок = Продукция.НайтиСтроки(Новый Структура("КлючСвязи", Строка.КлючСвязиПродукция));
					Если МассивСтрок.Количество() > 0 Тогда
						Строка.ДатаПотребности = МассивСтрок[0].НачатьНеРанее;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

	КонецЕсли;
	
	ПодготовитьПараметрыОтменыКорректировокЗаказаМатериалов(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.Назначения.СоздатьОбновитьНазначение(Ссылка, Назначение, Подразделение, Номер, Дата, ПометкаУдаления, НаправлениеДеятельности);
	
	АктуализироватьМаршрутныеЛистыПроизводства();
	
	ОтменитьКорректировкиЗаказаМатериаловВПроизводство(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	ЭтотОбъект.ДокументОснование = Неопределено;
	ЭтотОбъект.ПроизводствоПоЗаказу = Ложь;
	ЭтотОбъект.Заказ = Неопределено;
	ЭтотОбъект.Назначение = ПустоеНазначение;
	
	ЭтотОбъект.Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	ЭтотОбъект.СтатусГрафикаПроизводства = Метаданные().Реквизиты.СтатусГрафикаПроизводства.ЗначениеЗаполнения;
	ЭтотОбъект.Очередь = Метаданные().Реквизиты.Очередь.ЗначениеЗаполнения;
	ЭтотОбъект.КоличествоОшибок = Метаданные().Реквизиты.КоличествоОшибок.ЗначениеЗаполнения;
	
	Для Каждого Строка Из ЭтотОбъект.Продукция Цикл
		
		Строка.Назначение = ПустоеНазначение;
		
		Строка.ИзмененияЗапрещены = Ложь;
		Строка.ГрафикРассчитан = Ложь;
		
	КонецЦикла;
	
	КоличествоСтрок = ВыходныеИзделия.Количество();
	Если КоличествоСтрок > 0 Тогда
		ЭтотОбъект.ВыходныеИзделия.ЗагрузитьКолонку(Новый Массив(КоличествоСтрок), "Назначение");
	КонецЕсли;
	
	КоличествоСтрок = ВозвратныеОтходы.Количество();
	Если КоличествоСтрок > 0 Тогда
		ЭтотОбъект.ВозвратныеОтходы.ЗагрузитьКолонку(Новый Массив(КоличествоСтрок), "Назначение");
	КонецЕсли;
	
	КоличествоСтрок = МатериалыИУслуги.Количество();
	Если КоличествоСтрок > 0 Тогда
		ЭтотОбъект.МатериалыИУслуги.ЗагрузитьКолонку(Новый Массив(КоличествоСтрок), "Назначение");
	КонецЕсли;

	ЭтотОбъект.ПродукцияГрафик.Очистить();
	ЭтотОбъект.ЭтапыГрафик.Очистить();
	ЭтотОбъект.ВыходныеИзделияГрафик.Очистить();
	ЭтотОбъект.ВозвратныеОтходыГрафик.Очистить();
	ЭтотОбъект.МатериалыИУслугиГрафик.Очистить();
	ЭтотОбъект.ТрудозатратыГрафик.Очистить();
	ЭтотОбъект.ЗанятостьВидовРабочихЦентров.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ЗаказНаПроизводство.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ПланированиеПроизводства.ОтразитьЭтапыПроизводства(ДополнительныеСвойства, Движения, Отказ);
	ОперативныйУчетПроизводства.ОтразитьЗаказыНаПроизводствоСпецификации(ДополнительныеСвойства, Движения, Отказ);
	ОперативныйУчетПроизводства.ОтразитьЗаказыНаПроизводствоТрудозатраты(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловВПроизводство(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ПланированиеПроизводства.ОтразитьДоступностьВидовРабочихЦентров(ДополнительныеСвойства, Движения, Отказ);
	ПланированиеПроизводства.ОтразитьБракВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловСУчетомКорректировок(ДополнительныеСвойства, Движения, Отказ);
	ПланированиеПроизводства.ОтразитьПереработкаПоГрафикуПроизводства(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ВыполнитьКонтрольЗаказаПослеПроведения(Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ОтменитьКорректировкиЗаказаМатериаловВПроизводство(ДополнительныеСвойства);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьПоЗаказуДавальца(ЗаказДавальца)
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ
	|	ЗаказДавальца.Ссылка				КАК Заказ,
	|	ИСТИНА								КАК ПроизводствоПоЗаказу,
	|	ЗаказДавальца.Статус				КАК СтатусДокумента,
	|	ЗаказДавальца.Приоритет				КАК Приоритет,
	|	ЗаказДавальца.НалоговоеНазначение 	КАК НалоговоеНазначение,
	|	ЗаказДавальца.Организация			КАК Организация,
	|	ЗаказДавальца.Подразделение			КАК Подразделение,
	// Ошибки заполнения
	|	НЕ ЗаказДавальца.Проведен			КАК ЕстьОшибкиПроведен,
	|	ВЫБОР КОГДА ЗаказДавальца.Статус НЕ В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|										   ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|										   ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	ВЫБОР 
	|		КОГДА ЗаказДавальца.НаправлениеДеятельности.УчетЗатрат 
	|			ТОГДА ЗаказДавальца.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказДавальца
	|ГДЕ
	|	ЗаказДавальца.Ссылка = &ЗаказДавальца
	|");
	
	Запрос.УстановитьПараметр("ЗаказДавальца", ЗаказДавальца);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказДавальца,
		Реквизиты.СтатусДокумента,
		Реквизиты.ЕстьОшибкиПроведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	РеквизитыШапки = "НалоговоеНазначение, Организация, Приоритет, Заказ, ПроизводствоПоЗаказу, НаправлениеДеятельности";
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты, РеквизитыШапки);
	
	СтруктураОтбора = Новый Структура("Дата");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ЭтотОбъект);
	Документы.ЗаказНаПроизводство.ЗаполнитьПоОстаткамПродукцииКОбеспечениюДавальцу(
		СтруктураОтбора,
		Продукция,
		ЗаказДавальца);
	
	ЗаполнитьДанныеСпецификацииВСтроках(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоТаблицеТовары(АдресПродукция)
	
	Если ЭтоАдресВременногоХранилища(АдресПродукция) Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресПродукция);
		УдалитьИзВременногоХранилища(АдресПродукция);
	Иначе
		ТаблицаТоваров = АдресПродукция; //для заполнения была передана таблица значений.
	КонецЕсли;
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Продукция.Очистить();
	Этапы.Очистить();
	ВыходныеИзделия.Очистить();
	МатериалыИУслуги.Очистить();
	Трудозатраты.Очистить();
	ВидыРабочихЦентров.Очистить();
	АльтернативныеВидыРабочихЦентров.Очистить();
	
	ПродукцияГрафик.Очистить();
	ЭтапыГрафик.Очистить();
	ВыходныеИзделияГрафик.Очистить();
	МатериалыИУслугиГрафик.Очистить();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивДанныхПоНоменклатуре = Новый Массив;
	МассивНовыхСтрок = Новый Массив;
	Для каждого СтрокаТовара из ТаблицаТоваров Цикл
		
		СтрокаПродукция = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаТовара);
		СтрокаПродукция.КлючСвязи = Новый УникальныйИдентификатор;
		
		СтрокаПродукция.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаПродукция, СтруктураДействий, КэшированныеЗначения);
		
		// C таблицей товары не пришли даты начала производства, заполняем колонку текущей датой.
		Если Не ЗначениеЗаполнено(СтрокаПродукция.НачатьНеРанее) Тогда
			
			СтрокаПродукция.НачатьНеРанее = НачалоДня(ТекущаяДатаСеанса());
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(ЗаказКлиента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус             КАК СтатусДокумента,
	|	ЗаказКлиента.Приоритет          КАК Приоритет,
	|	ЗаказКлиента.Проведен           КАК Проведен,
	|	ЗаказКлиента.Склад              КАК СкладДокумента,
	|	ЗаказКлиента.Организация        КАК Организация,
	|	ЗаказКлиента.Подразделение      КАК Подразделение,
	|	ВЫБОР 
	|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат 
	|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Товары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Товары.Ссылка.ЖелаемаяДатаОтгрузки
	|		ИНАЧЕ Товары.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаПотребности,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ПЕречисление.СпособыПривязкиОперацийПроизводства.КНачалу) КАК РазмещениеВыпуска,
	|	&НачатьНеРанее КАК НачатьНеРанее,
	|	Товары.Склад КАК Склад
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ЗаказКлиента
	|	И НЕ Товары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказКлиента;
	НалоговоеНазначение     = НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата);
	Приоритет               = Реквизиты.Приоритет;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	
	//Заполнение табличной части
	ИсходнаяТаблица = Результат[1].Выгрузить();
	ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента, , ПолучатьУслуги);
	ТаблицаТоваров.Колонки.Добавить("ДатаПотребности");
	ТаблицаТоваров.Колонки.Добавить("РазмещениеВыпуска");
	ТаблицаТоваров.Колонки.Добавить("НачатьНеРанее");
	
	ОтборНомерСтроки		= Новый Структура("НомерСтроки");
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(ОтборНомерСтроки);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИсходнаяСтрока = НайденныеСтроки[0];
			ЗаполнитьЗначенияСвойств(Строка, ИсходнаяСтрока, "ДатаПотребности, РазмещениеВыпуска, НачатьНеРанее");
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкаНаВозврат(ЗаявкаНаВозврат)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиента.Статус КАК СтатусДокумента,
	|	ЗаказКлиента.Проведен КАК Проведен,
	|	ЗаказКлиента.Склад КАК СкладДокумента,
	|	ЗаказКлиента.Организация КАК Организация,
	|	ЗаказКлиента.Подразделение КАК Подразделение,
	|	ЗаказКлиента.СпособКомпенсации   КАК СпособКомпенсации,
	|	ВЫБОР 
	|		КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат 
	|			ТОГДА ЗаказКлиента.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаявкаНаВозврат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Товары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Товары.Ссылка.ЖелаемаяДатаОтгрузки
	|		ИНАЧЕ Товары.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаПотребности,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ПЕречисление.СпособыПривязкиОперацийПроизводства.КНачалу) КАК РазмещениеВыпуска,
	|	&НачатьНеРанее КАК НачатьНеРанее,
	|	Товары.Ссылка.Склад КАК Склад
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ЗаявкаНаВозврат
	|	И НЕ Товары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ЗаявкаНаВозврат);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.СпособКомпенсации <> Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары Тогда
		ТекстОшибки = НСтр("ru='Ввод на основании возможен для заявок на возврат со способом компенсации ""Заменить товары"".';uk='Введення на підставі можливе для заявок на повернення зі способом компенсації ""Замінити товари"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаявкаНаВозврат,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаявкаНаВозврат;
	НалоговоеНазначение     = НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата);
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	
	//Заполнение табличной части
	ИсходнаяТаблица = Результат[1].Выгрузить();
	ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаявкаНаВозврат, , ПолучатьУслуги);
	ТаблицаТоваров.Колонки.Добавить("ДатаПотребности");
	ТаблицаТоваров.Колонки.Добавить("РазмещениеВыпуска");
	ТаблицаТоваров.Колонки.Добавить("НачатьНеРанее");
	
	ОтборНомерСтроки		= Новый Структура("НомерСтроки");
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(ОтборНомерСтроки);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИсходнаяСтрока = НайденныеСтроки[0];
			ЗаполнитьЗначенияСвойств(Строка, ИсходнаяСтрока, "ДатаПотребности, РазмещениеВыпуска, НачатьНеРанее");
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаПеремещение(ЗаказНаПеремещение)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказНаПеремещение.Статус КАК СтатусДокумента,
	|	ЗаказНаПеремещение.Проведен КАК Проведен,
	|	ВЫБОР
	|		КОГДА ЗаказНаПеремещение.ОрганизацияПолучатель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЗаказНаПеремещение.Организация
	|		ИНАЧЕ ЗаказНаПеремещение.ОрганизацияПолучатель
	|	КОНЕЦ КАК Организация,
	|	ЗаказНаПеремещение.Подразделение КАК Подразделение,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	ВЫБОР 
	|		КОГДА ЗаказНаПеремещение.НаправлениеДеятельности.УчетЗатрат 
	|			ТОГДА ЗаказНаПеремещение.НаправлениеДеятельности
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|	КОНЕЦ КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|ГДЕ
	|	ЗаказНаПеремещение.Ссылка = &ЗаказНаПеремещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Товары.ОкончаниеПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Товары.Ссылка.ЖелаемаяДатаПоступления
	|		ИНАЧЕ Товары.ОкончаниеПоступления
	|	КОНЕЦ КАК ДатаПотребности,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ПЕречисление.СпособыПривязкиОперацийПроизводства.КНачалу) КАК РазмещениеВыпуска,
	|	&НачатьНеРанее КАК НачатьНеРанее,
	|	Товары.Ссылка.СкладПолучатель КАК Склад
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ЗаказНаПеремещение
	|	И НЕ Товары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаПеремещение,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаПеремещение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	НалоговоеНазначение     = НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата);
	
	//Заполнение табличной части
	ИсходнаяТаблица = Результат[1].Выгрузить();
	ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказНаПеремещение, , ПолучатьУслуги);
	ТаблицаТоваров.Колонки.Добавить("ДатаПотребности");
	ТаблицаТоваров.Колонки.Добавить("РазмещениеВыпуска");
	ТаблицаТоваров.Колонки.Добавить("НачатьНеРанее");
	
	ОтборНомерСтроки		= Новый Структура("НомерСтроки");
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(ОтборНомерСтроки);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИсходнаяСтрока = НайденныеСтроки[0];
			ЗаполнитьЗначенияСвойств(Строка, ИсходнаяСтрока, "ДатаПотребности, РазмещениеВыпуска, НачатьНеРанее");
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаВнутреннееПотребление(Заказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заказ.Статус КАК СтатусДокумента,
	|	Заказ.Проведен КАК Проведен,
	|	Заказ.Склад КАК СкладДокумента,
	|	Заказ.Организация КАК Организация,
	|	Заказ.Подразделение КАК Подразделение,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Товары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Товары.Ссылка.ЖелаемаяДатаОтгрузки
	|		ИНАЧЕ Товары.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаПотребности,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ПЕречисление.СпособыПривязкиОперацийПроизводства.КНачалу) КАК РазмещениеВыпуска,
	|	&НачатьНеРанее КАК НачатьНеРанее
	|ИЗ
	|	Документ.ЗаказНаВнутреннееПотребление.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыВнутреннихЗаказов.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Заказ,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= Заказ;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	НалоговоеНазначение     = НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата);
	
	//Заполнение табличной части
	ИсходнаяТаблица = Результат[1].Выгрузить();
	ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(Заказ, , ПолучатьУслуги);
	ТаблицаТоваров.Колонки.Добавить("ДатаПотребности");
	ТаблицаТоваров.Колонки.Добавить("РазмещениеВыпуска");
	ТаблицаТоваров.Колонки.Добавить("НачатьНеРанее");
	
	ОтборНомерСтроки = Новый Структура("НомерСтроки");
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(ОтборНомерСтроки);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИсходнаяСтрока = НайденныеСтроки[0];
			ЗаполнитьЗначенияСвойств(Строка, ИсходнаяСтрока, "ДатаПотребности, РазмещениеВыпуска, НачатьНеРанее");
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуМатериаловВПроизводство(Заказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заказ.Статус КАК СтатусДокумента,
	|	Заказ.Проведен КАК Проведен,
	|	Заказ.Склад КАК СкладДокумента,
	|	Заказ.Организация КАК Организация,
	|	Заказ.Подразделение КАК Подразделение,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Товары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Товары.Ссылка.ЖелаемаяДатаОтгрузки
	|		ИНАЧЕ Товары.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаПотребности,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ПЕречисление.СпособыПривязкиОперацийПроизводства.КНачалу) КАК РазмещениеВыпуска,
	|	&НачатьНеРанее КАК НачатьНеРанее
	|ИЗ
	|	Документ.ЗаказМатериаловВПроизводство.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовМатериаловВПроизводство.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовМатериаловВПроизводство.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовМатериаловВПроизводство.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Заказ,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= Заказ;
	НалоговоеНазначение     = НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата);
	
	//Заполнение табличной части
	ИсходнаяТаблица = Результат[1].Выгрузить();
	ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(Заказ, , ПолучатьУслуги);
	ТаблицаТоваров.Колонки.Добавить("ДатаПотребности");
	ТаблицаТоваров.Колонки.Добавить("РазмещениеВыпуска");
	ТаблицаТоваров.Колонки.Добавить("НачатьНеРанее");
	
	ОтборНомерСтроки = Новый Структура("НомерСтроки");
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		
		ОтборНомерСтроки.НомерСтроки = Строка.НомерСтроки;
		НайденныеСтроки = ИсходнаяТаблица.НайтиСтроки(ОтборНомерСтроки);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИсходнаяСтрока = НайденныеСтроки[0];
			ЗаполнитьЗначенияСвойств(Строка, ИсходнаяСтрока, "ДатаПотребности, РазмещениеВыпуска, НачатьНеРанее");
		КонецЕсли;
		
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаРемонт(ЗаказНаРемонт)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заказ.Статус КАК СтатусДокумента,
	|	Заказ.Проведен КАК Проведен,
	|	Заказ.Организация КАК Организация,
	|	Заказ.Подразделение КАК Подразделение,
	|	Заказ.ДатаНачала КАК ДатаПотребности,
	|	ВЫБОР
	|		КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	ЗНАЧЕНИЕ(ПЕречисление.СпособыПривязкиОперацийПроизводства.КНачалу) КАК РазмещениеВыпуска,
	|	&НачатьНеРанее КАК НачатьНеРанее,
	|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказНаРемонт КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказНаРемонт");
	
	Запрос.УстановитьПараметр("ЗаказНаРемонт", ЗаказНаРемонт);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	Реквизиты = Результат[0].Выбрать();
	Реквизиты.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказНаРемонт,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаРемонт;
	Подразделение			= Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	НалоговоеНазначение     = НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата);
	
	//Заполнение табличной части
	ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказНаРемонт, , ПолучатьУслуги);
	ТаблицаТоваров.Колонки.Добавить("ДатаПотребности");
	ТаблицаТоваров.Колонки.Добавить("РазмещениеВыпуска");
	ТаблицаТоваров.Колонки.Добавить("НачатьНеРанее");
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		ЗаполнитьЗначенияСвойств(Строка, Реквизиты, "ДатаПотребности, РазмещениеВыпуска, НачатьНеРанее");
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаСборку(ЗаказНаСборку)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Заказ.Проведен        КАК Проведен,
	|	Заказ.Организация     КАК Организация,
	|	Заказ.Сделка          КАК Сделка,
	|	Заказ.Склад           КАК СкладДокумента,
	|	Заказ.Подразделение   КАК Подразделение,
	|	Заказ.ТипОперации     КАК ТипОперации,
	|	ЗНАЧЕНИЕ(ПЕречисление.СпособыПривязкиОперацийПроизводства.КНачалу) КАК РазмещениеВыпуска,
	|	&НачатьНеРанее КАК НачатьНеРанее,
	|	Заказ.НачалоСборкиРазборки КАК ДатаПотребности,
	|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ЗаказНаСборку КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказНаСборку");
	
	Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
	Запрос.УстановитьПараметр("НачатьНеРанее", ТекущаяДатаСеанса());
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Если Реквизиты.ТипОперации <> Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		ТекстОшибки = НСтр("ru='Ввод на основании возможен для заказов на сборку с операцией ""Сборка из комплектующих"".';uk='Введення на підставі можливе для замовлень на збирання з операцією ""Збирання з комплектуючих"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не Реквизиты.Проведен Тогда
		ТекстОшибки = НСтр("ru='Документ не проведен. Ввод на основании непроведенного документа запрещен.';uk='Документ не проведено. Введення на підставі непроведенного документа заборонене.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	//Заполнение шапки
	Организация				= Реквизиты.Организация;
	ДокументОснование		= ЗаказНаСборку;
	Подразделение			= Реквизиты.Подразделение;
	НаправлениеДеятельности = Реквизиты.НаправлениеДеятельности;
	НалоговоеНазначение     = НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата);
	
	//Заполнение табличной части
	ПолучатьУслуги = Ложь;
	ТаблицаТоваров = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказНаСборку, , ПолучатьУслуги);
	ТаблицаТоваров.Колонки.Добавить("ДатаПотребности");
	ТаблицаТоваров.Колонки.Добавить("РазмещениеВыпуска");
	ТаблицаТоваров.Колонки.Добавить("НачатьНеРанее");
	
	Для каждого Строка Из ТаблицаТоваров Цикл
		ЗаполнитьЗначенияСвойств(Строка, Реквизиты, "ДатаПотребности, РазмещениеВыпуска, НачатьНеРанее");
	КонецЦикла;
	
	Продукция.Загрузить(ТаблицаТоваров);
	
	ЗаполнитьДанныеСпецификацииВСтроках();
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольРезультатовПроведения

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;

	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		
		Массив.Добавить(Движения.ЭтапыПроизводства);
		Массив.Добавить(Движения.ЗаказыНаПроизводствоСпецификации);
		Массив.Добавить(Движения.ЗаказыМатериаловВПроизводство);
		
		Если Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству
			ИЛИ Статус = Перечисления.СтатусыЗаказовНаПроизводство.Закрыт Тогда 
			
			Массив.Добавить(Движения.ЗаказыМатериаловСУчетомКорректировок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Контроль выполняется при перепроведении, отмене проведения или если используются серии, чтобы проверить возможность резервирования серий
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура()) Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
		
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

// Формирует проверку контроля завершения производства по заказу
//
// Параметры:
// Отказ - Булево - параметр Отказ.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Отказ)
	
	Если Статус <> Перечисления.СтатусыЗаказовНаПроизводство.Закрыт Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	РазделыКонтроля = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработки") Тогда
		
		РазделыКонтроля.Добавить("ГрафикИВыпуск");
		
		ТекстЗапроса = ТекстЗапроса
			+ "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Распоряжение КАК Распоряжение
			|ИЗ 
			|	РегистрСведений.ГрафикЭтаповПроизводства
			|ГДЕ 
			|	Распоряжение = &Распоряжение
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Распоряжение КАК Распоряжение
			|ИЗ 
			|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(, Распоряжение.Распоряжение = &Распоряжение)";
			
		Если ЭтотОбъект.Этапы.НайтиСтроки(Новый Структура("ПроизводствоНаСтороне", Истина)).ВГраница() <> -1 Тогда
			
			Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			КонецЕсли;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПереработкаПоГрафикуПроизводстваОбороты.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
			|	ПереработкаПоГрафикуПроизводстваОбороты.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
			|	ПереработкаПоГрафикуПроизводстваОбороты.Номенклатура КАК Номенклатура,
			|	ПереработкаПоГрафикуПроизводстваОбороты.Характеристика КАК Характеристика,
			|	ПереработкаПоГрафикуПроизводстваОбороты.КЗаказуПриход КАК Количество
			|ПОМЕСТИТЬ ВТПродукцияКПереработкеПоЗаказуНаПроизводство
			|ИЗ
			|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Обороты(
			|			,
			|			,
			|			,
			|			ЗаказНаПроизводство = &Распоряжение) КАК ПереработкаПоГрафикуПроизводстваОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КодСтрокиЭтапыГрафик,
			|	Номенклатура,
			|	Характеристика
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказПереработчикуУслуги.Распоряжение КАК ЗаказНаПроизводство,
			|	ЗаказПереработчикуУслуги.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
			|	ЗаказПереработчикуУслуги.Ссылка КАК ЗаказПереработчику,
			|	ЗаказПереработчикуПродукция.Номенклатура КАК Номенклатура,
			|	ЗаказПереработчикуПродукция.Характеристика КАК Характеристика,
			|	ЗаказПереработчикуПродукция.КодСтроки КАК КодСтроки
			|ПОМЕСТИТЬ ВТПродукцияКПереработкеПоЗаказуПереработчику
			|ИЗ
			|	Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Продукция КАК ЗаказПереработчикуПродукция
			|		ПО ЗаказПереработчикуУслуги.Ссылка = ЗаказПереработчикуПродукция.Ссылка
			|			И ЗаказПереработчикуУслуги.НомерГруппыЗатрат = ЗаказПереработчикуПродукция.НомерГруппыЗатрат
			|ГДЕ
			|	ЗаказПереработчикуУслуги.Распоряжение = &Распоряжение
			|	И ЗаказПереработчикуУслуги.КодСтрокиЭтапыГрафик В 
			|										(ВЫБРАТЬ
			|											Т.КодСтрокиЭтапыГрафик
			|										ИЗ
			|											ВТПродукцияКПереработкеПоЗаказуНаПроизводство КАК Т)
			|	И ЗаказПереработчикуУслуги.Ссылка.Проведен
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗаказПереработчику,
			|	Номенклатура,
			|	Характеристика,
			|	КодСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказыПоставщикамОбороты.ЗаказПоставщику КАК ЗаказПереработчику,
			|	ЗаказыПоставщикамОбороты.Номенклатура КАК Номенклатура,
			|	ЗаказыПоставщикамОбороты.Характеристика КАК Характеристика,
			|	ЗаказыПоставщикамОбороты.КодСтроки КАК КодСтроки,
			|	ЗаказыПоставщикамОбороты.КОформлениюРасход КАК Количество
			|ПОМЕСТИТЬ ВТПродукцияОтПереработчика
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Обороты(
			|			,
			|			,
			|			,
			|			(ЗаказПоставщику, Номенклатура, Характеристика, КодСтроки) В
			|				(ВЫБРАТЬ
			|					Т.ЗаказПереработчику,
			|					Т.Номенклатура,
			|					Т.Характеристика,
			|					Т.КодСтроки
			|				ИЗ
			|					ВТПродукцияКПереработкеПоЗаказуПереработчику КАК Т)) КАК ЗаказыПоставщикамОбороты
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ЗаказПереработчику,
			|	Номенклатура,
			|	Характеристика,
			|	КодСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПродукцияКПереработкеПоЗаказуПереработчику.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
			|	ПродукцияКПереработкеПоЗаказуПереработчику.Номенклатура КАК Номенклатура,
			|	ПродукцияКПереработкеПоЗаказуПереработчику.Характеристика КАК Характеристика,
			|	ПродукцияОтПерерабочика.Количество КАК Количество
			|ПОМЕСТИТЬ ВТПродукцияОтПереработчикаПоЗаказуНаПроизводство
			|ИЗ
			|	ВТПродукцияКПереработкеПоЗаказуПереработчику КАК ПродукцияКПереработкеПоЗаказуПереработчику
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПродукцияОтПереработчика КАК ПродукцияОтПерерабочика
			|		ПО ПродукцияКПереработкеПоЗаказуПереработчику.ЗаказПереработчику = ПродукцияОтПерерабочика.ЗаказПереработчику
			|			И ПродукцияКПереработкеПоЗаказуПереработчику.Номенклатура = ПродукцияОтПерерабочика.Номенклатура
			|			И ПродукцияКПереработкеПоЗаказуПереработчику.Характеристика = ПродукцияОтПерерабочика.Характеристика
			|			И ПродукцияКПереработкеПоЗаказуПереработчику.КодСтроки = ПродукцияОтПерерабочика.КодСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КодСтрокиЭтапыГрафик,
			|	Номенклатура,
			|	Характеристика";
			
			Запрос.Выполнить();
			
			ТекстЗапроса = ТекстЗапроса
				+ "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	ПродукцияКПереработкеПоЗаказуНаПроизводство.ЗаказНаПроизводство КАК Распоряжение
				|ИЗ
				|	ВТПродукцияКПереработкеПоЗаказуНаПроизводство КАК ПродукцияКПереработкеПоЗаказуНаПроизводство
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПродукцияОтПереработчикаПоЗаказуНаПроизводство КАК ПродукцияОтПереработчикаПоЗаказуНаПроизводство
				|		ПО ПродукцияКПереработкеПоЗаказуНаПроизводство.КодСтрокиЭтапыГрафик = ПродукцияОтПереработчикаПоЗаказуНаПроизводство.КодСтрокиЭтапыГрафик
				|			И ПродукцияКПереработкеПоЗаказуНаПроизводство.Номенклатура = ПродукцияОтПереработчикаПоЗаказуНаПроизводство.Номенклатура
				|			И ПродукцияКПереработкеПоЗаказуНаПроизводство.Характеристика = ПродукцияОтПереработчикаПоЗаказуНаПроизводство.Характеристика
				|ГДЕ
				|	ПродукцияКПереработкеПоЗаказуНаПроизводство.Количество > ЕСТЬNULL(ПродукцияОтПереработчикаПоЗаказуНаПроизводство.Количество, 0)";
				
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса
			+ "
			|;
			|////////////////////////////////////////////////////////////
			|
			|";
			
	КонецЕсли;
	
	РазделыКонтроля.Добавить("Материалы");
	
	ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	Распоряжение КАК Распоряжение
		|		ИЗ РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(,,,
		|						Распоряжение = &Распоряжение
		|						И НЕ Отменено
		|						И НЕ ПроизводствоНаСтороне
		|						И КодСтрокиРаспоряжения <> 0
		|						И ВариантОбеспечения В (
		|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
		|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
		|						И Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	)
		|ГДЕ
		|	КоличествоОборот > 0
		|;
		|////////////////////////////////////////////////////////////
		|
		|";
		
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИндексРезультата = РазделыКонтроля.Найти("ГрафикИВыпуск");
	
	Если ИндексРезультата <> Неопределено
		И Не РезультатЗапроса[ИндексРезультата].Пустой() Тогда

		ТекстШаблона = НСтр("ru='Документ Заказ на производство № %1 от %2 отработан не полностью.
        |Закрытие заказа возможно только с полностью выполненным графиком производства и оформленным выпуском продукции.'
        |;uk='Документ Замовлення на виробництво № %1 від %2 відпрацьовано не повністю.
        |Закриття замовлення можливе тільки з повністю виконаним графіком виробництва і оформленим випуском продукції.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
	КонецЕсли;
	
	ИндексРезультата = РазделыКонтроля.Найти("Материалы");
	
	Если ИндексРезультата <> Неопределено
		И Не РезультатЗапроса[ИндексРезультата].Пустой() Тогда
	
		ТекстШаблона = НСтр("ru='По документу Заказ на производство № %1 от %2 есть резервы материалов.
        |Отмените резерв материалов на складе и/или скорректируйте документы обособленного обеспечения.'
        |;uk='За документом Замовлення на виробництво № %1 від %2 є резерви матеріалів.
        |Відмініть резерв матеріалів на складі та/або виправте документи відокремленого забезпечення.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ПроверитьЗаполнениеШапкиЗаказаНаПроизводство(Отказ)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Подразделение, "ПодразделениеДиспетчер") <> Истина Тогда
	
		ТекстОшибки = НСтр("ru='Подразделением, ответственным за выполнение заказа, должно быть подразделение-диспетчер';uk='Підрозділом, відповідальним за виконання замовлення, має бути підрозділ-диспетчер'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,,
			"Подразделение", 
			"Объект",
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСпецификацииВСтроках(ТолькоНезаполненные = Ложь)
	
	//Заполнение спецификаций
	МассивДанныхПоНоменклатуре = Новый Массив;
	МассивНовыхСтрок = Новый Массив;
	
	Для каждого Строка Из Продукция Цикл
		
		Строка.ЕстьСоответствиеСтандартнойСпецификации = Истина;
		Строка.КлючСвязи = Новый УникальныйИдентификатор;
		
		МассивДанныхПоНоменклатуре.Добавить(ДанныеПоНоменклатуре(Строка));
		МассивНовыхСтрок.Добавить(Строка);
		
	КонецЦикла;
	
	// Заполним спецификации
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(
		МассивНовыхСтрок,
		МассивДанныхПоНоменклатуре,
		ТолькоНезаполненные);
	
	// Заполним материалы по спецификации
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ПланированиеПроизводства.ЗаполнитьСпецификациюЗаказа(
		ЭтотОбъект,
		МассивДанныхПоНоменклатуре,
		КэшированныеЗначения);
	
КонецПроцедуры

Функция ДанныеПоНоменклатуре(ДанныеСтроки)
	
	ДанныеПоНоменклатуре = Новый Структура;
	ДанныеПоНоменклатуре.Вставить("Подразделение",          ДанныеСтроки.Подразделение);
	ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер", ЭтотОбъект.Подразделение);
	ДанныеПоНоменклатуре.Вставить("КлючСвязиПродукция",     ДанныеСтроки.КлючСвязи);
	ДанныеПоНоменклатуре.Вставить("Номенклатура",           ДанныеСтроки.Номенклатура);
	ДанныеПоНоменклатуре.Вставить("Характеристика",         ДанныеСтроки.Характеристика);
	ДанныеПоНоменклатуре.Вставить("Назначение",             ДанныеСтроки.Назначение);
	ДанныеПоНоменклатуре.Вставить("НазначениеЗаказа",       ЭтотОбъект.Назначение);
	ДанныеПоНоменклатуре.Вставить("Склад",                  ДанныеСтроки.Склад);
	ДанныеПоНоменклатуре.Вставить("Спецификация",           ДанныеСтроки.Спецификация);
	ДанныеПоНоменклатуре.Вставить("Количество",             ДанныеСтроки.Количество);
	ДанныеПоНоменклатуре.Вставить("Упаковка",               ДанныеСтроки.Упаковка);
	ДанныеПоНоменклатуре.Вставить("НачалоПроизводства",     ДанныеСтроки.НачатьНеРанее);
	ДанныеПоНоменклатуре.Вставить("КлючСвязиПолуфабрикат");
	ДанныеПоНоменклатуре.Вставить("КлючСвязиЭтапы");
	ДанныеПоНоменклатуре.Вставить("ДатаПотребности",        ДанныеСтроки.НачатьНеРанее);
	ДанныеПоНоменклатуре.Вставить("ЗаказатьНаСклад",        Истина);
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

Функция ПолучитьЭтапы()
	
	Результат = Этапы.Выгрузить();
	
	Результат.Колонки.Добавить("КоличествоЭтаповЗаказа");
	Результат.ЗагрузитьКолонку(Результат.ВыгрузитьКолонку("Количество"), "КоличествоЭтаповЗаказа");
	
	Результат.Индексы.Добавить("КлючСвязиПродукция, КлючСвязи");
	Результат.Индексы.Добавить("КлючСвязи");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТПродукция.КлючСвязи            КАК КлючСвязиПродукция,
	|	ТЭтапыГрафик.КлючСвязиЭтапы     КАК КлючСвязиЭтапы,
	|	СУММА(ТЭтапыОбороты.КВыполнениюОборот
	|		+ ТЭтапыОбороты.ВыполненоОборот
	|		+ ТЭтапыОбороты.БракОборот) КАК НеПланироватьЗаказом
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение = &Распоряжение) КАК ТЭтапыОбороты
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
	|		ПО (ТПродукция.Ссылка = &Распоряжение)
	|			И (ТПродукция.КодСтроки = ТЭтапыОбороты.КодСтрокиПродукция)
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
	|		ПО (ТЭтапыГрафик.Ссылка = &Распоряжение)
	|			И (ТЭтапыГрафик.КодСтроки = ТЭтапыОбороты.КодСтрокиЭтапыГрафик)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТПродукция.КлючСвязи,
	|	ТЭтапыГрафик.КлючСвязиЭтапы
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТЭтапыОбороты.КВыполнениюОборот
	|		+ ТЭтапыОбороты.ВыполненоОборот
	|		+ ТЭтапыОбороты.БракОборот) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТПродукция.КлючСвязи        КАК КлючСвязиПродукция,
	|	ТЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|	ДАТАВРЕМЯ(1, 1, 1)          КАК ГраницаЭтапа,
	|	СУММА(ТЭтапы.Выполнено)     КАК Количество
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ТЭтапы
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
	|		ПО (ТПродукция.Ссылка = &Распоряжение)
	|			И (ТПродукция.КодСтроки = ТЭтапы.КодСтрокиПродукция)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
	|		ПО (ТЭтапыГрафик.Ссылка = &Распоряжение)
	|			И (ТЭтапыГрафик.КодСтроки = ТЭтапы.КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	ТЭтапы.Активность
	|	И ТЭтапы.Распоряжение = &Распоряжение
	|	И ТЭтапы.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|	И ТЭтапы.Выполнено > 0
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТПродукция.КлючСвязи,
	|	ТЭтапыГрафик.КлючСвязиЭтапы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТПродукция.КлючСвязи               КАК КлючСвязиПродукция,
	|	ТЭтапыГрафик.КлючСвязиЭтапы        КАК КлючСвязиЭтапы,
	|	ТЭтапы.ОкончаниеЗавершающегоБуфера КАК ГраницаЭтапа,
	|	СУММА(ТЭтапы.КВыполнению
	|		+ ТЭтапы.Брак)                 КАК Количество
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ТЭтапы
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
	|		ПО (ТПродукция.Ссылка = &Распоряжение)
	|			И (ТПродукция.КодСтроки = ТЭтапы.КодСтрокиПродукция)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
	|		ПО (ТЭтапыГрафик.Ссылка = &Распоряжение)
	|			И (ТЭтапыГрафик.КодСтроки = ТЭтапы.КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	ТЭтапы.Активность
	|	И ТЭтапы.Распоряжение = &Распоряжение
	|	И ТЭтапы.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|	И ТЭтапы.КВыполнению + ТЭтапы.Брак > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТПродукция.КлючСвязи,
	|	ТЭтапыГрафик.КлючСвязиЭтапы,
	|	ТЭтапы.ОкончаниеЗавершающегоБуфера
	|	
	|УПОРЯДОЧИТЬ ПО
	|	КлючСвязиПродукция,
	|	КлючСвязиЭтапы,
	|	ГраницаЭтапа");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Количество этапа
	Выборка = РезультатЗапроса[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатНайденныеСтроки = Результат.НайтиСтроки(Новый Структура("КлючСвязиПродукция, КлючСвязи", Выборка.КлючСвязиПродукция, Выборка.КлючСвязиЭтапы));
		
		Для каждого РезультатНайденнаяСтрока из РезультатНайденныеСтроки Цикл
			
			РезультатНайденнаяСтрока.Количество = РезультатНайденнаяСтрока.Количество - Выборка.НеПланироватьЗаказом;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Границы этапа
	Результат.Колонки.Добавить("ГраницыЭтапа", Новый ОписаниеТипов("Массив"));

	Выборка = РезультатЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатНайденныеСтроки = Результат.НайтиСтроки(Новый Структура("КлючСвязиПродукция, КлючСвязи", Выборка.КлючСвязиПродукция, Выборка.КлючСвязиЭтапы));
		
		Для каждого РезультатНайденнаяСтрока из РезультатНайденныеСтроки Цикл
			
			Для Индекс = 1 по Мин(Выборка.Количество, РезультатНайденнаяСтрока.КоличествоЭтаповЗаказа - РезультатНайденнаяСтрока.ГраницыЭтапа.Количество()) Цикл
				
				РезультатНайденнаяСтрока.ГраницыЭтапа.Добавить(?(ЗначениеЗаполнено(Выборка.ГраницаЭтапа), Выборка.ГраницаЭтапа, Неопределено));
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// График работы подразделения
	Результат.Колонки.Добавить("ГрафикРаботыПодразделения");
	
	ГрафикиРаботыПодразделений = ГрафикРаботыПодразделений(Результат.ВыгрузитьКолонку("Подразделение"));
	
	Для каждого СтрокаРезультат из Результат Цикл
		
		СтрокаРезультат.ГрафикРаботыПодразделения = ГрафикиРаботыПодразделений[СтрокаРезультат.Подразделение].ГрафикРаботы;
		
	КонецЦикла;
	
	Результат.Индексы.Добавить("КлючСвязи");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМатериалыИУслуги()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗаказМатериалов.КодСтрокиРаспоряжения    КАК КодСтрокиРаспоряжения,
	|	ТЗаказМатериалов.ВариантОбеспечения       КАК ВариантОбеспечения,
	|	ТЗаказМатериалов.КоличествоОборот         КАК Количество,
	|	ТЗаказМатериалов.КоличествоУпаковокОборот КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТЗаказМатериалов
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(,,,
	|			Распоряжение = &Распоряжение
	|				И КодСтрокиРаспоряжения <> 0 И НЕ Отменено)КАК ТЗаказМатериалов
	|
	|ГДЕ 
	|	ТЗаказМатериалов.КоличествоОборот > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТМатериалыИУслуги.КлючСвязи          КАК КлючСвязи,
	|	ТМатериалыИУслуги.КлючСвязиЭтапы     КАК КлючСвязиЭтапы,
	|	ТМатериалыИУслуги.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ТЗаказМатериалов.ВариантОбеспечения  КАК ВариантОбеспечения,
	|	ТЗаказМатериалов.Количество          КАК Количество,
	|	ТЗаказМатериалов.КоличествоУпаковок  КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗаказМатериалов КАК ТЗаказМатериалов
	|		ПО (ТЗаказМатериалов.КодСтрокиРаспоряжения = ТМатериалыИУслуги.КодСтроки)
	|ГДЕ
	|	ТМатериалыИУслуги.Ссылка = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Индексы.Добавить("КлючСвязиЭтапы");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТрудозатраты()
	
	Результат = Трудозатраты.Выгрузить();
	
	Результат.Индексы.Добавить("КлючСвязиЭтапы");
	
	Возврат Результат;
	
КонецФункции

Функция ВидыРабочихЦентровДляРасчетаГрафика()

	СтруктураПоиска = Новый Структура("Использовать", Истина);
	ВидыРабочихЦентровДляРасчетаГрафика = ВидыРабочихЦентров.Выгрузить(СтруктураПоиска);
	
 	СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Для каждого ЭлементКоллекции Из СписокСтрок Цикл
		СтрокаВидРЦ = ВидыРабочихЦентровДляРасчетаГрафика.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВидРЦ, ЭлементКоллекции);
	КонецЦикла;
	
	// Получим данные о видах РЦ
	ВидыРабочихЦентровДляРасчетаГрафика.Колонки.Добавить("УчитыватьДоступностьПоГрафикуРаботы", Новый ОписаниеТипов("Булево"));
	СписокВидовРЦ = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ВидыРабочихЦентровДляРасчетаГрафика.ВыгрузитьКолонку("ВидРабочегоЦентра"));
	ЗначенияРеквизитовВидовРЦ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокВидовРЦ, "УчитыватьДоступностьПоГрафикуРаботы");
	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентровДляРасчетаГрафика Цикл
		СтрокаВидРЦ.УчитыватьДоступностьПоГрафикуРаботы = ЗначенияРеквизитовВидовРЦ.Получить(СтрокаВидРЦ.ВидРабочегоЦентра);
	КонецЦикла;
	
	Возврат ВидыРабочихЦентровДляРасчетаГрафика;
	
КонецФункции

Функция ГрафикРаботыПодразделений(МассивСсылок)
	
	Результат = Новый Соответствие;
	ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТПараметры.Ссылка КАК Подразделение,
	|	ВЫБОР КОГДА ТПараметры.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
	|		&ОсновнойКалендарьПредприятия
	|	ИНАЧЕ
	|		ТПараметры.ГрафикРаботы
	|	КОНЕЦ             КАК ГрафикРаботы
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК ТПараметры
	|ГДЕ
	|	ТПараметры.Ссылка В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ОсновнойКалендарьПредприятия", ОсновнойКалендарьПредприятия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Вставить(Выборка.Подразделение,
			Новый Структура("ГрафикРаботы", Выборка.ГрафикРаботы));
		
	КонецЦикла;
	
	Если Результат.Количество() < МассивСсылок.Количество() Тогда
		
		Для каждого ПодразделениеЭлемент из МассивСсылок Цикл
			
			Если Результат[ПодразделениеЭлемент] = Неопределено Тогда
				
				Результат.Вставить(ПодразделениеЭлемент,
					Новый Структура("ГрафикРаботы",
						ОсновнойКалендарьПредприятия));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПродукцияГрафик()
	
	Возврат ПродукцияГрафик.Выгрузить();
	
КонецФункции

Функция ПолучитьЭтапыГрафик()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЭтапыГрафик.Этап                         КАК Этап,
	|	ТЭтапыГрафик.Спецификация                 КАК Спецификация,
	|	ТЭтапыГрафик.Подразделение                КАК Подразделение,
	|	ТЭтапыОбороты.КВыполнениюОборот
	|		+ ТЭтапыОбороты.ВыполненоОборот
	|		+ ТЭтапыОбороты.БракОборот            КАК Количество,
	|	ТЭтапыГрафик.НачалоПредварительногоБуфера КАК НачалоПредварительногоБуфера,
	|	ТЭтапыГрафик.НачалоЭтапа                  КАК НачалоЭтапа,
	|	ТЭтапыГрафик.ОкончаниеЭтапа               КАК ОкончаниеЭтапа,
	|	ТЭтапыГрафик.ОкончаниеЗавершающегоБуфера  КАК ОкончаниеЗавершающегоБуфера,
	|	ТЭтапыГрафик.НомерЭтапа                   КАК НомерЭтапа,
	|	ТЭтапыГрафик.НомерСледующегоЭтапа         КАК НомерСледующегоЭтапа,
	|	ТЭтапыГрафик.КодСтроки                    КАК КодСтроки,
	|	ТЭтапыГрафик.КлючСвязи                    КАК КлючСвязи,
	|	ТЭтапыГрафик.КлючСвязиПродукция           КАК КлючСвязиПродукция,
	|	ТЭтапыГрафик.КлючСвязиЭтапы               КАК КлючСвязиЭтапы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение = &Распоряжение) КАК ТЭтапыОбороты
	|		ПО (ТЭтапыОбороты.КодСтрокиЭтапыГрафик = ТЭтапыГрафик.КодСтроки)
	|			И ((ТЭтапыОбороты.КВыполнениюОборот
	|				+ ТЭтапыОбороты.ВыполненоОборот
	|				+ ТЭтапыОбороты.БракОборот > 0))
	|
	|ГДЕ
	|	ТЭтапыГрафик.Ссылка = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВыходныеИзделияГрафик()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТВыходныеИзделияГрафик.ДатаЗапуска              КАК ДатаЗапуска,
	|	ТВыходныеИзделияГрафик.ДатаВыпуска              КАК ДатаВыпуска,
	|	ТВыходныеИзделияГрафик.КоличествоУпаковок
	|		* (ТЭтапыОбороты.КВыполнениюОборот
	|			+ ТЭтапыОбороты.ВыполненоОборот
	|			+ ТЭтапыОбороты.БракОборот)
	|		/ ТЭтапыГрафик.Количество                   КАК КоличествоУпаковок,
	|	ТВыходныеИзделияГрафик.Количество
	|		* (ТЭтапыОбороты.КВыполнениюОборот
	|			+ ТЭтапыОбороты.ВыполненоОборот
	|			+ ТЭтапыОбороты.БракОборот)
	|		/ ТЭтапыГрафик.Количество                   КАК Количество,
	|	ТВыходныеИзделияГрафик.КлючСвязиПродукция       КАК КлючСвязиПродукция,
	|	ТВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик     КАК КлючСвязиЭтапыГрафик,
	|	ТВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия КАК КлючСвязиВыходныеИзделия
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТВыходныеИзделияГрафик
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение = &Распоряжение) КАК ТЭтапыОбороты
	|			ПО (ТЭтапыОбороты.КодСтрокиЭтапыГрафик = ТЭтапыГрафик.КодСтроки)
	|				И (ТЭтапыОбороты.КВыполнениюОборот
	|					+ ТЭтапыОбороты.ВыполненоОборот
	|					+ ТЭтапыОбороты.БракОборот > 0)
	|
	|		ПО (ТЭтапыГрафик.Ссылка = &Распоряжение)
	|			И (ТЭтапыГрафик.КлючСвязи = ТВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик)
	|
	|ГДЕ
	|	ТВыходныеИзделияГрафик.Ссылка = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВозвратныеОтходыГрафик()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТВозвратныеОтходыГрафик.ДатаВыпуска              КАК ДатаВыпуска,
	|	ТВозвратныеОтходыГрафик.КоличествоУпаковок
	|		* (ТЭтапыОбороты.КВыполнениюОборот
	|			+ ТЭтапыОбороты.ВыполненоОборот
	|			+ ТЭтапыОбороты.БракОборот)
	|		/ ТЭтапыГрафик.Количество                   КАК КоличествоУпаковок,
	|	ТВозвратныеОтходыГрафик.Количество
	|		* (ТЭтапыОбороты.КВыполнениюОборот
	|			+ ТЭтапыОбороты.ВыполненоОборот
	|			+ ТЭтапыОбороты.БракОборот)
	|		/ ТЭтапыГрафик.Количество                   КАК Количество,
	|	ТВозвратныеОтходыГрафик.КлючСвязиПродукция       КАК КлючСвязиПродукция,
	|	ТВозвратныеОтходыГрафик.КлючСвязиЭтапыГрафик     КАК КлючСвязиЭтапыГрафик,
	|	ТВозвратныеОтходыГрафик.КлючСвязиВозвратныеОтходы КАК КлючСвязиВозвратныеОтходы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВозвратныеОтходыГрафик КАК ТВозвратныеОтходыГрафик
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение = &Распоряжение) КАК ТЭтапыОбороты
	|			ПО (ТЭтапыОбороты.КодСтрокиЭтапыГрафик = ТЭтапыГрафик.КодСтроки)
	|				И (ТЭтапыОбороты.КВыполнениюОборот
	|					+ ТЭтапыОбороты.ВыполненоОборот
	|					+ ТЭтапыОбороты.БракОборот > 0)
	|
	|		ПО (ТЭтапыГрафик.Ссылка = &Распоряжение)
	|			И (ТЭтапыГрафик.КлючСвязи = ТВозвратныеОтходыГрафик.КлючСвязиЭтапыГрафик)
	|
	|ГДЕ
	|	ТВозвратныеОтходыГрафик.Ссылка = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМатериалыИУслугиГрафик()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТМатериалыИУслугиГрафик.ДатаПотребности           КАК ДатаПотребности,
	|	ТМатериалыИУслугиГрафик.КоличествоУпаковок
	|		* (ТЭтапыОбороты.КВыполнениюОборот
	|			+ ТЭтапыОбороты.ВыполненоОборот
	|			+ ТЭтапыОбороты.БракОборот)
	|		/ ТЭтапыГрафик.Количество                     КАК КоличествоУпаковок,
	|	ТМатериалыИУслугиГрафик.Количество
	|		* (ТЭтапыОбороты.КВыполнениюОборот
	|			+ ТЭтапыОбороты.ВыполненоОборот
	|			+ ТЭтапыОбороты.БракОборот)
	|		/ ТЭтапыГрафик.Количество                     КАК Количество,
	|	ТМатериалыИУслугиГрафик.КлючСвязиПродукция        КАК КлючСвязиПродукция,
	|	ТМатериалыИУслугиГрафик.КлючСвязиЭтапыГрафик      КАК КлючСвязиЭтапыГрафик,
	|	ТМатериалыИУслугиГрафик.КлючСвязиМатериалыИУслуги КАК КлючСвязиМатериалыИУслуги,
	|	ТМатериалыИУслугиГрафик.ВариантОбеспечения        КАК ВариантОбеспечения
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслугиГрафик КАК ТМатериалыИУслугиГрафик
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение = &Распоряжение) КАК ТЭтапыОбороты
	|			ПО (ТЭтапыОбороты.КодСтрокиЭтапыГрафик = ТЭтапыГрафик.КодСтроки)
	|				И (ТЭтапыОбороты.КВыполнениюОборот
	|					+ ТЭтапыОбороты.ВыполненоОборот
	|					+ ТЭтапыОбороты.БракОборот > 0)
	|
	|		ПО (ТЭтапыГрафик.Ссылка = &Распоряжение)
	|			И (ТЭтапыГрафик.КлючСвязи = ТМатериалыИУслугиГрафик.КлючСвязиЭтапыГрафик)
	|
	|ГДЕ
	|	ТМатериалыИУслугиГрафик.Ссылка = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТрудозатратыГрафик()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТТрудозатратыГрафик.ДатаПотребности       КАК ДатаПотребности,
	|	ТТрудозатратыГрафик.Количество
	|		* (ТЭтапыОбороты.КВыполнениюОборот
	|			+ ТЭтапыОбороты.ВыполненоОборот
	|			+ ТЭтапыОбороты.БракОборот)
	|		/ ТЭтапыГрафик.Количество             КАК Количество,
	|	ТТрудозатратыГрафик.КлючСвязиПродукция    КАК КлючСвязиПродукция,
	|	ТТрудозатратыГрафик.КлючСвязиЭтапыГрафик  КАК КлючСвязиЭтапыГрафик,
	|	ТТрудозатратыГрафик.КлючСвязиТрудозатраты КАК КлючСвязиТрудозатраты
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ТрудозатратыГрафик КАК ТТрудозатратыГрафик
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТЭтапыГрафик
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение = &Распоряжение) КАК ТЭтапыОбороты
	|			ПО (ТЭтапыОбороты.КодСтрокиЭтапыГрафик = ТЭтапыГрафик.КодСтроки)
	|				И (ТЭтапыОбороты.КВыполнениюОборот
	|					+ ТЭтапыОбороты.ВыполненоОборот
	|					+ ТЭтапыОбороты.БракОборот > 0)
	|
	|		ПО (ТЭтапыГрафик.Ссылка = &Распоряжение)
	|			И (ТЭтапыГрафик.КлючСвязи = ТТрудозатратыГрафик.КлючСвязиЭтапыГрафик)
	|
	|ГДЕ
	|	ТТрудозатратыГрафик.Ссылка = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗанятостьВидовРабочихЦентров()
	
	Возврат ЗанятостьВидовРабочихЦентров.ВыгрузитьКолонки();
	
КонецФункции

Функция ПолучитьДатыОбеспечения()
	
	ДатыОбеспечения = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТЗаказМатериалов.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ТЗаказМатериалов.ДатаПотребности       КАК ДатаПотребности
	|ПОМЕСТИТЬ ВТЗаказМатериалов
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(,,,
	|				Распоряжение = &Распоряжение
	|					И КодСтрокиРаспоряжения <> 0
	|					И (ВариантОбеспечения В (
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)))) КАК ТЗаказМатериалов
	|
	|ГДЕ 
	|	ТЗаказМатериалов.КоличествоОборот > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТМатериалыИУслуги.КлючСвязиЭтапы           КАК КлючСвязиЭтапы,
	|	МАКСИМУМ(ТЗаказМатериалов.ДатаПотребности) КАК ДатаПотребности
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаказМатериалов КАК ТЗаказМатериалов
	|			ПО (ТЗаказМатериалов.КодСтрокиРаспоряжения = ТМатериалыИУслуги.КодСтроки)
	|ГДЕ
	|	ТМатериалыИУслуги.Ссылка = &Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТМатериалыИУслуги.КлючСвязиЭтапы");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//Максимальная дата обеспечения для материалов этапа
			ДатыОбеспечения.Вставить(Выборка.КлючСвязиЭтапы, Выборка.ДатаПотребности);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДатыОбеспечения;
	
КонецФункции

Процедура ДобавитьЭтапыВосстановления(КлючСвязиПродукция, ТаблицаЭтапов, ТаблицаУчетаБрака, КлючСвязиИсправляемогоЭтапа) Экспорт
	
	Перем КлючСвязиЭтапаВосстанавливающегоБрак;
	
	ОтборКлючСвязи = Новый Структура("КлючСвязи");
	ОтборКлючСвязиЭтапы = Новый Структура("КлючСвязиЭтапы");
	ОтборКлючСвязиПолуфабрикат = Новый Структура("КлючСвязиПолуфабрикат");
	ОтборПромежуточныйВыпуск = Новый Структура("КлючСвязиЭтапы, КлючСвязиМатериалыИУслуги");
	
	СоответствиеКлючейСвязиЭтапов = Новый Соответствие;
	СоответствиеКлючейСвязиПолуфабрикатовПоСпецификации = Новый Соответствие;
	СоответствиеКлючейСвязиПолуфабрикатовНаЭтапах = Новый Соответствие;
	
	МассивДобавленныхЭтапов = Новый Массив;
	
	ВводКорректировкиЗаказаМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.Создать();
	ВводКорректировкиЗаказаМатериалов.ЗаполнитьВводКорректировкиСпецификацииЗаказа(Ссылка, КлючСвязиПродукция, Истина, Ложь);
	
	ТаблицаМатериалыИУслуги = ВводКорректировкиЗаказаМатериалов.МатериалыИУслуги.Выгрузить();
	ТаблицаМатериалыИУслуги.Индексы.Добавить("КлючСвязиЭтапы");
	
	ВводКорректировкиЗаказаМатериалов.МатериалыИУслуги.Очистить();
	ВводКорректировкиЗаказаМатериалов = Неопределено;
	
	Для Каждого СтрокаДобавляемыйЭтап из ТаблицаЭтапов Цикл
		
		ОтборКлючСвязи.КлючСвязи = СтрокаДобавляемыйЭтап.КлючСвязи;
		ОтборКлючСвязиЭтапы.КлючСвязиЭтапы = СтрокаДобавляемыйЭтап.КлючСвязи;
		
		ЭтапСпецификации = Этапы.НайтиСтроки(ОтборКлючСвязи)[0];
		
		КлючСвязиНовогоЭтапа = Новый УникальныйИдентификатор;
		КоличествоЭтаповВосстановления = СтрокаДобавляемыйЭтап.ИзменениеКоличестваЭтапов;
		
		Если КлючСвязиИсправляемогоЭтапа = СтрокаДобавляемыйЭтап.КлючСвязи Тогда
			КлючСвязиЭтапаВосстанавливающегоБрак = КлючСвязиНовогоЭтапа;
		КонецЕсли;
		
		// Добавление этапа.
		НовыйЭтап = Этапы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапСпецификации, , "КлючСвязи, Количество");
		НовыйЭтап.НаименованиеЭтапа = НовыйЭтап.НаименованиеЭтапа + " " + НСтр("ru='(восстановление)';uk='(відновлення)'");
		НовыйЭтап.КлючСвязи = КлючСвязиНовогоЭтапа;
		НовыйЭтап.КлючСвязиЭтапыБрак = СтрокаДобавляемыйЭтап.КлючСвязи;
		НовыйЭтап.Количество = КоличествоЭтаповВосстановления;
		НовыйЭтап.ЭтапВосстановленияБрака = Истина;
		
		СоответствиеКлючейСвязиЭтапов.Вставить(ЭтапСпецификации.КлючСвязи, КлючСвязиНовогоЭтапа);
		МассивДобавленныхЭтапов.Добавить(НовыйЭтап);
		
		// Добавление материалов, трудозатрат, выходных изделий, видов рабочих центров.
		
		НайденныеСтрокиМатериалы = ТаблицаМатериалыИУслуги.НайтиСтроки(ОтборКлючСвязиЭтапы);
		
		Для Каждого СтрокаМатериал Из НайденныеСтрокиМатериалы Цикл
			
			НоваяСтрокаМатериал = МатериалыИУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаМатериал, СтрокаМатериал, , "КодСтроки, КлючСвязи, КлючСвязиЭтапы, Количество, КоличествоУпаковок");
			
			НоваяСтрокаМатериал.КлючСвязи = Новый УникальныйИдентификатор;
			НоваяСтрокаМатериал.КлючСвязиЭтапы = КлючСвязиНовогоЭтапа;
			НоваяСтрокаМатериал.КлючСвязиЭтапыСтрока = Строка(КлючСвязиНовогоЭтапа);
			НоваяСтрокаМатериал.КоличествоУпаковок = КоличествоЭтаповВосстановления * СтрокаМатериал.КоличествоУпаковок / ЭтапСпецификации.Количество;
			НоваяСтрокаМатериал.Количество = КоличествоЭтаповВосстановления * СтрокаМатериал.Количество / ЭтапСпецификации.Количество;
			
			Если НоваяСтрокаМатериал.ПроизводитсяВПроцессе Тогда
				
				Если ТипЗнч(НоваяСтрокаМатериал.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
					
					ОтборКлючСвязиПолуфабрикат.КлючСвязиПолуфабрикат = СтрокаМатериал.КлючСвязи;
					НайденныеСтрокиЭтапыПолуфабриката = ТаблицаЭтапов.НайтиСтроки(ОтборКлючСвязиПолуфабрикат);
					
					Если НайденныеСтрокиЭтапыПолуфабриката.Количество() > 0 Тогда
						СоответствиеКлючейСвязиПолуфабрикатовПоСпецификации.Вставить(СтрокаМатериал.КлючСвязи, НоваяСтрокаМатериал.КлючСвязи);
					Иначе
						НоваяСтрокаМатериал.ПроизводитсяВПроцессе = Ложь;
						НоваяСтрокаМатериал.ИсточникПолученияПолуфабриката = Справочники.РесурсныеСпецификации.ПустаяСсылка();
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(НоваяСтрокаМатериал.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.ЭтапыПроизводства") Тогда
					
					НоваяСтрокаМатериал.КлючСвязиЭтапВыпуска = СоответствиеКлючейСвязиЭтапов.Получить(НоваяСтрокаМатериал.КлючСвязиЭтапВыпуска);
					
					ОтборПромежуточныйВыпуск.КлючСвязиЭтапы = НоваяСтрокаМатериал.КлючСвязиЭтапВыпуска;
					ОтборПромежуточныйВыпуск.КлючСвязиМатериалыИУслуги = СтрокаМатериал.КлючСвязи;
					
					Для Каждого ЭлементКоллекции Из ВозвратныеОтходы.НайтиСтроки(ОтборПромежуточныйВыпуск) Цикл
						ЭлементКоллекции.КлючСвязиМатериалыИУслуги = НоваяСтрокаМатериал.КлючСвязи;
					КонецЦикла;
					
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		НайденныеСтрокиВыходныеИзделия = ВыходныеИзделия.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого СтрокаВыходноеИзделие Из НайденныеСтрокиВыходныеИзделия Цикл
			НоваяСтрокаВыходноеИзделие = ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВыходноеИзделие, СтрокаВыходноеИзделие, , "КлючСвязи, КлючСвязиЭтапы, Количество, КоличествоУпаковок");
			НоваяСтрокаВыходноеИзделие.КлючСвязиЭтапы = КлючСвязиНовогоЭтапа;
			НоваяСтрокаВыходноеИзделие.КоличествоУпаковок = КоличествоЭтаповВосстановления * СтрокаВыходноеИзделие.КоличествоУпаковок / ЭтапСпецификации.Количество;
			НоваяСтрокаВыходноеИзделие.Количество = КоличествоЭтаповВосстановления * СтрокаВыходноеИзделие.Количество / ЭтапСпецификации.Количество;
			НоваяСтрокаВыходноеИзделие.КлючСвязи = Новый УникальныйИдентификатор;
			
			Если ЗначениеЗаполнено(СтрокаВыходноеИзделие.КлючСвязиПолуфабрикат) Тогда
				НоваяСтрокаВыходноеИзделие.КлючСвязиПолуфабрикат = СоответствиеКлючейСвязиПолуфабрикатовПоСпецификации[СтрокаВыходноеИзделие.КлючСвязиПолуфабрикат];
			КонецЕсли;
			
		КонецЦикла;
		
		НайденныеСтрокиВозвратныеОтходы = ВозвратныеОтходы.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого СтрокаВозвратныеОтходы Из НайденныеСтрокиВозвратныеОтходы Цикл
			
			НоваяСтрокаВозвратныеОтходы = ВозвратныеОтходы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВозвратныеОтходы, СтрокаВозвратныеОтходы, , "КлючСвязи, КлючСвязиЭтапы, Количество, КоличествоУпаковок");
			
			НоваяСтрокаВозвратныеОтходы.КлючСвязи      = Новый УникальныйИдентификатор;
			НоваяСтрокаВозвратныеОтходы.КлючСвязиЭтапы = КлючСвязиНовогоЭтапа;
			
			НоваяСтрокаВозвратныеОтходы.Количество = КоличествоЭтаповВосстановления * СтрокаВозвратныеОтходы.Количество / ЭтапСпецификации.Количество;
			НоваяСтрокаВозвратныеОтходы.КоличествоУпаковок = КоличествоЭтаповВосстановления * СтрокаВозвратныеОтходы.КоличествоУпаковок / ЭтапСпецификации.Количество;

		КонецЦикла;
		
		НайденныеСтрокиТрудозатраты = Трудозатраты.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого СтрокаТрудозатрат Из НайденныеСтрокиТрудозатраты Цикл
			НоваяСтрокаТрудозатрат = Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТрудозатрат, СтрокаТрудозатрат, , "КлючСвязи, КлючСвязиЭтапы, Количество");
			НоваяСтрокаТрудозатрат.КлючСвязиЭтапы = КлючСвязиНовогоЭтапа;
			НоваяСтрокаТрудозатрат.Количество = КоличествоЭтаповВосстановления * СтрокаТрудозатрат.Количество / ЭтапСпецификации.Количество;
			НоваяСтрокаТрудозатрат.КлючСвязи = Новый УникальныйИдентификатор;
		КонецЦикла;
		
		НайденныеСтрокиВидыРабочихЦентров = ВидыРабочихЦентров.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого СтрокаВидовРабочихЦентров Из НайденныеСтрокиВидыРабочихЦентров Цикл
			НоваяСтрокаВидыРабочихЦентров = ВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаВидыРабочихЦентров, СтрокаВидовРабочихЦентров, , "КлючСвязи, КлючСвязиЭтапы");
			НоваяСтрокаВидыРабочихЦентров.КлючСвязиЭтапы = КлючСвязиНовогоЭтапа;
			НоваяСтрокаВидыРабочихЦентров.КлючСвязи = Новый УникальныйИдентификатор;
		КонецЦикла;
		
		НайденныеСтрокиАВидыРабочихЦентров = АльтернативныеВидыРабочихЦентров.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого СтрокаАВидовРабочихЦентров Из НайденныеСтрокиАВидыРабочихЦентров Цикл
			НоваяСтрокаАВидыРабочихЦентров = АльтернативныеВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАВидыРабочихЦентров, СтрокаАВидовРабочихЦентров, , "КлючСвязи, КлючСвязиЭтапы");
			НоваяСтрокаАВидыРабочихЦентров.КлючСвязиЭтапы = КлючСвязиНовогоЭтапа;
			НоваяСтрокаАВидыРабочихЦентров.КлючСвязи = Новый УникальныйИдентификатор;
		КонецЦикла;
		
	КонецЦикла;
	
	// Дополняем этапы данными о родительских этапах и полуфабрикатах.
	Для Каждого Строка Из МассивДобавленныхЭтапов Цикл
		
		Если ЗначениеЗаполнено(Строка.КлючСвязиЭтапы) и СоответствиеКлючейСвязиЭтапов[Строка.КлючСвязиЭтапы] <> Неопределено Тогда
			Строка.КлючСвязиЭтапы = СоответствиеКлючейСвязиЭтапов.Получить(Строка.КлючСвязиЭтапы);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.КлючСвязиПолуфабрикат) И СоответствиеКлючейСвязиПолуфабрикатовПоСпецификации[Строка.КлючСвязиПолуфабрикат] <> Неопределено Тогда
			Строка.КлючСвязиПолуфабрикат = СоответствиеКлючейСвязиПолуфабрикатовПоСпецификации[Строка.КлючСвязиПолуфабрикат];
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаУчетаБрака Цикл
		НоваяСтрока = ЭтапыВосстановленияБрака.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КлючСвязиЭтапы = КлючСвязиЭтапаВосстанавливающегоБрак;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДанныеСвязанныеСМатериаламиВПроцессе(МассивКлючей)
	
	МассивУдаленныхЭтапов = Новый Массив;
	
	Для каждого Ключ Из МассивКлючей Цикл
		
		УдаляемыеСтроки = Этапы.НайтиСтроки(Новый Структура("КлючСвязиПолуфабрикат", Ключ));
		
		Для каждого УдаляемаяСтрока из УдаляемыеСтроки Цикл
			МассивУдаленныхЭтапов.Добавить(УдаляемаяСтрока.КлючСвязи);
			Этапы.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Ключ Из МассивУдаленныхЭтапов Цикл
	
		// Удалить связанные строки из табличной части "ВыходныеИзделия"
		ПланированиеПроизводства.УдалитьСтрокиПоКлючу(ЭтотОбъект, "ВыходныеИзделия", Ключ, "КлючСвязиЭтапы");
		
		// Удалить связанные строки из табличной части "МатериалыИУслуги"
		ПланированиеПроизводства.УдалитьСтрокиПоКлючу(ЭтотОбъект, "МатериалыИУслуги", Ключ, "КлючСвязиЭтапы");
		
		// Удалить связанные строки из табличной части "Трудозатраты"
		ПланированиеПроизводства.УдалитьСтрокиПоКлючу(ЭтотОбъект, "Трудозатраты", Ключ, "КлючСвязиЭтапы");
		
		// Удалить связанные строки из табличной части "ВидыРабочихЦентров"
		ПланированиеПроизводства.УдалитьСтрокиПоКлючу(ЭтотОбъект, "ВидыРабочихЦентров", Ключ, "КлючСвязиЭтапы");
		
		// Удалить связанные строки из табличной части "АльтернативныеВидыРабочихЦентров"
		ПланированиеПроизводства.УдалитьСтрокиПоКлючу(ЭтотОбъект, "АльтернативныеВидыРабочихЦентров", Ключ, "КлючСвязиЭтапы");
		
		// Удалить связанные строки из табличной части "ЭтапыВосстановленияБрака"
		ПланированиеПроизводства.УдалитьСтрокиПоКлючу(ЭтотОбъект, "ЭтапыВосстановленияБрака", Ключ, "КлючСвязиЭтапы");
		
	КонецЦикла; 
	
КонецПроцедуры

Функция МожноЗаполнитьПоСпецификации(ДанныеСтроки)

	// Реквизиты, которые обязательно должны быть заполнены чтобы можно было заполнить данные спецификации
	МассивПроверки = Новый Массив;
	МассивПроверки.Добавить("Номенклатура");
	МассивПроверки.Добавить("КоличествоУпаковок");
	МассивПроверки.Добавить("Характеристика");
	МассивПроверки.Добавить("Склад");
	
	РеквизитыНоменклатуры = Неопределено;
	Для каждого ИмяПроверяемогоРеквизита Из МассивПроверки Цикл
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяПроверяемогоРеквизита]) Тогда
			Если (ИмяПроверяемогоРеквизита = "Характеристика" 
					ИЛИ ИмяПроверяемогоРеквизита = "Склад")
				И ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
				
				Если РеквизитыНоменклатуры = Неопределено Тогда
					РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
													ДанныеСтроки.Номенклатура, 
													"ТипНоменклатуры, ИспользованиеХарактеристик");
				КонецЕсли;
				
				Если ИмяПроверяемогоРеквизита = "Характеристика"
					И (РеквизитыНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
					    ИЛИ РеквизитыНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры
						ИЛИ РеквизитыНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) Тогда
						
					Возврат Ложь;
					
				ИначеЕсли ИмяПроверяемогоРеквизита = "Склад"
					И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа
					И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Услуга Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Процедура УстановитьКодВСтрокахТабличнойЧасти(ИмяТабличнойЧасти)

	СтрокиБезКлюча = ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	
	Если СтрокиБезКлюча.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийКод = 0;
	КодыСтрок = ЭтотОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("КодСтроки");
	
	Для каждого КодСтроки из КодыСтрок Цикл
		
		ТекущийКод = Макс(ТекущийКод, КодСтроки);
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.КодСтроки КАК КодСтроки
	|ИЗ
	|	&ТабличнаяЧасть КАК Т
	|
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧасть", "Документ.ЗаказНаПроизводство." + ИмяТабличнойЧасти);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекущийКод = Макс(ТекущийКод, Выборка.КодСтроки);
		
	КонецЕсли;
	
	Для каждого СтрокаБезКлюча из СтрокиБезКлюча Цикл
		
		ТекущийКод = ТекущийКод + 1;
		СтрокаБезКлюча.КодСтроки = ТекущийКод;
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьКодВСтрокахТабличнойЧастиСУчетомКорректировок()

	СтрокиБезКлюча = МатериалыИУслуги.НайтиСтроки(Новый Структура("КодСтроки", 0));
	
	Если СтрокиБезКлюча.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		Попытка
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаЗаказаМатериаловВПроизводство");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Ссылка);
			
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	   		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли; 
	
	ТекущийКод = 0;
	КодыСтрок = МатериалыИУслуги.ВыгрузитьКолонку("КодСтроки");
	
	Для каждого КодСтроки из КодыСтрок Цикл
		ТекущийКод = Макс(ТекущийКод, КодСтроки);
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.КодСтроки КАК КодСтроки
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.МаксимальныйКодСтроки
	|ИЗ
	|	Документ.КорректировкаЗаказаМатериаловВПроизводство КАК Т
	|ГДЕ
	|	Т.Распоряжение = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекущийКод = Макс(ТекущийКод, Выборка.КодСтроки);
		
	КонецЕсли;
	
	Для каждого СтрокаБезКлюча из СтрокиБезКлюча Цикл
		
		ТекущийКод = ТекущийКод + 1;
		СтрокаБезКлюча.КодСтроки = ТекущийКод;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьПараметрыОтменыКорректировокЗаказаМатериалов(ДополнительныеСвойства)
	
	Если Не ДополнительныеСвойства.ЭтоНовый
		И ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиЗаказаМатериаловВПроизводство")
		И (ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
			ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
					И Статус = Перечисления.СтатусыЗаказовНаПроизводство.Создан) Тогда
		
		ДополнительныеСвойства.Вставить("ОтменитьКорректировкиПоРаспоряжению", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтменитьКорректировкиЗаказаМатериаловВПроизводство(ДополнительныеСвойства)
	
	Если Не ДополнительныеСвойства.Свойство("ОтменитьКорректировкиПоРаспоряжению") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Удалить("ОтменитьКорректировкиПоРаспоряжению");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.КорректировкаЗаказаМатериаловВПроизводство");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Распоряжение", Ссылка);
	
	Блокировка.Заблокировать();

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Документ.КорректировкаЗаказаМатериаловВПроизводство
		|ГДЕ
		|	Распоряжение = &Распоряжение
		|	И Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	МоментВремени УБЫВ");
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Корректировка = Выборка.Ссылка.ПолучитьОбъект();
			Корректировка.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьМаршрутныеЛистыПроизводства()
	
	Если Не ПланированиеПроизводства.ТребуетсяАктуализацияМаршрутныхЛистов(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Документы.МаршрутныйЛистПроизводства.АктуализироватьМаршрутныеЛистыПроизводства(
		ПланированиеПроизводства.ПараметрыАктуализацииМаршрутныхЛистов(ЭтотОбъект));
	
	ПланированиеПроизводства.ОчиститьПараметрыАктуализацииМаршрутныхЛистов(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеКоличества(ПроверяемыеРеквизиты, Отказ)

	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Продукция";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "ВыходныеИзделия";
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "ВыходныеИзделия.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "ВозвратныеОтходы";
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "ВозвратныеОтходы.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "МатериалыИУслуги";
	ПараметрыПроверки.УсловиеОтбораСтрокДляОкругления = "МатериалыИУслуги.ЗаказатьНаСклад = ИСТИНА";
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли