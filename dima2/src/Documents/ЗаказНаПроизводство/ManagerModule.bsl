#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	Документы.ПриходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	Документы.РазрешениеНаЗаменуМатериалов.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

	Обработки.ВводКорректировкиЗаказаМатериалов.ДобавитьКомандуСоздатьНаОснованииКорректировкаЗаказаМатериалов(КомандыСоздатьНаОсновании);
	
	Документы.ПередачаМатериаловВПроизводство.ДобавитьКомандуСоздатьНаОснованииПередачаВПроизводство(КомандыСоздатьНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);

КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ЗаказНаПроизводство.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаПроизводство);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	//++ НЕ УТКА
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуОтклоненияРасходов(КомандыОтчетов);
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПередачаМатериаловПоЗаказу(КомандыОтчетов);
	//-- НЕ УТКА

	//++ НЕ УТКА
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияЗаказа(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	//-- НЕ УТКА

	//++ НЕ УТКА
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтоимостьМатериаловИРабот(КомандыОтчетов);
	//-- НЕ УТКА

КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#Область Обеспечение

// Возвращает признак наличия в заказе возможности управления частичной отгрузкой.
// Используется в состоянии обеспечения. Если возможность есть, то пользователь может
// управлять флагом "Не отгружать частями" из обработки состояния обеспечения,
// при выполнении действий с заказом.
//
Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Ложь;
КонецФункции

//Используется для получения данных из заказов на производство, используемых в обработке "Состояние обеспечения заказов".
//Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
//Возвращаемое значение:
// Строка - Текст запроса - Текст запроса для выборки данных:
// 1) источнике данных о потребности:
// - "Заказ", "КодСтроки", "НомерСтроки",
// 2) аналитики потребности:
// - "Номенклатура", "Характеристика", "Склад", "Назначение", "Подразделение",
// 3) текущем варианте обеспечения:
// - "ВариантОбеспечения", "ДатаОтгрузки", "Количество",
// 4) общих для заказа параметрах обеспечения:
// - "ЖелаемаяДатаОтгрузки", "НеОтгружатьЧастями".
// 5) реквизиты документа отображаемые в форме обработки состояния обеспечения":
// - "Упаковка", "Дата", "Партнер", "Статус", "СтатусИспользуется", "Дата".
// 
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДанныеУчета.Распоряжение               КАК Заказ,
		|	ДанныеУчета.КодСтроки                  КАК КодСтроки,
		|
		|	ДанныеУчета.КодСтроки                  КАК НомерСтроки,
		|	ТПродукция.НомерСтроки                 КАК НомерСтрокиПродукция,
		|	ТПродукция.Номенклатура                КАК Продукция,
		|	ТЭтапы.Этап                            КАК Этап,
		|	ТЭтапы.НомерЭтапа                      КАК ЭтапПорядок,
		|
		|	ДанныеУчета.Номенклатура               КАК Номенклатура,
		|	ДанныеУчета.Характеристика             КАК Характеристика,
		|	ДанныеУчета.Склад                      КАК Склад,
		|	ДанныеУчета.Назначение                 КАК Назначение,
		|	ДанныеУчета.Подразделение              КАК Подразделение,
		|
		|	ДанныеУчета.ВариантОбеспечения         КАК ВариантОбеспечения,
		|	ДанныеУчета.ДатаПотребности            КАК ДатаОтгрузки,
		|
		|	ДанныеУчета.Упаковка                   КАК Упаковка,
		|	ДанныеУчета.Количество                 КАК Количество,
		|
		|	ТПродукция.НачатьНеРанее               КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ                                   КАК НеОтгружатьЧастями,
		|	ТЗаказыНаПроизводство.Дата             КАК Дата,
		|	НЕОПРЕДЕЛЕНО                           КАК Партнер,
		|	ТЗаказыНаПроизводство.Статус           КАК Статус,
		|	ИСТИНА                                 КАК СтатусИспользуется
		|ИЗ
		|	ВТЗаказыМатериаловСУчетомКорректировок КАК ДанныеУчета
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
		|		ПО (ТМатериалыИУслуги.Ссылка = ТПродукция.Ссылка
		|				И ТМатериалыИУслуги.КлючСвязиПродукция = ТПродукция.КлючСвязи)
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТЭтапы
		|		ПО (ТМатериалыИУслуги.Ссылка = ТЭтапы.Ссылка
		|				И ТМатериалыИУслуги.КлючСвязиЭтапы = ТЭтапы.КлючСвязи)
		|
		|	ПО (ТМатериалыИУслуги.Ссылка = ДанныеУчета.Распоряжение)
		|		И (ТМатериалыИУслуги.КодСтроки = ДанныеУчета.КодСтрокиРаспоряжения)
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТЗаказыНаПроизводство
		|	ПО (ДанныеУчета.Распоряжение = ТЗаказыНаПроизводство.Ссылка)
		|
		|ГДЕ
		|	НЕ ТМатериалыИУслуги.ПроизводитсяВПроцессе
		|
		|{ГДЕ
		|	ТЗаказыНаПроизводство.Ссылка.*        КАК Заказ,
		|	ДанныеУчета.Склад.*                   КАК Склад,
		|	ТЗаказыНаПроизводство.Ответственный.* КАК Менеджер,
		|	ВЫРАЗИТЬ(ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Справочник.Партнеры).*  КАК Партнер}";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	Товары = Объект.МатериалыИУслуги;
	
	УдалитьНедопустимыеДанныеЗаполнения(Операция, Товары, Ложь, ДанныеЗаполнения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");
	ТекСтрокаТовары = Неопределено;
	Идентификатор = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	
	НачатьНеРанее = Новый Соответствие();
	Для каждого СтрокаПродукция Из Объект.Продукция цикл
		НачатьНеРанее.Вставить(СтрокаПродукция.КлючСвязи, СтрокаПродукция.НачатьНеРанее);
	КонецЦикла;
	
	СтрокиПродукции = Новый Соответствие();
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		
		//Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда
			
			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "Заказ" Или Операция = "СтрокиТовары" Тогда
				СтрокаТовары = Товары.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Товары[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
			
		Иначе
			ТекСтрокаТовары = Товары.Вставить(Товары.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			ТекСтрокаТовары.КлючСвязи = Новый УникальныйИдентификатор;
			Добавлено = Добавлено + 1;
		КонецЕсли;
		
		СтрокиПродукции.Вставить(ТекСтрокаТовары.КлючСвязиПродукция, Истина);
		//Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад");
		
		Если СтрокаОбеспечения.Отгружено = 0 Тогда
			ТекСтрокаТовары.ДатаПотребности = Макс(СтрокаОбеспечения.ДатаОтгрузки,
				НачатьНеРанее.Получить(ТекСтрокаТовары.КлючСвязиПродукция));
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);
		
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);
		
	КонецЦикла;
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект,
			Документы.ЗаказНаПроизводство));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Если Операция = "Заказ" Или Операция = "СтрокиТовары" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Для каждого Строка Из Объект.Продукция Цикл
		
		Если СтрокиПродукции.Получить(Строка.КлючСвязи) <> Неопределено Тогда
			Строка.ГрафикРассчитан = Ложь;
			Строка.ИзмененияЗапрещены = Ложь;
			Если Операция = "Заказ" Или Операция = "СтрокиТовары" Тогда
				ГрафикВыпускаПродукцииИзмененияЗапрещеныУстановить(Форма.ГрафикВыпускаПродукции, Строка.КлючСвязи, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Если Объект.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан Тогда
		Объект.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
	КонецЕсли;
	
	Возврат Счетчик;
	
КонецФункции

Функция ПараметрыВыбораОбеспечения(Статус) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПутиКДанным",          Новый Соответствие());
	Параметры.Вставить("ИмяТабличнойЧасти",    "МатериалыИУслуги");
	Параметры.Вставить("СтатусКВыполнению",    Истина);
	Параметры.Вставить("ИмяМенеджераРегистра", "ЗаказыМатериаловСУчетомКорректировок");
	
	Параметры.ПутиКДанным.Вставить("ДатаОтгрузки", "ДатаПотребности");
	
	Возврат Параметры;
	
КонецФункции

Функция ТоварыДляОбеспечения(Заказ, КлючСвязи = Неопределено) Экспорт
	
	ТоварыДляОбеспечения = ОбеспечениеСервер.ТаблицаПоОписаниюПолей(ОбеспечениеСервер.ПутиКДаннымПоУмолчанию());
	
	ТоварыДляОбеспечения.Колонки.Добавить("ЖелаемаяДатаОтгрузки");
	ТоварыДляОбеспечения.Колонки.Добавить("НомерСтрокиПродукция");
	ТоварыДляОбеспечения.Колонки.Добавить("Продукция");
	ТоварыДляОбеспечения.Колонки.Добавить("Этап");
	ТоварыДляОбеспечения.Колонки.Добавить("ЭтапПорядок");

	Если КлючСвязи <> Неопределено Тогда
		
		ТоварыДляОбеспечения.Колонки.Добавить("СтрокаНевыделена");
		
	КонецЕсли;
	
	Если Не Обработки.ВводКорректировкиЗаказаМатериалов.ИспользуютсяКорректировки(Заказ) Тогда

		ТипИсточника = ТипЗнч(Заказ);
	
		Если ТипИсточника = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			
			Запрос = Новый Запрос();
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Материалы.НомерСтроки КАК НомерСтроки,
				|	Продукция.НомерСтроки КАК НомерСтрокиПродукция,
				|	Продукция.Номенклатура КАК Продукция,
				|	Продукция.НачатьНеРанее КАК ЖелаемаяДатаОтгрузки,
				|	Материалы.НомерСтроки - 1 КАК Идентификатор,
				|	Материалы.КодСтроки КАК КодСтроки,
				|	Материалы.Номенклатура КАК Номенклатура,
				|	Материалы.Характеристика КАК Характеристика,
				|	Материалы.Склад КАК Склад,
				|	Этапы.Этап КАК Этап,
				|	Этапы.НомерСтроки КАК ЭтапПорядок,
				|	Этапы.Подразделение КАК Подразделение,
				|	Материалы.Назначение КАК Назначение,
				|	Материалы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
				|	Материалы.ВариантОбеспечения КАК ВариантОбеспечения,
				|	Материалы.ДатаПотребности КАК ДатаОтгрузки,
				|	Материалы.Количество КАК Количество,
				|	ВЫБОР
				|		КОГДА Материалы.КлючСвязиПродукция = &КлючСвязи
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК СтрокаНеВыделена
				|ИЗ
				|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК Материалы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
				|		ПО Материалы.КлючСвязиПродукция = Продукция.КлючСвязи
				|			И Материалы.Ссылка = Продукция.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК Этапы
				|		ПО Материалы.Ссылка = Этапы.Ссылка
				|			И Материалы.КлючСвязиЭтапы = Этапы.КлючСвязи
				|ГДЕ
				|	Материалы.Ссылка = &Заказ
				|	И Материалы.Количество > 0
				|	И НЕ Материалы.ПроизводитсяВПроцессе
				|	И (Материалы.ЗаказатьНаСклад
				|			ИЛИ Материалы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))";

			Запрос.УстановитьПараметр("Заказ", Заказ);
			Запрос.УстановитьПараметр("КлючСвязи", КлючСвязи);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(ТоварыДляОбеспечения.Добавить(), Выборка);
					
				КонецЦикла;
			
			КонецЕсли;
		
		Иначе
			
			РеквизитыПродукции = Новый Соответствие();
			Для Каждого Строка Из Заказ.Продукция Цикл
				Реквизиты = Новый Структура("НомерСтроки, НачатьНеРанее, Номенклатура");
				ЗаполнитьЗначенияСвойств(Реквизиты, Строка);
				РеквизитыПродукции.Вставить(Строка.КлючСвязи, Реквизиты);
			КонецЦикла;
			
			ВызовДляОбъекта = ТипЗнч(Заказ) = Тип("ДокументОбъект.ЗаказНаПроизводство");
			
			Если ВызовДляОбъекта Тогда
			
				ТипыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					Заказ.МатериалыИУслуги.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура"), "ТипНоменклатуры");
					
			КонецЕсли;
			
			Для Каждого СтрокаМатериал Из Заказ.МатериалыИУслуги Цикл

				Если СтрокаМатериал.Количество = 0
					ИЛИ СтрокаМатериал.ПроизводитсяВПроцессе Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ВызовДляОбъекта Тогда
					ТипНоменклатуры = ТипыНоменклатуры[СтрокаМатериал.Номенклатура].ТипНоменклатуры;
				Иначе
					ТипНоменклатуры = СтрокаМатериал.ТипНоменклатуры;
				КонецЕсли;
				
				Если Не СтрокаМатериал.ЗаказатьНаСклад 
						И ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
				
					Продолжить;
					
				КонецЕсли;
			
				РеквизитыСтрокиПродукции = РеквизитыПродукции.Получить(СтрокаМатериал.КлючСвязиПродукция);
				
				НоваяСтрока = ТоварыДляОбеспечения.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМатериал); //список реквизитов
				
				НоваяСтрока.ТипНоменклатуры = ТипНоменклатуры;

				НоваяСтрока.НомерСтрокиПродукция = РеквизитыСтрокиПродукции.НомерСтроки;
				НоваяСтрока.ЖелаемаяДатаОтгрузки = РеквизитыСтрокиПродукции.НачатьНеРанее;
				НоваяСтрока.Продукция            = РеквизитыСтрокиПродукции.Номенклатура;

				Если КлючСвязи <> Неопределено Тогда
					
					НоваяСтрока.СтрокаНеВыделена = СтрокаМатериал.КлючСвязиПродукция <> КлючСвязи;
					
				КонецЕсли;

				НоваяСтрока.ДатаОтгрузки = СтрокаМатериал.ДатаПотребности;

				Для Каждого СтрокаЭтап Из Заказ.Этапы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаМатериал.КлючСвязиЭтапы)) Цикл
					
					НоваяСтрока.Подразделение = СтрокаЭтап.Подразделение;
					НоваяСтрока.Этап          = СтрокаЭтап.Этап;
					НоваяСтрока.ЭтапПорядок   = СтрокаЭтап.НомерЭтапа;
					
					Прервать;
					
				КонецЦикла;
				
				Если НЕ ВызовДляОбъекта Тогда
					
					НоваяСтрока.Идентификатор = СтрокаМатериал.ПолучитьИдентификатор();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыДляОбеспечения);

КонецФункции

#КонецОбласти

// Возвращает новый номер в очереди заказов на производство.
//
Функция НовыйНомерОчереди() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводство.Очередь + 1 КАК НовыйНомерОчереди
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПроизводство.Очередь УБЫВ");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйНомерОчереди = 1;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НовыйНомерОчереди = Выборка.НовыйНомерОчереди;
		
	КонецЕсли;
	
	Возврат НовыйНомерОчереди;
	
КонецФункции

// Формирует график выпуска по данным документа
//
// Параметры:
// 	ДанныеДокумента	- Структура - содержит данные табличных частей заказа на производство
// 	АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат расчета
//
Процедура РассчитатьГрафикВыпуска(ДанныеДокумента, АдресХранилища) Экспорт
	
	РезультатРасчета = ПолучитьГрафикВыпускаПродукции(ДанныеДокумента);
	
	ДанныеХранилища = Новый Структура;
	ДанныеХранилища.Вставить("ДанныеДокумента", ДанныеДокумента);
	ДанныеХранилища.Вставить("РезультатРасчета", РезультатРасчета);
	
	ПоместитьВоВременноеХранилище(ДанныеХранилища, АдресХранилища);
	
КонецПроцедуры

// Заполняет таблицы услуг и скидок по данным отбора или массиву заказов
//
// Параметры:
//	ДанныеОтбора - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//	Продукция - ДанныеФормыКоллекция - таблица продукции, в которую будут помещены остатки заказов
//	МассивЗаказов - Массив - заказы, по которым будут отобраны остатки
//	ЗаполнятьНаДатуОтгрузки - Булево - указывает на необходимость заполнения по остаткам на дату, переданную в качестве поля в ДанныеОтбора
//
Процедура ЗаполнитьПоОстаткамПродукцииКОбеспечениюДавальцу(ДанныеОтбора,
															Продукция,
															МассивЗаказов,
															ЗаполнятьНаДатуОказанияУслуг = Ложь) Экспорт
	
	ДатаЗаполнения = ?(ЗаполнятьНаДатуОказанияУслуг, ДанныеОтбора.Дата, Неопределено);
	
	СтруктураОтбора = Новый Структура("Дата");
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, ДанныеОтбора);
	
	// Данные по остаткам услуг заказа
	ВыборкаУслуги = ПолучитьРезультатЗапросаПоОстаткамПродукцииКОбеспечениюДавальцу(
		СтруктураОтбора,
		ДатаЗаполнения,
		МассивЗаказов).Выбрать();
	
	Пока ВыборкаУслуги.Следующий() Цикл
		
		ТекСтрока = Продукция.Добавить();
		ТекСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, ВыборкаУслуги);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает заказы, по которым необходимо планировать график
//
Функция ТребуетсяПланировать(МассивЗаказов) Экспорт
	
	Результат = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗапланированныеЭтапы.Распоряжение КАК Распоряжение,
	|	ЗапланированныеЭтапы.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ВТЗапланированныеЭтапы
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(, , , Распоряжение В (&МассивЗаказов)) КАК ЗапланированныеЭтапы
	|ГДЕ
	|	ЗапланированныеЭтапы.КВыполнениюОборот + ЗапланированныеЭтапы.ВыполненоОборот + ЗапланированныеЭтапы.БракОборот < ЗапланированныеЭтапы.ЗапланированоЗаказомОборот
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗанятостьВидовРабочихЦентров.Регистратор КАК Заказ,
	|	ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала КАК ДатаИнтервала,
	|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания КАК ПриоритетПорядок,
	|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеПорядок,
	|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.ЗаказНаПроизводство).Очередь КАК Очередь
	|ПОМЕСТИТЬ ВТЗанятость
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ЗанятостьВидовРабочихЦентров
	|ГДЕ
	|	ЗанятостьВидовРабочихЦентров.Активность
	|	И ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
	|	И НЕ ЗанятостьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности
	|	И ЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|	И (ЗанятостьВидовРабочихЦентров.Регистратор, ЗанятостьВидовРабочихЦентров.КодСтрокиЭтапыГрафик) В
	|			(ВЫБРАТЬ
	|				ЗапланированныеЭтапы.Распоряжение,
	|				ЗапланированныеЭтапы.КодСтрокиЭтапыГрафик
	|			ИЗ
	|				ВТЗапланированныеЭтапы КАК ЗапланированныеЭтапы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение,
	|	ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ЗанятостьВидовРабочихЦентров.ДатаИнтервала,
	|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания,
	|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания,
	|	ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Очередь
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ЗанятостьВидовРабочихЦентров
	|ГДЕ
	|	ЗанятостьВидовРабочихЦентров.Активность
	|	И ЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
	|	И НЕ ЗанятостьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности
	|	И ЗанятостьВидовРабочихЦентров.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|	И (ВЫРАЗИТЬ(ЗанятостьВидовРабочихЦентров.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение, ЗанятостьВидовРабочихЦентров.КодСтрокиЭтапыГрафик) В
	|			(ВЫБРАТЬ
	|				ЗапланированныеЭтапы.Распоряжение,
	|				ЗапланированныеЭтапы.КодСтрокиЭтапыГрафик
	|			ИЗ
	|				ВТЗапланированныеЭтапы КАК ЗапланированныеЭтапы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРабочегоЦентра,
	|	ДатаИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Занятость.Заказ КАК Заказ,
	|	Занятость.ПриоритетПорядок КАК ПриоритетПорядок,
	|	Занятость.ПодразделениеПорядок КАК ПодразделениеПорядок,
	|	Занятость.Очередь КАК Очередь,
	|	Доступность.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	Доступность.ДатаИнтервала КАК ДатаИнтервала,
	|	ВЫБОР
	|		КОГДА Доступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|			ТОГДА Доступность.ДоступностьПоВидуРЦОборот
	|		ИНАЧЕ Доступность.ДоступностьПоРЦОборот
	|	КОНЕЦ КАК Доступность
	|ПОМЕСТИТЬ ВТПерегрузка
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров.Обороты КАК Доступность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗанятость КАК Занятость
	|		ПО (Занятость.ВидРабочегоЦентра = Доступность.ВидРабочегоЦентра)
	|			И (Занятость.ДатаИнтервала = Доступность.ДатаИнтервала)
	|ГДЕ
	|	Доступность.ЗанятоОборот > ВЫБОР
	|			КОГДА Доступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|				ТОГДА Доступность.ДоступностьПоВидуРЦОборот
	|			ИНАЧЕ Доступность.ДоступностьПоРЦОборот
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРабочегоЦентра,
	|	ДатаИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыМатериалов.Распоряжение КАК Распоряжение,
	|	ЗаказыМатериалов.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ЗаказыМатериалов.Номенклатура КАК Номенклатура,
	|	ЗаказыМатериалов.Характеристика КАК Характеристика,
	|	ЗаказыМатериалов.Склад КАК Склад,
	|	ЗаказыМатериалов.ДатаПотребности КАК ДатаПотребности
	|ПОМЕСТИТЬ ВТПотребностьВМатериалах
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Обороты(
	|			,
	|			,
	|			,
	|			Распоряжение В (&МассивЗаказов)
	|				И КодСтрокиРаспоряжения <> 0
	|				И ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)) КАК ЗаказыМатериалов
	|ГДЕ
	|	ЗаказыМатериалов.КоличествоОборот > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиРаспоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Распоряжение КАК Распоряжение,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Склад КАК Склад,
	|	МИНИМУМ(Т.ДатаПотребности) КАК Период
	|ПОМЕСТИТЬ ВТДатыПотребностиМатериалов
	|ИЗ
	|	ВТПотребностьВМатериалах КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Распоряжение,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ВТДатыПотребностиМатериалов КАК Таблица
	|;
	|
	|//////////////////////////////////////////////
	|" + РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаСпособыОбеспечения("ВЫЧИСЛЯТЬ")
	+ "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыПроизводства.Распоряжение КАК Заказ
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗапланированныеЭтапы КАК ЗапланированныеЭтапы
	|		ПО (ЗапланированныеЭтапы.Распоряжение = ЭтапыПроизводства.Регистратор)
	|			И (ЗапланированныеЭтапы.КодСтрокиЭтапыГрафик = ЭтапыПроизводства.КодСтрокиЭтапыГрафик)
	|ГДЕ
	|	ЭтапыПроизводства.Активность
	|	И ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|	И ЭтапыПроизводства.Регистратор В(&МассивЗаказов)
	|	И ЭтапыПроизводства.НачалоЭтапа < ВЫБОР ЭтапыПроизводства.Подразделение.ИнтервалПланирования
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|				ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ЧАС)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|				ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|				ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|				ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, МЕСЯЦ)
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикЭтаповПроизводства.Распоряжение
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства КАК ГрафикЭтаповПроизводства
	|ГДЕ
	|	ГрафикЭтаповПроизводства.ТребуетсяПерепланировать
	|	И ГрафикЭтаповПроизводства.Распоряжение В(&МассивЗаказов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка В(&МассивЗаказов)
	|	И ЗаказНаПроизводство.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перегрузка.Заказ
	|ИЗ
	|	ВТПерегрузка КАК Перегрузка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК Занятость
	|		ПО Перегрузка.ВидРабочегоЦентра = Занятость.ВидРабочегоЦентра
	|			И Перегрузка.ДатаИнтервала = Занятость.ДатаИнтервала
	|			И (Занятость.Активность)
	|			И (НЕ Занятость.ЭтоДвижениеВводаДоступности)
	|			И (Занятость.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					И (ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания < Перегрузка.ПриоритетПорядок
	|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
	|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания < Перегрузка.ПодразделениеПорядок
	|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
	|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания = Перегрузка.ПодразделениеПорядок
	|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.ЗаказНаПроизводство).Очередь <= Перегрузка.Очередь)
	|				ИЛИ Занятость.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					И (ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания < Перегрузка.ПриоритетПорядок
	|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
	|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания < Перегрузка.ПодразделениеПорядок
	|						ИЛИ ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = Перегрузка.ПриоритетПорядок
	|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания = Перегрузка.ПодразделениеПорядок
	|							И ВЫРАЗИТЬ(Занятость.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Очередь <= Перегрузка.Очередь))
	|
	|СГРУППИРОВАТЬ ПО
	|	Перегрузка.Заказ,
	|	Перегрузка.ВидРабочегоЦентра,
	|	Перегрузка.ДатаИнтервала
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Перегрузка.Доступность) < СУММА(Занятость.Занято)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Распоряжение
	|ИЗ
	|	ВТДатыПотребностиМатериалов КАК Т
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСпособыОбеспечения КАК ТаблицаСпособыОбеспечения
	|		ПО ТаблицаСпособыОбеспечения.Номенклатура   = Т.Номенклатура
	|		 И ТаблицаСпособыОбеспечения.Характеристика = Т.Характеристика
	|		 И ТаблицаСпособыОбеспечения.Склад          = Т.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
	|		ПО СпрСпособ.Ссылка = ТаблицаСпособыОбеспечения.СпособОбеспеченияПотребностей
	|ГДЕ
	|	Т.Период < ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, ДЕНЬ, ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0))
	|	И ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0) > 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВМатериалах.Распоряжение КАК Распоряжение
	|ИЗ
	|	ВТПотребностьВМатериалах КАК ПотребностьВМатериалах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ЗаказМатериалыИУслуги
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|			ПО ЗаказМатериалыИУслуги.Ссылка = ЗаказЭтапыГрафик.Ссылка
	|				И ЗаказМатериалыИУслуги.КлючСвязиЭтапы = ЗаказЭтапыГрафик.КлючСвязиЭтапы
	|		ПО ПотребностьВМатериалах.Распоряжение = ЗаказМатериалыИУслуги.Ссылка
	|			И ПотребностьВМатериалах.КодСтрокиРаспоряжения = ЗаказМатериалыИУслуги.КодСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностьВМатериалах.Распоряжение,
	|	ПотребностьВМатериалах.КодСтрокиРаспоряжения
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ПотребностьВМатериалах.ДатаПотребности) > ЕСТЬNULL(МИНИМУМ(ЗаказЭтапыГрафик.НачалоЭтапа), ДАТАВРЕМЯ(1, 1, 1))");
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Результат.Добавить(Выборка.Заказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает очередь заказов для планирования по указанный заказ
//
Функция ОчередьПланирования(Заказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводство.Ссылка КАК Заказ
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТекущийЗаказНаПроизводство
	|		ПО (ТекущийЗаказНаПроизводство.Ссылка = &Заказ)
	|			И (ЗаказНаПроизводство.Проведен)
	|			И (ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству))
	|			И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
	|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
	|					И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания
	|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
	|					И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания
	|					И ЗаказНаПроизводство.Очередь <= ТекущийЗаказНаПроизводство.Очередь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
	|	ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
	|	ЗаказНаПроизводство.Очередь");
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Заказ");
	
КонецФункции

// Определяет наличие заказов с недействующими спецификациями
//
// Параметры:
// 	Подразделение	- СправочникСсылка.СтруктураПредприятия - Подразделение заказа
// 	Ответственный	- СправочникСсылка.Пользователи - Ответственный заказа
//
// Возвращаемое значение:
// 	Булево - Истина, если есть заказы с недействующими спецификациями
//
Функция ЕстьЗаказыСНедействующимиСпецификациями(Подразделение, Ответственный) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТаблицаПродукция.НомерСтроки КАК ЗаказыНаПроизводствоСНедействующимиСпецификациями
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|ГДЕ
	|	(ТаблицаПродукция.Спецификация.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ИЛИ ТаблицаПродукция.Спецификация.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности < ТаблицаПродукция.Спецификация.НачалоДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности > ТаблицаПродукция.Спецификация.КонецДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее < ТаблицаПродукция.Спецификация.НачалоДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее >= ТаблицаПродукция.Спецификация.КонецДействия)
	|	И ТаблицаПродукция.Ссылка.Проведен
	|	И ТаблицаПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И (ТаблицаПродукция.Ссылка.Подразделение = &Подразделение
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И (ТаблицаПродукция.Ссылка.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПродукция.НомерСтроки
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.КлючСвязи = ТаблицаМатериалыИУслуги.КлючСвязиПродукция)
	|			И (ТаблицаПродукция.Ссылка = ТаблицаМатериалыИУслуги.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК ТРесурсныеСпецификации
	|		ПО ТаблицаМатериалыИУслуги.ИсточникПолученияПолуфабриката = ТРесурсныеСпецификации.Ссылка
	|ГДЕ
	|	(ТРесурсныеСпецификации.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ИЛИ ТРесурсныеСпецификации.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности < ТРесурсныеСпецификации.НачалоДействия
	|			ИЛИ ТРесурсныеСпецификации.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности > ТРесурсныеСпецификации.КонецДействия
	|			ИЛИ ТРесурсныеСпецификации.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее < ТРесурсныеСпецификации.НачалоДействия
	|			ИЛИ ТРесурсныеСпецификации.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее >= ТРесурсныеСпецификации.КонецДействия
	|				И ТаблицаМатериалыИУслуги.Ссылка.Проведен)
	|	И ТаблицаМатериалыИУслуги.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И (ТаблицаМатериалыИУслуги.Ссылка.Подразделение = &Подразделение
	|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|	И (ТаблицаМатериалыИУслуги.Ссылка.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Определяет наличие строк с недействующими спецификациями в заказе
//
// Параметры:
// 	Продукция	- ДанныеФормыКоллекция - Продукция заказа
// 	МатериалыИУслуги	- ДанныеФормыКоллекция - Материалы заказа
//
// Возвращаемое значение:
// 	Булево - Истина, если в заказе есть недействующие спецификации
//
Функция ВЗаказеЕстьНедействующиеСпецификации(Продукция, МатериалыИУслуги) Экспорт
	
	МассивСпецификаций = Новый Массив;
	
	Для каждого ДанныеСтроки Из Продукция Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.Спецификация) Тогда
			МассивСпецификаций.Добавить(ДанныеСтроки.Спецификация);
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ИсточникПолученияПолуфабриката) 
			И ТипЗнч(ДанныеСтроки.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			МассивСпецификаций.Добавить(ДанныеСтроки.ИсточникПолученияПолуфабриката);
		КонецЕсли; 
	КонецЦикла; 
	
	МассивСпецификаций = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСпецификаций);
	
	РеквизитыСпецификаций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСпецификаций, "Статус,НачалоДействия,КонецДействия");
	
	// Проверим статус спецификаций
	Для каждого КлючИЗначение Из РеквизитыСпецификаций Цикл
		ЗначенияРеквизитов = КлючИЗначение.Значение;
		Если ЗначенияРеквизитов.Статус <> Перечисления.СтатусыСпецификаций.Действует Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим период действия спецификаций
	Для каждого ДанныеСтроки Из Продукция Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.Спецификация) Тогда
			ЗначенияРеквизитов = РеквизитыСпецификаций.Получить(ДанныеСтроки.Спецификация);
			Если НЕ СпецификацияДействует(ЗначенияРеквизитов, ДанныеСтроки) Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	Для каждого ДанныеСтроки Из МатериалыИУслуги Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.ИсточникПолученияПолуфабриката) 
			И ТипЗнч(ДанныеСтроки.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			ЗначенияРеквизитов = РеквизитыСпецификаций.Получить(ДанныеСтроки.ИсточникПолученияПолуфабриката);
			СтруктураПоиска = Новый Структура("КлючСвязи", ДанныеСтроки.КлючСвязиПродукция);
			СписокСтрок = Продукция.НайтиСтроки(СтруктураПоиска);
			Если НЕ СпецификацияДействует(ЗначенияРеквизитов, СписокСтрок[0]) Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь
	
КонецФункции

// Возвращает текст запроса для получения табличных частей заказа на производство.
//
// Возвращаемое значение:
// 	Строка - Текст запроса
//
Функция ТекстЗапросаПоТабличнымЧастямЗаказа() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВыходныеИзделия.Характеристика КАК Характеристика,
	|	СУММА(ВыходныеИзделия.Количество) КАК Количество,
	|	СУММА(ВыходныеИзделия.ДоляСтоимости) КАК ДоляСтоимости,
	|	ВыходныеИзделия.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	ВыходныеИзделия.Ссылка.Организация КАК Организация,
	|	ВыходныеИзделия.Ссылка КАК ЗаказНаПроизводство,
	|	Продукция.КодСтроки КАК КодСтрокиЗаказаНаПроизводство,
	|	Продукция.Спецификация КАК Спецификация,
	|	Продукция.ДатаПотребности КАК ДатаПотребности,
	|	Продукция.НачатьНеРанее КАК НачатьНеРанее
	|ПОМЕСТИТЬ ВТВыходныеИзделия
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ВыходныеИзделия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО ВыходныеИзделия.Ссылка = Продукция.Ссылка
	|			И ВыходныеИзделия.КлючСвязиПродукция = Продукция.КлючСвязи
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &ЗаказНаПроизводство
	|	И НЕ ВыходныеИзделия.ПроизводитсяВПроцессе
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыходныеИзделия.Номенклатура,
	|	ВыходныеИзделия.КлючСвязиПродукция,
	|	ВыходныеИзделия.Характеристика,
	|	ВыходныеИзделия.НомерСтроки,
	|	ВыходныеИзделия.Ссылка.Организация,
	|	ВыходныеИзделия.Ссылка,
	|	Продукция.КодСтроки,
	|	Продукция.Спецификация,
	|	Продукция.ДатаПотребности,
	|	Продукция.НачатьНеРанее
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязиПродукция,
	|	Спецификация,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВыходныеИзделия.ДоляСтоимости) КАК ДоляСтоимости,
	|	ВыходныеИзделия.КлючСвязиПродукция КАК КлючСвязиПродукция
	|ПОМЕСТИТЬ ВТИтогДоляСтоимости
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка = &ЗаказНаПроизводство
	|	И НЕ ВыходныеИзделия.ПроизводитсяВПроцессе
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыходныеИзделия.КлючСвязиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТВыходныеИзделия.НомерСтроки КАК НомерСтроки,
	|	ВТВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ВТВыходныеИзделия.Характеристика КАК Характеристика,
	|	ВТВыходныеИзделия.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ВТИтогДоляСтоимости.ДоляСтоимости = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВТВыходныеИзделия.ДоляСтоимости / ВТИтогДоляСтоимости.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ВТВыходныеИзделия.Организация КАК Организация,
	|	ВТВыходныеИзделия.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВТВыходныеИзделия.КодСтрокиЗаказаНаПроизводство КАК КодСтрокиЗаказаНаПроизводство,
	|	ВТВыходныеИзделия.Спецификация КАК Спецификация,
	|	ВТВыходныеИзделия.ДатаПотребности КАК ДатаПотребности,
	|	ВТВыходныеИзделия.НачатьНеРанее КАК НачатьНеРанее,
	|	ВТВыходныеИзделия.Количество КАК КоличествоПоЗаказу,
	|	МАКСИМУМ(ЕСТЬNULL(РесурсныеСпецификацииВыходныеИзделия.Количество, 0)) КАК КоличествоПоСпецификации
	|ПОМЕСТИТЬ СпецификацияВыходныеИзделия
	|ИЗ
	|	ВТВыходныеИзделия КАК ВТВыходныеИзделия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтогДоляСтоимости КАК ВТИтогДоляСтоимости
	|		ПО ВТВыходныеИзделия.КлючСвязиПродукция = ВТИтогДоляСтоимости.КлючСвязиПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|		ПО ВТВыходныеИзделия.Спецификация = РесурсныеСпецификацииВыходныеИзделия.Ссылка
	|			И ВТВыходныеИзделия.Номенклатура = РесурсныеСпецификацииВыходныеИзделия.Номенклатура
	|			И (ВТВыходныеИзделия.Характеристика = РесурсныеСпецификацииВыходныеИзделия.Характеристика
	|				ИЛИ РесурсныеСпецификацииВыходныеИзделия.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВыходныеИзделия.ДатаПотребности,
	|	ВТВыходныеИзделия.Характеристика,
	|	ВТВыходныеИзделия.НачатьНеРанее,
	|	ВТВыходныеИзделия.Организация,
	|	ВТВыходныеИзделия.Спецификация,
	|	ВТВыходныеИзделия.ЗаказНаПроизводство,
	|	ВТВыходныеИзделия.Номенклатура,
	|	ВТВыходныеИзделия.НомерСтроки,
	|	ВТВыходныеИзделия.Номенклатура.ЕдиницаИзмерения,
	|	ВТВыходныеИзделия.Количество,
	|	ВЫБОР
	|		КОГДА ВТИтогДоляСтоимости.ДоляСтоимости = 0
	|			ТОГДА 1
	|		ИНАЧЕ ВТВыходныеИзделия.ДоляСтоимости / ВТИтогДоляСтоимости.ДоляСтоимости
	|	КОНЕЦ,
	|	ВТВыходныеИзделия.КодСтрокиЗаказаНаПроизводство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	МатериалыИУслуги.Характеристика КАК Характеристика,
	|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МатериалыИУслуги.ПрименениеМатериала КАК Описание,
	|	СУММА(МатериалыИУслуги.Количество) КАК Количество,
	|	МатериалыИУслуги.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	Продукция.Ссылка КАК ЗаказНаПроизводство,
	|	Продукция.КодСтроки КАК КодСтрокиЗаказаНаПроизводство,
	|	Продукция.Спецификация КАК Спецификация,
	|	Продукция.НачатьНеРанее КАК НачатьНеРанее
	|ПОМЕСТИТЬ ВТСпецификацияМатериалы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК МатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО МатериалыИУслуги.КлючСвязиПродукция = Продукция.КлючСвязи
	|ГДЕ
	|	МатериалыИУслуги.Ссылка = &ЗаказНаПроизводство
	|	И Продукция.Ссылка = &ЗаказНаПроизводство
	|	И НЕ МатериалыИУслуги.ПроизводитсяВПроцессе
	|
	|СГРУППИРОВАТЬ ПО
	|	МатериалыИУслуги.СтатьяКалькуляции,
	|	МатериалыИУслуги.Характеристика,
	|	МатериалыИУслуги.Номенклатура,
	|	МатериалыИУслуги.ПрименениеМатериала,
	|	Продукция.КодСтроки,
	|	Продукция.Ссылка,
	|	Продукция.Спецификация,
	|	Продукция.НачатьНеРанее,
	|	МатериалыИУслуги.Номенклатура.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводствоВозвратныеОтходы.Номенклатура КАК Номенклатура,
	|	ЗаказНаПроизводствоВозвратныеОтходы.Характеристика КАК Характеристика,
	|	ЗаказНаПроизводствоВозвратныеОтходы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказНаПроизводствоВозвратныеОтходы.ОписаниеИзделия КАК Описание,
	|	ЗаказНаПроизводствоВозвратныеОтходы.Количество КАК Количество,
	|	ЗаказНаПроизводствоВозвратныеОтходы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ЗаказНаПроизводствоПродукция.Ссылка КАК ЗаказНаПроизводство,
	|	ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтрокиЗаказаНаПроизводство,
	|	ЗаказНаПроизводствоПродукция.Спецификация КАК Спецификация,
	|	ЗаказНаПроизводствоПродукция.НачатьНеРанее КАК НачатьНеРанее
	|ПОМЕСТИТЬ ВТСпецификацияОтходы
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ЗаказНаПроизводствоВозвратныеОтходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО ЗаказНаПроизводствоВозвратныеОтходы.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи
	|ГДЕ
	|	ЗаказНаПроизводствоВозвратныеОтходы.Ссылка = &ЗаказНаПроизводство
	|	И НЕ ЗаказНаПроизводствоВозвратныеОтходы.ПроизводитсяВПроцессе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Трудозатраты.ВидРабот КАК ВидРабот,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
	|	Трудозатраты.ВидРабот.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Трудозатраты.НазначениеРабот КАК Описание,
	|	СУММА(Трудозатраты.Количество) КАК Количество,
	|	Трудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	Продукция.Ссылка КАК ЗаказНаПроизводство,
	|	Продукция.КодСтроки КАК КодСтрокиЗаказаНаПроизводство,
	|	Продукция.Спецификация КАК Спецификация,
	|	Продукция.НачатьНеРанее КАК НачатьНеРанее
	|ПОМЕСТИТЬ ВТСпецификацияТрудозатраты
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Трудозатраты КАК Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО Трудозатраты.КлючСвязиПродукция = Продукция.КлючСвязи
	|ГДЕ
	|	Трудозатраты.Ссылка = &ЗаказНаПроизводство
	|	И Продукция.Ссылка = &ЗаказНаПроизводство
	|
	|СГРУППИРОВАТЬ ПО
	|	Трудозатраты.СтатьяКалькуляции,
	|	Продукция.КодСтроки,
	|	Трудозатраты.ВидРабот,
	|	Продукция.Ссылка,
	|	Продукция.Спецификация,
	|	Продукция.НачатьНеРанее,
	|	Трудозатраты.ВидРабот.ЕдиницаИзмерения,
	|	Трудозатраты.НазначениеРабот";
	
	ТекстЗапроса = ТекстЗапроса +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство);
	
КонецФункции

// Возвращает текст запроса для получениях доступных назначений
//	Параметры:
//		ПараметрыФормированияЗапроса - Структура - параметры для формирования текстов запросов
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаДоступныхНазначений(ПараметрыФормированияЗапроса) Экспорт
	
	Возврат Справочники.Назначения.ТекстЗапросаНазначенийРасширенный();
	
КонецФункции
 
// Формирует структуру для создания внутреннего потребления по одному или нескольким заказам
//
// Параметры:
//	ДанныеДокументов	- Таблица значений - содержит данные необходимые для формирования внутреннего потребления
// 	ТекстПредупреждения	- Строка - строка, в которую будет помещено сообщение поясняющее почему нельзя оформить документ
//
// Возвращаемое значение:
//	Структура - структура, в которую будут помещены реквизиты шапки из массива заказов
//
Функция ПараметрыОформленияПередачиМатериаловВПроизводство(ДанныеДокументов, ТекстПредупреждения) Экспорт
	
	Отказ = Ложь;
	
	Организация        = Неопределено;
	Склад              = Неопределено;
	Подразделение      = Неопределено;
	
	ПроверитьОрганизацию        = Истина;
	ПроверитьСклад              = Истина;
	ПроверитьПодразделение      = Истина;
	
	ШаблонСообщения = НСтр("ru='- у выбранных заказов распоряжений отличается поле %ПредставлениеПоля%.';uk='- у вибраних замовлень розпоряджень відрізняється поле %ПредставлениеПоля%.'");
	
	Для каждого ДанныеСтроки Из ДанныеДокументов Цикл
		
		Если Организация = Неопределено Тогда
			Организация = ДанныеСтроки.Организация;
		ИначеЕсли Организация <> ДанныеСтроки.Организация И ПроверитьОрганизацию Тогда
			ТекстСообщения = ТекстСообщения
								+ ?(ТекстСообщения = "", "", Символы.ПС)
								+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru='""Организация""';uk='""Організація""'"));
			ПроверитьОрганизацию = Ложь;
			Отказ = Истина;
		КонецЕсли; 
		
		Если Склад = Неопределено Тогда
			Склад = ДанныеСтроки.Склад;
		ИначеЕсли Склад <> ДанныеСтроки.Склад И ПроверитьСклад Тогда
			ТекстСообщения = ТекстСообщения
								+ ?(ТекстСообщения = "", "", Символы.ПС)
								+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru='""Склад""';uk='""Склад""'"));
			ПроверитьСклад = Ложь;
			Отказ = Истина;
		КонецЕсли; 
		
		Если Подразделение = Неопределено Тогда
			Подразделение = ДанныеСтроки.Подразделение;
		ИначеЕсли Подразделение <> ДанныеСтроки.Подразделение И ПроверитьПодразделение Тогда
			ТекстСообщения = ТекстСообщения
								+ ?(ТекстСообщения = "", "", Символы.ПС)
								+ СтрЗаменить(ШаблонСообщения, "%ПредставлениеПоля%", НСтр("ru='""Получатель""';uk='""Одержувач""'"));
			ПроверитьПодразделение = Ложь;
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если Отказ Тогда
		ТекстПредупреждения = НСтр("ru='Невозможно оформить передачу в производство на основании выбранных распоряжений.';uk='Неможливо оформити передачу у виробництво на підставі обраних розпоряджень.'")
								+ Символы.ПС
								+ ТекстСообщения;
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("Организация",           Организация);
	ПараметрыОформления.Вставить("Подразделение",         Подразделение);
	ПараметрыОформления.Вставить("Склад",                 Склад);
	ПараметрыОформления.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПередачаВПроизводство);
	
	Возврат ПараметрыОформления;
	
КонецФункции

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	ПараметрыУказанияСерий.ИмяТЧТовары      = "МатериалыИУслуги";
	ПараметрыУказанияСерий.ИмяТЧСерии       = "МатериалыИУслуги";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ПроизводитсяВПроцессе");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("ЗаказатьНаСклад");
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПередачаВПроизводствоОтгрузка);
	
	ПараметрыУказанияСерий.ИмяПоляСклад = Неопределено;
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Подразделение");
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийОтправитель");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийПолучатель");
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Подразделение,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.СтатусУказанияСерий,
	|	Товары.СтатусУказанияСерийОтправитель,
	|	Товары.СтатусУказанияСерийПолучатель,
	|	Товары.НомерСтроки,
	|	Товары.ВариантОбеспечения,
	|	Товары.ЗаказатьНаСклад,
	|	Товары.ПроизводитсяВПроцессе
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЗаказатьНаСклад
	|				ИЛИ Товары.ПроизводитсяВПроцессе
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|								ТОГДА 15
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 10
	|							КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|								ТОГДА 11
	|							ИНАЧЕ 9
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыОтправитель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА НЕ Товары.ЗаказатьНаСклад
	|				ИЛИ Товары.ПроизводитсяВПроцессе
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УчетСебестоимостиПоСериям)
	|			ТОГДА 14
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.ТипПолитики = ЗНАЧЕНИЕ(Перечисление.ТипыПолитикУказанияСерий.УправлениеОстаткамиСерий)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ СтатусыПолучатель
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Подразделение)
	|			И (ПолитикиУчетаСерий.Ссылка = СпрНоменклатура.ВидНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерийОтправитель,
	|	ВЫБОР
	|		КОГДА СтатусыОтправитель.СтатусУказанияСерий В (10, 14)
	|			ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерийПолучатель,
	|	СтатусыОтправитель.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыОтправитель КАК СтатусыОтправитель
	|		ПО (СтатусыОтправитель.НомерСтроки = Товары.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатусыПолучатель КАК СтатусыПолучатель
	|		ПО (СтатусыПолучатель.НомерСтроки = Товары.НомерСтроки)
	|ГДЕ
	|	(СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерийОтправитель
	|			ИЛИ ВЫБОР
	|				КОГДА СтатусыОтправитель.СтатусУказанияСерий В (10, 14)
	|					ТОГДА СтатусыПолучатель.СтатусУказанияСерий
	|				ИНАЧЕ 0
	|			КОНЕЦ <> Товары.СтатусУказанияСерийПолучатель
	|			ИЛИ СтатусыОтправитель.СтатусУказанияСерий <> Товары.СтатусУказанияСерий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция МетаданныеДокумента() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	
	ФильтрХозОперация = Новый Массив();
	ФильтрХозОперация.Добавить("ПОСТУПЛЕНИЕ");
	ОписаниеТабЧасти = Новый Структура("ФильтрХозОперация, ОформляетсяПоЗаказу", ФильтрХозОперация, Истина);
	
	СтруктураОбъекта.ТабЧасти = Новый Структура();
	СтруктураОбъекта.ТабЧасти.Вставить("Продукция", ОписаниеТабЧасти);
	
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство) 
			ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЭтапыПроизводства)  Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаСписка";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЭтапыПроизводства(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыНаПроизводствоТрудозатраты(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаБракВПроизводстве(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыМатериаловСУчетомКорректировок(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПереработкаПоГрафикуПроизводства(Запрос, ТекстыЗапроса, Регистры);
	
	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказНаПроизводство.Дата                      КАК Период,
		|	ЗаказНаПроизводство.Организация               КАК Организация,
		|	ЗаказНаПроизводство.Статус                    КАК Статус,
		|	ЗаказНаПроизводство.СтатусГрафикаПроизводства КАК СтатусГрафикаПроизводства,
		|	ЗаказНаПроизводство.Подразделение             КАК Подразделение,
		|	ЗаказНаПроизводство.Назначение                КАК Назначение,
		|	ЕСТЬNULL(ЗаказНаПроизводство.Назначение.ДвиженияПоСкладскимРегистрам,Ложь) КАК ДвиженияПоСкладскимРегистрам
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",               Реквизиты.Организация);
	Запрос.УстановитьПараметр("Статус", Реквизиты.Статус);
	Запрос.УстановитьПараметр("СтатусГрафикаПроизводства", Реквизиты.СтатусГрафикаПроизводства);
	Запрос.УстановитьПараметр("Организация",               Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Назначение", Реквизиты.Назначение);
	Запрос.УстановитьПараметр("ДвиженияПоСкладскимРегистрам", Реквизиты.ДвиженияПоСкладскимРегистрам);
	Запрос.УстановитьПараметр("ПустойКлюч", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
		//Планируемое поступление выходных изделий пока не рассчитан график.
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ПроизводитсяВПроцессе
		|			ТОГДА МатериалыИУслуги.ДатаПотребности
		|		ИНАЧЕ Продукция.ДатаПотребности            
		|	КОНЕЦ                                КАК Период,
		|	ТабличнаяЧасть.Ссылка                КАК Распоряжение,
		|	ТабличнаяЧасть.Склад                 КАК Склад,
		|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
		|	ТабличнаяЧасть.Назначение            КАК Назначение,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                                КАК ПланируемоеПоступление,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                                КАК ПланируемоеПоступлениеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО ТабличнаяЧасть.Ссылка = Продукция.Ссылка
		|			И ТабличнаяЧасть.КлючСвязиПродукция = Продукция.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК МатериалыИУслуги
		|		ПО ТабличнаяЧасть.Ссылка = МатериалыИУслуги.Ссылка
		|			И ТабличнаяЧасть.КлючСвязиПолуфабрикат = МатериалыИУслуги.КлючСвязи
		|			И ТабличнаяЧасть.ПроизводитсяВПроцессе
		|
		|ГДЕ
		|	(&Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|		ИЛИ ТабличнаяЧасть.ПроизводитсяВПроцессе)
		|
		|	И ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И НЕ Продукция.ГрафикРассчитан
		|
		|	И ТабличнаяЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Планируемое поступление возвратных отходов пока не рассчитан график.
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ПроизводитсяВПроцессе
		|			ТОГДА МатериалыИУслуги.ДатаПотребности
		|		ИНАЧЕ Продукция.ДатаПотребности            
		|	КОНЕЦ                               КАК Период,
		|	ТабличнаяЧасть.Ссылка               КАК Распоряжение,
		|	ТабличнаяЧасть.Склад                КАК Склад,
		|	ТабличнаяЧасть.Номенклатура         КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика       КАК Характеристика,
		|	ТабличнаяЧасть.Назначение           КАК Назначение,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                               КАК ПланируемоеПоступление,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                               КАК ПланируемоеПоступлениеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТабличнаяЧасть
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО ТабличнаяЧасть.Ссылка = Продукция.Ссылка
		|			И ТабличнаяЧасть.КлючСвязиПродукция = Продукция.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК МатериалыИУслуги
		|		ПО ТабличнаяЧасть.Ссылка = МатериалыИУслуги.Ссылка
		|			И ТабличнаяЧасть.КлючСвязиМатериалыИУслуги = МатериалыИУслуги.КлючСвязи
		|			И ТабличнаяЧасть.ПроизводитсяВПроцессе
		|ГДЕ
		|	
		|	(&Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|		ИЛИ ТабличнаяЧасть.ПроизводитсяВПроцессе)
		|
		|	И ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И НЕ Продукция.ГрафикРассчитан
		|
		|	И ТабличнаяЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Планируемое поступление продукции, когда график рассчитан.
		//В движениях участвуют выходные изделия, кроме тех, которые передаются напрямую в подразделение (поле склад заполнено)
		|ВЫБРАТЬ
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.ДатаВыпуска > НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаВыпуска, ДЕНЬ) ТОГДА
		|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаВыпуска, ДЕНЬ), ДЕНЬ, 1)
		|		ИНАЧЕ
		|			ТабличнаяЧасть.ДатаВыпуска
		|	КОНЕЦ                                   КАК Период,
		|	ТабличнаяЧасть.Ссылка                   КАК Распоряжение,
		|	ВыходныеИзделия.Склад                   КАК Склад,
		|	ВыходныеИзделия.Номенклатура            КАК Номенклатура,
		|	ВыходныеИзделия.Характеристика          КАК Характеристика,
		|	ВыходныеИзделия.Назначение              КАК Назначение,
		|	ВЫБОР 
		|		КОГДА ВыходныеИзделия.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|			ТабличнаяЧасть.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                                   КАК ПланируемоеПоступление,
		|	ВЫБОР 
		|		КОГДА ВыходныеИзделия.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                                   КАК ПланируемоеПоступлениеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТабличнаяЧасть
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ВыходныеИзделия
		|		ПО ТабличнаяЧасть.Ссылка = ВыходныеИзделия.Ссылка
		|		 И ТабличнаяЧасть.КлючСвязиВыходныеИзделия = ВыходныеИзделия.КлючСвязи
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО ВыходныеИзделия.Ссылка = Продукция.Ссылка
		|		 И ВыходныеИзделия.КлючСвязиПродукция = Продукция.КлючСвязи
		|
		|ГДЕ
		|
		|	(&Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|		ИЛИ ВыходныеИзделия.ПроизводитсяВПроцессе)
		|
		|	И ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И Продукция.ГрафикРассчитан
		|
		|	И ВыходныеИзделия.Склад <> Значение(Справочник.Склады.ПустаяСсылка)
		|
		|	И ВыходныеИзделия.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Планируемое поступление возвратных отходов, когда график рассчитан
		//В движениях участвуют все отходы, кроме тех, которые передаются напрямую в подразделение (поле склад имеет тип значения СправочникСсылка.Склады)
		|ВЫБРАТЬ
		|	ВЫБОР 
		|		КОГДА ТабличнаяЧасть.ДатаВыпуска > НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаВыпуска, ДЕНЬ) ТОГДА
		|			ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТабличнаяЧасть.ДатаВыпуска, ДЕНЬ), ДЕНЬ, 1)
		|		ИНАЧЕ
		|			ТабличнаяЧасть.ДатаВыпуска
		|		КОНЕЦ                                 КАК Период,
		|	ТабличнаяЧасть.Ссылка            КАК Распоряжение,
		|	ВозвратныеОтходы.Склад                   КАК Склад,
		|	ВозвратныеОтходы.Номенклатура            КАК Номенклатура,
		|	ВозвратныеОтходы.Характеристика          КАК Характеристика,
		|	ВозвратныеОтходы.Назначение              КАК Назначение,
		|	ВЫБОР 
		|		КОГДА ВозвратныеОтходы.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|			ТабличнаяЧасть.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК ПланируемоеПоступление,
		|	ВЫБОР 
		|		КОГДА ВозвратныеОтходы.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|			ТабличнаяЧасть.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                                     КАК ПланируемоеПоступлениеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВозвратныеОтходыГрафик КАК ТабличнаяЧасть
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ВозвратныеОтходы
		|		ПО ТабличнаяЧасть.Ссылка = ВозвратныеОтходы.Ссылка
		|		 И ТабличнаяЧасть.КлючСвязиВозвратныеОтходы = ВозвратныеОтходы.КлючСвязи
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО ВозвратныеОтходы.Ссылка = Продукция.Ссылка
		|		 И ВозвратныеОтходы.КлючСвязиПродукция = Продукция.КлючСвязи
		|
		|ГДЕ
		|
		|	(&Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|		ИЛИ ВозвратныеОтходы.ПроизводитсяВПроцессе)
		|
		|	И ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И Продукция.ГрафикРассчитан
		|
		|	И ВозвратныеОтходы.Склад <> Значение(Справочник.Склады.ПустаяСсылка)
		|
		|	И ВозвратныеОтходы.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	//Резервирование товаров
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВРезервеСоСклада,
	|	0                                      КАК ВРезервеПодЗаказ,
	|	0                                      КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ЗаказатьНаСклад
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//Отгрузка товаров
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                              КАК ВРезервеПодЗаказ,
	|
	|	ТаблицаТовары.Количество               КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ЗаказатьНаСклад
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|
	|	И ТаблицаТовары.ВариантОбеспечения В (
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЭтапыПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЭтапыПроизводства";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаЭтапыГрафик.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЭтапыГрафик.ОкончаниеЭтапа КАК Период,
	|	ТаблицаЭтапыГрафик.Этап КАК Этап,
	|	ТаблицаЭтапыГрафик.Подразделение КАК Подразделение,
	|	ТаблицаЭтапыГрафик.Ссылка КАК Распоряжение,
	|	ТаблицаПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Количество КАК ЗапланированоЗаказом,
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера КАК НачалоПредварительногоБуфера,
	|	ТаблицаЭтапыГрафик.НачалоЭтапа КАК НачалоЭтапа,
	|	ТаблицаЭтапыГрафик.ОкончаниеЗавершающегоБуфера КАК ОкончаниеЗавершающегоБуфера,
	|	ТаблицаЭтапыГрафик.НомерЭтапа КАК НомерЭтапа,
	|	ТаблицаЭтапыГрафик.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ТаблицаЭтапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО ТаблицаЭтапыГрафик.Ссылка = ТаблицаПродукция.Ссылка
	|			И ТаблицаЭтапыГрафик.КлючСвязиПродукция = ТаблицаПродукция.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО ТаблицаЭтапы.Ссылка = ТаблицаЭтапыГрафик.Ссылка
	|			И ТаблицаЭтапы.КлючСвязи = ТаблицаЭтапыГрафик.КлючСвязиЭтапы
	|			И ТаблицаЭтапы.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция
	|ГДЕ
	|	ТаблицаЭтапыГрафик.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаПроизводствоТрудозатраты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаПроизводствоТрудозатраты";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТрудозатратыГрафик.Ссылка КАК ЗаказНаПроизводство,
	|	ТаблицаПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Этап КАК Этап,
	|	ТаблицаТрудозатраты.ВидРабот КАК ВидРабот,
	|	ТаблицаТрудозатратыГрафик.Количество КАК ПоЗаказу
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ТрудозатратыГрафик КАК ТаблицаТрудозатратыГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Трудозатраты КАК ТаблицаТрудозатраты
	|		ПО (ТаблицаТрудозатраты.Ссылка = ТаблицаТрудозатратыГрафик.Ссылка)
	|			И (ТаблицаТрудозатраты.КлючСвязи = ТаблицаТрудозатратыГрафик.КлючСвязиТрудозатраты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТаблицаТрудозатратыГрафик.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТаблицаТрудозатратыГрафик.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТаблицаТрудозатратыГрафик.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТаблицаТрудозатратыГрафик.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТаблицаТрудозатратыГрафик.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|	И ТаблицаПродукция.ГрафикРассчитан";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДоступностьВидовРабочихЦентров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДоступностьВидовРабочихЦентров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Распоряжение,
	|	ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ТаблицаЗанятостьВидовРабочихЦентров.ДатаИнтервала КАК ДатаИнтервала,
	|	СУММА(ТаблицаЗанятостьВидовРабочихЦентров.Количество) КАК Занято,
	|	ТаблицаПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Подразделение КАК Подразделение,
	|	ЛОЖЬ КАК ЭтоДвижениеВводаДоступности,
	|	ИСТИНА КАК ЭтоДвижениеЗаказаНаПроизводство,
	|	ЛОЖЬ КАК ЭтоДвижениеМаршрутногоЛиста,
	|	ЕСТЬNULL(ТаблицаВидыРабочихЦентров.ВариантНаладки, ТаблицаАльтернативныеВидыРабочихЦентров.ВариантНаладки) КАК ВариантНаладки
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЗанятостьВидовРабочихЦентров КАК ТаблицаЗанятостьВидовРабочихЦентров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ТаблицаВидыРабочихЦентров
	|		ПО (ТаблицаВидыРабочихЦентров.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ТаблицаВидыРабочихЦентров.КлючСвязиПродукция = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|			И (ТаблицаВидыРабочихЦентров.КлючСвязиЭтапы = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ТаблицаВидыРабочихЦентров.ВидРабочегоЦентра = ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВидыРабочихЦентров КАК ТаблицаАльтернативныеВидыРабочихЦентров
	|		ПО (ТаблицаАльтернативныеВидыРабочихЦентров.Ссылка = ТаблицаЗанятостьВидовРабочихЦентров.Ссылка)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиПродукция = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.КлючСвязиЭтапы = ТаблицаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы)
	|			И (ТаблицаАльтернативныеВидыРабочихЦентров.ВидРабочегоЦентра = ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра)
	|ГДЕ
	|	ТаблицаЗанятостьВидовРабочихЦентров.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|	И ТаблицаПродукция.ГрафикРассчитан
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ТаблицаЗанятостьВидовРабочихЦентров.ДатаИнтервала,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаЭтапыГрафик.КодСтроки,
	|	ТаблицаЭтапыГрафик.Подразделение,
	|	ЕСТЬNULL(ТаблицаВидыРабочихЦентров.ВариантНаладки, ТаблицаАльтернативныеВидыРабочихЦентров.ВариантНаладки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтрокиПродукция,
	|	ДатаИнтервала,
	|	КодСтрокиЭтапыГрафик";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Период                                КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТабличнаяЧасть.Склад                   КАК Склад,
		|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
		|	ТабличнаяЧасть.Назначение              КАК Назначение,
		|	0                                      КАК Потребность,
		|	-ТабличнаяЧасть.Количество             КАК КЗаказу,
		|	0                                      КАК НаличиеПодЗаказ
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТабличнаяЧасть
		|
		|ГДЕ
		|	(&Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|		ИЛИ ТабличнаяЧасть.ПроизводитсяВПроцессе)
		|
		|	И ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И ТабличнаяЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период                                  КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
		|	ТабличнаяЧасть.Склад                     КАК Склад,
		|	ТабличнаяЧасть.Номенклатура              КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика            КАК Характеристика,
		|	ТабличнаяЧасть.Назначение                КАК Назначение,
		|	0                                        КАК Потребность,
		|	-ТабличнаяЧасть.Количество               КАК КЗаказу,
		|	0                                        КАК НаличиеПодЗаказ
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТабличнаяЧасть
		|
		|ГДЕ
		|	(&Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|		ИЛИ ТабличнаяЧасть.ПроизводитсяВПроцессе)
		|
		|	И ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И ТабличнаяЧасть.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Формирование потребности
		|ВЫБРАТЬ
		|	&Период                                КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТабличнаяЧасть.Склад                   КАК Склад,
		|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
		|	ТабличнаяЧасть.Назначение              КАК Назначение,
		|	ТабличнаяЧасть.Количество              КАК Потребность,
		|	ТабличнаяЧасть.Количество              КАК КЗаказу,
		|	0                                      КАК НаличиеПодЗаказ
		|ИЗ
		|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабличнаяЧасть
		|
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И ТабличнаяЧасть.ЗаказатьНаСклад
		|
		|	И ТабличнаяЧасть.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		//Закрытие потребности
		|ВЫБРАТЬ
		|	&Период                                КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТабличнаяЧасть.Склад          КАК Склад,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Назначение     КАК Назначение,
		|	ТабличнаяЧасть.Количество     КАК Потребность,
		|	0                                      КАК КЗаказу,
		|	ТабличнаяЧасть.Количество     КАК НаличиеПодЗаказ
		|ИЗ
		|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабличнаяЧасть
		|
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И ТабличнаяЧасть.ЗаказатьНаСклад
		|
		|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказовРаботами";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Продукция.ДатаПотребности               КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
		|	ТабличнаяЧасть.Подразделение            КАК Подразделение,
		|	ТабличнаяЧасть.Номенклатура             КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика           КАК Характеристика,
		|	ТабличнаяЧасть.Назначение               КАК Назначение,
		|	ТабличнаяЧасть.Количество               КАК КОбеспечению
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТабличнаяЧасть
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО ТабличнаяЧасть.Ссылка = Продукция.Ссылка
		|		 И ТабличнаяЧасть.КлючСвязиПродукция = Продукция.КлючСвязи
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|
		|	И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|	И НЕ Продукция.ГрафикРассчитан
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.ДатаВыпуска               КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
		|	ВыходныеИзделия.Подразделение            КАК Подразделение,
		|	ВыходныеИзделия.Номенклатура             КАК Номенклатура,
		|	ВыходныеИзделия.Характеристика           КАК Характеристика,
		|	ВыходныеИзделия.Назначение               КАК Назначение,
		|	ТабличнаяЧасть.Количество                КАК КОбеспечению
		|ИЗ
		|	Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТабличнаяЧасть
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ВыходныеИзделия
		|		ПО ТабличнаяЧасть.Ссылка = ВыходныеИзделия.Ссылка
		|		 И ТабличнаяЧасть.КлючСвязиВыходныеИзделия = ВыходныеИзделия.КлючСвязи
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
		|		ПО ВыходныеИзделия.Ссылка = Продукция.Ссылка
		|		 И ВыходныеИзделия.КлючСвязиПродукция = Продукция.КлючСвязи
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ВыходныеИзделия.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|
		|	И ВыходныеИзделия.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И Продукция.ГрафикРассчитан
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.ДатаПотребности                         КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                 КАК ВидДвижения,
		|	ТабличнаяЧасть.Этап.Подразделение                      КАК Подразделение,
		|	ТабличнаяЧасть.Номенклатура                            КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика                          КАК Характеристика,
		|	ТабличнаяЧасть.Назначение                              КАК Назначение,
		|	ТабличнаяЧасть.Количество                              КАК КОбеспечению
		|ИЗ
		|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабличнаяЧасть
		|
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|
		|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыНаПроизводствоСпецификации";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера КАК Период,
	|	ТабличнаяЧасть.Ссылка КАК ЗаказНаПроизводство,
	|	ТаблицаВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ТаблицаВыходныеИзделия.Характеристика КАК Характеристика,
	|	ТаблицаПродукция.КодСтроки КАК КодСтрокиПродукция,
	|	ТаблицаЭтапыГрафик.КодСтроки КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаЭтапыГрафик.Этап КАК Этап,
	|	ВЫБОР
	|		КОГДА ТаблицаВыходныеИзделия.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаВыходныеИзделия.Подразделение
	|		ИНАЧЕ ТаблицаВыходныеИзделия.Склад
	|	КОНЕЦ КАК Склад,
	|	ТаблицаВыходныеИзделия.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	ТаблицаЭтапыГрафик.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление) КАК ТипДвиженияЗапасов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПотребности,
	|	ТаблицаВыходныеИзделия.Назначение КАК Назначение,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Заказано
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ПО (ТаблицаВыходныеИзделия.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаВыходныеИзделия.КлючСвязи = ТабличнаяЧасть.КлючСвязиВыходныеИзделия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТабличнаяЧасть.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТабличнаяЧасть.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера,
	|	ТабличнаяЧасть.Ссылка,
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Характеристика,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаЭтапыГрафик.КодСтроки,
	|	ТаблицаЭтапыГрафик.Этап,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвратныеОтходы.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаВозвратныеОтходы.Подразделение
	|		ИНАЧЕ ТаблицаВозвратныеОтходы.Склад
	|	КОНЕЦ,
	|	ТаблицаВозвратныеОтходы.ПроизводитсяВПроцессе,
	|	ТаблицаЭтапыГрафик.Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление),
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ТаблицаВозвратныеОтходы.Назначение,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ВозвратныеОтходыГрафик КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТаблицаВозвратныеОтходы
	|		ПО (ТаблицаВозвратныеОтходы.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаВозвратныеОтходы.КлючСвязи = ТабличнаяЧасть.КлючСвязиВозвратныеОтходы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТабличнаяЧасть.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТабличнаяЧасть.КлючСвязиЭтапыГрафик)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера,
	|	ТабличнаяЧасть.Ссылка,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаЭтапыГрафик.КодСтроки,
	|	ТаблицаЭтапыГрафик.Этап,
	|	ТаблицаМатериалыИУслуги.Склад,
	|	ТаблицаМатериалыИУслуги.ПроизводитсяВПроцессе,
	|	ТаблицаЭтапыГрафик.Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка),
	|	ТаблицаМатериалыИУслуги.ДатаПотребности,
	|	ТаблицаМатериалыИУслуги.Назначение,
	|	ТаблицаМатериалыИУслуги.ВариантОбеспечения,
	|	ТаблицаМатериалыИУслуги.Серия,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслугиГрафик КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО (ТаблицаМатериалыИУслуги.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаМатериалыИУслуги.КлючСвязи = ТабличнаяЧасть.КлючСвязиМатериалыИУслуги)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаПродукция.КлючСвязи = ТабличнаяЧасть.КлючСвязиПродукция)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаЭтапыГрафик.КлючСвязи = ТабличнаяЧасть.КлючСвязиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО (ТаблицаЭтапы.Ссылка = ТаблицаЭтапыГрафик.Ссылка)
	|			И (ТаблицаЭтапы.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция)
	|			И (ТаблицаЭтапы.КлючСвязи = ТаблицаЭтапыГрафик.КлючСвязиЭтапы)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТаблицаЭтапы.ПроизводствоНаСтороне
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаБракВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "БракВПроизводстве";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЭтапыВосстановления.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ЭтапыВосстановления.Количество КАК Количество,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период
	|ИЗ
	|	Документ.ЗаказНаПроизводство.ЭтапыВосстановленияБрака КАК ЭтапыВосстановления
	|ГДЕ
	|	ЭтапыВосстановления.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыМатериаловВПроизводство";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	&Ссылка                                 КАК Распоряжение,
	|	ТабличнаяЧасть.Подразделение            КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика           КАК Характеристика,
	|	ТабличнаяЧасть.Серия                    КАК Серия,
	|	ТабличнаяЧасть.Склад                    КАК Склад,
	|	ТабличнаяЧасть.Назначение               КАК Назначение,
	|	ТабличнаяЧасть.КодСтроки                КАК КодСтроки,
	|	ТабличнаяЧасть.Количество               КАК Заказано,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов), 
	|													ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|				ИЛИ (ТабличнаяЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|						И ТабличнаяЧасть.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), 
	|																ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)))
	|			ТОГДА ТабличнаяЧасть.Количество
	|	КОНЕЦ                                   КАК ВРезерве,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству), 
	|												ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|				И ТабличнаяЧасть.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), 
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА ТабличнаяЧасть.Количество
	|	КОНЕЦ                                   КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО (ТаблицаЭтапы.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаЭтапы.КлючСвязи = ТабличнаяЧасть.КлючСвязиЭтапы)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ЗаказатьНаСклад
	|	И НЕ ТаблицаЭтапы.ПроизводствоНаСтороне
	|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаЗаказыМатериаловСУчетомКорректировок(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ЗаказыМатериаловСУчетомКорректировок";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТМатериалыИУслуги.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ТДатыНачалаЭтапов.Период, НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)) КАК Период,
	|	&Организация КАК Организация,
	|	ТМатериалыИУслуги.Подразделение КАК Подразделение,
	|	&Ссылка КАК Распоряжение,
	|	ТМатериалыИУслуги.КодСтроки КАК КодСтрокиРаспоряжения,
	|	ТМатериалыИУслуги.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ТМатериалыИУслуги.ДатаПотребности КАК ДатаПотребности,
	|	ТМатериалыИУслуги.КодСтроки КАК КодСтроки,
	|	ТМатериалыИУслуги.Отменено КАК Отменено,
	|	ТЭтапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	|	ТМатериалыИУслуги.Серия КАК Серия,
	|	ТМатериалыИУслуги.Склад КАК Склад,
	|	ТМатериалыИУслуги.Упаковка КАК Упаковка,
	|	ТМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	ТМатериалыИУслуги.Характеристика КАК Характеристика,
	|	ТМатериалыИУслуги.Назначение КАК Назначение,
	|	ТМатериалыИУслуги.Количество КАК Количество,
	|	ТМатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЭтапыГрафик.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|			ЭтапыГрафик.КлючСвязиЭтапы КАК КлючСвязиЭтапы,
	|			МИНИМУМ(ЭтапыГрафик.НачалоПредварительногоБуфера) КАК Период
	|		ИЗ
	|			Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЭтапыГрафик
	|		ГДЕ
	|			ЭтапыГрафик.Ссылка = &Ссылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЭтапыГрафик.КлючСвязиЭтапы,
	|			ЭтапыГрафик.КлючСвязиПродукция) КАК ТДатыНачалаЭтапов
	|		ПО ТМатериалыИУслуги.КлючСвязиПродукция = ТДатыНачалаЭтапов.КлючСвязиПродукция
	|			И ТМатериалыИУслуги.КлючСвязиЭтапы = ТДатыНачалаЭтапов.КлючСвязиЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТЭтапы
	|		ПО ТМатериалыИУслуги.Ссылка = ТЭтапы.Ссылка
	|			И ТМатериалыИУслуги.КлючСвязиЭтапы = ТЭтапы.КлючСвязи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТПродукция
	|		ПО ТМатериалыИУслуги.Ссылка = ТПродукция.Ссылка
	|			И ТМатериалыИУслуги.КлючСвязиПродукция = ТПродукция.КлючСвязи
	|ГДЕ
	|	ТМатериалыИУслуги.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаМатериалыИУслуги.Склад           КАК Склад,
	|	ТаблицаМатериалыИУслуги.Подразделение   КАК Получатель,
	|	&Ссылка                                 КАК ДокументОтгрузки,
	|	ТаблицаМатериалыИУслуги.Номенклатура    КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика  КАК Характеристика,
	|	ТаблицаМатериалыИУслуги.Серия           КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТаблицаМатериалыИУслуги.Количество      КАК ВРезерве,
	|	0                                       КАК КОтгрузке,
	|	0                                       КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|ГДЕ
	|	ТаблицаМатериалыИУслуги.Ссылка = &Ссылка
	|   И (ТаблицаМатериалыИУслуги.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан) 
	|			И ТаблицаМатериалыИУслуги.ВариантОбеспечения В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|		ИЛИ ТаблицаМатериалыИУслуги.Ссылка.Статус В(
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
	|			И ТаблицаМатериалыИУслуги.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаМатериалыИУслуги.Склад           КАК Склад,
	|	ТаблицаМатериалыИУслуги.Подразделение   КАК Получатель,
	|	&Ссылка                                 КАК ДокументОтгрузки,
	|	ТаблицаМатериалыИУслуги.Номенклатура    КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика  КАК Характеристика,
	|	ТаблицаМатериалыИУслуги.Серия           КАК Серия,
	|	ВЫБОР КОГДА ТаблицаМатериалыИУслуги.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) 
	|				И ЕСТЬNULL(ТаблицаМатериалыИУслуги.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ) ТОГДА
	|		 ТаблицаМатериалыИУслуги.Назначение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	0                                       КАК ВРезерве,
	|	ТаблицаМатериалыИУслуги.Количество      КАК КОтгрузке,
	|	ТаблицаМатериалыИУслуги.Количество      КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|ГДЕ
	|	ТаблицаМатериалыИУслуги.Ссылка = &Ссылка
	|
	|	И ТаблицаМатериалыИУслуги.Номенклатура.ТипНоменклатуры В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И ТаблицаМатериалыИУслуги.ВариантОбеспечения В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И ТаблицаМатериалыИУслуги.Ссылка.Статус В (
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.ДатаПотребности           КАК Период,
		|	ТабличнаяЧасть.ДатаПотребности           КАК ДатаОтгрузки,
		|
		|	ТабличнаяЧасть.Номенклатура              КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика            КАК Характеристика,
		|	ТабличнаяЧасть.Склад                     КАК Склад,
		|
		|	ТабличнаяЧасть.Назначение                КАК Назначение,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
		|			ТабличнаяЧасть.Количество
		|		КОНЕЦ                                  КАК КоличествоИзЗаказов,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|				ТабличнаяЧасть.Количество
		|		КОНЕЦ                                  КАК КоличествоПодЗаказ,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
		|			ТабличнаяЧасть.Количество
		|		КОНЕЦ                                  КАК КоличествоНеобеспечено,
		|
		|	&Ссылка                                    КАК Распоряжение
		|ИЗ
		|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТабличнаяЧасть
		|
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.ЗаказатьНаСклад
		|
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт))
		|
		|	И ТабличнаяЧасть.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПереработкаПоГрафикуПроизводства(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ПереработкаПоГрафикуПроизводства";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)     КАК ВидДвижения,
		|	ТаблицаВыходныеИзделияГрафик.ДатаЗапуска   КАК Период,
		|	ТаблицаВыходныеИзделия.НомерСтроки         КАК НомерСтроки,
		|	&Ссылка                                    КАК ЗаказНаПроизводство,
		|	ТаблицаЭтапыГрафик.КодСтроки               КАК КодСтрокиЭтапыГрафик,
		|	ТаблицаВыходныеИзделия.Номенклатура        КАК Номенклатура,
		|	ТаблицаВыходныеИзделия.Характеристика      КАК Характеристика,
		|	ТаблицаВыходныеИзделия.Склад               КАК Склад,
		|	ТаблицаВыходныеИзделияГрафик.Количество    КАК КЗаказу
		|ИЗ
		|	Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
		|		ПО ТаблицаЭтапыГрафик.Ссылка = &Ссылка
		|			И ТаблицаЭтапыГрафик.КлючСвязиЭтапы = ТаблицаЭтапы.КлючСвязи
		|			И ТаблицаЭтапыГрафик.КлючСвязиПродукция = ТаблицаЭтапы.КлючСвязиПродукция
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТаблицаВыходныеИзделияГрафик
		|		ПО ТаблицаВыходныеИзделияГрафик.Ссылка = ТаблицаЭтапыГрафик.Ссылка
		|			И ТаблицаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик = ТаблицаЭтапыГрафик.КлючСвязи
		|			И ТаблицаВыходныеИзделияГрафик.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
		|		ПО ТаблицаВыходныеИзделия.Ссылка = ТаблицаВыходныеИзделияГрафик.Ссылка
		|			И ТаблицаВыходныеИзделия.КлючСвязи = ТаблицаВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия
		|			И ТаблицаВыходныеИзделия.КлючСвязиПродукция = ТаблицаВыходныеИзделияГрафик.КлючСвязиПродукция
		|
		|ГДЕ
		|	ТаблицаЭтапы.Ссылка = &Ссылка
		|	И ТаблицаЭтапы.ПроизводствоНаСтороне
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область РасчетГрафика

Функция ПолучитьГрафикВыпускаПродукции(ДанныеДокумента, ПараметрыОтладки = Неопределено) Экспорт
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Статус             = ДанныеДокумента.Статус;
	Ссылка             = ДанныеДокумента.Ссылка;
	Назначение         = ДанныеДокумента.Назначение;
	НомерВОчереди      = ДанныеДокумента.НомерВОчереди;
	ПриоритетНомер     = ДанныеДокумента.ПриоритетНомер;
	ПодразделениеНомер = ДанныеДокумента.ПодразделениеНомер;
	
	Продукция             = ДанныеДокумента.Продукция;
	ВыходныеИзделия       = ДанныеДокумента.ВыходныеИзделия;
	ВозвратныеОтходы      = ДанныеДокумента.ВозвратныеОтходы;
	Этапы                 = ДанныеДокумента.Этапы;
	ВидыРабочихЦентров    = ДанныеДокумента.ВидыРабочихЦентров;
	МатериалыИУслуги      = ДанныеДокумента.МатериалыИУслуги;
	Трудозатраты          = ДанныеДокумента.Трудозатраты;
	
	ПродукцияГрафик               = ДанныеДокумента.ПродукцияГрафик;
	ЭтапыГрафик                   = ДанныеДокумента.ЭтапыГрафик;
	ВыходныеИзделияГрафик         = ДанныеДокумента.ВыходныеИзделияГрафик;
	ВозвратныеОтходыГрафик        = ДанныеДокумента.ВозвратныеОтходыГрафик;
	МатериалыИУслугиГрафик        = ДанныеДокумента.МатериалыИУслугиГрафик;
	ТрудозатратыГрафик            = ДанныеДокумента.ТрудозатратыГрафик;
	ЗанятостьВидовРабочихЦентров  = ДанныеДокумента.ЗанятостьВидовРабочихЦентров;
	
	Продукция.Колонки.Добавить("Начало");
	Продукция.Колонки.Добавить("Окончание");
	
	СтруктураПараметров = Новый Структура("
		|Ссылка, 
		|НомерВОчереди, 
		|ПриоритетНомер, 
		|ПодразделениеНомер, 
		|Этапы, 
		|ЗанятостьВидовРЦ,
		|Начало, 
		|Окончание, 
		|РазмещениеВыпуска, 
		|ИзменятьРазмещениеВыпуска, 
		|ОптимальноеКоличествоПередачиМеждуЭтапами, 
		|ПотребностиСпланированныеРанее");
	
	СтруктураПараметров.Вставить("ИгнорироватьОграниченияДоступностиМатериалов", ДанныеДокумента.ИгнорироватьОграниченияДоступностиМатериалов);
	СтруктураПараметров.Вставить("ИгнорироватьОграниченияДоступностиВидовРабочихЦентров", ДанныеДокумента.ИгнорироватьОграниченияДоступностиВидовРабочихЦентров);
	СтруктураПараметров.Вставить("НаПустойЗавод", ДанныеДокумента.НаПустойЗавод);
	СтруктураПараметров.Вставить("ЗадействоватьРезервДоступности", ДанныеДокумента.ЗадействоватьРезервДоступности);
	СтруктураПараметров.Вставить("ДатыОбеспечения", ДанныеДокумента.ДатыОбеспечения);
	
	СтруктураПараметров.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса);
	
	// Для всех строк сбрасывается признак рассчитанности графика
	Продукция.ЗаполнитьЗначения(Ложь, "ГрафикРассчитан");
	
	Для каждого СтрокаПродукция из Продукция Цикл
		
		ПланируемыеСтроки = Новый Массив;
		РазмещениеВыпуска = СтрокаПродукция.РазмещениеВыпуска;
		
		// Строка с продукцией
		Если СтрокаПродукция.КлючСвязиПродукция = ПустойУникальныйИдентификатор Тогда
			
			ПланируемыеСтроки.Добавить(СтрокаПродукция);
			
			Для каждого ПланируемаяСтрока из ПланируемыеСтроки Цикл
				
				ПланируемаяСтрока.Начало = ПланируемаяСтрока.НачатьНеРанее;
				ПланируемаяСтрока.Окончание = ПланируемаяСтрока.ДатаПотребности;
				
				// Поиск связанных полуфабрикатов
				Полуфабрикаты = Продукция.НайтиСтроки(Новый Структура("КлючСвязиПродукция", ПланируемаяСтрока.КлючСвязи));
				
				Для каждого Полуфабрикат из Полуфабрикаты Цикл
					
					ПланируемыеСтроки.Добавить(Полуфабрикат);
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			// Полуфабрикаты пропускаются
			Продолжить;
			
		КонецЕсли;
		
		Индекс = 0;
		ДобавленныеСтроки = Новый Массив;
		
		Пока Индекс <= ПланируемыеСтроки.ВГраница() Цикл
			
			Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу Тогда
				
				// От полуфабрикатов нижнего уровня до продукции
				ПланируемаяСтрока = ПланируемыеСтроки[ПланируемыеСтроки.ВГраница() - Индекс];
				
			Иначе
				
				// От продукции до полуфабрикатов нижнего уровня
				ПланируемаяСтрока = ПланируемыеСтроки[Индекс];
				
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
			СтруктураПараметров.Ссылка = Ссылка;
			СтруктураПараметров.НомерВОчереди = НомерВОчереди;
			СтруктураПараметров.ПриоритетНомер = ПриоритетНомер;
			СтруктураПараметров.ПодразделениеНомер = ПодразделениеНомер;
			СтруктураПараметров.Этапы = ЭтапыДляРасчетаГрафика(ПланируемаяСтрока, Этапы, ВидыРабочихЦентров);
			СтруктураПараметров.ЗанятостьВидовРЦ = ЗанятостьВидовРабочихЦентров;
			
			СтруктураПараметров.Начало = ПланируемаяСтрока.Начало;
			СтруктураПараметров.Окончание = ПланируемаяСтрока.Окончание;
			СтруктураПараметров.РазмещениеВыпуска = РазмещениеВыпуска;
			СтруктураПараметров.ИзменятьРазмещениеВыпуска = ПланируемыеСтроки.Количество() = 1;
			СтруктураПараметров.ОптимальноеКоличествоПередачиМеждуЭтапами = ПланируемаяСтрока.ОптимальноеКоличествоПередачиМеждуЭтапами;
			
			НовыйГрафикВыпускаПродукции = ПланированиеПроизводстваПереопределяемый.РассчитатьГрафикВыпускаПродукции(СтруктураПараметров, ПараметрыОтладки);
			
			Если НовыйГрафикВыпускаПродукции = Неопределено Тогда
				
				Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию
					И НЕ СтруктураПараметров.ИзменятьРазмещениеВыпуска Тогда
					
					Для каждого ДобавленнаяСтрока из ДобавленныеСтроки Цикл
						
						ДобавленнаяСтрока.Владелец().Удалить(ДобавленнаяСтрока);
						
					КонецЦикла;
					
					ДобавленныеСтроки = Новый Массив;
					
					РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
					Индекс = 0;
					Продолжить;
					
				Иначе
					
					СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
					Возврат Новый Структура("Запланирован, НомерСтрокиПродукция, Ошибки", Ложь, ПланируемаяСтрока.НомерСтроки, СтруктураПараметров.Ошибки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Для строки устанавливается признак рассчитанности графика
			ПланируемаяСтрока.ГрафикРассчитан = Истина;
			
			СтрокаПродукцияГрафик = ПродукцияГрафик.Найти(ПланируемаяСтрока.КлючСвязи, "КлючСвязиПродукция");
			
			Если СтрокаПродукцияГрафик = Неопределено Тогда
				
				СтрокаПродукцияГрафик = ПродукцияГрафик.Добавить();
				ДобавленныеСтроки.Добавить(СтрокаПродукцияГрафик);
				СтрокаПродукцияГрафик.КлючСвязиПродукция = ПланируемаяСтрока.КлючСвязи;
				
			КонецЕсли;
			
			СтрокаПродукцияГрафик.Начало = Неопределено;
			СтрокаПродукцияГрафик.Окончание = Неопределено;
			
			Если НовыйГрафикВыпускаПродукции.Количество() = 0 Тогда
				
				Для каждого СтрокаЭтапыГрафик из ЭтапыГрафик Цикл
					
					Если СтрокаПродукцияГрафик.КлючСвязиПродукция <> СтрокаЭтапыГрафик.КлючСвязиПродукция Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаПродукцияГрафик.Начало) ИЛИ СтрокаПродукцияГрафик.Начало > СтрокаЭтапыГрафик.НачалоПредварительногоБуфера Тогда
						
						СтрокаПродукцияГрафик.Начало = СтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
						ПланируемаяСтрока.Начало = СтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаПродукцияГрафик.Окончание) ИЛИ СтрокаПродукцияГрафик.Окончание < СтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера Тогда
						
						СтрокаПродукцияГрафик.Окончание = СтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
						ПланируемаяСтрока.Окончание = СтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству Тогда
				
				ПланируемаяСтрока.ИзмененияЗапрещены = Истина;
				
			КонецЕсли;
			
			СтрокиВыходныеИзделияГрафик = Новый Массив;
			
			Для каждого ГрафикЭтапа из НовыйГрафикВыпускаПродукции Цикл
				
				ТекущийЭтап = Этапы.Найти(ГрафикЭтапа.КлючСвязиЭтап, "КлючСвязи");
				
				НоваяСтрокаЭтапыГрафик = ЭтапыГрафик.Добавить();
				ДобавленныеСтроки.Добавить(НоваяСтрокаЭтапыГрафик);
				
				НоваяСтрокаЭтапыГрафик.Этап = ГрафикЭтапа.Этап;
				НоваяСтрокаЭтапыГрафик.Спецификация = ТекущийЭтап.Спецификация;
				НоваяСтрокаЭтапыГрафик.Подразделение = ТекущийЭтап.Подразделение;
				НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера = ГрафикЭтапа.НачалоПредварительногоБуфера;
				НоваяСтрокаЭтапыГрафик.НачалоЭтапа = ГрафикЭтапа.НачалоЭтапа;
				НоваяСтрокаЭтапыГрафик.ОкончаниеЭтапа = ГрафикЭтапа.ОкончаниеЭтапа;
				НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера = ГрафикЭтапа.ОкончаниеЗавершающегоБуфера;
				НоваяСтрокаЭтапыГрафик.Количество = ГрафикЭтапа.Количество;
				НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция = ТекущийЭтап.КлючСвязиПродукция;
				НоваяСтрокаЭтапыГрафик.КлючСвязиЭтапы = ТекущийЭтап.КлючСвязи;
				НоваяСтрокаЭтапыГрафик.КлючСвязи = ГрафикЭтапа.КлючСвязи;
				НоваяСтрокаЭтапыГрафик.НомерЭтапа = ТекущийЭтап.НомерЭтапа;
				НоваяСтрокаЭтапыГрафик.НомерСледующегоЭтапа = ТекущийЭтап.НомерСледующегоЭтапа;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПродукцияГрафик.Начало) ИЛИ СтрокаПродукцияГрафик.Начало > НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера Тогда
					
					СтрокаПродукцияГрафик.Начало = НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
					ПланируемаяСтрока.Начало = НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаПродукцияГрафик.Окончание) ИЛИ СтрокаПродукцияГрафик.Окончание < НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера Тогда
					
					СтрокаПродукцияГрафик.Окончание = НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
					ПланируемаяСтрока.Окончание = НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
					
				КонецЕсли;
				
				ВыходныеИзделияНайденныеСтроки = ВыходныеИзделия.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ТекущийЭтап.КлючСвязи));
				
				Для каждого СтрокаВыходныеИзделия из ВыходныеИзделияНайденныеСтроки Цикл
					
					НоваяСтрокаВыходныеИзделияГрафик = ВыходныеИзделияГрафик.Добавить();
					ДобавленныеСтроки.Добавить(НоваяСтрокаВыходныеИзделияГрафик);
					
					НоваяСтрокаВыходныеИзделияГрафик.ДатаВыпуска = НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
					НоваяСтрокаВыходныеИзделияГрафик.КоличествоУпаковок = СтрокаВыходныеИзделия.КоличествоУпаковок * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаВыходныеИзделияГрафик.Количество = СтрокаВыходныеИзделия.Количество * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаВыходныеИзделияГрафик.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
					НоваяСтрокаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
					НоваяСтрокаВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия = СтрокаВыходныеИзделия.КлючСвязи;
					
					СтрокиВыходныеИзделияГрафик.Добавить(НоваяСтрокаВыходныеИзделияГрафик);
					
				КонецЦикла;
				
				ВозвратныеОтходыНайденныеСтроки = ВозвратныеОтходы.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ТекущийЭтап.КлючСвязи));
				
				Для каждого СтрокаВозвратныеОтходы из ВозвратныеОтходыНайденныеСтроки Цикл
					
					НоваяСтрокаВозвратныеОтходыГрафик = ВозвратныеОтходыГрафик.Добавить();
					ДобавленныеСтроки.Добавить(НоваяСтрокаВозвратныеОтходыГрафик);
					
					НоваяСтрокаВозвратныеОтходыГрафик.ДатаВыпуска = НоваяСтрокаЭтапыГрафик.ОкончаниеЗавершающегоБуфера;
					НоваяСтрокаВозвратныеОтходыГрафик.КоличествоУпаковок = СтрокаВозвратныеОтходы.КоличествоУпаковок * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаВозвратныеОтходыГрафик.Количество = СтрокаВозвратныеОтходы.Количество * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаВозвратныеОтходыГрафик.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
					НоваяСтрокаВозвратныеОтходыГрафик.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
					НоваяСтрокаВозвратныеОтходыГрафик.КлючСвязиВозвратныеОтходы= СтрокаВозвратныеОтходы.КлючСвязи;
					
				КонецЦикла;
				
				МатериалыИУслугиНайденныеСтроки = МатериалыИУслуги.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ТекущийЭтап.КлючСвязи));
				
				Для каждого СтрокаМатериалыИУслуги из МатериалыИУслугиНайденныеСтроки Цикл
					
					НоваяСтрокаМатериалыИУслугиГрафик = МатериалыИУслугиГрафик.Добавить();
					ДобавленныеСтроки.Добавить(НоваяСтрокаМатериалыИУслугиГрафик);
					
					НоваяСтрокаМатериалыИУслугиГрафик.ДатаПотребности = НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
					НоваяСтрокаМатериалыИУслугиГрафик.КоличествоУпаковок = СтрокаМатериалыИУслуги.КоличествоУпаковок * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаМатериалыИУслугиГрафик.Количество = СтрокаМатериалыИУслуги.Количество * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаМатериалыИУслугиГрафик.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
					НоваяСтрокаМатериалыИУслугиГрафик.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
					НоваяСтрокаМатериалыИУслугиГрафик.КлючСвязиМатериалыИУслуги = СтрокаМатериалыИУслуги.КлючСвязи;
					НоваяСтрокаМатериалыИУслугиГрафик.ВариантОбеспечения = СтрокаМатериалыИУслуги.ВариантОбеспечения;
					
				КонецЦикла;
				
				ТрудозатратыНайденныеСтроки = Трудозатраты.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ТекущийЭтап.КлючСвязи));
				
				Для каждого СтрокаТрудозатраты из ТрудозатратыНайденныеСтроки Цикл
					
					НоваяСтрокаТрудозатратыГрафик = ТрудозатратыГрафик.Добавить();
					ДобавленныеСтроки.Добавить(НоваяСтрокаТрудозатратыГрафик);
					
					НоваяСтрокаТрудозатратыГрафик.ДатаПотребности = НоваяСтрокаЭтапыГрафик.НачалоПредварительногоБуфера;
					НоваяСтрокаТрудозатратыГрафик.Количество = СтрокаТрудозатраты.Количество * НоваяСтрокаЭтапыГрафик.Количество / ТекущийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрокаТрудозатратыГрафик.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
					НоваяСтрокаТрудозатратыГрафик.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
					НоваяСтрокаТрудозатратыГрафик.КлючСвязиТрудозатраты = СтрокаТрудозатраты.КлючСвязи;
					
				КонецЦикла;
				
				Если ГрафикЭтапа.Занятость <> Неопределено Тогда
					
					Для каждого СтрокаЗанятость из ГрафикЭтапа.Занятость Цикл
						
						Если СтрокаЗанятость.Количество > 0 Тогда
							
							НоваяСтрокаЗанятостьВидовРабочихЦентров = ЗанятостьВидовРабочихЦентров.Добавить();
							ДобавленныеСтроки.Добавить(НоваяСтрокаЗанятостьВидовРабочихЦентров);
							
							НоваяСтрокаЗанятостьВидовРабочихЦентров.ВидРабочегоЦентра = СтрокаЗанятость.ВидРабочегоЦентра;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.ДатаИнтервала = СтрокаЗанятость.ДатаИнтервала;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.Количество = СтрокаЗанятость.Количество;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция = НоваяСтрокаЭтапыГрафик.КлючСвязиПродукция;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапыГрафик = НоваяСтрокаЭтапыГрафик.КлючСвязи;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы = НоваяСтрокаЭтапыГрафик.КлючСвязиЭтапы;
							НоваяСтрокаЗанятостьВидовРабочихЦентров.НомерСтрокиПродукция = СтрокаПродукция.НомерСтроки;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполним даты запуска выходных изделий
			Для каждого СтрокаВыходныеИзделияГрафик Из СтрокиВыходныеИзделияГрафик Цикл
				
				СтрокаВыходныеИзделияГрафик.ДатаЗапуска = ДатаЗапускаЭтапов(СтрокаВыходныеИзделияГрафик.КлючСвязиПродукция, 
					СтрокаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик, 
					Этапы, 
					ЭтапыГрафик);
				
			КонецЦикла; 
			
			// Корректировка дат начала/окончания производства продукции/полуфабрикатов, включенных в заказ
			Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу Тогда
				
				// Это полуфабрикат и необходимо скорректировать начало производства продукции
				Для каждого ПланируемаяСтрокаПродукция из ПланируемыеСтроки Цикл
					
					Если ПланируемаяСтрокаПродукция.КлючСвязи = ПланируемаяСтрока.КлючСвязиПродукция Тогда
						
						ПланируемаяСтрокаПродукция.Начало = Макс(ПланируемаяСтрока.Окончание, ПланируемаяСтрокаПродукция.Начало);
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				// Это продукция и необходимо скорректировать окончание производства полуфабриката
				Для каждого ПланируемаяСтрокаПолуфабрикат из ПланируемыеСтроки Цикл
					
					Если ПланируемаяСтрокаПолуфабрикат.КлючСвязиПродукция = ПланируемаяСтрока.КлючСвязи Тогда
						
						ПланируемаяСтрокаПолуфабрикат.Окончание = Мин(ПланируемаяСтрока.Начало, ПланируемаяСтрокаПолуфабрикат.Окончание);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЭтапыГрафик.Сортировать("НачалоЭтапа, ОкончаниеЭтапа", Новый СравнениеЗначений);
	
	СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.Рассчитан;
	
	Возврат Новый Структура("Запланирован", Истина);
	
КонецФункции

Функция ЭтапыДляРасчетаГрафика(СтрокаПродукция, Этапы, ВидыРабочихЦентров)
	
	ЭтапыДляРасчетаГрафика = Этапы.Скопировать(Новый Структура("КлючСвязиПродукция", СтрокаПродукция.КлючСвязи));
	
	ВидыРЦДляРасчетаГрафика = ВидыРабочихЦентров.Скопировать(Новый Структура("КлючСвязиПродукция", СтрокаПродукция.КлючСвязи));
	ВидыРЦДляРасчетаГрафика.Индексы.Добавить("КлючСвязиЭтапы");
	
	// Данные о периоде производства
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	// Данные видов РЦ
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("ВидыРабочихЦентров");
	
	// График работы подразделения
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	
	// Интервал планирования подразделения
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("ИнтервалПланирования", Новый ОписаниеТипов("ПеречислениеСсылка.ТочностьГрафикаПроизводства"));
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("НачалоИнтервалаПланирования", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ЭтапыДляРасчетаГрафика.Колонки.Добавить("ОкончаниеИнтервалаПланирования", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	// Виды рабочих центров, которые встречаются в этапах
	МассивВидовРЦ = Новый Массив;
	
	Для каждого ВидРЦДляРасчетаГрафика из ВидыРЦДляРасчетаГрафика Цикл
		
		Если МассивВидовРЦ.Найти(ВидРЦДляРасчетаГрафика.ВидРабочегоЦентра) = Неопределено Тогда
			
			МассивВидовРЦ.Добавить(ВидРЦДляРасчетаГрафика.ВидРабочегоЦентра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыВидовРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВидовРЦ, "МинимальныйЗначимыйБуфер, Наименование");
	
	// Подразделения, которые встречаются в этапах
	МассивПодразделений = Новый Массив;
	
	// Этапы
	МассивЭтапов = Новый Массив;
	
	Для каждого ЭтапДляРасчетаГрафика из ЭтапыДляРасчетаГрафика Цикл
		
		Если МассивПодразделений.Найти(ЭтапДляРасчетаГрафика.Подразделение) = Неопределено Тогда
			
			МассивПодразделений.Добавить(ЭтапДляРасчетаГрафика.Подразделение);
			
		КонецЕсли;
		
		Если МассивЭтапов.Найти(ЭтапДляРасчетаГрафика.Этап) = Неопределено Тогда
			
			МассивЭтапов.Добавить(ЭтапДляРасчетаГрафика.Этап);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПодразделений = ПроизводствоСервер.ПараметрыПроизводственныхПодразделений(МассивПодразделений);
	
	Для каждого ЭтапДляРасчетаГрафика из ЭтапыДляРасчетаГрафика Цикл
		
		ПараметрыПодразделения = ПараметрыПодразделений[ЭтапДляРасчетаГрафика.Подразделение];
		
		ЭтапДляРасчетаГрафика.Начало = СтрокаПродукция.Начало;
		ЭтапДляРасчетаГрафика.Окончание = СтрокаПродукция.Окончание;
		
		ЭтапДляРасчетаГрафика.ГрафикРаботы = ПараметрыПодразделения.ГрафикРаботы;
		ЭтапДляРасчетаГрафика.ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
		ЭтапДляРасчетаГрафика.НачалоИнтервалаПланирования = ПараметрыПодразделения.НачалоИнтервалаПланирования;
		ЭтапДляРасчетаГрафика.ОкончаниеИнтервалаПланирования = ПараметрыПодразделения.ОкончаниеИнтервалаПланирования;
		
		ЭтапДляРасчетаГрафика.ВидыРабочихЦентров = Новый Массив;
		
		Если ЭтапДляРасчетаГрафика.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ВидыРЦЭтапа = ВидыРЦДляРасчетаГрафика.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", ЭтапДляРасчетаГрафика.КлючСвязи));
			
			Для каждого ВидРЦЭтапа из ВидыРЦЭтапа Цикл
				
				ПараметрыВидаРЦ = Новый Структура;
				ПараметрыВидаРЦ.Вставить("ИнтервалПланирования", ПараметрыПодразделения.ИнтервалПланирования);
				ПараметрыВидаРЦ.Вставить("МинимальныйЗначимыйБуфер", РеквизитыВидовРЦ[ВидРЦЭтапа.ВидРабочегоЦентра].МинимальныйЗначимыйБуфер);
				ПараметрыВидаРЦ.Вставить("УчитыватьДоступностьПоГрафикуРаботы", ВидРЦЭтапа.УчитыватьДоступностьПоГрафикуРаботы);
				ПараметрыВидаРЦ.Вставить("ВидРабочегоЦентра", ВидРЦЭтапа.ВидРабочегоЦентра);
				ПараметрыВидаРЦ.Вставить("НаименованиеВидаРабочегоЦентра", РеквизитыВидовРЦ[ВидРЦЭтапа.ВидРабочегоЦентра].Наименование);
				ПараметрыВидаРЦ.Вставить("ВремяРаботы", ВидРЦЭтапа.ВремяРаботы);
				ПараметрыВидаРЦ.Вставить("ЕдиницаИзмерения", ВидРЦЭтапа.ЕдиницаИзмерения);
				
				ЭтапДляРасчетаГрафика.ВидыРабочихЦентров.Добавить(ПараметрыВидаРЦ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтапыДляРасчетаГрафика;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность = ПравоДоступа("Редактирование", Метаданные.Документы.ЗаказНаПроизводство)
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	ДелоЗаказыНаПроизводствоОжидающиеПередачиВПроизводство(ТекущиеДела, ОбщиеПараметрыЗапросов);
	ДелоЗаказыНаПроизводствоСНедействующимиСпецификациями(ТекущиеДела, ОбщиеПараметрыЗапросов);
	
КонецПроцедуры

Процедура ДелоЗаказыНаПроизводствоОжидающиеПередачиВПроизводство(ТекущиеДела, ОбщиеПараметрыЗапросов)

	ИмяФормы = "Документ.ЗаказНаПроизводство.ФормаСписка";
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Создан)
	|	И ЗаказНаПроизводство.Проведен";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаказыНаПроизводство
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор = "ЗаказыНаПроизводство";
	ДелоРодитель.Представление = НСтр("ru='Заказы на производство';uk='Замовлення на виробництво'");
	ДелоРодитель.ЕстьДела = Результат.ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство > 0;
	ДелоРодитель.Владелец = Метаданные.Подсистемы.Производство;
	
	// ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Статус", Перечисления.СтатусыЗаказовНаПроизводство.Создан);
	ПараметрыОтбора.Вставить("Приоритет", Справочники.Приоритеты.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство";
	Дело.ЕстьДела = Результат.ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство > 0;
	Дело.Представление = НСтр("ru='Ожидающие передачи в производство';uk='Очікуючі передачі у виробництво'");
	Дело.Количество = Результат.ЗаказыНаПроизводствоОжидающиеПередачиВПроизводство;
	Дело.Важное = Ложь;
	Дело.Форма = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец = "ЗаказыНаПроизводство";
	
КонецПроцедуры

Процедура ДелоЗаказыНаПроизводствоСНедействующимиСпецификациями(ТекущиеДела, ОбщиеПараметрыЗапросов)
	
	ИмяФормы = "Документ.ЗаказНаПроизводство.Форма.ЗаменаНедействующихСпецификаций";
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТМатериалыИУслуги.Ссылка КАК Ссылка,
	|	ТМатериалыИУслуги.КлючСвязиПродукция КАК КлючСвязиПродукция,
	|	РесурсныеСпецификации.НачалоДействия КАК НачалоДействия,
	|	РесурсныеСпецификации.КонецДействия КАК КонецДействия,
	|	РесурсныеСпецификации.Статус КАК Статус
	|ПОМЕСТИТЬ ВТМатериалыИУслуги
	|ИЗ
	|	Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|		ПО ТМатериалыИУслуги.ИсточникПолученияПолуфабриката = РесурсныеСпецификации.Ссылка
	|ГДЕ
	|	ТМатериалыИУслуги.Ссылка.Проведен
	|	И ТМатериалыИУслуги.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ТаблицаПродукция.НомерСтроки) КАК ЗаказыНаПроизводствоСНедействующимиСпецификациями
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|ГДЕ
	|	(ТаблицаПродукция.Спецификация.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ИЛИ ТаблицаПродукция.Спецификация.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности < ТаблицаПродукция.Спецификация.НачалоДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности > ТаблицаПродукция.Спецификация.КонецДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее < ТаблицаПродукция.Спецификация.НачалоДействия
	|			ИЛИ ТаблицаПродукция.Спецификация.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее >= ТаблицаПродукция.Спецификация.КонецДействия)
	|	И ТаблицаПродукция.Ссылка.Проведен
	|	И ТаблицаПродукция.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТаблицаПродукция.НомерСтроки)
	|ИЗ
	|	ВТМатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО (ТаблицаПродукция.КлючСвязи = ТаблицаМатериалыИУслуги.КлючСвязиПродукция)
	|			И (ТаблицаПродукция.Ссылка = ТаблицаМатериалыИУслуги.Ссылка)
	|ГДЕ
	|	(ТаблицаМатериалыИУслуги.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСпецификаций.Действует)
	|			ИЛИ ТаблицаМатериалыИУслуги.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности < ТаблицаМатериалыИУслуги.НачалоДействия
	|			ИЛИ ТаблицаМатериалыИУслуги.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.ДатаПотребности > ТаблицаМатериалыИУслуги.КонецДействия
	|			ИЛИ ТаблицаМатериалыИУслуги.НачалоДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее < ТаблицаМатериалыИУслуги.НачалоДействия
	|			ИЛИ ТаблицаМатериалыИУслуги.КонецДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаПродукция.НачатьНеРанее >= ТаблицаМатериалыИУслуги.КонецДействия)";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаказыНаПроизводство
	ДелоРодитель = ТекущиеДела.Найти("ЗаказыНаПроизводство", "Идентификатор");
	
	// ЗаказыНаПроизводствоСНедействующимиСпецификациями
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор = "ЗаказыНаПроизводствоСНедействующимиСпецификациями";
	Дело.ЕстьДела = Результат.ЗаказыНаПроизводствоСНедействующимиСпецификациями > 0;
	Дело.Представление = НСтр("ru='Заказы с недействующими спецификациями';uk='Замовлення з недіючими специфікаціями'");
	Дело.Количество = Результат.ЗаказыНаПроизводствоСНедействующимиСпецификациями;
	Дело.Важное = Ложь;
	Дело.Форма = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец = "ЗаказыНаПроизводство";
	
	Если Результат.ЗаказыНаПроизводствоСНедействующимиСпецификациями > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Вызывается при заполнении варианта обеспечения.
// Удаляет данные которые относятся к полуфабрикатам:
// - если не используются корректировки и выбраны разные варианты для одной строке (это приводит к разбиению строки)
// - если вариант обеспечения не обособленный
//
Процедура УдалитьНедопустимыеДанныеЗаполнения(Операция, Товары, РазрешеноРазбиватьСтроки, ДанныеЗаполнения) Экспорт
	
	СтрокиПолуфабрикатов = Новый Соответствие;
	ИдентификаторыСтрокКУдалению = Новый Массив;
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		Идентификатор = СтрокаОбеспечения.Идентификатор;
		Если ИдентификаторыСтрокКУдалению.Найти(Идентификатор) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
			СтрокаТовары = Товары.НайтиПоИдентификатору(Идентификатор);
		ИначеЕсли Операция = "ИндексыСтрок" Тогда
			СтрокаТовары = Товары[Идентификатор];
		КонецЕсли;
		Если СтрокаТовары.ПроизводитсяВПроцессе Тогда
			
			Если НЕ РазрешеноРазбиватьСтроки
					И СтрокиПолуфабрикатов.Получить(СтрокаТовары.НомерСтроки) <> Неопределено 
				ИЛИ СтрокаОбеспечения.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Обособленно
					И СтрокаОбеспечения.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
					
				Если ИдентификаторыСтрокКУдалению.Найти(Идентификатор) = Неопределено Тогда
					ИдентификаторыСтрокКУдалению.Добавить(Идентификатор);
				КонецЕсли; 
				
			КонецЕсли;
			
			Если НЕ РазрешеноРазбиватьСтроки Тогда
				СтрокиПолуфабрикатов.Вставить(СтрокаТовары.НомерСтроки, 1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторыСтрокКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив; 
	Для каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
		Если ИдентификаторыСтрокКУдалению.Найти(СтрокаОбеспечения.Идентификатор) <> Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаОбеспечения);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаОбеспечения Из СтрокиКУдалению Цикл
		ДанныеЗаполнения.Удалить(СтрокаОбеспечения);
	КонецЦикла; 

КонецПроцедуры

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ДанныеОтбора - Структура - поля, по которым будут отобраны остатки заказов
//	Дата - Дата - дата, на которую будут отобраны остатки заказов
//	МассивЗаказов - Массив - заказы, по которым будут отобраны остатки
//
// Вовращаемое значение:
//	Результат запроса - результат запроса по неотгруженной части заказовзаявок
//
Функция ПолучитьРезультатЗапросаПоОстаткамПродукцииКОбеспечениюДавальцу(ДанныеОтбора, 
																		Дата,
	                                                                	МассивЗаказов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивЗаказов",	МассивЗаказов);
	Запрос.УстановитьПараметр("НачатьНеРанее",	НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("РазмещениеВыпуска",	Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу);
	
	Если Дата <> Неопределено Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(Дата));
		Запрос.УстановитьПараметр("ГраницаПериод", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("Период", '00010101');
		Запрос.УстановитьПараметр("ГраницаПериод", Неопределено);
	КонецЕсли;
	
	МассивИсключений = Новый Массив;
	
	Если ДанныеОтбора.Свойство("МассивИсключений") Тогда
		МассивИсключений = ДанныеОтбора.МассивИсключений;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивИсключений", МассивИсключений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УслугиОстатки.Назначение КАК Назначение,
	|	УслугиОстатки.Назначение.Заказ КАК ЗаказДавальца,
	|	УслугиОстатки.Номенклатура КАК Номенклатура,
	|	УслугиОстатки.Характеристика КАК Характеристика,
	|	УслугиОстатки.КЗаказуОстаток КАК Количество,
	|	УслугиОстатки.Склад КАК Склад
	|ПОМЕСТИТЬ ВТТаблицаОстатки
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(&ГраницаПериод, Назначение.Заказ В (&МассивЗаказов)) КАК УслугиОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Услуги.Назначение,
	|	Услуги.Назначение.Заказ,
	|	Услуги.Номенклатура,
	|	Услуги.Характеристика,
	|	-Услуги.КЗаказу,
	|	Услуги.Склад
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов КАК Услуги
	|ГДЕ
	|	Услуги.Регистратор В(&МассивИсключений)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЗаказДавальца,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаОстатки.Назначение КАК Назначение,
	|	ВТТаблицаОстатки.ЗаказДавальца КАК ЗаказДавальца,
	|	ВТТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ВТТаблицаОстатки.Характеристика КАК Характеристика,
	|	СУММА(ВТТаблицаОстатки.Количество) КАК Количество,
	|	ВТТаблицаОстатки.Склад КАК Склад
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	ВТТаблицаОстатки КАК ВТТаблицаОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаОстатки.Назначение,
	|	ВТТаблицаОстатки.ЗаказДавальца,
	|	ВТТаблицаОстатки.Номенклатура,
	|	ВТТаблицаОстатки.Характеристика,
	|	ВТТаблицаОстатки.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЗаказДавальца,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказДавальца КАК ЗаказДавальца,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЗаказТовары.Спецификация) КАК Спецификация,
	|	ЗаказТовары.Ссылка.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ЗаказТовары.Склад КАК Склад,
	|	МАКСИМУМ(ЗаказТовары.Упаковка) КАК Упаковка,
	|	МИНИМУМ(ЗаказТовары.ДатаОтгрузки) КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ТаблицаРеквизитыЗаказа
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Продукция КАК ЗаказТовары
	|		ПО ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ТаблицаОстатки.ЗаказДавальца = ЗаказТовары.Ссылка
	|			И ТаблицаОстатки.Склад = ЗаказТовары.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатки.ЗаказДавальца,
	|	ТаблицаОстатки.Номенклатура,
	|	ТаблицаОстатки.Характеристика,
	|	ЗаказТовары.Ссылка.ЖелаемаяДатаОтгрузки,
	|	ЗаказТовары.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЗаказДавальца,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ИзмененияЗапрещены,
	|	&РазмещениеВыпуска КАК РазмещениеВыпуска,
	|	&НачатьНеРанее КАК НачатьНеРанее,
	|	ТаблицаОстатки.Назначение КАК Назначение,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаЗаказ.Спецификация КАК Спецификация,
	|	ТаблицаЗаказ.Склад КАК Склад,
	|	ТаблицаЗаказ.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказ.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТаблицаЗаказ.ДатаОтгрузки
	|		ИНАЧЕ ТаблицаЗаказ.ЖелаемаяДатаОтгрузки
	|	КОНЕЦ КАК ДатаПотребности,
	|	ТаблицаОстатки.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ИЛИ &ТекстЗапросаКоэффициентУпаковки = 0
	|			ТОГДА ТаблицаОстатки.Количество
	|		ИНАЧЕ ТаблицаОстатки.Количество / &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРеквизитыЗаказа КАК ТаблицаЗаказ
	|		ПО ТаблицаОстатки.Номенклатура = ТаблицаЗаказ.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ТаблицаЗаказ.Характеристика
	|			И ТаблицаОстатки.ЗаказДавальца = ТаблицаЗаказ.ЗаказДавальца
	|			И ТаблицаОстатки.Склад = ТаблицаЗаказ.Склад";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаЗаказ.Упаковка",
		"ТаблицаЗаказ.Номенклатура"));
		
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СпецификацияДействует(ЗначенияРеквизитов, ДанныеСтроки)
	
	Если ЗначенияРеквизитов.НачалоДействия <> '000101010000'
			И ДанныеСтроки.ДатаПотребности < ЗначенияРеквизитов.НачалоДействия
		ИЛИ ЗначенияРеквизитов.КонецДействия <> '000101010000'
			И ДанныеСтроки.ДатаПотребности > ЗначенияРеквизитов.КонецДействия
		ИЛИ ЗначенияРеквизитов.НачалоДействия <> '000101010000'
			И ДанныеСтроки.НачатьНеРанее < ЗначенияРеквизитов.НачалоДействия
		ИЛИ ЗначенияРеквизитов.КонецДействия <> '000101010000'
			И ДанныеСтроки.НачатьНеРанее >= ЗначенияРеквизитов.КонецДействия Тогда
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина
	
КонецФункции

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаказНаПроизводство";
КонецФункции

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутнаяКартаНаПродукцию") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"МаршрутнаяКартаНаПродукцию", 
			НСтр("ru='Маршрутная карта на продукцию';uk='Маршрутна карта на продукцію'"), 
			ПечатнаяФормаМаршрутнойКартыНаПродукцию(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода),
			,
			"Документ.ЗаказНаПроизводство.ПФ_MXL_МаршрутнаяКартаНаПродукцию",
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма 
			);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДиаграммаГрафикаПроизводства") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ДиаграммаГрафикаПроизводства", 
			НСтр("ru='График производства';uk='Графік виробництва'"), 
			ПечатнаяФормаГрафикаПроизводства(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода),
			,
			"Документ.ЗаказНаПроизводство.ПФ_MXL_ДиаграммаГрафикаПроизводства",
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма 
			);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаМаршрутнойКартыНаПродукцию(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода)
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаПроизводство.ПФ_MXL_МаршрутнаяКартаНаПродукцию", КодЯзыкаПечать);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьМаршрутныхКартНаПродукцию_МаршрутнаяКартаНаПродукцию";
	
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ТаблицаПродукции.Колонки.Добавить("ЭтоПолуфабрикат", Новый ОписаниеТипов("Булево"));
	Для каждого ДанныеОПродукции Из ПараметрыПечати Цикл
		НоваяСтрока = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОПродукции);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПродукции.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат
	|ПОМЕСТИТЬ ТаблицаПродукции
	|ИЗ
	|	&ТаблицаПродукции КАК ТаблицаПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1 Шапка
	|ВЫБРАТЬ
	|	ТаблицаПродукция.Заказ,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаПродукция.НомерСтроки,
	|	ТаблицаПродукция.Распоряжение,
	|	ТаблицаПродукция.Номер,
	|	ТаблицаПродукция.Дата,
	|	ТаблицаПродукция.Спецификация,
	|	ТаблицаПродукция.Спецификация.Представление КАК СпецификацияПредставление,
	|	ТаблицаПродукция.Спецификация.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	ТаблицаПродукция.Спецификация.ПечатьМаршрутнойКарты КАК ПечатьМаршрутнойКарты,
	|	ТаблицаПродукция.Номенклатура,
	|	ТаблицаПродукция.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ТаблицаПродукция.Характеристика,
	|	ТаблицаПродукция.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ВЫБОР
	|		КОГДА ТаблицаПродукция.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаПродукция.Упаковка.Представление
	|		ИНАЧЕ ТаблицаПродукция.Номенклатура.ЕдиницаИзмерения.Представление
	|	КОНЕЦ КАК ЕдИзм,
	|	ТаблицаПродукция.Запланировано,
	|	ТаблицаПродукция.ЭтоПолуфабрикат,
	|	ТаблицаПродукция.Начало,
	|	ТаблицаПродукция.Окончание
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПродукции.Заказ КАК Заказ,
	|		ЗаказПродукция.КодСтроки КАК КодСтроки,
	|		ЗаказПродукция.НомерСтроки КАК НомерСтроки,
	|		ЗаказПродукция.Ссылка КАК Распоряжение,
	|		ЗаказПродукция.Ссылка.Номер КАК Номер,
	|		ЗаказПродукция.Ссылка.Дата КАК Дата,
	|		ЗаказПродукция.Спецификация КАК Спецификация,
	|		ЗаказПродукция.Номенклатура КАК Номенклатура,
	|		ЗаказПродукция.Характеристика КАК Характеристика,
	|		ЗаказПродукция.КоличествоУпаковок КАК Запланировано,
	|		ЗаказПродукция.Упаковка КАК Упаковка,
	|		ЛОЖЬ КАК ЭтоПолуфабрикат,
	|		МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера) КАК Начало,
	|		МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК Окончание
	|	ИЗ
	|		ТаблицаПродукции КАК ТаблицаПродукции
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|			ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|				И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|			ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказПродукция.Ссылка)
	|				И (ЗаказЭтапыГрафик.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|	ГДЕ
	|		НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПродукции.Заказ,
	|		ЗаказПродукция.КодСтроки,
	|		ЗаказПродукция.НомерСтроки,
	|		ЗаказПродукция.Ссылка,
	|		ЗаказПродукция.Спецификация,
	|		ЗаказПродукция.Номенклатура,
	|		ЗаказПродукция.Характеристика,
	|		ЗаказПродукция.КоличествоУпаковок,
	|		ЗаказПродукция.Ссылка.Номер,
	|		ЗаказПродукция.Ссылка.Дата,
	|		ЗаказПродукция.Упаковка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаПродукции.Заказ,
	|		ЗаказПродукция.КодСтроки,
	|		ЗаказВыходныеИзделия.НомерСтроки,
	|		ЗаказПродукция.Ссылка,
	|		ЗаказПродукция.Ссылка.Номер,
	|		ЗаказПродукция.Ссылка.Дата,
	|		МАКСИМУМ(ЗаказЭтапы.Этап.Владелец),
	|		ЗаказВыходныеИзделия.Номенклатура,
	|		ЗаказВыходныеИзделия.Характеристика,
	|		ЗаказВыходныеИзделия.КоличествоУпаковок,
	|		ЗаказВыходныеИзделия.Упаковка,
	|		ИСТИНА,
	|		МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера),
	|		МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера)
	|	ИЗ
	|		ТаблицаПродукции КАК ТаблицаПродукции
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|			ПО (ЗаказВыходныеИзделия.Ссылка = ТаблицаПродукции.Заказ)
	|				И (ЗаказВыходныеИзделия.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|			ПО (ЗаказПродукция.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|				И (ЗаказПродукция.КлючСвязи = ЗаказВыходныеИзделия.КлючСвязиПродукция)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|			ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|				И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|				И (ЗаказЭтапы.КлючСвязиПолуфабрикат <> &ПустойКлючСвязи)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|			ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
	|				И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|	ГДЕ
	|		ТаблицаПродукции.ЭтоПолуфабрикат
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПродукции.Заказ,
	|		ЗаказПродукция.КодСтроки,
	|		ЗаказВыходныеИзделия.НомерСтроки,
	|		ЗаказПродукция.Ссылка,
	|		ЗаказПродукция.Ссылка.Номер,
	|		ЗаказПродукция.Ссылка.Дата,
	|		ЗаказВыходныеИзделия.Номенклатура,
	|		ЗаказВыходныеИзделия.Характеристика,
	|		ЗаказВыходныеИзделия.КоличествоУпаковок,
	|		ЗаказВыходныеИзделия.Упаковка) КАК ТаблицаПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПродукция.Заказ,
	|	ТаблицаПродукция.КодСтроки,
	|	ТаблицаПродукция.ЭтоПолуфабрикат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2 Этапы
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|	ЗаказЭтапы.Этап КАК Этап,
	|	ЗаказЭтапы.Этап.Представление КАК ЭтапПредставление,
	|	ЗаказЭтапы.МаршрутнаяКарта КАК МаршрутнаяКарта,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьОперации КАК ИспользоватьОперации,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия КАК ИспользоватьВыходныеИзделия,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы КАК ИспользоватьМатериалы,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты КАК ИспользоватьТрудозатраты,
	|	ЗаказЭтапы.НомерЭтапа КАК НомерЭтапа,
	|	ЗаказЭтапы.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа,
	|	ЗаказЭтапы.Этап.Подразделение КАК Подразделение,
	|	ЗаказЭтапы.Этап.Подразделение.Код КАК ПодразделениеКод,
	|	ЗаказЭтапы.Количество КАК Количество,
	|	МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера) КАК НачатьНеРаньше,
	|	МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера) КАК ЗавершитьНеПозже
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЗаказЭтапы.Этап,
	|	ЗаказЭтапы.Этап.Представление,
	|	ЗаказЭтапы.МаршрутнаяКарта,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.НомерСледующегоЭтапа,
	|	ЗаказЭтапы.Этап.Подразделение,
	|	ЗаказЭтапы.Этап.Подразделение.Код,
	|	ЗаказЭтапы.Количество,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьОперации,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ИСТИНА,
	|	ЗаказЭтапы.Этап,
	|	ЗаказЭтапы.Этап.Представление,
	|	ЗаказЭтапы.МаршрутнаяКарта,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьОперации,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.НомерСледующегоЭтапа,
	|	ЗаказЭтапы.Этап.Подразделение,
	|	ЗаказЭтапы.Этап.Подразделение.Код,
	|	ЗаказЭтапы.Количество,
	|	МИНИМУМ(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера),
	|	МАКСИМУМ(ЗаказЭтапыГрафик.ОкончаниеЗавершающегоБуфера)
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|		ПО (ЗаказВыходныеИзделия.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказВыходныеИзделия.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = ЗаказВыходныеИзделия.КлючСвязиПолуфабрикат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ЗаказЭтапыГрафик.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|			И (ЗаказПродукция.КлючСвязи = ЗаказВыходныеИзделия.КлючСвязиПродукция)
	|ГДЕ
	|	ТаблицаПродукции.ЭтоПолуфабрикат
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПродукции.Заказ,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ЗаказЭтапы.Этап,
	|	ЗаказЭтапы.Этап.Представление,
	|	ЗаказЭтапы.МаршрутнаяКарта,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.НомерСледующегоЭтапа,
	|	ЗаказЭтапы.Этап.Подразделение,
	|	ЗаказЭтапы.Этап.Подразделение.Код,
	|	ЗаказЭтапы.Количество,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьОперации,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьВыходныеИзделия,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьМатериалы,
	|	ЗаказЭтапы.МаршрутнаяКарта.ИспользоватьТрудозатраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3 ВыходныеИзделия
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаВыходныеИзделия.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ТаблицаВыходныеИзделия.Характеристика.Наименование КАК ХарактеристикаПредставление,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1 КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа КАК НомерЭтапа,
	|	ЗаказЭтапы.Этап КАК Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ПО (ТаблицаВыходныеИзделия.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаВыходныеИзделия.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьВыходныеИзделия, ИСТИНА))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЛОЖЬ,
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Номенклатура.Код,
	|	ТаблицаВозвратныеОтходы.Номенклатура.Артикул,
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Номенклатура.НаименованиеПолное,
	|	ТаблицаВозвратныеОтходы.Характеристика.Наименование,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения2,
	|	ТаблицаВозвратныеОтходы.КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТаблицаВозвратныеОтходы
	|		ПО (ТаблицаВозвратныеОтходы.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаВозвратныеОтходы.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьВыходныеИзделия, ИСТИНА))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ИСТИНА,
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.Код,
	|	ТаблицаВыходныеИзделия.Номенклатура.Артикул,
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Номенклатура.НаименованиеПолное,
	|	ТаблицаВыходныеИзделия.Характеристика.Наименование,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения1,
	|	ТаблицаВыходныеИзделия.КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|		ПО (ЗаказВыходныеИзделия.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказВыходныеИзделия.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = ЗаказВыходныеИзделия.КлючСвязиПолуфабрикат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ПО (ТаблицаВыходныеИзделия.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаВыходныеИзделия.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьВыходныеИзделия, ИСТИНА))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4 МатериалыИУслуги
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказПродукция.НомерСтроки,
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Код КАК НоменклатураКод,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ТаблицаМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ТаблицаМатериалыИУслуги.Характеристика.Наименование КАК ХарактеристикаПредставление,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения3 КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаМатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа КАК НомерЭтапа,
	|	ЗаказЭтапы.Этап КАК Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказПродукция
	|		ПО (ЗаказПродукция.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказПродукция.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказПродукция.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказПродукция.КлючСвязи)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = &ПустойКлючСвязи)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО (ТаблицаМатериалыИУслуги.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаМатериалыИУслуги.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	НЕ ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьМатериалы, ИСТИНА))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ,
	|	ЗаказВыходныеИзделия.НомерСтроки,
	|	ИСТИНА,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Код,
	|	ТаблицаМатериалыИУслуги.Номенклатура.Артикул,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Номенклатура.НаименованиеПолное,
	|	ТаблицаМатериалыИУслуги.Характеристика.Наименование,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения3,
	|	ТаблицаМатериалыИУслуги.КоличествоУпаковок,
	|	ЗаказЭтапы.НомерЭтапа,
	|	ЗаказЭтапы.Этап
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ЗаказВыходныеИзделия
	|		ПО (ЗаказВыходныеИзделия.Ссылка = ТаблицаПродукции.Заказ)
	|			И (ЗаказВыходныеИзделия.НомерСтроки = ТаблицаПродукции.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказВыходныеИзделия.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязиПолуфабрикат = ЗаказВыходныеИзделия.КлючСвязиПолуфабрикат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО (ТаблицаМатериалыИУслуги.Ссылка = ЗаказЭтапы.Ссылка)
	|			И (ТаблицаМатериалыИУслуги.КлючСвязиЭтапы = ЗаказЭтапы.КлючСвязи)
	|ГДЕ
	|	ТаблицаПродукции.ЭтоПолуфабрикат
	|	И (ЗаказЭтапы.Этап.Владелец.ПечатьМаршрутнойКарты = ЗНАЧЕНИЕ(Перечисление.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам)
	|			ИЛИ НЕ ЕСТЬNULL(ЗаказЭтапы.Этап.МаршрутнаяКарта.ИспользоватьМатериалы, ИСТИНА))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаВыходныеИзделия.Упаковка",
			"ТаблицаВыходныеИзделия.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаВозвратныеОтходы.Упаковка",
			"ТаблицаВозвратныеОтходы.Номенклатура"));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаНаименованиеЕдиницыИзмерения3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"ТаблицаМатериалыИУслуги.Упаковка",
			"ТаблицаМатериалыИУслуги.Номенклатура"));
	
	Запрос.УстановитьПараметр("ТаблицаПродукции", ТаблицаПродукции);
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛистПроизводства_МаршрутныйЛист";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеПечати = МассивРезультатов[1].Выбрать();
	ТаблицаЭтапы = МассивРезультатов[2].Выгрузить();
	ТаблицаВыходныеИзделия = МассивРезультатов[3].Выгрузить();
	ТаблицаМатериалыИУслуги = МассивРезультатов[4].Выгрузить();
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим общие реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		
		// Используем структуру для заполнения параметров, т.к. макет может изменяться пользователем
		ДополнительныеПараметрыОбластьМакета = Новый Структура;
		
		Если ДанныеПечати.ЭтоПолуфабрикат Тогда
			ТекстЗаголовка = НСтр("ru='Маршрутная карта на полуфабрикат';uk='Маршрутна карта на напівфабрикат'",КодЯзыкаПечать);
			ЗаголовокИзделия = НСтр("ru='Полуфабрикат:';uk='Напівфабрикат:'",КодЯзыкаПечать);
		Иначе
			ТекстЗаголовка = НСтр("ru='Маршрутная карта на продукцию';uk='Маршрутна карта на продукцію'",КодЯзыкаПечать);
			ЗаголовокИзделия = НСтр("ru='Продукция:';uk='Продукція:'",КодЯзыкаПечать);
		КонецЕсли;
		
		ДополнительныеПараметрыОбластьМакета.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		ДополнительныеПараметрыОбластьМакета.Вставить("ЗаголовокИзделия", ЗаголовокИзделия);
		
		// РаспоряжениеПредставление
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер);
		РаспоряжениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='№%1 от %2 (код строки %3)';uk='№%1 від %2 (код рядка %3)'",КодЯзыкаПечать),
			НомерДокумента,
			Формат(ДанныеПечати.Дата, "ДЛФ=D"),
			Формат(ДанныеПечати.КодСтроки, "ЧГ="));
		
		ДополнительныеПараметрыОбластьМакета.Вставить("РаспоряжениеПредставление", РаспоряжениеПредставление);
		
		ИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ДанныеПечати.НоменклатураПредставление, 
			ДанныеПечати.ХарактеристикаПредставление);
		ДополнительныеПараметрыОбластьМакета.Вставить("ИзделиеПредставление", ИзделиеПредставление);
		
		СсылкаОбластьПечати = ИзделиеПредставление + "_"
			+ ДанныеПечати.СпецификацияПредставление + "_"
			+ РаспоряжениеПредставление;
		
		Если Минута(ДанныеПечати.Начало) = 0 
			И Час(ДанныеПечати.Начало) = 0 
			И Минута(ДанныеПечати.Окончание) = 59 
			И Час(ДанныеПечати.Окончание) = 23 Тогда
			
			ФорматПериода = "ДЛФ=D";
		Иначе
			ФорматПериода = "ДФ='dd.MM.yy ЧЧ:мм'"; 
		КонецЕсли;
		
		НачатьНеРаньше = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='(не раньше %1)';uk='(не раніше %1)'",КодЯзыкаПечать),
			Формат(ДанныеПечати.Начало, ФорматПериода));
		
		ДополнительныеПараметрыОбластьМакета.Вставить("НачатьНеРаньше", НачатьНеРаньше);
		
		СрокНеПозже = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='(не позже %1)';uk='(не пізніше %1)'",КодЯзыкаПечать),
			Формат(ДанныеПечати.Окончание, ФорматПериода));
		
		ДополнительныеПараметрыОбластьМакета.Вставить("СрокНеПозже", СрокНеПозже);
		
		ОбластьМакета.Параметры.Заполнить(ДополнительныеПараметрыОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтраницы = 1;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		Если ДанныеПечати.ПечатьМаршрутнойКарты = Перечисления.ВариантыПечатиМаршрутнойКартыНаПродукцию.ПоЭтапам Тогда
			
			#Область Печать_по_этапам
			// ВыходныеИзделия
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "ВыходныеИзделия");
			ПараметрыВывода.Вставить("КолонкаКодов", КолонкаКодов);
			ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", КодЯзыкаПечать);
			
			СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
			ВыборкаПоТабличнойЧасти = ТаблицаВыходныеИзделия.Скопировать(СтруктураПоиска);
			ВыборкаПоТабличнойЧасти.Сортировать("НомерСтроки");
			ВывестиТабличнуюЧасть(ПараметрыВывода, 
				СтруктураПоиска, 
				ВыборкаПоТабличнойЧасти, 
				Макет, 
				МассивВыводимыхОбластей, 
				НомерСтраницы,
				0, 
				Истина,
				ТабличныйДокумент);
			
			// Этапы
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "Этапы");
			ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", КодЯзыкаПечать);
			
			СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
			ВыборкаПоТабличнойЧасти = ТаблицаЭтапы.Скопировать(СтруктураПоиска);
			ВыборкаПоТабличнойЧасти.Сортировать("НомерЭтапа, НачатьНеРаньше");
			ВывестиТабличнуюЧасть(ПараметрыВывода, 
				СтруктураПоиска, 
				ВыборкаПоТабличнойЧасти, 
				Макет, 
				МассивВыводимыхОбластей, 
				НомерСтраницы,
				0, 
				Истина,
				ТабличныйДокумент);
			
			// МатериалыИУслуги
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "МатериалыИУслуги");
			ПараметрыВывода.Вставить("КолонкаКодов", КолонкаКодов);
			ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", КодЯзыкаПечать);
			
			СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
			ВыборкаПоТабличнойЧасти = ТаблицаМатериалыИУслуги.Скопировать(СтруктураПоиска);
			ВыборкаПоТабличнойЧасти.Сортировать("НомерЭтапа,НоменклатураПредставление");
			ВывестиТабличнуюЧасть(ПараметрыВывода, 
				СтруктураПоиска, 
				ВыборкаПоТабличнойЧасти, 
				Макет, 
				МассивВыводимыхОбластей, 
				НомерСтраницы,
				0, 
				Истина,
				ТабличныйДокумент);
			
			#КонецОбласти	
			
		Иначе
			
			#Область Печать_по_маршрутным_картам_этапов
			
			// Получим данные МК по этапам
			ДанныеПоЭтапам = Новый Массив;
			
			СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
			ВыборкаЭтапов = ТаблицаЭтапы.Скопировать(СтруктураПоиска);
			ВыборкаЭтапов.Сортировать("НомерЭтапа");
			ЭтапыКУдалению = Новый Массив;
			Для каждого СтрокаЭтап Из ВыборкаЭтапов Цикл
				Если СтрокаЭтап.МаршрутнаяКарта.Пустая() Тогда
					ЭтапыКУдалению.Добавить(СтрокаЭтап);
					Продолжить;
				КонецЕсли;
				
				СтруктураДанныхМаршрутнойКарты = Справочники.МаршрутныеКарты.ДанныеМаршрутнойКартыДляПечати(
					СтрокаЭтап.МаршрутнаяКарта, 
					СтрокаЭтап.Количество, 
					ДанныеПечати.Номенклатура, 
					ДанныеПечати.Характеристика);
				
				ДанныеПоЭтапам.Добавить(СтруктураДанныхМаршрутнойКарты);
			КонецЦикла; 
			
			Для каждого СтрокаЭтап Из ЭтапыКУдалению Цикл
				ВыборкаЭтапов.Удалить(СтрокаЭтап);
			КонецЦикла; 
			
			// ВыходныеИзделия
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "ВыходныеИзделия");
			ПараметрыВывода.Вставить("КолонкаКодов", КолонкаКодов);
			ПараметрыВывода.Вставить("НеВыводитьПустыеСтрокНоменклатуры");
			ПараметрыВывода.Вставить("ЗаголовокНомерЭтапа", НСтр("ru='Номер операции';uk='Номер операції'",КодЯзыкаПечать));
			ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", КодЯзыкаПечать);
			
			НомерСтроки = 0;
			ИндексДанныхЭтапа = 0;
			Для каждого СтрокаЭтап Из ВыборкаЭтапов Цикл
				
				ПараметрыВывода.Вставить("НомерЭтапа", СтрокаЭтап.НомерЭтапа);
				
				ЗавершитьВыводТЧ = (ИндексДанныхЭтапа = (ВыборкаЭтапов.Количество() - 1));
				
				Если СтрокаЭтап.ИспользоватьВыходныеИзделия Тогда
					
					СтруктураДанныхМаршрутнойКарты = ДанныеПоЭтапам[ИндексДанныхЭтапа];
					ВыборкаВыходныеИзделия = СтруктураДанныхМаршрутнойКарты.ВыходныеИзделия;
					
				Иначе
					
					СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
					СтруктураПоиска.Вставить("Этап", СтрокаЭтап.Этап);
					ВыборкаВыходныеИзделия = ТаблицаВыходныеИзделия.Скопировать(СтруктураПоиска);
					ВыборкаВыходныеИзделия.Сортировать("НомерСтроки");
					
				КонецЕсли;
				
				ВывестиТабличнуюЧасть(ПараметрыВывода, 
					СтруктураПоиска, 
					ВыборкаВыходныеИзделия, 
					Макет, 
					МассивВыводимыхОбластей, 
					НомерСтраницы,
					НомерСтроки,
					ЗавершитьВыводТЧ,
					ТабличныйДокумент);
				
				ИндексДанныхЭтапа = ИндексДанныхЭтапа + 1;
				
			КонецЦикла; 
			
			// Операции
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "Операции");
			ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", КодЯзыкаПечать);
			
			НомерСтроки = 0;
			ИндексДанныхЭтапа = 0;
			Для каждого СтрокаЭтап Из ВыборкаЭтапов Цикл
				
				Если СтрокаЭтап.ИспользоватьОперации Тогда
					
					ЗавершитьВыводТЧ = (ИндексДанныхЭтапа = (ВыборкаЭтапов.Количество() - 1));
					
					ПараметрыВывода.Вставить("НомерЭтапа", СтрокаЭтап.НомерЭтапа);
					
					СтруктураДанныхМаршрутнойКарты = ДанныеПоЭтапам[ИндексДанныхЭтапа];
					
					ВывестиТабличнуюЧасть(ПараметрыВывода, 
						СтруктураПоиска, 
						СтруктураДанныхМаршрутнойКарты.Операции, 
						Макет, 
						МассивВыводимыхОбластей, 
						НомерСтраницы,
						НомерСтроки,
						ЗавершитьВыводТЧ,
						ТабличныйДокумент);
					
				КонецЕсли;
				
				ИндексДанныхЭтапа = ИндексДанныхЭтапа + 1;
				
			КонецЦикла; 
			
			// МатериалыИУслуги
			ПараметрыВывода = Новый Структура;
			ПараметрыВывода.Вставить("ПолучитьПредставлениеНоменклатурыДляПечати");
			ПараметрыВывода.Вставить("ИмяТабличнойЧасти", "МатериалыИУслуги");
			ПараметрыВывода.Вставить("КолонкаКодов", КолонкаКодов);
			ПараметрыВывода.Вставить("НеВыводитьПустыеСтрокНоменклатуры");
			ПараметрыВывода.Вставить("ЗаголовокНомерЭтапа", НСтр("ru='Номер операции';uk='Номер операції'",КодЯзыкаПечать));
			ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", КодЯзыкаПечать);
			НомерСтроки = 0;
			ИндексДанныхЭтапа = 0;
			Для каждого СтрокаЭтап Из ВыборкаЭтапов Цикл
				
				ПараметрыВывода.Вставить("НомерЭтапа", СтрокаЭтап.НомерЭтапа);
				
				ЗавершитьВыводТЧ = (ИндексДанныхЭтапа = (ВыборкаЭтапов.Количество() - 1));
				
				Если СтрокаЭтап.ИспользоватьМатериалы Тогда
					
					СтруктураДанныхМаршрутнойКарты = ДанныеПоЭтапам[ИндексДанныхЭтапа];
					ВыборкаМатериалыИУслуги = СтруктураДанныхМаршрутнойКарты.Материалы;
					
				Иначе
					
					СтруктураПоиска = Новый Структура("Заказ,НомерСтроки,ЭтоПолуфабрикат");
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПечати);
					СтруктураПоиска.Вставить("Этап", СтрокаЭтап.Этап);
					ВыборкаМатериалыИУслуги = ТаблицаМатериалыИУслуги.Скопировать(СтруктураПоиска);
					ВыборкаМатериалыИУслуги.Сортировать("НомерЭтапа,НоменклатураПредставление");
					
				КонецЕсли;
				
				ВывестиТабличнуюЧасть(ПараметрыВывода, 
					СтруктураПоиска, 
					ВыборкаМатериалыИУслуги, 
					Макет, 
					МассивВыводимыхОбластей, 
					НомерСтраницы, 
					НомерСтроки,
					ЗавершитьВыводТЧ,
					ТабличныйДокумент);
				
				ИндексДанныхЭтапа = ИндексДанныхЭтапа + 1;
				
			КонецЦикла; 
			
			#КонецОбласти
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаОбластьПечати);
		
	КонецЦикла; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиТабличнуюЧасть(ПараметрыВывода, СтруктураПоиска, ВыборкаПоТабличнойЧасти, Макет, МассивВыводимыхОбластей, НомерСтраницы, НомерСтроки, ЗавершитьВыводТЧ, ТабличныйДокумент)
	
	Если ВыборкаПоТабличнойЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	ВыводитьКоды = ПараметрыВывода.Свойство("КолонкаКодов") И ЗначениеЗаполнено(ПараметрыВывода.КолонкаКодов);
	
	ИмяТабличнойЧасти = ПараметрыВывода.ИмяТабличнойЧасти;
	ОбластьИмяТаблицы = Макет.ПолучитьОбласть("ИмяТаб_" + ИмяТабличнойЧасти);
	ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаб_" + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("Подвал_" + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	ОбластьМакета = Макет.ПолучитьОбласть("Строка_" + ИмяТабличнойЧасти + ?(ВыводитьКоды, "_Код", ""));
	Если НомерСтроки = 0 Тогда
		ТабличныйДокумент.Вывести(ОбластьИмяТаблицы);
		ТабличныйДокумент.НачатьГруппуСтрок(ИмяТабличнойЧасти);
	КонецЕсли; 
	
	Если ВыводитьКоды Тогда
		ОбластьЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = ПараметрыВывода.КолонкаКодов;
	КонецЕсли; 
	
	Если ПараметрыВывода.Свойство("ЗаголовокНомерЭтапа") Тогда
		ЗаголовокНомерЭтапа = Новый Структура("ЗаголовокНомерЭтапа", ПараметрыВывода.ЗаголовокНомерЭтапа);
	Иначе
		ЗаголовокНомерЭтапа = Новый Структура("ЗаголовокНомерЭтапа", НСтр("ru='Номер этапа';uk='Номер етапу'",КодЯзыкаПечать));
	КонецЕсли; 
	ОбластьЗаголовокТаблицы.Параметры.Заполнить(ЗаголовокНомерЭтапа);
	
	Для каждого СтрокаТовары Из ВыборкаПоТабличнойЧасти Цикл
		
		Если ПараметрыВывода.Свойство("НеВыводитьПустыеСтрокНоменклатуры")
			И НЕ ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
		
		Если НомерСтроки = 1 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			
			Если НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Используем структуру для заполнения параметров, т.к. макет может изменяться пользователем
		ДополнительныеПараметрыОбластьМакета = Новый Структура;
		
		ДополнительныеПараметрыОбластьМакета.Вставить("НомерСтроки", НомерСтроки);
		
		Если ПараметрыВывода.Свойство("ПолучитьПредставлениеНоменклатурыДляПечати") Тогда
			НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.НоменклатураПредставление, 
				СтрокаТовары.ХарактеристикаПредставление);
			
			ДополнительныеПараметрыОбластьМакета.Вставить("НоменклатураПредставление", НоменклатураПредставление);
		КонецЕсли;
		
		Если ВыводитьКоды Тогда
			ДополнительныеПараметрыОбластьМакета.Вставить("Артикул", СтрокаТовары["Номенклатура" + ПараметрыВывода.КолонкаКодов]);
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Операции" Тогда
			НормативноеВремя = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
				СтрокаТовары.ВремяВыполнения,
				СтрокаТовары.ВремяВыполненияЕдИзм);
			
			НормативноеВремя = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
				НормативноеВремя, 
				Перечисления.ЕдиницыИзмеренияВремени.Час);
			
			ДополнительныеПараметрыОбластьМакета.Вставить("НормативноеВремя", НормативноеВремя);
		КонецЕсли; 
		
		Если ПараметрыВывода.Свойство("НомерЭтапа") Тогда
			НомерЭтапа = Формат(ПараметрыВывода.НомерЭтапа, "ЧГ=") + "." + Формат(СтрокаТовары.НомерОперации, "ЧГ=");
			ДополнительныеПараметрыОбластьМакета.Вставить("НомерЭтапа", НомерЭтапа);
		КонецЕсли; 
		
		ОбластьМакета.Параметры.Заполнить(ДополнительныеПараметрыОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЦикла;
	
	Если ЗавершитьВыводТЧ Тогда
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли; 
	
КонецПроцедуры

Функция ПечатнаяФормаГрафикаПроизводства(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода)
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаПроизводство.ПФ_MXL_ДиаграммаГрафикаПроизводства", КодЯзыкаПечать);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ГрафикПроизводства_Диаграмма";
	
	Заказ = МассивОбъектов[0];
	
	ДанныеПечати = ПолучитьИзВременногоХранилища(ПараметрыПечати.АдресДанныеПечати);
	
	// Вывод заголовка
	#Область ВыводЗаголовка
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоПродукция.Номенклатура.Представление КАК НоменклатураПредставление,
	|	ЗаказНаПроизводствоПродукция.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Номер КАК Номер,
	|	ЗаказНаПроизводствоПродукция.Ссылка.Дата КАК Дата,
	|	ЗаказНаПроизводствоПродукция.КодСтроки КАК КодСтроки
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|ГДЕ
	|	ЗаказНаПроизводствоПродукция.Ссылка = &Заказ
	|	И ЗаказНаПроизводствоПродукция.КлючСвязи = &КлючСвязи";
	
	Запрос.УстановитьПараметр("КлючСвязи", ДанныеПечати.ТекущиеДанные.КлючСвязи);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Результат = Запрос.Выполнить();
	ВыборкаДанных = Результат.Выбрать();
	ВыборкаДанных.Следующий();
	
	ДополнительныеПараметрыОбластьМакета = Новый Структура;
	
	ДополнительныеПараметрыОбластьМакета.Вставить("ДатаЗапуска", Формат(ДанныеПечати.ТекущиеДанные.ДатаЗапуска, "ДЛФ=D"));
	ДополнительныеПараметрыОбластьМакета.Вставить("ДатаВыпуска", Формат(ДанныеПечати.ТекущиеДанные.ДатаВыпуска, "ДЛФ=D"));
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДанных.Номер);
	РаспоряжениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='№%1 от %2 (код строки %3)';uk='№%1 від %2 (код рядка %3)'",КодЯзыкаПечать),
		НомерДокумента,
		Формат(ВыборкаДанных.Дата, "ДЛФ=D"),
		Формат(ВыборкаДанных.КодСтроки, "ЧГ="));
	
	ДополнительныеПараметрыОбластьМакета.Вставить("РаспоряжениеПредставление", РаспоряжениеПредставление);
	
	ИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
	ВыборкаДанных.НоменклатураПредставление, 
	ВыборкаДанных.ХарактеристикаПредставление);
	
	ДополнительныеПараметрыОбластьМакета.Вставить("ИзделиеПредставление", ИзделиеПредставление);
	
	ОбластьЗаголовок.Параметры.Заполнить(ДополнительныеПараметрыОбластьМакета);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	#КонецОбласти
	
	// Вывод диаграммы
	#Область ВыводДиаграммы
	ОбластьДиаграмма = Макет.ПолучитьОбласть("Диаграмма");
	
	Диаграмма = ОбластьДиаграмма.Рисунки.ДиаграммаГанта.Объект;
	
	ПланированиеПроизводстваКлиентСервер.УстановитьПараметрыДиаграммыПоУмолчанию(Диаграмма);
	Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	
	ПланированиеПроизводстваКлиентСервер.ВывестиДиаграммуГанта(
		Диаграмма,
		ДанныеПечати.ТекущиеДанные,
		ДанныеПечати.Ошибки,
		Неопределено,
		Истина);
	
	Для каждого Точка из Диаграмма.Точки Цикл
		
		Диаграмма.РазвернутьТочку(Точка, Истина);
		
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьДиаграмма);
	#КонецОбласти
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 1, ОбъектыПечати, Заказ);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДатаЗапускаЭтапов(КлючСвязиПродукция, КлючСвязиЭтапыГрафик, Этапы, ЭтапыГрафик)
	
	СтруктураПоиска = Новый Структура("КлючСвязиПродукция,КлючСвязи", КлючСвязиПродукция, КлючСвязиЭтапыГрафик);
	СписокСтрок = ЭтапыГрафик.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат '000101010000';
	КонецЕсли;
	
	СтрокаЭтапыГрафик = СписокСтрок[0];
	СтруктураПоиска = Новый Структура("КлючСвязиПродукция, КлючСвязи", 
	КлючСвязиПродукция, СтрокаЭтапыГрафик.КлючСвязиЭтапы);
	СписокСтрок = Этапы.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() = 0 Тогда
		Возврат '000101010000';
	КонецЕсли;
	
	// Найдем все этапы изделия и возьмем наименьшую дату
	ДатаЗапуска = '000101010000';
	СтрокаЭтап = СписокСтрок[0];
	СтруктураПоиска = Новый Структура("КлючСвязиПродукция,КлючСвязиПолуфабрикат", КлючСвязиПродукция, СтрокаЭтап.КлючСвязиПолуфабрикат);
	ЭтапыИзделия = Этапы.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаЭтап Из ЭтапыИзделия Цикл
		СтруктураПоиска = Новый Структура("КлючСвязиПродукция,КлючСвязиЭтапы", КлючСвязиПродукция, СтрокаЭтап.КлючСвязи);
		ГрафикЭтапа = ЭтапыГрафик.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаЭтапыГрафик Из ГрафикЭтапа Цикл
			ДатаЗапуска = ?(ДатаЗапуска <> '000101010000', Мин(СтрокаЭтапыГрафик.НачалоПредварительногоБуфера, ДатаЗапуска), СтрокаЭтапыГрафик.НачалоПредварительногоБуфера);
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат ДатаЗапуска;
	
КонецФункции

Процедура ГрафикВыпускаПродукцииИзмененияЗапрещеныУстановить(ГрафикВыпускаПродукции, Ключ, ИзмененияЗапрещены)
	
	ГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукции.ПолучитьЭлементы();
	
	Для каждого ГрафикВыпускаПродукцииЭлемент из ГрафикВыпускаПродукцииЭлементы Цикл
		
		Если ГрафикВыпускаПродукцииЭлемент.КлючСвязи = Ключ Тогда
			
			ГрафикВыпускаПродукцииЭлемент.ИзмененияЗапрещены = ИзмененияЗапрещены;
			
			ЭтапыГрафикВыпускаПродукцииЭлементы = ГрафикВыпускаПродукцииЭлемент.ПолучитьЭлементы();
			
			Для каждого ЭтапыГрафикВыпускаПродукцииЭлемент из ЭтапыГрафикВыпускаПродукцииЭлементы Цикл
				
				ЭтапыГрафикВыпускаПродукцииЭлемент.ИзмененияЗапрещены = ИзмененияЗапрещены;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#Область СлужебныеФункцииОбновления

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;

	ПолноеИмяДокумента = "Документ.ЗаказНаПроизводство";
	
	ЗначенияПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	
	Если ИмяРегистра = "ЗаказыНаПроизводствоСпецификации" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказовРаботами" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ДвижениеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ЗаказыМатериаловВПроизводство" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыМатериаловВПроизводство(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаМатериалыИУслуги";
		
	Иначе
		ТекстИсключения = НСтр("ru='В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';uk='У документі %ПолноеИмяДокумента% не реалізована адаптація тексту запиту формування рухів по регістру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроверкаБлокировкиДанных

// Возвращает массив с именами объетов метаданных, которые читаются при заполнении документа на основании
// заказа на производство. Результат функции может быть использован для контроля блокировки данных
// механизмами отложенного обновления. Подробнее см.
// ЗаказНаПроизводство.ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки.
// 
// Возвращаемое значение:
//  Массив - массив с именами таблиц. Например: "РегистрНакопления.ЭтапыПроизводства".
//
Функция ИменаТаблицДляКонтроляБлокировкиДокумента() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("РегистрНакопления.ЭтапыПроизводства");
	Результат.Добавить("РегистрСведений.ГрафикЭтаповПроизводства");
	
	Результат.Добавить("РегистрНакопления.ЗаказыНаПроизводствоСпецификации");
	Результат.Добавить("РегистрНакопления.ЗаказыНаПроизводствоТрудозатраты");
	
	Результат.Добавить("РегистрНакопления.ЗаказыМатериаловВПроизводство");
	Результат.Добавить("РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок");
	
	Результат.Добавить("РегистрНакопления.ПереработкаПоГрафикуПроизводства");
	
	Возврат Результат;
	
КонецФункции

// Проверяет, имеются ли отложенные обработчики обновления, которые еще не обработали данные,
// от которых зависит данный документ/которые зависят от данного документа.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаПроизводство, ДанныеФормыСтруктура - объект, который необходимо проверить.
//  Форма  - УправляемаяФорма - если объект не обработан, то у переданной формы
//           будет установлено свойство ТолькоПросмотр. Если форма не была
//           передана, то будет вызвано исключение.
//
Процедура ПроверитьСвязанныеОбъектыОбработаныОбработчикамиОбновления(Объект, Форма = Неопределено) Экспорт
	
	ЭтоНовыйОбъект = ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаПроизводство") И Объект.ЭтоНовый()
		ИЛИ ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") И НЕ ЗначениеЗаполнено(Объект.Ссылка);
		
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно")
		ИЛИ Форма <> Неопределено И Форма.ТолькоПросмотр
		ИЛИ ЭтоНовыйОбъект Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДляКонтроля = ИменаТаблицДляКонтроляБлокировкиДокумента();
	СписокСсылок       = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	
	ЗаблокированныеСсылки = Документы.ЗаказНаПроизводство.ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки(
		ТаблицыДляКонтроля, СписокСсылок);
		
	ОбработкаЗавершена = (ЗаблокированныеСсылки.Количество() = 0);
	
	Если НЕ ОбработкаЗавершена Тогда
		ТекстИсключения = НСтр("ru='Действия с объектом временно запрещены, так как не завершен переход на новую версию программы.';uk='Дії з об''єктом тимчасово заборонені, так як не завершено перехід на нову версію програми.'");
		Если Форма <> Неопределено Тогда
			Форма.ТолькоПросмотр = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
		Иначе
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заказы на производство, чтение и изменение которых заблокировано отложенными обработчиками обновления.
// Блокировка контролируется по заданному перечню таблиц.
//
// Параметры:
//  СписокИменТаблиц - Массив - имена объектов метаданных, по которым необходимо проверить наличие блокировок.
//		Например: "РегистрНакопления.ЭтапыПроизводства".
//  СписокСсылок - Массив - ссылки на заказы на производство, по которым будет выполнена проверка.
//		Если параметр не передан, проверка будет выполнена по всем заказам.
// 
// Возвращаемое значение:
//  Массив - массив, содержащий ссылки на заблокированные заказы на производство.
//
Функция ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки(СписокИменТаблиц, СписокСсылок = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для каждого ИмяТаблицы Из СписокИменТаблиц Цикл
		
		Если ИмяТаблицы = "Документ.ЗаказНаПроизводство" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыНаПроизводство();
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.БракВПроизводстве" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыБракВПроизводстве();
		ИначеЕсли ИмяТаблицы = "РегистрСведений.ГрафикЭтаповПроизводства" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыГрафикЭтаповПроизводства();
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.ЗаказыМатериаловВПроизводство" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыЗаказыМатериаловВПроизводство();
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыЗаказыМатериаловСУчетомКорректировок();
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.ЗаказыНаПроизводствоСпецификации" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыЗаказыНаПроизводствоСпецификации();
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.ЗаказыНаПроизводствоТрудозатраты" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыЗаказыНаПроизводствоТрудозатраты();
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.ПереработкаПоГрафикуПроизводства" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыПереработкаПоГрафикуПроизводства();
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.ЭтапыПроизводства" Тогда
			ТекстЗапросаТаблица = ТекстЗапросаЗаблокированныеЗаказыЭтапыПроизводства();
		Иначе
			ВызватьИсключение НСтр("ru='Некорректное значение параметра [1] метода
                |Документы.ЗаказНаПроизводство.ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки.'
                |;uk='Некоректне значення параметра [1] методу
                |Документи.ЗаказНаПроизводство.ВыбратьЗаблокированныеДляЧтенияИизмененияссылки.'");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС
			+ ?(ТекстЗапроса <> "", "ОБЪЕДИНИТЬ ВСЕ", "") + Символы.ПС
			+ ТекстЗапросаТаблица;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеОтбораУзла",
		"ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы");
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.СсылкаНаОбъект
	|ИЗ 
	|	(" + ТекстЗапроса + ") КАК ВложенныйЗапрос";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ОтборПоСсылкам", ЗначениеЗаполнено(СписокСсылок));
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаОбъект");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыНаПроизводство()
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Ссылка КАК СсылкаНаОбъект
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ТаблицаИзменений.Ссылка В (&СписокСсылок))
	|	И &УсловиеОтбораУзла";
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыБракВПроизводстве()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ТОГДА ТаблицаИзменений.Регистратор
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение
	|	КОНЕЦ КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрНакопления.БракВПроизводстве.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ВЫБОР
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					ТОГДА ТаблицаИзменений.Регистратор
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение
	|			КОНЕЦ В (&СписокСсылок))
	|	И &УсловиеОтбораУзла";
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыГрафикЭтаповПроизводства()
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Распоряжение КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.ГрафикЭтаповПроизводства.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам ИЛИ ТаблицаИзменений.Распоряжение В (&СписокСсылок))
	|	И &УсловиеОтбораУзла";
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыЗаказыМатериаловВПроизводство()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ТОГДА ТаблицаИзменений.Регистратор
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.КорректировкаЗаказаМатериаловВПроизводство
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.КорректировкаЗаказаМатериаловВПроизводство).Распоряжение
	|	КОНЕЦ КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ВЫБОР
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					ТОГДА ТаблицаИзменений.Регистратор
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.КорректировкаЗаказаМатериаловВПроизводство
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.КорректировкаЗаказаМатериаловВПроизводство).Распоряжение
	|			КОНЕЦ В (&СписокСсылок))
	|	И (ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ИЛИ ТаблицаИзменений.Регистратор ССЫЛКА Документ.КорректировкаЗаказаМатериаловВПроизводство)
	|	И &УсловиеОтбораУзла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПередачаМатериаловВПроизводствоТовары.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Изменения КАК ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаМатериаловВПроизводство.Товары КАК ПередачаМатериаловВПроизводствоТовары
	|		ПО ТаблицаИзменений.Регистратор = ПередачаМатериаловВПроизводствоТовары.Ссылка
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ПередачаМатериаловВПроизводствоТовары.Распоряжение В (&СписокСсылок))
	|	И ТаблицаИзменений.Регистратор ССЫЛКА Документ.ПередачаМатериаловВПроизводство
	|	И &УсловиеОтбораУзла";
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыЗаказыМатериаловСУчетомКорректировок()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ТОГДА ТаблицаИзменений.Регистратор
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.КорректировкаЗаказаМатериаловВПроизводство
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.КорректировкаЗаказаМатериаловВПроизводство).Распоряжение
	|	КОНЕЦ КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрНакопления.ЗаказыМатериаловСУчетомКорректировок.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ВЫБОР
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					ТОГДА ТаблицаИзменений.Регистратор
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.КорректировкаЗаказаМатериаловВПроизводство
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.КорректировкаЗаказаМатериаловВПроизводство).Распоряжение
	|			КОНЕЦ В (&СписокСсылок))
	|	И (ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ИЛИ ТаблицаИзменений.Регистратор ССЫЛКА Документ.КорректировкаЗаказаМатериаловВПроизводство)
	|	И &УсловиеОтбораУзла";
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыЗаказыНаПроизводствоСпецификации()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ТОГДА ТаблицаИзменений.Регистратор
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение
	|	КОНЕЦ КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводствоСпецификации.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ВЫБОР
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					ТОГДА ТаблицаИзменений.Регистратор
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение
	|			КОНЕЦ В (&СписокСсылок))
	|	И (ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ИЛИ ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства)
	|	И &УсловиеОтбораУзла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПереработчикуУслуги.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводствоСпецификации.Изменения КАК ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
	|		ПО ТаблицаИзменений.Регистратор = ЗаказПереработчикуУслуги.Ссылка
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ЗаказПереработчикуУслуги.Распоряжение В (&СписокСсылок))
	|	И ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказПереработчику
	|	И &УсловиеОтбораУзла";
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыЗаказыНаПроизводствоТрудозатраты()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ТОГДА ТаблицаИзменений.Регистратор
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение
	|	КОНЕЦ КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводствоТрудозатраты.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ВЫБОР
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					ТОГДА ТаблицаИзменений.Регистратор
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение
	|			КОНЕЦ В (&СписокСсылок))
	|	И &УсловиеОтбораУзла";
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыПереработкаПоГрафикуПроизводства()
	
	Возврат
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Регистратор КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ТаблицаИзменений.Регистратор В (&СписокСсылок))
	|	И ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|	И &УсловиеОтбораУзла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПереработчикуУслуги.Распоряжение
	|ИЗ
	|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Изменения КАК ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
	|		ПО ТаблицаИзменений.Регистратор = ЗаказПереработчикуУслуги.Ссылка
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ЗаказПереработчикуУслуги.Распоряжение В (&СписокСсылок))
	|	И ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказПереработчику
	|	И &УсловиеОтбораУзла";
	
КонецФункции

Функция ТекстЗапросаЗаблокированныеЗаказыЭтапыПроизводства()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ТОГДА ТаблицаИзменений.Регистратор
	|		КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение
	|	КОНЕЦ КАК СсылкаНаОбъект
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ВЫБОР
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					ТОГДА ТаблицаИзменений.Регистратор
	|				КОГДА ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					ТОГДА ВЫРАЗИТЬ(ТаблицаИзменений.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение
	|			КОНЕЦ В (&СписокСсылок))
	|	И (ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|			ИЛИ ТаблицаИзменений.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства)
	|	И &УсловиеОтбораУзла
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПереработчикуУслуги.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Изменения КАК ТаблицаИзменений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказПереработчикуУслуги
	|		ПО ТаблицаИзменений.Регистратор = ЗаказПереработчикуУслуги.Ссылка
	|ГДЕ
	|	(НЕ &ОтборПоСсылкам
	|			ИЛИ ЗаказПереработчикуУслуги.Распоряжение В (&СписокСсылок))
	|	И ТаблицаИзменений.Регистратор ССЫЛКА Документ.ЗаказПереработчику
	|	И &УсловиеОтбораУзла";
	
КонецФункции

#КонецОбласти

#Область Обработчики_2_1_3

#Область ОбновлениеОбъекта

Функция ОбновитьОбъект_2_1_3_МожноЧитатьИМенять(ПараметрыПроверки) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Истина;
	КонецЕсли;
	
	МетаданныеИОтбор = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(ПараметрыПроверки.Данные);
	
	Если МетаданныеИОтбор.ЭтоНовый Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(МетаданныеИОтбор.Отбор) = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗаказНаПроизводствоИзменения.Ссылка
			|ИЗ
			|	Документ.ЗаказНаПроизводство.Изменения КАК ЗаказНаПроизводствоИзменения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
			|		ПО ЗаказНаПроизводствоИзменения.Ссылка = МаршрутныйЛистПроизводства.Распоряжение
			|ГДЕ
			|	ЗаказНаПроизводствоИзменения.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И МаршрутныйЛистПроизводства.Ссылка = &Ссылка"
		
	ИначеЕсли ТипЗнч(МетаданныеИОтбор.Отбор) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗаказНаПроизводствоИзменения.Ссылка
			|ИЗ
			|	Документ.ЗаказНаПроизводство.Изменения КАК ЗаказНаПроизводствоИзменения
			|ГДЕ
			|	ЗаказНаПроизводствоИзменения.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И ЗаказНаПроизводствоИзменения.Ссылка В
			|			(ВЫБРАТЬ
			|				МаршрутныйЛистПроизводства.Распоряжение
			|			ИЗ
			|				Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
			|					ПО
			|						ВыпускПродукцииТовары.Распоряжение = МаршрутныйЛистПроизводства.Ссылка
			|			ГДЕ
			|				ВыпускПродукцииТовары.Ссылка = &Ссылка)";
			
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", МетаданныеИОтбор.Отбор);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

Процедура ОбновитьОбъект_2_1_3_ОтметитьКОбработке(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказНаПроизводство.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ЗаказНаПроизводство.Этапы КАК Т
		|			ГДЕ
		|				Т.Ссылка = ЗаказНаПроизводство.Ссылка
		|				И Т.Этап.Владелец <> Т.Спецификация
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК Т
		|			ГДЕ
		|				Т.Ссылка = ЗаказНаПроизводство.Ссылка
		|				И Т.Этап.Владелец <> Т.Спецификация)");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбновитьОбъект_2_1_3(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ЗаказНаПроизводство";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(
		Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
		
	Параметры.ОбработкаЗавершена = НЕ Результат.ЕстьДанныеДляОбработки;
	Если НЕ Результат.ЕстьДанныеДляОбработки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОбъектыДляОбработки.Ссылка КАК Документ.ЗаказНаПроизводство) КАК Ссылка
	|ПОМЕСТИТЬ ВТСписокДокументов
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ОбъектыДляОбработки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДляОбработки.Ссылка              КАК Ссылка,
	|	ДляОбработки.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТСписокДокументов КАК ДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказНаПроизводствоЭтапы.Этап          КАК Этап,
	|	ЗаказНаПроизводствоЭтапы.Этап.Владелец КАК Спецификация
	|ИЗ
	|	ВТСписокДокументов КАК ОбъектыДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|		ПО ОбъектыДляОбработки.Ссылка = ЗаказНаПроизводствоЭтапы.Ссылка
	|ГДЕ
	|	ЗаказНаПроизводствоЭтапы.Этап <> ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОбъектыДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КоличествоПакетов = МассивРезультатов.Количество();
	
	Выборка                = МассивРезультатов[КоличествоПакетов-2].Выбрать();
	ТаблицаРеквизитыЭтапов = МассивРезультатов[КоличествоПакетов-1].Выгрузить();
	
	ТаблицаРеквизитыЭтапов.Индексы.Добавить("Этап");
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			Объект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если Объект = Неопределено Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбновитьОбъект_2_1_3_ЗаполнитьСпецификациюВЭтапахПроизводства(Объект, ТаблицаРеквизитыЭтапов);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru='Не удалось обработать документ: %Регистратор% по причине: %Причина%';uk='Не вдалося обробити документ: %Регистратор% по причині: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Метаданные.Документы.ЗаказНаПроизводство,
									Выборка.Ссылка,
									ТекстСообщения);
									
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДвижений

#КонецОбласти

#Область СлужебныеПроцедуры

Процедура ОбновитьОбъект_2_1_3_ЗаполнитьСпецификациюВЭтапахПроизводства(ДокументОбъект, РеквизитыЭтапов)
	
	ОтборПустаяСпецификация = Новый Структура("Спецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	
	Для Каждого Строка Из ДокументОбъект.Этапы.НайтиСтроки(ОтборПустаяСпецификация) Цикл
		Для Каждого НайденнаяСтрока Из РеквизитыЭтапов.НайтиСтроки(Новый Структура("Этап", Строка.Этап)) Цикл
			Строка.Спецификация = НайденнаяСтрока.Спецификация;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка Из ДокументОбъект.ЭтапыГрафик.НайтиСтроки(ОтборПустаяСпецификация) Цикл
		Для Каждого НайденнаяСтрока Из РеквизитыЭтапов.НайтиСтроки(Новый Структура("Этап", Строка.Этап)) Цикл
			Строка.Спецификация = НайденнаяСтрока.Спецификация;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли