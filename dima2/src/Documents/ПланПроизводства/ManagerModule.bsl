#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт


	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);


КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПланПроизводства) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПланПроизводства.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ПланПроизводства);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПланированиеПроизводства";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСбалансированностьПланов(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента,ФормаСписка";
	КонецЕсли;
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	//++ НЕ УТКА
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПотребностьВВидахРЦ(КомандыОтчетов);
	//-- НЕ УТКА

	//++ НЕ УТ
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПотребностьВМатериалах(КомандыОтчетов);
	//-- НЕ УТ

	//++ НЕ УТ
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПотребностьВПолуфабрикатах(КомандыОтчетов);
	//-- НЕ УТ

	//++ НЕ УТ
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуПотребностьВТрудовыхРесурсах(КомандыОтчетов);
	//-- НЕ УТ

КонецПроцедуры


// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПланов[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ПланПроизводства КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Формирует структуру дополнительных реквизитов по документу
//
// Параметры:
// Параметры     - Структура - Значения дополнительных реквизитов
// ДопПараметры  - Структура - Состав операндов по указанному виду плана и сценарию
//
Процедура ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры) Экспорт
	
	ВидПлана				= Параметры.ВидПланаРеквизиты;
	Сценарий 				= Параметры.СценарийРеквизиты;
	ПутьКРеквизиту			= Параметры.ПутьКРеквизиту;
	
	ЭтоПланПроизводства		= ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланПроизводства;
	ЭтоПланЗакупок 			= ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланЗакупок;
	СоздаватьРеквизитСОтбором = ВидПлана.ЗаполнятьПодразделение;
	ИспользоватьПланированиеПроизводства 	= ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства") и Сценарий.ИспользоватьВПланированииПроизводства;
	ИспользоватьДляПланированияМатериалов	= ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства") и Сценарий.ИспользоватьДляПланированияМатериалов;
	
#Область ПланыПроизводства
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПроизводства");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План производства (продукция)';uk='План виробництва (продукція)'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланированиеПроизводства);
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланированиеПроизводства);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План производства (продукция)';uk='План виробництва (продукція)'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПроизводства");
	
	ДопПараметры.Вставить("ПланыПроизводства", ДопПараметр);
	
#КонецОбласти
	
#Область ПланыПроизводстваСОтбором
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПроизводстваСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План производства (продукция)*';uk='План виробництва (продукція)*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланированиеПроизводства и ЭтоПланПроизводства и СоздаватьРеквизитСОтбором);
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланированиеПроизводства и ЭтоПланПроизводства и СоздаватьРеквизитСОтбором);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План производства (продукция)*';uk='План виробництва (продукція)*'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПроизводства");
	
	ДопПараметры.Вставить("ПланыПроизводстваСОтбором", ДопПараметр);
	
#КонецОбласти
	
#Область ПланыПроизводстваМатериалы
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПроизводстваМатериалы");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План производства (материалы)';uk='План виробництва (матеріали)'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьДляПланированияМатериалов);
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьДляПланированияМатериалов);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План производства (материалы)';uk='План виробництва (матеріали)'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПроизводства");
	
	ДопПараметры.Вставить("ПланыПроизводстваМатериалы", ДопПараметр);
	
#КонецОбласти
	
#Область ПланыПроизводстваМатериалыСОтбором
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПроизводстваМатериалыСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План производства (материалы)*';uk='План виробництва (матеріали)*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьДляПланированияМатериалов и ЭтоПланПроизводства и СоздаватьРеквизитСОтбором);
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьДляПланированияМатериалов и ЭтоПланПроизводства и СоздаватьРеквизитСОтбором);
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План производства (материалы)*';uk='План виробництва (матеріали)*'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПроизводства");
	
	ДопПараметры.Вставить("ПланыПроизводстваМатериалыСОтбором", ДопПараметр);
#КонецОбласти
	
#Область ФактыПроизводства
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ФактыПроизводства");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='Факт производства';uk='Факт виробництва'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланированиеПроизводства и ЭтоПланПроизводства);
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", ИспользоватьПланированиеПроизводства и ЭтоПланПроизводства);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru='Факт производства';uk='Факт виробництва'"));
	
	ДопПараметры.Вставить("ФактыПроизводства", ДопПараметр);
#КонецОбласти
	
#Область ФактыПроизводстваМатериалы
	//Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 			"ФактыПроизводстваМатериалы");
	ДопПараметр.Вставить("Тип", 			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 			ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 		НСтр("ru='Факт производства (материалы)';uk='Факт виробництва (матеріали)'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", НЕ ИспользоватьПланированиеПроизводства и ЭтоПланЗакупок);
	
	//Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", НЕ ИспользоватьПланированиеПроизводства и ЭтоПланЗакупок);
	ДопПараметр.Вставить("ЗаголовокОперанда", НСтр("ru='Факт производства (материалы)';uk='Факт виробництва (матеріали)'"));
	
	ДопПараметры.Вставить("ФактыПроизводстваМатериалы", ДопПараметр);
#КонецОбласти

КонецПроцедуры

// Возвращает макеты операндов для данного плана
//
// Параметры:
//  Макеты  - Соотвествие - Общий список макетов, в который добавляютя макеты этого документа
//
// Возвращаемое значение:
//   Соотвествие   - Макеты для операндов
//
Функция МакетыОперандовПлана(Макеты = Неопределено) Экспорт 

	Если Макеты = Неопределено Тогда
		Макеты = Новый Соответствие;
	КонецЕсли; 
	
	Макеты.Вставить("ПланыПроизводства",                  ПолучитьМакет("СКД_ПланыПроизводства"));
	Макеты.Вставить("ПланыПроизводстваСОтбором",          ПолучитьМакет("СКД_ПланыПроизводстваСОтбором"));
	Макеты.Вставить("ПланыПроизводстваМатериалы",         ПолучитьМакет("СКД_ПланыПроизводстваМатериалы"));
	Макеты.Вставить("ПланыПроизводстваМатериалыСОтбором", ПолучитьМакет("СКД_ПланыПроизводстваМатериалыСОтбором"));
	Макеты.Вставить("ФактыПроизводства",                  ПолучитьМакет("СКД_ФактыПроизводства"));
	Макеты.Вставить("ФактыПроизводстваМатериалы",         ПолучитьМакет("СКД_ФактыПроизводстваМатериалы"));
	Макеты.Вставить("РесурсныеСпецификации",              ПолучитьМакет("СКД_РесурсныеСпецификации"));
	Макеты.Вставить("ПроизводимаяПродукция",              ПолучитьМакет("СКД_ПроизводимаяПродукция"));
	
	Возврат Макеты;

КонецФункции

// Процедура заполняет табличную часть документа по формулам или по правилу заполнения по источникам данных планирования,
// предназначена для заполнения документа в фоне
//
// Параметры:
//  Параметры  - Структура - Настройки для заполнения
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//
Процедура ЗаполнитьДокумент(Знач Параметры, Знач АдресХранилища) Экспорт 
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Параметры.КлючОбщихНастроек, 
		"НастройкиФоновогоЗадания_"+Параметры.УникальныйИдентификатор);
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("ЗаполняемаяТЧ", Настройки.ЗаполняемаяТЧ);
	
	Если Параметры.Свойство("ЗаполнятьПоФормуле") Тогда
		
		ЗаполнитьДокументПоФормуле(Параметры, АдресХранилища);
	
	ИначеЕсли Параметры.Свойство("ЗаполнятьПоПравилу") Тогда
		
		Параметры.Вставить("ПравилоЗаполнения", Настройки.ПравилоЗаполнения);
		Параметры.Вставить("ПользовательскиеНастройки", Настройки.ПользовательскиеНастройки);
		
		ЗаполнитьПоПравилуЗаполнения(Параметры, АдресХранилища);
	
	КонецЕсли; 
	
	// Планирование полуфабрикатов после заполнения состава документа
	Если Параметры.Свойство("ПланироватьПолуфабрикаты") Тогда
	
		ЗаполнитьДокументПолуфабрикатами(Параметры, АдресХранилища);
	
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(Параметры.КлючОбщихНастроек, 
		"НастройкиФоновогоЗадания_"+Параметры.УникальныйИдентификатор, Пользователи.ТекущийПользователь());
	
КонецПроцедуры

// Процедура заполняет табличную часть документа по формулам
// Параметры:
//  Параметры  - Структура - Настройки для заполнения
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//
Процедура ЗаполнитьДокументПоФормуле(Знач Параметры, Знач АдресХранилища) Экспорт 
	
	Если НЕ Параметры.Свойство("ЗаполнятьПоФормуле") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонкиПериода = "ДатаВыпуска";
	
	Периоды = Планирование.ПолучитьТаблицуПериодов();
	Планирование.ЗаполнитьТаблицуПериодов(Периоды, Параметры.Периодичность, Параметры.НачалоПериодаСмещения, Параметры.КонецПериодаСмещения);
	
	НайденныеСтрокиПериодов = Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
	ВсегоПериодов = НайденныеСтрокиПериодов.Количество();
	Если Параметры.КроссТаблица И ВсегоПериодов = 0 Тогда 
		
		ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, АдресХранилища);
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Периоды", Периоды); 
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	ЗаполняемаяТЧ.Колонки[ИмяКолонкиПериода].Имя = "ПериодСостава";
	
	Результат = Планирование.ЗаполнитьПоФормуле(Параметры);
	
	Если Результат.Колонки.Найти("ПериодСостава") = Неопределено Тогда
		Результат.Колонки.Добавить("ПериодСостава", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата))
	КонецЕсли; 
	
	Результат.Колонки["ПериодСостава"].Имя = ИмяКолонкиПериода;
	Параметры.Вставить("ЗаполняемаяТЧ", Результат);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Процедура заполняет табличную часть документа по правилу заполнения из различных источников
//
// Параметры:
//  Параметры  - Структура - Настройки для заполнения
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//  Настройки  - Структура - Дополнительные настройки для заполнения, Правило заполнения, пользовательские настройки, ТЧ заполнения
//
Процедура ЗаполнитьПоПравилуЗаполнения(Знач Параметры, Знач АдресХранилища) Экспорт 
	
	Если НЕ Параметры.Свойство("ЗаполнятьПоПравилу") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонкиПериода = "ДатаВыпуска";
	
	ТаблицаПериоды = Планирование.ПолучитьТаблицуПериодов();
	Планирование.ЗаполнитьТаблицуПериодов(ТаблицаПериоды, Параметры.Периодичность, Параметры.НачалоПериода, Параметры.ОкончаниеПериода);
	
	НайденныеСтрокиПериодов = ТаблицаПериоды.НайтиСтроки(Новый Структура("Активная", Истина));
	ВсегоПериодов = НайденныеСтрокиПериодов.Количество();
	Если Параметры.КроссТаблица И ВсегоПериодов = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыДанных", Планирование.ПолучитьПараметрыПлана(Параметры));
	
	Если ЗначениеЗаполнено(Параметры.ИзменитьРезультатНа) Тогда
		
		ДополнительныеПараметры.ПараметрыДанных.Вставить("Коэффициент", (100 + Параметры.ИзменитьРезультатНа) / 100);
		
	КонецЕсли;
	
	ПравилоЗаполнения = Параметры.ПравилоЗаполнения;
	ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
	
	
	Результат = Планирование.ВыбратьДанныеПоПравилам(
		Перечисления.ТипыПланов.ПланПроизводства, 
		ПравилоЗаполнения, 
		ПользовательскиеНастройки, 
		ДополнительныеПараметры);
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	Если Результат <> Неопределено Тогда
		
		РазрядностьОкругления = Параметры.ТочностьОкругления + 3;
		
		Для каждого СтрокаРезультата из Результат Цикл
			
			Если СтрокаРезультата.Количество = null Тогда
				Продолжить;
			КонецЕсли;
			
			Если Цел(СтрокаРезультата.Количество * Pow(10, РазрядностьОкругления)) = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Количество = Окр(СтрокаРезультата.Количество, РазрядностьОкругления);
			
			Если Параметры.КроссТаблица Тогда
				
				Если ЗначениеЗаполнено(СтрокаРезультата.Период) 
					И СтрокаРезультата.Период >= Параметры.НачалоПериода 
					И СтрокаРезультата.Период <= Параметры.ОкончаниеПериода Тогда
					
					// Распределять по периодам не требуется
					НоваяСтрока = ЗаполняемаяТЧ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
					
					ПараметрыСпецификации = Новый Структура();
					ПараметрыСпецификации.Вставить("Номенклатура",	НоваяСтрока.Номенклатура);
					ПараметрыСпецификации.Вставить("Характеристика",НоваяСтрока.Характеристика);
					ПараметрыСпецификации.Вставить("Спецификация",	НоваяСтрока.Спецификация);
					ПараметрыСпецификации.Вставить("Подразделение",	Параметры.Подразделение);
					ПараметрыСпецификации.Вставить("НачалоПериода",	Параметры.НачалоПериода);
					
					Документы.ПланПроизводства.ЗаполнитьСпецификациюДляСтрокиПродукции(ПараметрыСпецификации);
					НоваяСтрока.Спецификация = ПараметрыСпецификации.Спецификация;
					
					НоваяСтрока.Количество = Количество;
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					НоваяСтрока[ИмяКолонкиПериода] = СтрокаРезультата.Период;
					
					Продолжить;
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаРезультата.Период) Тогда
					// Исключаем строку т.к. не попадает в заданный период плана
					Продолжить;
					
				КонецЕсли; 
				
				Если СтрокаРезультата.Количество < 0 Тогда
					ЗнакКоличества = -1;
				Иначе
					ЗнакКоличества = 1;
				КонецЕсли;
				
				ОсталосьРаспределить 	= ЗнакКоличества * Окр(Цел(СтрокаРезультата.Количество * Pow(10, РазрядностьОкругления)) / Pow(10, РазрядностьОкругления), РазрядностьОкругления);
				ОсталосьПериодов		= ВсегоПериодов;
				
				Пока ОсталосьРаспределить > 0 И ОсталосьПериодов > 0 Цикл
					
					ДатаПерода = НайденныеСтрокиПериодов[НайденныеСтрокиПериодов.ВГраница() + 1 - ОсталосьПериодов].ДатаНачала;
					
					//Двигаемся к последним датам выпуска пока распределяемое количество в конкретной дате не станет ненулевым.
					Пока ОсталосьРаспределить > 0 И ОсталосьПериодов > 0 Цикл
						
						РаспределитьВДате = Окр(Цел(ОсталосьРаспределить * Pow(10, РазрядностьОкругления) / ОсталосьПериодов) / Pow(10, РазрядностьОкругления), РазрядностьОкругления);
						
						Если РаспределитьВДате > 0 Тогда
							
							Прервать;
							
						Иначе
							
							ОсталосьПериодов = ОсталосьПериодов - 1;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если ОсталосьПериодов = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
					//РаспределитьВДате не равно нулю, значит помещаем в таблицу товаров
					НоваяСтрока = ЗаполняемаяТЧ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
					
					ПараметрыСпецификации = Новый Структура();
					ПараметрыСпецификации.Вставить("Номенклатура",	НоваяСтрока.Номенклатура);
					ПараметрыСпецификации.Вставить("Характеристика",НоваяСтрока.Характеристика);
					ПараметрыСпецификации.Вставить("Спецификация",	НоваяСтрока.Спецификация);
					ПараметрыСпецификации.Вставить("Подразделение",	Параметры.Подразделение);
					ПараметрыСпецификации.Вставить("НачалоПериода",	Параметры.НачалоПериода);
					
					Документы.ПланПроизводства.ЗаполнитьСпецификациюДляСтрокиПродукции(ПараметрыСпецификации);
					НоваяСтрока.Спецификация = ПараметрыСпецификации.Спецификация;
					
					НоваяСтрока.Количество = ЗнакКоличества * РаспределитьВДате;
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					НоваяСтрока[ИмяКолонкиПериода] = ДатаПерода;
					
					ОсталосьПериодов = ОсталосьПериодов - 1;
					
					ОсталосьРаспределить = ОсталосьРаспределить - РаспределитьВДате;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = ЗаполняемаяТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
				
				ПараметрыСпецификации = Новый Структура();
				ПараметрыСпецификации.Вставить("Номенклатура",	НоваяСтрока.Номенклатура);
				ПараметрыСпецификации.Вставить("Характеристика",НоваяСтрока.Характеристика);
				ПараметрыСпецификации.Вставить("Спецификация",	НоваяСтрока.Спецификация);
				ПараметрыСпецификации.Вставить("Подразделение",	Параметры.Подразделение);
				ПараметрыСпецификации.Вставить("НачалоПериода",	Параметры.НачалоПериода);
				
				Документы.ПланПроизводства.ЗаполнитьСпецификациюДляСтрокиПродукции(ПараметрыСпецификации);
				НоваяСтрока.Спецификация = ПараметрыСпецификации.Спецификация;
				
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				НоваяСтрока[ИмяКолонкиПериода] = СтрокаРезультата.Период;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры.Вставить("ЗаполняемаяТЧ", ЗаполняемаяТЧ);
	ПоместитьВоВременноеХранилище(ЗаполняемаяТЧ, АдресХранилища);
	
КонецПроцедуры

// Процедура дополняет табличную часть документа полуфабрикатами по продукции
// Параметры:
//  Параметры  - Структура - Настройки для заполнения
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//
Процедура ЗаполнитьДокументПолуфабрикатами(Знач Параметры, Знач АдресХранилища) Экспорт 
	
	Если НЕ Параметры.Свойство("ПланироватьПолуфабрикаты") Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	Если ЗаполняемаяТЧ.Колонки.Найти("Полуфабрикат") = Неопределено Тогда
		ЗаполняемаяТЧ.Колонки.Добавить("Полуфабрикат", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	
	Если ЗаполняемаяТЧ.Колонки.Найти("Характеристика") = Неопределено Тогда
		ЗаполняемаяТЧ.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ЗаполняемаяТЧ Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Спецификация) Тогда
			
			ПараметрыСпецификации = Новый Структура();
			ПараметрыСпецификации.Вставить("Номенклатура",	СтрокаТЧ.Номенклатура);
			ПараметрыСпецификации.Вставить("Характеристика",СтрокаТЧ.Характеристика);
			ПараметрыСпецификации.Вставить("Спецификация",	СтрокаТЧ.Спецификация);
			ПараметрыСпецификации.Вставить("Подразделение",	Параметры.Подразделение);
			Если Параметры.Свойство("НачалоПериодаСмещения") Тогда
				ПараметрыСпецификации.Вставить("НачалоПериода",	Параметры.НачалоПериодаСмещения);
			ИначеЕсли Параметры.Свойство("НачалоПериода") Тогда
				ПараметрыСпецификации.Вставить("НачалоПериода",	Параметры.НачалоПериода);
			КонецЕсли; 
			
			ЗаполнитьСпецификациюДляСтрокиПродукции(ПараметрыСпецификации);
			СтрокаТЧ.Спецификация = ПараметрыСпецификации.Спецификация;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("МатериалыИУслуги");
	
	КэшированныеСпецификации = Неопределено;
	ПараметрыГрафика = Неопределено;
	
	Для каждого СтрокаТЧ Из ЗаполняемаяТЧ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Спецификация) ИЛИ СтрокаТЧ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗнакКоличества = 1;
		ДанныеПоНоменклатуре = Новый Структура("Номенклатура, Характеристика, Спецификация, Количество, Подразделение, НачалоПроизводства, ДнейДоОкончания");
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, СтрокаТЧ);
		Если СтрокаТЧ.Количество < 0 Тогда
			ДанныеПоНоменклатуре.Количество = -ДанныеПоНоменклатуре.Количество;
			ЗнакКоличества = -1;
		КонецЕсли;
		
		ДанныеПоНоменклатуре.Подразделение = Параметры.Подразделение;
		ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер", Параметры.Подразделение);
		ДанныеПоНоменклатуре.НачалоПроизводства = Дата("00010101");
		ДанныеПоНоменклатуре.ДнейДоОкончания = 0;
		
		ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификацииСПолуфабрикатами(ДанныеПоНоменклатуре, Истина,,ПереченьДанных, КэшированныеСпецификации);
		
		// Данные по материалам
		Для каждого ЭлементМатериал Из ДанныеСпецификации.МатериалыИУслуги Цикл
			
			Если НЕ ЭлементМатериал.Запланировать Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ЗаполняемаяТЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМатериал,	"Номенклатура,Характеристика, Количество");
			НоваяСтрока.Полуфабрикат = ЭлементМатериал.Запланировать;
			НоваяСтрока.Количество = ЗнакКоличества * НоваяСтрока.Количество;
			НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			
			НоваяСтрока.ДатаВыпуска = ПолучитьДатуПоГрафику(СтрокаТЧ.ДатаВыпуска, -ЭлементМатериал.ДнейДоОкончания, ПараметрыГрафика);
			
			ПараметрыСпецификации = Новый Структура();
			ПараметрыСпецификации.Вставить("Номенклатура",	НоваяСтрока.Номенклатура);
			ПараметрыСпецификации.Вставить("Характеристика",НоваяСтрока.Характеристика);
			ПараметрыСпецификации.Вставить("Спецификация",	НоваяСтрока.Спецификация);
			ПараметрыСпецификации.Вставить("Подразделение",	Параметры.Подразделение);
			Если Параметры.Свойство("НачалоПериодаСмещения") Тогда
				ПараметрыСпецификации.Вставить("НачалоПериода",	Мин(Параметры.НачалоПериодаСмещения, НоваяСтрока.ДатаВыпуска));
			ИначеЕсли Параметры.Свойство("НачалоПериода") Тогда
				ПараметрыСпецификации.Вставить("НачалоПериода",	Мин(Параметры.НачалоПериода, НоваяСтрока.ДатаВыпуска));
			КонецЕсли;
			
			ЗаполнитьСпецификациюДляСтрокиПродукции(ПараметрыСпецификации);
			НоваяСтрока.Спецификация = ПараметрыСпецификации.Спецификация;
			
		КонецЦикла;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ЗаполняемаяТЧ, АдресХранилища);
	
КонецПроцедуры

// Возвращает доступные типы для заполнения аналитики бюджетирования.
//
// Параметры:
//  ДокументСсылка.ПланПроизводства - Ссылка на документ плана производства
//
// Возвращаемое значение:
// 	  ДоступныеТипыАналитик - Соотвествие - Ключ: Тип, Значение: Источник заполнения
//
Функция ДоступныеТипыАналитикБюджетирования(ДокументСсылка, ИмяТаблицы = "") Экспорт
	
	ДоступныеТипыАналитик = Новый Соответствие;
	
	Если ДокументСсылка <> Неопределено Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеРеквизиты.НомерСтроки,
		|	ДополнительныеРеквизиты.Значение,
		|	ТИПЗНАЧЕНИЯ(ДополнительныеРеквизиты.Значение) КАК Тип
		|ИЗ
		|	Документ.ПланПроизводства.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Значение) Тогда
				Продолжить;
			КонецЕсли;
			ДоступныеТипыАналитик.Вставить(ВыборкаДетальныеЗаписи.Тип, "&ДополнительныйРеквизит"+Формат(ВыборкаДетальныеЗаписи.НомерСтроки, "ЧГ=0"));
		КонецЦикла;
	КонецЕсли;
	
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.СтруктураПредприятия"), "Продукция.Ссылка.Подразделение");
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.Номенклатура"), "Продукция.Номенклатура");
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.ВидыНоменклатуры"), "Продукция.Номенклатура.ВидНоменклатуры");
	ДоступныеТипыАналитик.Вставить(Тип("ПеречислениеСсылка.ТипыНоменклатуры"), "Продукция.Номенклатура.ТипНоменклатуры");
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.Марки"), "Продукция.Номенклатура.Марка");
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.Производители"), "Продукция.Номенклатура.Производитель");
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.СезонныеГруппы"), "Продукция.Номенклатура.СезоннаяГруппа");
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.ЦеновыеГруппы"), "Продукция.Номенклатура.ЦеноваяГруппа");
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.ТоварныеКатегории"), "Продукция.Номенклатура.ТоварнаяКатегория");
	ДоступныеТипыАналитик.Вставить(Тип("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры"), "Товары.Номенклатура.ГруппаАналитическогоУчета");
	
	Возврат ДоступныеТипыАналитик;
	
КонецФункции

// Процедура пересчитывает потребность материалов
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка.ПланПроизводства - Ссылка на план производства
// 
Процедура ПересчитатьПотребностиПланаПроизводства(ДокументСсылка) Экспорт
	
	Разделитель = 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Разделитель", Разделитель);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПланов.Утвержден);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.ДатаВыпуска = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ТаблицаДокумента.Ссылка.НачалоПериода
		|		ИНАЧЕ ТаблицаДокумента.ДатаВыпуска
		|	КОНЕЦ КАК ДатаВыпуска,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Характеристика КАК Характеристика,
		|	ТаблицаДокумента.Ссылка.Подразделение КАК Подразделение,
		|	ТаблицаДокумента.Спецификация КАК Спецификация,
		|	ТаблицаДокумента.Ссылка.Сценарий КАК Сценарий,
		|	ТаблицаДокумента.Ссылка КАК ПланПроизводства,
		|	&Разделитель,
		|	ТаблицаДокумента.Количество КАК Количество
		|ИЗ
		|	Документ.ПланПроизводства.Продукция КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И ТаблицаДокумента.Ссылка.Проведен
		|	И ТаблицаДокумента.Ссылка.Статус = &Статус
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
		
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Результат.Выгрузить();

	НаборЗаписей = РегистрыСведений.ОчередьРасчетаПланаПроизводства.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПланПроизводства.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Разделитель.Установить(Разделитель);
	НаборЗаписей.Загрузить(Таблица);
	
	Попытка
		НачатьТранзакцию();
		РегистрыНакопления.ПланыПроизводства.ОчиститьДвиженияПоМатериалу(ДокументСсылка);
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru='Не удалось выполнить проведение документа: %Ссылка% по причине: %Причина%';uk='Не вдалося виконати проведення документа: %Ссылка% по причині: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ДокументСсылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПланПроизводства, ДокументСсылка, ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Планирование.ЗапускВыполненияФоновогоПроведения(ДокументСсылка);
	
КонецПроцедуры

// Функция заполняет спецификацию для строки продукции
//
// Параметры:
//  Параметры	 - Структура	 - структура полей строки ТЧ продукции
// Возвращаемое значение:
//  Структура - структура полей строки ТЧ продукции с заполненной спецификацией
//
Функция ЗаполнитьСпецификациюДляСтрокиПродукции(Параметры) Экспорт
	
	Если Параметры.Номенклатура.Пустая() Тогда
		Параметры.Спецификация = Неопределено;
	КонецЕсли;
	
	ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
											Параметры.Подразделение, 
											Параметры.Номенклатура, 
											Параметры.Характеристика, 
											Параметры.НачалоПериода, 
											Параметры.Спецификация);
											
	Если ДанныеСпецификации = Неопределено Тогда
		Параметры.Спецификация = Неопределено;
	Иначе
		Если ЗначениеЗаполнено(ДанныеСпецификации.Спецификация) Тогда 
			Параметры.Спецификация = ДанныеСпецификации.Спецификация;
		Иначе
			Параметры.Спецификация = ДанныеСпецификации.ОсновнаяСпецификация;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Сценарий КАК Сценарий,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.СтатьяБюджетов КАК СтатьяБюджетов,
	|	ДанныеДокумента.СценарийБюджетирования КАК СценарийБюджетирования,
	|	ДанныеДокумента.СценарийБюджетирования.Валюта КАК ВалютаСценария,
	|	ДанныеДокумента.ОтражаетсяВБюджетировании КАК ОтражаетсяВБюджетировании,
	|	ДанныеДокумента.Сценарий КАК СценарийПланирования
	|ИЗ
	|	Документ.ПланПроизводства КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизиты.НомерСтроки,
	|	ДополнительныеРеквизиты.Значение
	|ИЗ
	|	Документ.ПланПроизводства.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|ГДЕ
	|	ДополнительныеРеквизиты.Ссылка = &Ссылка
	|";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Реквизиты = РезультатыЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Дата",                      Реквизиты.Дата);
	Запрос.УстановитьПараметр("Активность",                Реквизиты.Статус = Перечисления.СтатусыПланов.Утвержден);
	Запрос.УстановитьПараметр("Статус",                    Реквизиты.Статус);
	Запрос.УстановитьПараметр("Сценарий",                  Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода",             Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода",          Реквизиты.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Подразделение",             Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("СтатьяБюджетов",            Реквизиты.СтатьяБюджетов);
	Запрос.УстановитьПараметр("СценарийБюджетирования",    Реквизиты.СценарийБюджетирования);
	Запрос.УстановитьПараметр("ВалютаСценария",            Реквизиты.ВалютаСценария);
	Запрос.УстановитьПараметр("ОтражаетсяВБюджетировании", Реквизиты.ОтражаетсяВБюджетировании);
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[1].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр("ДополнительныйРеквизит"+Формат(ВыборкаДетальныеЗаписи.НомерСтроки, "ЧГ=0"), ВыборкаДетальныеЗаписи.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаПланыПроизводства(Запрос, ТекстыЗапроса, Регистры);
	//++ НЕ УТ
	ТекстЗапросаТаблицаОборотыБюджетов(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПланыПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПланыПроизводства";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	&Активность КАК Активность,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаВыпуска = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ТаблицаДокумента.ДатаВыпуска
	|	КОНЕЦ КАК Период,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	&Подразделение КАК Подразделение,
	|	ТаблицаДокумента.Спецификация КАК Спецификация,
	|	&Сценарий КАК Сценарий,
	|	ТаблицаДокумента.Ссылка КАК ПланПроизводства,
	|	ТаблицаДокумента.Количество КАК Количество
	|ИЗ
	|	Документ.ПланПроизводства.Продукция КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И НЕ ТаблицаДокумента.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОборотыБюджетов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОборотыБюджетов";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Дата КАК Период,
	|	&Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА Продукция.ДатаВыпуска = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ Продукция.ДатаВыпуска
	|	КОНЕЦ КАК ПериодПланирования,
	|	&СценарийБюджетирования КАК Сценарий,
	|	&ВалютаСценария КАК Валюта,
	|	&Подразделение КАК Подразделение,
	|	&СтатьяБюджетов КАК СтатьяБюджетов,
	|
	|	//%Аналитика1 КАК Аналитика1,
	|	//%Аналитика2 КАК Аналитика2,
	|	//%Аналитика3 КАК Аналитика3,
	|	//%Аналитика4 КАК Аналитика4,
	|	//%Аналитика5 КАК Аналитика5,
	|	//%Аналитика6 КАК Аналитика6,
	|
	|	СУММА(Продукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ПланПроизводства.Продукция КАК Продукция
	|ГДЕ
	|	Продукция.Ссылка = &Ссылка
	|	И &ОтражаетсяВБюджетировании
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|
	|СГРУППИРОВАТЬ ПО
	|	//%Аналитика1,
	|	//%Аналитика2,
	|	//%Аналитика3,
	|	//%Аналитика4,
	|	//%Аналитика5,
	|	//%Аналитика6,
	|	Продукция.ДатаВыпуска
	|
	|ИМЕЮЩИЕ
	|	СУММА(Продукция.Количество) <> 0";
	
	БюджетированиеСервер.УстановитьВЗапросеВыраженияЗаполненияАналитики(
		Запрос.Параметры.Ссылка, ТекстЗапроса, Запрос.Параметры.СтатьяБюджетов, Документы.ПланПроизводства);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// План производства
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПланПроизводства";
	КомандаПечати.Представление = НСтр("ru='План производства';uk='План виробництва'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПланПроизводства") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПланПроизводства",
			НСтр("ru='План производства';uk='План виробництва'"),
			СформироватьПечатнуюФормуПлана(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода),
			,
			"Документ.ПланПроизводства.ПФ_MXL_ПланПроизводства",
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма
			);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуПлана(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("КроссТаблица") Тогда
		ПоУмолчаниюКроссТаблица = ПараметрыПечати.КроссТаблица = Истина;
		ПоУмолчаниюТаблица = ПараметрыПечати.КроссТаблица = Ложь;
	Иначе
		ПоУмолчаниюКроссТаблица = Ложь;
		ПоУмолчаниюТаблица = Ложь;
	КонецЕсли; 
	
	ВыводитьШапку = Истина;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ВыводитьШапку") Тогда
		ВыводитьШапку = ПараметрыПечати.ВыводитьШапку;
	КонецЕсли;
	
	ВыводитьСценарий 		= Истина;
	ВыводитьПериодСтатус	= Истина;
	ВыводитьПодразделение	= Истина;
	
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСценарий", ВыводитьСценарий) Тогда
		ВыводитьСценарий 	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьПериодСтатус", ВыводитьПериодСтатус) Тогда
		ВыводитьПериодСтатус 	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьПодразделение", ВыводитьПодразделение) Тогда
		ВыводитьПодразделение 	= Истина;
	КонецЕсли;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                         КАК Ссылка,
	|	ТаблицаДокумента.Номер                          КАК Номер,
	|	ТаблицаДокумента.Дата                           КАК Дата,
	|	ТаблицаДокумента.Ответственный                  КАК Ответственный,
	|	ТаблицаДокумента.Статус                         КАК Статус,
	|	ТаблицаДокумента.Периодичность                  КАК Периодичность,
	|	ТаблицаДокумента.НачалоПериода                  КАК НачалоПериода,
	|	ТаблицаДокумента.ОкончаниеПериода               КАК ОкончаниеПериода,
	|	ТаблицаДокумента.Сценарий                       КАК Сценарий,
	|	ТаблицаДокумента.ВидПлана                       КАК ВидПлана,
	|	ВЫБОР
	|		КОГДА &ПоУмолчаниюКроссТаблица
	|				ИЛИ ТаблицаДокумента.КроссТаблица
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК КроссТаблица,
	|	ТаблицаДокумента.ЗаполненоАвтоматически         КАК ЗаполненоАвтоматически,
	|	СпрВидыПланов.ЗаполнятьПодразделение            КАК ЗаполнятьПодразделение,
	|	СценарииПланирования.ИспользоватьДляПланированияМатериалов КАК ЗаполнятьСпецификациюВТЧ,
	|	СценарииПланирования.ОтображатьНомерПериода     КАК ОтображатьНомерПериода,
	|	Пользователи.ФизическоеЛицо                     КАК ОтветственныйФизЛицо,
	|	ТаблицаДокумента.Подразделение                  КАК Подразделение
	|ИЗ
	|	Документ.ПланПроизводства КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СценарииТоварногоПланирования КАК СценарииПланирования
	|		ПО ТаблицаДокумента.Сценарий = СценарииПланирования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК СпрВидыПланов
	|		ПО ТаблицаДокумента.ВидПлана = СпрВидыПланов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ТаблицаДокумента.Ответственный = Пользователи.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка                            КАК Ссылка,
	|	ТаблицаТовары.Номенклатура                      КАК Номенклатура,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное   КАК ТоварНаименованиеПолное,
	|	ТаблицаТовары.Номенклатура.Код                  КАК Код,
	|	ТаблицаТовары.Номенклатура.Артикул              КАК Артикул,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ                                           КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
	|	ТаблицаТовары.Характеристика                    КАК Характеристика,
	|	ТаблицаТовары.Упаковка                          КАК Упаковка,
	|	ТаблицаТовары.НомерСтроки                       КАК НомерСтроки,
	|	ТаблицаТовары.ДатаВыпуска                       КАК ДатаПериода,
	|	ТаблицаТовары.КоличествоУпаковок                КАК Количество,
	|	ТаблицаТовары.Комментарий                       КАК Комментарий,
	|	ТаблицаТовары.Спецификация                      КАК Спецификация
	|ИЗ
	|	Документ.ПланПроизводства.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	(&ПоУмолчаниюТаблица
	|			ИЛИ НЕ ТаблицаТовары.Ссылка.КроссТаблица)
	|	И ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка
	|	КОНЕЦ,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Упаковка,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки),
	|	ВложенныйЗапрос.ДатаПериода,
	|	СУММА(ВложенныйЗапрос.КоличествоУпаковок),
	|	МАКСИМУМ(ВложенныйЗапрос.Комментарий),
	|	ВложенныйЗапрос.Спецификация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.Упаковка КАК Упаковка,
	|		ВЫБОР ТаблицаДокумента.Периодичность
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаВыпуска, ГОД)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаВыпуска, ПОЛУГОДИЕ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаВыпуска, КВАРТАЛ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаВыпуска, МЕСЯЦ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаВыпуска, ДЕКАДА)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаВыпуска, НЕДЕЛЯ)
	|			ИНАЧЕ ТаблицаТовары.ДатаВыпуска
	|		КОНЕЦ КАК ДатаПериода,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР КОГДА ТаблицаТовары.Отменено ТОГДА 0 ИНАЧЕ ТаблицаТовары.КоличествоУпаковок КОНЕЦ КАК КоличествоУпаковок,
	|		ВЫБОР КОГДА ТаблицаТовары.Отменено ТОГДА """" ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.Комментарий КАК СТРОКА(1000)) КОНЕЦ КАК Комментарий,
	|	ТаблицаТовары.Спецификация КАК Спецификация
	|	ИЗ
	|		Документ.ПланПроизводства.Продукция КАК ТаблицаТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПроизводства КАК ТаблицаДокумента
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|	ГДЕ
	|		(&ПоУмолчаниюКроссТаблица
	|				ИЛИ ТаблицаТовары.Ссылка.КроссТаблица)
	|		И ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное,
	|	ВложенныйЗапрос.ДатаПериода,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ВложенныйЗапрос.Упаковка
	|	КОНЕЦ,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Спецификация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки,
	|	ТоварНаименованиеПолное,
	|	ХарактеристикаНаименованиеПолное,
	|	ЕдиницаИзмерения,
	|	ДатаПериода
	|ИТОГИ ПО
	|	Ссылка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланПроизводства_ПланПроизводства";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПоУмолчаниюКроссТаблица", ПоУмолчаниюКроссТаблица);
	Запрос.УстановитьПараметр("ПоУмолчаниюТаблица", ПоУмолчаниюТаблица);
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет();
	ДанныеПечати			= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам 	= МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	ЕстьКроссТаблицы = Ложь;
	НачалоШапки = 0;
	ОкончаниеШапки = 0;
	ШиринаНомера = 0;
	ОкончаниеНомера = 0;
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
		
		КроссТаблица = ДанныеПечати.КроссТаблица;
		
		Если КроссТаблица Тогда
			ТаблицаПериодов = Планирование.ПолучитьТаблицуПериодов();
			Планирование.ЗаполнитьТаблицуПериодов(ТаблицаПериодов, 
				ДанныеПечати.Периодичность, 
				ДанныеПечати.НачалоПериода, 
				ДанныеПечати.ОкончаниеПериода, 
				?(ВыводитьШапку, ДанныеПечати.ОтображатьНомерПериода, Ложь));
			КроссТаблица = ТаблицаПериодов.Количество() > 1 ИЛИ НЕ ВыводитьШапку;
		КонецЕсли;
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПланПроизводства.ПФ_MXL_ПланПроизводства", КодЯзыкаПечать);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку плана
		Если ВыводитьШапку Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
			
			ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='План производства';uk='План виробництва'",КодЯзыкаПечать), КодЯзыкаПечать);
			
			ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ВыводитьСценарий Тогда
				ОбластьМакета                                  = Макет.ПолучитьОбласть("Сценарий");
				ПредставлениеСценария                          = Строка(ДанныеПечати.Сценарий) + ", "+ Строка(ДанныеПечати.Периодичность);
				ОбластьМакета.Параметры.ПредставлениеСценария  = ПредставлениеСценария;
				ОбластьМакета.Параметры.Сценарий               = ДанныеПечати.Сценарий;
				ПредставлениеВидаПлана                         = Строка(ДанныеПечати.ВидПлана);
				ОбластьМакета.Параметры.ПредставлениеВидаПлана = ПредставлениеВидаПлана;
				ОбластьМакета.Параметры.ВидПлана               = ДанныеПечати.ВидПлана;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ВыводитьПериодСтатус Тогда
				ОбластьМакета                                = Макет.ПолучитьОбласть("Период");
				ПредставлениеПериода                         = НСтр("ru='Период с %1 по %2';uk='Період з %1 по %2'",КодЯзыкаПечать);
				ПредставлениеПериода                         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода,
					Формат(ДанныеПечати.НачалоПериода, "ДЛФ=D"), 
					Формат(ДанныеПечати.ОкончаниеПериода, "ДЛФ=D"));
				ОбластьМакета.Параметры.ПредставлениеПериода = ПредставлениеПериода;
				ОбластьМакета.Параметры.Статус = Строка(ДанныеПечати.Статус);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеПечати.ЗаполнятьПодразделение И ВыводитьПодразделение Тогда
				ОбластьМакета                                       = Макет.ПолучитьОбласть("Подразделение");
				ПредставлениеПодразделения                          = Строка(ДанныеПечати.Подразделение);
				ОбластьМакета.Параметры.ПредставлениеПодразделения  = ПредставлениеПодразделения;
				ОбластьМакета.Параметры.Подразделение               = ДанныеПечати.Подразделение;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
		КонецЕсли;
	
		// Выводим заголовок таблицы Товары
		ДопПоля = Новый Массив;
		Если ДанныеПечати.ЗаполнятьСпецификациюВТЧ Тогда
			СтруктураДопПоля = Новый Структура;
			СтруктураДопПоля.Вставить("Заголовок", НСтр("ru='Спецификация';uk='Специфікація'",КодЯзыкаПечать));
			СтруктураДопПоля.Вставить("КолонкаЗначения", "Спецификация");
			ДопПоля.Добавить(СтруктураДопПоля);
		КонецЕсли;
		
		СуффиксОбластиКолонки = "";
		
		СуффиксКроссТаблицы = ?(КроссТаблица, "Кросс","");
		
		БезХарактеристик = НЕ (ВыводитьШапку ИЛИ ИспользоватьХарактеристикиНоменклатуры);
		// Расчет ширины колонки товара
		ШиринаКолонкиТовара = Макет.Область("Товар"+?(БезХарактеристик,"БезХарактеристик", "")).ШиринаКолонки * 2; // Область содержит 2 колонки - номенклатура и характеристика
		
		Если НЕ ВыводитьКоды Тогда
			ШиринаКолонкиТовара = ШиринаКолонкиТовара + Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли; 
		Если ДопПоля.Количество() > 0 Тогда
			ШиринаКолонкиТовара = ШиринаКолонкиТовара -Макет.Область("Товар" + СуффиксОбластиКолонки + "ДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0")).ШиринаКолонки * ДопПоля.Количество();
		КонецЕсли; 
		Если ВыводитьШапку ИЛИ ИспользоватьХарактеристикиНоменклатуры Тогда
			ШиринаКолонкиТовара = ШиринаКолонкиТовара / 2;
		КонецЕсли; 
		Макет.Область("Товар"+?(БезХарактеристик,"БезХарактеристик", "")).ШиринаКолонки = ШиринаКолонкиТовара;
		
		ПериодовНаПервойСтранице = 2;
		ПериодовНаСтранице = 7;
		
		ОбластьНомера                   = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьУИ                       = Макет.ПолучитьОбласть("ШапкаТаблицы|УникальныеИдентификаторы");
		ОбластьКодов                    = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар                    = Макет.ПолучитьОбласть("ШапкаТаблицы"+?(ВыводитьШапку,"","НХ")+"|Товар" +?(БезХарактеристик,"БезХарактеристик", ""));
		ОбластьДанных                   = Макет.ПолучитьОбласть("ШапкаТаблицы"+?(ВыводитьШапку ИЛИ КроссТаблица,"","НХ")+"|Количество" + СуффиксОбластиКолонки + СуффиксКроссТаблицы);
		ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("ШапкаТаблицы|Количество" + СуффиксОбластиКолонки + "КроссОкончание");
		ОбластьДатаПериод               = Макет.ПолучитьОбласть("ШапкаТаблицы|ДатаПериод");
		ОбластьКроссЕдиницаИзмерения    = Макет.ПолучитьОбласть("ШапкаТаблицы|КроссЕдиницаИзмерения");
		Если ДопПоля.Количество() > 0 Тогда
			ОбластьТоварДопПоле         = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар" + СуффиксОбластиКолонки + "ДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0"));
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если Не ВыводитьШапку Тогда
			ТабличныйДокумент.Присоединить(ОбластьУИ);
		КонецЕсли;
		
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		Для каждого ДопПоле Из ДопПоля Цикл
			ОбластьТоварДопПоле.Параметры.Заголовок = ДопПоле.Заголовок;
			ТабличныйДокумент.Присоединить(ОбластьТоварДопПоле);
		КонецЦикла; 
		
		НомерСтраницы = 1;
		Если КроссТаблица Тогда
			ТабличныйДокумент.Присоединить(ОбластьКроссЕдиницаИзмерения);
			Для каждого Период Из ТаблицаПериодов Цикл
				Индекс = ТаблицаПериодов.Индекс(Период);
				Если Индекс = ТаблицаПериодов.Количество()-1 Тогда
					ОбластьДанныхКроссОкончание.Параметры.Заголовок = Период.Заголовок;
					ТабличныйДокумент.Присоединить(ОбластьДанныхКроссОкончание);
				Иначе
					ОбластьДанных.Параметры.Заголовок = Период.Заголовок;
					ТабличныйДокумент.Присоединить(ОбластьДанных);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
		КонецЕсли; 
		
		НачалоШапки = ТабличныйДокумент.ВысотаТаблицы - ОбластьНомера.ВысотаТаблицы +1;
		ОкончаниеШапки = ТабличныйДокумент.ВысотаТаблицы;
		ШиринаНомера = ОбластьНомера.ШиринаТаблицы;
		
		ОбластьНомера                   = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьУИ                       = Макет.ПолучитьОбласть("СтрокаТаблицы|УникальныеИдентификаторы");
		ОбластьКодов                    = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
		ОбластьТовар                    = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар"+?(БезХарактеристик,"БезХарактеристик", ""));
		ОбластьДанных                   = Макет.ПолучитьОбласть("СтрокаТаблицы|Количество" + СуффиксОбластиКолонки + СуффиксКроссТаблицы);
		ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("СтрокаТаблицы|Количество" + СуффиксОбластиКолонки + "КроссОкончание");
		ОбластьДатаПериод               = Макет.ПолучитьОбласть("СтрокаТаблицы|ДатаПериод");
		ОбластьКроссЕдиницаИзмерения    = Макет.ПолучитьОбласть("СтрокаТаблицы|КроссЕдиницаИзмерения");
		Если ДопПоля.Количество() > 0 Тогда
			ОбластьТоварДопПоле         = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар" + СуффиксОбластиКолонки + "ДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0") );
		КонецЕсли;
		
		ТекущаяСтрока  = Новый Структура("Номенклатура, Характеристика, Спецификация, ЕдиницаИзмерения");
		ТекущийПериод  = 0;
		НомерСтроки    = 0;
	
		// Выводим строки таблицы Товары
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			ОдинаковыеСтроки = Истина;
			Если КроссТаблица Тогда
				Для каждого Элемент Из ТекущаяСтрока Цикл
					Если ВыборкаПоТоварам[Элемент.Ключ] <> Элемент.Значение Тогда
						ОдинаковыеСтроки = Ложь;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
			Если НЕ КроссТаблица ИЛИ КроссТаблица И НЕ ОдинаковыеСтроки Тогда
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаПоТоварам);
				ТекущийПериод = 0;
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомера);
				
				Если Не ВыводитьШапку Тогда
					ОбластьУИ.Параметры.УникальныйИдентификаторНоменклатура          = Строка(ВыборкаПоТоварам.Номенклатура.УникальныйИдентификатор());
					ОбластьУИ.Параметры.УникальныйИдентификаторХарактеристика        = Строка(ВыборкаПоТоварам.Характеристика.УникальныйИдентификатор());
					ОбластьУИ.Параметры.УникальныйИдентификаторУпаковка              = Строка(ВыборкаПоТоварам.Упаковка.УникальныйИдентификатор());
					ОбластьУИ.Параметры.УникальныйИдентификаторСпецификация          = Строка(ВыборкаПоТоварам.Спецификация.УникальныйИдентификатор());
					
					ТабличныйДокумент.Присоединить(ОбластьУИ);
				КонецЕсли;
				
				Если ВыводитьКоды Тогда
					
					ОбластьКодов.Параметры.Артикул = ВыборкаПоТоварам[КолонкаКодов];
					ТабличныйДокумент.Присоединить(ОбластьКодов);
					
				КонецЕсли;
				
				ОбластьТовар.Параметры.Заполнить(ВыборкаПоТоварам);
				
				ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаПоТоварам.ТоварНаименованиеПолное,
					ВыборкаПоТоварам.ХарактеристикаНаименованиеПолное);
				
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				
				Для каждого ДопПоле Из ДопПоля Цикл
					ОбластьТоварДопПоле.Параметры.Значение = ВыборкаПоТоварам[ДопПоле.КолонкаЗначения];
					ТабличныйДокумент.Присоединить(ОбластьТоварДопПоле);
				КонецЦикла;
				
				Если КроссТаблица Тогда
				
					ОбластьКроссЕдиницаИзмерения.Параметры.Заполнить(ВыборкаПоТоварам);
					ТабличныйДокумент.Присоединить(ОбластьКроссЕдиницаИзмерения);
				
				КонецЕсли; 
				
			КонецЕсли;
			
			Если КроссТаблица Тогда
				
				ТекущийПериод = ТекущийПериод + 1;
				
				Период = ТаблицаПериодов.Найти(ВыборкаПоТоварам.ДатаПериода, "ДатаНачала");
				
				Индекс = ТаблицаПериодов.Индекс(Период);
				Если Индекс < ТаблицаПериодов.Количество()-1 Тогда
					
					ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
					Область = ОбластьДанных.Область("R1C1:R1C1");
					Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
					ТабличныйДокумент.Присоединить(ОбластьДанных);
				Иначе
					ОбластьДанныхКроссОкончание.Параметры.Заполнить(ВыборкаПоТоварам);
					Область = ОбластьДанныхКроссОкончание.Область("R1C1:R1C1");
					Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
					ТабличныйДокумент.Присоединить(ОбластьДанныхКроссОкончание);
				КонецЕсли; 
				
				Пока ТекущийПериод < Период.НомерКолонки Цикл
				
					ТабличныйДокумент.Присоединить(ОбластьДанных);
					ТекущийПериод = ТекущийПериод + 1;
				
				КонецЦикла;
				
			Иначе
				ОбластьДатаПериод.Параметры.Заполнить(ВыборкаПоТоварам);
				ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
				Область = ОбластьДанных.Область("R1C1:R1C1");
				Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим подвал, в том случае если выводили шапку
		Если ВыводитьШапку Тогда
			ОбластьНомера                   = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьУИ                       = Макет.ПолучитьОбласть("ПодвалТаблицы|УникальныеИдентификаторы");
			ОбластьКодов                    = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар                    = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар"+?(БезХарактеристик,"БезХарактеристик", ""));
			ОбластьДанных                   = Макет.ПолучитьОбласть("ПодвалТаблицы|Количество" + СуффиксОбластиКолонки + СуффиксКроссТаблицы);
			ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("ПодвалТаблицы|Количество" + СуффиксОбластиКолонки + "КроссОкончание");
			ОбластьДатаПериод               = Макет.ПолучитьОбласть("ПодвалТаблицы|ДатаПериод");
			ОбластьКроссЕдиницаИзмерения    = Макет.ПолучитьОбласть("ПодвалТаблицы|КроссЕдиницаИзмерения");
			Если ДопПоля.Количество() > 0 Тогда
				ОбластьТоварДопПоле         = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар" + СуффиксОбластиКолонки + "ДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0") );
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			Для каждого ДопПоле Из ДопПоля Цикл
				ТабличныйДокумент.Присоединить(ОбластьТоварДопПоле);
			КонецЦикла; 
			
			Если КроссТаблица Тогда
				ТабличныйДокумент.Присоединить(ОбластьКроссЕдиницаИзмерения);
				
				Для каждого Период Из ТаблицаПериодов Цикл
					Если Период.Активная И Период.НомерКолонки <= 0 Тогда
						Продолжить;
					КонецЕсли; 
					
					ТабличныйДокумент.Присоединить(ОбластьДанных);
				КонецЦикла;
			Иначе
				ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЕсли;
			
			ОкончаниеНомера = ТабличныйДокумент.ВысотаТаблицы;
			
			// Выводим Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("ИтоговаяСтрока");
			ИтоговаяСтрока = НСтр("ru='Всего наименований %КоличествоНаименований%.';uk='Всього найменувань %КоличествоНаименований%.'",КодЯзыкаПечать);
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", НомерСтроки);
			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
				
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подписи
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			
			Если ЗначениеЗаполнено(ДанныеПечати.ОтветственныйФизЛицо) Тогда
				ОбластьМакета.Параметры.ПредствлениеОтветственного =
					ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ОтветственныйФизЛицо, ДанныеПечати.Дата);
				ОбластьМакета.Параметры.Ответственный = ДанныеПечати.ОтветственныйФизЛицо;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
		Если КроссТаблица Тогда
			ЕстьКроссТаблицы = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ДанныеПечати.Количество() = 1 И ЕстьКроссТаблицы Тогда
	
		ОбластьШапки = ТабличныйДокумент.Область(НачалоШапки, , ОкончаниеШапки, );
		ТабличныйДокумент.ПовторятьПриПечатиСтроки = ОбластьШапки;
		
		ОбластьНомера = ТабличныйДокумент.Область(, 1, , ШиринаНомера);
		ТабличныйДокумент.ПовторятьПриПечатиКолонки = ОбластьНомера;
	
	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция СоздатьПрисоединенныйФайлExcel(ДокументСсылка, ИдентификаторФормы) Экспорт 
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьШапку", Ложь);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДокументСсылка);
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ДокументСсылка);
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("КодЯзыкаДляМногоязычныхПечатныхФорм", Локализация.ПолучитьЯзыкФормированияПечатныхФорм());
	
	ТабличныйДокумент = СформироватьПечатнуюФормуПлана(МассивДокументов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), ИдентификаторФормы);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", ДокументСсылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", "Excel" + " " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ.мм.сс'"));
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xls");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДата());
	
	Файл = ПрисоединенныеФайлы.ДобавитьПрисоединенныйФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище, Неопределено);
	Если Файл <> Неопределено Тогда
		ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(Файл);
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Файл, ИдентификаторФормы, Истина);
		СтруктураДействийExcel = Новый Структура;
		СтруктураДействийExcel.Вставить("AutoFilter", Новый Структура("СтрокаНачало, КолонкаНачало", 2, 2));
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик, упаковки, партнера, соглашения, склада
		МассивКолонок = Новый Массив;
		МассивКолонок.Добавить(3);
		МассивКолонок.Добавить(4);
		МассивКолонок.Добавить(5);
		МассивКолонок.Добавить(6);
		СтруктураДействийExcel.Вставить("HiddenColumns", МассивКолонок);
		
		Возврат Новый Структура("ДанныеФайла, Файл, СтруктураДействийExcel", ДанныеФайла, Файл, СтруктураДействийExcel);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ПланПроизводства.Форма.ФормаСписка";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ПланПроизводства))
		И ПравоДоступа("Добавление", Метаданные.Документы.ПланПроизводства)
		И ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПроизводства");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
		Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК ПланыПроизводстваОжидающиеСогласования
	|ИЗ
	|	Документ.ПланПроизводства КАК Планы
	|ГДЕ
	|	(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(Планы.НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(Планы.ОкончаниеПериода, ДЕНЬ)
	|			ИЛИ НАЧАЛОПЕРИОДА(Планы.НачалоПериода, ДЕНЬ) > НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
	|	И Планы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.НаУтверждении)
	|	И НЕ Планы.ПометкаУдаления
	|	И Планы.Проведен";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ПланыЗакупок
	ДелоРодитель = ТекущиеДела.Найти("ПланыЗакупок", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ПланыЗакупок";
		ДелоРодитель.Представление  = НСтр("ru='Планы ожидающие согласования';uk='Плани, що очікують погодження'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Склад;
	КонецЕсли;
	
	// ПланыПроизводстваОжидающиеСогласования
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Статус", Перечисления.СтатусыПланов.НаУтверждении);
	ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ПланыПроизводстваОжидающиеСогласования";
	Дело.ЕстьДела       = Результат.ПланыПроизводстваОжидающиеСогласования > 0;
	Дело.Представление  = НСтр("ru='Планы производства';uk='Плани виробництва'");
	Дело.Количество     = Результат.ПланыПроизводстваОжидающиеСогласования;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ПланыЗакупок";
	
	Если Результат.ПланыПроизводстваОжидающиеСогласования > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьДатуПоГрафику(Знач ДатаОт, Знач КоличествоДней, ПараметрыГрафика) Экспорт 
	
	ДатаОт = НачалоДня(ДатаОт);
	
	Если КоличествоДней = 0 Тогда
		Возврат ДатаОт;
	КонецЕсли;
	
	Если ПараметрыГрафика = Неопределено Тогда
		ПараметрыГрафика = Новый Структура;
	КонецЕсли; 
	
	Если НЕ ПараметрыГрафика.Свойство("Календарь") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыГрафика.Календарь) Тогда
		ПараметрыГрафика.Вставить("Календарь", Константы.ОсновнойКалендарьПредприятия.Получить());
	КонецЕсли;
	
	Если НЕ ПараметрыГрафика.Свойство("КалендарныйГрафик") Тогда
		ПараметрыГрафика.Вставить("КалендарныйГрафик", Новый Соответствие);
		ПараметрыГрафика.Вставить("РабочиеДни", Новый Соответствие);
		ПараметрыГрафика.Вставить("ДнейВГрафике", Новый Соответствие);
	КонецЕсли;
	
	ГодГрафика = Год(ДатаОт);
	
	Если ПараметрыГрафика.КалендарныйГрафик.Получить(ГодГрафика) = Неопределено Тогда
		
		ПолучитьДанныеГрафикаЗаГод(ПараметрыГрафика, ГодГрафика);
		
	КонецЕсли; 
	
	ТекущийРабочийДень = ПараметрыГрафика.КалендарныйГрафик.Получить(ГодГрафика).Получить(ДатаОт);
	
	Если ТекущийРабочийДень = Неопределено Тогда
		// Графика нет - считаем по календарным дням
		Возврат ДатаОт + КоличествоДней * 86400;
	
	КонецЕсли; 
	
	Если КоличествоДней > 0 Тогда
	
		КоличествоДнейВГрафике = ПараметрыГрафика.ДнейВГрафике.Получить(ГодГрафика);
		Если КоличествоДнейВГрафике = Неопределено Тогда
			// Графика нет - считаем по календарным дням
			Возврат ДатаОт + КоличествоДней * 86400;
			
		ИначеЕсли КоличествоДнейВГрафике > ТекущийРабочийДень + КоличествоДней Тогда
			Возврат ПараметрыГрафика.РабочиеДни.Получить(ГодГрафика).Получить(ТекущийРабочийДень + КоличествоДней);
		
		КонецЕсли; 
		ОсталосьДней = КоличествоДней - КоличествоДнейВГрафике + ТекущийРабочийДень;
		Пока ГодГрафика >= 0 Цикл
			
			ГодГрафика = ГодГрафика +1;
			Если ПараметрыГрафика.КалендарныйГрафик.Получить(ГодГрафика) = Неопределено Тогда
				
				ПолучитьДанныеГрафикаЗаГод(ПараметрыГрафика, ГодГрафика);
				
			КонецЕсли; 
			
			КоличествоДнейВГрафике = ПараметрыГрафика.ДнейВГрафике.Получить(ГодГрафика);
			Если КоличествоДнейВГрафике = Неопределено Тогда
				// Графика нет - считаем по календарным дням
				Возврат ДатаОт + КоличествоДней * 86400;
				
			ИначеЕсли КоличествоДнейВГрафике >= ОсталосьДней Тогда
				
				Возврат ПараметрыГрафика.РабочиеДни.Получить(ГодГрафика).Получить(КоличествоДнейВГрафике - ОсталосьДней);
				
			Иначе
				
				ОсталосьДней = ОсталосьДней - КоличествоДнейВГрафике;
				
			КонецЕсли; 
			
		КонецЦикла;
	Иначе
		
		КоличествоДней = -КоличествоДней;
		Если ТекущийРабочийДень > КоличествоДней Тогда
		
			Возврат ПараметрыГрафика.РабочиеДни.Получить(ГодГрафика).Получить(ТекущийРабочийДень - КоличествоДней);
		
		КонецЕсли;
		
		ОсталосьДней = КоличествоДней - ТекущийРабочийДень;
		Пока ГодГрафика >= 0 Цикл
			
			ГодГрафика = ГодГрафика -1;
			Если ПараметрыГрафика.КалендарныйГрафик.Получить(ГодГрафика) = Неопределено Тогда
				
				ПолучитьДанныеГрафикаЗаГод(ПараметрыГрафика, ГодГрафика);
				
			КонецЕсли; 
			
			КоличествоДнейВГрафике = ПараметрыГрафика.ДнейВГрафике.Получить(ГодГрафика);
			Если КоличествоДнейВГрафике = Неопределено Тогда
				// Графика нет - считаем по календарным дням
				Возврат ДатаОт - КоличествоДней * 86400;
				
			ИначеЕсли КоличествоДнейВГрафике > ОсталосьДней Тогда
				
				Возврат ПараметрыГрафика.РабочиеДни.Получить(ГодГрафика).Получить(КоличествоДнейВГрафике - ОсталосьДней);
				
			Иначе
				
				ОсталосьДней = ОсталосьДней - КоличествоДнейВГрафике;
				
			КонецЕсли; 
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецФункции

Процедура ПолучитьДанныеГрафикаЗаГод(ПараметрыГрафика, ГодГрафика)

	ПараметрыГрафика.КалендарныйГрафик.Вставить(ГодГрафика, Новый Соответствие);
	ПараметрыГрафика.РабочиеДни.Вставить(ГодГрафика, Новый Соответствие);
	КоличествоДнейВГрафике = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика,
	|	КалендарныеГрафики.ДеньВключенВГрафик,
	|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода
	|ПОМЕСТИТЬ КалендарныйГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Год = &Год
	|	И КалендарныеГрафики.Календарь = &Календарь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныйГрафик.ДатаГрафика,
	|	КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода
	|ИЗ
	|	КалендарныйГрафик КАК КалендарныйГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныйГрафик.ДатаГрафика,
	|	КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода
	|ИЗ
	|	КалендарныйГрафик КАК КалендарныйГрафик
	|ГДЕ
	|	КалендарныйГрафик.ДеньВключенВГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода), НЕОПРЕДЕЛЕНО) КАК КоличествоДнейВГрафике
	|ИЗ
	|	КалендарныйГрафик КАК КалендарныйГрафик";
	
	Запрос.УстановитьПараметр("Год", ГодГрафика);
	Запрос.УстановитьПараметр("Календарь", ПараметрыГрафика.Календарь);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[1].Выбрать();
	
	КалендарныйГрафик = ПараметрыГрафика.КалендарныйГрафик.Получить(ГодГрафика);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КалендарныйГрафик.Вставить(ВыборкаДетальныеЗаписи.ДатаГрафика, ВыборкаДетальныеЗаписи.КоличествоДнейВГрафикеСНачалаГода);
		
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[2].Выбрать();
	
	РабочиеДни = ПараметрыГрафика.РабочиеДни.Получить(ГодГрафика);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		РабочиеДни.Вставить(ВыборкаДетальныеЗаписи.КоличествоДнейВГрафикеСНачалаГода, ВыборкаДетальныеЗаписи.ДатаГрафика);
		
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[3].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КоличествоДнейВГрафике = ВыборкаДетальныеЗаписи.КоличествоДнейВГрафике;
		
	КонецЦикла;
	
	ПараметрыГрафика.ДнейВГрафике.Вставить(ГодГрафика, КоличествоДнейВГрафике);

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли