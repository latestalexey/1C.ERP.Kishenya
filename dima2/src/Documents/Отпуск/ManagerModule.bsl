#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.Отпуск - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.Отпуск - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеПоВсемУчетам = Ложь;
	МассивРегистров = Новый Массив;
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
		ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(Объект, Отказ, РежимПроведения);
	КонецЕсли;        
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
	
	Если РеквизитыДляПроведения.ДокументРассчитан Тогда 
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(
				Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
				
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
					Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
			
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);	
			
			// НДФЛ
			УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(
				РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения, Истина, Истина);

			// - Регистрация начислений и удержаний.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						ДанныеДляПроведения.НачисленияПоСотрудникам,
						ДанныеДляПроведения.УдержанияПоСотрудникам,
						ДанныеДляПроведения.НДФЛПоСотрудникам,
						РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
				
			// - регистрация пособий

			// Займы
			// - взаиморасчеты по займам
			ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
			
			// - Регистрация займов в учете заработной платы.
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьПогашениеЗаймов(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияЗаймов, РеквизитыДляПроведения.ПорядокВыплаты);
			

			// - страховые взносы
			УчетСтраховыхВзносов.СформироватьИсчисленныеВзносыАвансом(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СтраховыеВзносы);

			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				Модуль.ЗарегистрироватьНачисленияДляРасчетаСохраняемогоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияДляРегистрацииДенежногоСодержания);
				Модуль.ЗарегистрироватьКорректировкиДляРасчетаСохраняемогоДенежногоСодержания(ДанныеДляПроведения.КорректировкиДляРегистрацииДенежногоСодержания, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаНачало, РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаОкончание);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда

			// Корректировки данных для среднего заработка.
			ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка = УчетСреднегоЗаработка.ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка();
			ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка.Организация = РеквизитыДляПроведения.Организация;
			ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка.ФизическоеЛицо = РеквизитыДляПроведения.ФизическоеЛицо;
			
			УчетСреднегоЗаработка.ЗаписатьКорректировкиОбщегоСреднегоЗаработка(
				УчетСреднегоЗаработка.КорректировкиОбщегоСреднегоЗаработкаДокумента(РеквизитыДляПроведения.Ссылка), 
				РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаНачало, 
				РеквизитыДляПроведения.ПериодРасчетаСреднегоЗаработкаОкончание, 
				ДополнительныеПараметрыЗаписиКорректировокОбщегоСреднегоЗаработка);
			
			// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
			    		
		КонецЕсли;			
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
		ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
		ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
		ПараметрыДвиженийОтпусков.РабочиеПериоды = ДанныеДляПроведения.РабочиеПериодыДляОтпусков;
		ПараметрыДвиженийОтпусков.Основания = ДанныеДляПроведения.ОснованияДляОтпусков;
		ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
		ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
			
		СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(Движения, РеквизитыДляПроведения.Ссылка, ДанныеСостоянийСотрудника(РеквизитыДляПроведения));
		
		Если РеквизитыДляПроведения.ПредоставитьОтгул Тогда
			ДанныеОбОтгулах = ДанныеОбОтгулах(РеквизитыДляПроведения);
			УчетРабочегоВремени.ЗарегистрироватьИПроверитьОстаткиДниЧасыОтгуловСотрудников(Движения, ДанныеОбОтгулах, Отказ);
		КонецЕсли;
		
		    	
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			КадровыйУчетРасширенный.ОсвободитьСтавкуВременно(Движения, ДанныеДляПроведения.ПериодыОсвобожденияСтавки);
		КонецЕсли;

		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			Модуль.СформироватьДвиженияКадровыхПриказовЗаявокСотрудников(Движения, ДанныеДляПроведения.ДанныеКадровыхПриказовЗаявокСотрудников);
		КонецЕсли;
		
		УчетСреднегоЗаработка.УдалитьПричиныПерерасчетов(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		КадровыйУчетРасширенный.ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеДляПроведения.ДанныеРеестраОтпусков, Отказ);
		
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.Отпуск);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ПолныеПрава,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_РасчетОтпуска";
		КомандаПечати.Представление = НСтр("ru='Записка - расчет о предоставлении отпуска';uk='Записка - розрахунок про надання відпустки'");
		КомандаПечати.Порядок = 20;
		КомандаПечати.ФункциональныеОпции = "РаботаВХозрасчетнойОрганизации";
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
		КомандаПечати.Идентификатор = "ПФ_XML_UK_П3";
		КомандаПечати.Представление = НСтр("ru='Приказ о предоставлении отпуска (Форма П-3)';uk='Наказ про надання відпустки (Форма П-3)'");
		
	КонецЕсли;
	
	// Расчет среднего заработка
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.Отпуск");
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета РасчетСреднегоЗаработка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработка", Истина, ПараметрыВывода);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм, 
				"РасчетСреднегоЗаработка", 
				НСтр("ru='Расчет среднего заработка';uk='Розрахунок середнього заробітку'"),
				ТабличныйДокумент,
				,
				,
				,
				Истина	// ЭтоМногоязычнаяПечатнаяФорма
			);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета = Неопределено) Экспорт 
	
	Если СтруктураВидовУчета = Неопределено Тогда
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			  СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
	
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет", "Ссылка.ПериодРегистрации");
		РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения);
		
		ДанныеДляПроведения.Вставить("РабочиеПериодыДляОтпусков", РабочиеПериодыДляОтпусков(РеквизитыДляПроведения.Ссылка));
		ДанныеДляПроведения.Вставить("ОснованияДляОтпусков", ОснованияДляОтпусков(РеквизитыДляПроведения.Ссылка));
		
		ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, НачалоДня(РеквизитыДляПроведения.ДатаНачалаСобытия) - 1, "Ссылка.ПериодРегистрации");
		
		Если РеквизитыДляПроведения.ОсвобождатьСтавку Тогда
			
			ДругиеСотрудники = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(
			РеквизитыДляПроведения.ФизическоеЛицо, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Сотрудник, РеквизитыДляПроведения.ДатаНачалаПериодаОтсутствия, РеквизитыДляПроведения.ДатаОкончанияПериодаОтсутствия);
			
			МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыДляПроведения.Сотрудник);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ДругиеСотрудники);
			КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, МассивСотрудников, РеквизитыДляПроведения.ДатаНачалаПериодаОтсутствия, КонецДня(РеквизитыДляПроведения.ДатаОкончанияПериодаОтсутствия) + 1);
			
			Если ЗначениеЗаполнено(РеквизитыДляПроведения.ИсправленныйДокумент) Тогда
				ДанныеИсправленногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыДляПроведения.ИсправленныйДокумент, "ФизическоеЛицо,Организация,Сотрудник,ДатаНачалаПериодаОтсутствия,ДатаОкончанияПериодаОтсутствия");
				
				ДругиеСотрудникиИсправленногоДокумента = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(ДанныеИсправленногоДокумента.ФизическоеЛицо, 
				ДанныеИсправленногоДокумента.Организация, ДанныеИсправленногоДокумента.Сотрудник, 
				ДанныеИсправленногоДокумента.ДатаНачалаПериодаОтсутствия, ДанныеИсправленногоДокумента.ДатаОкончанияПериодаОтсутствия);
				
				МассивСотрудниковИсправленногоДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеИсправленногоДокумента.Сотрудник);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудниковИсправленногоДокумента, ДругиеСотрудникиИсправленногоДокумента);
				КадровыйУчетРасширенный.ЗаполнитьПериодыОсвобожденияСтавки(ДанныеДляПроведения, МассивСотрудниковИсправленногоДокумента, ДанныеИсправленногоДокумента.ДатаНачалаПериодаОтсутствия,  КонецДня(ДанныеИсправленногоДокумента.ДатаОкончанияПериодаОтсутствия) + 1, Истина);
			КонецЕсли;
			
		КонецЕсли;

		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			ДанныеКадровыхПриказовЗаявокСотрудников = Модуль.ДанныеДляПроведенияКадровыеПриказыЗаявокСотрудников(РеквизитыДляПроведения.Ссылка);
			ДанныеДляПроведения.Вставить("ДанныеКадровыхПриказовЗаявокСотрудников", ДанныеКадровыхПриказовЗаявокСотрудников);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			
			НачисленияДляРегистрацииДенежногоСодержания = Модуль.СведенияОНачисленияхДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет");
			ДанныеДляПроведения.Вставить("НачисленияДляРегистрацииДенежногоСодержания", НачисленияДляРегистрацииДенежногоСодержания);
			
			КорректировкиДляРегистрацииДенежногоСодержания = Модуль.СведенияОКорректировкахДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка);
			ДанныеДляПроведения.Вставить("КорректировкиДляРегистрацииДенежногоСодержания", КорректировкиДляРегистрацииДенежногоСодержания);
			
		КонецЕсли;
		
		// Данные для Реестра отпусков
		ДанныеРеестраОтпусков = КадровыйУчетРасширенный.ТаблицаРеестраОтпусков();
						
		Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДокументЗаполнения), РеквизитыДляПроведения.ДатаДокументаЗаполнения, РеквизитыДляПроведения.Дата), 
			?(ЗначениеЗаполнено(РеквизитыДляПроведения.ДокументЗаполнения), РеквизитыДляПроведения.НомерДокументаЗаполнения, РеквизитыДляПроведения.Номер));

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Отпуск.Сотрудник,
		|	Отпуск.ФизическоеЛицо,
		|	Отпуск.Ссылка КАК ДокументОснование,
		|	Отпуск.ВидРасчетаОсновногоОтпуска.ВидОтпуска КАК ВидОтпуска,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КоличествоДнейОсновногоОтпуска КАК КоличествоДнейОтпуска,
		|	Отпуск.ДатаНачалаОсновногоОтпуска КАК ДатаНачалаПериодаОтсутствия,
		|	Отпуск.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончанияПериодаОтсутствия,
		|	Отпуск.Основание
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка = &Ссылка
		|	И Отпуск.ПредоставитьОсновнойОтпуск
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускДополнительныеОтпуска.Ссылка.Сотрудник,
		|	ОтпускДополнительныеОтпуска.Ссылка.ФизическоеЛицо,
		|	ОтпускДополнительныеОтпуска.Ссылка,
		|	ОтпускДополнительныеОтпуска.ВидОтпуска,
		|	ОтпускДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ОтпускДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ОтпускДополнительныеОтпуска.КоличествоДней,
		|	ОтпускДополнительныеОтпуска.ДатаНачала,
		|	ОтпускДополнительныеОтпуска.ДатаОкончания,
		|	ОтпускДополнительныеОтпуска.Основание
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
		|ГДЕ
		|	ОтпускДополнительныеОтпуска.Ссылка = &Ссылка
		|	И ОтпускДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск
		|	И ОтпускДополнительныеОтпуска.КоличествоДней > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Сотрудник,
		|	Отпуск.ФизическоеЛицо,
		|	Отпуск.Ссылка,
		|	Отпуск.ВидРасчетаКомпенсацииОсновногоОтпуска.ВидОтпуска,
		|	Отпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	Отпуск.КоличествоДнейКомпенсацииОсновногоОтпуска,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	Отпуск.Основание
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Ссылка = &Ссылка
		|	И Отпуск.ПредоставитьКомпенсациюОсновногоОтпуска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтпускДополнительныеОтпуска.Ссылка.Сотрудник,
		|	ОтпускДополнительныеОтпуска.Ссылка.ФизическоеЛицо,
		|	ОтпускДополнительныеОтпуска.Ссылка,
		|	ОтпускДополнительныеОтпуска.ВидОтпуска,
		|	ОтпускДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ОтпускДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
		|	ОтпускДополнительныеОтпуска.КоличествоДнейКомпенсации,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ОтпускДополнительныеОтпуска.Основание
		|ИЗ
		|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
		|ГДЕ
		|	ОтпускДополнительныеОтпуска.Ссылка = &Ссылка
		|	И ОтпускДополнительныеОтпуска.Ссылка.ПредоставитьДополнительныйОтпуск
		|	И ОтпускДополнительныеОтпуска.КоличествоДнейКомпенсации > 0";
		
		Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Номер = Номер;
			
			КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
	   			Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", Выборка.ДатаНачалаПериодаОтсутствия);
	    				
			НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
			
			НоваяСтрока.Основание = Основание + " " + Выборка.Основание;
			
			Номер = Номер + 1;
								
		КонецЦикла;	
		
		ДанныеДляПроведения.Вставить("ДанныеРеестраОтпусков", ДанныеРеестраОтпусков);

	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;	
		
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Отпуск.Ссылка,
	|	Отпуск.ДокументРассчитан,
	|	Отпуск.Организация,
	|	Отпуск.ПериодРегистрации,
	|	Отпуск.ПорядокВыплаты,
	|	Отпуск.Дата,
	|	Отпуск.ПланируемаяДатаВыплаты,
	|	Отпуск.ДатаНачалаСобытия,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Отпуск.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	Отпуск.ФизическоеЛицо,
	|	Отпуск.ПредоставитьОтгул,
	|	Отпуск.ОсвобождатьСтавку,
	|	Отпуск.Сотрудник,
	|	Отпуск.ДатаНачалаПериодаОтсутствия,
	|	Отпуск.ДатаОкончанияПериодаОтсутствия,
	|	Отпуск.ИсправленныйДокумент,
	|	Отпуск.Номер,
	|	Отпуск.ПредоставитьОсновнойОтпуск,
	|	Отпуск.ДатаНачалаОсновногоОтпуска,
	|	Отпуск.ДатаОкончанияОсновногоОтпуска,
	|	Отпуск.ПредоставитьДополнительныйОтпуск,
	|	Отпуск.РасходДнейОтгула,
	|	Отпуск.РасходЧасовОтгула,
	|	Отпуск.КоличествоДнейОтгула,
	|	Отпуск.ДокументЗаполнения,
	|	Отпуск.ДокументЗаполнения.Номер КАК НомерДокументаЗаполнения,
	|	Отпуск.ДокументЗаполнения.Дата КАК ДатаДокументаЗаполнения
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|ГДЕ
	|	Отпуск.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.Отпуск.РаспределениеПоТерриториямУсловиямТруда КАК ОтпускРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	ОтпускРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускДополнительныеОтпуска.НомерСтроки,
	|	ОтпускДополнительныеОтпуска.ВидОтпуска,
	|	ОтпускДополнительныеОтпуска.ВидРасчета,
	|	ОтпускДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ОтпускДополнительныеОтпуска.КоличествоДней,
	|	ОтпускДополнительныеОтпуска.ДатаНачала,
	|	ОтпускДополнительныеОтпуска.ДатаОкончания,
	|	ОтпускДополнительныеОтпуска.КоличествоДнейКомпенсации,
	|	ОтпускДополнительныеОтпуска.ВидРасчетаКомпенсации,
	|	ОтпускДополнительныеОтпуска.Основание
	|ИЗ
	|	Документ.Отпуск.ДополнительныеОтпуска КАК ОтпускДополнительныеОтпуска
	|ГДЕ
	|	ОтпускДополнительныеОтпуска.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтпускНачисления.НомерСтроки,
	|	ОтпускНачисления.Начисление,
	|	ОтпускНачисления.ДатаНачала,
	|	ОтпускНачисления.ДатаОкончания,
	|	ОтпускНачисления.Результат,
	|	ОтпускНачисления.Подразделение,
	|	ОтпускНачисления.ВидЗанятости,
	|	ОтпускНачисления.НормаДней,
	|	ОтпускНачисления.НормаЧасов,
	|	ОтпускНачисления.ОтработаноДней,
	|	ОтпускНачисления.ОтработаноЧасов,
	|	ОтпускНачисления.Сотрудник,
	|	ОтпускНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	ОтпускНачисления.ИдентификаторСтрокиВидаРасчета,
	|	ОтпускНачисления.ГрафикРаботы,
	|	ОтпускНачисления.ВидУчетаВремени,
	|	ОтпускНачисления.ФиксСтрока,
	|	ОтпускНачисления.ФиксЗаполнение,
	|	ОтпускНачисления.ФиксРасчетВремени,
	|	ОтпускНачисления.ФиксРасчет,
	|	ОтпускНачисления.ВремяВЧасах,
	|	ОтпускНачисления.ГрафикРаботыНорма,
	|	ОтпускНачисления.ПериодРегистрацииВремени,
	|	ОтпускНачисления.СуммаВычета,
	|	ОтпускНачисления.КодВычета,
	|	ОтпускНачисления.ОплаченоДней,
	|	ОтпускНачисления.ОплаченоЧасов,
	|	ОтпускНачисления.ДокументОснование
	|ИЗ
	|	Документ.Отпуск.Начисления КАК ОтпускНачисления
	|ГДЕ
	|	ОтпускНачисления.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	ДополнительныеОтпуска = Результаты[2].Выгрузить();
	
	РеквизитыДляПроведения.ДополнительныеОтпуска = ДополнительныеОтпуска;

	Начисления = Результаты[3].Выгрузить();
	
	РеквизитыДляПроведения.Начисления = Начисления;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, ДокументРассчитан, Организация, ПериодРегистрации, ПорядокВыплаты, Дата, ПланируемаяДатаВыплаты, ДатаНачалаСобытия, 
		| ПериодРасчетаСреднегоЗаработкаНачало, ПериодРасчетаСреднегоЗаработкаОкончание, ФизическоеЛицо, ПредоставитьОтгул, ОсвобождатьСтавку, Сотрудник, ДатаНачалаПериодаОтсутствия, 
		| ДатаОкончанияПериодаОтсутствия, ИсправленныйДокумент, Номер, ПредоставитьОсновнойОтпуск, ДатаНачалаОсновногоОтпуска, ДатаОкончанияОсновногоОтпуска, ПредоставитьДополнительныйОтпуск, 
		| РасходДнейОтгула, РасходЧасовОтгула, КоличествоДнейОтгула, ВидРасчетаОтгул, ДополнительныеОтпуска, Начисления, РаспределениеПоТерриториямУсловиямТруда, 
		| ДокументЗаполнения, НомерДокументаЗаполнения, ДатаДокументаЗаполнения");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

// Проверяет, что сотрудник, указанный в документе работает в период отсутствия.
//
// Параметры:
//		ДокументОбъект	- ДокументОбъект.Отпуск
//		Отказ			- Булево
//
Процедура ПроверитьРаботающих(ДокументОбъект, Отказ) Экспорт
	
	Если НЕ (ДокументОбъект.ПредоставитьОсновнойОтпуск 
		Или ДокументОбъект.ПредоставитьКомпенсациюОсновногоОтпуска
		Или ДокументОбъект.ПредоставитьДополнительныйОтпуск) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПроверяемогоПериода 			= '00010101';
	ОкончаниеПроверяемогоПериода 		= '00010101';
	
	Если ДокументОбъект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда	
		НачалоПроверяемогоПериода 		= ДокументОбъект.ПериодРегистрации;
		ОкончаниеПроверяемогоПериода  	= ДокументОбъект.ПериодРегистрации;
	КонецЕсли;
	
	Если ДокументОбъект.ПредоставитьОсновнойОтпуск Тогда
		
		Если НЕ ЗначениеЗаполнено(НачалоПроверяемогоПериода) Тогда
			НачалоПроверяемогоПериода = ДокументОбъект.ДатаНачалаОсновногоОтпуска;
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ДатаНачалаОсновногоОтпуска) Тогда
			НачалоПроверяемогоПериода = Мин(НачалоПроверяемогоПериода, ДокументОбъект.ДатаНачалаОсновногоОтпуска);
		КонецЕсли;
		
		ОкончаниеПроверяемогоПериода = Макс(ОкончаниеПроверяемогоПериода, ДокументОбъект.ДатаОкончанияОсновногоОтпуска);
	КонецЕсли;
	
	Если ДокументОбъект.ПредоставитьДополнительныйОтпуск Тогда
		Для каждого ДополнительныйОтпуск Из ДокументОбъект.ДополнительныеОтпуска Цикл
			
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) Тогда
				
				Если НЕ ЗначениеЗаполнено(НачалоПроверяемогоПериода) Тогда
					НачалоПроверяемогоПериода = ДополнительныйОтпуск.ДатаНачала;
				Иначе
					НачалоПроверяемогоПериода = Мин(НачалоПроверяемогоПериода, ДополнительныйОтпуск.ДатаНачала);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) Тогда
				ОкончаниеПроверяемогоПериода = Макс(ОкончаниеПроверяемогоПериода, ДополнительныйОтпуск.ДатаОкончания);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= ДокументОбъект.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= НачалоПроверяемогоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ОкончаниеПроверяемогоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Сотрудник),
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект")
	);
	
КонецПроцедуры

Функция ДанныеСостоянийСотрудника(РеквизитыДляПроведения)
	
	ДанныеСостояний = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	
	Если РеквизитыДляПроведения.ПредоставитьОсновнойОтпуск Тогда
		НоваяСтрока = ДанныеСостояний.Добавить();
		НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		НоваяСтрока.Состояние = Перечисления.СостоянияСотрудника.ОтпускОсновной;
		НоваяСтрока.Начало = РеквизитыДляПроведения.ДатаНачалаОсновногоОтпуска;
		НоваяСтрока.Окончание = РеквизитыДляПроведения.ДатаОкончанияОсновногоОтпуска;
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ПредоставитьДополнительныйОтпуск Тогда
		Для Каждого СтрокаТаблицы Из РеквизитыДляПроведения.ДополнительныеОтпуска Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачала) 
				И Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаОкончания) Тогда
				// Если не заполнен период, то это — компенсация.
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ДанныеСостояний.Добавить();
			НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
			НоваяСтрока.Состояние = СостоянияСотрудников.СостояниеПоВидуОтпуска(СтрокаТаблицы.ВидОтпуска);
			НоваяСтрока.Начало = СтрокаТаблицы.ДатаНачала;
			НоваяСтрока.Окончание = СтрокаТаблицы.ДатаОкончания;
		КонецЦикла;
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ПредоставитьОтгул Тогда
		НоваяСтрока = ДанныеСостояний.Добавить();
		НоваяСтрока.Сотрудник = РеквизитыДляПроведения.Сотрудник;
		НоваяСтрока.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ДополнительныеВыходныеДниНеОплачиваемые");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПериодОтгула(РеквизитыДляПроведения));
	КонецЕсли;
	
	Возврат ДанныеСостояний;
	
КонецФункции

Функция ДанныеОбОтгулах(РеквизитыДляПроведения)

	ТаблицаОтгулов = Новый Структура("Организация, Сотрудник, Период, ВидДвижения, Дни, Часы");
	ТаблицаОтгулов.Период = ДатаНачалаОтгула(РеквизитыДляПроведения);
	ТаблицаОтгулов.ВидДвижения = ВидДвиженияНакопления.Расход;
	ТаблицаОтгулов.Организация = РеквизитыДляПроведения.Организация;
	ТаблицаОтгулов.Сотрудник = РеквизитыДляПроведения.Сотрудник;
	ТаблицаОтгулов.Дни = РеквизитыДляПроведения.РасходДнейОтгула; 
	ТаблицаОтгулов.Часы = РеквизитыДляПроведения.РасходЧасовОтгула;

	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаОтгулов);
	
КонецФункции

Функция ПериодОтгула(РеквизитыДляПроведения)
	
	Начало = ?(РеквизитыДляПроведения.ПредоставитьОсновнойОтпуск, КонецДня(РеквизитыДляПроведения.ДатаОкончанияОсновногоОтпуска)+1, '00010101');
	Если РеквизитыДляПроведения.ПредоставитьДополнительныйОтпуск Тогда
		Для Каждого СтрокаТаблицы Из РеквизитыДляПроведения.ДополнительныеОтпуска Цикл
			Начало = Макс(Начало , КонецДня(СтрокаТаблицы.ДатаОкончания)+1);
		КонецЦикла;
	КонецЕсли;
	Окончание = УчетРабочегоВремени.ДатаОкончанияПоГрафикуРаботыСотрудника(РеквизитыДляПроведения.Сотрудник, Начало, РеквизитыДляПроведения.КоличествоДнейОтгула);
	
	Возврат Новый Структура("Начало, Окончание", Начало, Окончание);
	
КонецФункции

Функция ДатаНачалаОтгула(РеквизитыДляПроведения)

	ОтгулыНачисления = РеквизитыДляПроведения.Начисления.НайтиСтроки(Новый Структура("Начисление", РеквизитыДляПроведения.ВидРасчетаОтгул));
	Если ОтгулыНачисления.Количество() > 0 Тогда
		Возврат ОтгулыНачисления[0].ДатаНачала;
	Иначе	
		Возврат РеквизитыДляПроведения.Дата;
	КонецЕсли;

КонецФункции

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок, ПоСтатьямФинансирования = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Организация,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Номер КАК НомерДокумента,
	|	Документ.ДатаНачалаПериодаОтсутствия КАК ДатаНачалаОтсутствия,
	|	Документ.ДатаОкончанияПериодаОтсутствия КАК ДатаОкончанияОтсутствия,
	|	Документ.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоРасчетногоПериода,
	|	Документ.ПериодРасчетаСреднегоЗаработкаОкончание КАК ОкончаниеРасчетногоПериода,
	|	Документ.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	Документ.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Документ.Ответственный
	|ИЗ
	|	Документ.Отпуск КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО Документ.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И Документ.ДатаНачалаСобытия = ВТКадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Документ.Организация = Организации.Ссылка
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	
	Результат = Запрос.Выполнить();
	
	ДанныеДокументов = Новый Массив;
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеДокументов;
	КонецЕсли;
		
	ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке("Отпуск", МассивСсылок);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
		ДанныеДокумента.РеквизитыДокумента.ВидОтпуска = ?(Выборка.Ссылка.ДополнительныеОтпуска.Количество() = 0, "Основной отпуск", "Дополнительный отпуск");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
		
		ДанныеОНачислениях 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОНачислениях"], 		"Ссылка", Выборка.Ссылка);
		ДанныеОВремени 		= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОВремени"], 			"Ссылка", Выборка.Ссылка);
		ДанныеОбИндексации 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОбИндексации"], 		"Ссылка", Выборка.Ссылка);
		ДанныеДокумента.ДанныеНачислений = ДанныеНачисленийДокумента(Выборка.Ссылка, "Начисления");
		
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
		ДополнительныеПараметры.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
		ДополнительныеПараметры.НачалоПериода = Выборка.НачалоРасчетногоПериода;
		ДополнительныеПараметры.ОкончаниеПериода = Выборка.ОкончаниеРасчетногоПериода;
		ДополнительныеПараметры.ПоСтатьямФинансирования = ПоСтатьямФинансирования;
		ДополнительныеПараметры.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням;
		ДополнительныеПараметры.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные");;
		
		ДанныеДокумента.ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
		
		ДанныеДокумента.ПараметрыРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням;
		ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок = Ложь;
		ДанныеДокумента.ПараметрыРасчета.НачалоРасчетногоПериода = Выборка.НачалоРасчетногоПериода;
		ДанныеДокумента.ПараметрыРасчета.ОкончаниеРасчетногоПериода = Выборка.ОкончаниеРасчетногоПериода;
		
		//ДанныеДокумента.ДанныеНачислений = ДанныеНачисленийОтпускных;
		ДанныеДокументов.Добавить(ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Функция ДанныеНачисленийДокумента(Документ, ТабличнаяЧастьНачислений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтпускНачисления.НомерСтроки КАК НомерСтроки,
		|	ОтпускНачисления.Начисление КАК ВидНачисления,
		|	ОтпускНачисления.Результат КАК Начислено,
		|	ОтпускНачисления.ОтработаноДней,
		|	ОтпускНачисления.ОтработаноЧасов,
		|	ОтпускНачисления.ДатаНачала КАК ДатаНачала,
		|	ОтпускНачисления.ДатаОкончания КАК ДатаОкончания,
		|	РАЗНОСТЬДАТ(ОтпускНачисления.ДатаНачала, ОтпускНачисления.ДатаОкончания, ДЕНЬ) + 1 КАК КалендарныхДней
		|ИЗ
		|	Документ.Отпуск."+ТабличнаяЧастьНачислений+" КАК ОтпускНачисления
		|ГДЕ
		|	ОтпускНачисления.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	Возврат Запрос.Выполнить().Выгрузить()
		
КонецФункции	

Процедура СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаНачалаСобытия КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.Отпуск КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости");
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудники";
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Истина);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru='Отпуск';uk='Відпустка'"));
КонецПроцедуры 

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов);	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт 
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);	
КонецФункции

#КонецОбласти

Функция ДатаНаступленияСтраховогоСлучая(Ссылка) Экспорт 
	
	ДатаНаступленияСтраховогоСлучая = Неопределено;
	
	Если ЗначениеЗаполнено(Ссылка) И ТипЗнч(Ссылка) = Тип("ДокументСсылка.Отпуск") Тогда
		ДатаНаступленияСтраховогоСлучая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаНачалаСобытия");
	КонецЕсли;
	
	Возврат ДатаНаступленияСтраховогоСлучая;	
	
КонецФункции

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 
	
	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ОписаниеВидаОтпуска(ВидОтпуска) Экспорт
	
	СпособРасчетаПоКалендарнымДням = Истина;
	ЕжегодныйОтпуск = Истина;
	
	Если ЗначениеЗаполнено(ВидОтпуска) Тогда
		РеквизитыОтпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОтпуска, "СпособРасчетаОтпуска, ОтпускЯвляетсяЕжегодным");
		СпособРасчетаПоКалендарнымДням = ?(РеквизитыОтпуска.СпособРасчетаОтпуска = Перечисления.СпособыРасчетаОтпуска.ВРабочихДнях, Ложь, Истина) ;
		
		ЕжегодныйОтпуск = РеквизитыОтпуска.ОтпускЯвляетсяЕжегодным
		ИЛИ ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ДополнительныйНаДетей");
		
	КонецЕсли;
	
	Возврат Новый Структура("СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск", СпособРасчетаПоКалендарнымДням, ЕжегодныйОтпуск); 
	
КонецФункции

Функция ПланируемаяДатыВыплатыОтпуска(ДатаНачалаСобытия, ПроизводственныйКалендарьСотрудника) Экспорт
	ПланируемаяДатыВыплатыОтпуска = Неопределено;
	
	Если ЗначениеЗаполнено(ДатаНачалаСобытия) И ЗначениеЗаполнено(ПроизводственныйКалендарьСотрудника) Тогда
		
		ДатаТриДняДоОтпуска = ДатаНачалаСобытия -(86400 * 3);
		
		ДатыРабочихДней = КалендарныеГрафики.ПолучитьДатыРабочихДней(ПроизводственныйКалендарьСотрудника, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаТриДняДоОтпуска), Истина, Ложь);
		
		Если ДатыРабочихДней <> Неопределено Тогда
			ПланируемаяДатыВыплатыОтпуска = ДатыРабочихДней.Получить(ДатаТриДняДоОтпуска);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПланируемаяДатыВыплатыОтпуска
КонецФункции

Функция РабочиеПериодыДляОтпусков(Объект)
	
	РабочиеПериодыДляОтпусков = Новый Соответствие;
	Если Объект.ПредоставитьОсновнойОтпуск Или Объект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		РабочиеПериодыДляОтпусков.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), 
		Новый Структура("РабочийПериодС, РабочийПериодПо", Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, Объект.КонецПериодаЗаКоторыйПредоставляетсяОтпуск));
	КонецЕсли;
	
	Если Объект.ПредоставитьДополнительныйОтпуск Тогда  
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			РабочиеПериодыДляОтпусков.Вставить(ДополнительныйОтпуск.ВидОтпуска, 
			Новый Структура("РабочийПериодС, РабочийПериодПо", ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск));
		КонецЦикла;
	КонецЕсли;
	
	Возврат РабочиеПериодыДляОтпусков;
	
КонецФункции

Функция ОснованияДляОтпусков(Объект)
	
	ОснованияДляОтпусков = Новый Соответствие;
	Если Объект.ПредоставитьОсновнойОтпуск Или Объект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		ОснованияДляОтпусков.Вставить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), Объект.Основание);
	КонецЕсли;
	
	Если Объект.ПредоставитьДополнительныйОтпуск Тогда  
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			ОснованияДляОтпусков.Вставить(ДополнительныйОтпуск.ВидОтпуска, ДополнительныйОтпуск.Основание);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОснованияДляОтпусков;
	
КонецФункции

Процедура ЗаполнитьСведенияОПособиях(РеквизитыДляПроведения, ДанныеДляПроведения)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Ссылка,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ЛОЖЬ КАК Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	0 КАК РезультатВТомЧислеЗаСчетФБ
	|ПОМЕСТИТЬ ВТНачисленияДляУчетаПособий
	|ИЗ
	|	Документ.Отпуск.Начисления КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНачислений.Сторно
	|			ТОГДА ТаблицаНачислений.СторнируемыйДокумент
	|		ИНАЧЕ ТаблицаНачислений.Ссылка
	|	КОНЕЦ,
	|	ТаблицаНачислений.Начисление,
	|	ТаблицаНачислений.Сотрудник,
	|	ТаблицаНачислений.ВидЗанятости,
	|	ТаблицаНачислений.Сторно,
	|	ТаблицаНачислений.ОплаченоДней,
	|	ТаблицаНачислений.Результат,
	|	0
	|ИЗ
	|	Документ.Отпуск.НачисленияПерерасчет КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Выполнить();
	
	ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации);

	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособиях(ДанныеДляПроведения, ПособиеПлатитУчастникПилотногоПроекта);

КонецПроцедуры

Функция ПериодОтсутствия(ПериодыОтсутствий) Экспорт
	
	ПериодОтсутствия = Новый Структура("НачалоПериода,ОкончаниеПериода", '00010101', '00010101');
	
	Для каждого Период Из ПериодыОтсутствий Цикл
		Если ЗначениеЗаполнено(Период.НачалоПериода) Тогда
			Если НЕ ЗначениеЗаполнено(ПериодОтсутствия.НачалоПериода) Тогда
				ПериодОтсутствия.НачалоПериода = Период.НачалоПериода;
			Иначе
				ПериодОтсутствия.НачалоПериода = Мин(ПериодОтсутствия.НачалоПериода, Период.НачалоПериода);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Период.ОкончаниеПериода) Тогда
			ПериодОтсутствия.ОкончаниеПериода = Макс(ПериодОтсутствия.ОкончаниеПериода, Период.ОкончаниеПериода);
		КонецЕсли;	   
	КонецЦикла;
	
	Возврат ПериодОтсутствия;
	
КонецФункции

Функция ПериодыОтсутствий(Объект) Экспорт
	
	ПериодыОтсутствий = Новый ТаблицаЗначений;
	ПериодыОтсутствий.Колонки.Добавить("НачалоПериода");
	ПериодыОтсутствий.Колонки.Добавить("ОкончаниеПериода");
	
	КонецИнтервала = Дата(1,1,1);
	
	Если Объект.ПредоставитьОсновнойОтпуск Тогда
		ПериодОтсутствия = ПериодыОтсутствий.Добавить();
		ПериодОтсутствия.НачалоПериода = Объект.ДатаНачалаОсновногоОтпуска;
		ПериодОтсутствия.ОкончаниеПериода  = Объект.ДатаОкончанияОсновногоОтпуска;
		КонецИнтервала = Макс(КонецИнтервала, ПериодОтсутствия.ОкончаниеПериода);
	КонецЕсли;
	
	Если Объект.ПредоставитьДополнительныйОтпуск Тогда
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			ПериодОтсутствия = ПериодыОтсутствий.Добавить();
			ПериодОтсутствия.НачалоПериода = ДополнительныйОтпуск.ДатаНачала;
			ПериодОтсутствия.ОкончаниеПериода  = ДополнительныйОтпуск.ДатаОкончания;
			КонецИнтервала = Макс(КонецИнтервала, ПериодОтсутствия.ОкончаниеПериода);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ПредоставитьОтгул Тогда
		ПериодОтсутствия = ПериодыОтсутствий.Добавить();
		ПериодОтсутствия.НачалоПериода = КонецДня(КонецИнтервала) + 1;
		ПериодОтсутствия.ОкончаниеПериода  = УчетРабочегоВремени.ДатаОкончанияПоГрафикуРаботыСотрудника(Объект.Сотрудник, ПериодОтсутствия.НачалоПериода, Объект.КоличествоДнейОтгула);
	КонецЕсли;
	
	Возврат ПериодыОтсутствий;
	
КонецФункции

#КонецОбласти

#КонецЕсли
