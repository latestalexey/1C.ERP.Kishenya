
&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	НовыйДокумент = Параметры.Ключ.Пустая();
	
	Если НовыйДокумент Тогда
		ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
		ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", Ложь, Ложь, Ложь);
	КонецЕсли;	
	
	ДоступенВводНового = Пользователи.РолиДоступны("ДобавлениеИзменениеОтпусков");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НовыйДокумент Тогда
		
		Объект.ПредоставитьОсновнойОтпуск = Истина;
		
		ЗаполнитьВидыРасчетовОсновногоОтпуска();
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник	= Параметры.Сотрудник;
		КонецЕсли;
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
		"Объект.Организация",
		"Объект.Ответственный",
		"Объект.ПериодРегистрации");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗаполнитьДанныеФормыПоОрганизации();
		
		ПриПолученииДанныхНаСервере();
		
		УстановитьДатуНачалаСобытия(ЭтаФорма);
		
		УстановитьПланируемуюДатыВыплаты();
		
		Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
			ВремяНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
			РассчитатьНачисленияНаСервере(Ложь, Истина);
			ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("РасчетДокументаОтпуск", ВремяНачалаЗамера);
		Иначе
			ОчиститьРассчитанныеДанные();
			ОбновитьДанныеДляРасчетаСреднего = Истина;
			УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
		КонецЕсли;
		
	Иначе
		
		Если Параметры.Свойство("ВыполнитьПерезаполнениеСведенийОСреднемЗаработке") Тогда
			
			ОбновитьДанныеДляРасчетаСреднего = Истина;
			Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
				ВремяНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
				РассчитатьНачисленияНаСервере(Ложь, Истина);
				ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("РасчетДокументаОтпуск", ВремяНачалаЗамера);
			Иначе
				ОчиститьРассчитанныеДанные();
				УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РегистрацияНачисленийДоступна Тогда 
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КонецЕсли;
	
	ПоказатьНадписьДней(ЭтаФорма, Объект);
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	УстановитьОтметкуНезаполненогоПериодаЗаКоторыйПредоставляетсяОсновнойОтпуск();

	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
	Если ИспользуетсяРасчетЗарплаты И Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.ДокументРассчитан Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
	
	УстановитьЗаголовокФлажкаРассчитатьЗарплату();
	УстановитьЗаголовокСтраницыДополнительныеОтпуска();
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "Сотрудник");
	КонецЕсли; 

	ОкончательныйРасчетНДФЛ = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнениеВыполнено = Ложь;
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");	
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РасчетНеобходимоВыполнить Тогда
		
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПроведениеДокументаОтпуск");
			
		КонецЕсли;
		
		Если НеобходимоПерезаполнитьНачисления Тогда
			
			ПерезаполнитьИРассчитатьНачисленияНаКлиенте();
			
		Иначе
			
			РассчитатьНачисленияНаКлиенте();
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РеквизитыВДанные(ТекущийОбъект);
	Если ЗаполнениеВыполнено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыСреднегоЗаработка", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыЗарплаты", Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеВРеквизиты();
	
	СохраняемыеЗначения = Новый Структура;
	СохраняемыеЗначения.Вставить("Бухгалтер", ТекущийОбъект.Бухгалтер);
	СохраняемыеЗначения.Вставить("РаботникКадровойСлужбы", ТекущийОбъект.РаботникКадровойСлужбы);
	СохраняемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", ТекущийОбъект.ДолжностьРаботникаКадровойСлужбы);
	
	ЗарплатаКадры.СохранитьЗначенияЗаполненияОтветственныхРаботников(ТекущийОбъект.Организация, СохраняемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписанДокументОтпуск", , ЭтаФорма);
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Оповестить("ИсправленДокумент", , Объект.ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеНДФЛНаСервере(Параметр);
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаУдержаний" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеУдержанийНаСервере(Параметр);
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
		ИначеЕсли ИмяСобытия = "ИзмененоРаспределениеИсточниковФинансирования" Тогда
			ЗарплатаКадрыРасширенныйКлиент.ОбработкаОповещенияИзмененияРаспределенияИсточниковФинансирования(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		ИначеЕсли (ИмяСобытия = "ИзмененоСторнированиеНачислений" Или ИмяСобытия = "ИсправленДокумент") И Источник = Объект.Ссылка Тогда
			ДанныеВРеквизиты();
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаВзносов" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеВзносовНаСервере(Параметр);
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗаписанДокументОтпуск" 
		Или ИмяСобытия = "ЗаписанДокументОтпускБезСохраненияОплаты")
		И Источник.ВладелецФормы = ЭтаФорма Тогда
		ЗаполнитьОтсутствияПоДругимМестамРаботы();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьДокументаКомандировка"
		И Источник = ЭтаФорма Тогда
		ЗаполнитьОтсутствияПоДругимМестамРаботы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если РегистрацияНачисленийДоступна Тогда
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ОписаниеДокумента", ОписаниеДокумента(ЭтаФорма));
		ПараметрыДокумента.Вставить("ОписаниеТаблицФормы", СтруктураОписанияТаблицДляРаспределенияРезультата(ЭтаФорма));
		ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержаний(Отказ, ЭтаФорма, ПараметрыДокумента);
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ИзменениеСотрудникаВФормеДокументаОтпуск");		
	
	СотрудникПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ДатаНачалаПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияОсновногоОтпускаПриИзменении(Элемент)
	
	ДатаОкончанияОсновногоОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейОсновногоОтпускаПриИзменении(Элемент)
	
	КоличествоДнейОсновногоОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойОтпускПриИзменении(Элемент)
	
	ОсновнойИлиДополнительныйОтпускПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставитьКомпенсациюОсновногоОтпускаПриИзменении(Элемент)
	
	ПредоставитьКомпенсациюОсновногоОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейЧасовКомпенсацииОтпускаПриИзменении(Элемент)
	
	ДнейЧасовКомпенсацииОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставитьМатериальнуюПомощьПриОтпускеПриИзменении(Элемент)
	
	ПредоставитьМатериальнуюПомощьПриОтпускеПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставитьЕдиновременнуюВыплатуКОтпускуПриИзменении(Элемент)
	
	ПредоставитьЕдиновременнуюВыплатуКОтпускуПриИзменениииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйОтпускПриИзменении(Элемент)
	
	ОсновнойИлиДополнительныйОтпускПриИзмененииНаСервере();
	
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаОсновногоОтпускаПриИзменении(Элемент)
	ВидРасчетаОсновногоОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаКомпенсацииОсновногоОтпускаПриИзменении(Элемент)
	ВыполнитьРасчетИПерезаполнениеНачислений();
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗарплатуПриИзменении(Элемент)
	
	ОбновитьДанныеДляРасчетаСреднего = Истина;
	
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПорядокВыплатыПриИзменении(Элемент)
	
	ПерезаполнитьНачисления = Неопределено;
	ПорядокВыплатыПриИзмененииНаСервере(ПерезаполнитьНачисления);
	
	Если ПерезаполнитьНачисления = Истина Тогда
		ВыполнитьРасчетИПерезаполнениеНачислений();
	ИначеЕсли ПерезаполнитьНачисления = Ложь Тогда
		ВыполнитьРасчетИПерезаполнениеНачислений(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		ВыполнитьРасчетИПерезаполнениеНачислений(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументРассчитанПриИзменении(Элемент)
	ДокументРассчитанПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументРассчитанПриИзмененииНаСервере()
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникКадровойСлужбыПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредоставитьОтгулПриИзменении(Элемент)
	
	ОтгулПриИзмененииНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейОтгулаПриИзменении(Элемент)
	ВыполнитьРасчетИПерезаполнениеНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненностьДанныхИнформационныйТекстОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УчетСреднегоЗаработкаКлиент.ПоказатьПричиныПерерасчетаСреднегоЗаработка(Объект.Ссылка, 
		СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Дополнительные отпуска.

&НаКлиенте
Процедура ДополнительныеОтпускаВидОтпускаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДополнитьПараметрыВыбораВидаОтпускаВидомОтпускаТекущейСтроки();
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ДополнительныеОтпуска.ТекущиеДанные.ДатаНачала = ПодобратьСледущуюДатуНачалаОтпуска();
	КонецЕсли;
	ПерезаполнитьПриОкончанииРедактирования = Ложь;
  
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования 
		И Не НоваяСтрока Тогда
		УдалитьВидОтпускаТекущейСтрокиИзПараметровВыбораВидаОтпуска();
		Возврат;
	КонецЕсли;
	
	 ДополнительныеОтпускаПриОкончанииРедактированияНаСервере();
	 
	 Если ПерезаполнитьПриОкончанииРедактирования Тогда
		 ВыполнитьРасчетИПерезаполнениеНачислений();
	 КонецЕсли; 
	 
 КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПослеУдаления(Элемент)
	
	ДополнительныеОтпускаПослеУдаленияНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаВидОтпускаПриИзменении(Элемент)
	
	ДополнительныеОтпускаВидОтпускаПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ПерезаполнитьПриОкончанииРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаДатаНачалаПриИзменении(Элемент)
	
	ДополнительныеОтпускаДатаНачалаПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ПерезаполнитьПриОкончанииРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаДатаОкончанияПриИзменении(Элемент)
	
	ДополнительныеОтпускаДатаОкончанияПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ПерезаполнитьПриОкончанииРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаКоличествоДнейПриИзменении(Элемент)
	ДополнительныеОтпускаКоличествоДнейПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ПерезаполнитьПриОкончанииРедактирования = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаВидРасчетаПриИзменении(Элемент)
	
	ПерезаполнитьПриОкончанииРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзменении(Элемент)
	
	ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ПерезаполнитьПриОкончанииРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаВидРасчетаКомпенсацииПриИзменении(Элемент)
	
	ПерезаполнитьПриОкончанииРедактирования = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Начисления

&НаКлиенте
Процедура НачисленияПриИзменении(Элемент)
	
	УстановитьСвойствоДокументРассчитан();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
	  Элементы.Начисления.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);	
	ПерезаполнитьПриОкончанииРедактирования = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	Если ПерезаполнитьПриОкончанииРедактирования Тогда
		НеПерезаполнятьПриРасчете = Истина;
		ВыполнитьРасчетИПерезаполнениеНачислений(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Ложь, Ложь);
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	ПерезаполнитьПриОкончанииРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Истина, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Начисления перерасчет.

&НаКлиенте
Процедура НачисленияПерерасчетПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	РасчетЗарплатыРасширенныйКлиент.ПередУдалениемСтрокиПерерасчета(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование) 
	Если НоваяСтрока Тогда
	  Элементы.НачисленияПерерасчет.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;

	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетРезультатПриИзменении(Элемент)
	ОбновитьПерерасчетИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Отсутствия по другим местам работы.

&НаКлиенте
Процедура ОтсутствияПоДругимМестамРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОтсутствияПоДругимМестамРаботыСсылка" Тогда
		
		СтандартнаяОбработка = Ложь;	
		
		Строка = ЭтотОбъект.ОтсутствияПоДругимМестамРаботы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ПоказатьЗначение(, Строка.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(Объект.Ссылка, "Отпуск");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Сторнировать(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Сторнировать(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "Отпуск");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(Объект.ИсправленныйДокумент, "Отпуск");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКСторно(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКСторно(ЭтаФорма.ДокументСторно);
КонецПроцедуры
// Конец ИсправлениеДокументов

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда)
	
	ОчиститьСообщения();
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма)) Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РасчетДокументаОтпуск");
		
		Если НеПерезаполнятьПриРасчете Тогда
			РассчитатьНачисленияНаСервере(Истина, Ложь);
		Иначе
			РассчитатьНачисленияНаСервере(Истина);
		КонецЕсли;
		
		ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
		НеобходимоПерезаполнитьНачисления = Ложь;
		
	Иначе
		ОчиститьРассчитанныеДанные();
		ОбновитьДанныеДляРасчетаСреднего = Истина;
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	КонецЕсли;		
	
КонецПроцедуры
&НаСервере
Процедура ОтменитьРучнуюКорректировкуНаСервере()
	
	Объект.РучнаяКорректировкаСреднегоЗаработка = Ложь;
	ОбновитьДанныеДляРасчетаСреднего = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокЗавершение", ЭтотОбъект);
	УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаОбщий(ПараметрыРедактированияСреднегоЗаработка(), ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежноеСодержание(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьОткрытьДенежноеСодержаниеЗавершение", ЭтотОбъект);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
		Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(Объект, "Отпуск","ЕжегодныйОтпуск", ЭтаФорма, ОписаниеДокумента(ЭтаФорма),Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда
		ОбновитьДанныеДляРасчетаСреднего = Ложь;
		ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования);
		ВыполнитьРасчетИПерезаполнениеНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОткрытьДенежноеСодержаниеЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда
		ОбновитьДанныеДляРасчетаСреднего = Ложь;
		ВыполнитьРасчетИПерезаполнениеНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеУдержаний(Команда)
	
	РасчетЗарплатыРасширенныйКлиент.ОткрытьФормуПодробнееОРасчетеУдержаний(Объект, "Отпуск", ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Команда)
	
	УчетНДФЛКлиентРасширенный.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект, "Отпуск", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеВзносов(Команда)
	
	УчетСтраховыхВзносовКлиент.ОткрытьФормуПодробнееОРасчетеВзносов(Объект, "Отпуск", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Объект.Сотрудник);
	
КонецПроцедуры


&НаСервере
Функция НДФЛПодробнееНаСервере(ФизическиеЛица) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	
	НДФЛПодробнее = Новый Массив;
	НДФЛПодробнее.Добавить(ДокументОбъект.Ссылка);
	
	Возврат НДФЛПодробнее;
	
КонецФункции

&НаКлиенте
Процедура ПерерасчетПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьЗаявкуСотрудника(Команда)

	ПоказатьЗначение(, Объект.ЗаявкаСотрудника);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтпускСовместителю(Команда)
	
	Совместитель = Неопределено;
	ОрганизацияСовместителя = Неопределено;
	
	Если ЭтотОбъект.ДругиеСотрудникиФизическогоЛица.Количество() = 1 Тогда
		ОрганизацияСовместителя = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Организация;
		Совместитель = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Сотрудник;
	КонецЕсли;
	
	ОткрытьФормуНовогоОтпускаСовместителя(Совместитель, ОрганизацияСовместителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтпускБезОплатыСовместителю(Команда)
	
	ПериодОтсутствия = ПериодОтсутствия(Объект);
	
	Если Не ЗначениеЗаполнено(ПериодОтсутствия.НачалоПериода)
		Или Не ЗначениеЗаполнено(ПериодОтсутствия.ОкончаниеПериода) Тогда
		Возврат;
	КонецЕсли;
	
	Совместитель = Неопределено;
	ОрганизацияСовместителя = Неопределено;

	Если ЭтотОбъект.ДругиеСотрудникиФизическогоЛица.Количество() = 1 Тогда
		ОрганизацияСовместителя = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Организация;
		Совместитель = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Сотрудник;
	КонецЕсли;
	
	ОткрытьФормуНовогоОтпускаБезОплатыСовместителя(ПериодОтсутствия.НачалоПериода, ПериодОтсутствия.ОкончаниеПериода, Совместитель, ОрганизацияСовместителя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения) Экспорт
	
	ПараметрыДляРаспределения.ОписаниеДокумента       = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	ОтражениеЗарплатыВБухучетеРасширенный.РаспределитьЗависимыеРезультатыВФорме(ЭтаФорма, ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата(Форма)

	ОписанияТаблиц = Новый Структура;
	ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
	ОписанияТаблиц.Вставить("ПогашениеЗаймов", ОписаниеТаблицыПогашениеЗаймов());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаСервере
Процедура ОбновитьФормуПоВариантуРасчета()

	Если Объект.РасчетДенежногоСодержания Тогда
		ЗаголовокГруппыСреднийЗаработокИнфо = НСтр("ru='Сохраняемое денежное содержание';uk='Зберігається грошове утримання'");
		Элементы.СреднийЗаработокСтраницы.ТекущаяСтраница = Элементы.ДенежноеСодержаниеСтраница;
	Иначе
		ЗаголовокГруппыСреднийЗаработокИнфо = НСтр("ru='Средний заработок';uk='Середній заробіток'");
		Элементы.СреднийЗаработокСтраницы.ТекущаяСтраница = Элементы.СреднийЗаработокСтраница;
	КонецЕсли;
	
	ДополнитьПараметрыВыбораНачисленийКатегорией();
	
КонецПроцедуры

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере()

	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(НовыйДокумент);
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(НовыйДокумент);

	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(НовыйДокумент)
	
	// Устанавливаем значения реквизитов формы.
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	УстановитьДоступностьРегистрацииНачислений();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитатьПостоянныеКадровыеДанныеСотрудника();
	ПрочитатьПроизводственныйКалендарьСотрудника();

	ОбновитьНадписьРасшифровкаОстаткаОтпуска(ЭтаФорма);
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	УстановитьВидимостьОтсутствияПоДругимМестамРаботы();
	
	// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
	ДополнитьФорму(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(НовыйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Досоздаем форму.
	ДополнитьФорму(Ложь);
	ДополнитьФорму();
	
	// Добавление элементов форм.
	ОбновитьФормуПоВариантуРасчета();
	
	// чтение данных
	ДанныеВРеквизиты();
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	ОбновитьПерерасчетИтог(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	
	// Установка свойств элементов.
	УстановитьВидимостьПерерасчетов();
	УстановитьПараметрыВыбораВидаОтпуска(ЭтотОбъект);
	УстановитьВидимостьОтпускаПострадавшимНаЧАЭС();
	ЗаполнитьИнформациюЗаполненностиДанных();
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьУсловноеОформлениеДополнительныхОтпусков();
	ОбновитьДанныеДляРасчетаСреднего = Истина;
	НастроитьОтображениеГруппыПодписантов();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложеного создания.	
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		
		ЗаполнитьСтруктуруРеквизитовИСпособовРасчетаОтпуска();
		
		// Создание элементов.
		ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтаФорма, НСтр("ru='Расчет утвердил';uk='Розрахунок затвердив'"), "РасчетчикГруппа", "ДокументРассчитан", "Рассчитал");
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			Модуль.ГруппаЗаявкаСотрудникаДополнитьФорму(ЭтаФорма);
		КонецЕсли;
		
		// Установка свойств элементов формы.
		УстановитьВидимостьУдержаний(ЭтаФорма);
		УстановитьВидимостьРасчетныхПолей();
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыУдержаний(), "Удержания", , Ложь,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(
			ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыСохраняемоеДенежноеСодержание(), "Начисления", , Ложь,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		КонецЕсли;	
			
		ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(
			ЭтаФорма,,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(
			ЭтаФорма,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПараметрыРедактированияСреднегоЗаработка()
	
	ПараметрыРедактирования = УчетСреднегоЗаработкаКлиентСервер.ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу();
	ПараметрыРедактирования.ДокументСсылка = Объект.Ссылка;
	ПараметрыРедактирования.Сотрудник = Объект.Сотрудник;
	ПараметрыРедактирования.Организация = Объект.Организация;
	ПараметрыРедактирования.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРедактирования.Начисление = Объект.ВидРасчетаОсновногоОтпуска;
	ПараметрыРедактирования.НачалоПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРедактирования.ОкончаниеПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаОкончание; 
	ПараметрыРедактирования.ФиксПериодРасчета = Объект.ФиксПериодРасчетаСреднегоЗаработка;
	ПараметрыРедактирования.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные");;
	ПараметрыРедактирования.РучнаяКорректировкаСреднегоЗаработка = Объект.РучнаяКорректировкаСреднегоЗаработка;
	ПараметрыРедактирования.СреднийЗаработок = Объект.СреднийЗаработок;
	
	УчетСреднегоЗаработка.ЗаполнитьТаблицыДанныхСреднегоЗаработкаПоДокументу(Объект, ПараметрыРедактирования);
	
	СпособыРасчета = Новый Массив;
	Для Каждого СпособРасчета Из СпособыРасчетаСреднегоЗаработка Цикл
		СпособыРасчета.Добавить(СпособРасчета.Значение);
	КонецЦикла;	
	ПараметрыРедактирования.СпособыРасчета = СпособыРасчета;
	
	Если ОтпускНачинаетсяВСледующемМесяце() Тогда
		// Если это увольнение в последний день месяца передаем данные документа для проведения, 
		// чтобы в случае перечитывания в калькуляторе учета прежде записать начисления документа в учет,
		// это нужно, т.к. при увольнении последним днем месяца текущий месяц входит в базу расчета среднего заработка.
		ДанныеДляПроведения = ДанныеДокументаДляПроведения();
		// Уничтожаем менеджер временных таблиц.
		ДанныеДляПроведения.МенеджерВременныхТаблиц = Неопределено;
		ПараметрыРедактирования.ДокументВладелецДанныеАдрес = ПоместитьВоВременноеХранилище(ДанныеДляПроведения, Новый УникальныйИдентификатор);
	КонецЕсли;

	Возврат ПараметрыРедактирования;
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетИПерезаполнениеНачислений(ПерезаполнитьНачисления = Истина)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
	     Возврат;
	КонецЕсли;

	Если ПерезаполнитьНачисления Тогда
		ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "ПерезаполнитьИРассчитатьНачисленияНаКлиенте");
		НеобходимоПерезаполнитьНачисления = Истина;
	ИначеЕсли Не НеобходимоПерезаполнитьНачисления Тогда
		ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьНачисленияНаКлиенте");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисленияНаКлиенте()
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РасчетДокументаОтпуск");
		РассчитатьНачисленияНаСервере(,Ложь);
		ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
		ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	Иначе
		ОчиститьРассчитанныеДанные();
		ОбновитьДанныеДляРасчетаСреднего = Истина;
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьИРассчитатьНачисленияНаКлиенте()
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РасчетДокументаОтпуск");
		РассчитатьНачисленияНаСервере();
		ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
		НеобходимоПерезаполнитьНачисления = Ложь;
	Иначе
		ОчиститьРассчитанныеДанные();
		ОбновитьДанныеДляРасчетаСреднего = Истина;
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере(ВыводитьСообщения = Ложь, ПерезаполнитьНачисления = Истина)
	
	НеПерезаполнятьПриРасчете = Ложь;
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПерезаполнитьНачисления Тогда
		ЗаполнитьНачисленияДокументаПоКатегориям();
	КонецЕсли;
	
	Документ = РеквизитФормыВЗначение("Объект");
	Если Не Документ.ДокументГотовКРасчету(ВыводитьСообщения) Тогда
		ОчиститьРассчитанныеДанные();
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
		Возврат;
	КонецЕсли;

	ПерезаполнитьНачисленияСотрудника(,,ПерезаполнитьНачисления);
	УстановитьСвойствоДокументРассчитан();
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);

КонецПроцедуры

#Область ЗаполнитьВидыРасчетовПоВидамОтпусков

&НаСервере
Процедура ЗаполнитьНачисленияДокументаПоКатегориям()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВидыРасчетовОсновногоОтпуска();
	
	ЗаполнитьВидыРасчетовДополнительныхОтпусков();
	
	ЗаполнитьВидыРасчетовОтгула();	
	
	ЗаполнитьВидыРасчетовЕдиновременнойВыплаты();
	
	ЗаполнитьВидыРасчетовМатериальнойПомощи();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРасчетовОсновногоОтпуска()
	
	КатегорияОтпуск = КатегорияНачисленияОтпуск();
	КатегорияКомпенсация = КатегорияНачисленияКомпенсацияОтпуска();  
	
	ОтборОтпуск = Новый Структура("ВидОтпуска,ВидВремени");
	ОтборОтпуск.Вставить("ВидВремени", Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное);
	
	ОтборКомпенсация = Новый Структура("ВидОтпуска");

	Если Объект.ПредоставитьОсновнойОтпуск И НеобходимоЗаполнитьВидРасчета(Объект.ВидРасчетаОсновногоОтпуска, КатегорияОтпуск) Тогда
		Объект.ВидРасчетаОсновногоОтпуска = Неопределено;
		ОтборОтпуск.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаОсновногоОтпуска, КатегорияОтпуск, ОтборОтпуск);
	КонецЕсли;	
	
	Если Объект.ПредоставитьКомпенсациюОсновногоОтпуска И НеобходимоЗаполнитьВидРасчета(Объект.ВидРасчетаКомпенсацииОсновногоОтпуска, КатегорияКомпенсация, Объект.КоличествоДнейКомпенсацииОсновногоОтпуска) Тогда
		Объект.ВидРасчетаКомпенсацииОсновногоОтпуска = Неопределено;
		ОтборКомпенсация.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаКомпенсацииОсновногоОтпуска, КатегорияКомпенсация, ОтборКомпенсация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРасчетовДополнительныхОтпусков()
	
	Если НЕ Объект.ПредоставитьДополнительныйОтпуск Тогда
		Возврат;	
	КонецЕсли;
	
	КатегорияОтпуск 			= КатегорияНачисленияОтпуск();
	КатегорияКомпенсация 		= КатегорияНачисленияКомпенсацияОтпуска();  
	КатегорияОтпускБезОплаты 	= КатегорияНачисленияОтпускБезОплаты();
	
	ОтборОтпуск = Новый Структура("ВидОтпуска,ВидВремени");
	ОтборОтпуск.Вставить("ВидВремени", Перечисления.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное);
	
	ОтборКомпенсация = Новый Структура("ВидОтпуска");

	ОтпускаБезОплаты = ВидыОтпусковБезОплаты();
	
	Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
		
		КатегорияВидаОтпуска = КатегорияВидаОтпуска(ДополнительныйОтпуск.ВидОтпуска, ОтпускаБезОплаты, КатегорияОтпуск, КатегорияОтпускБезОплаты);
		
		Если НеобходимоЗаполнитьВидРасчета(ДополнительныйОтпуск.ВидРасчета, КатегорияВидаОтпуска, ДополнительныйОтпуск.КоличествоДней) Тогда  
			ДополнительныйОтпуск.ВидРасчета = Неопределено;
			ОтборОтпуск.ВидОтпуска = ДополнительныйОтпуск.ВидОтпуска; 
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, ДополнительныйОтпуск.ВидРасчета, КатегорияВидаОтпуска, ОтборОтпуск);
		КонецЕсли;
		
		Если НеобходимоЗаполнитьВидРасчета(ДополнительныйОтпуск.ВидРасчетаКомпенсации, КатегорияКомпенсация, ДополнительныйОтпуск.КоличествоДнейКомпенсации) Тогда
			ДополнительныйОтпуск.ВидРасчетаКомпенсации = Неопределено;
			ОтборКомпенсация.ВидОтпуска = ДополнительныйОтпуск.ВидОтпуска;
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсации, КатегорияКомпенсация, ОтборКомпенсация);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРасчетовОтгула()
	
	Если НЕ Объект.ПредоставитьОтгул Тогда
		Возврат;
	КонецЕсли;
	
	НадоЗаполнятьВидРасчета = Объект.КоличествоДнейОтгула <> 0 И Не ЗначениеЗаполнено(Объект.ВидРасчетаОтгул);
	Если НадоЗаполнятьВидРасчета Тогда
		Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул;
		ДополнительныйОтбор = Новый Структура("ВидВремени");
		ДополнительныйОтбор.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное");
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаОтгул, Категория, ДополнительныйОтбор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРасчетовЕдиновременнойВыплаты()
	
	КатегорияЕдиновременнойВыплаты = КатегорияНачисленияЕдиновременнойВыплаты();
	
	ТекущаяКатегория = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.ВидРасчетаЕдиновременнойВыплатыКОтпуску).КатегорияНачисленияИлиНеоплаченногоВремени;
	КатегорияИзменилась = ТекущаяКатегория <> КатегорияЕдиновременнойВыплаты;
	
	НадоЗаполнятьВидРасчетаЕдиновременнойВыплаты = Объект.ПредоставитьЕдиновременнуюВыплатуКОтпуску 
													И (Не ЗначениеЗаполнено(Объект.ВидРасчетаЕдиновременнойВыплатыКОтпуску) Или КатегорияИзменилась);
	
	Если НадоЗаполнятьВидРасчетаЕдиновременнойВыплаты Тогда
		Объект.ВидРасчетаЕдиновременнойВыплатыКОтпуску = Неопределено;
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаЕдиновременнойВыплатыКОтпуску, КатегорияЕдиновременнойВыплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРасчетовМатериальнойПомощи()
	
	КатегорияМатериальнойПомощи = КатегорияНачисленияМатериальнойПомощи();
	
	ТекущаяКатегория = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.ВидРасчетаМатериальнойПомощиПриОтпуске).КатегорияНачисленияИлиНеоплаченногоВремени;
	КатегорияИзменилась = ТекущаяКатегория <> КатегорияМатериальнойПомощи;
	
	НадоЗаполнятьВидРасчетаМатериальнойПомощи = Объект.ПредоставитьМатериальнуюПомощьПриОтпуске 
												И (Не ЗначениеЗаполнено(Объект.ВидРасчетаМатериальнойПомощиПриОтпуске) Или КатегорияИзменилась);
	
	Если НадоЗаполнятьВидРасчетаМатериальнойПомощи Тогда
		Объект.ВидРасчетаМатериальнойПомощиПриОтпуске = Неопределено;
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаМатериальнойПомощиПриОтпуске, КатегорияМатериальнойПомощи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КатегорияВидаОтпуска(ВидОтпуска, ОтпускаБезОплаты, КатегорияОтпуск, КатегорияОтпускБезОплаты)
	
	Если ОтпускаБезОплаты.Найти(ВидОтпуска) <> Неопределено Тогда
		Категория = КатегорияОтпускБезОплаты;
	иначе
		Категория = КатегорияОтпуск;
	КонецЕсли;
	
	Возврат Категория;	
	
КонецФункции

&НаСервере
Функция ВидыОтпусковБезОплаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидОтпуска
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	ВидыОтпусков.ОтпускБезОплаты";
	ОтпускаБезОплаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидОтпуска");   
	
	Возврат ОтпускаБезОплаты;
	
КонецФункции

&НаСервере             
Функция НеобходимоЗаполнитьВидРасчета(ТекущийВидРасчета, ЗаполняемаяКатегория, КоличествоОплачиваемыхДней = Неопределено)
	
	ТекущаяКатегория = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ТекущийВидРасчета).КатегорияНачисленияИлиНеоплаченногоВремени;
	КатегорияИзменилась = ТекущаяКатегория <> ЗаполняемаяКатегория;
	
	Возврат ?(КоличествоОплачиваемыхДней = Неопределено, Истина, КоличествоОплачиваемыхДней > 0) И (Не ЗначениеЗаполнено(ТекущийВидРасчета) Или КатегорияИзменилась);
	
КонецФункции 

&НаСервере
Процедура ДополнитьПараметрыВыбораНачисленийКатегорией()

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
		Возврат;
	КонецЕсли;
	
	КатегорияОтпуск 				= КатегорияНачисленияОтпуск();
	КатегорияКомпенсация 			= КатегорияНачисленияКомпенсацияОтпуска();  
	КатегорияОтпускБезОплаты 		= КатегорияНачисленияОтпускБезОплаты();
	КатегорияЕдиновременнойВыплаты 	= КатегорияНачисленияЕдиновременнойВыплаты();
	КатегорияМатериальнойПомощи 	= КатегорияНачисленияМатериальнойПомощи();

	СтруктураНачислений = Новый Структура;
	СтруктураНачислений.Вставить("ВидРасчетаОсновногоОтпуска", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КатегорияОтпуск));
	СтруктураНачислений.Вставить("ВидРасчетаКомпенсацииОсновногоОтпуска", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КатегорияКомпенсация));
	
	МассивКатегорийДополнительногоОтпуска = Новый Массив;
	МассивКатегорийДополнительногоОтпуска.Добавить(КатегорияОтпуск);
	МассивКатегорийДополнительногоОтпуска.Добавить(КатегорияОтпускБезОплаты);
	СтруктураНачислений.Вставить("ДополнительныеОтпускаВидРасчета", МассивКатегорийДополнительногоОтпуска);
	СтруктураНачислений.Вставить("ДополнительныеОтпускаВидРасчетаКомпенсации", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КатегорияКомпенсация));
	
	СтруктураНачислений.Вставить("ВидРасчетаОтгул", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул));
	СтруктураНачислений.Вставить("ВидРасчетаЕдиновременнойВыплатыКОтпуску", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КатегорияЕдиновременнойВыплаты));
	СтруктураНачислений.Вставить("ВидРасчетаМатериальнойПомощиПриОтпуске", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КатегорияМатериальнойПомощи));
	
	РасчетЗарплатыРасширенныйФормы.ДополнитьПараметрыВыбораНачисленийКатегорией(ЭтаФорма, СтруктураНачислений);

КонецПроцедуры
	
#КонецОбласти

#Область КатегорииНачисленийДокумента

&НаСервере
Функция КатегорияНачисленияОтпуск()
	
	Если Объект.РасчетДенежногоСодержания Тогда
		КатегорияНачисленияОтпуск = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска;
	Иначе
		КатегорияНачисленияОтпуск = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска;
	КонецЕсли;
	
	Возврат КатегорияНачисленияОтпуск;	
	
КонецФункции

&НаСервере
Функция КатегорияНачисленияКомпенсацияОтпуска()
	
	Если Объект.РасчетДенежногоСодержания Тогда
		КатегорияНачисленияКомпенсацияОтпуска = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска;
	Иначе
		КатегорияНачисленияКомпенсацияОтпуска = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска;
	КонецЕсли;
	
	Возврат КатегорияНачисленияКомпенсацияОтпуска;	
	
КонецФункции

&НаСервере
Функция КатегорияНачисленияОтпускБезОплаты()
		
	Возврат Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;	
	
КонецФункции

&НаСервере
Функция КатегорияНачисленияЕдиновременнойВыплаты()
	
	Если Объект.РасчетДенежногоСодержания И ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
		КатегорияНачисленияЕдиновременнойВыплаты = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего;
	Иначе
		КатегорияНачисленияЕдиновременнойВыплаты = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску;
	КонецЕсли;
	
	Возврат КатегорияНачисленияЕдиновременнойВыплаты;
	
КонецФункции

&НаСервере
Функция КатегорияНачисленияМатериальнойПомощи()
	
	Если Объект.РасчетДенежногоСодержания И ПолучитьФункциональнуюОпцию("ИспользоватьГосударственнуюСлужбу") Тогда
		КатегорияНачисленияМатериальнойПомощи = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпускеГосслужащего;
	Иначе
		КатегорияНачисленияМатериальнойПомощи = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске;
	КонецЕсли;
	
	Возврат КатегорияНачисленияМатериальнойПомощи;
	
КонецФункции

#КонецОбласти

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы) Экспорт
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудник, ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	ОбновитьПерерасчетИтог(ЭтаФорма);
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудник = Неопределено, СохранятьИсправления = Истина, ПерезаполнитьНачисления = Истина) Экспорт
	
	ОчиститьРассчитанныеДанные(ПерезаполнитьНачисления);

	Если ПерезаполнитьНачисления Тогда
		
		ЗаполнитьНачисления();
		
		Если Не (Объект.РассчитатьЗарплату 
			И ОтпускНачинаетсяВСледующемМесяце()) Тогда
			ЗаполнитьПерерасчеты();		
		КонецЕсли;
		
		ОписаниеРассчитываемойТаблицы = Неопределено;
		
	иначе
		
		ОписаниеРассчитываемойТаблицы = Новый Структура("ИмяТаблицы", "Удержания");
		
	КонецЕсли;
	
	ЗаполнитьУдержания();
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
	Сотрудники = ЗарплатаКадрыРасширенный.СотрудникиТаблицДокумента(Объект, ОписанияТаблиц, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник)); 
	
	// Выполняем пересчет коллекций документа.
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеРассчитываемойТаблицы;

	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудники, ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);

	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
	ОбновитьПерерасчетИтог(ЭтаФорма);
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисления()
	
	Если Объект.РасчетДенежногоСодержания Тогда
		ДополнитьНачисленияВыплачиваемыеКОтпуску();
	КонецЕсли;
	
	Если Объект.РассчитатьЗарплату Тогда
		ДополнитьНачисленияЗарплатойЗаПериодДоНачалаОтпуска();
		
		// Если отпуск начинается в следующем месяце, обновим средний заработок с учетом начисленной в документе зарплаты.
		Если ОтпускНачинаетсяВСледующемМесяце() Тогда
			ОбновитьДанныеДляРасчетаСреднегоСУчетомНачисленийТекущегоДокумента();				
		КонецЕсли;
		
	Иначе
		ОчиститьДанныеДляРасчетаСреднегоЗаПериодРегистрации();
	КонецЕсли;
	
	ОбновитьДанныеДляРасчетаСреднего();
	Если Не Объект.РасчетДенежногоСодержания Тогда
		ДополнитьНачисленияВыплачиваемыеКОтпуску();
	КонецЕсли;
	ДополнитьНачисленияОплатаОтпуска();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПерерасчеты()
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправления(Объект.Организация, Объект.ПериодРегистрации, Объект.ИсправленныйДокумент, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка);
	Иначе
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчета(Объект.ПериодРегистрации, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдержания()
	Если НЕ ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиУдержаний = РасчетЗарплатыРасширенный.ДанныеДляУдержанияЗарплаты(
	Объект.Организация, Объект.ПериодРегистрации, КонецМесяца(Объект.ПериодРегистрации), , Объект.Сотрудник);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиУдержаний, Объект.Удержания);
КонецПроцедуры

&НаСервере
Процедура ДополнитьНачисленияЗарплатойЗаПериодДоНачалаОтпуска()
	
	Если Не Объект.РассчитатьЗарплату Тогда 
		Возврат;
	КонецЕсли;
	
	НачалоПериода =	НачалоПериодаРасчетаЗарплаты();
	
	Если Объект.ДатаНачалаСобытия > НачалоПериода Тогда 
		
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник);
		
		ОкончаниеПериода = Мин(КонецМесяца(НачалоПериода), НачалоДня(Объект.ДатаНачалаСобытия) - 1);
		
		// Начисления
		СтрокиНачислений = РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплаты(
			Объект.Организация, НачалоПериода, ОкончаниеПериода, Объект.ПериодРегистрации, , Сотрудники, , , , Объект.Ссылка, Истина, , Объект.ИсправленныйДокумент);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиНачислений, Объект.Начисления);
		
		// Погашение займов
		СтрокиПогашениеЗаймов = РасчетЗарплатыРасширенный.РезультатРасчетаЗаймов(
			Объект.Организация, ОкончаниеПериода, Объект.Ссылка, Сотрудники);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПогашениеЗаймов, Объект.ПогашениеЗаймов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаИнтерваловОплаты()
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("Начисление");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачала");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаОкончания");
	ТаблицаИнтервалов.Колонки.Добавить("Компенсация");
	ТаблицаИнтервалов.Колонки.Добавить("КоличествоДнейКомпенсации");
	ТаблицаИнтервалов.Колонки.Добавить("МатериальнаяПомощь");
	ТаблицаИнтервалов.Колонки.Добавить("ЕдиновременнаяВыплата");
	ТаблицаИнтервалов.Колонки.Добавить("ПоКалендарнымДням");
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

&НаСервере
Процедура ДополнитьНачисленияВыплачиваемыеКОтпуску()
	
	ТаблицаИнтервалов = ТаблицаИнтерваловОплаты();
	
	Если Объект.ПредоставитьЕдиновременнуюВыплатуКОтпуску Тогда
		НовыйИнтервал = ТаблицаИнтервалов.Добавить();
		НовыйИнтервал.Начисление	= Объект.ВидРасчетаЕдиновременнойВыплатыКОтпуску;
		НовыйИнтервал.ДатаНачала	= НачалоМесяца(Объект.ПериодРегистрации);
		НовыйИнтервал.ДатаОкончания	= КонецМесяца(Объект.ПериодРегистрации);
		НовыйИнтервал.Компенсация	= Ложь;
		НовыйИнтервал.ЕдиновременнаяВыплата = Истина;
		НовыйИнтервал.МатериальнаяПомощь = Ложь;
		НовыйИнтервал.ПоКалендарнымДням	= Истина;
	КонецЕсли;
	
	Если Объект.ПредоставитьМатериальнуюПомощьПриОтпуске Тогда
		НовыйИнтервал = ТаблицаИнтервалов.Добавить();
		НовыйИнтервал.Начисление	= Объект.ВидРасчетаМатериальнойПомощиПриОтпуске;
		НовыйИнтервал.ДатаНачала	= НачалоМесяца(Объект.ПериодРегистрации);
		НовыйИнтервал.ДатаОкончания	= КонецМесяца(Объект.ПериодРегистрации);
		НовыйИнтервал.Компенсация	= Ложь;
		НовыйИнтервал.ЕдиновременнаяВыплата = Ложь;
		НовыйИнтервал.МатериальнаяПомощь = Истина;
		НовыйИнтервал.ПоКалендарнымДням	= Истина;
	КонецЕсли;

	Если Объект.РасчетДенежногоСодержания Тогда
		СохраняемоеДенежноеСодержаниеСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");	
	КонецЕсли;
	
	СреднийЗаработокСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	Для Каждого СтрокаИнтервалов Из ТаблицаИнтервалов Цикл
		
		ИзвестныеПоказатели = Новый Соответствие;
		// Средний заработок
		Значение = Объект.СреднийЗаработок;
		Если Не СтрокаИнтервалов.ПоКалендарнымДням Тогда
			Значение = Объект.СреднийЗаработокПоРабочимДням;
		КонецЕсли;
		ИзвестныеПоказатели.Вставить(СреднийЗаработокСсылка, Новый Структура("Значение", Значение));
		
		Если Объект.РасчетДенежногоСодержания Тогда
			ИзвестныеПоказатели.Вставить(СохраняемоеДенежноеСодержаниеСсылка, Новый Структура("Значение", Объект.СохраняемоеДенежноеСодержание));
		КонецЕсли;
			
		ДанныеДляНачисленияЗарплаты = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(Объект.Организация, СтрокаИнтервалов.ДатаНачала, СтрокаИнтервалов.ДатаОкончания,
										Объект.ПериодРегистрации, Объект.Сотрудник, СтрокаИнтервалов.Начисление, Объект.Ссылка, ИзвестныеПоказатели);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляНачисленияЗарплаты, Объект.Начисления);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьНачисленияОплатаОтпуска()
	
	ТаблицаИнтервалов = ТаблицаИнтерваловОплаты();
	
	Если Объект.ПредоставитьОсновнойОтпуск Тогда
		Если ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(Объект.ДатаОкончанияОсновногоОтпуска) Тогда
			НачалоИнтервала = НачалоДня(Объект.ДатаНачалаОсновногоОтпуска);
			КонецИнтервала = НачалоИнтервала;
			Пока КонецИнтервала < КонецДня(Объект.ДатаОкончанияОсновногоОтпуска) Цикл
				КонецИнтервала = Мин(КонецМесяца(НачалоИнтервала),КонецДня(Объект.ДатаОкончанияОсновногоОтпуска));
				
				НовыйИнтервал = ТаблицаИнтервалов.Добавить();
				НовыйИнтервал.Начисление	= Объект.ВидРасчетаОсновногоОтпуска;
				НовыйИнтервал.ДатаНачала	= НачалоИнтервала;
				НовыйИнтервал.ДатаОкончания	= КонецИнтервала;
				НовыйИнтервал.Компенсация	= Ложь;
				НовыйИнтервал.ЕдиновременнаяВыплата = Ложь;
				НовыйИнтервал.МатериальнаяПомощь = Ложь;
				НовыйИнтервал.ПоКалендарнымДням	= Документы.Отпуск.ОписаниеВидаОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной")).СпособРасчетаПоКалендарнымДням;
				
				НачалоИнтервала = КонецИнтервала+1;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли; 
	
	Если Объект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		Если Объект.КоличествоДнейКомпенсацииОсновногоОтпуска > 0 Тогда
			НовыйИнтервал = ТаблицаИнтервалов.Добавить();
			НовыйИнтервал.Начисление	= Объект.ВидРасчетаКомпенсацииОсновногоОтпуска;
			НовыйИнтервал.ДатаНачала	= НачалоМесяца(Объект.ПериодРегистрации);
			НовыйИнтервал.ДатаОкончания	= КонецМесяца(Объект.ПериодРегистрации);
			НовыйИнтервал.КоличествоДнейКомпенсации	= Объект.КоличествоДнейКомпенсацииОсновногоОтпуска;
			НовыйИнтервал.Компенсация	= Истина;
			НовыйИнтервал.ЕдиновременнаяВыплата = Ложь;
			НовыйИнтервал.МатериальнаяПомощь = Ложь;
			НовыйИнтервал.ПоКалендарнымДням	= Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПредоставитьДополнительныйОтпуск Тогда
		Для каждого СтрокаДополнительногоОтпуска Из Объект.ДополнительныеОтпуска Цикл
			НачалоИнтервала = НачалоДня(СтрокаДополнительногоОтпуска.ДатаНачала);
			КонецИнтервала = НачалоИнтервала;
			
			СпособРасчетаПоКалендарнымДням = Документы.Отпуск.ОписаниеВидаОтпуска(СтрокаДополнительногоОтпуска.ВидОтпуска).СпособРасчетаПоКалендарнымДням;
			
			Если ЗначениеЗаполнено(СтрокаДополнительногоОтпуска.ДатаНачала) И ЗначениеЗаполнено(СтрокаДополнительногоОтпуска.ДатаОкончания) Тогда
				Пока КонецИнтервала < КонецДня(СтрокаДополнительногоОтпуска.ДатаОкончания) Цикл
					КонецИнтервала = Мин(КонецМесяца(НачалоИнтервала),КонецДня(СтрокаДополнительногоОтпуска.ДатаОкончания));
					
					НовыйИнтервал = ТаблицаИнтервалов.Добавить();
					НовыйИнтервал.Начисление	= СтрокаДополнительногоОтпуска.ВидРасчета;
					НовыйИнтервал.ДатаНачала	= НачалоИнтервала;
					НовыйИнтервал.ДатаОкончания	= КонецИнтервала;
					НовыйИнтервал.Компенсация	= Ложь;
					НовыйИнтервал.ЕдиновременнаяВыплата = Ложь;
					НовыйИнтервал.МатериальнаяПомощь = Ложь;
					НовыйИнтервал.ПоКалендарнымДням	= СпособРасчетаПоКалендарнымДням;
					
					НачалоИнтервала = КонецИнтервала+1;
				КонецЦикла; 
			КонецЕсли;
			
			Если СтрокаДополнительногоОтпуска.КоличествоДнейКомпенсации > 0 Тогда
				НовыйИнтервал = ТаблицаИнтервалов.Добавить();
				НовыйИнтервал.Начисление	= СтрокаДополнительногоОтпуска.ВидРасчетаКомпенсации;
				НовыйИнтервал.ДатаНачала	= НачалоМесяца(Объект.ПериодРегистрации);
				НовыйИнтервал.ДатаОкончания	= КонецМесяца(Объект.ПериодРегистрации);
				НовыйИнтервал.КоличествоДнейКомпенсации	= СтрокаДополнительногоОтпуска.КоличествоДнейКомпенсации;
				НовыйИнтервал.Компенсация	= Истина;
				НовыйИнтервал.ЕдиновременнаяВыплата = Ложь;
				НовыйИнтервал.МатериальнаяПомощь = Ложь;
				НовыйИнтервал.ПоКалендарнымДням	= СпособРасчетаПоКалендарнымДням;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли; 
	
	Если Объект.ПредоставитьОтгул Тогда
		НовыйИнтервал = ТаблицаИнтервалов.Добавить();
		НовыйИнтервал.Начисление	= Объект.ВидРасчетаОтгул;
		НовыйИнтервал.ДатаНачала	= НачалоДня(НачалоИнтервала);
		НовыйИнтервал.ДатаОкончания	= УчетРабочегоВремени.ДатаОкончанияПоГрафикуРаботыСотрудника(Объект.Сотрудник, НовыйИнтервал.ДатаНачала, Объект.КоличествоДнейОтгула);
		НовыйИнтервал.Компенсация	= Ложь;
		НовыйИнтервал.ЕдиновременнаяВыплата = Ложь;
		НовыйИнтервал.МатериальнаяПомощь = Ложь;
		НовыйИнтервал.ПоКалендарнымДням	= Ложь;
	КонецЕсли;
	
	Если Объект.РасчетДенежногоСодержания Тогда
		
		// Показатели 
		СохраняемоеДенежноеСодержаниеСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
		ДниКомпенсацииСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации");
		Для Каждого СтрокаИнтервалов Из ТаблицаИнтервалов Цикл
			
			ИзвестныеПоказатели = Новый Соответствие;
			ИзвестныеПоказатели.Вставить(СохраняемоеДенежноеСодержаниеСсылка, Новый Структура("Значение", Объект.СохраняемоеДенежноеСодержание));
			
			// Компенсация
			Если СтрокаИнтервалов.Компенсация Тогда		
				ИзвестныеПоказатели.Вставить(ДниКомпенсацииСсылка, Новый Структура("Значение", СтрокаИнтервалов.КоличествоДнейКомпенсации));
			КонецЕсли;
			
			ДанныеДляНачисленияЗарплаты = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
			Объект.Организация, СтрокаИнтервалов.ДатаНачала, СтрокаИнтервалов.ДатаОкончания, Объект.ПериодРегистрации, Объект.Сотрудник, СтрокаИнтервалов.Начисление, Объект.Ссылка, ИзвестныеПоказатели);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляНачисленияЗарплаты, Объект.Начисления);
			
		КонецЦикла;
		
	Иначе
		
		// Показатели среднего заработка.
		СреднийЗаработокСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
		ДниКомпенсацииСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации");
		Для Каждого СтрокаИнтервалов Из ТаблицаИнтервалов Цикл
			
			ИзвестныеПоказатели = Новый Соответствие;
			// Средний заработок
			Значение = Объект.СреднийЗаработок;
			Если Не СтрокаИнтервалов.ПоКалендарнымДням Тогда
				Значение = Объект.СреднийЗаработокПоРабочимДням;
			КонецЕсли;
			ИзвестныеПоказатели.Вставить(СреднийЗаработокСсылка, Новый Структура("Значение", Значение));
			
			// Компенсация
			Если СтрокаИнтервалов.Компенсация Тогда		
				ИзвестныеПоказатели.Вставить(ДниКомпенсацииСсылка, Новый Структура("Значение", СтрокаИнтервалов.КоличествоДнейКомпенсации));
			КонецЕсли;
			
			ДанныеДляНачисленияЗарплаты = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
			Объект.Организация, СтрокаИнтервалов.ДатаНачала, СтрокаИнтервалов.ДатаОкончания, Объект.ПериодРегистрации, Объект.Сотрудник, СтрокаИнтервалов.Начисление, Объект.Ссылка, ИзвестныеПоказатели);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляНачисленияЗарплаты, Объект.Начисления);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляРасчетаСреднегоСУчетомНачисленийТекущегоДокумента()
	
	ЗаполнитьПерерасчеты();
	
	// Надо рассчитать зарплату текущего месяца.
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();

	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Объект.Сотрудник, ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
	
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	// Для корректной регистрации данных среднего заработка нужно прежде зарегистрировать начисления и отработанное
	// время.
	ДанныеДляПроведения = ДанныеДокументаДляПроведения();
	
	// Регистрируем данные документа в учете.
	Отказ = Ложь;
	// Смоделируем коллекцию движений документа.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.Отпуск, ДанныеДляПроведения.ДокументСсылка);
	
	Если Объект.РасчетДенежногоСодержания Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.ЗарегистрироватьНачисленияДляРасчетаСохраняемогоДенежногоСодержания(НаборыЗаписей, Отказ, Объект.ПериодРегистрации, ДанныеДляПроведения.НачисленияДляРегистрацииДенежногоСодержания, Истина);
		КонецЕсли;
		
	Иначе
		
		// Регистрация начислений
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
		НаборыЗаписей, Отказ, Объект.Организация, КонецМесяца(Объект.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
		// Регистрация отработанного времени в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
		НаборыЗаписей, Отказ, Объект.Организация, Объект.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);	
		// Определяем исключаемый регистратор, который будет использоваться при обновлении корректировок.	
		НаборыЗаписей.ДанныеОВремениДляРасчетаСреднегоОбщий.ДополнительныеСвойства.Вставить("ИсключаемыйРегистратор", Объект.Ссылка);
		// Учет среднего заработка
		УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(НаборыЗаписей, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка, Истина);
		
		ОчиститьДанныеДляРасчетаСреднегоЗаПериодРегистрации();
		
	КонецЕсли;
	
	ОбновитьДанныеДляРасчетаСреднего = Истина;
	
	// Обновляем данные среднего заработка в документе с учетом зарегистрированных начислений.
	ОбновитьДанныеДляРасчетаСреднего();
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования)
	
	// Переносит данные учета среднего заработка (результат работы формы "калькулятора") 
	// в таблицы документа.
	
	Объект.СреднийЗаработокОбщий.Очистить();
	Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
	Объект.ДанныеОбИндексации.Очистить();
	
	УчетСреднегоЗаработка.ЗаполнитьДанныеУчетаОбщегоСреднегоЗаработка(
		Объект.СреднийЗаработокОбщий, 
		Объект.ОтработанноеВремяДляСреднегоОбщий, 
		Объект.ДанныеОбИндексации,
		РезультатРедактирования, 
		Модифицированность);
	
	Объект.ПериодРасчетаСреднегоЗаработкаНачало = РезультатРедактирования.НачалоПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = РезультатРедактирования.ОкончаниеПериодаРасчета;
	Объект.ФиксПериодРасчетаСреднегоЗаработка = РезультатРедактирования.ФиксПериодРасчета;
	
	ЗаполнитьИнформациюЗаполненностиДанных();
	Объект.СреднийЗаработок = РезультатРедактирования.СреднийЗаработок;
	Объект.РучнаяКорректировкаСреднегоЗаработка = РезультатРедактирования.РучнаяКорректировкаСреднегоЗаработка;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.РасчетДенежногоСодержания Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.РассчитатьСохраняемоеДенежноеСодержаниеДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		КонецЕсли;
	Иначе	
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = Объект.ДанныеОбИндексации;
		ДополнительныеПараметры.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
		ДополнительныеПараметры.НачалоПериода = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
		ДополнительныеПараметры.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
		ДополнительныеПараметры.ПоЧасам = ЭтоСреднеЧасовойЗаработок();
	    ДополнительныеПараметры.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные");;

		Для Каждого КлючИЗначение Из СпособыРасчетаСреднегоЗаработка Цикл
			ДополнительныеПараметры.СпособРасчетаОтпуска = КлючИЗначение.Значение;
			Объект[КлючИЗначение.Ключ] = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, ДополнительныеПараметры);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеДляРасчетаСреднего()
	
	Если НЕ ОбновитьДанныеДляРасчетаСреднего Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.РасчетДенежногоСодержания Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.ОбновитьДанныеСохраняемогоДенежногоСодержанияДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		КонецЕсли;
		
	Иначе	
		
		УчетСреднегоЗаработка.ОбновитьДанныеОбщегоСреднегоЗаработка(
		Новый Структура("ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации, ВидРасчета", 
		Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, Объект.ДанныеОбИндексации, Объект.ВидРасчетаОсновногоОтпуска), 
		Объект.ДатаНачалаСобытия, 
		Объект.ПериодРасчетаСреднегоЗаработкаНачало, 
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), , 
		Объект.Ссылка
		);
		
	КонецЕсли;
	
	ЗаполнениеВыполнено = Истина;
	ЗаполнитьИнформациюЗаполненностиДанных();
	
	РассчитатьСреднийЗаработок();
	
	ОбновитьДанныеДляРасчетаСреднего = Ложь;
	
КонецПроцедуры	

&НаСервере
Процедура ОчиститьДанныеДляРасчетаСреднегоЗаПериодРегистрации()
	
	Если Объект.РасчетДенежногоСодержания 
		Или Не ОбновитьДанныеДляРасчетаСреднего Тогда
		Возврат;
	КонецЕсли;
	
	// Т.к. зарплата за текущий месяц начисляется в документе отпуска, 
	// ее нужно в любом случае обновить в данных среднего заработка.
	// Удаляем из таблиц среднего заработка данные за последний месяц.
	ТаблицыСреднего = Новый Массив;
	ТаблицыСреднего.Добавить(Объект.СреднийЗаработокОбщий);
	ТаблицыСреднего.Добавить(Объект.ОтработанноеВремяДляСреднегоОбщий);
	Для Каждого ТаблицаСреднего Из ТаблицыСреднего Цикл
		НайденныеСтроки = ТаблицаСреднего.НайтиСтроки(Новый Структура("Период", Объект.ПериодРегистрации));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТаблицаСреднего.Удалить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДатуНачалаСобытия(Форма)
	
	Форма.Объект.ДатаНачалаСобытия = Неопределено;
	
	Если Форма.Объект.ПредоставитьОсновнойОтпуск Тогда
		Если ЗначениеЗаполнено(Форма.Объект.ДатаНачалаОсновногоОтпуска) Тогда
			Форма.Объект.ДатаНачалаСобытия = Форма.Объект.ДатаНачалаОсновногоОтпуска;
		Иначе 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Объект.ПредоставитьДополнительныйОтпуск И Форма.Объект.ДополнительныеОтпуска.Количество() > 0 Тогда
		Для каждого ДополнительныйОтпуск Из Форма.Объект.ДополнительныеОтпуска Цикл
			Если ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) Тогда 
				Если Не ЗначениеЗаполнено(Форма.Объект.ДатаНачалаСобытия) Или Форма.Объект.ДатаНачалаСобытия > ДополнительныйОтпуск.ДатаНачала Тогда
					Форма.Объект.ДатаНачалаСобытия = ДополнительныйОтпуск.ДатаНачала;
				КонецЕсли; 
			ИначеЕсли ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДнейКомпенсации) Тогда
				Продолжить;
			Иначе 
				Форма.Объект.ДатаНачалаСобытия = Неопределено;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.ДатаНачалаСобытия) Тогда
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Форма.Объект.Сотрудник, "ДатаПриема");
		Если КадровыеДанные.Количество() > 0 
			И ЗначениеЗаполнено(КадровыеДанные[0].ДатаПриема) 
			И НачалоМесяца(КадровыеДанные[0].ДатаПриема) = НачалоМесяца(Объект.ПериодРегистрации)
			И КадровыеДанные[0].ДатаПриема > Объект.ПериодРегистрации Тогда
			// Если сотрудник принят в месяце начисления, то установим дату начал события равной дате приема.
			Форма.Объект.ДатаНачалаСобытия = КадровыеДанные[0].ДатаПриема;
		Иначе
			// Если не смогли определить дату начала события и сотрудник работает не первый месяц, то установим датой начала
			// события начало месяца.
			Форма.Объект.ДатаНачалаСобытия = Объект.ПериодРегистрации;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВариантРасчета();
	
	УстановитьКраткосрочныйТрудовойДоговорСотрудника();
	   	
	УстановитьПривилегированныйРежим(Истина);

	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	       	
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);

	ОчиститьРассчитанныеДанные();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьПланируемуюДатыВыплаты()
	Если Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда
		ПланируемаяДатыВыплатыОтпуска = Документы.Отпуск.ПланируемаяДатыВыплатыОтпуска(Объект.ДатаНачалаСобытия, ПроизводственныйКалендарьСотрудника);
		Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
			ПланируемаяДатыВыплатыОтпуска = НачалоДня(ТекущаяДатаСеанса() + 86400);
		КонецЕсли;
		Если ПланируемаяДатыВыплатыОтпуска <> Неопределено Тогда
			Объект.ПланируемаяДатаВыплаты = ПланируемаяДатыВыплатыОтпуска;
		КонецЕсли;														
	Иначе
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПодобратьСледущуюДатуНачалаОтпуска()
	ПодобраннаяДата = '00010101'; 
	
	КоличествоДополнительныхОтпусков = Объект.ДополнительныеОтпуска.Количество() - 1;
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) Тогда
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияОсновногоОтпуска) Тогда
			Если КоличествоДополнительныхОтпусков > 0 Тогда
				ПодобраннаяДата = ПодобратьСледущуюДатуНачалаДополнительногоОтпуска(); 	
			Иначе
				ПодобраннаяДата = КонецДня(Объект.ДатаОкончанияОсновногоОтпуска) + 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КоличествоДополнительныхОтпусков > 0 Тогда
			ПодобраннаяДата = ПодобратьСледущуюДатуНачалаДополнительногоОтпуска(); 	
		КонецЕсли;		
	КонецЕсли;
	Возврат ПодобраннаяДата
КонецФункции

&НаКлиенте
Функция ПодобратьСледущуюДатуНачалаДополнительногоОтпуска()
	ПодобраннаяДата = '00010101'; 
	
	Для каждого Строка Из Объект.ДополнительныеОтпуска Цикл
		Если ЗначениеЗаполнено(Строка.ДатаОкончания) Тогда
		    ПодобраннаяДата = Макс(ПодобраннаяДата, Строка.ДатаОкончания); 
		КонецЕсли;
	КонецЦикла;	
	
	Возврат КонецДня(ПодобраннаяДата) + 1;
КонецФункции

&НаСервере
Процедура СдвинутьПериодыПоследующихОтпусков(Знач НомерСтроки, НоваяДатаНачала, КоличествоДополнительныхОтпусков)
	Если Не КоличествоДополнительныхОтпусков > НомерСтроки Тогда
		Возврат
	КонецЕсли;
	
	Строка = Объект.ДополнительныеОтпуска[НомерСтроки];
	
	Если ЗначениеЗаполнено(Строка.КоличествоДней) Тогда
		Строка.ДатаНачала = НоваяДатаНачала;  
		
		ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(Строка.ВидОтпуска);
		Строка.ДатаОкончания = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(Объект.Сотрудник, Строка.ДатаНачала, Строка.КоличествоДней, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		НомерСтроки = НомерСтроки + 1;
		НоваяДатаНачала = КонецДня(Строка.ДатаОкончания) + 1 ;
		СдвинутьПериодыПоследующихОтпусков(НомерСтроки, НоваяДатаНачала, КоличествоДополнительныхОтпусков);
	Иначе
		СдвинутьПериодыПоследующихОтпусков(НомерСтроки+1, НоваяДатаНачала, КоличествоДополнительныхОтпусков);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Подключение механизма расчета начислений.

&НаСервере
Процедура ДанныеВРеквизиты()
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), 2);
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), 2);
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыУдержаний(), 2);
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыСохраняемоеДенежноеСодержание(), 2);
		КонецЕсли;
	
		ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
		
	КонецЕсли;
	
	ОбновитьПризнакЕжегодногоОтпускаДополнительныхОтпусков();
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	Если Не ЭтаФорма.Параметры.Ключ.Пустая() Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма);
	КонецЕсли;
	ИсправлениеДокументовЗарплатаКадры.УстановитьПоляИсправления(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект.Показатели.Очистить();
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, ОписаниеТаблицыСохраняемоеДенежноеСодержание());
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);	
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));	
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыСохраняемоеДенежноеСодержание()

	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.ИмяТаблицы									= "ДенежноеСодержание";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.ДенежноеСодержание";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник						= "Сотрудник";
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.НомерТаблицы = 6;
	
	Возврат ОписаниеТаблицы;	

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.ИмяТаблицы									= "Начисления";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.Начисления";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей				= "ДатыНачисления";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник						= "Сотрудник";
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени				= ПравоНаЧтениеДокументаБезОграничений;
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов 		= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы    = "Начисления,Удержания,НДФЛ";
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 				= "ДокументОснование";
	
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.ИмяТаблицы									= "НачисленияПерерасчет";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.НачисленияПерерасчет";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей				= "ДатыНачисленияПерерасчет";
	ОписаниеТаблицы.НомерТаблицы 								= 1;
	
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени				= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени	= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени 					= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ЭтоПерерасчеты								= Истина;
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПерерасчетРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов 		= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы    = "НачисленияПерерасчет,Удержания,НДФЛ";
	
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 				= "ДокументОснование";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "Удержания";
	ОписаниеТаблицы.ПутьКДанным = "Объект.Удержания";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета = "Удержание";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	ОписаниеТаблицы.НомерТаблицы = 2;
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "НДФЛ";
	ОписаниеТаблицы.ПутьКДанным = "Объект.НДФЛ";
	ОписаниеТаблицы.ИмяПоляРезультат = "Налог";
	ОписаниеТаблицы.НомерТаблицы = 3;
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
    ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления	= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПогашениеЗаймов()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "ПогашениеЗаймов";
	ОписаниеТаблицы.ПутьКДанным = "Объект.ПогашениеЗаймов";
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.НомерТаблицы = 5;
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	ОписаниеТаблицы.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Истина;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления	= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(ПравоНаЧтениеДокументаБезОграничений)

	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.ПериодРегистрации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.НачисленияИмя = "Начисления";
	Описание.НачисленияПерерасчетИмя = "НачисленияПерерасчет";
	Описание.УдержанияИмя = "Удержания";
	Описание.НДФЛИмя = "НДФЛ";
	Описание.ПогашениеЗаймовИмя = "ПогашениеЗаймов";
	Описание.МесяцНачисленияИмя = "ПериодРегистрации";
	Описание.ИменаПолейНачисления = "ВидРасчетаОсновногоОтпуска,ВидРасчетаКомпенсацииОсновногоОтпуска,НачисленияВидРасчета";
	Описание.РегистрацияНачисленийДоступна = Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
	Описание.ЕстьОплатаПоСреднему = Истина;
	Описание.СпособыРасчетаСреднегоЗаработка = Форма.СпособыРасчетаСреднегоЗаработка;
	Описание.ЭтоСреднеЧасовойЗаработок = ЭтоСреднеЧасовойЗаработок();

	Описание.ВзносыФОТИмя = "ВзносыФОТ";
	Попытка
		Описание.ПорядокВыплаты = Форма.Объект.ПорядокВыплаты;
	Исключение
		Описание.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Зарплата");
	КонецПопытки;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Месяц", "МесяцНачисленияСтрокой"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Сотрудник", "Объект.Сотрудник"));

	Если Форма.Объект.ПредоставитьОсновнойОтпуск Тогда
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Период основного отпуска с", "Объект.ДатаНачалаОсновногоОтпуска"));
		Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Период основного отпуска по", "Объект.ДатаОкончанияОсновногоОтпуска"));
		Описание.ПроверяемыеПериоды.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеПроверяемогоПериода("Период основного отпуска с", "Объект.ДатаНачалаОсновногоОтпуска", "Период основного отпуска по", "Объект.ДатаОкончанияОсновногоОтпуска"));
	КонецЕсли;
	
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата(Форма);
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОплаченоДней");
	НачисленияФиксРасчетВремени.Добавить("ОплаченоЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	НачисленияФиксЗаполнение = Новый Массив;
	
	Возврат Новый Структура("Начисления, НачисленияПерерасчет, НДФЛ",
		Новый Структура("ФиксРасчет, ФиксЗаполнение, ФиксСтрока, ФиксРасчетВремени",
			НачисленияФиксРасчет,
			НачисленияФиксЗаполнение,
			НачисленияФиксСтрока,
			НачисленияФиксРасчетВремени),
		Новый Структура("ФиксРасчет, ФиксЗаполнение, ФиксСтрока, ФиксРасчетВремени",
			НачисленияФиксРасчет,
			НачисленияФиксЗаполнение,
			НачисленияФиксСтрока,
			НачисленияФиксРасчетВремени),
		УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов()
	);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка()
	
	Если Не ИспользуетсяРасчетЗарплаты Или Объект.ФиксПериодРасчетаСреднегоЗаработка Тогда
		// Период расчета среднего заработка установлен принудительно.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) 
		Или Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(Объект.ДатаНачалаСобытия, Объект.Сотрудник, Объект.ВидРасчетаОсновногоОтпуска);
	
	Если ПериодРасчетаСреднегоЗаработкаИзменился(ПериодРасчетаСреднего) Тогда
		
		Объект.ПериодРасчетаСреднегоЗаработкаНачало		= ПериодРасчетаСреднего.ДатаНачала;
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание 	= ПериодРасчетаСреднего.ДатаОкончания;
		
		ОбновитьДанныеДляРасчетаСреднего = Истина;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПериодРасчетаСреднегоЗаработкаИзменился(ПериодРасчетаСреднего)
	Возврат НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаНачало) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаНачала) 
	Или	НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаОкончания);	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСреднеЧасовойЗаработок()
	
	// Отпускные считаются только по среднедневному заработку.
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(ПравоНаЧтениеДокументаБезОграничений)
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	Возврат МассивОписанийТаблицФормы  
КонецФункции 

&НаСервере
Процедура ОбновитьПризнакЕжегодногоОтпускаДополнительныхОтпусков()
	
	МассивДополнительныхОтпусков = Объект.ДополнительныеОтпуска.Выгрузить( , "ВидОтпуска").ВыгрузитьКолонку("ВидОтпуска");
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДополнительныхОтпусков);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивДополнительныхОтпусков, Справочники.ВидыОтпусков.ПустаяСсылка());
	ЕжегодностьОтпусков = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДополнительныхОтпусков, "ОтпускЯвляетсяЕжегодным");
	
	Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
		Если ЗначениеЗаполнено(ДополнительныйОтпуск.ВидОтпуска) Тогда
			ДополнительныйОтпуск.ЭтоЕжегодныйОтпуск  = ЕжегодностьОтпусков.Получить(ДополнительныйОтпуск.ВидОтпуска);
		Иначе
			ДополнительныйОтпуск.ЭтоЕжегодныйОтпуск  = Ложь;
			ДополнительныйОтпуск.КоличествоДнейКомпенсации = 0;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обслуживание элементов формы.

&НаСервере
Процедура ДополнительныеОтпускаВидОтпускаПриИзмененииНаСервере(ИдентификаторСтроки)
	ОбновитьПризнакЕжегодногоОтпускаДополнительныхОтпусков();
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(Строка.ВидОтпуска);
	Строка.КоличествоДней = УчетРабочегоВремени.ДлительностьИнтервала(Объект.Сотрудник, Строка.ДатаНачала, Строка.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
	
	ОбновитьРабочийГодДополнительногоОтпуска(Строка);
	
	УстановитьВидимостьОтпускаПострадавшимНаЧАЭС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	УстановитьДатуНачалаСобытия(ЭтаФорма);
	       	
	УстановитьПланируемуюДатыВыплаты();

	УточнитьВозможностьРасчетаЗарплаты();
	
	УстановитьВидимостьПерерасчетов();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьЗаголовокФлажкаРассчитатьЗарплату();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьФункциональныеОпцииФормы();
	ОчиститьСреднийЗаработок();
	ОчиститьРассчитанныеДанные();
	
	РасчетЗарплатыРасширенныйФормы.ОбновитьПлановыеДатыВыплатыПоОрганизации(ЭтаФорма);
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), РегистрацияНачисленийДоступна);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВариантРасчета()

	Объект.РасчетДенежногоСодержания = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
			Объект.РасчетДенежногоСодержания = Истина;
			Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ВидДоговора", Объект.ДатаНачалаСобытия);
				ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
				Объект.РасчетДенежногоСодержания = (ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего Или ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего);
			КонецЕсли;
			ОбновитьФормуПоВариантуРасчета();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	ОбновитьВариантРасчета();
	
	ОчиститьСреднийЗаработок();

	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	
	ОчиститьРассчитанныеДанные();
	
	ПрочитатьПостоянныеКадровыеДанныеСотрудника();
	ОбновитьДлительностьИнтервалов();
	ПрочитатьПроизводственныйКалендарьСотрудника();
	
	ОбновитьРабочиеГодыОтпусков();
	
	ОбновитьНадписьРасшифровкаОстаткаОтпуска(ЭтотОбъект);
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	УстановитьВидимостьОтсутствияПоДругимМестамРаботы();
	
	УстановитьПланируемуюДатыВыплаты();
	
КонецПроцедуры

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	УстановитьДатуНачалаСобытия(ЭтаФорма);
	
	УточнитьВозможностьРасчетаЗарплаты();
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(Объект.ДатаОкончанияОсновногоОтпуска) 
		И Объект.ДатаНачалаОсновногоОтпуска <= Объект.ДатаОкончанияОсновногоОтпуска Тогда
		ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
		Объект.КоличествоДнейОсновногоОтпуска = УчетРабочегоВремени.ДлительностьИнтервала(Объект.Сотрудник, Объект.ДатаНачалаОсновногоОтпуска, Объект.ДатаОкончанияОсновногоОтпуска, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		СдвинутьПериодыПоследующихОтпусков(0, КонецДня(Объект.ДатаОкончанияОсновногоОтпуска) + 1, Объект.ДополнительныеОтпуска.Количество());
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) 
		И ЗначениеЗаполнено(Объект.КоличествоДнейОсновногоОтпуска) Тогда
		Объект.ДатаОкончанияОсновногоОтпуска = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(Объект.Сотрудник, Объект.ДатаНачалаОсновногоОтпуска, Объект.КоличествоДнейОсновногоОтпуска, Истина);
	Иначе 
		Объект.КоличествоДнейОсновногоОтпуска = 0;
	КонецЕсли;
	
	ПрочитатьПроизводственныйКалендарьСотрудника();
	 	
	УстановитьПланируемуюДатыВыплаты();

	ОбновитьРабочийГодОсновногоОтпуска();
	
	УстановитьВидимостьПерерасчетов();
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияОсновногоОтпускаПриИзмененииНаСервере()
	
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	
	ОчиститьРассчитанныеДанные();
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияОсновногоОтпуска) И ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) 
		И Объект.ДатаНачалаОсновногоОтпуска <= Объект.ДатаОкончанияОсновногоОтпуска Тогда
		ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
		Объект.КоличествоДнейОсновногоОтпуска = УчетРабочегоВремени.ДлительностьИнтервала(Объект.Сотрудник, Объект.ДатаНачалаОсновногоОтпуска, Объект.ДатаОкончанияОсновногоОтпуска, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		СдвинутьПериодыПоследующихОтпусков(0, КонецДня(Объект.ДатаОкончанияОсновногоОтпуска) + 1, Объект.ДополнительныеОтпуска.Количество());
	Иначе
		Объект.КоличествоДнейОсновногоОтпуска = 0;
	КонецЕсли;
	
	ОбновитьРабочийГодОсновногоОтпуска();
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	
КонецПроцедуры

&НаСервере
Процедура КоличествоДнейОсновногоОтпускаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) 
		И ЗначениеЗаполнено(Объект.КоличествоДнейОсновногоОтпуска) Тогда
		Объект.ДатаОкончанияОсновногоОтпуска = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(Объект.Сотрудник, Объект.ДатаНачалаОсновногоОтпуска, Объект.КоличествоДнейОсновногоОтпуска, Истина);
		СдвинутьПериодыПоследующихОтпусков(0, КонецДня(Объект.ДатаОкончанияОсновногоОтпуска) + 1, Объект.ДополнительныеОтпуска.Количество());
	КонецЕсли;

	ОбновитьРабочийГодОсновногоОтпуска();
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	
КонецПроцедуры

&НаСервере
Процедура ПредоставитьКомпенсациюОсновногоОтпускаПриИзмененииНаСервере()
	
	УстановитьДатуНачалаСобытия(ЭтотОбъект);
		
	УстановитьПланируемуюДатыВыплаты();

	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	ОчиститьРассчитанныеДанные();
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);

КонецПроцедуры

&НаСервере
Процедура ДнейЧасовКомпенсацииОтпускаПриИзмененииНаСервере()
	
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	ОбновитьРабочийГодОсновногоОтпуска();
	ОчиститьРассчитанныеДанные();
	
КонецПроцедуры

&НаСервере
Процедура ПредоставитьМатериальнуюПомощьПриОтпускеПриИзмененииНаСервере()
	 	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	ОчиститьРассчитанныеДанные();
	
КонецПроцедуры

&НаСервере
Процедура ПредоставитьЕдиновременнуюВыплатуКОтпускуПриИзменениииНаСервере()
	 	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	ОчиститьРассчитанныеДанные();
	
КонецПроцедуры
           
&НаСервере
Процедура ДополнительныеОтпускаДатаНачалаПриИзмененииНаСервере(Идентификатор)
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(Идентификатор);
	Если ЗначениеЗаполнено(Строка.ДатаОкончания) И ЗначениеЗаполнено(Строка.ДатаНачала) 
		И Строка.ДатаНачала <= Строка.ДатаОкончания Тогда
		ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(Строка.ВидОтпуска);
		Строка.КоличествоДней = УчетРабочегоВремени.ДлительностьИнтервала(Объект.Сотрудник, Строка.ДатаНачала, Строка.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		СдвинутьПериодыПоследующихОтпусков(Строка.НомерСтроки, КонецДня(Строка.ДатаОкончания) + 1, Объект.ДополнительныеОтпуска.Количество());
	Иначе
		Строка.КоличествоДней = 0;
	КонецЕсли;
	
	УстановитьДатуНачалаСобытия(ЭтаФорма);
	
	ПрочитатьПроизводственныйКалендарьСотрудника();
	
	УстановитьПланируемуюДатыВыплаты();

	ОбновитьРабочийГодДополнительногоОтпуска(Строка);
	
	УточнитьВозможностьРасчетаЗарплаты();
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаДатаОкончанияПриИзмененииНаСервере(Идентификатор)
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(Идентификатор);

	Если ЗначениеЗаполнено(Строка.ДатаОкончания) И ЗначениеЗаполнено(Строка.ДатаНачала) 
		И Строка.ДатаНачала <= Строка.ДатаОкончания Тогда
		ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(Строка.ВидОтпуска);
		Строка.КоличествоДней = УчетРабочегоВремени.ДлительностьИнтервала(Объект.Сотрудник, Строка.ДатаНачала, Строка.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		СдвинутьПериодыПоследующихОтпусков(Строка.НомерСтроки, КонецДня(Строка.ДатаОкончания) + 1, Объект.ДополнительныеОтпуска.Количество());
	Иначе
		Строка.КоличествоДней = 0;
	КонецЕсли;

	ОбновитьРабочийГодДополнительногоОтпуска(Строка);
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();

КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаКоличествоДнейПриИзмененииНаСервере(Идентификатор)
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(Идентификатор);

	Если ЗначениеЗаполнено(Строка.ДатаНачала) 
		И ЗначениеЗаполнено(Строка.КоличествоДней) Тогда
		ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(Строка.ВидОтпуска);
		Строка.ДатаОкончания = ОстаткиОтпусковКлиентСервер.ДатаОкончанияОтпуска(Объект.Сотрудник, Строка.ДатаНачала, Строка.КоличествоДней, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
		СдвинутьПериодыПоследующихОтпусков(Строка.НомерСтроки, КонецДня(Строка.ДатаОкончания) + 1, Объект.ДополнительныеОтпуска.Количество());
	КонецЕсли;

	ОбновитьРабочийГодДополнительногоОтпуска(Строка);
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();

КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзмененииНаСервере(Идентификатор)
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(Идентификатор);
	
	УстановитьДатуНачалаСобытия(ЭтаФорма);
	        	
	УстановитьПланируемуюДатыВыплаты();

	ОбновитьРабочийГодДополнительногоОтпуска(Строка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьРабочийГодОсновногоОтпуска()
	Если (Объект.ПредоставитьОсновнойОтпуск И ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(Объект.ДатаОкончанияОсновногоОтпуска))
		Или (Объект.ПредоставитьКомпенсациюОсновногоОтпуска И ЗначениеЗаполнено(Объект.КоличествоДнейКомпенсацииОсновногоОтпуска)) Тогда               
		
		УстановитьПривилегированныйРежим(Истина);
		
		СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
		СтруктураПараметров.Сотрудник = Объект.Сотрудник;
		СтруктураПараметров.ТекущийРегистратор = Объект.Ссылка;
		СтруктураПараметров.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
		Если Объект.ПредоставитьОсновнойОтпуск Тогда
			СтруктураПараметров.ДатаНачала = Объект.ДатаНачалаОсновногоОтпуска;
			СтруктураПараметров.ДатаОкончания = Объект.ДатаОкончанияОсновногоОтпуска
		Иначе
			СтруктураПараметров.ДатаНачала = Дата(1,1,1);
			СтруктураПараметров.ДатаОкончания = Дата(1,1,1);
		КонецЕсли;
		Если Объект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
			СтруктураПараметров.ДатаКомпенсации =  Объект.ПериодРегистрации;
			СтруктураПараметров.КоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсацииОсновногоОтпуска;
		Иначе
			СтруктураПараметров.ДатаКомпенсации =  Дата(1,1,1);
			СтруктураПараметров.КоличествоДнейКомпенсации = 0;
		КонецЕсли;
		ПериодОсновногоОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
		
		Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодОсновногоОтпуска.РабочийГодС;
		Объект.КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодОсновногоОтпуска.РабочийГодПо;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьРабочийГодДополнительногоОтпуска(Строка)
	Если (ЗначениеЗаполнено(Строка.ВидОтпуска) И ЗначениеЗаполнено(Строка.ДатаНачала) И ЗначениеЗаполнено(Строка.ДатаОкончания))
		Или (ЗначениеЗаполнено(Строка.КоличествоДнейКомпенсации)) Тогда               
		
		УстановитьПривилегированныйРежим(Истина);
		
		СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
		СтруктураПараметров.Сотрудник = Объект.Сотрудник;
		СтруктураПараметров.ТекущийРегистратор = Объект.Ссылка;
		СтруктураПараметров.ВидОтпуска = Строка.ВидОтпуска;
		СтруктураПараметров.ДатаНачала = Строка.ДатаНачала;
		СтруктураПараметров.ДатаОкончания = Строка.ДатаОкончания;
		СтруктураПараметров.ДатаКомпенсации =  Объект.ПериодРегистрации;
		СтруктураПараметров.КоличествоДнейКомпенсации = Строка.КоличествоДнейКомпенсации;
		ПериодДополнительногоОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
		
		Строка.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодС;
		Строка.КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодПо;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьРабочиеГодыОтпусков()
	
	СписокОтпусков = Новый ТаблицаЗначений;
	СписокОтпусков.Колонки.Добавить("ДатаНачала");
	СписокОтпусков.Колонки.Добавить("ДатаОкончания");
	СписокОтпусков.Колонки.Добавить("ВидОтпуска");
	
	СписокКомпенсаций = Новый ТаблицаЗначений;
	СписокКомпенсаций.Колонки.Добавить("ДатаКомпенсации");
	СписокКомпенсаций.Колонки.Добавить("КоличествоДней");
	СписокКомпенсаций.Колонки.Добавить("ВидОтпуска");
	
	Если Объект.ПредоставитьОсновнойОтпуск И ЗначениеЗаполнено(Объект.ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(Объект.ДатаОкончанияОсновногоОтпуска) Тогда               
		НовыйОтпуск = СписокОтпусков.Добавить();
		НовыйОтпуск.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
		НовыйОтпуск.ДатаНачала = Объект.ДатаНачалаОсновногоОтпуска;
		НовыйОтпуск.ДатаОкончания = Объект.ДатаОкончанияОсновногоОтпуска;
	КонецЕсли;
	Если Объект.ПредоставитьКомпенсациюОсновногоОтпуска Тогда
		НоваяКомпенсация = СписокКомпенсаций.Добавить();
		НоваяКомпенсация.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
		НоваяКомпенсация.ДатаКомпенсации = Объект.ПериодРегистрации;
		НоваяКомпенсация.КоличествоДней = Объект.КоличествоДнейКомпенсацииОсновногоОтпуска;
	КонецЕсли;
	
	Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
		Если ЗначениеЗаполнено(ДополнительныйОтпуск.ВидОтпуска) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаНачала) И ЗначениеЗаполнено(ДополнительныйОтпуск.ДатаОкончания) Тогда               
			НовыйОтпуск = СписокОтпусков.Добавить();
			НовыйОтпуск.ВидОтпуска = ДополнительныйОтпуск.ВидОтпуска;
			НовыйОтпуск.ДатаНачала = ДополнительныйОтпуск.ДатаНачала;
			НовыйОтпуск.ДатаОкончания = ДополнительныйОтпуск.ДатаОкончания;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныйОтпуск.ВидОтпуска) И ЗначениеЗаполнено(ДополнительныйОтпуск.КоличествоДнейКомпенсации) Тогда
			НоваяКомпенсация = СписокКомпенсаций.Добавить();
			НоваяКомпенсация.ВидОтпуска = ДополнительныйОтпуск.ВидОтпуска;
			НоваяКомпенсация.ДатаКомпенсации = Объект.ПериодРегистрации;
			НоваяКомпенсация.КоличествоДней = ДополнительныйОтпуск.КоличествоДнейКомпенсации;
		КонецЕсли;
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Истина);
	РабочиеПериодыСпискаОтпусков = ОстаткиОтпусков.РабочиеПериодыСпискаОтпусков(Объект.Сотрудник, Объект.Ссылка, СписокОтпусков, СписокКомпенсаций).РабочиеПериодыПоВидамОтпусков;
	
	ПериодОсновногоОтпуска = РабочиеПериодыСпискаОтпусков.Получить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	Если ПериодОсновногоОтпуска = Неопределено Тогда
		Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск 	= Неопределено;
		Объект.КонецПериодаЗаКоторыйПредоставляетсяОтпуск 	= Неопределено;
	Иначе
		Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск 	= ПериодОсновногоОтпуска.РабочийГодС;
		Объект.КонецПериодаЗаКоторыйПредоставляетсяОтпуск 	= ПериодОсновногоОтпуска.РабочийГодПо;
	КонецЕсли;
	
	Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
		ПериодДополнительногоОтпуска = РабочиеПериодыСпискаОтпусков.Получить(ДополнительныйОтпуск.ВидОтпуска);
		Если ПериодДополнительногоОтпуска = Неопределено Тогда
			ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск 	= Неопределено;
			ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск 	= Неопределено;
		Иначе
			ДополнительныйОтпуск.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск 	= ПериодДополнительногоОтпуска.РабочийГодС;
			ДополнительныйОтпуск.КонецПериодаЗаКоторыйПредоставляетсяОтпуск 	= ПериодДополнительногоОтпуска.РабочийГодПо;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПорядокВыплатыПриИзмененииНаСервере(ПерезаполнитьНачисления)
	
	УстановитьВидимостьУдержаний(ЭтаФорма);
	УстановитьПланируемуюДатыВыплаты();
	
	УстановитьСвойствоДокументРассчитан();
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
	БылоРассчитатьЗарплату = Объект.РассчитатьЗарплату;
	УточнитьВозможностьРасчетаЗарплаты();
	
	Если Объект.РассчитатьЗарплату И БылоРассчитатьЗарплату <> Объект.РассчитатьЗарплату Тогда 
		ПерезаполнитьНачисления = Истина;
	Иначе
		ПерезаполнитьНачисления = Ложь;
	КонецЕсли;
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПерерасчетов()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПерерасчетыДоступны = ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступны(ЭтаФорма, , "ДатаНачалаСобытия");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачисленияПерерасчет", "Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерерасчетГруппа", "Видимость", ПерерасчетыДоступны);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтпускаПострадавшимНаЧАЭС()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьОплатаОтпускаПострадавшимНаЧАЭС = ЕстьОплатаВидаОтпуска(ЭтотОбъект.Объект,  ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтпускПострадавшимЧАЭС", "Видимость", ЕстьОплатаОтпускаПострадавшимНаЧАЭС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьУдержаний(Форма)
	
	УдержанияДоступны = УдержанияДоступны(Форма);
	// управление доступностью прочих удержанпий, но не НДФЛ
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "Удержано", "Видимость", УдержанияДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "УдержанияИзменить", "Видимость", УдержанияДоступны);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УдержанияДоступны(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		УдержанияДоступны = Ложь;
	иначе
		УдержанияДоступны = ЭтоМежрасчетнаяВыплата(Форма.Объект.ПорядокВыплаты);
	КонецЕсли;
	
	Возврат УдержанияДоступны;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
		
	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьНадписьДней(Форма, Объект)
	Форма.НадписьДней = НСтр("ru='дн.';uk='дн.'");	
	Форма.НадписьДнейКомпенсации = "дн.";	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьИнформациюЗаполненностиДанных()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Если Объект.РасчетДенежногоСодержания Тогда
		
		СтруктураИнфонадписи = Новый Структура("Текст, Картинка");
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.ЗаполнитьИнформациюЗаполненностиДанныхСохраняемоеДенежноеСодержаниеДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), СтруктураИнфонадписи);
		КонецЕсли;
		
	Иначе
		СтруктураИнфонадписи = УчетСреднегоЗаработка.ИнформацияОЗаполненностиДанныхСреднегоЗаработка(
			Объект.Ссылка,
			ЗаполнениеВыполнено,
			Объект.Сотрудник,
			Объект.ДатаНачалаСобытия,
			Объект.ПериодРасчетаСреднегоЗаработкаНачало, 
			Объект.ПериодРасчетаСреднегоЗаработкаОкончание, 
			Объект.СреднийЗаработокОбщий, 
			Объект.ОтработанноеВремяДляСреднегоОбщий
		);
	КонецЕсли;
	
	ЗаполненностьДанныхИнформационныйТекст	= СтруктураИнфонадписи.Текст;
	ЗаполненностьДанныхКартинка				= СтруктураИнфонадписи.Картинка;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНачисленоУдержаноИтог(Форма)
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Форма.НачисленоИтог 	= Форма.Объект.Начисления.Итог("Результат");
	Форма.НДФЛ				= Форма.Объект.НДФЛ.Итог("Налог");
	Форма.ПрочиеУдержания	= Форма.Объект.Удержания.Итог("Результат") + Форма.Объект.ПогашениеЗаймов.Итог("ПогашениеЗайма") + Форма.Объект.ПогашениеЗаймов.Итог("ПогашениеПроцентов") + Форма.Объект.ПогашениеЗаймов.Итог("НалогНаМатериальнуюВыгоду");
	Форма.УдержаноИтог		= Форма.НДФЛ + Форма.ПрочиеУдержания;
	
	ВидОтпускаПострадавшимВАварииЧАЭС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	
	Если ЕстьОплатаВидаОтпуска(Форма.Объект, ВидОтпускаПострадавшимВАварииЧАЭС) Тогда
		Форма.РассчитаноОтпускЧАЭС = КоличествоОплачиваемыхДнейПоВидуОтпуска(Форма.Объект, ВидОтпускаПострадавшимВАварииЧАЭС) * Форма.Объект.СреднийЗаработок;	
	Иначе
		Форма.РассчитаноОтпускЧАЭС = 0;	
	КонецЕсли;
	
	Форма.ВзносыФОТ				= Форма.Объект.ВзносыФОТ.Итог("Результат");
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПерерасчетИтог(Форма)
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Форма.ПерерасчетИтог = Форма.Объект.НачисленияПерерасчет.Итог("Результат");		
КонецПроцедуры

&НаСервере
Процедура ОчиститьРассчитанныеДанные(ПерезаполнитьНачисления = Истина)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Если ПерезаполнитьНачисления Тогда
		Объект.Начисления.Очистить();
		Объект.НачисленияПерерасчет.Очистить();
		Объект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
		Объект.Показатели.Очистить();
		Объект.ПогашениеЗаймов.Очистить();
	КонецЕсли;	
	
	Объект.Удержания.Очистить();
	
	Объект.НДФЛ.Очистить();

	Объект.ВзносыФОТ.Очистить();

	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	ОбновитьПерерасчетИтог(ЭтотОбъект);
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ОчиститьСреднийЗаработок()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Объект.СреднийЗаработокОбщий.Очистить();
	Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
	Объект.ДанныеОбИндексации.Очистить();
	Объект.СреднийЗаработок  = Неопределено;
	Объект.СреднийЗаработокПоРабочимДням  = Неопределено;
	
	Объект.ДенежноеСодержание.Очистить();
	Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
	
	ОбновитьДанныеДляРасчетаСреднего = Истина;
	
	УстановитьПредупреждениеДокументНеРассчитан(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредупреждениеДокументНеРассчитан(Форма)
	
	Форма.ЗаполненностьДанныхИнформационныйТекст = УчетСреднегоЗаработкаКлиентСервер.ТекстПредупрежденияДокументНеРассчитан();
	Форма.ЗаполненностьДанныхКартинка			 = БиблиотекаКартинок.Предупреждение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруРеквизитовИСпособовРасчетаОтпуска()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовИСпособовРасчетаОтпуска = Новый Структура;
	СтруктураРеквизитовИСпособовРасчетаОтпуска.Вставить("СреднийЗаработок", Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням);
	
	СпособыРасчетаСреднегоЗаработка = Новый ФиксированнаяСтруктура(СтруктураРеквизитовИСпособовРасчетаОтпуска);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(Форма, Объект)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОсновнойОтпуск",
		"Доступность",
		Объект.ПредоставитьОсновнойОтпуск);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"Компенсация",
		"Доступность",
		Объект.ПредоставитьКомпенсациюОсновногоОтпуска);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидРасчетаМатериальнойПомощиПриОтпуске",
		"Доступность",
		Объект.ПредоставитьМатериальнуюПомощьПриОтпуске);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидРасчетаЕдиновременнойВыплатыКОтпуску",
		"Доступность",
		Объект.ПредоставитьЕдиновременнуюВыплатуКОтпуску);	
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПериодЗаКоторыйПредоставляетсяОтпуск",
		"Доступность",
		Объект.ПредоставитьОсновнойОтпуск Или Объект.ПредоставитьКомпенсациюОсновногоОтпуска);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДополнительныеОтпуска",
		"ТолькоПросмотр",
		Не Объект.ПредоставитьДополнительныйОтпуск);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДополнительныеОтпуска",
		"ИзменятьСоставСтрок",
		Форма.ДоступенВводНового);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДополнительныеОтпуска",
		"ИзменятьПорядокСтрок",
		Форма.ДоступенВводНового);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ПредоставитьОтгул",
		"Доступность",
		Объект.ПредоставитьОсновнойОтпуск ИЛИ Объект.ПредоставитьДополнительныйОтпуск);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"КоличествоДнейОтгула",
		"Доступность",
		Объект.ПредоставитьОтгул);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаРасходОтгула",
		"Доступность",
		Объект.ПредоставитьОтгул);
		
	Если ЗначениеЗаполнено(Форма.Объект.ДокументЗаполнения) Тогда
		
		ИменаБлокируемыхЭлементов = Новый Массив;
		ИменаБлокируемыхЭлементов.Добавить("Организация");
		ИменаБлокируемыхЭлементов.Добавить("Сотрудник");
		ИменаБлокируемыхЭлементов.Добавить("ПредоставитьОсновнойОтпуск");
		ИменаБлокируемыхЭлементов.Добавить("ДатаНачалаОсновногоОтпуска");
		ИменаБлокируемыхЭлементов.Добавить("ДатаОкончанияОсновногоОтпуска");
		ИменаБлокируемыхЭлементов.Добавить("КоличествоДнейОсновногоОтпуска");
		ИменаБлокируемыхЭлементов.Добавить("ПредоставитьКомпенсациюОсновногоОтпуска");
		ИменаБлокируемыхЭлементов.Добавить("ДнейЧасовКомпенсацииОтпуска");
		ИменаБлокируемыхЭлементов.Добавить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
		ИменаБлокируемыхЭлементов.Добавить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
		ИменаБлокируемыхЭлементов.Добавить("ПредоставитьДополнительныйОтпуск");
		ИменаБлокируемыхЭлементов.Добавить("ДополнительныеОтпускаВидОтпуска");
		ИменаБлокируемыхЭлементов.Добавить("ДополнительныеОтпускаДатаНачала");
		ИменаБлокируемыхЭлементов.Добавить("ДополнительныеОтпускаДатаОкончания");
		ИменаБлокируемыхЭлементов.Добавить("ДополнительныеОтпускаКоличествоДней");
		ИменаБлокируемыхЭлементов.Добавить("ДополнительныеОтпускаКоличествоДнейКомпенсации");
		ИменаБлокируемыхЭлементов.Добавить("ДополнительныеОтпускаНачалоПериодаЗаКоторыйПредоставляетсяОтпуск");
		ИменаБлокируемыхЭлементов.Добавить("ДополнительныеОтпускаКонецПериодаЗаКоторыйПредоставляетсяОтпуск");
		ИменаБлокируемыхЭлементов.Добавить("ДополнительныеОтпускаОснование");
		
		Для каждого ИмяЭлемента Из ИменаБлокируемыхЭлементов Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				ИмяЭлемента,
				"ТолькоПросмотр",
				Истина);
				
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДополнительныеОтпуска",
			"ИзменятьСоставСтрок",
			Ложь);
				
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДополнительныеОтпуска",
			"ИзменятьПорядокСтрок",
			Ложь);
			
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ.Выгрузить());
	
	Модифицированность = Истина;
	
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыНДФЛ());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВзносовНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.ВзносыФОТ.Загрузить(Параметр.ВзносыФОТ.Выгрузить());
	
	Модифицированность = Истина;
	
//	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыНДФЛ());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеУдержанийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.Удержания.Загрузить(Параметр.Удержания.Выгрузить());
	Объект.ПогашениеЗаймов.Загрузить(Параметр.ПогашениеЗаймов.Выгрузить());
	
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыУдержаний());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоДокументРассчитан()
	
	Если ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
		Объект.ДокументРассчитан = Истина;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты
		Или Не Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеТаблицы = Новый Массив;
	ПроверяемыеТаблицы.Добавить("Начисления");
	ПроверяемыеТаблицы.Добавить("НачисленияПерерасчет");
	
	ПроверяемыеНачисления = Новый Массив;
	
	Для каждого ПроверяемаяТаблица Из ПроверяемыеТаблицы Цикл
		НачисленияДокумета = Новый Массив;
		Для каждого Начисление Из Форма.Объект[ПроверяемаяТаблица] Цикл
			НачисленияДокумета.Добавить(Начисление.Начисление);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеНачисления, НачисленияДокумета, Истина);
	КонецЦикла;
	
	АвтоОтметкаНезаполненного = ДатаВыплатыОбязательнаКЗаполнению(Форма.Объект.ПорядокВыплаты, ПроверяемыеНачисления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного); 
	Если Не АвтоОтметкаНезаполненного Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "ОтметкаНезаполненного", Ложь); 
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаВыплатыОбязательнаКЗаполнению(Знач ПорядокВыплаты, Знач ПроверяемыеНачисления)
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, ПроверяемыеНачисления);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("РезультатыСреднийЗаработок");
	ИменаЭлементов.Добавить("НадписьДнейЧасов");
	ИменаЭлементов.Добавить("ВидРасчетаОсновногоОтпуска");
	ИменаЭлементов.Добавить("ВидРасчетаКомпенсацииОсновногоОтпуска");
	ИменаЭлементов.Добавить("ВидРасчетаМатериальнойПомощиПриОтпуске");
	ИменаЭлементов.Добавить("НачисленияСтраница");
	ИменаЭлементов.Добавить("НачисленияПерерасчетСтраница");
	ИменаЭлементов.Добавить("РассчитатьЗарплату");
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейМногофункциональныхДокументов(ЭтаФорма, ИменаЭлементов);
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
		УстановитьВидимостьПерерасчетов();
		УстановитьВидимостьУдержаний(ЭтаФорма);
		УстановитьВидимостьОтпускаПострадавшимНаЧАЭС();
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "Результаты", 					"ТолькоПросмотр", Истина);
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "СреднийЗаработокПоказатель", 	"ТолькоПросмотр", Истина);
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ЗаполненностьДанныхИнфо", 		"ТолькоПросмотр", Истина);
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаПересчитать", 			"ТолькоПросмотр", Истина);
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ДенежноеСодержаниеПоказатель", "ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьДоступностьРегистрацииНачислений();
	
	Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
		Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
		
		Объект.ДокументРассчитан = ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
		Объект.Рассчитал = Неопределено;
		ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
		УстановитьВидимостьРасчетныхПолей();
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	ВыполнитьРасчетИПерезаполнениеНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ОсновнойИлиДополнительныйОтпускПриИзмененииНаСервере()
	
	ЗаполнитьВидыРасчетовОсновногоОтпуска();
	
	УстановитьДатуНачалаСобытия(ЭтаФорма);
	             	
	УстановитьПланируемуюДатыВыплаты();

	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	
	УстановитьОтметкуНезаполненогоПериодаЗаКоторыйПредоставляетсяОсновнойОтпуск();
	
КонецПроцедуры

&НаСервере
Процедура ВидРасчетаОсновногоОтпускаПриИзмененииНаСервере()
	ЗаполнитьПериодРасчетаСреднегоЗаработка();	
	УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
	ОчиститьРассчитанныеДанные();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненогоПериодаЗаКоторыйПредоставляетсяОсновнойОтпуск()
	
	Отметка = Объект.ПредоставитьОсновнойОтпуск;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"НачалоПериодаЗаКоторыйПредоставляетсяОтпуск",
																"АвтоОтметкаНезаполненного",
																Отметка);
																
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"КонецПериодаЗаКоторыйПредоставляетсяОтпуск",
																"АвтоОтметкаНезаполненного",
																Отметка);
																
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"НачалоПериодаЗаКоторыйПредоставляетсяОтпуск",
																"ОтметкаНезаполненного",
																Отметка И Не ЗначениеЗаполнено(Объект.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск));
																
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
																"КонецПериодаЗаКоторыйПредоставляетсяОтпуск",
																"ОтметкаНезаполненного",
																Отметка И Не ЗначениеЗаполнено(Объект.КонецПериодаЗаКоторыйПредоставляетсяОтпуск));

КонецПроцедуры

&НаСервере
Процедура ПрочитатьПостоянныеКадровыеДанныеСотрудника()
	
	УстановитьКраткосрочныйТрудовойДоговорСотрудника();
	УстановитьДругихСотрудниковФизическогоЛица();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДругихСотрудниковФизическогоЛица()

	ЭтотОбъект.ДругиеСотрудникиФизическогоЛица = Новый ФиксированныйМассив(Новый Массив);
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ФизическоеЛицо, ГоловнаяОрганизация");
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников[0];
		ЭтотОбъект.ДругиеСотрудникиФизическогоЛица = ДругиеСотрудникиФизическогоЛица(Объект.Сотрудник, КадровыеДанныеСотрудника.ФизическоеЛицо, КадровыеДанныеСотрудника.ГоловнаяОрганизация);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьКраткосрочныйТрудовойДоговорСотрудника()
	
	ЭтотОбъект.КраткосрочныйТрудовойДоговорСотрудника = ОстаткиОтпусков.СотрудникРаботаетПоКраткосрочномуТрудовомуДоговору(Объект.Сотрудник, Объект.ДатаНачалаСобытия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДругиеСотрудникиФизическогоЛица(Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация)
	
	ДанныеДругихСотрудниковФизическогоЛица = Новый Массив;	
	
	Если ЗначениеЗаполнено(Сотрудник)
		И ЗначениеЗаполнено(ФизическоеЛицо)
		И ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		
		ДругиеСотрудникиФизическогоЛица = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(ФизическоеЛицо, ГоловнаяОрганизация, Сотрудник, '00010101', '00010101');
		
		Если ДругиеСотрудникиФизическогоЛица.Количество() > 0  Тогда
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДругиеСотрудникиФизическогоЛица, "Организация");
			
			Для каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
				
				ДанныеДругогоСотрудникаФизическогоЛица = Новый Структура("Сотрудник, Организация", КадровыеДанныеСотрудника.Сотрудник, КадровыеДанныеСотрудника.Организация);
				
				ДанныеДругихСотрудниковФизическогоЛица.Добавить(Новый ФиксированнаяСтруктура(ДанныеДругогоСотрудникаФизическогоЛица));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ДанныеДругихСотрудниковФизическогоЛица);
	
КонецФункции

&НаСервере
Процедура ПрочитатьПроизводственныйКалендарьСотрудника()
	
	ЭтотОбъект.ПроизводственныйКалендарьСотрудника = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодОтсутствия = ПериодОтсутствия(Объект);
	
	Если ЗначениеЗаполнено(ПериодОтсутствия.НачалоПериода) Тогда
		
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ГрафикРаботы", ПериодОтсутствия.НачалоПериода);
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников[0];
		
		Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ГрафикРаботы) Тогда
			ЭтотОбъект.ПроизводственныйКалендарьСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КадровыеДанныеСотрудника.ГрафикРаботы, "ПроизводственныйКалендарь");
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДлительностьИнтервалов()
	ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной")); 
	Объект.КоличествоДнейОсновногоОтпуска = УчетРабочегоВремени.ДлительностьИнтервала(Объект.Сотрудник, Объект.ДатаНачалаОсновногоОтпуска, Объект.ДатаОкончанияОсновногоОтпуска,ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
	
	Для каждого Строка Из Объект.ДополнительныеОтпуска Цикл
		ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(Строка.ВидОтпуска);                           
		Строка.КоличествоДней = УчетРабочегоВремени.ДлительностьИнтервала(Объект.Сотрудник, Строка.ДатаНачала, Строка.ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьРасшифровкаОстаткаОтпуска(Форма)
	Если ЗначениеЗаполнено(Форма.Объект.Сотрудник) Тогда
		Форма.РасшифровкаОстаткаОтпуска = НСтр("ru='Как сотрудник использовал отпуск?';uk='Як працівник використав відпустку?'");
	Иначе
		Форма.РасшифровкаОстаткаОтпуска = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаОстаткаОтпускаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Сотрудники", "СправкаПоОтпускамСотрудника", 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), ЭтаФорма,
		Новый Структура("ДатаОстатков, ЭтоРасчетПриУвольнении", Объект.ДатаНачалаСобытия, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаПриОкончанииРедактированияНаСервере()
	
	Если ПерезаполнитьПриОкончанииРедактирования Тогда
		УстановитьПредупреждениеДокументНеРассчитан(ЭтотОбъект);
		ОчиститьРассчитанныеДанные();
	КонецЕсли;
	
	УстановитьПараметрыВыбораВидаОтпуска(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаПослеУдаленияНаСервере()
	
	УстановитьПараметрыВыбораВидаОтпуска(ЭтотОбъект);
	УстановитьВидимостьОтпускаПострадавшимНаЧАЭС();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФлажкаРассчитатьЗарплату()
	
	НачалоПериодаРасчетаЗарплаты = НачалоПериодаРасчетаЗарплаты();
	
	ПредставлениеМесяца = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(НачалоПериодаРасчетаЗарплаты);
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Рассчитать зарплату за %1';uk='Розрахувати зарплату за %1'"), ПредставлениеМесяца);
	
	Элементы.РассчитатьЗарплату.Заголовок = ТекстЗаголовка; 
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокСтраницыДополнительныеОтпуска()

	ИспользуютсяОтгулы = ПолучитьФункциональнуюОпцию("ИспользоватьОтгулы");
	
	Если ИспользуютсяОтгулы Тогда
		ТекстЗаголовка = НСтр("ru='Дополнительные отпуска, отгулы';uk='Додаткові відпустки, відгули'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Дополнительные отпуска';uk='Додаткові відпустки'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаДополнительныеОтпуска", "Заголовок", ТекстЗаголовка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ГруппаОтгулы", "Видимость", ИспользуютсяОтгулы);
		
КонецПроцедуры

&НаСервере
Процедура УточнитьВозможностьРасчетаЗарплаты()
	
	НачалоПериода =	НачалоПериодаРасчетаЗарплаты(); 
	УстановитьПризнакРассчитатьЗарплату(НачалоПериода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакРассчитатьЗарплату(НачалоПериода)
							
	Если ОтпускНачинаетсяВСледующемМесяце(НачалоПериода) Тогда
		Объект.РассчитатьЗарплату = Истина;
	ИначеЕсли Не ДоступенРасчетЗарплаты(НачалоПериода) Тогда 
		Объект.РассчитатьЗарплату = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДоступенРасчетЗарплаты(НачалоПериода)
	
	Возврат Объект.ДатаНачалаСобытия > НачалоПериода 
			И Объект.ДатаНачалаСобытия <= КонецМесяца(НачалоПериода)
			И ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты);
	
КонецФункции

&НаСервере
Функция НачалоПериодаРасчетаЗарплаты()
	
	НачалоПериода = Объект.ПериодРегистрации;
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда 
		НачалоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИсправленныйДокумент, "ПериодРегистрации");
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

&НаСервере
Функция ДанныеДокументаДляПроведения()
	
	// Чтобы применить методы, осуществляющие сбор данных для проведения запишем документ.
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	Если Не Объект.Ссылка.Пустая() Тогда
		ДокументОбъект = ДокументОбъект.Скопировать();
		ДокументОбъект.Дата = Объект.Дата;
	КонецЕсли;
	ВременнаяСсылка = Документы.Отпуск.ПолучитьСсылку();
	ДокументОбъект.УстановитьСсылкуНового(ВременнаяСсылка);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	// Сбор данных для проведения
	РеквизитыДляПроведения = Документы.Отпуск.РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = Документы.Отпуск.ДанныеДляПроведения(РеквизитыДляПроведения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ДокументСсылка", ДокументСсылка);
	ДанныеДляПроведения.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

&НаСервере
Функция ОтпускНачинаетсяВСледующемМесяце(НачалоПериода = Неопределено) 
	
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода =	НачалоПериодаРасчетаЗарплаты(); 
	КонецЕсли;
	
	Возврат Объект.ДатаНачалаСобытия > КонецМесяца(НачалоПериода);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОплатаВидаОтпуска(Объект, ВидОтпуска)
	
	ЕстьОплатаВидаОтпуска = Ложь;
	
	Если Не ВидОтпуска = Неопределено 
		И Объект.ПредоставитьДополнительныйОтпуск Тогда
		Отбор = Новый Структура("ВидОтпуска", ВидОтпуска);
		ЕстьОплатаВидаОтпуска = Объект.ДополнительныеОтпуска.НайтиСтроки(Отбор).Количество() > 0;
	КонецЕсли;
	
	Возврат ЕстьОплатаВидаОтпуска;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоОплачиваемыхДнейПоВидуОтпуска(Объект, ВидОтпуска)
	
	КоличествоОплачиваемыхДнейПоВидуОтпуска = 0;
	
	ОтпускПострадавшимНаЧАЭС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Отбор = Новый Структура("ВидОтпуска", ОтпускПострадавшимНаЧАЭС);
	СтрокиПоВидуОтпуска = Объект.ДополнительныеОтпуска.НайтиСтроки(Отбор);
	Если СтрокиПоВидуОтпуска.Количество() > 0 Тогда
		НачисленияПоВидуОтпуска = Новый Массив;
		Для каждого СтрокаПоВидуОтпуска Из СтрокиПоВидуОтпуска Цикл
			КоличествоОплачиваемыхДнейПоВидуОтпуска = КоличествоОплачиваемыхДнейПоВидуОтпуска + СтрокаПоВидуОтпуска.КоличествоДней;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоОплачиваемыхДнейПоВидуОтпуска;
	
КонецФункции 

&НаСервере
Процедура УстановитьУсловноеОформлениеДополнительныхОтпусков()
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС") Тогда
		ЭлементУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<не предусмотрена>");
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДополнительныеОтпуска.ВидОтпуска");
		ЭлементОтбора.ПравоеЗначение = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДополнительныеОтпускаКоличествоДнейКомпенсации");
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДополнительныеОтпускаВидРасчетаКомпенсации");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "Объект.ГлавныйБухгалтер");
	ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Объект.Бухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "Объект.РаботникКадровойСлужбы");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "Объект.ДолжностьРаботникаКадровойСлужбы");
	
	ЗапрашиваемыеЗначения.Вставить("Исполнитель", "Объект.Исполнитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьИсполнителя", "Объект.ДолжностьИсполнителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	
	Если ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении") Тогда
		ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.Исполнитель");	
	Иначе
		
		Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС") Тогда
			ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.РаботникКадровойСлужбы");
		Иначе
			ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.Бухгалтер", "Объект.РаботникКадровойСлужбы");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	
	Возврат УчетНДФЛФормыРасширенный.СведенияОбНДФЛ(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция СведенияОВзносах() Экспорт
	
	ДанныеОВзносах = Новый Структура;

	ДанныеОВзносах.Вставить("ВзносыФОТ", Объект.ВзносыФОТ.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОВзносах, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции


&НаСервере
Функция СведенияОбУдержаниях() Экспорт
	
	Возврат РасчетЗарплатыРасширенный.СведенияОбУдержаниях(ЭтаФорма);
	
КонецФункции

#Область ПараметрыВыбораВидаОтпуска

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВидаОтпуска(Форма)
	
	МассивПараметровВыбора = ПараметрыВыбораВидаДополнительногоОтпуска(Форма);
	
	МассивДоступныхВидовОтпусков = ВидыОтпусковНеВыбранныеВДокументе(Форма.Объект);
	
	НовыеПараметрыВыбора = ПараметрыВыбораБезОтбораПоСсылке(МассивПараметровВыбора);
	НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивДоступныхВидовОтпусков)));
	
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДополнительныеОтпускаВидОтпуска", "ПараметрыВыбора", НовыеПараметрыВыбора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидыОтпусковНеВыбранныеВДокументе(Объект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВыбранныеВидыОтпусков", Объект.ДополнительныеОтпуска.Выгрузить(, "ВидОтпуска").ВыгрузитьКолонку("ВидОтпуска"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыОтпусков.Ссылка
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	НЕ ВидыОтпусков.Ссылка В (&ВыбранныеВидыОтпусков)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

&НаКлиенте
Процедура ДополнитьПараметрыВыбораВидаОтпускаВидомОтпускаТекущейСтроки()
	
	ТекущийВидОтпуска = Элементы.ДополнительныеОтпуска.ТекущиеДанные.ВидОтпуска;
	
	Если НЕ ЗначениеЗаполнено(ТекущийВидОтпуска) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметровВыбора = ПараметрыВыбораВидаДополнительногоОтпуска(ЭтотОбъект);
	
	НовыеПараметрыВыбора = ПараметрыВыбораБезОтбораПоСсылке(МассивПараметровВыбора);
	МассивДоступныхВидовОтпусков = ЗначениеПараметраВыбораОтборПоСсылке(МассивПараметровВыбора);
	
	МассивДоступныхВидовОтпусков.Добавить(ТекущийВидОтпуска);
	
	НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивДоступныхВидовОтпусков)));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДополнительныеОтпускаВидОтпуска", "ПараметрыВыбора", НовыеПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидОтпускаТекущейСтрокиИзПараметровВыбораВидаОтпуска()
	
	ТекущийВидОтпуска = Элементы.ДополнительныеОтпуска.ТекущиеДанные.ВидОтпуска;
	
	Если НЕ ЗначениеЗаполнено(ТекущийВидОтпуска) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметровВыбора = ПараметрыВыбораВидаДополнительногоОтпуска(ЭтотОбъект);
	
	МассивДоступныхВидовОтпусков = ЗначениеПараметраВыбораОтборПоСсылке(МассивПараметровВыбора);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивДоступныхВидовОтпусков, ТекущийВидОтпуска);
	
	НовыеПараметрыВыбора = ПараметрыВыбораБезОтбораПоСсылке(МассивПараметровВыбора);
	
	НовыеПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивДоступныхВидовОтпусков)));
	НовыеПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметрыВыбора);	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДополнительныеОтпускаВидОтпуска", "ПараметрыВыбора", НовыеПараметрыВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораВидаДополнительногоОтпуска(Форма)
		
	МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы, "ДополнительныеОтпускаВидОтпуска", "ПараметрыВыбора");
	
	Если МассивПараметровВыбора = Неопределено Тогда
		МассивПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	Возврат МассивПараметровВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораБезОтбораПоСсылке(МассивПараметровВыбора)
	
	НовыеПараметрыВыбора = Новый Массив;	
	
	Для каждого Параметр Из МассивПараметровВыбора Цикл
		Если Параметр.Имя <> "Отбор.Ссылка" Тогда
			НовыеПараметрыВыбора.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыеПараметрыВыбора;	
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПараметраВыбораОтборПоСсылке(МассивПараметровВыбора)
	
	ЗначениеПараметраВыбораОтборПоСсылке = Новый Массив;
	
	Для каждого Параметр Из МассивПараметровВыбора Цикл
		Если Параметр.Имя = "Отбор.Ссылка" Тогда
			Для каждого ДоступныйВидОтпуска Из Параметр.Значение Цикл
				ЗначениеПараметраВыбораОтборПоСсылке.Добавить(ДоступныйВидОтпуска);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеПараметраВыбораОтборПоСсылке;
	
КонецФункции
	
#КонецОбласти

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	Описания.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПериодРегистрации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Организация"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Сотрудник"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПредоставитьОсновнойОтпуск"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачалаОсновногоОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаОкончанияОсновногоОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПредоставитьМатериальнуюПомощьПриОтпуске"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПредоставитьЕдиновременнуюВыплатуКОтпуску"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "РассчитатьЗарплату"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПредоставитьКомпенсациюОсновногоОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДнейЧасовКомпенсацииОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчетаОсновногоОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчетаКомпенсацииОсновногоОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчетаМатериальнойПомощиПриОтпуске"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчетаЕдиновременнойВыплатыКОтпуску"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПредоставитьДополнительныйОтпуск"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаВидОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаВидРасчета"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаДатаНачала"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаДатаОкончания"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаКоличествоДнейКомпенсации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаВидРасчетаКомпенсации"));
		
	КонецЕсли;
	
	Для каждого ОписаниеЭлемента Из Массив Цикл
		ОписаниеЭлемента.Вставить("ПредупреждениеПриРедактировании", ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом());
	КонецЦикла;
	
	Возврат Массив
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ?(ЕстьФиксированныеДанные(Форма), ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.Авто));
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьФиксированныеДанные(Форма)
	Если Не Форма.РегистрацияНачисленийДоступна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсправленныйДокументЗаполнен = ЗначениеЗаполнено(Форма.Объект.ИсправленныйДокумент);
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен) 
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен);
		
КонецФункции 

#КонецОбласти

&НаСервере
Процедура ОтгулПриИзмененииНаСервере()

	Если Объект.ПредоставитьОтгул Тогда
		ЗаполнитьНакопленнымиОтгуламиНаСервере();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНакопленнымиОтгуламиНаСервере()

	ДниЧасыНакопленныхОтгулов = УчетРабочегоВремени.ДниЧасыНакопленныхОтгулов(Объект.Организация, Объект.Сотрудник, Объект.Дата);
	ЗаполнитьЗначенияСвойств(Объект, ДниЧасыНакопленныхОтгулов);
	Объект.КоличествоДнейОтгула = Объект.РасходДнейОтгула + Окр(Объект.РасходЧасовОтгула / 8, 0);
	
КонецПроцедуры

#Область ОтсутствияПоДругимМестамРаботы

&НаСервере
Процедура ЗаполнитьОтсутствияПоДругимМестамРаботы()
	
	ПериодыОтсутствий = Документы.Отпуск.ПериодыОтсутствий(Объект);
	ПериодОтсутствия = Документы.Отпуск.ПериодОтсутствия(ПериодыОтсутствий);
	
	Если Не ЗначениеЗаполнено(ПериодОтсутствия.НачалоПериода)
		Или Не ЗначениеЗаполнено(ПериодОтсутствия.ОкончаниеПериода) Тогда
		
		ОтсутствияПоДругимМестамРаботы.Очистить();
		Возврат;
		
	КонецЕсли;
	
	КадровыйУчетФормыРасширенный.ЗаполнитьОтсутствияПоДругимМестамРаботы(
		ЭтаФорма, ПериодОтсутствия.НачалоПериода, ПериодОтсутствия.ОкончаниеПериода);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОтсутствияПоДругимМестамРаботы()
	
	ЕстьДругиеСотрудникиФизическогоЛица = ДругиеСотрудникиФизическогоЛица.Количество() > 0;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтсутствияПоДругимМестамРаботы", "Видимость", ЕстьДругиеСотрудникиФизическогоЛица);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтсутствияПоДругимМестамРаботы", "Видимость", ЕстьДругиеСотрудникиФизическогоЛица);
			
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуНовогоОтпускаСовместителя(Совместитель = Неопределено, ОрганизацияСовместителя = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Ссылка", Неопределено);
	ДанныеЗаполнения.Вставить("Действие", "Заполнить");
	
	ДанныеЗаполнения.Вставить("Организация", ОрганизацияСовместителя);
	ДанныеЗаполнения.Вставить("Сотрудник", Совместитель);
	
	ДанныеОтпусков = Новый Массив();
	Если Объект.ПредоставитьОсновнойОтпуск Тогда
		НоваяСтрокаОтпуска = ДанныеЗаполненияСтроки();
		НоваяСтрокаОтпуска.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
		НоваяСтрокаОтпуска.ДатаНачала = Объект.ДатаНачалаОсновногоОтпуска;
		НоваяСтрокаОтпуска.ДатаОкончания = Объект.ДатаОкончанияОсновногоОтпуска;
		НоваяСтрокаОтпуска.КоличествоДней = Объект.КоличествоДнейОсновногоОтпуска;
		НоваяСтрокаОтпуска.КоличествоДнейКомпенсации = Объект.КоличествоДнейКомпенсацииОсновногоОтпуска;
		ДанныеОтпусков.Добавить(НоваяСтрокаОтпуска);
	КонецЕсли;
	
	Если Объект.ПредоставитьДополнительныйОтпуск Тогда
		Для каждого Строка Из Объект.ДополнительныеОтпуска Цикл
			НоваяСтрокаОтпуска = ДанныеЗаполненияСтроки();
			НоваяСтрокаОтпуска.ВидОтпуска = Строка.ВидОтпуска;
			НоваяСтрокаОтпуска.ДатаНачала = Строка.ДатаНачала;
			НоваяСтрокаОтпуска.ДатаОкончания = Строка.ДатаОкончания;
			НоваяСтрокаОтпуска.КоличествоДней = Строка.КоличествоДней;
			НоваяСтрокаОтпуска.КоличествоДнейКомпенсации = Строка.КоличествоДнейКомпенсации;
			ДанныеОтпусков.Добавить(НоваяСтрокаОтпуска);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.Отпуск.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаполненияСтроки()
	
	СтруктураОтпуска = Новый Структура;
		
	СтруктураОтпуска.Вставить("ВидОтпуска");
	СтруктураОтпуска.Вставить("ДатаНачала");
	СтруктураОтпуска.Вставить("ДатаОкончания");
	СтруктураОтпуска.Вставить("КоличествоДней");
	СтруктураОтпуска.Вставить("КоличествоДнейКомпенсации");
	СтруктураОтпуска.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", '00010101');
	СтруктураОтпуска.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск", '00010101');
	СтруктураОтпуска.Вставить("Основание", "");
	СтруктураОтпуска.Вставить("ВидОтпускаПрежний", Неопределено);
	СтруктураОтпуска.Вставить("ИндексСтрокиДокумента", Неопределено);
	
	Возврат СтруктураОтпуска;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНовогоОтпускаБезОплатыСовместителя(ДатаНачала, ДатаОкончания, Совместитель = Неопределено, ОрганизацияСовместителя = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Действие", "Заполнить");	
	ДанныеЗаполнения.Вставить("Организация", ОрганизацияСовместителя);
	ДанныеЗаполнения.Вставить("Сотрудник", Совместитель);
	ДанныеЗаполнения.Вставить("ДатаНачала", ДатаНачала);
	ДанныеЗаполнения.Вставить("ДатаОкончания", ДатаОкончания);
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.ОтпускБезСохраненияОплаты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодОтсутствия(Знач Объект)
	ПериодыОтсутствий = Документы.Отпуск.ПериодыОтсутствий(Объект);
	Возврат Документы.Отпуск.ПериодОтсутствия(ПериодыОтсутствий);
КонецФункции 

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
