#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	Документы.ВыпускПродукции.ПроверитьСвязанныеОбъектыОбработаныОбработчикамиОбновления(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
		ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	КонецЕсли; 
	
	СформироватьСписокЗависимыхЗаказов();
	
	УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВыпускПродукции);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	//++ НЕ УТКА
    Если ВыпускПоРаспоряжениям Тогда    
    
        НалоговоеНазначениеВыпуска = Неопределено; 
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ЗаказНаПроизводство.НалоговоеНазначение, &НалоговоеНазначениеОрганизации) КАК НалоговоеНазначение
		|ИЗ
		|   Документ.ВыпускПродукции КАК ВыпускПродукции
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛист
		|	ПО
		|		ВыпускПродукции.Распоряжение = МаршрутныйЛист.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|	ПО
		|		ЗаказНаПроизводство.Ссылка = МаршрутныйЛист.Распоряжение
		|ГДЕ
		|	ВыпускПродукции.Ссылка = &Ссылка
		|");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка); 
		Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
            НалоговоеНазначениеВыпуска = Выборка.НалоговоеНазначение;
        КонецЕсли; 
        
        Если НалоговоеНазначение <> НалоговоеНазначениеВыпуска Тогда
            НалоговоеНазначение = НалоговоеНазначениеВыпуска;
        КонецЕсли; 
		
	КонецЕсли;	
	//-- НЕ УТКА
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ВыпускПродукции,
			Склад,
			Подразделение,
			НЕОПРЕДЕЛЕНО);
		
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		
		Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
			ИменаПолей.Вставить("Произвольный", "Склад");
		Иначе
			ИменаПолей.Вставить("Произвольный", "Подразделение");
			ИменаПолей.Вставить("Работа", "Подразделение");
		КонецЕсли;
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Товары,
			МестаУчета,
			ИменаПолей);
		
		ЗаполнитьВидыЗапасовДокумента();
		ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ЗапасыСервер.ОчиститьАналитикуУчетаПартийВТабличнойЧасти(Товары);
		
	КонецЕсли;
	
	// Заполним распоряжение в табличной части
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		Для Каждого СтрокаТовары Из Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.Распоряжение) Тогда
				СтрокаТовары.Распоряжение = Распоряжение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ДанныеВнутреннихДокументов.ЗаписатьДанныеДокумента(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Перем РеквизитыШапки;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказКлиента")
		Или ТипДанныхЗаполнения = Тип("Массив") И ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);
		
	//++ НЕ УТКА
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		
		ЗаполнитьПоРаспоряжению(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДанныеРаспоряжений") Тогда
		
		ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
		
		ЗаполнитьПоРаспоряжению(ДанныеЗаполнения.ДанныеРаспоряжений, РеквизитыШапки);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("Массив") И ТипЗнч(ДанныеЗаполнения[0]) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		ЗаполнитьПоЗаказуДавальца(ДанныеЗаполнения);
		
	//-- НЕ УТКА
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ВыпускПоРаспоряжениям Тогда
		ЗаполнитьСерииПоМаршрутнымЛистам();
	КонецЕсли;
	//-- НЕ УТКА
	
	ЗаполнитьРеквизитыПоУмолчанию();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ПроверитьВозможностьОкругления = (НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад);
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВыпускПродукции),
												Отказ,
												МассивНепроверяемыхРеквизитов);
												
	Если ВыпускПоРаспоряжениям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Спецификация");
		МассивНепроверяемыхРеквизитов.Добавить("НалоговоеНазначение");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Распоряжение");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ТипСтоимости");
	КонецЕсли;
	
	Если НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Подразделение");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Склад");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.СтатьяРасходов");
	
	ПроверитьЗаполнениеТовары(Отказ);

	ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
		ЭтотОбъект,
		Новый Структура("Товары"),
		МассивНепроверяемыхРеквизитов,
		Отказ);
		
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
		
	// Удалим не проверяемые реквизиты
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ВыпускПродукции.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Заполнение движений
	
	//++ НЕ УТКА
	ОперативныйУчетПроизводства.ОтразитьРаспоряженияНаВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	РегистрыНакопления.ТоварыКОформлениюПоступления.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);

	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьРаспоряженияНаСписаниеПоНормативам(ДополнительныеСвойства, Движения, Отказ);
	
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	//++ НЕ УТКА
	ЗаказыСервер.ОтразитьУслугиДавальцуКОформлению(ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	// Завершение проведения
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	//++ НЕ УТКА
	Распоряжение = Документы.МаршрутныйЛистПроизводства.ПустаяСсылка();
	//-- НЕ УТКА
	
	ВыпускПоРаспоряжениям = Ложь;
	
	Серии.Очистить();
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		СтрокаТовары.Распоряжение = Неопределено;
		СтрокаТовары.КодСтроки = 0;
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

// Заполняет реквизиты документа значениями по умолчанию.
//
Процедура ЗаполнитьРеквизитыПоУмолчанию()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	ВидЦены = Справочники.ВидыЦен.ВидЦеныВыпускаПродукцииПоУмолчанию();
	Валюта = Константы.ВалютаПлановойСебестоимостиПродукции.Получить();
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Константы.ВалютаПлановойСебестоимостиПродукции.СоздатьМенеджерЗначения().СообщитьКонстантаНеЗаполненаИВызватьИсключение();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НалоговоеНазначение) Тогда
		НалоговоеНазначение = Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата);
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА
Процедура ЗаполнитьПоРаспоряжению(ДанныеЗаполнения, РеквизитыШапки = Неопределено)
	
	ТипДанныеЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныеЗаполнения = Тип("Массив") Тогда
		
		// Передали массив структур, содержащих данные о распоряжении (Распоряжение, КодСтроки)
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыШапки);
		
	ИначеЕсли ТипДанныеЗаполнения = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		
		Распоряжение = ДанныеЗаполнения;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВыходныеИзделия.Получатель ССЫЛКА Справочник.Склады
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииНаСклад)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииВПодразделение)
		|	КОНЕЦ КАК НаправлениеВыпуска
		|ПОМЕСТИТЬ ВТНаправленияВыпуска
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &Распоряжение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВозвратныеОтходы.Получатель ССЫЛКА Справочник.Склады
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииНаСклад)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииВПодразделение)
		|	КОНЕЦ
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ВозвратныеОтходы
		|ГДЕ
		|	ВозвратныеОтходы.Ссылка = &Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТНаправленияВыпуска.НаправлениеВыпуска) КАК НаправлениеВыпуска,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТНаправленияВыпуска.НаправлениеВыпуска) КАК КоличествоНаправленийВДокументе
		|ПОМЕСТИТЬ НаправленияВыпуска
		|ИЗ
		|	ВТНаправленияВыпуска КАК ВТНаправленияВыпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Распоряжение,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Подразделение КАК Подразделение,
		|	НЕ ТаблицаДокумента.Проведен КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА ТаблицаДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ТаблицаДокумента.Статус КАК СтатусДокумента,
		|	НаправленияВыпуска.НаправлениеВыпуска КАК НаправлениеВыпуска,
		|	НаправленияВыпуска.КоличествоНаправленийВДокументе КАК КоличествоНаправленийВДокументе,
		|	ТаблицаДокумента.Распоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности 
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокумента,
		|	НаправленияВыпуска КАК НаправленияВыпуска
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыходныеИзделия.Получатель КАК Склад
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ВыходныеИзделия
		|ГДЕ
		|	ВыходныеИзделия.Ссылка = &Распоряжение
		|	И ВыходныеИзделия.Получатель ССЫЛКА Справочник.Склады
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратныеОтходы.Получатель
		|ИЗ
		|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ВозвратныеОтходы
		|ГДЕ
		|	ВозвратныеОтходы.Ссылка = &Распоряжение
		|	И ВозвратныеОтходы.Получатель ССЫЛКА Справочник.Склады");
		
		Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		РеквизитыРаспоряжения = Результаты[2].Выбрать();
		РеквизитыРаспоряжения.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен);
		
		Если РеквизитыРаспоряжения.КоличествоНаправленийВДокументе > 1 Тогда
			
			ТекстОшибки = НСтр("ru='Маршрутный лист содержит разные направления выпуска. 
                                    |Ввод одного документа на основании выбранного распоряжения невозможен.
                                    |Оформить выпуск можно в рабочем месте ""Выпуск продукции и выполнение работ"".'
                                    |;uk='Маршрутний лист містить різні напрями випуску. 
                                    |Введення одного документа на підставі вибраного розпорядження неможливе.
                                    |Оформити випуск можна в робочому місці ""Випуск продукції та виконання робіт"".'");
			ВызватьИсключение ТекстОшибки;
			
		ИначеЕсли РеквизитыРаспоряжения.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
			
			МассивСкладов = Результаты[3].Выгрузить().ВыгрузитьКолонку("Склад");
			
			СкладДляЗаполнения = Документы.ВыпускПродукции.СкладШапкиПоМассиву(МассивСкладов);
			
			Если СкладДляЗаполнения = Неопределено Тогда
				ТекстОшибки = НСтр("ru='В маршрутном листе определено поступление на разные склады.
                                        |Ввод одного документа на основании выбранного распоряжения невозможен.
                                        |Оформить выпуск можно в рабочем месте ""Выпуск продукции и выполнение работ"".'
                                        |;uk='У маршрутному листі визначено надходження на різні склади.
                                        |Введення одного документа на підставі вибраного розпорядження неможливо.
                                        |Оформити випуск можна в робочому місці ""Випуск продукції та виконання робіт"".'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			ЭтотОбъект.Склад = СкладДляЗаполнения;
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыРаспоряжения.Распоряжение,
			РеквизитыРаспоряжения.СтатусДокумента,
			РеквизитыРаспоряжения.ЕстьОшибкиПроведен,
			РеквизитыРаспоряжения.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыРаспоряжения);
		
	КонецЕсли;
	
	МассивРаспоряжений = Новый Массив;
	Если ТипДанныеЗаполнения = Тип("Массив") Тогда
		// Передали массив структур, содержащих данные о распоряжении (Распоряжение, КодСтроки)
		ДанныеРаспоряжений = ДанныеЗаполнения;
		Для каждого СтруктураРаспоряжения Из ДанныеЗаполнения Цикл
			МассивРаспоряжений.Добавить(СтруктураРаспоряжения.Распоряжение);
		КонецЦикла; 
	Иначе	
		ДанныеРаспоряжений = Неопределено;
		МассивРаспоряжений.Добавить(Распоряжение);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		ВидЦены = Константы.ВидЦеныПлановойСтоимостиМатериаловРабот.Получить();
	КонецЕсли;
	
	ДанныеОтбора = Новый Структура("Ссылка,Дата,Организация,Подразделение,НаправлениеВыпуска, ВидЦены");
	ЗаполнитьЗначенияСвойств(ДанныеОтбора, ЭтотОбъект);
	Если РеквизитыШапки <> Неопределено И РеквизитыШапки.Свойство("РабочийЦентр") Тогда
		ДанныеОтбора.Вставить("РабочийЦентр", РеквизитыШапки.РабочийЦентр);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда
		ДанныеОтбора.Вставить("Склад", ЭтотОбъект.Склад);
	КонецЕсли;
	
	ВыпускПоРаспоряжениям = Истина;
	
	Документы.ВыпускПродукции.ЗаполнитьПоОстаткамРаспоряжений(ДанныеОтбора, Товары, МассивРаспоряжений,, ДанныеРаспоряжений);
	
	ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(Распоряжение, Товары, "Распоряжение");
	
КонецПроцедуры

Процедура ЗаполнитьСерииПоМаршрутнымЛистам()

	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением нужно заполнить СтатусУказанияСерий, чтобы понимать как добавлять серии
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВыпускПродукции);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	// В МЛ серии для изделий вводятся всегда справочно в отдельной ТЧ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Ссылка,
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Серия,
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Номенклатура,
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Характеристика,
	|	СУММА(МаршрутныйЛистПроизводстваВыходныеИзделияСерии.КоличествоФакт) КАК КоличествоФакт
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделияСерии КАК МаршрутныйЛистПроизводстваВыходныеИзделияСерии
	|ГДЕ
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Ссылка В (&СписокМаршрутныхЛистов)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Ссылка,
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Серия,
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Номенклатура,
	|	МаршрутныйЛистПроизводстваВыходныеИзделияСерии.Характеристика";
	
	СписокМаршрутныхЛистов = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Товары.ВыгрузитьКолонку("Распоряжение"));
	Запрос.УстановитьПараметр("СписокМаршрутныхЛистов", СписокМаршрутныхЛистов);
	СерииМЛ = Запрос.Выполнить().Выгрузить();
	
	ТоварыНовая = Товары.ВыгрузитьКолонки();
	
	КэшированныеЗначения = Неопределено;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	Для каждого СтрокаТовар Из Товары Цикл
		
		СтрокаТоварНовая = ТоварыНовая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоварНовая, СтрокаТовар);
		
		ПерваяСтрока = Истина;
		
		КоличествоОстаток = СтрокаТовар.Количество;
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Ссылка", 
							СтрокаТовар.Номенклатура, СтрокаТовар.Характеристика, СтрокаТовар.Распоряжение);
  		СписокСтрок = СерииМЛ.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаСерия Из СписокСтрок Цикл
			
			Если СтрокаСерия.КоличествоФакт = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоСерии = Мин(СтрокаСерия.КоличествоФакт, КоличествоОстаток);
			
			Если СтрокаТовар.СтатусУказанияСерий = 13 Тогда
				
				Если НЕ ПерваяСтрока Тогда
					СтрокаТоварНовая = ТоварыНовая.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТоварНовая, СтрокаТовар);
				КонецЕсли; 
				
				СтрокаТоварНовая.Серия = СтрокаСерия.Серия;
				СтрокаТоварНовая.Количество = КоличествоСерии;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоварНовая, СтруктураДействий, КэшированныеЗначения);
				
			Иначе
				
				НоваяСерия = Серии.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСерия, СтрокаТовар);
				НоваяСерия.Серия = СтрокаСерия.Серия;
				НоваяСерия.Количество = КоличествоСерии;
				
			КонецЕсли; 
			
			КоличествоОстаток = КоличествоОстаток - КоличествоСерии;
			СтрокаСерия.КоличествоФакт = СтрокаСерия.КоличествоФакт - КоличествоСерии;
			
			ПерваяСтрока = Ложь;
			
			Если КоличествоОстаток = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Товары.Загрузить(ТоварыНовая);
	Серии.Свернуть("Серия,Номенклатура,Характеристика,Назначение,Склад,Подразделение", "Количество");
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуДавальца(ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗаказДавальца.Организация) КАК Организация,
	|	МАКСИМУМ(ЗаказДавальца.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(ЗаказДавальца.НаправлениеДеятельности) КАК НаправлениеДеятельности,
	|	МАКСИМУМ(НЕ ЗаказДавальца.Проведен) КАК ЕстьОшибкиПроведен,
	|	МИНИМУМ(ЗаказДавальца.Статус) КАК Статус,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаказДавальца.Статус В (&МассивДопустимыхСтатусов)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьОшибкиСтатус,
	|	МАКСИМУМ(ЗаказДавальца.Склад) КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииНаСклад) КАК НаправлениеВыпуска,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Организация) КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Подразделение) КАК КоличествоПодразделений,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.Склад) КАК КоличествоСкладов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказДавальца.НаправлениеДеятельности) КАК КоличествоНаправленийДеятельности
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказДавальца
	|ГДЕ
	|	ЗаказДавальца.Ссылка В(&ЗаказыДавальцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказДавальцаПродукция.Спецификация,
	|	ЗаказДавальцаПродукция.Номенклатура,
	|	ЗаказДавальцаПродукция.Характеристика,
	|	ОбеспечениеЗаказовОстатки.КЗаказуОстаток КАК Количество,
	|	ОбеспечениеЗаказовОстатки.КЗаказуОстаток / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ЗаказДавальцаПродукция.Ссылка.Назначение КАК Назначение,
	|	ЗаказДавальцаПродукция.Ссылка.Склад КАК Склад
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОбеспечениеЗаказов.Остатки КАК ОбеспечениеЗаказовОстатки
	|		ПО ЗаказДавальцаПродукция.Ссылка.Назначение = ОбеспечениеЗаказовОстатки.Назначение
	|			И ЗаказДавальцаПродукция.Номенклатура = ОбеспечениеЗаказовОстатки.Номенклатура
	|			И ЗаказДавальцаПродукция.Характеристика = ОбеспечениеЗаказовОстатки.Характеристика
	|			И ЗаказДавальцаПродукция.Склад = ОбеспечениеЗаказовОстатки.Склад
	|ГДЕ
	|	ЗаказДавальцаПродукция.Ссылка В(&ЗаказыДавальцев)");
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	
	Запрос.УстановитьПараметр("ЗаказыДавальцев", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("МассивДопустимыхСтатусов", МассивДопустимыхСтатусов);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказДавальцаПродукция.Упаковка",
		"ЗаказДавальцаПродукция.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	Реквизиты = Результат[0].Выбрать();
	
	Если Не Реквизиты.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить выпуск продукции по разным организациям.';uk='Неможливо оформити випуск продукції по різних організаціях.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоСкладов > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить один документ, т.к. продукция должна быть выпущена на разные склады.';uk='Неможливо оформити один документ, оскільки продукція повинна бути випущена на різні склади.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоПодразделений > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить один документ, т.к. продукцию выпускают разные подразделения.';uk='Неможливо оформити один документ, т. к. продукцію випускають різні підрозділи.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.ЕстьОшибкиСтатус Тогда
		ТекстОшибки = НСтр("ru='Для оформления выпуска продукции заказ должен быть в статусе ""К производству"", ""К отгрузке"" или ""Закрыт"".';uk='Для оформлення випуску продукції замовлення повинно бути в статус ""До виробництва"", ""До відвантаження"" або ""Закрито"".'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Результат[1].Пустой() Тогда
		ТекстОшибки = НСтр("ru='Вся продукция уже  выпущена, ввод на основании не требуется.';uk='Вся продукція вже випущена, введення на підставі не потрібно.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	Если Реквизиты.КоличествоНаправленийДеятельности > 1 Тогда
		ТекстОшибки = НСтр("ru='Невозможно оформить один документ, т.к. выбранные заказы оформлены под разные направления деятельности.';uk='Неможливо оформити один документ, т. к. вибрані замовлення оформлені під різні напрями діяльності.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	Товары.Загрузить(Результат[1].Выгрузить());
	
	МассивДанных = Новый Массив;
	МассивСтрок = Новый Массив;
	
	Для Каждого Строка Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Спецификация) Тогда
			
			ДанныеОбИзделиях = Новый Структура;
			ДанныеОбИзделиях.Вставить("Подразделение", Подразделение);
			ДанныеОбИзделиях.Вставить("Номенклатура", Строка.Номенклатура);
			ДанныеОбИзделиях.Вставить("Характеристика", Строка.Характеристика);
			ДанныеОбИзделиях.Вставить("НачалоПроизводства", ТекущаяДатаСеанса());
			
			МассивДанных.Добавить(ДанныеОбИзделиях);
			МассивСтрок.Добавить(Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных);
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыПоСпецификации(Товары, "ТипСтоимости");
	
КонецПроцедуры
//-- НЕ УТКА

Процедура ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения)
	
	ЗаказКлиента = ДанныеЗаполнения;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускпродукцииНаСклад) КАК НаправлениеВыпуска,
	|	ЗаказКлиента.Организация,
	|	ЗаказКлиента.Подразделение,
	|	ЗаказКлиента.Ссылка,
	|	ЗаказКлиента.Склад,
	|	НЕ ЗаказКлиента.Проведен КАК ЕстьОшибкиПроведен,
	|	
	|	ВЫБОР КОГДА ЗаказКлиента.НаправлениеДеятельности.УчетЗатрат ТОГДА
	|			ЗаказКлиента.НаправлениеДеятельности
	|		КОНЕЦ КАК НаправлениеДеятельности,
	|	
	|	ЗаказКлиента.Статус
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.Статус,
		Реквизиты.ЕстьОшибкиПроведен,
		Истина);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
	
	ТаблицаТовары = ЗапасыСервер.ТаблицаОстатковКЗаказу(ЗаказКлиента);
	
	Товары.Загрузить(ТаблицаТовары);
	
	МассивДанных = Новый Массив;
	МассивСтрок = Новый Массив;
	
	Для Каждого Строка Из Товары Цикл
		
		ДанныеОбИзделиях = Новый Структура;
		ДанныеОбИзделиях.Вставить("Подразделение", Подразделение);
		ДанныеОбИзделиях.Вставить("Номенклатура", Строка.Номенклатура);
		ДанныеОбИзделиях.Вставить("Характеристика", Строка.Характеристика);
		ДанныеОбИзделиях.Вставить("НачалоПроизводства", ТекущаяДатаСеанса());
		
		МассивДанных.Добавить(ДанныеОбИзделиях);
		МассивСтрок.Добавить(Строка);
		
	КонецЦикла;

	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных);
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыПоСпецификации(Товары, "ТипСтоимости");
	
КонецПроцедуры

Процедура УстановитьКлючВСтрокахТабличнойЧасти(Знач Объект)
	
	Если Не Объект.ВыпускПоРаспоряжениям Тогда
		
		СтрокиБезКлюча = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", 0));
		Если СтрокиБезКлюча.Количество() > 0 Тогда
			
			ТекущийКод = Объект.МаксимальныйКодСтроки;
			
			Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
				
				ТекущийКод = ТекущийКод + 1;
				СтрокаТовары.КодСтроки = ТекущийКод;
				
			КонецЦикла;
			
			Объект.МаксимальныйКодСтроки = ТекущийКод;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасовДокумента()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаТоваров.Распоряжение КАК Распоряжение,
	|	ВЫРАЗИТЬ (ТаблицаТоваров.Назначение КАК Справочник.Назначения) КАК Назначение
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки									КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура									КАК Номенклатура,
	|	ЛОЖЬ														КАК ЭтоВозвратнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)			КАК Сделка,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)				КАК Менеджер,
	|	&Подразделение												КАК Подразделение,
	|	ТаблицаТоваров.Назначение									КАК Назначение,
	|	&Организация												КАК Организация,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ЗаказДавальца.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья) 
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции) 
	|	КОНЕЦ														КАК ХозяйственнаяОперация,
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ЗаказДавальца.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ														КАК ТипЗапасов, 
	|	ВЫБОР
	//++ НЕ УТКА
	|		КОГДА НЕ ЗаказДавальца.Партнер ЕСТЬ NULL
	|			ТОГДА ЗаказДавальца.Партнер
	//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|	КОНЕЦ														КАК Поставщик, 
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	КАК Соглашение,
	//++ НЕ УТКА
	|	ЕСТЬNULL(ЗаказДавальца.Контрагент, 
	//-- НЕ УТКА
	|				ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	//++ НЕ УТКА
	|			)													
	//-- НЕ УТКА
	|																КАК Контрагент,
	//++ НЕ УТКА
	|	ЕСТЬNULL(ЗаказДавальца.Договор, 
	//-- НЕ УТКА
	|				ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	//++ НЕ УТКА
	|			)
	//-- НЕ УТКА
	|																КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)					КАК Валюта,
	//++ НЕ УТКА
	|	ЕСТЬNULL(ЗаказНаПроизводство.НалоговоеНазначение, 
	//-- НЕ УТКА
	|		&НалоговоеНазначение
	//++ НЕ УТКА
	|	) 
	//-- НЕ УТКА
	|		КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации     КАК НалоговоеНазначениеОрганизации,
	|	(ВЫБОР
	|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА &НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение)
	|			ТОГДА СпрНоменклатура.ГруппаАналитическогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ) КАК ГруппаПродукции
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	//++ НЕ УТКА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛист
	|	ПО
	|		ТаблицаТоваров.Распоряжение = МаршрутныйЛист.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаПроизводство.Продукция КАК Заказ
	|	ПО
	|		МаршрутныйЛист.Распоряжение = Заказ.Ссылка
	|		И МаршрутныйЛист.КодСтроки = Заказ.КодСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказДавальца КАК ЗаказДавальца
	|	ПО
	|		(ЗаказДавальца.Ссылка = Заказ.Назначение.Заказ
	|			ИЛИ ЗаказДавальца.Ссылка = ТаблицаТоваров.Назначение.Заказ)
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|	ПО
	|		ЗаказНаПроизводство.Ссылка = МаршрутныйЛист.Распоряжение
	//-- НЕ УТКА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО
	|		СпрНоменклатура.Ссылка = ТаблицаТоваров.Номенклатура
	|
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	ИЛИ ВидыЗапасов.Организация <> &Организация
	|	ИЛИ ВидыЗапасов.ТипЗапасов <> 
	|		ВЫБОР
	//++ НЕ УТКА
	|			КОГДА НЕ ЗаказДавальца.Ссылка ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	//-- НЕ УТКА
	|			КОГДА ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		КОНЕЦ
	|	ИЛИ ВидыЗапасов.Назначение <> ТаблицаТоваров.Назначение
	|	ИЛИ ВидыЗапасов.НалоговоеНазначение <> 
	//++ НЕ УТКА
	|		ЕСТЬNULL(ЗаказНаПроизводство.НалоговоеНазначение, 
	//-- НЕ УТКА
	|			&НалоговоеНазначение
	//++ НЕ УТКА
	|		) 
	//-- НЕ УТКА
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, Распоряжение, Назначение"));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("Подразделение",  Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("НаправлениеВыпуска", НаправлениеВыпуска);
	Запрос.УстановитьПараметр("НалоговоеНазначение", НалоговоеНазначение);
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации", Справочники.Организации.НалоговоеНазначениеНДС(Организация, Дата));
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И ВыпускПоРаспоряжениям Тогда
		Массив.Добавить(Движения.РаспоряженияНаВыпускПродукции);
	КонецЕсли;
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.ЭтоНовый И Не ВыпускПоРаспоряжениям Тогда
		Массив.Добавить(Движения.РаспоряженияНаСписаниеПоНормативам);
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Распоряжение КАК Распоряжение,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	//++ НЕ УТКА
	|	ЕСТЬNULL(ЗаказНаПроизводство.НалоговоеНазначение, 
	//-- НЕ УТКА
	|		&НалоговоеНазначение
	//++ НЕ УТКА
	|	) 
	//-- НЕ УТКА
	|		КАК НалоговоеНазначение,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	//++ НЕ УТКА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛист
	|	ПО
	|		ТаблицаТоваров.Распоряжение = МаршрутныйЛист.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|	ПО
	|		ЗаказНаПроизводство.Ссылка = МаршрутныйЛист.Распоряжение
	//-- НЕ УТКА
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(,"НомерСтроки, Номенклатура, АналитикаУчетаПартий, Распоряжение"));
	Запрос.УстановитьПараметр("НалоговоеНазначение", НалоговоеНазначение);
	
	Запрос.Выполнить();
	
	ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТовары(Отказ)

	ИспользоватьПлановуюСтоимость = Истина;
	ИспользоватьДоходыРасходы	= ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	
	Для Каждого ДанныеСтроки Из Товары Цикл
		
		// Цена, Сумма
		Если ИспользоватьПлановуюСтоимость 
			ИЛИ ДанныеСтроки.ТипСтоимости = Перечисления.ТипыСтоимостиВыходныхИзделий.Фиксированная Тогда
		
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Цена) Тогда
				
				ТекстСообщения = НСтр("ru='Не заполнена колонка ""Цена"" в строке %1 списка ""Товары и работы""';uk='Не заповнена колонка ""Ціна"" в рядку %1 списку ""Товари і роботи""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеСтроки.НомерСтроки),
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "Цена"),
					,
					Отказ);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Сумма) Тогда
				
				ТекстСообщения = НСтр("ru='Не заполнена колонка ""Сумма"" в строке %1 списка ""Товары и работы""';uk='Не заповнена колонка ""Сума"" в рядку %1 списку ""Товари і роботи""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеСтроки.НомерСтроки),
					ЭтотОбъект,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "Сумма"),
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Статья расходов
		Если ДанныеСтроки.СписатьНаРасходы
			И НЕ ЗначениеЗаполнено(ДанныеСтроки.СтатьяРасходов) И ИспользоватьДоходыРасходы Тогда
			
			ТекстСообщения = НСтр("ru='Не заполнена колонка ""Статья расходов"" в строке %1 списка ""Товары и работы""';uk='Не заповнена колонка ""Стаття витрат"" в рядку %1 списку ""Товари і роботи""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДанныеСтроки.НомерСтроки),
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ДанныеСтроки.НомерСтроки, "СтатьяРасходов"),
				,
				Отказ);
				
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСписокЗависимыхЗаказов()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Назначения.Заказ КАК ЗаказКлиента
	|ИЗ
	|	Справочник.Назначения КАК Назначения
	|ГДЕ
	|	Назначения.Ссылка В(&МассивНазначений)
	|	И (Назначения.Заказ ССЫЛКА Документ.ЗаказКлиента
	//++ НЕ УТКА
	|			ИЛИ Назначения.Заказ ССЫЛКА Документ.ЗаказДавальца
	//-- НЕ УТКА
	|			ИЛИ Назначения.Заказ ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	Назначения.Заказ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыпускПродукцииТовары.Назначение.Заказ
	|ИЗ
	|	Документ.ВыпускПродукции.Товары КАК ВыпускПродукцииТовары
	|ГДЕ
	|	ВыпускПродукцииТовары.Ссылка = &Ссылка
	|	И (ВыпускПродукцииТовары.Назначение.Заказ ССЫЛКА Документ.ЗаказКлиента
	//++ НЕ УТКА
	|			ИЛИ ВыпускПродукцииТовары.Назначение.Заказ ССЫЛКА Документ.ЗаказДавальца
	//-- НЕ УТКА
	|			ИЛИ ВыпускПродукцииТовары.Назначение.Заказ ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукцииТовары.Назначение.Заказ";
	
	Запрос.УстановитьПараметр("МассивНазначений", ЭтотОбъект.Товары.ВыгрузитьКолонку("Назначение"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	МассивЗависимыхЗаказов = Результат.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивЗависимыхЗаказовКлиентов", Новый ФиксированныйМассив(МассивЗависимыхЗаказов));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли