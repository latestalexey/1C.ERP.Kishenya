
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ВыполняетсяОбновлениеЧитаемыхДанных() Тогда
		ОбновлениеИнформационнойБазыУТ.СообщитьЧтоРаботаСФормойВременноОграничена(); 
	КонецЕсли; 
	//-- НЕ УТКА
	
	Если НЕ ОбработатьПараметрыФормы(Параметры) Тогда
		
		Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
			ПараметрыОтбора = Параметры.СтруктураБыстрогоОтбора;
		Иначе
			ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ВыпускПродукцииФормаСписка", "ПараметрыОтбора");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
		Элементы.СписокСоздать.Видимость = Ложь;
	Иначе
		Элементы.СписокСоздатьВыпускПоГрафику.Видимость = Ложь;
		Элементы.СписокСоздатьВыпускПоНормативам.Видимость = Ложь;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыпускПродукции;
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СписокВыпуск.Видимость = Ложь;
	КонецЕсли;
	
	//++ НЕ УТКА
	ИспользоватьВыпускПоНесколькимРаспоряжениям = ПолучитьФункциональнуюОпцию("ИспользоватьВыпускПоНесколькимРаспоряжениям");
	ОпределитьУправлениеМаршрутнымиЛистами();
	//-- НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекстПоЗаказу", НСтр("ru='По заказу';uk='По замовленню'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТекстБезЗаказа", НСтр("ru='Без заказа';uk='Без замовлення'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВыпускПродукцииНаСклад", НСтр("ru='На склад';uk='На склад'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВыпускПродукцииВПодразделение", НСтр("ru='В подразделение';uk='У підрозділ'"));
	
	ПриИзмененииОтборов();
	УправлениеВидимостью();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВыпускПродукции" Тогда
		ЗаполнитьСписокРаспоряжений();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПодразделениеОтправительПриИзменении(Элемент)
	
	ПодразделениеОтправительПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладПриИзменении(Элемент)
	
	ОтборСкладПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПолучательПриИзменении(Элемент)
	
	ОтборПодразделениеПолучательПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрПриИзменении(Элемент)
	
	РабочийЦентрПриИзмененииВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаправлениеВыпускаПриИзменении(Элемент)
	
	ОтборСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	ОтборПодразделениеПолучатель = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	
	УстановитьОтборПоНаправлениюВыпуска();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРаспоряжений

&НаКлиенте
Процедура СписокРаспоряженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ОбновитьДанныеВызовСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьДокументы(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(
		"Документ.ВыпускПродукции.ФормаСпискаДокументов.Команда.СформироватьДокументы");
	
	Если Элементы.СписокРаспоряжений.ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Команда не может быть выполнена для указанного объекта.';uk='Команда не може бути виконана для зазначеного об''єкта.'"));
		Возврат;
	КонецЕсли;
	
	СоздатьНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыпускПозаказу(Команда)
	
	ВыпускПоРаспоряжениям = Истина;
	СоздатьБезОснования(ВыпускПоРаспоряжениям);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыпускБезЗаказа(Команда)
	
	ВыпускПоРаспоряжениям = Ложь;
	СоздатьБезОснования(ВыпускПоРаспоряжениям);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Отборы

&НаСервере
Процедура ПриИзмененииОтборов()
	
	УстановитьОтборПоПодразделениюОтправителю();
	УстановитьОтборПоНаправлениюВыпуска();
	УстановитьОтборПоСкладу();
	
	УстановитьОтборПоПодразделениюПолучателю();
	
	ОбновитьДанныеВызовСервера();
	
	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()
	
	ПараметрыОтбора = Новый Структура("ОтборРабочийЦентр, ОтборНаправлениеВыпуска, ОтборПодразделениеОтправитель, ОтборПодразделениеПолучатель, ОтборСклад");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("ВыпускПродукцииФормаСписка", "ПараметрыОтбора", ПараметрыОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОтправительПриИзмененииВызовСервера()
	
	//++ НЕ УТКА
	ОпределитьУправлениеМаршрутнымиЛистами();
	//-- НЕ УТКА
	УправлениеВидимостью();
	УстановитьОтборПоПодразделениюОтправителю();
	ЗаполнитьСписокРаспоряжений();
	
	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ОтборСкладПриИзмененииВызовСервера()
	
	УстановитьОтборПоСкладу();
	ЗаполнитьСписокРаспоряжений();
	
	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ОтборПодразделениеПолучательПриИзмененииВызовСервера()
	
	УстановитьОтборПоПодразделениюПолучателю();
	ЗаполнитьСписокРаспоряжений();
	
	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура РабочийЦентрПриИзмененииВызовСервера()

	ЗаполнитьСписокРаспоряжений();

	СохранитьПараметрыОтбора();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделениюОтправителю()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Подразделение",
		ОтборПодразделениеОтправитель,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборПодразделениеОтправитель));

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСкладу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборСклад", ОтборСклад);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПодразделение", ОтборПодразделениеПолучатель);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделениюПолучателю()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборСклад", ОтборСклад);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПодразделение", ОтборПодразделениеПолучатель);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоНаправлениюВыпуска()

	Элементы.ОтборСклад.Видимость = Ложь;
	Элементы.ОтборПодразделениеПолучатель.Видимость = Ложь;

	Если ОтборНаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		Элементы.ОтборСклад.Видимость = Истина;
	ИначеЕсли ОтборНаправлениеВыпуска = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение") Тогда
		Элементы.ОтборПодразделениеПолучатель.Видимость = Истина;
	КонецЕсли;

	ЗаполнитьСписокРаспоряжений();

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборСклад", ОтборСклад);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПодразделение", ОтборПодразделениеПолучатель);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ОтборНаправлениеВыпуска",
		ОтборНаправлениеВыпуска,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ОтборНаправлениеВыпуска));

	СохранитьПараметрыОтбора();

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанными

&НаСервере
Процедура ОбновитьДанныеВызовСервера()
	
	ЗаполнитьСписокРаспоряжений();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРаспоряжений()
	
	//++ НЕ УТКА
	ДанныеОтбора = Новый Структура();
	
	Если ЗначениеЗаполнено(ОтборПодразделениеОтправитель) Тогда
		ДанныеОтбора.Вставить("Подразделение", ОтборПодразделениеОтправитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборРабочийЦентр) Тогда
		ДанныеОтбора.Вставить("РабочийЦентр", ОтборРабочийЦентр);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборНаправлениеВыпуска) Тогда
		ДанныеОтбора.Вставить("НаправлениеВыпуска", ОтборНаправлениеВыпуска);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ДанныеОтбора.Вставить("Склад", ОтборСклад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПодразделениеПолучатель) Тогда
		ДанныеОтбора.Вставить("ПодразделениеПолучатель", ОтборПодразделениеПолучатель);
	КонецЕсли;
	
	Результат = Документы.ВыпускПродукции.РезультатЗапросаПоРаспоряжениямНаВыпускПродукции(ДанныеОтбора, Неопределено, Неопределено);
	
	СписокРаспоряжений.Загрузить(Результат.Выгрузить());
	//-- НЕ УТКА
	
	Возврат; // В УТ и КА процедура пустая
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеВыпуска

&НаКлиенте
Процедура СоздатьНаОсновании()

	ОчиститьСообщения();
	ВыбранныеМаршрутныеЛисты.Очистить();
	
	ДанныеРаспоряжений = Новый Массив;
	
	Для Каждого ИндексСтроки Из Элементы.СписокРаспоряжений.ВыделенныеСтроки Цикл
	
		ДанныеСтроки = Элементы.СписокРаспоряжений.ДанныеСтроки(ИндексСтроки);
		
		НоваяСтрока = ВыбранныеМаршрутныеЛисты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		
		СтруктураРаспоряжения = Новый Структура("Распоряжение,КодСтроки", ДанныеСтроки.Распоряжение, ДанныеСтроки.КодСтроки);
		ДанныеРаспоряжений.Добавить(СтруктураРаспоряжения);
		
	КонецЦикла;
	
	Если НЕ ИспользоватьВыпускПоНесколькимРаспоряжениям И ВыбранныеМаршрутныеЛисты.Количество() > 1 Тогда
		ТекстОшибки = НСтр("ru='Ввод одного документа на основании выделенных распоряжений невозможен.';uk='Введення одного документа на підставі виділених розпоряджень неможливе.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура;
	РеквизитыШапки = Новый Структура;
	
	Если НЕ ДанныеЗаполненияВыпускаПродукции(РеквизитыШапки) Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	Если НЕ ОтборРабочийЦентр.Пустая() Тогда
		РеквизитыШапки.Вставить("РабочийЦентр", ОтборРабочийЦентр);
	КонецЕсли; 
	//-- НЕ УТКА
	ТекущиеДанные = Элементы.СписокРаспоряжений.ТекущиеДанные;
	
	ПараметрыОснования.Вставить("РеквизитыШапки",     РеквизитыШапки);
	ПараметрыОснования.Вставить("ДанныеРаспоряжений", ДанныеРаспоряжений);
	
	ОткрытьФорму("Документ.ВыпускПродукции.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБезОснования(ВыпускПоРаспоряжениям)
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ЗначениеЗаполнено(ОтборПодразделениеОтправитель) Тогда
		ЗначенияЗаполнения.Вставить("Подразделение", ОтборПодразделениеОтправитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборСклад) Тогда
		ЗначенияЗаполнения.Вставить("Склад", ОтборСклад);
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("ВыпускПоРаспоряжениям", ВыпускПоРаспоряжениям);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ВыпускПродукции.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияВыпускаПродукции(РеквизитыШапки)
	
	Отказ = Ложь;
	
	ОрганизацияДляЗаполнения 			 = Неопределено;
	СкладДляЗаполнения        			 = Неопределено;
	ПодразделениеДляЗаполнения 			 = Неопределено;
	НаправлениеДляЗаполнения   			 = Неопределено;
	НаправлениеДеятельностиДляЗаполнения = Неопределено;
	
	ПроверитьОрганизацию     		 = Истина;
	ПроверитьСклад           		 = Истина;
	ПроверитьПодразделение    		 = Истина;
	ПроверитьНаправление      		 = Истина;
	ПроверитьНаправлениеДеятельности = Истина;
	
	ТекстСообщения = НСтр("ru='У выделенных распоряжений отличается поле %ПредставлениеПоля%';uk='У виділених розпоряджень відрізняється поле %ПредставлениеПоля%'");
	
	МассивСкладов = Новый Массив;
	МассивРаспоряжений = Новый Массив;
	
	Для каждого ДанныеСтроки Из ВыбранныеМаршрутныеЛисты Цикл
		
		МассивСкладов.Добавить(ДанныеСтроки.Склад);
		МассивРаспоряжений.Добавить(ДанныеСтроки.Распоряжение);
		
		Если ОрганизацияДляЗаполнения = Неопределено Тогда
			ОрганизацияДляЗаполнения = ДанныеСтроки.Организация;
		ИначеЕсли ОрганизацияДляЗаполнения <> ДанныеСтроки.Организация И ПроверитьОрганизацию Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='""Организация""';uk='""Організація""'")),
				,
				,
				,
				Отказ);
			
			ПроверитьОрганизацию = Ложь;
		КонецЕсли; 
		
		Если ПодразделениеДляЗаполнения = Неопределено Тогда
			ПодразделениеДляЗаполнения = ДанныеСтроки.ПодразделениеОтправитель;
		ИначеЕсли ПодразделениеДляЗаполнения <> ДанныеСтроки.ПодразделениеОтправитель И ПроверитьПодразделение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='""Подразделение""';uk='""Підрозділ""'")),
				,
				,
				,
				Отказ);
			
			ПроверитьПодразделение = Ложь;
		КонецЕсли; 
		
		Если НаправлениеДляЗаполнения = Неопределено Тогда
			НаправлениеДляЗаполнения = ДанныеСтроки.НаправлениеВыпуска;
		ИначеЕсли НаправлениеДляЗаполнения <> ДанныеСтроки.НаправлениеВыпуска И ПроверитьНаправление Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='""Направление выпуска""';uk='""Напрям випуску""'")),
				,
				,
				,
				Отказ);
			
			ПроверитьНаправление = Ложь;
		КонецЕсли;
		
		Если НаправлениеДеятельностиДляЗаполнения = Неопределено Тогда
			НаправлениеДеятельностиДляЗаполнения = ДанныеСтроки.НаправлениеДеятельности;
		ИначеЕсли НаправлениеДеятельностиДляЗаполнения <> ДанныеСтроки.НаправлениеДеятельности И ПроверитьНаправлениеДеятельности Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='""Направление деятельности""';uk='""Напрям діяльності""'")),
				,
				,
				,
				Отказ);
			
			ПроверитьНаправлениеДеятельности = Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
	Если Не Отказ И НаправлениеДляЗаполнения = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		
		СкладДляЗаполнения = Документы.ВыпускПродукции.СкладШапкиПоМассиву(МассивСкладов);
		
		Если СкладДляЗаполнения = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='""Склад""';uk='""Склад""'")),
				,
				,
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если НЕ Отказ Тогда
		
		РезультатПроверки = Документы.ВыпускПродукции.ПроверитьРаспоряженияОбработаныОбработчикамиОбновления(
			МассивРаспоряжений);
		Если НЕ РезультатПроверки.ОбработкаЗавершена Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				РезультатПроверки.ТекстИсключения,
				,
				,
				,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Если Отказ Тогда
		
		ТекстОшибки = НСтр("ru='Ввод одного документа на основании выделенных распоряжений невозможен';uk='Введення одного документа на підставі виділених розпоряджень неможливе'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	РеквизитыШапки.Вставить("Организация",        ОрганизацияДляЗаполнения);
	РеквизитыШапки.Вставить("Подразделение",      ПодразделениеДляЗаполнения);
	РеквизитыШапки.Вставить("НаправлениеВыпуска", НаправлениеДляЗаполнения);
	РеквизитыШапки.Вставить("НаправлениеДеятельности", НаправлениеДеятельностиДляЗаполнения);
	
	Если ЗначениеЗаполнено(СкладДляЗаполнения) Тогда
		РеквизитыШапки.Вставить("Склад", СкладДляЗаполнения);
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, "СписокРаспоряженийЕдИзм", "СписокРаспоряжений.Упаковка");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "СписокРаспоряженийХарактеристика",
																		     "СписокРаспоряжений.ХарактеристикиИспользуются");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженийСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряжений.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРаспоряженийПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокРаспоряжений.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "СписокДата");

	
КонецПроцедуры

&НаСервере
Функция ОбработатьПараметрыФормы(ПараметрыФормы)

	ПараметрыОбработаны = Ложь;
	
	Если ПараметрыФормы.Свойство("Подразделение") Тогда
		ОтборПодразделениеОтправитель = ПараметрыФормы.Подразделение;
		ПараметрыОбработаны = Истина;
	КонецЕсли; 
	
	Если ПараметрыФормы.Свойство("РабочийЦентр") Тогда
		ОтборРабочийЦентр = ПараметрыФормы.РабочийЦентр;
		ПараметрыОбработаны = Истина;
	КонецЕсли; 
	
	Если ПараметрыФормы.Свойство("ПерейтиКСписку") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыпускПродукции;
	КонецЕсли; 
	
	Возврат ПараметрыОбработаны;

КонецФункции

//++ НЕ УТКА

&НаСервере
Функция ВыполняетсяОбновлениеЧитаемыхДанных()

	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаИзменений.Регистратор
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервере
Процедура ОпределитьУправлениеМаршрутнымиЛистами()

	Если НЕ ОтборПодразделениеОтправитель.Пустая() Тогда
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(ОтборПодразделениеОтправитель);
		УправлениеМаршрутнымиЛистами = ПараметрыПодразделения.УправлениеМаршрутнымиЛистами;
	Иначе
		УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПустаяСсылка();
		ОтборРабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
	КонецЕсли;

	ВидимостьОтбораПоРЦ = (НЕ ОтборПодразделениеОтправитель.Пустая() И ПараметрыПодразделения.ПроизводствоПоЗаказам);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборРабочийЦентр", "Видимость", ВидимостьОтбораПоРЦ);
	
КонецПроцедуры

//-- НЕ УТКА

&НаСервере
Процедура УправлениеВидимостью()
	
	Если НЕ ОтборПодразделениеОтправитель.Пустая() Тогда
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(ОтборПодразделениеОтправитель);
		Элементы.ГруппаСтраницаРаспоряжения.Видимость = ПараметрыПодразделения.ПроизводствоПоЗаказам;
	ИначеЕсли Не Элементы.ГруппаСтраницаРаспоряжения.Видимость Тогда
		Элементы.ГруппаСтраницаРаспоряжения.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#КонецОбласти
