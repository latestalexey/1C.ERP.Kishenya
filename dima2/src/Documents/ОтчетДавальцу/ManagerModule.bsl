#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ОперацияПоПлатежнойКарте.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании);
	
	Документы.СчетНаОплатуКлиенту.ДобавитьКомандуСоздатьНаОснованииСчетаНаОплатуОтчетДавальцу(КомандыСоздатьНаОсновании);
	
	ВводНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСоздатьНаОсновании);
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт

	 
	Если ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцу) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ОтчетДавальцу.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ОтчетДавальцу);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.СписокФорм = "ФормаДокумента";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента";
	КонецЕсли;
	
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаДокумента";
	КонецЕсли;
	
	// ФормаСпискаДокументов
	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСостояниеРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

	КомандаОтчет = ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.СписокФорм = "ФормаСпискаДокументов";
		КомандаОтчет.МестоРазмещенияКоманды = "ПодменюОтчетыПерейти";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
КонецПроцедуры


#Область Заполнение

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ДанныеОтбора     - Структура - поля, по которым будут отобраны остатки заказов
//	Дата             - Дата      - дата, на которую будут отобраны остатки заказов
//	МассивЗаказов    - Массив    - заказы, по которым будут отобраны остатки
//	ПодборПоОстаткам - Булево    - рассчитывать количество к оформлению по остаткам к оформлению
//	                               или по заказанному количеству
//
// Вовращаемое значение:
//	Результат запроса - результат запроса по неотгруженной части заказов\заявок
//
Функция ПолучитьРезультатЗапросаПоОстаткамУслугДавальцуКОформлению(ДанныеОтбора, 
	                                              Дата,
	                                              МассивЗаказов = Неопределено,
	                                              ПодборПоОстаткам)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	Запрос.УстановитьПараметр("Партнер",               ДанныеОтбора.Партнер);
	Запрос.УстановитьПараметр("Контрагент",            ДанныеОтбора.Контрагент);
	Запрос.УстановитьПараметр("Договор",               ДанныеОтбора.Договор);
	Запрос.УстановитьПараметр("Организация",           ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",  ДанныеОтбора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("СтавкаНДС",             ДанныеОтбора.СтавкаНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",       ДанныеОтбора.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ПорядокРасчетов",       ДанныеОтбора.ПорядокРасчетов);
	Запрос.УстановитьПараметр("Регистратор",           ДанныеОтбора.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",      МассивЗаказов <> Неопределено);
	Запрос.УстановитьПараметр("ПодборПоОстаткам",      ПодборПоОстаткам);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ДанныеОтбора.НаправлениеДеятельности);
	
	Если Дата <> Неопределено Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(Дата));
		Запрос.УстановитьПараметр("ГраницаПериод", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("Период", '00010101');
		Запрос.УстановитьПараметр("ГраницаПериод", Неопределено);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗаказы.ЗаказДавальца КАК ЗаказДавальца,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаЗаказы.Количество * ТаблицаЗаказы.Коэффициент) КАК Количество,
	|	СУММА(ТаблицаЗаказы.Сумма * ТаблицаЗаказы.Коэффициент) КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		УслугиОстатки.ЗаказДавальца КАК ЗаказДавальца,
	|		УслугиОстатки.Номенклатура КАК Номенклатура,
	|		УслугиОстатки.Характеристика КАК Характеристика,
	|		УслугиОстатки.СуммаОстаток КАК Сумма,
	|		1 КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА &ПодборПоОстаткам
	|				ТОГДА УслугиОстатки.КОформлениюОстаток
	|			ИНАЧЕ УслугиОстатки.ЗаказаноОстаток
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		РегистрНакопления.УслугиДавальцуКОформлению.Остатки(
	|				&ГраницаПериод,
	|				ВЫБОР
	|					КОГДА &ОтобратьПоЗаказу
	|						ТОГДА ЗаказДавальца В (&МассивЗаказов)
	|					ИНАЧЕ ЗаказДавальца.Партнер = &Партнер
	|							И ЗаказДавальца.Контрагент = &Контрагент
	|							И ЗаказДавальца.Договор = &Договор
	|							И ЗаказДавальца.Организация = &Организация
	|							И ЗаказДавальца.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|							И ЗаказДавальца.Валюта = &ВалютаВзаиморасчетов
	|							И ЗаказДавальца.СтавкаНДС = &СтавкаНДС
	|							И ЗаказДавальца.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|							И ЗаказДавальца.ПорядокРасчетов = &ПорядокРасчетов
	|							И ЗаказДавальца.НаправлениеДеятельности = &НаправлениеДеятельности
	|				КОНЕЦ) КАК УслугиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыДвижения.ЗаказДавальца,
	|		ЗаказыДвижения.Номенклатура,
	|		ЗаказыДвижения.Характеристика,
	|		ЗаказыДвижения.Сумма,
	|		ВЫБОР
	|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ПодборПоОстаткам
	|				ТОГДА ЗаказыДвижения.КОформлению
	|			ИНАЧЕ ЗаказыДвижения.Заказано
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.УслугиДавальцуКОформлению КАК ЗаказыДвижения
	|	ГДЕ
	|		ЗаказыДвижения.Регистратор = &Регистратор
	|		И ВЫБОР
	|				КОГДА &ОтобратьПоЗаказу
	|					ТОГДА ЗаказыДвижения.ЗаказДавальца В (&МассивЗаказов)
	|				ИНАЧЕ ЗаказыДвижения.ЗаказДавальца.Партнер = &Партнер
	|						И ЗаказыДвижения.ЗаказДавальца.Контрагент = &Контрагент
	|						И ЗаказыДвижения.ЗаказДавальца.Договор = &Договор
	|						И ЗаказыДвижения.ЗаказДавальца.Организация = &Организация
	|						И ЗаказыДвижения.ЗаказДавальца.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|						И ЗаказыДвижения.ЗаказДавальца.Валюта = &ВалютаВзаиморасчетов
	|						И ЗаказыДвижения.ЗаказДавальца.СтавкаНДС = &СтавкаНДС
	|						И ЗаказыДвижения.ЗаказДавальца.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|						И ЗаказыДвижения.ЗаказДавальца.НаправлениеДеятельности = &НаправлениеДеятельности
	|			КОНЕЦ
	|		И ВЫБОР
	|				КОГДА &Период <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЗаказыДвижения.Период <= &Период
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		И ЗаказыДвижения.Активность) КАК ТаблицаЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.ЗаказДавальца,
	|	ТаблицаЗаказы.Номенклатура,
	|	ТаблицаЗаказы.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.Количество * ТаблицаЗаказы.Коэффициент) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказДавальца,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказДавальцаПродукция.Номенклатура КАК Номенклатура,
	|	ЗаказДавальцаПродукция.Характеристика КАК Характеристика,
    |	ЗаказДавальцаПродукция.Содержание КАК Содержание,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.Упаковка) КАК Упаковка,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.ДатаОтгрузки) КАК ДатаОтгрузки,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.Цена) КАК Цена,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.Ссылка.СтавкаНДС) КАК СтавкаНДС,
	|	ЗаказДавальцаПродукция.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаказ
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказДавальцаПродукция.Номенклатура,
	|	ЗаказДавальцаПродукция.Характеристика,
    |	ЗаказДавальцаПродукция.Содержание,
	|	ЗаказДавальцаПродукция.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказДавальца КАК ЗаказДавальца,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
    |	ВТЗаказ.Содержание КАК Содержание,
	|	ТаблицаОстатки.Количество КАК Количество,
	|	ТаблицаОстатки.Сумма КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ВТЗаказ.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтгрузки,
	|	ТаблицаОстатки.Количество КАК КоличествоВЗаказе,
	|	ВТЗаказ.Упаковка КАК Упаковка,
	|	ВТЗаказ.Цена КАК Цена,
	|	ТаблицаОстатки.ЗаказДавальца.СтавкаНДС КАК СтавкаНДС,
	|	ВТЗаказ.Цена * ТаблицаОстатки.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Сумма,
	|	ТаблицаОстатки.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаОстатки.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЗаказ.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаказ КАК ВТЗаказ
	|		ПО ТаблицаОстатки.ЗаказДавальца = ВТЗаказ.Ссылка
	|			И ТаблицаОстатки.Номенклатура = ВТЗаказ.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ВТЗаказ.Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВТЗаказ.Упаковка",
			"ВТЗаказ.Номенклатура"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Заполняет таблицы услуг и скидок по данным отбора или массиву заказов
//
// Параметры:
//	ДанныеОтбора            - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//	Продукция               - ДанныеФормыКоллекция - таблица продукции, в которую будут помещены остатки заказов
//	МассивЗаказов           - Массив - заказы, по которым будут отобраны остатки
//	ЗаполнятьНаДатуОтгрузки - Булево - указывает на необходимость заполнения по остаткам на дату, переданную в качестве поля в ДанныеОтбора
//
Процедура ЗаполнитьПоОстаткамУслугДавальцаКОформлению(ДанныеОтбора,
	                                 Продукция,
	                                 МассивЗаказов = Неопределено,
	                                 ЗаполнятьНаДатуОказанияУслуг = Ложь,
	                                 ПодборПоОстаткам = Ложь) Экспорт
	
	ДатаЗаполнения = ?(ЗаполнятьНаДатуОказанияУслуг, ДанныеОтбора.Дата, Неопределено);
	
	// Данные по остаткам услуг заказа
	ВыборкаУслуги = ПолучитьРезультатЗапросаПоОстаткамУслугДавальцуКОформлению(
		ДанныеОтбора,
		ДатаЗаполнения,
		МассивЗаказов,
		ПодборПоОстаткам).Выбрать();
	
	МассивЗаказовКлиентов = Новый Массив();
	
	Пока ВыборкаУслуги.Следующий() Цикл
		Если МассивЗаказовКлиентов.Найти(ВыборкаУслуги.ЗаказДавальца) = Неопределено Тогда
			МассивЗаказовКлиентов.Добавить(ВыборкаУслуги.ЗаказДавальца);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказовКлиентов", МассивЗаказовКлиентов);
	Запрос.УстановитьПараметр("ВалютаДокумента",       ДанныеОтбора.Валюта);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Ссылка                    КАК ЗаказДавальца,
	|	ТаблицаЗаказов.Валюта                    КАК Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьВВалютуДокумента
	|ИЗ
	|	Документ.ЗаказДавальца КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В (&МассивЗаказовКлиентов)
	|";
	РеквизитыЗаказов = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Валюта                    КАК Валюта
	|ПОМЕСТИТЬ ДанныеЗаказов
	|ИЗ
	|	Документ.ЗаказДавальца КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В (&МассивЗаказовКлиентов)
	|	И ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказов.Валюта,
	|	ДанныеЗаказов.Дата,
	|	МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	ДанныеЗаказов КАК ДанныеЗаказов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|	ПО
	|		ДанныеЗаказов.Валюта = ЦеныНоменклатуры.Валюта
	|		И ДанныеЗаказов.Дата >= ЦеныНоменклатуры.Период 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказов.Валюта,
	|	ДанныеЗаказов.Дата
	|;
	|
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказов.Валюта,
	|	ДанныеЗаказов.Дата,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Кратность
	|ИЗ
	|	ДанныеЗаказов КАК ДанныеЗаказов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПериодыКурсовВалют КАК ПериодыКурсовВалют 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО
	|			ПериодыКурсовВалют.Период = КурсыВалют.Период
	|			И ПериодыКурсовВалют.Валюта = КурсыВалют.Валюта
	|	ПО
	|		ДанныеЗаказов.Валюта = ПериодыКурсовВалют.Валюта
	|		И ДанныеЗаказов.Дата = ПериодыКурсовВалют.Дата
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	Если ТаблицаКурсовВалют.Количество() > 0 Тогда
		СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОтбора.Валюта, ТекущаяДата());
	КонецЕсли;
	
	ВыборкаУслуги.Сбросить();
	Пока ВыборкаУслуги.Следующий() Цикл
		
		СтрокаТаб = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаУслуги);
		
		СтрокаТаб.КоличествоУпаковок = ВыборкаУслуги.Количество / ВыборкаУслуги.Коэффициент;
		
		РеквизитыЗаказов.Сбросить();
		ЗаказНайден = РеквизитыЗаказов.НайтиСледующий(СтрокаТаб.ЗаказДавальца, "ЗаказДавальца");
		
		ПараметрыОтбора = Новый Структура("Валюта,Дата", РеквизитыЗаказов.Валюта, РеквизитыЗаказов.Дата);
		КурсВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
		
		Ценообразование.ПересчитатьСуммыВСтроке(
			СтрокаТаб,
			Ложь,
			Ложь,
			Ложь,
			РеквизитыЗаказов.ЦенаВключаетНДС,
			"Количество");
		
		Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И КурсВалюты.Количество() = 1 Тогда
			
			СтрокаТаб.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаб.Цена,
				РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
				КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
				КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
			
			СтрокаТаб.СуммаСНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаб.СуммаСНДС,
				РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
				КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
				КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Конецобласти

#Область ПроведениеПоРеглУчетуУКР

Функция ТекстОтраженияВРеглУчетеУКР() Экспорт
	
#Область ЗадолженностьДавальцаЗаУслуги // (Дт 36 :: Кт 70)
	ТекстЗадолженностьДавальцаЗаУслуги = "
	|ВЫБРАТЬ // Задолженность давальца за услуги (Дт 36 :: Кт 70)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами) КАК ВидСчетаДт,
	|	ЕСТЬNULL(Расчеты.ГруппаФинансовогоУчета, Операция.ГруппаФинансовогоУчета) КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.ВалютаВзаиморасчетов КАК ВалютаДт,
	|	ЕСТЬNULL(Расчеты.Подразделение, Операция.Подразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(Расчеты.НаправлениеДеятельности, Операция.НаправлениеДеятельности) КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Операция.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Строки.СуммаВзаиморасчетов КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж) КАК ВидСчетаКт,
	|	Операция.Номенклатура.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	Операция.Номенклатура.ГруппаФинансовогоУчета КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Задолженность давальца за услуги"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетДавальцу КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетДавальцу.Продукция КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Расчеты КАК Расчеты
	|	ПО
	|		Операция.Ссылка = Расчеты.Ссылка
	|";
#КонецОбласти
	
#Область НачислениеНДСЗаУслуги // (Дт 70 :: Кт 6432)
	ТекстНачислениеНДСЗаУслуги = "
	|ВЫБРАТЬ // Начисление НДС (Дт 70 :: Кт 6432)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, Строки.СуммаНДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж) КАК ВидСчетаДт,
	|	Операция.Номенклатура.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	Операция.Номенклатура.ГруппаФинансовогоУчета КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НалоговыеОбязательстваНеподтвержденные) КАК СчетКт,
	|	Операция.Контрагент КАК СубконтоКт1,
	|	Операция.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""НДС: обязательства неподтвержденные, работы и услуги"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетДавальцу КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетДавальцу.Продукция КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаНДСРегл <> 0
	|
	|ГДЕ
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, Строки.СуммаНДС) <> 0
	|";
#КонецОбласти
	
#Область Себестоимость // (Дт 90 :: Кт 23)
	ТекстСебестоимость = "
	|ВЫБРАТЬ // Выпуск продукции (Дт 90 :: Кт 23)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Стоимости.Сумма, Строки.Сумма) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж) КАК ВидСчетаДт,
	|	Операция.Номенклатура.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Операция.Номенклатура.ГруппаФинансовогоУчета КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаКт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК АналитикаУчетаКт,
	|	ЕСТЬNULL(Стоимости.Подразделение, Строки.Подразделение) КАК МестоУчетаКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	ЕСТЬNULL(Стоимости.Подразделение, Строки.Подразделение) КАК ПодразделениеКт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	ЕСТЬNULL(Стоимости.ГруппаПродукции, Строки.ГруппаПродукции) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выпуск продукции"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетДавальцу КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтроки КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Строки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСтоимости КАК Стоимости
	|	ПО
	|		Строки.Ссылка = Стоимости.Ссылка
	|		И Строки.Номенклатура = Стоимости.Номенклатура
	|		И Строки.Склад = Стоимости.Склад
	|		И Строки.ГруппаФинансовогоУчета = Стоимости.ГруппаФинансовогоУчета
	|		И Строки.ТипЗапасов = Стоимости.ТипЗапасов
	|		И Строки.СтатьяРасходов = Стоимости.СтатьяРасходов
	|		И Стоимости.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Стоимости.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|";
#КонецОбласти
	
#Область СписаниеМатериаловДавальцаПереданныхВПроизводство // (Дт :: Кт 0222)
	ТекстСписаниеМатериаловДавальцаПереданныхВПроизводство = "
	|ВЫБРАТЬ // Списание материалов давальца (Дт :: Кт 0222)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Стоимости.Сумма, Строки.Сумма) КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	Строки.Склад КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве) КАК СчетКт,
	|	Строки.Контрагент КАК СубконтоКт1,
	|	Строки.Номенклатура КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Списание материалов давальца"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетДавальцу КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтроки КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|		И Строки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСтоимости КАК Стоимости
	|	ПО
	|		Строки.Ссылка = Стоимости.Ссылка
	|		И Строки.Номенклатура = Стоимости.Номенклатура
	|       И Строки.КорНоменклатура = Стоимости.КорНоменклатура
	|		И Строки.Склад = Стоимости.Склад
	|		И Строки.ГруппаФинансовогоУчета = Стоимости.ГруппаФинансовогоУчета
	|		И Строки.РазделУчета = Стоимости.РазделУчета
	|ГДЕ
	|	Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
	|";
#КонецОбласти

#Область КорректировкиНДСПартий // (Дт 90 :: Кт 6435)
	КорректировкиНДСПартий = "
	|ВЫБРАТЬ // Выпуск продукции (Дт 90 :: Кт 6435)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	КорректировкиНДСПартий.Сумма КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж) КАК ВидСчетаДт,
	|	Операция.Номенклатура.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Операция.Номенклатура.ГруппаФинансовогоУчета КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт, 
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	НЕОПРЕДЕЛЕНО КАК НалоговоеНазначениеКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УсловнаяПродажа) КАК СчетКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Условная продажа"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетДавальцу КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		КорректировкиНДСПартий КАК КорректировкиНДСПартий
	|	ПО 
	|		(Операция.Ссылка = КорректировкиНДСПартий.Ссылка)
	|";
#КонецОбласти

	Возврат ""
		+                      ТекстЗадолженностьДавальцаЗаУслуги
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстНачислениеНДСЗаУслуги
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстСебестоимость
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстСписаниеМатериаловДавальцаПереданныхВПроизводство
		+ " ОБЪЕДИНИТЬ ВСЕ " + КорректировкиНДСПартий
		+ "";
		
КонецФункции

Функция ТекстЗапросаВТОтраженияВРеглУчетеУКР() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	МАКСИМУМ(Расчеты.ЗаказКлиента.Подразделение) КАК Подразделение,
	|	МАКСИМУМ(Расчеты.ЗаказКлиента.ГруппаФинансовогоУчета) КАК ГруппаФинансовогоУчета,
	|	МАКСИМУМ(Аналитика.НаправлениеДеятельности) КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ Расчеты
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	ПО ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО 
	|	Расчеты.Регистратор
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Конецобласти

#Область Прочее

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ИСТИНА КАК ОтчетПоЗаказам,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ПоЗаказу = Выборка.ОтчетПоЗаказам;
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
		
	Иначе
		
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ПоЗаказу = Истина;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата", Дата);
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Партнер", Партнер);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("Договор", Договор);
	СтруктураРеквизитов.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ПоЗаказу", ПоЗаказу);
	СтруктураРеквизитов.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Осуществляет вычисление текущего состояния отчета давальцу без заказа
//
// Параметры:
//	ОтчетДавальцу     - ДокументСсылка.ОтчетДавальцу - Документ, состояние которого необходимо вычислить 
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ОтчетДавальцу, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если  ЗначениеЗаполнено(ОтчетДавальцу) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ДокументОтчетДавальцу.СуммаВзаиморасчетов - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументОтчетДавальцу.СуммаВзаиморасчетов - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОплаты,
			|// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПросроченнойОплаты,
			|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов + ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОтгрузки,
			|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументОтчетДавальцу.СуммаВзаиморасчетов + ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0)) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОтгрузки,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.Проведен И
			|		(ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0 ИЛИ
			|		ДокументОтчетДавальцу.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫБОР
			|			КОГДА
			|				ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) > 0
			|			ТОГДА
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов) КАК ЧИСЛО(15, 0))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов) КАК ЧИСЛО(15, 0))
			|		КОНЕЦ
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|	ТОГДА
			|		РасчетыСКлиентамиОстатки.КОплатеОстаток
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ОтчетДавальцу КАК ДокументОтчетДавальцу
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
			|ПО
			|	Истина
			|ГДЕ
			|	ДокументОтчетДавальцу.Ссылка = &ОтчетДавальцу
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетДавальцу, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ОтчетДавальцу", ОтчетДавальцу);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ОтчетДавальцу));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПросроченнойОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИницициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами",        1);
	СтруктураСостояние.Вставить("ВыводитьТаблицуУслугДавальцуКОформлению", 2);
	СтруктураСостояние.Вставить("ЭтоНакладная",                            Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки",          Истина);
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка",                     "Продукция");
	СтруктураСостояние.Вставить("ИмяРегистраОтгрузкаУслуг",                "ЗаказыКлиентов");
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", Новый Структура("ТаблицаГрафикОплатыПоНакладной",
                                                                   ТекстЗапросаТаблицаРасчетыСКлиентамиСостояниеДокументов()));
	
	Возврат СтруктураСостояние
	
КонецФункции

// Формирует текст запроса, получающий график оплаты по документу
//
// Возвращаемое значение:
//   Строка   - сформированный текст запроса
//
Функция ТекстЗапросаТаблицаРасчетыСКлиентамиСостояниеДокументов()

	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументНакладная.Ссылка КАК Документ,
	|	1 КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки))  КАК ВариантОплаты,
	|	ДокументНакладная.ДатаПлатежа КАК ДатаПлатежа,
	|	ДокументНакладная.СуммаДокумента КАК СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ДокументНакладная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументНакладная.Ссылка)
	|		И ОбъектыРасчетов.ТребуетсяГрафик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЭтапыГрафикаОплаты.Ссылка КАК Документ,
	|	ДокументЭтапыГрафикаОплаты.НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
	|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ДокументЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказДавальца.ЭтапыГрафикаОплаты КАК ДокументЭтапыГрафикаОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка)
	|		И ОбъектыРасчетов.ТребуетсяГрафик";
	
КонецФункции 


#Конецобласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		Если ПравоДоступа("Изменение", Метаданные.Документы.ОтчетДавальцу) Тогда
			ВыбраннаяФорма = "ФормаСпискаДокументов";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаНДСНоменклатурныйСоставДляНалоговыхНакладных(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка 					КАК Ссылка,
	|	ДанныеДокумента.Организация 			КАК Организация,
	|	ДанныеДокумента.Партнер 				КАК Партнер,
	|	ДанныеДокумента.Контрагент 				КАК Контрагент,
	|	ДанныеДокумента.Дата 					КАК Период,
	|	ДанныеДокумента.ДатаПлатежа 			КАК ДатаПлатежа,
	|	ДанныеДокумента.ЗаказДавальца 			КАК ЗаказДавальца,
	|	ДанныеДокумента.Валюта 					КАК Валюта,
	|	ДанныеДокумента.Подразделение 			КАК Подразделение,
	|	ДанныеДокумента.ЦенаВключаетНДС 		КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ИСТИНА 									КАК ОтчетПоЗаказам,
	|	ДанныеДокумента.ФормаОплаты 			КАК ФормаОплаты,
	|	ДанныеДокумента.Договор 				КАК Договор,
	|	ДанныеДокумента.Менеджер 				КАК Менеджер,
	|	ДанныеДокумента.НалоговоеНазначение     КАК НалоговоеНазначение,
	|	ДанныеДокумента.ГруппаФинансовогоУчета	КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.СтавкаНДС				КАК СтавкаНДС,
	|	ДанныеДокумента.Содержание				КАК Содержание,
	|	ДанныеДокумента.Номенклатура			КАК Номенклатура,
	|	ДанныеДокумента.Характеристика			КАК Характеристика,
	|	
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ 									КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ 									КАК РасчетыПоНакладным,
	|	
	|	ДанныеДокумента.Договор.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре
	|	
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период);
	
	////////////////////////////////////////////////////////////////////////////
	// Уставноим параметры запроса
	
	УчитыватьСебестоимостьТоваровПоВидамЗапасов = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов");
	
	Запрос.УстановитьПараметр("Серия",                                       Реквизиты.Серия);
	Запрос.УстановитьПараметр("СтавкаНДС",                                   Реквизиты.СтавкаНДС);
	Запрос.УстановитьПараметр("Содержание",                                  Реквизиты.Содержание);
	Запрос.УстановитьПараметр("Номенклатура",                                Реквизиты.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",                              Реквизиты.Характеристика);
	Запрос.УстановитьПараметр("Период",                                      Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                                      Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ДатаПлатежа",                                 Реквизиты.ДатаПлатежа);
	Запрос.УстановитьПараметр("Организация",                                 Реквизиты.Организация);
	Запрос.УстановитьПараметр("Партнер",                                     Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                                  Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ЗаказДавальца",                               Реквизиты.ЗаказДавальца);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",                          Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным",                          Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("Договор",                                     Реквизиты.Договор);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                             ?(Реквизиты.ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("ОтчетПоЗаказам",                              Реквизиты.ОтчетПоЗаказам);
	Запрос.УстановитьПараметр("Подразделение",                               Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",                        Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",                   РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",              Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",             Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуВзаиморасчетов",   Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	Запрос.УстановитьПараметр("ФормаОплаты",                                 Реквизиты.ФормаОплаты);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",                       Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	Запрос.УстановитьПараметр("ДопустимаяСуммаЗадолженности",                Реквизиты.ДопустимаяСуммаЗадолженности);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",              Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("НалоговоеНазначение",                         Реквизиты.НалоговоеНазначение);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета",                      Реквизиты.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("Менеджер",                                    Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоВидамЗапасов", УчитыватьСебестоимостьТоваровПоВидамЗапасов);
	Запрос.УстановитьПараметр("ГрафикИсполненияВДоговоре",                   Реквизиты.ГрафикИсполненияВДоговоре);
	Запрос.УстановитьПараметр("ОрганизацияПлательщикНДС",                 	 НДСОбщегоНазначенияСервер.ОрганизацияКонтрагентПлательщикНДС(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ВидПоставки",                                 Перечисления.ВидыПоставки.Поставка);
	
КонецПроцедуры

Функция ИнициализироватьВидыЗапасов(Параметры)
	
	СоответствиеВидовЗапасов = Новый ТаблицаЗначений;
	СоответствиеВидовЗапасов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число")); 
	СоответствиеВидовЗапасов.Колонки.Добавить("ВидЗапасов",  Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов")); 
	СоответствиеВидовЗапасов.Колонки.Добавить("НалоговоеНазначение",  Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат")); 
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки													КАК НомерСтроки,
	|	ЕСТЬNULL(Заказ.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))	КАК Назначение
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаУслуги
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказДавальца КАК Заказ
	|	ПО
	|		ТаблицаУслуги.ЗаказДавальца = Заказ.Ссылка
	|
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|
	|ИТОГИ ПО
	|	Назначение
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	
	Результат = Запрос.Выполнить();
	
#Область СоответствиеВидовЗапасовПоРаботам
	Если Не Результат.Пустой() Тогда
		
		ДопКолонки = Новый Структура("Комитент, Соглашение, Валюта, Поставщик, Подразделение, Менеджер, Сделка");
		ДопКолонки.Вставить("ОбособленныйУчетТоваровПоСделке",	Ложь);
		ДопКолонки.Вставить("ВидЗапасов",						Справочники.ВидыЗапасов.ПустаяСсылка());
		ДопКолонки.Вставить("ГруппаФинансовогоУчета",			Справочники.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка());
		ДопКолонки.Вставить("Организация",						Параметры.Организация);
		ДопКолонки.Вставить("ТипЗапасов",						Перечисления.ТипыЗапасов.Услуга);
		ДопКолонки.Вставить("ВариантОбособленногоУчетаТоваров",	Перечисления.ВариантыОбособленногоУчетаТоваров.НеВедется);
		ДопКолонки.Вставить("ХозяйственнаяОперация",			Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ДопКолонки.Вставить("НалоговоеНазначение",				Параметры.НалоговоеНазначение);
		Для Каждого Колонка из Результат.Колонки Цикл
			ДопКолонки.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			// Вид запасов услуг
			ЗаполнитьЗначенияСвойств(ДопКолонки, Выборка);
			ВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
				ДопКолонки.Организация,
				ДопКолонки.ХозяйственнаяОперация,
				ДопКолонки);
			
			ВыборкаДетальная = Выборка.Выбрать();
			Пока ВыборкаДетальная.Следующий() Цикл
				
				НоваяСтрока = СоответствиеВидовЗапасов.Добавить();
				НоваяСтрока.НомерСтроки	= ВыборкаДетальная.НомерСтроки;
				НоваяСтрока.ВидЗапасов	= ВидЗапасов;
				НоваяСтрока.НалоговоеНазначение	= Параметры.НалоговоеНазначение;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
#КонецОбласти
	
	Возврат СоответствиеВидовЗапасов;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Серия		 				 КАК Серия,
	|	&Подразделение 				 КАК Склад,
	|	ТаблицаУслуги.Номенклатура 	 КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика КАК Характеристика
	|
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		&Серия							= Аналитика.Серия
	|		И &Подразделение				= Аналитика.Склад
	|		И ТаблицаУслуги.Номенклатура	= Аналитика.Номенклатура
	|		И ТаблицаУслуги.Характеристика	= Аналитика.Характеристика
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка",			Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Подразделение",	Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Серия",			Реквизиты.Серия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	Запрос.УстановитьПараметр("СоответствиеВидовЗапасов", ИнициализироватьВидыЗапасов(Запрос.Параметры));
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Т.НомерСтроки	КАК НомерСтроки,
	|	Т.НалоговоеНазначение КАК НалоговоеНазначение,
	|	Т.ВидЗапасов	КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&СоответствиеВидовЗапасов КАК Т";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтУслуги";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос.Параметры);
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка					КАК Ссылка,
	|	ТаблицаУслуги.НомерСтроки				КАК НомерСтроки,
	|	ВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ВидыЗапасов.НалоговоеНазначение         КАК НалоговоеНазначение,
	|	ТаблицаУслуги.ЗаказДавальца				КАК ЗаказДавальца,
	|	ТаблицаУслуги.Номенклатура				КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика			КАК Характеристика,
	|	ТаблицаУслуги.КодСтроки					КАК КодСтроки,
	|	ТаблицаУслуги.ИдентификаторСтроки		КАК ИдентификаторСтроки,
	|	ТаблицаУслуги.Количество				КАК Количество,
	|	ТаблицаУслуги.Сумма						КАК Сумма,
	|	ТаблицаУслуги.СуммаНДС					КАК СуммаНДС,
	|	ТаблицаУслуги.СуммаСНДС					КАК СуммаСНДС,
	|	&СтавкаНДС								КАК СтавкаНДС,
	|	ТаблицаУслуги.СуммаВзаиморасчетов		КАК СуммаВзаиморасчетов,
	|	0										КАК СуммаРучнойСкидки,
	|	0										КАК СуммаАвтоматическойСкидки,
	|	Аналитики.КлючАналитики					КАК АналитикаУчетаНоменклатуры,
	|	Аналитики.Склад							КАК Склад
	|
	|ПОМЕСТИТЬ ВтУслуги
	|
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
	|	ПО
	|		&Серия							= Аналитики.Серия
	|		И &Подразделение				= Аналитики.Склад
	|		И ТаблицаУслуги.Номенклатура	= Аналитики.Номенклатура
	|		И ТаблицаУслуги.Характеристика	= Аналитики.Характеристика
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаУслуги.НомерСтроки = ВидыЗапасов.НомерСтроки
	|
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УслугиДавальцуКОформлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки				КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)	КАК ВидДвижения,
	|	&Период									КАК Период,
	|	ТаблицаУслуги.ЗаказДавальца				КАК ЗаказДавальца,
	|	ТаблицаУслуги.Номенклатура				КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика			КАК Характеристика,
	|	ТаблицаУслуги.Количество				КАК Заказано,
	|	ТаблицаУслуги.Количество				КАК КОформлению,
	|	ТаблицаУслуги.СуммаВзаиморасчетов		КАК Сумма,
	|	ТаблицаУслуги.НалоговоеНазначение 		КАК НалоговоеНазначение
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыручкаИСебестоимостьПродаж";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки						КАК НомерСтроки,
	|	&Период											КАК Период,
	|	&Подразделение									КАК Подразделение,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
	|	&АналитикаУчетаПоПартнерам						КАК АналитикаУчетаПоПартнерам,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	ТаблицаУслуги.НалоговоеНазначение 		        КАК НалоговоеНазначение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)		КАК ТипЗапасов,
	
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаУслуги.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ											КАК ВидЗапасов,

	|	&Менеджер										КАК Менеджер,
	|	0												КАК Себестоимость,
	|	ТаблицаУслуги.Количество						КАК Количество,
	|
	|	ВЫБОР КОГДА &ОтчетПоЗаказам ТОГДА
	|		ТаблицаУслуги.ЗаказДавальца
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ 											КАК ЗаказКлиента,
	|
	|	ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС) 							* &КоэффициентПересчетаВВалютуУпр  КАК ЧИСЛО(15, 2)) КАК СуммаВыручки,
	|	ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС) * &КоэффициентПересчетаВВалютуУпр  КАК ЧИСЛО(15, 2)) КАК СуммаВыручкиБезНДС,
	|	ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаВыручкиРегл,
	|	ВЫРАЗИТЬ(ТаблицаУслуги.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаВыручкиСНДСРегл,
	|	0 КАК СуммаРучнойСкидки,
	|	0 КАК СуммаАвтоматическойСкидки,
	|
	|	&Подразделение КАК Склад,
	|	&Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Соглашение,
	|
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|
	|	ТаблицаУслуги.СуммаВзаиморасчетов - 
	|	ВЫБОР КОГДА ТаблицаУслуги.СуммаСНДС <> 0 ТОГДА
	|		ВЫРАЗИТЬ(ТаблицаУслуги.СуммаВзаиморасчетов * ТаблицаУслуги.СуммаНДС / ТаблицаУслуги.СуммаСНДС КАК ЧИСЛО(15, 2))
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	&Валюта КАК ВалютаДокумента,
	|	ТаблицаУслуги.СуммаСНДС КАК СуммаВВалютеДокумента,
	|	ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС КАК СуммаБезНДСВВалютеДокумента,
	|
	|	ТаблицаУслуги.Номенклатура КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		ИНАЧЕ
	|			ТаблицаУслуги.ЗаказДавальца
	|	КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период 									КАК Период,
	|	&Период 									КАК ДатаРегистратора,
	|	&ДатаПлатежа 								КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаУслуги.ЗаказДавальца
	|	КОНЕЦ 										КАК ЗаказКлиента,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		ТаблицаУслуги.ЗаказДавальца
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ 										КАК ПродажаПоЗаказу,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов 						КАК Валюта,
	|	Истина 										КАК ИсключатьПриКонтроле,
	|	Неопределено 								КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности 				КАК ДопустимаяСуммаЗадолженности,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) 	КАК Сумма,
	|	
	|	ВЫРАЗИТЬ(СУММА(ТаблицаУслуги.СуммаСНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(СУММА(ТаблицаУслуги.СуммаСНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	
	|	0 КАК КОплате,
	|	ВЫБОР КОГДА НЕ &ГрафикИсполненияВДоговоре ТОГДА
	|		СУММА(ТаблицаУслуги.СуммаВзаиморасчетов)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОтгрузке,
	|	&Организация								КАК Организация
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|ГДЕ
	|	&ОтчетПоЗаказам И НЕ &РасчетыПоНакладным
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.ЗаказДавальца,
	|	ТаблицаУслуги.ЗаказДавальца.ГруппаФинансовогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период 									КАК Период,
	|	&Период 									КАК ДатаРегистратора,
	|	&ДатаПлатежа 								КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ 										КАК ЗаказКлиента,
	|
	|	Неопределено 								КАК ПродажаПоЗаказу,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов 						КАК Валюта,
	|	Истина 										КАК ИсключатьПриКонтроле,
	|	Неопределено 								КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности 				КАК ДопустимаяСуммаЗадолженности,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) 	КАК Сумма,
	|	
	|	ВЫРАЗИТЬ(СУММА(ТаблицаУслуги.СуммаСНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(СУММА(ТаблицаУслуги.СуммаСНДС) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	
	|	0 											КАК КОплате,
	|	0 											КАК КОтгрузке,
	|	&Организация								КАК Организация
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|ГДЕ
	|	(НЕ &ОтчетПоЗаказам ИЛИ &РасчетыПоНакладным)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.ЗаказДавальца,
	|	ТаблицаУслуги.ЗаказДавальца.ГруппаФинансовогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&ДатаПлатежа, День) 			КАК Период,
	|	&Период 									КАК ДатаРегистратора,
	|	&ДатаПлатежа 								КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ 										КАК ЗаказКлиента,
	|
	|	Неопределено 								КАК ПродажаПоЗаказу,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов 						КАК Валюта,
	|	Истина 										КАК ИсключатьПриКонтроле,
	|	&ФормаОплаты 								КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности 				КАК ДопустимаяСуммаЗадолженности,
	|	0 											КАК Сумма,
	|	0 											КАК СуммаРегл,
	|	0 											КАК СуммаУпр,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) 	КАК КОплате,
	|	0 											КАК КОтгрузке,
	|	&Организация								КАК Организация
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|ГДЕ
	|	(НЕ &ОтчетПоЗаказам ИЛИ &РасчетыПоНакладным)
	|	И НЕ &ГрафикИсполненияВДоговоре
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.ЗаказДавальца,
	|	ТаблицаУслуги.ЗаказДавальца.ГруппаФинансовогоУчета";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период												КАК Период,
	|	&Валюта												КАК Валюта,
	|	ТаблицаУслуги.ИдентификаторСтроки					КАК ИдентификаторСтроки,
	|	ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС	КАК СуммаБезНДС,
	|	ТаблицаУслуги.СтавкаНДС								КАК СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС								КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаБезНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаБезНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР КОГДА ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНДСРегл,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = &Ссылка
	|		И ТаблицаУслуги.ИдентификаторСтроки = ДанныеРегистра.ИдентификаторСтроки
	|
	|ГДЕ
	|	&Валюта <> &ВалютаРегламентированногоУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыпускПродукции";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период 									КАК Период,
	|	&Организация 								КАК Организация,
	|	&Подразделение 								КАК Подразделение,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаУслуги.КодСтроки 					КАК КодСтроки,
	|	ТаблицаУслуги.ВидЗапасов 					КАК ВидЗапасов,
	|	ТаблицаУслуги.ЗаказДавальца 				КАК Заказ,
	|	ТаблицаУслуги.Количество 					КАК Количество
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСервер.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки 					КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 		КАК ВидДвижения,
	|	&Период 									КАК Период,
	|	&Организация 								КАК Организация,
	|
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|
	|	ТаблицаУслуги.Количество 					КАК Количество,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение 								КАК Подразделение,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаУслуги.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК ВидЗапасов,
	|	ТаблицаУслуги.НалоговоеНазначение 		    КАК НалоговоеНазначение,
	|	ТаблицаУслуги.НалоговоеНазначение 		    КАК КорНалоговоеНазначение,
	|
	|	НЕОПРЕДЕЛЕНО 								КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО 								КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО 								КАК КорАналитикаУчетаНоменклатуры,
	|
	|	ТаблицаУслуги.ЗаказДавальца 				КАК ЗаказКлиента
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки 					КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&Период 									КАК Период,
	|	&Организация 								КАК Организация,
	|
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|
	|	ТаблицаУслуги.Количество 					КАК Количество,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение 								КАК Подразделение,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаУслуги.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК ВидЗапасов,
	|	ТаблицаУслуги.НалоговоеНазначение 		    КАК НалоговоеНазначение,
	|	ТаблицаУслуги.НалоговоеНазначение 		    КАК КорНалоговоеНазначение,
	|
	|	НЕОПРЕДЕЛЕНО 								КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО 								КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО 								КАК КорАналитикаУчетаНоменклатуры,
	|
	|	ТаблицаУслуги.ЗаказДавальца 				КАК ЗаказКлиента
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСНоменклатурныйСоставДляНалоговыхНакладных(Запрос, ТекстыЗапроса, Регистры)
	
	
	ИмяРегистра = "НДСНоменклатурныйСоставДляНалоговыхНакладных";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаУслуги.ЗаказДавальца
	|	КОНЕЦ КАК ОбъектРасчетов,
	|
	|	&ВидПоставки КАК ВидПоставки,
	|	&Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияНоменклатурыНалоговыхДокументов.УслугиССдержанием) КАК СпособЗаполнения,
	|
	|	ТаблицаУслуги.СтавкаНДС      КАК СтавкаНДС,
	|	Неопределено                 КАК НомерГТД,
	|	ТаблицаУслуги.Номенклатура   КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика КАК Характеристика,
	|	Неопределено                 КАК Упаковка,
	|	(ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС) / ТаблицаУслуги.Количество КАК ЦенаНН,
	|
	|   ТаблицаУслуги.Ссылка КАК ДокументПоставки,
	|   НЕОПРЕДЕЛЕНО КАК ДокументПоставкиДляВозвратов,
	|
	|	ТаблицаУслуги.СуммаСНДС КАК СуммаВзаиморасчетов,
	|	ТаблицаУслуги.Количество КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаУслуги
	|
	|ГДЕ
	|	&ОрганизацияПлательщикНДС
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


#Конецобласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ОтчетДавальцу) Тогда
		
		// Акт выполненных работ
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьАктОбОказанииУслуг";
		КомандаПечати.Идентификатор = "Акт";
		КомандаПечати.Представление = НСтр("ru='Акт выполненных работ';uk='Акт виконаних робіт'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		
		// Акт выполненных работ (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктВыполненныхРаботMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "АктMicrosoftWord";
		КомандаПечати.Представление  = УправлениеПечатьюУТВызовСервера.ПредставлениеКомандыПечатьАктВыполненныхРаботMicrosoftWord(Ложь);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик     = "УправлениеПечатьюУТКлиент.ПечатьАктВыполненныхРаботMicrosoftWordАльтернативныйЯзык";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор  = "АктMicrosoftWordАльтернативныйЯзык";
		КомандаПечати.Представление  = УправлениеПечатьюУТВызовСервера.ПредставлениеКомандыПечатьАктВыполненныхРаботMicrosoftWord(Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Отчет о материалах
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ОтчетОМатериалах";
		КомандаПечати.Представление = НСтр("ru='Отчет о материалах';uk='Звіт про матеріали'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
		 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
			
			// Счет на оплату
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru='Счет на оплату';uk='Рахунок на оплату'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			
			// Cчет на оплату с факсимиле
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru='Счет на оплату с факсимиле';uk='Рахунок на оплату з факсиміле'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
		 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
			
			// Извещение
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "Извещение";
			КомандаПечати.Представление = НСтр("ru='Извещение';uk='Повідомлення'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			
		КонецЕсли;
		
	КонецЕсли;


	Если НЕ ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		
		
		
		// Комплект документов на принтер
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КомплектДокументов";
		КомандаПечати.СразуНаПринтер = Истина;
		КомандаПечати.Представление = НСтр("ru='Комплект документов на принтер';uk='Комплект документів на принтер'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 1;
		
		// Комплект документов с настройкой...
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КомплектДокументовСНастройкой";
		КомандаПечати.Представление = НСтр("ru='Комплект документов с настройкой...';uk='Комплект документів з настройкою...'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 2;
		
	КонецЕсли;

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОМатериалах") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетОМатериалах",
			"Отчет о материалах",
			СформироватьПечатнуюФормуОтчетОМатериалах(МассивОбъектов, ОбъектыПечати,,ПараметрыВывода),
			,
			,
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма
		);
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		
		КоллекцияПечатныхФорм.Очистить();
		
		СформироватьКомплектПечатныхФорм(
			МассивОбъектов,
			ПараметрыПечати,
			КоллекцияПечатныхФорм,
			ОбъектыПечати,
			ПараметрыВывода
		);
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры


Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов);
	
КонецФункции



Функция ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов) Экспорт	
	
	ОтображатьСкидки = Ложь;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетДавальцу.Ссылка						КАК Ссылка,
	|	ОтчетДавальцу.Номер							КАК Номер,
	|	ОтчетДавальцу.Дата							КАК Дата,
	|	ОтчетДавальцу.Партнер						КАК Партнер,
	|	ОтчетДавальцу.Контрагент					КАК Контрагент,
	|	ОтчетДавальцу.Организация					КАК Организация,
	|	ОтчетДавальцу.Организация.Префикс			КАК Префикс,
	|	ОтчетДавальцу.Валюта						КАК Валюта,
	|	ОтчетДавальцу.ЦенаВключаетНДС				КАК ЦенаВключаетНДС,
	|	ВЫБОР КОГДА ОтчетДавальцу.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ										КАК УчитыватьНДС,
	|	ОтчетДавальцу.ДополнительнаяИнформация		КАК ДополнительнаяИнформация,
	|	ОтчетДавальцу.ДополнительнаяИнформацияШапки	КАК ДополнительнаяИнформацияШапки,
	|	ОтчетДавальцу.Договор 								КАК Договор,
	|	ОтчетДавальцу.Договор.НаименованиеДляПечати     	КАК ДоговорНаименованиеДляПечати,
	|	ВЫБОР КОГДА ОтчетДавальцу.Сделка.СоглашениеСКлиентом.ВыводитьИнформациюОбОбъектеРасчетовПриПечатиДокументов ТОГДА 
	|		ИСТИНА
	|	ИНАЧЕ 
	|		ЛОЖЬ 
	|	КОНЕЦ												КАК ПечататьЗаказ,
	|	ОтчетДавальцу.ЗаказДавальца							КАК Заказ,
	|	ОтчетДавальцу.Сделка.СоглашениеСКлиентом			КАК Соглашение,
	|	ТаблицаОтветственныеЛица.РуководительНаименование	КАК РуководительОрганизации,
	|	ТаблицаОтветственныеЛица.РуководительДолжность      КАК ДолжностьРуководителяОрганизации,
	|	""""                                                КАК РуководительКонтрагента,
	|	""""                                                КАК ДолжностьРуководителяКонтрагента,
	|	ОтчетДавальцу.ПредставительОрганизации              КАК ПредставительОрганизации,
	|	ОтчетДавальцу.ПредставительОрганизацииДолжность     КАК ПредставительОрганизацииДолжность,
	|	ОтчетДавальцу.ПредставительКонтрагента              КАК ПредставительКонтрагента,
	|	""""                                                КАК ПредставительОрганизацииПолучателя,
	|	""""                                                КАК ПредставительОрганизацииПолучателяДолжность,
	|	ОтчетДавальцу.МестоСоставленияДокумента             КАК МестоСоставленияДокумента,
	|	ОтчетДавальцу.БанковскийСчетОрганизации             КАК БанковскийСчетОрганизации,
	|	ОтчетДавальцу.БанковскийСчетКонтрагента             КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ОтчетДавальцу
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ОтчетДавальцу.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ОтчетДавальцу.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка 								КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура 						КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание 							КАК УслугаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код 					КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул 				КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование		КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения					КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Характеристика 						КАК Характеристика,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное 	КАК ХарактеристикаНаименованиеПолное,
	|	ВложенныйЗапрос.СтавкаНДС 							КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена 								КАК Цена,
	|	ВложенныйЗапрос.Количество 							КАК Количество,
	|	ВложенныйЗапрос.Сумма 								КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС 							КАК СуммаНДС,
	|	ВложенныйЗапрос.СуммаСкидки 						КАК СуммаСкидки,
	|	ВложенныйЗапрос.СуммаБезСкидки 						КАК СуммаБезСкидки,
	|	ВложенныйЗапрос.НомерСтроки 						КАК НомерСтроки,
	|	Ложь                                                КАК ЭтоВозвратнаяТара
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтчетДавальцу.Ссылка КАК Ссылка,
	|		ОтчетДавальцу.Номенклатура КАК Номенклатура,
	|		ОтчетДавальцу.Содержание КАК Содержание,
	|		1 КАК Коэффициент,
	|		0 КАК ПроцентСкидки,
	|		ОтчетДавальцу.Характеристика КАК Характеристика,
	|		ОтчетДавальцу.СтавкаНДС КАК СтавкаНДС,
	|		ОтчетДавальцу.Сумма/ОтчетДавальцу.Количество КАК Цена,
	|		ОтчетДавальцу.Количество КАК Количество,
	|		ОтчетДавальцу.Сумма КАК Сумма,
	|		0 КАК СуммаСкидки,
	|		ОтчетДавальцу.Сумма КАК СуммаБезСкидки,
	|		ОтчетДавальцу.СуммаНДС КАК СуммаНДС,
	|		ОтчетДавальцу.НомерСтроки КАК НомерСтроки,
	|		ОтчетДавальцу.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	ИЗ
	|		Документ.ОтчетДавальцу.Продукция КАК ОтчетДавальцу
	|	ГДЕ
	|		ОтчетДавальцу.Ссылка В (&МассивДокументов)
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаСкидки)
	|ПО
	|	Ссылка
	|";
	
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати = Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                            РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции



Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчетОрганизации.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НеНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	
	|	ВЫБОР КОГДА Документы.БанковскийСчетОрганизации.ИностранныйБанк
	|		ИЛИ Документы.БанковскийСчетОрганизации.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета
	|		ИЛИ Документы.БанковскийСчетКонтрагента.ИностранныйБанк ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчетОрганизации.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	Документы.БанковскийСчетОрганизации.СВИФТБанка КАК СВИФТБанка,
	|	Документы.БанковскийСчетОрганизации.СВИФТБанкаДляРасчетов КАК СВИФТБанкаДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.АдресБанка КАК АдресБанка,
	|	Документы.БанковскийСчетОрганизации.АдресБанкаДляРасчетов КАК АдресБанкаДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	
	|	Документы.БанковскийСчетОрганизации.НомерСчета КАК НомерБанковскогоСчета,
	|	Документы.БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетов КАК НаименованиеБанкаДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	"""" КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	ЛОЖЬ КАК СчетКВозврату
	|ИЗ
	|	Документ.ОтчетДавальцу КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы
	|		ПО Истина
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыОплаты.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоЗалогЗаТару,
	|	1 КАК НомерСтроки,
	|	ЭтапыОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	100 КАК ПроцентПлатежа,
	|	ЭтапыОплаты.СуммаДокумента КАК СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ЭтапыОплаты
	|ГДЕ
	|	ЭтапыОплаты.Ссылка В(&МассивОбъектов)
	|	И ЭтапыОплаты.СуммаДокумента > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	Отчет.Ссылка КАК Ссылка,
	|	Отчет.Номенклатура КАК Номенклатура,
	|	Отчет.Номенклатура.Код КАК Код,
	|	Отчет.Номенклатура.Артикул КАК Артикул,
	|	Отчет.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Отчет.СтавкаНДС КАК СтавкаНДС,
	|	Отчет.Характеристика.НаименованиеПолное КАК Характеристика,
	|	Отчет.Содержание КАК Содержание,
	|	СУММА(Товары.Сумма) КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Товары.Сумма) КАК СуммаБезСкидки,
	|	0 КАК СуммаСкидки,
	|	1 КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	ПРЕДСТАВЛЕНИЕ(Отчет.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ОтчетДавальцу КАК Отчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу.Продукция КАК Товары
	|		ПО Отчет.Ссылка = Товары.Ссылка
	|ГДЕ
	|	Отчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Отчет.Ссылка,
	|	Отчет.Номенклатура,
	|	Отчет.СтавкаНДС,
	|	Отчет.Содержание,
	|	Отчет.Номенклатура.Код,
	|	Отчет.Номенклатура.Артикул,
	|	Отчет.Номенклатура.НаименованиеПолное,
	|	Отчет.Характеристика.НаименованиеПолное,
	|	ПРЕДСТАВЛЕНИЕ(Отчет.Номенклатура.ЕдиницаИзмерения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт

	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");

КонецПроцедуры 


Функция СформироватьПечатнуюФормуОтчетОМатериалах(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено, ПараметрыВывода)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;	
	
	Колонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(Колонка);
	
	ИспользоватьУпаковкиНоменклатуры = Ложь;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетДавальцу_ОтчетОМатериалах";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетДавальцу.ПФ_MXL_ОтчетОМатериалах", КодЯзыкаПечать);
	
	ОбластьЗаголовка  = Макет.ПолучитьОбласть("Заголовок");
	
	Если ВыводитьКоды Тогда
		ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = Колонка;
		
		ОбластьКодовСтрока = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьКодовПодвал = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	Иначе
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ОбластьУпаковокШапка  =  Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьУпаковокСтрока =  Макет.ПолучитьОбласть("Строка|КолонкаУпаковок");
		ОбластьУпаковокПодвал =  Макет.ПолучитьОбласть("Подвал|КолонкаУпаковок");
	Иначе
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки 
									  + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
									  + Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанныхШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьКонецСтрокиШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьКонецСтрокиСтрока = Макет.ПолучитьОбласть("Строка|КонецСтроки");
	
	ОбластьНомераПодвал = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьДанныхПодвал = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьКонецСтрокиПодвал = Макет.ПолучитьОбласть("Подвал|КонецСтроки");
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетДавальцу.Ссылка КАК Ссылка,
	|	ОтчетДавальцу.Номер КАК Номер,
	|	ОтчетДавальцу.Дата КАК Дата,
	|	ОтчетДавальцу.Партнер КАК Партнер,
	|	ОтчетДавальцу.Контрагент КАК Контрагент,
	|	ОтчетДавальцу.Организация КАК Организация,
	|	ОтчетДавальцу.Организация.Префикс КАК Префикс
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ОтчетДавальцу
	|ГДЕ
	|	ОтчетДавальцу.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|/////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                            КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                      КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное   КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                  КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул              КАК Артикул,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное КАК Характеристика,
	|	СУММА(ВложенныйЗапрос.Количество)                 КАК Количество,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииНезавершенногоПроизводства.Регистратор  КАК Ссылка,
	|		АналитикиУчетаНоменклатуры.Номенклатура       КАК Номенклатура,
	|		АналитикиУчетаНоменклатуры.Характеристика     КАК Характеристика,
	|		ПартииНезавершенногоПроизводства.Количество   КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПартииНезавершенногоПроизводства КАК ПартииНезавершенногоПроизводства
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиУчетаНоменклатуры
	|		ПО
	|			ПартииНезавершенногоПроизводства.АналитикаУчетаНоменклатуры = АналитикиУчетаНоменклатуры.КлючАналитики
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО
	|			ПартииНезавершенногоПроизводства.ВидЗапасов = ВидыЗапасов.Ссылка
	|	ГДЕ
	|		ПартииНезавершенногоПроизводства.Регистратор В (&МассивДокументов)
	|		И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)) ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка
	|
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов 	= Запрос.ВыполнитьПакет();
	
	ДанныеПечати		= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		Если НайденСледующий Тогда
			ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
			ВыборкаПоТоварам.Сбросить();
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ %1: при производстве продукции не использовались материалы давальца, либо не рассчитана себестоимость. Печать отчета не требуется';uk='Документ %1: при виробництві продукції не використовувались матеріали давальця, або не розрахована собівартість. Друк звіту не потрібен'"),
				ДанныеПечати.Ссылка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Отчет об израсходованных материалах';uk= 'Звіт про витрачені матеріали'", КодЯзыкаПечать), КодЯзыкаПечать);
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ОбластьМакета.Параметры.ИсполнительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), 
				"ПолноеНаименование");
		ОбластьМакета.Параметры.ЗаказчикПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), 
				"ПолноеНаименование");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьНомераШапка);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхШапка);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ТабличныйДокумент.Присоединить(ОбластьУпаковокШапка);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиШапка);
		
		НомерСтроки = 1;
		
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			ОбластьНомераСтрока.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомераСтрока);
			
			Если ВыводитьКоды Тогда
				ОбластьКодовСтрока.Параметры.Артикул = ВыборкаПоТоварам[Колонка];
				ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);
			КонецЕсли;
			
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
			ОбластьДанныхСтрока.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СокрЛП(ВыборкаПоТоварам.ТоварНаименование),
				СокрЛП(ВыборкаПоТоварам.Характеристика),);
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхСтрока);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ОбластьУпаковокСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
				ТабличныйДокумент.Присоединить(ОбластьУпаковокСтрока);
			КонецЕсли;
			
			ОбластьКонецСтрокиСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
			ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьНомераПодвал);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовПодвал);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхПодвал);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ТабличныйДокумент.Присоединить(ОбластьУпаковокПодвал);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиПодвал);
		
		// Вывести подписи.
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Валюта.
//
//	ПараметрыЗаполнения - Структура - структура, возвращаемая функцией ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПараметрыЗаполнения = Неопределено) Экспорт
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПродажиСервер.ПараметрыЗаполненияВременнойТаблицыТоваров();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл",       ПараметрыЗаполнения.ПересчитыватьВВалютуРегл);
	
	Если ПараметрыЗаполнения.ПересчитыватьВВалютуРегл И ПараметрыЗаполнения.АктуализироватьРасчеты Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаДанныхДокументов КАК ДанныеДокументов
		|	ПО
		|		РасчетыСКлиентами.Регистратор = ДанныеДокументов.Ссылка
		|
		|ГДЕ
		|	ДанныеДокументов.Валюта <> &ВалютаРегламентированногоУчета
		|	И РасчетыСКлиентами.Активность
		|";
		ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
		МассивАналитикУчетаПоПартнерам = ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		
		ОкончаниеПериодаРасчета = ТекущаяДатаСеанса();
		РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСКлиентами(ОкончаниеПериодаРасчета, МассивАналитикУчетаПоПартнерам);
		
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                          КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика                        КАК Характеристика,
	|	ДанныеДокументов.Номенклатура                          КАК Услуга,
	|	ДанныеДокументов.Содержание                            КАК Содержание,
	|	ТаблицаДокумента.Количество                            КАК Количество,
	|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СтавкаНДС                             КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС
	|
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|
	|ГДЕ
	|	ДанныеДокументов.Валюта = &ВалютаРегламентированногоУчета
	|	ИЛИ (НЕ &ПересчитыватьВВалютуРегл)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                 КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                            КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика                         КАК Характеристика,
	|	ДанныеДокументов.Номенклатура                           КАК Услуга,
	|	ДанныеДокументов.Содержание                             КАК Содержание,
	|	ТаблицаДокумента.Количество                             КАК Количество,
	|	ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, 0) КАК СуммаБезНДС,
	|	ТаблицаДокумента.СтавкаНДС                              КАК СтавкаНДС,
	|	ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаНДСРегл, 0)    КАК СуммаНДС
	|
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО
	|		ТаблицаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|
	|ГДЕ
	|	ДанныеДокументов.Валюта <> &ВалютаРегламентированногоУчета
	|	И &ПересчитыватьВВалютуРегл
	|	И СуммыДокументовВВалютеРегл.Активность";
	
	Запрос.Выполнить();
	
КонецПроцедуры


Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт	
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.ОтчетДавальцу.ПолноеИмя(),
			?(МассивОбъектов.Количество() = 1, МассивОбъектов[0], Неопределено));
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.ОтчетДавальцу", МассивОбъектов);
	
	НастройкаПечати = КомплектПечатныхФорм.Найти("АктВыполненныхРабот", "Имя");
	Если НастройкаПечати <> Неопределено И НастройкаПечати.Печатать Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, НастройкаПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			НастройкаПечати.Имя,
			НастройкаПечати.Представление,
			Обработки.ПечатьАктОбОказанииУслуг.СформироватьПечатнуюФормуАктОбОказанииУслуг(СтруктураТипов, ОбъектыПечати, ПараметрыПечати, ПараметрыВывода, КомплектПечатныхФорм),
			,
			,
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма
		);
	КонецЕсли;
	
	
	НастройкаПечати = КомплектПечатныхФорм.Найти("ОтчетОМатериалах", "Имя");
	Если НастройкаПечати <> Неопределено И НастройкаПечати.Печатать Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, НастройкаПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			НастройкаПечати.Имя,
			НастройкаПечати.Представление,
			СформироватьПечатнуюФормуОтчетОМатериалах(МассивОбъектов, ОбъектыПечати,,ПараметрыВывода),
			,
			,
			,
			Истина // ЭтоМногоязычнаяПечатнаяФорма
		);
	КонецЕсли;
	
	
	ИмяМакета = "СчетНаОплату";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.ОтчетДавальцу", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.ПечатьСчетовНаОплату.СформироватьПечатнуюФормуСчетНаОплату(ТекущаяСтруктураТипов, ОбъектыПечати, ПараметрыПечати, ТекущийКомплект));
		
	КонецЕсли;
	
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.ОтчетДавальцу",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "АктВыполненныхРабот", НСтр("ru='Акт выполненных работ';uk='Акт виконаних робіт'"), 1);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ОтчетОМатериалах", НСтр("ru='Отчет о материалах';uk='Звіт про матеріали'"), 1);
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
	 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплату", НСтр("ru='Счет на оплату';uk='Рахунок на оплату'"), 1);
	КонецЕсли;
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

#Конецобласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ОтчетДавальцу.Форма.ФормаСпискаДокументов";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетДавальцу))
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказДавальца)
		И (ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцу)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ОтчетДавальцу))
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ДетальныйЗапрос.КОформлениюВсего)	КАК ОтчетыДавальцамКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК КОформлениюВсего
	|	ИЗ
	|		РегистрНакопления.УслугиДавальцуКОформлению.Остатки(&ДатаОтгрузки) КАК УслугиДавальцуКОформлению
	|	
	|	ГДЕ
	|		УслугиДавальцуКОформлению.КОформлениюОстаток > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УслугиДавальцуКОформлению.ЗаказДавальца
	|	
	|	) КАК ДетальныйЗапрос";
	
	Запрос.УстановитьПараметр("ДатаОтгрузки", КонецДня(ОбщиеПараметрыЗапросов.ТекущаяДата) + 1);
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ПереработкаДавальческогоСырья
	ДелоРодитель = ТекущиеДела.Найти("ПереработкаДавальческогоСырья", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ПереработкаДавальческогоСырья";
		ДелоРодитель.Представление  = НСтр("ru='Переработка давальческого сырья';uk='Переробка давальницької сировини'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
	КонецЕсли;
	
	// ОтчетыДавальцамКОформлению
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ДатаОтгрузки", ОбщиеПараметрыЗапросов.ТекущаяДата);
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ОтчетыДавальцамКОформлению";
	Дело.ЕстьДела       = Результат.ОтчетыДавальцамКОформлению > 0;
	Дело.Представление  = НСтр("ru='Отчеты давальцам к оформлению';uk='Звіти давальцям до оформлення'");
	Дело.Количество     = Результат.ОтчетыДавальцамКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ПереработкаДавальческогоСырья";
	
	Если Результат.ОтчетыДавальцамКОформлению > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#КонецЕсли
