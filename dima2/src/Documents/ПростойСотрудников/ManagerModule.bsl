#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.ПростойСотрудников - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.ПростойСотрудников - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеПоВсемУчетам = Ложь;
	МассивРегистров = Новый Массив;
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
		ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(Объект, Отказ, РежимПроведения);
	КонецЕсли;        
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		// Подготовка к регистрации перерасчетов
		ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТДанныеДокументов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов);
		ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		
		Если Не РеквизитыДляПроведения.ВнутрисменныйПростой Тогда
			СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(Движения, РеквизитыДляПроведения.Ссылка, ДанныеСостоянийСотрудников(РеквизитыДляПроведения));
		КонецЕсли;
		
		// Учет рабочего времени	
		УчетРабочегоВремени.ЗарегистрироватьВнутрисменныеОтклонения(Движения, ДанныеОВремени(РеквизитыДляПроведения), РеквизитыДляПроведения.ПериодРегистрации);
		
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ПерерасчетВыполнен Тогда
		
		ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета);
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

			ДатаОперации = УчетНДФЛРасширенный.ДатаОперацииПоДокументу(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации);
			
			// Начисления
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);

			// Удержания
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперации, ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			
			// НДФЛ
			УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(
				РеквизитыДляПроведения.Ссылка, Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.ПорядокВыплаты, РеквизитыДляПроведения.ПланируемаяДатаВыплаты, ДанныеДляПроведения, Истина);
				
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
				
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);	

			// - Регистрация начислений и удержаний.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						ДанныеДляПроведения.НачисленияПоСотрудникам,
						ДанныеДляПроведения.УдержанияПоСотрудникам,
						ДанныеДляПроведения.НДФЛПоСотрудникам,
						РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
			
			// Страховые взносы
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				Модуль.ЗарегистрироватьНачисленияДляРасчетаСохраняемогоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияДляРегистрацииДенежногоСодержания);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			
			// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		// Регистрация перерасчетов
		Если ЕстьПерерасчеты Тогда
			ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		КонецЕсли; 
		
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.ПростойСотрудников);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеПростоев,ПолныеПрава,ЧтениеПростоев", , Ложь) Тогда
		// Приказ о временной приостановке работ (простое).
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ПФ_MXL_ПриказОВременнойПриостановкеРабот";
		КомандаПечати.Представление = НСтр("ru='Приказ о временной приостановке работ (простое)';uk='Наказ про тимчасове призупинення робіт (простій)'");
		КомандаПечати.Порядок = 10;
	КонецЕсли;
	
	// Расчет среднего заработка
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.ПростойСотрудников");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ДобавитьКомандыПечатиСохраняемогоДенежногоСодержания(КомандыПечати);
	КонецЕсли; 
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ПриказОВременнойПриостановкеРабот") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"ПФ_MXL_ПриказОВременнойПриостановкеРабот", 
			НСтр("ru='Приказ о временной приостановке работ (простое)';uk='Наказ про тимчасове призупинення робіт (простій)'"),
			ПечатнаяФормаПриказаОВременнойПриостановкеРабот(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), 
			,
			"Документ.ПростойСотрудников.ПФ_MXL_ПриказОВременнойПриостановкеРабот",
			,
			Истина	 // ЭтоМногоязычнаяПечатнаяФорма
		);
	КонецЕсли;					
	
	// Проверяем, нужно ли для макета РасчетСреднегоЗаработка формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработка", Истина, ПараметрыВывода);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм, 
				"РасчетСреднегоЗаработка", 
				НСтр("ru='Расчет среднего заработка';uk='Розрахунок середнього заробітку'"), 
				ТабличныйДокумент,
				,
				,
				,
				Истина	// ЭтоМногоязычнаяПечатнаяФорма
			);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры								

Функция ПечатнаяФормаПриказаОВременнойПриостановкеРабот(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;	
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриказОВременнойПриостановкеРабот";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПростойСотрудников.ПФ_MXL_ПриказОВременнойПриостановкеРабот", КодЯзыкаПечать);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПростойСотрудников.Организация,
	|	ПростойСотрудников.ВидПростоя,
	|	ПростойСотрудников.Начисление,
	|	ПростойСотрудников.ДатаНачала,
	|	ПростойСотрудников.ДатаОкончания,
	|	ПростойСотрудников.ДатаПростоя,
	|	ПростойСотрудников.ЧасыПростоя,
	|	ПростойСотрудников.Ссылка,
	|	ПростойСотрудников.ВнутрисменныйПростой,
	|	ПростойСотрудников.НаходитьсяНаРабочихМестах,
	|	ПростойСотрудников.Номер,
	|	ПростойСотрудников.Дата,
	|	ПростойСотрудников.Руководитель,
	|	ПростойСотрудников.ДолжностьРуководителя,
	|	ПростойСотрудников.Исполнитель,
	|	ПростойСотрудников.ДолжностьИсполнителя,
	|	ВЫРАЗИТЬ(ПростойСотрудников.ПричиныПростоя КАК СТРОКА(1000)) КАК ПричиныПростоя
	|ПОМЕСТИТЬ ВТШапкаДокументов
	|ИЗ
	|	Документ.ПростойСотрудников КАК ПростойСотрудников
	|ГДЕ
	|	ПростойСотрудников.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ШапкаДокументов.ВнутрисменныйПростой
	|			ТОГДА ШапкаДокументов.ДатаНачала
	|		ИНАЧЕ ШапкаДокументов.ДатаНачала
	|	КОНЕЦ КАК Период,
	|	ПростойСотрудниковСотрудники.Сотрудник,
	|	ПростойСотрудниковСотрудники.Ссылка
	|ПОМЕСТИТЬ ВТСотрудникиДокументов
	|ИЗ
	|	Документ.ПростойСотрудников.Начисления КАК ПростойСотрудниковСотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТШапкаДокументов КАК ШапкаДокументов
	|		ПО ПростойСотрудниковСотрудники.Ссылка = ШапкаДокументов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокументов.Период,
	|	СотрудникиДокументов.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТСотрудникиДокументов КАК СотрудникиДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ШапкаДокументов.ВнутрисменныйПростой
	|			ТОГДА ШапкаДокументов.ДатаПростоя
	|		ИНАЧЕ ШапкаДокументов.ДатаНачала
	|	КОНЕЦ КАК Период,
	|	ШапкаДокументов.Руководитель КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТШапкаДокументов КАК ШапкаДокументов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ШапкаДокументов.ВнутрисменныйПростой
	|			ТОГДА ШапкаДокументов.ДатаПростоя
	|		ИНАЧЕ ШапкаДокументов.ДатаНачала
	|	КОНЕЦ,
	|	ШапкаДокументов.Исполнитель
	|ИЗ
	|	ВТШапкаДокументов КАК ШапкаДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШапкаДокументов.Организация,
	|	ВЫБОР
	|		КОГДА ШапкаДокументов.ВнутрисменныйПростой
	|			ТОГДА ШапкаДокументов.ДатаПростоя
	|		ИНАЧЕ ШапкаДокументов.ДатаНачала
	|	КОНЕЦ КАК Период
	|ИЗ
	|	ВТШапкаДокументов КАК ШапкаДокументов";
	
	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОрганизацияГородФактическогоАдреса", Новый ОписаниеТипов("Строка"));
	
	РезультатЗапросаПоШапке = Запрос.Выполнить();
	АдресаОрганизаций = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресаОрганизаций(РезультатЗапросаПоШапке.Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Выборка = РезультатЗапросаПоШапке.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "НаимЮЛПол");
		
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
		
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;
		НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
		
		ОписаниеФактическогоАдреса = УправлениеКонтактнойИнформациейЗарплатаКадры.АдресОрганизации(
		АдресаОрганизаций,
		Выборка.Организация,
		Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
		НоваяСтрокаСведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса = ОписаниеФактическогоАдреса.Город;
		
	КонецЦикла;
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФамилияИО,Подразделение,Должность");
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "ФамилияИО");
	
	Запрос.УстановитьПараметр("СведенияОбОрганизациях", СведенияОбОрганизациях);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбОрганизациях.Период,
	|	СведенияОбОрганизациях.Организация,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	СведенияОбОрганизациях.ОрганизацияГородФактическогоАдреса КАК Город
	|ПОМЕСТИТЬ ВТДанныеОрганизаций
	|ИЗ
	|	&СведенияОбОрганизациях КАК СведенияОбОрганизациях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаДокументов.Ссылка КАК Ссылка,
	|	ШапкаДокументов.Номер,
	|	ШапкаДокументов.Дата,
	|	ДанныеОрганизаций.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ДанныеОрганизаций.Город КАК Город,
	|	ШапкаДокументов.ВидПростоя,
	|	ШапкаДокументов.Начисление,
	|	ЕСТЬNULL(Руководители.ФамилияИО, ""/___________________/"") КАК ФИОРуководителя,
	|	ШапкаДокументов.ДолжностьРуководителя,
	|	ЕСТЬNULL(Исполнители.ФамилияИО, ""___________________"") КАК ФИОИсполнителя,
	|	ШапкаДокументов.ДолжностьИсполнителя,
	|	ШапкаДокументов.ВнутрисменныйПростой,
	|	ШапкаДокументов.ДатаНачала,
	|	ШапкаДокументов.ДатаОкончания,
	|	ШапкаДокументов.ДатаПростоя,
	|	ШапкаДокументов.ЧасыПростоя,
	|	ШапкаДокументов.ПричиныПростоя,
	|	ШапкаДокументов.НаходитьсяНаРабочихМестах,
	|	ВЫБОР
	|		КОГДА ШапкаДокументов.ВнутрисменныйПростой
	|			ТОГДА ШапкаДокументов.ДатаПростоя
	|		ИНАЧЕ ШапкаДокументов.ДатаНачала
	|	КОНЕЦ КАК ДатаПростоя,
	|	СотрудникиДокументов.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФамилияИО КАК ФамилияИО,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.Должность КАК Должность
	|ИЗ
	|	ВТШапкаДокументов КАК ШапкаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиДокументов КАК СотрудникиДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|			ПО СотрудникиДокументов.Период = КадровыеДанныеСотрудников.Период
	|				И СотрудникиДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|		ПО ШапкаДокументов.Ссылка = СотрудникиДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОрганизаций КАК ДанныеОрганизаций
	|		ПО ШапкаДокументов.Организация = ДанныеОрганизаций.Организация
	|			И (ВЫБОР
	|				КОГДА ШапкаДокументов.ВнутрисменныйПростой
	|					ТОГДА ШапкаДокументов.ДатаПростоя
	|				ИНАЧЕ ШапкаДокументов.ДатаНачала
	|			КОНЕЦ = ДанныеОрганизаций.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК Исполнители
	|		ПО ШапкаДокументов.Исполнитель = Исполнители.ФизическоеЛицо
	|			И (ВЫБОР
	|				КОГДА ШапкаДокументов.ВнутрисменныйПростой
	|					ТОГДА ШапкаДокументов.ДатаПростоя
	|				ИНАЧЕ ШапкаДокументов.ДатаНачала
	|			КОНЕЦ = Исполнители.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК Руководители
	|		ПО (ШапкаДокументов.Руководитель = Руководители.ФизическоеЛицо)
	|			И (ВЫБОР
	|				КОГДА ШапкаДокументов.ВнутрисменныйПростой
	|					ТОГДА ШапкаДокументов.ДатаПростоя
	|				ИНАЧЕ ШапкаДокументов.ДатаНачала
	|			КОНЕЦ = Руководители.Период)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Подразделение,
	|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			
			СписокПодразделений = Новый Соответствие;
			СписокСотрудников = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				СписокПодразделений.Вставить(Выборка.Подразделение);
				
				ИнформацияОСотруднике = Новый Структура("ФамилияИО,Должность");
				ЗаполнитьЗначенияСвойств(ИнформацияОСотруднике, Выборка);
				
				СписокСотрудников.Добавить(ИнформацияОСотруднике);
				
			КонецЦикла;
			
			ОбластьШапка1 = Макет.ПолучитьОбласть("Шапка1");
			ОбластьШапка1.Параметры.Заполнить(Выборка);
			
			ОбластьШапка1.Параметры.Номер = КадровыйУчетРасширенный.НомерКадровогоПриказа(Выборка.Номер);
			
			ОбластьШапка1.Параметры.Город = ?(ПустаяСтрока(Выборка.Город), "____________", Выборка.Город);
			
			ОбластьШапка1.Параметры.ПричиныПростоя =
			?(ПустаяСтрока(Выборка.ПричиныПростоя), "______________________________________________________________________________________", Выборка.ПричиныПростоя);
			
			Если Выборка.ВнутрисменныйПростой Тогда
				ОбластьШапка1.Параметры.ОписаниеПериодаПростоя = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='на период %1 (%2 час.)';uk='на період %1 (%2 год.)'",КодЯзыкаПечать),
				Формат(Выборка.ДатаПростоя, "ДЛФ=DD; Л=" + КодЯзыкаПечать),
				Выборка.ЧасыПростоя
				);
			Иначе
				
				Если Выборка.ДатаНачала = Выборка.ДатаОкончания Тогда
					ОбластьШапка1.Параметры.ОписаниеПериодаПростоя = Формат(Выборка.ДатаНачала, "ДЛФ=DD");
				Иначе
					
					ОбластьШапка1.Параметры.ОписаниеПериодаПростоя = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='на период с %1 по %2';uk='на період з %1 по %2'",КодЯзыкаПечать),
					Формат(Выборка.ДатаНачала, "ДЛФ=DD; Л=" + КодЯзыкаПечать),
					Формат(Выборка.ДатаОкончания, "ДЛФ=DD; Л=" + КодЯзыкаПечать)
					);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьШапка1);
			
			НомерПоПорядку = 1;
			Для каждого ЭлементСпискаПодразделений Из СписокПодразделений Цикл
				
				ОбластьПодразделение = Макет.ПолучитьОбласть("Подразделение");
				ОбластьПодразделение.Параметры.НПП = НомерПоПорядку;
				
				Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений
					И ЗначениеЗаполнено(ЭлементСпискаПодразделений.Ключ) Тогда
					ОбластьПодразделение.Параметры.Подразделение = ЭлементСпискаПодразделений.Ключ.ПолноеНаименование();
				Иначе
					ОбластьПодразделение.Параметры.Подразделение = Строка(ЭлементСпискаПодразделений.Ключ);
				КонецЕсли;
				
				ОбластьПодразделение.Параметры.Подразделение = ОбластьПодразделение.Параметры.Подразделение
				+ ?(НомерПоПорядку = СписокПодразделений.Количество(), ".", ";");
				
				ТабДокумент.Вывести(ОбластьПодразделение);
				
				НомерПоПорядку = НомерПоПорядку + 1;
				
			КонецЦикла;
			
			ОбластьШапка2 = Макет.ПолучитьОбласть("Шапка2");
			ОбластьШапка2.Параметры.Заполнить(Выборка);
			ТабДокумент.Вывести(ОбластьШапка2);
			
			НомерПоПорядку = 1;
			Для каждого ОписаниеСотрудника Из СписокСотрудников Цикл
				
				ОбластьФИОДолжность = Макет.ПолучитьОбласть("ФИОДолжность");
				ОбластьФИОДолжность.Параметры.НПП = НомерПоПорядку;
				ОбластьФИОДолжность.Параметры.ФамилияИО = ОписаниеСотрудника.ФамилияИО;
				ОбластьФИОДолжность.Параметры.Должность =
				Строка(ОписаниеСотрудника.Должность)
				+ ?(НомерПоПорядку = СписокСотрудников.Количество(), ".", ";");
				ТабДокумент.Вывести(ОбластьФИОДолжность);
				
				НомерПоПорядку = НомерПоПорядку + 1;
				
			КонецЦикла;
			
			ОбластьШапка3 = Макет.ПолучитьОбласть("Шапка3");
			ОбластьШапка3.Параметры.Заполнить(Выборка);
			ОбластьШапка3.Параметры.ДатаПростоя = Формат(Выборка.ДатаПростоя, "ДЛФ=DD; Л=" + КодЯзыкаПечать);
			
			Если Выборка.НаходитьсяНаРабочихМестах Тогда
				ОбластьШапка3.Параметры.Пункт3 = НСтр("ru='3. Работникам, перечисленным в пункте 2 настоящего приказа, в период простоя в рабочее время находиться на своих рабочих местах.';uk='3. Працівникам, переліченим у пункті 2 цього наказу, в період простою в робочий час перебувати на своїх робочих місцях.'",КодЯзыкаПечать);
			Иначе
				ОбластьШапка3.Параметры.Пункт3 = НСтр("ru='3. Работники, перечисленные в пункте 2 настоящего приказа, в период простоя освобождаются от обязанности являться на рабочие места в рабочее время.';uk='3. Працівники, перелічені в пункті 2 цього наказу, в період простою звільняються від обов''язку з''являтися на робочі місця в робочий час.'",КодЯзыкаПечать);
			КонецЕсли;
			
			Если Выборка.ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя Тогда
				ОбластьШапка3.Параметры.ОписаниеВидаПростоя = НСтр("ru='по вине работодателя';uk='з вини роботодавця'",КодЯзыкаПечать);
			ИначеЕсли Выборка.ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника Тогда
				ОбластьШапка3.Параметры.ОписаниеВидаПростоя = НСтр("ru='по вине работника';uk='з вини працівника'",КодЯзыкаПечать);
			Иначе
				ОбластьШапка3.Параметры.ОписаниеВидаПростоя = НСтр("ru='по обстоятельствам, не зависящим от воли сторон';uk='за обставинами, що не залежать від волі сторін'",КодЯзыкаПечать);
			КонецЕсли;
			
			Если Выборка.ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя Тогда
				ОбластьШапка3.Параметры.ОписаниеРазмераОплаты = НСтр("ru='производить в размере 2/3 от их среднего заработка';uk='проводити в розмірі 2/3 від їх середнього заробітку'",КодЯзыкаПечать);
			ИначеЕсли Выборка.ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника Тогда
				ОбластьШапка3.Параметры.ОписаниеРазмераОплаты = НСтр("ru='не производить';uk='не виконувати'",КодЯзыкаПечать);
			Иначе
				ОбластьШапка3.Параметры.ОписаниеРазмераОплаты = НСтр("ru='производить в размере 2/3 от их тарифной ставки, оклада (должностного оклада), рассчитанных пропорционально времени простоя';uk='проводити у розмірі 2/3 від тарифної ставки, окладу (посадового окладу), розрахованих пропорційно часу простою'",КодЯзыкаПечать);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДолжностьИсполнителя) Тогда
				ОбластьШапка3.Параметры.ДолжностьИсполнителя = "_________________";
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДолжностьРуководителя) Тогда
				ОбластьШапка3.Параметры.ДолжностьРуководителя = "_________________";
			КонецЕсли; 
			
			ТабДокумент.Вывести(ОбластьШапка3);
			
			Для каждого ОписаниеСотрудника Из СписокСотрудников Цикл
				
				ОбластьПодписьСотрудника = Макет.ПолучитьОбласть("ПодписьСотрудника");
				ОбластьПодписьСотрудника.Параметры.Заполнить(ОписаниеСотрудника);
				ТабДокумент.Вывести(ОбластьПодписьСотрудника);
				
			КонецЦикла;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 1, ОбъектыПечати, Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ТабДокумент;
	
КонецФункции

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаСреднегоЗаработка.ДанныеДокументовРасчетаСреднегоЗаработка.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник КАК Сотрудник,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Ссылка.Организация,
	|	Документ.Ссылка.Дата КАК ДатаДокумента,
	|	Документ.Ссылка.Номер КАК НомерДокумента,
	|	ВЫБОР
	|		КОГДА Документ.Ссылка.ВнутрисменныйПростой
	|			ТОГДА Документ.Ссылка.ДатаПростоя
	|		ИНАЧЕ Документ.Ссылка.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаСобытия,
	|	ВЫБОР
	|		КОГДА Документ.Ссылка.ВнутрисменныйПростой
	|			ТОГДА Документ.Ссылка.ДатаПростоя
	|		ИНАЧЕ Документ.Ссылка.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаОтсутствия,
	|	ВЫБОР
	|		КОГДА Документ.Ссылка.ВнутрисменныйПростой
	|			ТОГДА Документ.Ссылка.ДатаПростоя
	|		ИНАЧЕ Документ.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончанияОтсутствия,
	|	Документ.Ссылка.ВнутрисменныйПростой,
	|	ВТКадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени КАК УчетВремениВЧасах,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Документ.Ссылка.Начисление,
	|	Документ.Ссылка.ВидПростоя КАК ВидПростоя
	|ИЗ
	|	Документ.ПростойСотрудников.Начисления КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО Документ.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И (ВЫБОР
	|				КОГДА Документ.Ссылка.ВнутрисменныйПростой
	|					ТОГДА Документ.Ссылка.ДатаПростоя
	|				ИНАЧЕ Документ.Ссылка.ДатаНачала
	|			КОНЕЦ = ВТКадровыеДанныеСотрудников.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Документ.Ссылка.Организация = Организации.Ссылка
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	ДанныеДокументов = Новый Массив;
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеДокументов;
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидПростоя <> Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
		
		ПериодРасчета = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(Выборка.ДатаНачалаСобытия, Выборка.Сотрудник, Выборка.Начисление);
		ПорядокРасчета = УчетСреднегоЗаработкаКлиентСервер.ПорядокРасчетаОбщегоСреднегоЗаработка(Выборка.ДатаНачалаСобытия);
		
		ДанныеДляРасчета = УчетСреднегоЗаработка.ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(
			Выборка.Сотрудник, 
			Выборка.ДатаНачалаСобытия, 
			ПериодРасчета.ДатаНачала, 
			ПериодРасчета.ДатаОкончания, 
			ПорядокРасчета);
		
		ИспользоватьСреднеЧасовойЗаработок = Выборка.ВнутрисменныйПростой Или Выборка.УчетВремениВЧасах;
		
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = ДанныеДляРасчета.ДанныеОбИндексации;
		ДополнительныеПараметры.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
		ДополнительныеПараметры.НачалоПериода = ПериодРасчета.ДатаНачала;
		ДополнительныеПараметры.ОкончаниеПериода = ПериодРасчета.ДатаОкончания;
		ДополнительныеПараметры.ПоЧасам = ИспользоватьСреднеЧасовойЗаработок;

		ДанныеДокумента.ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(
			ДанныеДляРасчета.ДанныеОНачислениях, 
			ДанныеДляРасчета.ДанныеОВремени, 
			ДополнительныеПараметры);
		
		ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок = ИспользоватьСреднеЧасовойЗаработок;
		ДанныеДокумента.ПараметрыРасчета.НачалоРасчетногоПериода = ПериодРасчета.ДатаНачала;
		ДанныеДокумента.ПараметрыРасчета.ОкончаниеРасчетногоПериода = ПериодРасчета.ДатаОкончания;
		
		ДанныеДокументов.Добавить(ДанныеДокумента);
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	ВЫБОР
	|		КОГДА Документ.Ссылка.ВнутрисменныйПростой
	|			ТОГДА Документ.Ссылка.ДатаПростоя
	|		ИНАЧЕ Документ.Ссылка.ДатаНачала
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.ПростойСотрудников.Начисления КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости,СуммированныйУчетРабочегоВремени");
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудники";
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Ложь);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru='Простой сотрудника';uk='Простій співробітника'"));
КонецПроцедуры 

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПростойСотрудниковНачисления.Ссылка КАК Ссылка,
	|	ПростойСотрудниковНачисления.Ссылка.Номер КАК НомерДокумента,
	|	ПростойСотрудниковНачисления.Ссылка.Дата КАК ДатаДокумента,
	|	ПростойСотрудниковНачисления.Ссылка.Организация КАК Организация,
	|	ПростойСотрудниковНачисления.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ПростойСотрудников.Начисления КАК ПростойСотрудниковНачисления
	|ГДЕ
	|	ПростойСотрудниковНачисления.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДанныеДокумента = ДанныеДокументов.Добавить(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		
		МассивСотрудников = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивСотрудников.Добавить(Выборка.Сотрудник);	
		КонецЦикла;
		ДанныеДокумента.МассивСотрудников = МассивСотрудников;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт 
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя, Истина);	
КонецФункции

#КонецОбласти

Функция ТекстСообщенияНеЗаполненВидРасчета(ВидПростоя, ВнутрисменныйПростой) Экспорт
	
	Если ВидПростоя = Перечисления.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника Тогда
		ТекстСообщения = НСтр("ru='Не найдено ни одного начисления для оплаты %1простоя по независящим от работодателям причинам';uk='Не знайдено жодного нарахування для оплати %1простою з незалежних від роботодавця причин'");
	ИначеЕсли ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботодателя Тогда
		ТекстСообщения = НСтр("ru='Не найдено ни одного начисления для оплаты %1простоя по вине работодателя';uk='Не знайдено жодного нарахування для оплати %1простою з вини роботодавця'");
	ИначеЕсли ВидПростоя = Перечисления.СостоянияСотрудника.ПростойПоВинеРаботника Тогда
		ТекстСообщения = НСтр("ru='Не найдено ни одного начисления для регистрации %1простоя по вине работника';uk='Не знайдено жодного нарахування для реєстрації %1простою з вини працівника'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ?(ВнутрисменныйПростой, НСтр("ru='часового ';uk='годинного '"), ""));	
	
КонецФункции

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаСотрудников, "Значение", Истина);
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = МассивФизическихЛиц;
	ДанныеДляПроверкиОграничений.Подразделение = Объект.Подразделение;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ДанныеДляПроведения(РеквизитыДляПроведения, СтруктураВидовУчета) 
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет", "Ссылка.ПериодРегистрации", "Ссылка.Начисление");  
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления");
		РасчетЗарплаты.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			НачисленияДляРегистрацииДенежногоСодержания = Модуль.СведенияОНачисленияхДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет", "Ссылка.Начисление");
			ДанныеДляПроведения.Вставить("НачисленияДляРегистрацииДенежногоСодержания", НачисленияДляРегистрацииДенежногоСодержания);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка();
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		ДополнительныеПараметры.Таблицы.Начисления.Начисление = "Ссылка.Начисление";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция ДанныеОВремени(РеквизитыДляПроведения, СписокСотрудников = Неопределено) Экспорт
	
	ДанныеОВремени = УчетРабочегоВремени.ТаблицаДляРегистрацииВремени();
	
	ВидВремениПростоя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДляПроведения.Начисление, "ОбозначениеВТабелеУчетаРабочегоВремени");
	
	Если Не ЗначениеЗаполнено(ВидВремениПростоя) Тогда
		ТекстСообщения = НСтр("ru='Не указан вид времени по классификатору для начисления оплачивающего %1';uk='Не зазначено вид часу за класифікатором для нарахування оплачує %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, РеквизитыДляПроведения.ВидПростоя); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ВнутрисменныйПростой Тогда
		Для Каждого СтрокаСотрудник Из РеквизитыДляПроведения.Начисления Цикл
			Если СписокСотрудников = Неопределено Или СписокСотрудников.Найти(СтрокаСотрудник.Сотрудник) <> Неопределено Тогда
				СтрокаДанныхОВремени = ДанныеОВремени.Добавить();
				СтрокаДанныхОВремени.Дата = РеквизитыДляПроведения.ДатаПростоя;
				СтрокаДанныхОВремени.Сотрудник = СтрокаСотрудник.Сотрудник;
				СтрокаДанныхОВремени.ВидВремени = ВидВремениПростоя;
				СтрокаДанныхОВремени.ВидВремениВытесняемый = РеквизитыДляПроведения.ВидВремениЗамещаемый;
				СтрокаДанныхОВремени.Часов = РеквизитыДляПроведения.ЧасыПростоя;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ДанныеОВремени;	
КонецФункции	

Функция ДанныеСостоянийСотрудников(РеквизитыДляПроведения)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияПростой.Сотрудник,
	|	ПростойСотрудников.ВидПростоя КАК Состояние,
	|	ПростойСотрудников.ДатаНачала КАК Начало,
	|	ПростойСотрудников.ДатаОкончания КАК Окончание
	|ИЗ
	|	Документ.ПростойСотрудников КАК ПростойСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПростойСотрудников.Начисления КАК НачисленияПростой
	|		ПО (НачисленияПростой.Ссылка = ПростойСотрудников.Ссылка)
	|			И (ПростойСотрудников.Ссылка = &Ссылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеСостояний = СостоянияСотрудников.ПустаяТаблицаДанныхСостоянийСотрудника();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеСостояний.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ДанныеСостояний;
	
КонецФункции

Процедура СоздатьВТДанныеДокументов(ДокументСсылка, МенеджерВременныхТаблиц) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПростойСотрудников.Начисления КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ДатаОкончания, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ПростойСотрудников.Начисления КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.Ссылка.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПростойСотрудников.Ссылка,
	|	ПростойСотрудников.Организация,
	|	ПростойСотрудников.ПериодРегистрации,
	|	ПростойСотрудников.ВнутрисменныйПростой,
	|	ПростойСотрудников.ПерерасчетВыполнен,
	|	ПростойСотрудников.Дата,
	|	ПростойСотрудников.ПорядокВыплаты,
	|	ПростойСотрудников.ПланируемаяДатаВыплаты,
	|	ПростойСотрудников.Начисление,
	|	ПростойСотрудников.ВидПростоя,
	|	ПростойСотрудников.ДатаПростоя,
	|	ПростойСотрудников.ВидВремениЗамещаемый,
	|	ПростойСотрудников.ЧасыПростоя
	|ИЗ
	|	Документ.ПростойСотрудников КАК ПростойСотрудников
	|ГДЕ
	|	ПростойСотрудников.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.ПростойСотрудников.РаспределениеПоТерриториямУсловиямТруда КАК ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	ПростойСотрудниковРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПростойСотрудниковНачисления.НомерСтроки,
	|	ПростойСотрудниковНачисления.Сотрудник,
	|	ПростойСотрудниковНачисления.Подразделение,
	|	ПростойСотрудниковНачисления.Результат,
	|	ПростойСотрудниковНачисления.ОтработаноДней,
	|	ПростойСотрудниковНачисления.ОтработаноЧасов,
	|	ПростойСотрудниковНачисления.НормаДней,
	|	ПростойСотрудниковНачисления.НормаЧасов,
	|	ПростойСотрудниковНачисления.ФиксРасчет,
	|	ПростойСотрудниковНачисления.ИдентификаторСтрокиВидаРасчета,
	|	ПростойСотрудниковНачисления.ОплаченоДней,
	|	ПростойСотрудниковНачисления.ОплаченоЧасов,
	|	ПростойСотрудниковНачисления.ФиксСтрока,
	|	ПростойСотрудниковНачисления.ФиксЗаполнение,
	|	ПростойСотрудниковНачисления.ФиксРасчетВремени,
	|	ПростойСотрудниковНачисления.ВремяВЧасах,
	|	ПростойСотрудниковНачисления.ПериодРегистрацииВремени,
	|	ПростойСотрудниковНачисления.ГрафикРаботыНорма,
	|	ПростойСотрудниковНачисления.ВидУчетаВремени,
	|	ПростойСотрудниковНачисления.ДатаНачала,
	|	ПростойСотрудниковНачисления.ДатаОкончания,
	|	ПростойСотрудниковНачисления.ГрафикРаботы,
	|	ПростойСотрудниковНачисления.СуммаВычета,
	|	ПростойСотрудниковНачисления.КодВычета,
	|	ПростойСотрудниковНачисления.УдалитьКодВычета,
	|	ПростойСотрудниковНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени
	|ИЗ
	|	Документ.ПростойСотрудников.Начисления КАК ПростойСотрудниковНачисления
	|ГДЕ
	|	ПростойСотрудниковНачисления.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Начисления = Результаты[2].Выгрузить();
	
	РеквизитыДляПроведения.Начисления = Начисления;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ПериодРегистрации, ВнутрисменныйПростой, ПерерасчетВыполнен, Дата, ПорядокВыплаты, 
	| ПланируемаяДатаВыплаты, Начисление, ВидПростоя, ДатаПростоя, ВидВремениЗамещаемый, ЧасыПростоя, РаспределениеПоТерриториямУсловиямТруда, Начисления");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

#КонецОбласти

#КонецЕсли