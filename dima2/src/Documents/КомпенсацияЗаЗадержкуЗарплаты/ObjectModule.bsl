#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическиеЛица.ФизическоеЛицо");
	
КонецПроцедуры
// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Отказ = Отказ ИЛИ НЕ МожноЗаполнитьКомпенсации();
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Организация");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПериодРегистрации");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПериодВзаиморасчетов");
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки.
	СуммаПоДокументу = Начисления.Итог("Сумма");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Начисление", Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты);
	Запрос.УстановитьПараметр("КодДохода", 
		УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)[0]);
		
	Запрос.Текст ="ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Подразделение КАК ПодразделениеСотрудника,
	|	Начисления.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Начисления.Ссылка.СтатьяРасходов КАК СтатьяРасходов,
	|	Начисления.Сумма КАК Сумма,
	|	Начисления.Сумма КАК СуммаДохода,
	|	&Начисление КАК Начисление,
	|	&КодДохода КАК КодДохода,
	|	&ПериодРегистрации КАК ДатаНачала,
	|	&ПериодРегистрации КАК НалоговыйПериод,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата) КАК ВидЕСВ,
	|	ЛОЖЬ КАК ЭтоОтпускные,
	|	ЕСТЬNULL(Настройка.ГруппаУчета, ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.Зарплата)) КАК ГруппаУчетаНачислений
	|ИЗ
	|	Документ.КомпенсацияЗаЗадержкуЗарплаты.Начисления КАК Начисления
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НастройкаГруппУчетаОсобыхНачисленийИУдержаний КАК Настройка
	|	ПО Настройка.НачислениеУдержание = &Начисление
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	
	НачисленияКомпенсации = Запрос.Выполнить().Выгрузить();

    // - Регистрация в учете НДФЛ.
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, КонецМесяца(ПериодРегистрации), НачисленияКомпенсации, Истина);
    // - Регистрация в учете страховых взносов.
	УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(Движения, Отказ, Организация, ПериодРегистрации, НачисленияКомпенсации, Истина);
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, Организация, ПериодРегистрации, НачисленияКомпенсации, Неопределено, Неопределено, Неопределено, ПорядокВыплаты, Ложь);
	
	ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, Организация, ПериодРегистрации,
						НачисленияКомпенсации,
						Неопределено,
						Неопределено,
						РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты));
	
	
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	Движения.ЗарплатаКВыплате.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МожноЗаполнитьКомпенсации() Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru='Не выбрана организация';uk='Не обрана організація'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru='Не указан месяц начисления';uk='Не вказано місяць нарахування'"));
	ПравилаПроверки.Вставить("ПериодВзаиморасчетов",НСтр("ru='Не указан месяц, за который задержана зарплата';uk='Не вказаний місяць, за який затримана зарплата'"));
	
	МожноЗаполнитьКомпенсации = 
		ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(ЭтотОбъект, ПравилаПроверки, Истина);
		
	Если ПериодВзаиморасчетов > ПериодРегистрации Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Компенсация не может рассчитываться за будущие периоды';uk='Компенсація не може розраховуватися за майбутні періоди'"), 
			, "ПериодВзаиморасчетов", "Объект");  
	КонецЕсли;
		
	Возврат МожноЗаполнитьКомпенсации 
	
КонецФункции

Процедура ЗаполнитьКомпенсации() Экспорт
	
	Сотрудники = СотрудникиПоШапкеДокумента();
	НевыплаченнаяЗарплата = НевыплаченнаяЗарплата(Сотрудники);
	КомпенсацияЗаЗадержку = КомпенсацияЗаЗадержкуЗарплаты(НевыплаченнаяЗарплата);
	
	ЗаполнитьНачисления(КомпенсацияЗаЗадержку);
	
КонецПроцедуры	

Процедура ДополнитьКомпенсации(Сотрудники) Экспорт
	
	НевыплаченнаяЗарплата = НевыплаченнаяЗарплата(Сотрудники);
	КомпенсацияЗаЗадержку = КомпенсацияЗаЗадержкуЗарплаты(НевыплаченнаяЗарплата);
	
	ДополнитьНачисления(КомпенсацияЗаЗадержку);
	
КонецПроцедуры

Процедура ЗаполнитьНачисления(КомпенсацияЗаЗадержкуЗарплаты)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем кадровые данные сотрудников с полями для сортировки 	
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, Истина, 
		КомпенсацияЗаЗадержкуЗарплаты.ВыгрузитьКолонку("Сотрудник"), 
		КадровыеДанные, 
		КонецМесяца(ПериодВзаиморасчетов));	
	
	// Формируем отсортированную зарплату сотрудников к выплате
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КомпенсацияЗаЗадержкуЗарплаты", КомпенсацияЗаЗадержкуЗарплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомпенсацияЗаЗадержкуЗарплаты.Сотрудник,
	|	КомпенсацияЗаЗадержкуЗарплаты.Подразделение,
	|	КомпенсацияЗаЗадержкуЗарплаты.СтатьяФинансирования,
	|	КомпенсацияЗаЗадержкуЗарплаты.Сумма,
	|	КомпенсацияЗаЗадержкуЗарплаты.КВыплате
	|ПОМЕСТИТЬ ВТКомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	&КомпенсацияЗаЗадержкуЗарплаты КАК КомпенсацияЗаЗадержкуЗарплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Компенсация.Подразделение КАК Подразделение,
	|	Компенсация.СтатьяФинансирования,
	|	Компенсация.Сумма,
	|	Компенсация.КВыплате
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКомпенсацияЗаЗадержкуЗарплаты КАК Компенсация
	|		ПО (Компенсация.Сотрудник = Сотрудники.Сотрудник)";
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "Сотрудники");
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры	

Процедура ДополнитьНачисления(КомпенсацияЗаЗадержкуЗарплаты)
	
	Для Каждого СтрокаКомпенсации Из КомпенсацияЗаЗадержкуЗарплаты Цикл
		СтрокаТЧ = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаКомпенсации);
	КонецЦикла
	
КонецПроцедуры	

Функция СотрудникиПоШапкеДокумента()
	
	ДлинаСуток = 86400;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Получаем всех работавших в организации в месяце периода задержанной зарплаты.
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		=  НачалоМесяца(ПериодВзаиморасчетов);
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода	=  КонецМесяца(ПериодВзаиморасчетов);
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ = Неопределено;

	КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудниковОрганизаций);
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
		
	Возврат СотрудникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции	

Функция НевыплаченнаяЗарплата(Сотрудники)
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",		ПериодВзаиморасчетов);
	Запрос.УстановитьПараметр("Сотрудники",					Сотрудники);
	Запрос.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате,
	|	СУММА(0) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|				Организация = &Организация
	|				    И ПериодВзаиморасчетов = &ПериодВзаиморасчетов
	|					И Сотрудник В (&Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	|		) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) > 0";
	
	НевыплаченнаяЗарплата = Запрос.Выполнить().Выгрузить();
	
	Возврат НевыплаченнаяЗарплата;
	
КонецФункции

Функция КомпенсацияЗаЗадержкуЗарплаты(Зарплата)
	

	КомпенсацияЗаЗадержкуЗарплаты = Зарплата.Скопировать();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",		ПериодВзаиморасчетов);
	Запрос.УстановитьПараметр("ПериодРегистрации",			ПериодРегистрации);
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ИндексыИнфляции.Период			КАК Период,
	|	ИндексыИнфляции.Индекс			КАК Индекс 
	|ИЗ РегистрСведений.ИндексИнфляции КАК ИндексыИнфляции
	|ГДЕ
	|   ИндексыИнфляции.Период > &ПериодВзаиморасчетов
	|   И ИндексыИнфляции.Период < &ПериодРегистрации
	|УПОРЯДОЧИТЬ ПО 
	|	ИндексыИнфляции.Период ВОЗР";
	
	ТаблицаИндексыИнфляции = Запрос.Выполнить().Выгрузить();
	
	Коэффициент = 1;
		
	Для каждого ТекущаяСтрока Из ТаблицаИндексыИнфляции Цикл
		Коэффициент = Коэффициент * ТекущаяСтрока.Индекс;
	КонецЦикла;  

	Коэффициент = ?(Коэффициент < 1, 0, Окр(Коэффициент - 1,3));
	
	Для Каждого СтрокаКомпенсации из КомпенсацияЗаЗадержкуЗарплаты Цикл
		СтрокаКомпенсации.Сумма = СтрокаКомпенсации.Сумма + СтрокаКомпенсации.КВыплате*Коэффициент;	
	КонецЦикла;	
	
	
	Если ЗначениеЗаполнено(СтатьяФинансирования) Тогда
		КомпенсацияЗаЗадержкуЗарплаты.ЗаполнитьЗначения(СтатьяФинансирования, "СтатьяФинансирования");
	КонецЕсли;	
	
	Возврат КомпенсацияЗаЗадержкуЗарплаты
	
КонецФункции

#КонецОбласти

#КонецЕсли