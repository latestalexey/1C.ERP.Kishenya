#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


// Заполняет список команд создания на основании.
// 
// Параметры:
//   КомандыСоздатьНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Возврат; //В дальнейшем будет добавлен код команд
	
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ВыработкаСотрудников.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ВводНаОсновании.ПредставлениеОбъекта(Метаданные.Документы.ВыработкаСотрудников);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство,ИспользоватьУправлениеРемонтами,ИспользоватьУчетПрочихДоходовРасходов";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ДобавитьКомандуСоздатьНаОснованииСозданиеВыработкиСотрудников(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников) Тогда
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "ВводНаОснованииУТКлиент.СозданиеВыработкиСотрудников";
		КомандаСоздатьНаОсновании.Идентификатор = "СозданиеВыработкиСотрудников";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru='Выработка сотрудников';uk='Виробіток співробітників'");
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство,ИспользоватьУправлениеРемонтами,ИспользоватьУчетПрочихДоходовРасходов";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд отчетов.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов) Экспорт

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

//++ НЕ УТКА

// Заполняет документ по остаткам трудозатрат к оформлению
//
// Параметры:
//  Объект				- ДокументОбъект.ВыработкаСотрудников, ДанныеФормыСтруктура - Документ, который нужно заполнить
//  ЗаполнятьСотрудников - Булево - документ будет заполнен по составу бригады
//  МассивВидовРабот	- Массив - Массив видов работ, по которым нужно заполнить документ
//  МассивРаспоряжений	- Массив - Массив распоряжений, по которым нужно заполнить документ
//  РабочийЦентр		- СправочникСсылка.РабочиеЦентры - Документ будет заполнен работами, которые выполнены с использованием данного рабочего центра
//
Процедура ЗаполнитьПоОстаткам(Объект, ЗаполнятьСотрудников = Истина, МассивВидовРабот = Неопределено, МассивРаспоряжений = Неопределено, РабочийЦентр = Неопределено) Экспорт
	
	Если Объект.ВидНаряда = Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Организация, Подразделение, Бригада, ВидНаряда, Дата");
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, Объект);
	
	Если МассивВидовРабот <> Неопределено Тогда
		СтруктураОтбора.Вставить("МассивВидовРабот", МассивВидовРабот);
	КонецЕсли;
	Если МассивРаспоряжений <> Неопределено Тогда
		СтруктураОтбора.Вставить("МассивРаспоряжений", МассивРаспоряжений);
	КонецЕсли;
	Если ЗначениеЗаполнено(РабочийЦентр) Тогда
		СтруктураОтбора.Вставить("РабочийЦентр", РабочийЦентр);
	КонецЕсли;
	
	ТаблицаТрудозатратыКОформлению = ТрудозатратыКОформлению(СтруктураОтбора);
	
	Объект.ВидыРабот.Загрузить(ТаблицаТрудозатратыКОформлению);
	
	Если Не Объект.Автораспределение Тогда
		Объект.Сотрудники.Очистить();
		Для Каждого Строка Из Объект.ВидыРабот Цикл
			Строка.КлючСтроки = Новый УникальныйИдентификатор;
		КонецЦикла;
	ИначеЕсли ЗаполнятьСотрудников Тогда
		Документы.ВыработкаСотрудников.ЗаполнитьСотрудниковПоСоставуБригады(Объект);
	КонецЕсли;
	
	РаспределитьРаботыПоКТУ(Объект);
	
КонецПроцедуры

// Получает трудозатраты к оформлению
//
// Параметры:
//	СтруктураОтбора	- Структура - содержит отбор
//  							- Организация	- СправочникСсылка.Организации - отбор по организации
//  							- Подразделение	- СправочникСсылка.СтруктураПредприятия - отбор по подразделению
//  							- ВидНаряда		- ПеречислениеСсылка.ВидыБригадныхНарядов - отбор по виду наряда
//  							- Бригада		- СправочникСсылка.Бригады - отбор по бригаде
//  							- РабочийЦентр	- СправочникСсылка.РабочиеЦентры - отбор по рабочему центру
// 										- при ББВ/УББВ отбор устанавливается для видов РЦ маршрутного листа
// 										- при пооперационном планировании отбор устанавливается для рабочих центров завершенных операций
//  							- МассивРаспоряжений	- Массив - отбор по распоряжениям
//								- МассивВидовРабот		- Массив - отбор по видам работ
//								- МассивДоступныхВидовНарядов- Массив - отбор по достпуным видам нарядов
//
// Возвращаемое значение:
//   ТаблицаЗначений   - трудозатраты к оформлению
//
Функция ТрудозатратыКОформлению(СтруктураОтбора) Экспорт
	
	Перем РабочийЦентр, МассивРаспоряжений, МассивВидовРабот, МассивДоступныхВидовНарядов;
	
	Если НЕ СтруктураОтбора.Свойство("РабочийЦентр", РабочийЦентр) Тогда
		РабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("МассивРаспоряжений", МассивРаспоряжений) Тогда
		МассивРаспоряжений = Новый Массив;
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("МассивВидовРабот", МассивВидовРабот) Тогда
		МассивВидовРабот = Новый Массив;
	КонецЕсли;
	
	Если НЕ СтруктураОтбора.Свойство("МассивДоступныхВидовНарядов", МассивДоступныхВидовНарядов) Тогда
		МассивДоступныхВидовНарядов = Новый Массив;
		
		Если СтруктураОтбора.Свойство("ВидНаряда") Тогда
			МассивДоступныхВидовНарядов.Добавить(СтруктураОтбора.ВидНаряда);
		КонецЕсли;
		
	КонецЕсли;
	
	ВидыРабочихЦентров = Новый Массив;
	Если НЕ РабочийЦентр.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РабочиеЦентры.ВидРабочегоЦентра
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	РабочиеЦентры.Ссылка В ИЕРАРХИИ(&РабочийЦентр)";
		Запрос.УстановитьПараметр("РабочийЦентр", РабочийЦентр);
		
		ВидыРабочихЦентров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРабочегоЦентра");
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация",                   ?(СтруктураОтбора.Свойство("Организация"), СтруктураОтбора.Организация, Неопределено));
	Запрос.УстановитьПараметр("БезОтбораПоОрганизации",        Не СтруктураОтбора.Свойство("Организация"));
	
	Запрос.УстановитьПараметр("Подразделение",                 ?(СтруктураОтбора.Свойство("Подразделение"), СтруктураОтбора.Подразделение, Неопределено));
	Запрос.УстановитьПараметр("БезОтбораПоПодразделению",      Не СтруктураОтбора.Свойство("Подразделение"));
	
	Запрос.УстановитьПараметр("Бригада",                       ?(СтруктураОтбора.Свойство("Бригада"), СтруктураОтбора.Бригада, Неопределено));
	Запрос.УстановитьПараметр("БезОтбораПоБригаде",            Не СтруктураОтбора.Свойство("Бригада"));
	
	Запрос.УстановитьПараметр("ОтметкаНаДату",                 ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПериодРасценок",                ?(СтруктураОтбора.Свойство("Дата"), СтруктураОтбора.Дата, ТекущаяДатаСеанса()));
	
	Запрос.УстановитьПараметр("ВидыРабочихЦентров",            ВидыРабочихЦентров);
	Запрос.УстановитьПараметр("БезОтбораПоВидамРабочихЦентров", ВидыРабочихЦентров.Количество() = 0);
	
	Запрос.УстановитьПараметр("МассивРаспоряжений",            МассивРаспоряжений);
	Запрос.УстановитьПараметр("БезОтбораПоРаспоряжению",       (МассивРаспоряжений.Количество() = 0));
	
	Запрос.УстановитьПараметр("МассивВидовРабот",              МассивВидовРабот);
	Запрос.УстановитьПараметр("БезОтбораПоВидуРабот",         (МассивВидовРабот.Количество() = 0));
	
	Запрос.УстановитьПараметр("МассивДоступныхВидовНарядов",      МассивДоступныхВидовНарядов);
	Запрос.УстановитьПараметр("БезОтбораПоДоступнымВидамНарядов", (МассивДоступныхВидовНарядов.Количество() = 0));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТрудозатратыКОформлению.ВидРабот КАК ВидРабот,
	|	ТрудозатратыКОформлению.КоличествоОстаток КАК Количество,
	|	ТрудозатратыКОформлению.Организация КАК Организация,
	|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
	|	ТрудозатратыКОформлению.Бригада КАК Бригада,
	|	ТрудозатратыКОформлению.Бригада.ПрименятьРаспределениеПоКТУ КАК Автораспределение,
	|	ВЫБОР
	|		КОГДА ТрудозатратыКОформлению.Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Производство)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт)
	|	КОНЕЦ КАК ВидНаряда,
	|	ТрудозатратыКОформлению.Бригада.Подразделение КАК Подразделение,
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ТрудозатратыКОформлению.Распоряжение.Статус КАК Статус,
	|	Продукция.Номенклатура.ГруппаАналитическогоУчета КАК ГруппаПродукции,
	|	ЕСТЬNULL(РасценкиРаботСотрудниковСрезПоследних.Расценка, 0) КАК Расценка,
	|	ТрудозатратыКОформлению.КоличествоОстаток * ЕСТЬNULL(РасценкиРаботСотрудниковСрезПоследних.Расценка, 0) КАК Сумма
	|ПОМЕСТИТЬ ТрудозатратыКОформлению
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(
	|			,
	|			(&БезОтбораПоОрганизации
	|					ИЛИ Организация = &Организация)
	|				И (&БезОтбораПоРаспоряжению
	|					ИЛИ Распоряжение В (&МассивРаспоряжений))
	|				И (&БезОтбораПоВидуРабот
	|					ИЛИ ВидРабот В (&МассивВидовРабот))
	|				И (&БезОтбораПоДоступнымВидамНарядов Или ВЫБОР
	|						КОГДА Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Производство)
	|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт)
	|					КОНЕЦ В (&МассивДоступныхВидовНарядов))
	|				И (&БезОтбораПоПодразделению
	|					ИЛИ Бригада.Подразделение = &Подразделение)
	|				И (&БезОтбораПоБригаде
	|					ИЛИ Бригада = &Бригада)) КАК ТрудозатратыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасценкиРаботСотрудников.СрезПоследних(
	|				&ПериодРасценок,
	|				&БезОтбораПоВидуРабот
	|					ИЛИ ВидРабот В (&МассивВидовРабот)) КАК РасценкиРаботСотрудниковСрезПоследних
	|		ПО ТрудозатратыКОформлению.ВидРабот = РасценкиРаботСотрудниковСрезПоследних.ВидРабот
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛист
	|		ПО МаршрутныйЛист.Ссылка = ТрудозатратыКОформлению.Распоряжение
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО Продукция.Ссылка = МаршрутныйЛист.Распоряжение
	|		И Продукция.КодСтроки = МаршрутныйЛист.КодСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения,
	|	ТрудозатратыКОформлению.ВидРабот КАК ВидРабот,
	|	ТрудозатратыКОформлению.Количество КАК Количество,
	|	ТрудозатратыКОформлению.Организация КАК Организация,
	|	ТрудозатратыКОформлению.Распоряжение КАК Распоряжение,
	|	ТрудозатратыКОформлению.Бригада КАК Бригада,
	|	ТрудозатратыКОформлению.Автораспределение КАК Автораспределение,
	|	ТрудозатратыКОформлению.ВидНаряда КАК ВидНаряда,
	|	ТрудозатратыКОформлению.Подразделение КАК Подразделение,
	|	ТрудозатратыКОформлению.Статус КАК Статус,
	|	ТрудозатратыКОформлению.ГруппаПродукции КАК ГруппаПродукции,
	|	ТрудозатратыКОформлению.Расценка КАК Расценка,
	|	ТрудозатратыКОформлению.Сумма КАК Сумма,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции,
	|	ЗаказНаРемонтРемонты.СпособОтраженияЗарплаты КАК СпособОтраженияЗарплаты,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт) КАК АналитикаРасходов
	|ИЗ
	|	ТрудозатратыКОформлению КАК ТрудозатратыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт.Трудозатраты КАК ЗаказНаРемонтТрудозатраты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт.Ремонты КАК ЗаказНаРемонтРемонты
	|			ПО ЗаказНаРемонтТрудозатраты.Ссылка = ЗаказНаРемонтРемонты.Ссылка
	|				И ЗаказНаРемонтТрудозатраты.КодРемонта = ЗаказНаРемонтРемонты.КодРемонта
	|		ПО ТрудозатратыКОформлению.Распоряжение = ЗаказНаРемонтТрудозатраты.Ссылка
	|			И ТрудозатратыКОформлению.КодСтрокиРаспоряжения = ЗаказНаРемонтТрудозатраты.НомерСтроки
	
	|ГДЕ
	|	ТрудозатратыКОформлению.ВидНаряда <> ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Производство)
	|	И (&БезОтбораПоДоступнымВидамНарядов
	|			ИЛИ ТрудозатратыКОформлению.ВидНаряда В (&МассивДоступныхВидовНарядов))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения,
	|	ТрудозатратыКОформлению.ВидРабот,
	|	ТрудозатратыКОформлению.Количество,
	|	ТрудозатратыКОформлению.Организация,
	|	ТрудозатратыКОформлению.Распоряжение,
	|	ТрудозатратыКОформлению.Бригада,
	|	ТрудозатратыКОформлению.Автораспределение,
	|	ТрудозатратыКОформлению.ВидНаряда,
	|	ТрудозатратыКОформлению.Подразделение,
	|	ТрудозатратыКОформлению.Статус,
	|	ТрудозатратыКОформлению.ГруппаПродукции,
	|	ТрудозатратыКОформлению.Расценка,
	|	ТрудозатратыКОформлению.Сумма,
	|	МаршрутныйЛистПроизводстваТрудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)  КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов
	|ИЗ
	|	ТрудозатратыКОформлению КАК ТрудозатратыКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК МаршрутныйЛистПроизводстваТрудозатраты
	|		ПО (МаршрутныйЛистПроизводстваТрудозатраты.Ссылка = ТрудозатратыКОформлению.Распоряжение)
	|			И (МаршрутныйЛистПроизводстваТрудозатраты.КодСтроки = ТрудозатратыКОформлению.КодСтрокиРаспоряжения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Операции КАК МаршрутныйЛистПроизводстваОперации
	|		ПО (МаршрутныйЛистПроизводстваОперации.Ссылка = МаршрутныйЛистПроизводстваТрудозатраты.Ссылка)
	|			И (МаршрутныйЛистПроизводстваОперации.КлючСвязи = МаршрутныйЛистПроизводстваТрудозатраты.КлючСвязиОперации)
	|			И (&БезОтбораПоВидамРабочихЦентров
	|				ИЛИ МаршрутныйЛистПроизводстваОперации.ВидРабочегоЦентра В (&ВидыРабочихЦентров))
	|ГДЕ
	|	ТрудозатратыКОформлению.ВидНаряда = ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Производство)
	|	И (ТрудозатратыКОформлению.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование)
	|	ИЛИ ТрудозатратыКОформлению.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций))
	|	И ВЫБОР
	|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения ЕСТЬ NULL
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.ПустаяСсылка)
	|				ТОГДА МаршрутныйЛистПроизводстваОперации.СтатусВыполнения
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеСформировано)
	|					ИЛИ МаршрутныйЛистПроизводстваОперации.Ссылка.СостояниеРасписания = ЗНАЧЕНИЕ(Перечисление.СостоянияРасписанияРабочихЦентров.НеАктуально)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеЗапланировано)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Окончание <= &ОтметкаНаДату
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено)
	|			КОГДА МаршрутныйЛистПроизводстваОперации.Начало > &ОтметкаНаДату
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.НеНачато)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато)
	|		КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Начато), ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияОпераций.Завершено))
	|	И (&БезОтбораПоДоступнымВидамНарядов
	|			ИЛИ ТрудозатратыКОформлению.ВидНаряда В (&МассивДоступныхВидовНарядов))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТрудозатратыКОформлению.КодСтрокиРаспоряжения,
	|	ТрудозатратыКОформлению.ВидРабот,
	|	ТрудозатратыКОформлению.Количество,
	|	ТрудозатратыКОформлению.Организация,
	|	ТрудозатратыКОформлению.Распоряжение,
	|	ТрудозатратыКОформлению.Бригада,
	|	ТрудозатратыКОформлению.Автораспределение,
	|	ТрудозатратыКОформлению.ВидНаряда,
	|	ТрудозатратыКОформлению.Подразделение,
	|	ТрудозатратыКОформлению.Статус,
	|	ТрудозатратыКОформлению.ГруппаПродукции,
	|	ТрудозатратыКОформлению.Расценка,
	|	ТрудозатратыКОформлению.Сумма,
	|	МаршрутныйЛистПроизводстваТрудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов
	|ИЗ
	|	ТрудозатратыКОформлению КАК ТрудозатратыКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.ВидыРабочихЦентров КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Ссылка = ТрудозатратыКОформлению.Распоряжение)
	|			И (МаршрутныйЛистПроизводства.ВидРабочегоЦентра В (&ВидыРабочихЦентров))
	|			И (Не &БезОтбораПоВидамРабочихЦентров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК МаршрутныйЛистПроизводстваТрудозатраты
	|		ПО (МаршрутныйЛистПроизводстваТрудозатраты.Ссылка = ТрудозатратыКОформлению.Распоряжение)
	|			И (МаршрутныйЛистПроизводстваТрудозатраты.КодСтроки = ТрудозатратыКОформлению.КодСтрокиРаспоряжения)
	|ГДЕ
	|	ТрудозатратыКОформлению.ВидНаряда = ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Производство)
	|	И ТрудозатратыКОформлению.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ)
	|	И (&БезОтбораПоВидамРабочихЦентров
	|			ИЛИ НЕ МаршрутныйЛистПроизводства.Ссылка ЕСТЬ NULL )
	|	И (&БезОтбораПоДоступнымВидамНарядов
	|			ИЛИ ТрудозатратыКОформлению.ВидНаряда В (&МассивДоступныхВидовНарядов))";
	
	ТаблицаТрудозатратыКОформлению = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТрудозатратыКОформлению;
	
КонецФункции

//-- НЕ УТКА

// Процедура заполняет табличную часть Сотрудники.
//
// Параметры:
//  Объект - ДокументОбъект.ВыработкаСотрудников или ДанныеФормыСтруктура - Данные документа
//  КлючСтроки - УникальныйИдентификатор - ключ строки таблицы ВидыРабот, если не задан, то рассчитываются все.
//
Процедура ЗаполнитьСотрудниковПоСоставуБригады(Объект, КлючСтроки = Неопределено, ЕстьДанныеДляЗаполнения = Неопределено) Экспорт
	
	СтруктураОтбора = Новый Структура;
	
	Если КлючСтроки = Неопределено Тогда
		Объект.Сотрудники.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ФормированиеСоставаБригады.НачалоПериода) КАК НачалоПериода
	|ПОМЕСТИТЬ НачалоДействияСостава
	|ИЗ
	|	Документ.ФормированиеСоставаБригады КАК ФормированиеСоставаБригады
	|ГДЕ
	|	ФормированиеСоставаБригады.НачалоПериода <= &Период
	|	И ФормированиеСоставаБригады.Бригада = &Бригада
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормированиеСоставаБригадыСотрудники.Сотрудник КАК Сотрудник,
	|	ФормированиеСоставаБригадыСотрудники.НормативныйКТУ КАК НормативныйКТУ
	|ИЗ
	|	Документ.ФормированиеСоставаБригады.Сотрудники КАК ФормированиеСоставаБригадыСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ФормированиеСоставаБригады КАК ФормированиеСоставаБригады
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачалоДействияСостава КАК НачалоДействияСостава
	|			ПО (НачалоДействияСостава.НачалоПериода = ФормированиеСоставаБригады.НачалоПериода)
	|		ПО ФормированиеСоставаБригадыСотрудники.Ссылка = ФормированиеСоставаБригады.Ссылка
	|ГДЕ
	|	ФормированиеСоставаБригады.Бригада = &Бригада";
	
	Период = КонецДня(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Бригада", Объект.Бригада);
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() И ЕстьДанныеДляЗаполнения <> Неопределено Тогда
		ЕстьДанныеДляЗаполнения = Ложь;
	КонецЕсли;
	
	Если Объект.Автораспределение Тогда
		
		Объект.Сотрудники.Загрузить(Результат.Выгрузить());
		
	Иначе
		
		Выборка = Результат.Выбрать();
		
		Для Каждого Строка из Объект.ВидыРабот Цикл
			
			Если КлючСтроки <> Неопределено и КлючСтроки <> Строка.КлючСтроки Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора.Вставить("КлючСтроки", Строка.КлючСтроки);
			
			НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаСотрудник из НайденныеСтроки Цикл
				Объект.Сотрудники.Удалить(СтрокаСотрудник);
			КонецЦикла;
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = Объект.Сотрудники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.КлючСтроки = Строка.КлючСтроки;
			КонецЦикла;
			
			Выборка.Сбросить();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

// Заполняет массивы реквизитов, зависимых от свойств документа
//
// Параметры:
//	ВидНаряда - ПеречислениеСсылка.ВидыБригадныхНарядов - вид бригадного наряда
//	ПоРаспоряжениям - Булево - признак оформления документа по распоряжениям
//	МассивВсехРеквизитов - Массив - реквизиты, которые зависят от свойств наряда
//	МассивРеквизитовОперации - Массив - реквизиты, которые используются при заданных свойствах наряда
//
Процедура ИменаРеквизитовПоВидуНаряда(ВидНаряда, ПоРаспоряжениям, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ВидыРабот.Распоряжение");
	МассивВсехРеквизитов.Добавить("ВидыРабот.КодСтрокиРаспоряжения");
	МассивВсехРеквизитов.Добавить("ВидыРабот.СтатьяКалькуляции");
	МассивВсехРеквизитов.Добавить("ВидыРабот.СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("ВидыРабот.АналитикаРасходов");
	МассивВсехРеквизитов.Добавить("ВидыРабот.ГруппаПродукции");
	МассивВсехРеквизитов.Добавить("ПодобратьПоРаспоряжениям");
	МассивВсехРеквизитов.Добавить("ЗаполнитьПоОстаткамКОформлению");
	МассивВсехРеквизитов.Добавить("ГруппаСтатьиРасходовВзносы");
	
	МассивРеквизитовОперации = Новый Массив;
	
	Если ВидНаряда = Перечисления.ВидыБригадныхНарядов.Производство И ПоРаспоряжениям Тогда
		
		МассивРеквизитовОперации.Добавить("ВидыРабот.Распоряжение");
		МассивРеквизитовОперации.Добавить("ВидыРабот.КодСтрокиРаспоряжения");
		МассивРеквизитовОперации.Добавить("ВидыРабот.СтатьяКалькуляции");
		МассивРеквизитовОперации.Добавить("ВидыРабот.ГруппаПродукции");
		МассивРеквизитовОперации.Добавить("ПодобратьПоРаспоряжениям");
		МассивРеквизитовОперации.Добавить("ЗаполнитьПоОстаткамКОформлению");
		
	ИначеЕсли ВидНаряда = Перечисления.ВидыБригадныхНарядов.Производство И Не ПоРаспоряжениям Тогда
		
		МассивРеквизитовОперации.Добавить("ВидыРабот.ГруппаПродукции");
		
	ИначеЕсли ВидНаряда = Перечисления.ВидыБригадныхНарядов.Ремонт Тогда
		
		МассивРеквизитовОперации.Добавить("ВидыРабот.Распоряжение");
		МассивРеквизитовОперации.Добавить("ВидыРабот.КодСтрокиРаспоряжения");
		МассивРеквизитовОперации.Добавить("ВидыРабот.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("ВидыРабот.АналитикаРасходов");
		МассивРеквизитовОперации.Добавить("ПодобратьПоРаспоряжениям");
		МассивРеквизитовОперации.Добавить("ЗаполнитьПоОстаткамКОформлению");
		МассивРеквизитовОперации.Добавить("ГруппаСтатьиРасходовВзносы");
		
	ИначеЕсли ВидНаряда = Перечисления.ВидыБригадныхНарядов.ПрочиеРаботы Тогда
		
		МассивРеквизитовОперации.Добавить("ВидыРабот.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("ВидыРабот.АналитикаРасходов");
		МассивРеквизитовОперации.Добавить("ГруппаСтатьиРасходовВзносы");
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие повторяющихся строк в табличной части документов "Формирование состава бригады" и "Выработка сотрудников"
//
// Параметры:
//	ТабличнаяЧастьСотрудники		- таблица значений - проверяемая таблица значений
//	ПроверкаВРазрезеКлючейСтрок		- булево - если Истина, то учитываются ключи строк
//	Отказ							- булево - устанавливается в значение Истина, если дубли найдены
//
Процедура ПроверитьДублированиеСтрокТабличнойЧасти(ТабличнаяЧастьСотрудники, ПроверкаВРазрезеКлючейСтрок = Ложь, Отказ) Экспорт
	
	МассивИсключений = Новый Массив;
	СтруктураОтбора = Новый Структура;
	
	Для Каждого Строка из ТабличнаяЧастьСотрудники Цикл
		
		Если МассивИсключений.Найти(Строка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Вставить("Сотрудник", Строка.Сотрудник);
		
		Если ПроверкаВРазрезеКлючейСтрок Тогда
			СтруктураОтбора.Вставить("КлючСтроки", Строка.КлючСтроки);
		КонецЕсли;
		
		НайденныеСтроки = ТабличнаяЧастьСотрудники.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			МассивИсключений.Добавить(Строка);
			
			Для сч = 1 по НайденныеСтроки.Количество() - 1 Цикл
				
				Дубль = НайденныеСтроки[сч];
				МассивИсключений.Добавить(Дубль);
				
				ТекстСообщения = НСтр("ru='Дублирующая запись в списке ""Сотрудники""';uk='Дублюючий запис у списку ""Співробітники""'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, , "Сотрудники[" + (Дубль.НомерСтроки -1) + "].Сотрудник", "Объект", Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Распределяет количества и суммы видов работ по исполнителям в документе Выработка сотрудников
//
Процедура РаспределитьРаботыПоКТУ(Объект) Экспорт
	
	КРаспределению = Объект.ВидыРабот.Итог("Сумма");
	
	ОбщийКТУ = Объект.Сотрудники.Итог("НормативныйКТУ");
	
	Распределено = 0;
	
	Если ОбщийКТУ = 0 Тогда
		БазаРаспределения = 0;
	Иначе
		БазаРаспределения = КРаспределению / ОбщийКТУ;
	КонецЕсли;
	
	ПорядковыйНомерПоследнегоСотрудника = Объект.Сотрудники.Количество();
	Сч = 1;
	Для Каждого СтрокаСотрудник из Объект.Сотрудники Цикл
		
		// Распределяем остаток на последнего сотрудника.
		Если Сч = ПорядковыйНомерПоследнегоСотрудника Тогда
			СтрокаСотрудник.Сумма = КРаспределению - Распределено;
		Иначе
			СтрокаСотрудник.Сумма = БазаРаспределения * СтрокаСотрудник.НормативныйКТУ;
		КонецЕсли;
		
		Распределено = Распределено + СтрокаСотрудник.Сумма;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		СтандартнаяОбработка = Ложь;
		Если ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников) И ПолучитьФункциональнуюОпцию("УправлениеПредприятием") Тогда
			ВыбраннаяФорма = "ФормаСпискаДокументов";
		Иначе
			ВыбраннаяФорма = "ФормаСписка";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Бригада КАК Бригада,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Подразделение КАК Подразделение,
	|	Реквизиты.КТУОбщий КАК КТУОбщий,
	|	Реквизиты.Автораспределение КАК Автораспределение,
	|	Реквизиты.Валюта КАК Валюта,
	|	Реквизиты.ВидНаряда КАК ВидНаряда,
	|	Реквизиты.ПоРаспоряжениям КАК ПоРаспоряжениям
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, Реквизиты.Валюта, Реквизиты.Дата);
	ПоказательРасчетаЗарплаты = РасчетЗарплатыРасширенный.ПоказательПоИдентификатору("СдельныйЗаработок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                          ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",                     Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",                   Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Период",                          КонецДня(Реквизиты.Дата));
	Запрос.УстановитьПараметр("Бригада",                         Реквизиты.Бригада);
	Запрос.УстановитьПараметр("Автораспределение",               Реквизиты.Автораспределение);
	Запрос.УстановитьПараметр("ВидНаряда",                       Реквизиты.ВидНаряда);
	Запрос.УстановитьПараметр("ПоРаспоряжениям",                 Реквизиты.ПоРаспоряжениям);
	Запрос.УстановитьПараметр("КТУОбщий",                        Реквизиты.КТУОбщий);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",  Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("ПоказательРасчетаЗарплаты",       ПоказательРасчетаЗарплаты);
	
КонецПроцедуры

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры);
	//++ НЕ УТКА
	ТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТКА
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Дата,
	|	Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	СУММА(Сотрудники.Сумма * &КоэффициентПересчетаВВалютуРегл) КАК Значение
	|ИЗ
	|	Документ.ВыработкаСотрудников.Сотрудники КАК Сотрудники
	|	
	|ГДЕ
	|	Сотрудники.Ссылка = &Ссылка
	|	И &ПоказательРасчетаЗарплаты <> Неопределено
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Сотрудник";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыНезавершенногоПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыНезавершенногоПроизводства";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	//++ НЕ УТКА
	|	ВЫРАЗИТЬ(ВыработкаСотрудниковВидыРабот.Распоряжение КАК Документ.МаршрутныйЛистПроизводства).Распоряжение КАК ЗаказНаПроизводство,
	|	ВЫРАЗИТЬ(ВыработкаСотрудниковВидыРабот.Распоряжение КАК Документ.МаршрутныйЛистПроизводства).КодСтроки КАК КодСтрокиПродукция,
	|	ВЫРАЗИТЬ(ВыработкаСотрудниковВидыРабот.Распоряжение КАК Документ.МаршрутныйЛистПроизводства).Этап КАК Этап,
	|	ВыработкаСотрудниковВидыРабот.СтатьяКалькуляции КАК СтатьяКалькуляции,
	//-- НЕ УТКА
	|	ВыработкаСотрудниковВидыРабот.ВидРабот КАК ВидРабот,
	|	ВыработкаСотрудниковВидыРабот.ГруппаПродукции,
	|	ВыработкаСотрудниковСотрудники.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА &Автораспределение
	|			ТОГДА ВыработкаСотрудниковСотрудники.НормативныйКТУ * ВыработкаСотрудниковВидыРабот.Количество / &КТУОбщий
	|		ИНАЧЕ ВыработкаСотрудниковСотрудники.Количество
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &Автораспределение
	|			ТОГДА ВыработкаСотрудниковСотрудники.НормативныйКТУ * ВыработкаСотрудниковВидыРабот.Сумма / &КТУОбщий
	|		ИНАЧЕ ВыработкаСотрудниковСотрудники.Сумма
	|	КОНЕЦ * &КоэффициентПересчетаВВалютуУПР КАК НормативнаяСтоимость,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ВыработкаСотрудниковВидыРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыработкаСотрудников.Сотрудники КАК ВыработкаСотрудниковСотрудники
	|		ПО (ВЫБОР
	|				КОГДА &Автораспределение
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВыработкаСотрудниковВидыРабот.КлючСтроки = ВыработкаСотрудниковСотрудники.КлючСтроки
	|			КОНЕЦ)
	|ГДЕ
	|	ВыработкаСотрудниковВидыРабот.Ссылка = &Ссылка
	|	И ВыработкаСотрудниковСотрудники.Ссылка = &Ссылка
	|	И &ВидНаряда = ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Производство)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТКА
Функция ТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТрудозатратыКОформлению";
	
	Если НЕ ПроведениеСервер.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Трудозатраты.Распоряжение КАК Распоряжение,
	|	Трудозатраты.ВидРабот КАК ВидРабот,
	|	&Бригада КАК Бригада,
	|	Трудозатраты.Количество КАК Количество,
	|	Трудозатраты.КодСтрокиРаспоряжения КАК КодСтрокиРаспоряжения
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК Трудозатраты
	|ГДЕ
	|	Трудозатраты.Ссылка = &Ссылка
	|	И &ПоРаспоряжениям";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТКА

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВыработкаСотрудников) Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ВыработкаСотрудников";
		КомандаПечати.Представление = НСтр("ru='Выработка сотрудников';uk='Виробіток співробітників'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВыработкаСотрудников") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ВыработкаСотрудников",
			НСтр("ru='Выработка сотрудников';uk='Виробіток співробітників'"),
			ПечатьВыработкиСотрудников(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьВыработкиСотрудников(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВыработкаСотрудников";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыработкаСотрудников.Ссылка КАК Ссылка,
	|	ВыработкаСотрудников.Дата КАК ДатаДокумента,
	|	ВыработкаСотрудников.Номер КАК НомерДокумента,
	|	ВыработкаСотрудников.Ответственный.ФизическоеЛицо КАК Менеджер,
	|	ВыработкаСотрудников.Автораспределение,
	|	ВыработкаСотрудников.Подразделение КАК Подразделение,
	|	ВыработкаСотрудников.Бригада КАК Бригада,
	|	ВыработкаСотрудников.Валюта КАК Валюта,
	|	ВыработкаСотрудников.ПоРаспоряжениям КАК ПоРаспоряжениям,
	|	ВЫБОР
	|		КОГДА ВыработкаСотрудников.Автораспределение
	|			ТОГДА ""Авто""
	|		ИНАЧЕ ""НеАвто""
	|	КОНЕЦ КАК СуффиксОбласти
	|ИЗ
	|	Документ.ВыработкаСотрудников КАК ВыработкаСотрудников
	|ГДЕ
	|	ВыработкаСотрудников.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВыработкаСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаСотрудниковВидыРабот.Ссылка КАК Ссылка,
	|	ВыработкаСотрудниковВидыРабот.НомерСтроки КАК НомерСтроки,
	|	ВыработкаСотрудниковВидыРабот.ВидРабот КАК ВидРабот,
	|	ВыработкаСотрудниковВидыРабот.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ВыработкаСотрудниковВидыРабот.Количество КАК Количество,
	|	ВыработкаСотрудниковВидыРабот.Расценка КАК Расценка,
	|	ВыработкаСотрудниковВидыРабот.Сумма КАК Сумма,
//++ НЕ УТКА
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Дата КАК РаспоряжениеДата,
//-- НЕ УТКА
	|	ВыработкаСотрудниковВидыРабот.ВидРабот.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
//++ НЕ УТКА
	|		КОГДА ВыработкаСотрудниковВидыРабот.Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|			ТОГДА &СинонимМаршрутногоЛиста
	|		КОГДА ВыработкаСотрудниковВидыРабот.Распоряжение ССЫЛКА Документ.ЗаказНаРемонт
	|			ТОГДА &СинонимЗаказаНаРемонт
//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА """"
	|	КОНЕЦ КАК ТипРаспоряжения
	|ИЗ
	|	Документ.ВыработкаСотрудников.ВидыРабот КАК ВыработкаСотрудниковВидыРабот
	|ГДЕ
	|	ВыработкаСотрудниковВидыРабот.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ВидРабот
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаСотрудниковСотрудники.Сотрудник.Код КАК СотрудникКод,
	|	ВыработкаСотрудниковСотрудники.Сотрудник.Наименование КАК СотрудникФИО,
	|	ВыработкаСотрудниковВидыРабот.ВидРабот КАК ВидРабот,
	|	ВЫБОР
	|		КОГДА ВыработкаСотрудниковСотрудники.Ссылка.Автораспределение
	|			ТОГДА ВыработкаСотрудниковСотрудники.НормативныйКТУ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормативныйКТУ,
	|	СУММА(ВыработкаСотрудниковСотрудники.Сумма) КАК Сумма,
	|	ВыработкаСотрудниковСотрудники.Ссылка КАК Ссылка,
//++ НЕ УТКА
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Дата КАК РаспоряжениеДата,
//-- НЕ УТКА
	|	ВЫБОР
//++ НЕ УТКА
	|		КОГДА ВыработкаСотрудниковВидыРабот.Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|			ТОГДА &СинонимМаршрутногоЛиста
	|		КОГДА ВыработкаСотрудниковВидыРабот.Распоряжение ССЫЛКА Документ.ЗаказНаРемонт
	|			ТОГДА &СинонимЗаказаНаРемонт
//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА """"
	|	КОНЕЦ КАК ТипРаспоряжения,
	|	ВыработкаСотрудниковСотрудники.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ВыработкаСотрудников.Сотрудники КАК ВыработкаСотрудниковСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыработкаСотрудников.ВидыРабот КАК ВыработкаСотрудниковВидыРабот
	|		ПО ВыработкаСотрудниковСотрудники.Ссылка = ВыработкаСотрудниковВидыРабот.Ссылка
	|			И (ВЫБОР
	|				КОГДА НЕ ВыработкаСотрудниковСотрудники.Ссылка.Автораспределение
	|					ТОГДА ВыработкаСотрудниковСотрудники.КлючСтроки = ВыработкаСотрудниковВидыРабот.КлючСтроки
	|			КОНЕЦ)
	|ГДЕ
	|	ВыработкаСотрудниковСотрудники.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаСотрудниковСотрудники.Сотрудник.Код,
	|	ВыработкаСотрудниковСотрудники.Сотрудник.Наименование,
	|	ВыработкаСотрудниковВидыРабот.ВидРабот,
	|	ВыработкаСотрудниковСотрудники.Ссылка,
	|	ВЫБОР
	|		КОГДА ВыработкаСотрудниковСотрудники.Ссылка.Автораспределение
	|			ТОГДА ВыработкаСотрудниковСотрудники.НормативныйКТУ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
//++ НЕ УТКА
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Номер,
	|	ВыработкаСотрудниковВидыРабот.Распоряжение.Дата,
//-- НЕ УТКА
	|	ВЫБОР
//++ НЕ УТКА
	|		КОГДА ВыработкаСотрудниковВидыРабот.Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|			ТОГДА &СинонимМаршрутногоЛиста
	|		КОГДА ВыработкаСотрудниковВидыРабот.Распоряжение ССЫЛКА Документ.ЗаказНаРемонт
	|			ТОГДА &СинонимЗаказаНаРемонт
//-- НЕ УТКА
	|		КОГДА ИСТИНА
	|			ТОГДА """"
	|	КОНЕЦ,
	|	ВыработкаСотрудниковСотрудники.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникФИО
	|ИТОГИ
	|	МАКСИМУМ(СотрудникФИО),
	|	СУММА(Сумма)
	|ПО
	|	Ссылка,
	|	СотрудникКод";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	//++ НЕ УТКА
	Запрос.УстановитьПараметр("СинонимМаршрутногоЛиста", НСтр("ru='Маршрутный лист';uk='Маршрутний лист'"));
	Запрос.УстановитьПараметр("СинонимЗаказаНаРемонт", НСтр("ru='Заказ на ремонт';uk='Замовлення на ремонт'"));
	//-- НЕ УТКА
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результат[0].Выбрать();
	ВыборкаПоВидамРабот = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоСотрудникам = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ВыработкаСотрудников.ПФ_MXL_ВыработкаСотрудников");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьИмяТаблицыВидовРабот = Макет.ПолучитьОбласть("ИмяТаб_ВыполненныеРаботы");
	
	ОбластьЗаголовокТаблицыВидовРабот = Макет.ПолучитьОбласть("ЗаголовокТаб_ВыполненныеРаботы");
	ОбластьСтрокаТаблицыВидовРабот = Макет.ПолучитьОбласть("Строка_ВыполненныеРаботы");
	
	ОбластьЗаголовокТаблицыВидовРаботБезЗаказа = Макет.ПолучитьОбласть("ЗаголовокТаб_ВыполненныеРаботы_БезЗаказа");
	ОбластьСтрокаТаблицыВидовРаботБезЗаказа = Макет.ПолучитьОбласть("Строка_ВыполненныеРаботы_БезЗаказа");
	
	ОбластьИтогТаблицыВидовРабот = Макет.ПолучитьОбласть("Итог_ВыполненныеРаботы");
	
	ОбластьИмяТаблицыСотрудники = Макет.ПолучитьОбласть("ИмяТаб_Сотрудники");
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		// Таблица Выполненные работы.
		Если Не ВыборкаПоВидамРабот.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоВидамРабот.Выбрать();
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка.Параметры.Заполнить(ВыборкаПоДокументам);
		ОбластьШапка.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоДокументам.НомерДокумента, Ложь, Истина);
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьИмяТаблицыВидовРабот);
		
		Если ВыборкаПоДокументам.ПоРаспоряжениям Тогда
			ОбластьЗаголовокТаблицыВидовРабот.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыВидовРабот);
		Иначе
			ОбластьЗаголовокТаблицыВидовРаботБезЗаказа.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыВидовРаботБезЗаказа);
		КонецЕсли;
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			Если ВыборкаПоДокументам.ПоРаспоряжениям Тогда
				
				ОбластьСтрокаТаблицыВидовРабот.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				//++ НЕ УТКА
				ОбластьСтрокаТаблицыВидовРабот.Параметры.РаспоряжениеНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаПоСтрокамТЧ.РаспоряжениеНомер, Ложь, Истина);
				ОбластьСтрокаТаблицыВидовРабот.Параметры.РаспоряжениеДата = Формат(ВыборкаПоСтрокамТЧ.РаспоряжениеДата, "ДФ=dd.MM.yyyy");
				//-- НЕ УТКА
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыВидовРабот);
				
			Иначе
				ОбластьСтрокаТаблицыВидовРаботБезЗаказа.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыВидовРаботБезЗаказа);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьИтогТаблицыВидовРабот.Параметры.Заполнить(ВыборкаПоВидамРабот);
		ТабличныйДокумент.Вывести(ОбластьИтогТаблицыВидовРабот);
		
		// Таблица Сотрудники.
		Если Не ВыборкаПоСотрудникам.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьЗаголовокТаблицыСотрудники = Макет.ПолучитьОбласть("ЗаголовокТаб_Сотрудники_" + ВыборкаПоДокументам.СуффиксОбласти);
		ОбластьСтрокаТаблицыСотрудники = Макет.ПолучитьОбласть("Строка_Сотрудники_" + ВыборкаПоДокументам.СуффиксОбласти);
		ОбластьИтогТаблицыСотрудники = Макет.ПолучитьОбласть("Итог_Сотрудники_" + ВыборкаПоДокументам.СуффиксОбласти);
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоСотрудникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТабличныйДокумент.Вывести(ОбластьИмяТаблицыСотрудники);
		
		ОбластьЗаголовокТаблицыСотрудники.Параметры.Заполнить(ВыборкаПоДокументам);
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыСотрудники);
		
		НомерСтроки = 1;
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			Выборка = ВыборкаПоСтрокамТЧ.Выбрать();
			ВывестиОбластьИтогТаблицыСотрудник = Ложь;
			
			Если Не ВыборкаПоДокументам.Автораспределение Тогда
				
				ОбластьИтогТаблицыСотрудник = Макет.ПолучитьОбласть("Итог_Сотрудник_" + ВыборкаПоДокументам.СуффиксОбласти);
				ОбластьИтогТаблицыСотрудник.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ОбластьИтогТаблицыСотрудник.Параметры.НомерСтроки = НомерСтроки;
				НомерСтроки = НомерСтроки + 1;
				ВывестиОбластьИтогТаблицыСотрудник = Истина;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Если ВывестиОбластьИтогТаблицыСотрудник Тогда
					
					ОбластьИтогТаблицыСотрудник.Параметры.Заполнить(Выборка);
					
					//++ НЕ УТКА
					Если Не ВыборкаПоДокументам.Автораспределение Тогда
						ОбластьИтогТаблицыСотрудник.Параметры.РаспоряжениеНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.РаспоряжениеНомер, Ложь, Истина);
						ОбластьИтогТаблицыСотрудник.Параметры.РаспоряжениеДата = Формат(Выборка.РаспоряжениеДата, "ДФ=dd.MM.yyyy");
					КонецЕсли;
					//-- НЕ УТКА
					
					ТабличныйДокумент.Вывести(ОбластьИтогТаблицыСотрудник);
					
					ВывестиОбластьИтогТаблицыСотрудник = Ложь;
					
				Иначе
					
					ОбластьСтрокаТаблицыСотрудники.Параметры.Заполнить(Выборка);
					
					//++ НЕ УТКА
					Если Не ВыборкаПоДокументам.Автораспределение Тогда
						ОбластьСтрокаТаблицыСотрудники.Параметры.РаспоряжениеНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.РаспоряжениеНомер, Ложь, Истина);
						ОбластьСтрокаТаблицыСотрудники.Параметры.РаспоряжениеДата = Формат(Выборка.РаспоряжениеДата, "ДФ=dd.MM.yyyy");
					КонецЕсли;
					//-- НЕ УТКА
					
					ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыСотрудники);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбластьИтогТаблицыСотрудники.Параметры.Заполнить(ВыборкаПоСотрудникам);
		ТабличныйДокумент.Вывести(ОбластьИтогТаблицыСотрудники);
		
		ОбластьПодвал.Параметры.Заполнить(ВыборкаПоДокументам);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел()
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	//++ НЕ УТКА
	
	ИмяФормы = "Документ.ВыработкаСотрудников.Форма.ФормаСписка";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ВыработкаСотрудников))
		И ПравоДоступа("Добавление", Метаданные.Документы.ВыработкаСотрудников)
		И ПравоДоступа("Чтение",     Метаданные.РегистрыНакопления.ТрудозатратыКОформлению)
		И НЕ ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК ВыработкаСотрудниковТрудозатратыКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТрудозатратыКОформлению.ВидРабот КАК ВидРабот,
	|		ТрудозатратыКОформлению.Организация КАК Организация,
	|		ТрудозатратыКОформлению.Бригада КАК Бригада,
	|		ВЫБОР
	|			КОГДА ТрудозатратыКОформлению.Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Производство)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт)
	|		КОНЕЦ КАК ВидНаряда,
	|		ТрудозатратыКОформлению.Бригада.Подразделение КАК Подразделение
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыКОформлению.Остатки(, ) КАК ТрудозатратыКОформлению
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ТрудозатратыКОформлению.Распоряжение ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Производство)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыБригадныхНарядов.Ремонт)
	|		КОНЕЦ,
	|		ТрудозатратыКОформлению.Бригада,
	|		ТрудозатратыКОформлению.ВидРабот,
	|		ТрудозатратыКОформлению.Организация,
	|		ТрудозатратыКОформлению.Бригада.Подразделение) КАК ВложенныйЗапрос";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ВыработкаСотрудников
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ВыработкаСотрудников";
	ДелоРодитель.Представление  = НСтр("ru='Выработка сотрудников';uk='Виробіток співробітників'");
	ДелоРодитель.ЕстьДела       = Результат.ВыработкаСотрудниковТрудозатратыКОформлению > 0;
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Производство;
	
	// ВыработкаСотрудниковТрудозатратыКОформлению
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Бригада", Справочники.Бригады.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ВидНаряда", Перечисления.ВидыБригадныхНарядов.ПустаяСсылка());
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "ГруппаТрудозатратыКОформлению");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыработкаСотрудниковТрудозатратыКОформлению";
	Дело.ЕстьДела       = Результат.ВыработкаСотрудниковТрудозатратыКОформлению > 0;
	Дело.Представление  = НСтр("ru='Трудозатраты к оформлению';uk='Трудовитрати до оформлення'");
	Дело.Количество     = Результат.ВыработкаСотрудниковТрудозатратыКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыработкаСотрудников";
	
	//-- НЕ УТКА
	
	Возврат; // в КА обработчик пустой.
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#Область Обработчики_2_1_2

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
