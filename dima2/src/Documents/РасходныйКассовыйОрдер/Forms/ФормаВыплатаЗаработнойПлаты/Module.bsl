
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВыплатаЗаработнойПлаты.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресЗарплатаВХранилище));
	
	Ведомость = Параметры.Ведомость;
	ДокументОплаты = Параметры.ДокументОплаты;
	Организация = Параметры.Организация;
	Работник = Параметры.Работник;
	ОтборПоРаботнику = Параметры.ОтборПоРаботнику;	
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	
	Если ИспользоватьНачислениеЗарплаты Тогда
		//++ НЕ УТ
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Зарплата.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Зарплата
		|ГДЕ
		|	Зарплата.Ссылка = &Ведомость
		|   И (НЕ &ОтборПоРаботнику ИЛИ Зарплата.Сотрудник.ФизическоеЛицо = &Работник)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Зарплата.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Зарплата
		|ГДЕ
		|	Зарплата.Ссылка = &Ведомость
		|   И (НЕ &ОтборПоРаботнику ИЛИ Зарплата.Сотрудник.ФизическоеЛицо = &Работник)
		|");
		Запрос.УстановитьПараметр("Ведомость", Ведомость);
		Запрос.УстановитьПараметр("Работник", Работник);
		Запрос.УстановитьПараметр("ОтборПоРаботнику", ОтборПоРаботнику);
		
		МассивРаботников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивРаботников)));
		
		Элементы.ВыплатаЗаработнойПлатыРаботник.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		//-- НЕ УТ
		
		ТекстИнструкции = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Доступны для добавления физические лица из документа %1.';uk='Доступні для додавання фізичні особи з документа %1.'"),
			Ведомость);
			
		Элементы.ДекорацияИнструкция.Заголовок = ТекстИнструкции;
		Элементы.ДекорацияИнструкция.Видимость = Истина;
		Элементы.ВыплатаЗаработнойПлатыЗаполнитьПоОстаткам.Видимость = Истина;
		Элементы.ВыплатаЗаработнойПлатыСумма.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ОП = Новый ОписаниеОповещения("ПеренестиДанныеЗавершение", ЭтаФорма, Новый Структура("Отказ", Отказ));
		
		ПоказатьВопрос(ОП, НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Отказ = ДополнительныеПараметры.Отказ;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПеренестиДанные(Отказ);
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыРаботникПриИзменении(Элемент)
	
	//++ НЕ УТ
	Если ИспользоватьНачислениеЗарплаты Тогда
		ТекущиеДанные = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
		СуммаКВыплате = СуммаКВыплатеПоВедомости(Ведомость, ТекущиеДанные.ФизическоеЛицо);
		ТекущиеДанные.Сумма = СуммаКВыплате.Сумма;
		ТекущиеДанные.ГруппаУчетаНачислений = СуммаКВыплате.ГруппаУчетаНачислений;
	КонецЕсли;
	//-- НЕ УТ
	
	Возврат // в УТ пустой
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыплатаЗаработнойПлаты

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыПриИзменении(Элемент)
	ФормаМодифицирована = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	//++ НЕ УТ
	Если ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
		
		КодОтвета = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект), НСтр("ru='Табличная часть будет очищена, продолжить?';uk='Таблична частина буде очищена, продовжити?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоОстаткамФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КодОтвета = РезультатВопроса;
    Если КодОтвета = КодВозвратаДиалога.Нет Тогда
        
        Модифицированность = ФормаМодифицирована;
        Возврат;
        
    КонецЕсли;
    
    
    ЗаполнитьПоОстаткамФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамФрагмент()
    
    ФормаМодифицирована = Истина;
    ЗаполнитьПоОстаткамНаСервере();
    //-- НЕ УТ
    
    Возврат // в УТ пустой

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ПеренестиДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиенте
Процедура ПеренестиДанные(Отказ = Ложь)
	
	ОчиститьСообщения();
	
	СписокПолучателейПлатежей = Новый СписокЗначений;
	Для Индекс = 0 По ВыплатаЗаработнойПлаты.Количество() - 1 Цикл
		
		Строка = ВыплатаЗаработнойПлаты[Индекс];
		
		Если НЕ ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В строке %1 не заполнен сотрудник.';uk='У рядку %1 не заповнено співробітника.'"),
				Индекс + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыплатаЗаработнойПлаты", Индекс + 1, "ФизическоеЛицо"),
					,
					Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.Сумма) Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В строке %1 не заполнена сумма.';uk='У рядку %1 не заповнена сума.'"),
				Индекс + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыплатаЗаработнойПлаты", Индекс + 1, "Сумма"),
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		Модифицированность = Ложь;
		ОповеститьОВыборе(ПоместитьВыплатаЗаработнойПлатыВХранилище());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВыплатаЗаработнойПлатыВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ВыплатаЗаработнойПлаты.Выгрузить());
	
КонецФункции

//++ НЕ УТ

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивВедомостей", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ведомость));
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ИсключаемыйДокументОплаты", ДокументОплаты);
	СтруктураПараметров.Вставить("ИсключатьОплаченные", Истина);
	СтруктураПараметров.Вставить("ОтображатьДепонированные", Истина);
	Если ОтборПоРаботнику Тогда
		СтруктураПараметров.Вставить("Работник", Работник);
		СтруктураПараметров.Вставить("ВсеПоРаботнику", Истина);
	КонецЕсли;		
	
	ВыплатаЗаработнойПлаты.Загрузить(ДенежныеСредстваСервер.ДанныеРаботниковПоВедомостям(СтруктураПараметров));
	
КонецПроцедуры

&НаСервере
Функция СуммаКВыплатеПоВедомости(Ведомость, РаботникВыбора)
	
	Если НЕ ЗначениеЗаполнено(РаботникВыбора) Тогда
		
		Возврат Новый Структура("ГруппаУчетаНачислений, Сумма", Неопределено, 0);
		
	Иначе
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("МассивВедомостей", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ведомость));
		СтруктураПараметров.Вставить("Организация", Организация);
		СтруктураПараметров.Вставить("ДокументОплаты", ДокументОплаты);
		СтруктураПараметров.Вставить("ИсключатьОплаченные", Истина);
		СтруктураПараметров.Вставить("ОтображатьДепонированные", Истина);
		СтруктураПараметров.Вставить("Работник", РаботникВыбора);
		Отбор = Новый Структура;
	    Отбор.Вставить("ФизическоеЛицо", РаботникВыбора);
	    СтруктураПараметров.Вставить("СписокГрупп", ВыплатаЗаработнойПлаты.Выгрузить().Скопировать(Отбор).ВыгрузитьКолонку("ГруппаУчетаНачислений"));

		
		Возврат ДенежныеСредстваСервер.ДанныеРаботниковПоВедомостям(СтруктураПараметров);
		
	КонецЕсли;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#КонецОбласти
