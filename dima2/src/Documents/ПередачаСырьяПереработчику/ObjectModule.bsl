#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеУсловийПродаж

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//******************************************************************************
	// Валюта
	
	Валюта = УсловияПродаж.Валюта;
	
	//******************************************************************************
	// Организация и банковский счет организации
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И Не ЗначениеЗаполнено(Организация) Тогда
		
		Организация = УсловияПродаж.Организация;
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    		= Организация;

		БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
	//******************************************************************************
	// Контрагент
	
	Если Не УсловияПродаж.Типовое Тогда
		
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) И УсловияПродаж.Контрагент <> Контрагент Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	//******************************************************************************
	// Контактное лицо
	
	Если Не УсловияПродаж.Типовое Тогда
		
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) И Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	//******************************************************************************
	// Договор и Банковские счета
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика;
		Параметрыобъекта = ПараметрыОбъектаССоглашением();
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Параметрыобъекта, ХозяйственнаяОперацияДоговора);
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	//******************************************************************************
	// Склад и ответственные
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) И Не ЗначениеЗаполнено(Склад) Тогда
		
		Склад = УсловияПродаж.Склад;
		
		МестоСоставленияДокумента = ПродажиСервер.ПолучитьМестоСоставленияДокумента(Метаданные().Имя, Менеджер, Склад);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ПараметрыОтбора = Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение, ХозяйственнаяОперация", 
			Истина, 
			Справочники.СоглашенияСКлиентами.ПустаяСсылка(), 
			ХозяйственнаяОперация);
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			ПараметрыОтбора);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение) Тогда
				
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
				
				СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
				СтруктураПараметров.Организация    		= Организация;
				СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;

				БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
				
			КонецЕсли;
			
		Иначе
			
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	// Доставка
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Партнер);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Функция формирует временные данных документа
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Дата                                                     КАК Дата,
	|	&Организация                                              КАК Организация,
	|	Неопределено                                              КАК Партнер,
	|	Неопределено                                              КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)    КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                  КАК Валюта,
	|	&ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                              КАК НалоговоеНазначение,
	|	&НалоговоеНазначениеОрганизации                           КАК НалоговоеНазначениеОрганизации,
	|	Ложь                                                      КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Подразделение,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Менеджер,
	|
	|	ВЫБОР КОГДА СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке
	|			И &ФормироватьВидыЗапасовПоСделкам ТОГДА
	|		&Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Сделка
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|	ПО
	|		СделкиСКлиентами.Ссылка = &Сделка
	|
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура               КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика             КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	ТаблицаТоваров.Назначение 				  КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество                 КАК Количество,
	|	ТаблицаТоваров.Склад                      КАК Склад,
	|	ТаблицаТоваров.Сумма                      КАК Сумма,
	|	ТаблицаТоваров.ДокументРеализации         КАК ДокументРеализации,
	|	&Сделка                                   КАК Сделка,
	|	ТаблицаТоваров.ЗаказПереработчику         КАК Заказ,
	|	ТаблицаТоваров.КодСтроки                  КАК КодСтроки
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.Серия                          КАК Серия,
	|	ТаблицаТоваров.Назначение				  	  КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ТаблицаТоваров.Склад                          КАК Склад,
	|	ТаблицаТоваров.Заказ                          КАК ЗаказПереработчику,
	|	ТаблицаТоваров.КодСтроки                      КАК КодСтроки,
	|	ТаблицаТоваров.ДокументРеализации             КАК ДокументРеализации,
	|	ТаблицаТоваров.Сумма                          КАК Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ЕСТЬNULL(ЗаказПереработчику.НалоговоеНазначение, ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка)) КАК ЦелевоеНалоговоеНазначение,
	|	0                                             КАК СуммаСНДС,
	|	0                                             КАК СуммаНДС,
	|	0                                             КАК СуммаВознаграждения,
	|	0                                             КАК СуммаНДСВознаграждения,
	|	&Сделка                                       КАК Сделка,
	|	ИСТИНА                                        КАК ПодбиратьВидыЗапасов
	|	
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|	ПО
	|		ЗаказПереработчику.Ссылка = ТаблицаТоваров.Заказ
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                 КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                  КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ДокументРеализации          КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.НомерГТД                    КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)       КАК СкладОтгрузки,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)  КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.ЗаказПереработчику          КАК ЗаказПереработчику,
	|	ТаблицаВидыЗапасов.ЗалоговаяСтоимость          КАК ЗалоговаяСтоимость,
	|	ТаблицаВидыЗапасов.КодСтроки                   КАК КодСтроки,
	|	&Сделка                                        КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество                  КАК Количество,
	|	&ВидыЗапасовУказаныВручную                     КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВТВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Аналитика.Номенклатура							КАК Номенклатура,
	|	Аналитика.Характеристика						КАК Характеристика,
	|	Аналитика.Серия									КАК Серия,
	|	Аналитика.Склад									КАК Склад,
	|	ТаблицаВидыЗапасов.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ДокументРеализации			КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД						КАК НомерГТД,
	|	ТаблицаВидыЗапасов.СтавкаНДС					КАК СтавкаНДС,
	|	ТаблицаВидыЗапасов.СкладОтгрузки				КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.ЗаказПереработчику			КАК ЗаказПереработчику,
	|	ТаблицаВидыЗапасов.ЗалоговаяСтоимость			КАК ЗалоговаяСтоимость,
	|	ТаблицаВидыЗапасов.КодСтроки					КАК КодСтроки,
	|	ТаблицаВидыЗапасов.Сделка						КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество					КАК Количество,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную	КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВТВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВидыЗапасов
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",                          Ссылка);
	Запрос.УстановитьПараметр("Дата",                            Дата);
	Запрос.УстановитьПараметр("Организация",                     Организация);
	Запрос.УстановитьПараметр("Менеджер",                        Менеджер);
	Запрос.УстановитьПараметр("Подразделение",                   Подразделение);
	Запрос.УстановитьПараметр("Сделка",                          Сделка);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",           ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ПередачаПоЗаказам",               ПередачаПоЗаказам);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную",       ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("РеализацияПоНесколькимЗаказам",   ПередачаПоЗаказам И Не ЗначениеЗаполнено(ЗаказПереработчику));
	Запрос.УстановитьПараметр("ТаблицаТоваров",                  ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(Товары.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",              ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	Запрос.УстановитьПараметр("НалоговоеНазначениеОрганизации",  НДСОбщегоНазначенияСервер.ПолучитьНалоговоеНазначениеНДС(Организация, Неопределено, Дата, Истина));
	
	Запрос.Выполнить();
	
	Если ВидыЗапасовУказаныВручную Тогда
		ДополнительныеСвойства.Вставить("ИгнорироватьОперативныеОстатки", Истина);
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ЗаказыСервер.ПроверитьДатуРаспоряжения(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	СуммаДокумента = Товары.Итог("Сумма");
	
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(
		ЭтотОбъект,
		НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаСырьяПереработчику));
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи);
		
	Если ПередачаПоЗаказам И ЗначениеЗаполнено(ЗаказПереработчику) Тогда
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказПереработчику) Тогда
				ТекСтрока.ЗаказПереработчику = ЗаказПереработчику;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		СкладГруппа = Справочники.Склады.ЭтоГруппа(Склад);
		Если Не СкладГруппа Тогда
			СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Товары, Ложь);
		КонецЕсли;
		
		МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
			Перечисления.ХозяйственныеОперации.ПередачаПереработчику,
			Склад,
			Подразделение,
			Партнер);
		
		// Если Склад - группа, то для аналитики учета номенклатуры склад берем из ТЧ
		ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
		Если Склад.ЭтоГруппа И Склад.ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных Тогда
			ИменаПолей.Вставить("Произвольный", "Склад");
		КонецЕсли;
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(
			Товары,
			МестаУчета,
			ИменаПолей);
		
		ЗаполнитьВидыЗапасов(Отказ);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Перем СкладОтгрузки;
	Перем РеквизитыШапки;
	Перем ВариантОформления;
	Перем ПараметрыОформления;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ЗаполненНаОснованииДокумента = Ложь;
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		// Заполнение из формы списка распоряжений.
		Если ДанныеЗаполнения.Свойство("ДокументОснование")
			И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПереработчику") 
				Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив")) Тогда
			
			// Если передан склад - необходимо заполнять товары только по указанном складу.
			ДанныеЗаполнения.Свойство("СкладОтгрузки", СкладОтгрузки);
			ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
			ДанныеЗаполнения.Свойство("ВариантОформленияПродажи", ВариантОформления);
			ДанныеЗаполнения.Свойство("ПараметрыОформления", ПараметрыОформления);
			
			ЗаполнитьНаОснованииЗаказаПереработчика(ДанныеЗаполнения.ДокументОснование,
				СкладОтгрузки, РеквизитыШапки, ВариантОформления, ПараметрыОформления);
			
			ЗаполненНаОснованииДокумента = Ложь;
			
		Иначе

			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);

		КонецЕсли;

	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		
		Дата = ЗаказыСервер.ПолучитьМинимальнуюДатуОтгрузкиЗаказа(ДанныеЗаполнения);
		ЗаполнитьНаОснованииЗаказаПереработчика(ДанныеЗаполнения, СкладОтгрузки, ,ВариантОформления);
		ЗаполненНаОснованииДокумента = Истина;
		
	КонецЕсли;
	
	Если Не ЗаполненНаОснованииДокумента Тогда
		ИнициализироватьУсловияПродаж();
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);

	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Склад, СкладГруппа, Товары, Ложь);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаСырьяПереработчику);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий,	Отказ, МассивНепроверяемыхРеквизитов);
	
	Для ТекИндекс = 0 По Товары.Количество() - 1 Цикл
		
		Если ПередачаПоЗаказам И
			Не ЗначениеЗаполнено(ЗаказПереработчику) И
			Не ЗначениеЗаполнено(Товары[ТекИндекс].ЗаказПереработчику) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Заказ переработчику"" в строке %НомерСтроки% списка ""Сырье и материалы""';uk='Не заповнено поле ""Замовлення переробнику"" в рядку %НомерСтроки% списку ""Сировина і матеріали""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ЗаказПереработчику"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ВернутьМногооборотнуюТару Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВозвратаМногооборотнойТары");
	КонецЕсли;
	
	Если Не НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НаправлениеДеятельности");
	КонецЕсли;
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПередачаПоЗаказам);
	
	Если ЗначениеЗаполнено("ДатаВозвратаМногооборотнойТары") И ВернутьМногооборотнуюТару И ДатаВозвратаМногооборотнойТары < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата возврата многооборотной тары не должна быть меньше даты документа.';uk='Дата повернення багатооборотної тари не повинна бути менша дати документа.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаВозвратаМногооборотнойТары",
			,
			Отказ);
		
	КонецЕсли;
	
	// Код строки должен быть заполнен, если реализация по заказу
	Если Не ПередачаПоЗаказам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект,Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ПередачаСырьяПереработчику.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПереданныеПереработчику(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьПартииПроизводственныхЗатрат(ДополнительныеСвойства, Движения, Отказ);
	МногооборотнаяТараСервер.ОтразитьПереданнуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);	
	
	// Движения по оборотным регистрам управленческого учета 
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураНоменклатура(ДополнительныеСвойства, Движения, Отказ);
	
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);
	
	// Контроль и запись движений
	СформироватьСписокРегистровДляКонтроля();
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ, Истина);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Согласован            = Ложь;
	ЗаказПереработчику    = Неопределено;
	ХозяйственнаяОперация = Метаданные.Документы.ПередачаСырьяПереработчику.Реквизиты.ХозяйственнаяОперация.ЗначениеЗаполнения;
	ПередачаПоЗаказам     = Ложь;
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		ТекСтрока.ЗаказПереработчику = Неопределено;
		ТекСтрока.КодСтроки = 0;
		
	КонецЦикла;
	
	Серии.Очистить();
	ВидыЗапасов.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ТранспортнаяНакладная.АктуализироватьТранспортныеНакладные(Ссылка, Проведен, ПометкаУдаления);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Префикс = ОбщегоНазначенияУТПовтИсп.ДополнительныйПрефиксНумератораДокументыРеализацииТоваров();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)

	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
			ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВариантОформленияПродажи") Тогда
		ВариантОформленияПродажи = ДанныеЗаполнения.ВариантОформленияПродажи;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНаОснованииЗаказаПереработчика(Знач ДокументОснование,
	                                                Знач СкладОтгрузки = Неопределено,
	                                                РеквизитыЗаказа = Неопределено,
	                                                ВариантОформления = Неопределено,
	                                                ПараметрыОформления = Неопределено)
	ТипОснования = ТипЗнч(ДокументОснование);
	ЗаполнятьПоОстаткам = Ложь;
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК ЗаказПереработчику,
		|	ТаблицаДокумента.Партнер КАК Партнер,
		|	ТаблицаДокумента.Контрагент КАК Контрагент,
		|	ТаблицаДокумента.КонтактноеЛицо КАК КонтактноеЛицо,
		|	ТаблицаДокумента.Договор КАК Договор,
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.ФормаОплаты КАК ФормаОплаты,
		|	ТаблицаДокумента.Сделка КАК Сделка,
		|	ТаблицаДокумента.Валюта КАК Валюта,
		|	ТаблицаДокумента.ГрафикОплаты КАК ГрафикОплаты,
		|	ТаблицаДокумента.Подразделение КАК Подразделение,
		|	ТаблицаДокумента.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ТаблицаДокумента.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
		|	ТаблицаДокумента.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ОрдернаяСхемаПриОтгрузке,
		|	ТаблицаДокумента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ТаблицаДокумента.Статус КАК СтатусДокумента,
		|	НЕ ТаблицаДокумента.Проведен КАК ЕстьОшибкиПроведен,
		|	ИСТИНА КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ТаблицаДокумента.БанковскийСчет КАК БанковскийСчетОрганизации,
		|	ТаблицаДокумента.Грузоотправитель КАК Грузоотправитель,
		|	ТаблицаДокумента.Грузополучатель КАК Грузополучатель,
		|	ТаблицаДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	ТаблицаДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		|	ТаблицаДокумента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ТаблицаДокумента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ТаблицаДокумента.АдресДоставки КАК АдресДоставки,
		|	ТаблицаДокумента.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ТаблицаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ТаблицаДокумента.СпособДоставки
		|	КОНЕЦ                                       КАК СпособДоставки,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ТаблицаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ТаблицаДокумента.ПеревозчикПартнер
		|	КОНЕЦ                                       КАК ПеревозчикПартнер,
		|
		|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
		|		И ТаблицаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
		|		ТаблицаДокумента.ДополнительнаяИнформацияПоДоставке
		|	КОНЕЦ                                       КАК ДополнительнаяИнформацияПоДоставке,
		|	ТаблицаДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
		|	ТаблицаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказПереработчику КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &ЗаказПереработчику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЗаказыОстатки.Склад), ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ЗаказПереработчику) КАК ЗаказыОстатки";
	
		Запрос.УстановитьПараметр("ЗаказПереработчику", ДокументОснование);
		Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
			ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();

		СкладыЗаказа = РезультатЗапроса[1].Выбрать();
		СкладыЗаказа.Следующий();
		Склад = СкладыЗаказа.Склад;
		
		Документы.ЗаказПереработчику.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказПереработчику,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен);
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ЭтотОбъект,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			Ложь,
			Неопределено);
			
		МассивСкладов = Новый Массив;
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчет;
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ЭтотОбъект,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			Ложь,
			Неопределено);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация    		= Организация;
			СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;

			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		КонецЕсли;
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказыОстатки.Склад КАК Склад
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента В (&МассивДокументов)) КАК ЗаказыОстатки";
			
			РезультатЗапросаПоСкладам = Запрос.Выполнить();
			МассивСкладов = РезультатЗапросаПоСкладам.Выгрузить().ВыгрузитьКолонку("Склад");
			Склад = РеквизитыЗаказа.СкладОтгрузки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПередачаПоЗаказам = Истина;
	
	// Заполнение т.ч. товары.
	Если Не ЗначениеЗаполнено(СкладОтгрузки) Тогда
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			// Только услуги
			Если МассивСкладов.Количество() = 0 Тогда
				ЗаполнятьПоОстаткам = Истина;
			// Услуги или товары
			ИначеЕсли МассивСкладов.Количество() = 1 Тогда
				СкладОтгрузки = МассивСкладов[0];
				Склад = СкладОтгрузки;
				ЗаполнятьПоОстаткам = Истина;
			// Услуги и товары
			ИначеЕсли МассивСкладов.Количество() = 2 Тогда
				Если Не ЗначениеЗаполнено(МассивСкладов[0]) Или
					Не ЗначениеЗаполнено(МассивСкладов[1]) Тогда
					СкладОтгрузки = ?(ЗначениеЗаполнено(МассивСкладов[0]), МассивСкладов[0], МассивСкладов[1]);
					Склад = СкладОтгрузки;
					ЗаполнятьПоОстаткам = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаполнятьПоОстаткам = Истина;
			СкладОтгрузки = Склад;
		КонецЕсли;
	Иначе
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			Склад = СкладОтгрузки;
		КонецЕсли;
		ЗаполнятьПоОстаткам = Истина;
	КонецЕсли;
	
	Если ЗаполнятьПоОстаткам Тогда
		
		Если ТипОснования = Тип("Массив") Тогда
			МассивЗаказов = ДокументОснование;
		Иначе
			МассивЗаказов = Новый Массив();
			МассивЗаказов.Добавить(ЗаказПереработчику);
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВариантОформления", ВариантОформления);
		ПараметрыЗаполнения.Вставить("ПараметрыОформления", ПараметрыОформления);
		
		Документы.ПередачаСырьяПереработчику.ЗаполнитьПоОстаткамЗаказов(
			ЭтотОбъект,
			Товары,
			Склад,
			МассивЗаказов,
			ПараметрыЗаполнения);
			
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказПереработчику, Товары, "ЗаказПереработчику");
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер                  = Пользователи.ТекущийПользователь();
    Валюта                    = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    		= Организация;
	СтруктураПараметров.БанковскийСчет		= БанковскийСчетОрганизации;

	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.Касса		= Касса;
	Касса                     = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ДатаРаспоряжения          = ТекущаяДатаСеанса();
	ХозяйственнаяОперация     = Метаданные.Документы.ПередачаСырьяПереработчику.Реквизиты.ХозяйственнаяОперация.ЗначениеЗаполнения;
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	МестоСоставленияДокумента         = ПродажиСервер.ПолучитьМестоСоставленияДокумента(Метаданные().Имя, Менеджер, Склад);
	ПредставительОрганизации          = Менеджер.ФизическоеЛицо;
	ПредставительОрганизацииДолжность = ДолжностиДляПечатиКлиентСервер.ДолжностьФизическогоЛица(ПредставительОрганизации, Организация, Дата);
	
КонецПроцедуры

Процедура ИнициализироватьУсловияПродаж()
	
	ЗаполнитьУсловияПродажПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Функция ИзменилисьРеквизитыШапкиВлияющиеНаВидыЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам ТОГДА
	|		ДанныеДокумента.Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам ТОГДА
	|		ДанныеДокумента.Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке
	|			И &ФормироватьВидыЗапасовПоСделкам ТОГДА
	|		ДанныеДокумента.Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ КАК Сделка
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.ПередачаСырьяПереработчику КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	// Условие на изменение хотябы одного реквизита
	|	ПО Не (ДанныеДокумента.Организация   = СохраненныеДанные.Организация
	|		 И ДанныеДокумента.Подразделение = СохраненныеДанные.Подразделение
	|		 И ДанныеДокумента.Менеджер      = СохраненныеДанные.Менеджер
	|		 И ДанныеДокумента.Сделка        = СохраненныеДанные.Сделка)");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция ИзмениласьТЧТоварыОтносительноТЧВидыЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.Склад                       КАК Склад,
	|		ТаблицаТоваров.ЗаказПереработчику          КАК ЗаказПереработчику,
	|		ТаблицаТоваров.КодСтроки                   КАК КодСтроки,
	|		ТаблицаТоваров.Назначение                  КАК Назначение,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.Количество                  КАК Количество,
	|		ТаблицаТоваров.Сумма                       КАК Сумма
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.Склад                       КАК Склад,
	|		ТаблицаВидыЗапасов.ЗаказПереработчику          КАК ЗаказПереработчику,
	|		ТаблицаВидыЗапасов.КодСтроки                   КАК КодСтроки,
	|		ТаблицаВидыЗапасов.ВидЗапасов.Назначение       КАК Назначение,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|		-ТаблицаВидыЗапасов.Количество                 КАК Количество,
	|		-ТаблицаВидыЗапасов.ЗалоговаяСтоимость         КАК Сумма
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказПереработчику,
	|	ТаблицаТоваров.КодСтроки,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Количество) <> 0) ИЛИ (СУММА(Сумма) <> 0)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Передача превышает остаток товара организации %1 %2 %3';uk='Передача перевищує залишок товару організації %1 %2 %3'"),
			Организация,                        // %1
			СтруктураАналитики.СтрокаАналитики, // %2
			СтруктураАналитики.Аналитика);      // %3
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект);
		
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.Характеристика);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Номенклатура: %1, на складе %2 недостаточно %3 %4';uk='Номенклатура: %1, на складі %2 недостатньо %3 %4'"),
				ПредставлениеНоменклатуры,       // %1
				СтрокаТаблицы.Склад,             // %2
				СтрокаТаблицы.Количество,        // %3
				СтрокаТаблицы.ЕдиницаИзмерения); // %4
			
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru=' с указанными номерами ГТД';uk=' із зазначеними номерами ВМД'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуВидовЗапасов(СтрокаТоваров, СтруктураПоиска, Ресурсы)
	
	Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
		
		Если СтрокаЗапасов.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоПоСтроке = Мин(Ресурсы.КоличествоТоваровПоСтроке, СтрокаЗапасов.Количество);
		
		НоваяСтрока = ВидыЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
		
		НоваяСтрока.Упаковка            = СтрокаТоваров.Упаковка;
		НоваяСтрока.ЗаказПереработчику  = СтрокаТоваров.ЗаказПереработчику;
		НоваяСтрока.КодСтроки           = СтрокаТоваров.КодСтроки;
		НоваяСтрока.Количество          = КоличествоПоСтроке;
		
		Если Ресурсы.КоличествоТоваровПоСтроке = 0 Тогда
			НоваяСтрока.КоличествоУпаковок = 0;
		Иначе
			НоваяСтрока.КоличествоУпаковок = Ресурсы.КоличествоУпаковокПоСтроке * КоличествоПоСтроке / Ресурсы.КоличествоТоваровПоСтроке;
		КонецЕсли;
		Если КоличествоПоСтроке = Ресурсы.КоличествоТоваровПоСтроке Тогда
			НоваяСтрока.ЗалоговаяСтоимость = Ресурсы.СуммаПоСтроке;
		Иначе
			НоваяСтрока.ЗалоговаяСтоимость = Ресурсы.СуммаПоСтроке * КоличествоПоСтроке / Ресурсы.КоличествоТоваровПоСтроке;
		КонецЕсли;
		
		Ресурсы.КоличествоТоваровПоСтроке  = Ресурсы.КоличествоТоваровПоСтроке  - НоваяСтрока.Количество;
		Ресурсы.КоличествоУпаковокПоСтроке = Ресурсы.КоличествоУпаковокПоСтроке - НоваяСтрока.КоличествоУпаковок;
		Ресурсы.СуммаПоСтроке              = Ресурсы.СуммаПоСтроке              - НоваяСтрока.ЗалоговаяСтоимость;
		
		СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
		
		Если Ресурсы.КоличествоТоваровПоСтроке = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДопКолонкиВидовЗапасов() Экспорт
	
	КолонкиГруппировок = "АналитикаУчетаНоменклатуры, Упаковка, ЗаказПереработчику, КодСтроки";
	КолонкиСуммирования = "Количество, КоличествоУпаковок, Сумма";
	
	ТаблицаТовары = Товары.Выгрузить(, КолонкиГруппировок + ", " + КолонкиСуммирования);
	ТаблицаТовары.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоТоваровПоСтроке",  СтрокаТоваров.Количество);
		Ресурсы.Вставить("КоличествоУпаковокПоСтроке", СтрокаТоваров.КоличествоУпаковок);
		Ресурсы.Вставить("СуммаПоСтроке",              СтрокаТоваров.Сумма);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		ЗаполнитьСтрокуВидовЗапасов(СтрокаТоваров, СтруктураПоиска, Ресурсы);
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ЗаказПереработчику) И Ресурсы.КоличествоТоваровПоСтроке <> 0 Тогда
			СтруктураПоиска.ЗаказПереработчику = Неопределено;
			ЗаполнитьСтрокуВидовЗапасов(СтрокаТоваров, СтруктураПоиска, Ресурсы);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц  = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	
	Если Не Проведен
	 Или ПерезаполнитьВидыЗапасов
	 Или ИзменилисьРеквизитыШапкиВлияющиеНаВидыЗапасов(МенеджерВременныхТаблиц)
	 Или ИзмениласьТЧТоварыОтносительноТЧВидыЗапасов(МенеджерВременныхТаблиц) Тогда
		
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		
		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		
		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(
			Ссылка,
			Организация,
			Дата,
			ДополнительныеСвойства,
			МенеджерВременныхТаблиц);
		
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц,
			ДополнительныеСвойства,
			ВидыЗапасов,
			ТаблицаОшибок,
			Отказ);
		
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Склад", "Количество");
		
		ЗаполнитьДопКолонкиВидовЗапасов();
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Процедура формирует временную таблицу товаров с аналитикой обособленного учета.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								который будет содержать созданную таблицу
//
Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.Склад,
	|
	|	ТаблицаДанныхДокумента.Подразделение						КАК Подразделение,
	|	ТаблицаДанныхДокумента.Менеджер								КАК Менеджер,
	|	ТаблицаДанныхДокумента.Сделка								КАК Сделка,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)					КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)	КАК Соглашение,
	|	НЕОПРЕДЕЛЕНО												КАК НалоговоеНазначение,
	|	
	|	ТаблицаТоваров.Назначение									КАК Назначение,
	|	ТаблицаТоваров.Количество									КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|;
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПараметрыОбъектаССоглашением(ИменаРеквизитов = "")
	
	Если ПустаяСтрока(ИменаРеквизитов) Тогда
		ИменаРеквизитов = "Партнер, Договор, Контрагент, Организация";
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ЭтотОбъект);
	
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыПереданныеПереработчику);
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	Массив.Добавить(Движения.ТоварыКОтгрузке);
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ЗаказыКлиентов);
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ОбеспечениеЗаказов);
		
		Если НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПередачаСырьяПереработчику).ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.ТоварыНаСкладах);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

// Процедура формирует временную таблицу доступных видов запасов
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								который будет содержать созданную таблицу
//
Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт 
	
	ЗапасыСервер.ВидыЗапасовНеОбособленныеИОбособленные(
		Организация,
		Сделка,
		Менеджер,
		Подразделение,
		МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
