#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
		КомандыСозданияДокументов, Метаданные.Документы.ИзменениеГрафикаРаботыСписком);
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ об изменении графика работы.
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
	КомандаПечати.Идентификатор = "ПФ_MXL_ИзмененияГрафикаРаботыСписком";
	КомандаПечати.Представление = НСтр("ru='Приказ об изменении графика работы';uk='Наказ про зміну графіка роботи'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнитьКомплектВнешнимиПечатнымиФормами = Истина;
	
КонецПроцедуры

#Область ЗаполнениеДокумента

Процедура РассчитатьФОТ(Знач Ссылка, Знач Организация, Знач ДатаИзменения, Знач ГрафикРаботы, НачисленияСотрудников) Экспорт
	
	// Подготовка к расчету ФОТ
	РассчитываемыеОбъекты = Новый Соответствие;
	
	Сотрудники = Новый Соответствие;
	
	Для Каждого СтрокаНачисления Из НачисленияСотрудников Цикл
		ОписаниеСотрудника = Сотрудники.Получить(СтрокаНачисления.Сотрудник);
		
		Если ОписаниеСотрудника = Неопределено Тогда
			ОписаниеСотрудника = Новый Структура;
			ОписаниеСотрудника.Вставить("Организация", Организация);
			ОписаниеСотрудника.Вставить("ДатаРасчета", ДатаИзменения);
			ОписаниеСотрудника.Вставить("ГрафикРаботы", ГрафикРаботы);
			ОписаниеСотрудника.Вставить("Начисления", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
			ОписаниеСотрудника.Вставить("Показатели", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
		КонецЕсли;
		
		ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
		ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
		ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
		ДанныеНачисления.Размер = 0;
		
		Сотрудники.Вставить(СтрокаНачисления.Сотрудник, ОписаниеСотрудника);
	КонецЦикла;
	
	РассчитываемыеОбъекты.Вставить(Ссылка, Сотрудники);
	
	// Расчет ФОТ
	РасчетЗарплатыРасширенный.РассчитатьФОТСотрудников(РассчитываемыеОбъекты, Организация, ДатаИзменения);
	
	// Заполнение документа результатами расчета.
	ОписаниеОбъекта = РассчитываемыеОбъекты.Получить(Ссылка);
	
	Для Каждого НачислениеСотрудника Из НачисленияСотрудников Цикл
		
		ОписаниеСотрудника = ОписаниеОбъекта.Получить(НачислениеСотрудника.Сотрудник);
		Если ОписаниеСотрудника <> Неопределено Тогда
			
			Отбор = Новый Структура("Начисление, ДокументОснование", НачислениеСотрудника.Начисление, НачислениеСотрудника.ДокументОснование);
			СтрокиНачисления = ОписаниеСотрудника.Начисления.НайтиСтроки(Отбор);
			Если СтрокиНачисления.Количество() > 0 Тогда
				НачислениеСотрудника.Размер = СтрокиНачисления[0].Размер;
			КонецЕсли; 
			
		КонецЕсли; 

	КонецЦикла;
	
КонецПроцедуры

Функция СотрудникиДляИзмененияГрафика(Организация, Подразделение, ДатаИзменения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Параметры.Организация = Организация;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Параметры.Подразделение = Подразделение;
	КонецЕсли;
	Параметры.НачалоПериода 	= ДатаИзменения;
	Параметры.ОкончаниеПериода 	= ДатаИзменения;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДобавитьОтборыПоВидуДоговора(Параметры.Отборы);
	КонецЕсли; 
	
	Возврат КадровыйУчет.СотрудникиОрганизации(Истина, Параметры).ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

Функция НачисленияСотрудников(Ссылка, ДатаИзменения, СписокСотрудников) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ДатаИзменения);
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	&Период
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)";
	
	Запрос.Выполнить();
	
	// Подготовка сведений о плановых начислениях сотрудников.
	ЗапросВТПлановыеНачисления = КадровыйУчетРасширенный.ЗапросВТПлановыеНачисленияСотрудников(Истина, "ВТПлановыеНачисленияСотрудников", "ВТИзмеренияДаты", "Сотрудник,Период");
	ЗапросВТПлановыеНачисления.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросВТПлановыеНачисления.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление,
	|	ПлановыеНачисления.ДокументОснование,
	|	ПлановыеНачисления.Размер,
	|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания КАК Порядок,
	|	ЛОЖЬ КАК ФиксСтрока
	|ИЗ
	|	ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисления
	|ГДЕ
	|	НЕ ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	НачисленияСотрудников = Запрос.Выполнить().Выгрузить();
	
	Возврат НачисленияСотрудников;
	
КонецФункции

Функция ТекущиеЗначенияСовокупныхТарифныхСтавокСотрудников(Ссылка, ДатаИзменения, МассивСотрудников) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ДатаИзменения);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	&Период
	|ПОМЕСТИТЬ ВТИзмеренияДаты
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудников)";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Ссылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияСовокупныхТарифныхСтавокСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСовокупныхТарифныхСтавок.Сотрудник,
	|	ЗначенияСовокупныхТарифныхСтавок.Значение КАК СовокупнаяТарифнаяСтавка,
	|	ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки
	|ИЗ
	|	ВТЗначенияСовокупныхТарифныхСтавокСотрудниковСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавок
	|ГДЕ
	|	ЗначенияСовокупныхТарифныхСтавок.Значение <> 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗначенияСовокупныхТарифныхСтавокСотрудников(НачисленияСотрудников, ДатаИзменения, ГрафикРаботы) Экспорт
	
	ИсходныеДанные = ЗарплатаКадрыРасширенный.ИсходныеДанныеРасчетаСовокупныхТарифныхСтавок();
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаНачисления Из НачисленияСотрудников Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.ДатаСобытия = ДатаИзменения;
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник;
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		НоваяСтрока.ГрафикРаботы = ГрафикРаботы;
		НоваяСтрока.РазмерФОТ = СтрокаНачисления.Размер;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	СписокСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ИсходныеДанные, "Сотрудник", Истина);
	ТаблицаПоказателей = ЗарплатаКадрыРасширенный.ПоказателиДействующихНачисленийСотрудников(СписокСотрудников, ДатаИзменения);
	
	ЗначенияСовокупныхТарифныхСтавок = ЗарплатаКадрыРасширенный.ЗначенияСовокупныхТарифныхСтавок(ИсходныеДанные, ДатаИзменения, ТаблицаПоказателей);
	
	Возврат ЗначенияСовокупныхТарифныхСтавок.Выгрузить();
	
КонецФункции

#КонецОбласти

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическиеЛица = ?(Объект.ФизическиеЛица.Количество() > 0 , Объект.ФизическиеЛица.Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ФизическиеЛица;
	ДанныеДляПроверкиОграничений.Подразделение = Объект.Подразделение;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная, ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь);
	
КонецФункции

#КонецОбласти

#КонецЕсли