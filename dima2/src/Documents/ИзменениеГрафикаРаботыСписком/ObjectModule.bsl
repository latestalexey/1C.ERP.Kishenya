#Если Не ТолстыйКлиентУправляемоеПриложение Или Сервер Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическиеЛица.ФизическоеЛицо");
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ЭтотОбъект, Отказ, РежимПроведения);
	
	ДанныеПроведения = ПолучитьДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеПроведения.СотрудникиДаты, Ссылка);
	
	Для каждого Сотрудник Из ДанныеПроведения["НеРаботающиеСотрудники"] Цикл
		Текст = НСтр("ru  = 'Сотрудник %1 не работает на дату изменения графика работы.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Сотрудник);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Отказ = Истина;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(Движения, ДанныеПроведения.СотрудникиДаты);
	
	СтруктураПлановыхНачислений = Новый Структура;
	СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеПроведения.ПлановыеНачисления);
	РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений, Истина);
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияЗначенийСовокупныхТарифныхСтавок(Движения, ДанныеПроведения.ДанныеСовокупныхТарифныхСтавок);
	
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИзменениеГрафикаРаботыСписком") Тогда
		ЭтотОбъект.Дата = ТекущаяДатаСеанса();
		ЭтотОбъект.ДатаИзменения = ДанныеЗаполнения.ДатаИзменения;
		ЭтотОбъект.ДатаОкончания = ДанныеЗаполнения.ДатаОкончания;
		ЭтотОбъект.Организация = ДанныеЗаполнения.Организация;
		ЭтотОбъект.Подразделение = ДанныеЗаполнения.Подразделение;
		ЭтотОбъект.ГрафикРаботы = ДанныеЗаполнения.ГрафикРаботы;
		
		ЗаполнитьДокумент(ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Ссылка, ДанныеЗаполнения.ДатаИзменения));
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ДанныеЗаполнения.Ссылка);
			
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДокумент(ВремяРегистрации) Экспорт
	
	ВремяНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
	
	Менеджер = Документы.ИзменениеГрафикаРаботыСписком;
	
	Сотрудники.Очистить();
	НачисленияСотрудников.Очистить();
	ПересчетТарифныхСтавок.Очистить();
	
	МассивСотрудников = Менеджер.СотрудникиДляИзмененияГрафика(Организация, Подразделение, ВремяРегистрации);
	
	ТаблицаНачисленийСотрудников = Документы.ИзменениеГрафикаРаботыСписком.НачисленияСотрудников(
		Ссылка, ВремяРегистрации, МассивСотрудников);
		
	Менеджер.РассчитатьФОТ(Ссылка, Организация, ВремяРегистрации, ГрафикРаботы, ТаблицаНачисленийСотрудников);
	ЗначенияСовокупныхТарифныхСтавок = Менеджер.ЗначенияСовокупныхТарифныхСтавокСотрудников(
		ТаблицаНачисленийСотрудников, ВремяРегистрации, ГрафикРаботы);
	
	ТаблицаНачисленийСотрудниковВрем = ТаблицаНачисленийСотрудников.Скопировать();
	ТаблицаНачисленийСотрудниковВрем.Свернуть("Сотрудник, ФиксСтрока");
	Сотрудники.Загрузить(ТаблицаНачисленийСотрудниковВрем);
	НачисленияСотрудников.Загрузить(ТаблицаНачисленийСотрудников);
	ПересчетТарифныхСтавок.Загрузить(ЗначенияСовокупныхТарифныхСтавок);
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("ЗаполнениеДокументаИзменениеГрафикаРаботыСписком",
		ВремяНачалаЗамера);
	
КонецПроцедуры

// Необходимо получить данные для формирования движений
//		кадровой истории - см. КадровыйУчетРасширенный.СформироватьКадровыеДвижения
//		плановых начислений - см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхНачислений
//		плановых выплат (авансы) - см. РасчетЗарплаты.СформироватьДвиженияПлановыхВыплат.
// 
Функция ПолучитьДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Параметры.Организация 		= Организация;
	Параметры.Подразделение 	= Подразделение;
	Параметры.НачалоПериода 	= ДатаИзменения;
	Параметры.ОкончаниеПериода 	= ДатаОкончания;
	Параметры.КадровыеДанные 	= "ФизическоеЛицо";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, Параметры);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаИзменения", ДатаИзменения);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ДатаИзменения КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА &ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ &ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ИзменениеГрафикаРаботыСпискомНачисленияСотрудников.Сотрудник КАК Сотрудник,
	|	ИзменениеГрафикаРаботыСпискомНачисленияСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИзменениеГрафикаРаботыСпискомНачисленияСотрудников.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ИзменениеГрафикаРаботыСпискомНачисленияСотрудников.Начисление КАК Начисление,
	|	ИзменениеГрафикаРаботыСпискомНачисленияСотрудников.ДокументОснование КАК ДокументОснование,
	|	ИСТИНА КАК Используется,
	|	ИзменениеГрафикаРаботыСпискомНачисленияСотрудников.Размер КАК Размер
	|ИЗ
	|	Документ.ИзменениеГрафикаРаботыСписком.НачисленияСотрудников КАК ИзменениеГрафикаРаботыСпискомНачисленияСотрудников
	|ГДЕ
	|	НЕ ИзменениеГрафикаРаботыСпискомНачисленияСотрудников.Начисление.ФОТНеРедактируется
	|	И ИзменениеГрафикаРаботыСпискомНачисленияСотрудников.Ссылка = &Ссылка";
	
	ДанныеДляПроведения = Новый Структура; 
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ИзменениеГрафикаРаботыСписком.НачисленияСотрудников КАК НачисленияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	|		ПО НачисленияСотрудников.Сотрудник = ВТСотрудникиОрганизации.Сотрудник
	|ГДЕ
	|	НачисленияСотрудников.Ссылка = &Ссылка
	|	И НЕ НачисленияСотрудников.Сотрудник В
	|				(ВЫБРАТЬ
	|					ВТСотрудникиОрганизации.Сотрудник
	|				ИЗ
	|					ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаИзменения КАК ДатаСобытия,
	|	ИзменениеГрафикаРаботыПересчетТарифныхСтавок.Сотрудник КАК Сотрудник,
	|	СправочникСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИзменениеГрафикаРаботыПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка КАК Значение,
	|	ВЫБОР
	|		КОГДА ИзменениеГрафикаРаботыПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
	|		ИНАЧЕ ИзменениеГрафикаРаботыПересчетТарифныхСтавок.ВидТарифнойСтавки
	|	КОНЕЦ КАК ВидТарифнойСтавки,
	|	ВЫБОР
	|		КОГДА ИзменениеГрафикаРаботыСписком.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ИзменениеГрафикаРаботыСписком.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ИзменениеГрафикаРаботыСписком.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо
	|ИЗ
	|	Документ.ИзменениеГрафикаРаботыСписком.ПересчетТарифныхСтавок КАК ИзменениеГрафикаРаботыПересчетТарифныхСтавок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеГрафикаРаботыСписком КАК ИзменениеГрафикаРаботыСписком
	|		ПО ИзменениеГрафикаРаботыПересчетТарифныхСтавок.Ссылка = ИзменениеГрафикаРаботыСписком.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
	|		ПО ИзменениеГрафикаРаботыПересчетТарифныхСтавок.Сотрудник = СправочникСотрудники.Ссылка
	|ГДЕ
	|	ИзменениеГрафикаРаботыПересчетТарифныхСтавок.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ДатаИзменения КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ИзменениеГрафикаРаботыСписком.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ИзменениеГрафикаРаботыСписком.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ИзменениеГрафикаРаботыСписком.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ИзменениеГрафикаРаботыНачисленияСотрудников.Сотрудник КАК Сотрудник,
	|	ИзменениеГрафикаРаботыСписком.ГрафикРаботы КАК ГрафикРаботы,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия
	|ИЗ
	|	Документ.ИзменениеГрафикаРаботыСписком.НачисленияСотрудников КАК ИзменениеГрафикаРаботыНачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеГрафикаРаботыСписком КАК ИзменениеГрафикаРаботыСписком
	|		ПО ИзменениеГрафикаРаботыНачисленияСотрудников.Ссылка = ИзменениеГрафикаРаботыСписком.Ссылка
	|ГДЕ
	|	ИзменениеГрафикаРаботыНачисленияСотрудников.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзменениеГрафикаРаботыНачисленияСотрудников.Сотрудник,
	|	ИзменениеГрафикаРаботыСписком.ДатаОкончания,
	|	ИзменениеГрафикаРаботыСписком.ГрафикРаботы";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения.Вставить("НеРаботающиеСотрудники",			РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", 	РезультатыЗапроса[1].Выгрузить());
	ДанныеДляПроведения.Вставить("СотрудникиДаты", 					РезультатыЗапроса[2].Выгрузить());
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ДатаИзменения, МЕСЯЦ) КАК ПериодДействия,
	|	ТаблицаДокумента.Ссылка КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.ИзменениеГрафикаРаботыСписком.Сотрудники КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Регистратор";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
