
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ЗаполнитьПервоначальныеЗначения();
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	ЭтотОбъект.ПодробныйРасчетФОТ = Ложь;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения

	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РеквизитФормыВДанныеСотрудников(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеВРеквизит();
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.Найти("Сотрудники") <> Неопределено Тогда
		
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитФормыВДанныеСотрудников(ТекущийОбъект);
		
		Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если КолонкиПоказателей <> Неопределено Тогда
			
			Индекс = 0;
			Для каждого СтрокаСотрудники Из Объект.Сотрудники Цикл
				
				Для каждого КолонкаПокзателя Из КолонкиПоказателей Цикл
					
					Если Не ЗначениеЗаполнено(СтрокаСотрудники[КолонкаПокзателя.Ключ]) Тогда
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru='Значение не заполнено';uk='Значення не заповнено'"),
							Объект.Ссылка,
							"Сотрудники[" + Индекс + "]." + КолонкаПокзателя.Ключ,
							"Объект",
							Отказ)
						
						КонецЕсли;
						
				КонецЦикла;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыНачисления" И Источник = ЭтаФорма Тогда
		ЗаполнитьДанныеСотрудникаИзВРеменногоХранилища(Параметр.АдресВХранилище);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыПоказателиДокумента" И Источник.ВладелецФормы = ЭтаФорма Тогда
		Если Параметр.Показатели.Количество() > 0 Тогда 
			ОбработатьИзменениеПоказателейНаСервере(Параметр.Показатели);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры
  
&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНазначенияПриИзменении(Элемент)
	ДатаИзмененияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НачислениеПриИзменении(Элемент)
	НачислениеПриИзмененииНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Сотрудники

&НаКлиенте
Процедура СотрудникиПередНачаломИзменения(Элемент, Отказ)
	
	Строка = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	Если НЕ Строка = Неопределено Тогда
		МассивУдаляемыхСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Строка.Сотрудник);
		ЗафиксироватьУдаляемыхСотрудников(МассивУдаляемыхСотрудников);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникПриИзменении(Элемент)
	СотрудникиСотрудникПриИзмененииНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СотрудникиФОТ"
		Или Поле.Имя = "СотрудникиПредставлениеНачислений" Тогда
		РедактироватьСоставНачислений = Поле.Имя = "СотрудникиПредставлениеНачислений";
		ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(Элемент.ТекущиеДанные, Элемент.ТекущаяСтрока, РедактироватьСоставНачислений);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	
	МассивУдаляемыхСотрудников = Новый Массив;
	
	Для каждого ИдентификаторУдаляемойСтроки Из Элемент.ВыделенныеСтроки Цикл
		Строка = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторУдаляемойСтроки);
		Если НЕ Строка = Неопределено Тогда
			МассивУдаляемыхСотрудников.Добавить(Строка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьУдаляемыхСотрудников(МассивУдаляемыхСотрудников);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	
	СотрудникиПослеУдаленияНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя <> "СотрудникиСовокупнаяТарифнаяСтавка" Тогда
		Строка = Элементы.Сотрудники.ТекущиеДанные;
		Если НЕ Строка = Неопределено 
			И ЗначениеЗаполнено(Строка.Сотрудник) Тогда
			СотрудникиПриОкончанииРедактированияНаСервере(Элементы.Сотрудники.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не Копирование 
		И НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ДатаНазначения = Объект.ДатаНазначения;
		
		Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
			Элемент.ТекущиеДанные.ДатаОкончания = Объект.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ПараметрыОткрытия = Неопределено;
	КадровыйУчетРасширенныйКлиент.ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(
		ЭтаФорма, ПараметрыОткрытия);
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация, 
		Объект.Подразделение,
		Объект.ДатаНазначения, 
		Объект.ДатаОкончания,
		Истина, 
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетФОТПодробно(Команда)
	РасчетФОТПодробноНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатели(Команда)
	
	МассивПоказателей = Новый Массив;
	
	Если КолонкиПоказателей <> Неопределено Тогда
		
		Для каждого КолонкаПоказатель Из КолонкиПоказателей Цикл
			Если Не ТипЗнч(КолонкаПоказатель.Значение) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
				Продолжить;
			КонецЕсли;
			МассивПоказателей.Добавить(КолонкаПоказатель.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивПоказателей.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет показателей к заполнению';uk='Немає показників до заповнення'"));
	Иначе
		ПараметрыФормы = Новый Структура("МассивПоказателей", МассивПоказателей);
		ОткрытьФорму("ОбщаяФорма.ГрупповоеЗаполнениеПоказателейДокументов", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#Область СервернаяЧастьОбработчиковСобытийЭлементовФормы

&НаСервере
Процедура ДатаИзмененияПриИзмененииНаСервере()
	
	ПрочитатьВремяРегистрации();
		
	УстановитьОтображениеНадписей();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиСотрудникПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ЗавершитьУдалениеСотрудников();
		
КонецПроцедуры

&НаСервере
Процедура СотрудникиПослеУдаленияНаСервере()
	
	Если НЕ ЕстьУдаляемыеСотрудники() Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьУдалениеСотрудников();
	
	УстановитьОтображениеНадписей();
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиПриОкончанииРедактированияНаСервере(ИдентификаторСтроки)

	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, СтрокаСотрудника);
	
	РеквизитФормыВНачисленияСотрудника(СтрокаСотрудника);

	ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
	ЭлементФильтра = ФильтрСотрудников.Добавить();
	ЭлементФильтра.Сотрудник = СтрокаСотрудника.Сотрудник;
	ЭлементФильтра.ДатаИзменения = СтрокаСотрудника.ВремяРегистрации;
	  	                                                                                 
	ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников);

	ФОТПлановыхНачисленийСотрудников = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
	ЗаполнитьФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников);
	ФОТСотрудников = ФОТСотрудниковПоОписаниюНачислений(ФОТПлановыхНачисленийСотрудников);	
	СтрокаСотрудника.ФОТ = ФОТСотрудников.Получить(СтрокаСотрудника.Сотрудник);
	
	ЗаполнитьЗначенияСовокупныхТарифныхСтавокСотрудников(ПлановыеНачисленияПоказателиСотрудников.НачисленияСотрудников, ПлановыеНачисленияПоказателиСотрудников.ПоказателиСотрудников);
	
	Запрос = ЗапросИзменяемыхНачислений(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаСотрудника));
	НачисленияСотрудникаСОписанием = НачисленияСотрудниковСОписанием(Запрос);
	НачисленияСотрудникаВСтроку(СтрокаСотрудника, НачисленияСотрудникаСОписанием, ПредставлениеПустойКоллекцииНачислений());

	УстановитьОтображениеНадписей();
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НачислениеПриИзмененииНаСервере()
	
	ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		
		СтрокаСотрудника.Размер = 0;
		
		ЭлементФильтра = ФильтрСотрудников.Добавить();
		ЭлементФильтра.Сотрудник = СтрокаСотрудника.Сотрудник;
		ЭлементФильтра.ДатаИзменения = СтрокаСотрудника.ВремяРегистрации;
		
	КонецЦикла;
	
	ИзменяемыеПоказатели = ИзменяемыеПоказатели(Объект.Начисление);
	ИзменяемыеПоказателиВРеквизитФормы(ИзменяемыеПоказатели);
	ДанныеСотрудниковВРеквизитФормы(ИзменяемыеПоказатели);
	ФОТСотрудниковВРеквизитФормы();

	ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников);

	ФОТПлановыхНачисленийСотрудников = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
	ЗаполнитьФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников);
	ФОТСотрудников = ФОТСотрудниковПоОписаниюНачислений(ФОТПлановыхНачисленийСотрудников);	
	ФОТСотрудниковВРеквизитФормы(ФОТСотрудников);
	
	ЗаполнитьЗначенияСовокупныхТарифныхСтавокСотрудников(ПлановыеНачисленияПоказателиСотрудников.НачисленияСотрудников, ПлановыеНачисленияПоказателиСотрудников.ПоказателиСотрудников);	
	
	УстановитьДоступностьКомандыЗаполнитьПоказатели();
	
КонецПроцедуры

&НаСервере
Процедура СотрудникиОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
	
	Для Каждого Сотрудник Из ВыбранноеЗначение Цикл
		
		НоваяСтрока = Объект.Сотрудники.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		
		НоваяСтрока.ДатаНазначения = Объект.ДатаНазначения;
		ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, НоваяСтрока);
		
		НоваяСтрока.ДатаОкончания = Объект.ДатаОкончания;
		
		ЭлементФильтра = ФильтрСотрудников.Добавить();
		ЭлементФильтра.Сотрудник = Сотрудник;
		ЭлементФильтра.ДатаИзменения = НоваяСтрока.ВремяРегистрации;
		
	КонецЦикла;
	
	ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников);

	ФОТПлановыхНачисленийСотрудников = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
	ЗаполнитьФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников);
	ФОТСотрудников = ФОТСотрудниковПоОписаниюНачислений(ФОТПлановыхНачисленийСотрудников);	
	ФОТСотрудниковВРеквизитФормы(ФОТСотрудников);
	
	ЗаполнитьЗначенияСовокупныхТарифныхСтавокСотрудников(ПлановыеНачисленияПоказателиСотрудников.НачисленияСотрудников, ПлановыеНачисленияПоказателиСотрудников.ПоказателиСотрудников);
	
КонецПроцедуры

#КонецОбласти

#Область ПриПолученииДанныхНаСервере

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ДанныеВРеквизит();
	
	ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(ЭтотОбъект);	
	
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьВидимостьЭлементовФормы();
	УстановитьОтображениеНадписей();
	
	УстановитьДоступностьКомандыЗаполнитьПоказатели();
	
	ДополнитьПараметрыВыбораНачисленияДоступнымиКатегориями();
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизит()
	
	КолонкиПоказателей = Неопределено;
	
	ПрочитатьВремяРегистрации();
	
	ИзменяемыеПоказатели = ИзменяемыеПоказатели(Объект.Начисление);
	ИзменяемыеПоказателиВРеквизитФормы(ИзменяемыеПоказатели);
	ДанныеСотрудниковВРеквизитФормы(ИзменяемыеПоказатели);
	ФОТСотрудниковВРеквизитФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	УстановитьВидимостьКолонокПодробногоРасчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокПодробногоРасчета()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиСовокупнаяТарифнаяСтавка", "Видимость", ЭтотОбъект.ПодробныйРасчетФОТ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиФОТ", "Видимость", ЭтотОбъект.ПодробныйРасчетФОТ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиПредставлениеНачислений", "Видимость", ЭтотОбъект.ПодробныйРасчетФОТ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеНадписей()
	
	УстановитьПривилегированныйРежим(Истина);
	МассивСотрудников = Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	ЗарплатаКадрыРасширенный.УстановитьТекстНадписиОДокументахВведенныхНаДату(ЭтотОбъект, ВремяРегистрации, 
								МассивСотрудников, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыЗаполнитьПоказатели()
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказателиСотрудниковЗаполнитьПоказатели", "Доступность", ЕстьРедактируемыеПоказатели());
КонецПроцедуры

&НаСервере
Функция ЕстьРедактируемыеПоказатели()
	Возврат НЕ КолонкиПоказателей = Неопределено И КолонкиПоказателей.Количество() > 0;
КонецФункции

#КонецОбласти

#Область ДанныеСотрудниковВРеквизитФормы

&НаСервере
Процедура ДанныеСотрудниковВРеквизитФормы(ИзменяемыеПоказатели)
	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос 							= ЗапросИзменяемыхНачислений();
	НачисленияСотрудниковСОписанием = НачисленияСотрудниковСОписанием(Запрос);
	ПоказателиСотрудников 			= ПоказателиСотрудников(Запрос);
	
	ОписаниеИзменяемыхПоказателей 	= ОписаниеПоказателей(ИзменяемыеПоказатели);
	
	ДанныеСотрудниковВСтроки(НачисленияСотрудниковСОписанием, ПоказателиСотрудников, ОписаниеИзменяемыхПоказателей);
		
КонецПроцедуры

&НаСервере
Процедура ИзменяемыеПоказателиВРеквизитФормы(ИзменяемыеПоказатели)
	
	Если ИзменяемыеПоказатели.Количество() = 0
		И (КолонкиПоказателей = Неопределено
		
			Или КолонкиПоказателей.Количество() = 0) Тогда
		Возврат;
		
	КонецЕсли;
	
	ДополнитьФормуИзменяемымиПоказателями(ИзменяемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура ФОТСотрудниковВРеквизитФормы(ФОТСотрудников = Неопределено)
	    	
	Если Объект.Сотрудники.Количество() = 0 Тогда
		  Возврат;
	КонецЕсли;

	Если ФОТСотрудников = Неопределено Тогда
		
		ФОТСотрудников = ФОТСотрудников();	
		
	КонецЕсли;
	
	Отбор = Новый Структура("Сотрудник");
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		
		Отбор.Сотрудник = СтрокаСотрудника.Сотрудник;
		
		ФОТСотрудника = ФОТСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		Если ФОТСотрудника <> Неопределено Тогда
			СтрокаСотрудника.ФОТ = ФОТСотрудника;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапросИзменяемыхНачислений(НачисленияСотрудника = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить) КАК Действие,
	|	&Начисление КАК Начисление,
	|	НачисленияСотрудников.Размер
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&НачисленияСотрудников КАК НачисленияСотрудников";
	
	Если НачисленияСотрудника = Неопределено Тогда
		НачисленияСотрудников = Объект.Сотрудники.Выгрузить(, "Сотрудник,Размер");
	иначе
		НачисленияСотрудников = Объект.Сотрудники.Выгрузить(НачисленияСотрудника, "Сотрудник,Размер");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачисленияСотрудников", НачисленияСотрудников);
	Запрос.УстановитьПараметр("Начисление", Объект.Начисление);
	
	Запрос.Выполнить();
	
	Возврат Запрос;	
	
КонецФункции

&НаСервере
Функция НачисленияСотрудниковСОписанием(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТНачисления.Сотрудник КАК Сотрудник,
	|	ВТНачисления.Начисление,
	|	ВТНачисления.Размер,
	|	ВТНачисления.Действие,
	|	Начисления.Представление,
	|	Начисления.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	НЕ Начисления.Рассчитывается КАК НачислениеФиксированнойСуммой,
	|	Начисления.Код
	|ИЗ
	|	ВТНачисления КАК ВТНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО ВТНачисления.Начисление = Начисления.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	РеквизитДопУпорядочивания";
	
	НачисленияСотрудниковСОписанием = Запрос.Выполнить().Выгрузить();
	НачисленияСотрудниковСОписанием.Индексы.Добавить("Сотрудник");

	Возврат НачисленияСотрудниковСОписанием;	
	
КонецФункции

&НаСервере
Функция ПоказателиСотрудников(Запрос)
	
	ПоказателиСотрудников = Новый ТаблицаЗначений;	
	ПоказателиСотрудников.Колонки.Добавить("Сотрудник");
	ПоказателиСотрудников.Колонки.Добавить("Показатель");
	ПоказателиСотрудников.Колонки.Добавить("Значение");
	Для каждого Строка Из Объект.ПоказателиСотрудников Цикл
		ЗаполнитьЗначенияСвойств(ПоказателиСотрудников.Добавить(), Строка);
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТНачисления.Сотрудник КАК Сотрудник,
	|	ВТНачисления.Начисление КАК Показатель,
	|	ВТНачисления.Размер КАК Значение
	|ИЗ
	|	ВТНачисления КАК ВТНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО ВТНачисления.Начисление = Начисления.Ссылка
	|ГДЕ
	|	НЕ Начисления.Рассчитывается
	|	И НЕ ВТНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)";
	
	НачисленияФиксированнойСуммой = Запрос.Выполнить().Выгрузить();
	Для каждого Строка Из НачисленияФиксированнойСуммой Цикл
		ЗаполнитьЗначенияСвойств(ПоказателиСотрудников.Добавить(), Строка);
	КонецЦикла;
	
	ПоказателиСотрудников.Индексы.Добавить("Сотрудник");
	
	Возврат ПоказателиСотрудников;	
	
КонецФункции

&НаСервере
Функция ИзменяемыеПоказатели(Начисление)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисление", Начисление);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияПоказатели.Показатель,
	|	ПоказателиРасчетаЗарплаты.Идентификатор,
	|	ПоказателиРасчетаЗарплаты.КраткоеНаименование КАК Заголовок,
	|	ПоказателиРасчетаЗарплаты.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|		ПО НачисленияПоказатели.Показатель = ПоказателиРасчетаЗарплаты.Ссылка
	|ГДЕ
	|	НачисленияПоказатели.Ссылка = &Начисление
	|	И НачисленияПоказатели.ЗапрашиватьПриВводе
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПВРНачисления.Ссылка,
	|	NULL,
	|	ВЫБОР
	|		КОГДА ПВРНачисления.КраткоеНаименование = """"
	|			ТОГДА ПВРНачисления.Наименование
	|		ИНАЧЕ ПВРНачисления.КраткоеНаименование
	|	КОНЕЦ,
	|	ПВРНачисления.РеквизитДопУпорядочивания
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ПВРНачисления
	|ГДЕ
	|	ПВРНачисления.Ссылка = &Начисление
	|	И НЕ ПВРНачисления.Рассчитывается
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания";
		
	ИзменяемыеПоказатели = Запрос.Выполнить().Выгрузить();
	ИзменяемыеПоказатели.Индексы.Добавить("Показатель"); 
	ЗаполнитьИдентификаторыНачисленийФиксированнойСуммой(ИзменяемыеПоказатели);
	
	Возврат ИзменяемыеПоказатели;
	
КонецФункции 

#Область ДополнитьФормуИзменяемымиПоказателями

&НаСервере
Процедура ДополнитьФормуИзменяемымиПоказателями(ИзменяемыеПоказатели)
	
	ДобавитьРеквизитыПоказателей(ИзменяемыеПоказатели);
	ДобавитьЭлементыПоказателей(ИзменяемыеПоказатели);
	
КонецПроцедуры

#Область ДобавитьРеквизитыПоказателей

&НаСервере
Процедура ДобавитьРеквизитыПоказателей(ИзменяемыеПоказатели)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	УдаляемыеРеквизиты = Новый Массив;
	Если КолонкиПоказателей <> Неопределено Тогда
		
		ИмяТаблицы = ИмяТаблицыПоказатели();
		Для каждого СтрокаПоказателя Из КолонкиПоказателей Цикл
			УдаляемыеРеквизиты.Добавить(ИмяТаблицы + "." + СтрокаПоказателя.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьРеквизитыИзменяемыеПоказатели(ИзменяемыеПоказатели, ДобавляемыеРеквизиты);
	
	СуществующиеРеквизиты = МассивИменРеквизитовФормы();
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтаФорма, ДобавляемыеРеквизиты, СуществующиеРеквизиты, УдаляемыеРеквизиты);

	ЗаполнитьСоответствиеРеквизитовИПоказателей(ИзменяемыеПоказатели);

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыИзменяемыеПоказатели(Показатели, ДобавляемыеРеквизиты)
	
	Для Каждого Показатель Из Показатели Цикл
		ДобавитьРеквизитыПоказателя(ДобавляемыеРеквизиты, Показатель.Идентификатор, Показатель.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеРеквизитовИПоказателей(ТаблицаПоказателей)
	
	СтруктураКолонкиПоказателей = Новый Структура;
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		СтруктураКолонкиПоказателей.Вставить(СтрокаПоказателя.Идентификатор, СтрокаПоказателя.Показатель); 
	КонецЦикла;
	
	ЭтотОбъект.КолонкиПоказателей = Новый ФиксированнаяСтруктура(СтруктураКолонкиПоказателей);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитыПоказателя(ДобавляемыеРеквизиты, ИмяРеквизита, Заголовок)
	
	ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ИмяРеквизита, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты(), Заголовок);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитПоказателя(ДобавляемыеРеквизиты, ПутьКДанным, ТипЗначения, Заголовок = Неопределено)
	ИмяТаблицы = ИмяТаблицыПоказатели();
	НовыйПоказатель = Новый РеквизитФормы(ПутьКДанным, ТипЗначения, ИмяТаблицы, Заголовок);
	ДобавляемыеРеквизиты.Добавить(НовыйПоказатель);
КонецПроцедуры

&НаСервере
Функция МассивИменРеквизитовФормы()
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы, "Объект.Сотрудники");
	Возврат МассивИменРеквизитовФормы;
КонецФункции 

#КонецОбласти

#Область ДобавитьЭлементыПоказателей

&НаСервере
Процедура ДобавитьЭлементыПоказателей(ИзменяемыеПоказатели)
	
	УдалитьЭлементыИзменяемыхПоказателей();
	
	ДобавитьЭлементыИзменяемыеПоказатели(ИзменяемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыИзменяемыхПоказателей()
	ГруппаПоказателиСотрудников = ГруппаПоказателиСотрудников();
	ЗарплатаКадры.УдалитьПодчиненныеЭлементыГруппы(ЭтаФорма, ГруппаПоказателиСотрудников);
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыИзменяемыеПоказатели(ТаблицаПоказателей)
	
	ГруппаПоказатели = ГруппаПоказателиСотрудников();
	
	Для Каждого СтрокаПоказателя Из ТаблицаПоказателей Цикл
		НовыйЭлемент = НовыйЭлементФормыИзменяемыйПоказатель(СтрокаПоказателя.Идентификатор, ГруппаПоказатели, СтрокаПоказателя.Заголовок);
		УстановитьФорматИзменяемогоПоказателя(НовыйЭлемент, СтрокаПоказателя.Показатель); 
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция НовыйЭлементФормыИзменяемыйПоказатель(ПутьКДанным, Группа, Заголовок)
	
	ИмяЭлемента = "ПоказателиСотрудников" + ПутьКДанным;
	ЭлементПоказатель = Элементы.Найти(ИмяЭлемента);
	
	Если ЭлементПоказатель = Неопределено Тогда
		
		ЭлементПоказатель = ЭтаФорма.Элементы.Добавить("ПоказателиСотрудников" + ПутьКДанным, Тип("ПолеФормы"), Группа);
		ЭлементПоказатель.ПутьКДанным = "Объект.Сотрудники." + ПутьКДанным;
		ЭлементПоказатель.Заголовок = Заголовок;
		ЭлементПоказатель.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементПоказатель.ОтображатьВШапке = Истина;
		ЭлементПоказатель.РастягиватьПоГоризонтали = Истина;
		ЭлементПоказатель.АвтоОтметкаНезаполненного = Истина;
		
	КонецЕсли;
	
	Возврат ЭлементПоказатель;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматИзменяемогоПоказателя(ЭлементПоказатель, Показатель)
	Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда
		ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Показатель);
		ЭлементПоказатель.ОграничениеТипа = ПоказательИнфо.ТипПоказателя;
		ЭлементПоказатель.Формат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
	иначе	
		ЭлементПоказатель.ОграничениеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
		ЭлементПоказатель.Формат = "ЧДЦ=2";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ГруппаПоказателиСотрудников()
	Возврат ЭтаФорма.Элементы.Найти("ГруппаПоказателиСотрудников");
КонецФункции 

&НаСервере
Функция ИмяТаблицыПоказатели()
	Возврат "Объект.Сотрудники";
КонецФункции 
	
#КонецОбласти

&НаСервере
Процедура ЗаполнитьИдентификаторыНачисленийФиксированнойСуммой(ИзменяемыеПоказатели)
	Для каждого Строка Из ИзменяемыеПоказатели Цикл
		Если Строка.Идентификатор = Null Тогда
			Строка.Идентификатор = "а" + СтрЗаменить(Строка(Строка.Показатель.УникальныйИдентификатор()), "-", "");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ДанныеСотрудниковВСтроки(НачисленияСотрудниковСОписанием, ПоказателиСотрудников, ОписаниеИзменяемыхПоказателей)
	
	Отбор = Новый Структура("Сотрудник");
	
	ПредставлениеПустойКоллекцииНачислений = ПредставлениеПустойКоллекцииНачислений();
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		
		Отбор.Сотрудник = СтрокаСотрудника.Сотрудник;
		
		ПоказателиСотрудника = ПоказателиСотрудников.НайтиСтроки(Отбор);
		НачисленияСотрудника = НачисленияСотрудниковСОписанием.НайтиСтроки(Отбор);
		
		ДанныеСотрудникаВСтроку(СтрокаСотрудника, ПоказателиСотрудника, НачисленияСотрудника, ОписаниеИзменяемыхПоказателей, ПредставлениеПустойКоллекцииНачислений);
		
	КонецЦикла;
	
	Объект.ПоказателиСотрудников.Очистить();
	
КонецПроцедуры	

&НаСервере
Процедура ДанныеСотрудникаВСтроку(СтрокаСотрудника, ПоказателиСотрудника, НачисленияСотрудника, ОписаниеИзменяемыхПоказателей, ПредставлениеПустойКоллекцииНачислений)
	
	НачисленияСотрудникаВСтроку(СтрокаСотрудника, НачисленияСотрудника, ПредставлениеПустойКоллекцииНачислений);
	
	ПоказателиСотрудникаВСтроку(СтрокаСотрудника, ПоказателиСотрудника, ОписаниеИзменяемыхПоказателей);
	
КонецПроцедуры	

&НаСервере
Процедура НачисленияСотрудникаВСтроку(СтрокаСотрудника, НачисленияСотрудника, ПредставлениеПустойКоллекцииНачислений)
	
	Если НачисленияСотрудника.Количество() = 0 Тогда
		СтрокаСотрудника.ПредставлениеНачислений = ПредставлениеПустойКоллекцииНачислений;
		СтрокаСотрудника.ФОТ = 0;
		Возврат;	
	КонецЕсли;
	
	ПредставлениеНачисленийСотрудника = "";
	ПредставлениеОтмененныхНачисленийСотрудника = "";
	ЕстьОтмененныеНачисления = Ложь;
	
	Для каждого СтрокаНачисления Из НачисленияСотрудника Цикл
		
		Если СтрокаНачисления.Размер = 0 Тогда
			ПредставлениеНачисленийСотрудника = ПредставлениеНачисленийСотрудника + СтрокаНачисления.Представление+ ", ";
		иначе
			ПредставлениеНачисленийСотрудника = ПредставлениеНачисленийСотрудника + СтрокаНачисления.Представление + "=" + СтрокаНачисления.Размер + ", ";		
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеНачисленийСотрудника = Лев(ПредставлениеНачисленийСотрудника, СтрДлина(ПредставлениеНачисленийСотрудника) - 2);
	Если ЕстьОтмененныеНачисления Тогда
		
		ПредставлениеОтмененныхНачисленийСотрудника = Лев(ПредставлениеОтмененныхНачисленийСотрудника, СтрДлина(ПредставлениеОтмененныхНачисленийСотрудника) - 2);
		
		Если Не ПустаяСтрока(ПредставлениеНачисленийСотрудника) Тогда
			ПредставлениеНачисленийСотрудника = ПредставлениеНачисленийСотрудника + "; ";
		КонецЕсли;
		
		ПредставлениеНачисленийСотрудника = ПредставлениеНачисленийСотрудника + СтрШаблон(НСтр("ru='Отменены: %1';uk='Скасовані: %1'"), ПредставлениеОтмененныхНачисленийСотрудника); 
		
	КонецЕсли;
	
	СтрокаСотрудника.ПредставлениеНачислений = ПредставлениеНачисленийСотрудника;
	
КонецПроцедуры	

&НаСервере
Процедура ПоказателиСотрудникаВСтроку(СтрокаСотрудника, ПоказателиСотрудника, ОписаниеИзменяемыхПоказателей)
	
	Для каждого ПоказательСотрудника Из ПоказателиСотрудника Цикл
		ОписаниеИзменяемогоПоказателя = ОписаниеИзменяемыхПоказателей[ПоказательСотрудника.Показатель];
		Если Не ОписаниеИзменяемогоПоказателя = Неопределено Тогда
			УстановитьЗначениеПоказателяВСтроке(СтрокаСотрудника, ОписаниеИзменяемогоПоказателя, ПоказательСотрудника.Значение);	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПоказателей(ИзменяемыеПоказатели)
	
	ИдентификаторыПоказателей = Новый Соответствие;	
	
	Для каждого Строка Из ИзменяемыеПоказатели Цикл
		ИдентификаторыПоказателей.Вставить(Строка.Показатель, Новый Структура("ИдентификаторПоказателя", Строка.Идентификатор));	
	КонецЦикла;
	
	Возврат ИдентификаторыПоказателей;	
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПоказателяВСтроке(Строка, ОписаниеПоказателя, Размер)
			
	Строка[ОписаниеПоказателя.ИдентификаторПоказателя] = Размер;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПустойКоллекцииНачислений()
	
	Возврат НСтр("ru='Ввести';uk='Ввести'");	
	
КонецФункции

#КонецОбласти

#Область РеквизитФормыВДанныеСотрудников

&НаСервере
Процедура РеквизитФормыВДанныеСотрудников(ОбъектПолучатель)
	
	Если ЕстьРедактируемыеПоказатели() Тогда
		РеквизитФормыВПоказателиСотрудников(ОбъектПолучатель); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитФормыВПоказателиСотрудников(ОбъектПолучатель)
	Для каждого ПоказателиСотрудника Из Объект.Сотрудники Цикл
		РеквизитФормыВПоказателиСотрудника(ОбъектПолучатель.ПоказателиСотрудников, ПоказателиСотрудника);
		РеквизитФормыВНачисленияСотрудника(ПоказателиСотрудника);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РеквизитФормыВПоказателиСотрудника(ПоказателиСотрудников, ПоказателиСотрудника)
	
	Если Не ЕстьРедактируемыеПоказатели() Тогда
	     Возврат;
	КонецЕсли;
	
	Для каждого КолонкаПоказатель Из КолонкиПоказателей Цикл
		Если ТипЗнч(КолонкаПоказатель.Значение) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда	
			Строка 				= ПоказателиСотрудников.Добавить();
			Строка.Сотрудник 	= ПоказателиСотрудника.Сотрудник;
			Строка.Показатель 	= КолонкаПоказатель.Значение;
			Строка.Значение 	= ПоказателиСотрудника[КолонкаПоказатель.Ключ];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитФормыВНачисленияСотрудника(ПоказателиСотрудника)
	
	Если Не ЕстьРедактируемыеПоказатели() Тогда
	     Возврат;
	КонецЕсли;
	
	Для каждого КолонкаПоказатель Из КолонкиПоказателей Цикл
		Если ТипЗнч(КолонкаПоказатель.Значение) = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			ПоказателиСотрудника.Размер = ПоказателиСотрудника[КолонкаПоказатель.Ключ];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФОТ

&НаСервере
Функция ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников)
	
	РассчитываемыеОбъекты = Новый Соответствие;	
	Сотрудники = Новый Соответствие;
	
	Отбор = Новый Структура;
	ВремяРегистрацииСотрудников = ВремяРегистрацииСотрудников();
	Для Каждого СтрокаСотрудника Из ПлановыеНачисленияПоказателиСотрудников.Сотрудники Цикл
		
		Отбор.Вставить("Сотрудник", СтрокаСотрудника.Сотрудник);
		
		ОписаниеСотрудника = Новый Структура;
		ОписаниеСотрудника.Вставить("Организация", Объект.Организация);
		ОписаниеСотрудника.Вставить("ДатаРасчета", ВремяРегистрацииСотрудников[СтрокаСотрудника.Сотрудник]);	
		ОписаниеСотрудника.Вставить("Начисления", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
		ОписаниеСотрудника.Вставить("Показатели", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
		
		СтрокиПоСотруднику = ПлановыеНачисленияПоказателиСотрудников.НачисленияСотрудников.НайтиСтроки(Отбор);
		Для Каждого СтрокаНачисления Из СтрокиПоСотруднику Цикл	
			ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
			ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
			ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
			ДанныеНачисления.Размер = СтрокаНачисления.Размер;
		КонецЦикла;
		
		СтрокиПоСотруднику = ПлановыеНачисленияПоказателиСотрудников.ПоказателиСотрудников.НайтиСтроки(Отбор);
		Для Каждого СтрокаПоказателя Из СтрокиПоСотруднику Цикл
			ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
			ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
			ДанныеПоказателя.ДокументОснование = СтрокаПоказателя.ДокументОснование;
			ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
		КонецЦикла;
		
		Сотрудники.Вставить(СтрокаСотрудника.Сотрудник, ОписаниеСотрудника);
		
	КонецЦикла;
	
	РассчитываемыеОбъекты.Вставить(Объект.Ссылка, Сотрудники);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасчетЗарплатыРасширенный.РассчитатьФОТСотрудников(РассчитываемыеОбъекты, Объект.Организация, ВремяРегистрации);
	
	УстановитьПривилегированныйРежим(Ложь);			
	
	Возврат РассчитываемыеОбъекты.Получить(Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников)
	
	Отбор = Новый Структура;
	
	Для Каждого ОписаниеСотрудника Из ФОТПлановыхНачисленийСотрудников Цикл
		
		Отбор.Очистить();
		Отбор.Вставить("Сотрудник", ОписаниеСотрудника.Ключ);
		
		Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Значение.Начисления Цикл
			
			Если Не ОписаниеНачисления.Начисление = Объект.Начисление Тогда
				Продолжить;
			КонецЕсли;			
			
			СтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(Отбор);
			Для каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
				СтрокаСотрудника.Размер = ОписаниеНачисления.Размер;
			КонецЦикла;
			
		КонецЦикла;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПрименитьИзмененияВДокументеКФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников)
			
КонецФункции

&НаСервере
Функция ФОТСотрудников()
	
	ФОТСотрудников = Новый Соответствие;
	
	Если ЭтотОбъект.ПодробныйРасчетФОТ Тогда			
		ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента();
		
		ФОТПлановыхНачисленийСотрудников = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
		ПрименитьИзмененияВДокументеКФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников);
		ФОТСотрудников = ФОТСотрудниковПоОписаниюНачислений(ФОТПлановыхНачисленийСотрудников);	
	КонецЕсли;
	
	Возврат ФОТСотрудников;	
	
КонецФункции

&НаСервере
Функция ФОТСотрудниковПоОписаниюНачислений(ФОТНачисленийСотрудников)
	
	ФОТСотрудников = Новый Соответствие;
	
	Для Каждого ОписаниеСотрудника Из ФОТНачисленийСотрудников Цикл
		
		ФОТСотрудника = 0;
		
		Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Значение.Начисления Цикл
			
			ФОТСотрудника = ФОТСотрудника + ОписаниеНачисления.Размер;
			
		КонецЦикла;
		
		ФОТСотрудников.Вставить(ОписаниеСотрудника.Ключ, ФОТСотрудника);	
		
	КонецЦикла;
	
	Возврат ФОТСотрудников;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФОТСотрудниковВФорме()	
	
	ФОТСотрудников = ФОТСотрудников();	
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		
		СтрокаСотрудника.ФОТ = ФОТСотрудников.Получить(СтрокаСотрудника.Сотрудник);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасчетФОТПодробноНаСервере()
	
	Пометка = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиРасчетФОТПодробно", "Пометка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "СотрудникиРасчетФОТПодробно", "Пометка", Не Пометка);
	ЭтотОбъект.ПодробныйРасчетФОТ = Не Пометка;
	
	УстановитьВидимостьКолонокПодробногоРасчета();
	
	Если ЭтотОбъект.ПодробныйРасчетФОТ Тогда
		ЗаполнитьФОТСотрудниковВФорме();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СовокупнаяТарифнаяСтавка

&НаСервере
Процедура ЗаполнитьЗначенияСовокупныхТарифныхСтавокСотрудников(НачисленияСотрудников, ПоказателиСотрудников)
	
	// Удаление текущих данных
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияСотрудников, "Сотрудник", Истина);
	Для Каждого Сотрудник Из МассивСотрудников Цикл 
		Отбор = Новый Структура("Сотрудник", Сотрудник);
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда  
			НайденныеСтроки[0].СовокупнаяТарифнаяСтавка = 0;
			НайденныеСтроки[0].ВидТарифнойСтавки = Неопределено;
		КонецЕсли;	
	КонецЦикла;
	
	// Заполнение документа результатами расчета.
	ЗначенияСовокупныхТарифныхСтавок = ЗначенияСовокупныхТарифныхСтавокСотрудников(НачисленияСотрудников, ПоказателиСотрудников);
	
	Для Каждого ДанныеСотрудника Из ЗначенияСовокупныхТарифныхСтавок Цикл 
		Отбор = Новый Структура("Сотрудник", ДанныеСотрудника.Сотрудник);
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда  
			НайденныеСтроки[0].СовокупнаяТарифнаяСтавка = ДанныеСотрудника.СовокупнаяТарифнаяСтавка;
			НайденныеСтроки[0].ВидТарифнойСтавки = ДанныеСотрудника.ВидТарифнойСтавки;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначенияСовокупныхТарифныхСтавокСотрудников(НачисленияСотрудников, ПоказателиСотрудников)  
	
	ИсходныеДанные = ЗарплатаКадрыРасширенный.ИсходныеДанныеРасчетаСовокупныхТарифныхСтавок();
	
	РассчитываемыеСотрудники = Новый Соответствие;
	
	НомерСтроки = 1;
	
	Для Каждого СтрокаНачисления Из НачисленияСотрудников Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.ДатаСобытия = ВремяРегистрации;
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник;
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		НоваяСтрока.РазмерФОТ = СтрокаНачисления.Размер;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
		
		РассчитываемыеСотрудники.Вставить(СтрокаНачисления.Сотрудник, Истина);
		
	КонецЦикла;
	
	ТаблицаПоказателей = ЗарплатаКадрыРасширенный.ПоказателиРасчетаСовокупныхТарифныхСтавок();
	Для каждого СтрокаПоказателя Из ПоказателиСотрудников Цикл
		НоваяСтрокаПоказателя = ТаблицаПоказателей.Добавить();
		НоваяСтрокаПоказателя.Период = ВремяРегистрации;
		НоваяСтрокаПоказателя.Сотрудник = СтрокаПоказателя.Сотрудник;
		НоваяСтрокаПоказателя.Показатель = СтрокаПоказателя.Значение;
		НоваяСтрокаПоказателя.Значение = СтрокаПоказателя.Значение;
	КонецЦикла;
	
	ЗначенияСовокупныхТарифныхСтавок = ЗарплатаКадрыРасширенный.ЗначенияСовокупныхТарифныхСтавок(ИсходныеДанные, ВремяРегистрации, ТаблицаПоказателей);
	
	Возврат ЗначенияСовокупныхТарифныхСтавок.Выгрузить();
	
КонецФункции
	
#КонецОбласти

#Область УдалитьНачисленияПоказателиСотрудника

&НаСервере
Функция УдалитьПоказателиПоСотруднику(Сотрудник)
	
	ОтборПоСотруднику = Новый Структура("Сотрудник", Сотрудник);
	
	СтрокиДляУдаления = Объект.ПоказателиСотрудников.НайтиСтроки(ОтборПоСотруднику);
	Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		Объект.ПоказателиСотрудников.Удалить(СтрокаДляУдаления);
	КонецЦикла;

КонецФункции 

&НаСервере
Функция ЕстьУдаляемыеСотрудники()	
	Возврат НЕ (УдаляемыеСотрудники = Неопределено Или УдаляемыеСотрудники.Количество() = 0);
КонецФункции

&НаСервере
Процедура ЗавершитьУдалениеСотрудников()
	
	Если НЕ ЕстьУдаляемыеСотрудники() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Сотрудник Из УдаляемыеСотрудники Цикл
		УдалитьПоказателиПоСотруднику(Сотрудник);
	КонецЦикла;
	
	ОчиститьУдаляемыхСотрудников();
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьУдаляемыхСотрудников(МассивУдаляемыхСотрудников)
	УдаляемыеСотрудники = Новый ФиксированныйМассив(МассивУдаляемыхСотрудников);	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУдаляемыхСотрудников()
	УдаляемыеСотрудники = Неопределено;	
КонецПроцедуры

#КонецОбласти

#Область ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента

&НаСервере
Функция ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников = Неопределено)
	
	НачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудников(ФильтрСотрудников);

	ПрименитьИзмененияВДокументеКПлановымНачислениямСотрудников(НачисленияПоказателиСотрудников, ФильтрСотрудников);
	ПрименитьИзмененияВДокументеКПлановымПоказателямСотрудников(НачисленияПоказателиСотрудников, ФильтрСотрудников);
	
	Возврат НачисленияПоказателиСотрудников;
	
КонецФункции	   	

&НаСервере
Функция ПлановыеНачисленияПоказателиСотрудников(ФильтрСотрудников = Неопределено)
			
	ПараметрыПолучения = ПараметрыПолученияНачисленийПоказателейСотрудников();
	Если Не ФильтрСотрудников = Неопределено Тогда
		ПараметрыПолучения.Вставить("ИспользоватьФильтрСотрудников", Истина);
		ПараметрыПолучения.Вставить("ФильтрСотрудников", ФильтрСотрудников);
	КонецЕсли;
                    	
	НачисленияПоказателиСотрудников = Документы.ИзменениеПлановыхНачислений.НачисленияПоказателиСотрудников(ПараметрыПолучения);
	
	Возврат НачисленияПоказателиСотрудников;
	
КонецФункции	   	

&НаСервере
Функция НачисленияПоказателиСотрудникаПриведенныеДляФормыРедактирования(ПлановыеНачисленияПоказателиСотрудника, ФОТПлановыхНачисленийСотрудника)
	
	МассивНачислений = Новый Массив;
	МассивПоказателей = Новый Массив;
	
	ИдентификаторСтрокиВидаРасчета = 1;
	
	ПостоянныеПоказателиНачислений = Новый Соответствие;
	
	// Добавление всех начислений сотрудника.
	Для Каждого СтрокаНачислений Из ПлановыеНачисленияПоказателиСотрудника.НачисленияСотрудников Цикл
		
		СтруктураНачисления = Новый Структура("Начисление,ДокументОснование,ИдентификаторСтрокиВидаРасчета,Размер,Действие");
		ЗаполнитьЗначенияСвойств(СтруктураНачисления, СтрокаНачислений);
		СтруктураНачисления.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		
		Отбор = Новый Структура("Начисление, ДокументОснование", СтрокаНачислений.Начисление, СтрокаНачислений.ДокументОснование);
		СтрокиПлановыхНачислений = ФОТПлановыхНачисленийСотрудника.Начисления.НайтиСтроки(Отбор);
		Если СтрокиПлановыхНачислений.Количество() > 0 Тогда 
			СтруктураНачисления.Размер = СтрокиПлановыхНачислений[0].Размер;
		КонецЕсли;
		МассивНачислений.Добавить(СтруктураНачисления);
		
		// Добавление показателей начислений.
		
		ПостоянныеПоказателиНачисления = ПостоянныеПоказателиНачислений.Получить(СтрокаНачислений.Начисление); 
		Если ПостоянныеПоказателиНачисления = Неопределено Тогда
			ПостоянныеПоказателиНачисления = ПостоянныеПоказателиНачисления(СтрокаНачислений.Начисление);
			ПостоянныеПоказателиНачислений.Вставить(СтрокаНачислений.Начисление, ПостоянныеПоказателиНачисления);	
		КонецЕсли;
		
		Для Каждого ПостоянныйПоказатель Из ПостоянныеПоказателиНачисления Цикл
			
			СтрокиПоказателей = ПлановыеНачисленияПоказателиСотрудника.ПоказателиСотрудников.НайтиСтроки(Новый Структура("Показатель,ДокументОснование", ПостоянныйПоказатель, СтрокаНачислений.ДокументОснование));
			Если СтрокиПоказателей.Количество() = 0 Тогда
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				Продолжить;
			КонецЕсли;
			
			СтруктураПоказателя = Новый Структура("Показатель,ДокументОснование,ИдентификаторСтрокиВидаРасчета,Значение");
			СтруктураПоказателя.Показатель = СтрокиПоказателей[0].Показатель;
			СтруктураПоказателя.ДокументОснование = СтрокиПоказателей[0].ДокументОснование;
			СтруктураПоказателя.Значение = СтрокиПоказателей[0].Значение;
			СтруктураПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			МассивПоказателей.Добавить(СтруктураПоказателя);
			
		КонецЦикла;	  
		
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
		
	КонецЦикла;
	
	Возврат Новый Структура("Начисления,Показатели", МассивНачислений, МассивПоказателей);
	
КонецФункции

&НаСервере
Функция ПараметрыПолученияНачисленийПоказателейСотрудников()
	
	ПараметрыПолучения = Документы.ИзменениеПлановыхНачислений.ПараметрыПолученияНачисленийПоказателейСотрудников();
	ПараметрыПолучения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПолучения.Вставить("Организация", Объект.Организация);
	ПараметрыПолучения.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыПолучения.Вставить("ДатаИзменения", ВремяРегистрации);
	ПараметрыПолучения.Вставить("ДатаОкончания", Объект.ДатаОкончания);
		
	Возврат ПараметрыПолучения;	
	
КонецФункции

&НаСервере
Процедура ПрименитьИзмененияВДокументеКПлановымНачислениямСотрудников(НачисленияПоказателиСотрудников, ФильтрСотрудников = Неопределено)
	
	НачисленияПоказателиСотрудников.НачисленияСотрудников.Индексы.Добавить("Сотрудник, Начисление");
		
	Отбор = Новый Структура("Сотрудник, Начисление, ДокументОснование");
	Для каждого Строка Из Объект.Сотрудники Цикл
		Если ФильтрСотрудников <> Неопределено 
			И ФильтрСотрудников.Найти(Строка.Сотрудник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Отбор.Сотрудник = Строка.Сотрудник;
		Отбор.Начисление = Объект.Начисление;
		Отбор.ДокументОснование = Объект.Ссылка;
		СтрокиНачисления = НачисленияПоказателиСотрудников.НачисленияСотрудников.НайтиСтроки(Отбор);
		Если СтрокиНачисления.Количество() > 0 Тогда
			СтрокиНачисления[0].Размер = Строка.Размер; 
			СтрокиНачисления[0].Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить; 
		Иначе 
			СтрокаНачисления = НачисленияПоказателиСотрудников.НачисленияСотрудников.Добавить();
			СтрокаНачисления.Сотрудник = Строка.Сотрудник; 
			СтрокаНачисления.Начисление = Объект.Начисление; 
			СтрокаНачисления.ДокументОснование = Объект.Ссылка; 
			СтрокаНачисления.Размер = Строка.Размер; 
			СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить; 
		КонецЕсли;
	КонецЦикла;	
	
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Если ФильтрСотрудников <> Неопределено 
			И ФильтрСотрудников.Найти(СтрокаСотрудника.Сотрудник) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РеквизитФормыВНачисленияСотрудника(СтрокаСотрудника);	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьИзмененияВДокументеКПлановымПоказателямСотрудников(НачисленияПоказателиСотрудников, ФильтрСотрудников = Неопределено)
		
	ПоказателиСотрудниковВДокументе = Объект.ПоказателиСотрудников.Выгрузить(Новый Массив);
	Для каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		Если ФильтрСотрудников <> Неопределено 
			И ФильтрСотрудников.Найти(СтрокаСотрудника.Сотрудник) = Неопределено Тогда  
			Продолжить;
		КонецЕсли;
		РеквизитФормыВПоказателиСотрудника(ПоказателиСотрудниковВДокументе, СтрокаСотрудника); 
	КонецЦикла;
	
	НачисленияПоказателиСотрудников.ПоказателиСотрудников.Индексы.Добавить("Сотрудник,Показатель");
	
	Отбор = Новый Структура("Сотрудник, Показатель, ДокументОснование");
	
	Для каждого Строка Из ПоказателиСотрудниковВДокументе Цикл
		Отбор.Сотрудник = Строка.Сотрудник;
		Отбор.Показатель = Строка.Показатель;
		Отбор.ДокументОснование = Объект.Ссылка;
		СтрокиПоказателей = НачисленияПоказателиСотрудников.ПоказателиСотрудников.НайтиСтроки(Отбор);
		Если СтрокиПоказателей.Количество() > 0 Тогда
			СтрокиПоказателей[0].Значение = Строка.Значение; 
		Иначе 
			СтрокиПоказателей = НачисленияПоказателиСотрудников.ПоказателиСотрудников.Добавить();
			СтрокиПоказателей.Сотрудник = Строка.Сотрудник; 
			СтрокиПоказателей.Показатель = Строка.Показатель; 
			СтрокиПоказателей.ДокументОснование = Объект.Ссылка; 
			СтрокиПоказателей.Значение = Строка.Значение; 
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Сотрудники");
	Массив.Добавить("Объект.ПоказателиСотрудников");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",	НСтр("ru='организации';uk='організації'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Подразделение", НСтр("ru='подразделения';uk='підрозділи'")));
	Возврат Массив
КонецФункции

#КонецОбласти

#Область ФормаРедактированияСоставаНачисленийИУдержаний

&НаКлиенте
Процедура ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ТекущиеДанные, ТекущаяСтрока, РедактироватьСоставНачислений)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		
		ПараметрыРедактирования = ПараметрыРедактированияСоставаНачисленийИУдержаний(ТекущаяСтрока, РедактироватьСоставНачислений);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ПараметрыРедактирования, УникальныйИдентификатор));
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		
		ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияСоставаНачисленийИУдержаний(ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРедактированияСоставаНачисленийИУдержаний(ТекущаяСтрока, РедактироватьСоставНачислений)
	
	СтрокаСотрудника = Объект.Сотрудники.НайтиПоИдентификатору(ТекущаяСтрока);
	Сотрудник = СтрокаСотрудника.Сотрудник;
	
	ПараметрыРедактирования = ЗарплатаКадрыРасширенныйКлиентСервер.ПараметрыРедактированияСоставаНачисленийИУдержаний();
	
	ПараметрыРедактирования.ВладелецНачисленийИУдержаний = Сотрудник;
	ПараметрыРедактирования.ДатаРедактирования = СтрокаСотрудника.ВремяРегистрации;
	ПараметрыРедактирования.Организация = Объект.Организация;
	ПараметрыРедактирования.РежимРаботы = 3;
	
	ФильтрСотрудников = Документы.ИзменениеПлановыхНачислений.ПустойФильтрСотрудников();
	ЭлементФильтра = ФильтрСотрудников.Добавить();
	ЭлементФильтра.Сотрудник = СтрокаСотрудника.Сотрудник;
	ЭлементФильтра.ДатаИзменения = СтрокаСотрудника.ВремяРегистрации;

	ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента(ФильтрСотрудников);
	ФОТПлановыхНачисленийСИзменениямиДокумента = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
	ФОТПлановыхНачисленийСотрудникаСИзменениямиДокумента = ФОТПлановыхНачисленийСИзменениямиДокумента.Получить(СтрокаСотрудника.Сотрудник);	
	ПриведенныеНачисленияПоказатели = НачисленияПоказателиСотрудникаПриведенныеДляФормыРедактирования(ПлановыеНачисленияПоказателиСотрудников, ФОТПлановыхНачисленийСотрудникаСИзменениямиДокумента);
	
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.Используется = Истина;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.ИзменятьСоставВидовРасчета = РедактироватьСоставНачислений;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.ИзменятьЗначенияПоказателей = РедактироватьСоставНачислений;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.НомерТаблицы = 1;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.ПоказатьФОТ = НЕ РедактироватьСоставНачислений;
	
	РедактируемыеНачисления = Новый Массив;
	РедактируемыеНачисления.Добавить(Объект.Начисление);		
	
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.РедактируемыеНачисления = РедактируемыеНачисления;
	ПараметрыРедактирования.ОписаниеТаблицыНачислений.Таблица = ПриведенныеНачисленияПоказатели.Начисления;
	ПараметрыРедактирования.Показатели = ПриведенныеНачисленияПоказатели.Показатели;
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСотрудникаИзВРеменногоХранилища(АдресВХранилище)
	
	ДанныеИзХранилища = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Если ДанныеИзХранилища <> Неопределено Тогда
		
		РеквизитФормыВДанныеСотрудников(Объект);
		
		ЗаполнитьНачисленияПоСотрудникуИзХранилища(ДанныеИзХранилища);
		
		ЗаполнитьПоказателиПоСотрудникуИзХранилища(ДанныеИзХранилища);
		
		ИзменяемыеПоказатели = ИзменяемыеПоказатели(Объект.Начисление);
		ДанныеСотрудниковВРеквизитФормы(ИзменяемыеПоказатели);
		ФОТСотрудниковВРеквизитФормы();
		
		ЗаполнитьЗначенияСовокупныхСтавокПоСотрудникуИзХранилища(ДанныеИзХранилища);
		
		УстановитьДоступностьКомандыЗаполнитьПоказатели();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоСотрудникуИзХранилища(ДанныеИзХранилища)
	
	Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
	
	Отбор = Новый Структура;
	Для каждого НачислениеСотрудника Из ДанныеИзХранилища.Начисления Цикл
		
		Если Не НачислениеСотрудника.Начисление = Объект.Начисление Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Вставить("Сотрудник", Сотрудник);
		СтрокиСотрудника = Объект.Сотрудники.НайтиСтроки(Отбор);		
		Для каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
			СтрокаСотрудника.Размер = НачислениеСотрудника.Размер;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПоСотрудникуИзХранилища(ДанныеИзХранилища)
	
	Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
	
	УдалитьПоказателиПоСотруднику(Сотрудник);
	
	Для каждого ПоказательСотрудника Из ДанныеИзХранилища.Показатели Цикл
		Для каждого КолонкаПоказателя Из ЭтотОбъект.КолонкиПоказателей Цикл
			Если КолонкаПоказателя.Значение = ПоказательСотрудника.Показатель Тогда
				НоваяСтрока = Объект.ПоказателиСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоказательСотрудника);
				НоваяСтрока.Сотрудник = Сотрудник;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСовокупныхСтавокПоСотрудникуИзХранилища(ДанныеИзХранилища)
	
	ТаблицаНачислений = Новый ТаблицаЗначений();
	ТаблицаНачислений.Колонки.Добавить("Сотрудник");
	ТаблицаНачислений.Колонки.Добавить("Начисление");
	ТаблицаНачислений.Колонки.Добавить("Размер");
	ТаблицаНачислений.Колонки.Добавить("Действие");
	
	Для каждого СтрокаНачисления Из ДанныеИзХранилища.Начисления Цикл
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления, "Начисление,Размер,Действие");
	КонецЦикла;
	
	ТаблицаПоказателей = Новый ТаблицаЗначений();
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник");
	ТаблицаПоказателей.Колонки.Добавить("Показатель");
	ТаблицаПоказателей.Колонки.Добавить("Значение");
	
	Для каждого СтрокаНачисления Из ДанныеИзХранилища.Показатели Цикл
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.Сотрудник = ДанныеИзХранилища.ВладелецНачисленийИУдержаний;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления, "Показатель,Значение");
	КонецЦикла;
	
	ЗаполнитьЗначенияСовокупныхТарифныхСтавокСотрудников(ТаблицаНачислений, ТаблицаПоказателей);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПервоначальныеЗначения()
	ЗначенияДляЗаполнения = Новый Структура;
	ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
	
	Если Параметры.ЗначенияЗаполнения.Свойство("Организация") 
		И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация) Тогда
		Объект.Организация = Параметры.ЗначенияЗаполнения.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗначенияДляЗаполнения.Вставить("Организация", "Объект.Организация");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
		ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНазначения) Тогда
		ЗначенияДляЗаполнения.Вставить("ДатаСобытия", "Объект.ДатаНазначения");
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	Для каждого Строка Из Объект.Сотрудники Цикл
		ПрочитатьВремяРегистрацииСтроки(Объект.Ссылка, Строка);
	КонецЦикла;	

	ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Объект.Ссылка, Объект.ДатаНазначения);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрацииСтроки(Ссылка, Строка)
	Строка.ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Ссылка, Строка.ДатаНазначения);
КонецПроцедуры

&НаСервере
Функция ВремяРегистрацииСотрудников()
	
	ВремяРегистрацииСотрудников = Новый Соответствие;
	
	Для каждого Строка Из Объект.Сотрудники Цикл
		ВремяРегистрацииСотрудников.Вставить(Строка.Сотрудник, Строка.ВремяРегистрации);
	КонецЦикла;	
	
	Возврат ВремяРегистрацииСотрудников;
	
КонецФункции

&НаСервере
Функция ПостоянныеПоказателиНачисления(Начисление) 
	
	ПостоянныеПоказатели = Новый Массив;
	
	ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
	Для Каждого СтрокаПоказателя Из ИнфоОВидеРасчета.Показатели Цикл
		Если ЭтоПостоянныйПоказатель(СтрокаПоказателя) Тогда
			ПостоянныеПоказатели.Добавить(СтрокаПоказателя.Показатель);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ПостоянныеПоказатели;
	
КонецФункции

&НаСервере
Функция ЭтоПостоянныйПоказатель(СтрокаПоказателя) 
	
	ЭтоПостоянныйПоказатель = Истина;
	
	Если СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
		ПоказательИнфо = ЗарплатаКадрыРасширенныйПовтИсп.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
		Если ПоказательИнфо.СпособПримененияЗначений <> Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное
			Или ПоказательИнфо.ЗначениеРассчитываетсяАвтоматически Тогда
			ЭтоПостоянныйПоказатель = Ложь;	
		КонецЕсли;
	Иначе
		ЭтоПостоянныйПоказатель = Ложь;	
	КонецЕсли;

	Возврат ЭтоПостоянныйПоказатель;
	
КонецФункции

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеПоказателейНаСервере(ЗначенияПоказателей)
	
	Для Каждого СтрокаСотрудника Из Объект.Сотрудники Цикл
		
		Для каждого КолонкаПоказатель Из КолонкиПоказателей Цикл
			ЗначениеПоказателя = ЗначенияПоказателей[КолонкаПоказатель.Значение];
			Если ЗначениеПоказателя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(КолонкаПоказатель.Значение) = Тип("СправочникСсылка.ПоказателиРасчетаЗарплаты") Тогда	
				СтрокаСотрудника[КолонкаПоказатель.Ключ] = ЗначениеПоказателя;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ПлановыеНачисленияПоказателиСотрудников = ПлановыеНачисленияПоказателиСотрудниковСИзменениямиДокумента();
	ФОТПлановыхНачисленийСотрудников = ФОТПлановыхНачисленийСотрудниковСИзменениямиДокумента(ПлановыеНачисленияПоказателиСотрудников);
	ЗаполнитьФОТНачисленийСотрудников(ФОТПлановыхНачисленийСотрудников);
	ФОТСотрудников = ФОТСотрудниковПоОписаниюНачислений(ФОТПлановыхНачисленийСотрудников);
	ЗаполнитьЗначенияСовокупныхТарифныхСтавокСотрудников(ПлановыеНачисленияПоказателиСотрудников.НачисленияСотрудников, ПлановыеНачисленияПоказателиСотрудников.ПоказателиСотрудников);	
	
	ИзменяемыеПоказатели = ИзменяемыеПоказатели(Объект.Начисление);
	ДанныеСотрудниковВРеквизитФормы(ИзменяемыеПоказатели);
	ФОТСотрудниковВРеквизитФормы(ФОТСотрудников);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыВыбораНачисленияДоступнымиКатегориями()
	
	ИмяЭлемента = "Начисление";
	ИмяПараметраВыбора = "Отбор.КатегорияНачисленияИлиНеоплаченногоВремени";
	ДоступныеКатегории = РасчетЗарплатыРасширенный.КатегорииНачисленийРазрешеноРедактированиеПризнакаВводаНесколькихНачислений();
	
	ПараметрыВыбораЭлемента = ПараметрыВыбораЭлемента(ЭтотОбъект.Элементы, ИмяЭлемента);
	
	УдалитьПараметрВыбораИзКоллекции(ПараметрыВыбораЭлемента, ИмяПараметраВыбора);
	
	ДополнитьПараметрыВыбора(ПараметрыВыбораЭлемента, ИмяПараметраВыбора, Новый ФиксированныйМассив(ДоступныеКатегории));
	
	УстановитьПараметрыВыбораЭлементу(ЭтотОбъект.Элементы, ИмяЭлемента, Новый ФиксированныйМассив(ПараметрыВыбораЭлемента));
	
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораЭлемента(Элементы, ИмяЭлемента)
	
	МассивПараметровВыбора = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, ИмяЭлемента, "ПараметрыВыбора");
	
	Если МассивПараметровВыбора = Неопределено Тогда
		МассивПараметровВыбора = Новый Массив;
	иначе
		МассивПараметровВыбора = Новый Массив(МассивПараметровВыбора)
	КонецЕсли;
	
	Возврат МассивПараметровВыбора;
	
КонецФункции

&НаСервере
Процедура УдалитьПараметрВыбораИзКоллекции(МассивПараметровВыбора, ИмяПараметраВыбора)
	Индекс = МассивПараметровВыбора.Найти(ИмяПараметраВыбора);
	Если Не Индекс = Неопределено Тогда
		МассивПараметровВыбора.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыВыбора(ПараметрыВыбораЭлемента, ИмяПараметра, ЗначениеПараметра)
	НовыйПараметр = Новый ПараметрВыбора(ИмяПараметра, ЗначениеПараметра);		
	ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораЭлементу(Элементы, ИмяЭлемента, ПараметрыВыбораЭлемента)
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ПараметрыВыбора", ПараметрыВыбораЭлемента);
КонецПроцедуры

#КонецОбласти

