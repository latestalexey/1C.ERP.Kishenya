#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь) Тогда
		
		// Бронирование позиции
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_ПодтверждениеБронированияПозиции";
		КомандаПечати.Представление = НСтр("ru='Подтверждение брони';uk='Підтвердження броні'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФункциональныеОпции = "ИспользоватьБронированиеПозиций";
			
		// Приказ о переводе
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
		КомандаПечати.Идентификатор = "ПФ_MXL_Перевод";
		КомандаПечати.Представление = НСтр("ru='Приказ о переводе';uk='Наказ про переведення'");
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если КадровыйУчетРасширенный.ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.КадровыйПеревод);
		
	КонецЕсли; 
	
КонецФункции

Процедура РассчитатьФОТПоДокументу(ДокументОбъект) Экспорт
	
	Если НЕ ДокументОбъект.ИзменитьНачисления Тогда
		Возврат;
	КонецЕсли; 
	
	// Подготовка к расчету ФОТ
	РассчитываемыеОбъекты = Новый Соответствие;
	
	Сотрудники = Новый Соответствие;
	
	ОписаниеСотрудника = Новый Структура;
	ОписаниеСотрудника.Вставить("Организация", ДокументОбъект.ОбособленноеПодразделение);
	ОписаниеСотрудника.Вставить("ДатаРасчета", ДокументОбъект.ДатаНачала);
	
	Если ДокументОбъект.ИзменитьПодразделениеИДолжность Тогда
		ОписаниеСотрудника.Вставить("Подразделение", ДокументОбъект.Подразделение);
		ОписаниеСотрудника.Вставить("КоличествоСтавок", ДокументОбъект.КоличествоСтавок);
	КонецЕсли;
	
	Если ДокументОбъект.ИзменитьГрафикРаботы Тогда
		ОписаниеСотрудника.Вставить("ГрафикРаботы", ДокументОбъект.ГрафикРаботы);
	КонецЕсли; 
	
	ОписаниеСотрудника.Вставить("Начисления", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
	ОписаниеСотрудника.Вставить("Показатели", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
	
	СписокНачислений = Новый Массив;
	Для Каждого СтрокаНачисления Из ДокументОбъект.Начисления Цикл
		
		Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
		ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
		ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
		ДанныеНачисления.Размер = 0;
		
		ПоказателиНачисления = ДокументОбъект.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", СтрокаНачисления.ИдентификаторСтрокиВидаРасчета));
		Для Каждого СтрокаПоказателя Из ПоказателиНачисления Цикл
			ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
			ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
			ДанныеПоказателя.ДокументОснование = СтрокаНачисления.ДокументОснование;
			ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Сотрудники.Вставить(ДокументОбъект.Сотрудник, ОписаниеСотрудника);
	
	РассчитываемыеОбъекты.Вставить(ДокументОбъект.Ссылка, Сотрудники);
	
	// Расчет ФОТ
	РасчетЗарплатыРасширенный.РассчитатьФОТСотрудников(РассчитываемыеОбъекты, ДокументОбъект.ОбособленноеПодразделение, ДокументОбъект.ДатаНачала);
	
	// Заполнение документа результатами расчета.
	ОписаниеОбъекта = РассчитываемыеОбъекты.Получить(ДокументОбъект.Ссылка);
	ОписаниеСотрудника = ОписаниеОбъекта.Получить(ДокументОбъект.Сотрудник);
	
	Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Начисления Цикл
		
		Отбор = Новый Структура("Начисление, ДокументОснование", ОписаниеНачисления.Начисление, ОписаниеНачисления.ДокументОснование);
		СтрокиДокумента = ДокументОбъект.Начисления.НайтиСтроки(Отбор);
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокиДокумента[0].Размер = ОписаниеНачисления.Размер;
		КонецЕсли; 
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДокументОбъект.Движения.ПлановыеНачисления, ДокументОбъект.Начисления);
	
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная, ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ДанныеДляПроверкиОграничений.Подразделение = Объект.Подразделение;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции


#КонецОбласти


#Область ПодготовкаДанныхДляПроведенияДокумента

Функция ДанныеДляПроведения(ДокументСсылка)
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Сотрудники.Ссылка.Организация КАК Организация,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ДатаНачала,
		|	Сотрудники.ДатаОкончания,
		|	Сотрудники.ОбособленноеПодразделение,
		|	Сотрудники.ИзменитьПодразделениеИДолжность,
		|	Сотрудники.ИзменитьГрафикРаботы,
		|	Сотрудники.ИзменитьНачисления,
		|	Сотрудники.ИзменитьЕжегодныеОтпуска,
		|	Сотрудники.ИзменитьАванс,
		|	Сотрудники.ИзменитьЛьготы,
		|	Сотрудники.ИзменитьСведенияОДоговореКонтракте,
		|	Сотрудники.ИзменитьКатегорияЕСВ,
		|	Сотрудники.Ссылка.НачисленияУтверждены КАК НачисленияУтверждены,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.ВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
		|	Сотрудники.КоличествоСтавок,
		|	Сотрудники.ГрафикРаботы,
		|	Сотрудники.СпособРасчетаАванса,
		|	Сотрудники.Аванс,
		|	Сотрудники.ПричинаПеревода,
		|	Сотрудники.ОснованиеПеревода,
		|	Сотрудники.Ссылка.Руководитель КАК Руководитель,
		|	Сотрудники.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	Сотрудники.СпособОтраженияЗарплатыВБухучете,
		|	Сотрудники.СтатьяФинансирования,
		|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	Сотрудники.СовокупнаяТарифнаяСтавка,
		|	Сотрудники.ВидТарифнойСтавки,
		|	Сотрудники.РазрядКатегория,
		|	Сотрудники.ПКУ,
		|	Сотрудники.КатегорияЕСВ,
		|	Сотрудники.СменаВидаДоговора,
		|	Сотрудники.Ссылка.ВидДоговора КАК ВидДоговора,
		|	Сотрудники.ТрудовойДоговорНомер,
		|	Сотрудники.ТрудовойДоговорДата,
		|	Сотрудники.СрочныйДоговор,
		|	Сотрудники.ДатаЗавершенияТрудовогоДоговора,
		|	Сотрудники.ОснованиеСрочногоДоговора,
		|	Сотрудники.СрокЗаключенияДоговора,
		|	Сотрудники.Ссылка.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	Сотрудники.СпособПоступленияНаСлужбу,
		|	Сотрудники.ПоступлениеНаСлужбуВпервые,
		|	Сотрудники.ВидАктаГосоргана,
		|	Сотрудники.ОборудованиеРабочегоМеста,
		|	Сотрудники.ИныеУсловияДоговора,
		|	Сотрудники.Грейд,
		|	Сотрудники.Территория,
		|	Сотрудники.ПринятНаНовоеРабочееМесто,
		|	Сотрудники.ИзменениеДолжности,
		|	Сотрудники.ПредыдущаяДолжность
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.КадровыйПеревод КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком.Сотрудники");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Аванс,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	Сотрудники.КоличествоСтавок,
		|	Сотрудники.ВидСобытия,
		|	Сотрудники.ГрафикРаботы,
		|	Сотрудники.СпособРасчетаАванса,
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.ВидДоговора,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ПринятНаНовоеРабочееМесто,
		|	Сотрудники.ИзменениеДолжности,
		|	Сотрудники.ПредыдущаяДолжность
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьПодразделениеИДолжность";
		
	// Таблица для формирования кадровых движений.
	КадровыеДвижения = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ГрафикРаботы,
		|	Сотрудники.ВидСобытия
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьГрафикРаботы";
		
	// Таблица для формирования истории графиков.
	ГрафикРаботыСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ГрафикРаботыСотрудников", ГрафикРаботыСотрудников);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ВидСобытия,
		|	Сотрудники.Аванс,
		|	Сотрудники.СпособРасчетаАванса,
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьАванс
		|	И Сотрудники.НачисленияУтверждены";
		
	// Таблица для формирования движений авансов.
	ПлановыеВыплаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПлановыеВыплаты", ПлановыеВыплаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.ДокументОснование,
		|	ВЫБОР
		|		КОГДА Начисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	Начисления.ХарактерНачисления
		|ИЗ
		|	Документ.КадровыйПеревод.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|			И (Сотрудники.ИзменитьНачисления)
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И Начисления.Ссылка.НачисленияУтверждены
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.ДатаНачала,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Льготы.Льгота,
		|	Льготы.ДокументОснование,
		|	ВЫБОР
		|		КОГДА Льготы.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	Льготы.Размер,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация,
		|	NULL
		|ИЗ
		|	Документ.КадровыйПеревод.Льготы КАК Льготы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Льготы.Ссылка = Сотрудники.Ссылка
		|			И (Сотрудники.ИзменитьЛьготы)
		|ГДЕ
		|	Льготы.Ссылка = &Ссылка";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.Сотрудник = Сотрудники.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Льготы.Ссылка = Сотрудники.Ссылка", "ПО Льготы.Ссылка = Сотрудники.Ссылка И Льготы.Сотрудник = Сотрудники.Сотрудник");
	КонецЕсли;
	
	// Таблица для формирования плановых начислений.
	ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация,
		|	Показатели.Показатель,
		|	Начисления.ДокументОснование,
		|	Показатели.Значение,
		|	Начисления.Действие,
		|	Сотрудники.ОбособленноеПодразделение,
		|	Начисления.ХарактерНачисления
		|ПОМЕСТИТЬ ВТПоказателиНачислений
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Показатели КАК Показатели
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Начисления КАК Начисления
		|			ПО Показатели.Ссылка = Начисления.Ссылка
		|				И Показатели.ИдентификаторСтрокиВидаРасчета = Начисления.ИдентификаторСтрокиВидаРасчета
		|				И (Начисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|		ПО Сотрудники.Ссылка = Показатели.Ссылка
		|ГДЕ
		|	Сотрудники.Ссылка = &Ссылка
		|	И Сотрудники.НачисленияУтверждены
		|	И (Сотрудники.ИзменитьНачисления
		|			ИЛИ Сотрудники.Организация <> Сотрудники.ОбособленноеПодразделение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка,
		|	Сотрудники.ДатаНачала,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация,
		|	Показатели.Показатель,
		|	Льготы.ДокументОснование,
		|	Показатели.Значение,
		|	Льготы.Действие,
		|	Сотрудники.ОбособленноеПодразделение,
		|	NULL
		|ИЗ
		|	Документ.КадровыйПеревод.Показатели КАК Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Льготы КАК Льготы
		|		ПО Показатели.Ссылка = Льготы.Ссылка
		|			И (Показатели.Ссылка = &Ссылка)
		|			И Показатели.ИдентификаторСтрокиВидаРасчета = Льготы.ИдентификаторСтрокиВидаРасчета
		|			И (Льготы.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|			И (Сотрудники.ИзменитьЛьготы
		|				ИЛИ Сотрудники.Организация <> Сотрудники.ОбособленноеПодразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиНачислений.ДатаСобытия,
		|	ПоказателиНачислений.ДействуетДо,
		|	ПоказателиНачислений.Сотрудник,
		|	ПоказателиНачислений.ФизическоеЛицо,
		|	ПоказателиНачислений.Организация,
		|	ПоказателиНачислений.Показатель,
		|	ПоказателиНачислений.ДокументОснование,
		|	ПоказателиНачислений.Значение,
		|	ПоказателиНачислений.Действие,
		|	ПоказателиНачислений.ОбособленноеПодразделение,
		|	ПоказателиНачислений.ХарактерНачисления
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	ВТПоказателиНачислений КАК ПоказателиНачислений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.ДатаНачала,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация,
		|	Показатели.Показатель,
		|	НЕОПРЕДЕЛЕНО,
		|	Показатели.Значение,
		|	ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.ПустаяСсылка),
		|	Сотрудники.ОбособленноеПодразделение,
		|	NULL
		|ИЗ
		|	Документ.КадровыйПеревод.Показатели КАК Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|			И (Показатели.ИдентификаторСтрокиВидаРасчета = 0)
		|			И (Сотрудники.НачисленияУтверждены)
		|			И (Сотрудники.ИзменитьНачисления
		|				ИЛИ Сотрудники.Организация <> Сотрудники.ОбособленноеПодразделение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиНачислений КАК ПоказателиНачислений
		|		ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка
		|			И (Сотрудники.ДатаНачала = ПоказателиНачислений.ДатаСобытия)
		|			И Показатели.Показатель = ПоказателиНачислений.Показатель
		|ГДЕ
		|	Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|	И ПоказателиНачислений.Показатель ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Организация,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Показатели.Организация <> Показатели.ОбособленноеПодразделение
		|				ТОГДА 0
		|			ИНАЧЕ Показатели.Значение
		|		КОНЕЦ) КАК Значение,
		|	Показатели.Действие КАК Действие,
		|	Показатели.ХарактерНачисления
		|ИЗ
		|	ВТПоказатели КАК Показатели
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.Организация,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	Показатели.Действие,
		|	Показатели.ХарактерНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.Показатель,
		|	Показатели.ДокументОснование,
		|	МАКСИМУМ(Показатели.Значение),
		|	Показатели.Действие,
		|	NULL
		|ИЗ
		|	ВТПоказатели КАК Показатели
		|ГДЕ
		|	Показатели.Организация <> Показатели.ОбособленноеПодразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	Показатели.ДатаСобытия,
		|	Показатели.ДействуетДо,
		|	Показатели.Сотрудник,
		|	Показатели.ФизическоеЛицо,
		|	Показатели.ОбособленноеПодразделение,
		|	Показатели.Показатель,
		|	Показатели.Действие,
		|	Показатели.ДокументОснование";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.Сотрудник = Сотрудники.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Льготы.Ссылка = Сотрудники.Ссылка", "ПО Льготы.Ссылка = Сотрудники.Ссылка И Льготы.Сотрудник = Сотрудники.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Начисления.Ссылка", "ПО Показатели.Ссылка = Начисления.Ссылка И Показатели.Сотрудник = Начисления.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Льготы.Ссылка", "ПО Показатели.Ссылка = Льготы.Ссылка И Показатели.Сотрудник = Льготы.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.Сотрудник = Сотрудники.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Сотрудники.Ссылка = Показатели.Ссылка", "ПО Сотрудники.Ссылка = Показатели.Ссылка И Сотрудники.Сотрудник = Показатели.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка", "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка И Показатели.Сотрудник = ПоказателиНачислений.Сотрудник");
	КонецЕсли;
	
	// Таблица для формирования значений показателей.
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Сотрудник,
		|	ЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ВЫБОР
		|		КОГДА ЕжегодныеОтпуска.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить)
		|			ТОГДА 0
		|		ИНАЧЕ ЕжегодныеОтпуска.КоличествоДнейВГод
		|	КОНЕЦ КАК КоличествоДнейВГод,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	ВЫБОР
		|		КОГДА ЕжегодныеОтпуска.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	ВЫБОР
		|		КОГДА ЕжегодныеОтпуска.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСЕжегоднымиОтпусками.Отменить)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПересчетНеТребуется
		|ПОМЕСТИТЬ ВТДвижения
		|ИЗ
		|	Документ.КадровыйПеревод.ЕжегодныеОтпуска КАК ЕжегодныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка
		|			И (Сотрудники.ИзменитьЕжегодныеОтпуска)
		|ГДЕ
		|	ЕжегодныеОтпуска.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДвижения.ДатаСобытия,
		|	ВТДвижения.Сотрудник,
		|	ВТДвижения.ВидЕжегодногоОтпуска,
		|	ВТДвижения.КоличествоДнейВГод,
		|	ВТДвижения.ДействуетДо,
		|	ВТДвижения.Используется,
		|	ВТДвижения.ПересчетНеТребуется
		|ИЗ
		|	ВТДвижения КАК ВТДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ИспользуемВозвратныеСобытия
		|ИЗ
		|	ВТДвижения КАК ВТДвижения
		|ГДЕ
		|	ВТДвижения.ДействуетДо > ДАТАВРЕМЯ(1, 1, 1)";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка", "ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка И ЕжегодныеОтпуска.Сотрудник = Сотрудники.Сотрудник");
	КонецЕсли;	
	
	// Таблица для формирования положенных видов ежегодных отпусков.
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ПоложенныеЕжегодныеОтпуска = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	
	ИспользуемВозвратныеСобытия = (НЕ РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Пустой());
	Если НЕ ИспользуемВозвратныеСобытия Тогда
		ПоложенныеЕжегодныеОтпуска.Колонки.Удалить("ДействуетДо");
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ЕжегодныеОтпуска", ПоложенныеЕжегодныеОтпуска);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Организация КАК Организация,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Показатели.Показатель КАК Показатель,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо,
		|	ВЫБОР
		|		КОГДА Показатели.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Применение
		|ИЗ
		|	Документ.КадровыйПеревод.Показатели КАК Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|			И (Сотрудники.НачисленияУтверждены)
		|			И (Сотрудники.ИзменитьНачисления
		|				ИЛИ Сотрудники.ИзменитьЛьготы)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиНачислений КАК ПоказателиНачислений
		|		ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка
		|			И (Сотрудники.ДатаНачала = ПоказателиНачислений.ДатаСобытия)
		|			И Показатели.Показатель = ПоказателиНачислений.Показатель
		|ГДЕ
		|	Показатели.Ссылка = &Ссылка
		|	И Показатели.ИдентификаторСтрокиВидаРасчета = 0
		|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|	И ПоказателиНачислений.Показатель ЕСТЬ NULL ";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.Сотрудник = Сотрудники.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка", "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка И Показатели.Сотрудник = ПоказателиНачислений.Сотрудник");
	КонецЕсли;	
	
	// Таблица для формирования применения дополнительных показателей.
	ПрименениеДополнительныхПоказателей = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПрименениеДополнительныхПоказателей", ПрименениеДополнительныхПоказателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.НачисленияУтверждены
		|	И (Сотрудники.ИзменитьНачисления
		|			ИЛИ Сотрудники.ИзменитьЛьготы)";
		
	// Таблица для формирования значений порядка пересчета тарифной ставки.
	ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА Сотрудники.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ Сотрудники.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.НачисленияУтверждены
		|	И (Сотрудники.ИзменитьНачисления
		|			ИЛИ Сотрудники.ИзменитьЛьготы)";
		
	// Таблица для формирования значений совокупной тарифной ставки.
	ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.РазрядКатегория КАК РазрядКатегория,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьПодразделениеИДолжность";
		
	// Таблица для формирования значений разряда сотрудника.
	РазрядыКатегорииСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("РазрядыКатегорииСотрудников", РазрядыКатегорииСотрудников);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
		
	// Таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.СменаВидаДоговора
		|				И НЕ Сотрудники.ТрудовойДоговорДата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Сотрудники.ТрудовойДоговорДата
		|		ИНАЧЕ Сотрудники.ДатаНачала
		|	КОНЕЦ КАК Период,
		|	Сотрудники.ДатаНачала,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация,
		|	Сотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
		|	Сотрудники.ТрудовойДоговорНомер КАК НомерДоговораКонтракта,
		|	Сотрудники.ТрудовойДоговорДата КАК ДатаДоговораКонтракта,
		|	Сотрудники.Руководитель КАК ПредставительНанимателя,
		|	Сотрудники.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
		|	Сотрудники.ОснованиеПредставителяНанимателя,
		|	Сотрудники.ВидАктаГосоргана,
		|	Сотрудники.ПоступлениеНаСлужбуВпервые,
		|	Сотрудники.СпособПоступленияНаСлужбу,
		|	Сотрудники.СрочныйДоговор,
		|	Сотрудники.СрокЗаключенияДоговора,
		|	Сотрудники.ОснованиеСрочногоДоговора,
		|	Сотрудники.ОборудованиеРабочегоМеста,
		|	Сотрудники.ИныеУсловияДоговора
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.СменаВидаДоговора = ИСТИНА
		|	И Сотрудники.ИзменитьСведенияОДоговореКонтракте = ИСТИНА";
		
	// Таблица для формирования описаний договоров сотрудников.
	СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СведенияОКонтрактахДоговорахСоСменойВидаДоговора", СведенияОКонтрактахДоговорах);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.СменаВидаДоговора
		|				И НЕ Сотрудники.ТрудовойДоговорДата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Сотрудники.ТрудовойДоговорДата
		|		ИНАЧЕ Сотрудники.ДатаНачала
		|	КОНЕЦ КАК Период,
		|	Сотрудники.ДатаНачала,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация,
		|	Сотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
		|	Сотрудники.ТрудовойДоговорНомер КАК НомерДоговораКонтракта,
		|	Сотрудники.ТрудовойДоговорДата КАК ДатаДоговораКонтракта,
		|	Сотрудники.Руководитель КАК ПредставительНанимателя,
		|	Сотрудники.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
		|	Сотрудники.ОснованиеПредставителяНанимателя,
		|	Сотрудники.ВидАктаГосоргана,
		|	Сотрудники.ПоступлениеНаСлужбуВпервые,
		|	Сотрудники.СпособПоступленияНаСлужбу,
		|	Сотрудники.СрочныйДоговор,
		|	Сотрудники.СрокЗаключенияДоговора,
		|	Сотрудники.ОснованиеСрочногоДоговора,
		|	Сотрудники.ОборудованиеРабочегоМеста,
		|	Сотрудники.ИныеУсловияДоговора
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.СменаВидаДоговора = ЛОЖЬ
		|	И Сотрудники.ИзменитьСведенияОДоговореКонтракте = ИСТИНА";
		
	// Таблица для формирования описаний договоров сотрудников.
	СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СведенияОКонтрактахДоговорах", СведенияОКонтрактахДоговорах);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК Период,
		|	Сотрудники.Сотрудник,
		|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Территория,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьПодразделениеИДолжность";
	
	// Набор сведений для проведения по территориям сотрудников
	СведенияОТерриторияхСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ТерриторииСотрудников", СведенияОТерриторияхСотрудников);
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.КатегорияЕСВ
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьКатегорияЕСВ";
	
	// Данные ЕСВ
	ДанныеОЕСВСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеОЕСВСотрудников", ДанныеОЕСВСотрудников);

	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод") Тогда
			ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияСписочногоКадровогоПриказа(ДокументСсылка, "КадровыйПереводСписком", "ДатаНачала", "ДатаОкончания");
		Иначе
			ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияГрейдыСотрудников(ДокументСсылка, "ДатаНачала", "ДатаОкончания");
		КонецЕсли;
		ДанныеДляПроведения.Вставить("ДанныеГрейдовСотрудников", ДанныеГрейдовСотрудников);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		ДанныеКадровогоРезерва = Модуль.ДанныеКадровогоПереводаДляКадровогоРезерва(ДокументСсылка);
		ДанныеДляПроведения.Вставить("ДанныеКадровогоРезерва", ДанныеКадровогоРезерва);
	КонецЕсли;
	
	// Данные для Реестра кадровых приказов
	ДанныеРеестраКадровыхПриказов = КадровыйУчетРасширенный.ТаблицаРеестраКадровыхПриказов();
	НомерПриказа = "";
	ДатаПриказа = Дата(1, 1, 1);
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КадровыйПеревод") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.Ссылка КАК ДокументОснование,
		|	КадровыйПеревод.Номер КАК НомерПриказа,
		|	КадровыйПеревод.Дата КАК ДатаПриказа,
		|	КадровыйПеревод.Подразделение,
		|	КадровыйПеревод.Должность,
		|	КадровыйПеревод.ВидДоговора,
		|	КадровыйПеревод.ДатаНачала КАК Дата,
		|	КадровыйПеревод.СменаВидаДоговора,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
		|	КадровыйПеревод.РазрядКатегория КАК Разряд,
		|	КадровыйПеревод.ДатаОкончания,
		|	КадровыйПеревод.Показатели.(
		|		Ссылка,
		|		НомерСтроки,
		|		ИдентификаторСтрокиВидаРасчета,
		|		Показатель,
		|		Значение
		|	),
		|	КадровыйПеревод.Начисления.(
		|		Ссылка,
		|		НомерСтроки,
		|		Начисление,
		|		ИдентификаторСтрокиВидаРасчета,
		|		Размер,
		|		Действие
		|	)
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка = &Ссылка
		|	И КадровыйПеревод.ИзменитьПодразделениеИДолжность";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СменаВидаДоговора Тогда
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				НоваяСтрока.Дата 		= НачалоДня(Выборка.Дата) - 1;
				НоваяСтрока.ВидСобытия 	= Перечисления.ВидыКадровыхСобытий.Увольнение;
				
				НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				НоваяСтрока.Должность = Справочники.Должности.ПустаяСсылка();
				
				КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
					Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяСтрока.Дата);
				
				НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
				
				Номер = Номер + 1;
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				НоваяСтрока.ВидСобытия 	= Перечисления.ВидыКадровыхСобытий.Прием;
				
				НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(Выборка.Начисления.Выгрузить(), Выборка.Показатели.Выгрузить(), Истина);			
				
				НомерПриказа = Выборка.НомерПриказа;
				ДатаПриказа = Выборка.ДатаПриказа;
				
			Иначе
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(Выборка.Начисления.Выгрузить(), Выборка.Показатели.Выгрузить(), Истина);			
				
				Номер = Номер + 1;
				
				НомерПриказа = Выборка.НомерПриказа;
				ДатаПриказа = Выборка.ДатаПриказа;
				
				Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
					
					КадровыйУчетРасширенный.ДополнитьТаблицуВозвратнымиДанными(ДокументСсылка, Выборка.Сотрудник, Выборка.ДатаОкончания, ДанныеРеестраКадровыхПриказов, Номер)
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КадровыйПереводСпискомСотрудники.Ссылка КАК Регистратор,
			|	КадровыйПереводСпискомСотрудники.Сотрудник,
			|	КадровыйПереводСпискомСотрудники.ФизическоеЛицо,
			|	КадровыйПереводСпискомСотрудники.Ссылка КАК ДокументОснование,
			|	КадровыйПереводСпискомСотрудники.Подразделение,
			|	КадровыйПереводСпискомСотрудники.Должность,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
			|	КадровыйПереводСпискомСотрудники.РазрядКатегория КАК Разряд,
			|	КадровыйПереводСпискомСотрудники.Ссылка.Номер КАК НомерПриказа,
			|	КадровыйПереводСпискомСотрудники.Ссылка.Дата КАК ДатаПриказа,
			|	КадровыйПереводСпискомСотрудники.Ссылка.ВидДоговора КАК ВидДоговора,
			|	КадровыйПереводСпискомСотрудники.ДатаНачала КАК Дата,
			|	КадровыйПереводСпискомСотрудники.СменаВидаДоговора,
			|	КадровыйПереводСпискомСотрудники.ДатаОкончания
			|ИЗ
			|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
			|ГДЕ
			|	КадровыйПереводСпискомСотрудники.Ссылка = &Ссылка
			|	И КадровыйПереводСпискомСотрудники.ИзменитьПодразделениеИДолжность
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыйПереводСпискомНачисления.Ссылка КАК Регистратор,
			|	КадровыйПереводСпискомНачисления.НомерСтроки,
			|	КадровыйПереводСпискомНачисления.Сотрудник КАК Сотрудник,
			|	КадровыйПереводСпискомНачисления.Начисление,
			|	КадровыйПереводСпискомНачисления.ИдентификаторСтрокиВидаРасчета,
			|	КадровыйПереводСпискомНачисления.Размер,
			|	КадровыйПереводСпискомНачисления.Действие
			|ИЗ
			|	Документ.КадровыйПереводСписком.Начисления КАК КадровыйПереводСпискомНачисления
			|ГДЕ
			|	КадровыйПереводСпискомНачисления.Ссылка = &Ссылка
			|	И КадровыйПереводСпискомНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор,
			|	Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадровыйПереводСпискомПоказатели.Ссылка КАК Регистратор,
			|	КадровыйПереводСпискомПоказатели.НомерСтроки,
			|	КадровыйПереводСпискомПоказатели.Сотрудник КАК Сотрудник,
			|	КадровыйПереводСпискомПоказатели.ИдентификаторСтрокиВидаРасчета,
			|	КадровыйПереводСпискомПоказатели.Показатель,
			|	КадровыйПереводСпискомПоказатели.Значение
			|ИЗ
			|	Документ.КадровыйПереводСписком.Показатели КАК КадровыйПереводСпискомПоказатели
			|ГДЕ
			|	КадровыйПереводСпискомПоказатели.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор,
			|	Сотрудник";
		
		Результат = Запрос.ВыполнитьПакет();
		
		Начисления = Результат[1].Выгрузить();
		Показатели = Результат[2].Выгрузить();
		
		Выборка = Результат[0].Выбрать();
		
		Отбор = Новый Структура("Регистратор, Сотрудник");
		
		Номер = 1;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СменаВидаДоговора Тогда 
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				НоваяСтрока.Дата 		= НачалоДня(Выборка.Дата) - 1;
				НоваяСтрока.ВидСобытия 	= Перечисления.ВидыКадровыхСобытий.Увольнение;
				
				НоваяСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				НоваяСтрока.Должность = Справочники.Должности.ПустаяСсылка();
				
				КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
					Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяСтрока.Дата);
				
				НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;
				
				Номер = Номер + 1;
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				НоваяСтрока.ВидСобытия 	= Перечисления.ВидыКадровыхСобытий.Прием;
				
				Отбор.Регистратор = Выборка.Регистратор;
				Отбор.Сотрудник = Выборка.Сотрудник;
				
				СтрокиНачислений  = Начисления.Скопировать(Отбор);
				СтрокиПоказателей = Показатели.Скопировать(Отбор);
				
				НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачислений, СтрокиПоказателей, Истина);
				
				Номер = Номер + 1;
				
				НомерПриказа = Выборка.НомерПриказа;
				ДатаПриказа = Выборка.ДатаПриказа;
				
			Иначе
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				Отбор.Регистратор = Выборка.Регистратор;
				Отбор.Сотрудник = Выборка.Сотрудник;
				
				СтрокиНачислений  = Начисления.Скопировать(Отбор);
				СтрокиПоказателей = Показатели.Скопировать(Отбор);
				
				НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачислений, СтрокиПоказателей, Истина);
				
				НомерПриказа = Выборка.НомерПриказа;
				ДатаПриказа = Выборка.ДатаПриказа;
				
				Номер = Номер + 1;
				
				Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
					
					КадровыйУчетРасширенный.ДополнитьТаблицуВозвратнымиДанными(ДокументСсылка, Выборка.Сотрудник, Выборка.ДатаОкончания, ДанныеРеестраКадровыхПриказов, Номер);
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(ДатаПриказа, НомерПриказа);
	
	ДанныеРеестраКадровыхПриказов.ЗаполнитьЗначения(Основание, "Основание");
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраКадровыхПриказов", ДанныеРеестраКадровыхПриказов);
	
	// Данные для формирования значений ПКУ сотрудника.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаНачала КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ПКУ КАК ПКУ,
		|	ВЫБОР
		|		КОГДА Сотрудники.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
		|		ИНАЧЕ Сотрудники.ДатаОкончания
		|	КОНЕЦ КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ИзменитьПодразделениеИДолжность";
	
	ПКУСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПКУСотрудников", ПКУСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗанятыеПозицииШтатногоРасписания.Сотрудник КАК Сотрудник,
		|	Сотрудники.ДатаНачала КАК ДатаЗанятияСтавки,
		|	Сотрудники.ДатаОкончания,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.КоличествоСтавок,
		|	МАКСИМУМ(ЗанятыеПозицииШтатногоРасписания.Период) КАК ДатаОсвобождения
		|ИЗ
		|	РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО ЗанятыеПозицииШтатногоРасписания.Сотрудник = Сотрудники.Сотрудник
		|			И ЗанятыеПозицииШтатногоРасписания.Период > Сотрудники.ДатаНачала
		|ГДЕ
		|	ЗанятыеПозицииШтатногоРасписания.УсловноеДвижение
		|	И ЗанятыеПозицииШтатногоРасписания.Регистратор <> &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ДатаНачала,
		|	Сотрудники.ДатаОкончания,
		|	Сотрудники.ДолжностьПоШтатномуРасписанию,
		|	Сотрудники.КоличествоСтавок,
		|	ЗанятыеПозицииШтатногоРасписания.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗанятыеПозицииШтатногоРасписания.КоличествоСтавок * ВЫБОР
		|			КОГДА ЗанятыеПозицииШтатногоРасписания.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА 1
		|			ИНАЧЕ -1
		|		КОНЕЦ) > 0";
	
	ДанныеВременноОсвобожденныхПозиций = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеВременноОсвобожденныхПозиций", ДанныеВременноОсвобожденныхПозиций);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийМодуляДокумента

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	Если ДокументОбъект.ДополнительныеСвойства.Свойство("ИсключатьНеИзмененные") Тогда
		ИсключатьНеИзмененные = Истина;
	Иначе
		ИсключатьНеИзмененные = Ложь;
	КонецЕсли;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , ИсключатьНеИзмененные);
	
	// Проведение документа
	ТолькоБронированиеПозиции = ДокументОбъект.БронированиеПозиции И ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций");
	ДокументОбъект.ДополнительныеСвойства.Вставить("ТолькоБронированиеПозиции", ТолькоБронированиеПозиции);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	РасчетЗарплатыРасширенный.ИнициализироватьОтложеннуюРегистрациюПлановогоФОТ(ДокументОбъект.Движения);
	КадровыйУчетРасширенный.ИнициализироватьОтложеннуюРегистрациюТекущихКадровыхДанных(ДокументОбъект.Движения);
	
	ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ДокументОбъект, Отказ, РежимПроведения);
	ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияРегистраОстатков(
		ДокументОбъект.Движения.ЗанятыеПозицииШтатногоРасписания, ДокументОбъект.ИсправленныйДокумент);
	
	ДанныеДляПроведения = ДанныеДляПроведения(ДокументОбъект.Ссылка);

	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(
		ДокументОбъект.Движения, ДанныеДляПроведения.СотрудникиДаты, ДокументОбъект.Ссылка);
	
	Если ДанныеДляПроведения.КадровыеДвижения.Количество() > 0 Тогда
		КадровыйУчет.СформироватьКадровыеДвижения(ДокументОбъект, ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
		КадровыйУчетРасширенный.ЗарегистрироватьВРеестреКадровыхПриказов(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеРеестраКадровыхПриказов, Отказ);
	КонецЕсли;
	
	// Если производится операция бронирования позиции штатного расписания, то никаких действий больше не производится.
	Если ТолькоБронированиеПозиции Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДанныеДляПроведения.РазрядыКатегорииСотрудников.Количество() > 0 Тогда
		РазрядыКатегорииДолжностей.СформироватьДвиженияРазрядовКатегорийСотрудников(
			ДокументОбъект.Движения, ДанныеДляПроведения.РазрядыКатегорииСотрудников);
	КонецЕсли;
	
	Если ДанныеДляПроведения.ПКУСотрудников.Количество() > 0 Тогда
		РазрядыКатегорииДолжностей.СформироватьДвиженияПКУСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ПКУСотрудников);
	КонецЕсли;
	
	Если ДанныеДляПроведения.ГрафикРаботыСотрудников.Количество() Тогда
		КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(
			ДокументОбъект.Движения, ДанныеДляПроведения.ГрафикРаботыСотрудников);
	КонецЕсли;
	
	Если ДанныеДляПроведения.ПлановыеНачисления.Количество() > 0 И ДокументОбъект.НачисленияУтверждены Тогда
		
		СтруктураПлановыхНачислений = Новый Структура;
		СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
		СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
		СтруктураПлановыхНачислений.Вставить("ПрименениеДополнительныхПоказателей", ДанныеДляПроведения.ПрименениеДополнительныхПоказателей);
		
		РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ДокументОбъект, ДокументОбъект.Движения, СтруктураПлановыхНачислений, Истина);
		РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(ДокументОбъект.Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
		
	КонецЕсли;
	
	Если ДанныеДляПроведения.ЕжегодныеОтпуска.Количество() > 0 Тогда
		ОстаткиОтпусков.СформироватьДвиженияПоложенныхЕжегодныхОтпусков(ДокументОбъект.Ссылка, ДокументОбъект.Движения, ДанныеДляПроведения.ЕжегодныеОтпуска);
	КонецЕсли;
	
	Если ДанныеДляПроведения.ПлановыеВыплаты.Количество() И ДокументОбъект.НачисленияУтверждены Тогда
		РасчетЗарплаты.СформироватьДвиженияПлановыхВыплат(ДокументОбъект.Движения, ДанныеДляПроведения.ПлановыеВыплаты);
	КонецЕсли;
	
	Если ДанныеДляПроведения.СведенияОКонтрактахДоговорахСоСменойВидаДоговора.Количество() Тогда
		КонтрактыДоговорыСотрудников.СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(
			ДокументОбъект.Движения, ДанныеДляПроведения.СведенияОКонтрактахДоговорахСоСменойВидаДоговора, Истина);
	КонецЕсли;

	Если ДанныеДляПроведения.СведенияОКонтрактахДоговорах.Количество() Тогда
		КонтрактыДоговорыСотрудников.СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(
			ДокументОбъект.Движения, ДанныеДляПроведения.СведенияОКонтрактахДоговорах, Ложь);
	КонецЕсли;

	
	КадровыйУчетРасширенный.СформироватьДвиженияПоТерриториям(ДокументОбъект.Движения, ДанныеДляПроведения.ТерриторииСотрудников, ДокументОбъект.Организация);
	
	Если ДанныеДляПроведения.ДанныеВременноОсвобожденныхПозиций.Количество() > 0 Тогда
		
		КадровыйУчетРасширенный.ЗанятьСтавку(
			ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеВременноОсвобожденныхПозиций);
		
		КадровыйУчетРасширенный.ОсвободитьСтавкиПриКадровыхПереводовСВременноОсвобожденныхСтавок(
			ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеВременноОсвобожденныхПозиций);
		
	КонецЕсли;
	
	Если ДанныеДляПроведения.ДанныеОЕСВСотрудников.Количество() > 0 Тогда
		СтруктураЕСВСотрудников = Новый Структура;
		СтруктураЕСВСотрудников.Вставить("ДанныеОЕСВСотрудников", ДанныеДляПроведения.ДанныеОЕСВСотрудников);
		УчетСтраховыхВзносов.СформироватьДвиженияКатегорииЕСВ(ДокументОбъект, ДокументОбъект.Движения, СтруктураЕСВСотрудников);
	КонецЕсли;	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.СформироватьДвиженияГрейдовСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеГрейдовСотрудников);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.СформироватьДвиженияИсторииКадровогоРезерва(ДокументОбъект.Движения, ДанныеДляПроведения, "ДанныеКадровогоРезерва");
	КонецЕсли;
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(ДокументОбъект.Движения, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, ИсключатьНеИзмененные);
	КонецЕсли; 
	
	ЗарплатаКадрыРасширенный.ЗаписатьДвиженияДокумента(ДокументОбъект.Движения, Истина);
	РасчетЗарплатыРасширенный.СформироватьДвиженияПлановогоФОТОтложеннойРегистрации(ДокументОбъект.Движения, ДанныеДляПроведения.ПлановыеНачисления);
	КадровыйУчетРасширенный.ЗарегистрироватьВторичныеКадровыеДанныеПриОтложеннойРегистрации(ДокументОбъект.Движения);
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияЗначенийСовокупныхТарифныхСтавок(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеСовокупныхТарифныхСтавок);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	КонецЕсли;
	
	// Отложенная регистрация планового ФОТ
	РасчетЗарплатыРасширенный.ИнициализироватьОтложеннуюРегистрациюПлановогоФОТ(ДокументОбъект.Движения);
	КадровыйУчетРасширенный.ИнициализироватьОтложеннуюРегистрациюТекущихКадровыхДанных(ДокументОбъект.Движения);
	
	ЗарплатаКадрыРасширенный.ЗаписатьДвиженияДокумента(ДокументОбъект.Движения, Ложь);
	РасчетЗарплатыРасширенный.СформироватьДвиженияПлановогоФОТОтложеннойРегистрации(ДокументОбъект.Движения);
	КадровыйУчетРасширенный.ЗарегистрироватьВторичныеКадровыеДанныеПриОтложеннойРегистрации(ДокументОбъект.Движения);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.КадровыйПеревод КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаЗавершенияТрудовогоДоговора, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.КадровыйПеревод КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.КадровыйПеревод")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.КадровыйПеревод", "Документ.КадровыйПереводСписком.Сотрудники");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли