&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

&НаКлиенте
Перем АктивизированныйСотрудник;

&НаКлиенте
Перем СотрудникПередУдалением;

&НаКлиенте
Перем СотрудникиКРасчету Экспорт;

&НаКлиенте
Перем ЗакрытьПослеЗаписи;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.МесяцНачисления = '00010101';
		КонецЕсли;
		
		// Заполнение нового документа.
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный",
		"Объект.МесяцНачисления",
		"Объект.Организация",
		"Объект.Ответственный");
		
		Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
		КонецЕсли;
	
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.МесяцНачисления) И ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.МесяцНачисления = НачалоМесяца(Объект.Дата);
		КонецЕсли;
		
		Объект.ДатаПолученияДохода = ТекущаяДатаСеанса();
		
		ЗаполнитьДанныеФормыПоОрганизации();
		ПриПолученииДанныхНаСервере(Объект);
		
		РассчитатьСотрудниковНаСервере(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), ОписаниеТаблицыНачислений());
		
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
	ОкончательныйРасчетНДФЛ = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ЗакрытьПослеЗаписи = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтаФорма, "ПередЗаписьюОкончание", Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитВДанные(ТекущийОбъект);
	Если ЗаполнениеВыполнено <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыЗарплаты", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СотрудникиПерерасчетаЗаработка",
			ОбщегоНазначения.ВыгрузитьКолонку(ЗаполнениеВыполнено, "Ключ"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СохраняемыеЗначения = Новый Структура;
	СохраняемыеЗначения.Вставить("Исполнитель", ТекущийОбъект.Исполнитель);
	СохраняемыеЗначения.Вставить("ДолжностьИсполнителя", ТекущийОбъект.ДолжностьИсполнителя);
	
	ЗарплатаКадры.СохранитьЗначенияЗаполненияОтветственныхРаботников(ТекущийОбъект.Организация, СохраняемыеЗначения);
	
	ДанныеВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Оповестить("ИсправленДокумент", , Объект.ИсправленныйДокумент);
	КонецЕсли;
	Если ЗакрытьПослеЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ИзмененоРаспределениеИсточниковФинансирования" Тогда
		ЗарплатаКадрыРасширенныйКлиент.ОбработкаОповещенияИзмененияРаспределенияИсточниковФинансирования(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		
	ИначеЕсли (ИмяСобытия = "ИзмененоСторнированиеНачислений" Или ИмяСобытия = "ИсправленДокумент") И Источник = Объект.Ссылка Тогда
		ДанныеВРеквизиты();
		
	ИначеЕсли ИмяСобытия = "ИзмененыПоказателиДокумента" И Источник.ВладелецФормы = ЭтаФорма Тогда
		Если Параметр.Показатели.Количество() > 0 Тогда 
			ОбработатьИзменениеПоказателейНаСервере(Параметр.Показатели);
			СотрудникиКРасчету.Очистить();
			РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтаФорма, Ложь);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаВзносов" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеВзносовНаСервере(Параметр);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ОписаниеДокумента", ОписаниеДокумента(ЭтаФорма));
	ПараметрыДокумента.Вставить("ОписаниеТаблицФормы", СтруктураОписанияТаблицДляРаспределенияРезультата());
	ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержаний(Отказ, ЭтаФорма, ПараметрыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяФинансированияПриИзменении(Элемент)
	СтатьяФинансированияПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура СтатьяФинансированияПриИзмененииНаСервере()
	ОбработатьИзменениеНастроекБухучетаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	СтатьяРасходовПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииНаСервере()
	ОбработатьИзменениеНастроекБухучетаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияЗарплатыВБухучетеПриИзменении(Элемент)
	СпособОтраженияЗарплатыВБухучетеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СпособОтраженияЗарплатыВБухучетеПриИзмененииНаСервере()
	ОбработатьИзменениеНастроекБухучетаНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовУправленияШапки

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачислениеПриИзменении(Элемент)
	НачислениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПолученияДоходаПриИзменении(Элемент)
	ДатаПолученияДоходаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДатаПолученияДоходаПриИзмененииНаСервере()
	
	Для Каждого Строка Из Объект.Начисления Цикл
		Строка.ПериодДействия = НачалоМесяца(Объект.ДатаПолученияДохода);
	КонецЦикла;
	
	РассчитатьСотрудниковНаСервере(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), ОписаниеТаблицыНачислений());
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКоманд

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(Объект.Ссылка, "ДоходВНатуральнойФорме");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Сторнировать(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Сторнировать(Объект.Ссылка, "Начисление");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "ДоходВНатуральнойФорме");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(Объект.ИсправленныйДокумент, "ДоходВНатуральнойФорме");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКСторно(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКСторно(ЭтаФорма.ДокументСторно);
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПоказыватьДоговорниковГПХ", ПолучитьФункциональнуюОпциюФормы("ИспользоватьНачисленияПоДоговорам"));
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериоде(
		Элементы.Начисления,
		Объект.Организация, Объект.Подразделение,
		Объект.МесяцНачисления, КонецМесяца(Объект.МесяцНачисления),
		, АдресСпискаПодобранныхСотрудников(),
		СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов());
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений());
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Команда)
	УчетНДФЛКлиентРасширенный.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект, "ДоходВНатуральнойФорме", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), АдресСпискаПодобранныхСотрудников());
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеВзносов(Команда)
	УчетСтраховыхВзносовКлиент.ОткрытьФормуПодробнееОРасчетеВзносов(Объект, "ДоходВНатуральнойФорме", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), АдресСпискаПодобранныхСотрудников());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоказатели(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Начисление) Тогда 
		ТекстСообщения = НСтр("ru='Не указан вид дохода.';uk='Не зазначений вид доходу.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Начисление");
		Возврат;
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	
	ПараметрыФормы = Новый Структура("МассивПоказателей", МассивПоказателей);
	ОткрытьФорму("ОбщаяФорма.ГрупповоеЗаполнениеПоказателейДокументов", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокумент(Команда)
	ПересчитатьДокументНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ЗакрытьПослеЗаписи = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНачисления

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Ложь);
	
	Если Элементы.Начисления.ТекущиеДанные <> Неопределено Тогда
		АктивизированныйСотрудник = Элементы.Начисления.ТекущиеДанные.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Начисления.ТекущиеДанные.ПериодДействия = НачалоМесяца(Объект.ДатаПолученияДохода);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийВШапкеПриНачалеРедактирования(ЭтаФорма, "Начисления", НоваяСтрока);
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачислений(), Истина, , ОписаниеДокумента(ЭтотОбъект));
	ОбновитьИтогиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	Если Элементы.Начисления.ТекущиеДанные <> Неопределено Тогда
		СотрудникПередУдалением = Элементы.Начисления.ТекущиеДанные.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент) 
	НачисленияПослеУдаленияНаСервере(СотрудникПередУдалением);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	ОбработатьИзменениеСотрудника(Элементы.Начисления.ТекущаяСтрока, АктивизированныйСотрудник);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачислений());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыНачислений());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПересчитатьСотрудника(Команда)
	
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Начисления", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыНачислений(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыНачислений(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачислений(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыНачисленияПерерасчет

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПерерасчетов(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПерерасчетов(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	РасчетЗарплатыРасширенныйКлиент.ПередУдалениемСтрокиПерерасчета(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПерерасчетов());
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПерерасчетов();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма,  ОписаниеТаблицыПерерасчетов());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыПерерасчетов());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения) Экспорт
	
	ПараметрыДляРаспределения.ОписаниеДокумента       = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	ОтражениеЗарплатыВБухучетеРасширенный.РаспределитьЗависимыеРезультатыВФорме(ЭтаФорма, ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата()
	
	ОписанияТаблиц = Новый Структура;
	ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений());
	ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов());
	ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.СодержитПолеСотрудник						= Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник						= "Сотрудник";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета						= "Начисление";
	ОписаниеТаблицы.СодержитПолеВидРасчета						= Ложь;
	ОписаниеТаблицы.ИмяРеквизитаДатаНачала 						= Неопределено;
	ОписаниеТаблицы.ИмяРеквизитаДатаОкончания 					= Неопределено;
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "МесяцНачисления";
	
	ОписаниеТаблицы.ОтменятьВсеИсправления 						= Истина;
	
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей				= "НачисленияРезультат";
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы	= "НДФЛ";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетов()
	
	ОписаниеТаблицыВидовРасчета = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "НачисленияПерерасчет";
	ОписаниеТаблицыВидовРасчета.ПутьКДанным =  "Объект.НачисленияПерерасчет";
	ОписаниеТаблицыВидовРасчета.ИмяПоляДляВставкиПоказателей = "НачисленияПерерасчетРезультат";
	ОписаниеТаблицыВидовРасчета.НомерТаблицы = 1;
	ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник = "Сотрудник";
	ОписаниеТаблицыВидовРасчета.ОтображатьПоляОписанияВремени = Ложь;
	ОписаниеТаблицыВидовРасчета.ОтображатьПоляНормыВремени = Ложь;
	ОписаниеТаблицыВидовРасчета.ЭтоПерерасчеты = Истина;
	ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	ОписаниеТаблицыВидовРасчета.ИмяПоляДляВставкиРаспределенияРезультатов	= "НачисленияПерерасчетРезультат";
	ОписаниеТаблицыВидовРасчета.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицыВидовРасчета.РаспределениеРезультатовЗависимыеТаблицы    = "НачисленияПерерасчет,НДФЛ";
	
	Возврат ОписаниеТаблицыВидовРасчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "НДФЛ";
	ОписаниеТаблицы.ПутьКДанным = "Объект.НДФЛ";
	ОписаниеТаблицы.ИмяПоляРезультат = "Налог";
	ОписаниеТаблицы.НомерТаблицы = 2;
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления = Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата()
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.МесяцНачисления);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы()
	
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов());
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПерерасчетов(Форма)
	
	ПерерасчетыДоступны = ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступны(Форма, "МесяцНачисления", , Ложь);
	Форма.Элементы.НачисленияПерерасчетСтраница.Видимость = ПерерасчетыДоступны;
	Форма.Элементы.Страницы.ОтображениеСтраниц = ?(ПерерасчетыДоступны, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.МесяцНачисленияИмя			= "МесяцНачисления";
	Описание.ИменаПолейНачисления		= "Начисление";
	Описание.ВидНачисленияВШапке		= Истина;
	Описание.ВидНачисленияИмя			= "Начисление";
	
	Описание.ПериодДействияВШапке		= Истина;
	Описание.ПланируемаяДатаВыплатыИмя	= "ДатаПолученияДохода";
	Описание.ПорядокВыплаты				= ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Межрасчет");
	Описание.ПорядокВыплатыИмя			= Неопределено;
	
	Описание.НачисленияИмя				= "Начисления";
	Описание.НачисленияКоманднаяПанельИмя = "КомандыНачисления";
	
	Описание.НачисленияПерерасчетИмя	= "НачисленияПерерасчет";
	Описание.НДФЛИмя					= "НДФЛ";
	Описание.БухучетПервичногоДокументаИмяМетода = "Документы.ДоходВНатуральнойФорме.ДанныеДляБухучетаЗарплатыПервичныхДокументов";
	
	Описание.ВзносыФОТИмя = "ВзносыФОТ";
	
	Описание.РассчитыватьУдержанияИмя = "РассчитыватьУдержания";
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента(НСтр("ru='Месяц';uk='Місяць'"), "МесяцНачисленияСтрокой"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента(НСтр("ru='Начисление';uk='Нарахування'"), "Объект.Начисление"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента(НСтр("ru='Дата получения дохода';uk='Дата отримання доходу'"), "Объект.ДатаПолученияДохода"));
	
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата();
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Процедура ДополнитьФорму()
	
	РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФорму(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийВШапкеДополнитьФорму(ЭтаФорма, ОписаниеТаблицыНачислений(), "КомандыНачисления");
	РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), "Начисления");
	
	РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата());
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДанныеВРеквизиты()
	
	ЗарплатаКадрыРасширенный.ВводНачисленийВШапкеДанныеВРеквизит(Объект, ОписаниеТаблицыНачислений(), 2);
	ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), 2);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы());
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	ЗаполнитьНалоги();
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата());
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	Если Не ЭтаФорма.Параметры.Ключ.Пустая() Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма, , , , "МесяцНачисления");
	КонецЕсли;
	ИсправлениеДокументовЗарплатаКадры.УстановитьПоляИсправления(ЭтаФорма, , , "МесяцНачисления");
	
КонецПроцедуры

&НаСервере
Процедура РеквизитВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Показатели.Очистить();
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата());
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Процедура НачислениеПриИзмененииНаСервере()
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенный.ВводНачисленийВШапкеВидРасчетаПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	
	
	УстановитьВидимостьПерерасчетов(ЭтаФорма);
	
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокиРасчета(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ОписаниеТаблицыВидовРасчета);
	
	РассчитатьСотрудниковНаСервере(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), ОписаниеТаблицыНачислений());
	
	ОтражениеЗарплатыВБухучетеРасширенный.УстановитьПодсказкуВводаСтатьиРасходовПоНачислению(ЭтаФорма, "Объект.Начисление");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксЗаполнение = Новый Массив;
	
	НачисленияПерерасчетФиксСтрока = Новый Массив;
	НачисленияПерерасчетФиксСтрока.Добавить("Сотрудник");
	
	НачисленияПерерасчетФиксРасчет = Новый Массив;
	НачисленияПерерасчетФиксРасчет.Добавить("Результат");
	НачисленияПерерасчетФиксРасчет.Добавить("ОтработаноДней");
	НачисленияПерерасчетФиксРасчет.Добавить("ОтработаноЧасов");
	НачисленияПерерасчетФиксРасчет.Добавить("НормаДней");
	НачисленияПерерасчетФиксРасчет.Добавить("НормаЧасов");
	
	СтруктураФиксНачисления = Новый Структура("ФиксРасчет, ФиксЗаполнение", НачисленияФиксРасчет, НачисленияФиксЗаполнение);
	СтруктураФиксНачисленияПерерасчет = Новый Структура("ФиксСтрока, ФиксЗаполнение, ФиксРасчет",
			НачисленияПерерасчетФиксСтрока,
			НачисленияФиксЗаполнение,
			НачисленияПерерасчетФиксРасчет);
	Возврат Новый Структура("Начисления, НачисленияПерерасчет, НДФЛ",
		СтруктураФиксНачисления,
		СтруктураФиксНачисленияПерерасчет,
		УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов());
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей()Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	ЗаполнениеВыполнено = Неопределено;
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	ДополнитьФорму();
	
	
	УстановитьВидимостьПерерасчетов(ЭтаФорма);
	
	// заполним предупреждения
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	
	УстановитьФункциональныеОпцииФормы();
	
	ДанныеВРеквизиты();
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, ОписаниеТаблицыНачислений());
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, ОписаниеТаблицыПерерасчетов());
	
	ОтражениеЗарплатыВБухучетеРасширенный.УстановитьПодсказкуВводаСтатьиРасходовПоНачислению(ЭтаФорма, "Объект.Начисление");
	
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ.Выгрузить());
	
	Модифицированность = Истина;
	
	ОписаниеТаблицы = ОписаниеТаблицыНДФЛ();
	
	РассчитатьВсеНаСервере(ОписаниеТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВзносовНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.ВзносыФОТ.Загрузить(Параметр.ВзносыФОТ.Выгрузить());
	
	Модифицированность = Истина;
	
	ЗаполнитьНалоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПоказателейНаСервере(ЗначенияПоказателей)
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект.Начисление);
	ФиксированнаяСумма = ЗначенияПоказателей[Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка()];
	
	Сотрудники = Новый Массив;
	УникальныеСотрудники = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из Объект.Начисления Цикл
		
		Если ФиксированнаяСумма = Неопределено Тогда
			
			МаксимальноеЧислоПоказателей = ВидРасчетаИнфо.КоличествоОтображаемыхПоказателей;
			Для Сч = 1 По МаксимальноеЧислоПоказателей Цикл
				
				Показатель = СтрокаСотрудника["Показатель" + Сч];
				Если Не ЗначениеЗаполнено(Показатель) Тогда
					Прервать;
				КонецЕсли;
				
				ЗначениеПоказателя = ЗначенияПоказателей[Показатель];
				Если ЗначениеПоказателя <> Неопределено Тогда 
					СтрокаСотрудника["Значение" + Сч] = ЗначениеПоказателя;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаСотрудника.Результат = ФиксированнаяСумма;
			
		КонецЕсли;
		
		Если УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
			Сотрудники.Добавить(СтрокаСотрудника.Сотрудник);
			УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьСотрудниковНаСервере(Сотрудники, ОписаниеТаблицыНачислений(), Ложь);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалоги()
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина), "ФизическоеЛицо");
	СотрудникиФизическогоЛица = СотрудникиФизическихЛиц(ОбщегоНазначения.ВыгрузитьКолонку(ФизическиеЛицаСотрудников, "Значение"));
	
	Для Каждого ДанныеСтроки Из Объект.Начисления Цикл
		ЗаполнитьНалогиСотрудника(ДанныеСтроки, ФизическиеЛицаСотрудников[ДанныеСтроки.Сотрудник], СотрудникиФизическогоЛица);
	КонецЦикла;
	
	ОбновитьИтогиПодвала(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьНалогиСотрудника(ДанныеСтроки, ФизическоеЛицо = Неопределено, СотрудникиФизическогоЛица = Неопределено)
	
	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтроки.Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
	
	ДанныеСтроки.НДФЛ = 0;
	СтрокиНДФЛ = Объект.НДФЛ.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаНДФЛ Из СтрокиНДФЛ Цикл
		ДанныеСтроки.НДФЛ = ДанныеСтроки.НДФЛ + СтрокаНДФЛ.Налог;
	КонецЦикла;
	
	КоэффициентРаспределения = 1;
	НачисленийВсего = 0;
	
	Если СотрудникиФизическогоЛица = Неопределено Тогда
		СотрудникиФизическогоЛица = СотрудникиФизическихЛиц(ФизическоеЛицо);
	КонецЕсли;
	
	СтрокиСотрудниковФизическогоЛица = СотрудникиФизическогоЛица.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Для каждого СтрокаССотрудником Из СтрокиСотрудниковФизическогоЛица Цикл
		СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", СтрокаССотрудником.Сотрудник));
		Для Каждого СтрокаНачисления Из СтрокиНачислений Цикл
			НачисленийВсего = НачисленийВсего + СтрокаНачисления.Результат;
		КонецЦикла;
	КонецЦикла;
	
	Если НачисленийВсего <> 0 И ДанныеСтроки.Результат <> 0 Тогда
		КоэффициентРаспределения = ДанныеСтроки.Результат / НачисленийВсего;
	КонецЕсли;
	ДанныеСтроки.НДФЛ		= ДанныеСтроки.НДФЛ * КоэффициентРаспределения;
	
	
	
	ДанныеСтроки.Взносы = 0;
	СтрокиВзносы = Объект.ВзносыФОТ.НайтиСтроки(ОтборСтрок);
	Для Каждого СтрокаВзносы Из СтрокиВзносы Цикл
		ДанныеСтроки.Взносы = ДанныеСтроки.Взносы + СтрокаВзносы.Результат;
	КонецЦикла;
	
	КоэффициентРаспределения = 1;
	НачисленийВсего = 0;
	
	Если СотрудникиФизическогоЛица = Неопределено Тогда
		СотрудникиФизическогоЛица = СотрудникиФизическихЛиц(ФизическоеЛицо);
	КонецЕсли;
	
	СтрокиСотрудниковФизическогоЛица = СотрудникиФизическогоЛица.НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
	Для каждого СтрокаССотрудником Из СтрокиСотрудниковФизическогоЛица Цикл
		СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", СтрокаССотрудником.Сотрудник));
		Для Каждого СтрокаНачисления Из СтрокиНачислений Цикл
			НачисленийВсего = НачисленийВсего + СтрокаНачисления.Результат;
		КонецЦикла;
	КонецЦикла;
	
	Если НачисленийВсего <> 0 И ДанныеСтроки.Результат <> 0 Тогда
		КоэффициентРаспределения = ДанныеСтроки.Результат / НачисленийВсего;
	КонецЕсли;
	ДанныеСтроки.Взносы		= ДанныеСтроки.Взносы * КоэффициентРаспределения;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(Сотрудники)
	
	ОписаниеТаблицы = ОписаниеТаблицыНачислений();
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		СтрокиНачислений = Объект.Начисления.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		
		Если СтрокиНачислений.Количество() = 0 Тогда
			ПустаяСтрока = Объект.Начисления.Добавить();
			ПустаяСтрока.Сотрудник = Сотрудник;
			ПустаяСтрока.ПериодДействия = НачалоМесяца(Объект.ДатаПолученияДохода);
		КонецЕсли;
	КонецЦикла;
	
	ПерезаполнитьДанныеФормыНаСервере(Сотрудники, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	ПерезаполнитьДанныеФормыНаСервере(Сотрудники, СохранятьИсправления);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеФормыНаСервере(Знач Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	ОписаниеТаблицы = ОписаниеТаблицыНачислений();
	ИдентификаторыСтрок = Новый Массив;
	Если НЕ СохранятьИсправления Тогда
		Отбор = Новый Структура("Сотрудник");
		Для каждого Сотрудник Из Сотрудники Цикл
			Отбор.Вставить("Сотрудник", Сотрудник);
			
			// Заполняем поля по итогам заполнения коллекций.
			СтрокиПоСотруднику = Объект.Начисления.НайтиСтроки(Отбор);
			Для каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
				ИдентификаторыСтрок.Добавить(СтрокаПоСотруднику.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДополнитьСтрокиНаСервере(ИдентификаторыСтрок, ОписаниеТаблицы, Истина, Истина);
	РассчитатьСотрудниковНаСервере(Сотрудники, ОписаниеТаблицы, СохранятьИсправления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСотрудника(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля) Экспорт
	ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля)
	РасчетЗарплатыРасширенный.ПересчитатьСотрудникаНаСервере(ЭтаФорма, ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
КонецПроцедуры

&НаСервере
Процедура РассчитатьВсеНаСервере(ОписаниеТаблицы = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Начисление) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеТаблицы = Неопределено Тогда
		ОписаниеТаблицы = ОписаниеТаблицыНачислений();
	КонецЕсли;
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	// Выполняем пересчет коллекций документа.
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
	
	ЗаполнитьНалоги();
	
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма)) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РасчетЗарплатыРасширенныйКлиент.ДобавитьСотрудникаКРасчету(ЭтаФорма, Сотрудник, ОписаниеТаблицы) Тогда
		РассчитатьСотрудниковНаСервере(Сотрудник, ОписаниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудниковНаСервере(Знач Сотрудники, ОписаниеТаблицы, СохранятьИсправления = Истина, ВыводитьСообщения = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Если Не Документ.ДокументГотовКРасчету(ВыводитьСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Начисление) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;
	
	Если Сотрудники.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправления(Объект.Организация, Объект.МесяцНачисления, Объект.ИсправленныйДокумент, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка, "Начисление", "МесяцНачисления");
	КонецЕсли;
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	ДополнительныеПараметры.СохранятьИсправления = СохранятьИсправления;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
		
	// Выполняем пересчет коллекций документа.
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудники, ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
	
	ОтменитьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьНачисленоУдержаноИтог(Сотрудники);
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы();
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
	УстановитьВидимостьПерерасчетов(ЭтаФорма);
	
	Если ЗаполнениеВыполнено = Неопределено Тогда
		ЗаполненныеСотрудники = Новый Соответствие;
	Иначе
		ЗаполненныеСотрудники = Новый Соответствие(ЗаполнениеВыполнено);
	КонецЕсли;
	
	Для каждого ЗаполненныйСотрудник Из Сотрудники Цикл
		ЗаполненныеСотрудники.Вставить(ЗаполненныйСотрудник, Истина);
	КонецЦикла;
	
	ЗаполнениеВыполнено = Новый ФиксированноеСоответствие(ЗаполненныеСотрудники);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНачисленоУдержаноИтог(Сотрудники)
	
	Отбор = Новый Структура("Сотрудник");
	Для каждого Сотрудник Из Сотрудники Цикл
		
		Отбор.Вставить("Сотрудник", Сотрудник);
		
		// Заполняем поля по итогам заполнения коллекций.
		СтрокиПоСотруднику = Объект.Начисления.НайтиСтроки(Отбор);
		Для каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
			ЗаполнитьНалогиСотрудника(СтрокаПоСотруднику);
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьИтогиПодвала(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПослеУдаленияНаСервере(Сотрудник)
	РасчетЗарплатыРасширенный.ОчиститьДанныеФормыПоСотруднику(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Сотрудник, Объект.Организация);
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСотрудника(ИдентификаторСтроки, ПрежнийСотрудник)
	
	Сотрудник = Объект.Начисления.НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник;
	
	ОписаниеТаблицы = ОписаниеТаблицыНачислений();
	
	ДополнитьСтрокиНаСервере(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСтроки), ОписаниеТаблицы, Истина, Истина);
	
	РасчетЗарплатыРасширенный.ОбработатьИзменениеСотрудникаВедущейТаблицыФормы(
		ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Сотрудник, ПрежнийСотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокиНаСервере(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСтроки), ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокиНаСервере(ИдентификаторыСтрок, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокиРасчета(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ОписаниеТаблицы, ИдентификаторыСтрок, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМесяцаНачисления()
	ОбработатьИзменениеМесяцНачисленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	РассчитатьСотрудниковНаСервере(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), ОписаниеТаблицыНачислений());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	ОбработатьИзменениеМесяцНачисленияНаСервере();
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	Возврат ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	СотрудникиКРасчету.Очистить();
	РасчетЗарплатыКлиент.УстановитьОтображениеКнопкиПересчитать(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере(СотрудникиКРасчету)
	
	Для каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаССотрудниками.Значение.СписокСотрудников, "Ключ");
		РассчитатьСотрудниковНаСервере(Сотрудники, ТаблицаССотрудниками.Значение.ОписаниеТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
		
	Иначе
		ЗакрытьПослеЗаписи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	Возврат УчетНДФЛФормыРасширенный.СведенияОбНДФЛ(ЭтаФорма);
КонецФункции

&НаСервере
Функция СведенияОВзносах() Экспорт
	
	ДанныеОВзносах = Новый Структура;

	ДанныеОВзносах.Вставить("ВзносыФОТ", Объект.ВзносыФОТ.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОВзносах, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции


&НаСервере
Функция СотрудникиФизическихЛиц(Знач ФизическиеЛица)
	
	Если ЗначениеЗаполнено(Объект.ДатаПолученияДохода) Тогда
		НачалоПериодаПримененияОтбора = Объект.ДатаПолученияДохода;
		ОкончаниеПериодаПримененияОтбора = Объект.ДатаПолученияДохода;
	Иначе
		НачалоПериодаПримененияОтбора = Объект.МесяцНачисления;
		ОкончаниеПериодаПримененияОтбора = КонецМесяца(Объект.МесяцНачисления);
	КонецЕсли;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Объект.Организация;
	ПараметрыПолученияСотрудников.Подразделение = Объект.Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода = НачалоПериодаПримененияОтбора;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = ОкончаниеПериодаПримененияОтбора;
	
	Если ТипЗнч(ФизическиеЛица) = Тип("Массив") Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	Иначе
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	КонецЕсли;
		
	Возврат КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "Объект.ГлавныйБухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("Исполнитель", "Объект.Исполнитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьИсполнителя", "Объект.ДолжностьИсполнителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Исполнитель");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтогиПодвала(Форма)
	Форма.ИтогНДФЛ = Форма.Объект.Начисления.Итог("НДФЛ");
КонецПроцедуры

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыНачислений());
	Описания.Добавить(ОписаниеТаблицыПерерасчетов());
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

&НаСервере
// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.Показатели");
	Массив.Добавить("Объект.НДФЛ");
	Массив.Добавить("Объект.ФизическиеЛица");
	Массив.Добавить("Объект.ВзносыФОТ");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",				НСтр("ru='организации';uk='організації'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Подразделение",				НСтр("ru='подразделения';uk='підрозділи'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОбработатьИзменениеНастроекБухучетаНаСервере()
	
	ПараметрыДляРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеПараметровДляРаспределенияДанныхЗаполнения();
	ПараметрыДляРаспределения.РаспределятьНачисления  = Истина;
	ПараметрыДляРаспределения.РаспределятьУдержания   = Истина;
	ПараметрыДляРаспределения.УдержанияИзменились     = Истина;
	ПараметрыДляРаспределения.НДФЛИзменился           = Истина;
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныеФормыПоСотрудникам(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьУдержанияПриИзменении(Элемент)
	РассчитыватьУдержанияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура РассчитыватьУдержанияПриИзмененииНаСервере()
	
	Если Не Объект.РассчитыватьУдержания Тогда
		Объект.НДФЛ.Очистить();
		Объект.ВзносыФОТ.Очистить();
	КонецЕсли;
	
	РассчитатьСотрудниковНаСервере(ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник"), ОписаниеТаблицыНачислений());

КонецПроцедуры

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
СотрудникиКРасчету = Новый Соответствие;
ЗакрытьПослеЗаписи = Ложь;

#КонецОбласти

