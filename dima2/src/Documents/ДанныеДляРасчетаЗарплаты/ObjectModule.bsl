#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическиеЛица.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтруктураНастроек = Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты.НастройкиВидаДокумента(ВидДокумента);
	
	Если СтруктураНастроек.ВыполненныеРаботыВводятсяСводно Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВыполненныеРаботы.Период");
	КонецЕсли;
	
	Если СтруктураНастроек.ВыполненныеРаботыРаспределяютсяПоСотрудникам Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВыполненныеРаботы.Сотрудник");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВыполненныеРаботы.Период");
		Если ВыполненныеРаботы.Итог("Сумма") <> ЗначенияПоказателей.Итог("Значение") Тогда
			ТекстСообщения = НСтр("ru='Сумма оплаты отличается от стоимости выполненных работ.';uk='Сума оплати відрізняється від вартості виконаних робіт.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьФизическиеЛица();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ЗаписатьЗначенияПоказателейРасчетаЗарплаты(ЗначенияПоказателей(), Движения, Отказ);
	
	ДанныеОВремени = ДанныеОВремени();
	УчетРабочегоВремени.ПроверитьРегистрируемыеДанныхОВремени(Ссылка, ДанныеОВремени, Отказ, Истина);
	УчетРабочегоВремени.ЗарегистрироватьРабочееВремяСотрудников(Движения, ДанныеОВремени);
	
	РасчетЗарплатыРасширенный.ЗарегистрироватьВыполненныеРаботыСотрудников(Движения, Отказ, ДанныеВыполненныхРабот());
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьЗначенияПоказателейРасчетаЗарплаты(ТаблицаЗначенийПоказателей, Движения, Отказ)
	
	Для Каждого СтрокаЗначений Из ТаблицаЗначенийПоказателей Цикл
		НаборЗаписей = Движения[ИмяРегистраЗначенияПоказателя(СтрокаЗначений.Назначение, СтрокаЗначений.СпособПрименения, СтрокаЗначений.СпособВвода)];
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаЗначений);
		НаборЗаписей.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗначенияПоказателей()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроенияСрезов = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияСрезов.Отборы, "Регистратор", "<>", Ссылка);
	
	// Получаем таблицы для формирования среза последних периодических показателей.
	// По организациям...
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателей.Ссылка.Период КАК Период,
	|	ЗначенияПоказателей.Объект КАК Организация,
	|	ЗначенияПоказателей.Показатель
	|ИЗ
	|	Документ.ДанныеДляРасчетаЗарплаты.ЗначенияПоказателей КАК ЗначенияПоказателей
	|ГДЕ
	|	ЗначенияПоказателей.Ссылка = &Ссылка
	|	И ЗначенияПоказателей.Объект ССЫЛКА Справочник.Организации
	|	И ЗначенияПоказателей.Ссылка.Период <> ДАТАВРЕМЯ(1, 1, 1)";	
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ИзмеренияДаты = Запрос.Выполнить().Выгрузить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроенияСрезов);
	
	// ... и по подразделениям
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателей.Ссылка.Период КАК Период,
	|	ЗначенияПоказателей.Объект КАК Подразделение,
	|	ЗначенияПоказателей.Показатель
	|ИЗ
	|	Документ.ДанныеДляРасчетаЗарплаты.ЗначенияПоказателей КАК ЗначенияПоказателей
	|ГДЕ
	|	ЗначенияПоказателей.Ссылка = &Ссылка
	|	И ЗначенияПоказателей.Объект ССЫЛКА Справочник.ПодразделенияОрганизаций
	|	И ЗначенияПоказателей.Ссылка.Период <> ДАТАВРЕМЯ(1, 1, 1)";	
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ИзмеренияДаты = Запрос.Выполнить().Выгрузить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроенияСрезов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателейРасчетаЗарплаты.Период КАК Период,
	|	ЗначенияПоказателейРасчетаЗарплаты.ПериодОкончания КАК ДействуетДо,
	|	ЗначенияПоказателейРасчетаЗарплаты.Период КАК ПериодДействия,
	|	Показатели.СпособПримененияЗначений КАК СпособПрименения,
	|	Показатели.СпособВводаЗначений КАК СпособВвода,
	|	Показатели.НазначениеПоказателя КАК Назначение,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект ССЫЛКА Справочник.Организации
	|			ТОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект
	|		ИНАЧЕ ШапкаДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект ССЫЛКА Справочник.Сотрудники
	|			ТОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект
	|	КОНЕЦ КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект ССЫЛКА Справочник.Сотрудники
	|			ТОГДА Сотрудники.ФизическоеЛицо
	|	КОНЕЦ КАК ФизическоеЛицо,
	|	ЗначенияПоказателейРасчетаЗарплаты.Показатель,
	|	ЗначенияПоказателейРасчетаЗарплаты.Значение,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект ССЫЛКА Справочник.Организации
	|			ТОГДА ЗначенияПериодическихПоказателейОрганизаций.Значение
	|		КОГДА ЗначенияПоказателейРасчетаЗарплаты.Объект ССЫЛКА Справочник.ПодразделенияОрганизаций
	|			ТОГДА ЗначенияПериодическихПоказателейПодразделений.Значение
	|	КОНЕЦ КАК ЗначениеПоОкончании
	|ИЗ
	|	Документ.ДанныеДляРасчетаЗарплаты.ЗначенияПоказателей КАК ЗначенияПоказателейРасчетаЗарплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = ЗначенияПоказателейРасчетаЗарплаты.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДанныеДляРасчетаЗарплаты КАК ШапкаДокумента
	|		ПО (ШапкаДокумента.Ссылка = ЗначенияПоказателейРасчетаЗарплаты.Ссылка)
	|			И (ШапкаДокумента.Ссылка = &Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
	|		ПО (Показатели.Ссылка = ЗначенияПоказателейРасчетаЗарплаты.Показатель)
	|			И (ВЫБОР
	|				КОГДА Показатели.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЗначенияПоказателейРасчетаЗарплаты.Значение <> 0
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизацийСрезПоследних КАК ЗначенияПериодическихПоказателейОрганизаций
	|		ПО (ЗначенияПериодическихПоказателейОрганизаций.Организация = ЗначенияПоказателейРасчетаЗарплаты.Объект)
	|			И (ЗначенияПериодическихПоказателейОрганизаций.Показатель = ЗначенияПоказателейРасчетаЗарплаты.Показатель)
	|			И (ЗначенияПериодическихПоказателейОрганизаций.Период = ШапкаДокумента.Период)
	|			И (ШапкаДокумента.ПериодОкончания <> ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделенийСрезПоследних КАК ЗначенияПериодическихПоказателейПодразделений
	|		ПО (ЗначенияПериодическихПоказателейПодразделений.Подразделение = ЗначенияПоказателейРасчетаЗарплаты.Объект)
	|			И (ЗначенияПериодическихПоказателейПодразделений.Показатель = ЗначенияПоказателейРасчетаЗарплаты.Показатель)
	|			И (ЗначенияПериодическихПоказателейПодразделений.Период = ШапкаДокумента.Период)
	|			И (ШапкаДокумента.ПериодОкончания <> ДАТАВРЕМЯ(1, 1, 1))";	
				   
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция ДанныеОВремени()
	
	ТаблицаДанных = УчетРабочегоВремени.ПустаяТаблицаДляРегистрацииВремени();
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеОВремениСводно Цикл
		Если СтрокаТабличнойЧасти.Дней = 0 И СтрокаТабличнойЧасти.Часов = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		СтрокаТаблицы.Дата = Период;
		СтрокаТаблицы.Сотрудник = СтрокаТабличнойЧасти.Сотрудник;
		СтрокаТаблицы.ВидВремени = СтрокаТабличнойЧасти.ВидВремени;
		СтрокаТаблицы.Дней = СтрокаТабличнойЧасти.Дней;
		СтрокаТаблицы.Часов = СтрокаТабличнойЧасти.Часов;
		СтрокаТаблицы.План = Ложь;
		СтрокаТаблицы.Внутрисменное = Ложь;
		СтрокаТаблицы.ВЦеломЗаПериод = Истина;
	КонецЦикла;	
	
	Для Каждого СтрокаТабличнойЧасти Из ДанныеОВремениДетально Цикл
		Для НомерДня = 1 По ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Период) Цикл
			Если СтрокаТабличнойЧасти["Часов" + НомерДня] > 0 Тогда
				СтрокаТаблицы = ТаблицаДанных.Добавить();
				СтрокаТаблицы.Дата = Дата(Год(Период), Месяц(Период), НомерДня);
				СтрокаТаблицы.Сотрудник = СтрокаТабличнойЧасти.Сотрудник;
				СтрокаТаблицы.ВидВремени = СтрокаТабличнойЧасти.ВидВремени;
				СтрокаТаблицы.Дней = 1;
				СтрокаТаблицы.Часов = СтрокаТабличнойЧасти["Часов" + НомерДня];
				СтрокаТаблицы.План = Ложь;
				СтрокаТаблицы.Внутрисменное = Ложь;
				СтрокаТаблицы.ВЦеломЗаПериод = Ложь;
			КонецЕсли;		
		КонецЦикла;	
	КонецЦикла;
	
	ВремяВводитсяЗаМесяц = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ВремяВводитсяЗаМесяц");
	Если ВремяВводитсяЗаМесяц = Истина И ДанныеОВремениДетально.Количество() > 0 Тогда
		// Если определены детальные данные, то относимся к ним как к данным за весь месяц в целом, 
		// поэтому те даты, на которые не введено сведений добавляем выходные.
		// 1. Отбираем сотрудников
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаДанных, "Сотрудник", Истина);
		Для Каждого Сотрудник Из Сотрудники Цикл
			// 2. Отбираем строки по сотруднику.
			СтрокиПоСотруднику = ТаблицаДанных.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
			// 3. Выбираем даты, на которые по сотруднику определены данные.
			РазличныеДаты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиПоСотруднику, "Дата", Истина);
			// 4. Последовательно обходим все дни месяца и, в том случае, если на конкретную дату нет записи, добавляем выходной.
			Для НомерДня = 1 По ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Период) Цикл
				ДатаДня = Дата(Год(Период), Месяц(Период), НомерДня);
				Если РазличныеДаты.Найти(ДатаДня) <> Неопределено Тогда
					// Данные на эту дату определены.
					Продолжить;
				КонецЕсли;
				СтрокаТаблицы = ТаблицаДанных.Добавить();
				СтрокаТаблицы.Дата = ДатаДня;
				СтрокаТаблицы.Сотрудник = Сотрудник;
				СтрокаТаблицы.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
				СтрокаТаблицы.Дней = 1;
				СтрокаТаблицы.Часов = 0;
				СтрокаТаблицы.План = Ложь;
				СтрокаТаблицы.Внутрисменное = Ложь;
				СтрокаТаблицы.ВЦеломЗаПериод = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаДанных;
	
КонецФункции	

Функция ИмяРегистраЗначенияПоказателя(Назначение, СпособПрименения, СпособВвода)
	
	Периодические = Новый Соответствие;
	Периодические.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника, "ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников");
	Периодические.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения, "ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений");
	Периодические.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации, "ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций");
	
	Разовые = Новый Соответствие;
	Разовые.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника, "ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников");
	Разовые.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения, "ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений");
	Разовые.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации, "ЗначенияРазовыхПоказателейРасчетаЗарплатыОрганизаций");
	
	Оперативные = Новый Соответствие;
	Оперативные.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника, "ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников");
	Оперативные.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения, "ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений");
	Оперативные.Вставить(Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации, "ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций");
	
	Если СпособПрименения = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное Тогда
		КоллекцияРегистровПоНазначению = Периодические;
	ИначеЕсли СпособПрименения = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое Тогда
		Если СпособВвода = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяЕдиновременно Тогда
			КоллекцияРегистровПоНазначению = Разовые;
		ИначеЕсли СпособВвода = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям Тогда
			КоллекцияРегистровПоНазначению = Оперативные;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КоллекцияРегистровПоНазначению[Назначение];
	
КонецФункции

Функция ДанныеВыполненныхРабот()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыполненныеРаботы.Период,
	|	ВыполненныеРаботы.Сотрудник,
	|	ВыполненныеРаботы.ВидРабот,
	|	СУММА(ВыполненныеРаботы.ОбъемВыполненныхРабот) КАК ОбъемВыполненныхРабот
	|ИЗ
	|	Документ.ДанныеДляРасчетаЗарплаты.ВыполненныеРаботы КАК ВыполненныеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументов
	|		ПО (ВидыДокументов.Ссылка = ВыполненныеРаботы.Ссылка.ВидДокумента)
	|			И (НЕ ВидыДокументов.ВыполненныеРаботыРаспределяютсяПоСотрудникам)
	|			И (ВыполненныеРаботы.Ссылка = &ДокументСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыполненныеРаботы.Сотрудник,
	|	ВыполненныеРаботы.ВидРабот,
	|	ВыполненныеРаботы.Период";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьФизическиеЛица() Экспорт
	
	ФизическиеЛица.Очистить();
	
	// Сбор данных сотрудников
	Сотрудники = Новый Массив;
	Сотрудники.Добавить(Сотрудник);
	
	ТабличныеЧастиСотрудники = Новый Соответствие;
	ТабличныеЧастиСотрудники.Вставить("ЗначенияПоказателей", "Объект");
	ТабличныеЧастиСотрудники.Вставить("ДанныеОВремениСводно", "Сотрудник");
	ТабличныеЧастиСотрудники.Вставить("ДанныеОВремениДетально", "Сотрудник");
	ТабличныеЧастиСотрудники.Вставить("ВыполненныеРаботы", "Сотрудник");
	
	ТабличныеЧастиПроверятьТип = Новый Массив;
	ТабличныеЧастиПроверятьТип.Добавить("ЗначенияПоказателей");
	
	УникальныеСотрудники = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ТабличныеЧастиСотрудники Цикл
		ИмяТабличнойЧасти = КлючИЗначение.Ключ;
		ИмяРеквизита = КлючИЗначение.Значение;
		Для Каждого СтрокаТабличнойЧасти Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
			СотрудникСсылка = СтрокаТабличнойЧасти[ИмяРеквизита];
			Если ТабличныеЧастиПроверятьТип.Найти(ИмяТабличнойЧасти) <> Неопределено 
				И ТипЗнч(СотрудникСсылка) <> Тип("СправочникСсылка.Сотрудники") Тогда
				Продолжить;
			КонецЕсли;
			Если УникальныеСотрудники[СотрудникСсылка] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Сотрудники.Добавить(СотрудникСсылка);
			УникальныеСотрудники.Вставить(СотрудникСсылка, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Если Сотрудники.Количество() > 0 Тогда
		// Получение физических лиц для собранных сотрудников.
		ФизлицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		// Массив физических лиц сотрудников.
		Физлица = ОбщегоНазначения.ВыгрузитьКолонку(ФизлицаСотрудников, "Значение", Истина);
	КонецЕсли;
	
	Если Физлица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем табличную часть Физические лица.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ФизическиеЛица, Физлица, "ФизическоеЛицо");
	
	// Заполнение краткого состава документа.
	КраткийСоставДокумента = ЗарплатаКадры.КраткийСоставСотрудников(Сотрудники, Дата, Физлица, ФизлицаСотрудников);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Период, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ДанныеДляРасчетаЗарплаты КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ПериодОкончания, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ДанныеДляРасчетаЗарплаты КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И НАЧАЛОПЕРИОДА(ТаблицаДокумента.ПериодОкончания, МЕСЯЦ) <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.Период, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка.Ссылка
		|ИЗ
		|	Документ.ДанныеДляРасчетаЗарплаты.ДанныеОВремениСводно КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ПериодОкончания, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка.Ссылка
		|ИЗ
		|	Документ.ДанныеДляРасчетаЗарплаты.ДанныеОВремениСводно КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ПериодОкончания, МЕСЯЦ) <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.Период, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ДанныеДляРасчетаЗарплаты.ДанныеОВремениДетально КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ПериодОкончания, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ДанныеДляРасчетаЗарплаты.ДанныеОВремениДетально КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ПериодОкончания, МЕСЯЦ) <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.Период, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ДанныеДляРасчетаЗарплаты.ВыполненныеРаботы КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ПериодОкончания, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ДанныеДляРасчетаЗарплаты.ВыполненныеРаботы КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ПериодОкончания, МЕСЯЦ) <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
