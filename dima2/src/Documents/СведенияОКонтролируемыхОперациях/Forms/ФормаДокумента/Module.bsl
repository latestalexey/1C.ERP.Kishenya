&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ВводНаОсновании.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюСоздатьНаОсновании);
	
	МенюОтчеты.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюОтчеты);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ИнициализацияТаблицФормы();
	
	ЗаполнитьУсловноеОформление();
	
	// КодНаименованияОперации
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокВыбораКодыНаименованияОпераций();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиКодНаименованияОперации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	// КодПредмета
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокВыбораКодыТипПредмета();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиКодПредмета.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	//КодСтороныОперации
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокВыбораКодыСтороныОпераций();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиКодСтороныОперации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	// КодСтраны
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокКодовСтран();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиКодСтраныПроисхождения.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	// КодВалюты
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокКодовВалют();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиКодВалюты.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	// КодОснования
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокВыбораКодыОснования();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиКодОснования.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	// КодМетода
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокВыбораКодыМетода();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиКодМетода.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	// КодИсточника
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокВыбораКодыИсточника();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиКодИсточника.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	// ПоказательРентабельности
	Список = КонтролируемыеОперацииПовтИсп.ПолучитьСписокВыбораПоказательРентабельности();
	Для каждого ЭлементСписка Из Список Цикл
		Элементы.КонтролируемыеСделкиПоказательРентабельности.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
		
	мПересчитыватьСуммуВсехОпераций = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияТаблицФормы()

	ОбычныеЦеныКонтролируемыхОпераций.Очистить();
	_ОбычныеЦеныКонтролируемыхОпераций = РегистрыСведений.ОбычныеЦеныКонтролируемыхОпераций.СоздатьНаборЗаписей();
	_ОбычныеЦеныКонтролируемыхОпераций.Прочитать();
	ЗначениеВРеквизитФормы(_ОбычныеЦеныКонтролируемыхОпераций.Выгрузить(), "ОбычныеЦеныКонтролируемыхОпераций");
	
	ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.Очистить();
	_ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций = РегистрыСведений.ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.СоздатьНаборЗаписей();
	_ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.Прочитать();
	ЗначениеВРеквизитФормы(_ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.Выгрузить(), "ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций");
	
	ПредметыКонтролируемыхОпераций.Очистить();
	_ПредметыКонтролируемыхОпераций = РегистрыСведений.ПредметыКонтролируемыхОпераций.СоздатьНаборЗаписей();
	_ПредметыКонтролируемыхОпераций.Прочитать();
	ЗначениеВРеквизитФормы(_ПредметыКонтролируемыхОпераций.Выгрузить(), "ПредметыКонтролируемыхОпераций");
	
	ДоговорыУчастниковКонтролируемыхОпераций.Очистить();
	_ДоговорыУчастниковКонтролируемыхОпераций  = РегистрыСведений.ДоговорыУчастниковКонтролируемыхОпераций	.СоздатьНаборЗаписей();
	_ДоговорыУчастниковКонтролируемыхОпераций.Прочитать();
	ЗначениеВРеквизитФормы(_ДоговорыУчастниковКонтролируемыхОпераций.Выгрузить(), "ДоговорыУчастниковКонтролируемыхОпераций");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КонтролируемыеСделкиИсследуемаяСторона");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КонтролируемыеСделки.КодМетода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "301";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КонтролируемыеСделки.КодМетода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "305";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
	
		ЗаполнитьПериодДокумента();
	
	КонецЕсли;
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодДокумента()

	Объект.НачПериода = НачалоГода(Объект.Дата);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(СведенияОКонтролируемыхОперациях.КонПериода) КАК Период
	               |ИЗ
	               |	Документ.СведенияОКонтролируемыхОперациях КАК СведенияОКонтролируемыхОперациях
	               |ГДЕ
	               |	СведенияОКонтролируемыхОперациях.Организация = &Организация
	               |	И СведенияОКонтролируемыхОперациях.Дата МЕЖДУ &НачГода И &КонецГода";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачГода", 	 НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонецГода", 	 КонецГода(Объект.Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Период) Тогда
		Объект.НачПериода = НачалоДня(Выборка.Период) + 24*60*60;
	КонецЕсли;
	
	Объект.КонПериода = Объект.Дата;
	
	Если Объект.НачПериода > Объект.КонПериода Тогда
		Объект.онПериода = Объект.НачПериода;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
		
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
КонецПроцедуры // НастроитьЭлементыФормы

&НаСервере
Процедура ЗаполнитьЗаПериодНаСервере()
	
	ИнициализацияТаблицФормы();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачПериода",  НачалоДня(Объект.НачПериода));
	Запрос.УстановитьПараметр("КонПериода",  КонецДня(Объект.КонПериода));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагенты", ПолучитьСписокСвязанныхКонтрагентов(Объект.Организация, Объект.НачПериода));
	
	Запрос.Текст = "
				   |ВЫБРАТЬ
				   |	Док.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
				   |	Док.Ссылка.МоментВремени КАК МоментВремени,
				   |	Док.НомерСтроки КАК НомерСтроки,
				   |	НАЧАЛОПЕРИОДА(Док.Ссылка.Дата, ДЕНЬ) КАК Период,
	               |	Док.Ссылка.Валюта КАК Валюта,
	               |	Док.Ссылка.Валюта.Код КАК КодВалюты,
	               |	Док.Ссылка КАК ДокументИнформационнйБазы,
	               |	Док.Ссылка.Контрагент КАК Контрагент,
	               |	Док.Ссылка.Договор КАК ДоговорКонтрагента,
	               |	Док.Номенклатура КАК ПредметСделки,
	               |	Док.Характеристика КАК ХарактеристикаНоменклатуры,
	               |	"""" КАК Содержание,
	               |	Док.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА Док.Ссылка.ЦенаВключаетНДС
	               |			ТОГДА Док.Сумма - Док.СуммаНДС
	               |		ИНАЧЕ Док.Сумма
	               |	КОНЕЦ КАК СуммаВал
				   |Поместить ВремТаблица
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК Док
	               |ГДЕ
	               |	Док.Ссылка.Организация = &Организация И Док.Ссылка.Проведен
	               |	И Док.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И Док.Ссылка.Контрагент В(&Контрагенты)
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Док.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
				   |	Док.Ссылка.МоментВремени КАК МоментВремени,
				   |	Док.НомерСтроки КАК НомерСтроки,
	               |	НАЧАЛОПЕРИОДА(Док.Ссылка.Дата, ДЕНЬ) КАК Период,
	               |	Док.Ссылка.Валюта КАК Валюта,
	               |	Док.Ссылка.Валюта.Код КАК КодВалюты,
	               |	Док.Ссылка КАК ДокументИнформационнйБазы,
	               |	Док.Ссылка.Контрагент КАК Контрагент,
	               |	Док.Ссылка.Договор КАК ДоговорКонтрагента,
	               |	NULL КАК ПредметСделки,
	               |	NULL КАК ХарактеристикаНоменклатуры,
	               |	Док.Содержание КАК Содержание,
	               |	Док.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА Док.Ссылка.ЦенаВключаетНДС
	               |			ТОГДА Док.Сумма - Док.СуммаНДС
	               |		ИНАЧЕ Док.Сумма
	               |	КОНЕЦ КАК СуммаВал
	               |ИЗ
	               |	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Док
	               |ГДЕ
	               |	Док.Ссылка.Организация = &Организация И Док.Ссылка.Проведен
	               |	И Док.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И Док.Ссылка.Контрагент В(&Контрагенты)
				   
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Док.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
				   |	Док.Ссылка.МоментВремени КАК МоментВремени,
				   |	Док.НомерСтроки КАК НомерСтроки,
				   |	НАЧАЛОПЕРИОДА(Док.Ссылка.Дата, ДЕНЬ) КАК Период,
	               |	Док.Ссылка.Валюта КАК Валюта,
	               |	Док.Ссылка.Валюта.Код КАК КодВалюты,
	               |	Док.Ссылка КАК ДокументИнформационнйБазы,
	               |	Док.Ссылка.Контрагент КАК Контрагент,
	               |	Док.Ссылка.Договор КАК ДоговорКонтрагента,
	               |	Док.Номенклатура КАК ПредметСделки,
	               |	Док.Характеристика КАК ХарактеристикаНоменклатуры,
	               |	"""" КАК Содержание,
	               |	Док.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА Док.Ссылка.ЦенаВключаетНДС
	               |			ТОГДА Док.Сумма - Док.СуммаНДС
	               |		ИНАЧЕ Док.Сумма
	               |	КОНЕЦ КАК СуммаВал
	               |ИЗ
	               |	Документ.ПоступлениеТоваровУслуг.Товары КАК Док
	               |ГДЕ
	               |	Док.Ссылка.Организация = &Организация И Док.Ссылка.Проведен
	               |	И Док.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И Док.Ссылка.Контрагент В(&Контрагенты)
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Док.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
				   |	Док.Ссылка.МоментВремени КАК МоментВремени,
				   |	Док.НомерСтроки КАК НомерСтроки,
	               |	НАЧАЛОПЕРИОДА(Док.Ссылка.Дата, ДЕНЬ) КАК Период,
	               |	Док.Ссылка.Валюта КАК Валюта,
	               |	Док.Ссылка.Валюта.Код КАК КодВалюты,
	               |	Док.Ссылка КАК ДокументИнформационнйБазы,
	               |	Док.Ссылка.Контрагент КАК Контрагент,
	               |	Док.Ссылка.Договор КАК ДоговорКонтрагента,
	               |	NULL КАК ПредметСделки,
	               |	NULL КАК ХарактеристикаНоменклатуры,
	               |	Док.Содержание КАК Содержание,
	               |	Док.Количество КАК Количество,
	               |	ВЫБОР
	               |		КОГДА Док.Ссылка.ЦенаВключаетНДС
	               |			ТОГДА Док.Сумма - Док.СуммаНДС
	               |		ИНАЧЕ Док.Сумма
	               |	КОНЕЦ КАК СуммаВал
	               |ИЗ
	               |	Документ.ПоступлениеУслугПрочихАктивов.Расходы КАК Док
	               |ГДЕ
	               |	Док.Ссылка.Организация = &Организация И Док.Ссылка.Проведен
	               |	И Док.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И Док.Ссылка.Контрагент В(&Контрагенты)
				   
				   
			       |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Док.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
				   |	Док.Ссылка.МоментВремени КАК МоментВремени,
				   |	Док.НомерСтроки КАК НомерСтроки,
	               |	НАЧАЛОПЕРИОДА(Док.Ссылка.Дата, ДЕНЬ) КАК Период,
	               |	Док.Ссылка.Валюта КАК Валюта,
	               |	Док.Ссылка.Валюта.Код КАК КодВалюты,
	               |	Док.Ссылка КАК ДокументИнформационнйБазы,
	               |	Док.Ссылка.Контрагент КАК Контрагент,
	               |	Док.Ссылка.Договор КАК ДоговорКонтрагента,
	               |	Номенклатура КАК ПредметСделки,
	               |	Характеристика КАК ХарактеристикаНоменклатуры,
	               |	"""" КАК Содержание,
	               |	1 КАК Количество,
	               |	Док.Сумма КАК СуммаВал
	               |ИЗ
	               |	Документ.ОтчетПереработчика.Услуги КАК Док
	               |ГДЕ
	               |	Док.Ссылка.Организация = &Организация И Док.Ссылка.Проведен
	               |	И Док.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И Док.Ссылка.Контрагент В(&Контрагенты)
				   
			       |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	Док.Ссылка.Контрагент.Наименование КАК КонтрагентНаименование,
				   |	Док.Ссылка.МоментВремени КАК МоментВремени,
				   |	Док.НомерСтроки КАК НомерСтроки,
	               |	НАЧАЛОПЕРИОДА(Док.Ссылка.Дата, ДЕНЬ) КАК Период,
	               |	Док.Ссылка.Валюта КАК Валюта,
	               |	Док.Ссылка.Валюта.Код КАК КодВалюты,
	               |	Док.Ссылка КАК ДокументИнформационнйБазы,
	               |	Док.Ссылка.Контрагент КАК Контрагент,
	               |	Док.Ссылка.Договор КАК ДоговорКонтрагента,
	               |	Номенклатура КАК ПредметСделки,
	               |	Характеристика КАК ХарактеристикаНоменклатуры,
	               |	"""" КАК Содержание,
	               |	1 КАК Количество,
	               |	Док.Сумма КАК СуммаВал
	               |ИЗ
	               |	Документ.ПоступлениеОтПереработчика.Товары КАК Док
	               |ГДЕ
	               |	Док.Ссылка.Организация = &Организация И Док.Ссылка.Проведен
	               |	И Док.Ссылка.Дата МЕЖДУ &НачПериода И &КонПериода
	               |	И Док.Ссылка.Контрагент В(&Контрагенты)
				   
				   
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремТаблица.Период,
	               |	ВремТаблица.Валюта,
	               |	ВремТаблица.КодВалюты,
	               |	ВремТаблица.ДокументИнформационнйБазы,
	               |	ВремТаблица.Контрагент,
	               |	ВремТаблица.ДоговорКонтрагента,
	               |	ВремТаблица.ПредметСделки,
	               |	ВремТаблица.ХарактеристикаНоменклатуры,
	               |	ВремТаблица.Содержание,
	               |	ВремТаблица.Количество,
	               |	ВремТаблица.СуммаВал
	               |ИЗ
	               |	ВремТаблица КАК ВремТаблица
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВремТаблица.КонтрагентНаименование,
	               |	ВремТаблица.МоментВремени,
	               |	ВремТаблица.НомерСтроки
				   |";
				   
				   
				   
	ТипПереработка1 = Тип("ДокументСсылка.ОтчетПереработчика");
	ТипПереработка2 = Тип("ДокументСсылка.ПоступлениеОтПереработчика");
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Строка = Объект.КонтролируемыеСделки.Добавить();
		
		Строка.ДокументИнформационнйБазы = Выборка.ДокументИнформационнйБазы; 
		Строка.Контрагент 				 = Выборка.Контрагент; 
		Строка.ДоговорКонтрагента 		 = Выборка.ДоговорКонтрагента;

		Строка.СтатусКонтрагента		 = ПолучитьСтатусКонтрагентаНаСервере(Строка.ДоговорКонтрагента);
		
		ЗаполнитьДанныеПоДоговорамУчастников(Строка); //КодНаименованияОперации, ДатаКонтракта, НомерКонтракта, КодСтороныОперации12, УсловиеПоставкиПоИнкотермс
		
		Строка.ПредметСделки		 		= Выборка.ПредметСделки;
		Строка.ХарактеристикаНоменклатуры	= Выборка.ХарактеристикаНоменклатуры;
		Строка.ПредметСделкиСтрока		 	= Выборка.Содержание;
		
		Если НЕ ЗначениеЗаполнено(Строка.ПредметСделкиСтрока) Тогда
			
			Строка.ПредметСделкиСтрока 			= "" + Строка.ПредметСделки;
			Если ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры) Тогда
				Строка.ПредметСделкиСтрока = "" + Строка.ПредметСделки.НаименованиеПолное + " (" + Строка.ХарактеристикаНоменклатуры + ")";	
			Иначе
				Строка.ПредметСделкиСтрока = "" + Строка.ПредметСделки.НаименованиеПолное;
			КонецЕсли;		
		КонецЕсли;
		
		ЗаполнитьДанныеПоПредметамКонтролируемыхОпераций(Строка); //КодПредмета, КодКлассификатораПродукцииИУслуг, КодУКТВЭД, КодУКВЭП, КодСтраныПроисхождения, ТорговаяМарка, Производитель, ЕдиницаИзмерения  
		
		Если    ТипЗнч(Строка.ДокументИнформационнйБазы) = ТипПереработка1
			ИЛИ ТипЗнч(Строка.ДокументИнформационнйБазы) = ТипПереработка2 Тогда
		
			
			Если НЕ ЗначениеЗаполнено(Выборка.Содержание) Тогда
				// продукция, которая перерабатывается
				Строка.КодПредмета = "204";	
				Строка.ПредметСделкиСтрока = Строка.ПредметСделкиСтрока + " (переробка)";	
			КонецЕсли;
			
		КонецЕсли;
			
		Строка.ДатаОперацииС	 = Выборка.Период;
		Строка.ДатаОперацииПо	 = Выборка.Период;
		
		Строка.Количество		 = Выборка.Количество;
		Строка.ЦенаВал		 	 = ?(Выборка.Количество = 0, 0, Выборка.СуммаВал / Выборка.Количество);
		
		Строка.КодВалюты		 = Выборка.КодВалюты;
		Строка.КурсВалюты		 = ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Период);
		
		Строка.СуммаРегл 		 = Строка.Количество * Строка.ЦенаВал * Строка.КурсВалюты;
		Строка.ЦенаРегл  		 = ?(Строка.Количество = 0, 0, Строка.СуммаРегл/Строка.Количество);

		ЗаполнитьДанныеПоОбычнойЦене(Строка, Выборка.Период); //КодОснования, КодМетода123, КодИсточника, ЦенаОбычнаяРегл  
		
		РассчитатьСуммуКорректировкиДоходовЗатратПоСтроке(Строка);
		
		Если Объект.СуммыВсехОпераций.НайтиСтроки(Новый Структура("Контрагент", Строка.Контрагент)).Количество() = 0 Тогда
			СтрокаИтогов = Объект.СуммыВсехОпераций.Добавить();
			СтрокаИтогов.Контрагент = Строка.Контрагент;
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериод(Команда)
	
	Если    Не ЗначениеЗаполнено(ОБъект.НачПериода)
		ИЛИ Не ЗначениеЗаполнено(ОБъект.КонПериода) Тогда
			ПоказатьПредупреждение(,НСтр("ru='Укажите начало и конец периода!';uk='Вкажіть початок і кінець періоду!'"));
		Возврат;	
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗаПериодОкончание",ЭтаФорма);
	Если Объект.КонтролируемыеСделки.Количество() > 0 Тогда
		
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Табличная часть будет очищена. Продолжить?';uk='Таблична частина буде очищена. Продовжити?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодОкончание(Результат, ДопПараметры) Экспорт

	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КонтролируемыеСделки.Очистить();		
	
	ЗаполнитьЗаПериодНаСервере();
	
	мПересчитыватьСуммуВсехОпераций = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСвязанностьНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("Организация", Объект.Организация);
	
	ОткрытьФорму("РегистрСведений.СвязанностьЛицКонтролируемыхОпераций.Форма.ФормаСписка", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаСуммыВсехОпераций Тогда
		Если мПересчитыватьСуммуВсехОпераций = Истина Тогда
			
			РассчитатьСуммуВсехОпераций();
			Элементы.СуммыВсехОпераций.Обновить();
			мПересчитыватьСуммуВсехОпераций = Ложь;
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсехОпераций()

	Для каждого СтрокаИтогов Из Объект.СуммыВсехОпераций Цикл
		
		ДанныеПоКонтрагенту = Объект.КонтролируемыеСделки.НайтиСтроки(Новый Структура("Контрагент", СтрокаИтогов.Контрагент));
		
		СуммаРегл = 0;
		Для каждого СтрокаДанныеПоКонтрагенту Из ДанныеПоКонтрагенту Цикл
			СуммаРегл = СуммаРегл + СтрокаДанныеПоКонтрагенту.СуммаРегл;
		КонецЦикла;
		СтрокаИтогов.СуммаРегл = СуммаРегл;
		
		Если СтрокаИтогов.СуммаОперацийЗаПериод < СтрокаИтогов.СуммаРегл Тогда
			СтрокаИтогов.СуммаОперацийЗаПериод = СтрокаИтогов.СуммаРегл;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиСуммаРеглПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЦенаРегл  = ?(ТекущиеДанные.Количество = 0, 0, ТекущиеДанные.СуммаРегл/ТекущиеДанные.Количество);
	РассчитатьСуммуКорректировкиДоходовЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыВсехОперацийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.СуммыВсехОпераций.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока и ОтменаРедактирования Тогда
		Возврат;	
	КонецЕсли;
	
	Если НоваяСтрока Тогда
	
		Если Объект.СуммыВсехОпераций.НайтиСтроки(Новый Структура("Контрагент", ТекущиеДанные.Контрагент)).Количество() > 1 Тогда
			Сообщить("Контрагент " + ТекущиеДанные.Контрагент + " уже есть в табличной части!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		Сообщить("Укажите контрагента!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВсехОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаПриИзменении(Элемент)
	
	Если Объект.НачПериода > Объект.КонПериода Тогда
		Объект.КонПериода = Объект.НачПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаПриИзменении(Элемент)
	
	Если Объект.НачПериода > Объект.КонПериода Тогда
		Объект.КонПериода = Объект.НачПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоДоговорамУчастников(Строка)

	ЕстьДанныеДляЗаполнения = Истина;
	СтруктураПоиска = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Объект.Организация, Строка.Контрагент, Строка.ДоговорКонтрагента);
	Если ДоговорыУчастниковКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		
		СтруктураПоиска.Вставить("ДоговорКонтрагента", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
		Если ДоговорыУчастниковКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			
				ЕстьДанныеДляЗаполнения = Ложь;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЕстьДанныеДляЗаполнения = Истина Тогда
	
		СтрокаДанных = ДоговорыУчастниковКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска)[0];
		
		Строка.КодНаименованияОперации 	= СтрокаДанных.КодНаименованияОперации;
		Строка.ДатаКонтракта   			= СтрокаДанных.ДатаКонтракта;
		Строка.НомерКонтракта   		= СтрокаДанных.НомерКонтракта;
		Строка.КодСтороныОперации   	= СтрокаДанных.КодСтороныОперации;
		Строка.УсловиеПоставкиПоИнкотермс = СтрокаДанных.УсловиеПоставкиПоИнкотермс;
	
	КонецЕсли;		

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоПредметамКонтролируемыхОпераций(Строка)

	ЕстьДанныеДляЗаполнения = Истина;
	СтруктураПоиска = Новый Структура("ПредметСделки, ХарактеристикаНоменклатуры", Строка.ПредметСделки, ?(ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры), Строка.ХарактеристикаНоменклатуры, ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")));
	Если ПредметыКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
		Если ПредметыКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ЕстьДанныеДляЗаполнения = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьДанныеДляЗаполнения = Истина Тогда
	
		СтрокаДанных = ПредметыКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска)[0];
		
		Строка.КодПредмета = СтрокаДанных.КодПредмета;
		Строка.КодКлассификатораПродукцииИУслуг   = СтрокаДанных.КодКлассификатораПродукцииИУслуг;
		Строка.КодУКТВЭД   		= СтрокаДанных.КодУКТВЭД;
		Строка.КодУКВЭП   		= СтрокаДанных.КодУКВЭП;
		Строка.КодСтраныПроисхождения = СтрокаДанных.КодСтраныПроисхождения;
		Строка.ТорговаяМарка 	= СтрокаДанных.ТорговаяМарка;
		Строка.Производитель 	= СтрокаДанных.Производитель;
		Строка.Упаковка = СтрокаДанных.Упаковка;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКурсВалютыНаКлиенте(Валюта, Период)

	Возврат ПолучитьКурсВалюты(Валюта, Период);	

КонецФункции 

&НаСервере
Функция ПолучитьКурсВалюты(Валюта, Период)

	СтруктураПоиска = Новый Структура("Валюта, Период", Валюта, НачалоДня(Период));
	
	Если ТаблицаКурсов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
	
		СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, Период);
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		Курс = ?(КратностьВзаиморасчетов = 0, 0, КурсВзаиморасчетов/КратностьВзаиморасчетов);
		
		Строка = ТаблицаКурсов.Добавить();
		Строка.Валюта = Валюта;
		Строка.Период = НачалоДня(Период);
		Строка.Курс   = Курс;
		
	Иначе
		
		Курс = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска)[0].Курс;
		
	КонецЕсли;
	
	Возврат Курс;	

КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьСписокСвязанныхКонтрагентов(Организация, Дата)

	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", 	 Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвязанностьЛицКонтролируемыхОперацийСрезПоследних.Контрагент,
	               |	СвязанностьЛицКонтролируемыхОперацийСрезПоследних.КодСвязанностиЛиц1,
	               |	СвязанностьЛицКонтролируемыхОперацийСрезПоследних.КодСвязанностиЛиц2,
	               |	СвязанностьЛицКонтролируемыхОперацийСрезПоследних.КодСвязанностиЛиц3,
	               |	СвязанностьЛицКонтролируемыхОперацийСрезПоследних.КодСвязанностиЛиц4
	               |ИЗ
	               |	РегистрСведений.СвязанностьЛицКонтролируемыхОпераций.СрезПоследних(&Период, Организация = &Организация) КАК СвязанностьЛицКонтролируемыхОперацийСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
		
	МассивСвязанныхКонтрагентов = Новый Массив();
	Пока Выборка.Следующий() Цикл
		
		Если    ЗначениеЗаполнено(Выборка.КодСвязанностиЛиц1)
			ИЛИ ЗначениеЗаполнено(Выборка.КодСвязанностиЛиц2) 
			ИЛИ ЗначениеЗаполнено(Выборка.КодСвязанностиЛиц3) 
			ИЛИ ЗначениеЗаполнено(Выборка.КодСвязанностиЛиц4) Тогда
			
			МассивСвязанныхКонтрагентов.Добавить(Выборка.Контрагент);
		
		КонецЕсли;
		
	КонецЦикла;
	
	ВОзврат МассивСвязанныхКонтрагентов;	

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоОбычнойЦене(Строка, Период)

	ЕстьДанныеДляЗаполнения = Истина;
	СтруктураПоиска = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", ОБъект.Организация, Строка.Контрагент, Строка.ДоговорКонтрагента);
	Если ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		
		СтруктураПоиска.Вставить("ДоговорКонтрагента", ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
		Если ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			
			СтруктураПоиска.Вставить("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			Если ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				
				СтруктураПоиска.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
				Если ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					ЕстьДанныеДляЗаполнения = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ЕстьДанныеДляЗаполнения = Истина Тогда
	
		СтрокаДанных = ПараметрыОпределенияОбычныхЦенКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска)[0];
		
		Строка.КодОснования = СтрокаДанных.КодОснования;
		Строка.КодМетода   = СтрокаДанных.КодМетода;
		Строка.КодИсточника = СтрокаДанных.КодИсточника;
		Строка.ИсследуемаяСторона = СтрокаДанных.ИсследуемаяСторона;
		
	КонецЕсли;
	
	ЕстьДанныеДляЗаполнения = Истина;
	СтруктураПоиска = Новый Структура("Организация, Контрагент, ДоговорКонтрагента,  ПредметСделки, ХарактеристикаНоменклатуры", Объект.Организация, Строка.Контрагент, Строка.ДоговорКонтрагента, Строка.ПредметСделки, ?(ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры), Строка.ХарактеристикаНоменклатуры, ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")));
	Если ОбычныеЦеныКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		
		СтруктураПоиска.Вставить("ДоговорКонтрагента",  ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
		Если ОбычныеЦеныКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			
			СтруктураПоиска.Вставить("Контрагент", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
			Если ОбычныеЦеныКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				
				СтруктураПоиска.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
				Если ОбычныеЦеныКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					ЕстьДанныеДляЗаполнения = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	
    Если ЕстьДанныеДляЗаполнения = Истина Тогда
	
		СтрокаДанных 		   = ОбычныеЦеныКонтролируемыхОпераций.НайтиСтроки(СтруктураПоиска)[0];
		Строка.ЦенаОбычнаяРегл = СтрокаДанных.Цена * ПолучитьКурсВалюты(СтрокаДанных.ВалютаЦены, Период);	
		Строка.ПоказательРентабельности 		= СтрокаДанных.ПоказательРентабельности;	
		Строка.ЗначениеПоказателяРентабельности = СтрокаДанных.ЗначениеПоказателяРентабельности;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтатусКонтрагента(ДоговорКонтрагента)

	Возврат ПолучитьСтатусКонтрагентаНаСервере(ДоговорКонтрагента);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьСтатусКонтрагентаНаСервере(ДоговорКонтрагента)

	СтатусКонтрагента 	= Неопределено;
	ВидДоговора 		= ДоговорКонтрагента.ТипДоговора;
	
	Если ВидДоговора = Перечисления.ТипыДоговоров.СКомиссионером Тогда
		СтатусКонтрагента = Ложь;
	ИначеЕсли ВидДоговора = Перечисления.ТипыДоговоров.СКомитентом Тогда
		СтатусКонтрагента = Истина;
	ИначеЕсли ВидДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
		СтатусКонтрагента = Ложь;
	ИначеЕсли ВидДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
		СтатусКонтрагента = Истина;
	Иначе
		СтатусКонтрагента = Ложь;
	КонецЕсли;
	
	Возврат СтатусКонтрагента;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуКорректировкиДоходовЗатратПоСтроке(ТекущиеДанные)

	Если  ТекущиеДанные.СтатусКонтрагента = Ложь 
		И ТекущиеДанные.ЦенаОбычнаяРегл > ТекущиеДанные.ЦенаРегл Тогда
		
		ТекущиеДанные.СуммаКорректировкиДоходов = ТекущиеДанные.Количество * ТекущиеДанные.ЦенаОбычнаяРегл - ТекущиеДанные.СуммаРегл;
		
	ИначеЕсли ТекущиеДанные.СтатусКонтрагента = Истина 
		    И ТекущиеДанные.ЦенаОбычнаяРегл < ТекущиеДанные.ЦенаРегл Тогда
			
		ТекущиеДанные.СуммаКорректировкиРасходов = ТекущиеДанные.Количество * ТекущиеДанные.ЦенаОбычнаяРегл - ТекущиеДанные.СуммаРегл;
		
	Иначе
		
		ТекущиеДанные.СуммаКорректировкиРасходов = 0;
		ТекущиеДанные.СуммаКорректировкиДоходов = 0;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуКорректировкиДоходовЗатрат()
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = Новый Структура("ЦенаРегл, ЦенаОбычнаяРегл, СтатусКонтрагента, Количество, СуммаРегл, СуммаКорректировкиРасходов, СуммаКорректировкиДоходов");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекущиеДанные);
	
	РассчитатьСуммуКорректировкиДоходовЗатратПоСтроке(СтруктураСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиЦенаОбычнаяРеглПриИзменении(Элемент)
	
	РассчитатьСуммуКорректировкиДоходовЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиКурсВалютыПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРегл = ТекущиеДанные.Количество * ТекущиеДанные.ЦенаВал * ТекущиеДанные.КурсВалюты;
	ТекущиеДанные.ЦенаРегл  = ?(ТекущиеДанные.Количество = 0, 0, ТекущиеДанные.СуммаРегл/ТекущиеДанные.Количество);
	РассчитатьСуммуКорректировкиДоходовЗатрат();

КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиКоличествоПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРегл = ТекущиеДанные.Количество * ТекущиеДанные.ЦенаВал * ТекущиеДанные.КурсВалюты;
	ТекущиеДанные.ЦенаРегл  = ?(ТекущиеДанные.Количество = 0, 0, ТекущиеДанные.СуммаРегл/ТекущиеДанные.Количество);
	РассчитатьСуммуКорректировкиДоходовЗатрат();

КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиЦенаВалПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.СуммаРегл = ТекущиеДанные.Количество * ТекущиеДанные.ЦенаВал * ТекущиеДанные.КурсВалюты;
	ТекущиеДанные.ЦенаРегл  = ?(ТекущиеДанные.Количество = 0, 0, ТекущиеДанные.СуммаРегл/ТекущиеДанные.Количество);
	РассчитатьСуммуКорректировкиДоходовЗатрат();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиКодВалютыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

    Валюта = НайтиВалюту(ТекущиеДанные.КодВалюты);
	Если ЗначениеЗаполнено(Валюта) Тогда
	
		КурсВалюты = ПолучитьКурсВалютыНаКлиенте(Валюта, ТекущиеДанные.ДатаОперацииПо);
		
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.Количество * ТекущиеДанные.ЦенаВал * ТекущиеДанные.КурсВалюты;
		ТекущиеДанные.ЦенаРегл  = ?(ТекущиеДанные.Количество = 0, 0, ТекущиеДанные.СуммаРегл/ТекущиеДанные.Количество);
		РассчитатьСуммуКорректировкиДоходовЗатрат();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиВалюту(КодВалюты)

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Валюты.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Валюты КАК Валюты
	                      |ГДЕ
	                      |	Валюты.Код = &Код");	
	Запрос.УстановитьПараметр("Код", КодВалюты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;	
	
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеКодаСтороныОперации(КонНаимОперации, КодСторОперации)
	
	СписокВозможныхЗначений = КонтролируемыеОперацииПовтИсп.ПолучитьСписокВыбораКодыСтороныОпераций(КонНаимОперации);
	Если СписокВозможныхЗначений.НайтиПоЗначению(КодСторОперации) = Неопределено Тогда
		КодСторОперации = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиКодСтороныОперацииПриИзменени(Элемент)
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСоответствиеКодаСтороныОперации(ТекущиеДанные.КодНаименованияОперации, ТекущиеДанные.КодСтороныОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиКодНаименованияОперацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСоответствиеКодаСтороныОперации(ТекущиеДанные.КодНаименованияОперации, ТекущиеДанные.КодСтороныОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиСтатусКонтрагентаПриИзменении(Элемент)
	
	РассчитатьСуммуКорректировкиДоходовЗатрат();

КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговора(ТекущиеДанные.ДоговорКонтрагента);
	ТекущиеДанные.ДатаКонтракта  = РеквизитыДоговора.Дата;
	ТекущиеДанные.НомерКонтракта = РеквизитыДоговора.Номер;
	
	ТекущиеДанные.СтатусКонтрагента = ПолучитьСтатусКонтрагента(ТекущиеДанные.ДоговорКонтрагента);
	
	РассчитатьСуммуКорректировкиДоходовЗатрат();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыДоговора(ДоговорКонтрагента)

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Дата, Номер");

КонецФункции

&НаКлиенте
Процедура КонтролируемыеСделкиПредметСделкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("ПредметСделкиСтрока, ПредметСделки, ХарактеристикаНоменклатуры, КодПредмета, КодУКТВЭД");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекущиеДанные);
	
	КонтролируемыеСделкиПредметСделкиПриИзмененииНаСервере(СтруктураДанных);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура КонтролируемыеСделкиПредметСделкиПриИзмененииНаСервере(ТекущиеДанные)
	
	Если  ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаНоменклатуры)
		И ТекущиеДанные.ХарактеристикаНоменклатуры.Владелец = ТекущиеДанные.ПредметСделки Тогда
		
		ТекущиеДанные.ПредметСделкиСтрока = "" + ТекущиеДанные.ПредметСделки.НаименованиеПолное + " (" + ТекущиеДанные.ХарактеристикаНоменклатуры + ")";	
		
	Иначе
		
		ТекущиеДанные.ПредметСделкиСтрока = "" + ТекущиеДанные.ПредметСделки.НаименованиеПолное;
		
	КонецЕсли;
	
	Тип = ТекущиеДанные.ПредметСделки.ВидНоменклатуры.ТипНоменклатуры;
	Если Тип = Перечисления.ТипыНоменклатуры.Работа Тогда
		ТекущиеДанные.КодПредмета = "207";
	ИначеЕсли Тип = Перечисления.ТипыНоменклатуры.Услуга Тогда
		ТекущиеДанные.КодПредмета = "204";
	Иначе	
	    ТекущиеДанные.КодПредмета = "201";
	КонецЕсли;
	
	ТекущиеДанные.КодУКТВЭД = ТекущиеДанные.ПредметСделки.НоменклатураГТД.КодУКТВЭД;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура("ПредметСделкиСтрока, ПредметСделки, ХарактеристикаНоменклатуры");
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ТекущиеДанные);
	
	КонтролируемыеСделкиХарактеристикаНоменклатурыПриИзмененииНаСервере(СтруктураДанных);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураДанных);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура КонтролируемыеСделкиХарактеристикаНоменклатурыПриИзмененииНаСервере(ТекущиеДанные)
	
	Если  ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаНоменклатуры) Тогда
		
		ТекущиеДанные.ПредметСделкиСтрока = "" + ТекущиеДанные.ПредметСделки.НаименованиеПолное + " (" + ТекущиеДанные.ХарактеристикаНоменклатуры + ")";	
		
	Иначе
		
		ТекущиеДанные.ПредметСделкиСтрока = "" + ТекущиеДанные.ПредметСделки.НаименованиеПолное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролируемыеСделкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.КонтролируемыеСделки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОБъект.СуммыВсехОпераций.НайтиСтроки(Новый Структура("Контрагент", ТекущиеДанные.Контрагент)).Количество() = 0 Тогда
		СтрокаИтогов = ОБъект.СуммыВсехОпераций.Добавить();
		СтрокаИтогов.Контрагент = ТекущиеДанные.Контрагент;
	КонецЕсли;
	
	мПересчитыватьСуммуВсехОпераций = Истина;
	
КонецПроцедуры
