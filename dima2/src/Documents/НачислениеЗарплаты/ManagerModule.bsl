#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.НачислениеЗарплаты - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.НачислениеЗарплаты - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеПоВсемУчетам = Ложь;
	МассивРегистров = Новый Массив;
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ВидыУчетов") Тогда 
		ВидыУчетов = ДополнительныеПараметры.ВидыУчетов;
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
	КонецЕсли;        
	
	// Предусмотрен режим проведения по отдельным физическим лицам.
	СписокФизическихЛиц = Неопределено;
	Если ДополнительныеПараметры <> Неопределено  
		И ДополнительныеПараметры.Свойство("ФизическиеЛица")
		И ДополнительныеПараметры.ФизическиеЛица.Количество() > 0 Тогда
		СписокФизическихЛиц = ДополнительныеПараметры.ФизическиеЛица
	КонецЕсли;
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);
	ДанныеДляПроведения = ДанныеДляПроведения(РеквизитыДляПроведения, РеквизитыДляПроведения.МесяцНачисления, СписокФизическихЛиц, СтруктураВидовУчета);
	
	Если СтруктураВидовУчета.Начисления Тогда
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.МесяцНачисления), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
		РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачисленийПоДоговорам(Движения, Отказ, РеквизитыДляПроведения.Организация, НачалоМесяца(РеквизитыДляПроведения.МесяцНачисления), ДанныеДляПроведения.НачисленияПоДоговорам);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.МесяцНачисления), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
		ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
		
		
		// НДФЛ
		УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.МесяцНачисления), КонецМесяца(РеквизитыДляПроведения.МесяцНачисления), ДанныеДляПроведения.МенеджерВременныхТаблиц, , Истина, , , РеквизитыДляПроведения.Ссылка);
		

		ДатаОперации = НачалоМесяца(РеквизитыДляПроведения.МесяцНачисления);
		УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, РеквизитыДляПроведения.Организация, ДатаОперации, ДанныеДляПроведения.НДФЛ);
		
		// - Регистрация договоров в учете НДФЛ.
		УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.МесяцНачисления), ДанныеДляПроведения.НачисленияПоДоговорам, Истина);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.УчетНачисленнойЗарплаты Тогда
		

		// Учет начисленной зарплаты
		// - регистрация НДФЛ в учете начислений и удержаний
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, ДанныеДляПроведения.НДФЛПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПорядокВыплаты);
			
		// - Регистрация договоров в учете начислений и удержаний.
		// (Специально сначала регистрируем договоры для использования этих сумм в качестве базы удержаний).
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления,
			ДанныеДляПроведения.НачисленияПоДоговорамСРаспределением, Неопределено, Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
		
		// - Регистрация начислений и удержаний в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, ДанныеДляПроведения.НачисленияПоСотрудникам, ДанныеДляПроведения.УдержанияПоСотрудникам, Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
			
		// - Регистрация отработанного времени в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
			Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
			
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
			
		// - Регистрация начислений и удержаний.
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления,
						ДанныеДляПроведения.НачисленияПоСотрудникам,
						ДанныеДляПроведения.УдержанияПоСотрудникам,
						ДанныеДляПроведения.НДФЛПоСотрудникам);
						
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления,
						ДанныеДляПроведения.НачисленияПоДоговорамСРаспределением,
						Неопределено,
						Неопределено);
						
		ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления,
						Неопределено,
						ДанныеДляПроведения.УдержанияЗаймов,
						ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
						

		УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, ДанныеДляПроведения.МенеджерВременныхТаблиц, , Истина, РеквизитыДляПроведения.Ссылка);
		
		// - Регистрация договоров в доходах для страховых взносов.
		СведенияОДоходахСтраховыеВзносы = УчетСтраховыхВзносовРасширенный.СведенияОДоходахПоДоговорамСтраховыеВзносы(
			РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, ДанныеДляПроведения.МенеджерВременныхТаблиц);
		
		УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, СведенияОДоходахСтраховыеВзносы, Истина);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ИсчисленныеСтраховыеВзносы Тогда
		
		// - страховые взносы
		УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, ДанныеДляПроведения.СтраховыеВзносы);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
		
		// Займы
		// - взаиморасчеты по займам
		ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.УчетНачисленнойЗарплаты Тогда
		
		// - Регистрация займов в учете заработной платы.
		УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьПогашениеЗаймов(Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления, ДанныеДляПроведения.УдержанияЗаймов, РеквизитыДляПроведения.ПорядокВыплаты);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
		
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.ЗарегистрироватьНачисленияДляРасчетаСохраняемогоДенежногоСодержания(Движения, Отказ, РеквизитыДляПроведения.МесяцНачисления, ДанныеДляПроведения.НачисленияДляРегистрацииДенежногоСодержания);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Или СтруктураВидовУчета.Начисления Тогда
		
		// Получение признака о том, что нужно удалить перерасчеты текущего периода
		УдалитьПерерасчетыТекущегоПериода = Неопределено;
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.Свойство("УдалитьПерерасчетыТекущегоПериода", УдалитьПерерасчетыТекущегоПериода);
		КонецЕсли;
		УдалитьПерерасчетыТекущегоПериода = (УдалитьПерерасчетыТекущегоПериода = Истина);
		
		ПериодыРасчетаСотрудников =  Неопределено;
		Если ДополнительныеПараметры <> Неопределено Тогда
			ДополнительныеПараметры.Свойство("ПериодыРасчетаСотрудников", ПериодыРасчетаСотрудников);
		КонецЕсли;
		
		ПерерасчетЗарплаты.УдалениеПерерасчетов(РеквизитыДляПроведения.Ссылка, УдалитьПерерасчетыТекущегоПериода, ПериодыРасчетаСотрудников);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.РежимДоначисления Тогда
		
		СтандартнаяОбработка = Ложь;
		Представление = ПредставлениеТипаДоначислениеПерерасчет() + " " + Данные.Номер + " " +НСтр("ru='от';uk='від'") + " "  + Формат(Данные.Дата, "ДЛФ=D");;
		
	Иначе 
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		    ВидОперации = Модуль.ВидОперацииДокумента(Данные.Ссылка);
			Если ЗначениеЗаполнено(ВидОперации) Тогда
				СтандартнаяОбработка = Ложь;
				Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 %2 от %3';uk='%1 %2 від %3'"), Строка(ВидОперации), Данные.Номер, Формат(Данные.Дата, "ДЛФ=Д"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("РежимДоначисления");
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	Поля.Добавить("Ссылка");
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура ПодготовитьДанныеДляЗаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	
	РезультатЗаполнения = Новый Структура;
	
	// Получение данных для заполнения табличных частей документа.
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента;
	Организация = СтруктураПараметров.Организация;
	МесяцНачисления = СтруктураПараметров.МесяцНачисления;
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыЗаполненияТаблицДокумента();
	ДополнительныеПараметры.ДокументСсылка = СтруктураПараметров.ДокументСсылка;
	ДополнительныеПараметры.Подразделение = СтруктураПараметров.Подразделение;
	ДополнительныеПараметры.ОкончаниеПериода = СтруктураПараметров.ОкончаниеПериода;
	ДополнительныеПараметры.РежимНачисления = СтруктураПараметров.РежимНачисления;
	ДополнительныеПараметры.ПорядокВыплаты = СтруктураПараметров.ПорядокВыплаты;
	ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет = СтруктураПараметров.СотрудникиПериодДействияПерерасчет;
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = СтруктураПараметров.ИспользоватьВоеннуюСлужбу;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = СтруктураПараметров.НачислениеЗарплатыВоеннослужащим;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = СтруктураПараметров.ОкончательныйРасчетНДФЛ;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.МногопотоковоеЗаполнениеДокументов") Тогда 
		ДокументПроведен = ЗначениеЗаполнено(СтруктураПараметров.ДокументСсылка) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.ДокументСсылка, "Проведен");
		Модуль = ОбщегоНазначения.ОбщийМодуль("МногопотоковоеЗаполнениеДокументов");
		Если Не ДокументПроведен И Модуль.ИспользоватьМногопотоковоеЗаполнениеДокументов() Тогда
			ДополнительныеПараметры.АдресХранилища = АдресХранилища;
			Модуль.ПодготовитьДанныеДляЗаполнения(ОписаниеДокумента, Организация, МесяцНачисления, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения = РасчетЗарплатыРасширенный.ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, МесяцНачисления, ДополнительныеПараметры);
	
	РезультатЗаполнения.Вставить("ДанныеДляЗаполненияТаблицДокумента", ДанныеЗаполнения);
	
	ПоместитьВоВременноеХранилище(РезультатЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ВыполнитьПроведение(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДокументОбъект = СтруктураПараметров.ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыТекущегоПериода", СтруктураПараметров.УдалитьПерерасчетыТекущегоПериода);
	
	Если СтруктураПараметров.Свойство("ПериодыРасчетаСотрудников") Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПериодыРасчетаСотрудников", СтруктураПараметров.ПериодыРасчетаСотрудников);
	КонецЕсли; 
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция ПредставлениеТипаДоначислениеПерерасчет() Экспорт
	
	Возврат НСтр("ru='Доначисление, перерасчет';uk='Донарахування, перерахунок'");
	
КонецФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

Процедура ЗаполнитьПланируемуюДатуВыплатыЗарплатыПоДоговорам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияПоДоговорам.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК НачисленияПоДоговорам
	|ГДЕ
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		// Обновление уже выполнялось
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.Ссылка КАК Документ,
	|	НачисленияПоДоговорам.Ссылка.Организация КАК Организация,
	|	НачисленияПоДоговорам.Ссылка.МесяцНачисления КАК МесяцНачисления
	|ИЗ
	|	Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК НачисленияПоДоговорам
	|ГДЕ
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты = ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		Пока Выборка.Следующий() Цикл
			
			ПланируемаяДатаВыплатыЗарплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(
				Выборка.Организация, Выборка.МесяцНачисления);
				
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
			Для каждого СтрокаНачисленияПоДоговорам Из ДокументОбъект.НачисленияПоДоговорам Цикл
				СтрокаНачисленияПоДоговорам.ПланируемаяДатаВыплаты = ПланируемаяДатаВыплатыЗарплаты;
			КонецЦикла;
			
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	ПредставлениеДокумента = Метаданные.Документы.НачислениеЗарплаты.Представление();
	
	ОписаниеКоманды = ЗарплатаКадрыРасширенный.ОписаниеКомандыСозданияДокумента(
		"Документ.НачислениеЗарплаты",
		ПредставлениеДокумента);
		
	ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокумента(
		КомандыСозданияДокументов, ОписаниеКоманды);
		
	ВидыОперацийРасчетаЗарплаты = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		ВидыОперацийРасчетаЗарплаты = Модуль.ВидыОперацийРасчетаЗарплаты();
	КонецЕсли; 
	
	ПорядокВидовОпераций = 1;
	Для Каждого ВидОперации Из ВидыОперацийРасчетаЗарплаты Цикл
		
		ВидОперацииСтрокой = Строка(ВидОперации);
		ОписаниеКоманды = ЗарплатаКадрыРасширенный.ОписаниеКомандыСозданияДокумента(
			"Документ.НачислениеЗарплаты",
			ВидОперацииСтрокой,
			ПредставлениеДокумента + ПорядокВидовОпераций);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ВидОперации", ВидОперации);

		ОписаниеКоманды.Параметры = Параметры; 
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокумента(
			КомандыСозданияДокументов, ОписаниеКоманды);
			
		ПорядокВидовОпераций = ПорядокВидовОпераций + 1;
			
	КонецЦикла; 
	
КонецФункции

Процедура ЗаполнитьПредставлениеРаспределенияРезультатовРасчета(ДокументОбъект) Экспорт 
	
	ДокументОбъект.ПредставлениеРаспределенияРезультатовРасчета.Очистить();
	
	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("СтатьяФинансирования", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка());
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		ПроверяемыеПоля.Вставить("СтатьяРасходов", Справочники.СтатьиРасходовЗарплата.ПустаяСсылка());
	КонецЕсли;	
	ПроверяемыеПоля.Вставить("СпособОтраженияЗарплатыВБухучете", Справочники.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка());
		
	ЗаполнитьДанныеПредставленияРаспределенияРезультатовНачисленийУдержаний(ДокументОбъект, ДокументОбъект.РаспределениеРезультатовНачислений, ПроверяемыеПоля, Истина);
	
	ПроверяемыеПоля.Удалить("СпособОтраженияЗарплатыВБухучете");
	ПроверяемыеПоля.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	
	ЗаполнитьДанныеПредставленияРаспределенияРезультатовНачисленийУдержаний(ДокументОбъект, ДокументОбъект.РаспределениеРезультатовУдержаний, ПроверяемыеПоля, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПредставленияРаспределенияРезультатовНачисленийУдержаний(ДокументОбъект, РаспределениеРезультатов, ПроверяемыеПоля, РаспределениеНачислений)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("РаспределениеРезультатов", РаспределениеРезультатов);
					   
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеРезультатов.НомерСтроки,
	|	РаспределениеРезультатов.ИдентификаторСтроки,
	|	&ПроверяемыеПоля КАК ПроверяемыеПоля,
	|	РаспределениеРезультатов.Результат
	|ПОМЕСТИТЬ ВТРаспределениеРезультатов
	|ИЗ
	|	&РаспределениеРезультатов КАК РаспределениеРезультатов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеРезультатов.ИдентификаторСтроки,
	|	КОЛИЧЕСТВО(РаспределениеРезультатов.НомерСтроки) КАК КоличествоСтрок,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ПроверкаНаличияПустыхПолей
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОшибкиЗаполнения
	|ПОМЕСТИТЬ ВТСгруппированныеДанныеПоИдентификаторам
	|ИЗ
	|	ВТРаспределениеРезультатов КАК РаспределениеРезультатов
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеРезультатов.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеРезультатов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РаспределениеРезультатов.НомерСтроки КАК НомерСтрокиРаспределения,
	|	СгруппированныеДанныеПоИдентификаторам.КоличествоСтрок КАК КоличествоЭлементовПредставления,
	|	СгруппированныеДанныеПоИдентификаторам.ЕстьОшибкиЗаполнения КАК ЕстьОшибкиЗаполнения,
	|	РаспределениеРезультатов.Результат КАК Результат
	|ИЗ
	|	ВТРаспределениеРезультатов КАК РаспределениеРезультатов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСгруппированныеДанныеПоИдентификаторам КАК СгруппированныеДанныеПоИдентификаторам
	|		ПО РаспределениеРезультатов.ИдентификаторСтроки = СгруппированныеДанныеПоИдентификаторам.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтроки,
	|	НомерСтрокиРаспределения";

	
	ПроверяемыеПоляТаблицы = "";
	ПроверкаНаличияПустыхПолей = "";
	
	Для Каждого КлючЗначение Из ПроверяемыеПоля Цикл
		
		Запрос.УстановитьПараметр(КлючЗначение.Ключ + "ПустаяСсылка", КлючЗначение.Значение);
		
		ПроверяемыеПоляТаблицы = ПроверяемыеПоляТаблицы + "
								|	РаспределениеРезультатов." + КлючЗначение.Ключ + ",";
								
		ПроверкаНаличияПустыхПолей = ПроверкаНаличияПустыхПолей + " ИЛИ РаспределениеРезультатов." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ + "ПустаяСсылка";
							
	КонецЦикла;	
						
	ПроверкаНаличияПустыхПолей = Сред(ПроверкаНаличияПустыхПолей, 6);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверяемыеПоля КАК ПроверяемыеПоля,", ПроверяемыеПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаНаличияПустыхПолей", ПроверкаНаличияПустыхПолей); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		
		НомерЭлементаПредставления = 0;
		Пока Выборка.Следующий() Цикл
			НомерЭлементаПредставления = НомерЭлементаПредставления + 1;
					
			СтрокаПредставленияРаспределения = ДокументОбъект.ПредставлениеРаспределенияРезультатовРасчета.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПредставленияРаспределения, Выборка);
			
			СтрокаПредставленияРаспределения.ПредставлениеРезультата = Формат(Выборка.Результат, "ЧДЦ=2; ЧРГ=; ЧН=' '");
			СтрокаПредставленияРаспределения.РаспределениеНачислений = РаспределениеНачислений;
			СтрокаПредставленияРаспределения.НомерЭлементаПредставления = НомерЭлементаПредставления;
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляПроведения(РеквизитыДляПроведения, МесяцНачисления, СписокФизическихЛиц, СтруктураВидовУчета)
	
	
	ДанныеДляПроведения = РасчетЗарплаты.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	ОстальныеВидыУчета = Ложь;
	Для Каждого КлючИЗначение Из СтруктураВидовУчета Цикл
		Если КлючИЗначение.Ключ = "ДанныеДляРасчетаСреднего" Тогда 
			Продолжить;
		КонецЕсли;
		Если КлючИЗначение.Значение Тогда 
			ОстальныеВидыУчета = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
								
	Если ОстальныеВидыУчета Тогда

		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет,Льготы", "Ссылка.МесяцНачисления", , СписокФизическихЛиц);
		РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, , СписокФизическихЛиц);
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,Пособия,НачисленияПоДоговорам,Льготы", СписокФизическихЛиц);
		
		ЗаполнитьДанныеПоДоговорамПодряда(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, СписокФизическихЛиц);
		
		ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.МесяцНачисления);

		УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособияхПоУходуЗаРебенком(РеквизитыДляПроведения.Ссылка, ПособиеПлатитУчастникПилотногоПроекта, ДанныеДляПроведения, , "ПособияПерерасчет", СписокФизическихЛиц);
		
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, СписокФизическихЛиц);
		РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, СписокФизическихЛиц);
		
		ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, КонецМесяца(МесяцНачисления), , СписокФизическихЛиц);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			НачисленияДляРегистрацииДенежногоСодержания = Модуль.СведенияОНачисленияхДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка, "Начисления,Пособия");
			ДанныеДляПроведения.Вставить("НачисленияДляРегистрацииДенежногоСодержания", НачисленияДляРегистрацииДенежногоСодержания);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка("Начисления,НачисленияПерерасчет,Пособия");
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры, СписокФизическихЛиц);
	КонецЕсли;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

// Добавляет в ДанныеДляПроведения таблицы значений с данными начислений по договорам,
// а также временную таблицу ВТНачисленияПоДоговорам.
//
Процедура ЗаполнитьДанныеПоДоговорамПодряда(ДанныеДляПроведения, ДокументСсылка, СписокФизическихЛиц = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги", 
		УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги));
		
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК ДокументСсылка,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Начисления.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|	КОНЕЦ КАК Начисление,
	|	Начисления.Результат КАК Сумма,
	|	Начисления.КодДохода КАК КодДохода,
	|	Начисления.ДокументОснование КАК Договор,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТЗаписиНачисленийПоДоговорам
	|ИЗ
	|	Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &Ссылка";
	
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	// Если используются источники финансирования дополняем результатом распределения начислений.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении начислений по источникам финансирования.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаспределениеНачислений.СтатьяФинансирования,
		|	РаспределениеНачислений.СтатьяРасходов,
		|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете,
		|	РаспределениеНачислений.ОблагаетсяЕНВД,
		|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
		|	ЗаписиНачислений.*
		|ПОМЕСТИТЬ ВТНачисленияПоДоговорамСРаспределением
		|ИЗ
		|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплаты.РаспределениеРезультатовНачислений КАК РаспределениеНачислений
		|		ПО ЗаписиНачислений.ИдентификаторСтроки = РаспределениеНачислений.ИдентификаторСтроки
		|			И ЗаписиНачислений.ДокументСсылка = РаспределениеНачислений.Ссылка";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
		|	ЗаписиНачислений.Сумма КАК Сумма,
		|	ЗаписиНачислений.*
		|ПОМЕСТИТЬ ВТНачисленияПоДоговорамСРаспределением
		|ИЗ
		|	ВТЗаписиНачисленийПоДоговорам КАК ЗаписиНачислений";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Таблица значений для регистрации в учете 
	// - договоров подряда.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорам
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеСотрудника,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.ДокументОснование КАК Договор,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода
	|ИЗ
	|	ВТЗаписиНачисленийПоДоговорам КАК НачисленияПоДоговорам";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорам", Запрос.Выполнить().Выгрузить());
	
	// - В учете начисленной зарплаты.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Начисление,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.Договор,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.СтатьяФинансирования,
	|	НачисленияПоДоговорам.СтатьяРасходов,
	|	НачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете,
	|	0 КАК ОтработаноДней,
	|	0 КАК ОтработаноЧасов,
	|	0 КАК ОплаченоДней,
	|	0 КАК ОплаченоЧасов,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.Сумма КАК СуммаДохода,
	|	ЕСТЬNULL(НастройкаГруппУчетаОсобыхНачисленийИУдержаний.ГруппаУчета,ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.ВыплатыПоДоговорам)) КАК ГруппаУчетаНачислений
	|ИЗ
	|	ВТНачисленияПоДоговорамСРаспределением КАК НачисленияПоДоговорам
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаГруппУчетаОсобыхНачисленийИУдержаний КАК НастройкаГруппУчетаОсобыхНачисленийИУдержаний
	|       ПО НачисленияПоДоговорам.Начисление = НастройкаГруппУчетаОсобыхНачисленийИУдержаний.НачислениеУдержание";
	
	ДанныеДляПроведения.Вставить("НачисленияПоДоговорамСРаспределением", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплаты.Ссылка,
	|	НачислениеЗарплаты.МесяцНачисления,
	|	НачислениеЗарплаты.Организация,
	|	НачислениеЗарплаты.ПланируемаяДатаВыплаты,
	|	НачислениеЗарплаты.РежимДоначисления,
	|	НачислениеЗарплаты.ПорядокВыплаты
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.НачислениеЗарплаты.РаспределениеПоТерриториямУсловиямТруда КАК НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	НачислениеЗарплатыРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, МесяцНачисления, Организация, ПланируемаяДатаВыплаты, РежимДоначисления, ПорядокВыплаты, РаспределениеПоТерриториямУсловиямТруда");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

#КонецОбласти

#КонецЕсли