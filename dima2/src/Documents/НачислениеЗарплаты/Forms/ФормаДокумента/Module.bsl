&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

&НаКлиенте
Перем СотрудникУдаляемойСтроки;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем СотрудникиКРасчету Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Объект.РежимДоначисления Тогда
			КлючиИдентификаторовЗаполнения = "Организация, Ответственный, Месяц";
		Иначе
			КлючиИдентификаторовЗаполнения = "Организация, Ответственный, ПредыдущийМесяц";
		КонецЕсли;
		
		ЗначенияДляЗаполнения = Новый Структура(КлючиИдентификаторовЗаполнения, "Объект.Организация", "Объект.Ответственный", "Объект.МесяцНачисления");
		
		Если ПолучитьФункциональнуюОпцию("ВыполнятьРасчетЗарплатыПоПодразделениям") Тогда
			ЗначенияДляЗаполнения.Вставить("Подразделение", "Объект.Подразделение");
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Объект.РежимДоначисления Тогда
			Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
		КонецЕсли; 
			
		ПриПолученииДанныхНаСервере(РеквизитФормыВЗначение("Объект"));
		Если Объект.РежимДоначисления Тогда
			РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачислениеЗарплатыВоеннослужащим",
		"Видимость",
		ИспользоватьВоеннуюСлужбу
		);
	
		Объект.НачислениеЗарплатыВоеннослужащим = ИспользоватьВоеннуюСлужбу;	

	КонецЕсли;
	
	Если Объект.РежимДоначисления Тогда
		РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
		ЗаполнитьПриОткрытии = Параметры.ЗначенияЗаполнения.Свойство("ЗаполнитьПриОткрытии");
	КонецЕсли; 
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельФормы);
	// Конец СтандартныеПодсистемы.Печать
	
	// По умолчанию считаем, что после записи форму нужно закрыть, 
	// в связи с тем, что нельзя обработать событие закрытия в веб-клиенте.
	ЗакрыватьПослеЗаписи = Истина;
	
	ОкончательныйРасчетНДФЛ = Не Объект.РежимДоначисления;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаполнитьПриОткрытии Тогда
		
		ПодключитьОбработчикОжидания("ЗаполнитьДанныеФормыНаКлиенте", 0.1, Истина);
		ЗаполнитьПриОткрытии = Ложь;
		
		Модифицированность = Истина;
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Сотрудники.Форма.ФормаВыбора") Тогда
		ОбработкаПодбораНаКлиенте(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ЗарплатаКадрыРасширенныйКлиент.ОбработкаОповещенияИзмененияРаспределенияИсточниковФинансирования(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	Если ИмяСобытия = "Запись_НачислениеЗарплаты"
		И Параметр.Организация = Объект.Организация
		И Параметр.РежимДоначисления Тогда
		
		УстановитьОтображениеСообщенияОНеобходимостиПерерасчета();
		
	ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбновитьДанныеНДФЛНаСервере(Параметр);
		РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНДФЛ());
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НачислениеЗарплатыВоеннослужащим",
		"Видимость",
		ИспользоватьВоеннуюСлужбу
		);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтаФорма, "ПередЗаписьюОкончание", Отказ, ПараметрыЗаписи);
	
	Если Не Отказ Тогда
		
		// Если документ проведен, то имитируем режим ПриЗаписиПерепроводить.
		Если Объект.Проведен И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			ПровестиДокументНаКлиенте();
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РеквизитыВДанные(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		Модуль.ЗаписатьВидОперацииДокумента(ТекущийОбъект.Ссылка, ЭтотОбъект["ВидОперации"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнениеВыполнено = Ложь;
	ПриПолученииДанныхНаСервере(ТекущийОбъект, Ложь);
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		// Признак необходимости закрытия держим постоянно взведенным.
		ЗакрыватьПослеЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ОписаниеДокумента", ОписаниеДокумента(ЭтотОбъект));
	ПараметрыДокумента.Вставить("ОписаниеТаблицФормы", СтруктураОписанияТаблицДляРаспределенияРезультата(ЭтотОбъект));
	ПараметрыДокумента.Вставить("АдресТаблицыРаспределенияНачислений", АдресТаблицыРаспределенияНачислений);
	ПараметрыДокумента.Вставить("АдресТаблицыРаспределенияУдержаний", АдресТаблицыРаспределенияУдержаний);
	ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержаний(Отказ, ЭтаФорма, ПараметрыДокумента);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
    ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОбработатьИзменениеОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОНеобходимостиПерерасчетаНадписьОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Подробнее" Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
		СтруктураОтбора.Вставить("ПериодДействия", Объект.МесяцНачисления);
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);
		КонецЕсли; 
		
		ПараметрыОткрытия = Новый Структура("Отбор", СтруктураОтбора);
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			СтруктураОтбора.Вставить("Сотрудники", АдресСпискаСотрудниковВХранилище());
		КонецЕсли; 
		
		ОткрытьФорму("РегистрСведений.ПерерасчетЗарплаты.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект,
			, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Начисления

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыНачислений(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыНачислений(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачислений(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	СотрудникУдаляемойСтроки = Элементы.Начисления.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачислений());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыНачислений());
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НачисленияПерерасчет

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПерерасчетов(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПерерасчетов(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПерерасчет", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.НачисленияПерерасчет.ТекущиеДанные.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(
		ЭтаФорма, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПерерасчетов());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаКлиенте(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПослеУдаления(Элемент)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыПерерасчетов());
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетСотрудникПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПерерасчетов();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(), Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НачисленияПоДоговорам

&НаКлиенте
Процедура НачисленияПоДоговорамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачисленийПоДоговорам(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамДокументОснованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НачисленияПоДоговорам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
		ЗаполнитьСотрудникаПриВыбореДоговораГПХ();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПоДоговорам", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НачисленияПоДоговорам", Элементы.НачисленияПоДоговорам.ТекущиеДанные, НоваяСтрока, Копирование);
	Если НоваяСтрока Тогда
		Элементы.НачисленияПоДоговорам.ТекущиеДанные.ПланируемаяДатаВыплаты = 
			РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплатыПоНастройкам(Объект.МесяцНачисления, НастройкиВыплатыЗарплатыВОрганизации);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачисленийПоДоговорам());
	НачисленияПоДоговорамПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПередУдалением(Элемент, Отказ)
	СотрудникУдаляемойСтроки = Элементы.НачисленияПоДоговорам.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамПослеУдаления(Элемент)
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыНачисленийПоДоговорам());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Пособия

&НаКлиенте
Процедура ПособияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПособия(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ПособияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПособия(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПособия(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Пособия", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПередУдалением(Элемент, Отказ)
	СотрудникУдаляемойСтроки = Элементы.Пособия.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Пособия", Элементы.Пособия.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПособия());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияСотрудникПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособия(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПособия();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособия(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособия(), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПособияПерерасчет

&НаКлиенте
Процедура ПособияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыПособияПерерасчет(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;	
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ПособияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПособияПерерасчет(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "ПособияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПередУдалением(Элемент, Отказ)
	СотрудникУдаляемойСтроки = Элементы.ПособияПерерасчет.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "ПособияПерерасчет", Элементы.ПособияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПослеУдаления(Элемент) 
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетСотрудникПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыПособияПерерасчет();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Удержания

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Удержания", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияУдержаниеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыУдержаний();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаДокументаУдержанияПоКатегории(
		Элемент, Элементы.Удержания.ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Удержания", Элементы.Удержания.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыУдержаний());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("УдержанияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(
		ЭтаФорма, ОписаниеТаблицыУдержаний(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
		
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыУдержаний(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПередУдалением(Элемент, Отказ)
	СотрудникУдаляемойСтроки = Элементы.Удержания.ТекущиеДанные.ФизическоеЛицо;
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПослеУдаления(Элемент)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, ОписаниеТаблицыУдержаний());
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияФизическоеЛицоПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержаний(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержаний(), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыУдержаний(), Ложь, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НДФЛ

&НаКлиенте
Процедура НДФЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если УчетНДФЛКлиентРасширенный.НеобходимоОткрытьФормуНДФЛПодробнее(Поле) Тогда
		
		СтандартнаяОбработка = Ложь;
		УчетНДФЛКлиентРасширенный.ОткрытьФормуПодробнееОРасчетеНДФЛ(
			Объект, "НачислениеЗарплаты", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Элемент.ТекущиеДанные.ФизическоеЛицо);
			
	Иначе
		ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНДФЛ(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	
	ОписаниеТаблицы = ОписаниеТаблицыНДФЛ();
	
	ТекущиеДанные = Объект.НДФЛ.НайтиПоИдентификатору(Элементы.НДФЛ.ТекущаяСтрока);
	Возврат УчетНДФЛФормыРасширенный.СведенияОбНДФЛ(ЭтаФорма, ТекущиеДанные.ФизическоеЛицо, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если Элементы.НДФЛ.ТекущаяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Объект.НДФЛ.НайтиПоИдентификатору(Элементы.НДФЛ.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда
			
			ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.ФизическоеЛицо));
			РасчетЗарплатыРасширенный.ЗаменитьСтрокиНДФЛ(Объект.НДФЛ, Параметр.НДФЛ, Неопределено, Неопределено, ПолучитьКонтролируемыеПоля(), ОписаниеДокумента(ЭтаФорма), ОтборСтрокФизическихЛиц, Ложь);
			
		КонецЕсли; 
		
		Если Параметр.Свойство("Начисления") Тогда
			
			Для каждого СтрокаНачислений Из Параметр.Начисления Цикл
				
				СтруктураПоиска = Новый Структура("ФизическоеЛицо,Начисление,ИдентификаторСтрокиВидаРасчета");
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНачислений);
				НайденныеСтроки = Объект.Начисления.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Модифицированность = Истина;
	НДФЛПриОкончанииРедактированияНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НДФЛ", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередНачаломИзменения(Элемент, Отказ)
	
	УчетНДФЛКлиент.НДФЛПередНачаломИзменения(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПослеУдаления(Элемент)
	НДФЛПослеУдаленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.РезультатРаспределения = Неопределено И ЗначениеЗаполнено(АдресТаблицыРаспределенияУдержаний) Тогда 
				ТекущиеДанные.РезультатРаспределения = РезультатРаспределенияИзВременногоХранилища(ТекущиеДанные.ИдентификаторСтрокиНДФЛ, АдресТаблицыРаспределенияУдержаний, ОписаниеТаблицыНДФЛ());
			КонецЕсли;
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьНДФЛ(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНДФЛ());
	НДФЛПриОкончанииРедактированияНаСервере();	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатРаспределенияИзВременногоХранилища(ИдентификаторСтроки, АдресТаблицыРаспределения, ОписаниеТаблицы)
	
	ДанныеРаспределения = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
	
	Если ДанныеРаспределения = Неопределено Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ИменаКолонокТаблицы = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
	
	ОтборСтрок = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	ТаблицаРаспределенияПредварительно = ДанныеРаспределения.Скопировать(ОтборСтрок);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ТаблицаРаспределенияПредварительно);
	
	ТаблицаРаспределения = ТаблицаРаспределенияПредварительно.Скопировать(, ИменаКолонокТаблицы);
	СтруктураРаспределения = ЗарплатаКадрыРасширенный.ТаблицаЗначенийВСтруктуру(ТаблицаРаспределения);
	
	Возврат СтруктураРаспределения;
	
КонецФункции

&НаКлиенте
Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НДФЛ", Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если НоваяСтрока Тогда 
			ТекущиеДанные.НалоговыйПериод = НачалоМесяца(Объект.МесяцНачисления);
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ТекущиеДанные, "НалоговыйПериод", "НалоговыйПериодСтрокой");
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НДФЛ.ТекущиеДанные, "НалоговыйПериод", "НалоговыйПериодСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НДФЛ.ТекущиеДанные, "НалоговыйПериод", "НалоговыйПериодСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НДФЛ.ТекущиеДанные, "НалоговыйПериод", "НалоговыйПериодСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалоговыйПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПогашениеЗаймов(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПогашенияЗаймовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	ПогашенияЗаймовПриОкончанииРедактированияНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ПогашенияЗаймовПослеУдаления(Элемент)
	ПогашенияЗаймовПослеУдаленияНаСервере();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Взносы

&НаКлиенте
Процедура ВзносыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	ВзносыПриОкончанииРедактированияНаСервере()
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПослеУдаления(Элемент)
	ВзносыПослеУдаленияНаСервере()
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготы

&НаКлиенте
Процедура ЛьготыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицыЛьгот(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ЛьготыВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыЛьгот(), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыЛьгот(), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Льготы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Льготы.ТекущиеДанные.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Льготы", Элементы.Льготы.ТекущиеДанные, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыЛьгот());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПослеУдаления(Элемент)
	
	ПересчитатьНачисленияПослеУдаленияСтроки(СотрудникУдаляемойСтроки);
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(
		ЭтаФорма, , 
		КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу), 
		КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении());
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыСотрудникПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыЛьгот(), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыЛьгот();
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыДатаНачалаПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(), Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыДатаОкончанияПриИзменении(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(), Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Заполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйКлиент.ЗаполнитьДокументНачисленияЗарплаты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьССохранениемИсправлений(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Дозаполнить(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСотрудников = ОтсутствующиеВДокументеСотрудники();
	
	Если МассивСотрудников.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(МассивСотрудников, Истина);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДФЛ(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	РежимПересчетаНДФЛ = Истина;
	ПерезаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВзносы(Команда)
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;
	
	РежимПересчетаВзносов = Истина;
	ПерезаполнитьДанныеФормыНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПодборСотрудникаВФормеДокументаНачислениеЗарплаты");
	
	Если Объект.РежимДоначисления Тогда
		ВладелецОтбора = Элементы.НачисленияПерерасчет;
	Иначе
		ВладелецОтбора = ЭтотОбъект;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	Отборы = Новый Структура("ПоказыватьДоговорниковГПХ", Истина);
	
	Если ИспользоватьВоеннуюСлужбу Тогда
		Отборы.Вставить("ВидДоговора", ?(Объект.НачислениеЗарплатыВоеннослужащим, ВидыДоговоровВоеннойСлужбы(), ВидыДоговоровКромеВоеннойСлужбы()));	
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Отбор", Отборы);
	КадровыйУчетРасширенныйКлиент.ДобавитьПараметрыОтбораПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(
		ЭтаФорма, ПараметрыОткрытия);
		
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		ВладелецОтбора,
		Объект.Организация,
		Объект.Подразделение,
		Объект.МесяцНачисления, 
		КонецМесяца(Объект.МесяцНачисления),
		,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если ЕстьИсправленныеСтроки() Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru='Документ содержит ручные исправления (выделены шрифтом). 
                             |Очистить данные?'
                             |;uk='Документ містить ручні виправлення (виділені жирним шрифтом). 
                             |Очистити дані?'");
							 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе 
		
		ОчиститьЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьТаблицыДокументаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанныеФормы(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	ЗакрыватьПослеЗаписи = Ложь;
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	ПровестиДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений());
КонецПроцедуры

&НаКлиенте
Процедура ПособияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПодробно.Пометка, ОписаниеТаблицыПособия());
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПерерасчетПодробно.Пометка, ОписаниеТаблицыПособияПерерасчет());
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов());
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ЛьготыПодробно.Пометка, ОписаниеТаблицыЛьгот());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачислений());	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыНачислений());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачисленийПоДоговорам());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыНачисленийПоДоговорам());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПособия());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыПособия());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПерерасчетОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыПособияПерерасчет());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыУдержаний());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНДФЛ());
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьВсеИсправления(Команда)
	РасчетЗарплатыКлиент.ОтменитьВсеИсправления(ЭтаФорма, ОписаниеТаблицыНДФЛ());
КонецПроцедуры
&НаКлиенте
Процедура ПересчитатьДокумент(Команда)
	ПересчитатьДокументНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛисток(Команда)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ФормированиеРасчетногоЛисткаИзФормыДокументаНачислениеЗарплаты");
	
	НачисленияВыделенныеСтроки = Элементы.Начисления.ВыделенныеСтроки;
	Если НачисленияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(НачисленияВыделенныеСтроки, "Начисления");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокДоначисленияПерерасчеты(Команда)
	
	ВыделенныеСтроки = Элементы.НачисленияПерерасчет.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(ВыделенныеСтроки, "НачисленияПерерасчет");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокУдержания(Команда)
	
	УдержанияВыделенныеСтроки = Элементы.Удержания.ВыделенныеСтроки;
	Если УдержанияВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(УдержанияВыделенныеСтроки, "Удержания");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокПособия(Команда)
	
	ВыделенныеСтроки = Элементы.Пособия.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(ВыделенныеСтроки, "Пособия");
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйЛистокДоговорникиГПХ(Команда)
	
	ВыделенныеСтроки = Элементы.НачисленияПоДоговорам.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиРасчетныйЛисток(ВыделенныеСтроки, "НачисленияПоДоговорам");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоначислитьСейчас(Команда)

	ДоступныеДоначисления = ПерерасчетЗарплатыВызовСервера.ДокументыПерерасчета(Объект.Организация, Объект.МесяцНачисления);
	
	ДополнительныеПараметры = Новый Структура("МесяцНачисления", ДоступныеДоначисления.МесяцНачисления);
	
	Если ДоступныеДоначисления.Документы.Количество() > 1 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимДоначисления", Истина);
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
		СтруктураОтбора.Вставить("МесяцНачисления", ДоступныеДоначисления.МесяцНачисления);
		СтруктураОтбора.Вставить("Ссылка", ДоступныеДоначисления.Документы);
		
		ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
		
		Оповещение = Новый ОписаниеОповещения("ДоначислитьСейчасЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.НачислениеЗарплаты.ФормаСписка",
			ПараметрыОткрытия, ЭтотОбъект, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		Если ДоступныеДоначисления.Документы.Количество() = 1 Тогда
			ДокументДоначисления = ДоступныеДоначисления.Документы[0];
		Иначе
			ДокументДоначисления = ПредопределенноеЗначение("Документ.НачислениеЗарплаты.ПустаяСсылка");
		КонецЕсли;
		
		ДоначислитьСейчасЗавершение(ДокументДоначисления, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСотрудников(Команда)
	
	ПересчитатьСотрудниковНаСервере();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Подключаемые команды «Пересчитать сотрудника».

&НаКлиенте
Процедура Подключаемый_НачисленияПересчитатьСотрудника(Команда)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПерерасчетСотрудникаВФормеДокументаНачислениеЗарплаты");
	
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Начисления", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "НачисленияПерерасчет", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПерерасчетов());	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "НачисленияПоДоговорам", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Пособия", "Сотрудник", Тип("СправочникСсылка.Сотрудники"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Удержания", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "НДФЛ", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "Взносы", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПогашениеЗаймовПересчитатьСотрудника(Команда)
	РасчетЗарплатыРасширенныйКлиент.ПересчитатьСотрудника(ЭтаФорма, "ПогашениеЗаймов", "ФизическоеЛицо", Тип("СправочникСсылка.ФизическиеЛица"));
КонецПроцедуры

#Область ПодключаемыеКомандыУдалитьСотрудника

&НаКлиенте
Процедура Подключаемый_НачисленияУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетУдалитьСотрудника(Команда)

	ТекущиеДанные = Элементы.НачисленияПерерасчет.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПоДоговорамУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.НачисленияПоДоговорам.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Пособия.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЛьготыУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Льготы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьСотрудникаНаСервере(ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияУдалитьСотрудника(Команда)

	ТекущиеДанные = Элементы.Удержания.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.НДФЛ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВзносыУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.Взносы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПогашениеЗаймовУдалитьСотрудника(Команда)
	
	ТекущиеДанные = Элементы.ПогашениеЗаймов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		УдалитьДанныеСотрудникаНаСервере(ТекущиеДанные.ФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСДанными = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ЭтотОбъект, ОписаниеТаблицы.ПутьКДанным);
	ТекущиеДанные = ТаблицаСДанными.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.МесяцНачисления);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ДоначислитьСейчасЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", Результат);
		
		ЗначенияЗаполнения = Новый Структура;
		Если Не ЗначениеЗаполнено(Результат) Тогда
			ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
			ЗначенияЗаполнения.Вставить("МесяцНачисления", ДополнительныеПараметры.МесяцНачисления);
			ЗначенияЗаполнения.Вставить("РежимДоначисления", Истина);
		КонецЕсли; 
		
		ЗначенияЗаполнения.Вставить("ЗаполнитьПриОткрытии", Истина);
		
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.НачислениеЗарплаты.ФормаОбъекта", ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект, ДополнятьФорму = Истина)
	
	ИспользоватьВоеннуюСлужбу = Ложь;

	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент);
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
	Если Объект.Проведен Тогда
		СотрудникиПерерасчет = Новый ТаблицаЗначений;
		СотрудникиПерерасчет.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		СотрудникиПерерасчет.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
		
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить(Объект.НачисленияПерерасчет);
		ТабличныеЧасти.Добавить(Объект.ПособияПерерасчет);
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			Для Каждого Строка Из ТабличнаяЧасть Цикл
				НоваяСтрока = СотрудникиПерерасчет.Добавить();
				НоваяСтрока.Сотрудник = Строка.Сотрудник;
				НоваяСтрока.ПериодДействия = Строка.ПериодДействия;
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = НачалоМесяца(Строка.ДатаНачала);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СотрудникиПерерасчет.Свернуть("Сотрудник,ПериодДействия");
		
		ПерерасчитанныеСотрудникиДокумента.Загрузить(СотрудникиПерерасчет);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент = Истина)
	
	ЗаполнитьВидыОпераций(НовыйДокумент);
	
	// Устанавливаем значения реквизитов формы.
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ФормаДополнена И ДополнятьФорму Тогда
		// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
		ДополнитьФорму(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент = Истина)

	Если Не ФормаДополнена И ДополнятьФорму Тогда 
		// Досоздаем форму.
		ДополнитьФорму(Ложь);
		ДополнитьФорму();
	КонецЕсли;
	
	Если НовыйДокумент И Объект.РежимДоначисления Тогда
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));
	КонецЕсли;
	
	// чтение данных
	ДанныеВРеквизиты(ТекущийОбъект);
	
	НастройкиВыплатыЗарплатыВОрганизации = Новый ФиксированнаяСтруктура(
		РасчетЗарплатыРасширенныйВызовСервера.СведенияОНастройкахЗарплатаКадрыРасширенная(Объект.Организация));
		
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцНачисления", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Пособия, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПособияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
	
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений());
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов());
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.ПособияПодробно.Пометка, ОписаниеТаблицыПособия());
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.ПособияПерерасчетПодробно.Пометка, ОписаниеТаблицыПособияПерерасчет());
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.УдержанияПодробно.Пометка, ОписаниеТаблицыУдержаний());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, ОписаниеТаблицыЛьгот());
	КонецЕсли;
	
	РассчитатьИтогиПоДокументу();
	
	Если Объект.РежимДоначисления Тогда
		
		// Страницы с табличными частями
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисления",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисленияПоДоговорам",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПособия",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПогашениеЗаймов",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВзносы",
			"Видимость",
			Ложь
		);
		
		// Итоги по документу
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогНачислено",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогВзносы",
			"Видимость",
			Ложь
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"РасчетныйЛистокУдержания",
			"Видимость",
			Ложь
		);
		
		
	Иначе 
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисления",
			"Видимость",
			ИспользоватьНачисление
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисленияПерерасчеты",
			"Видимость",
			ИспользоватьНачисление
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПособия",
			"Видимость",
			ИспользоватьПособия
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПособияПерерасчет",
			"Видимость",
			ИспользоватьПособия
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНачисленияПоДоговорам",
			"Видимость",
			ИспользоватьДоговоры
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаЛьготы",
			"Видимость",
			ИспользоватьЛьготы
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаУдержания",
			"Видимость",
			ИспользоватьУдержания
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаНДФЛ",
			"Видимость",
			ИспользоватьНДФЛ
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаПогашениеЗаймов",
			"Видимость",
			ИспользоватьЗаймы
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВзносы",
			"Видимость",
			ИспользоватьВзносы
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ГруппаВзносыФОТ",
			"Видимость",
			ИспользоватьВзносыФОТ
		);
		
		// Итоги по документу
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогНачислено",
			"Видимость",
			ИспользоватьНачисление Или ИспользоватьПособия Или ИспользоватьДоговоры Или ИспользоватьЛьготы
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогНачисленоПерерасчет",
			"Видимость",
			ИспользоватьНачисление
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогУдержано",
			"Видимость",
			ИспользоватьУдержания Или ИспользоватьНДФЛ
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ИтогВзносы",
			"Видимость",
			ИспользоватьВзносы или ИспользоватьВзносыФОТ
		);
		
	КонецЕсли; 

	ЗаполнитьЗаголовокФормы();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(НайденыИсправленияПриОткрытии);
	УстановитьДоступностьКомандыДозаполнить();
	
КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено, КонтролируемыеПоля = Неопределено, ОписаниеПанелиВычеты = Неопределено, ОписаниеКлючевыхРеквизитов = Неопределено, ТаблицыОчищаемыеПриИзменении = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложенного создания.	
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(ЭтаФорма));
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФорму(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), Истина);
		
		// Создание элементов.
		ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма, ОписаниеКлючевыхРеквизитов);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма, , ОписаниеКлючевыхРеквизитов, ТаблицыОчищаемыеПриИзменении);
		// Установка свойств элементов формы.
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыплатаГруппа", "Видимость", Объект.РежимДоначисления);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПорядокВыплаты", "ТолькоПросмотр", Истина);
		
		ДобавитьКомандуУдалитьСотрудника();
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачислений(), "Начисления", "НачисленияАвтоКоманды", , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПерерасчетов(), "Начисления", "НачисленияПерерасчетАвтоКоманды", , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачисленийПоДоговорам(), "", "НачисленийПоДоговорамАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПособия(), "Пособия", "ПособияАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПособияПерерасчет(), "Пособия", "ПособияПерерасчетАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыУдержаний(), "Удержания", "УдержанияАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНДФЛ(), "", "НДФЛАвтоКоманды" , , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтотОбъект, ОписаниеТаблицыЛьгот(), "ЛьготыАвтоКоманды", КонтролируемыеПоля,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(
			ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(
			ЭтаФорма,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ЗаполнитьВидыОпераций(НовыйДокумент)
	
	ИспользоватьНачисление 	= Истина;
	ИспользоватьПособия 	= Истина;
	ИспользоватьДоговоры 	= Истина;
	ИспользоватьЛьготы 		= Истина;
	ИспользоватьУдержания 	= Истина;
	ИспользоватьНДФЛ 		= Истина;
	ИспользоватьЗаймы 		= Истина;
	ИспользоватьВзносы 		= Истина;
	ИспользоватьВзносыФОТ	= Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда 
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		
		Если НовыйДокумент Тогда
			Параметры.Свойство("ВидОперации", ВидОперации);
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
				Модуль.УстановитьВидОперацииДокумента(ЭтотОбъект, Параметры.ЗначениеКопирования);
			КонецЕсли;
		Иначе
			Модуль.УстановитьВидОперацииДокумента(ЭтотОбъект, Объект.Ссылка);
		КонецЕсли;
		
		ДанныеВидаОперации = Модуль.ДанныеВидаОперации(ВидОперации);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеВидаОперации);
		
	КонецЕсли;
	
	Если ИспользоватьЛьготы И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		ИспользоватьЛьготы = Модуль.ИспользуетсяФункционалЛьгот();
	Иначе 
		ИспользоватьЛьготы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовокФормы()
	
	Если Объект.РежимДоначисления Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			АвтоЗаголовок = Истина;
			Заголовок = "";
		Иначе 
			АвтоЗаголовок = Ложь;
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (создание)';uk='%1 (створення)'"), НСтр("ru='Доначисление, перерасчет';uk='Донарахування, перерахунок'"));
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	АвтоЗаголовок = Истина;
	НаименованиеВидаОперации = "";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда 
		АвтоЗаголовок = Не ЗначениеЗаполнено(ЭтотОбъект["ВидОперации"]);
	    НаименованиеВидаОперации = Строка(ЭтотОбъект["ВидОперации"]);
	КонецЕсли;
	
	Если Не АвтоЗаголовок Тогда
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 (создание)';uk='%1 (створення)'"), НаименованиеВидаОперации);
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 %2 от %3';uk='%1 %2 від %3'"), НаименованиеВидаОперации, Объект.Номер, Формат(Объект.Дата, "ДЛФ=Д"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачисленияПриОкончанииРедактированияНаСервере()
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Пособия, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПособияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
КонецПроцедуры

&НаСервере
Процедура НачисленияПоДоговорамПриОкончанииРедактированияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура НДФЛПриОкончанииРедактированияНаСервере()
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
КонецПроцедуры

&НаСервере
Процедура НДФЛПослеУдаленияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогУдержано(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ПогашенияЗаймовПриОкончанииРедактированияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогУдержано(ЭтаФорма);
	
	ПараметрыДляРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеПараметровДляРаспределенияДанныхЗаполнения();
	ПараметрыДляРаспределения.РаспределятьУдержания = Истина;
	ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныеФормыПоСотрудникам(ОбщегоНазначения.ВыгрузитьКолонку(Объект.ПогашениеЗаймов, "ФизическоеЛицо"), ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), ПараметрыДляРаспределения);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ПогашенияЗаймовПослеУдаленияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогУдержано(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ВзносыПриОкончанииРедактированияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогВзносы(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ВзносыПослеУдаленияНаСервере()
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогВзносы(ЭтаФорма);
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

// Месяц начисления
&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()

	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.МесяцНачисления);
	
	ЗаполнениеВыполнено = Ложь;
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

// Заполнение и расчет начислений.

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте   
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	
	Если НЕ РасчетЗарплатыРасширенныйКлиент.ДобавитьСотрудникаКРасчету(ЭтаФорма, Сотрудник, ОписаниеТаблицы) Тогда
		РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено, РассчитатьИтоги = Истина)
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	Если ЗначениеЗаполнено(АдресТаблицыРаспределенияПоТерриториямУсловиямТруда) Тогда 
		ДанныеРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(АдресТаблицыРаспределенияПоТерриториямУсловиямТруда);
		ДополнительныеПараметры.ДанныеРаспределенияПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда;
	КонецЕсли;
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудник, ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), ДополнительныеПараметры);
	НачисленияПриОкончанииРедактированияНаСервере();
	Если РассчитатьИтоги Тогда
		РассчитатьИтогиПоДокументу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	ПерезаполнитьДанныеФормыНаКлиенте(Сотрудники, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФормыНаКлиенте() Экспорт
	
	ИтогНачислено = 0;
	ИтогУдержано = 0;
	ИтогВзносы = 0;
	
	УИДЗамера = ОценкаПроизводительностиКлиентСервер.НачатьРучнойЗамерВремени("ЗаполнениеДокументаНачислениеЗарплаты");
	
	Результат = РезультатЗаполненияВДлительнойОперации();
	
	Если Результат.ЗаданиеВыполнено Тогда
		
		Если ЗначениеЗаполнено(УИДЗамера) Тогда
			ОценкаПроизводительностиКлиентСервер.ЗакончитьРучнойЗамерВремени(УИДЗамера);
			УИДЗамера = Неопределено;
		КонецЕсли;
		ОповеститьОбИзмененииОбъекта();
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
	
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьДанныеФормыНаКлиенте(Сотрудники = Неопределено, СохранятьИсправления = Истина) Экспорт
	
	ОчиститьСообщения();
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект)) Тогда
		Возврат;
	КонецЕсли;		

	Результат = ПерезаполнитьДанныеФормыНаСервере(Сотрудники, СохранятьИсправления, СотрудникиКРасчету);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПерезаполнитьДанныеФормыНаСервере(Сотрудники = Неопределено, СохранятьИсправления = Истина, СотрудникиКРасчету = Неопределено) Экспорт
	
	ИспользоватьДлительнуюОперацию = Истина;
	Если Сотрудники <> Неопределено Тогда
		// Если заполнение выполняется по ограниченному составу сотрудников, то обходимся без длительной операции.
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Или Сотрудники.Количество() < 10 Тогда 
			ИспользоватьДлительнуюОперацию = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СписокСотрудников = Неопределено;
	Если Сотрудники <> Неопределено Тогда
		СписокСотрудников = ?(ТипЗнч(Сотрудники) = Тип("Массив"), Сотрудники, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники));
	КонецЕсли;
	
	Результат = РасчетЗарплатыРасширенный.ПерезаполнитьДанныеФормы(
		ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), СписокСотрудников, СохранятьИсправления, ИспользоватьДлительнуюОперацию, , СотрудникиПериодДействияДляПерерасчета(СписокСотрудников));
		
	РежимПересчетаНДФЛ = Ложь;	
	РежимПересчетаВзносов = Ложь;	
	
	Если СотрудникиКРасчету <> Неопределено Тогда
		ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	КонецЕсли; 
			
	Если Результат <> Неопределено И Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), СписокСотрудников);
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(), СписокСотрудников);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы(), СписокСотрудников);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
		РассчитатьИтогиПоДокументу();
		УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьСотрудника(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля) Экспорт
	
	ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудникаНаСервере(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля)
	
	РасчетЗарплатыРасширенный.ПересчитатьСотрудникаНаСервере(ЭтаФорма, ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
	
	Сотрудники = ВыбранныеВТаблицеСотрудники(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), Сотрудники);

	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Функция ВыбранныеВТаблицеСотрудники(ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля)
	
	СтрокиТаблицы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		СтрокиТаблицы.Добавить(Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	ВедущиеОбъекты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицы, ВедущееПоле, Истина);
	
	Если ТипВедущегоПоля = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудники = ВедущиеОбъекты;
	Иначе
		Физлица = ВедущиеОбъекты;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Объект.Организация, , Истина);
	КонецЕсли;
	
	Возврат Сотрудники;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Функция РезультатЗаполненияВДлительнойОперации()
	
	СотрудникиПерерасчет = СотрудникиПериодДействияДляПерерасчета();
	
	РасчетЗарплатыРасширенныйКлиентСервер.ОчиститьТаблицыДокумента(ЭтаФорма, ОписаниеДокумента(ЭтотОбъект));
	
	СтруктураПараметров = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.ДокументСсылка = Объект.Ссылка;
	СтруктураПараметров.Подразделение = Объект.Подразделение;
	СтруктураПараметров.МесяцНачисления = Объект.МесяцНачисления;
	СтруктураПараметров.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	СтруктураПараметров.РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет;
	СтруктураПараметров.СотрудникиПериодДействияПерерасчет = СотрудникиПерерасчет;
	СтруктураПараметров.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
	СтруктураПараметров.НачислениеЗарплатыВоеннослужащим = Объект.НачислениеЗарплатыВоеннослужащим;
	СтруктураПараметров.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	НаименованиеЗадания = НСтр("ru='Заполнение документа «Начисление зарплаты»';uk='Заповнення документа «Нарахування зарплати»'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.НачислениеЗарплаты.ПодготовитьДанныеДляЗаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗаполнениеПослеВыполненияДлительнойОперации();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СотрудникиПериодДействияДляПерерасчета(Сотрудники = Неопределено)
	
	Если Сотрудники = Неопределено Тогда
		СотрудникиПериодДействияПерерасчет = ПерерасчитанныеСотрудникиДокумента.Выгрузить();
	Иначе
		
		СотрудникиПериодДействияПерерасчет = Неопределено;
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		ИначеЕсли ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			СписокСотрудников = Сотрудники;
		КонецЕсли;
		
		СписокФизическихЛиц = Новый Массив;
		Для каждого Сотрудник Из СписокСотрудников Цикл
			
			Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				СписокФизическихЛиц.Добавить(Сотрудник);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокФизическихЛиц.Количество() > 0 Тогда
			
			ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
			ПараметрыПолученияСотрудников.Организация = Объект.Организация;
			ПараметрыПолученияСотрудников.ОкончаниеПериода = Объект.МесяцНачисления - 1;
			ПараметрыПолученияСотрудников.СписокФизическихЛиц = СписокФизическихЛиц;
			
			СотрудникиФизическихЛиц = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
			Если СотрудникиФизическихЛиц.Количество() > 0  Тогда
				
				Для каждого СведенияСотрудника Из СотрудникиФизическихЛиц Цикл
					СписокСотрудников.Добавить(СведенияСотрудника.Сотрудник);
				КонецЦикла;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(СписокСотрудников, Тип("СправочникСсылка.ФизическиеЛица"));
			СписокСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокСотрудников);
			
		КонецЕсли; 
		
		Для каждого Сотрудник Из СписокСотрудников Цикл
			
			СтрокиСотрудника = Объект.НачисленияПерерасчет.Выгрузить(Новый Структура("Сотрудник",  Сотрудник), "Сотрудник,ПериодДействия");
			СтрокиСотрудника.Свернуть("Сотрудник,ПериодДействия");
			
			Если СотрудникиПериодДействияПерерасчет = Неопределено Тогда
				СотрудникиПериодДействияПерерасчет = СтрокиСотрудника;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиСотрудника, СотрудникиПериодДействияПерерасчет);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СотрудникиПериодДействияПерерасчет = Неопределено Тогда
			СотрудникиПериодДействияПерерасчет = Объект.НачисленияПерерасчет.Выгрузить().СкопироватьКолонки();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СотрудникиПериодДействияПерерасчет;
	
КонецФункции

&НаКлиенте
Процедура ПровестиДокумент()
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(, НСтр("ru='Помеченный на удаление документ не может быть проведен.';uk='Позначений на вилучення документ не може бути проведений.'"));
		Возврат;
	КонецЕсли;
	
	Если СотрудникиКРасчету.Количество() > 0 Тогда
		РасчетЗарплатыРасширенныйКлиент.ПередЗаписьюДокументаСоСпискомСотрудников(ЭтаФорма, "ПровестиДокументОкончание");
	Иначе
		ПровестиДокументНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		ПровестиДокументНаКлиенте();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументНаКлиенте()
	
	УИДЗамера = ОценкаПроизводительностиКлиентСервер.НачатьРучнойЗамерВремени("ПроведениеДокументаНачислениеЗарплаты");
	
	Результат = РезультатПроведенияВДлительнойОперации();
	
	Если Результат.Свойство("ОшибкиПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Если ЗначениеЗаполнено(УИДЗамера) Тогда
			ОценкаПроизводительностиКлиентСервер.ЗакончитьРучнойЗамерВремени(УИДЗамера);
			УИДЗамера = Неопределено;
		КонецЕсли;
		ОповеститьОбИзмененииОбъекта();
		ПроведениеВДлительнойОперации = Ложь;
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроведенияВДлительнойОперации()
	
	Если Не ПроверитьЗаполнение() Тогда 
		УчетНДФЛФормыРасширенный.ОбработатьСообщенияПроверкиЗаполнения(ЭтаФорма, ОписаниеТаблицыНДФЛ());
		Возврат Новый Структура("ОшибкиПроверкиЗаполнения", Истина);
	КонецЕсли;
	
	УдалитьПерерасчетыТекущегоПериода = ЗаполнениеВыполнено;
	
	ДокументОбъект = Неопределено;
	// Преобразовываем данные формы в объект, чтобы записать его.
	Если Модифицированность Или Объект.Проведен Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		РеквизитыВДанные(ДокументОбъект);
		ДокументОбъект.ДополнительныеСвойства.Вставить("Проведен", ДокументОбъект.Проведен);
		ДокументОбъект.Проведен = Ложь;
		ДокументОбъект.Записать();
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
			Модуль.ЗаписатьВидОперацииДокумента(ДокументОбъект.Ссылка, ЭтотОбъект["ВидОперации"]);
		КонецЕсли;
		// После записи сразу же перечитываем объект, чтобы избежать различия версий.
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере(ДокументОбъект, Ложь);
		Модифицированность = Ложь;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка", Объект.Ссылка);
	СтруктураПараметров.Вставить("Отказ", Ложь);
	СтруктураПараметров.Вставить("УстановитьПроведениеДокумента", Истина);
	СтруктураПараметров.Вставить("УдалитьПерерасчетыТекущегоПериода", УдалитьПерерасчетыТекущегоПериода);
	
	Если ДокументОбъект <> Неопределено Тогда
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ПериодыРасчетаСотрудников") Тогда
			СтруктураПараметров.Вставить("ПериодыРасчетаСотрудников", ДокументОбъект.ДополнительныеСвойства.ПериодыРасчетаСотрудников);
		КонецЕсли; 
		
	КонецЕсли; 
	
	НаименованиеЗадания = НСтр("ru='Проведение документа «Начисление зарплаты»';uk='Проведення документа «Нарахування зарплати»'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.НачислениеЗарплаты.ВыполнитьПроведение",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	ПроведениеВДлительнойОперации = Не Результат.ЗаданиеВыполнено;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПроведениеПослеВыполненияДлительнойОперации();
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПослеВыполненияДлительнойОперации()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Неопределено;
	Если СтруктураДанных.Свойство("ДанныеДляЗаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		// Заполнение табличных частей и вторичных данных коллекций, которые с ней связаны.
		// Начисления
		Объект.Начисления.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.Начисления, Объект.Начисления);
		
		// НачисленияПерерасчет
		Объект.НачисленияПерерасчет.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.НачисленияПерерасчет, Объект.НачисленияПерерасчет);
		
		// Начисления по договорам подряда.
		Объект.НачисленияПоДоговорам.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.НачисленияПоДоговорам, Объект.НачисленияПоДоговорам);
		
		// Пособия
		Объект.Пособия.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.Пособия, Объект.Пособия);
		
		// ПособияПерерасчет
		Объект.ПособияПерерасчет.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.ПособияПерерасчет, Объект.ПособияПерерасчет);
		
		// Удержания
		Объект.Удержания.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.Удержания, Объект.Удержания);
		
		// Займы
		Объект.ПогашениеЗаймов.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.ПогашениеЗаймов, Объект.ПогашениеЗаймов);
		
		// НДФЛ
		Объект.НДФЛ.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.НДФЛ, Объект.НДФЛ);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
		
		// Страховые взносы
		Объект.Взносы.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.Взносы, Объект.Взносы);
		Объект.ВзносыФОТ.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.ВзносыФОТ, Объект.ВзносыФОТ);

		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Объект.Льготы.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляЗаполнения.Льготы, Объект.Льготы);
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы());
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы());
		
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента", ДанныеДляЗаполнения) Тогда
		РасчетЗарплатыРасширенный.ЗагрузитьДанныеПодготовленные(ЭтаФорма, ДанныеДляЗаполнения, СтруктураДанных.СтруктураПараметров);
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Взносы, "ДатаПолученияДохода", "ДатаПолученияДоходаСтрокой");
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы());
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы());
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
		ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НДФЛ, "НалоговыйПериод", "НалоговыйПериодСтрокой");
	КонецЕсли;
	
	ЗаполнениеВыполнено = Истина;
	
	РассчитатьИтогиПоДокументу();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
КонецПроцедуры

&НаСервере
Процедура ПроведениеПослеВыполненияДлительнойОперации()
	
	Если Не ЗакрыватьПослеЗаписи Тогда
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ПриПолученииДанныхНаСервере(ДокументОбъект, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ЗаданиеВыполненоВДлительнойОперации = Ложь;
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Если ПроведениеВДлительнойОперации Тогда
					ПроведениеПослеВыполненияДлительнойОперации();
					Если ЗначениеЗаполнено(УИДЗамера) Тогда
						ОценкаПроизводительностиКлиентСервер.ЗакончитьРучнойЗамерВремени(УИДЗамера);
						УИДЗамера = Неопределено;
					КонецЕсли;
				Иначе
					РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
					ЗаполнениеПослеВыполненияДлительнойОперации();
					Если ЗначениеЗаполнено(УИДЗамера) Тогда
						ОценкаПроизводительностиКлиентСервер.ЗакончитьРучнойЗамерВремени(УИДЗамера);
						УИДЗамера = Неопределено;
					КонецЕсли;
				КонецЕсли;
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗаданиеВыполненоВДлительнойОперации = Истина;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	ОповеститьОбИзмененииОбъекта();
	
	Если ПроведениеВДлительнойОперации И ЗаданиеВыполненоВДлительнойОперации Тогда
		Если ЗакрыватьПослеЗаписи Тогда
			ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
		Иначе
			ЗакрыватьПослеЗаписи = Истина;
		КонецЕсли;
		ПроведениеВДлительнойОперации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения)
	
	ПараметрыДляРаспределения.ОписаниеДокумента       = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	ОтражениеЗарплатыВБухучетеРасширенный.РаспределитьЗависимыеРезультатыВФорме(ЭтаФорма, ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Начисления, "Сотрудник", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияПерерасчет, "Сотрудник", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ОбщегоНазначения.ВыгрузитьКолонку(Объект.Пособия, "Сотрудник", Истина));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСотрудников, ОбщегоНазначения.ВыгрузитьКолонку(Объект.НачисленияПоДоговорам, "Сотрудник", Истина));
	
	Возврат ПоместитьВоВременноеХранилище(МассивСотрудников, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаПодбораНаКлиенте(Сотрудники)
	
	МассивСотрудников = ПодобранныеСотрудники(Сотрудники);
	
	Если МассивСотрудников.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = ПерезаполнитьДанныеФормыНаСервере(МассивСотрудников, Ложь);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
 		ОповеститьОбИзмененииОбъекта();
		УстановитьЗначенияКонтролируемыхПолей();
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодобранныеСотрудники(Сотрудники)
	
	// Оставляем только сотрудников, которых нет в документе.
	МассивСотрудников = Новый Массив;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("НачисленияПерерасчет");
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	ИменаТаблиц.Добавить("Пособия");
	ИменаТаблиц.Добавить("ПособияПерерасчет");
	ИменаТаблиц.Добавить("Льготы");
	
	УникальныеСотрудники = Новый Соответствие;
	СписокСотрудниковДокумента = Новый Массив;
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УникальныеСотрудники[СтрокаСотрудника.Сотрудник] = Неопределено Тогда 
				СписокСотрудниковДокумента.Добавить(СтрокаСотрудника.Сотрудник);
				УникальныеСотрудники.Вставить(СтрокаСотрудника.Сотрудник, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		Если УникальныеСотрудники[Сотрудник] = Неопределено Тогда 
			МассивСотрудников.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	// Для корректного пересчета зависимых таблиц добавляем сотрудников из документа с совпадающими физическими лицами.
	ФизическиеЛицаПодобранныхСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ФизическоеЛицо");
	
	ФизическиеЛица = Новый Соответствие;
	Для Каждого КлючИЗначение Из ФизическиеЛицаПодобранныхСотрудников Цикл 
		ФизическиеЛица.Вставить(КлючИЗначение.Значение, Истина);
	КонецЦикла;
	
	ФизическиеЛицаСотрудниковДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудниковДокумента, "ФизическоеЛицо");
	
	Для Каждого КлючИЗначение Из ФизическиеЛицаСотрудниковДокумента Цикл 
		Если ФизическиеЛица[КлючИЗначение.Значение] <> Неопределено Тогда 
			МассивСотрудников.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСотрудников;
	
КонецФункции

&НаСервере
Функция ОтсутствующиеВДокументеСотрудники()
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления 
		И (ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено
		Или ОписаниеДокумента.УдержанияИмя <> Неопределено Или ОписаниеДокумента.НДФЛИмя <> Неопределено
		Или ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено Или ОписаниеДокумента.ВзносыИмя <> Неопределено);
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
	ДополнительныеПараметры.ОкончаниеПериода = КонецМесяца(Объект.МесяцНачисления);
	ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Объект.НачислениеЗарплатыВоеннослужащим;
	
	Сотрудники = РасчетЗарплатыРасширенный.СотрудникиДляНачисленияЗарплаты(Объект.Организация, Объект.Подразделение, Объект.МесяцНачисления, ДополнительныеПараметры);
		
	Возврат ПодобранныеСотрудники(Сотрудники);
	
КонецФункции

// Описания документа, таблиц документа, панелей документа.
&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	РежимДоначисления = Форма.Объект.РежимДоначисления;
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.РежимДоначисления = РежимДоначисления;
	Описание.РежимНачисления = ПредопределенноеЗначение("Перечисление.РежимНачисленияЗарплаты.ОкончательныйРасчет");
	Описание.ЭтоНачислениеЗарплаты = Истина;
	
	Если РежимДоначисления Тогда
		
		Описание.НачисленияПерерасчетИмя = "НачисленияПерерасчет";
		Описание.ПособияПерерасчетИмя = "ПособияПерерасчет";

		Описание.УдержанияИмя = "Удержания";
		Описание.УдержанияКоманднаяПанельИмя = "УдержанияАвтоКоманды";
		
		Описание.НДФЛИмя = "НДФЛ";
		Описание.НДФЛКоманднаяПанельИмя = "НДФЛАвтоКоманды";
		
	Иначе 
		
		Если Форма.ИспользоватьНачисление Тогда 
			Описание.НачисленияИмя = "Начисления";
			Описание.НачисленияКоманднаяПанельИмя = "НачисленияАвтоКоманды";
			Описание.НачисленияПерерасчетИмя = "НачисленияПерерасчет";
		КонецЕсли;
		
		Если Форма.ИспользоватьДоговоры Тогда 
			Описание.НачисленияПоДоговорамИмя = "НачисленияПоДоговорам";
			Описание.НачисленияПоДоговорамКоманднаяПанельИмя = "НачисленияПоДоговорамАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьПособия Тогда 
			Описание.ПособияИмя = "Пособия";
			Описание.ПособияКоманднаяПанельИмя = "ПособияАвтоКоманды";
			Описание.ПособияПерерасчетИмя = "ПособияПерерасчет";
		КонецЕсли;
		
		Если Форма.ИспользоватьЛьготы Тогда 
			Описание.ЛьготыИмя = "Льготы";
			Описание.ЛьготыКоманднаяПанельИмя = "ЛьготыАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьУдержания Тогда 
			Описание.УдержанияИмя = "Удержания";
			Описание.УдержанияКоманднаяПанельИмя = "УдержанияАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьНДФЛ Тогда 
			Описание.НДФЛИмя = "НДФЛ";
			Описание.НДФЛКоманднаяПанельИмя = "НДФЛАвтоКоманды";
		КонецЕсли;
		
		Если Форма.ИспользоватьЗаймы Тогда 
			Описание.ПогашениеЗаймовИмя = "ПогашениеЗаймов";
		КонецЕсли;
		
		Если Форма.ИспользоватьВзносы Тогда 
			Описание.ВзносыИмя = "Взносы";
		КонецЕсли;
		
		Если Форма.ИспользоватьВзносыФОТ Тогда 
			Описание.ВзносыФОТИмя = "ВзносыФОТ";
		КонецЕсли;
		
		Описание.ПланируемаяДатаВыплатыИмя = Неопределено;
		Описание.ПорядокВыплатыИмя = Неопределено;
		
	КонецЕсли;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента(НСтр("ru='Месяц начисления';uk='Місяць нарахування'"), "МесяцНачисленияСтрокой"));
	
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата(Форма);
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеПанелиВычеты()
	
	ОписаниеПанелиВычеты = УчетНДФЛКлиентСервер.ОписаниеПанелиВычеты();
	
	ОписаниеТабличнойЧастиНДФЛ = УчетНДФЛКлиентСервер.ОписаниеТабличнойЧастиНДФЛ();
	ОписаниеТабличнойЧастиНДФЛ.ИспользуетсяФиксРасчет = Истина;
	ОписаниеТабличнойЧастиНДФЛ.ИмяПоляПериод = "";
	ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ = ОписаниеТабличнойЧастиНДФЛ;

	НастраиваемыеПанели = Новый Соответствие;
	НастраиваемыеПанели.Вставить("ВычетыЛичные", 				Истина);
	НастраиваемыеПанели.Вставить("ВычетыНаДетейИИмущественные", "Объект.ПримененныеВычетыНаДетейИИмущественные");
	НастраиваемыеПанели.Вставить("ВычетыКДоходам", 				"Объект.Начисления");
	
	ОписаниеПанелиВычеты.НастраиваемыеПанели = НастраиваемыеПанели;
	
	Возврат ОписаниеПанелиВычеты;
	
КонецФункции

&НаКлиенте
Функция ОписаниеПанелиВычетыНаКлиенте() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции

&НаСервере
Функция ОписаниеПанелиВычетыНаСервере() Экспорт
	Возврат ОписаниеПанелиВычеты();
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ДатыНачисления";
	Описание.СодержитПолеКодВычета = Истина;
	Описание.ИмяРеквизитаДокументОснование = "ДокументОснование";
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияРезультат";
	Описание.ВставлятьПослеПоля 						= Истина;
	
	Описание.ОтображатьПоляОписанияВремени = Истина;
	Описание.ОтображатьПоляНормыВремени = Истина;
	Описание.УправлятьОтображениемПолейОписанияВремени = Истина;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "Начисления,Пособия,ПогашениеЗаймов,Удержания,НДФЛ";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетов()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "Сотрудник";
	
	ОписаниеТаблицы.ИмяТаблицы									= "НачисленияПерерасчет";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.НачисленияПерерасчет";
	
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей				= "ДатыНачисленияПерерасчет";
	ОписаниеТаблицы.СодержитПолеКодВычета = Истина;
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 				= "ДокументОснование";
	
	ОписаниеТаблицы.НомерТаблицы 								= 6;
	
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени				= Истина;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени 					= Истина;
	ОписаниеТаблицы.УправлятьОтображениемПолейОписанияВремени	= Истина;
	
	ОписаниеТаблицы.ЭтоПерерасчеты								= Истина;
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПерерасчетРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы    = "НачисленияПерерасчет,Удержания,НДФЛ";
	ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачисленийПоДоговорам()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "НачисленияПоДоговорам";
	Описание.ИмяРеквизитаВидРасчета = "";
	Описание.СодержитПолеСотрудник = Истина;
	Описание.СодержитПолеВидРасчета = Ложь;
    Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.НомерТаблицы = 1;
	Описание.ПутьКДанным = "Объект.НачисленияПоДоговорам";
	Описание.ПроверяемыеРеквизиты = "Сотрудник,ДокументОснование,КодДохода,ДатаНачала,ДатаОкончания";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	Описание.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Истина;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "НДФЛ,Удержания,ПогашениеЗаймов";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПоДоговорамРезультат";
	Описание.ВставлятьПослеПоля 						= Истина;
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПособия()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ДатыПособия";
	Описание.ИмяТаблицы = "Пособия";
	Описание.ПутьКДанным = "Объект.Пособия";
	Описание.НомерТаблицы = 4;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "ПособияОплаченоДней";
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "НДФЛ,Удержания,ПогашениеЗаймов";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПособияПерерасчет()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ПерерасчетДатыПособия";
	Описание.ИмяТаблицы = "ПособияПерерасчет";
	Описание.ПутьКДанным = "Объект.ПособияПерерасчет";
	Описание.НомерТаблицы = 8;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "ПособияПерерасчетОплаченоДней";
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "НДФЛ,Удержания,ПогашениеЗаймов";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ЭтоПерерасчеты			= Истина;
	Описание.ОтменятьВсеИсправления = Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяРеквизитаВидРасчета = "Удержание";
	Описание.ИмяТаблицы = "Удержания";
	Описание.ПутьКДанным = "Объект.Удержания";
	Описание.ИмяПоляДляВставкиПоказателей = "УдержанияРезультат";
	Описание.НомерТаблицы = 2;
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "УдержанияРезультат";
	Описание.ВставлятьПослеПоля 					   = Истина;
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "НДФЛ";
	Описание.ПутьКДанным = "Объект.НДФЛ";
	Описание.ИмяПоляДляВставкиПоказателей = "Налог";
	Описание.ИмяПоляРезультат = "Налог";
	Описание.ИмяРеквизитаПериод = "НалоговыйПериод";
	Описание.НомерТаблицы = 3;
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.СодержитПолеСотрудник = Истина;
    Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	Описание.ПроверяемыеРеквизиты = "ФизическоеЛицо,НалоговыйПериод";
	
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов = "НДФЛМесяцНалоговогоПериода";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПогашениеЗаймов()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "ПогашениеЗаймов";
	Описание.ПутьКДанным = "Объект.ПогашениеЗаймов";
	Описание.СодержитПолеВидРасчета = Ложь;
	Описание.НомерТаблицы = 5;
	Описание.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияУдержаний";
	Описание.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтроки";
	Описание.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Истина;
	Описание.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыЛьгот()
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	Описание.ИмяТаблицы = "Льготы";
	Описание.ПутьКДанным = "Объект.Льготы";
	Описание.СодержитПолеСотрудник = Истина;
	Описание.ИмяРеквизитаСотрудник = "Сотрудник";
	Описание.ИмяПоляДляВставкиПоказателей = "ДатыЛьготы";
	Описание.СодержитПолеКодВычета = Истина;
	Описание.НомерТаблицы = 7;
	
	Описание.ИмяПоляДляВставкиРаспределенияРезультатов 	= "ЛьготыРезультат";
	Описание.ВставлятьПослеПоля 						= Истина;
	
	Описание.ОтображатьПоляОписанияВремени = Истина;
	Описание.ОтображатьПоляНормыВремени = Истина;
	Описание.УправлятьОтображениемПолейОписанияВремени = Истина;
	Описание.РаспределениеРезультатовЗависимыеТаблицы = "ПогашениеЗаймов,Удержания,НДФЛ";
	Описание.ПутьКДаннымАдресРаспределенияРезультатовВХранилище = "АдресТаблицыРаспределенияНачислений";
	Описание.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда = "АдресТаблицыРаспределенияПоТерриториямУсловиямТруда";
	
	Описание.ОтменятьВсеИсправления	= Истина;
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Функция МассивОписанийТаблицФормы()
	
	МассивОписанийТаблицФормы = Новый Структура;
	
	Если Объект.РежимДоначисления Тогда
		
		МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений());
		МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов());
		МассивОписанийТаблицФормы.Вставить("Пособия", ОписаниеТаблицыПособия());
		МассивОписанийТаблицФормы.Вставить("ПособияПерерасчет", ОписаниеТаблицыПособияПерерасчет());
		МассивОписанийТаблицФормы.Вставить("Удержания", ОписаниеТаблицыУдержаний());
		
	Иначе 
		
		Если ИспользоватьНачисление Тогда 
			МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений());
			МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов());
		КонецЕсли;
		
		Если ИспользоватьПособия Тогда 
			МассивОписанийТаблицФормы.Вставить("Пособия", ОписаниеТаблицыПособия());
			МассивОписанийТаблицФормы.Вставить("ПособияПерерасчет", ОписаниеТаблицыПособияПерерасчет());
		КонецЕсли;
		
		Если ИспользоватьЛьготы Тогда 
			МассивОписанийТаблицФормы.Вставить("Льготы", ОписаниеТаблицыЛьгот());
		КонецЕсли;
		
		Если ИспользоватьУдержания Тогда 
			МассивОписанийТаблицФормы.Вставить("Удержания", ОписаниеТаблицыУдержаний());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(Форма)

	ОписанияТаблиц = Новый Массив;
	
	Если Форма.Объект.РежимДоначисления Тогда 
		
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийПоДоговорам());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
		
	Иначе 
		
		Если Форма.ИспользоватьНачисление Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
		КонецЕсли;
		
		Если Форма.ИспользоватьДоговоры Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийПоДоговорам());
		КонецЕсли;
		
		Если Форма.ИспользоватьПособия Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет());
		КонецЕсли;
		
		Если Форма.ИспользоватьЛьготы Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот());
		КонецЕсли;
		
		Если Форма.ИспользоватьУдержания Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		КонецЕсли;
		
		Если Форма.ИспользоватьНДФЛ Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
		КонецЕсли;

		Если Форма.ИспользоватьЗаймы Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата(Форма)

	ОписанияТаблиц = Новый Структура;
	
	Если Форма.Объект.РежимДоначисления Тогда 
		
		ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений());
		ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов());
		ОписанияТаблиц.Вставить("НачисленияПоДоговорам", ОписаниеТаблицыНачисленийПоДоговорам());
		ОписанияТаблиц.Вставить("Пособия", ОписаниеТаблицыПособия());
		ОписанияТаблиц.Вставить("ПособияПерерасчет", ОписаниеТаблицыПособияПерерасчет());
		ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
		ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
		ОписанияТаблиц.Вставить("ПогашениеЗаймов", ОписаниеТаблицыПогашениеЗаймов());
		
	Иначе 
		
		Если Форма.ИспользоватьНачисление Тогда 
			ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений());
			ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов());
		КонецЕсли;
		
		Если Форма.ИспользоватьДоговоры Тогда 
			ОписанияТаблиц.Вставить("НачисленияПоДоговорам", ОписаниеТаблицыНачисленийПоДоговорам());
		КонецЕсли;
		
		Если Форма.ИспользоватьПособия Тогда 
			ОписанияТаблиц.Вставить("Пособия", ОписаниеТаблицыПособия());
			ОписанияТаблиц.Вставить("ПособияПерерасчет", ОписаниеТаблицыПособияПерерасчет());
		КонецЕсли;
		
		Если Форма.ИспользоватьЛьготы Тогда 
			ОписанияТаблиц.Вставить("Льготы", ОписаниеТаблицыЛьгот());
		КонецЕсли;
		
		Если Форма.ИспользоватьУдержания Тогда 
			ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
		КонецЕсли;
		
		Если Форма.ИспользоватьНДФЛ Тогда 
			ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
		КонецЕсли;

		Если Форма.ИспользоватьЗаймы Тогда 
			ОписанияТаблиц.Вставить("ПогашениеЗаймов", ОписаниеТаблицыПогашениеЗаймов());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаСервере
Процедура ДанныеВРеквизиты(ТекущийОбъект)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИнициализироватьИсточникиДанныхФормыПриПолученииДанных(ТекущийОбъект, МенеджерВременныхТаблиц);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяВТРаспределение", "ВТРаспределениеРезультатовНачислений");
	ДополнительныеПараметры.Вставить("ИмяВТПредставлениеРаспределения", "ВТПредставлениеРаспределенияНачислений");
	ДополнительныеПараметры.Вставить("ПодготовленаВТВычетыКДоходам", Ложь);
	ДополнительныеПараметры.Вставить("Период", '00010101');         
	ДополнительныеПараметры.Вставить("ОписаниеПанелиВычеты", ОписаниеПанелиВычеты());
	ДополнительныеПараметры.Вставить("ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда", ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	ДополнительныеПараметры.Вставить("КонтролируемыеПоля", ПолучитьКонтролируемыеПоля());
	
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНачислений(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыПерерасчетов(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыПособия(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыПособияПерерасчет(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыНачисленийПоДоговорам(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыЛьгот(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	КонецЕсли;
	
	ДополнительныеПараметры.ИмяВТРаспределение = "ВТРаспределениеРезультатовУдержаний";
	ДополнительныеПараметры.ИмяВТПредставлениеРаспределения = "ВТПредставлениеРаспределенияУдержаний";
	
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыУдержаний(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ЗарплатаКадрыРасширенный.ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(ЭтотОбъект, ТекущийОбъект, ОписаниеТаблицыПогашениеЗаймов(), МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсточникиДанныхФормыПриПолученииДанных(ТекущийОбъект, МенеджерВременныхТаблиц)
	
	СоздатьВТПоказатели(МенеджерВременныхТаблиц, ТекущийОбъект.Показатели);
	
	АдресТаблицыРаспределенияПоТерриториямУсловиямТруда = "";
	СоздатьВТРаспределениеПоТерриториямУсловиямТруда(МенеджерВременныхТаблиц, ТекущийОбъект.РаспределениеПоТерриториямУсловиямТруда);
	
	ТаблицаРаспределенияНачислений = ТекущийОбъект.РаспределениеРезультатовНачислений.Выгрузить();
	СоздатьВТРаспределениеРезультатовНачислений(МенеджерВременныхТаблиц, ТаблицаРаспределенияНачислений);
	ТаблицаРаспределенияНачислений.Индексы.Добавить("ИдентификаторСтроки");
	
	АдресТаблицыРаспределенияНачислений = ПоместитьВоВременноеХранилище(ТаблицаРаспределенияНачислений, УникальныйИдентификатор);
	
	ТаблицаРаспределенияУдержаний = ТекущийОбъект.РаспределениеРезультатовУдержаний.Выгрузить();
	СоздатьВТРаспределениеРезультатовУдержаний(МенеджерВременныхТаблиц, ТаблицаРаспределенияУдержаний);
	ТаблицаРаспределенияУдержаний.Индексы.Добавить("ИдентификаторСтроки");
	
	АдресТаблицыРаспределенияУдержаний = ПоместитьВоВременноеХранилище(ТаблицаРаспределенияУдержаний, УникальныйИдентификатор);	
	
	СоздатьВТПредставлениеРаспределенияРезультатовРасчета(МенеджерВременныхТаблиц, ТекущийОбъект.ПредставлениеРаспределенияРезультатовРасчета);
	
	ЗарплатаКадрыРасширенный.СоздатьВТПредставлениеРаспределенияНачисленийУдержаний(
		МенеджерВременныхТаблиц, 
		ТекущийОбъект.Ссылка, 
		"ВТРаспределениеРезультатовНачислений", 
		"ВТПредставлениеРаспределенияНачислений");
		
	ЗарплатаКадрыРасширенный.СоздатьВТПредставлениеРаспределенияНачисленийУдержаний(
		МенеджерВременныхТаблиц, 
		ТекущийОбъект.Ссылка, 
		"ВТРаспределениеРезультатовУдержаний", 
		"ВТПредставлениеРаспределенияУдержаний");
		
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПоказатели(МенеджерВременныхТаблиц, ТаблицаПоказателей)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.Показатель КАК Показатель,
	               |	Таблица.Значение,
	               |	Таблица.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТПоказатели
	               |ИЗ
	               |	&ТаблицаПоказателей КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТРаспределениеПоТерриториямУсловиямТруда(МенеджерВременныхТаблиц, РаспределениеПоТерриториямУсловиямТруда)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РаспределениеПоТерриториямУсловиямТруда", РаспределениеПоТерриториямУсловиямТруда);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.ИдентификаторСтроки,
	               |	Таблица.Территория,
	               |	Таблица.УсловияТруда,
	               |	Таблица.ДоляРаспределения,
	               |	Таблица.Результат,
	               |	Таблица.ИдентификаторСтрокиПоказателей
	               |ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
	               |ИЗ
	               |	&РаспределениеПоТерриториямУсловиямТруда КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТРаспределениеРезультатовНачислений(МенеджерВременныхТаблиц, ТаблицаРаспределенияНачислений)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаРаспределенияНачислений", ТаблицаРаспределенияНачислений);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки КАК НомерСтроки,
	               |	Таблица.ИдентификаторСтроки,
	               |	Таблица.Территория,
	               |	Таблица.СтатьяФинансирования,
	               |	Таблица.СтатьяРасходов,
	               |	Таблица.СпособОтраженияЗарплатыВБухучете,
	               |	Таблица.ОблагаетсяЕНВД,
	               |	Таблица.Результат
	               |ПОМЕСТИТЬ ВТРаспределениеРезультатовНачислений
	               |ИЗ
	               |	&ТаблицаРаспределенияНачислений КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТРаспределениеРезультатовУдержаний(МенеджерВременныхТаблиц, ТаблицаРаспределенияУдержаний)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаРаспределенияУдержаний", ТаблицаРаспределенияУдержаний);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки КАК НомерСтроки,
	               |	Таблица.ИдентификаторСтроки,
	               |	Таблица.ВидУдержания,
	               |	Таблица.Сотрудник,
	               |	Таблица.Подразделение,
	               |	Таблица.СтатьяФинансирования,
	               |	Таблица.СтатьяРасходов,
	               |	Таблица.Результат
	               |ПОМЕСТИТЬ ВТРаспределениеРезультатовУдержаний
	               |ИЗ
	               |	&ТаблицаРаспределенияУдержаний КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВТПредставлениеРаспределенияРезультатовРасчета(МенеджерВременныхТаблиц, ПредставлениеРаспределенияРезультатовРасчета)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПредставлениеРаспределенияРезультатовРасчета", ПредставлениеРаспределенияРезультатовРасчета);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.ИдентификаторСтроки,
	               |	Таблица.НомерСтрокиРаспределения,
	               |	Таблица.НомерЭлементаПредставления,
	               |	Таблица.КоличествоЭлементовПредставления,
	               |	Таблица.ПредставлениеРезультата,
	               |	Таблица.ЕстьОшибкиЗаполнения,
	               |	Таблица.РаспределениеНачислений
	               |ПОМЕСТИТЬ ВТПредставлениеРаспределенияРезультатовРасчета
	               |ИЗ
	               |	&ПредставлениеРаспределенияРезультатовРасчета КАК Таблица";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	ТекущийОбъект.Показатели.Очистить();
	
	ОписанияТаблиц = Новый Массив;
	
	Если Объект.РежимДоначисления Тогда 
		
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		
	Иначе 
		
		Если ИспользоватьНачисление Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
		КонецЕсли;
		
		Если ИспользоватьПособия Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет());
		КонецЕсли;
		
		Если ИспользоватьЛьготы Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот());
		КонецЕсли;
		
		Если ИспользоватьУдержания Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);
	
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата(ЭтаФорма));
	
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.МесяцНачисления));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), Ложь, Ложь);
	
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияКонтролируемыхПолей()
	
	// Выполняет заполнение сведений о значениях контролируемых полей, 
	// которые могли измениться в результате не интерактивного обновления значений.
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПоДоговорам", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Пособия", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Удержания", Истина);
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НДФЛ", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудникаПриВыбореДоговораГПХ()
	
	ИдентификаторСтроки = Элементы.НачисленияПоДоговорам.ТекущаяСтрока;
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекущиеДанные = Объект.НачисленияПоДоговорам.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.Сотрудник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.ДокументОснование, "Сотрудник");
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры
&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	ПересчитатьДокументНаСервере(СотрудникиКРасчету);
	РасчетЗарплатыРасширенныйКлиент.ОчиститьСписокСотрудниковКРасчету(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДокументНаСервере(СотрудникиКРасчету)
	
	Для каждого ТаблицаССотрудниками Из СотрудникиКРасчету Цикл
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаССотрудниками.Значение.СписокСотрудников, "Ключ");
		РассчитатьСотрудникаНаСервере(Сотрудники, ТаблицаССотрудниками.Значение.ОписаниеТаблицы, Ложь);
	КонецЦикла;
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюОкончание(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПересчитатьДокументНаКлиенте();
		Записать(Параметры);
	Иначе
		ЗакрыватьПослеЗаписи = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРасчетныйЛисток(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти)
	
	Если Объект.Проведен И Не Модифицированность Тогда
		
		СписокСотрудников = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
			
			Если ИмяТабличнойЧасти = "Начисления"
				Или ИмяТабличнойЧасти = "НачисленияПерерасчет"
				Или ИмяТабличнойЧасти = "Пособия"
				Или ИмяТабличнойЧасти = "НачисленияПоДоговорам" Тогда
				СписокСотрудников.Добавить(Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
			Иначе
				СписокСотрудников.Добавить(Объект.Удержания.НайтиПоИдентификатору(ИдентификаторСтроки).ФизическоеЛицо);
			КонецЕсли;
			
		КонецЦикла;
		
		РасчетныйЛисток = РасчетныйЛистокНаСервереБезКонтекста(Объект.Ссылка, СписокСотрудников);
		
	Иначе 	
	
		РасчетныйЛисток = РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти);
		
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Отчет.АнализНачисленийИУдержаний", "РасчетныйЛистокПодробнее", 
			РасчетныйЛисток, ЭтаФорма);
			
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчетныйЛистокНаСервереБезКонтекста(ДокументСсылка, СписокФизическихЛиц)
	
	Если ТипЗнч(СписокФизическихЛиц[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
		СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокФизическихЛиц, "ФизическоеЛицо"), "Значение", Истина);
	КонецЕсли;
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументСсылка);
	КарточкаУчета.Добавить(УчетНачисленнойЗарплаты.РасчетныйЛистокПодробнее(ДокументОбъект, Ложь, СписокФизическихЛиц, ДокументОбъект.МесяцНачисления));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаСервере
Функция РасчетныйЛистокНаСервере(ИдентификаторыВыделенныхСтрок, ИмяТабличнойЧасти)
	
	СписокСотрудников = Новый Массив;
	Для каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		
		Если ИмяТабличнойЧасти = "Начисления"
			Или ИмяТабличнойЧасти = "НачисленияПерерасчет"
			Или ИмяТабличнойЧасти = "Пособия"
			Или ИмяТабличнойЧасти = "НачисленияПоДоговорам" Тогда
			СписокСотрудников.Добавить(Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(ИдентификаторСтроки).Сотрудник);
		Иначе
			СписокСотрудников.Добавить(Объект.Удержания.НайтиПоИдентификатору(ИдентификаторСтроки).ФизическоеЛицо);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмяТабличнойЧасти = "Начисления"
		Или ИмяТабличнойЧасти = "НачисленияПерерасчет"
		Или ИмяТабличнойЧасти = "Пособия"
		Или ИмяТабличнойЧасти = "НачисленияПоДоговорам" Тогда
		МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ФизическоеЛицо"), "Значение", Истина);
	Иначе
		МассивФизическихЛиц = СписокСотрудников;
	КонецЕсли;
	
	ДокументОбъект = Документы.НачислениеЗарплаты.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Номер");
	
	РеквизитыВДанныеДляРасчетногоЛистка(ДокументОбъект, МассивФизическихЛиц);
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ВидыУчетов", "Начисления,УчетНачисленнойЗарплаты,ИсчисленныеСтраховыеВзносы");
	
	ИсходныйДокументОбъект = Неопределено;
	Если Объект.Проведен Тогда 
		ИсходныйДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	КарточкаУчета = Новый Массив;
	КарточкаУчета.Добавить(ДокументОбъект.Ссылка);
	КарточкаУчета.Добавить(УчетНачисленнойЗарплаты.РасчетныйЛистокПодробнее(ДокументОбъект, Истина, МассивФизическихЛиц, Объект.МесяцНачисления, ИсходныйДокументОбъект));
	
	Возврат КарточкаУчета;
	
КонецФункции

&НаСервере
Процедура РеквизитыВДанныеДляРасчетногоЛистка(ТекущийОбъект, МассивФизическихЛиц)
	
	МассивСотрудников = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	Сотрудники.ФизическоеЛицо В(&МассивФизическихЛиц)";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);			   
	
	Пока Выборка.Следующий() Цикл 
		МассивСотрудников.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Ссылка", ТекущийОбъект.Ссылка);
	
	ОписанияТаблицНачислений = ОписанияТаблицНачисленийДляРасчетногоЛистка();
	ОписанияТаблицУдержаний = ОписанияТаблицУдержанийДляРасчетногоЛистка();
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицНачислений Цикл 
		ДополнитьДанныеОбъектаДляРасчетногоЛистка(ДанныеОбъекта, ТекущийОбъект, ОписаниеТаблицы, МассивСотрудников);
	КонецЦикла;
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицУдержаний Цикл 
		ДополнитьДанныеОбъектаДляРасчетногоЛистка(ДанныеОбъекта, ТекущийОбъект, ОписаниеТаблицы, МассивФизическихЛиц);
	КонецЦикла;
	
	ОбразФормы = Новый Структура;
	ОбразФормы.Вставить("Объект", ДанныеОбъекта);
	ОбразФормы.Вставить("АдресТаблицыРаспределенияНачислений", АдресТаблицыРаспределенияНачислений);
	ОбразФормы.Вставить("АдресТаблицыРаспределенияУдержаний", АдресТаблицыРаспределенияУдержаний);
	ОбразФормы.Вставить("АдресТаблицыРаспределенияПоТерриториямУсловиямТруда", АдресТаблицыРаспределенияПоТерриториямУсловиямТруда);
	
	ОписанияТаблиц = Новый Массив;
	
	Если Объект.РежимДоначисления Тогда 
		
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		
	Иначе 
		
		Если ИспользоватьНачисление Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
		КонецЕсли;
		
		Если ИспользоватьПособия Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия());
			ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет());
		КонецЕсли;
		
		Если ИспользоватьЛьготы Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот());
		КонецЕсли;
		
		Если ИспользоватьУдержания Тогда 
			ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ОбразФормы, ТекущийОбъект, ОписанияТаблиц, 2);
	
	ОписанияТаблицДляРаспределенияРезультата = ОписанияТаблицДляРаспределенияРезультата(ЭтаФорма);
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицДляРаспределенияРезультата Цикл 
		ОписаниеТаблицы.УстанавливатьИдентификаторСтрокиРаспределенияРезультата = Ложь;
	КонецЦикла;
	
	ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ОбразФормы, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата);
	
	РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ОбразФормы, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицНачисленийДляРасчетногоЛистка() Экспорт 
	
	ОписанияТаблиц = Новый Массив;
	
	Если ИспользоватьНачисление Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов());
	КонецЕсли;
	
	Если ИспользоватьДоговоры Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачисленийПоДоговорам());
	КонецЕсли;
	
	Если ИспользоватьПособия Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособия());
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПособияПерерасчет());
	КонецЕсли;
	
	Если ИспользоватьЛьготы Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыЛьгот());
	КонецЕсли;
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаСервере
Функция ОписанияТаблицУдержанийДляРасчетногоЛистка() Экспорт 
	
	ОписанияТаблиц = Новый Массив;
	
	Если ИспользоватьУдержания Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	КонецЕсли;
	
	Если ИспользоватьНДФЛ Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	КонецЕсли;
	
	Если ИспользоватьЗаймы Тогда 
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПогашениеЗаймов());
	КонецЕсли;
	
	Возврат ОписанияТаблиц;
	
КонецФункции

&НаСервере
Процедура ДополнитьДанныеОбъектаДляРасчетногоЛистка(ДанныеОбъекта, ТекущийОбъект, ОписаниеТаблицы, МассивСотрудников)
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект[ОписаниеТаблицы.ИмяТаблицы] Цикл 
		Если МассивСотрудников.Найти(СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаСотрудник]) <> Неопределено Тогда 
			МассивСтрок.Добавить(СтрокаТаблицы);
			ЗаполнитьЗначенияСвойств(ТекущийОбъект[ОписаниеТаблицы.ИмяТаблицы].Добавить(), СтрокаТаблицы);
			Если ОписаниеТаблицы.ИмяТаблицы = "НДФЛ" Тогда
				ИдентификаторСтроки = СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки];
				Отбор = Новый Структура(ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки, ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОбъекта.Вставить(ОписаниеТаблицы.ИмяТаблицы, МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьИсправленныеСтроки() Экспорт
	Возврат ЕстьИсправленныеСтрокиНаСервере();
КонецФункции

&НаСервере
Функция ЕстьИсправленныеСтрокиНаСервере()
	Возврат РасчетЗарплатыРасширенныйФормы.ЕстьИсправленныеСтроки(ЭтаФорма);
КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОбъекта()
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
	ПараметрыОповещения = Новый Структура("Организация,МесяцНачисления,РежимДоначисления");
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, Объект);
	
	Оповестить("Запись_НачислениеЗарплаты", ПараметрыОповещения, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСотрудниковНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СотрудникиДокумента = Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	Иначе
		СотрудникиДокумента = Неопределено;
	КонецЕсли;
	
	СотрудникиКПерерасчету = ПерерасчетЗарплаты.СотрудникиКПерерасчету(Объект.Организация, Объект.МесяцНачисления, СотрудникиДокумента);
	
	СотрудникиСоответствие = Новый Соответствие;
	Для каждого СотрудникКПерерасчету Из СотрудникиКПерерасчету Цикл
		СотрудникиСоответствие.Вставить(СотрудникКПерерасчету, Истина);
	КонецЦикла;
	
	ОписаниеТаблицы = ОписаниеТаблицыНачислений();
	
	ОписаниеПересчета = Новый Соответствие;
	ОписаниеПересчета.Вставить(ОписаниеТаблицы.ИмяТаблицы, Новый Структура("ОписаниеТаблицы,СписокСотрудников", ОписаниеТаблицы, СотрудникиСоответствие));
	
	ПерезаполнитьДанныеФормыНаСервере(СотрудникиКПерерасчету, Ложь, ОписаниеПересчета);
	
	ЗаполнениеВыполнено = Истина;
	РассчитатьИтогиПоДокументу();
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаСотрудниковВХранилище()
	Возврат ПоместитьВоВременноеХранилище(Объект.Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ОчиститьТаблицыДокументаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТабличнаяЧасть Из Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти Цикл 
		Если Объект.Свойство(ТабличнаяЧасть.Имя) Тогда 
			Объект[ТабличнаяЧасть.Имя].Очистить();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	РассчитатьИтогиПоДокументу();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	УстановитьДоступностьКомандыДозаполнить();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудника()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	
	ТаблицыДокумента = Новый Массив;
	ТаблицыДокумента.Добавить("Начисления");
	ТаблицыДокумента.Добавить("НачисленияПоДоговорам");
	ТаблицыДокумента.Добавить("НачисленияПерерасчет");
	ТаблицыДокумента.Добавить("Пособия");
	ТаблицыДокумента.Добавить("Льготы");
	ТаблицыДокумента.Добавить("Удержания");
	ТаблицыДокумента.Добавить("НДФЛ");
	ТаблицыДокумента.Добавить("ПогашениеЗаймов");
	ТаблицыДокумента.Добавить("Взносы");
	
	Для Каждого ТаблицаДокумента Из ТаблицыДокумента Цикл
		
		ИмяТаблицы = ОписаниеДокумента[ТаблицаДокумента + "Имя"];
		Если ИмяТаблицы <> Неопределено Тогда
			
			ИмяКоманднойПанели = Неопределено;
			
			ОписаниеДокумента.Свойство(ТаблицаДокумента + "КоманднаяПанельИмя", ИмяКоманднойПанели);
			ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели);

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСотрудникаВТаблицуДокумента(ИмяТаблицы, ИмяКоманднойПанели)
	
	Если Элементы.Найти(ИмяТаблицы) = Неопределено Тогда
		// Такой таблицы нет в форме
		Возврат;
	КонецЕсли;
	
	Если Команды.Найти(ИмяТаблицы + "УдалитьСотрудника") <> Неопределено Тогда
		// Команда уже существует
		Возврат;
	КонецЕсли;
	
	// Добавляем команду формы
	КомандаУдалитьСотрудника = Команды.Добавить(ИмяТаблицы + "УдалитьСотрудника");
	КомандаУдалитьСотрудника.Действие = "Подключаемый_" + ИмяТаблицы + "УдалитьСотрудника";
	КомандаУдалитьСотрудника.Заголовок = НСтр("ru='Удалить сотрудника';uk='Видалити співробітника'");
	КомандаУдалитьСотрудника.Подсказка = НСтр("ru='Данные по выбранному сотруднику удаляются со всех таблиц документа';uk='Дані по обраному співробітнику видаляються з усіх таблиць документа'");
	КомандаУдалитьСотрудника.Картинка = БиблиотекаКартинок.Удалить;
	КомандаУдалитьСотрудника.Отображение = ОтображениеКнопки.КартинкаИТекст;
	КомандаУдалитьСотрудника.ИзменяетСохраняемыеДанные = Истина;
	
	// Добавляем элементы (группу кнопок и кнопку) в командную панель.
	Если ИмяКоманднойПанели = Неопределено Тогда
		ИмяКоманднойПанели = ИмяТаблицы + "КоманднаяПанель";
	КонецЕсли;
	
	КоманднаяПанельТаблицы = Элементы.Найти(ИмяКоманднойПанели);
	Если КоманднаяПанельТаблицы <> Неопределено Тогда
		Если КоманднаяПанельТаблицы.ПодчиненныеЭлементы.Количество() = 0 Тогда
			МестоВставки = Неопределено;
		Иначе
			МестоВставки = КоманднаяПанельТаблицы.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КоманднаяПанельТаблицы, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru='Обновление строк документа';uk='Оновлення рядків документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КоманднаяПанельУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
			КнопкаУдалитьСотрудника.ТолькоВоВсехДействиях = Истина;
		КонецЕсли;
		
		// Добавляем элементы в контекстное меню.
		КонтекстноеМеню = Элементы[ИмяТаблицы].КонтекстноеМеню;
		
		МестоВставки = Неопределено;
		Если КонтекстноеМеню.ПодчиненныеЭлементы.Количество() > 0 Тогда
			МестоВставки = КонтекстноеМеню.ПодчиненныеЭлементы[0];
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюПересчитатьСотрудникаГруппа";
		ГруппаКнопок = Элементы.Найти(ИмяЭлемента);
		Если ГруппаКнопок = Неопределено Тогда
			ГруппаКнопок = Элементы.Вставить(ИмяЭлемента, Тип("ГруппаФормы"), КонтекстноеМеню, МестоВставки);
			ГруппаКнопок.Вид = ВидГруппыФормы.ГруппаКнопок;
			ГруппаКнопок.Заголовок = НСтр("ru='Обновление строк документа';uk='Оновлення рядків документа'");
		КонецЕсли;
		
		ИмяЭлемента = ИмяТаблицы + "КонтекстноеМенюУдалитьСотрудника";
		Если Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			КнопкаУдалитьСотрудника = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаКнопок);
			КнопкаУдалитьСотрудника.ИмяКоманды = ИмяТаблицы + "УдалитьСотрудника";
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСотрудникаНаСервере(Сотрудник)
	
	Если Не УдалитьДанныеСотрудникаНаСервере(Сотрудник) Тогда 
		РассчитатьСотрудникаНаСервере(Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьДанныеСотрудникаНаСервере(СотрудникФизическоеЛицо)
	
	УдаляемыеСотрудники = Новый Соответствие;
	ДополнительныеСотрудники = Новый Соответствие;
	
	Если ТипЗнч(СотрудникФизическоеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда 
	
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникФизическоеЛицо, "ФизическоеЛицо");
		
		УдаляемыеСотрудники.Вставить(СотрудникФизическоеЛицо, Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Сотрудник", СотрудникФизическоеЛицо);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Сотрудники.Ссылка
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |ГДЕ
		               |	Сотрудники.Ссылка <> &Сотрудник
		               |	И Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			ДополнительныеСотрудники.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
	Иначе 
		
		ФизическоеЛицо = СотрудникФизическоеЛицо;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Сотрудники.Ссылка
		               |ИЗ
		               |	Справочник.Сотрудники КАК Сотрудники
		               |ГДЕ
		               |	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			УдаляемыеСотрудники.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьУдержания = Истина;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("НачисленияПерерасчет");
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	ИменаТаблиц.Добавить("Пособия");
	ИменаТаблиц.Добавить("ПособияПерерасчет");
	ИменаТаблиц.Добавить("Льготы");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
	
		СтрокиСотрудника = Новый Массив;
		Для Каждого СтрокаСотрудника Из Объект[ИмяТаблицы] Цикл 
			Если УдаляемыеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
		    	СтрокиСотрудника.Добавить(СтрокаСотрудника);
			ИначеЕсли ДополнительныеСотрудники[СтрокаСотрудника.Сотрудник] <> Неопределено Тогда 
				ОчиститьУдержания = Ложь;
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл 
			Объект[ИмяТаблицы].Удалить(СтрокаСотрудника);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ОчиститьУдержания Тогда 
		УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
		Возврат Ложь;
	КонецЕсли;
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Взносы");
	ИменаТаблиц.Добавить("НДФЛ");
	ИменаТаблиц.Добавить("ПогашениеЗаймов");
	ИменаТаблиц.Добавить("Удержания");
	
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		СтрокиФизическогоЛица = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("ФизическоеЛицо", ФизическоеЛицо));
		Для Каждого СтрокаФизическогоЛица Из СтрокиФизическогоЛица Цикл 
			Объект[ИмяТаблицы].Удалить(СтрокаФизическогоЛица);
		КонецЦикла;
	КонецЦикла;
	
	РассчитатьИтогиПоДокументу();
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений();
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПослеУдаленияСтроки()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьССохранениемИсправлений", "Доступность", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправленийПриОкончанииРедактированияСтроки(ТекущиеДанные)
	
	ЕстьИсправления = ТекущиеДанные.Свойство("ФиксРасчет") И ТекущиеДанные.ФиксРасчет
		Или ТекущиеДанные.Свойство("ФиксРасчетВремени") И ТекущиеДанные.ФиксРасчетВремени
		Или ТекущиеДанные.Свойство("ФиксЗаполнение") И ТекущиеДанные.ФиксЗаполнение
		Или ТекущиеДанные.Свойство("ФиксСтрока") И ТекущиеДанные.ФиксСтрока;
		
	Если ЕстьИсправления Тогда 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьССохранениемИсправлений", "Доступность", Истина);
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(ЕстьИсправленныеСтроки = Неопределено)
	
	Если ЕстьИсправленныеСтроки = Неопределено Тогда 
		ЕстьИсправленныеСтроки = ЕстьИсправленныеСтрокиНаСервере();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ЗаполнитьССохранениемИсправлений", "Доступность", ЕстьИсправленныеСтроки);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыДозаполнить()
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("Начисления");
	ИменаТаблиц.Добавить("НачисленияПерерасчет");
	ИменаТаблиц.Добавить("НачисленияПоДоговорам");
	ИменаТаблиц.Добавить("Пособия");
	ИменаТаблиц.Добавить("ПособияПерерасчет");
	ИменаТаблиц.Добавить("Льготы");
	ИменаТаблиц.Добавить("Взносы");
	ИменаТаблиц.Добавить("НДФЛ");
	ИменаТаблиц.Добавить("ПогашениеЗаймов");
	ИменаТаблиц.Добавить("Удержания");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустойДокумент = Истина;
	Для Каждого ИмяТаблицы Из ИменаТаблиц Цикл 
		Если Объект[ИмяТаблицы].Количество() > 0 Тогда 
			ПустойДокумент = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Дозаполнить", "Доступность", Не ПустойДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура НачислениеЗарплатыВоеннослужащимПриИзменении(Элемент)
	
	ЗарплатаКадрыРасширенныйКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьОтборПоВидуДоговора(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьОтборПоВидуДоговора(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура НачисленияПоДоговорамСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьОтборПоВидуДоговора(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьОтборПоВидуДоговора(Элемент);
	
КонецПроцедуры

&НаСервере
Функция ВидыДоговоровВоеннойСлужбы()
	
	Возврат Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы();
	
КонецФункции

&НаСервере
Функция ВидыДоговоровКромеВоеннойСлужбы()
	
	Возврат Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровКромеВоеннойСлужбы();
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоВидуДоговора(Элемент, ЭтоДоговорник = Ложь)
	
	Если ТипЗнч(Элемент.ПараметрыВыбора) = Тип("ФиксированныйМассив") Тогда
		НовыйМассив = Новый Массив(Элемент.ПараметрыВыбора);
		УдалитьЭлементВидДоговора(НовыйМассив);
	Иначе		
		НовыйМассив = Новый Массив();
	КонецЕсли;
	
	Если ИспользоватьВоеннуюСлужбу Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидДоговора", ?(Объект.НачислениеЗарплатыВоеннослужащим, ВидыДоговоровВоеннойСлужбы(), ВидыДоговоровКромеВоеннойСлужбы()));
		НовыйМассив.Добавить(НовыйПараметр);
	КонецЕсли;
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элемент.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементВидДоговора(Массив)
	
	МассивЭлементовДляУдаления = Новый Массив;
	
	Для Каждого ЭлементМассива Из Массив Цикл
		
		Если ЭлементМассива.Имя = "Отбор.ВидДоговора" Тогда
			МассивЭлементовДляУдаления.Добавить(ЭлементМассива);
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		
		ИндексЭлемента = Массив.Найти(ЭлементДляУдаления);
		Массив.Удалить(ИндексЭлемента);		 
		
	КонецЦикла;
	
КонецПроцедуры

// НДФЛ

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогНачислено(Форма)
	
	ОписанияСоставляющихНачисления = Новый Массив;
	ОписанияСоставляющихНачисления.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='зарплата';uk='зарплата'")));
	
	ОписанияСоставляющихНачисленияПоДоговорам = Новый Массив;
	ОписанияСоставляющихНачисленияПоДоговорам.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='по договорам ГПХ';uk='за договорами ЦПХ'")));
	
	ОписанияСоставляющихПособия = Новый Массив;
	ОписанияСоставляющихПособия.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='пособия';uk='допомоги'")));
		
	#Если Клиент Тогда
		ЛьготыСотрудниковСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников");
	#Иначе
		ЛьготыСотрудниковСуществует = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников");
	#КонецЕсли
		
	Если ЛьготыСотрудниковСуществует Тогда
		ОписанияСоставляющихЛьготы = Новый Массив;
		ОписанияСоставляющихЛьготы.Добавить(
			ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='льготы';uk='пільги'")));
	КонецЕсли;
		
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Начисления", ОписанияСоставляющихНачисления));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.НачисленияПоДоговорам", ОписанияСоставляющихНачисленияПоДоговорам));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Пособия", ОписанияСоставляющихПособия));
		
	Если ЛьготыСотрудниковСуществует Тогда
		ОписанияСоставляющих.Добавить(
			ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Льготы", ОписанияСоставляющихЛьготы));
	КонецЕсли;
		
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогНачислено", ОписанияСоставляющих);
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогНачисленоПерерасчет()
	
	ИтогНачисленоПерерасчет = 0;
	ТекстПодсказки = "";
	
	Если Объект.НачисленияПерерасчет.Количество() > 0 Тогда
		
		НачисленияПерерасчет = Объект.НачисленияПерерасчет.Выгрузить(, "ФиксСторно,ДатаНачала,Результат");
		НачисленияПерерасчет.Свернуть("ФиксСторно,ДатаНачала", "Результат");
		
		ИтогНачисленоПерерасчет = НачисленияПерерасчет.Итог("Результат");
		
		ДатыНачала = НачисленияПерерасчет.Скопировать(, "ДатаНачала,Результат");
		ДатыНачала.Свернуть("ДатаНачала", "Результат");
		ДатыНачала.Сортировать("ДатаНачала");
		
		Операции = НачисленияПерерасчет.Скопировать(, "ФиксСторно");
		Операции.Свернуть("ФиксСторно");
		Операции.Сортировать("ФиксСторно");
		
		ПустаяСтрока = "                 ";
		
		Если Операции.Количество() > 0 И ДатыНачала.Количество() > 0 Тогда
			
			ДлиныКолонок = Новый Соответствие;
			СоответствиеПериодовКолонкам = Новый Соответствие;
			
			ТаблицаИтогов = Новый ТаблицаЗначений;
			ТаблицаИтогов.Колонки.Добавить("Операция", Новый ОписаниеТипов("Строка"), "");
			
			ДлиныКолонок.Вставить(ТаблицаИтогов.Колонки.Операция.Имя, 0);
			
			НомерКолонки = 1;
			Для каждого СтрокаДатаНачала Из ДатыНачала Цикл
				
				ИмяКолонки = "Итог" + НомерКолонки;
				ЗаголовокКолонки = Формат(СтрокаДатаНачала.ДатаНачала, "ДФ='ММММ гггг'");
				
				ТаблицаИтогов.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка"), ЗаголовокКолонки);
				ДлиныКолонок.Вставить(ИмяКолонки, СтрДлина(ЗаголовокКолонки));
				
				СоответствиеПериодовКолонкам.Вставить(СтрокаДатаНачала.ДатаНачала, ИмяКолонки);
				
				НомерКолонки = НомерКолонки + 1;
				
			КонецЦикла;
			
			Для каждого СтрокаОперации Из Операции Цикл
				
				НоваяСтрока = ТаблицаИтогов.Добавить();
				Если СтрокаОперации.ФиксСторно Тогда
					Операция = НСтр("ru='Сторнировано';uk='Сторновано'") + ":";
				Иначе
					Операция = НСтр("ru='Начислено';uk='Нараховано'") + ":";
				КонецЕсли;
				НоваяСтрока.Операция = Операция;
				ЗапомнитьМаксимальнуюДлинуСтроки(ДлиныКолонок, "Операция", СтрДлина(Операция));
				
				СтрокиОперации = НачисленияПерерасчет.НайтиСтроки(Новый Структура("ФиксСторно", СтрокаОперации.ФиксСторно));
				Для каждого СтрокаОперации Из СтрокиОперации Цикл
					Результат = Формат(СтрокаОперации.Результат, "ЧДЦ=2");
					ИмяКолонки = СоответствиеПериодовКолонкам.Получить(СтрокаОперации.ДатаНачала);
					НоваяСтрока[ИмяКолонки] = Результат;
					ЗапомнитьМаксимальнуюДлинуСтроки(ДлиныКолонок, ИмяКолонки, СтрДлина(Результат))
				КонецЦикла;
				
			КонецЦикла;
			
			НоваяСтрока = ТаблицаИтогов.Добавить();
			Для каждого СтрокаДатыНачала Из ДатыНачала Цикл
				Результат = Формат(СтрокаДатыНачала.Результат, "ЧДЦ=2");
				ИмяКолонки = СоответствиеПериодовКолонкам.Получить(СтрокаДатыНачала.ДатаНачала);
				НоваяСтрока[ИмяКолонки] = Результат;
				ЗапомнитьМаксимальнуюДлинуСтроки(ДлиныКолонок, ИмяКолонки, СтрДлина(Результат))
			КонецЦикла;
			
			ПерваяКолонка = Истина;
			Для каждого Колонка Из ТаблицаИтогов.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				ВыводимыйТекст = Колонка.Заголовок;
				
				Отступ = ДлиныКолонок.Получить(ИмяКолонки) - СтрДлина(ВыводимыйТекст);
				Если ПерваяКолонка Тогда
					ПерваяКолонка = Ложь;
					ТекстПодсказки = ТекстПодсказки + ВыводимыйТекст + Лев(ПустаяСтрока, Отступ);
				Иначе
					Отступ = Отступ + 2;
					ТекстПодсказки = ТекстПодсказки + Лев(ПустаяСтрока, Отступ) + ВыводимыйТекст;
				КонецЕсли; 
				
			КонецЦикла;
			ТекстПодсказки = ТекстПодсказки + Символы.ПС;
			
			Для каждого СтрокаТаблицыИтогов Из ТаблицаИтогов Цикл
					
				ТекстПодсказки = ТекстПодсказки + Символы.ПС;
				ПерваяКолонка = Истина;
				Для каждого Колонка Из ТаблицаИтогов.Колонки Цикл
					
					ИмяКолонки = Колонка.Имя;
					ВыводимыйТекст = СтрокаТаблицыИтогов[ИмяКолонки];
					
					Отступ = ДлиныКолонок.Получить(ИмяКолонки) - СтрДлина(ВыводимыйТекст);
					Если ПерваяКолонка Тогда
						ПерваяКолонка = Ложь;
						ТекстПодсказки = ТекстПодсказки + ВыводимыйТекст + Лев(ПустаяСтрока, Отступ);
					Иначе
						Отступ = Отступ + 2;
						ТекстПодсказки = ТекстПодсказки + Лев(ПустаяСтрока, Отступ) + ВыводимыйТекст;
					КонецЕсли; 
					
				КонецЦикла;
				
				Если ТаблицаИтогов.Количество() = 2 Тогда
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(ЭтаФорма, "ИтогНачисленоПерерасчет", ТекстПодсказки);
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьМаксимальнуюДлинуСтроки(Коллекция, Ключ, ДлинаСтроки)
	
	ТекущаяДлина = Коллекция.Получить(Ключ);
	Если ТекущаяДлина < ДлинаСтроки Тогда
		Коллекция.Вставить(Ключ, ДлинаСтроки);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогУдержано(Форма)
	
	ОписанияСоставляющихУдержания = Новый Массив;
	ОписанияСоставляющихУдержания.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='удержания';uk='утримання'")));

	ОписанияСоставляющихНДФЛ = Новый Массив;
	ОписанияСоставляющихНДФЛ.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Налог", НСтр("ru='НДФЛ';uk='ПДФО'")));
	
	ОписанияСоставляющихПогашениеЗаймов = Новый Массив;
	ОписанияСоставляющихПогашениеЗаймов.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("ПогашениеПроцентов", НСтр("ru='погашено процентов по займам';uk='погашено відсотків за позиками'")));
	ОписанияСоставляющихПогашениеЗаймов.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("ПогашениеЗайма", НСтр("ru='погашено займов';uk='погашено позик'")));
	ОписанияСоставляющихПогашениеЗаймов.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("НалогНаМатериальнуюВыгоду", НСтр("ru='налог на материальную выгоду';uk='податок на матеріальну вигоду'")));
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.Удержания", ОписанияСоставляющихУдержания));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.НДФЛ", ОписанияСоставляющихНДФЛ));
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.ПогашениеЗаймов", ОписанияСоставляющихПогашениеЗаймов));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогУдержано", ОписанияСоставляющих);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогВзносы(Форма)
	
	//ПоляВзносов = УчетСтраховыхВзносовКлиентСервер.ОписаниеПолейВзносовВСоответствии(Форма.Объект.МесяцНачисления);
	//
	//ОписанияСоставляющихВзносы = Новый Массив;
	//Для каждого ОписаниеПоля Из ПоляВзносов Цикл
	//	ОписанияСоставляющихВзносы.Добавить(
	//		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита(ОписаниеПоля.Ключ, ОписаниеПоля.Значение));
	//КонецЦикла;
	
	ОписанияСоставляющихВзносы = Новый Массив;
	ОписанияСоставляющихВзносы.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеСуммируемогоРеквизита("Результат", НСтр("ru='ЕСВ';uk='ЄСВ'")));
	
	ОписанияСоставляющих = Новый Массив;
	ОписанияСоставляющих.Добавить(
		ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейОписаниеТабличнойЧасти("Объект.ВзносыФОТ", ОписанияСоставляющихВзносы));
	
	ЗарплатаКадрыКлиентСервер.ИтогиТабличныхЧастейРассчитатьИтог(Форма, "ИтогВзносы", ОписанияСоставляющих);
	
КонецПроцедуры
	
&НаСервере
Процедура РассчитатьИтогиПоДокументу()
	
	РассчитатьИтогНачислено(ЭтаФорма);
	РассчитатьИтогНачисленоПерерасчет();
	РассчитатьИтогУдержано(ЭтаФорма);
	РассчитатьИтогВзносы(ЭтаФорма);
	
	УстановитьОтображениеСообщенияОНеобходимостиПерерасчета();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеСообщенияОНеобходимостиПерерасчета()
	
	ПерерасчетЗарплаты.УстановитьОтображениеСообщенияОНеобходимостиПерерасчетаВФормеДокумента(ЭтаФорма);
	
КонецПроцедуры

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоля = Новый Структура;
	
	// Начисления
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОтработаноДней");
	НачисленияФиксРасчетВремени.Добавить("ОтработаноЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	НачисленияПоля = Новый Структура;
	НачисленияПоля.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	НачисленияПоля.Вставить("ФиксЗаполнение", Новый Массив);
	НачисленияПоля.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	НачисленияПоля.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	КонтролируемыеПоля.Вставить("Начисления", НачисленияПоля);
	
	// Начисления перерасчет
	НачисленияПерерасчетПоля = Новый Структура;
	НачисленияПерерасчетПоля.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	НачисленияПерерасчетПоля.Вставить("ФиксЗаполнение", Новый Массив);
	НачисленияПерерасчетПоля.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	НачисленияПерерасчетПоля.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	КонтролируемыеПоля.Вставить("НачисленияПерерасчет", НачисленияПерерасчетПоля);
	
	// Договоры
	ДоговорыФиксРасчет = Новый Массив;
	ДоговорыФиксРасчет.Добавить("Результат");
	
	ДоговорыФиксСтрока = Новый Массив;
	ДоговорыФиксСтрока.Добавить("Сотрудник");
	ДоговорыФиксСтрока.Добавить("Подразделение");
	ДоговорыФиксСтрока.Добавить("ДокументОснование");
	ДоговорыФиксСтрока.Добавить("ДатаНачала");
	ДоговорыФиксСтрока.Добавить("ДатаОкончания");
	ДоговорыФиксСтрока.Добавить("КодДохода");
	ДоговорыФиксСтрока.Добавить("ПланируемаяДатаВыплаты");
	
	ДоговорыПоля = Новый Структура;
	ДоговорыПоля.Вставить("ФиксРасчет", ДоговорыФиксРасчет);
	ДоговорыПоля.Вставить("ФиксСтрока", ДоговорыФиксСтрока);
	
	КонтролируемыеПоля.Вставить("НачисленияПоДоговорам", ДоговорыПоля);
	
	// Пособия
	ПособияФиксРасчет = Новый Массив;
	ПособияФиксРасчет.Добавить("Результат");
	ПособияФиксРасчет.Добавить("РезультатВТомЧислеЗаСчетФБ");
	
	ПособияФиксСтрока = Новый Массив;
	ПособияФиксСтрока.Добавить("Сотрудник");
	ПособияФиксСтрока.Добавить("Подразделение");
	ПособияФиксСтрока.Добавить("Начисление");
	ПособияФиксСтрока.Добавить("ДатаНачала");
	ПособияФиксСтрока.Добавить("ДатаОкончания");
	
	ПособияПоля = Новый Структура;
	ПособияПоля.Вставить("ФиксРасчет", ПособияФиксРасчет);
	ПособияПоля.Вставить("ФиксЗаполнение", Новый Массив);
	ПособияПоля.Вставить("ФиксСтрока", ПособияФиксСтрока);
	
	КонтролируемыеПоля.Вставить("Пособия", ПособияПоля);
	
	// Пособия перерасчет
	ПособияПерерасчетПоля = Новый Структура;
	ПособияПерерасчетПоля.Вставить("ФиксРасчет", ПособияФиксРасчет);
	ПособияПерерасчетПоля.Вставить("ФиксЗаполнение", Новый Массив);
	ПособияПерерасчетПоля.Вставить("ФиксСтрока", ПособияФиксСтрока);
	
	КонтролируемыеПоля.Вставить("ПособияПерерасчет", ПособияПерерасчетПоля);
	
	// Удержания
	УдержанияФиксРасчет = Новый Массив;
	УдержанияФиксРасчет.Добавить("Результат");
	
	УдержанияФиксСтрока = Новый Массив;
	УдержанияФиксСтрока.Добавить("ФизическоеЛицо");
	УдержанияФиксСтрока.Добавить("Удержание");
	УдержанияФиксСтрока.Добавить("ДатаНачала");
	УдержанияФиксСтрока.Добавить("ДатаОкончания");
	
	УдержанияПоля = Новый Структура;
	УдержанияПоля.Вставить("ФиксРасчет", УдержанияФиксРасчет);
	УдержанияПоля.Вставить("ФиксЗаполнение", Новый Массив);
	УдержанияПоля.Вставить("ФиксСтрока", УдержанияФиксСтрока);
	
	КонтролируемыеПоля.Вставить("Удержания", УдержанияПоля);
	
	КонтролируемыеПоля.Вставить("НДФЛ", УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля);
	КонецЕсли;
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

#КонецОбласти

#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = ОписаниеДокумента(ЭтотОбъект);
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыНачислений());
	Описания.Добавить(ОписаниеТаблицыПерерасчетов());
	Описания.Добавить(ОписаниеТаблицыПособия());
	Описания.Добавить(ОписаниеТаблицыПособияПерерасчет());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(Описания, ОписаниеТаблицыЛьгот());
	КонецЕсли;
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Массив = КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении();
	Возврат Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьВоеннуюСлужбу);
	Возврат Массив;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыТаблицыОчищаемыеПриИзменении() 
	
	Массив = Новый Массив;
	Массив.Добавить("Объект.Начисления");
	Массив.Добавить("Объект.НачисленияПерерасчет");
	Массив.Добавить("Объект.НачисленияПоДоговорам");
	Массив.Добавить("Объект.Пособия");
	Массив.Добавить("Объект.ПособияПерерасчет");
	Массив.Добавить("Объект.НДФЛ");
	Массив.Добавить("Объект.Взносы");
	Массив.Добавить("Объект.ПогашениеЗаймов");
	Массив.Добавить("Объект.Удержания");
	Массив.Добавить("Объект.Льготы");
	
	Возврат Массив;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыОписаниеКлючевыхРеквизитов(ИспользоватьНачислениеЗарплатыВоеннослужащим) 
	
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",					НСтр("ru='организации';uk='організації'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ПодразделениеОрганизации",		НСтр("ru='подразделения';uk='підрозділи'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "МесяцНачисленияСтрокой", 		НСтр("ru='месяца начисления';uk='місяці нарахування'")));
	
	Если ИспользоватьНачислениеЗарплатыВоеннослужащим Тогда
		Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "НачислениеЗарплатыВоеннослужащим", 		НСтр("ru='варианта начисления';uk='варіанти нарахування'")));
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
СотрудникиКРасчету = Новый Соответствие;