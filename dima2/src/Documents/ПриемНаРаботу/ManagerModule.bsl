#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты", , Ложь) Тогда
		
		// Бронирование позиции
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_ПодтверждениеБронированияПозиции";
		КомандаПечати.Представление = НСтр("ru='Подтверждение брони';uk='Підтвердження броні'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ФункциональныеОпции = "ИспользоватьБронированиеПозиций";
			
		// Приказ о приеме
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
		КомандаПечати.Идентификатор = "ПФ_MXL_UK_П1";
		КомандаПечати.Порядок = 10;
		КомандаПечати.Представление = НСтр("ru='Приказ о приеме (П-1)';uk='Наказ про прийняття (П-1)'");
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ЧтениеКадровогоСостоянияРасширенная", , Ложь) Тогда
		
		// Трудовой договор
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_ТрудовойДоговор";
		КомандаПечати.Представление = НСтр("ru='Трудовой договор';uk='Трудовий договір'");
		КомандаПечати.Порядок = 20;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ЧтениеКадровогоСостоянияРасширенная", , Ложь) Тогда
		
		// Трудовой договор при дистанционной работе.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_ТрудовойДоговорПриДистанционнойРаботе";
		КомандаПечати.Представление = НСтр("ru='Трудовой договор при дистанционной работе';uk='Трудовий договір при дистанційній роботі'");
		КомандаПечати.Порядок = 30;
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДобавитьКомандыПечатиДокументаПриемНаРаботу(КомандыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если КадровыйУчетРасширенный.ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.ПриемНаРаботу);
		
	КонецЕсли; 
	
КонецФункции

Процедура РассчитатьФОТПоДокументу(ДокументОбъект) Экспорт
	
	// Подготовка к расчету ФОТ
	РассчитываемыеОбъекты = Новый Соответствие;
	
	Сотрудники = Новый Соответствие;
	
	ОписаниеСотрудника = Новый Структура;
	ОписаниеСотрудника.Вставить("Организация", ДокументОбъект.Организация);
	ОписаниеСотрудника.Вставить("ДатаРасчета", ДокументОбъект.ДатаПриема);
	ОписаниеСотрудника.Вставить("Подразделение", ДокументОбъект.Подразделение);
	ОписаниеСотрудника.Вставить("ГрафикРаботы", ДокументОбъект.ГрафикРаботы);
	ОписаниеСотрудника.Вставить("КоличествоСтавок", ДокументОбъект.КоличествоСтавок);
	ОписаниеСотрудника.Вставить("Начисления", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
	ОписаниеСотрудника.Вставить("Показатели", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
	
	СписокНачислений = Новый Массив;
	Для Каждого СтрокаНачисления Из ДокументОбъект.Начисления Цикл
		ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
		ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
		ДанныеНачисления.Размер = 0;
	КонецЦикла;
	
	Для Каждого СтрокаПоказателя Из ДокументОбъект.Показатели Цикл
		ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
		ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
		ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
	КонецЦикла;
	
	Сотрудники.Вставить(ДокументОбъект.Сотрудник, ОписаниеСотрудника);
	
	РассчитываемыеОбъекты.Вставить(ДокументОбъект.Ссылка, Сотрудники);
	
	// Расчет ФОТ
	РасчетЗарплатыРасширенный.РассчитатьФОТСотрудников(РассчитываемыеОбъекты, ДокументОбъект.Организация, ДокументОбъект.ДатаПриема);
	
	// Заполнение документа результатами расчета.
	ОписаниеОбъекта = РассчитываемыеОбъекты.Получить(ДокументОбъект.Ссылка);
	ОписаниеСотрудника = ОписаниеОбъекта.Получить(ДокументОбъект.Сотрудник);
	
	Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Начисления Цикл
		
		СтрокиДокумента = ДокументОбъект.Начисления.НайтиСтроки(Новый Структура("Начисление", ОписаниеНачисления.Начисление));
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокиДокумента[0].Размер = ОписаниеНачисления.Размер;
		КонецЕсли; 
		
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДокументОбъект.Движения.ПлановыеНачисления, ДокументОбъект.Начисления);
	
КонецПроцедуры

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная, ЧтениеДанныхДляНачисленияЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	ДанныеДляПроверкиОграничений.Подразделение = Объект.Подразделение;
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции


Функция ПодходящаяДатаДокумента(ДатаПриема) Экспорт
	
	ПодходящаяДата = Неопределено;
	
	Если ЗначениеЗаполнено(ДатаПриема) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаНачала", ДатаПриема);
		Запрос.УстановитьПараметр("КоличествоДней", 3);
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьУкраины());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
			|ПОМЕСТИТЬ ВТРабочиеДни
			|ИЗ
			|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|ГДЕ
			|	ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
			|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 10 * &КоличествоДней)
			|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РабочиеДни.Дата КАК Дата,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеДниВспомогательная.Дата) КАК НомерДня
			|ИЗ
			|	ВТРабочиеДни КАК РабочиеДни
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеДни КАК РабочиеДниВспомогательная
			|		ПО РабочиеДни.Дата >= РабочиеДниВспомогательная.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	РабочиеДни.Дата
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеДниВспомогательная.Дата) = &КоличествоДней
			|
			|УПОРЯДОЧИТЬ ПО
			|	Дата";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПодходящаяДата = Выборка.Дата;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ПодходящаяДата;
	
КонецФункции

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаПриема, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаЗавершенияТрудовогоДоговора, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор
		|	И ТаблицаДокумента.ДатаЗавершенияТрудовогоДоговора <> ДАТАВРЕМЯ(1, 1, 1)";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьСоответствиеПозицииШРПодразделению(ДокументОбъект, Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		
		Если ПроверяемыеРеквизиты.Найти("ДолжностьПоШтатномуРасписанию") <> Неопределено
			ИЛИ ПроверяемыеРеквизиты.Найти("Сотрудники.ДолжностьПоШтатномуРасписанию") Тогда 
			
			Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
				ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
				ПутьКДанным = "Объект.Подразделение";
			Иначе
				ПроверяемыеСтруктуры = ДокументОбъект.Сотрудники;
				ПутьКДанным = "Объект.Сотрудники";
			КонецЕсли;
			
			Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
				
				Если ЗначениеЗаполнено(ПроверяемаяСтруктура.ДолжностьПоШтатномуРасписанию) Тогда
					
					Если ПроверяемыеСтруктуры.Количество() = 1 Тогда
						ПутьКДаннымРеквизита = ПутьКДанным;
					Иначе
						ПутьКДаннымРеквизита = ПутьКДанным + "[" + ПроверяемаяСтруктура.НомерСтроки + "].Подразделение";
					КонецЕсли;
					
					ПодразделениеПоШтатномуРасписанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемаяСтруктура.ДолжностьПоШтатномуРасписанию, "Подразделение");
					Если ПодразделениеПоШтатномуРасписанию <> ПроверяемаяСтруктура.Подразделение Тогда
						ТекстСообщения = НСтр("ru='Значение поля ""Подразделение"" не соответствует позиции штатного расписания указанной в документе.';uk='Значення поля ""Підрозділ"" не відповідає позиції штатного розкладу, що зазначена в документі.'");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка, ПутьКДаннымРеквизита, , Отказ);
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
				
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры	


#Область ПодготовкаДанныхДляПроведенияДокумента

Функция ДанныеДляПроведения(ДокументСсылка)
	
	ДанныеДляПроведения = Новый Структура; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.Ссылка.Организация КАК Организация,
		|	ПриемНаРаботу.ДатаПриема,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию,
		|	ПриемНаРаботу.Подразделение,
		|	ПриемНаРаботу.Территория,
		|	ПриемНаРаботу.Должность,
		|	ПриемНаРаботу.РазрядКатегория,
		|	ПриемНаРаботу.ПКУ,
		|	ПриемНаРаботу.КоличествоСтавок,
		|	ПриемНаРаботу.ГрафикРаботы,
		|	ПриемНаРаботу.СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ПриемНаРаботу.Ссылка.ВидДоговора КАК ВидДоговора,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора,
		|	ПриемНаРаботу.ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.ПорядокРасчетаСтоимостиЕдиницыВремени,
		|	ПриемНаРаботу.СовокупнаяТарифнаяСтавка,
		|	ПриемНаРаботу.ВидТарифнойСтавки,
		|	ПриемНаРаботу.ВидАктаГосоргана,
		|	ПриемНаРаботу.ПоступлениеНаСлужбуВпервые,
		|	ПриемНаРаботу.СпособПоступленияНаСлужбу,
		|	ПриемНаРаботу.СрочныйДоговор,
		|	ПриемНаРаботу.СрокЗаключенияДоговора,
		|	ПриемНаРаботу.ОснованиеСрочногоДоговора,
		|	ПриемНаРаботу.ОборудованиеРабочегоМеста,
		|	ПриемНаРаботу.ИныеУсловияДоговора,
		|	ПриемНаРаботу.Ссылка.Руководитель КАК Руководитель,
		|	ПриемНаРаботу.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ПриемНаРаботу.Ссылка.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	ПриемНаРаботу.КатегорияЕСВ,
		|	ПриемНаРаботу.ПринятНаНовоеРабочееМесто,
		|	ПриемНаРаботу.ДатаСозданияРабочегоМеста
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком.Сотрудники");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
		|	ПриемНаРаботу.ДействуетДо КАК ДействуетДо,
		|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	ПриемНаРаботу.Подразделение КАК Подразделение,
		|	ПриемНаРаботу.Должность КАК Должность,
		|	ПриемНаРаботу.КоличествоСтавок КАК КоличествоСтавок,
		|	ПриемНаРаботу.ГрафикРаботы КАК ГрафикРаботы,
		|	ПриемНаРаботу.СпособРасчетаАванса КАК СпособРасчетаАванса,
		|	ПриемНаРаботу.Аванс КАК Аванс,
		|	ПриемНаРаботу.ВидЗанятости,
		|	ПриемНаРаботу.Ссылка.ВидДоговора КАК ВидДоговора,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.ТрудовойДоговорНомер,
		|	ПриемНаРаботу.ТрудовойДоговорДата,
		|	ПриемНаРаботу.Ссылка.Руководитель КАК Руководитель,
		|	ПриемНаРаботу.Ссылка.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ПриемНаРаботу.ПринятНаНовоеРабочееМесто,
		|	ПриемНаРаботу.ДатаСозданияРабочегоМеста
		|ИЗ
		|	ВТСотрудники КАК ПриемНаРаботу";
	
	// Первый набор данных для проведения - таблица для формирования кадровых движений, истории графиков, авансов.
	КадровыеДвижения = Запрос.Выполнить().Выгрузить();
	КадровыеДвижения.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	КадровыеДвижения.ЗаполнитьЗначения(Перечисления.ВидыКадровыхСобытий.Прием, "ВидСобытия");
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Начисления.Начисление,
		|	Начисления.Размер,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация
		|ИЗ
		|	Документ.ПриемНаРаботу.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.ДатаПриема,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	Сотрудники.Сотрудник,
		|	Льготы.Льгота,
		|	Льготы.Размер,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация
		|ИЗ
		|	Документ.ПриемНаРаботу.Льготы КАК Льготы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Льготы.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Льготы.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Начисления.Ссылка = Сотрудники.Ссылка", "ПО Начисления.Ссылка = Сотрудники.Ссылка И Начисления.Сотрудник = Сотрудники.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Льготы.Ссылка = Сотрудники.Ссылка", "ПО Льготы.Ссылка = Сотрудники.Ссылка И Льготы.Сотрудник = Сотрудники.Сотрудник");
	КонецЕсли;
	
	// Второй набор данных для проведения - таблица для формирования плановых начислений.
	ПлановыеНачисления = Запрос.Выполнить().Выгрузить();
	ПлановыеНачисления.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ПлановыеНачисления.ЗаполнитьЗначения(Истина, "Используется");
	ПлановыеНачисления.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип));
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.Организация КАК Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Показатели.Показатель,
		|	МАКСИМУМ(Показатели.Значение) КАК Значение
		|ИЗ
		|	Документ.ПриемНаРаботу.Показатели КАК Показатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	Показатели.Ссылка = &Ссылка
		|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ДатаПриема,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	Показатели.Показатель";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.Сотрудник = Сотрудники.Сотрудник");
	КонецЕсли;
	
	// Третий набор данных для проведения - таблица для формирования значений показателей начислений.
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип));
	ДанныеДляПроведения.Вставить("ЗначенияПоказателейНачислений", ЗначенияПоказателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Сотрудник,
		|	ЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпуска.КоличествоДнейВГод
		|ИЗ
		|	Документ.ПриемНаРаботу.ЕжегодныеОтпуска КАК ЕжегодныеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка
		|ГДЕ
		|	ЕжегодныеОтпуска.Ссылка = &Ссылка";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу")  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО ЕжегодныеОтпуска.Ссылка = Сотрудники.Ссылка", "ПО ЕжегодныеОтпуска.Ссылка = ЕжегодныеОтпуска.Ссылка И ЕжегодныеОтпуска.Сотрудник = Сотрудники.Сотрудник");
	КонецЕсли;
	
	// Четвертый набор данных для проведения - таблица для формирования положенных видов ежегодных отпусков.
	ПоложенныеЕжегодныеОтпуска = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ЕжегодныеОтпуска", ПоложенныеЕжегодныеОтпуска);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Организация КАК Организация,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Показатели.Показатель КАК Показатель,
		|	ИСТИНА КАК Применение,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ПриемНаРаботу.Показатели КАК Показатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Показатели.Ссылка = Сотрудники.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу.Показатели КАК ПоказателиНачислений
		|		ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка
		|			И Показатели.Показатель = ПоказателиНачислений.Показатель
		|			И (ПоказателиНачислений.ИдентификаторСтрокиВидаРасчета <> 0)
		|ГДЕ
		|	Показатели.Ссылка = &Ссылка
		|	И Показатели.ИдентификаторСтрокиВидаРасчета = 0
		|	И Показатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
		|	И ПоказателиНачислений.Показатель ЕСТЬ NULL ";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ПриемНаРаботу", "Документ.ПриемНаРаботуСписком");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = Сотрудники.Ссылка", "ПО Показатели.Ссылка = Сотрудники.Ссылка И Показатели.Сотрудник = Сотрудники.Сотрудник");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка", "ПО Показатели.Ссылка = ПоказателиНачислений.Ссылка И Показатели.Сотрудник = ПоказателиНачислений.Сотрудник");
	КонецЕсли;
	
	// Пятый набор данных для проведения - таблица для формирования применения дополнительных показателей.
	ПрименениеДополнительныхПоказателей = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПрименениеДополнительныхПоказателей", ПрименениеДополнительныхПоказателей);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Шестой набор данных для проведения - таблица для формирования значений порядка пересчета тарифной ставки.
	ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА Сотрудники.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ Сотрудники.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Седьмой набор данных для проведения - таблица для формирования значений совокупной тарифной ставки.
	ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.РазрядКатегория КАК РазрядКатегория,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Восьмой набор данных для проведения - таблица для формирования значений разряда сотрудника.
	РазрядыКатегорииСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("РазрядыКатегорииСотрудников", РазрядыКатегорииСотрудников);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Девятый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Сотрудники.ТрудовойДоговорДата = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Сотрудники.ДатаПриема
		|		ИНАЧЕ Сотрудники.ТрудовойДоговорДата
		|	КОНЕЦ КАК Период,
		|	Сотрудники.ДатаПриема КАК ДатаНачала,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Организация КАК Организация,
		|	Сотрудники.ДатаЗавершенияТрудовогоДоговора КАК ДатаОкончания,
		|	Сотрудники.ТрудовойДоговорНомер КАК НомерДоговораКонтракта,
		|	Сотрудники.ТрудовойДоговорДата КАК ДатаДоговораКонтракта,
		|	Сотрудники.Руководитель КАК ПредставительНанимателя,
		|	Сотрудники.ДолжностьРуководителя КАК ДолжностьПредставителяНанимателя,
		|	Сотрудники.ОснованиеПредставителяНанимателя КАК ОснованиеПредставителяНанимателя,
		|	Сотрудники.ВидАктаГосоргана,
		|	Сотрудники.ПоступлениеНаСлужбуВпервые,
		|	Сотрудники.СпособПоступленияНаСлужбу,
		|	Сотрудники.СрочныйДоговор,
		|	Сотрудники.СрокЗаключенияДоговора,
		|	Сотрудники.ОснованиеСрочногоДоговора,
		|	Сотрудники.ОборудованиеРабочегоМеста,
		|	Сотрудники.ИныеУсловияДоговора
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Десятый набор данных для проведения - таблица для формирования описаний договоров сотрудников.
	СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СведенияОКонтрактахДоговорах", СведенияОКонтрактахДоговорах);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа) КАК Состояние,
		|	Сотрудники.ДатаПриема КАК Начало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Данные состояний
	ДанныеСостояний = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеСостояний", ДанныеСостояний);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК Период,
		|	Сотрудники.Сотрудник,
		|	ВЫРАЗИТЬ(Сотрудники.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.Территория
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	// Набор сведений для проведения по территориям сотрудников
	СведенияОКонтрактахДоговорах = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ТерриторииСотрудников", СведенияОКонтрактахДоговорах);
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.КатегорияЕСВ
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.КатегорияЕСВ <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)";
	
	// Данные ЕСВ
	ДанныеОЕСВСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ДанныеОЕСВСотрудников", ДанныеОЕСВСотрудников);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.ПриемНаРаботу") Тогда
			ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияСписочногоКадровогоПриказа(ДокументСсылка, "ПриемНаРаботуСписком", "ДатаПриема");
		Иначе
			ДанныеГрейдовСотрудников = Модуль.ДанныеДляПроведенияГрейдыСотрудников(ДокументСсылка, "ДатаПриема");
		КонецЕсли;
		
		ДанныеДляПроведения.Вставить("ДанныеГрейдовСотрудников", ДанныеГрейдовСотрудников);
		
	КонецЕсли;
	
	// Данные для Реестра кадровых приказов
	ДанныеРеестраКадровыхПриказов = КадровыйУчетРасширенный.ТаблицаРеестраКадровыхПриказов();
	НомерПриказа = "";
	ДатаПриказа = Дата(1, 1, 1);
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ФизическоеЛицо,
		|	ПриемНаРаботу.Ссылка КАК ДокументОснование,
		|	ПриемНаРаботу.Номер КАК НомерПриказа,
		|	ПриемНаРаботу.Дата КАК ДатаПриказа,
		|	ПриемНаРаботу.Подразделение,
		|	ПриемНаРаботу.Должность,
		|	ПриемНаРаботу.ВидДоговора,
		|	ПриемНаРаботу.ДатаПриема КАК Дата,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
		|	ПриемНаРаботу.РазрядКатегория КАК Разряд,
		|	ПриемНаРаботу.Показатели.(
		|		Ссылка,
		|		НомерСтроки,
		|		ИдентификаторСтрокиВидаРасчета,
		|		Показатель,
		|		Значение
		|	),
		|	ПриемНаРаботу.Начисления.(
		|		Ссылка,
		|		НомерСтроки,
		|		Начисление,
		|		ИдентификаторСтрокиВидаРасчета,
		|		Размер
		|	)
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Номер = 1;
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Номер = Номер;
					
			НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(Выборка.Начисления.Выгрузить(), Выборка.Показатели.Выгрузить());			
			
			НомерПриказа = Выборка.НомерПриказа;
			ДатаПриказа = Выборка.ДатаПриказа;
						
		КонецЦикла;      
		
	Иначе
		
		Запрос.Текст = 
        "ВЫБРАТЬ
        |	ПриемНаРаботу.Ссылка КАК Регистратор,
        |	ПриемНаРаботу.Сотрудник,
        |	ПриемНаРаботу.ФизическоеЛицо,
        |	ПриемНаРаботу.Ссылка КАК ДокументОснование,
        |	ПриемНаРаботу.Подразделение,
        |	ПриемНаРаботу.Должность,
        |	ПриемНаРаботу.ДатаПриема КАК Дата,
        |	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
        |	ПриемНаРаботу.РазрядКатегория КАК Разряд,
        |	ПриемНаРаботу.Ссылка.Номер КАК НомерПриказа,
        |	ПриемНаРаботу.Ссылка.Дата КАК ДатаПриказа,
        |	ПриемНаРаботу.Ссылка.ВидДоговора КАК ВидДоговора,
        |	ПриемНаРаботу.НомерСтроки КАК Номер
        |ИЗ
        |	Документ.ПриемНаРаботуСписком.Сотрудники КАК ПриемНаРаботу
        |ГДЕ
        |	ПриемНаРаботу.Ссылка = &Ссылка
        |
        |УПОРЯДОЧИТЬ ПО
        |	Регистратор
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ПриемНаРаботуСпискомНачисления.Ссылка КАК Регистратор,
        |	ПриемНаРаботуСпискомНачисления.НомерСтроки,
        |	ПриемНаРаботуСпискомНачисления.Сотрудник КАК Сотрудник,
        |	ПриемНаРаботуСпискомНачисления.Начисление,
        |	ПриемНаРаботуСпискомНачисления.ИдентификаторСтрокиВидаРасчета,
        |	ПриемНаРаботуСпискомНачисления.Размер
        |ИЗ
        |	Документ.ПриемНаРаботуСписком.Начисления КАК ПриемНаРаботуСпискомНачисления
        |ГДЕ
        |	ПриемНаРаботуСпискомНачисления.Ссылка = &Ссылка
        |
        |УПОРЯДОЧИТЬ ПО
        |	Регистратор,
        |	Сотрудник
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ПриемНаРаботуСпискомПоказатели.Ссылка КАК Регистратор,
        |	ПриемНаРаботуСпискомПоказатели.НомерСтроки,
        |	ПриемНаРаботуСпискомПоказатели.Сотрудник КАК Сотрудник,
        |	ПриемНаРаботуСпискомПоказатели.ИдентификаторСтрокиВидаРасчета,
        |	ПриемНаРаботуСпискомПоказатели.Показатель,
        |	ПриемНаРаботуСпискомПоказатели.Значение
        |ИЗ
        |	Документ.ПриемНаРаботуСписком.Показатели КАК ПриемНаРаботуСпискомПоказатели
        |ГДЕ
        |	ПриемНаРаботуСпискомПоказатели.Ссылка = &Ссылка
        |
        |УПОРЯДОЧИТЬ ПО
        |	Регистратор,
        |	Сотрудник";
		
		Результат = Запрос.ВыполнитьПакет();
		
		Начисления = Результат[1].Выгрузить();
		Показатели = Результат[2].Выгрузить();
		
		Выборка = Результат[0].Выбрать();
		
		Отбор = Новый Структура("Регистратор, Сотрудник");
		
		Пока Выборка.Следующий() Цикл
						
			НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						
			Отбор.Регистратор = Выборка.Регистратор;
			Отбор.Сотрудник = Выборка.Сотрудник;
			
			СтрокиНачислений  = Начисления.Скопировать(Отбор);
			СтрокиПоказателей = Показатели.Скопировать(Отбор);
			
			НоваяСтрока.ТарифнаяСтавкаНадбавка = КадровыйУчетРасширенный.ПредставлениеТарифнойСтавкиНадбавки(СтрокиНачислений, СтрокиПоказателей);
			
			НомерПриказа = Выборка.НомерПриказа;
			ДатаПриказа = Выборка.ДатаПриказа;

		КонецЦикла;
		    		
	КонецЕсли;	
			
	Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(ДатаПриказа, НомерПриказа);	

	ДанныеРеестраКадровыхПриказов.ЗаполнитьЗначения(Основание, "Основание");
	
	ДанныеДляПроведения.Вставить("ДанныеРеестраКадровыхПриказов", ДанныеРеестраКадровыхПриказов);
	
	// Данные для формирования значений ПКУ сотрудника.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.ДатаПриема КАК ДатаСобытия,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ПКУ КАК ПКУ,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	ВТСотрудники КАК Сотрудники";
	
	ПКУСотрудников = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("ПКУСотрудников", ПКУСотрудников);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийМодуляДокумента

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , , Истина);
	
	// Проведение документа
	ТолькоБронированиеПозиции = ДокументОбъект.БронированиеПозиции И ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций");
	ДокументОбъект.ДополнительныеСвойства.Вставить("ТолькоБронированиеПозиции", ТолькоБронированиеПозиции);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ДокументОбъект, Отказ, РежимПроведения);
	ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияРегистраОстатков(
		ДокументОбъект.Движения.ЗанятыеПозицииШтатногоРасписания, ДокументОбъект.ИсправленныйДокумент);
	
	ДанныеДляПроведения = ДанныеДляПроведения(ДокументОбъект.Ссылка);
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(
		ДокументОбъект.Движения, ДанныеДляПроведения.СотрудникиДаты, ДокументОбъект.Ссылка);
	
	КадровыйУчет.СформироватьКадровыеДвижения(ДокументОбъект, ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
	
	// Если производится операция бронирования позиции штатного расписания, то никаких действий больше не производится.
	Если ТолькоБронированиеПозиции Тогда
		Возврат;
	КонецЕсли; 
	
	КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
	РазрядыКатегорииДолжностей.СформироватьДвиженияРазрядовКатегорийСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.РазрядыКатегорииСотрудников);
	РазрядыКатегорииДолжностей.СформироватьДвиженияПКУСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ПКУСотрудников);
	
	Если ДокументОбъект.НачисленияУтверждены Тогда
		
		СтруктураПлановыхНачислений = Новый Структура;
		СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
		СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателейНачислений);
		СтруктураПлановыхНачислений.Вставить("ПрименениеДополнительныхПоказателей", ДанныеДляПроведения.ПрименениеДополнительныхПоказателей);
		
		РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ДокументОбъект, ДокументОбъект.Движения, СтруктураПлановыхНачислений);
		РасчетЗарплаты.СформироватьДвиженияПлановыхВыплат(ДокументОбъект.Движения, ДанныеДляПроведения.КадровыеДвижения);
		РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(ДокументОбъект.Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
		РасчетЗарплатыРасширенный.СформироватьДвиженияЗначенийСовокупныхТарифныхСтавок(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеСовокупныхТарифныхСтавок);
		
	КонецЕсли;
	
	ОстаткиОтпусков.СформироватьДвиженияПоложенныхЕжегодныхОтпусков(ДокументОбъект.Ссылка, ДокументОбъект.Движения, ДанныеДляПроведения.ЕжегодныеОтпуска);
	
	СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(ДокументОбъект.Движения, ДокументОбъект.Ссылка, ДанныеДляПроведения.ДанныеСостояний);

	КонтрактыДоговорыСотрудников.СформироватьДвиженияОсновныхДанныхИСведенийОКонтрактахДоговорах(ДокументОбъект.Движения, ДанныеДляПроведения.СведенияОКонтрактахДоговорах);
	
	
	КадровыйУчетРасширенный.СформироватьДвиженияПоТерриториям(ДокументОбъект.Движения, ДанныеДляПроведения.ТерриторииСотрудников, ДокументОбъект.Организация);
	
	СтруктураЕСВСотрудников = Новый Структура;
	СтруктураЕСВСотрудников.Вставить("ДанныеОЕСВСотрудников", ДанныеДляПроведения.ДанныеОЕСВСотрудников);
	УчетСтраховыхВзносов.СформироватьДвиженияКатегорииЕСВ(ДокументОбъект, ДокументОбъект.Движения, СтруктураЕСВСотрудников);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("Грейды");
		Модуль.СформироватьДвиженияГрейдовСотрудников(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеГрейдовСотрудников);
	КонецЕсли;
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(ДокументОбъект.Движения, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация, , Истина);
	КонецЕсли; 
	
	КадровыйУчетРасширенный.ЗарегистрироватьВРеестреКадровыхПриказов(ДокументОбъект.Движения, ДанныеДляПроведения.ДанныеРеестраКадровыхПриказов, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверкаСтрокиСписочногоДокумента = ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаСтрокиСписочногоДокумента");
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		ЭтоСписочныйДокумент = Ложь;
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Сотрудник);
		ПроверяемыеСтруктуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
	Иначе
		ЭтоСписочныйДокумент = Истина;
		Сотрудники = ДокументОбъект.Сотрудники.ВыгрузитьКолонку("Сотрудник");
		ПроверяемыеСтруктуры = ДокументОбъект.Сотрудники;
	КонецЕсли;
	
	Для каждого ПроверяемаяСтруктура Из ПроверяемыеСтруктуры Цикл
		
		Если ПроверяемаяСтруктура.ДатаПриема > ПроверяемаяСтруктура.ДатаЗавершенияТрудовогоДоговора
			И ЗначениеЗаполнено(ПроверяемаяСтруктура.ДатаЗавершенияТрудовогоДоговора) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата завершения трудового договора не может быть меньше даты приема';uk='Дата завершення трудового договору не може бути менша дати прийому'"), ДокументОбъект, "ДатаЗавершенияТрудовогоДоговора", ,Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьСоответствиеПозицииШРПодразделению(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);
	
	// Если производится операция бронирования позиции штатного расписания, то никаких действий больше не производится.
	ТолькоБронированиеПозиции = ДокументОбъект.БронированиеПозиции И ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПозиций");
	Если ТолькоБронированиеПозиции Тогда
		Возврат;
	КонецЕсли; 
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
	
	ПараметрыФО = Новый Структура("Организация", ДокументОбъект.Организация);
	ПроверяемыйРеквизитЕжегодныеОтпуска = ПроверяемыеРеквизиты.Найти("ЕжегодныеОтпуска");
	Если ПроверяемыйРеквизитЕжегодныеОтпуска <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыйРеквизитЕжегодныеОтпуска);
	КонецЕсли;
	
	// проверка КоличествоДнейВГод
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Для каждого Отпуск Из ДокументОбъект.ЕжегодныеОтпуска Цикл
		Если НЕ ЗначениеЗаполнено(Отпуск.КоличествоДнейВГод) И НЕ ОстаткиОтпусков.ЭтоСтажевыйОтпуск(Отпуск.ВидЕжегодногоОтпуска) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не заполнено количество дней в год для отпуска %1';uk='Не заповнено кількість днів на рік для відпустки %1'"), Отпуск.ВидЕжегодногоОтпуска);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, "", ,Отказ);
		КонецЕсли;
	КонецЦикла;
	МассивНепроверяемыхРеквизитов.Добавить("ЕжегодныеОтпуска.КоличествоДнейВГод");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Регистратор,
			|	КадроваяИсторияСотрудников.Период,
			|	КадроваяИсторияСотрудников.Сотрудник
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Регистратор <> &Регистратор
			|	И КадроваяИсторияСотрудников.Регистратор <> &ИсправленныйДокумент
			|	И КадроваяИсторияСотрудников.Сотрудник В (&Сотрудники)
			|	И (КадроваяИсторияСотрудников.Регистратор ССЫЛКА Документ.ПриемНаРаботу
			|			ИЛИ КадроваяИсторияСотрудников.Регистратор ССЫЛКА Документ.ПриемНаРаботуСписком)";
		
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("ИсправленныйДокумент", ДокументОбъект.ИсправленныйДокумент);
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1, оформлен на работу %2 (%3)';uk='Співробітник %1, оформлений на роботу %2 (%3)'"),
				Выборка.Сотрудник,
				Формат(Выборка.Период, "ДЛФ=DD"),
				Выборка.Регистратор);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщенияПользователю,
				Выборка.Регистратор,
				,
				,
				Отказ);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		СообщениеОКонфликтах = СотрудникиФормыРасширенный.СообщениеОКонфликтахВидовЗанятостиСотрудников(
			ПроверяемыеСтруктуры, ДокументОбъект.Организация);
		
		Для каждого КонфликтыСотрудника Из СообщениеОКонфликтах Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КонфликтыСотрудника.Значение, , "ВидЗанятости", "Объект", Отказ);
		КонецЦикла;
		
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		
		Если ЭтоСписочныйДокумент Тогда
			ИмяРеквизитаРабочееМесто = "Сотрудник";
			ДатаПроверки = ДокументОбъект.Дата;
		Иначе
			ИмяРеквизитаРабочееМесто = "";
			ДатаПроверки = ДокументОбъект.ДатаПриема;
		КонецЕсли;
		
		КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(
			ДокументОбъект, ДатаПроверки, "Начисления", "Показатели", Отказ, , ИмяРеквизитаРабочееМесто);
		
		КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(
			ДокументОбъект, ДатаПроверки, "Льготы", "Показатели", Отказ, , ИмяРеквизитаРабочееМесто, "Льгота");
		
		Если Не ЭтоСписочныйДокумент Тогда
			ДокументыДляИсключения = Новый Массив;
			ДокументыДляИсключения.Добавить(ДокументОбъект.Ссылка);
			ДокументыДляИсключения.Добавить(ДокументОбъект.ИсправленныйДокумент);
			ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(ДокументОбъект.Ссылка, ДокументОбъект.ДатаПриема);
			КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчету(ВремяРегистрации, ДокументОбъект.Сотрудник, ДокументыДляИсключения, Отказ);
		КонецЕсли; 
		
		Если ЭтоСписочныйДокумент Тогда
			КадровыйУчетРасширенный.ПроверитьСоответствиеСотрудниковТабличнойЧастиОрганизации(ДокументОбъект.Организация, ПроверяемыеСтруктуры, Отказ);
		Иначе
			КадровыйУчет.ПроверитьСоответствиеСотрудниковОрганизации(ДокументОбъект.Организация, ДокументОбъект.Сотрудник, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ДокументОбъект, Отказ);
	КонецЕсли;
	
	Если ДокументОбъект.НачисленияУтверждены Тогда 
		
		Если ЭтоСписочныйДокумент Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.СовокупнаяТарифнаяСтавка");
		Иначе
			
			РасчетЗарплатыРасширенный.ПроверитьМножественностьОплатыВремениРаботникВШапке(
				ДокументОбъект.ДатаПриема, ДокументОбъект.Сотрудник, ДокументОбъект.Начисления, ДокументОбъект.Ссылка, Отказ, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить, ДокументОбъект.ИсправленныйДокумент);
			РасчетЗарплатыРасширенный.ПроверитьУникальностьЗапрашиванияПоказателяСотрудникВШапке(
				ДокументОбъект.Начисления.Выгрузить(), ДокументОбъект.Показатели.Выгрузить(), ДокументОбъект.Сотрудник, ДокументОбъект.ДатаПриема, ДокументОбъект.Ссылка, Отказ);
			ПараметрыОтображенияПолейТарифнойСтавки = ЗарплатаКадрыРасширенный.ПараметрыОтображенияТарифнойСтавкиСотрудникВШапке(
				ДокументОбъект.Сотрудник, ДокументОбъект.Начисления, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить);
			Если Не ПараметрыОтображенияПолейТарифнойСтавки.НесколькоТарифныхСтавок Тогда 
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СовокупнаяТарифнаяСтавка");
			КонецЕсли;
			ЗарплатаКадрыРасширенный.ПроверитьЗаполнениеВидаТарифнойСтавки(ДокументОбъект, Отказ);
			
		КонецЕсли;
		
	Иначе 
		
		Если ЭтоСписочныйДокумент Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.СовокупнаяТарифнаяСтавка");
		Иначе
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СовокупнаяТарифнаяСтавка");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПроверкаЗаполненияДокументаПриемНаРаботу(ДокументОбъект, Отказ, ПроверяемыеРеквизиты);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидДоговора");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
