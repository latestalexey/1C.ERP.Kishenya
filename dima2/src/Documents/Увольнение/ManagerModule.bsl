#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проводит документ по учетам. Если в параметре ВидыУчетов передано Неопределено, то документ проводится по всем учетам.
// Процедура вызывается из обработки проведения и может вызываться из вне.
// 
// Параметры:
//  ДокументСсылка	- ДокументСсылка.увольнение - Ссылка на документ
//  РежимПроведения - РежимПроведенияДокумента - Режим проведения документа (оперативный, неоперативный)
//  Отказ 			- Булево - Признак отказа от выполнения проведения
//  ВидыУчетов 		- Строка - Список видов учета, по которым необходимо провести документ. Если параметр пустой или Неопределено, то документ проведется по всем учетам
//  Движения 		- Коллекция движений документа - Передается только при вызове из обработки проведения документа
//  Объект			- ДокументОбъект.Увольнение - Передается только при вызове из обработки проведения документа
//  ДополнительныеПараметры - Структура - Дополнительные параметры, необходимые для проведения документа
//
Процедура ПровестиПоУчетам(ДокументСсылка, РежимПроведения, Отказ, ВидыУчетов = Неопределено, Движения = Неопределено, Объект = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
	ПроведениеПоВсемУчетам = Ложь;
	МассивРегистров = Новый Массив;
	ПроведениеРасширенныйСервер.ПодготовитьНаборыЗаписейКРегистрацииДвиженийПоВидамУчета(ДокументСсылка, СтруктураВидовУчета, ВидыУчетов, Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
	Если Объект <> Неопределено И ВидыУчетов = Неопределено Тогда
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);
		ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(Объект, Отказ, РежимПроведения);
	КонецЕсли;  
	
	РеквизитыДляПроведения = РеквизитыДляПроведения(ДокументСсылка);

	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		// Подготовка к регистрации перерасчетов
		ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Ссылка);
		ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(РеквизитыДляПроведения.Ссылка, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияРегистраОстатков(
			Движения.ЗанятыеПозицииШтатногоРасписания, РеквизитыДляПроведения.ИсправленныйДокумент);
		
		// Сбор сведений об увольняемых сотрудниках
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТКадровыеДанныеУвольняемыхСотрудников(МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
		
		// Кадровый учет
		КадровыеСобытия = КадровыеСобытияУвольнениеПоВременнойТаблице(МенеджерВременныхТаблиц);
		КадровыйУчет.СформироватьКадровыеДвижения(РеквизитыДляПроведения.Ссылка, Движения, КадровыеСобытия);
		
		Если Движения.КадроваяИсторияСотрудников.Записывать Тогда
			Движения.КадроваяИсторияСотрудников.Записать();
			Движения.КадроваяИсторияСотрудников.Записывать = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитыДляПроведения.ДокументРассчитан Тогда 
		
		ДанныеДляПроведения = ДанныеДляПроведения(
			РеквизитыДляПроведения.Ссылка, МенеджерВременныхТаблиц, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.Организация, СтруктураВидовУчета);
			
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

			// Прекращаем плановые начисления
			РасчетЗарплатыРасширенный.ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(
				Движения, ДанныеДляПроведения.ДанныеДляРегистрацииПрекращенияПлановыхНачислений);
			
		    // Прекращаем плановые удержания
			РасчетЗарплатыРасширенный.ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(
				Движения, ДанныеДляПроведения.ДанныеДляРегистрацииПрекращенияПлановыхУдержаний);
				
			// Прекращаем взносы ЕСВ
			УчетСтраховыхВзносовРасширенный.ПрекратитьВсеПлановыеВзносыПоТаблицеСотрудников(
				Движения, ДанныеДляПроведения.ДанныеДляРегистрацииПрекращенияВзносов);	
				
			// Учет зарплаты
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
				Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
				
			РасчетЗарплатыРасширенный.СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(
				Движения, Отказ, РеквизитыДляПроведения.Ссылка, РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияУдержаний(
				Движения, Отказ, РеквизитыДляПроведения.Организация, КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации), ДанныеДляПроведения.Удержания, ДанныеДляПроведения.ПоказателиУдержаний);
			
			ИсполнительныеЛисты.СформироватьУдержанияПоИсполнительнымДокументам(
				Движения, ДанныеДляПроведения.УдержанияПоИсполнительнымДокументам);
			
			// НДФЛ
			ДатаОперацииПоНалогам = УчетНДФЛРасширенный.ДатаОперацииПоДокументу(РеквизитыДляПроведения.Дата, РеквизитыДляПроведения.ПериодРегистрации);
			
			ДатыПолученияДоходовПоОплатеТруда = Новый Соответствие;
			Для каждого СобытияУвольнения  Из КадровыеСобытия Цикл
				
				ДатаУвольнения = НачалоДня(НачалоДня(СобытияУвольнения.ДатаСобытия) - 1);
				Если НачалоМесяца(РеквизитыДляПроведения.ПериодРегистрации) = НачалоМесяца(ДатаУвольнения) Тогда
					ДатаПолученияДоходаПоОплатеТруда = ДатаУвольнения;
				Иначе
					ДатаПолученияДоходаПоОплатеТруда = КонецМесяца(РеквизитыДляПроведения.ПериодРегистрации);
				КонецЕсли;
				ДатыПолученияДоходовПоОплатеТруда.Вставить(СобытияУвольнения.Сотрудник, ДатаПолученияДоходаПоОплатеТруда);
				
			КонецЦикла;
			
			ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(РеквизитыДляПроведения.Ссылка, Движения, ДанныеДляПроведения, ДатаОперацииПоНалогам, ДатыПолученияДоходовПоОплатеТруда, Отказ);
			
			// - Регистрация начислений и удержаний в учете начислений и удержаний.
			УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияПоСотрудникам,
				ДанныеДляПроведения.УдержанияПоСотрудникам,	Неопределено, Неопределено, РеквизитыДляПроведения.ПорядокВыплаты);
			
			// - Регистрация отработанного времени в учете начислений и удержаний.
			УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
			
			// - Регистрация начислений и удержаний.
			ОтражениеЗарплатыВБухучетеРасширенный.СформироватьДвиженияБухучетНачисленияУдержанияПоСотрудникам(
						Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации,
						ДанныеДляПроведения.НачисленияПоСотрудникам,
						ДанныеДляПроведения.УдержанияПоСотрудникам,
						ДанныеДляПроведения.НДФЛПоСотрудникам,
						РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(РеквизитыДляПроведения.ПорядокВыплаты));
			
			// - Регистрация начислений в доходах для страховых взносов.
			УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.МенеджерВременныхТаблиц, Ложь, Истина, РеквизитыДляПроведения.Ссылка);
			
			УчетСтраховыхВзносов.СформироватьИсчисленныеВзносы(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.СтраховыеВзносы);
				
			УчетСтраховыхВзносов.СформироватьСтраховыеВзносыПоФизическимЛицам(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.СтраховыеВзносы);
			
			// Займы
			// - взаиморасчеты по займам
			ЗаймыСотрудникам.ЗарегистрироватьВзаиморасчетыПоЗаймам(
				Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ);
			
			// - Регистрация займов в учете заработной платы.
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьПогашениеЗаймов(
				Движения, Отказ, РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.УдержанияЗаймов, РеквизитыДляПроведения.ПорядокВыплаты);
			
				
			ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
			ПараметрыДвиженийОтпусков.ДатаРегистрации = РеквизитыДляПроведения.Дата;
			ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.Начисления;
			ПараметрыДвиженийОтпусков.РабочиеПериоды = ДанныеДляПроведения.РабочиеПериодыКомпенсацийОтпусков;
			ПараметрыДвиженийОтпусков.Основания = ДанныеДляПроведения.ОснованияКомпенсацийОтпусков;
			ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
			ПараметрыДвиженийОтпусков.ДатыНачалаКомпенсаций = ДанныеДляПроведения.ДатыНачалаКомпенсаций;
			ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусков(Движения, Отказ, ПараметрыДвиженийОтпусков);
			
			ПараметрыДвиженийОтпусков = ОстаткиОтпусков.ПараметрыДляСформироватьДвиженияФактическихОтпусков();
			ПараметрыДвиженийОтпусков.Начисления = ДанныеДляПроведения.УдержанияОтпусков;
			ПараметрыДвиженийОтпусков.РабочиеПериоды = ДанныеДляПроведения.РабочиеПериодыУдержанийОтпусков;
			ПараметрыДвиженийОтпусков.Основания = ДанныеДляПроведения.ОснованияУдержанийОтпусков;
			ПараметрыДвиженийОтпусков.ПериодНачисления = РеквизитыДляПроведения.ПериодРегистрации;
			ОстаткиОтпусков.СформироватьДвиженияФактическихОтпусковПоУдержаниям(Движения, ПараметрыДвиженийОтпусков);
				
			КадровыйУчетРасширенный.ЗарегистрироватьВРеестреОтпусков(Движения, ДанныеДляПроведения.ДанныеРеестраОтпусков, Отказ);
					
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") 
				И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
				Модуль.ПрекратитьПодработкиСотрудников(РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.ДанныеДляРегистрацииПрекращенияПодработок);
			КонецЕсли;
			
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
				
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
				Модуль.ЗарегистрироватьНачисленияДляРасчетаСохраняемогоДенежногоСодержания(
					Движения, Отказ, РеквизитыДляПроведения.ПериодРегистрации, ДанныеДляПроведения.НачисленияДляРегистрацииДенежногоСодержания);
					
				Модуль.ЗарегистрироватьКорректировкиДляРасчетаСохраняемогоДенежногоСодержанияСотрудников(ДанныеДляПроведения.КорректировкиДляРегистрацииДенежногоСодержания);
				
			КонецЕсли;
			
			КадровыйУчетРасширенный.ЗарегистрироватьВРеестреКадровыхПриказов(Движения, ДанныеДляПроведения.ДанныеРеестраКадровыхПриказов, Отказ);
			
		КонецЕсли;
		
		Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
			
			// Учет среднего заработка
			УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(
				Движения, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка);
				
		КонецЕсли;

	Иначе
		
		ДанныеДляПроведения = Новый Структура;
		
		Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

			ДобавитьДанныеДляРегистрацииСостоянийСотрудников(ДанныеДляПроведения, РеквизитыДляПроведения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда
	
		СостоянияСотрудников.ЗарегистрироватьСостоянияСотрудников(
			Движения, РеквизитыДляПроведения.Ссылка, ДанныеДляПроведения.ДанныеДляРегистрацииСостоянийСотрудников);
			
			
		// Записываем показатели суммированного учета (в случае необходимости).
		ЗаписатьЗначенияПоказателейРасчетаЗарплаты(Движения, ДанныеДляПоказателейСверхурочных(РеквизитыДляПроведения.Ссылка));
			
		// Регистрация перерасчетов
		Если ЕстьПерерасчеты Тогда
			ПерерасчетЗарплаты.РегистрацияПерерасчетов(
				Движения, ДанныеДляРегистрацииПерерасчетов, РеквизитыДляПроведения.Организация);
		КонецЕсли; 
		
		УчетСреднегоЗаработка.УдалитьПричиныПерерасчетов(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
			Модуль.СформироватьДвиженияИсторииКадровогоРезерва(Движения, ДанныеДляПроведения, "ДанныеКадровогоРезерва");
		КонецЕсли;
		
		ПерерасчетЗарплаты.УдалениеПерерасчетовПоДополнительнымПараметрам(РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
	ПроведениеРасширенныйСервер.ЗаписьДвиженийПоУчетам(Движения, ПроведениеПоВсемУчетам, МассивРегистров);
	
КонецПроцедуры

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Приказ об увольнении
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказов";
	КомандаПечати.Идентификатор = "ПФ_MXL_UK_П4";
	КомандаПечати.Представление = НСтр("ru='Приказ об увольнении (П-4)';uk='Наказ про звільнення (П-4)'");
	КомандаПечати.Порядок = 10;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		// Записка-расчет при увольнении.
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьКадровыхПриказовРасширенная";
		КомандаПечати.Идентификатор = "ПФ_MXL_РасчетПриУвольнении";
		КомандаПечати.Представление = НСтр("ru='Записка-расчет при увольнении';uk='Записка-розрахунок при звільненні'");
		КомандаПечати.Порядок = 20;
		КомандаПечати.ФункциональныеОпции = "РаботаВХозрасчетнойОрганизации";
		КомандаПечати.ДополнительныеПараметры.Вставить("ТребуетсяЧтениеБезОграничений", Истина);
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;
	
	// Расчет среднего заработка
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработка(КомандыПечати, "Документ.Увольнение");
	УчетСреднегоЗаработка.ДобавитьКомандуПечатиРасчетаСреднегоЗаработкаВыходногоПособия(КомандыПечати, "Документ.Увольнение");
	
	
	// Подробный расчет начислений.
	РасчетЗарплатыРасширенный.ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати);

КонецПроцедуры

Функция ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры) Экспорт
	
	Если КадровыйУчетРасширенный.ПравоИнтерактивногоСозданияКадровыхПриказовСотрудника() Тогда
		
		ЗарплатаКадрыРасширенный.ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(
			КомандыСозданияДокументов, Метаданные.Документы.Увольнение);
		
	КонецЕсли; 
	
КонецФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст
//                           ошибки).
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя
//                           области в которой был выведен объект).
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработка", Истина, ПараметрыВывода);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм, 
				"РасчетСреднегоЗаработка", 
				НСтр("ru='Расчет среднего заработка';uk='Розрахунок середнього заробітку'"), 
				ТабличныйДокумент,
				,
				,
				,
				Истина	// ЭтоМногоязычнаяПечатнаяФорма
			);
		КонецЕсли;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РасчетСреднегоЗаработкаВыходногоПособия") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		ДанныеДокументов = ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов, "РасчетСреднегоЗаработкаВыходногоПособия");
		ТабличныйДокумент = Обработки.ПечатьРасчетаСреднегоЗаработка.ТабличныйДокументРасчетаСреднегоЗаработка(ДанныеДокументов, ОбъектыПечати, "РасчетСреднегоЗаработкаВыходногоПособия", Истина, ПараметрыВывода);
		Если НЕ ТабличныйДокумент = Неопределено Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм, 
				"РасчетСреднегоЗаработкаВыходногоПособия", 
				НСтр("ru='Расчет среднего заработка (для выходного пособия)';uk='Розрахунок середнього заробітку (для вихідної допомоги)'"), 
				ТабличныйДокумент,
				,
				,
				,
				Истина	// ЭтоМногоязычнаяПечатнаяФорма
			);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ПечатьРасчетаСреднегоЗаработка

// Заполняет таблицу значений - параметры формирования печатной формы расчета среднего заработка.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//
Функция ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивСсылок, ИмяМакета = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаУвольнения КАК ДатаНачалаСобытия,
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Организация,
	|	Документ.Дата КАК ДатаДокумента,
	|	Документ.Номер КАК НомерДокумента,
	|	Документ.ДатаУвольнения КАК ДатаНачалаОтсутствия,
	|	Документ.ДатаУвольнения КАК ДатаОкончания,
	|	Документ.ПериодРасчетаСреднегоЗаработкаНачало КАК НачалоРасчетногоПериода,
	|	Документ.ПериодРасчетаСреднегоЗаработкаОкончание КАК ОкончаниеРасчетногоПериода,
	|	Документ.ВидРасчетаКомпенсацииУдержанияОтпуска КАК Начисление,
	|	Документ.СуммированныйУчет,
	|	Документ.ВидУчетаВремениДляСредней,
	|	ЕСТЬNULL(КраткосрочныеТрудовыеДоговорыСотрудников.КраткосрочныйТрудовойДоговор, ЛОЖЬ) КАК КраткосрочныйТрудовойДоговор,
	|	ВТКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТКадровыеДанныеСотрудников.ФИОПолные КАК ФИОПолные,
	|	ВТКадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	ВТКадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ВТКадровыеДанныеСотрудников.Должность КАК Должность,
	|	ВТКадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.НаименованиеПолное КАК ПолноеНаименованиеОрганизации,
	|	Документ.Ответственный
	|ИЗ
	|	Документ.Увольнение КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|		ПО Документ.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И Документ.ДатаУвольнения = ВТКадровыеДанныеСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКраткосрочныеТрудовыеДоговорыСотрудников КАК КраткосрочныеТрудовыеДоговорыСотрудников
	|		ПО Документ.Сотрудник = КраткосрочныеТрудовыеДоговорыСотрудников.Сотрудник
	|			И Документ.ДатаУвольнения = КраткосрочныеТрудовыеДоговорыСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Документ.Организация = Организации.Ссылка
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	ДанныеДокументов = Новый Массив;
	
	Если Результат.Пустой() Тогда
		Возврат ДанныеДокументов;
	КонецЕсли;
		
	ТаблицыДанныхОСреднем = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработке("Увольнение", МассивСсылок);
	ТаблицыДанныхОСреднемДляВыходногоПособия = УчетСреднегоЗаработка.ТаблицыДанныхОСреднемЗаработкеДляВыходногоПособия("Увольнение", МассивСсылок);
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Если ИмяМакета = "РасчетСреднегоЗаработкаВыходногоПособия" Тогда
			СпособРасчета = Неопределено;
			ИспользоватьСреднеЧасовойЗаработок = Выборка.СуммированныйУчет;
		Иначе
			ИспользоватьСреднеЧасовойЗаработок = Ложь;
			Если Выборка.КраткосрочныйТрудовойДоговор Тогда
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке;
			Иначе 	
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням;
			КонецЕсли;
		КонецЕсли;
			
		ДанныеДокумента = Обработки.ПечатьРасчетаСреднегоЗаработка.ПустаяСтруктураДанныхДляПечатиСреднегоЗаработка(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.РеквизитыДокумента, Выборка);
		ЗаполнитьЗначенияСвойств(ДанныеДокумента.КадровыеДанныеСотрудника, Выборка);
		
		Если ИмяМакета = "РасчетСреднегоЗаработкаВыходногоПособия" Тогда
			ДанныеОНачислениях 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднемДляВыходногоПособия["ДанныеОНачислениях"],	"Ссылка", Выборка.Ссылка);
			ДанныеОВремени 		= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднемДляВыходногоПособия["ДанныеОВремени"], 	"Ссылка", Выборка.Ссылка);
			ДанныеОбИндексации 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднемДляВыходногоПособия["ДанныеОбИндексации"], "Ссылка", Выборка.Ссылка);
		Иначе
			ДанныеОНачислениях 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОНачислениях"], 					"Ссылка", Выборка.Ссылка);
			ДанныеОВремени 		= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОВремени"], 						"Ссылка", Выборка.Ссылка);
			ДанныеОбИндексации 	= УчетСреднегоЗаработка.ТаблицаОтобраннаяПоПолю(ТаблицыДанныхОСреднем["ДанныеОбИндексации"], 					"Ссылка", Выборка.Ссылка);
		КонецЕсли;
		
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = ДанныеОбИндексации;
		ДополнительныеПараметры.ДатаНачалаСобытия = Выборка.ДатаНачалаСобытия;
		ДополнительныеПараметры.НачалоПериода = Выборка.НачалоРасчетногоПериода;
		ДополнительныеПараметры.ОкончаниеПериода = Выборка.ОкончаниеРасчетногоПериода;
		ДополнительныеПараметры.СпособРасчетаОтпуска = СпособРасчета;
		Если ИмяМакета = "РасчетСреднегоЗаработкаВыходногоПособия" Тогда
			ДополнительныеПараметры.ПоЧасам = ИспользоватьСреднеЧасовойЗаработок;
			ДополнительныеПараметры.ВидУчетаВремениДляСредней = Выборка.ВидУчетаВремениДляСредней;
			ДополнительныеПараметры.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010");
		Иначе
			ДополнительныеПараметры.ПоЧасам = КадровыйУчетРасширенныйКлиентСервер.ЭтоСреднечасовойЗаработокВДокументеУвольнение();
			ДополнительныеПараметры.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные");
		КонецЕсли;
		
		ДанныеДокумента.ДанныеРасчетаСреднего = УчетСреднегоЗаработкаКлиентСервер.ДанныеДляРасчетаСреднегоЗаработка(ДанныеОНачислениях, ДанныеОВремени, ДополнительныеПараметры);
		
		ДанныеДокумента.ПараметрыРасчета.СпособРасчета = СпособРасчета;
		ДанныеДокумента.ПараметрыРасчета.ИспользоватьСреднеЧасовойЗаработок = ИспользоватьСреднеЧасовойЗаработок;
		ДанныеДокумента.ПараметрыРасчета.НачалоРасчетногоПериода = Выборка.НачалоРасчетногоПериода;
		ДанныеДокумента.ПараметрыРасчета.ОкончаниеРасчетногоПериода = Выборка.ОкончаниеРасчетногоПериода;
		
		ДанныеДокументов.Добавить(ДанныеДокумента);
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Процедура СоздатьВТКадровыеДанныеСотрудниковДокумента(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документ.Сотрудник,
	|	Документ.ДатаУвольнения КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Документ.Увольнение КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)";
	Запрос.Выполнить();
	
	Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Истина, "ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости,ДатаПриема,ПриказОПриемеДатаЗавершенияТрудовогоДоговора,КраткосрочныйТрудовойДоговор");
	
	ОстаткиОтпусков.СоздатьВТКраткосрочныеТрудовыеДоговорыСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники", "Сотрудник,Период", Ложь);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСотрудники";
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область ПечатьПодробногоРасчетаНачислений

// Заполняет структуру - описание документа для формирования печатной формы подробного расчета начислений.
//
// Параметры:
//   ОписаниеДокумента - структура, определяется в Обработки.ПечатьРасчетаНачислений.ОписаниеДокументаРасчетаНачислений.
//
Процедура ЗаполнитьОписаниеДокументаРасчетаНачислений(ОписаниеДокумента) Экспорт
	КатегорииСпециализированногоНачисления = Новый Массив;
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	КатегорииСпециализированногоНачисления.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);
	
	МетаданныеДокумента = ПустаяСсылка().Метаданные();
	
	ОписаниеДокумента.Вставить("ИмяДокумента", 								МетаданныеДокумента.Имя);
	ОписаниеДокумента.Вставить("СинонимДокумента", 							МетаданныеДокумента.Синоним);
	ОписаниеДокумента.Вставить("ЕстьРасчетСреднегоЗаработка", 				Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетСпециализированныхНачислений",	Истина);
	ОписаниеДокумента.Вставить("ЕстьРасчетЗарплаты", 						Истина);
	ОписаниеДокумента.Вставить("КатегорииСпециализированногоНачисления", 	КатегорииСпециализированногоНачисления);
	ОписаниеДокумента.Вставить("НазваниеСпециализированногоНачисления", 	НСтр("ru='Расчет при увольнении';uk='Розрахунок при звільненні'"));
КонецПроцедуры 

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ДанныеДокументов) Экспорт
	РасчетЗарплатыРасширенный.ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ПустаяСсылка().Метаданные().Имя, ДанныеДокументов);	
КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок) Экспорт 
	Возврат РасчетЗарплатыРасширенный.НачисленияПоказателиДокументов(МассивСсылок, ПустаяСсылка().Метаданные().Имя);	
КонецФункции

#КонецОбласти

Функция ПолныеПраваНаДокумент() Экспорт 
	
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная, ЧтениеНачисленнойЗарплатыРасширенная", , Ложь);
	
КонецФункции	

Функция ДанныеДляПроверкиОграниченийНаУровнеЗаписей(Объект) Экспорт 

	ФизическоеЛицо = ?(ЗначениеЗаполнено(Объект.Сотрудник), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "ФизическоеЛицо"), Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ДанныеДляПроверкиОграничений = ЗарплатаКадрыРасширенный.ОписаниеСтруктурыДанныхДляПроверкиОграниченийНаУровнеЗаписей();
	
	ДанныеДляПроверкиОграничений.Организация = Объект.Организация;
	ДанныеДляПроверкиОграничений.МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Возврат ДанныеДляПроверкиОграничений;
	
КонецФункции

#Область ОбработкаПроверкиЗаполнения

Процедура ПроверитьВозможностьПроведенияПоКадровомуУчету(ДокументОбъект, Отказ)
	
	ИсключаемыеСсылки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Ссылка);
	Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
		ИсключаемыеСсылки.Добавить(ДокументОбъект.ИсправленныйДокумент);
	КонецЕсли;
	
	ПроверяемыеДаты = ДатыУвольненияСотрудников(ДокументОбъект);
	
	Для каждого ОписаниеПроверяемойДаты Из ПроверяемыеДаты Цикл
		КадровыйУчет.ПроверитьВозможностьПроведенияПоКадровомуУчету(
			ОписаниеПроверяемойДаты.Ключ, ОписаниеПроверяемойДаты.Значение, ИсключаемыеСсылки, Отказ, Перечисления.ВидыКадровыхСобытий.Увольнение);
	КонецЦикла;
	
КонецПроцедуры

Функция ДатыУвольненияСотрудников(ДокументОбъект)
	
	ПроверяемыеДаты = Новый Соответствие;
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		
		Для каждого СтрокаСотрудника Из ДокументОбъект.Сотрудники Цикл
			
			ПроверяемыеСотрудники = ПроверяемыеДаты.Получить(СтрокаСотрудника.ДатаУвольнения);
			Если ПроверяемыеСотрудники = Неопределено Тогда
				ПроверяемыеСотрудники = Новый Массив;
			КонецЕсли; 
			ПроверяемыеСотрудники.Добавить(СтрокаСотрудника.Сотрудник);
			
			ПроверяемыеДаты.Вставить(СтрокаСотрудника.ДатаУвольнения, ПроверяемыеСотрудники);
			
		КонецЦикла;
		
	Иначе
		ПроверяемыеДаты.Вставить(ДокументОбъект.ДатаУвольнения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Сотрудник));
	КонецЕсли;
	
	Возврат ПроверяемыеДаты;
	
КонецФункции

Процедура ПроверитьЗаполнениеКомпенсацииДополнительныхОтпусков(ДокументОбъект, Отказ, ВыводитьСообщения = Истина, ПраваНаДокумент = Неопределено) Экспорт
	
	ТекстСообщения = "";
	СтруктураСообщений  = Новый Соответствие;
	
	Если ПраваНаДокумент = Неопределено Тогда 
		ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(ДокументОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоСписочныйДокумент = ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение");
	
	НомерСтрокиОтпускаСотрудника = 0;
	Сотрудник = Неопределено;
	Для каждого ДополнительныйОтпуск Из ДокументОбъект.ДополнительныеОтпуска Цикл
		
		Если ЭтоСписочныйДокумент Тогда
			
			Если Сотрудник <> ДополнительныйОтпуск.Сотрудник Тогда
				Сотрудник = ДополнительныйОтпуск.Сотрудник;
				НомерСтрокиОтпускаСотрудника = 1;
			Иначе
				НомерСтрокиОтпускаСотрудника = НомерСтрокиОтпускаСотрудника + 1;
			КонецЕсли; 
			
		Иначе
			
			Сотрудник = ДокументОбъект.Сотрудник;
			НомерСтрокиОтпускаСотрудника = ДополнительныйОтпуск.НомерСтроки;
			
		КонецЕсли;
		
		Если ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать Тогда 
			Продолжить;	
		КонецЕсли;
		
		Если ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений  
			И Не ЗначениеЗаполнено(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания) Тогда
			
			Если ЭтоСписочныйДокумент Тогда
				ТекстСообщения = НСтр("ru='По сотруднику %2, в строке %1 не заполнен вид расчета компенсации (удержания).';uk='По співробітнику %2, в рядку %1 не заповнений вид розрахунку компенсації (утримання).'");
			Иначе
				ТекстСообщения = НСтр("ru='В строке %1 не заполнен вид расчета компенсации (удержания).';uk='У рядку %1 не заповнений вид розрахунку компенсації (утримання).'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтрокиОтпускаСотрудника, Сотрудник);
			
			НомерСтрокиДанных = ДополнительныйОтпуск.НомерСтроки - 1;
			СтруктураСообщений.Вставить("ДополнительныеОтпуска[" + НомерСтрокиДанных + "]", ТекстСообщения);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДополнительныйОтпуск.ДнейКомпенсацииУдержания) Тогда
			
			Если ЭтоСписочныйДокумент Тогда
				ТекстСообщения = НСтр("ru='По сотруднику %2, в строке %1 не заполнено количество дней компенсации (удержания).';uk='По співробітнику %2, в рядку %1 не заповнено кількість днів компенсації (утримання).'");
			Иначе
				ТекстСообщения = НСтр("ru='В строке %1 не заполнено количество дней компенсации (удержания).';uk='У рядку %1 не заповнено кількість днів компенсації (утримання).'");
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НомерСтрокиОтпускаСотрудника, Сотрудник);
			
			НомерСтрокиДанных = ДополнительныйОтпуск.НомерСтроки - 1;
			СтруктураСообщений.Вставить("ДополнительныеОтпуска[" + НомерСтрокиДанных + "]", ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ВыводитьСообщения Тогда
		Для каждого Сообщение Из СтруктураСообщений Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение.Значение,,"Объект" + ?(Сообщение.Ключ = "","",".") + Сообщение.Ключ);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураСообщений.Количество() > 0 Тогда
	    Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПериодДействияНачислений(ДокументОбъект, Отказ)
	
	Если Не ДокументОбъект.ДокументРассчитан Тогда
	  Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = ДокументОбъект.Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Начисления", НСтр("ru='Начисления';uk='Нарахування'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Пособия", НСтр("ru='Пособия';uk='Допомоги'")));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("Удержания", НСтр("ru='Удержания';uk='Утримання'"), "Удержание"));
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("НачисленияПерерасчет", НСтр("ru='Перерасчет прошлого периода';uk='Перерахунок минулого періоду'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ДокументОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьРеквизитовКомпенсацииУдержанияОтпусков(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, ПраваНаДокумент)
	
	Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ДнейКомпенсацииУдержанияОтпуска");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ВидРасчетаКомпенсацииУдержанияОтпуска");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.ВыходноеПособие");
		
		ПроверяемаяКоллекция = ДокументОбъект.Сотрудники;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДнейКомпенсацииУдержанияОтпуска");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВидРасчетаКомпенсацииУдержанияОтпуска");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ВыходноеПособие");
		
		ПроверяемаяКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
		
	КонецЕсли;
	
	МетаданныеДокумента = Метаданные.Документы.Увольнение;
	СинонимДнейКомпенсацииУдержанияОтпуска = МетаданныеДокумента.Реквизиты.ДнейКомпенсацииУдержанияОтпуска.Синоним;
	СинонимВидРасчетаКомпенсацииУдержанияОтпуска = МетаданныеДокумента.Реквизиты.ВидРасчетаКомпенсацииУдержанияОтпуска.Синоним;
	СинонимВыходноеПособие = МетаданныеДокумента.Реквизиты.ВыходноеПособие.Синоним;
	
	НомерСтроки = 0;
	Для каждого ЭлементКоллекции Из ПроверяемаяКоллекция Цикл
		
		Если ЭлементКоллекции.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать
			И Не ЗначениеЗаполнено(ЭлементКоллекции.ДнейКомпенсацииУдержанияОтпуска) Тогда 
			
			Если ПроверяемаяКоллекция.Количество() = 1 Тогда
				ТекстСообщения = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
				ПутьКПолю = "Объект.ДнейКомпенсацииУдержанияОтпуска";
			Иначе
				ТекстСообщения = НСтр("ru='Для сотрудника %2 не заполнено поле ""%1""';uk='Для співробітника %2 не заповнено поле ""%1""'");
				ПутьКПолю = "Объект.Сотрудники[" + НомерСтроки + "].ДнейКомпенсацииУдержанияОтпуска";
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				СинонимДнейКомпенсацииУдержанияОтпуска,
				ЭлементКоллекции.Сотрудник);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
			
		КонецЕсли;
		
		Если ДокументОбъект.ДокументРассчитан И ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений 
			И ЭлементКоллекции.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать Тогда
			
			Если Не ЗначениеЗаполнено(ЭлементКоллекции.ВидРасчетаКомпенсацииУдержанияОтпуска) Тогда
			
				Если ПроверяемаяКоллекция.Количество() = 1 Тогда
					ТекстСообщения = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
					ПутьКПолю = "Объект.ВидРасчетаКомпенсацииУдержанияОтпуска";
				Иначе
					ТекстСообщения = НСтр("ru='Для сотрудника %2 не заполнено поле ""%1""';uk='Для співробітника %2 не заповнено поле ""%1""'");
					ПутьКПолю = "Объект.Сотрудники[" + НомерСтроки + "].ВидРасчетаКомпенсацииУдержанияОтпуска";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
					СинонимВидРасчетаКомпенсацииУдержанияОтпуска,
					ЭлементКоллекции.Сотрудник);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.ДнейЧасовВыходногоПособия)
				И Не ЗначениеЗаполнено(ЭлементКоллекции.ВыходноеПособие) Тогда
			
				Если ПроверяемаяКоллекция.Количество() = 1 Тогда
					ТекстСообщения = НСтр("ru='Поле ""%1"" не заполнено';uk='Поле ""%1"" не заповнене'");
					ПутьКПолю = "Объект.ВыходноеПособие";
				Иначе
					ТекстСообщения = НСтр("ru='Для сотрудника %2 не заполнено поле ""%1""';uk='Для співробітника %2 не заповнено поле ""%1""'");
					ПутьКПолю = "Объект.Сотрудники[" + НомерСтроки + "].ВыходноеПособие";
				КонецЕсли;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
					СинонимВыходноеПособие,
					ЭлементКоллекции.Сотрудник);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКПолю, , Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьНеобходимостьПроверкиДатыВыплаты(ДокументОбъект, ПроверяемыеРеквизиты)
	
	МассивНачисленийДокумента = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, ДокументОбъект.Начисления.ВыгрузитьКолонку("Начисление"), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачисленийДокумента, ДокументОбъект.НачисленияПерерасчет.ВыгрузитьКолонку("Начисление"), Истина);
	
	Если НЕ УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ДокументОбъект.ПорядокВыплаты, МассивНачисленийДокумента) Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ПланируемаяДатаВыплаты");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхДляПроведенияДокумента

Процедура СоздатьВТКадровыеДанныеУвольняемыхСотрудников(МенеджерВременныхТаблиц, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ДатаУвольнения КАК Период,
		|	ТаблицаДокумента.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, "ВидДоговора,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,ВидЗанятости,ГоловнаяОрганизация");
	
КонецПроцедуры

Функция КадровыеСобытияУвольнение(Сотрудник, ДатаУвольнения, ФизическоеЛицо = Неопределено, Позиция = Неопределено, КоличествоСтавок = Неопределено, ВидДоговора = Неопределено) Экспорт
	
	Если ВидДоговора = Неопределено Тогда
		ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ТрудовойДоговор;
	КонецЕсли;
	
	// Создаем таблицу событий
	КадровыеСобытия = ПустаяТаблицаКадровыхСобытийУвольнение();
	
	// Заполняем таблицу
	НовоеСобытие = КадровыеСобытия.Добавить();
	НовоеСобытие.Сотрудник = Сотрудник;
	НовоеСобытие.ДатаСобытия = КонецДня(ДатаУвольнения) + 1;
	НовоеСобытие.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	НовоеСобытие.ФизическоеЛицо = ФизическоеЛицо;
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция КадровыеСобытияУвольнениеПоВременнойТаблице(МенеджерВременныхТаблиц)
	
	КадровыеСобытия = ПустаяТаблицаКадровыхСобытийУвольнение();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.Период, ДЕНЬ, 1) КАК ДатаСобытия,
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
		|	КадровыеДанныеСотрудников.ВидДоговора КАК ВидДоговора,
		|	КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию КАК Позиция,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(КадровыеСобытия.Добавить(), Выборка);
		КонецЦикла; 
		
	КонецЕсли; 
		
	Возврат КадровыеСобытия;
	
КонецФункции

Функция ПустаяТаблицаКадровыхСобытийУвольнение()
	
	КадровыеСобытия = Новый ТаблицаЗначений;
	КадровыеСобытия.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	КадровыеСобытия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	КадровыеСобытия.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КадровыеСобытия.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	КадровыеСобытия.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровССотрудниками"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		КадровыеСобытия.Колонки.Добавить("Позиция", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
		КадровыеСобытия.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Возврат КадровыеСобытия;
	
КонецФункции

Функция ДанныеДляПроведения(РеквизитыДляПроведения, МенеджерВременныхТаблиц, ПериодРегистрации, Организация, СтруктураВидовУчета = Неопределено) Экспорт
	
	Если СтруктураВидовУчета = Неопределено Тогда
		СтруктураВидовУчета = ПроведениеРасширенныйСервер.СтруктураВидовУчета();
		Для Каждого ВидУчета Из СтруктураВидовУчета Цикл
			  СтруктураВидовУчета[ВидУчета.Ключ] = Истина;
		КонецЦикла;
	КонецЕсли;

	ДанныеДляПроведения = РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты();
	
	Если СтруктураВидовУчета.ОстальныеВидыУчета Тогда

		ДобавитьДанныеДляРегистрацииПрекращенияПлановыхНачислений(ДанныеДляПроведения, МенеджерВременныхТаблиц);
		ДобавитьДанныеДляРегистрацииПрекращенияПлановыхУдержаний(ДанныеДляПроведения, МенеджерВременныхТаблиц);
		ДобавитьДанныеДляРегистрацииСостоянийСотрудников(ДанныеДляПроведения, РеквизитыДляПроведения);
		
		ДобавитьДанныеДляРегистрацииПрекращенияВзносов(ДанныеДляПроведения, МенеджерВременныхТаблиц);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") 
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
			Модуль.ДобавитьДанныеДляРегистрацииПрекращенияПодработок(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		КонецЕсли;
		
		РасчетЗарплатыРасширенный.ЗаполнитьНачисления(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет,Льготы", "Ссылка.ПериодРегистрации");
		РасчетЗарплатыРасширенный.ЗаполнитьУдержания(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплатыРасширенный.ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, "Начисления");
		
		ПособиеПлатитУчастникПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахования.ПособиеПлатитУчастникПилотногоПроекта(РеквизитыДляПроведения.Организация, РеквизитыДляПроведения.ПериодРегистрации);
				
		УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьСведенияОПособияхПоУходуЗаРебенком(РеквизитыДляПроведения.Ссылка, ПособиеПлатитУчастникПилотногоПроекта, ДанныеДляПроведения, , "ПособияПерерасчет");
		
		РасчетЗарплаты.ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		РасчетЗарплаты.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			НачисленияДляРегистрацииДенежногоСодержания = Модуль.СведенияОНачисленияхДляРегистрацииДенежногоСодержанияДокумента(РеквизитыДляПроведения.Ссылка, "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет");
			ДанныеДляПроведения.Вставить("НачисленияДляРегистрацииДенежногоСодержания", НачисленияДляРегистрацииДенежногоСодержания);
			КорректировкиДляРегистрацииДенежногоСодержания = Модуль.СведенияОКорректировкахСотрудниковДляРегистрацииДенежногоСодержанияДокумента(
				РеквизитыДляПроведения.Ссылка, ?(ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение"), "", "Сотрудники"));
			ДанныеДляПроведения.Вставить("КорректировкиДляРегистрацииДенежногоСодержания", КорректировкиДляРегистрацииДенежногоСодержания);
		КонецЕсли;

		ДополнитьДанныеДляПроведенияОтпусков(ДанныеДляПроведения, РеквизитыДляПроведения);
		
		
		ДобавитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
			ДанныеКадровогоРезерва = Модуль.ДанныеУвольненияДляКадровогоРезерва(РеквизитыДляПроведения.Ссылка);
			ДанныеДляПроведения.Вставить("ДанныеКадровогоРезерва", ДанныеКадровогоРезерва);
		КонецЕсли;
		
		// Данные для Реестра кадровых приказов
		ДанныеРеестраКадровыхПриказов = КадровыйУчетРасширенный.ТаблицаРеестраКадровыхПриказов();
		НомерПриказа = "";
		ДатаПриказа = Дата(1, 1, 1);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);

		Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение") Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Увольнение.Сотрудник,
			|	Увольнение.ФизическоеЛицо,
			|	Увольнение.Ссылка КАК ДокументОснование,
			|	Увольнение.Номер КАК НомерПриказа,
			|	Увольнение.Дата КАК ДатаПриказа,
			|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
			|	Увольнение.ДатаУвольнения КАК Дата,
			|	1 КАК Номер
			|ИЗ
			|	Документ.Увольнение КАК Увольнение
			|ГДЕ
			|	Увольнение.Ссылка = &Ссылка";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Номер = 1;
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
	           		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяСтрока.Дата);
	            				
				НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора; 
				
				НомерПриказа = Выборка.НомерПриказа;
				ДатаПриказа = Выборка.ДатаПриказа;
							
			КонецЦикла;      
			
		Иначе
			
			Запрос.Текст = 
	        "ВЫБРАТЬ
	        |	УвольнениеСпискомСотрудники.Сотрудник,
	        |	УвольнениеСпискомСотрудники.ФизическоеЛицо,
	        |	УвольнениеСпискомСотрудники.Ссылка КАК ДокументОснование,
	        |	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия,
	        |	УвольнениеСпискомСотрудники.Ссылка.Номер КАК НомерПриказа,
	        |	УвольнениеСпискомСотрудники.Ссылка.Дата КАК ДатаПриказа,
	        |	УвольнениеСпискомСотрудники.НомерСтроки КАК Номер,
	        |	УвольнениеСпискомСотрудники.ДатаУвольнения КАК Дата
	        |ИЗ
	        |	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
	        |ГДЕ
	        |	УвольнениеСпискомСотрудники.Ссылка = &Ссылка";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
							
				НоваяСтрока = ДанныеРеестраКадровыхПриказов.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
	           		Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник), "ВидДоговора", НоваяСтрока.Дата);
	            				
				НоваяСтрока.ВидДоговора	= КадровыеДанныеСотрудника[0].ВидДоговора;   
				
				НомерПриказа = Выборка.НомерПриказа;
				ДатаПриказа = Выборка.ДатаПриказа;

			КонецЦикла;
			    		
		КонецЕсли;	
						
		Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(ДатаПриказа, НомерПриказа);

		ДанныеРеестраКадровыхПриказов.ЗаполнитьЗначения(Основание, "Основание");
		
		ДанныеДляПроведения.Вставить("ДанныеРеестраКадровыхПриказов", ДанныеРеестраКадровыхПриказов);
		
		// Данные для Реестра отпусков
		ДанныеРеестраОтпусков = КадровыйУчетРасширенный.ТаблицаРеестраОтпусков();
						
		Основание = КадровыйУчетРасширенный.ОснованиеДляРеестра(РеквизитыДляПроведения.Дата, НомерПриказа);
		
		Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение") Тогда
		
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Увольнение.Сотрудник,
			|	Увольнение.ФизическоеЛицо,
			|	Увольнение.Ссылка КАК ДокументОснование,
			|	""Основной"" КАК ВидОтпуска,
			|	Увольнение.РабочийГодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	Увольнение.РабочийГодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	Увольнение.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейОтпуска,
			|	Увольнение.ДатаУвольнения КАК ДатаНачалаПериодаОтсутствия,
			|	Увольнение.ДатаУвольнения КАК ДатаОкончанияПериодаОтсутствия,
			|	Увольнение.ВидДоговора,
			|	Увольнение.ОснованиеУвольнения
			|ИЗ
			|	Документ.Увольнение КАК Увольнение
			|ГДЕ
			|	Увольнение.Ссылка = &Ссылка
			|	И Увольнение.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УвольнениеДополнительныеОтпуска.Ссылка.Сотрудник,
			|	УвольнениеДополнительныеОтпуска.Ссылка.ФизическоеЛицо,
			|	УвольнениеДополнительныеОтпуска.Ссылка,
			|	УвольнениеДополнительныеОтпуска.ВидОтпуска,
			|	УвольнениеДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
			|	УвольнениеДополнительныеОтпуска.Ссылка.ДатаУвольнения,
			|	УвольнениеДополнительныеОтпуска.Ссылка.ДатаУвольнения,
			|	УвольнениеДополнительныеОтпуска.Ссылка.ВидДоговора,
			|	УвольнениеДополнительныеОтпуска.Ссылка.ОснованиеУвольнения
			|ИЗ
			|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
			|ГДЕ
			|	УвольнениеДополнительныеОтпуска.Ссылка = &Ссылка
			|	И УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Номер = 1;
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				НоваяСтрока.Основание = Основание + " " + Выборка.ОснованиеУвольнения;
				
				Номер = Номер + 1;
				
			КонецЦикла;	
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УвольнениеСпискомСотрудники.Сотрудник,
			|	УвольнениеСпискомСотрудники.Ссылка КАК ДокументОснование,
			|	""Основной"" КАК ВидОтпуска,
			|	УвольнениеСпискомСотрудники.РабочийГодС КАК НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеСпискомСотрудники.РабочийГодПо КАК КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеСпискомСотрудники.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейОтпуска,
			|	УвольнениеСпискомСотрудники.ДатаУвольнения КАК ДатаНачалаПериодаОтсутствия,
			|	УвольнениеСпискомСотрудники.ДатаУвольнения КАК ДатаОкончанияПериодаОтсутствия,
			|	УвольнениеСпискомСотрудники.Ссылка.ВидДоговора КАК ВидДоговора,
			|	УвольнениеСпискомСотрудники.ОснованиеУвольнения КАК ОснованиеУвольнения,
			|	УвольнениеСпискомСотрудники.ФизическоеЛицо
			|ИЗ
			|	Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
			|ГДЕ
			|	УвольнениеСпискомСотрудники.Ссылка = &Ссылка
			|	И УвольнениеСпискомСотрудники.ПризнакКомпенсацииУдержанияОтпуска = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УвольнениеСпискомДополнительныеОтпуска.Сотрудник,
			|	УвольнениеСпискомДополнительныеОтпуска.Ссылка,
			|	УвольнениеСпискомДополнительныеОтпуска.ВидОтпуска,
			|	УвольнениеСпискомДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеСпискомДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеСпискомДополнительныеОтпуска.ДнейКомпенсацииУдержания,
			|	УвольнениеСпискомСотрудники.ДатаУвольнения,
			|	УвольнениеСпискомСотрудники.ДатаУвольнения,
			|	УвольнениеСпискомДополнительныеОтпуска.Ссылка.ВидДоговора,
			|	УвольнениеСпискомСотрудники.ОснованиеУвольнения,
			|	УвольнениеСпискомСотрудники.ФизическоеЛицо
			|ИЗ
			|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК УвольнениеСпискомДополнительныеОтпуска
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК УвольнениеСпискомСотрудники
			|		ПО УвольнениеСпискомДополнительныеОтпуска.Ссылка = УвольнениеСпискомСотрудники.Ссылка
			|			И УвольнениеСпискомДополнительныеОтпуска.Сотрудник = УвольнениеСпискомСотрудники.Сотрудник
			|ГДЕ
			|	УвольнениеСпискомДополнительныеОтпуска.Ссылка = &Ссылка
			|	И УвольнениеСпискомДополнительныеОтпуска.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Номер = 1;
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = ДанныеРеестраОтпусков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Номер = Номер;
				
				НоваяСтрока.Основание = Основание + " " + Выборка.ОснованиеУвольнения;;
				
				Номер = Номер + 1;
				
			КонецЦикла;	
			
		КонецЕсли;
		
		ДанныеДляПроведения.Вставить("ДанныеРеестраОтпусков", ДанныеРеестраОтпусков);
		
	КонецЕсли;
	
	Если СтруктураВидовУчета.ДанныеДляРасчетаСреднего Тогда
		ДополнительныеПараметры = УчетСреднегоЗаработка.ДополнительныеПараметрыРегистрацииДанныхСреднегоЗаработка("Начисления,НачисленияПерерасчет,Пособия");
		ДополнительныеПараметры.МесяцНачисления = "Ссылка.ПериодРегистрации";
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДляРегистрацииДанныхСреднегоЗаработка(ДанныеДляПроведения, РеквизитыДляПроведения.Ссылка, ДополнительныеПараметры);
	КонецЕсли;
		
	Возврат ДанныеДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведения(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Увольнение.Ссылка,
	|	Увольнение.Организация,
	|	Увольнение.ИсправленныйДокумент,
	|	Увольнение.ДокументРассчитан,
	|	Увольнение.ПериодРегистрации,
	|	Увольнение.Дата,
	|	Увольнение.ПорядокВыплаты,
	|	Увольнение.Номер
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеСписком.Ссылка,
	|	УвольнениеСписком.Организация,
	|	УвольнениеСписком.ИсправленныйДокумент,
	|	УвольнениеСписком.ДокументРассчитан,
	|	УвольнениеСписком.ПериодРегистрации,
	|	УвольнениеСписком.Дата,
	|	УвольнениеСписком.ПорядокВыплаты,
	|	УвольнениеСписком.Номер
	|ИЗ
	|	Документ.УвольнениеСписком КАК УвольнениеСписком
	|ГДЕ
	|	УвольнениеСписком.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.Увольнение.РаспределениеПоТерриториямУсловиямТруда КАК УвольнениеРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	УвольнениеРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.НомерСтроки,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.Территория,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.УсловияТруда,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.Результат,
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей
	|ИЗ
	|	Документ.УвольнениеСписком.РаспределениеПоТерриториямУсловиямТруда КАК УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	УвольнениеСпискомРаспределениеПоТерриториямУсловиямТруда.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Результаты = Запрос.ВыполнитьПакет();
	
	РеквизитыДляПроведения = РеквизитыДляПроведенияПустаяСтруктура();
	
	ВыборкаРеквизиты = Результаты[0].Выбрать();
	
	Пока ВыборкаРеквизиты.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(РеквизитыДляПроведения, ВыборкаРеквизиты);
		
	КонецЦикла;
	
	РаспределениеПоТерриториямУсловиямТруда = Результаты[1].Выгрузить();
	
	РеквизитыДляПроведения.РаспределениеПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда;
	
	Возврат РеквизитыДляПроведения;
	
КонецФункции

Функция РеквизитыДляПроведенияПустаяСтруктура()
	
	РеквизитыДляПроведенияПустаяСтруктура = Новый Структура("Ссылка, Организация, ИсправленныйДокумент, ДокументРассчитан, ПериодРегистрации, Дата, ПорядокВыплаты, Номер, РаспределениеПоТерриториямУсловиямТруда");	
	
	Возврат РеквизитыДляПроведенияПустаяСтруктура;
	
КонецФункции

Процедура ДобавитьДанныеДляРегистрацииПрекращенияПлановыхНачислений(ДанныеДляПроведения, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.Период, ДЕНЬ, 1) КАК Период,
		|	КадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
		
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииПрекращенияПлановыхНачислений", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРегистрацииПрекращенияПлановыхУдержаний(ДанныеДляПроведения, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.ГоловнаяОрганизация КАК Организация
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ГДЕ
		|	КадровыеДанныеСотрудников.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)";
		
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииПрекращенияПлановыхУдержаний", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДобавитьДанныеДляРегистрацииПрекращенияВзносов(ДанныеДляПроведения, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	КадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|";
		
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииПрекращенияВзносов", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры
	

Процедура ДобавитьДанныеДляРегистрацииСостоянийСотрудников(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение) КАК Состояние,
		|	ДОБАВИТЬКДАТЕ(ТаблицаДокумента.ДатаУвольнения, ДЕНЬ, 1) КАК Начало,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Окончание
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
	
	ДанныеДляПроведения.Вставить("ДанныеДляРегистрацииСостоянийСотрудников", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ДополнитьДанныеДляПроведенияОтпусков(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Увольнение.Сотрудник КАК Сотрудник,
			|	Увольнение.ДатаУвольнения КАК ДатаУвольнения,
			|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
			|	Увольнение.РабочийГодС КАК РабочийПериодС,
			|	Увольнение.РабочийГодПо КАК РабочийПериодПо,
			|	Увольнение.ПризнакКомпенсацииУдержанияОтпуска КАК ПризнакКомпенсацииУдержания,
			|	Увольнение.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейКомпенсации,
			|	Увольнение.ОснованиеУвольнения КАК ОснованиеУвольнения
			|ПОМЕСТИТЬ ВТДанныеОтпусков
			|ИЗ
			|	Документ.Увольнение КАК Увольнение
			|ГДЕ
			|	Увольнение.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Увольнение.Сотрудник,
			|	Увольнение.ДатаУвольнения,
			|	УвольнениеДополнительныеОтпуска.ВидОтпуска,
			|	УвольнениеДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания,
			|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
			|	Увольнение.ОснованиеУвольнения
			|ИЗ
			|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
			|		ПО УвольнениеДополнительныеОтпуска.Ссылка = Увольнение.Ссылка
			|ГДЕ
			|	УвольнениеДополнительныеОтпуска.Ссылка = &Ссылка";
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	Сотрудники.ДатаУвольнения КАК ДатаУвольнения,
			|	ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной) КАК ВидОтпуска,
			|	Сотрудники.РабочийГодС КАК РабочийПериодС,
			|	Сотрудники.РабочийГодПо КАК РабочийПериодПо,
			|	Сотрудники.ПризнакКомпенсацииУдержанияОтпуска КАК ПризнакКомпенсацииУдержания,
			|	Сотрудники.ДнейКомпенсацииУдержанияОтпуска КАК КоличествоДнейКомпенсации,
			|	Сотрудники.ОснованиеУвольнения КАК ОснованиеУвольнения
			|ПОМЕСТИТЬ ВТДанныеОтпусков
			|ИЗ
			|	Документ.УвольнениеСписком.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДополнительныеОтпуска.Сотрудник,
			|	Сотрудники.ДатаУвольнения,
			|	ДополнительныеОтпуска.ВидОтпуска,
			|	ДополнительныеОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	ДополнительныеОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск,
			|	ДополнительныеОтпуска.ПризнакКомпенсацииУдержания,
			|	ДополнительныеОтпуска.ДнейКомпенсацииУдержания,
			|	Сотрудники.ОснованиеУвольнения
			|ИЗ
			|	Документ.УвольнениеСписком.ДополнительныеОтпуска КАК ДополнительныеОтпуска
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК Сотрудники
			|		ПО ДополнительныеОтпуска.Ссылка = Сотрудники.Ссылка
			|			И ДополнительныеОтпуска.Сотрудник = Сотрудники.Сотрудник
			|ГДЕ
			|	ДополнительныеОтпуска.Ссылка = &Ссылка";
		
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокумента.Сотрудник,
		|	КОНЕЦПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, ДЕНЬ) КАК ДатаУвольнения
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатыНачалаКомпенсаций= Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ДатыНачалаКомпенсаций.Вставить(Выборка.Сотрудник, Выборка.ДатаУвольнения);
	КонецЦикла; 
	ДанныеДляПроведения.Вставить("ДатыНачалаКомпенсаций", ДатыНачалаКомпенсаций);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ДатаУвольнения КАК ДатаУвольнения,
		|	ТаблицаДокумента.ВидОтпуска КАК ВидОтпуска,
		|	ТаблицаДокумента.РабочийПериодС КАК РабочийПериодС,
		|	ТаблицаДокумента.РабочийПериодПо КАК РабочийПериодПо
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	ПериодыОтпусков = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ПериодыПоВидамОтпусков = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПериодыПоВидамОтпусков.Вставить(Выборка.ВидОтпуска,
				Новый Структура("РабочийПериодС, РабочийПериодПо", Выборка.РабочийПериодС, Выборка.РабочийПериодПо));
		КонецЦикла; 
		
		ПериодыОтпусков.Вставить(Выборка.Сотрудник, ПериодыПоВидамОтпусков);
		
	КонецЦикла; 
	
	ДанныеДляПроведения.Вставить("РабочиеПериодыКомпенсацийОтпусков", ПериодыОтпусков);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ВидОтпуска КАК ВидОтпуска,
		|	ТаблицаДокумента.РабочийПериодС КАК РабочийПериодС,
		|	ТаблицаДокумента.РабочийПериодПо КАК РабочийПериодПо
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	ПериодыОтпусков = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ПериодыПоВидамОтпусков = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ПериодыПоВидамОтпусков.Вставить(Выборка.ВидОтпуска,
				Новый Структура("РабочийПериодС, РабочийПериодПо", Выборка.РабочийПериодС, Выборка.РабочийПериодПо));
		КонецЦикла; 
		
		ПериодыОтпусков.Вставить(Выборка.Сотрудник, ПериодыПоВидамОтпусков);
		
	КонецЦикла; 
	
	ДанныеДляПроведения.Вставить("РабочиеПериодыУдержанийОтпусков", ПериодыОтпусков);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ВидОтпуска КАК ВидОтпуска,
		|	ТаблицаДокумента.ОснованиеУвольнения
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
		
	ОснованияУвольнений = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ОснованиеПоВидамОтпусков = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ОснованиеПоВидамОтпусков.Вставить(Выборка.ВидОтпуска, Выборка.ОснованиеУвольнения);
		КонецЦикла; 
		
		ОснованияУвольнений.Вставить(Выборка.Сотрудник, ОснованиеПоВидамОтпусков);
		
	КонецЦикла; 
	
	ДанныеДляПроведения.Вставить("ОснованияКомпенсацийОтпусков", ОснованияУвольнений);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	ТаблицаДокумента.ВидОтпуска КАК ВидОтпуска,
		|	ТаблицаДокумента.ОснованиеУвольнения
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
		
	ОснованияУвольнений = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ОснованиеПоВидамОтпусков = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			ОснованиеПоВидамОтпусков.Вставить(Выборка.ВидОтпуска, Выборка.ОснованиеУвольнения);
		КонецЦикла; 
		
		ОснованияУвольнений.Вставить(Выборка.Сотрудник, ОснованиеПоВидамОтпусков);
		
	КонецЦикла; 
	
	ДанныеДляПроведения.Вставить("ОснованияУдержанийОтпусков", ОснованияУвольнений);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	ТаблицаДокумента.ДатаУвольнения,
		|	ТаблицаДокумента.ВидОтпуска КАК ВидЕжегодногоОтпуска,
		|	ТаблицаДокумента.КоличествоДнейКомпенсации КАК КоличествоДнейКомпенсации
		|ИЗ
		|	ВТДанныеОтпусков КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.ПризнакКомпенсацииУдержания = ЗНАЧЕНИЕ(Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом)";
	
	ДанныеДляПроведения.Вставить("УдержанияОтпусков", Запрос.Выполнить().Выгрузить());
		
КонецПроцедуры

Процедура ДобавитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, РеквизитыДляПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РеквизитыДляПроведения.Ссылка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТипЗнч(РеквизитыДляПроведения.Ссылка) = Тип("ДокументСсылка.Увольнение") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПогашениеЗаймов.Ссылка КАК ДокументСсылка,
			|	ПогашениеЗаймов.ИдентификаторСтроки,
			|	ПогашениеЗаймов.НомерСтроки,
			|	ПогашениеЗаймов.ФизическоеЛицо,
			|	ПогашениеЗаймов.Ссылка.Организация КАК Организация,
			|	ПогашениеЗаймов.Подразделение,
			|	ПогашениеЗаймов.Ссылка.ПериодРегистрации КАК Месяц,
			|	ПогашениеЗаймов.ДоговорЗайма,
			|	ПогашениеЗаймов.НачисленоПроцентов,
			|	ПогашениеЗаймов.ПогашениеПроцентов,
			|	ПогашениеЗаймов.ПогашениеЗайма,
			|	ПогашениеЗаймов.МатериальнаяВыгода,
			|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду,
			|	ПогашениеЗаймов.Ссылка.ДатаУвольнения КАК ДатаОперации
			|ПОМЕСТИТЬ ВТПогашениеЗаймов
			|ИЗ
			|	Документ.Увольнение.ПогашениеЗаймов КАК ПогашениеЗаймов
			|ГДЕ
			|	ПогашениеЗаймов.Ссылка = &Ссылка";
			
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПогашениеЗаймов.Ссылка КАК ДокументСсылка,
			|	ПогашениеЗаймов.ИдентификаторСтроки,
			|	ПогашениеЗаймов.НомерСтроки,
			|	ПогашениеЗаймов.ФизическоеЛицо,
			|	ПогашениеЗаймов.Ссылка.Организация КАК Организация,
			|	ПогашениеЗаймов.Подразделение,
			|	ПогашениеЗаймов.Ссылка.ПериодРегистрации КАК Месяц,
			|	ПогашениеЗаймов.ДоговорЗайма,
			|	ПогашениеЗаймов.НачисленоПроцентов,
			|	ПогашениеЗаймов.ПогашениеПроцентов,
			|	ПогашениеЗаймов.ПогашениеЗайма,
			|	ПогашениеЗаймов.МатериальнаяВыгода,
			|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду,
			|	Сотрудники.ДатаУвольнения КАК ДатаОперации
			|ПОМЕСТИТЬ ВТПогашениеЗаймов
			|ИЗ
			|	Документ.УвольнениеСписком.ПогашениеЗаймов КАК ПогашениеЗаймов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УвольнениеСписком.Сотрудники КАК Сотрудники
			|		ПО ПогашениеЗаймов.Ссылка = Сотрудники.Ссылка
			|			И ПогашениеЗаймов.Сотрудник = Сотрудники.Сотрудник
			|ГДЕ
			|	ПогашениеЗаймов.Ссылка = &Ссылка";
			
	КонецЕсли;
		
	Запрос.Выполнить();
	
	ЗаймыСотрудникам.ЗаполнитьДанныеДляПроведенияПоЗаймамПоВременнойТаблице(ДанныеДляПроведения, Запрос.МенеджерВременныхТаблиц, РеквизитыДляПроведения.Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ) Экспорт
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Ссылка);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(
		ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(
			ДокументОбъект.Ссылка, ДанныеДляРегистрацииПерерасчетов, ДокументОбъект.Организация);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверкаСтрокиСписочногоДокумента = ДокументОбъект.ДополнительныеСвойства.Свойство("ПроверкаСтрокиСписочногоДокумента");
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(ДокументОбъект);
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Увольнение") Тогда
		ПроверяемаяКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект);
	Иначе
		ПроверяемаяКоллекция = ДокументОбъект.Сотрудники;
	КонецЕсли;
	
	Если Не ПроверкаСтрокиСписочногоДокумента Тогда
		
		Для каждого ЭлементКоллекции Из ПроверяемаяКоллекция Цикл
			
			ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
			ПараметрыПолученияСотрудниковОрганизаций.Организация 				= ДокументОбъект.Организация;
			ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= ЭлементКоллекции.ДатаУвольнения;
			ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ЭлементКоллекции.ДатаУвольнения;
			ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
			ПараметрыПолученияСотрудниковОрганизаций.ИсключаемыйРегистратор 	= ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.Ссылка);
			
			Если ЗначениеЗаполнено(ДокументОбъект.ИсправленныйДокумент) Тогда
				ПараметрыПолученияСотрудниковОрганизаций.ИсключаемыйРегистратор.Добавить(ДокументОбъект.ИсправленныйДокумент);
			КонецЕсли; 
			
			КадровыйУчет.ПроверитьРаботающихСотрудников(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементКоллекции.Сотрудник),
				ПараметрыПолученияСотрудниковОрганизаций,
				Отказ,
				Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.Сотрудники"));
			
		КонецЦикла;
			
		ПроверитьВозможностьПроведенияПоКадровомуУчету(ДокументОбъект, Отказ);
		КадровыйУчетРасширенный.ПроверитьУвольнениеОсновногоСотрудника(ДокументОбъект.Организация, ДатыУвольненияСотрудников(ДокументОбъект), Отказ);
		
	КонецЕсли; 
	
	ПроверитьЗаполнениеКомпенсацииДополнительныхОтпусков(ДокументОбъект, Отказ, Истина, ПраваНаДокумент);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ПроверитьЗаполнениеВидаРезерваВТабличнойЧасти(ДокументОбъект, "КадровыйРезерв", ПроверяемыеРеквизиты, Отказ);
	КонецЕсли;
	
	Если ПраваНаДокумент.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		
		ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ДокументОбъект, ПроверяемыеРеквизиты, Отказ);
		
		Если Не ПроверкаСтрокиСписочногоДокумента Тогда
			
			// Проверка утверждения производится в не привилегированном режиме
			ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ДокументОбъект, Отказ);
			
		КонецЕсли;
		
		ПроверитьПериодДействияНачислений(ДокументОбъект, Отказ);
		
		Если Не ПроверкаСтрокиСписочногоДокумента Тогда
			
			Если Не Отказ И ДокументОбъект.ДокументРассчитан Тогда
				
				ПараметрыПроверки = РасчетЗарплатыРасширенный.ПараметрыПроверкиПересеченияФактическогоПериодаДействия();
				ПараметрыПроверки.Организация = ДокументОбъект.Организация;
				ПараметрыПроверки.ПериодРегистрации = ДокументОбъект.ПериодРегистрации;
				ПараметрыПроверки.Документ = ДокументОбъект.Ссылка;
				ПараметрыПроверки.Начисления = ДокументОбъект.Начисления;
				ПараметрыПроверки.НачисленияПерерасчет = ДокументОбъект.НачисленияПерерасчет;
				ПараметрыПроверки.ИсправленныйДокумент = ДокументОбъект.ИсправленныйДокумент;
				
				РасчетЗарплатыРасширенный.ПроверитьПересечениеФактическогоПериодаДействия(ПараметрыПроверки, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьЗаполненностьРеквизитовКомпенсацииУдержанияОтпусков(ДокументОбъект, ПроверяемыеРеквизиты, Отказ, ПраваНаДокумент);
	УточнитьНеобходимостьПроверкиДатыВыплаты(ДокументОбъект, ПроверяемыеРеквизиты);
	
КонецПроцедуры

// Локально перепишем УчетНДФЛРасширенный.ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений()
// т.к. Увольнение требует особенной регистрации налогов.
//
Процедура ЗарегистрироватьДоходыИСуммыНДФЛПоВременнойТаблицеНачислений(ДокументОбъект, Движения, ДанныеДляПроведения, ДатаОперацииПоНалогам, ДатыПолученияДоходовПоОплатеТруда, Отказ)
	
	ОкончательныйРасчет = (ДокументОбъект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
	УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(
		Движения, Отказ, ДокументОбъект.Организация, ДатаОперацииПоНалогам, ДокументОбъект.ПланируемаяДатаВыплаты, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДокументОбъект.ПериодРегистрации, Ложь, ОкончательныйРасчет, , ДокументОбъект.Ссылка);
	
	ОплатаТруда = УчетНДФЛРасширенный.КодыДоходовОплатыТруда();
	Для каждого Движение Из Движения.СведенияОДоходахНДФЛ Цикл
		
		ДатаПолученияДоходаПоОплатеТруда = ДатыПолученияДоходовПоОплатеТруда.Получить(Движение.Сотрудник);
		Если ОплатаТруда.Найти(Движение.КодДохода) <> Неопределено Тогда
			Движение.ДатаПолученияДохода = ДатаПолученияДоходаПоОплатеТруда;
		КонецЕсли;
		
	КонецЦикла;
		
	// Регистрация исчисленного налога.
	УчетНДФЛ.СформироватьНалогиВычеты(
		Движения, Отказ, ДокументОбъект.Организация, ДатаОперацииПоНалогам, ДанныеДляПроведения.НДФЛ,, ОкончательныйРасчет);
	
	// Учет исчисленного налога в "зарплате".
	УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НДФЛПоСотрудникам);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(
		Движения, Отказ, ДокументОбъект.Организация, ДокументОбъект.ПериодРегистрации, ДанныеДляПроведения.НДФЛПоСотрудникам, ДанныеДляПроведения.МенеджерВременныхТаблиц, ДокументОбъект.ПорядокВыплаты);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц, ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	ТаблицаДокумента.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеДляПоказателейСверхурочных(ДокументСсылка) Экспорт
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	
	ПереработаноПоСуммированномуУчетуВПределах2Часов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчетуВПределах2Часов");
	ПереработаноПоСуммированномуУчету = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету");
	
	Если ПереработаноПоСуммированномуУчетуВПределах2Часов = Неопределено ИЛИ ПереработаноПоСуммированномуУчету = Неопределено Тогда
		Возврат ЗначенияПоказателей;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПереработаноПоСуммированномуУчетуВПределах2Часов", ПереработаноПоСуммированномуУчетуВПределах2Часов);
	Запрос.УстановитьПараметр("ПереработаноПоСуммированномуУчету", ПереработаноПоСуммированномуУчету);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
		|	&ПереработаноПоСуммированномуУчету КАК Показатель,
		|	ТаблицаДокумента.Сверхурочно1_5 + ТаблицаДокумента.Сверхурочно2 КАК Значение
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И ТаблицаДокумента.Сверхурочно1_5 + ТаблицаДокумента.Сверхурочно2 > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаУвольнения, МЕСЯЦ),
		|	ТаблицаДокумента.Ссылка.Организация,
		|	&ПереработаноПоСуммированномуУчетуВПределах2Часов,
		|	ТаблицаДокумента.Сверхурочно1_5
		|ИЗ
		|	Документ.Увольнение КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И ТаблицаДокумента.Сверхурочно1_5 > 0";
	
	Если ТипЗнч(ДокументСсылка) <> Тип("ДокументСсылка.Увольнение") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Увольнение", "Документ.УвольнениеСписком.Сотрудники");
	КонецЕсли; 
	
	ЗначенияПоказателей = Запрос.Выполнить().Выгрузить();
	
	Возврат ЗначенияПоказателей;

КонецФункции

Процедура ЗаписатьЗначенияПоказателейРасчетаЗарплаты(Движения, ТаблицаЗначенийПоказателей)
	
	Для Каждого СтрокаЗначений Из ТаблицаЗначенийПоказателей Цикл
		НаборЗаписей = Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников;
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаЗначений);
		НаборЗаписей.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеДляСторнированияУдержанийЗаОтпуск(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПризнакКомпенсацииУдержания", Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Увольнение.ВидРасчетаКомпенсацииУдержанияОтпуска КАК Удержание
	|ПОМЕСТИТЬ ВТВидыУдержаний
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|ГДЕ
	|	Увольнение.ПризнакКомпенсацииУдержанияОтпуска = &ПризнакКомпенсацииУдержания
	|	И Увольнение.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеДополнительныеОтпуска.ВидРасчетаКомпенсацииУдержания
	|ИЗ
	|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
	|ГДЕ
	|	УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания = &ПризнакКомпенсацииУдержания
	|	И УвольнениеДополнительныеОтпуска.Ссылка = &Ссылка";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УвольнениеУдержания.ФизическоеЛицо,
	|	УвольнениеУдержания.ДатаНачала,
	|	УвольнениеУдержания.ДатаОкончания,
	|	УвольнениеУдержания.Удержание,
	|	УвольнениеУдержания.ДокументОснование,
	|	УвольнениеУдержания.Получатель,
	|	УвольнениеУдержания.ПлатежныйАгент,
	|	УвольнениеУдержания.Результат * -1 КАК Результат,
	|	ИСТИНА КАК ФиксРасчет,
	|	ИСТИНА КАК ФиксЗаполнение,
	|	ИСТИНА КАК ФиксСтрока,
	|	УвольнениеУдержания.ИдентификаторСтрокиВидаРасчета
	|ИЗ
	|	ВТВидыУдержаний КАК ВТВидыУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.Удержания КАК УвольнениеУдержания
	|		ПО ВТВидыУдержаний.Удержание = УвольнениеУдержания.Удержание
	|			И (УвольнениеУдержания.Ссылка = &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УвольнениеПоказатели.Показатель,
	|	УвольнениеПоказатели.Значение,
	|	УвольнениеПоказатели.ИдентификаторСтрокиВидаРасчета
	|ИЗ
	|	ВТВидыУдержаний КАК ВТВидыУдержаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.Удержания КАК УвольнениеУдержания
	|		ПО ВТВидыУдержаний.Удержание = УвольнениеУдержания.Удержание
	|			И (УвольнениеУдержания.Ссылка = &Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение.Показатели КАК УвольнениеПоказатели
	|		ПО (УвольнениеУдержания.ИдентификаторСтрокиВидаРасчета = УвольнениеПоказатели.ИдентификаторСтрокиВидаРасчета)
	|			И (УвольнениеПоказатели.Ссылка = &Ссылка)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеДляСторнирования = Новый Структура("Удержания, Показатели");
	ДанныеДляСторнирования.Вставить("Удержания", Результат[0].Выгрузить());
	ДанныеДляСторнирования.Вставить("Показатели", Результат[1].Выгрузить());
	
	Возврат ДанныеДляСторнирования;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

Процедура УстановитьДатыПолученияДоходовПоОплатеТруда(Движения, ДатаУдержанияИсчисленногоНалога, ПериодРегистрации) Экспорт 
	
	ДатаПолученияДохода = ?(НачалоМесяца(ПериодРегистрации) = НачалоМесяца(ДатаУдержанияИсчисленногоНалога),
		ДатаУдержанияИсчисленногоНалога, КонецМесяца(ПериодРегистрации));
		
	ОплатаТруда = УчетНДФЛРасширенный.КодыДоходовОплатыТруда();
	Для Каждого Движение Из Движения.СведенияОДоходахНДФЛ Цикл
		Если ОплатаТруда.Найти(Движение.КодДохода) <> Неопределено Тогда
			Движение.ДатаПолученияДохода = ДатаПолученияДохода;
		КонецЕсли;
	КонецЦикла;
	
	Движения.СведенияОДоходахНДФЛ.Записать();
	Движения.СведенияОДоходахНДФЛ.Записывать = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецЕсли
