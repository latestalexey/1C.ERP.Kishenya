&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

&НаКлиенте
Перем СотрудникУдаляемойСтроки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
		
		// СтандартныеПодсистемы.ВерсионированиеОбъектов
		ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
		
		// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
		
		// СтандартныеПодсистемы.Печать
		УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
		// Конец СтандартныеПодсистемы.Печать
		
		// СтандартныеПодсистемы.Свойства
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли; 
	
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда  // форма нового
		ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", Ложь, Ложь, Ложь);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма);
	УстановитьПривилегированныйРежим(Ложь);
	
	НовыйДокумент = Параметры.Ключ.Пустая();
	
	Если НовыйДокумент Тогда
		
		Если Параметры.Свойство("СтрокаСписочногоДокумента") Тогда
			
			Параметры.Свойство("АдресСпискаПодобранныхСотрудников", АдресСпискаПодобранныхСотрудников);
			
			РедактированиеСтрокиСписочногоДокумента = Истина;
			
			СтрокаСписочногоДокумента = Параметры.СтрокаСписочногоДокумента;
			СсылкаНаОбъект = СтрокаСписочногоДокумента.СсылкаНаОбъект;
			СсылкаНаИсправленныйДокумент = СтрокаСписочногоДокумента.ИсправленныйДокумент;
			
			Если СтрокаСписочногоДокумента.Свойство("ЗаполнениеВыполнено") Тогда
				ЗаполнениеВыполнено = СтрокаСписочногоДокумента.ЗаполнениеВыполнено;
			КонецЕсли; 
			
			ЗарплатаКадрыРасширенныйКлиентСервер.ЗаполнитьЗначенияЗаполненныхСвойств(Объект, СтрокаСписочногоДокумента);
			
			ТабличныеЧастиОбъекта = СтрокаСписочногоДокумента.ТабличныеЧасти;
			Для каждого ОписаниеТабличнойЧасти Из ТабличныеЧастиОбъекта Цикл
				
				Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
					Продолжить;
				КонецЕсли; 
				
				Для каждого СтрокаТЧ Из ОписаниеТабличнойЧасти.Значение Цикл
					ЗаполнитьЗначенияСвойств(Объект[ОписаниеТабличнойЧасти.Ключ].Добавить(), СтрокаТЧ);
				КонецЦикла;
				
			КонецЦикла;
			
			ПриПолученииДанныхНаСервере();
			
			ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет; 
			АвтоЗаголовок = Ложь;
			
			Заголовок = НСтр("ru='Увольнение';uk='Звільнення'");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ВыплатаРасчетчикГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"МесяцОрганизация",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ДатаНомерГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПодписиГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ПодвалДокументаГруппа",
				"Видимость",
				Ложь);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КоманднаяПанельФормы",
				"Видимость",
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"ОК",
				"КнопкаПоУмолчанию",
				Истина);
			
		Иначе
			
			КадровыйУчетРасширенный.ПроверитьПравоИнтерактивногоСозданияКадровыхПриказовСотрудника();
			
			// Очистим реквизит Сотрудник, если он уже уволен.
			Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Параметры.ЗначениеКопирования.Проведен Тогда
				Объект.Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
				Объект.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			КонецЕсли; 
			
			СсылкаНаИсправленныйДокумент = Объект.ИсправленныйДокумент;
			Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения)
				И Не ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
				Объект.ДатаУвольнения = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
				Объект.ПериодРегистрации = НачалоМесяца(Объект.ДатаУвольнения);
			КонецЕсли;
			
			// Заполнение нового документа.
			ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный, Месяц",
				"Объект.Организация",
				"Объект.Ответственный",
				"Объект.ПериодРегистрации");
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
			
			ЗаполнитьДанныеФормыПоОрганизации();
			
			ПриПолученииДанныхНаСервере();
			
			Если ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
				ДатаУвольненияПриИзмененииНаСервере();
			КонецЕсли; 
			
			Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)), Ложь) Тогда
				
				ВремяНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
				РассчитатьНачисленияНаСервере();
				ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("РасчетДокументаУвольнение", ВремяНачалаЗамера);
				
			Иначе
				ОчиститьРассчитанныеДанные();
				ПерезаполнятьСреднийЗаработок = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СсылкаНаИсправленныйДокумент = Объект.ИсправленныйДокумент;
		Если Параметры.Свойство("ВыполнитьПерезаполнениеСведенийОСреднемЗаработке") Тогда
			
			ПерезаполнятьСреднийЗаработок = Истина;
			Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)), Ложь) Тогда
				
				ВремяНачалаЗамера = ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени();
				РассчитатьНачисленияНаСервере();
				ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени("РасчетДокументаУвольнение", ВремяНачалаЗамера);
				
			Иначе
				ОчиститьРассчитанныеДанные();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НадписьМесяцевВыплатыДенежногоСодержания = НСтр("ru='мес.';uk='міс.'");
	
	ОпределитьВидУчетаВремениДляСредней();

	ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		
		Если Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'");
			Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемФормыРедактированияСтрокиДокументаЗавершение", ЭтотОбъект);
			
			ПоказатьВопрос(Оповещение, ТекстВОпроса, РежимДиалогаВопрос.ДаНетОтмена);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		Если ЖдатьЗакрытияФормыУведомления Тогда
			ЖдатьЗакрытияФормыУведомления = Ложь;
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ЗаполнениеВыполнено = Ложь;
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если РасчетНеобходимоВыполнить Тогда
		РассчитатьНачисленияНаКлиенте();
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПроведениеДокументаУвольнение");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РеквизитыВДанные(ТекущийОбъект); 
	Если ЗаполнениеВыполнено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыСреднегоЗаработка", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыЗарплаты", Истина);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеВРеквизиты();
	
	СохраняемыеЗначения = Новый Структура;
	СохраняемыеЗначения.Вставить("Бухгалтер", ТекущийОбъект.Бухгалтер);
	СохраняемыеЗначения.Вставить("РаботникКадровойСлужбы", ТекущийОбъект.РаботникКадровойСлужбы);
	СохраняемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", ТекущийОбъект.ДолжностьРаботникаКадровойСлужбы);
	СохраняемыеЗначения.Вставить("Исполнитель", ТекущийОбъект.Исполнитель);
	СохраняемыеЗначения.Вставить("ДолжностьИсполнителя", ТекущийОбъект.ДолжностьИсполнителя);
	
	ЗарплатаКадры.СохранитьЗначенияЗаполненияОтветственныхРаботников(ТекущийОбъект.Организация, СохраняемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Проведен", ЭтаФорма.Объект.Проведен);
	ПараметрыОповещения.Вставить("ПомеченНаУдаление", ЭтаФорма.Объект.ПометкаУдаления);
	ПараметрыОповещения.Вставить("Результат", ЭтаФорма.СсылкаНаОбъект);
	ПараметрыОповещения.Вставить("Ответственный", ЭтаФорма.Объект.Ответственный);
	ПараметрыОповещения.Вставить("ДатаДокумента", ЭтаФорма.Объект.Дата);
	ПараметрыОповещения.Вставить("НомерДокумента", ЭтаФорма.Объект.Номер);
	ПараметрыОповещения.Вставить("Сотрудник", ЭтаФорма.Объект.Сотрудник);
	Оповестить("ПослеЗаписиОбъектаСвязанногоСПереводомКДругомуРаботодателю", ПараметрыОповещения, ЭтаФорма);
	
	КадровыйУчетКлиент.ОповеститьОбИзмененииРабочегоМеста(ЭтаФорма);
	
	Если Объект.Проведен Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытьПослеПроведения", ЭтотОбъект);
		ЖдатьЗакрытияФормыУведомления = ЗарплатаКадрыРасширенныйКлиент.ПроверитьУволенныхОтветственныхЛиц(Объект.ФизическоеЛицо, Оповещение);
		
	КонецЕсли;
	
	Оповестить("Запись_Увольнение", СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		Оповестить("ИсправленДокумент", , СсылкаНаИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;

	Если ИспользуетсяРасчетЗарплаты Тогда
		Если ИмяСобытия = "ИзмененоРаспределениеИсточниковФинансирования" Тогда
			ЗарплатаКадрыРасширенныйКлиент.ОбработкаОповещенияИзмененияРаспределенияИсточниковФинансирования(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		ИначеЕсли ИмяСобытия = "ИсправленДокумент" И Источник = Объект.Ссылка Тогда
			ДанныеВРеквизиты();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ТекущийОбъект);
		
	Если РедактированиеСтрокиСписочногоДокумента Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверкаСтрокиСписочногоДокумента", Истина);
	КонецЕсли; 
	
	Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ОписаниеДокумента", КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)));
	ПараметрыДокумента.Вставить("ОписаниеТаблицФормы", КадровыйУчетРасширенныйКлиентСервер.СтруктураОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
	ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержаний(Отказ, ЭтаФорма, ПараметрыДокумента);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ИзменениеСотрудникаВФормеДокументаУвольнение");		
	
	СотрудникПриИзмененииНаСервере();
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

// Работа с месяцем начисления "строкой".
&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцНачисленияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДатаУвольненияПриИзменении(Элемент)
	
	ДатаУвольненияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияДнейЧасовВыходногоПособияПриИзменении()
	
	ДнейЧасовВыходногоПособияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияКоличествоМесяцевВыплатыДенежногоСодержанияПриИзменении()
	
	КоличествоМесяцевВыплатыДенежногоСодержанияПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейЧасовВыходногоПособияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДнейЧасовВыходногоПособияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоМесяцевВыплатыДенежногоСодержанияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияКоличествоМесяцевВыплатыДенежногоСодержанияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьЗамещаласьМенее12МесяцевПриИзменении(Элемент)
	
	ВыполнитьРасчетНачислений();

КонецПроцедуры

&НаКлиенте
Процедура ПризнакКомпенсацииОтпускаПриИзменении(Элемент)
	
	ПризнакКомпенсацииОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейКомпенсацииУдержанияОтпускаПриИзменении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаКомпенсацииОсновногоОтпускаПриИзменении(Элемент)
	
	ВидРасчетаКомпенсацииОсновногоОтпускаПриИзмененииНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходноеПособиеПриИзменении(Элемент)
	
	УстановитьИспользованиеСреднечасовогоЗаработка();	
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗаКоторыйПредоставляетсяОтпускExtendedTooltipНажатие(Элемент)
	СтандартнаяОбработка = Ложь;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.Сотрудники", "СправкаПоОтпускамСотрудника",
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), ЭтаФорма,
	Новый Структура("ДатаОстатков, ЭтоРасчетПриУвольнении", Объект.ДатаУвольнения, Истина));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПорядокВыплатыПриИзменении(Элемент)
	
	ПорядокВыплатыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументРассчитанПриИзменении(Элемент)
	ДокументРассчитанПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	РуководительПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	ГлавныйБухгалтерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерПриИзменении(Элемент)
	БухгалтерПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РаботникКадровойСлужбыПриИзменении(Элемент)
	РаботникКадровойСлужбыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	ИсполнительПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Сверхурочно1_5ПриИзменении(Элемент)
	ВыполнитьРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура Сверхурочно2ПриИзменении(Элемент)
	ВыполнитьРасчетНачислений();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненностьДанныхИнформационныйТекстОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УчетСреднегоЗаработкаКлиент.ПоказатьПричиныПерерасчетаСреднегоЗаработка(СсылкаНаОбъект,
		СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДополнительныеОтпуска

&НаКлиенте
Процедура ДополнительныеОтпускаВидОтпускаПриИзменении(Элемент)
	
	ДополнительныеОтпускаВидОтпускаПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаВидРасчетаКомпенсацииПриИзменении(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзменении(Элемент)
	
	ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзмененииНаСервере(Элементы.ДополнительныеОтпуска.ТекущаяСтрока);
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если ИспользуетсяРасчетЗарплаты И РегистрацияНачисленийДоступна Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПризнакКомпенсацииУдержания) Тогда
			Элемент.ТекущиеДанные.ПризнакКомпенсацииУдержания = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные");
		КонецЕсли;
		
		УстановитьТипЗначенияВидаРасчета(Элементы.ДополнительныеОтпуска.ТекущиеДанные, "ПризнакКомпенсацииУдержания", "ВидРасчетаКомпенсацииУдержания");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПризнакКомпенсацииУдержанияДополнительныхОтпусковПриИзменении(Элемент)
	Если ИспользуетсяРасчетЗарплаты И РегистрацияНачисленийДоступна Тогда
		УстановитьТипЗначенияВидаРасчета(Элементы.ДополнительныеОтпуска.ТекущиеДанные, "ПризнакКомпенсацииУдержания", "ВидРасчетаКомпенсацииУдержания");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеОтпускаПослеУдаления(Элемент)
	
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Начисления

&НаКлиенте
Процедура НачисленияПриИзменении(Элемент)
	НачисленияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НачисленияПриИзмененииНаСервере()
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Начисления.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
		Элементы.Начисления.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПередУдалением(Элемент, Отказ)
	СотрудникУдаляемойСтроки = Элементы.Начисления.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРезультатПриИзменении(Элемент)
	ОбновитьНачисленоИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Пособия

&НаКлиенте
Процедура ПособияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ПособияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Пособия", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПередУдалением(Элемент, Отказ)
	СотрудникУдаляемойСтроки = Элементы.Пособия.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Пособия.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;

	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Пособия", Элементы.Пособия.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПослеУдаления(Элемент) 
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПособияНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Пособия.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ПособияПерерасчет

&НаКлиенте
Процедура ПособияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ПособияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "ПособияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПередУдалением(Элемент, Отказ)
	СотрудникУдаляемойСтроки = Элементы.ПособияПерерасчет.ТекущиеДанные.Сотрудник;
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ПособияПерерасчет.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;

	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "ПособияПерерасчет", Элементы.ПособияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПослеУдаления(Элемент) 
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.ПособияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Удержания

&НаКлиенте
Процедура УдержанияПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Удержания", Истина);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияУдержаниеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыРасширенныйКлиент.УстановитьОграничениеТипаДокументаУдержанияПоКатегории(
		Элемент, Элементы.Удержания.ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Удержания.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
	КонецЕсли;

	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Удержания", Элементы.Удержания.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияРезультатПриИзменении(Элемент)
	ОбновитьУдержаноИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УдержанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НДФЛ

&НаКлиенте
Процедура НДФЛПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриАктивизацииСтроки(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередНачаломИзменения(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПередУдалением(Элемент, Отказ)
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПослеУдаления(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьСтатьиФинансирования Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ОтражениеЗарплатыВБухучетеКлиентСерверРасширенный.ПерераспределитьНДФЛ(ТекущиеДанные, РаботаВБюджетномУчреждении);
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна), , Ложь);
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НДФЛПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.НДФЛ.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НДФЛ", Элементы.НДФЛ.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НДФЛНалогПриИзменении(Элемент)
	ОбновитьУдержаноИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НДФЛВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Начисления перерасчет.

&НаКлиенте
Процедура НачисленияПерерасчетПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	РасчетЗарплатыРасширенныйКлиент.ПередУдалениемСтрокиПерерасчета(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.НачисленияПерерасчет.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетРезультатПриИзменении(Элемент)
	ОбновитьПерерасчетИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Погашение займов.

&НаКлиенте
Процедура ПогашениеЗаймовПриИзменении(Элемент)
	
	ПогашениеЗаймовПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ПогашениеЗаймов.ТекущиеДанные.ФизическоеЛицо = Объект.ФизическоеЛицо;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПогашениеЗаймовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПогашениеЗаймов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЛьготы

&НаКлиенте
Процедура ЛьготыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("ЛьготыВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриАктивизацииСтроки(Элемент)
	
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Льготы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПередУдалением(Элемент, Отказ)
	
	СотрудникУдаляемойСтроки = Элементы.Льготы.ТекущиеДанные.Сотрудник;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Льготы.ТекущиеДанные.Сотрудник = Объект.Сотрудник;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Льготы", Элементы.Льготы.ТекущиеДанные, НоваяСтрока, Копирование);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПослеУдаления(Элемент)
	
	РассчитатьСотрудника(СотрудникУдаляемойСтроки, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыНачислениеПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыРезультатПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыДатаНачалаПриИзменении(Элемент)
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыДатаОкончанияПриИзменении(Элемент)
	
	ОбновитьНачисленоИтог(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область Подключаемый_ОбработчикиСобытийЭлементовТаблицыКадровыйРезерв

&НаКлиенте
Процедура Подключаемый_КадровыйРезервПриАктивизацииСтроки(Элемент)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйРезервКлиент");
		МодульКлиент.КадровыйРезервПриАктивизацииСтрокиДляОбщихДокументов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, СсылкаНаОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(СсылкаНаОбъект, "Увольнение");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "Увольнение");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(СсылкаНаИсправленныйДокумент, "Увольнение");
КонецПроцедуры
// Конец ИсправлениеДокументов

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения)
	
	ПараметрыДляРаспределения.ОписаниеДокумента       = КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтаФорма));
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	ОтражениеЗарплатыВБухучетеРасширенный.РаспределитьЗависимыеРезультатыВФорме(ЭтаФорма, ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдержанияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НДФЛОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)), Ложь) Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РасчетДокументаУвольнение");
		РассчитатьНачисленияНаСервере();
	Иначе 
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда)
	
	ОчиститьСообщения();
	ОтменитьРучнуюКорректировкуНаСервере();
	РассчитатьСреднийЗаработок();
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект))) Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РасчетДокументаУвольнение");
		ОпределитьВидУчетаВремениДляСредней();

		РассчитатьНачисленияНаСервере(Истина);
		ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	Иначе 
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)	
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокЗавершение", ЭтотОбъект);
	УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаОбщий(ПараметрыРедактированияСреднегоЗаработка(КадровыйУчетРасширенныйКлиентСервер.ЭтоСреднечасовойЗаработокВДокументеУвольнение(), Ложь), ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда 	
		ПерезаполнятьСреднийЗаработок = Ложь;
		ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования);
		ВыполнитьРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокВыходногоПособия(Команда)	
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокВыходногоПособияЗавершение", ЭтотОбъект);
	УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаОбщий(ПараметрыРедактированияСреднегоЗаработка(ИспользуетсяСреднечасовойЗаработок, Истина), ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокВыходногоПособияЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт	

	Если РезультатРедактирования <> Неопределено Тогда
		ПерезаполнятьСреднийЗаработок = Ложь;
		ПеренестиДанныеУчетаСреднегоЗаработкаВыходногоПособияВДокумент(РезультатРедактирования);
		ВыполнитьРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежноеСодержание(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьОткрытьДенежноеСодержаниеЗавершение", ЭтотОбъект);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
		Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(Объект, "Увольнение","ЕжегодныйОтпуск", ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)),Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежноеСодержаниеВыходногоПособия(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьОткрытьДенежноеСодержаниеЗавершение", ЭтотОбъект);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
		Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(Объект, "Увольнение","ВыходноеПособие", ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)),Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОткрытьДенежноеСодержаниеЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда
		ПерезаполнятьСреднийЗаработок = Ложь;
		ВыполнитьРасчетНачислений();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРедактированияСреднегоЗаработка(ЭтоСреднечасовойЗаработок, ЭтоВыходноеПособие)	
	
	ПараметрыРедактирования = УчетСреднегоЗаработкаКлиентСервер.ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу();
	ПараметрыРедактирования.ДокументСсылка = СсылкаНаОбъект;
	ПараметрыРедактирования.Сотрудник = Объект.Сотрудник;
	ПараметрыРедактирования.Организация = Объект.Организация;
	ПараметрыРедактирования.ДатаНачалаСобытия = Объект.ДатаУвольнения;

	Если ЭтоУвольнениеВПоследнийДеньМесяца(Объект) Тогда
		ПараметрыРедактирования.ДатаНачалаСобытия = НачалоМесяца(ДобавитьМесяц(Объект.ДатаУвольнения, 1));
	КонецЕсли;
	
	Если ЭтоВыходноеПособие Тогда
		ПараметрыРедактирования.Начисление = Объект.ВыходноеПособие;
		ПараметрыРедактирования.НачалоПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияНачало;
		ПараметрыРедактирования.ОкончаниеПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияОкончание; 
		ПараметрыРедактирования.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010");
		ПараметрыРедактирования.ВидУчетаВремениДляСредней = Объект.ВидУчетаВремениДляСредней;
		ПараметрыРедактирования.СреднийЗаработок = Объект.СреднийЗаработокВыходногоПособия; 
		ПараметрыРедактирования.РучнаяКорректировкаСреднегоЗаработка = Объект.РучнаяКорректировкаСреднегоЗаработкаВыходногоПособия; 
	Иначе
		ПараметрыРедактирования.Начисление = Объект.ВидРасчетаКомпенсацииУдержанияОтпуска;
		СпособыРасчета = Новый Массив;
		ПараметрыРедактирования.СпособыРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням");
		ПараметрыРедактирования.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные");
		ПараметрыРедактирования.НачалоПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
		ПараметрыРедактирования.ОкончаниеПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаОкончание; 
		ПараметрыРедактирования.СреднийЗаработок = Объект.СреднийЗаработок; 
		ПараметрыРедактирования.РучнаяКорректировкаСреднегоЗаработка = Объект.РучнаяКорректировкаСреднегоЗаработка; 
	КонецЕсли;
	
	ПараметрыРедактирования.ЭтоСреднечасовойЗаработок = ЭтоСреднечасовойЗаработок;
	ПараметрыРедактирования.ФиксПериодРасчета = Объект.ФиксПериодРасчетаСреднегоЗаработка;
	
	Если ЭтоУвольнениеВПоследнийДеньМесяца(Объект)
		 Или ЭтоУвольнениеБудущимМесяцем(Объект) 
		 Или ЭтоУвольнениеВМесяцеПриемаНаРаботу(Объект.ДатаУвольнения, ДатаПриемаНаРаботу) Тогда
		// Если это увольнение в последний день месяца передаем данные документа для проведения, 
		// чтобы в случае перечитывания в калькуляторе учета прежде записать начисления документа в учет,
		// это нужно, т.к. при увольнении последним днем месяца текущий месяц входит в базу расчета среднего заработка.
		ДанныеДляПроведения = ДанныеДокументаДляПроведения(ДанныеДляПроведения);
		// Уничтожаем менеджер временных таблиц.
		ДанныеДляПроведения.МенеджерВременныхТаблиц = Неопределено;
		ПараметрыРедактирования.ДокументВладелецДанныеАдрес = ПоместитьВоВременноеХранилище(ДанныеДляПроведения, Новый УникальныйИдентификатор);
	КонецЕсли;
	Если ЭтоВыходноеПособие Тогда
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДанныхСреднегоЗаработкаПоДокументуДляВыходногоПособия(Объект, ПараметрыРедактирования);
	Иначе
		УчетСреднегоЗаработка.ЗаполнитьТаблицыДанныхСреднегоЗаработкаПоДокументу(Объект, ПараметрыРедактирования);
	КонецЕсли;
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

&НаСервере
Функция ДанныеДокументаДляПроведения(ДанныеДляПроведения)
	
	// Чтобы применить методы, осуществляющие сбор данных для проведения запишем документ.
	ОтменятьТранзакцию = Ложь;
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьТранзакцию = Истина;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РеквизитыВДанные(ДокументОбъект);
	Если Не СсылкаНаОбъект.Пустая() Тогда
		ДокументОбъект = ДокументОбъект.Скопировать();
		ДокументОбъект.Дата = Объект.Дата;
	КонецЕсли;
	ВременнаяСсылка = Документы.Увольнение.ПолучитьСсылку();
	ДокументОбъект.УстановитьСсылкуНового(ВременнаяСсылка);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	// Сбор данных для проведения
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.Увольнение.СоздатьВТКадровыеДанныеУвольняемыхСотрудников(МенеджерВременныхТаблиц, ВременнаяСсылка);
	
	ДанныеДляПроведения = Документы.Увольнение.ДанныеДляПроведения(ВременнаяСсылка, МенеджерВременныхТаблиц, ДокументОбъект.ПериодРегистрации, ДокументОбъект.Организация);
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ДокументСсылка", ВременнаяСсылка);
	ДанныеДляПроведения.Вставить("ПериодРегистрации", ДокументОбъект.ПериодРегистрации);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

&НаКлиенте
Процедура НачисленияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПособияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПособияПерерасчетПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ЛьготыПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ЛьготыПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура УдержанияПодробно(Команда)
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.УдержанияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
КонецПроцедуры
&НаКлиенте
Процедура ОК(Команда)
	
	Отказ = Ложь;
	Если Модифицированность Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		Иначе
			ОписаниеДокумента = СтруктураСОписаниемДокумента();
			Модифицированность = Ложь;
		КонецЕсли;
		
	Иначе
		ОписаниеДокумента = Неопределено;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Закрыть(ОписаниеДокумента);
	КонецЕсли; 
	
КонецПроцедуры

#Область Подключаемый_КадровыйРезерв

&НаКлиенте
Процедура Подключаемый_КадровыйРезервОставить(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйРезервКлиент");
		МодульКлиент.КадровыйРезервОставитьДляОбщихДокументов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КадровыйРезервИсключить(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("КадровыйРезервКлиент");
		МодульКлиент.КадровыйРезервИсключитьДляОбщихДокументов(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Функция ДанныеДляПоказателейСверхурочных()
	
	ЗначенияПоказателей = ТаблицаПоказателейСверхурочных();
	
	ПереработаноПоСуммированномуУчетуВПределах2Часов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчетуВПределах2Часов");
	ПереработаноПоСуммированномуУчету = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПереработаноПоСуммированномуУчету");
	Если ПереработаноПоСуммированномуУчетуВПределах2Часов = Неопределено ИЛИ ПереработаноПоСуммированномуУчету = Неопределено Тогда
		Возврат ЗначенияПоказателей;
	КонецЕсли;
	
	Если Объект.Сверхурочно1_5 > 0 Тогда
		НовыйПоказатель = ЗначенияПоказателей.Добавить();
		НовыйПоказатель.ПериодДействия = НачалоМесяца(Объект.ДатаУвольнения);
		НовыйПоказатель.Сотрудник = Объект.Сотрудник;
		НовыйПоказатель.Показатель = ПереработаноПоСуммированномуУчетуВПределах2Часов;
		НовыйПоказатель.Организация = Объект.Организация;
		НовыйПоказатель.Значение = Объект.Сверхурочно1_5;
	КонецЕсли;
	
	Если Объект.Сверхурочно1_5 + Объект.Сверхурочно2 > 0 Тогда
		НовыйПоказатель = ЗначенияПоказателей.Добавить();
		НовыйПоказатель.ПериодДействия = НачалоМесяца(Объект.ДатаУвольнения);
		НовыйПоказатель.Сотрудник = Объект.Сотрудник;
		НовыйПоказатель.Показатель = ПереработаноПоСуммированномуУчету;
		НовыйПоказатель.Организация = Объект.Организация;
		НовыйПоказатель.Значение = Объект.Сверхурочно1_5 + Объект.Сверхурочно2;
	КонецЕсли;
	
	Возврат ЗначенияПоказателей;

КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаПоказателейСверхурочных()

	ЗначенияПоказателей = Новый ТаблицаЗначений;
	ЗначенияПоказателей.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ЗначенияПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ЗначенияПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ЗначенияПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗначенияПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Возврат ЗначенияПоказателей;

КонецФункции


#Область Подключаемый_КадровыйРезерв

&НаСервере
Процедура ЗаполнитьКадровыйРезерв()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульФормы = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервФормы");
		ПараметрыЗаполнения = МодульФормы.ПараметрыЗаполненияПозицииРезерваПоСотрудникуДляОбщегоДокумента(Объект, Ложь);
		МодульФормы.ЗаполнитьПозицииРезерваПоСотруднику(ПараметрыЗаполнения);
		МодульКлиентСервер = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервКлиентСервер");
		МодульКлиентСервер.ЗаполнитьВторичныеДанныеКадровогоРезерва(Объект.КадровыйРезерв);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти 


#Область ПриПолученииДанныхНаСервере

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(НовыйДокумент);
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(НовыйДокумент);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(НовыйДокумент)
	
	УстановитьДоступностьРегистрацииНачислений();
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьФункциональныеОпцииФормы();
	
	// Устанавливаем значения реквизитов формы.
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	ИспользоватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный");
	ДоступенВводНового = Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная", , Ложь);
	НадписьДнейЧасов = НСтр("ru='дн.';uk='дн.'");
	НадписьДнейЧасовВыходногоПособия = НадписьДнейЧасовВыходногоПособия();
	ПерезаполнятьСреднийЗаработок = Истина;
	
	УстановитьИспользованиеСреднечасовогоЗаработка();
	УстановитьИспользованиеОплатыПереработокСуммированногоУчета();
	ЗаполнитьИнформациюЗаполненностиДанных();
	ЗаполнитьСтруктуруРеквизитовИСпособовРасчетаОтпуска();
	
	// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
	ДополнитьФорму(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(НовыйДокумент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Досоздаем форму.
	ДополнитьФорму(Ложь);
	ДополнитьФорму();
	
	ПрочитатьРеквизитыИсправления(НовыйДокумент);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Чтение данных.
	ДанныеВРеквизиты();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
	ОбновитьИтоги(ЭтаФорма);
	Если ИспользуетсяРасчетЗарплаты И Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.ДокументРассчитан Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	ЗаполнитьВторичныеДанныеСотрудникаВФорме(НовыйДокумент);
	
	// Добавление элементов форм.
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
		
	// Установка свойств элементов формы.
	ОбновитьФормуПоВидуДоговора();
	
	Если РегистрацияНачисленийДоступна Тогда
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	УстановитьОтметкуНезаполненногоДнейКомпенсацииУдержанияОтпуска();
	УстановитьВидимостьПерерасчетов();
	УстановитьВидимостьРасчетныхПолей();
	УстановитьВидимостьСуммированногоУчета();
	УстановитьСтраницуОсновногоСреднегоЗаработка();
	СформироватьНадписьОстаткиОтгулов();
	УстановитьТипОснованияУвольнения();
	
	УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.ПериодРегистрации);
	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	Если Не РедактированиеСтрокиСписочногоДокумента Тогда
		НастроитьОтображениеГруппыПодписантов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложеного создания.
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		
		Если РегистрацияНачисленийДоступна Тогда
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
			МодульФормы = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервФормы");
			МодульФормы.ДополнитьФормуДокументаКадровымРезервом(ЭтаФорма);
		КонецЕсли;
		
		// Создание реквизитов.
		ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтаФорма, НСтр("ru='Расчет утвердил';uk='Розрахунок затвердив'"), "РасчетчикГруппа", "ДокументРассчитан", "Рассчитал");
		ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
		КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна), "Удержания", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(РегистрацияНачисленийДоступна), "", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыСохраняемоеДенежноеСодержание(), "Начисления", , Ложь,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		КонецЕсли;
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтотОбъект, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна), "ЛьготыАвтоКоманды",,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(
			ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(
			ЭтаФорма, Истина, Ложь, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(
			ЭтаФорма,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, Объект.ПериодРегистрации);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРассчитанныеДанные()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Объект.Начисления.Очистить();
	Объект.НачисленияПерерасчет.Очистить();
	Объект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
	Объект.Пособия.Очистить();
	Объект.ПособияПерерасчет.Очистить();
	Объект.Показатели.Очистить();
	Объект.Удержания.Очистить();
	Объект.ПогашениеЗаймов.Очистить();
	Объект.ВзносыФОТ.Очистить();
	Объект.Льготы.Очистить();
	
	Объект.НДФЛ.Очистить();
	
	ОбновитьИтоги(ЭтотОбъект);
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ЗаполнениеИРасчетНачислений

&НаКлиенте
Процедура ВыполнитьРасчетНачислений()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьНачисленияНаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисленияНаКлиенте()
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)), Ложь) Тогда
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("РасчетДокументаУвольнение");
		РассчитатьНачисленияНаСервере();
		ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	Иначе 
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область РассчитатьНачисленияНаСервере
&НаСервере
Процедура ОтменитьРучнуюКорректировкуНаСервере()
	
	Объект.РучнаяКорректировкаСреднегоЗаработка = Ложь;
	Объект.РучнаяКорректировкаСреднегоЗаработкаВыходногоПособия = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере(ВыводитьСообщения = Ложь)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьРассчитанныеДанные();
	ЗаполнитьВидыРасчетовПоВидамОтпусков();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Документ = РеквизитФормыВЗначение("Объект");
	Отказ = Ложь;
	Документы.Увольнение.ПроверитьЗаполнениеКомпенсацииДополнительныхОтпусков(Документ, Отказ, ВыводитьСообщения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска)
		И Объект.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать Тогда
		Если ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска") Тогда
			Отказ = Истина;
			Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан вид расчета компенсации (удержания) отпуска';uk='Не зазначено вид розрахунку компенсації (утримання) відпустки'"),,"Объект.ВидРасчетаКомпенсацииУдержанияОтпуска");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВыходноеПособие)
		И ЗначениеЗаполнено(Объект.ДнейЧасовВыходногоПособия) 
		И ПолучитьФункциональнуюОпцию("ВыбиратьВидНачисленияВыходногоПособия") Тогда
		Отказ = Истина;
		Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений  Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан вид расчета выходного пособия';uk='Не зазначено вид розрахунку вихідної допомоги'"),,"Объект.ВыходноеПособие");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПланируемаяДатаВыплаты)
		И (Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет 
		Или Объект.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс) Тогда
		Отказ = Истина;
		Если ВыводитьСообщения И ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена дата выплаты';uk='Не заповнено дата виплати'"),,"Объект.ПланируемаяДатаВыплаты");
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьНаСервере();
		
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
		ОбновитьИтоги(ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	УстановитьСвойствоДокументРассчитан();
	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРасчетовПоВидамОтпусков()
		
	ДополнительныйОтбор = Новый Структура("ВидОтпуска");

	// Определим категории начислений.
	Если Объект.РасчетДенежногоСодержания Тогда
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска");
		КатегорияУдержания  = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ДенежноеСодержаниеУдержаниеЗаНеотработанныеДниОтпуска");
	Иначе
		КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска");
		КатегорияУдержания 	= ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.УдержаниеЗаНеотработанныеДниОтпуска");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
		
		ДополнительныйОтбор.Вставить("ВидОтпуска", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));

		Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
			
			Если ТипЗнч(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
				ТекущаяКатегория = Неопределено;
			Иначе
				ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, "КатегорияНачисленияИлиНеоплаченногоВремени");
			КонецЕсли;
			Если ТекущаяКатегория <> КатегорияНачисления Тогда
				РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, КатегорияНачисления, ДополнительныйОтбор);
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска) <> Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
				ТекущаяКатегория = Неопределено;
			Иначе
				ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, "КатегорияУдержания");
			КонецЕсли;
			Если ТекущаяКатегория <> КатегорияУдержания Тогда
				РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, КатегорияУдержания, ДополнительныйОтбор);
			КонецЕсли;
			
		КонецЕсли;
		
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			
			ДополнительныйОтбор.Вставить("ВидОтпуска", ДополнительныйОтпуск.ВидОтпуска);
			
			Если ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
				Если ТипЗнч(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
					ТекущаяКатегория = Неопределено;
				Иначе
					ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, "КатегорияНачисленияИлиНеоплаченногоВремени");
				КонецЕсли;
				Если ТекущаяКатегория <> КатегорияНачисления Тогда
					РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, КатегорияНачисления, ДополнительныйОтбор);
				КонецЕсли;
			Иначе
				Если ТипЗнч(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания) <> Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
					ТекущаяКатегория = Неопределено;
				Иначе
					ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, "КатегорияУдержания");
				КонецЕсли;
				Если ТекущаяКатегория <> КатегорияУдержания Тогда
					РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, КатегорияУдержания, ДополнительныйОтбор);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		НадоЗаполнятьВидРасчета = Объект.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать 
					И НЕ ЗначениеЗаполнено(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска);
		
		Если НадоЗаполнятьВидРасчета Тогда
			ДополнительныйОтбор.Вставить("ВидОтпуска", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
			Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
				РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, КатегорияНачисления, ДополнительныйОтбор);
			Иначе	
				РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, КатегорияУдержания, ДополнительныйОтбор);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ДополнительныйОтпуск Из Объект.ДополнительныеОтпуска Цикл
			НадоЗаполнятьВидРасчета = ДополнительныйОтпуск.ПризнакКомпенсацииУдержания <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать 
			И НЕ ЗначениеЗаполнено(ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания);
			Если НадоЗаполнятьВидРасчета Тогда
				ДополнительныйОтбор.Вставить("ВидОтпуска", ДополнительныйОтпуск.ВидОтпуска);
				Если ДополнительныйОтпуск.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
					РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, КатегорияНачисления, ДополнительныйОтбор);									
				Иначе	
					РасчетЗарплатыРасширенныйФормы.ЗаполнитьУдержаниеВФормеДокументаПоРоли(ЭтаФорма, ДополнительныйОтпуск.ВидРасчетаКомпенсацииУдержания, КатегорияУдержания, ДополнительныйОтбор);									
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудник, ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)), ДополнительныеПараметры);
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	// Метод создает строки в коллекциях начислений и удержаний,
	// строки остальных коллекций заполняются при расчете.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник);
	
	Организация = Объект.Организация;
	МесяцНачисления = НачалоМесяца(Объект.ПериодРегистрации);
	// Если дата увольнения раньше начала месяца начисления, сдвигаем период расчета.
	НачалоПериода = ?(Объект.ДатаУвольнения < МесяцНачисления, НачалоМесяца(Объект.ДатаУвольнения), МесяцНачисления);
	// Если дата увольнения в будущем месяце, то ограничиваем период расчета месяцем регистрации.
	ОкончаниеПериода = Мин(КонецМесяца(МесяцНачисления), КонецДня(Объект.ДатаУвольнения));
	
	Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
		КонецЕсли;
		Отказ = Ложь;
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ИсправлениеПериодическихСведений.ПолучениеПрежнегоИсправленного(ДокументОбъект, Отказ, РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ДокументОбъект, Отказ, РежимПроведенияДокумента.Неоперативный, Документы.Увольнение.ПолучитьСсылку(), СсылкаНаИсправленныйДокумент);
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияРегистраОстатков(ДокументОбъект.Движения.ЗанятыеПозицииШтатногоРасписания, СсылкаНаИсправленныйДокумент);
	КонецЕсли;
	
	// Если используется суммированный учет времени - перед расчетом заработной платы необходимо записать показатели расчета заработной платы.
	Если ИспользоватьОплатуПереработокСуммированногоУчета Тогда
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
		КонецЕсли;
		// Получим набор записей.
		Если СсылкаНаОбъект.Пустая() Тогда
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.Увольнение);
		Иначе
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.Увольнение, СсылкаНаОбъект);
		КонецЕсли;
		// Запишем движения по значениям оперативных показателей.
		ЗаписатьЗначенияПоказателейРасчетаЗарплаты(НаборыЗаписей, ДанныеДляПоказателейСверхурочных());
	КонецЕсли;
	
	// Начисления
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		ДанныеДляНачисления = Модуль.ДанныеДляНачисленияЗарплатыИЛьгот(
			Организация, НачалоПериода, ОкончаниеПериода, МесяцНачисления, , Сотрудники, , , , СсылкаНаОбъект, Истина, Объект.ИсправленныйДокумент);
		СтрокиНачислений = ДанныеДляНачисления.Начисления;	
		СтрокиЛьгот = ДанныеДляНачисления.Льготы;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиНачислений, Объект.Начисления);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиЛьгот, Объект.Льготы);
	Иначе 	
		СтрокиНачислений = РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплаты(
			Организация, НачалоПериода, ОкончаниеПериода, МесяцНачисления, , Сотрудники, , , , СсылкаНаОбъект, Истина, Ложь, Объект.ИсправленныйДокумент);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиНачислений, Объект.Начисления);
	КонецЕсли;

	// Пособия
	СтрокиПособий = РасчетЗарплатыРасширенный.ДанныеДляНачисленияПособий(
		Организация, НачалоПериода, ОкончаниеПериода, МесяцНачисления, , Сотрудники, , СсылкаНаОбъект);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПособий, Объект.Пособия);
	
	// Погашение займов
	СтрокиПогашениеЗаймов = РасчетЗарплатыРасширенный.РезультатРасчетаЗаймов(
		Организация, ОкончаниеПериода, СсылкаНаОбъект, Сотрудники);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиПогашениеЗаймов, Объект.ПогашениеЗаймов);
	
	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
	
	Сотрудники = ЗарплатаКадрыРасширенный.СотрудникиТаблицДокумента(Объект, ОписанияТаблиц, Сотрудники); 
	
	// Если увольнение происходит в последний день месяца, 
	// то заработок за этот месяц также следует включить в базу среднего заработка при расчете компенсации за отпуск.
	Если ЭтоУвольнениеВПоследнийДеньМесяца(Объект) 
		Или ЭтоУвольнениеБудущимМесяцем(Объект)
		Или ЭтоУвольнениеВМесяцеПриемаНаРаботу(Объект.ДатаУвольнения, ДатаПриемаНаРаботу) Тогда
		
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
		КонецЕсли;
		
		// Выполняем расчет начислений для регистрации их в среднем заработке.
		СформироватьЗаписиПерерасчета();
		ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
		ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
		РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудники, ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)));
		
		// Для корректной регистрации данных среднего заработка нужно прежде зарегистрировать начисления и отработанное время.
		ДанныеДляПроведения = ДанныеДокументаДляПроведения(ДанныеДляПроведения);
		
		// Регистрируем данные документа в учете.
		Отказ = Ложь;
		// Смоделируем коллекцию движений документа.
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.Увольнение, ДанныеДляПроведения.ДокументСсылка);
		// Регистрация начислений
		РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(
			НаборыЗаписей, Отказ, Объект.Организация, КонецМесяца(Объект.ПериодРегистрации), ДанныеДляПроведения.Начисления, ДанныеДляПроведения.ПоказателиНачислений, Истина);
		// Регистрация отработанного времени в учете начислений и удержаний.
		УчетНачисленнойЗарплаты.ЗарегистрироватьОтработанноеВремя(
			НаборыЗаписей, Отказ, Объект.Организация, Объект.ПериодРегистрации, ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам, Истина);
		// Определяем исключаемый регистратор, который будет использоваться при обновлении корректировок.	
		НаборыЗаписей.ДанныеОВремениДляРасчетаСреднегоОбщий.ДополнительныеСвойства.Вставить("ИсключаемыйРегистратор", СсылкаНаОбъект);
		// Учет среднего заработка
		УчетСреднегоЗаработка.ЗарегистрироватьДанныеСреднегоЗаработка(НаборыЗаписей, Отказ, ДанныеДляПроведения.НачисленияДляСреднегоЗаработка, Истина);
			
		// Обновляем данные среднего заработка в документе с учетом зарегистрированных начислений.
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
	Иначе
		Если ПерезаполнятьСреднийЗаработок Тогда
			ОбновитьДанныеДляРасчетаСреднего();
		КонецЕсли;
	КонецЕсли;
	
	ПерезаполнятьСреднийЗаработок = Истина;
	
	// Дополняем таблицу начислений строками специализированных.
	ЗаполнитьВыходноеПособие();
	ЗаполнитьКомпенсацииЗаОтпуск();
	
	// Удержания (рассчитываем, если выплата в межрасчетный период).
	СтрокиУдержаний = РасчетЗарплатыРасширенный.ДанныеДляУдержанияЗарплаты(
		Организация, Объект.ПериодРегистрации, КонецМесяца(Объект.ПериодРегистрации), , Сотрудники, Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиУдержаний, Объект.Удержания);
	
	// Дополняем таблицу удержаний.
	ЗаполнитьУдержанияЗаОтпуск();
	
	ЗаполнитьСторноУдержанийЗаОтпуск();	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
	    Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ДополнитьТаблицуУдержанийДаннымиПоУченическимДоговорамСотрудника(ЭтаФорма);
	КонецЕсли;
	
	Если Не ЭтоУвольнениеВПоследнийДеньМесяца(Объект) 
		И Не ЭтоУвольнениеБудущимМесяцем(Объект)
		И Не ЭтоУвольнениеВМесяцеПриемаНаРаботу(Объект.ДатаУвольнения, ДатаПриемаНаРаботу) Тогда
		
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
			ОтменятьТранзакцию = Истина;
		КонецЕсли;
		// Для корректного расчета начислений в кадровом учете должны быть размещены сведения об увольнении сотрудника.
		// Формируем набор движений для кадрового события увольнения.
		// Не делаем этого в случае увольнения последним днем месяца, т.к. документ уже целиком был ранее проведен в этом
		// случае.
		// Если документ проведен, то прежде очищаем набор записей с отбором по этому документу.
		Если СсылкаНаОбъект.Пустая() Тогда
			// Если документ пока не записан, нет необходимости очищать перед записью текущие движения,
			// а отбор для набора будет установлен по временной ссылке.
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.Увольнение);
		Иначе
			// Перед записью нужно очистить набор, чтобы "обойти" контроль уникальности записей регистра сведений.
			НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.Увольнение, СсылкаНаОбъект);
			НаборыЗаписей.КадроваяИсторияСотрудников.Записать();
		КонецЕсли;
		
		// Заполняем движения по кадровому учету.
		КадровыеСобытия = Документы.Увольнение.КадровыеСобытияУвольнение(Объект.Сотрудник, Объект.ДатаУвольнения);
		КадровыйУчетРасширенный.СформироватьКадровыеДвижения(РеквизитФормыВЗначение("Объект"), НаборыЗаписей, КадровыеСобытия);
		// .. и записываем набор
		НаборыЗаписей.КадроваяИсторияСотрудников.Записать();
	КонецЕсли;
	
	Если Не ТранзакцияАктивна() Тогда
		// Открываем транзакцию, если этого до сих пор не произошло.
		НачатьТранзакцию();
	КонецЕсли;
	
	Если Не ЭтоУвольнениеВПоследнийДеньМесяца(Объект)
		И Не ЭтоУвольнениеБудущимМесяцем(Объект)
		И Не ЭтоУвольнениеВМесяцеПриемаНаРаботу(Объект.ДатаУвольнения, ДатаПриемаНаРаботу) Тогда
		СформироватьЗаписиПерерасчета();
	КонецЕсли;
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудники, ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)));
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаписиПерерасчета()
	
	Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		СотрудникДляИсправления = ?(ТипЗнч(СсылкаНаИсправленныйДокумент) = Тип("ДокументСсылка.Увольнение"), Неопределено, Объект.Сотрудник);
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправления(Объект.Организация, Объект.ПериодРегистрации, СсылкаНаИсправленныйДокумент, Объект.Начисления, Объект.НачисленияПерерасчет, СсылкаНаОбъект, , , СотрудникДляИсправления);
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправленияПособий(
			СсылкаНаИсправленныйДокумент, Объект.ПериодРегистрации, Объект.Пособия, Объект.ПособияПерерасчет, Объект.НачисленияПерерасчет,
			КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), СотрудникДляИсправления);
	Иначе
		ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчета(Объект.ПериодРегистрации, Объект.Начисления, Объект.НачисленияПерерасчет, СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомпенсацииЗаОтпуск()
	
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник);
	
	ДанныеКомпенсацииОтпуска = ДанныеКомпенсацииОтпуска();
	
	Для Каждого СтрокаКомпенсации Из ДанныеКомпенсацииОтпуска Цикл
		
		ИзвестныеПоказатели = Новый Соответствие;
		
		Если Объект.РасчетДенежногоСодержания Тогда
			
			Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
			Значение = Новый Структура("Значение", Объект.СохраняемоеДенежноеСодержание);
			ИзвестныеПоказатели.Вставить(Показатель, Значение);
			
		Иначе
			
			Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
			Значение = Новый Структура("Значение", ?(СтрокаКомпенсации.ПоКалендарнымДням, Объект.СреднийЗаработок, Объект.СреднийЗаработокПоРабочимДням));
			ИзвестныеПоказатели.Вставить(Показатель, Значение);
			
		КонецЕсли;
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации");
		Значение = Новый Структура("Значение", СтрокаКомпенсации.Длительность);
		ИзвестныеПоказатели.Вставить(Показатель, Значение);
		
		КомпенсацииОтпусков = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
			Объект.Организация, СтрокаКомпенсации.ДатаНачала, СтрокаКомпенсации.ДатаОкончания, Объект.ПериодРегистрации, Объект.Сотрудник, СтрокаКомпенсации.Начисление, СсылкаНаОбъект, ИзвестныеПоказатели);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КомпенсацииОтпусков, Объект.Начисления);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеКомпенсацииОтпуска()
	
	ДанныеКомпенсацииОтпуска = Новый ТаблицаЗначений;
	ДанныеКомпенсацииОтпуска.Колонки.Добавить("Начисление");
	ДанныеКомпенсацииОтпуска.Колонки.Добавить("ДатаНачала");
	ДанныеКомпенсацииОтпуска.Колонки.Добавить("ДатаОкончания");
	ДанныеКомпенсацииОтпуска.Колонки.Добавить("Длительность");
	ДанныеКомпенсацииОтпуска.Колонки.Добавить("ПоКалендарнымДням");
	
	Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
		Если Объект.ДнейКомпенсацииУдержанияОтпуска > 0 Тогда
			НовыйИнтервал = ДанныеКомпенсацииОтпуска.Добавить();
			НовыйИнтервал.Начисление	= Объект.ВидРасчетаКомпенсацииУдержанияОтпуска;
			НовыйИнтервал.ДатаНачала	= ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),НачалоДня(Объект.ДатаУвольнения),НачалоДня(Объект.ПериодРегистрации));
			НовыйИнтервал.ДатаОкончания	= ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),НачалоДня(Объект.ДатаУвольнения),НачалоДня(Объект.ПериодРегистрации));
			НовыйИнтервал.Длительность	= Объект.ДнейКомпенсацииУдержанияОтпуска;
			НовыйИнтервал.ПоКалендарнымДням	= Документы.Отпуск.ОписаниеВидаОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной")).СпособРасчетаПоКалендарнымДням;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаДополнительногоОтпуска Из Объект.ДополнительныеОтпуска Цикл
		Если СтрокаДополнительногоОтпуска.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда
			Если СтрокаДополнительногоОтпуска.ДнейКомпенсацииУдержания > 0 Тогда
				НовыйИнтервал = ДанныеКомпенсацииОтпуска.Добавить();
				НовыйИнтервал.Начисление	= СтрокаДополнительногоОтпуска.ВидРасчетаКомпенсацииУдержания;
				НовыйИнтервал.ДатаНачала	= ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),НачалоДня(Объект.ДатаУвольнения),НачалоДня(Объект.ПериодРегистрации));
				НовыйИнтервал.ДатаОкончания	= ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),НачалоДня(Объект.ДатаУвольнения),НачалоДня(Объект.ПериодРегистрации));
				НовыйИнтервал.Длительность	= СтрокаДополнительногоОтпуска.ДнейКомпенсацииУдержания;
				НовыйИнтервал.ПоКалендарнымДням	= Документы.Отпуск.ОписаниеВидаОтпуска(СтрокаДополнительногоОтпуска.ВидОтпуска).СпособРасчетаПоКалендарнымДням;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ДанныеКомпенсацииОтпуска;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВыходноеПособие()
	
	Если Объект.РасчетДенежногоСодержания И ЗначениеЗаполнено(Объект.КоличествоМесяцевВыплатыДенежногоСодержания) Тогда
		
		ИзвестныеПоказатели = Новый Соответствие;
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МесячноеДенежноеСодержание");
		Значение = Новый Структура("Значение", Объект.МесячноеДенежноеСодержание);
		ИзвестныеПоказатели.Вставить(Показатель, Значение);
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МесяцевВыплатыКомпенсации");
		Значение = Новый Структура("Значение", Объект.КоличествоМесяцевВыплатыДенежногоСодержания);
		ИзвестныеПоказатели.Вставить(Показатель, Значение);

		КомпенсацииПриУвольнении = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
			Объект.Организация, Объект.ДатаУвольнения, Объект.ДатаУвольнения, Объект.ПериодРегистрации, Объект.Сотрудник, Объект.ВидРасчетаМесячноеДенежноеСодержание, СсылкаНаОбъект, ИзвестныеПоказатели);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КомпенсацииПриУвольнении, Объект.Начисления);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДнейЧасовВыходногоПособия) Тогда
		
		ИзвестныеПоказатели = Новый Соответствие;
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
		Значение = Новый Структура("Значение", Объект.СреднийЗаработокВыходногоПособия);
		ИзвестныеПоказатели.Вставить(Показатель, Значение);
		
		Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия");
		Значение = Новый Структура("Значение", Объект.ДнейЧасовВыходногоПособия);
		ИзвестныеПоказатели.Вставить(Показатель, Значение);
		
		// Выходное пособие
		КомпенсацииПриУвольнении = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
		Объект.Организация, Объект.ДатаУвольнения, Объект.ДатаУвольнения, Объект.ПериодРегистрации, Объект.Сотрудник, Объект.ВыходноеПособие, СсылкаНаОбъект, ИзвестныеПоказатели);

		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КомпенсацииПриУвольнении, Объект.Начисления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУдержанияЗаОтпуск()
	
	Если Объект.РасчетДенежногоСодержания Тогда
		СреднийЗаработокОбщий = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
	Иначе	
		СреднийЗаработокОбщий = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	КонецЕсли;
	КоличествоДнейКомпенсации = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейКомпенсации");

	ДанныеУдержанияОтпуска = ДанныеУдержанияОтпуска();
	Для Каждого Интервал Из ДанныеУдержанияОтпуска Цикл
		
		// Выбираем значение показателя средний заработок.
		Если Объект.РасчетДенежногоСодержания Тогда
			СреднийЗаработок = Объект.СохраняемоеДенежноеСодержание;
		Иначе
			СреднийЗаработок = ?(Интервал.ПоКалендарнымДням, Объект.СреднийЗаработок, Объект.СреднийЗаработокПоРабочимДням);
		КонецЕсли;
		
		ИзвестныеПоказатели = Новый Соответствие;
		ИзвестныеПоказатели.Вставить(СреднийЗаработокОбщий,	Новый Структура("Значение", СреднийЗаработок));
		ИзвестныеПоказатели.Вставить(КоличествоДнейКомпенсации,	Новый Структура("Значение", Интервал.Длительность));
		
		// Формируем строки для удержания сотрудника.
		УдержанияОтпусков = РасчетЗарплатыРасширенный.ДанныеДляУдержанияЗарплатыСотрудника(
			Объект.Организация, НачалоДня(Интервал.ДатаНачала), КонецДня(Интервал.ДатаОкончания), Объект.Сотрудник, Интервал.Удержание, , ИзвестныеПоказатели, Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет);
		
		// Переносим строки в табличную часть.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияОтпусков, Объект.Удержания);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСторноУдержанийЗаОтпуск()
	
	Если Не ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляСторнированияУдержанийЗаОтпуск = Документы.Увольнение.ДанныеДляСторнированияУдержанийЗаОтпуск(СсылкаНаИсправленныйДокумент);
	
	ОписаниеТаблицыВидовРасчета = КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(Неопределено);
	ИдентификаторСтрокиВидаРасчета = ОписаниеТаблицыВидовРасчета.НомерТаблицы * 1000000;
	Для каждого Строка Из Объект.Удержания Цикл
	  ИдентификаторСтрокиВидаРасчета = Макс(ИдентификаторСтрокиВидаРасчета, Строка.ИдентификаторСтрокиВидаРасчета);
	КонецЦикла;
	ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
	
	МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете("Удержания");
	
	Для каждого Строка Из ДанныеДляСторнированияУдержанийЗаОтпуск.Удержания Цикл
		ПоказателиСтроки = ДанныеДляСторнированияУдержанийЗаОтпуск.Показатели.НайтиСтроки(Новый Структура("ИдентификаторСтрокиВидаРасчета", Строка.ИдентификаторСтрокиВидаРасчета));
		НоваяСтрокаУдержания = Объект.Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУдержания, Строка, , "ИдентификаторСтрокиВидаРасчета");
		НоваяСтрокаУдержания.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
		
		КоличествоПоказателейСтроки = ПоказателиСтроки.Количество();
		Если КоличествоПоказателейСтроки > 0 Тогда
			
			КоличествоПоказателей = Мин(КоличествоПоказателейСтроки, МаксимальноеКоличествоПоказателей);
			
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				ЗначениеПоказателя = ПоказателиСтроки[НомерПоказателя-1];
				
				НоваяСтрокаУдержания["Показатель" + НомерПоказателя] = ЗначениеПоказателя.Показатель;
				НоваяСтрокаУдержания["Значение" + НомерПоказателя] = ЗначениеПоказателя.Значение;
				
				ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(ЗначениеПоказателя.Показатель);
				НоваяСтрокаУдержания["ТочностьПоказателя" + НомерПоказателя] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
				НоваяСтрокаУдержания["ПредставлениеПоказателя" + НомерПоказателя] = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
			КонецЦикла;
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеУдержанияОтпуска()
	
	ДанныеУдержанияОтпуска = Новый ТаблицаЗначений;
	ДанныеУдержанияОтпуска.Колонки.Добавить("Удержание");
	ДанныеУдержанияОтпуска.Колонки.Добавить("ДатаНачала");
	ДанныеУдержанияОтпуска.Колонки.Добавить("ДатаОкончания");
	ДанныеУдержанияОтпуска.Колонки.Добавить("Длительность");
	ДанныеУдержанияОтпуска.Колонки.Добавить("Компенсация");
	ДанныеУдержанияОтпуска.Колонки.Добавить("ПоКалендарнымДням");
	
	Если Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом Тогда
		Если Объект.ДнейКомпенсацииУдержанияОтпуска > 0 Тогда
			НовыйИнтервал = ДанныеУдержанияОтпуска.Добавить();
			НовыйИнтервал.Удержание	= Объект.ВидРасчетаКомпенсацииУдержанияОтпуска;
			НовыйИнтервал.ДатаНачала	= ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),НачалоДня(Объект.ДатаУвольнения),НачалоДня(Объект.ПериодРегистрации));
			НовыйИнтервал.ДатаОкончания	= ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),НачалоДня(Объект.ДатаУвольнения),НачалоДня(Объект.ПериодРегистрации));
			НовыйИнтервал.Длительность	= Объект.ДнейКомпенсацииУдержанияОтпуска;
			НовыйИнтервал.ПоКалендарнымДням	= Документы.Отпуск.ОписаниеВидаОтпуска(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной")).СпособРасчетаПоКалендарнымДням;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаДополнительногоОтпуска Из Объект.ДополнительныеОтпуска Цикл
		Если СтрокаДополнительногоОтпуска.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом  Тогда
			Если СтрокаДополнительногоОтпуска.ДнейКомпенсацииУдержания > 0 Тогда
				НовыйИнтервал = ДанныеУдержанияОтпуска.Добавить();
				НовыйИнтервал.Удержание	= СтрокаДополнительногоОтпуска.ВидРасчетаКомпенсацииУдержания;
				НовыйИнтервал.ДатаНачала	= ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),НачалоДня(Объект.ДатаУвольнения),НачалоДня(Объект.ПериодРегистрации));
				НовыйИнтервал.ДатаОкончания	= ?(ЗначениеЗаполнено(Объект.ДатаУвольнения),НачалоДня(Объект.ДатаУвольнения),НачалоДня(Объект.ПериодРегистрации));
				НовыйИнтервал.Длительность	= СтрокаДополнительногоОтпуска.ДнейКомпенсацииУдержания;
				НовыйИнтервал.ПоКалендарнымДням	= Документы.Отпуск.ОписаниеВидаОтпуска(СтрокаДополнительногоОтпуска.ВидОтпуска).СпособРасчетаПоКалендарнымДням;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ДанныеУдержанияОтпуска;
	
КонецФункции

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования)
	
	// Переносит данные учета среднего заработка для компенсации отпуска (результат работы формы "калькулятора") 
	// в таблицы документа.
	
	Объект.СреднийЗаработокОбщий.Очистить();
	Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
	Объект.ДанныеОбИндексации.Очистить();
	
	УчетСреднегоЗаработка.ЗаполнитьДанныеУчетаОбщегоСреднегоЗаработка(
		Объект.СреднийЗаработокОбщий, 
		Объект.ОтработанноеВремяДляСреднегоОбщий, 
		Объект.ДанныеОбИндексации, 
		РезультатРедактирования, 
		Модифицированность);
	
	Объект.ПериодРасчетаСреднегоЗаработкаНачало = РезультатРедактирования.НачалоПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = РезультатРедактирования.ОкончаниеПериодаРасчета;
	Объект.ФиксПериодРасчетаСреднегоЗаработка = РезультатРедактирования.ФиксПериодРасчета;
	Объект.СреднийЗаработок = РезультатРедактирования.СреднийЗаработок;
	Объект.РучнаяКорректировкаСреднегоЗаработка = РезультатРедактирования.РучнаяКорректировкаСреднегоЗаработка;
	
	ЗаполнитьИнформациюЗаполненностиДанных();
	
	
КонецПроцедуры	

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВыходногоПособияВДокумент(РезультатРедактирования)
	
	// Переносит данные учета среднего заработка для выходного пособия (результат работы формы "калькулятора") 
	// в таблицы документа.
	
	Объект.СреднийЗаработокДляВыходногоПособия.Очистить();
	Объект.ОтработанноеВремяДляСреднегоДляВыходногоПособия.Очистить();
	Объект.ДанныеОбИндексацииДляВыходногоПособия.Очистить();
	
	УчетСреднегоЗаработка.ЗаполнитьДанныеУчетаОбщегоСреднегоЗаработка(
		Объект.СреднийЗаработокДляВыходногоПособия, 
		Объект.ОтработанноеВремяДляСреднегоДляВыходногоПособия, 
		Объект.ДанныеОбИндексацииДляВыходногоПособия, 
		РезультатРедактирования, 
		Модифицированность);
	
	Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияНачало = РезультатРедактирования.НачалоПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияОкончание = РезультатРедактирования.ОкончаниеПериодаРасчета;
	Объект.ФиксПериодРасчетаСреднегоЗаработка = РезультатРедактирования.ФиксПериодРасчета;
	
	Объект.СреднийЗаработокВыходногоПособия = РезультатРедактирования.СреднийЗаработок;
	Объект.РучнаяКорректировкаСреднегоЗаработкаВыходногоПособия = РезультатРедактирования.РучнаяКорректировкаСреднегоЗаработка;
	НадписьДнейЧасовВыходногоПособия();
	
	ЗаполнитьИнформациюЗаполненностиДанных();
	
КонецПроцедуры	


#КонецОбласти  


#Область ПодключениеМеханизмаРасчетаНачислений

&НаСервере
Процедура ДанныеВРеквизиты()
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), 2);
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), 2);
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна), 2);
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна), 2);
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна), 2);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ВводНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыСохраняемоеДенежноеСодержание(), 2);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДокументыВыполненияНачисленийДанныеВРеквизит(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна), 2);
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
		
		Если РегистрацияНачисленийДоступна Тогда 
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Пособия, "ПериодДействия", "ПериодДействияСтрокой");
			ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.ПособияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		
		ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)));
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	КонецЕсли;
	
	ПрочитатьРеквизитыИсправления(ЭтаФорма.Параметры.Ключ.Пустая());
	ИсправлениеДокументовЗарплатаКадры.УстановитьПоляИсправления(ЭтаФорма);
	
	// Кадровый резерв.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКлиентСервер = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервКлиентСервер");
		МодульКлиентСервер.ЗаполнитьВторичныеДанныеКадровогоРезерва(Объект.КадровыйРезерв);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущийОбъект.Показатели.Очистить();
		
		ОписанияТаблиц = Новый Массив;
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(РегистрацияНачисленийДоступна));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыСохраняемоеДенежноеСодержание());
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);	
		ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));	
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьРеквизитыИсправления(НовыйДокумент)
	Если Не НовыйДокумент Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма, , , , , Ложь);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

#КонецОбласти


#Область ОписанияДокументаТаблицПанелей

&НаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(ПравоНаЧтениеДокументаБезОграничений)
	
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("Начисления", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("Пособия", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("ПособияПерерасчет", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("Удержания", КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(ПравоНаЧтениеДокументаБезОграничений));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульЛьготыСотрудниковКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудниковКлиентСервер");
		МодульЛьготыСотрудниковКлиентСервер.ДополнитьСтруктуруОписанийТаблицФормыНачисленияЗарплаты(МассивОписанийТаблицФормы, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(ПравоНаЧтениеДокументаБезОграничений));
	КонецЕсли;
	
	Возврат МассивОписанийТаблицФормы;
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыОписанияДокумента(Форма)
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("ИзменениеБезОграничений", Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений);
	ПараметрыОписания.Вставить("СпособыРасчетаСреднегоЗаработка", Форма.СпособыРасчетаСреднегоЗаработка);
	ПараметрыОписания.Вставить("ПризнакКомпенсацииУдержанияОтпуска", Форма.Объект.ПризнакКомпенсацииУдержанияОтпуска);
	ПараметрыОписания.Вставить("ДнейЧасовВыходногоПособия", Форма.Объект.ДнейЧасовВыходногоПособия);
	ПараметрыОписания.Вставить("РегистрацияНачисленийДоступна", Форма.РегистрацияНачисленийДоступна);
	
	Возврат ПараметрыОписания;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(ПравоНаЧтениеДокументаБезОграничений)

	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПогашениеЗаймов(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(ПравоНаЧтениеДокументаБезОграничений));
	
	Возврат ОписанияТаблиц;

КонецФункции

#КонецОбласти


#Область КонтролируемыеПоля

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОтработаноДней");
	НачисленияФиксРасчетВремени.Добавить("ОтработаноЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	УдержанияФиксРасчет = Новый Массив;
	УдержанияФиксРасчет.Добавить("Результат");
	
	ТаблицаНачисления = Новый Структура;
	ТаблицаНачисления.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	ТаблицаНачисления.Вставить("ФиксЗаполнение", Новый Массив);
	ТаблицаНачисления.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	ТаблицаНачисления.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	ТаблицаПособия = Новый Структура;
	ТаблицаПособия.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	ТаблицаПособия.Вставить("ФиксЗаполнение", Новый Массив);
	ТаблицаПособия.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	
	ТаблицаУдержания = Новый Структура;
	ТаблицаУдержания.Вставить("ФиксРасчет", УдержанияФиксРасчет);
	ТаблицаУдержания.Вставить("ФиксЗаполнение", Новый Массив);
	
	ТаблицаНачисленияПерерасчет = Новый Структура;
	ТаблицаНачисленияПерерасчет.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	ТаблицаНачисленияПерерасчет.Вставить("ФиксЗаполнение", Новый Массив);
	ТаблицаНачисленияПерерасчет.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	ТаблицаНачисленияПерерасчет.Вставить("ФиксРасчетВремени", НачисленияФиксРасчетВремени);
	
	ТаблицаПособияПерерасчет = Новый Структура;
	ТаблицаПособияПерерасчет.Вставить("ФиксРасчет", НачисленияФиксРасчет);
	ТаблицаПособияПерерасчет.Вставить("ФиксЗаполнение", Новый Массив);
	ТаблицаПособияПерерасчет.Вставить("ФиксСтрока", НачисленияФиксСтрока);
	
	КонтролируемыеПоля = Новый Структура;
	КонтролируемыеПоля.Вставить("Начисления", ТаблицаНачисления);
	КонтролируемыеПоля.Вставить("Пособия", ТаблицаПособия);
	КонтролируемыеПоля.Вставить("Удержания", ТаблицаУдержания);
	КонтролируемыеПоля.Вставить("НДФЛ", УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов());
	КонтролируемыеПоля.Вставить("НачисленияПерерасчет", ТаблицаНачисленияПерерасчет);
	КонтролируемыеПоля.Вставить("ПособияПерерасчет", ТаблицаПособияПерерасчет);
			
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьСоставКонтролируемыхПолейНачисленияЗарплаты(КонтролируемыеПоля);
	КонецЕсли;
			
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции
	
#КонецОбласти 


#Область СреднийЗаработок

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка()
	
	Если Не ИспользуетсяРасчетЗарплаты Или Объект.ФиксПериодРасчетаСреднегоЗаработка Тогда
		// Период расчета среднего заработка установлен принудительно.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) 
		Или Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаСобытия = Объект.ДатаУвольнения;
	Если ЭтоУвольнениеВПоследнийДеньМесяца(Объект) Тогда
		ДатаНачалаСобытия = НачалоМесяца(ДобавитьМесяц(Объект.ДатаУвольнения, 1));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.ВидРасчетаКомпенсацииУдержанияОтпуска) Тогда
		СтруктураОтбораПоВидуОтпуска = Новый Структура;
		СтруктураОтбораПоВидуОтпуска.Вставить("ВидОтпуска", ПредопределенноеЗначение("Справочник.ВидыОтпусков.Основной"));
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
			ЭтаФорма, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска, Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска, СтруктураОтбораПоВидуОтпуска);   
	КонецЕсли;
		
	ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(
		ДатаНачалаСобытия, Объект.Сотрудник, Объект.ВидРасчетаКомпенсацииУдержанияОтпуска);
		
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
		ЭтаФорма, Объект.ВыходноеПособие, Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);

	ПериодРасчетаСреднегоВыходногоПособия = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(
		ДатаНачалаСобытия, Объект.Сотрудник, Объект.ВыходноеПособие);
		
	ОбновлятьДанныеСреднегоЗаработка = Ложь;
	Если НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаНачало) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаНачала) 
		Или	НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаОкончания) Тогда
		Объект.ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
		ОбновлятьДанныеСреднегоЗаработка = Истина;
	КонецЕсли;
	Если НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияНачало) <> НачалоМесяца(ПериодРасчетаСреднегоВыходногоПособия.ДатаНачала) 
		Или	НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияОкончание) <> НачалоМесяца(ПериодРасчетаСреднегоВыходногоПособия.ДатаОкончания) Тогда
		Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияНачало	= ПериодРасчетаСреднегоВыходногоПособия.ДатаНачала;
		Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияОкончание = ПериодРасчетаСреднегоВыходногоПособия.ДатаОкончания;
		ОбновлятьДанныеСреднегоЗаработка = Истина;
	КонецЕсли;
	
	
	Если ЭтоУвольнениеВПоследнийДеньМесяца(Объект) 
		Или ЭтоУвольнениеБудущимМесяцем(Объект) 
		Или ЭтоУвольнениеВМесяцеПриемаНаРаботу(Объект.ДатаУвольнения, ДатаПриемаНаРаботу) Тогда
		// Т.к. зарплата за месяц увольнения начисляется в документе увольнения, 
		// ее нужно в любом случае обновить в данных среднего заработка.
		// Удаляем из таблиц среднего заработка данные за последний месяц.
		ТаблицыСреднего = Новый Массив;
		ТаблицыСреднего.Добавить(Объект.СреднийЗаработокОбщий);
		ТаблицыСреднего.Добавить(Объект.ОтработанноеВремяДляСреднегоОбщий);
		УдаляемыеСтрокиСреднегоЗаработка = Новый Массив;
		Для Каждого ТаблицаСреднего Из ТаблицыСреднего Цикл
			
			УдаляемыеСтрокиСреднегоЗаработка.Очистить();
			
			Для каждого СтрокаСреднего Из ТаблицаСреднего Цикл
				Если СтрокаСреднего.Период >= НачалоМесяца(Объект.ПериодРегистрации) Тогда
					УдаляемыеСтрокиСреднегоЗаработка.Добавить(СтрокаСреднего);
				КонецЕсли;
			КонецЦикла;	
			
			Для каждого УдаляемаяСтрока Из УдаляемыеСтрокиСреднегоЗаработка Цикл
				ТаблицаСреднего.Удалить(УдаляемаяСтрока);
			КонецЦикла; 
			
		КонецЦикла;
		ОбновлятьДанныеСреднегоЗаработка = Истина;
	КонецЕсли;
	
	Если ОбновлятьДанныеСреднегоЗаработка Тогда
		ОбновитьДанныеДляРасчетаСреднего();
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУвольнениеВПоследнийДеньМесяца(Объект)
	Возврат КонецДня(Объект.ДатаУвольнения) = КонецМесяца(Объект.ДатаУвольнения);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУвольнениеБудущимМесяцем(Объект)
	Возврат НачалоДня(Объект.ДатаУвольнения) > КонецМесяца(Объект.ПериодРегистрации);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоУвольнениеВМесяцеПриемаНаРаботу(ДатаУвольнения, ДатаПриема)
	Возврат НачалоМесяца(ДатаУвольнения) = НачалоМесяца(ДатаПриема);
КонецФункции

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	ДополнительныеПараметры.Индексации = Объект.ДанныеОбИндексации;
	ДополнительныеПараметры.ДатаНачалаСобытия = Объект.ДатаУвольнения;
	ДополнительныеПараметры.НачалоПериода = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ДополнительныеПараметры.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
	ДополнительныеПараметры.ПоЧасам = КадровыйУчетРасширенныйКлиентСервер.ЭтоСреднечасовойЗаработокВДокументеУвольнение();
	ДополнительныеПараметры.СпособРасчетаОтпуска = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням");
	ДополнительныеПараметры.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные");
	Объект.СреднийЗаработок = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, ДополнительныеПараметры);
	
	ЗаполнениеВыполнено = Истина;
	
	ЗаполнитьИнформациюЗаполненностиДанных();
	
КонецПроцедуры	
&НаСервере
Процедура РассчитатьСреднийЗаработокВыходногоПособия()
	
	УстановитьПривилегированныйРежим(Истина);

	РассчитатьСреднийВыходногоПособия = Объект.ДнейЧасовВыходногоПособия > 0; 	
	Если РассчитатьСреднийВыходногоПособия Тогда	
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = Объект.ДанныеОбИндексацииДляВыходногоПособия;
		ДополнительныеПараметры.ДатаНачалаСобытия = Объект.ДатаУвольнения;
		ДополнительныеПараметры.НачалоПериода = Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияНачало;
		ДополнительныеПараметры.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияОкончание;
		ДополнительныеПараметры.ПоЧасам = ИспользуетсяСреднечасовойЗаработок;
		ДополнительныеПараметры.ВидУчетаВремениДляСредней = Объект.ВидУчетаВремениДляСредней;
		ДополнительныеПараметры.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010");
		Объект.СреднийЗаработокВыходногоПособия = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(Объект.СреднийЗаработокДляВыходногоПособия, Объект.ОтработанноеВремяДляСреднегоДляВыходногоПособия, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры	
&НаСервере
Процедура ОпределитьВидУчетаВремениДляСредней()
	// выходное пособие рассчитывается по дням согласно абз.3 п.8 Порядка 100
	Если Не ЗначениеЗаполнено(Объект.ДатаУвольнения) 
		Или Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
		
	Объект.ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;

КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеДляРасчетаСреднего()
	
	УстановитьПривилегированныйРежим(Истина);

	ДанныеСреднегоЗаработка = Новый Структура("ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации, ВидРасчета");
	ДанныеСреднегоЗаработка.ДанныеОНачислениях = Объект.СреднийЗаработокОбщий;
	ДанныеСреднегоЗаработка.ДанныеОВремени = Объект.ОтработанноеВремяДляСреднегоОбщий;                                      
	ДанныеСреднегоЗаработка.ДанныеОбИндексации = Объект.ДанныеОбИндексации;
	ДанныеСреднегоЗаработка.ВидРасчета = Объект.ВидРасчетаКомпенсацииУдержанияОтпуска;
	
	УчетСреднегоЗаработка.ОбновитьДанныеОбщегоСреднегоЗаработка(
	ДанныеСреднегоЗаработка, 
	Объект.ДатаУвольнения, 
	Объект.ПериодРасчетаСреднегоЗаработкаНачало, 
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание, 
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), , 
	СсылкаНаОбъект);
	Если Не Объект.РучнаяКорректировкаСреднегоЗаработка Тогда
		РассчитатьСреднийЗаработок();
	КонецЕсли;
	Если Объект.ДнейЧасовВыходногоПособия > 0 Тогда
		ДанныеСреднегоЗаработкаВыходногоПособия = Новый Структура("ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации, ВидРасчета");
		ДанныеСреднегоЗаработкаВыходногоПособия.ДанныеОНачислениях = Объект.СреднийЗаработокДляВыходногоПособия;
		ДанныеСреднегоЗаработкаВыходногоПособия.ДанныеОВремени = Объект.ОтработанноеВремяДляСреднегоДляВыходногоПособия;                                      
		ДанныеСреднегоЗаработкаВыходногоПособия.ДанныеОбИндексации = Объект.ДанныеОбИндексацииДляВыходногоПособия;
		ДанныеСреднегоЗаработкаВыходногоПособия.ВидРасчета = Объект.ВыходноеПособие;
		УчетСреднегоЗаработка.ОбновитьДанныеОбщегоСреднегоЗаработка(
		ДанныеСреднегоЗаработкаВыходногоПособия, 
		Объект.ДатаУвольнения, 
		Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияНачало, 
		Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияОкончание, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), , 
		СсылкаНаОбъект);
		Если Не Объект.РучнаяКорректировкаСреднегоЗаработкаВыходногоПособия Тогда
			РассчитатьСреднийЗаработокВыходногоПособия();
		КонецЕсли;	
	КонецЕсли;	
	ЗаполнитьИнформациюЗаполненностиДанных();
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьИспользованиеСреднечасовогоЗаработка()
	
	ИспользуетсяСреднечасовойЗаработок = Ложь;
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.СуммированныйУчет = УчетРабочегоВремени.СотрудникуПрименяетсяСуммированныйУчетРабочегоВремени(Объект.Сотрудник, Объект.ДатаУвольнения);
	Если Объект.СуммированныйУчет Тогда
		ИспользуетсяСреднечасовойЗаработок = Истина;
		Возврат;
	КонецЕсли;
	
	Если УчетСреднегоЗаработка.НачислениеИспользуетСреднечасовойЗаработок(Объект.ВыходноеПособие) Тогда
		ИспользуетсяСреднечасовойЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеОплатыПереработокСуммированногоУчета()
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		ИспользуетсяОплатаСуммированногоУчета = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПереработокСуммированногоУчета");
		УстановитьПривилегированныйРежим(Истина);
		СотрудникНаСуммированномГрафике = УчетРабочегоВремени.СотрудникуПрименяетсяСуммированныйУчетРабочегоВремени(Объект.Сотрудник, Объект.ДатаУвольнения);
		ИспользоватьОплатуПереработокСуммированногоУчета = СотрудникНаСуммированномГрафике И ИспользуетсяОплатаСуммированногоУчета;
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ИспользоватьОплатуПереработокСуммированногоУчета = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область РедактированиеНДФЛ

&НаСервере
Процедура УстановитьФиксРасчетСтрокНДФЛ(СтруктураПоиска)
	
	УчетНДФЛФормы.УстановитьФиксРасчетСтрокНДФЛ(ЭтаФорма, СтруктураПоиска);
	
КонецПроцедуры

#КонецОбласти 


#Область СервернаяЧастьОбработчиковСобытийЭлементовФормы

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	УстановитьФункциональныеОпцииФормы();
	РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), РегистрацияНачисленийДоступна);
	
	УстановитьПривилегированныйРежим(Истина);

	ЗаполнитьДанныеФормыПоОрганизации();
	РасчетЗарплатыРасширенныйФормы.ОбновитьПлановыеДатыВыплатыПоОрганизации(ЭтаФорма);
	УстановитьПланируемуюДатуВыплаты();	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Объект.ФизическоеЛицо = Неопределено;
	Иначе	
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Объект.Сотрудник, "ДатаРождения");
		Если КадровыеДанные.Количество() > 0 Тогда
			Объект.ФизическоеЛицо = КадровыеДанные[0].ФизическоеЛицо;
		КонецЕсли; 
	КонецЕсли;

	ОчиститьДанныеСреднегоЗаработка(ЭтаФорма);
	ОпределитьВидУчетаВремениДляСредней();
	
	ОбновитьДанныеПоСотруднику();
	
КонецПроцедуры

&НаСервере
Процедура ДатаУвольненияПриИзмененииНаСервере()
	
	УстановитьПланируемуюДатуВыплаты();
	ОпределитьВидУчетаВремениДляСредней();
	ОбновитьДанныеПоСотруднику();
	
КонецПроцедуры

#Область ОчиститьОбновитьДанныеПоСотруднику

&НаСервере
Процедура ОчиститьДанныеСреднегоЗаработка(Форма)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Форма.Объект.СреднийЗаработокОбщий.Очистить();
	Форма.Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
	Форма.Объект.ДанныеОбИндексации.Очистить();
	Форма.Объект.СреднийЗаработокПоРабочимДням = Неопределено;
	Форма.Объект.СреднийЗаработокВыходногоПособия = Неопределено;
	Форма.Объект.СреднийЗаработок = Неопределено;
	Форма.Объект.ПериодРасчетаСреднегоЗаработкаНачало = Неопределено;
	Форма.Объект.ПериодРасчетаСреднегоЗаработкаОкончание = Неопределено;
	Форма.Объект.СреднийЗаработокДляВыходногоПособия.Очистить();
	Форма.Объект.ОтработанноеВремяДляСреднегоДляВыходногоПособия.Очистить();
	Форма.Объект.ДанныеОбИндексацииДляВыходногоПособия.Очистить();
	
	Объект.ДенежноеСодержание.Очистить();
	Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
	
	Форма.Объект.Начисления.Очистить();
	Форма.Объект.НачисленияПерерасчет.Очистить();
	Форма.Объект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
	
	ОбновитьИтоги(Форма);
	
	УстановитьПредупреждениеДокументНеРассчитан(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоСотруднику()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьВторичныеДанныеСотрудникаВФорме();
	ОбновитьФормуПоВидуДоговора();
	УстановитьСтраницуОсновногоСреднегоЗаработка();
	УстановитьТипОснованияУвольнения();

	УстановитьИспользованиеСреднечасовогоЗаработка();
	УстановитьИспользованиеОплатыПереработокСуммированногоУчета();
	
	НадписьДнейЧасовВыходногоПособия = НадписьДнейЧасовВыходногоПособия();
	
	РассчитатьКоличествоДнейКомпенсацииУдержанияОтпускаНаСервере();
	РассчитатьКоличествоЧасовКомпенсацииСуммированногоУчетаНаСервере();
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		УстановитьТипЗначенияВидаРасчета(Объект);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, ЭтаФорма.Объект);
	УстановитьВидимостьСуммированногоУчета();
	УстановитьОтметкуНезаполненногоДнейКомпенсацииУдержанияОтпуска();
	
	Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	ЗаполнитьКадровыйРезерв();
	
	УстановитьВидимостьПерерасчетов();
	СформироватьНадписьОстаткиОтгулов();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоДнейКомпенсацииУдержанияОтпускаНаСервере()
	
	Объект.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать;
	Объект.ДнейКомпенсацииУдержанияОтпуска = Неопределено;  
	Объект.РабочийГодС = Неопределено; 
	Объект.РабочийГодПо = Неопределено;
	Объект.ДополнительныеОтпуска.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Сотрудник) Или Не ЗначениеЗаполнено(Объект.ДатаУвольнения) Тогда
	    Возврат
	КонецЕсли;
	
	Результат = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(Объект.Сотрудник, Объект.ДатаУвольнения, Истина);
	
	Объект.РабочийГодС	= Результат.РабочийГодС;
	Объект.РабочийГодПо	= Результат.РабочийГодПо;
	
	ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении = ОстаткиОтпусков.ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении();
	
	Для Каждого Остаток Из Результат.ОстаткиВРазрезеВидовОтпусков Цикл
		Если НЕ ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении.Найти(Остаток.ВидЕжегодногоОтпуска) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Остаток.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
			Объект.ПризнакКомпенсацииУдержанияОтпуска	= ?(Остаток.КоличествоДней > 0, Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные,Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом);
			Объект.ДнейКомпенсацииУдержанияОтпуска		= ?(Остаток.КоличествоДней > 0, Остаток.КоличествоДней, Остаток.КоличествоДней * (-1));
			Объект.РабочийГодС = Остаток.РабочийГодС;
			Объект.РабочийГодПо = Остаток.РабочийГодПо;
		Иначе
			Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
				Строка = Объект.ДополнительныеОтпуска.Добавить();
				Строка.ВидОтпуска									= Остаток.ВидЕжегодногоОтпуска;
				Строка.ПризнакКомпенсацииУдержания					= ?(Остаток.КоличествоДней > 0, Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные,Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом);
				Строка.ДнейКомпенсацииУдержания						= ?(Остаток.КоличествоДней > 0, Остаток.КоличествоДней, Остаток.КоличествоДней * (-1));
				Строка.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск 	= Остаток.РабочийГодС;
				Строка.КонецПериодаЗаКоторыйПредоставляетсяОтпуск 	= Остаток.РабочийГодПо;
			КонецЕсли;  
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоЧасовКомпенсацииСуммированногоУчетаНаСервере()

	Объект.Сверхурочно1_5 = 0;
	Объект.Сверхурочно2 = 0;
	
	Если НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ИспользоватьОплатуПереработокСуммированногоУчета Тогда
		Возврат;
	КонецЕсли; 
	
	// Вычисляем незакрытые периоды по предыдущим проведенным документам
	ПериодСуммированногоУчета = УчетРабочегоВремени.ПериодСуммированногоУчетаПоПрошлымДокументам(Объект.Организация, Объект.ДатаУвольнения, Объект.Сотрудник);
	
	// Получаем переработки
	ТаблицаСотрудников = РасчетЗарплатыРасширенный.ПоказателиСуммированногоУчетаСотрудниковЗаПериод(
							ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник),
							НачалоМесяца(ПериодСуммированногоУчета.ПериодСуммированногоУчетаНачало),
							КонецДня(Объект.ДатаУвольнения));
							
							
	Если ТаблицаСотрудников.Количество() > 0 Тогда
		Объект.Сверхурочно1_5 = Макс(ТаблицаСотрудников[0].Переработки, 0);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ДнейЧасовВыходногоПособияПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьФормуПоВидуДоговора();

	НадоЗаполнятьВидРасчета = ЗначениеЗаполнено(Объект.ДнейЧасовВыходногоПособия) И Не ЗначениеЗаполнено(Объект.ВыходноеПособие);
	Если НадоЗаполнятьВидРасчета Тогда
		// Заполняем вид оплаты выходного пособия.
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
			ЭтаФорма, Объект.ВыходноеПособие, Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры  

&НаСервере
Процедура КоличествоМесяцевВыплатыДенежногоСодержанияПриИзмененииНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);

	НадоЗаполнятьВидРасчета = ЗначениеЗаполнено(Объект.КоличествоМесяцевВыплатыДенежногоСодержания) И Не ЗначениеЗаполнено(Объект.ВидРасчетаМесячноеДенежноеСодержание);
	Если НадоЗаполнятьВидРасчета Тогда
		// Заполняем вид оплаты выходного пособия.
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(
			ЭтаФорма, Объект.ВидРасчетаМесячноеДенежноеСодержание, Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	УстановитьПланируемуюДатуВыплаты();		
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьВидимостьПерерасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ВидРасчетаКомпенсацииОсновногоОтпускаПриИзмененииНаСервере()
	
	Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
	
	Если Не ЭтоУвольнениеВПоследнийДеньМесяца(Объект)
		 И Не ЭтоУвольнениеБудущимМесяцем(Объект) 
		 И Не ЭтоУвольнениеВМесяцеПриемаНаРаботу(Объект.ДатаУвольнения, ДатаПриемаНаРаботу) Тогда
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПогашениеЗаймовПриИзмененииНаСервере()
	
	УстановитьСвойствоДокументРассчитан();
	ОбновитьУдержаноИтог(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПризнакКомпенсацииОтпускаПриИзмененииНаСервере()
	
	УстановитьТипЗначенияВидаРасчета(Объект);
	УстановитьДоступностьЭлементовФормы(ЭтаФорма, Объект);
	УстановитьОтметкуНезаполненногоДнейКомпенсацииУдержанияОтпуска();
	
КонецПроцедуры

&НаСервере
Процедура ДокументРассчитанПриИзменении()
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
КонецПроцедуры

&НаСервере
Процедура РуководительПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ГлавныйБухгалтерПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура БухгалтерПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура РаботникКадровойСлужбыПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ИсполнительПриИзмененииНаСервере()
	НастроитьОтображениеГруппыПодписантов();
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаВидОтпускаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбновитьРабочийГодДополнительногоОтпуска(Строка);
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтпускаКоличествоДнейКомпенсацииПриИзмененииНаСервере(ИдентификаторСтроки)
	
	Строка = Объект.ДополнительныеОтпуска.НайтиПоИдентификатору(ИдентификаторСтроки);
	ОбновитьРабочийГодДополнительногоОтпуска(Строка);

КонецПроцедуры

#КонецОбласти


#Область ОбновитьИтоги

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	ОбновитьНачисленоИтог(Форма); 
	ОбновитьУдержаноИтог(Форма);
	ОбновитьПерерасчетИтог(Форма);
	ОбновитьПерерасчетПособийИтог(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНачисленоИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Форма.НачисленоИтог = Форма.Объект.Начисления.Итог("Результат") + Форма.Объект.Пособия.Итог("Результат") + Форма.Объект.Льготы.Итог("Результат");
	
	СписокКомпенсаций = Новый Массив;
	Если Форма.Объект.ПризнакКомпенсацииУдержанияОтпуска = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные") Тогда
		СписокКомпенсаций.Добавить(Форма.Объект.ВидРасчетаКомпенсацииУдержанияОтпуска);
	КонецЕсли;
	
	Для каждого Компенсация Из Форма.Объект.ДополнительныеОтпуска Цикл
		Если Компенсация.ПризнакКомпенсацииУдержания = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные") Тогда
			СписокКомпенсаций.Добавить(Компенсация.ВидРасчетаКомпенсацииУдержания);
		КонецЕсли;
	КонецЦикла; 
	
	ВыходноеПособие = Неопределено;
	
	Форма.НачисленоКомпенсаций = 0;
	Форма.НачисленоВыходноеПособие = 0;
	Форма.НачисленоПрочее = 0;
	СведенияОНачислениях  = СведенияОНачислениях(Форма.Объект);
	
	Для каждого Начисление Из Форма.Объект.Начисления Цикл
		СведенияОНачислении = СведенияОНачислениях.Получить(Начисление.Начисление);
		
		Если СписокКомпенсаций.Найти(Начисление.Начисление) <> Неопределено Тогда
			Форма.НачисленоКомпенсаций = Форма.НачисленоКомпенсаций + Начисление.Результат; 
		ИначеЕсли СведенияОНачислении.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие") Тогда
			Форма.НачисленоВыходноеПособие = Форма.НачисленоВыходноеПособие + Начисление.Результат;                                          
		Иначе	
			Форма.НачисленоПрочее = Форма.НачисленоПрочее + Начисление.Результат;
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого СтрокаПособий Из Форма.Объект.Пособия Цикл
		Форма.НачисленоПрочее = Форма.НачисленоПрочее + СтрокаПособий.Результат;
	КонецЦикла;
	
	Для Каждого СтрокаЛьгот Из Форма.Объект.Льготы Цикл
		Форма.НачисленоПрочее = Форма.НачисленоПрочее + СтрокаЛьгот.Результат;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция СведенияОНачислениях(Знач Объект)
	МассивНачислений = Объект.Начисления.Выгрузить().ВыгрузитьКолонку("Начисление");
	СведенияОНачислениях = Новый Соответствие;
	Для каждого Начисление Из МассивНачислений Цикл
		СведенияОНачислениях.Вставить(Начисление, ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление));
	КонецЦикла;
	Возврат СведенияОНачислениях;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУдержаноИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Форма.УдержаноНДФЛ = Форма.Объект.НДФЛ.Итог("Налог");		
	Форма.УдержаноПрочее = Форма.Объект.Удержания.Итог("Результат");
	Форма.УдержаноЗаймы = Форма.Объект.ПогашениеЗаймов.Итог("ПогашениеЗайма") + Форма.Объект.ПогашениеЗаймов.Итог("ПогашениеПроцентов") + Форма.Объект.ПогашениеЗаймов.Итог("НалогНаМатериальнуюВыгоду");
	Форма.УдержаноИтог = Форма.УдержаноНДФЛ + Форма.УдержаноПрочее + Форма.УдержаноЗаймы;		
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПерерасчетИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Форма.ПерерасчетИтог = Форма.Объект.НачисленияПерерасчет.Итог("Результат");		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПерерасчетПособийИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Форма.ПерерасчетПособийИтог = Форма.Объект.ПособияПерерасчет.Итог("Результат");		
КонецПроцедуры

#КонецОбласти



#Область РаспределениеПоТерриториямУсловиямТруда

&НаКлиенте
Процедура ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыДляВыбора = РасчетЗарплатыРасширенныйКлиент.ПараметрыДляВыбораПолеРаспределениеПоТерриториямУсловиямТруда();
	ПараметрыДляВыбора.Форма = ЭтаФорма;
	ПараметрыДляВыбора.ОписаниеДокумента = КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект));
	ПараметрыДляВыбора.ОписаниеТаблицы = ОписаниеТаблицы;
	
	РасчетЗарплатыРасширенныйКлиент.ПриНажатииПолеРаспределениеПоТерриториямУсловиямТруда(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ПараметрыДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТрудаНаСервере(ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПараметрыФормыРаспределениеПоТерриториямУсловиямТруда(ЭтаФорма, ПараметрыФормы, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока) Экспорт
	ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТрудаНаСервере(РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока)
	РасчетЗарплатыРасширенныйФормы.ПеренестиРезультатыРедактированияРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, РезультатРедактирования, ОписаниеТаблицы, ВыбраннаяСтрока);
КонецПроцедуры

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	Описания.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	Описания.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
	Описания.Добавить(КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(Описания, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
	КонецЕсли;
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти


#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПериодРегистрации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Организация"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Сотрудник"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаУвольнения"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПризнакКомпенсацииОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДнейКомпенсацииУдержанияОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчетаКомпенсацииУдержанияОсновногоОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДнейЧасовВыходногоПособия"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВыходноеПособие"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаВидОтпуска"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаВидРасчетаКомпенсации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаПризнакКомпенсацииУдержанияДополнительныхОтпусков"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДополнительныеОтпускаКоличествоДнейКомпенсации"));
	КонецЕсли;
	
	Для каждого ОписаниеЭлемента Из Массив Цикл
		ОписаниеЭлемента.Вставить("ПредупреждениеПриРедактировании", ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом());
	КонецЦикла;
	
	Возврат Массив
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ?(ЕстьФиксированныеДанные(Форма), ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.Авто));
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьФиксированныеДанные(Форма)
	Если НЕ Форма.РегистрацияНачисленийДоступна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсправленныйДокументЗаполнен = ЗначениеЗаполнено(Форма.СсылкаНаИсправленныйДокумент) Или ЗначениеЗаполнено(Форма.Объект.ИсправленныйДокумент);
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен) 
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНДФЛ(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен)
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыУдержаний(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен);
		
КонецФункции 

#КонецОбласти


&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	ВыполнитьРасчетНачислений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоВидуДоговора()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ВыходноеПособиеДенежноеСодержание",
			"Видимость",
			Объект.РасчетДенежногоСодержания);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ДенежноеСодержаниеИнфо",
			"Видимость",
			Объект.РасчетДенежногоСодержания);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПоказательСреднегоЗаработка",
			"Видимость",
			Не Объект.РасчетДенежногоСодержания);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОткрытьСреднийЗаработокВыходногоПособия",
			"Доступность",
			Объект.ДнейЧасовВыходногоПособия > 0 Или Не Объект.РасчетДенежногоСодержания);	
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюЗаполненностиДанных()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНадписи = УчетСреднегоЗаработка.ИнформацияОЗаполненностиДанныхСреднегоЗаработка(
		СсылкаНаОбъект,
		ЗаполнениеВыполнено,
		Объект.Сотрудник,
		Объект.ДатаУвольнения,
		Объект.ПериодРасчетаСреднегоЗаработкаНачало, 
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание, 
		Объект.СреднийЗаработокОбщий, 
		Объект.ОтработанноеВремяДляСреднегоОбщий);
	
	ЗаполненностьДанныхИнформационныйТекст	= СтруктураНадписи.Текст;
	ЗаполненностьДанныхКартинка				= СтруктураНадписи.Картинка;
	Если Объект.ДнейЧасовВыходногоПособия > 0 Тогда
		СтруктураНадписиДляВыходногоПособия = УчетСреднегоЗаработка.ИнформацияОЗаполненностиДанныхСреднегоЗаработка(
			СсылкаНаОбъект,
			ЗаполнениеВыполнено,
			Объект.Сотрудник,
			Объект.ДатаУвольнения,
			Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияНачало, 
			Объект.ПериодРасчетаСреднегоЗаработкаВыходногоПособияОкончание, 
			Объект.СреднийЗаработокДляВыходногоПособия, 
			Объект.ОтработанноеВремяДляСреднегоДляВыходногоПособия);
	
		ЗаполненностьДанныхИнформационныйТекстДляВыходногоПособия	= СтруктураНадписиДляВыходногоПособия.Текст;
		ЗаполненностьДанныхКартинкаДляВыходногоПособия				= СтруктураНадписиДляВыходногоПособия.Картинка;
	КонецЕсли	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредупреждениеДокументНеРассчитан(Форма)
	
	Форма.ЗаполненностьДанныхИнформационныйТекст = УчетСреднегоЗаработкаКлиентСервер.ТекстПредупрежденияДокументНеРассчитан();
	Форма.ЗаполненностьДанныхКартинка = БиблиотекаКартинок.Предупреждение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруРеквизитовИСпособовРасчетаОтпуска()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовИСпособовРасчетаОтпуска = Новый Структура;
	СтруктураРеквизитовИСпособовРасчетаОтпуска.Вставить("СреднийЗаработок", ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням"));
	СтруктураРеквизитовИСпособовРасчетаОтпуска.Вставить("СреднийЗаработокПоРабочимДням", ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоШестидневке"));
	
	СпособыРасчетаСреднегоЗаработка = Новый ФиксированнаяСтруктура(СтруктураРеквизитовИСпособовРасчетаОтпуска);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ЗаполнитьРеквизитФормыНазначенияРасчетаДенежногоСодержания(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовФормы(Форма, Объект)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДнейКомпенсацииУдержанияОтпуска",
		"Доступность",
		Объект.ПризнакКомпенсацииУдержанияОтпуска <> ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВидРасчетаКомпенсацииУдержанияОсновногоОтпуска",
		"Доступность",
		Объект.ПризнакКомпенсацииУдержанияОтпуска <> ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать"));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДополнительныеОтпуска",
		"ИзменятьСоставСтрок",
		Форма.ДоступенВводНового);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДополнительныеОтпуска",
		"ИзменятьПорядокСтрок",
		Форма.ДоступенВводНового);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненногоДнейКомпенсацииУдержанияОтпуска()
	
	АвтоОтметкаНезаполненного = Объект.ПризнакКомпенсацииУдержанияОтпуска <> Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.НеИспользовать;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДнейКомпенсацииУдержанияОтпуска", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного); 
	Если Не АвтоОтметкаНезаполненного Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДнейКомпенсацииУдержанияОтпуска", "ОтметкаНезаполненного", Ложь); 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПерерасчетов()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ПерерасчетыДоступны = ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступны(ЭтаФорма,,"ДатаУвольнения");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачисленияПерерасчет", 	"Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерерасчетГруппа", 		"Видимость", ПерерасчетыДоступны);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТипЗначенияВидаРасчета(Объект, ИмяПоляПризнака = "ПризнакКомпенсацииУдержанияОтпуска", ИмяПоляВидРасчета = "ВидРасчетаКомпенсацииУдержанияОтпуска")
	
	Если Объект[ИмяПоляПризнака] = ПредопределенноеЗначение("Перечисление.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные") Тогда
		Если ТипЗнч(Объект[ИмяПоляВидРасчета]) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			Объект[ИмяПоляВидРасчета] = ПредопределенноеЗначение("ПланВидовРасчета.Начисления.ПустаяСсылка");
		КонецЕсли;
	Иначе 	
		Если ТипЗнч(Объект[ИмяПоляВидРасчета]) <> Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
			Объект[ИмяПоляВидРасчета]  = ПредопределенноеЗначение("ПланВидовРасчета.Удержания.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьТипОснованияУвольнения()
	
	ОграничениеТипа = ОграничениеТипаОснованияУвольнения(Объект.ВидДоговора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭтотОбъект.Элементы, "ОснованиеУвольнения", "ОграничениеТипа", ОграничениеТипа);
	
КонецПроцедуры

&НаСервере
Функция ОграничениеТипаОснованияУвольнения(ВидДоговора)
	
	ТипОснования = ТипОснованияУвольнения(ВидДоговора);
	
	ОграничениеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипОснования));
	
	Возврат ОграничениеТипа;
	
КонецФункции

&НаСервере
Функция ТипОснованияУвольнения(ВидДоговора)
	
	ТипОснования = Тип("СправочникСсылка.ОснованияУвольнения");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		ТипОснования = Модуль.ТипОснованияУвольнения(ВидДоговора);
	КонецЕсли;
	
	Возврат ТипОснования;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка = Истина)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.ПериодРегистрации);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоДокументРассчитан()
	
	Если ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
		Объект.ДокументРассчитан = Истина;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеТаблицы = Новый Массив;
	ПроверяемыеТаблицы.Добавить("Начисления");
	ПроверяемыеТаблицы.Добавить("НачисленияПерерасчет");
	
	ПроверяемыеНачисления = Новый Массив;
	
	Для каждого ПроверяемаяТаблица Из ПроверяемыеТаблицы Цикл
		НачисленияДокумента = Новый Массив;
		Для каждого Начисление Из Форма.Объект[ПроверяемаяТаблица] Цикл
			НачисленияДокумента.Добавить(Начисление.Начисление);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеНачисления, НачисленияДокумента, Истина);
	КонецЦикла;
	
	АвтоОтметкаНезаполненного = ДатаВыплатыОбязательнаКЗаполнению(Форма.Объект.ПорядокВыплаты, ПроверяемыеНачисления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного); 
	Если Не АвтоОтметкаНезаполненного Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "ОтметкаНезаполненного", Ложь); 
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаВыплатыОбязательнаКЗаполнению(Знач ПорядокВыплаты, Знач ПроверяемыеНачисления)
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, ПроверяемыеНачисления);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Результаты");
	ИменаЭлементов.Добавить("НачисленияУдержанияСтраница");
	ИменаЭлементов.Добавить("ВидРасчетаКомпенсацииУдержанияОсновногоОтпуска");
	ИменаЭлементов.Добавить("ВыходноеПособие");
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейМногофункциональныхДокументов(ЭтаФорма, ИменаЭлементов);
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
		УстановитьВидимостьПерерасчетов();
		УчетСтраховыхВзносов.УстановитьВидимостьКолонокТаблицыСтраховыхВзносов(ЭтаФорма, Объект.ПериодРегистрации);
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособия(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.ПособияПерерасчетПодробно.Пометка, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыПособияПерерасчеты(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "Результаты", "ТолькоПросмотр", Истина);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			Модуль.УстановитьВидимостьГруппыЛьготы(Элементы, "ГруппаЛьготы");
			Модуль.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтотОбъект, КадровыйУчетРасширенныйКлиентСервер.ОписаниеТаблицыЛьгот(РегистрацияНачисленийДоступна));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаЛьготы", "Видимость", Ложь);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаПособия", "Видимость", Ложь);
	ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаПособияПерерасчет", "Видимость", Ложь);
	ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаВзносы", "Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСуммированногоУчета()

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаСуммированныйУчет",
		"Видимость",
		ИспользоватьОплатуПереработокСуммированногоУчета);
			
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьДоступностьРегистрацииНачислений();
	
	Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
		Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
		
		Объект.ДокументРассчитан = ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
		Объект.Рассчитал = Неопределено;
		ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
		УстановитьВидимостьРасчетныхПолей();
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НадписьДнейЧасовВыходногоПособия()
	Если Не ИспользуетсяСреднечасовойЗаработок Тогда
		НадписьДнейЧасовВыходногоПособия = НСтр("ru='дн.';uk='дн.'");	
	Иначе
		НадписьДнейЧасовВыходногоПособия = НСтр("ru='час.';uk='година.'");	
	КонецЕсли; 
	Возврат НадписьДнейЧасовВыходногоПособия
КонецФункции	

&НаСервере
Процедура ОбновитьРабочийГодДополнительногоОтпуска(Строка)
	Если (ЗначениеЗаполнено(Строка.ВидОтпуска) И ЗначениеЗаполнено(Строка.ДнейКомпенсацииУдержания)) Тогда               
		
		СтруктураПараметров = ОстаткиОтпусков.ПараметрыПолученияРабочегоПериодаОтпуска();
		СтруктураПараметров.Сотрудник = Объект.Сотрудник;
		СтруктураПараметров.ТекущийРегистратор = СсылкаНаОбъект;
		СтруктураПараметров.ВидОтпуска = Строка.ВидОтпуска;
		СтруктураПараметров.ДатаНачала = Дата(1, 1, 1);
		СтруктураПараметров.ДатаОкончания = Дата(1, 1, 1);
		СтруктураПараметров.ДатаКомпенсации = Объект.ДатаУвольнения;
		СтруктураПараметров.КоличествоДнейКомпенсации = Строка.ДнейКомпенсацииУдержания;
		ПериодДополнительногоОтпуска = ОстаткиОтпусков.РабочийПериодОтпуска(СтруктураПараметров);
		
		Строка.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодС;
		Строка.КонецПериодаЗаКоторыйПредоставляетсяОтпуск	= ПериодДополнительногоОтпуска.РабочийГодПо;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПорядокВыплатыПриИзмененииНаСервере()
	
	УстановитьПланируемуюДатуВыплаты();
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПланируемуюДатуВыплаты()
	
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		Если ЗначениеЗаполнено(СсылкаНаИсправленныйДокумент) Тогда
			Объект.ПланируемаяДатаВыплаты = НачалоДня(ТекущаяДатаСеанса() + 86400);
		Иначе
			Объект.ПланируемаяДатаВыплаты = Объект.ДатаУвольнения;
		КонецЕсли;
	Иначе
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, КадровыйУчетРасширенныйКлиентСервер.ОписаниеДокумента(ПараметрыОписанияДокумента(ЭтотОбъект)));
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
		
	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
КонецФункции
&НаСервере
Процедура ЗаполнитьВторичныеДанныеСотрудникаВФорме(ЗаполнитьВидДоговора = Истина)
	
	ЗаполнитьКраткосрочныйТрудовойДоговорСотрудника();
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		СтрокаРеквизитов = "ДатаПриема";
		Если ЗаполнитьВидДоговора Тогда
			СтрокаРеквизитов = СтрокаРеквизитов + ",ВидДоговора";
		КонецЕсли;
		КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), СтрокаРеквизитов);
		Если ЗаполнитьВидДоговора Тогда
			Объект.ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
		КонецЕсли;
		ДатаПриемаНаРаботу = КадровыеДанныеСотрудника[0].ДатаПриема;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКраткосрочныйТрудовойДоговорСотрудника()
	
	КраткосрочныйТрудовойДоговорСотрудника = ОстаткиОтпусков.СотрудникРаботаетПоКраткосрочномуТрудовомуДоговору(Объект.Сотрудник, Объект.ДатаУвольнения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуОсновногоСреднегоЗаработка()
	
	Если КраткосрочныйТрудовойДоговорСотрудника Тогда		
		Элементы.СтраницыПоказательСреднегоЗаработка.ТекущаяСтраница = Элементы.СтраницыПоказательСреднегоЗаработка.ПодчиненныеЭлементы.СтраницаПоказательСреднегоЗаработкаПоРабочимДням;	
	Иначе
		Элементы.СтраницыПоказательСреднегоЗаработка.ТекущаяСтраница = Элементы.СтраницыПоказательСреднегоЗаработка.ПодчиненныеЭлементы.СтраницаПоказательСреднегоЗаработкаПоКалендарнымДням;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "Объект.ГлавныйБухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Объект.Бухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("РаботникКадровойСлужбы", "Объект.РаботникКадровойСлужбы");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРаботникаКадровойСлужбы", "Объект.ДолжностьРаботникаКадровойСлужбы");
	
	ЗапрашиваемыеЗначения.Вставить("Исполнитель", "Объект.Исполнитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьИсполнителя", "Объект.ДолжностьИсполнителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	
	Если ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении") Тогда
		ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.Исполнитель");	
	Иначе
		
		Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС") Тогда
			ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.РаботникКадровойСлужбы");
		Иначе
			ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.Бухгалтер", "Объект.РаботникКадровойСлужбы");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗакрытьПослеПроведения(Результат, ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СтруктураСОписаниемДокумента(РассчитатьНачисления = Ложь)
	
	Если РассчитатьНачисления Тогда
		РассчитатьНачисленияНаСервере();
	КонецЕсли;
	
	РеквизитыВДанные(Объект);

	ОписаниеДокумента = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным("Документ.Увольнение");
	ЗарплатаКадрыРасширенный.ЗаполнитьОбъектПоОбразцу(ОписаниеДокумента, Объект);
	
	ОписаниеДокумента.Вставить("ЗаполнениеВыполнено", ЗаполнениеВыполнено);
	
	Возврат ОписаниеДокумента;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемФормыРедактированияСтрокиДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеДокумента = СтруктураСОписаниемДокумента();
		Модифицированность = Ложь;
		Закрыть(ОписаниеДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНадписьОстаткиОтгулов()

	ДниЧасыНакопленныхОтгулов = УчетРабочегоВремени.ДниЧасыНакопленныхОтгулов(Объект.Организация, Объект.Сотрудник, Объект.ДатаУвольнения);
	
	Если ДниЧасыНакопленныхОтгулов.РасходДнейОтгула > 0 ИЛИ ДниЧасыНакопленныхОтгулов.РасходЧасовОтгула > 0 Тогда
		
		Если ДниЧасыНакопленныхОтгулов.РасходДнейОтгула > 0 И ДниЧасыНакопленныхОтгулов.РасходЧасовОтгула > 0 Тогда
			НадписьОстаткиОтгулов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='У сотрудника остались неиспользованными %1 дн. и %2 ч. отгулов.';uk='У співробітника залишилися невикористаними %1 дн. і %2 год. відгулів.'"),
				ДниЧасыНакопленныхОтгулов.РасходДнейОтгула,
				ДниЧасыНакопленныхОтгулов.РасходЧасовОтгула);
		ИначеЕсли ДниЧасыНакопленныхОтгулов.РасходДнейОтгула > 0 Тогда
			НадписьОстаткиОтгулов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='У сотрудника остались неиспользованными %1 дн. отгулов.';uk='У співробітника залишилися невикористаними %1 дн. відгулів.'"),
				ДниЧасыНакопленныхОтгулов.РасходДнейОтгула);
		Иначе
			НадписьОстаткиОтгулов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='У сотрудника остались неиспользованными %1 ч. отгулов.';uk='У співробітника залишилися невикористаними %1 ч. відгулів.'"),
				ДниЧасыНакопленныхОтгулов.РасходЧасовОтгула);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НадписьОстаткиОтгулов",
			"Видимость",
			Истина);
			
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НадписьОстаткиОтгулов",
			"Видимость",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗначенияПоказателейРасчетаЗарплаты(Движения, ТаблицаЗначенийПоказателей)
	
	Для Каждого СтрокаЗначений Из ТаблицаЗначенийПоказателей Цикл
		НаборЗаписей = Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников;
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаЗначений);
	КонецЦикла;
	
	Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записать();
	Движения.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Записывать = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ОкончательныйРасчетНДФЛ()

	Возврат Ложь;
	
КонецФункции

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;

#КонецОбласти 
