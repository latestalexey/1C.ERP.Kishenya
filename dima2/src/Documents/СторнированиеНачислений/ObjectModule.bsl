#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Документы.СторнированиеНачислений.ПровестиПоУчетам(Ссылка, РежимПроведения, Отказ, Неопределено, Движения, ЭтотОбъект, ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Действие") Тогда
		Если ДанныеЗаполнения.Действие = "Сторнировать" Тогда
			ЗаполнитьПоСторнируемомуДокументу(ДанныеЗаполнения.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьДокументОснование(Отказ);
	ПроверитьПериодДействияНачислений(Отказ);
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СторнируемыйДокумент) Тогда
		// Сторнирование производим следующим месяцем, бессмысленно сторнировать текущим месяцем.
		МетаданныеДокумента = ЭтотОбъект.СторнируемыйДокумент.Метаданные();
		ИмяПоляПериодРегистрацииДокумента = "ПериодРегистрации";
		Если МетаданныеДокумента.Реквизиты.Найти(ИмяПоляПериодРегистрацииДокумента) = Неопределено Тогда
			ИмяПоляПериодРегистрацииДокумента = "МесяцНачисления";
		КонецЕсли;
		ПериодРегистрацииСторнируемогоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.СторнируемыйДокумент, ИмяПоляПериодРегистрацииДокумента);
		Если ПериодРегистрацииСторнируемогоДокумента <> Неопределено
			И ПериодРегистрацииСторнируемогоДокумента >= ЭтотОбъект.ПериодРегистрации Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Период, в котором выполняется сторнирование должен быть более поздним, чем период сторнируемого документа (%1 г.)';uk='Період, в якому виконується сторнування повинен бути пізнішим, ніж період документа, що сторнується (%1 р.)'"),
				Формат(ПериодРегистрацииСторнируемогоДокумента, "ДФ='ММММ гггг'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ПериодРегистрации",,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПериодДействияНачислений(Отказ)
	
	ПараметрыПроверкиПериодаДействия = РасчетЗарплатыРасширенный.ПараметрыПроверкиПериодаДействия();
	ПараметрыПроверкиПериодаДействия.Ссылка = ЭтотОбъект.Ссылка;
	ПроверяемыеКоллекции = Новый Массив;
	ПроверяемыеКоллекции.Добавить(РасчетЗарплатыРасширенный.ОписаниеКоллекцииДляПроверкиПериодаДействия("ДоначисленияИПерерасчеты", НСтр("ru='Доначисления и перерасчеты';uk='Донарахування та перерахунки'")));
	РасчетЗарплатыРасширенный.ПроверитьПериодДействияВКоллекцияхНачислений(ЭтотОбъект, ПараметрыПроверкиПериодаДействия, ПроверяемыеКоллекции, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьПоСторнируемомуДокументу(ДокументОснование)
	
	Сторнировано.Очистить();
	ДоначисленияИПерерасчеты.Очистить();
	Показатели.Очистить();
	РаспределениеРезультатовНачислений.Очистить();
	РаспределениеПоТерриториямУсловиямТруда.Очистить();
	
	СторнируемыйДокумент = ДокументОснование;
	МетаданныеДокумента = СторнируемыйДокумент.Метаданные();
	ДокументБезДатаНачала = Ложь;
	Если МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("ДатаНачала") = Неопределено Тогда
		ДокументБезДатаНачала = Истина;
	КонецЕсли;
	ДокументБезНачисление = Ложь;
	Если МетаданныеДокумента.ТабличныеЧасти.Начисления.Реквизиты.Найти("Начисление") = Неопределено Тогда
		ДокументБезНачисление = Истина;
	КонецЕсли;
	ИмяПоляПериодРегистрацииДокумента = "ПериодРегистрации";
	Если МетаданныеДокумента.Реквизиты.Найти(ИмяПоляПериодРегистрацииДокумента) = Неопределено Тогда
		ИмяПоляПериодРегистрацииДокумента = "МесяцНачисления";
	КонецЕсли;
	
	РеквизитНачислениеДокумента = "";
	Если ДокументБезНачисление Тогда
		Для Каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
			Если Реквизит.Тип.Типы()[0] = Тип("ПланВидовРасчетаСсылка.Начисления") Тогда 
				РеквизитНачислениеДокумента = Реквизит.Имя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НачислениеДокумента = Неопределено;
	Если ЗначениеЗаполнено(РеквизитНачислениеДокумента) Тогда
		// Получаем начисление из "шапки" документа.
		НачислениеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СторнируемыйДокумент, РеквизитНачислениеДокумента);
	КонецЕсли;
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СторнируемыйДокумент, "Организация");
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(СторнируемыйДокумент);
	
	Если ДокументБезДатаНачала Тогда
		// Это случай, когда сторнируется документ без вытесняющих начислений (пример - Премия).
		ТекстЗапроса = "ВЫБРАТЬ
		|	*
		|ИЗ
		|	#Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	#РаспределениеРезультатовНачислений КАК РаспределениеРезультатов
		|ГДЕ
		|	РаспределениеРезультатов.Ссылка = &Ссылка";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	#Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|;
		|
		|///////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	#РаспределениеРезультатовНачислений КАК РаспределениеРезультатов
		|ГДЕ
		|	РаспределениеРезультатов.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Начисления.ДатаНачала) КАК НачалоСтарогоПериода,
		|	МАКСИМУМ(Начисления.ДатаОкончания) КАК ОкончаниеСтарогоПериода,
		|	Начисления.Ссылка.Организация КАК Организация,
		|	Начисления.Ссылка.ПериодРегистрации КАК ПериодРегистрации
		|ИЗ
		|	#Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Ссылка.Организация,
		|	Начисления.Ссылка.ПериодРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	#НачисленияПерерасчет КАК НачисленияПерерасчет
		|ГДЕ
		|	НачисленияПерерасчет.Ссылка = &Ссылка
		|	И НЕ НачисленияПерерасчет.ФиксРасчет
		|	И НачисленияПерерасчет.Сторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	#Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Начисления", ИмяТаблицы + ".Начисления");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#НачисленияПерерасчет", ИмяТаблицы + ".НачисленияПерерасчет");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовНачислений", ИмяТаблицы + ".РаспределениеРезультатовНачислений");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Ссылка.ПериодРегистрации", "Начисления.Ссылка." + ИмяПоляПериодРегистрацииДокумента);
	Запрос.УстановитьПараметр("Ссылка", СторнируемыйДокумент);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	НачисленияЗаднимЧислом = ИсправлениеДокументовРасчетЗарплаты.ПустаяТаблицаНачисленийЗаднимЧислом();
	
	РегистраторНаборДляЗаполненияПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, РегистраторНаборДляЗаполненияПерерасчета);
	
	НаборДляЗаполненияПерерасчета = НаборыЗаписей["Начисления"];
	ЗначенияПоказателейНабор = НаборыЗаписей["ЗначенияПоказателейНачислений"];
	
	ВыборкаНачислений = Результаты[0].Выбрать();
	РаспределениеРезультатов = Результаты[1].Выгрузить();
	ОтборСтрок = Новый Структура("ИдентификаторСтроки");
	// Заполним сторнируемые начисления.
	Пока ВыборкаНачислений.Следующий() Цикл
		НоваяСтрока = Сторнировано.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачислений);
		НоваяСтрока.Результат = - НоваяСтрока.Результат;
		НоваяСтрока.ОтработаноДней = - НоваяСтрока.ОтработаноДней;
		НоваяСтрока.ОтработаноЧасов = - НоваяСтрока.ОтработаноЧасов;
		НоваяСтрока.ОплаченоДней = - НоваяСтрока.ОплаченоДней;
		НоваяСтрока.ОплаченоЧасов = - НоваяСтрока.ОплаченоЧасов;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			НоваяСтрока.Начисление = НачислениеДокумента;
		Иначе
			НоваяСтрока.Начисление = ВыборкаНачислений.Начисление;
		КонецЕсли;
		Если НЕ ДокументБезДатаНачала Тогда
			НоваяСтрока.ДатаНачала = ВыборкаНачислений.ДатаНачала;
			НоваяСтрока.ДатаОкончания = ВыборкаНачислений.ДатаОкончания;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
			НоваяСтрока.ПериодДействия = НачалоМесяца(НоваяСтрока.ДатаНачала);
		КонецЕсли;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ФиксРасчет = Истина;
		
		СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, ВыборкаНачислений);
		СтрокаНачисленийЗаднимЧислом.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = 0;
		СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = Неопределено;
		СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = Неопределено;
		Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
			СтрокаНачисленийЗаднимЧислом.ВидРасчета = НачислениеДокумента;
		Иначе
			СтрокаНачисленийЗаднимЧислом.ВидРасчета = ВыборкаНачислений.Начисление;
		КонецЕсли;
		Если НЕ ДокументБезДатаНачала Тогда
			СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = ВыборкаНачислений.ДатаНачала;
			СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = ВыборкаНачислений.ДатаОкончания;
		КонецЕсли;
		СтрокаНачисленийЗаднимЧислом.Сторно = Истина;
		
		ОтборСтрок.ИдентификаторСтроки = НоваяСтрока.ИдентификаторСтрокиВидаРасчета;
		СтрокиРаспределения = РаспределениеРезультатов.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			НоваяСтрока = РаспределениеРезультатовНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
			НоваяСтрока.Результат = - НоваяСтрока.Результат;
		КонецЦикла;
		
	КонецЦикла;
	Если ДокументБезДатаНачала Тогда
		ПериодРегистрацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СторнируемыйДокумент, ИмяПоляПериодРегистрацииДокумента);
		ЗарплатаКадрыРасширенный.СкорректироватьДатыНачисленийБезПериодаДействия(Сторнировано, ПериодРегистрацииДокумента);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если Не ДокументБезДатаНачала Тогда
		ВыборкаДанныеСторнируемого = Результаты[2].Выбрать();
		Если ВыборкаДанныеСторнируемого.Следующий() Тогда
			
			ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
			НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылка);
			ВременнаяСсылкаФизлицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
			
			НачалоСтарогоПериода = ВыборкаДанныеСторнируемого.НачалоСтарогоПериода;
			ОкончаниеСтарогоПериода = ВыборкаДанныеСторнируемого.ОкончаниеСтарогоПериода;
			
			ВременныйПериодРегистрации = ВыборкаДанныеСторнируемого.ПериодРегистрации;
			ВременныйСледующийПериодРегистрации = ДобавитьМесяц(ВременныйПериодРегистрации, 1);
			
			// "старые" сотрудники
			// таблица для использования в РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплаты
			ТаблицаСтарыхСотрудников = Новый ТаблицаЗначений;
			ТаблицаСтарыхСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			ТаблицаСтарыхСотрудников.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
			// Организации старых сотрудников.
			ГоловныеОрганизацииСотрудников = Новый Соответствие;
			
			ВыборкаСтарыеСотрудники = Результаты[4].Выбрать();
			
			Сотрудники = Новый Массив;
			Пока ВыборкаСтарыеСотрудники.Следующий() Цикл
				ГоловныеОрганизацииСотрудников[ВыборкаСтарыеСотрудники.Сотрудник] = ВыборкаСтарыеСотрудники.ГоловнаяОрганизация;
				Сотрудники.Добавить(ВыборкаСтарыеСотрудники.Сотрудник);
			КонецЦикла;
			
			// Получим данные плановых начислений за исправляемый период.
			ПлановыеНачисления = РасчетЗарплатыРасширенный.ДанныеДляНачисленияЗарплаты(ВыборкаДанныеСторнируемого.Организация, НачалоСтарогоПериода, ОкончаниеСтарогоПериода, ВыборкаДанныеСторнируемого.ПериодРегистрации, , Сотрудники, , , , Ссылка);
			КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете();
			
			ИдентификаторСтрокиПлановые = 1;
			
			// Добавим во временный набор плановые начисления сторнируемого периода.
			Для Каждого СтрокаНачисления Из ПлановыеНачисления Цикл
				НоваяСтрока = НачисленияНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
				НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
				// Настоящая головная организация.
				НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[СтрокаНачисления.Сотрудник];
				НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "старый" сотрудник.
				НоваяСтрока.Регистратор = ВременнаяСсылка;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтрокиПлановые;
				НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
				НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
				НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
				НоваяСтрока.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
				
				// Сохраним показатели во временный набор записей.
				Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
					Показатель = СтрокаНачисления["Показатель" + НомерПоказателя];
					Если ЗначениеЗаполнено(Показатель) Тогда
						НоваяСтрокаПоказателя = ЗначенияПоказателейНабор.Добавить();
						НоваяСтрокаПоказателя.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
						НоваяСтрокаПоказателя.РегистраторИзмерение = РегистраторНаборДляЗаполненияПерерасчета;
						НоваяСтрокаПоказателя.ИдентификаторСтроки = ИдентификаторСтрокиПлановые;
						НоваяСтрокаПоказателя.Показатель = Показатель;
						НоваяСтрокаПоказателя.Значение = СтрокаНачисления["Значение" + НомерПоказателя];
					КонецЕсли;
				КонецЦикла;
				
				ИдентификаторСтрокиПлановые = ИдентификаторСтрокиПлановые + 1;
				
			КонецЦикла;
			
			ВыборкаНачислений.Сбросить();
			// Заполним сторнируемые начисления.
			Пока ВыборкаНачислений.Следующий() Цикл
				НоваяСтрока = НачисленияНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНачислений);
				// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
				НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
				// Настоящая головная организация.
				НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[ВыборкаНачислений.Сотрудник];
				НоваяСтрока.Сотрудник = ВыборкаНачислений.Сотрудник; // Настоящий "старый" сотрудник.
				НоваяСтрока.Регистратор = ВременнаяСсылка;
				Если ЗначениеЗаполнено(НачислениеДокумента) Тогда
					НоваяСтрока.ВидРасчета = НачислениеДокумента;
				Иначе
					НоваяСтрока.ВидРасчета = ВыборкаНачислений.Начисление;
				КонецЕсли;
				НоваяСтрока.ПериодРегистрации = ВременныйСледующийПериодРегистрации;
				НоваяСтрока.ПериодДействияНачало = ВыборкаНачислений.ДатаНачала;
				НоваяСтрока.ПериодДействияКонец = ВыборкаНачислений.ДатаОкончания;
				
			КонецЦикла;
			
			ЗаписиДоначисления = НачисленияНабор.ПолучитьДополнение();
			
			ИдентификаторСтроки = 1;
			Для Каждого СтрокаДоначисления Из ЗаписиДоначисления Цикл
				СтрокаНачисленийЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНачисленийЗаднимЧислом, СтрокаДоначисления);
				СтрокаНачисленийЗаднимЧислом.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
				СтрокаНачисленийЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
				СтрокаНачисленийЗаднимЧислом.РегистраторПоказателей = РегистраторНаборДляЗаполненияПерерасчета;
				СтрокаНачисленийЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаДоначисления.ИдентификаторСтроки;
				СтрокаНачисленийЗаднимЧислом.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
				СтрокаНачисленийЗаднимЧислом.ПериодДействияКонец = СтрокаДоначисления.ПериодДействияКонецСторно;
				СтрокаНачисленийЗаднимЧислом.Сторно = Ложь;
				
				НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоначисления);
				НоваяСтрока.ФизическоеЛицо = СтрокаДоначисления.ФизическоеЛицо;
				НоваяСтрока.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников[НоваяСтрока.Сотрудник];
				НоваяСтрока.Регистратор = РегистраторНаборДляЗаполненияПерерасчета;
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.Сторно = Ложь;
				НоваяСтрока.ПериодРегистрации = СтрокаДоначисления.ПериодРегистрацииСторно;
				НоваяСтрока.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
				НоваяСтрока.ПериодДействияКонец = СтрокаДоначисления.ПериодДействияКонецСторно;
				
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
				
			КонецЦикла;
			НачисленияНабор.Очистить();
			
			УстановитьПривилегированныйРежим(Истина);
			НачисленияНабор.Записать();
			НаборДляЗаполненияПерерасчета.Записать();
			ЗначенияПоказателейНабор.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	// Сторнирование производим следующим месяцем, бессмысленно сторнировать текущим месяцем.
	ПериодРегистрацииСторнируемогоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, ИмяПоляПериодРегистрацииДокумента);
	Если ПериодРегистрацииСторнируемогоДокумента <> Неопределено
		И ПериодРегистрацииСторнируемогоДокумента >= ЭтотОбъект.ПериодРегистрации Тогда
		ЭтотОбъект.ПериодРегистрации = ДобавитьМесяц(ПериодРегистрацииСторнируемогоДокумента, 1);
	КонецЕсли;
	
	ИсправлениеДокументовРасчетЗарплаты.ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(ПериодРегистрации, НачисленияЗаднимЧислом, ДоначисленияИПерерасчеты, РегистраторНаборДляЗаполненияПерерасчета,, Показатели);
	
	ОтменитьТранзакцию();
	
КонецПроцедуры

Процедура ПроверитьДокументОснование(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СторнируемыйДокумент", СторнируемыйДокумент);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СторнированиеНачислений.Ссылка
	|ИЗ
	|	Документ.СторнированиеНачислений КАК СторнированиеНачислений
	|ГДЕ
	|	СторнированиеНачислений.Проведен
	|	И СторнированиеНачислений.СторнируемыйДокумент = &СторнируемыйДокумент
	|	И СторнированиеНачислений.Ссылка <> &Ссылка";
	
	ШаблонСообщения = НСтр("ru='Документ %1 уже сторнирован документом %2';uk='Документ %1 вже сторновано документом %2'");
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СторнируемыйДокумент, Выборка.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.СторнируемыйДокумент",,Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
