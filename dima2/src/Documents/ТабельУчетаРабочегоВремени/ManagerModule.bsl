#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	Если ВидФормы = "ФормаОбъекта"
		И (ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьОсобыеУсловияТруда")) Тогда
		
		ВыбраннаяФорма = "ФормаДокументаАльтернативная";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;			
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыЗаполнения

Функция ДанныеОВремениСотрудников(ДанныеТабеля, СписокСотрудников = Неопределено, ЗаполнятьТерриторииУсловияТруда = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыЗаполнения = УчетРабочегоВремени.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
	
	ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
	ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремениИСостоянийСотрудников";
	ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Ложь;
	ПараметрыЗаполнения.Организация  = ДанныеТабеля.Организация;
	ПараметрыЗаполнения.ДатаАктуальности  = НачалоМесяца(ДанныеТабеля.ПериодРегистрации);
	ПараметрыЗаполнения.ДатаНачала = ДанныеТабеля.ДатаНачалаПериода;
	ПараметрыЗаполнения.ДатаОкончания = ДанныеТабеля.ДатаОкончанияПериода;
	ПараметрыЗаполнения.ДатаНачала = ДанныеТабеля.ДатаНачалаПериода;
	ПараметрыЗаполнения.ДатаОкончания = ДанныеТабеля.ДатаОкончанияПериода;
	ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(ДанныеТабеля.ДатаНачалаПериода);
	ПараметрыЗаполнения.МесяцДатаОкончания = КонецМесяца(ДанныеТабеля.ДатаОкончанияПериода);
	ПараметрыЗаполнения.ПолучатьУжеРассчитанныеДанные = Ложь;
	ПараметрыЗаполнения.ПересчитыватьФактическоеВремя = Истина;
	
	ПараметрыЗаполнения.ПолучатьУсловияТрудаИТерритории = ЗаполнятьТерриторииУсловияТруда;
	
	Если ЗначениеЗаполнено(ДанныеТабеля.Подразделение) Тогда
		ПараметрыЗаполнения.Подразделение = ДанныеТабеля.Подразделение;
	КонецЕсли;	
	
	ПараметрыЗаполнения.НеучитываемыеРегистраторы.Добавить(ДанныеТабеля.Ссылка);
	
	Если ЗначениеЗаполнено(ДанныеТабеля.ИсправленныйДокумент) Тогда
		ПараметрыЗаполнения.НеучитываемыеРегистраторы.Добавить(ДанныеТабеля.ИсправленныйДокумент);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыЗаполнения.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыЗаполнения.ДатаОкончания);
	
	Если СписокСотрудников = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  = ДанныеТабеля.Организация;
		ПараметрыПолученияСотрудников.НачалоПериода = ДанныеТабеля.ДатаНачалаПериода;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = ДанныеТабеля.ДатаОкончанияПериода;
		
		// Подработки
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
			
			ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
			
		КонецЕсли;	
		// Подработки конец
		
		
		КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников);
	
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, "ВТСотрудникиОрганизации");
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник,
		|	&ДатаНачала,
		|	&ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
		
		Запрос.Выполнить();
		
	Иначе
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
		Для каждого Сотрудник Из СписокСотрудников Цикл
			СтрокаТаблицы = ТаблицаСотрудников.Добавить();
			СтрокаТаблицы.Сотрудник = Сотрудник;
			СтрокаТаблицы.ДатаНачала = ДанныеТабеля.ДатаНачалаПериода;
			СтрокаТаблицы.ДатаОкончания = ДанныеТабеля.ДатаОкончанияПериода;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.ДатаНачала,
		|	ТаблицаСотрудников.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
		
		Запрос.Выполнить();

	КонецЕсли;	
	
	УчетРабочегоВремени.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	Запрос.УстановитьПараметр("Явка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Запрос.УстановитьПараметр("ВечерниеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	Запрос.УстановитьПараметр("НочныеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	Запрос.УстановитьПараметр("Сверхурочно", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОНЕЦПЕРИОДА(ДанныеУчетаВремениИСостоянийСотрудников.Дата, МЕСЯЦ) КАК Период,
		|	ДанныеУчетаВремениИСостоянийСотрудников.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСПериодомКонцаМесяца
		|ИЗ
		|	ВТДанныеУчетаВремениИСостоянийСотрудников КАК ДанныеУчетаВремениИСостоянийСотрудников
		|ГДЕ
		|	ДанныеУчетаВремениИСостоянийСотрудников.ВидУчетаВремени <> &РабочееВремя";
		
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиСПериодомКонцаМесяца");
		
	ОписательТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковНаКонецМесяца";
	
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, КадровыеДанные);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчетаВремениИСостоянийСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Дата КАК Дата,
	|	ДанныеУчетаВремениИСостоянийСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Дни КАК Дни,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Часы КАК Часы,
	|	ДанныеУчетаВремениИСостоянийСотрудников.НормаЧасов,
	|	ВЫБОР
	|		КОГДА ОписаниеВидовВремени.Ссылка = &Явка
	|			ТОГДА 1
	|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &Явка
	|			ТОГДА 2
	|		КОГДА ОписаниеВидовВремени.Ссылка = &ВечерниеЧасы
	|			ТОГДА 3
	|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &ВечерниеЧасы
	|			ТОГДА 3
	|		КОГДА ОписаниеВидовВремени.Ссылка = &НочныеЧасы
	|			ТОГДА 5
	|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &НочныеЧасы
	|			ТОГДА 6
	|		КОГДА ОписаниеВидовВремени.Ссылка = &Сверхурочно
	|			ТОГДА 7
	|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &Сверхурочно
	|			ТОГДА 8
	|		ИНАЧЕ 9
	|	КОНЕЦ КАК ПриоритетВидаВремени,
	|	ДанныеУчетаВремениИСостоянийСотрудников.Территория КАК Территория,
	|	ДанныеУчетаВремениИСостоянийСотрудников.УсловияТруда КАК УсловияТруда
	|ИЗ
	|	ВТДанныеУчетаВремениИСостоянийСотрудников КАК ДанныеУчетаВремениИСостоянийСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеВидовВремени
	|		ПО ДанныеУчетаВремениИСостоянийСотрудников.ВидУчетаВремени = ОписаниеВидовВремени.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудниковНаКонецМесяца КАК КадровыеДанныеСотрудниковНаКонецМесяца
	|		ПО ДанныеУчетаВремениИСостоянийСотрудников.Сотрудник = КадровыеДанныеСотрудниковНаКонецМесяца.Сотрудник
	|			И (КОНЕЦПЕРИОДА(ДанныеУчетаВремениИСостоянийСотрудников.Дата, МЕСЯЦ) = КадровыеДанныеСотрудниковНаКонецМесяца.Период)
	|ГДЕ
	|	ДанныеУчетаВремениИСостоянийСотрудников.ВидУчетаВремени <> &РабочееВремя
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Дата,
	|	ПриоритетВидаВремени,
	|	ОписаниеВидовВремени.Наименование,
	|	ВидУчетаВремени,
	|	Территория,
	|	УсловияТруда";
	
	ПсевдонимыТаблиц = Новый Соответствие;
	ПсевдонимыТаблиц.Вставить("Справочник.ПодразделенияОрганизаций", "КадровыеДанныеСотрудниковНаКонецМесяца");
	ПсевдонимыТаблиц.Вставить("Справочник.Должности", "КадровыеДанныеСотрудниковНаКонецМесяца");
	ПсевдонимыТаблиц.Вставить("Справочник.Сотрудники", "КадровыеДанныеСотрудниковНаКонецМесяца");
	
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудников(Запрос, ПсевдонимыТаблиц);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ТаблицаДанныхДляЗаполнения(ДанныеТабеля, СписокСотрудников = Неопределено) Экспорт
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Сч = 1 По 31 Цикл
		ТаблицаДанных.Колонки.Добавить("ВидВремени" + Сч, Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
		ТаблицаДанных.Колонки.Добавить("Территория" + Сч, Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
		ТаблицаДанных.Колонки.Добавить("УсловияТруда" + Сч, Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
		ТаблицаДанных.Колонки.Добавить("Часов" + Сч, Новый ОписаниеТипов("Число"));
	КонецЦикла;	
	
	ПараметрыПолученияФО = Новый Структура("Организация", ДанныеТабеля.Организация);
	ИспользуютсяТерритории = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", ПараметрыПолученияФО);
	ИспользуютсяУсловияТруда = ПолучитьФункциональнуюОпцию("ИспользоватьОсобыеУсловияТруда", ПараметрыПолученияФО);

	ЗаполнятьТерриторииИУсловия =  ИспользуютсяТерритории Или ИспользуютсяУсловияТруда; 
	
	Выборка = ДанныеОВремениСотрудников(ДанныеТабеля, СписокСотрудников, ЗаполнятьТерриторииИУсловия);
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		СтрокиДанныхПоСотруднику = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля("Дата") Цикл
			Постфикс = Строка(День(Выборка.Дата));
			КоличествоКомбинацийЗначенийИзмерений = 0;
			Пока Выборка.Следующий() Цикл
				КоличествоКомбинацийЗначенийИзмерений = КоличествоКомбинацийЗначенийИзмерений + 1;
				
				СтрокаДанных = СтрокаТаблицыДанныхДляЗаполнения(
									ТаблицаДанных, 
									Выборка.Сотрудник, 
									СтрокиДанныхПоСотруднику, 
									КоличествоКомбинацийЗначенийИзмерений);
				
								
				СтрокаДанных["ВидВремени" + Постфикс] = Выборка.ВидУчетаВремени;
				СтрокаДанных["Территория" + Постфикс] = Выборка.Территория;
				СтрокаДанных["УсловияТруда" + Постфикс] = Выборка.УсловияТруда;
				СтрокаДанных["Часов" + Постфикс] = Выборка.Часы;
					
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;	
	
	Возврат ТаблицаДанных;
КонецФункции

Функция СтрокаТаблицыДанныхДляЗаполнения(ТаблицаДанных, Сотрудник, СтрокиДанныхПоСотруднику, КоличествоКомбинацийЗначенийИзмерений)
	Если КоличествоКомбинацийЗначенийИзмерений > СтрокиДанныхПоСотруднику.Количество() Тогда
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Сотрудник = Сотрудник;
		СтрокиДанныхПоСотруднику.Добавить(СтрокаДанных);
	Иначе
		СтрокаДанных = СтрокиДанныхПоСотруднику[КоличествоКомбинацийЗначенийИзмерений - 1];
	КонецЕсли;
	
	Возврат СтрокаДанных;
	
КонецФункции	

Функция ДоступныеДляВводаВидыВремени() Экспорт
	ДоступныеДляВводаВидыВремени = Новый Соответствие;
	
	ВидВремениРабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочееВремя", ВидВремениРабочееВремя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя
	|ИЗ
	|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|ГДЕ
	|	ВидыИспользованияРабочегоВремени.Ссылка <> &РабочееВремя";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоступныеДляВводаВидыВремени.Вставить(Выборка.ОсновноеВремя, Истина);
	КонецЦикла;
	
	Возврат ДоступныеДляВводаВидыВремени;
КонецФункции	

#КонецОбласти

#Область ПроцедурыПечатиДокумента

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// П-5
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ТиповаяФормаП5";
	КомандаПечати.Представление = НСтр("ru='П-5';uk='П-5'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм,
	"ТиповаяФормаП5") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ТиповаяФормаП5",
			"Табель учета рабочего времени (П-5)",
			СформироватьПечатнуюФормуТ13(МассивОбъектов,
				ОбъектыПечати));
	КонецЕсли;

	
КонецПроцедуры

Функция СформироватьЗапросДляПечати(МассивОбъектов)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка,
	|	МИНИМУМ(ТабельУчетаРабочегоВремениДанныеОВремени.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТПорядокСотрудниковВДокументах
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорядокСотрудниковВДокументах.Сотрудник,
	|	ПорядокСотрудниковВДокументах.Ссылка.Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДокументов
	|ИЗ
	|	ВТПорядокСотрудниковВДокументах КАК ПорядокСотрудниковВДокументах";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиДокументов");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь, "ФамилияИО,ФИОПолные,Должность,ТабельныйНомер, ТарифнаяСтавка");

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов1 КАК Часов,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 КАК ВидВремени,
	|	НАЧАЛОПЕРИОДА(ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ДатаНачалаПериода, МЕСЯЦ) КАК Дата,
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТДанныеОВремени
	|ИЗ
	|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
	|ГДЕ
	|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка В(&МассивОбъектов)
	|	И ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|";
	
	Для Сч = 2 По 31 Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов" + Сч + ",
		|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + ",
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ, " + Строка(Сч - 1) + "),
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Дата КАК ДатаДокумента
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка В(&МассивОбъектов)
		|	И ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + " <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)";

	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремени.Дата,
		|	ТабельУчетаРабочегоВремени.ДатаНачалаПериода,
		|	ТабельУчетаРабочегоВремени.ДатаОкончанияПериода,
		|	ТабельУчетаРабочегоВремени.Номер,
		|	ТабельУчетаРабочегоВремени.Ссылка КАК Ссылка,
		|	ТабельУчетаРабочегоВремени.Организация.НаименованиеПолное КАК ОрганизацияНаименование,
		|	ТабельУчетаРабочегоВремени.Подразделение,
		|	ТабельУчетаРабочегоВремени.Подразделение.Наименование,
		|	ТабельУчетаРабочегоВремени.Организация.КодПоЕДРПОУ,
		|	ТабельУчетаРабочегоВремени.Руководитель,
		|	ТабельУчетаРабочегоВремени.ДолжностьРуководителя,
		|	ТабельУчетаРабочегоВремени.РаботникКадровойСлужбы,
		|	ТабельУчетаРабочегоВремени.ДолжностьРаботникаКадровойСлужбы,
		|	ТабельУчетаРабочегоВремени.Исполнитель,
		|	ТабельУчетаРабочегоВремени.ДолжностьИсполнителя
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремени.Ссылка В(&МассивОбъектов)";
		
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "Руководитель,РаботникКадровойСлужбы,Исполнитель", "ВТДанныеДокументов");
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Дата,
		|	ДанныеДокументов.ДатаНачалаПериода,
		|	ДанныеДокументов.ДатаОкончанияПериода,
		|	ДанныеДокументов.Номер,
		|	ДанныеДокументов.Ссылка,
		|	ДанныеДокументов.ОрганизацияНаименование,
		|	ДанныеДокументов.Подразделение,
		|	ДанныеДокументов.ПодразделениеНаименование,
		|	ДанныеДокументов.ОрганизацияКодПоЕДРПОУ,
		|	ФИОРуководителя.РасшифровкаПодписи КАК ФИОРуководителя,
		|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
		|	ФИОРаботникаКадровойСлужбы.РасшифровкаПодписи КАК ФИОКадровика,
		|	ДанныеДокументов.ДолжностьРаботникаКадровойСлужбы КАК ДолжностьКадровика,
		|	ФИОИсполнителя.РасшифровкаПодписи КАК ФИООтветственного,
		|	ДанныеДокументов.ДолжностьИсполнителя КАК ДолжностьОтветственного
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
		|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
		|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаботникаКадровойСлужбы
		|		ПО ДанныеДокументов.Ссылка = ФИОРаботникаКадровойСлужбы.Ссылка
		|			И ДанныеДокументов.РаботникКадровойСлужбы = ФИОРаботникаКадровойСлужбы.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОИсполнителя
		|		ПО ДанныеДокументов.Ссылка = ФИОИсполнителя.Ссылка
		|			И ДанныеДокументов.Исполнитель = ФИОИсполнителя.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДокументов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОВремени.Ссылка КАК Ссылка,
		|	ДанныеОВремени.Сотрудник КАК Сотрудник,
		|	ДанныеОВремени.Дата КАК Дата,
		|	ДанныеОВремени.ВидВремени,
		|	ДанныеОВремени.Часов,
		|	ОписаниеВидовВремени.БуквенныйКод,
		|	ОписаниеВидовВремени.РабочееВремя,
		|	ОписаниеВидовВремени.ОсновноеВремя,
		|	ВЫБОР
		|		КОГДА ОписаниеВидовВремени.Ссылка = &Явка
		|			ТОГДА 1
		|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &Явка
		|			ТОГДА 2
		|		КОГДА ОписаниеВидовВремени.Ссылка = &ВечерниеЧасы
		|			ТОГДА 3
		|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &ВечерниеЧасы
		|			ТОГДА 3
		|		КОГДА ОписаниеВидовВремени.Ссылка = &НочныеЧасы
		|			ТОГДА 5
		|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &НочныеЧасы
		|			ТОГДА 6
		|		КОГДА ОписаниеВидовВремени.Ссылка = &Сверхурочно
		|			ТОГДА 7
		|		КОГДА ОписаниеВидовВремени.ОсновноеВремя = &Сверхурочно
		|			ТОГДА 8
		|		ИНАЧЕ 9
		|	КОНЕЦ КАК Приоритет,
		|	Должности.Наименование КАК Должность,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ФамилияИО, """") КАК ФамилияИО,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ФИОПолные, """") КАК ФИОПолные,
		|	КадровыеДанныеСотрудников.ТабельныйНомер,
		|	Сотрудники.Наименование КАК СотрудникНаименование,
		|	ОписаниеВидовВремени.Целосменное,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка
		|ИЗ
		|	ВТДанныеОВремени КАК ДанныеОВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ДанныеОВремени.Сотрудник = Сотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеВидовВремени
		|		ПО ДанныеОВремени.ВидВремени = ОписаниеВидовВремени.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокСотрудниковВДокументах КАК ПорядокСотрудниковВДокументах
		|		ПО ДанныеОВремени.Сотрудник = ПорядокСотрудниковВДокументах.Сотрудник
		|			И ДанныеОВремени.Сотрудник = ПорядокСотрудниковВДокументах.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
		|			ПО КадровыеДанныеСотрудников.Должность = Должности.Ссылка
		|		ПО ДанныеОВремени.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеОВремени.ДатаДокумента = КадровыеДанныеСотрудников.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ПорядокСотрудниковВДокументах.НомерСтроки,
		|	Сотрудник,
		|	Дата,
		|	Приоритет";	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Явка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Запрос.УстановитьПараметр("ВечерниеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	Запрос.УстановитьПараметр("НочныеЧасы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	Запрос.УстановитьПараметр("Сверхурочно", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
                                
	Возврат Запрос.ВыполнитьПакет();	
КонецФункции

Функция СоответствиеНеявок()
	
	СоответствиеНеявок = Новый ТаблицаЗначений;
	СоответствиеНеявок.Колонки.Добавить("ВидВремени");
	СоответствиеНеявок.Колонки.Добавить("КодКолонкиНевыхода");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 1;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОсновнойОтпуск");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 1;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 1;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ЧернобыльскийОтпуск");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 2;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаДетей");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 2;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 2;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 2;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 2;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 2;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ТворческийОтпуск");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 3;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 4;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 5;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СокращенноеРабочееВремя");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 6;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПереводНаДругуюРаботу");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 7;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Простой");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 8;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы");

	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 9;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Забастовка");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 10;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");

	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 10;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.БолезньБезОплаты");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 11;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 11;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДругиеНеявкиПоКолДоговору");
	
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 11;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДругиеНеявки");
	НоваяСтрока = СоответствиеНеявок.Добавить();
	НоваяСтрока.КодКолонкиНевыхода = 12;
	НоваяСтрока.ВидВремени = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	
	Возврат СоответствиеНеявок;
	
КонецФункции	

Функция СформироватьПечатнуюФормуТ13(МассивОбъектов, ОбъектыПечати)
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	ВидВремениВыходной = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТИПОВАЯ_ФОРМА_П_5";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_UK_ТиповаяФормаП5");
	
	РезультатыЗапросаПоДокументам = СформироватьЗапросДляПечати(МассивОбъектов);
	
	КоличествоРезультатов = РезультатыЗапросаПоДокументам.Количество();
	
	ВыборкаПоДаннымДокументов = РезультатыЗапросаПоДокументам[КоличествоРезультатов - 2].Выбрать();
	
	ДанныеДокументов = Новый Соответствие;
	
	Пока ВыборкаПоДаннымДокументов.Следующий() Цикл
		
		ДанныеДокумента = Новый Структура("Дата, ДатаНачалаПериода, ДатаОкончанияПериода, Номер, ОрганизацияНаименование, Подразделение, ПодразделениеНаименование, ОрганизацияКодПоЕДРПОУ"
			+ ",ФИОРуководителя,ДолжностьРуководителя,ФИОКадровика,ДолжностьКадровика,ФИООтветственного,ДолжностьОтветственного");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, ВыборкаПоДаннымДокументов);							
		ДанныеДокументов.Вставить(ВыборкаПоДаннымДокументов.Ссылка, ДанныеДокумента);							
		
	КонецЦикла;	
	
	ВыборкаДанныхОВремени = РезультатыЗапросаПоДокументам[КоличествоРезультатов - 1].Выбрать();
	
	ВидВремениКомандировка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка");
	
	СоответствиеНеявок = СоответствиеНеявок();
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.АвтоМасштаб = Истина;
	ТекущийЛист.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;	
	Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТекущийЛист = Новый ТабличныйДокумент;
			ТекущийЛист.АвтоМасштаб = Истина;
			ТекущийЛист.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ДанныеДокумента = ДанныеДокументов[ВыборкаДанныхОВремени.Ссылка];
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.ДатаЗаполнения = ДанныеДокумента.Дата;
		ОбластьШапка.Параметры.ДатаНачала = ДанныеДокумента.ДатаНачалаПериода;
		ОбластьШапка.Параметры.ДатаОкончания = ДанныеДокумента.ДатаОкончанияПериода;
		ОбластьШапка.Параметры.ОрганизацияНаименованиеПолное = ДанныеДокумента.ОрганизацияНаименование;
		
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ДанныеДокумента.Подразделение) Тогда
			ОбластьШапка.Параметры.ПодразделениеНаименование = ДанныеДокумента.Подразделение.ПолноеНаименование();
		Иначе
			ОбластьШапка.Параметры.ПодразделениеНаименование = ДанныеДокумента.ПодразделениеНаименование;
		КонецЕсли;
		
		ОбластьШапка.Параметры.КодПоЕДРПОУ = ДанныеДокумента.ОрганизацияКодПоЕДРПОУ;
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТекущийЛист.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		ТекущийЛист.Вывести(ОбластьШапкаТаблицы);

		НомерСотрудника = 0;
		Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
			ОтработаноДнейЗаМесяц = 0;
			ОтработаноЧасовЗаМесяц = 0;
			
			НомерСотрудника = НомерСотрудника + 1;
			
			ОбластьДанныеОВремени = Макет.ПолучитьОбласть("Строка");
			
			Если НастройкиПечатныхФорм.ВыводитьПолныеФИОВСписочныхПечатныхФормах Тогда
				ФИО = ВыборкаДанныхОВремени.ФИОПолные;
			Иначе
				ФИО = ВыборкаДанныхОВремени.ФамилияИО;
			КонецЕсли;
			
			ОбластьДанныеОВремени.Параметры.ФИО = ФИО; 
			ОбластьДанныеОВремени.Параметры.Должность = ВыборкаДанныхОВремени.Должность;	
										
			ОбластьДанныеОВремени.Параметры.ТабельныйНомер = ВыборкаДанныхОВремени.ТабельныйНомер;	
			
			ОбластьДанныеОВремени.Параметры.НомерПП = НомерСотрудника;	
			
			ОтклоненияПоСотруднику = Новый ТаблицаЗначений;
			ОтклоненияПоСотруднику.Колонки.Добавить("ВидВремени");
			ОтклоненияПоСотруднику.Колонки.Добавить("БуквенныйКод");
			ОтклоненияПоСотруднику.Колонки.Добавить("Часов");
			ОтклоненияПоСотруднику.Колонки.Добавить("Дней");
			ОтклоненияПоСотруднику.Колонки.Добавить("КодКолонкиНевыхода");

			ОбластьДанныеОВремени.Параметры.ТарифнаяСтавка = ВыборкаДанныхОВремени.ТарифнаяСтавка;
			
			Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Дата") Цикл 
				ПредставлениеВидовВремени = "";
				ЧасыПоВидамВремениСтрока = "";
				
				КоличествоЗаписейНаДату = 0;
				ЭтоКомандировка = Ложь;
	
				РабочийДень = Ложь;
				Пока ВыборкаДанныхОВремени.Следующий() Цикл
					Если Не ВыборкаДанныхОВремени.РабочееВремя 
						И ВыборкаДанныхОВремени.ВидВремени <> ВидВремениВыходной
						И ВыборкаДанныхОВремени.ОсновноеВремя <> Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка() Тогда
						
						ОтклоненияПоВидуВремени = ОтклоненияПоСотруднику.Добавить();
						
						ОтклоненияПоВидуВремени.ВидВремени = ВыборкаДанныхОВремени.ВидВремени;
						ОтклоненияПоВидуВремени.БуквенныйКод = ВыборкаДанныхОВремени.БуквенныйКод;
						ОтклоненияПоВидуВремени.Дней = 1;
						ОтклоненияПоВидуВремени.Часов = ВыборкаДанныхОВремени.Часов;
						
						Отбор = Новый Структура();
						Отбор.Вставить("ВидВремени", ВыборкаДанныхОВремени.ВидВремени);
						
						Строки = СоответствиеНеявок.НайтиСтроки(Отбор);
						Если Строки.Количество() > 0 Тогда
							ОтклоненияПоВидуВремени.КодКолонкиНевыхода = Строки[0].КодКолонкиНевыхода;
						КонецЕсли;
						
					КонецЕсли;
					
					ПредставлениеВидовВремени = ПредставлениеВидовВремени + "/"+  ВыборкаДанныхОВремени.БуквенныйКод;
					
					Если Не ВыборкаДанныхОВремени.Целосменное Тогда
						
						ЧасыПоВидамВремениСтрока = ЧасыПоВидамВремениСтрока +  "/" + Формат(ВыборкаДанныхОВремени.Часов, "ЧГ=");
					КонецЕсли;
					
					Если ВыборкаДанныхОВремени.РабочееВремя 
						И ВыборкаДанныхОВремени.ОсновноеВремя <> Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка() Тогда
						
						РабочийДень = Истина;
						ОтработаноЧасовЗаМесяц = ОтработаноЧасовЗаМесяц + ВыборкаДанныхОВремени.Часов;
						
					КонецЕсли;
					
					КоличествоЗаписейНаДату = КоличествоЗаписейНаДату + 1;
					Если ВыборкаДанныхОВремени.ОсновноеВремя = ВидВремениКомандировка Тогда
						ЭтоКомандировка = Истина;
					КонецЕсли;	
					
				КонецЦикла;
				
				Если КоличествоЗаписейНаДату = 1
					И ЭтоКомандировка Тогда  
					
					ЧасыПоВидамВремениСтрока = "";
				КонецЕсли;
				
				Если РабочийДень Тогда
					ОтработаноДнейЗаМесяц = ОтработаноДнейЗаМесяц + 1;
				КонецЕсли;
				
				НомерДня = День(ВыборкаДанныхОВремени.Дата);
				
				ОбластьДанныеОВремени.Параметры["Символ" + НомерДня] = Сред(ПредставлениеВидовВремени, 2);
				ОбластьДанныеОВремени.Параметры["ДополнительноеЗначение"+ НомерДня] = Сред(ЧасыПоВидамВремениСтрока, 2);
				
			КонецЦикла;
			
			ОбластьДанныеОВремени.Параметры.ДниЗаМесяц = ОтработаноДнейЗаМесяц;
			ОбластьДанныеОВремени.Параметры.ЧасыЗаМесяц = ОтработаноЧасовЗаМесяц;
			
			ОтклоненияПоСотруднику.Свернуть("ВидВремени, БуквенныйКод, КодКолонкиНевыхода", "Дней, Часов");
			
			НеявкиВсегоДни = 0;
			НеявкиВсегоЧасы = 0;
			Для Каждого ОтклонениеПоВидуВремени Из ОтклоненияПоСотруднику Цикл
				
				ОбластьДанныеОВремени.Параметры["НеявкиДни" + ОтклонениеПоВидуВремени.КодКолонкиНевыхода] =  Формат(ОтклонениеПоВидуВремени.Дней, "ЧГ=");
				ОбластьДанныеОВремени.Параметры["НеявкиЧасы" + ОтклонениеПоВидуВремени.КодКолонкиНевыхода] =  Формат(ОтклонениеПоВидуВремени.Часов, "ЧГ=");
				НеявкиВсегоДни = НеявкиВсегоДни + ОтклонениеПоВидуВремени.Дней;
				НеявкиВсегоЧасы = НеявкиВсегоЧасы + ОтклонениеПоВидуВремени.Часов;
			КонецЦикла;
			ОбластьДанныеОВремени.Параметры.НеявкиВсегоДни = Формат(НеявкиВсегоДни, "ЧГ=");
			ОбластьДанныеОВремени.Параметры.НеявкиВсегоЧасы = Формат(НеявкиВсегоЧасы, "ЧГ=");
	
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьДанныеОВремени);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТекущийЛист, МассивОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ТекущийЛист = Новый ТабличныйДокумент;
				ТекущийЛист.АвтоМасштаб = Истина;
				ТекущийЛист.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				ТекущийЛист.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьДанныеОВремени);
			ТекущийЛист.Вывести(ОбластьДанныеОВремени);
		КонецЦикла;
		
		ОбластьПодвал.Параметры.Заполнить(ДанныеДокумента);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		ТекущийЛист.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДанныхОВремени.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции
#КонецОбласти

#КонецОбласти

#КонецЕсли