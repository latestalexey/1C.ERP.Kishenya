&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ИнициализироватьМеханизмПересчетаДокументаПриРедактировании(ЭтаФорма);
	
	Если Параметры.Ключ.Пустая() Тогда  // форма нового
		ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
		ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура("ЧтениеБезОграничений, ИзменениеБезОграничений, ИзменениеКадровыхДанных", Ложь, Ложь, Ложь);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасчетЗарплатыРасширенныйФормы.ДокументыПриСозданииНаСервере(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Объект.Сотрудник = Параметры.Сотрудник;
		КонецЕсли;
		
		ЗаполнитьДанныеФормыПоОрганизации();
		ПриПолученииДанныхНаСервере(РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.Командировка")));
		
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		ОпределитьВидУчетаВремениДляСредней();
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
		
		УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
		
		Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
			РассчитатьНачисленияНаСервере(Ложь, Истина);
		Иначе
			ОчиститьРассчитанныеДанные();
			ПерезаполнятьСреднийЗаработок = Истина;
		КонецЕсли;
		
	Иначе
		
		Если Параметры.Свойство("ВыполнитьПерезаполнениеСведенийОСреднемЗаработке") Тогда
			
			ПерезаполнятьСреднийЗаработок = Истина;
			Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
				РассчитатьНачисленияНаСервере(Ложь, Истина);
			Иначе
				ОчиститьРассчитанныеДанные();
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;

	Если РегистрацияНачисленийДоступна Тогда 
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Ложь, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КонецЕсли;
	
	УстановитьИнфонадписьВнутрисменнаяКомандировка();
	
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
	Если ИспользуетсяРасчетЗарплаты И Не ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений И Объект.ДокументРассчитан Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	НастроитьФормуКомандировкиВключеннойВТ9а(Параметры);
	
	РасчетЗарплатыРасширенныйФормы.УстановитьДоступныеХарактерыВыплаты(Элементы);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
	
	Если НЕ ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПодписиГруппа",
			"Поведение",
			ПоведениеОбычнойГруппы.Обычное);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПодписиГруппа",
			"ОтображатьЗаголовок",
			Ложь);
		
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "Сотрудник");
	КонецЕсли; 
	
	ОкончательныйРасчетНДФЛ = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнениеВыполнено = Ложь;
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПроведениеДокументаКомандировка");
		
	КонецЕсли;

	Если РасчетНеобходимоВыполнить Тогда
		Если НеобходимоПерезаполнитьНачисления Тогда
			РассчитатьНачисленияПослеРедактирования();
		Иначе
			РассчитатьНачисленияБезПерезаполненияПослеРедактирования();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РеквизитыВДанные(ТекущийОбъект);
	Если ЗаполнениеВыполнено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыСреднегоЗаработка", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьПерерасчетыЗарплаты", Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьДокументаКомандировка", 
		Новый Структура("Ссылка, ДокументРассчитан, Сотрудник, ДатаНачала", Объект.Ссылка, Объект.ДокументРассчитан И Объект.Проведен, Объект.Сотрудник, Объект.ДатаНачала),
		ЭтаФорма.ВладелецФормы);
		
	Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
		Оповестить("ИсправленДокумент", , Объект.ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДанныеВРеквизиты();
	
	СохраняемыеЗначения = Новый Структура;
	СохраняемыеЗначения.Вставить("Бухгалтер", ТекущийОбъект.Бухгалтер);
	СохраняемыеЗначения.Вставить("Исполнитель", ТекущийОбъект.Исполнитель);
	СохраняемыеЗначения.Вставить("ДолжностьИсполнителя", ТекущийОбъект.ДолжностьИсполнителя);
	
	ЗарплатаКадры.СохранитьЗначенияЗаполненияОтветственныхРаботников(ТекущийОбъект.Организация, СохраняемыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Если ИмяСобытия = "ИзмененыРезультатыРасчетаНДФЛ" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеНДФЛНаСервере(Параметр); 	
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаУдержаний" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеУдержанийНаСервере(Параметр);
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
		ИначеЕсли ИмяСобытия = "ИзмененоРаспределениеИсточниковФинансирования" Тогда
			ЗарплатаКадрыРасширенныйКлиент.ОбработкаОповещенияИзмененияРаспределенияИсточниковФинансирования(ЭтаФорма, ИмяСобытия, Параметр, Источник);
		ИначеЕсли (ИмяСобытия = "ИзмененоСторнированиеНачислений" Или ИмяСобытия = "ИсправленДокумент") И Источник = Объект.Ссылка Тогда
			ДанныеВРеквизиты();
		ИначеЕсли ИмяСобытия = "ИзмененыРезультатыРасчетаВзносов" И Источник.ВладелецФормы = ЭтаФорма Тогда
			ОбновитьДанныеВзносовНаСервере(Параметр);
			ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
		ИначеЕсли ИмяСобытия = "ИзмененаСтоимостьПоДаннымФОТ" Тогда	
			ОбновитьДанныеСтоимостьПоДаннымФОТ(Параметр);
		КонецЕсли;
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗаписанДокументОтпуск" 
		Или ИмяСобытия = "ЗаписанДокументОтпускБезСохраненияОплаты")
		И Источник.ВладелецФормы = ЭтаФорма Тогда
		ЗаполнитьОтсутствияПоДругимМестамРаботы();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьДокументаКомандировка"
		И Источник = ЭтаФорма Тогда
		ЗаполнитьОтсутствияПоДругимМестамРаботы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ОписаниеДокумента", ОписаниеДокумента(ЭтаФорма));
	ПараметрыДокумента.Вставить("ОписаниеТаблицФормы", СтруктураОписанияТаблицДляРаспределенияРезультата(ЭтаФорма));
	ОтражениеЗарплатыВБухучетеРасширенный.ПроверитьРезультатыРаспределенияНачисленийУдержаний(Отказ, ЭтаФорма, ПараметрыДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ИзменениеСотрудникаВФормеДокументаКомандировка");	
	
	СотрудникПриИзмененииНаСервере();
	ПодключитьРасчетПослеРедактирования();	
КонецПроцедуры

&НаКлиенте
Процедура ВидРасчетаПриИзменении(Элемент)
	ВидРасчетаПриИзмененииНаСервере();
	ПодключитьРасчетПослеРедактирования();	
КонецПроцедуры

&НаКлиенте
Процедура ВнутрисменнаяКомандировкаПриИзменении(Элемент)
	ВнутрисменнаяКомандировкаПриИзмененииНаСервере();
	ПодключитьРасчетПослеРедактирования();	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакДлительнойКомандировкиПриИзменении(Элемент)
	ПодключитьРасчетПослеРедактирования();	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ДатаНачалаПриИзмененииНаСервере();
	ПодключитьРасчетПослеРедактирования();	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ДатаОкончанияПриИзмененииНаСервере();	
	ПодключитьРасчетПослеРедактирования();	
КонецПроцедуры

&НаКлиенте
Процедура ДатаКомандировкиПриИзменении(Элементы)
	ДатаКомандировкиПриИзмененииНаСервере();
	ПодключитьРасчетПослеРедактирования();	
КонецПроцедуры

&НаКлиенте
Процедура ЧасыПриИзменении(Элемент)
	ПодключитьРасчетПослеРедактирования();	
КонецПроцедуры

&НаКлиенте
Процедура ВидВремениЗамещаемыйПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеФормыПоОписанию = УчетРабочегоВремениКлиентСервер.ДокументыОтклоненийДанныеФормыПоОписанию(ЭтаФорма, ОписаниеДокументаОтклоненийУчетаВремени(), Истина);
	ДанныеВыбора = СписокВыбораЗамещаемыхВидовВремен(ДанныеФормыПоОписанию);
КонецПроцедуры

&НаКлиенте
Процедура ВидВремениЗамещаемыйПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Объект.ВидВремениЗамещаемый = ВыбранноеЗначение.ВидВремени;
	ВидВремениЗамещаемыйПредставление = ВыбранноеЗначение.Представление;
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПериодРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	
	ПриИзмененииМесяцаНачисления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПорядокВыплатыПриИзменении(Элемент)
	
	ПорядокВыплатыПриИзмененииНаСервере();
	
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		ПодключитьРасчетПослеРедактирования(Ложь);
	Иначе 
		Объект.Удержания.Очистить();
		Объект.НДФЛ.Очистить();
		
		ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланируемаяДатаВыплатыПриИзменении(Элемент)
	
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		ПодключитьРасчетПослеРедактирования(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПорядокВыплатыПриИзмененииНаСервере()
	УстановитьВидимостьУдержаний(ЭтаФорма);
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	УстановитьСвойствоДокументРассчитан();
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДокументРассчитанПриИзменении(Элемент)
	ДокументРассчитанПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДокументРассчитанПриИзмененииНаСервере()
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьРасчетПослеРедактирования(ПерезаполнитьНачисления = Истина)
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		Если ПерезаполнитьНачисления Тогда
			ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьНачисленияПослеРедактирования");
			НеобходимоПерезаполнитьНачисления = Истина;
		ИначеЕсли Не НеобходимоПерезаполнитьНачисления Тогда
			ЗарплатаКадрыРасширенныйКлиент.ПодключитьОбработчикОжиданияАвтоматическогоРасчета(ЭтаФорма, "РассчитатьНачисленияБезПерезаполненияПослеРедактирования");
		КонецЕсли;			
	Иначе
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисленияПослеРедактирования()
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		РассчитатьНачисленияНаСервере();
		ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
		НеобходимоПерезаполнитьНачисления = Ложь;
	Иначе
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисленияБезПерезаполненияПослеРедактирования()
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		РассчитатьНачисленияНаСервере(Ложь, Ложь);
		ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
	Иначе
		ОчиститьРассчитанныеДанные(Ложь);
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РуководительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура БухгалтерПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполненностьДанныхИнформационныйТекстОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	УчетСреднегоЗаработкаКлиент.ПоказатьПричиныПерерасчетаСреднегоЗаработка(Объект.Ссылка, 
		СтандартнаяОбработка, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПоДаннымФОТПриИзменении(Элемент)
	
	ПерезаполнитьНачисленияСотрудника( , Истина, Истина, );

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "Начисления", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "Начисления", Элементы.Начисления.ТекущиеДанные, НоваяСтрока, Копирование);
	ПерезаполнитьПриОкончанииРедактирования = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	Если ПерезаполнитьПриОкончанииРедактирования Тогда
		НеПерезаполнятьПриРасчете = Истина;
		ПодключитьРасчетПослеРедактирования(Ложь);
	КонецЕсли; 
	
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура НачисленияНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыВидовРасчета = ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыВидовРасчета, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыВидовРасчета, Истина, Истина);
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	ПерезаполнитьПриОкончанииРедактирования = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисленияПерерасчет

&НаКлиенте
Процедура НачисленияПерерасчетПриИзменении(Элемент)
	УстановитьСвойствоДокументРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	ДополнительныеПараметры.Вставить("Поле", Поле);
	
	Оповещение = Новый ОписаниеОповещения("НачисленияПерерасчетВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	РасчетЗарплатыРасширенныйКлиент.ВыполнитьКомандуРасшифровкиЗначенияПоказателя(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Оповещение);
	
	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") <> 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
	Поле = ДополнительныеПараметры.Поле;
	
	ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриАктивизацииСтроки(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "НачисленияПерерасчет", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПередУдалением(Элемент, Отказ)
	
	РасчетЗарплатыРасширенныйКлиент.ПередУдалениемСтрокиПерерасчета(Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РасчетЗарплатыКлиент.СтрокаРасчетаПриНачалеРедактирования(ЭтаФорма, "НачисленияПерерасчет", Элементы.НачисленияПерерасчет.ТекущиеДанные, НоваяСтрока, Копирование);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	ОбновитьПерерасчетИтог(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПослеУдаления(Элемент)
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетНачислениеПриИзменении(Элемент)
	ОписаниеТаблицыПерерасчетов = ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенныйКлиент.ВводНачисленийНачислениеПриИзменении(ЭтаФорма, ОписаниеТаблицыПерерасчетов, 2);
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов, Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетРезультатПриИзменении(Элемент)
	ОбновитьПерерасчетИтог (ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаНачалаПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетДатаОкончанияПриИзменении(Элемент)
	РасчетЗарплатыРасширенныйКлиент.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтсутствияПоДругимМестамРаботы

&НаКлиенте
Процедура ОтсутствияПоДругимМестамРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОтсутствияПоДругимМестамРаботыСсылка" Тогда
		
		СтандартнаяОбработка = Ложь;	
		
		Строка = ЭтотОбъект.ОтсутствияПоДругимМестамРаботы.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ПоказатьЗначение(, Строка.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если Не ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИсправлениеДокументов
&НаКлиенте
Процедура Подключаемый_Исправить(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Исправить(Объект.Ссылка, "Командировка");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Сторнировать(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.Сторнировать(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправлению(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправлению(ЭтаФорма.ДокументИсправление, "Командировка");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКИсправленному(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКИсправленному(Объект.ИсправленныйДокумент, "Командировка");
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКСторно(Команда)
	ИсправлениеДокументовЗарплатаКадрыКлиент.ПерейтиКСторно(ЭтаФорма.ДокументСторно);
КонецПроцедуры
// Конец ИсправлениеДокументов

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_НачисленияОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачисленияПерерасчетОтменитьИсправление(Команда)
	РасчетЗарплатыКлиент.ОтменитьИсправление(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНачисления(Команда)
	
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ЗаполнениеДокументаКомандировка");
	
	ОчиститьСообщения();
	ОтменитьРучнуюКорректировкуНаСервере();
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма)) Тогда
		
		Если НеПерезаполнятьПриРасчете Тогда
			КомандаРассчитатьНачисленияНаСервере(Ложь);
		Иначе
			КомандаРассчитатьНачисленияНаСервере(Истина);
		КонецЕсли;
		
		ЗарплатаКадрыРасширенныйКлиент.СброситьФлагНеобходимостиВыполненияРасчета(ЭтаФорма);
		
	Иначе
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;		
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработок(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьСреднийЗаработокЗавершение", ЭтотОбъект);
	УчетСреднегоЗаработкаКлиент.ОткрытьФормуВводаСреднегоЗаработкаОбщий(ПараметрыРедактированияСреднегоЗаработка(), ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДенежноеСодержание(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Оповещение = Новый ОписаниеОповещения("ОткрытьОткрытьДенежноеСодержаниеЗавершение", ЭтотОбъект);
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("РасчетДенежногоСодержанияКлиент");
		Модуль.ОткрытьФормуВводаСохраняемогоДенежногоСодержания(Объект, "Командировка","СохраняемоеДенежноеСодержание", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Оповещение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НачисленияПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчетПодробно(Команда)
	
	РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Не Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеУдержаний(Команда)
	
	РасчетЗарплатыРасширенныйКлиент.ОткрытьФормуПодробнееОРасчетеУдержаний(Объект, "Командировка", ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеНДФЛ(Команда)
	
	УчетНДФЛКлиентРасширенный.ОткрытьФормуПодробнееОРасчетеНДФЛ(Объект, "Командировка", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОРасчетеВзносов(Команда)
	
	УчетСтраховыхВзносовКлиент.ОткрытьФормуПодробнееОРасчетеВзносов(Объект, "Командировка", ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Объект.Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьЗаявкуСотрудника(Команда)

	ПоказатьЗначение(, Объект.ЗаявкаСотрудника);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтпускСовместителю(Команда)
	
	Совместитель = Неопределено;
	ОрганизацияСовместителя = Неопределено;
	
	Если ЭтотОбъект.ДругиеСотрудникиФизическогоЛица.Количество() = 1 Тогда
		ОрганизацияСовместителя = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Организация;
		Совместитель = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Сотрудник;
	КонецЕсли;
	
	ОткрытьФормуНовогоОтпускаСовместителя(Совместитель, ОрганизацияСовместителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОтпускБезОплатыСовместителю(Команда)
	
	Совместитель = Неопределено;
	ОрганизацияСовместителя = Неопределено;

	Если ЭтотОбъект.ДругиеСотрудникиФизическогоЛица.Количество() = 1 Тогда
		ОрганизацияСовместителя = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Организация;
		Совместитель = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Сотрудник;
	КонецЕсли;
	
	ОткрытьФормуНовогоОтпускаБезОплатыСовместителя(Совместитель, ОрганизацияСовместителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьКомандировкуСовместителю(Команда)
	Совместитель = Неопределено;
	ОрганизацияСовместителя = Неопределено;
	
	Если ЭтотОбъект.ДругиеСотрудникиФизическогоЛица.Количество() = 1 Тогда
		ОрганизацияСовместителя = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Организация;
		Совместитель = ЭтотОбъект.ДругиеСотрудникиФизическогоЛица[0].Сотрудник;
	КонецЕсли;
	
	ОткрытьФормуНовойКомандировкиСовместителя(Совместитель, ОрганизацияСовместителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасшифровкуСтоимостьПоДаннымФОТ(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РасшифровкаСоставаФОТ", РасшифровкаСоставаФОТ());
	ПараметрыОткрытия.Вставить("НормаВДнях", Объект.НормаВДнях);
	ПараметрыОткрытия.Вставить("НормаВЧасах", Объект.НормаВЧасах);
	ПараметрыОткрытия.Вставить("СтоимостьПоДаннымФОТ", Объект.СтоимостьПоДаннымФОТ);
	ПараметрыОткрытия.Вставить("ВидУчетаВремениДляСредней", Объект.ВидУчетаВремениДляСредней);
	ПараметрыОткрытия.Вставить("РучнаяКорректировкаСтоимостьПоДаннымФОТ", Объект.РучнаяКорректировкаСтоимостьПоДаннымФОТ);
	
	ОткрытьФорму("Документ.Командировка.Форма.ФормаРасшифровкиДанныхФОТ", ПараметрыОткрытия, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура КомандаРассчитатьНачисленияНаСервере(ПерезаполнитьНачисления = Истина)
		
	РассчитатьНачисленияНаСервере(Истина, ПерезаполнитьНачисления);
	УстановитьСвойствоДокументРассчитан();
	
КонецПроцедуры
&НаСервере
Процедура ОтменитьРучнуюКорректировкуНаСервере()
	
	Объект.РучнаяКорректировкаСреднегоЗаработка = Ложь;
	Объект.РучнаяКорректировкаСтоимостьПоДаннымФОТ = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСреднийЗаработокЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт 

	Если РезультатРедактирования <> Неопределено Тогда
		ПерезаполнятьСреднийЗаработок = Ложь;
		ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОткрытьДенежноеСодержаниеЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатРедактирования <> Неопределено Тогда
		ПерезаполнятьСреднийЗаработок = Ложь;
		ПодключитьРасчетПослеРедактирования();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура РаспределитьЗависимыеРезультаты(ПараметрыДляРаспределения) Экспорт
	
	РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьЗависимыеРезультатыНаСервере(ПараметрыДляРаспределения)
	
	ПараметрыДляРаспределения.ОписаниеДокумента       = ОписаниеДокумента(ЭтаФорма);
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	ОтражениеЗарплатыВБухучетеРасширенный.РаспределитьЗависимыеРезультатыВФорме(ЭтаФорма, ПараметрыДляРаспределения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОписанияТаблицДляРаспределенияРезультата(Форма)

	ОписанияТаблиц = Новый Структура;
	ОписанияТаблиц.Вставить("Начисления", ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна));
	ОписанияТаблиц.Вставить("Удержания", ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Вставить("НДФЛ", ОписаниеТаблицыНДФЛ());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаСервере
Процедура ОбновитьФормуПоВариантуРасчета()

	Если Объект.РасчетДенежногоСодержания Тогда
		ЗаголовокГруппыСреднийЗаработокИнфо = НСтр("ru='Сохраняемое денежное содержание';uk='Зберігається грошове утримання'");
		Элементы.СреднийЗаработокСтраницы.ТекущаяСтраница = Элементы.ДенежноеСодержаниеСтраница;
	Иначе
		ЗаголовокГруппыСреднийЗаработокИнфо = НСтр("ru='Средний заработок';uk='Середній заробіток'");
		Элементы.СреднийЗаработокСтраницы.ТекущаяСтраница = Элементы.СреднийЗаработокСтраница;
	КонецЕсли;

КонецПроцедуры

#Область ИнициализацияФормы

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	НачатьИнициализациюФормы(ТекущийОбъект);
	ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(ТекущийОбъект);
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура НачатьИнициализациюФормы(ТекущийОбъект)

	// Устанавливаем значения реквизитов формы.
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	УстановитьДоступностьРегистрацииНачислений();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ЗаполнитьРеквизитФормыНазначенияРасчетаДенежногоСодержания(ЭтаФорма);
	КонецЕсли;
	
	ПрочитатьПостоянныеКадровыеДанныеСотрудника();
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	УстановитьВидимостьОтсутствияПоДругимМестамРаботы();

	УстановитьПривилегированныйРежим(Истина);
	ДополнитьФорму(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект)

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнитьФорму(Ложь);
	ДополнитьФорму();
	
	// Установка значений реквизитов и свойств элементов.
	ОбновитьФормуПоВариантуРасчета();
	ДополнитьПараметрыВыбораНачисленийКатегорией();
	
	УстановитьВидимостьПерерасчетов();
	УстановитьВидимостьУдержаний(ЭтаФорма);
	УстановитьВидимостьРасчетныхПолей();
	
	ЗаполнитьИнформациюЗаполненностиДанных();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	УстановитьИспользованиеСреднечасовогоЗаработка();

	ДанныеВРеквизиты();
	
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	ОбновитьПерерасчетИтог(ЭтаФорма);
	
	УстановитьТекущуюСтраницуПериодКомандировки();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.Начисления, "ПериодДействия", "ПериодДействияСтрокой");
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДатеВТабличнойЧасти(Объект.НачисленияПерерасчет, "ПериодДействия", "ПериодДействияСтрокой");
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	
	ПерезаполнятьСреднийЗаработок = Истина;
	
	НастроитьОтображениеГруппыПодписантов();
	
	УстановитьДоступностьПризнакаДлительнойКомандировки();	
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложеного создания.	
		
		// Создание реквизитов.
		РасчетЗарплатыРасширенныйФормы.ДокументыНачисленийДополнитьФормуРезультатыРаспределения(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));	
		
		// Создание элементов.
		ЗарплатаКадрыРасширенный.МногофункциональныеДокументыДобавитьЭлементыФормы(ЭтаФорма, НСтр("ru='Расчет утвердил';uk='Розрахунок затвердив'"), "РасчетчикГруппа", "ДокументРассчитан", "Рассчитал");
		ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма);
		КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			Модуль.ГруппаЗаявкаСотрудникаДополнитьФорму(ЭтаФорма);
		КонецЕсли;
		
	Иначе
		
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), "Начисления", , РегистрацияНачисленийДоступна,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыУдержаний(), "Удержания", , Ложь,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДокументыВыполненияНачисленийДополнитьФорму(ЭтаФорма, ОписаниеТаблицыСохраняемоеДенежноеСодержание(), "Начисления", , Ложь,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		КонецЕсли;	
			
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДополнитьФорму(
			ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
		ИсправлениеДокументовЗарплатаКадры.ГруппаИсправлениеДополнитьФорму(
			ЭтаФорма,,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		РасчетЗарплатыРасширенныйФормы.ПорядокВыплатыЗарплатыДополнитьФорму(
			ЭтаФорма,, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		
		Если НЕ Параметры.Ключ.Пустая() Тогда
			УчетРабочегоВремениФормы.ДокументыОтклоненийПриЧтенииНаСервере(ЭтаФорма, ОписаниеДокументаОтклоненийУчетаВремени(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
		КонецЕсли;
		УчетРабочегоВремениФормы.ДокументыОтклоненийПриСозданииНаСервере(ЭтаФорма, ОписаниеДокументаОтклоненийУчетаВремени(), ЗначенияДляЗаполнения(), ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
			
	КонецЕсли;
	
КонецПроцедуры

Функция РасшифровкаСоставаФОТ()
	
	СтрокиРасшифровкаСоставаФОТ = Объект.РасшифровкаСоставаФОТ.Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(СтрокиРасшифровкаСоставаФОТ);
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ПараметрыРедактированияСреднегоЗаработка()
	
	ПараметрыРедактирования = УчетСреднегоЗаработкаКлиентСервер.ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу();
	ПараметрыРедактирования.ДокументСсылка = Объект.Ссылка;
	ПараметрыРедактирования.Сотрудник = Объект.Сотрудник;
	ПараметрыРедактирования.Организация = Объект.Организация;
	ПараметрыРедактирования.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
	ПараметрыРедактирования.Начисление = Объект.ВидРасчета;
	ПараметрыРедактирования.НачалоПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
	ПараметрыРедактирования.ОкончаниеПериодаРасчета = Объект.ПериодРасчетаСреднегоЗаработкаОкончание; 
	ПараметрыРедактирования.ЭтоСреднечасовойЗаработок = ЭтаФорма.ИспользуетсяСреднечасовойЗаработок;
	ПараметрыРедактирования.ФиксПериодРасчета = Объект.ФиксПериодРасчетаСреднегоЗаработка;
	ПараметрыРедактирования.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010");;
	ПараметрыРедактирования.РучнаяКорректировкаСреднегоЗаработка = Объект.РучнаяКорректировкаСреднегоЗаработка;
	ПараметрыРедактирования.СреднийЗаработок = Объект.СреднийЗаработок;
	ПараметрыРедактирования.ВидУчетаВремениДляСредней = Объект.ВидУчетаВремениДляСредней;
	УчетСреднегоЗаработка.ЗаполнитьТаблицыДанныхСреднегоЗаработкаПоДокументу(Объект, ПараметрыРедактирования);
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ПараметрыФО = Новый Структура("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивОписанийТаблицФормы(ПравоНаЧтениеДокументаБезОграничений)
	МассивОписанийТаблицФормы = Новый Структура;
	МассивОписанийТаблицФормы.Вставить("НачисленияПерерасчет", ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	МассивОписанийТаблицФормы.Вставить("Начисления", ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	Возврат МассивОписанийТаблицФормы  
КонецФункции 

&НаКлиенте
Процедура ПриИзмененииМесяцаНачисления()
	ОбработатьИзменениеМесяцНачисленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеМесяцНачисленияНаСервере()
	
	РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
	ОбновитьВариантРасчета();
	УстановитьФункциональныеОпцииФормы();
	УстановитьСвойствоДокументРассчитан();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВариантРасчета()

	Объект.РасчетДенежногоСодержания = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
			Объект.РасчетДенежногоСодержания = Истина;
			Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
				КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(
				Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ВидДоговора", Объект.ДатаНачалаСобытия);
				ВидДоговора = КадровыеДанныеСотрудника[0].ВидДоговора;
				Объект.РасчетДенежногоСодержания = (ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.КонтрактГосслужащего Или ВидДоговора = Перечисления.ВидыДоговоровССотрудниками.ДоговорМуниципальногоСлужащего);
			КонецЕсли;	
		КонецЕсли;
		ОбновитьФормуПоВариантуРасчета();
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	
	ОбработатьИзменениеМесяцНачисленияНаСервере();
	ПодключитьРасчетПослеРедактирования();	
	
КонецПроцедуры

&НаСервере
Функция УстановитьИнфонадписьВнутрисменнаяКомандировка()
	ИнфонадписьВнутрисменнаяКомандировка = НСтр("ru='Установите флажок, если сотрудник был в командировке только в течение части рабочей смены.';uk='Встановіть прапорець, якщо працівник був у відрядженні тільки протягом частини робочої зміни.'");
КонецФункции

&НаСервере
Функция ОшибкаВводаПериодаСобытия()
	Если Объект.ДатаНачала > Объект.ДатаОкончания
		Или (Объект.ВнутрисменнаяКомандировка И Объект.ДатаНачала <> Объект.ДатаОкончания) Тогда
			Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;		
КонецФункции	

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	ОбновитьВариантРасчета();
	
	УчетРабочегоВремениФормы.ДокументыОтклоненийСотрудникПриИзменении(ЭтаФорма, ОписаниеДокументаОтклоненийУчетаВремени());
	
	ПрочитатьПостоянныеКадровыеДанныеСотрудника();
		
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	УстановитьВидимостьОтсутствияПоДругимМестамРаботы();

	Если ИспользуетсяРасчетЗарплаты Тогда
		УстановитьИспользованиеСреднечасовогоЗаработка();
		Объект.ДанныеОбИндексации.Очистить();
		Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
		Объект.СреднийЗаработокОбщий.Очистить();
		
		Объект.ДенежноеСодержание.Очистить();
		Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
		
		// Период расчета среднего заработка.
		Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
		Объект.ПериодРасчетаСреднегоЗаработкаНачало = Неопределено; 
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание = Неопределено;  
		Объект.СреднийЗаработок = Неопределено;
		УстановитьПредупреждениеДокументНеРассчитан(ЭтаФорма);
		ОпределитьВидУчетаВремениДляСредней();
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
		СброситьФлагОплатитьПоДаннымФОТ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей();
	
	ЗаполнитьДанныеФормыПоОрганизации();
	УстановитьФункциональныеОпцииФормы();
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Объект.ДанныеОбИндексации.Очистить();
		Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
		Объект.СреднийЗаработокОбщий.Очистить();
		
		Объект.ДенежноеСодержание.Очистить();
		Объект.ДенежноеСодержаниеФактическиеНачисления.Очистить();
		
		// Период расчета среднего заработка.
		Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
		Объект.ПериодРасчетаСреднегоЗаработкаНачало = Неопределено; 
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание = Неопределено;  
		Объект.СреднийЗаработок = Неопределено;
		УстановитьПредупреждениеДокументНеРассчитан(ЭтаФорма);
		
		РасчетЗарплатыРасширенныйФормы.ОбновитьПлановыеДатыВыплатыПоОрганизации(ЭтаФорма);
		РасчетЗарплатыРасширенныйКлиентСервер.УстановитьПланируемуюДатуВыплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		РасчетЗарплатыРасширенныйФормы.ДополнитьДанныеФормыРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда(), РегистрацияНачисленийДоступна);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидРасчетаПриИзмененииНаСервере()
	
	УчетРабочегоВремениФормы.ДокументыОтклоненийВидРасчетаПриИзменении(ЭтаФорма, ОписаниеДокументаОтклоненийУчетаВремени());
	
	УстановитьИспользованиеСреднечасовогоЗаработка();
	
	// Период расчета среднего заработка.
	Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
	ЗаполнитьПериодРасчетаСреднегоЗаработка();
	
КонецПроцедуры

&НаСервере
Процедура ВнутрисменнаяКомандировкаПриИзмененииНаСервере()
	
	УстановитьТекущуюСтраницуПериодКомандировки();
	
	Если Объект.ВнутрисменнаяКомандировка Тогда
		Объект.ОсвобождатьСтавку = Ложь;
		ЭтотОбъект.ПризнакДлительнойКомандировки = 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчетРабочегоВремениФормы.ДокументыОтклоненийПризнакВнутрисменноеПриИзменении(ЭтаФорма, ОписаниеДокументаОтклоненийУчетаВремени());
	
	УстановитьИспользованиеСреднечасовогоЗаработка();
	РассчитатьСреднийЗаработок();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ДатаНачалаПриИзмененииНаСервере()
	
	Если ОшибкаВводаПериодаСобытия() Тогда
		Объект.ДатаОкончания = Неопределено;
	КонецЕсли;
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		// Если дата начала события меняется в пределах одного месяца, 
		// оставляем период расчета среднего зафиксированным.
		ДатаНачалаСобытияДоИзменения = Объект.ДатаНачалаСобытия;
		Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
		
		Если НачалоМесяца(Объект.ДатаНачалаСобытия) <> НачалоМесяца(ДатаНачалаСобытияДоИзменения) Тогда
			Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
		КонецЕсли;
		ОпределитьВидУчетаВремениДляСредней();
		ЗаполнитьПериодРасчетаСреднегоЗаработка();
		УстановитьИспользованиеСреднечасовогоЗаработка();
	КонецЕсли;
	
	УточнитьПризнакДлительнойКомандировки();
	УстановитьДоступностьПризнакаДлительнойКомандировки();
	
КонецПроцедуры

&НаСервере
Процедура ДатаОкончанияПриИзмененииНаСервере()
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();
	
	Если ОшибкаВводаПериодаСобытия() И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.ДатаНачала = Объект.ДатаОкончания;
		Если ИспользуетсяРасчетЗарплаты Тогда
			// Если дата начала события меняется в пределах одного месяца, 
			// оставляем период расчета среднего зафиксированным.
			ДатаНачалаСобытияДоИзменения = Объект.ДатаНачалаСобытия;
			Объект.ДатаНачалаСобытия = Объект.ДатаНачала;
			Если НачалоМесяца(Объект.ДатаНачалаСобытия) <> НачалоМесяца(ДатаНачалаСобытияДоИзменения) Тогда
				Объект.ФиксПериодРасчетаСреднегоЗаработка = Ложь;
			КонецЕсли;
			ОпределитьВидУчетаВремениДляСредней();
			ЗаполнитьПериодРасчетаСреднегоЗаработка();
			УстановитьИспользованиеСреднечасовогоЗаработка();
			КонецЕсли;
	КонецЕсли;

	УточнитьПризнакДлительнойКомандировки();
	УстановитьДоступностьПризнакаДлительнойКомандировки();
	
КонецПроцедуры

&НаСервере
Процедура ДатаКомандировкиПриИзмененииНаСервере()
	
	ЗаполнитьОтсутствияПоДругимМестамРаботы();

	УстановитьПривилегированныйРежим(Истина);
	УчетРабочегоВремениФормы.ДокументыОтклоненийДатаВнутрисменногоОтклоненияПриИзменении(ЭтаФорма, ОписаниеДокументаОтклоненийУчетаВремени());
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНачисленияНаСервере(ВыводитьСообщения = Ложь, ПерезаполнитьНачисления = Истина)
	
	НеПерезаполнятьПриРасчете = Ложь;
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
			
	ПерезаполнитьНачисленияСотрудника( , , ПерезаполнитьНачисления, ВыводитьСообщения);
	 	
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНачисленияСотрудника(Сотрудник = Неопределено, СохранятьИсправления = Истина, ПерезаполнитьНачисления = Истина, ВыводитьСообщения = Ложь) Экспорт
	
	ОчиститьРассчитанныеДанные(ПерезаполнитьНачисления);
	
	ТекущийОбъект = ЭтаФорма.РеквизитФормыВЗначение("Объект");
	Если НЕ ТекущийОбъект.ДокументГотовКРасчету(ВыводитьСообщения) Тогда
		Возврат;
	КонецЕсли;	

	НачатьТранзакцию();
	
	Если ПерезаполнитьНачисления Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаНачало)
			Или Не ЗначениеЗаполнено(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
			ЗаполнитьПериодРасчетаСреднегоЗаработка();
		Иначе 
			Если ПерезаполнятьСреднийЗаработок И НЕ Объект.РучнаяКорректировкаСреднегоЗаработка Тогда
				ОбновитьДанныеДляРасчетаСреднего();
			КонецЕсли;
		КонецЕсли;
		
		ПерезаполнятьСреднийЗаработок = Истина;
		
		// Заполняем соответствие известных показателей.
		Если Объект.РасчетДенежногоСодержания Тогда
			
			ОписаниеЗначения = Новый Структура("Значение", Объект.СохраняемоеДенежноеСодержание);
			СохраняемоеДенежноеСодержаниеСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
			ИзвестныеПоказатели = Новый Соответствие;
			ИзвестныеПоказатели.Вставить(СохраняемоеДенежноеСодержаниеСсылка, ОписаниеЗначения);
			
		Иначе	
			Если НЕ Объект.ОплатитьПоДаннымФОТ Тогда
				ОписаниеЗначения = Новый Структура("Значение", Объект.СреднийЗаработок);
			Иначе 	
				ОписаниеЗначения = Новый Структура("Значение", Объект.СтоимостьПоДаннымФОТ);
			КонецЕсли;
			СреднийЗаработок = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
			ИзвестныеПоказатели = Новый Соответствие;
			ИзвестныеПоказатели.Вставить(СреднийЗаработок, ОписаниеЗначения);

		КонецЕсли;
				
		ЗарегистрироватьДанныеОВремени();
		
		ЗаполнитьВидРасчета();
		
		ДатаОкончанияПериодаОплаты = ?(ЭтотОбъект.ПризнакДлительнойКомандировки, КонецМесяца(Объект.ДатаНачала), Объект.ДатаОкончания);
		
		// Получаем данные начислений
		ДанныеДляНачисленияЗарплаты = РасчетЗарплатыРасширенный.ДанныеДляНачисленияСотруднику(
			Объект.Организация, Объект.ДатаНачала, ДатаОкончанияПериодаОплаты, Объект.ПериодРегистрации, Объект.Сотрудник, Объект.ВидРасчета, Объект.Ссылка, ИзвестныеПоказатели);
			
		Если ДанныеДляНачисленияЗарплаты.Количество() > 0 Тогда
			ДанныеДляНачисленияЗарплаты.ЗаполнитьЗначения(?(Объект.ВидУчетаВремениДляСредней = ПредопределенноеЗначение("Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимЧасам"), Истина, Ложь), "ВремяВЧасах"); 
		КонецЕсли;
		// Заполняем таблицу начислений.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеДляНачисленияЗарплаты, Объект.Начисления);
		
	КонецЕсли;
	
	// Удержания (рассчитываем, если выплата в межрасчетный период).
	Если ЭтоМежрасчетнаяВыплата(Объект.ПорядокВыплаты) Тогда
		СтрокиУдержаний = РасчетЗарплатыРасширенный.ДанныеДляУдержанияЗарплаты(
			Объект.Организация, Объект.ПериодРегистрации, КонецМесяца(Объект.ПериодРегистрации), , Объект.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиУдержаний, Объект.Удержания);
	КонецЕсли;
	
	Если ПерезаполнитьНачисления Тогда
		Если ЗначениеЗаполнено(Объект.ИсправленныйДокумент) Тогда
			ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчетаДляИсправления(Объект.Организация, Объект.ПериодРегистрации, Объект.ИсправленныйДокумент, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка);
		Иначе
			ИсправлениеДокументовРасчетЗарплаты.СформироватьДанныеПерерасчета(Объект.ПериодРегистрации, Объект.Начисления, Объект.НачисленияПерерасчет, Объект.Ссылка);
		КонецЕсли;
		ОписаниеРассчитываемойТаблицы = Неопределено;
	Иначе
		ОписаниеРассчитываемойТаблицы = Новый Структура("ИмяТаблицы", "Удержания");
	КонецЕсли;
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеРассчитываемойТаблицы;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	// Выполняем пересчет коллекций документа.
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Объект.Сотрудник, ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
	
	ОтменитьТранзакцию();
	
	ОбновитьПерерасчетИтог(ЭтаФорма);
	ОбновитьНачисленоУдержаноИтог(ЭтаФорма);
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);
	УстановитьВидимостьПерерасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидРасчета()

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
		Возврат;
	КонецЕсли;
	
	// Определим категории начислений.
	Если Объект.РасчетДенежногоСодержания Тогда
		Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки;
	Иначе
		Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки;
	КонецЕсли;
	
	СтруктураНачислений = Новый Структура("ВидРасчета", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Категория));
	
	НадоЗаполнятьВидРасчета = Ложь;
	ТекущаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидРасчета, "КатегорияНачисленияИлиНеоплаченногоВремени");
	НадоЗаполнятьВидРасчета = ТекущаяКатегория <> Категория;
	
	Если НадоЗаполнятьВидРасчета Тогда
		Отбор = Новый Структура("КатегорияНачисленияИлиНеоплаченногоВремени", Категория);
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьНачислениеВФормеДокументаПоКатегории(ЭтаФорма, Объект.ВидРасчета, Категория, Отбор);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДополнитьПараметрыВыбораНачисленийКатегорией(СтруктураНачислений = Неопределено)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетСохраняемогоДенежногоСодержания") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураНачислений = Неопределено Тогда
		Если Объект.РасчетДенежногоСодержания Тогда
			Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодКомандировки;
		Иначе
			Категория = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки;
		КонецЕсли;
		СтруктураНачислений = Новый Структура("ВидРасчета", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Категория));
	КонецЕсли;
	
	РасчетЗарплатыРасширенныйФормы.ДополнитьПараметрыВыбораНачисленийКатегорией(ЭтаФорма, СтруктураНачислений);	

КонецПроцедуры

&НаСервере
Процедура ОчиститьРассчитанныеДанные(ПерезаполнитьНачисления = Истина)
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ПерезаполнитьНачисления Тогда
		Объект.Начисления.Очистить();
		Объект.НачисленияПерерасчет.Очистить();
		Объект.РаспределениеПоТерриториямУсловиямТруда.Очистить();
		Объект.Показатели.Очистить();
	КонецЕсли;	
	
	Объект.Удержания.Очистить();
	Объект.НДФЛ.Очистить();

	Объект.ВзносыФОТ.Очистить();
	
	ОбновитьНачисленоУдержаноИтог(ЭтотОбъект);
	ОбновитьПерерасчетИтог(ЭтотОбъект);
		
	КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Процедура используется для инициации расчета начислений из вне (на клиенте).
&НаКлиенте
Процедура РассчитатьСотрудника(Сотрудник, ОписаниеТаблицы) Экспорт
	РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСотрудникаНаСервере(Сотрудник, ОписаниеТаблицы)
	
	ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.ОписаниеТаблицы = ОписаниеТаблицы;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	
	РасчетЗарплатыРасширенный.РассчитатьДанныеФормыПоСотрудникам(Сотрудник, ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ДополнительныеПараметры);
	
	МассивОписанийТаблицФормы = МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна);
	ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы);
	ЗарплатаКадрыРасширенный.ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(ЭтаФорма, МассивОписанийТаблицФормы);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьПредставлениеРаспределенияПоТерриториямУсловиямТруда(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());

КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьДанныеОВремени()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.Командировка"));
	
	ДанныеОВремени = Документы.Командировка.ДанныеОВремени(ТекущийОбъект);
	
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		Движения = ЗарплатаКадры.НаборыЗаписейРегистратора(ТекущийОбъект.Метаданные());
	Иначе
		Движения = ТекущийОбъект.Движения;	
	КонецЕсли;	
		
	УчетРабочегоВремени.ЗарегистрироватьВнутрисменныеОтклонения(Движения, ДанныеОВремени, Объект.ПериодРегистрации, Истина);	
КонецПроцедуры	

&НаСервере
Процедура ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(РезультатРедактирования)
	
	// Переносит данные учета среднего заработка (результат работы формы "калькулятора") 
	// в таблицы документа.
	
	Объект.СреднийЗаработокОбщий.Очистить();
	Объект.ДанныеОбИндексации.Очистить();
	Объект.ОтработанноеВремяДляСреднегоОбщий.Очистить();
	
	УчетСреднегоЗаработка.ЗаполнитьДанныеУчетаОбщегоСреднегоЗаработка(
		Объект.СреднийЗаработокОбщий, 
		Объект.ОтработанноеВремяДляСреднегоОбщий, 
		Объект.ДанныеОбИндексации,
		РезультатРедактирования, 
		Модифицированность);
	
	Объект.ПериодРасчетаСреднегоЗаработкаНачало = РезультатРедактирования.НачалоПериодаРасчета;
	Объект.ПериодРасчетаСреднегоЗаработкаОкончание = РезультатРедактирования.ОкончаниеПериодаРасчета;
	Объект.ФиксПериодРасчетаСреднегоЗаработка = РезультатРедактирования.ФиксПериодРасчета;
	Объект.СреднийЗаработок = РезультатРедактирования.СреднийЗаработок;
	
	Объект.РучнаяКорректировкаСреднегоЗаработка = РезультатРедактирования.РучнаяКорректировкаСреднегоЗаработка;
	Объект.ВидУчетаВремениДляСредней = РезультатРедактирования.ВидУчетаВремениДляСредней;						
	РассчитатьСтоимостьПоДаннымФОТ();  
	ЗаполнитьИнформациюЗаполненностиДанных();
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), Ложь) Тогда
		РассчитатьНачисленияНаСервере();
	Иначе
		ОчиститьРассчитанныеДанные();
		ПерезаполнятьСреднийЗаработок = Истина;
	КонецЕсли;

	УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(ЭтаФорма);

КонецПроцедуры	

&НаСервере
Процедура РассчитатьСреднийЗаработок()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасчетДенежногоСодержания Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.РассчитатьСохраняемоеДенежноеСодержаниеДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		КонецЕсли;
	Иначе
		ДополнительныеПараметры = УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка();
		ДополнительныеПараметры.Индексации = Объект.ДанныеОбИндексации;
		ДополнительныеПараметры.ДатаНачалаСобытия = Объект.ДатаНачалаСобытия;
		ДополнительныеПараметры.НачалоПериода = Объект.ПериодРасчетаСреднегоЗаработкаНачало;
		ДополнительныеПараметры.ОкончаниеПериода = Объект.ПериодРасчетаСреднегоЗаработкаОкончание;
		ДополнительныеПараметры.ПоЧасам = ИспользуетсяСреднечасовойЗаработок; 
		ДополнительныеПараметры.ВидУчетаВремениДляСредней = Объект.ВидУчетаВремениДляСредней;
		ДополнительныеПараметры.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010;
	
		Объект.СреднийЗаработок = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, ДополнительныеПараметры);
		Если Не Объект.РучнаяКорректировкаСреднегоЗаработка И Объект.СреднийЗаработок = 0 Тогда
			КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ДатаПриема");
			Если ЗначениеЗаполнено(КадровыеДанные[0].ДатаПриема) И
				 КадровыеДанные[0].ДатаПриема > НачалоМесяца(ДобавитьМесяц(Объект.ДатаНачалаСобытия,-2)) Тогда
				ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(КадровыеДанные[0].ДатаПриема, Объект.Сотрудник, Объект.ВидРасчета);
			Иначе
				ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(ДобавитьМесяц(Объект.ДатаНачалаСобытия,-2), Объект.Сотрудник, Объект.ВидРасчета);
			КонецЕсли;	
			Если НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаНачало) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаНачала) 
				Или	НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаОкончания) Тогда
				Объект.ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
				Объект.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
				УчетСреднегоЗаработка.ОбновитьДанныеОбщегоСреднегоЗаработка(
				Новый Структура("ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации, ВидРасчета", 
				Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, Объект.ДанныеОбИндексации, Объект.ВидРасчета), 
				ДобавитьМесяц(Объект.ДатаНачалаСобытия,-2), 
				ПериодРасчетаСреднего.ДатаНачала, 
				ПериодРасчетаСреднего.ДатаОкончания,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), , 
				Объект.Ссылка);
				ДополнительныеПараметры.НачалоПериода = ПериодРасчетаСреднего.ДатаНачала;
				ДополнительныеПараметры.ОкончаниеПериода = ПериодРасчетаСреднего.ДатаОкончания;
				Объект.СреднийЗаработок = УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработокОбщий(Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		РассчитатьСтоимостьПоДаннымФОТ();  
	КонецЕсли;
							
	ЗаполнениеВыполнено = Истина;
	
КонецПроцедуры	
&НаСервере
Процедура РассчитатьСтоимостьПоДаннымФОТ()
	
	// Подготовка к расчету ФОТ
	РассчитываемыеОбъекты = Новый Соответствие;
	
	Сотрудники = Новый Соответствие;
	
	Сотрудник = Объект.Сотрудник;
	
	ОписаниеСотрудника = Новый Структура;
	ОписаниеСотрудника.Вставить("Организация", Объект.Организация);
	ОписаниеСотрудника.Вставить("ДатаРасчета", Объект.ДатаНачала);
	ОписаниеСотрудника.Вставить("Начисления", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
	ОписаниеСотрудника.Вставить("Показатели", РасчетЗарплатыРасширенный.ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
		
	Сотрудники.Вставить(Сотрудник, ОписаниеСотрудника);
	
	РассчитываемыеОбъекты.Вставить(Объект.Ссылка, Сотрудники);
	
	// Расчет ФОТ
	РезультатыФОТ = РасчетЗарплатыРасширенный.РассчитатьФОТСотрудниковПоГрафикуМесяца(РассчитываемыеОбъекты, Объект.Организация, Объект.ДатаНачала, Истина, РасчетЗарплатыРасширенный.НачисленияДляКомандировкиВходящиеВСоставФОТ(Объект.ВидРасчета));
	Если РезультатыФОТ <> Неопределено Тогда
		
		
		Объект.РасшифровкаСоставаФОТ.Загрузить(РезультатыФОТ.Начисления);
		Объект.НормаВДнях = РезультатыФОТ.ВремяВДнях.Итог("Значение");
		Объект.НормаВЧасах = РезультатыФОТ.ВремяВЧасах.Итог("Значение");
		
		Если Объект.ВидУчетаВремениДляСредней = ПредопределенноеЗначение("Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням") Тогда
			Объект.СтоимостьПоДаннымФОТ = Объект.РасшифровкаСоставаФОТ.Итог("Результат")/Объект.НормаВДнях
		Иначе
			Объект.СтоимостьПоДаннымФОТ = Объект.РасшифровкаСоставаФОТ.Итог("Результат")/Объект.НормаВЧасах
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Подключение механизма расчета начислений.

&НаСервере
Процедура ДанныеВРеквизиты()
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна), 2);
		ЗарплатаКадрыРасширенный.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна), 2);
		ЗарплатаКадрыРасширенный.ПериодНачисленияЗаполнитьИспользованиеПериода(ЭтаФорма, МассивОписанийТаблицФормы(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(ЭтаФорма, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ВводНачисленийДанныеВРеквизит(ЭтаФорма, ОписаниеТаблицыСохраняемоеДенежноеСодержание(), 2);
		КонецЕсли;
	
		ОтражениеЗарплатыВБухучетеРасширенный.ОбъектПриЧтенииНаСервереПредставлениеРаспределения(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаДанныеВРеквизит(ЭтаФорма, Объект.Организация, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	КонецЕсли;
	
	Если Не ЭтаФорма.Параметры.Ключ.Пустая() Тогда
		ИсправлениеДокументовЗарплатаКадры.ПрочитатьРеквизитыИсправления(ЭтаФорма);
	КонецЕсли;
	ИсправлениеДокументовЗарплатаКадры.УстановитьПоляИсправления(ЭтаФорма);
	
	ПризнакДлительнойКомандировкиВРеквизитФормы();
	
КонецПроцедуры

&НаСервере
Процедура РеквизитыВДанные(ТекущийОбъект)
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		ТекущийОбъект.Показатели.Очистить();
		
		ОписанияТаблиц = Новый Массив;
		ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
			Модуль.ДополнитьМассивОписанийТаблицФормыНачисленияЗарплаты(ОписанияТаблиц, ОписаниеТаблицыСохраняемоеДенежноеСодержание());
		КонецЕсли;
		
		ЗарплатаКадрыРасширенный.ВводНачисленийРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблиц, 2);	
		ЗарплатаКадрыРасширенный.ВводРаспределенияРезультатовРасчетаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицДляРаспределенияРезультата(РегистрацияНачисленийДоступна));	
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаРеквизитВДанные(ЭтаФорма, ТекущийОбъект, ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда());
	КонецЕсли;
	
	РеквизитФормыВПризнакДлительнойКомандировки(ТекущийОбъект);

КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыСохраняемоеДенежноеСодержание()

	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.ИмяТаблицы									= "ДенежноеСодержание";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.ДенежноеСодержание";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник						= "Сотрудник";
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.НомерТаблицы = 6;
	
	Возврат ОписаниеТаблицы;	

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.ИмяТаблицы									= "Начисления";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.Начисления";
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени				= ПравоНаЧтениеДокументаБезОграничений;
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов 		= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы    = "Начисления,Удержания,НДФЛ";
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений)
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	
	ОписаниеТаблицы.ИмяТаблицы									= "НачисленияПерерасчет";
	ОписаниеТаблицы.ПутьКДанным									= "Объект.НачисленияПерерасчет";
	ОписаниеТаблицы.ИмяПоляДляВставкиПоказателей				= "ДатыНачисленияПерерасчет";
	ОписаниеТаблицы.НомерТаблицы 								= 1;
	ОписаниеТаблицы.ОтображатьПоляОписанияВремени				= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ОтображатьПоляНормыВремени 					= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.ЭтоПерерасчеты								= Истина;
	
	ОписаниеТаблицы.ИмяПоляДляВставкиРаспределенияРезультатов 	= "НачисленияПерерасчетРезультат";
	ОписаниеТаблицы.ВставлятьПослеПоля 							= Истина;
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов 		= ПравоНаЧтениеДокументаБезОграничений;
	ОписаниеТаблицы.РаспределениеРезультатовЗависимыеТаблицы    = "НачисленияПерерасчет,Удержания,НДФЛ";
	ОписаниеТаблицы.ИмяРеквизитаПериод 							= "ПериодРегистрации";
	ОписаниеТаблицы.ИмяРеквизитаДокументОснование 				= "ДокументОснование";
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыУдержаний()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "Удержания";
	ОписаниеТаблицы.ПутьКДанным = "Объект.Удержания";
	ОписаниеТаблицы.ИмяРеквизитаВидРасчета = "Удержание";
	ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	ОписаниеТаблицы.НомерТаблицы = 2;
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНДФЛ()
	
	ОписаниеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета();
	ОписаниеТаблицы.ИмяТаблицы = "НДФЛ";
	ОписаниеТаблицы.ПутьКДанным = "Объект.НДФЛ";
	ОписаниеТаблицы.ИмяПоляРезультат = "Налог";
	ОписаниеТаблицы.НомерТаблицы = 3;
	ОписаниеТаблицы.СодержитПолеВидРасчета = Ложь;
	ОписаниеТаблицы.СодержитПолеСотрудник = Истина;
    ОписаниеТаблицы.ИмяРеквизитаСотрудник = "ФизическоеЛицо";
	
	ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов = "Объект.РаспределениеРезультатовУдержаний";
	ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки = "ИдентификаторСтрокиНДФЛ";
	ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь;
	
	ОписаниеТаблицы.ОтменятьВсеИсправления	= Истина;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписанияТаблицДляРаспределенияРезультата(ПравоНаЧтениеДокументаБезОграничений)

	ОписанияТаблиц = Новый Массив;
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНачислений(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыПерерасчетов(ПравоНаЧтениеДокументаБезОграничений));
	ОписанияТаблиц.Добавить(ОписаниеТаблицыУдержаний());
	ОписанияТаблиц.Добавить(ОписаниеТаблицыНДФЛ());
	
	Возврат ОписанияТаблиц;

КонецФункции

&НаКлиенте
Процедура ВыполнитьКомандуРедактированияРезультатовРаспределенияНачисленийИУдержаний(ОписаниеТаблицы, Элемент, ВыбраннаяСтрока, Поле)

	Если СтрНайти(Поле.Имя, "КомандаРедактированияРаспределения") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьФормуРедактированияРезультатовРаспределенияПоИсточникамФинансирования(ЭтаФорма, ОписаниеТаблицы, ВыбраннаяСтрока, Объект.ПериодРегистрации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокументаОтклоненийУчетаВремени()
	ОписаниеДокумента = УчетРабочегоВремениКлиентСервер.ОписаниеДокументаОтклонения();
	
	ОписаниеДокумента.СотрудникПутьКДанным = "Объект.Сотрудник";
	ОписаниеДокумента.ЗамещаемыйВидВремениПутьКДанным = "Объект.ВидВремениЗамещаемый";
	ОписаниеДокумента.ПредставлениеВидаВремениПутьКДанным = "ВидВремениЗамещаемыйПредставление";
	ОписаниеДокумента.ПериодРегистрацииПутьКДанным = "Объект.ПериодРегистрации";
	ОписаниеДокумента.ДатаНачалаСобытияПутьКДанным = "Объект.ДатаНачалаСобытия";
	ОписаниеДокумента.ДатаНачалаПериодаОтклоненияПутьКДанным = "Объект.ДатаНачала";
	ОписаниеДокумента.ДатаОкончанияПериодаОтклоненияПутьКДанным = "Объект.ДатаОкончания";
	ОписаниеДокумента.ВидРасчетаПутьКДанным = "Объект.ВидРасчета";
	ОписаниеДокумента.ДатаВнутрисменногоОтклоненияПутьКДанным = "Объект.ДатаКомандировки";
	ОписаниеДокумента.ПризнакЧасовоеОтклонениеПутьКДанным = "Объект.ВнутрисменнаяКомандировка";
	ОписаниеДокумента.ИмяЭлементаЗамещаемыйВидВремени = "ВидВремениЗамещаемыйПредставление";
	ОписаниеДокумента.ИмяЭлементаВидРасчета = "ВидРасчета";
	ОписаниеДокумента.СотрудникВШапкеДокумента = Истина;
	ОписаниеДокумента.ЗаполнитьПериодДокументаПоУмолчанию = Ложь;

	Возврат ОписаниеДокумента;
	
КонецФункции

&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	НачисленияФиксРасчет = Новый Массив;
	НачисленияФиксРасчет.Добавить("Результат");
	
	НачисленияФиксРасчетВремени = Новый Массив;
	НачисленияФиксРасчетВремени.Добавить("ОплаченоДней");
	НачисленияФиксРасчетВремени.Добавить("ОплаченоЧасов");
	НачисленияФиксРасчетВремени.Добавить("НормаДней");
	НачисленияФиксРасчетВремени.Добавить("НормаЧасов");
	
	НачисленияФиксСтрока = Новый Массив;
	НачисленияФиксСтрока.Добавить("Сотрудник");
	НачисленияФиксСтрока.Добавить("Подразделение");
	НачисленияФиксСтрока.Добавить("Начисление");
	НачисленияФиксСтрока.Добавить("ДатаНачала");
	НачисленияФиксСтрока.Добавить("ДатаОкончания");
	
	НачисленияФиксЗаполнение = Новый Массив;
	
	Возврат Новый Структура("Начисления, НачисленияПерерасчет, НДФЛ",
		Новый Структура("ФиксРасчет, ФиксЗаполнение, ФиксСтрока, ФиксРасчетВремени",
			НачисленияФиксРасчет,
			НачисленияФиксЗаполнение,
			НачисленияФиксСтрока,
			НачисленияФиксРасчетВремени),
		Новый Структура("ФиксРасчет, ФиксЗаполнение, ФиксСтрока, ФиксРасчетВремени",
			НачисленияФиксРасчет,
			НачисленияФиксЗаполнение,
			НачисленияФиксСтрока,
			НачисленияФиксРасчетВремени),
		УчетНДФЛРасширенный.КонтролируемыеПоляДляФиксацииРезультатов()
	);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтарыеЗначенияКонтролируемыхПолей() Экспорт
	Возврат СтарыеЗначенияКонтролируемыхПолей;
КонецФункции

&НаКлиенте
Процедура ДополнитьСтроку(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей) Экспорт
	ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтрокуНаСервере(ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей)
	РасчетЗарплатыРасширенныйФормы.ДополнитьСтрокуРасчета(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), ИдентификаторСтроки, ОписаниеТаблицы, ЗаполнятьСведенияСотрудников, ЗаполнятьЗначенияПоказателей);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДокумента(Форма)
	
	Описание = РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента();
	Описание.НачисленияИмя = "Начисления";
	Описание.НачисленияПерерасчетИмя = "НачисленияПерерасчет";
	Описание.УдержанияИмя = "Удержания";
	Описание.НДФЛИмя = "НДФЛ";
	Описание.МесяцНачисленияИмя = "ПериодРегистрации";
	Описание.ИменаПолейНачисления = "ВидРасчета,НачисленияНачисление";
	Описание.РегистрацияНачисленийДоступна = Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
	Описание.ЕстьОплатаПоСреднему = Истина;
	Описание.ЭтоСреднечасовойЗаработок = Форма.ИспользуетсяСреднечасовойЗаработок;
	
	Описание.ВзносыФОТИмя = "ВзносыФОТ";
	Попытка
		Описание.ПорядокВыплаты = Форма.Объект.ПорядокВыплаты;
	Исключение
		Описание.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Зарплата");
	КонецПопытки;
	
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Месяц", "МесяцНачисленияСтрокой"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("Сотрудник", "Объект.Сотрудник"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("ВидРасчета", "Объект.ВидРасчета"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("ДатаНачала", "Объект.ДатаНачала"));
	Описание.ОбязательныеПоля.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеОбязательногоПоляДокумента("ДатаОкончания", "Объект.ДатаОкончания"));

	Описание.ПроверяемыеПериоды.Добавить(РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеПроверяемогоПериода("Дата начала", "Объект.ДатаНачала", "ДатаОкончания", "Объект.ДатаОкончания"));
	
	Описание.ОписанияТаблицДляРаспределенияРезультата = СтруктураОписанияТаблицДляРаспределенияРезультата(Форма);
	
	Возврат Описание;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПериодРасчетаСреднегоЗаработка()
	
	Если Не ИспользуетсяРасчетЗарплаты Или Объект.ФиксПериодРасчетаСреднегоЗаработка Тогда
		// Период расчета среднего заработка установлен принудительно.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) 
		Или Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ПериодРасчетаСреднего = УчетСреднегоЗаработка.ПериодРасчетаОбщегоСреднегоЗаработкаСотрудника(Объект.ДатаНачалаСобытия, Объект.Сотрудник, Объект.ВидРасчета);
	
	Если НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаНачало) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаНачала) 
		Или	НачалоМесяца(Объект.ПериодРасчетаСреднегоЗаработкаОкончание) <> НачалоМесяца(ПериодРасчетаСреднего.ДатаОкончания) Тогда
		Объект.ПериодРасчетаСреднегоЗаработкаНачало	= ПериодРасчетаСреднего.ДатаНачала;
		Объект.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднего.ДатаОкончания;
		ОбновитьДанныеДляРасчетаСреднего();
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОпределитьВидУчетаВремениДляСредней()
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаСобытия) 
		Или Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
		
	Если ИспользуетсяСреднечасовойЗаработок Тогда
		Объект.ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам;
		Возврат;
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Объект.Сотрудник, "ОсновноеНачисление", Объект.ДатаНачалаСобытия);
	
	ВремяВЧасах = Ложь;
	Если КадровыеДанные.Количество() > 0 Тогда
		Если НЕ КадровыеДанные[0].ОсновноеНачисление = Null Тогда
			Если НЕ КадровыеДанные[0].ОсновноеНачисление.УчетВремениВЧасах = Null Тогда
				Объект.ВидУчетаВремениДляСредней = ?(КадровыеДанные[0].ОсновноеНачисление.УчетВремениВЧасах,Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимЧасам,
											Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням);
			Иначе
				Объект.ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;
			КонецЕсли;									
		Иначе
			Объект.ВидУчетаВремениДляСредней = Перечисления.ВидыУчетаВремениДляСредней.ПоРабочимДням;
		КонецЕсли;	

	КонецЕсли;

КонецПроцедуры	
&НаСервере
Процедура СброситьФлагОплатитьПоДаннымФОТ()
	
	Объект.ОплатитьПоДаннымФОТ = Ложь;
	
КонецПроцедуры	
&НаСервере
Процедура УстановитьИспользованиеСреднечасовогоЗаработка()
	
	ИспользуетсяСреднечасовойЗаработок = Ложь;
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;	
	
	Если Объект.ВнутрисменнаяКомандировка Тогда
		ИспользуетсяСреднечасовойЗаработок = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УчетРабочегоВремени.СотрудникуПрименяетсяСуммированныйУчетРабочегоВремени(Объект.Сотрудник, Объект.ДатаНачалаСобытия) Тогда
		ИспользуетсяСреднечасовойЗаработок = Истина;
		Возврат;
	КонецЕсли;
	
	Если УчетСреднегоЗаработка.НачислениеИспользуетСреднечасовойЗаработок(Объект.ВидРасчета) Тогда
		ИспользуетсяСреднечасовойЗаработок = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Механизмы связанные с регистрацией внутрисменных отклонений.

///////////////////////////////////////////////////////////////////////////////
// Обслуживание элементов формы.

&НаСервере
Процедура ЗаполнитьИнформациюЗаполненностиДанных()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Если Объект.РасчетДенежногоСодержания Тогда
		
		СтруктураИнфонадписи = Новый Структура("Текст, Картинка");
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.ЗаполнитьИнформациюЗаполненностиДанныхСохраняемоеДенежноеСодержаниеДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма), СтруктураИнфонадписи);
		КонецЕсли;
		
	Иначе
	
		СтруктураИнфонадписи = УчетСреднегоЗаработка.ИнформацияОЗаполненностиДанныхСреднегоЗаработка(
			Объект.Ссылка,
			ЗаполнениеВыполнено,
			Объект.Сотрудник,
			Объект.ДатаНачалаСобытия,
	     	Объект.ПериодРасчетаСреднегоЗаработкаНачало, 
		    Объект.ПериодРасчетаСреднегоЗаработкаОкончание, 
			Объект.СреднийЗаработокОбщий, 
			Объект.ОтработанноеВремяДляСреднегоОбщий
		);
																										
	КонецЕсли;						
	
	ЗаполненностьДанныхИнформационныйТекст = СтруктураИнфонадписи.Текст;
	ЗаполненностьДанныхКартинка = СтруктураИнфонадписи.Картинка;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьВидимостьПерерасчетов()
	
	Если Не ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПерерасчетыДоступны = ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступны(ЭтаФорма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НачисленияПерерасчет", "Видимость", ПерерасчетыДоступны);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПерерасчетГруппа", "Видимость", ПерерасчетыДоступны);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьУдержаний(Форма)

	Форма.Элементы.УдержаноГруппа.Видимость = УдержанияДоступны(Форма);
	Форма.Элементы.ВзносыФОТГруппа.Видимость = УдержанияДоступны(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УдержанияДоступны(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		УдержанияДоступны = Ложь;
	иначе
		УдержанияДоступны = ЭтоМежрасчетнаяВыплата(Форма.Объект.ПорядокВыплаты);
	КонецЕсли;
	
	Возврат УдержанияДоступны;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты)
		
	Возврат РасчетЗарплатыРасширенный.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНачисленоУдержаноИтог(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;

	Форма.НачисленоИтог 	= Форма.Объект.Начисления.Итог("Результат");
	Форма.НДФЛ				= Форма.Объект.НДФЛ.Итог("Налог");
	Форма.ПрочиеУдержания	= Форма.Объект.Удержания.Итог("Результат");
	Форма.УдержаноИтог		= Форма.НДФЛ + Форма.ПрочиеУдержания;
	
	Форма.ВзносыФОТ			= Форма.Объект.ВзносыФОТ.Итог("Результат");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПерерасчетИтог(Форма)
	Если Не Форма.ИспользуетсяРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПерерасчетИтог = Форма.Объект.НачисленияПерерасчет.Итог("Результат");
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляРасчетаСреднего()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.РасчетДенежногоСодержания Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
			Модуль.ОбновитьДанныеСохраняемогоДенежногоСодержанияДокумента(ЭтаФорма, ОписаниеДокумента(ЭтаФорма));
		КонецЕсли;
		
	Иначе
	
		УчетСреднегоЗаработка.ОбновитьДанныеОбщегоСреднегоЗаработка(
			Новый Структура("ДанныеОНачислениях, ДанныеОВремени, ДанныеОбИндексации, ВидРасчета", 
			Объект.СреднийЗаработокОбщий, Объект.ОтработанноеВремяДляСреднегоОбщий, Объект.ДанныеОбИндексации, Объект.ВидРасчета), 
			Объект.ДатаНачалаСобытия, 
			Объект.ПериодРасчетаСреднегоЗаработкаНачало, 
			Объект.ПериодРасчетаСреднегоЗаработкаОкончание,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), , 
			Объект.Ссылка);
		
	КонецЕсли;	
		
	ЗаполнитьИнформациюЗаполненностиДанных();
	
	РассчитатьСреднийЗаработок();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредупреждениеДокументНеРассчитан(Форма)
	
	Форма.ЗаполненностьДанныхИнформационныйТекст 	= УчетСреднегоЗаработкаКлиентСервер.ТекстПредупрежденияДокументНеРассчитан();
	Форма.ЗаполненностьДанныхКартинка 				= БиблиотекаКартинок.Предупреждение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуПериодКомандировки()
	Если Объект.ВнутрисменнаяКомандировка Тогда
		Элементы.ПериодКомандировкиСтраницы.ТекущаяСтраница	= Элементы.ВнутрисменнаяКомандировкаСтраница;
	Иначе
		Элементы.ПериодКомандировкиСтраницы.ТекущаяСтраница	= Элементы.ЦелодневнаяКомандировкаСтраница;
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ТекстСообщенияНеЗаполненВидРасчета() Экспорт
	Возврат Документы.Командировка.ТекстСообщенияНеЗаполненВидРасчета(Объект.ВнутрисменнаяКомандировка);	
КонецФункции

&НаСервере
Функция ЗначенияДляЗаполнения()
	Возврат Новый Структура("Организация, Ответственный, Месяц",
					"Объект.Организация",
					"Объект.Ответственный",
					"Объект.ПериодРегистрации");
КонецФункции

&НаСервереБезКонтекста
Функция СписокВыбораЗамещаемыхВидовВремен(Данныеформы)
	УстановитьПривилегированныйРежим(Истина);
	Возврат УчетРабочегоВремениФормы.ДокументыОтклоненийСписокВыбораЗамещаемогоВремени(Данныеформы);				
КонецФункции

&НаСервере
Процедура ОбновитьДанныеНДФЛНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.НДФЛ.Загрузить(Параметр.НДФЛ.Выгрузить());
	
	Модифицированность = Истина;
	
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыНДФЛ());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВзносовНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.ВзносыФОТ.Загрузить(Параметр.ВзносыФОТ.Выгрузить());
	
	Модифицированность = Истина;
	
//	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыНДФЛ());
	
КонецПроцедуры
&НаСервере
Процедура ОбновитьДанныеСтоимостьПоДаннымФОТ(Параметр)
	
	Объект.РучнаяКорректировкаСтоимостьПоДаннымФОТ = Параметр.РучнаяКорректировкаСтоимостьПоДаннымФОТ;
	Объект.СтоимостьПоДаннымФОТ = Параметр.СтоимостьПоДаннымФОТ;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеУдержанийНаСервере(АдресВременногоХранилища)
	
	Параметр = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Объект.Удержания.Загрузить(Параметр.Удержания.Выгрузить());
	
	РассчитатьСотрудникаНаСервере(Объект.Сотрудник, ОписаниеТаблицыУдержаний());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойствоДокументРассчитан()
	
	Если ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда 
		Объект.ДокументРассчитан = Истина;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкуНезаполненногоПланируемойДатыВыплаты(Форма)
	
	Если Не Форма.ИспользуетсяРасчетЗарплаты
		Или Не Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеТаблицы = Новый Массив;
	ПроверяемыеТаблицы.Добавить("Начисления");
	ПроверяемыеТаблицы.Добавить("НачисленияПерерасчет");
	
	ПроверяемыеНачисления = Новый Массив;
	
	Для каждого ПроверяемаяТаблица Из ПроверяемыеТаблицы Цикл
		НачисленияДокумета = Новый Массив;
		Для каждого Начисление Из Форма.Объект[ПроверяемаяТаблица] Цикл
			НачисленияДокумета.Добавить(Начисление.Начисление);
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеНачисления, НачисленияДокумета, Истина);
	КонецЦикла;
	
	АвтоОтметкаНезаполненного = ДатаВыплатыОбязательнаКЗаполнению(Форма.Объект.ПорядокВыплаты, ПроверяемыеНачисления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "АвтоОтметкаНезаполненного", АвтоОтметкаНезаполненного); 
	Если Не АвтоОтметкаНезаполненного Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПланируемаяДатаВыплаты", "ОтметкаНезаполненного", Ложь); 
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаВыплатыОбязательнаКЗаполнению(Знач ПорядокВыплаты, Знач ПроверяемыеНачисления)
	
	УстановитьПривилегированныйРежим(Истина);	
	Возврат УчетНДФЛРасширенный.ДатаВыплатыОбязательнаКЗаполнению(ПорядокВыплаты, ПроверяемыеНачисления);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРасчетныхПолей()
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("Результаты");
	ИменаЭлементов.Добавить("ВидРасчета");
	ИменаЭлементов.Добавить("НачисленияСтраница");
	ИменаЭлементов.Добавить("НачисленияПерерасчетСтраница");
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеПолейМногофункциональныхДокументов(ЭтаФорма, ИменаЭлементов);
	
	Если ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
		УстановитьВидимостьПерерасчетов();
		УстановитьВидимостьУдержаний(ЭтаФорма);
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПодробно.Пометка, ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
		РасчетЗарплатыРасширенныйКлиентСервер.ДокументыВыполненияНачисленийУстановитьРежимОтображенияПодробно(ЭтаФорма, Элементы.НачисленияПерерасчетПодробно.Пометка, ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
		ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "Результаты", "ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРегистрацииНачислений()
	
	ПраваНаДокумент = ЗарплатаКадрыРасширенный.ПраваНаМногофункциональныйДокумент(Объект);
	РегистрацияНачисленийДоступна = ПраваНаДокумент.ПолныеПраваПоРолям;
	ОграниченияНаУровнеЗаписей = Новый ФиксированнаяСтруктура(ПраваНаДокумент.ОграниченияНаУровнеЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитовОпределяющихОграниченияНаУровнеЗаписей()
	
	БылиОграничения = ОграниченияНаУровнеЗаписей;
	УстановитьДоступностьРегистрацииНачислений();
	
	Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений
		Или БылиОграничения.ИзменениеБезОграничений <> ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений
		Или БылиОграничения.ИзменениеКадровыхДанных <> ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных Тогда 
		
		Объект.ДокументРассчитан = ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
		Объект.Рассчитал = Неопределено;
		ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений);
		
		УстановитьВидимостьРасчетныхПолей();
		
		Если БылиОграничения.ЧтениеБезОграничений <> ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений Тогда 
			ЗарплатаКадрыРасширенный.УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуКомандировкиВключеннойВТ9а(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() Тогда
		РезультатПустой = Истина;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомандировкиСотрудниковСотрудники.Ссылка
		|ИЗ
		|	Документ.КомандировкиСотрудников.Сотрудники КАК КомандировкиСотрудниковСотрудники
		|ГДЕ
		|	КомандировкиСотрудниковСотрудники.Командировка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Результат = Запрос.Выполнить();
		РезультатПустой = Результат.Пустой();
	КонецЕсли;
	
	ОтражениеВУчетеТ9а = Ложь;
	
	Если Не Параметры = Неопределено Тогда
	 ОтражениеВУчетеТ9а = Параметры.Свойство("ОтражениеВУчетеТ9а") И Параметры.ОтражениеВУчетеТ9а;
	КонецЕсли;
	
	ДоступностьЭлементов = РезультатПустой И Не ОтражениеВУчетеТ9а;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Организация", 				"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сотрудник", 				"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаНачала", 				"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОкончания", 			"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДнейВПути", 				"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "МестоНазначения", 			"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОрганизацияНазначения", 	"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОснованиеКомандировки", 	"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Цель", 						"Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандировкаЗаСчетСредств", "Доступность", ДоступностьЭлементов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнутрисменнаяКомандировка", "Доступность", ДоступностьЭлементов);
	
	КомандировкаСотрудников = Неопределено;
	
	Если Не РезультатПустой Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КомандировкаСотрудников = Выборка.Ссылка;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"КомандировкаСотрудников",
		"Видимость",
		ЗначениеЗаполнено(КомандировкаСотрудников));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗапрашиваемыеЗначения.Вставить("ГлавныйБухгалтер", "Объект.ГлавныйБухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("Бухгалтер", "Объект.Бухгалтер");
	
	ЗапрашиваемыеЗначения.Вставить("Исполнитель", "Объект.Исполнитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьИсполнителя", "Объект.ДолжностьИсполнителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
	НастроитьОтображениеГруппыПодписантов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеГруппыПодписантов()
	
	Если ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении") Тогда
		ЗарплатаКадры.НастроитьОтображениеГруппыПодписей(Элементы.ПодписиГруппа, "Объект.Руководитель", "Объект.ГлавныйБухгалтер", "Объект.Бухгалтер", "Объект.Исполнитель");	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция СведенияОбНДФЛ() Экспорт
	
	Возврат УчетНДФЛФормыРасширенный.СведенияОбНДФЛ(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция СведенияОВзносах() Экспорт
	
	ДанныеОВзносах = Новый Структура;

	ДанныеОВзносах.Вставить("ВзносыФОТ", Объект.ВзносыФОТ.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОВзносах, ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция СведенияОбУдержаниях() Экспорт
	
	Возврат РасчетЗарплатыРасширенный.СведенияОбУдержаниях(ЭтаФорма);
	
КонецФункции

#Область РаспределениеПоТерриториямУсловиямТруда

&НаСервере
Функция ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеТаблицыНачислений(РегистрацияНачисленийДоступна));
	Описания.Добавить(ОписаниеТаблицыПерерасчетов(РегистрацияНачисленийДоступна));
	
	Возврат Описания;
	
КонецФункции

#КонецОбласти
//-- НЕУКР

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	
	Массив = Новый Массив;
	
	Если ИспользуетсяРасчетЗарплаты Тогда
		Массив.Добавить(Новый Структура("ЭлементФормы", "ПериодРегистрации"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Организация"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Сотрудник"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаНачала"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаОкончания"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВнутрисменнаяКомандировка"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ДатаКомандировки"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "Часы"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидВремениЗамещаемыйПредставление"));
		Массив.Добавить(Новый Структура("ЭлементФормы", "ВидРасчета"));
	КонецЕсли;
	
	Для каждого ОписаниеЭлемента Из Массив Цикл
		ОписаниеЭлемента.Вставить("ПредупреждениеПриРедактировании", ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом());
	КонецЦикла;
	
	Возврат Массив
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма)
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ?(ЕстьФиксированныеДанные(Форма), ОтображениеПредупрежденияПриРедактировании.Отображать, ОтображениеПредупрежденияПриРедактировании.Авто));
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьФиксированныеДанные(Форма)
	Если Не Форма.РегистрацияНачисленийДоступна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсправленныйДокументЗаполнен = ЗначениеЗаполнено(Форма.Объект.ИсправленныйДокумент);
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицыНачислений(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен) 
		Или РасчетЗарплатыРасширенныйКлиентСервер.ЕстьФиксированныеДанныеВТаблице(Форма, ОписаниеТаблицыПерерасчетов(Форма.РегистрацияНачисленийДоступна), ИсправленныйДокументЗаполнен);
КонецФункции 

#КонецОбласти

#Область ОтсутствияПоДругимМестамРаботы

&НаСервере
Процедура ПрочитатьПостоянныеКадровыеДанныеСотрудника()
	
	ЭтотОбъект.ДругиеСотрудникиФизическогоЛица = Новый ФиксированныйМассив(Новый Массив);
	
	Если ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Сотрудник), "ФизическоеЛицо, ГоловнаяОрганизация");
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников[0];
		
		ЭтотОбъект.ДругиеСотрудникиФизическогоЛица = ДругиеСотрудникиФизическогоЛица(Объект.Сотрудник, КадровыеДанныеСотрудника.ФизическоеЛицо, КадровыеДанныеСотрудника.ГоловнаяОрганизация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДругиеСотрудникиФизическогоЛица(Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация)
	
	ДанныеДругихСотрудниковФизическогоЛица = Новый Массив;	
	
	Если ЗначениеЗаполнено(Сотрудник)
		И ЗначениеЗаполнено(ФизическоеЛицо)
		И ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		
		ДругиеСотрудникиФизическогоЛица = КадровыйУчетРасширенный.ДругиеСотрудникиФизическогоЛица(ФизическоеЛицо, ГоловнаяОрганизация, Сотрудник, '00010101', '00010101');
		
		Если ДругиеСотрудникиФизическогоЛица.Количество() > 0  Тогда
			
			КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ДругиеСотрудникиФизическогоЛица, "Организация");
			
			Для каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
				
				ДанныеДругогоСотрудникаФизическогоЛица = Новый Структура("Сотрудник, Организация", КадровыеДанныеСотрудника.Сотрудник, КадровыеДанныеСотрудника.Организация);
				
				ДанныеДругихСотрудниковФизическогоЛица.Добавить(Новый ФиксированнаяСтруктура(ДанныеДругогоСотрудникаФизическогоЛица));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ДанныеДругихСотрудниковФизическогоЛица);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтсутствияПоДругимМестамРаботы()
	
	НачалоПериода = ?(Объект.ВнутрисменнаяКомандировка, Объект.ДатаКомандировки, Объект.ДатаНачала);
	ОкончаниеПериода = ?(Объект.ВнутрисменнаяКомандировка, Объект.ДатаКомандировки, Объект.ДатаОкончания);
	
	КадровыйУчетФормыРасширенный.ЗаполнитьОтсутствияПоДругимМестамРаботы(
		ЭтаФорма, НачалоПериода, ОкончаниеПериода);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьОтсутствияПоДругимМестамРаботы()
	
	ЕстьДругиеСотрудникиФизическогоЛица = ДругиеСотрудникиФизическогоЛица.Количество() > 0;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтсутствияПоДругимМестамРаботы", "Видимость", ЕстьДругиеСотрудникиФизическогоЛица);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтсутствияПоДругимМестамРаботы", "Видимость", ЕстьДругиеСотрудникиФизическогоЛица);
			
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуНовогоОтпускаСовместителя(Совместитель = Неопределено, ОрганизацияСовместителя = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Ссылка", Неопределено);
	ДанныеЗаполнения.Вставить("Действие", "Заполнить");
	
	ДанныеЗаполнения.Вставить("Организация", ОрганизацияСовместителя);
	ДанныеЗаполнения.Вставить("Сотрудник", Совместитель);
	
	ДанныеОтпусков = Новый Массив();
	НоваяСтрокаОтпуска = ДанныеЗаполненияСтроки();
	НоваяСтрокаОтпуска.ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	НоваяСтрокаОтпуска.ДатаНачала = Объект.ДатаНачала;
	НоваяСтрокаОтпуска.ДатаОкончания = Объект.ДатаОкончания;
	
	КоличествоДнейОтпуска = КоличествоДнейПоВидуОтпуска(Совместитель, ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"), Объект.ДатаНачала, Объект.ДатаОкончания);
	
	НоваяСтрокаОтпуска.КоличествоДней = КоличествоДнейОтпуска;
	ДанныеОтпусков.Добавить(НоваяСтрокаОтпуска);
	
	ДанныеЗаполнения.Вставить("ДанныеОтпусков", ДанныеОтпусков);
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.Отпуск.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаполненияСтроки()
	
	СтруктураОтпуска = Новый Структура;
		
	СтруктураОтпуска.Вставить("ВидОтпуска");
	СтруктураОтпуска.Вставить("ДатаНачала");
	СтруктураОтпуска.Вставить("ДатаОкончания");
	СтруктураОтпуска.Вставить("КоличествоДней");
	СтруктураОтпуска.Вставить("КоличествоДнейКомпенсации", 0);
	СтруктураОтпуска.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск", '00010101');
	СтруктураОтпуска.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск", '00010101');
	СтруктураОтпуска.Вставить("Основание", "");
	СтруктураОтпуска.Вставить("ВидОтпускаПрежний", Неопределено);
	СтруктураОтпуска.Вставить("ИндексСтрокиДокумента", Неопределено);
	
	Возврат СтруктураОтпуска;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоДнейПоВидуОтпуска(Сотрудник, ВидОтпуска, ДатаНачала, ДатаОкончания)
	
	КраткосрочныйТрудовойДоговорСотрудника = ОстаткиОтпусков.СотрудникРаботаетПоКраткосрочномуТрудовомуДоговору(Сотрудник, ДатаНачала);
	
	ОписаниеВидаОтпуска = Документы.Отпуск.ОписаниеВидаОтпуска(ВидОтпуска);
	КоличествоДнейОсновногоОтпуска = УчетРабочегоВремени.ДлительностьИнтервала(Сотрудник, ДатаНачала, ДатаОкончания, ОписаниеВидаОтпуска.СпособРасчетаПоКалендарнымДням, ОписаниеВидаОтпуска.ЕжегодныйОтпуск);
	
	Возврат КоличествоДнейОсновногоОтпуска;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНовогоОтпускаБезОплатыСовместителя(Совместитель = Неопределено, ОрганизацияСовместителя = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Действие", "Заполнить");	
	ДанныеЗаполнения.Вставить("Организация", ОрганизацияСовместителя);
	ДанныеЗаполнения.Вставить("Сотрудник", Совместитель);
	ДанныеЗаполнения.Вставить("ДатаНачала", Объект.ДатаНачала);
	ДанныеЗаполнения.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	
	ДанныеЗаполнения.Вставить("ОтсутствиеВТечениеЧастиСмены", Объект.ВнутрисменнаяКомандировка);
	ДанныеЗаполнения.Вставить("ДатаОтсутствия", Объект.ДатаКомандировки);
	ДанныеЗаполнения.Вставить("ЧасовОтпуска", Объект.ОплачиватьЧасов);
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.ОтпускБезСохраненияОплаты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовойКомандировкиСовместителя(Совместитель = Неопределено, ОрганизацияСовместителя = Неопределено)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Действие", "Заполнить");	
	ДанныеЗаполнения.Вставить("Организация", ОрганизацияСовместителя);
	ДанныеЗаполнения.Вставить("Сотрудник", Совместитель);
	ДанныеЗаполнения.Вставить("ДатаНачала", Объект.ДатаНачала);
	ДанныеЗаполнения.Вставить("ДатаОкончания", Объект.ДатаОкончания);
	ДанныеЗаполнения.Вставить("ОтсутствиеВТечениеЧастиСмены", Объект.ВнутрисменнаяКомандировка);
	ДанныеЗаполнения.Вставить("ДатаОтсутствия", Объект.ДатаКомандировки);
	ДанныеЗаполнения.Вставить("ЧасовОтпуска", Объект.ОплачиватьЧасов);
	ДанныеЗаполнения.Вставить("МестоНазначения", Объект.МестоНазначения);
	ДанныеЗаполнения.Вставить("ОрганизацияНазначения", Объект.ОрганизацияНазначения);
	ДанныеЗаполнения.Вставить("КомандировкаЗаСчетСредств", Объект.КомандировкаЗаСчетСредств);
	ДанныеЗаполнения.Вставить("ДнейВПути", Объект.ДнейВПути);
	ДанныеЗаполнения.Вставить("Цель", Объект.Цель);
	ДанныеЗаполнения.Вставить("ЗаполнитьПоПараметрамЗаполнения", Истина);
	
	ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
	ОткрытьФорму("Документ.Командировка.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПризнакДлительнойКомандировкиВРеквизитФормы()
	
	Если Объект.ДлительнаяКомандировка Тогда
		ЭтотОбъект.ПризнакДлительнойКомандировки = 1;
	иначе
		ЭтотОбъект.ПризнакДлительнойКомандировки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеквизитФормыВПризнакДлительнойКомандировки(Объект)
	Объект.ДлительнаяКомандировка = ЭтотОбъект.ПризнакДлительнойКомандировки > 0;	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПризнакаДлительнойКомандировки()
	
	ДлительнаяКомандировкаДоступна = ДлительнаяКомандировкаДоступна();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПризнакДлительнойКомандировки", "Доступность", ДлительнаяКомандировкаДоступна);
	
КонецПроцедуры

&НаСервере
Процедура УточнитьПризнакДлительнойКомандировки()
	
	ДлительнаяКомандировкаДоступна = ДлительнаяКомандировкаДоступна();
	
	Если Не ДлительнаяКомандировкаДоступна Тогда
	   ЭтотОбъект.ПризнакДлительнойКомандировки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДлительнаяКомандировкаДоступна()
	
	ДлительнаяКомандировкаДоступна = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала)
		И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ДлительнаяКомандировкаДоступна = Объект.ДатаОкончания > КонецМесяца(Объект.ДатаНачала);
	КонецЕсли;
	
	Возврат ДлительнаяКомандировкаДоступна;
	   	
КонецФункции

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.НачисленияПерерасчет.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПерерасчетПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(Элементы.Начисления.ТекущиеДанные, "ПериодДействия", "ПериодДействияСтрокой", Направление, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПериодДействияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

СтарыеЗначенияКонтролируемыхПолей = Новый Соответствие;
