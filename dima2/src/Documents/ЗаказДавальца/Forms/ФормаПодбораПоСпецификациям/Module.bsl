&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Продукция.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище.Продукция));
	Продукция.Сортировать("КодСтроки"); // Для ускорения дальнейшего поиска
	
	Отбор = Новый Структура("Спецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	Если Продукция.НайтиСтроки(Отбор).Количество() = 0 Тогда
		Элементы.ГруппаИнформацияОбОшибках.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.РаспределенныеМатериалыКодСтрокиПродукция.СписокВыбора.ЗагрузитьЗначения(Параметры.СписокВыбораПродукции);
	
	ЗаполнитьСписокОтбораПродукции();
	
	ЗаполнитьТаблицыДанных();
	
	ОтборПоПродукции = -1;
	УстановитьОтборМатериалов(Элементы, ОтборПоПродукции);

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ПеренестиВДокумент Тогда
		АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
		ОповеститьОВыборе(Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекстВопроса = "";
	
	Если Не ПеренестиВДокумент Тогда // Не нажата кнопка "Перенести в документ", простое закрытие
		
		Если Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru='Отказаться от переноса изменений и перейти в документ?';uk='Відмовитися від перенесення змін і перейти в документ?'");
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("Отказаться", НСтр("ru='Отказаться от переноса';uk='Відмовитися від перенесення'"));
			СписокКнопок.Добавить("Перенести", НСтр("ru='Перенести';uk='Перенести'"));
			СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена';uk='Відмінити'"));
			
			Отказ = Истина;
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), ТекстВопроса, СписокКнопок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = "Перенести" Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли  Ответ = "Отказаться" Тогда
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПоПродукцииПриИзменении(Элемент)
	
	УстановитьОтборМатериалов(Элементы, ОтборПоПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОтборПоПродукции = -1;
	УстановитьОтборМатериалов(Элементы, ОтборПоПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределенныеМатериалы

&НаКлиенте
Процедура РаспределенныеМатериалыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РаспределенныеМатериалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеМатериалыПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеМатериалыКодСтрокиПродукцияПриИзменении(Элемент)
	Перем СтрокаПродукции;
	
	ТекДанные = Элементы.РаспределенныеМатериалы.ТекущиеДанные;
	
	ДанныеПродукции = Новый Структура("ПродукцияНоменклатура, ПродукцияХарактеристика, ПродукцияСпецификация");
	
	Если ПолучитьДанныеПродукцииПоКоду(Продукция, ТекДанные.КодСтрокиПродукция, СтрокаПродукции) Тогда
		
		// Номенклатура
		ДанныеПродукции.ПродукцияНоменклатура = СтрокаПродукции.Номенклатура;
		
		// Характеристика
		Если СтрокаПродукции.ХарактеристикиИспользуются Тогда
			ДанныеПродукции.ПродукцияХарактеристика	= СтрокаПродукции.Характеристика;
		Иначе
			ДанныеПродукции.ПродукцияХарактеристика	= НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
		КонецЕсли;
		
		// Спецификация
		Если ЗначениеЗаполнено(СтрокаПродукции.Спецификация) Тогда
			ДанныеПродукции.ПродукцияСпецификация = СтрокаПродукции.Спецификация;
		Иначе
			ДанныеПродукции.ПродукцияСпецификация = НСтр("ru='<не указана>';uk='<не зазначена>'");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекДанные, ДанныеПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеМатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.РаспределенныеМатериалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", 	ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "РаспределенныеМатериалы"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеМатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.РаспределенныеМатериалы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока.КодСтроки = 0;
		Если ОтборПоПродукции > -1 Тогда
			ТекущаяСтрока.КодСтрокиПродукция = ОтборПоПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенныеМатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтборПоПродукции > -1 Тогда
		УстановитьОтборМатериалов(Элементы, ОтборПоПродукции);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоМатериалам(Команда)
	
	РаспределенныеМатериалы.Сортировать("Номенклатура, Характеристика, КодСтрокиПродукция");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоПродукции(Команда)
	
	РаспределенныеМатериалы.Сортировать("КодСтрокиПродукция, Номенклатура, Характеристика");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "РаспределенныеМатериалыХарактеристика",
																		     "РаспределенныеМатериалы.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределенныеМатериалыПродукцияСпецификация.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспределенныеМатериалы.ПродукцияСпецификация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='<не указана>';uk='<не зазначена>'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаспределенныеМатериалыПродукцияХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РаспределенныеМатериалы.ПродукцияХарактеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

КонецПроцедуры

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборМатериалов(Элементы, КодСтроки)
	
	Если КодСтроки = -1 Тогда // Все строки материалов
		ОтборСтрок = Новый ФиксированнаяСтруктура;
	Иначе
		ОтборСтрок = Новый ФиксированнаяСтруктура("КодСтрокиПродукция", КодСтроки);
	КонецЕсли;
	
	Элементы.РаспределенныеМатериалы.ОтборСтрок = ОтборСтрок;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыДанных()
	
	МассивДанных = Новый Массив;
	МассивКлючей = Новый Массив;
	
	Для Каждого СтрТЧ из Продукция Цикл
		
		МассивДанных.Добавить(Документы.ЗаказДавальца.ДанныеПоНоменклатуре(
			СтрТЧ,
			СтрТЧ.Спецификация,
			Параметры.Подразделение));
		
		МассивКлючей.Добавить(СтрТЧ.КодСтроки);
		
	КонецЦикла;
	
	МатериалыПоСпецификации = РаспределенныеМатериалы.Выгрузить(,
			"Номенклатура,Характеристика,КодСтрокиПродукция,Упаковка,КоличествоУпаковок,ТипНоменклатуры,Количество");
	
	ПереченьДанных = Новый Массив;
	ПереченьДанных.Добавить("МатериалыИУслуги");
	
	ПараметрыСпецификаций = Новый Структура;
	ПараметрыСпецификаций.Вставить("ПереченьДанных",ПереченьДанных);
	ПараметрыСпецификаций.Вставить("МассивКлючей",	МассивКлючей);
	ПараметрыСпецификаций.Вставить("МассивДанных",	МассивДанных);
	ПараметрыСпецификаций.Вставить("Подразделение",	Параметры.Подразделение);
	
	Документы.ЗаказДавальца.МатериалыПоСпецификациям(ПараметрыСпецификаций, МатериалыПоСпецификации);
	
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ.КодСтроки,
	|	ВТ.ХарактеристикиИспользуются,
	|	ВТ.Номенклатура,
	|	ВТ.Характеристика,
	|	ВТ.Спецификация
	|ПОМЕСТИТЬ ВтПродукция
	|
	|ИЗ
	|	&Продукция КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура,
	|	ВТ.Характеристика,
	|	ВТ.Количество,
	|	ВТ.КоличествоУпаковок,
	|	ВТ.Упаковка,
	|	ВТ.КодСтроки,
	|	ВТ.КодСтрокиПродукция
	|ПОМЕСТИТЬ ВтМатериалы
	|
	|ИЗ
	|	&Материалы КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Номенклатура,
	|	ВТ.Характеристика,
	|	ВТ.Количество,
	|	ВТ.Упаковка,
	|	ВТ.КодСтрокиПродукция,
	|	ВТ.ТипНоменклатуры
	|ПОМЕСТИТЬ ВтСпецификации
	|
	|ИЗ
	|	&МатериалыПоСпецификации КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МатериалыДок.КодСтрокиПродукция,	МатериалыСпец.КодСтрокиПродукция)	КАК КодСтрокиПродукция,
	|	ЕСТЬNULL(МатериалыДок.Номенклатура,			МатериалыСпец.Номенклатура)			КАК Номенклатура,
	|	ЕСТЬNULL(МатериалыДок.Характеристика,		МатериалыСпец.Характеристика)		КАК Характеристика,
	|	ЕСТЬNULL(МатериалыДок.Упаковка,				МатериалыСпец.Упаковка)				КАК Упаковка,
	|
	|	ЕСТЬNULL(МатериалыДок.КодСтроки, 			0) КАК КодСтроки,
	|	ЕСТЬNULL(МатериалыДок.КоличествоУпаковок,	0) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(МатериалыДок.Количество,			0) КАК Количество,
	|	ЕСТЬNULL(МатериалыСпец.Количество,			0) КАК КоличествоПлан
	|
	|ПОМЕСТИТЬ ВтРаспределенныеМатериалы
	|
	|ИЗ
	|	ВтМатериалы КАК МатериалыДок
	|
	|	ПОЛНОЕ СОЕДИНЕНИЕ
	|		ВтСпецификации КАК МатериалыСпец
	|	ПО
	|		МатериалыДок.КодСтрокиПродукция	= МатериалыСпец.КодСтрокиПродукция
	|		И МатериалыДок.Номенклатура		= МатериалыСпец.Номенклатура
	|		И МатериалыДок.Характеристика	= МатериалыСпец.Характеристика
	|ГДЕ
	|	МатериалыСпец.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Материалы.КодСтрокиПродукция			КАК КодСтрокиПродукция,
	|	Материалы.Номенклатура					КАК Номенклатура,
	|	Материалы.Характеристика				КАК Характеристика,
	|	Материалы.Упаковка						КАК Упаковка,
	|	Материалы.КодСтроки						КАК КодСтроки,
	|	Материалы.Количество					КАК Количество,
	|	Материалы.КоличествоУпаковок			КАК КоличествоУпаковок,
	|	Материалы.КоличествоПлан				КАК КоличествоПлан,
	|	Продукция.ХарактеристикиИспользуются	КАК ПродукцияХарактеристикиИспользуются,
	|	Продукция.Номенклатура					КАК ПродукцияНоменклатура,
	|	Продукция.Характеристика				КАК ПродукцияХарактеристика,
	|	Продукция.Спецификация					КАК ПродукцияСпецификация
	|
	|ИЗ
	|	ВтРаспределенныеМатериалы КАК Материалы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтПродукция КАК Продукция
	|	ПО
	|		Материалы.КодСтрокиПродукция = Продукция.КодСтроки
	|
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(КоличествоУпаковок),
	|	МАКСИМУМ(КоличествоПлан)
	|ПО
	|	Номенклатура,
	|	Характеристика,
	|	КодСтрокиПродукция
	|";
#КонецОбласти
	
	Запрос.УстановитьПараметр("МатериалыПоСпецификации", МатериалыПоСпецификации);
	Запрос.УстановитьПараметр("Продукция", Продукция.Выгрузить());
	Запрос.УстановитьПараметр("Материалы", ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище.Материалы));
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПоНоменклатуре = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ВыборкаПоХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоХарактеристике.Следующий() Цикл
			ВыборкаПоКодуСтрокиПродукции = ВыборкаПоХарактеристике.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоКодуСтрокиПродукции.Следующий() Цикл
				ДетальнаяВыборкаПоМатериалам = ВыборкаПоКодуСтрокиПродукции.Выбрать();
				
				КоличествоПоСпецификации = ВыборкаПоКодуСтрокиПродукции.КоличествоПлан;
				ВсегоЗаписей = ДетальнаяВыборкаПоМатериалам.Количество();
				ТекущаяЗапись = 1;
				
				// По одному и тому же материалу могут быть указаны разные строки
				Пока ДетальнаяВыборкаПоМатериалам.Следующий() Цикл
					
					КоличествоВДокументе = ДетальнаяВыборкаПоМатериалам.Количество;
					
					НоваяСтрока = РаспределенныеМатериалы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальнаяВыборкаПоМатериалам);
					
					// Требуется по спецификации
					Если КоличествоВДокументе = 0 Или ВсегоЗаписей = ТекущаяЗапись Тогда
						НоваяСтрока.КоличествоПлан = КоличествоПоСпецификации;
					Иначе 
						НоваяСтрока.КоличествоПлан = Мин(КоличествоПоСпецификации, КоличествоВДокументе);
					КонецЕсли;
					
					// Указано в документе
					НоваяСтрока.Количество = КоличествоВДокументе;
					
					// Заполним признак характеристики используются для материалов
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрока.Характеристика);
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
					
					// Признак характеристики используются для продукции
					Если ДетальнаяВыборкаПоМатериалам.ПродукцияХарактеристикиИспользуются = Ложь Тогда
						НоваяСтрока.ПродукцияХарактеристика = НСтр("ru='<характеристики не используются>';uk='<характеристики не використовуються>'");
					КонецЕсли;
					
					// Пустая спецификация
					Если  Не ДетальнаяВыборкаПоМатериалам.ПродукцияСпецификация = NULL
						И Не ЗначениеЗаполнено(ДетальнаяВыборкаПоМатериалам.ПродукцияСпецификация) Тогда
						НоваяСтрока.ПродукцияСпецификация = НСтр("ru='<не указана>';uk='<не зазначена>'");
					КонецЕсли;
					
					КоличествоПоСпецификации = КоличествоПоСпецификации - НоваяСтрока.КоличествоПлан;
					ТекущаяЗапись = ТекущаяЗапись + 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РаспределенныеМатериалы.Сортировать("КодСтрокиПродукция, Номенклатура, Характеристика");
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Товары = РаспределенныеМатериалы.Выгрузить();
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокОтбораПродукции()
	
	СписокВыбора = Элементы.ОтборПоПродукции.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(Параметры.СписокВыбораПродукции);
	СписокВыбора.Вставить(0, -1, НСтр("ru='все материалы';uk='всі матеріали'"));
	СписокВыбора.Вставить(1,  0, НСтр("ru='материалы без связи с продукцией';uk='матеріали без зв''язку з продукцією'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеПродукцииПоКоду(Продукция, КодСтроки, ДанныеПродукции)
	
	СтрокиПродукции = Продукция.НайтиСтроки(Новый Структура("КодСтроки", КодСтроки));
	Если СтрокиПродукции.Количество() = 0 Тогда
		ДанныеПродукции = Неопределено;
		Возврат Ложь;
	Иначе
		ДанныеПродукции = СтрокиПродукции[0];
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Конецобласти

#КонецОбласти
