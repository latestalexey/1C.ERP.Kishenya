
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("ОтборПоСпискуЗаказов") Тогда
		ОтборПоСпискуЗаказов(Параметры.ОтборПоСпискуЗаказов);
	ИначеЕсли Параметры.Свойство("ОтборПоСпискуПродукции") Тогда
		ОтборПоСпискуПродукции(Параметры.ОтборПоСпискуПродукции);
	ИначеЕсли Параметры.Свойство("ОтборПоСпискуЭтаповГрафика") Тогда
		ОтборПоСпискуЭтаповГрафика(Параметры.ОтборПоСпискуЭтаповГрафика);
	ИначеЕсли Параметры.Свойство("ОтборПоСпискуЭтапов") Тогда
		ОтборПоСпискуЭтапов(Параметры.ОтборПоСпискуЭтапов);
	КонецЕсли; 
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДата()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СписокРабочихЦентров", Новый Массив);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЕстьОтборПоРабочемуЦентру", Ложь);
	
	Если Параметры.Свойство("Подразделение", Подразделение) Тогда
		УстановитьОтборПоПодразделению();
	КонецЕсли; 
	
	ОпределитьУправлениеМаршрутнымиЛистами();
	
	Если Параметры.Свойство("РабочийЦентр", ОтборРабочийЦентр) Тогда
		УстановитьОтборПоРабочемуЦентру();
	КонецЕсли; 
	
	Если Параметры.Свойство("Статус", Статус) Тогда
		УстановитьОтборПоСтатусу();
	КонецЕсли; 
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.ДиспетчерОтбор.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.МаршрутныйЛистПроизводства));
		
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
		
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.Свойство("НеЗагружатьОтборы") Тогда
		Настройки.Удалить("Подразделение");
		Настройки.Удалить("ОтборРабочийЦентр");
		Настройки.Удалить("Статус");
	КонецЕсли; 
	
	Если Параметры.Свойство("Подразделение") Тогда
		Настройки.Вставить("Подразделение", Параметры.Подразделение);
	КонецЕсли;
	Если Параметры.Свойство("РабочийЦентр") Тогда
		Настройки.Вставить("ОтборРабочийЦентр", Параметры.РабочийЦентр);
	КонецЕсли; 
	Если Параметры.Свойство("Статус") Тогда
		Настройки.Вставить("Статус", Параметры.Статус);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОпределитьУправлениеМаршрутнымиЛистами();
	
	УстановитьОтборПоДиспетчеру();
	УстановитьОтборПоСтатусу();
	УстановитьОтборПоПодразделению();
	УстановитьОтборПоРабочемуЦентру();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусОтборПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОтборПриИзменении(Элемент)
	
	УстановитьОтборПоПодразделению();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ДиспетчерОтборПриИзменении(Элемент)
	
	УстановитьОтборПоДиспетчеру();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРабочийЦентрПриИзменении(Элемент)
	
	УстановитьОтборПоРабочемуЦентру();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	Если Параметры.Свойство("ОтборПоСпискуЗаказов")
		ИЛИ Параметры.Свойство("ОтборПоСпискуПродукции")
		ИЛИ Параметры.Свойство("ОтборПоСпискуЭтапов")
		ИЛИ Параметры.Свойство("ОтборПоСпискуЭтаповГрафика") Тогда
		
		ОчиститьПользовательскиеОтборы(Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура КомандаУстановитьСтатусСоздан(Команда)
	
	УстановитьСтатус("Создан", НСтр("ru='Создан';uk='Створено'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусКВыполнению(Команда)
	
	УстановитьСтатус("КВыполнению", НСтр("ru='К выполнению';uk='До виконання'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВыполняется(Команда)
	
	УстановитьСтатус("Выполняется", НСтр("ru='Выполняется';uk='Виконується'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусВыполнен(Команда)
	
	УстановитьСтатус("Выполнен", НСтр("ru='Выполнен';uk='Виконаний'"));
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	

	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");


КонецПроцедуры

#Область Отборы

&НаСервере
Процедура УстановитьОтборПоСтатусу()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"Статус", 
		Статус, 
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДиспетчеру()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"Диспетчер", 
		Диспетчер, 
		ВидСравненияКомпоновкиДанных.Равно,
		, // Представление - автоматически
		ЗначениеЗаполнено(Диспетчер));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПодразделению()

	ОпределитьУправлениеМаршрутнымиЛистами();
	УстановитьОтборПоРабочемуЦентру();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, 
		"Подразделение", 
		Подразделение, 
		ВидСравненияКомпоновкиДанных.ВИерархии,
		, // Представление - автоматически
		ЗначениеЗаполнено(Подразделение));

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРабочемуЦентру()

	// Определим рабочие центры, которые относятся к выбранному РЦ
	Если НЕ ОтборРабочийЦентр.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РабочиеЦентры.Ссылка
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	РабочиеЦентры.Ссылка В ИЕРАРХИИ(&РабочийЦентр)";
		Запрос.УстановитьПараметр("РабочийЦентр", ОтборРабочийЦентр);
		
		СписокРабочихЦентров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		СписокРабочихЦентров = Новый Массив;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СписокРабочихЦентров", СписокРабочихЦентров);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЕстьОтборПоРабочемуЦентру", НЕ ОтборРабочийЦентр.Пустая());

КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.МаршрутныйЛистПроизводства.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

&НаКлиенте
Процедура УстановитьСтатус(ЗначениеСтатуса, ПредставлениеСтатуса)

	ВыделенныеСсылки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЗначениеСтатуса",      ЗначениеСтатуса);
	ДополнительныеПараметры.Вставить("ПредставлениеСтатуса", ПредставлениеСтатуса);
	ДополнительныеПараметры.Вставить("ВыделенныеСсылки",     ВыделенныеСсылки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУстановитьСтатус", ЭтаФорма, ДополнительныеПараметры);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='У выделенных в списке документов будет установлен статус ""%1"". Продолжить?';uk='У виділених в списку документів буде встановлено статус ""%1"". Продовжити?'"), ПредставлениеСтатуса);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросУстановитьСтатус(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(
										ДополнительныеПараметры.ВыделенныеСсылки, 
										ДополнительныеПараметры.ЗначениеСтатуса);
										
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
			Элементы.Список, 
			КоличествоОбработанных, 
			ДополнительныеПараметры.ВыделенныеСсылки.Количество(), 
			ДополнительныеПараметры.ПредставлениеСтатуса);

КонецПроцедуры

&НаСервере
Процедура ОпределитьУправлениеМаршрутнымиЛистами()

	Если НЕ Подразделение.Пустая() Тогда
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
		УправлениеМаршрутнымиЛистами = ПараметрыПодразделения.УправлениеМаршрутнымиЛистами;
	Иначе
		УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПустаяСсылка();
		ОтборРабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
	КонецЕсли;

	ВидимостьОтбораПоРЦ = (НЕ Подразделение.Пустая());
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтборРабочийЦентр", "Видимость", ВидимостьОтбораПоРЦ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "УправлениеМаршрутнымиЛистами", УправлениеМаршрутнымиЛистами);
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуЗаказов(СписокЗаказов)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Распоряжение", СписокЗаказов);

	Заголовок = НСтр("ru='Маршрутные листы производства (установлен отбор по заказам)';uk='Маршрутні листи виробництва (встановлений відбір по замовленнях)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуПродукции(СписокПродукции)

	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаПродукции.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	Для каждого ДанныеПродукции Из СписокПродукции Цикл
		СтрокаПродукции = ТаблицаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПродукции, ДанныеПродукции);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПродукции.Заказ КАК Заказ,
	|	ТаблицаПродукции.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТаблицаПродукции
	|ИЗ
	|	&ТаблицаПродукции КАК ТаблицаПродукции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистПроизводства.Ссылка
	|ИЗ
	|	ТаблицаПродукции КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Распоряжение = ТаблицаПродукции.Заказ)
	|			И (МаршрутныйЛистПроизводства.КодСтроки = ТаблицаПродукции.КодСтроки)";
	
	Запрос.УстановитьПараметр("ТаблицаПродукции", ТаблицаПродукции);
	
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);

	Заголовок = НСтр("ru='Маршрутные листы производства (установлен отбор по продукции)';uk='Маршрутні листи виробництва (встановлений відбір за продукцією)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуЭтаповГрафика(СписокЭтапов)

	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиПродукция", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиЭтапыГрафик", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	Для каждого ДанныеЭтапа Из СписокЭтапов Цикл
		СтрокаЭтап = ТаблицаЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ДанныеЭтапа);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Заказ КАК Заказ,
	|	ТаблицаЭтапов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаЭтапов.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	&ТаблицаЭтапов КАК ТаблицаЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистПроизводства.Ссылка
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Распоряжение = ТаблицаЭтапов.Заказ)
	|			И (МаршрутныйЛистПроизводства.КодСтроки = ТаблицаЭтапов.КодСтрокиПродукция)
	|			И (МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик = ТаблицаЭтапов.КодСтрокиЭтапыГрафик)";
	
	Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭтапов);
	
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);

	Заголовок = НСтр("ru='Маршрутные листы производства (установлен отбор по этапам)';uk='Маршрутні листи виробництва (встановлений відбір за етапами)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоСпискуЭтапов(СписокЭтапов)

	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ТаблицаЭтапов.Колонки.Добавить("КодСтрокиПродукция", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаЭтапов.Колонки.Добавить("Этап", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	Для каждого ДанныеЭтапа Из СписокЭтапов Цикл
		СтрокаЭтап = ТаблицаЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ДанныеЭтапа);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЭтапов.Заказ КАК Заказ,
	|	ТаблицаЭтапов.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	ТаблицаЭтапов.Этап КАК Этап
	|ПОМЕСТИТЬ ТаблицаЭтапов
	|ИЗ
	|	&ТаблицаЭтапов КАК ТаблицаЭтапов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистПроизводства.Ссылка
	|ИЗ
	|	ТаблицаЭтапов КАК ТаблицаЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
	|		ПО (МаршрутныйЛистПроизводства.Распоряжение = ТаблицаЭтапов.Заказ)
	|			И (МаршрутныйЛистПроизводства.КодСтроки = ТаблицаЭтапов.КодСтрокиПродукция)
	|			И (МаршрутныйЛистПроизводства.Этап = ТаблицаЭтапов.Этап)";
	
	Запрос.УстановитьПараметр("ТаблицаЭтапов", ТаблицаЭтапов);
	
	СписокДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СписокДокументов);

	Заголовок = НСтр("ru='Маршрутные листы производства (установлен отбор по этапам)';uk='Маршрутні листи виробництва (встановлений відбір за етапами)'");
	АвтоЗаголовок = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьПользовательскиеОтборы(Настройки)
	
	Для Каждого ЭлементКоллекции Из Настройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ОтборКомпоновкиДанных") Тогда
			ЭлементКоллекции.Элементы.Очистить();
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
