#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "Сотрудники.ФизическоеЛицо");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтпускаСотрудников", Сотрудники.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтпускаСотрудниковСотрудники.Сотрудник,
		|	ОтпускаСотрудниковСотрудники.ВидОтпуска,
		|	ОтпускаСотрудниковСотрудники.НомерСтроки,
		|	ОтпускаСотрудниковСотрудники.ДатаНачала,
		|	ОтпускаСотрудниковСотрудники.ДатаОкончания
		|ПОМЕСТИТЬ ВТОтпускаСотрудников
		|ИЗ
		|	&ОтпускаСотрудников КАК ОтпускаСотрудниковСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаСотрудников.Сотрудник,
		|	ОтпускаСотрудников.НомерСтроки
		|ПОМЕСТИТЬ ВТСтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска
		|ИЗ
		|	ВТОтпускаСотрудников КАК ОтпускаСотрудников
		|ГДЕ
		|	ОтпускаСотрудников.ДатаНачала > ОтпускаСотрудников.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтпускаСотрудников.Сотрудник,
		|	МАКСИМУМ(ОтпускаСотрудниковДругие.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТПересекаютсяПериодыОтпусков
		|ИЗ
		|	ВТОтпускаСотрудников КАК ОтпускаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтпускаСотрудников КАК ОтпускаСотрудниковДругие
		|		ПО ОтпускаСотрудников.Сотрудник = ОтпускаСотрудниковДругие.Сотрудник
		|			И ОтпускаСотрудников.НомерСтроки <> ОтпускаСотрудниковДругие.НомерСтроки
		|			И ОтпускаСотрудников.ДатаОкончания >= ОтпускаСотрудниковДругие.ДатаНачала
		|			И ОтпускаСотрудников.ДатаОкончания <= ОтпускаСотрудниковДругие.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускаСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересекаютсяПериодыОтпусков.Сотрудник,
		|	ПересекаютсяПериодыОтпусков.НомерСтроки КАК НомерСтроки,
		|	ОтпускаСотрудников.ВидОтпуска КАК ВидОтпуска,
		|	ИСТИНА КАК ПересекаютсяПериоды,
		|	ЛОЖЬ КАК НекорректныйПериодПредоставления
		|ПОМЕСТИТЬ ВТСводный
		|ИЗ
		|	ВТПересекаютсяПериодыОтпусков КАК ПересекаютсяПериодыОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО ПересекаютсяПериодыОтпусков.НомерСтроки = ОтпускаСотрудников.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска.Сотрудник,
		|	СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска.НомерСтроки,
		|	ОтпускаСотрудников.ВидОтпуска,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ВТСтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска КАК СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтпускаСотрудников КАК ОтпускаСотрудников
		|		ПО СтрокиСНекорректноЗаполненнымПериодомПредоставленияОтпуска.НомерСтроки = ОтпускаСотрудников.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сводный.Сотрудник,
		|	Сводный.НомерСтроки КАК НомерСтроки,
		|	Сводный.ВидОтпуска,
		|	МАКСИМУМ(Сводный.ПересекаютсяПериоды) КАК ПересекаютсяПериоды,
		|	МАКСИМУМ(Сводный.НекорректныйПериодПредоставления) КАК НекорректныйПериодПредоставления
		|ИЗ
		|	ВТСводный КАК Сводный
		|
		|СГРУППИРОВАТЬ ПО
		|	Сводный.Сотрудник,
		|	Сводный.НомерСтроки,
		|	Сводный.ВидОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = "";
			
			Если Выборка.НекорректныйПериодПредоставления Тогда
				ТекстСообщения = ?(ПустаяСтрока(ТекстСообщения), "", ТекстСообщения +", ")
					+ НСтр("ru='некорректно задан период предоставления отпуска';uk='некоректно поставлене період надання відпустки'");
			КонецЕсли; 
			
			Если Выборка.ПересекаютсяПериоды Тогда
				ТекстСообщения = ?(ПустаяСтрока(ТекстСообщения), "", ТекстСообщения +", ")
					+ НСтр("ru='пересекается период нахождения в отпуске';uk='перетинається період знаходження у відпустці'");
			КонецЕсли; 
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1:';uk='По співробітнику %1:'"),
				Выборка.Сотрудник)
				+ " " + ТекстСообщения;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				"Сотрудники[" + (Выборка.НомерСтроки - 1) + "].Сотрудник",
				"Объект",
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Документы.ГрафикОтпусков.ПроверитьРаботающих(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	ОтменитьЗапланированныеОтпуска();
	ЗарегистрироватьЗапланированныеОтпуска();
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ОтменитьЗапланированныеОтпуска();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаСобытия = Дата;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтменитьЗапланированныеОтпуска()

	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеЕжегодныеОтпуска.Сотрудник,
	|	ПлановыеЕжегодныеОтпуска.ДатаНачала
	|ИЗ
	|	РегистрСведений.ПлановыеЕжегодныеОтпуска КАК ПлановыеЕжегодныеОтпуска
	|ГДЕ
	|	ПлановыеЕжегодныеОтпуска.ДокументПланирования = &ДокументПланирования";
	Запрос.УстановитьПараметр("ДокументПланирования", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПлановыеЕжегодныеОтпуска.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗарегистрироватьЗапланированныеОтпуска()
	
	Для каждого СтрокаТЧ Из Сотрудники Цикл
		
		НаборЗаписей = РегистрыСведений.ПлановыеЕжегодныеОтпуска.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаТЧ.Сотрудник);
		НаборЗаписей.Отбор.ДатаНачала.Установить(СтрокаТЧ.ДатаНачала);
		
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЧ);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Запланирован = Истина;
		НоваяСтрока.ДокументПланирования = Ссылка;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#КонецЕсли
