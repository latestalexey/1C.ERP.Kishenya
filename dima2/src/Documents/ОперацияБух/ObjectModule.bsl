#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.ОперацияБух") Тогда
		Возврат;
	КонецЕсли;

	Организация = ОбъектКопирования.Организация;
	Комментарий = ОбъектКопирования.Комментарий;
	Содержание  = ОбъектКопирования.Содержание;
	
	Для каждого Набор Из ОбъектКопирования.Движения Цикл
		//++ НЕ УТКА
		Если ТипЗнч(Набор) = Тип("РегистрСведенийНаборЗаписей.ОтражениеДокументовВМеждународномУчете")
			 ИЛИ ТипЗнч(Набор) = Тип("РегистрБухгалтерииНаборЗаписей.Международный") Тогда
			Продолжить;
		КонецЕсли;
		//-- НЕ УТКА
		
		Набор.Прочитать();
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборИмяМетаданного  = Набор.Метаданные().Имя;
		НаборТекущегоОбъекта = Движения[НаборИмяМетаданного];
		Если Метаданные.РегистрыБухгалтерии.Найти(НаборИмяМетаданного) <> Неопределено Тогда
			Для каждого ЗаписьНабора Из Набор Цикл
				
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,
					"Период,Регистратор,СубконтоДт,СубконтоКт");
				
				Для каждого Субконто Из ЗаписьНабора.СубконтоДт Цикл
					НоваяЗапись.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;

				Для каждого Субконто Из ЗаписьНабора.СубконтоКт Цикл
					НоваяЗапись.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			Для каждого ЗаписьНабора Из Набор Цикл
			
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				Если Метаданные.РегистрыНакопления.Найти(НаборИмяМетаданного) <> Неопределено Тогда
					Если НаборТекущегоОбъекта.Метаданные().ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
						НоваяЗапись.ВидДвижения = ЗаписьНабора.ВидДвижения;
					КонецЕсли;
				КонецЕсли;
				НоваяЗапись.Период = ТекущаяДата();
				
				Если Метаданные.РегистрыНакопления.Найти(НаборИмяМетаданного) <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,, "Период, Регистратор, ВидДвижения");
				Иначе
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,, "Период, Регистратор");
				КонецЕсли;
			
			КонецЦикла; 
		КонецЕсли;
		
		НоваяЗапись.Активность = Ложь;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяОрганизация",);
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
		МассивЗаполнения = ДанныеЗаполнения;
	Иначе
		МассивЗаполнения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения);
	КонецЕсли;
	
	Для каждого ДокументЗаполнения из МассивЗаполнения Цикл
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТипЗнч(ДокументЗаполнения));
		Если Метаданные.Документы.Найти(МетаданныеОснования.Имя) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументЗаполнения,,"Дата,Номер,Проведен");
			НачалоСодержания = ?(Содержание = "", НСтр("ru='КОРРЕКТИРОВКА: ';uk='КОРИГУВАННЯ: '"), Содержание + ", ");
			Комментарий = "";
			Содержание = НачалоСодержания + Строка(ДокументЗаполнения);
			НоваяСтрока = ЗаполнениеДвижений.Добавить();
			НоваяСтрока.Документ = ДокументЗаполнения;			
		КонецЕсли;
	КонецЦикла;
	
	Ответственный = Пользователи.ТекущийПользователь();
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	//++ НЕ УТКА
	Движения.Международный.Записывать = Ложь;
	Движения.ОтражениеДокументовВМеждународномУчете.Записывать = Ложь;
	ЗарегистрироватьДокументКОтражениюВУчете();
	//-- НЕ УТКА
	
	// Заполнение реквизитов регистров Период и Организация
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПустаяТаблица   = НаборЗаписей.ВыгрузитьКолонки();
		ЕстьОрганизация = ПустаяТаблица.Колонки.Найти("Организация") <> Неопределено;
		ЕстьПериод      = ПустаяТаблица.Колонки.Найти("Период") <> Неопределено;
		
		Если НЕ (ЕстьОрганизация ИЛИ ЕстьПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДвижений = НаборЗаписей.Выгрузить();
		Если ЕстьОрганизация Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		КонецЕсли;
		Если ЕстьПериод Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
		КонецЕсли;
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		
		// Актуализируем списки регистров
		ИмяРегистра = НаборЗаписей.Метаданные().Имя;
		Если Метаданные.РегистрыНакопления.Содержит(НаборЗаписей.Метаданные()) Тогда
			ДобавитьРегистрНакопления(ИмяРегистра);
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(НаборЗаписей.Метаданные()) Тогда
			ДобавитьРегистрСведений(ИмяРегистра);
		КонецЕсли;
	
	КонецЦикла;
	
	УстановитьАктивностьДвижений(РежимЗаписи);
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает/снимает признак активности движений документа в зависимости от проведения документа.
// Следует вызывать перед записью документа.
Процедура УстановитьАктивностьДвижений(РежимЗаписи)
	
	Активность = РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.Запись И Проведен;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Движение Из Движения Цикл
		
		Если Движение.Записывать = Ложь Тогда // При работе формы набор может быть уже "потроган" (прочитан, модифицирован)
			// Набор никто не трогал
			Движение.Прочитать();
		КонецЕсли;
		
		Для Каждого Строка Из Движение Цикл
			
			Если Строка.Активность = Активность Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.Активность   = Активность;
			Движение.Записывать = Истина; // На случай, если набор был прочитан выше
			
		КонецЦикла;
		
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Движение.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРегистрНакопления(ИмяРегистра)
	
	Если ТаблицаРегистровНакопления.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровНакопления.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРегистрСведений(ИмяРегистра)
	
	Если ТаблицаРегистровСведений.Найти(ИмяРегистра, "Имя") = Неопределено Тогда
		ТаблицаРегистровСведений.Добавить().Имя = ИмяРегистра;
	КонецЕсли;
	
КонецПроцедуры
//++ НЕ УТКА
Процедура ЗарегистрироватьДокументКОтражениюВУчете()
	
	// Регистрация в регламентированном учете:
	Движения.ОтражениеДокументовВРеглУчете.Очистить();
	Если Не ПометкаУдаления Тогда
		Движения.ОтражениеДокументовВРеглУчете.Записывать = Истина;
		НоваяЗапись = Движения.ОтражениеДокументовВРеглУчете.Добавить();
		НоваяЗапись.Статус = Перечисления.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		// на случай если раньше документ записывался при включенной опции и в регистре осталась запись
		Движения.ОтражениеДокументовВМеждународномУчете.Очистить();
		Движения.ОтражениеДокументовВМеждународномУчете.Записывать = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДвиженияХозрасчетный.Период,
	|	ДвиженияХозрасчетный.СчетДт,
	|	ДвиженияХозрасчетный.СубконтоДт1,
	|	ДвиженияХозрасчетный.СубконтоДт2,
	|	ДвиженияХозрасчетный.СубконтоДт3,
	|	ДвиженияХозрасчетный.СчетКт,
	|	ДвиженияХозрасчетный.СубконтоКт1,
	|	ДвиженияХозрасчетный.СубконтоКт2,
	|	ДвиженияХозрасчетный.СубконтоКт3,
	|	ДвиженияХозрасчетный.Организация,
	|	ДвиженияХозрасчетный.ПодразделениеДт,
	|	ДвиженияХозрасчетный.ПодразделениеКт,
	|	ДвиженияХозрасчетный.ВалютаДт,
	|	ДвиженияХозрасчетный.ВалютаКт,
	|	ДвиженияХозрасчетный.Сумма,
	|	ДвиженияХозрасчетный.ВалютнаяСуммаДт,
	|	ДвиженияХозрасчетный.ВалютнаяСуммаКт
	|ПОМЕСТИТЬ ДвиженияХозрасчетный
	|ИЗ
	|	&ДвиженияХозрасчетный КАК ДвиженияХозрасчетный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.СчетДт,
	|	ВложенныйЗапрос.СубконтоДт1,
	|	ВложенныйЗапрос.СубконтоДт2,
	|	ВложенныйЗапрос.СубконтоДт3,
	|	ВложенныйЗапрос.СчетКт,
	|	ВложенныйЗапрос.СубконтоКт1,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.ПодразделениеДт,
	|	ВложенныйЗапрос.ПодразделениеКт,
	|	ВложенныйЗапрос.ВалютаДт,
	|	ВложенныйЗапрос.ВалютаКт,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.ВалютнаяСуммаДт) КАК ВалютнаяСуммаДт,
	|	СУММА(ВложенныйЗапрос.ВалютнаяСуммаКт) КАК ВалютнаяСуммаКт
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДвиженияССубконто.Период КАК Период,
	|		ДвиженияССубконто.СчетДт КАК СчетДт,
	|		ЕСТЬNULL(ДвиженияССубконто.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|		ЕСТЬNULL(ДвиженияССубконто.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|		ЕСТЬNULL(ДвиженияССубконто.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|		ДвиженияССубконто.СчетКт КАК СчетКт,
	|		ЕСТЬNULL(ДвиженияССубконто.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|		ЕСТЬNULL(ДвиженияССубконто.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|		ЕСТЬNULL(ДвиженияССубконто.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|		ДвиженияССубконто.Организация КАК Организация,
	|		ЕСТЬNULL(ДвиженияССубконто.ПодразделениеДт, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеДт,
	|		ЕСТЬNULL(ДвиженияССубконто.ПодразделениеКт, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеКт,
	|		ЕСТЬNULL(ДвиженияССубконто.ВалютаДт, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаДт,
	|		ЕСТЬNULL(ДвиженияССубконто.ВалютаКт, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаКт,
	|		ДвиженияССубконто.Сумма КАК Сумма,
	|		ЕСТЬNULL(ДвиженияССубконто.ВалютнаяСуммаДт, 0) КАК ВалютнаяСуммаДт,
	|		ЕСТЬNULL(ДвиженияССубконто.ВалютнаяСуммаКт, 0) КАК ВалютнаяСуммаКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &Регистратор, , ) КАК ДвиженияССубконто
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияХозрасчетный.Период,
	|		ДвиженияХозрасчетный.СчетДт,
	|		ДвиженияХозрасчетный.СубконтоДт1,
	|		ДвиженияХозрасчетный.СубконтоДт2,
	|		ДвиженияХозрасчетный.СубконтоДт3,
	|		ДвиженияХозрасчетный.СчетКт,
	|		ДвиженияХозрасчетный.СубконтоКт1,
	|		ДвиженияХозрасчетный.СубконтоКт2,
	|		ДвиженияХозрасчетный.СубконтоКт3,
	|		ДвиженияХозрасчетный.Организация,
	|		ДвиженияХозрасчетный.ПодразделениеДт,
	|		ДвиженияХозрасчетный.ПодразделениеКт,
	|		ДвиженияХозрасчетный.ВалютаДт,
	|		ДвиженияХозрасчетный.ВалютаКт,
	|		-ДвиженияХозрасчетный.Сумма,
	|		-ДвиженияХозрасчетный.ВалютнаяСуммаДт,
	|		-ДвиженияХозрасчетный.ВалютнаяСуммаКт
	|	ИЗ
	|		ДвиженияХозрасчетный КАК ДвиженияХозрасчетный) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.СчетДт,
	|	ВложенныйЗапрос.СубконтоДт1,
	|	ВложенныйЗапрос.СубконтоДт2,
	|	ВложенныйЗапрос.СубконтоДт3,
	|	ВложенныйЗапрос.СчетКт,
	|	ВложенныйЗапрос.СубконтоКт1,
	|	ВложенныйЗапрос.СубконтоКт2,
	|	ВложенныйЗапрос.СубконтоКт3,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.ПодразделениеДт,
	|	ВложенныйЗапрос.ПодразделениеКт,
	|	ВложенныйЗапрос.ВалютаДт,
	|	ВложенныйЗапрос.ВалютаКт
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВложенныйЗапрос.Сумма) <> 0
	|		ИЛИ СУММА(ВложенныйЗапрос.ВалютнаяСуммаДт) <> 0
	|		ИЛИ СУММА(ВложенныйЗапрос.ВалютнаяСуммаКт) <> 0)";
	
	Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДвиженияХозрасчетный", Движения.Хозрасчетный.Выгрузить());
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		// Регистрация в международном учете:
		Движения.ОтражениеДокументовВМеждународномУчете.Очистить();
		Движения.ОтражениеДокументовВМеждународномУчете.Записывать = Истина;
		НоваяЗапись = Движения.ОтражениеДокументовВМеждународномУчете.Добавить();
		НоваяЗапись.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете;
	КонецЕсли;
		
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

#КонецЕсли
