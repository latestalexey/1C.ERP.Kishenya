

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	ЗаполнитьТекущиеЗначенияРеквизитов();
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(
		Объект.ОтражениеАмортизационныхРасходов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.НематериальныеАктивы.Форма.ФормаВыбора" Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			Объект.НМА.Добавить().НематериальныйАктив = ЭлементМассива;
		КонецЦикла;
		ЗаполнитьТекущиеЗначенияРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы


&НаКлиенте
Процедура ОтражениеАмортизационныхРасходовФлагПриИзменении(Элемент)
	
	Элементы.ОтражениеАмортизационныхРасходов.ТолькоПросмотр = Не Объект.ОтражениеАмортизационныхРасходовФлаг;
	Элементы.НМАОтражениеАмортизационныхРасходов.Видимость = Объект.ОтражениеАмортизационныхРасходовФлаг;
	
	Элементы.ОтражениеАмортизационныхРасходов.ЦветФона = ?(Объект.ОтражениеАмортизационныхРасходовФлаг, ЦветФонаПоля, ЦветФонаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьДоступностьПередачиАмортизационныхРасходов();
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетУчетаФлагПриИзменении(Элемент)
	
	ФлагПриИзменении(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУФлагПриИзменении(Элемент)
	
	ФлагПриИзменении(Элемент.Имя);
	
	Элементы.НМАСрокИспользованияБУ.Видимость = Объект.СрокИспользованияБУФлаг;
	
	Элементы.СрокИспользованияБУРасшифровка.Видимость = Объект.СрокИспользованияБУФлаг;
	
	Если Не Объект.СрокИспользованияБУФлаг Тогда
		СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияБУ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъемНаработкиБУФлагПриИзменении(Элемент)
	
	ФлагПриИзменении(Элемент.Имя);
	
	Элементы.НМАОбъемНаработкиБУ.Видимость = Объект.ОбъемНаработкиБУФлаг;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУФлагПриИзменении(Элемент)
	
	ФлагПриИзменении(Элемент.Имя);
	
	Элементы.НМАСрокИспользованияНУ.Видимость = Объект.СрокИспользованияНУФлаг;
	
	Элементы.СрокИспользованияНУРасшифровка.Видимость = Объект.СрокИспользованияНУФлаг;
	
	Если Не Объект.СрокИспользованияНУФлаг Тогда
		СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияНУ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУФлагПриИзменении(Элемент)
	
	ФлагПриИзменении(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииНУФлагПриИзменении(Элемент)
	
	ФлагПриИзменении(Элемент.Имя);
	
	Элементы.НМАСпособНачисленияАмортизацииНУ.Видимость = Объект.СпособНачисленияАмортизацииНУФлаг;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиквидационнаяСтоимостьФлагПриИзменении(Элемент)
	
	ФлагПриИзменении(Элемент.Имя);
	Элементы.НМАЛиквидационнаяСтоимость.Видимость = Объект.ЛиквидационнаяСтоимостьФлаг;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьИзмененияОбъемаНаработки()
	Элементы.ОбъемНаработкиБУФлаг.Доступность = Объект.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции");
	Элементы.ОбъемНаработкиБУ.Доступность 	  = Объект.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции");
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУПриИзменении(Элемент)
	
	СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияБУ);
		
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУПриИзменении(Элемент)
	СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
		Объект.СрокИспользованияНУ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОтражениеРасходов

&НаКлиенте
Процедура ОтражениеАмортизационныхРасходовСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеАмортизационныхРасходов.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		ОтражениеАмортизационныхРасходовСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтражениеАмортизационныхРасходовСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.ОтражениеАмортизационныхРасходов.НайтиПоИдентификатору(
		Элементы.ОтражениеАмортизационныхРасходов.ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
		Объект,
		СтрокаТаблицы.СтатьяРасходов,
		СтрокаТаблицы.АналитикаРасходов);
		
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура ПодборНМА(Команда)
	
	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("БУСостояние", ПредопределенноеЗначение("Перечисление.ВидыСостоянийНМА.ПринятКУчету"));
	ПараметрыОтбор.Вставить("БУОрганизация", Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контекст", "БУ, МФУ");
	ПараметрыФормы.Вставить("ДатаСведений", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущийРегистратор", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбор);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.НематериальныеАктивы.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#Область ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		Новый Структура("ОтражениеАмортизационныхРасходов", "СтатьяРасходов, АналитикаРасходов"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ЦветФонаФормы = ЦветаСтиля.ЦветФонаФормы;
	ЦветФонаПоля = ЦветаСтиля.ЦветФонаПоля;
	
	
	ЗаполнитьТекущиеЗначенияРеквизитов(Истина);
	
	Элементы.ОтражениеАмортизационныхРасходов.ТолькоПросмотр = Не Объект.ОтражениеАмортизационныхРасходовФлаг;
	Элементы.НМАОтражениеАмортизационныхРасходов.Видимость = Объект.ОтражениеАмортизационныхРасходовФлаг;
	Элементы.ОтражениеАмортизационныхРасходов.ЦветФона = ?(Объект.ОтражениеАмортизационныхРасходовФлаг, ЦветФонаПоля, ЦветФонаФормы);
	
	Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСпособовАмортизации());
	Элементы.СпособНачисленияАмортизацииНУ.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСпособовАмортизации(Ложь));
	
	Элементы.НМАСчетУчета.Видимость	= Объект.СчетУчетаФлаг;
	Элементы.СчетУчета.Доступность	= Объект.СчетУчетаФлаг;
	
	
	
	Элементы.НМАСрокИспользованияБУ.Видимость = Объект.СрокИспользованияБУФлаг;
	Элементы.СрокИспользованияБУ.Доступность  = Объект.СрокИспользованияБУФлаг;
	Элементы.СрокИспользованияБУРасшифровка.Видимость = Объект.СрокИспользованияБУФлаг;
	
	Если Объект.СрокИспользованияБУФлаг Тогда
		СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияБУ);
	КонецЕсли; 
	
	Элементы.НМАОбъемНаработкиБУ.Видимость	= Объект.ОбъемНаработкиБУФлаг;
	Элементы.ОбъемНаработкиБУ.Доступность	= Объект.ОбъемНаработкиБУФлаг;
	
	Элементы.НМАСрокИспользованияНУ.Видимость = Объект.СрокИспользованияНУФлаг;
	Элементы.СрокИспользованияНУ.Доступность  = Объект.СрокИспользованияНУФлаг;
	Элементы.СрокИспользованияНУРасшифровка.Видимость = Объект.СрокИспользованияНУФлаг;
	
	Если Объект.СрокИспользованияНУФлаг Тогда
		СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(
			Объект.СрокИспользованияНУ);
	КонецЕсли; 
	
	Элементы.НМАСпособНачисленияАмортизацииБУ.Видимость = Объект.СпособНачисленияАмортизацииБУФлаг;
	Элементы.СпособНачисленияАмортизацииБУ.Доступность	= Объект.СпособНачисленияАмортизацииБУФлаг;
	
	Элементы.НМАСпособНачисленияАмортизацииНУ.Видимость = Объект.СпособНачисленияАмортизацииНУФлаг;
	Элементы.СпособНачисленияАмортизацииНУ.Доступность	= Объект.СпособНачисленияАмортизацииНУФлаг;
	
	Элементы.НМАЛиквидационнаяСтоимость.Видимость = Объект.ЛиквидационнаяСтоимостьФлаг;
	Элементы.ЛиквидационнаяСтоимость.Доступность  = Объект.ЛиквидационнаяСтоимостьФлаг;
	
	Элементы.ОбъемНаработкиБУФлаг.Доступность	= Объект.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции;
	
	 
	
	УстановитьДоступностьПередачиАмортизационныхРасходов();
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Организация));
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(
		Объект.ОтражениеАмортизационныхРасходов);
		
	
КонецПроцедуры
	
&НаСервере
Функция ПолучитьСписокСпособовАмортизации(СписокСпособовБУ=Истина) 
	
	СписокПеречисления = Новый Массив;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
	
	Если СписокСпособовБУ Тогда
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
	КонецЕсли; 		
				
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный);		
	
	Возврат СписокПеречисления;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьТекущиеЗначенияРеквизитов(ЗаполнитьДоступность=Ложь)
	
	Структура = СтруктураИзменяемыхРеквизитов();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеДокумента.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ДанныеДокумента.НематериальныйАктив КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	&ДанныеДокумента КАК ДанныеДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
		|	СчетаБухгалтерскогоУчетаНМА.СчетУчета КАК СчетУчета,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчет.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемНаработкиБУ,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчет.СрокПолезногоИспользования 	КАК СрокИспользованияБУ,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособНачисленияАмортизации	КАК СпособНачисленияАмортизацииБУ,
		|	ПервоначальныеСведенияНМАБухгалтерскийУчет.ЛиквидационнаяСтоимость	 	КАК ЛиквидационнаяСтоимость,
		|	ПервоначальныеСведенияНМАНалоговыйУчет.СрокПолезногоИспользования		КАК СрокИспользованияНУ,
		|	ПервоначальныеСведенияНМАНалоговыйУчет.СпособНачисленияАмортизацииНУ 	КАК СпособНачисленияАмортизацииНУ,
		|	СпособыОтраженияРасходовПоАмортизацииНМАБУ.СтатьяРасходов КАК СтатьяРасходов,
		|	СпособыОтраженияРасходовПоАмортизацииНМАБУ.АналитикаРасходов КАК АналитикаРасходов
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
		|				&Дата,
		|				НематериальныйАктив В
		|						(ВЫБРАТЬ
		|							ДанныеДокумента.НематериальныйАктив
		|						ИЗ
		|							ДанныеДокумента КАК ДанныеДокумента)
		|					И Регистратор <> &ТекущийРегистратор) КАК СчетаБухгалтерскогоУчетаНМА
		|		ПО ДанныеДокумента.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМА.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
		|				&Дата,
		|				НематериальныйАктив В
		|						(ВЫБРАТЬ
		|							ДанныеДокумента.НематериальныйАктив
		|						ИЗ
		|							ДанныеДокумента КАК ДанныеДокумента)
		|					И Регистратор <> &ТекущийРегистратор) КАК ПервоначальныеСведенияНМАБухгалтерскийУчет
		|		ПО ДанныеДокумента.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
		|				&Дата,
		|				НематериальныйАктив В
		|						(ВЫБРАТЬ
		|							ДанныеДокумента.НематериальныйАктив
		|						ИЗ
		|							ДанныеДокумента КАК ДанныеДокумента)
		|					И Регистратор <> &ТекущийРегистратор) КАК ПервоначальныеСведенияНМАНалоговыйУчет
		|		ПО ДанныеДокумента.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчет.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
		|				&Дата,
		|				НематериальныйАктив В
		|						(ВЫБРАТЬ
		|							ДанныеДокумента.НематериальныйАктив
		|						ИЗ
		|							ДанныеДокумента КАК ДанныеДокумента)
		|					И Регистратор <> &ТекущийРегистратор) КАК СпособыОтраженияРасходовПоАмортизацииНМАБУ
		|		ПО ДанныеДокумента.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБУ.НематериальныйАктив");
	
	Запрос.УстановитьПараметр("Дата", Новый Граница(?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДанныеДокумента", Объект.НМА.Выгрузить(, "НомерСтроки, НематериальныйАктив"));
	Запрос.УстановитьПараметр("ТекущийРегистратор", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(Объект.НМА[Выборка.НомерСтроки-1], Выборка,, "НомерСтроки");
			
			Для Каждого КлючИЗначение Из Структура Цикл
				Имя = КлючИЗначение.Ключ;
				Структура[Имя] = Выборка[Имя];
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Структура Цикл
		Имя = КлючИЗначение.Ключ;
		Если Не Объект[Имя+"Флаг"] Тогда
			Объект[Имя] = Структура[Имя];
			Если ТипЗнч(Структура[Имя]) = Тип("Строка") Тогда
				Элементы[Имя].ПодсказкаВвода = Структура[Имя];
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполнитьДоступность Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Имя, "Доступность", Объект[Имя + "Флаг"]);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НМА"+Имя, "Видимость", Объект[Имя + "Флаг"]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущиеЗначенияРеквизитов = Новый ФиксированнаяСтруктура(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПриИзменении(ИмяФлага)
	
	ФлагУстановлен = Объект[ИмяФлага];
	Имя = СтрЗаменить(ИмяФлага, "Флаг", "");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Имя, "Доступность", ФлагУстановлен);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НМА"+Имя, "Видимость", ФлагУстановлен);
	
	Если Объект[ИмяФлага] Тогда
		Элементы[Имя].ПодсказкаВвода = "";
	Иначе
		Объект[Имя] = ТекущиеЗначенияРеквизитов[Имя];
		Если ТипЗнч(ТекущиеЗначенияРеквизитов[Имя]) = Тип("Строка") Тогда
			Элементы[Имя].ПодсказкаВвода = ТекущиеЗначенияРеквизитов[Имя];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПередачиАмортизационныхРасходов() Экспорт
		
КонецПроцедуры

#Область СтандартныеПодсистемыДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	ПроверитьДоступностьИзмененияОбъемаНаработки();
	
	Если Объект.СпособНачисленияАмортизацииБУФлаг И Объект.ОбъемНаработкиБУФлаг Тогда
		Объект.ОбъемНаработкиБУФлаг = Объект.СпособНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции");	
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура НематериальныйАктивПриИзменении(Элемент)
	
	Объект.НМА.Очистить();
	Объект.НМА.Добавить().НематериальныйАктив = Объект.НематериальныйАктив;
	
	ЗаполнитьТекущиеЗначенияРеквизитов();
	
	ПроверитьДоступностьИзмененияОбъемаНаработки();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураИзменяемыхРеквизитов()
	
	Возврат Новый Структура(
		"СчетУчета, 
		| СрокИспользованияБУ, СрокИспользованияНУ,
	    | СпособНачисленияАмортизацииБУ, СпособНачисленияАмортизацииНУ,
		| ЛиквидационнаяСтоимость, ОбъемНаработкиБУ");
	
КонецФункции





#КонецОбласти

#КонецОбласти




