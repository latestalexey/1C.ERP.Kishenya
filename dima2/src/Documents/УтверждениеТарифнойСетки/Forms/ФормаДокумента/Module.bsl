&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("УтверждениеНовойТарифнойСетки")
		И Параметры.УтверждениеНовойТарифнойСетки Тогда
		
		УтверждениеНовойТарифнойСетки = Истина;
		
	КонецЕсли; 
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВступленияВСилу) Тогда
			Объект.ДатаВступленияВСилу = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), 1);
		КонецЕсли;

		ЗначенияДляЗаполнения = Новый Структура;
		ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.СпособОкругления) Тогда
			Объект.СпособОкругления = СпособОкругленияПоУмолчанию();
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере();
		
		Если ПервоеУтверждениеТарифов Тогда 
			Объект.ДатаВступленияВСилу = НачалоГода(ТекущаяДатаСеанса());
			ДатаВступленияВСилуПриИзмененииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не УтверждениеНовойТарифнойСетки Тогда
		
		// Обработчик подсистемы "Печать".
		УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанельФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПрименениеТарифныхКоэффициентов Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СпособОкругления) Тогда
			Объект.СпособОкругления = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
		КонецЕсли; 
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.СпособОкругления) Тогда
			Объект.СпособОкругления = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПустаяСсылка();
		КонецЕсли; 
		
	КонецЕсли; 
	
	ОбновитьТарифнуюСетку(ТекущийОбъект, Отказ);
	ОбновитьТарифыПоДаннымФормы(ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТарифнаяСетка", Объект.ТарифнаяСетка);
	ПараметрыОповещения.Вставить("ВидТарифнойСетки", Объект.ВидТарифнойСетки);
	Оповестить("Запись_УтверждениеТарифнойСетки", ПараметрыОповещения, ЭтаФорма);
	
	ОповеститьОбИзменении(Объект.Ссылка);
	Если УтверждениеНовойТарифнойСетки Тогда
		ОповеститьОбИзменении(ТарифнаяСетка.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если УтверждениеНовойТарифнойСетки Тогда
		
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		ТекущийОбъект.ДополнительныеСвойства.Вставить("УтверждениеНовойТарифнойСетки", Истина);
		Если Не ТекущийОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");	
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТарифнаяСеткаПриИзменении(Элемент)	
	
	ТарифнаяСеткаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура БазовыйТарифГруппыПриИзменении(Элемент)
	
	БазовыйТарифГруппыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТарифнойСеткиПриИзменении(Элемент)
	
	ВидТарифнойСетки = Объект.ВидТарифнойСетки;
	УстановитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВступленияВСилуПриИзменении(Элемент)
	
	Если Объект.ДатаВступленияВСилу < ДатаПоследнегоИзменения Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Новая дата %1 меньше даты предыдущего изменения %2, документ будет перезаполнен.
                |Изменить дату вступления в силу изменений?'
                |;uk='Нова дата %1 менше дати попередньої зміни %2, документ буде перезаповнено.
                |Змінити дату набрання чинності змін?'"),
			Формат(Объект.ДатаВступленияВСилу, "ДЛФ=DD"),
			Формат(ДатаПоследнегоИзменения, "ДЛФ=DD")
		);
			
		Оповещение = Новый ОписаниеОповещения("ДатаВступленияВСилуПриИзмененииЗавершение", ЭтотОбъект);
			
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		ДатаВступленияВСилуПриИзмененииЗавершение(КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВступленияВСилуПриИзмененииЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДатаВступленияВСилуПриИзмененииНаСервере();
	Иначе
		Объект.ДатаВступленияВСилу = ПрежняяДатаВступленияВСилу;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьДокументыВведенныеПозже(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.ДокументыВведенныеПозже);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьРанееВведенныеДокументы(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗарплатаКадрыРасширенныйКлиент.ОткрытьВведенныеНаДатуДокументы(ЭтотОбъект.РанееВведенныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифнаяСеткаПрименениеТарифныхКоэффициентовПриИзменении(Элемент)
	
	УстановитьДоступностьБазовогоТарифа(ЭтотОбъект);
	УстановитьИспользованиеТарифныхКоэффициентов();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОкругленияПриИзменении(Элемент)
	
	СпособОкругленияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаИзмененияФОТПозицийШтатногоРасписанияИСотрудников Тогда
		
		Если Модифицированность Или Не Объект.Проведен Тогда
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТарифы;
			
			Если Модифицированность Тогда
				
				ТекстВопроса = НСтр("ru='Данные были изменены. Перед продолжением необходимо сохранить изменения.
                    |Записать и продолжить'
                    |;uk='Дані були змінені. Перед продовженням необхідно зберегти зміни.
                    |Записати і продовжити'") + "?"
				
			Иначе
				
				ТекстВопроса = НСтр("ru='Документ не проведен. Перед продолжением необходимо провести документ.
                    |Провести документ и продолжить'
                    |;uk='Документ не проведено. Перед продовженням необхідно провести документ.
                    |Провести документ і продовжити'") + "?"
				
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("СтраницаИзмененияФОТПозицийШтатногоРасписанияИСотрудниковЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе
			
			СтраницаИзмененияФОТПозицийШтатногоРасписанияИСотрудниковЗавершение(
				КодВозвратаДиалога.Да);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаИзмененияФОТПозицийШтатногоРасписанияИСотрудниковЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Модифицированность
			Или Не Объект.Проведен Тогда
			
			СтруктураПараметровЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			Если Не Записать(СтруктураПараметровЗаписи) Тогда
				Возврат;
			КонецЕсли;
			
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИзмененияФОТПозицийШтатногоРасписанияИСотрудников;
			
		КонецЕсли;
		
		Если НеобходимРасчетФОТ Тогда
			ЗаполнитьИзмененияФОТ();
			РазвернутьИзмененияФОТ();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияФОТВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		
		ДанныеСтроки = ИзмененияФОТ.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ДанныеСтроки <> Неопределено Тогда
			
			ПоказываемоеЗначение = Неопределено;
			Если ЗначениеЗаполнено(ДанныеСтроки.ОбъектИзменения) Тогда
				ПоказываемоеЗначение = ДанныеСтроки.ОбъектИзменения;
			ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ДокументИзменения) Тогда
				ПоказываемоеЗначение = ДанныеСтроки.ДокументИзменения;
			ИначеЕсли ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
				ПоказываемоеЗначение = ДанныеСтроки.Организация;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПоказываемоеЗначение) Тогда
				ПоказатьЗначение(, ПоказываемоеЗначение);
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТарифы

&НаКлиенте
Процедура ТарифыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
			
		Если ТекущиеДанные.Отменить Тогда
			ТекущаяСтраница = Элементы.СтраницаДобавитьПродолжить;
		Иначе
			Если Не ТекущиеДанные.НоваяСтрока Тогда
				ТекущаяСтраница = Элементы.СтраницаДобавитьОтменить;
			Иначе
				ТекущаяСтраница = Элементы.СтраницаДобавитьУдалить;
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СтраницыКоманднойПанелиТарифы",
			"ТекущаяСтраница",
			ТекущаяСтраница);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Не ТекущиеДанные.НоваяСтрока Тогда
			ТекущиеДанные.Отменить = Не ТекущиеДанные.Отменить;
			Отказ = Истина;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.НоваяСтрока = Истина;
		ТекущиеДанные.РеквизитДопУпорядочивания = 99999;
		
		Если Копирование Тогда
			ТекущиеДанные.РазрядКатегория = ПредопределенноеЗначение("Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка");
		КонецЕсли; 
		
		Если ПрименениеТарифныхКоэффициентов Тогда
			
			КоличествоТарифов = Объект.Тарифы.Количество();
			
			Если КоличествоТарифов = 1 Тогда
				ТекущиеДанные.РазрядныйКоэффициент = 1;
			ИначеЕсли КоличествоТарифов = 2 Тогда
				ТекущиеДанные.РазрядныйКоэффициент = Объект.Тарифы[0].РазрядныйКоэффициент + (Объект.Тарифы[0].РазрядныйКоэффициент - 1);
			Иначе
				ТекущиеДанные.РазрядныйКоэффициент = Объект.Тарифы[КоличествоТарифов - 2].РазрядныйКоэффициент * 2
					- Объект.Тарифы[КоличествоТарифов - 3].РазрядныйКоэффициент;
			КонецЕсли; 
				
			РассчитатьТарифВСтроке(ТекущиеДанные, Объект.БазовыйТарифГруппы, Объект.СпособОкругления);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыРазрядныйКоэффициентПриИзменении(Элемент)	
	
	ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РассчитатьТарифВСтроке(ТекущиеДанные, Объект.БазовыйТарифГруппы, Объект.СпособОкругления);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыРазрядКатегорияПриИзменении(Элемент)
	
	ТарифыРазрядКатегорияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыТарифПриИзменении(Элемент)
	
	Если ПрименениеТарифныхКоэффициентов Тогда
		
		ТекущиеДанные = Элементы.Тарифы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И  Объект.БазовыйТарифГруппы <> 0 Тогда
			
			ТекущиеДанные.РазрядныйКоэффициент = ТекущиеДанные.Тариф / Объект.БазовыйТарифГруппы;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура РассчитатьИзменениеФОТ(Команда)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru='Данные были изменены. Заполнить изменения ФОТ можно будет после записи и проведении документа.
            |Записать и продолжить'
            |;uk='Дані були змінені. Заповнити зміни ФОП можна буде після запису та проведенні документа.
            |Записати і продовжити'") + "?";
			
	ИначеЕсли Не Объект.Проведен Тогда
			
		ТекстВопроса = НСтр("ru='Документ не проведен. Заполнить изменения ФОТ можно будет после проведении документа.
            |Провести документ и продолжить'
            |;uk='Документ не проведено. Заповнити зміни ФОП можна буде після проведення документа.
            |Провести документ і продовжити'") + "?";
			
	Иначе
		РассчитатьИзменениеФОТЗавершение(КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("РассчитатьИзменениеФОТЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИзменениеФОТЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Модифицированность Или Не Объект.Проведен Тогда
			
			Если Не Записать(Новый Структура("РежимЗаписи ", РежимЗаписиДокумента.Проведение)) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли; 
		
		РассчитатьИзменениеФОТНаКлиенте();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьРазряды()
	
	Объект.Тарифы.Сортировать("РеквизитДопУпорядочивания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзмененияФОТ(Команда)
	
	ЗаполнитьИзмененияФОТ();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ТарифнаяСетка) Тогда
		ЗначениеВРеквизитФормы(Объект.ТарифнаяСетка.ПолучитьОбъект(), "ТарифнаяСетка");
	КонецЕсли;
	
	ПрочитатьВремяРегистрации();
	
	ЗарплатаКадрыРасширенный.ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(ЭтотОбъект);	
	
	ОчиститьЗначения = Объект.Ссылка.Пустая();
	ВидТарифнойСетки = РазрядыКатегорииДолжностей.ЗаполнениеВидаТарифнойСетки(Параметры, Объект.ВидТарифнойСетки); 	

	УстановитьИспользованиеТарифныхКоэффициентов();
	ЗаполнитьЗначенияДействующихТарифов(ОчиститьЗначения);
	
	УстановитьДоступностьБазовогоТарифа(ЭтотОбъект);
	
	Элементы.ВидТарифнойСетки.Видимость = НЕ ЗначениеЗаполнено(ВидТарифнойСетки);
	Элементы.ВидТарифнойСеткиНового.Видимость = НЕ ЗначениеЗаполнено(ВидТарифнойСетки);
	
	ЗапомнитьДатуПоследнегоИзменения();
	ПрежняяДатаВступленияВСилу = Объект.ДатаВступленияВСилу;
	
	УстановитьВидимостьЭлементов();
	УстановитьЗаголовки();
	
	НеобходимРасчетФОТ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияДействующихТарифов(ОчиститьЗначения = Ложь)
	
	Если ОчиститьЗначения Тогда 
		Объект.Тарифы.Очистить();
	Иначе
		
		Для каждого СтрокаТарифы Из Объект.Тарифы Цикл
			СтрокаТарифы.НоваяСтрока = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТарифнаяСетка) Или Не ЗначениеЗаполнено(Объект.ДатаВступленияВСилу) Тогда 
		ПервоеУтверждениеТарифов = Истина;
		Возврат;
	КонецЕсли;
	
	ДанныеТарифнойСетки = РазрядыКатегорииДолжностей.ДанныеТарифнойСетки(Объект.ТарифнаяСетка, Объект.ДатаВступленияВСилу, Объект.Ссылка);
	
	Объект.БазовыйТарифГруппы = ?(ОчиститьЗначения, ДанныеТарифнойСетки.БазовыйТарифГруппы, Объект.БазовыйТарифГруппы);
	
	Для Каждого ДанныеТарифов Из ДанныеТарифнойСетки.ЗначенияТарифов Цикл 
		
		Если ОчиститьЗначения Тогда 
			
			СтрокаТаблицы = Объект.Тарифы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеТарифов);
			СтрокаТаблицы.РазрядныйКоэффициент = ?(ПрименениеТарифныхКоэффициентов, Макс(1, ДанныеТарифов.РазрядныйКоэффициент), 0);
			
		Иначе 
			
			Отбор = Новый Структура("РазрядКатегория", ДанныеТарифов.РазрядКатегория);
			НайденныеСтроки = Объект.Тарифы.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = НайденныеСтроки[0];
			
		КонецЕсли;
		
		СтрокаТаблицы.ТекущийРазрядныйКоэффициент = ДанныеТарифов.РазрядныйКоэффициент;
		СтрокаТаблицы.ТекущийТариф = ДанныеТарифов.Тариф;
		СтрокаТаблицы.НоваяСтрока = Ложь;
		
		СтрокаТаблицы.ТекущийРазрядныйКоэффициентПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='было: %1';uk='було: %1'"), Формат(ДанныеТарифов.РазрядныйКоэффициент, "ЧДЦ=2"));
		СтрокаТаблицы.ТекущийТарифПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='было: %1';uk='було: %1'"), Формат(ДанныеТарифов.Тариф, "ЧДЦ=2"));
		
	КонецЦикла;
	
	// Заполнение наименований разрядов
	СписокРазрядов = Объект.Тарифы.Выгрузить(, "РазрядКатегория").ВыгрузитьКолонку("РазрядКатегория");
	РеквизитыРазрядов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокРазрядов, "Наименование,НаименованиеПолное,РеквизитДопУпорядочивания");
	Для каждого СтрокаТарифы Из Объект.Тарифы Цикл
		
		РазрядКатегория = СтрокаТарифы.РазрядКатегория;
		Если ЗначениеЗаполнено(РазрядКатегория) Тогда
			
			РеквизитыРазряда = РеквизитыРазрядов.Получить(РазрядКатегория);
			Если РеквизитыРазряда <> Неопределено Тогда
				
				СтрокаТарифы.РазрядНаименование = РеквизитыРазряда.Наименование;
				СтрокаТарифы.РазрядНаименованиеПолное = РеквизитыРазряда.НаименованиеПолное;
				СтрокаТарифы.РеквизитДопУпорядочивания = РеквизитыРазряда.РеквизитДопУпорядочивания;
		
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ОчиститьЗначения Тогда 
		РассчитатьЗначенияТарифов();
	КонецЕсли;
	
	ПервоеУтверждениеТарифов = Не ЗначениеЗаполнено(ДанныеТарифнойСетки.ДатаИзменения);
	
КонецПроцедуры

&НаСервере
Процедура ТарифнаяСеткаПриИзмененииНаСервере()
	
	ЗначениеВРеквизитФормы(Объект.ТарифнаяСетка.ПолучитьОбъект(), "ТарифнаяСетка");
	ВидТарифнойСетки = ТарифнаяСетка.ВидТарифнойСетки;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВидТарифнойСетки",
		"ТолькоПросмотр",
		ЗначениеЗаполнено(Объект.ТарифнаяСетка));
	
	УстановитьИспользованиеТарифныхКоэффициентов();
	ЗаполнитьЗначенияДействующихТарифов(Истина);
	ЗапомнитьДатуПоследнегоИзменения();
	УстановитьДоступностьБазовогоТарифа(ЭтотОбъект);

	УстановитьВидимостьЭлементов();
	УстановитьЗаголовки();
	
КонецПроцедуры

&НаСервере
Процедура ДатаВступленияВСилуПриИзмененииНаСервере()
	
	ПрочитатьВремяРегистрации();
	ЗаполнитьЗначенияДействующихТарифов(Истина);
	ЗапомнитьДатуПоследнегоИзменения();
	ПрежняяДатаВступленияВСилу = Объект.ДатаВступленияВСилу;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗначенияТарифов()
	
	Если ПрименениеТарифныхКоэффициентов И Объект.Тарифы.Количество() > 0 Тогда 
	
		БазовоеЗначение = Объект.БазовыйТарифГруппы;
		
		Для Каждого ДанныеРазрядаТарифнойСетки Из Объект.Тарифы Цикл 
			
			Если Не ДанныеРазрядаТарифнойСетки.Отменить Тогда
				РассчитатьТарифВСтроке(ДанныеРазрядаТарифнойСетки, БазовоеЗначение, Объект.СпособОкругления);
			КонецЕсли; 
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИспользованиеТарифныхКоэффициентов()
	
	ПрименениеТарифныхКоэффициентов = Ложь;
	
	Если УтверждениеНовойТарифнойСетки Тогда
		ПрименениеТарифныхКоэффициентов = ТарифнаяСетка.ПрименениеТарифныхКоэффициентов;
	Иначе
		Если ЗначениеЗаполнено(Объект.ТарифнаяСетка) Тогда 
			ПрименениеТарифныхКоэффициентов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТарифнаяСетка, "ПрименениеТарифныхКоэффициентов");
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьОтображениеГруппыФормы(Элементы, "ГруппаКоэффициент", "Видимость", ПрименениеТарифныхКоэффициентов);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВремяРегистрации()
	
	ВремяРегистрации = ЗарплатаКадрыРасширенный.ВремяРегистрацииДокумента(Объект.Ссылка, Объект.ДатаВступленияВСилу);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТарифыТекущийРазрядныйКоэффициентПредставление",
		"Видимость",
		ПрименениеТарифныхКоэффициентов И Не ПервоеУтверждениеТарифов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТарифыТекущийТарифПредставление",
		"Видимость",
		Не ПервоеУтверждениеТарифов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"РассчитатьИзменениеФОТ",
		"Видимость",
		Не ПервоеУтверждениеТарифов И ПоследнееУтверждениеТарифов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СтраницаИзмененияФОТПозицийШтатногоРасписанияИСотрудников",
		"Видимость",
		Не ПервоеУтверждениеТарифов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Страницы", "ОтображениеСтраниц", 
		?(ПервоеУтверждениеТарифов, ОтображениеСтраницФормы.Нет, ОтображениеСтраницФормы.ЗакладкиСверху));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовки()
	
	Если УтверждениеНовойТарифнойСетки Тогда
		
		ВидимостьШапкиНового = Истина;
		ВидимостьПрименениеТарифныхКоэффициентов = Истина;
		ВидимостьБазовогоТарифа = Истина;
		
		Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов(
			"ТарифнаяСеткаЭлемент",
			?(ЗначениеЗаполнено(ВидТарифнойСетки), ВидТарифнойСетки, Перечисления.ВидыТарифныхСеток.Тариф), 
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ФормаПровестиИЗакрыть",
			"КнопкаПоУмолчанию",
			Истина);
		
	Иначе
			
		ВидимостьШапкиНового = Ложь;
		ВидимостьПрименениеТарифныхКоэффициентов = Ложь;
		ВидимостьБазовогоТарифа = ТарифнаяСетка.ПрименениеТарифныхКоэффициентов;
		
		ЭтаФорма.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("УтверждениеТарифнойСеткиЭлемент",
			?(ЗначениеЗаполнено(ВидТарифнойСетки),ВидТарифнойСетки, Перечисления.ВидыТарифныхСеток.Тариф), Параметры.Ключ.Пустая());
			
		Элементы.ТарифнаяСетка.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитТарифнаяСетка",
			?(ЗначениеЗаполнено(ВидТарифнойСетки),ВидТарифнойСетки, Перечисления.ВидыТарифныхСеток.Тариф));
			
		Элементы.ТарифыРазрядКатегория.Заголовок = РазрядыКатегорииДолжностей.ИнициализироватьЗаголовокФормыИРеквизитов("РеквизитРазрядКатегория",	
			?(ЗначениеЗаполнено(ВидТарифнойСетки),ВидТарифнойСетки, Перечисления.ВидыТарифныхСеток.Тариф));
			
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Шапка",
		"Видимость",
		Не ВидимостьШапкиНового);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ШапкаНового",
		"Видимость",
		ВидимостьШапкиНового);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТарифнаяСеткаПрименениеТарифныхКоэффициентов",
		"Видимость",
		ВидимостьПрименениеТарифныхКоэффициентов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"БазовыйТарифГруппыГруппа",
		"ОтображениеПодсказки",
		?(ВидимостьПрименениеТарифныхКоэффициентов, ОтображениеПодсказки.ОтображатьСнизу, ОтображениеПодсказки.Нет));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"БазовыйТарифГруппы",
		"ПоложениеЗаголовка",
		?(ВидимостьПрименениеТарифныхКоэффициентов, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Авто));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"БазовыйТарифСпособОкругленияГруппа",
		"Видимость",
		ВидимостьБазовогоТарифа);
	
	Если ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф
		И ПолучитьФункциональнуюОпциюФормы("РаботаВБюджетномУчреждении") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТарифыРазрядКатегория",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТарифыРазрядНаименование",
			"Видимость",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТарифыРазрядНаименованиеПолное",
			"Видимость",
			Истина);
		
		ИзменятьПорядокСтрокТарифов = Истина;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТарифыРазрядКатегория",
			"Видимость",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТарифыРазрядНаименование",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТарифыРазрядНаименованиеПолное",
			"Видимость",
			Ложь);
		
		ИзменятьПорядокСтрокТарифов = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТарифыПереместитьВверх",
		"Видимость",
		ИзменятьПорядокСтрокТарифов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТарифыПереместитьВниз",
		"Видимость",
		ИзменятьПорядокСтрокТарифов);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"Тарифы",
		"ИзменятьПорядокСтрок",
		ИзменятьПорядокСтрокТарифов);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТарифыУпорядочитьРазряды",
		"Видимость",
		Не ИзменятьПорядокСтрокТарифов);
		
	Если Не ИзменятьПорядокСтрокТарифов Тогда
			
		Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
			ЗаголовокКоманды = НСтр("ru='Восстановить порядок следования квалификационных категорий (уровней)';uk='Відновити порядок проходження кваліфікаційних категорій (рівнів)'");
		Иначе
			ЗаголовокКоманды = НСтр("ru='Восстановить порядок следования квалификационных разрядов (категорий)';uk='Відновити порядок проходження кваліфікаційних розрядів (категорій)'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ТарифыУпорядочитьРазряды",
			"Заголовок",
			ЗаголовокКоманды);
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьБазовогоТарифа(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"БазовыйТарифСпособОкругленияГруппа",
		"Доступность",
		Форма.ТарифнаяСетка.ПрименениеТарифныхКоэффициентов);
	
КонецПроцедуры

#Область ПроцедурыИФункцииМеханизмаВыполненияДлительныхОпераций

&НаКлиенте
Процедура РассчитатьИзменениеФОТНаКлиенте()

	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ТарифнаяСетка) Или Не ЗначениеЗаполнено(Объект.ДатаВступленияВСилу) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРаботыЗадания = РассчитатьИзменениеФОТНаСервере();
	
	Если РезультатРаботыЗадания.ЗаданиеВыполнено Тогда
		
		ОповеститьОбИзменении(Объект.Ссылка);
		РазвернутьИзмененияФОТ();
		
	Иначе
		
		ИдентификаторЗадания = РезультатРаботыЗадания.ИдентификаторЗадания;
		АдресХранилища		 = РезультатРаботыЗадания.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьИзменениеФОТНаСервере()
	
	ПараметрыВыполнения = Новый Структура("ТарифнаяСетка, ДатаВступленияВСилу");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, Объект);
	
	НаименованиеЗадания = НСтр("ru='Расчет ФОТ при изменении тарифной группы';uk='Розрахунок ФОП при зміні тарифної групи'");
	
	РезультатРаботыЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Документы.УтверждениеТарифнойСетки.ИзменитьФОТ",
		ПараметрыВыполнения,
		НаименованиеЗадания);
	
	АдресХранилища = РезультатРаботыЗадания.АдресХранилища;
	
	Если РезультатРаботыЗадания.ЗаданиеВыполнено Тогда
		ЗаполнитьИзмененияФОТ();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИзмененияФОТПозицийШтатногоРасписанияИСотрудников;
		ВывестиСообщенияЗадания();
	КонецЕсли;
	
	Возврат РезультатРаботыЗадания;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция СообщенияФоновогоЗадания(ИдентификаторЗадания)
	
	СообщенияПользователю = Новый Массив;
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		СообщенияПользователю = ФоновоеЗадание.ПолучитьСообщенияПользователю();
	КонецЕсли;
	
	Возврат СообщенияПользователю;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				Состояние(НСтр("ru='Процесс формирования кадровых приказов завершен';uk='Процес формування кадрових наказів завершено'"));
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
				ЗаполнитьИзмененияФОТ();
				РазвернутьИзмененияФОТ();
				Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаИзмененияФОТПозицийШтатногоРасписанияИСотрудников;
				ВывестиСообщенияЗадания();
				
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВывестиСообщенияЗадания();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьТарифнуюСетку(ТекущийОбъект, Отказ)
	
	Если УтверждениеНовойТарифнойСетки Тогда
		
		Попытка
			
			СохранитьДанныеТарифнойСетки = Ложь;
			ТарифнаяСеткаОбъект = РеквизитФормыВЗначение("ТарифнаяСетка");
			Если Не ЗначениеЗаполнено(ТарифнаяСетка.Ссылка) Тогда
				
				ТарифнаяСеткаОбъект.ВидТарифнойСетки = ВидТарифнойСетки;
				СохранитьДанныеТарифнойСетки = Истина;
				
			Иначе
				
				РеквизитыТарифнойСетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТарифнаяСетка.Ссылка, "Наименование,НаименованиеПолное,ПрименениеТарифныхКоэффициентов");
				Если ТарифнаяСетка.Наименование <> РеквизитыТарифнойСетки.Наименование
					ИЛИ ТарифнаяСетка.НаименованиеПолное <> РеквизитыТарифнойСетки.НаименованиеПолное
					ИЛИ ТарифнаяСетка.ПрименениеТарифныхКоэффициентов <> РеквизитыТарифнойСетки.ПрименениеТарифныхКоэффициентов Тогда
					
					СохранитьДанныеТарифнойСетки = Истина;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если СохранитьДанныеТарифнойСетки Тогда
				ТарифнаяСеткаОбъект.Записать();
			КонецЕсли;
			
			ТекущийОбъект.ТарифнаяСетка = ТарифнаяСеткаОбъект.Ссылка;
		
		Исключение
			
			ИнфоОшибка = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='Не удалось записать';uk='Не вдалося записати'") + " " + ИнфоОшибка.Описание;
		
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТарифыПоДаннымФормы(ТекущийОбъект,  Отказ)
	
	Тарифы = Объект.Тарифы.Выгрузить();
	РазрядыКатегорииДолжностей.ОбновитьТарифыПоДаннымФормы(Тарифы, ВидТарифнойСетки, ТекущийОбъект.ТарифнаяСетка, Отказ, "Объект.Тарифы");
	
	ТекущийОбъект.Тарифы.Загрузить(Тарифы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьТарифВСтроке(ТекущиеДанные, БазовыйТарифГруппы, СпособОкругления)
	
	Если БазовыйТарифГруппы <> 0 Тогда
		
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОписаниеСпособаОкругления = ЗарплатаКадрыРасширенныйПовтИсп.ОписаниеСпособаОкругления(СпособОкругления);
		#Иначе
			ОписаниеСпособаОкругления = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ОписаниеСпособаОкругления(СпособОкругления);
		#КонецЕсли
		
		ТекущиеДанные.Тариф = ТекущиеДанные.РазрядныйКоэффициент * БазовыйТарифГруппы;
		ТекущиеДанные.Тариф = ЗарплатаКадрыКлиентСервер.Округлить(ТекущиеДанные.Тариф, ОписаниеСпособаОкругления.Точность, ОписаниеСпособаОкругления.ПравилоОкругления);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция СпособОкругленияПоУмолчанию()
	
	СпособОкругления = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТарифнаяСетка", Объект.ТарифнаяСетка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УтверждениеТарифнойСетки.ДатаВступленияВСилу КАК ДатаВступленияВСилу,
		|	УтверждениеТарифнойСетки.СпособОкругления,
		|	0 КАК Порядок
		|ИЗ
		|	Документ.УтверждениеТарифнойСетки КАК УтверждениеТарифнойСетки
		|ГДЕ
		|	УтверждениеТарифнойСетки.ТарифнаяСетка = &ТарифнаяСетка
		|	И УтверждениеТарифнойСетки.СпособОкругления <> ЗНАЧЕНИЕ(Справочник.СпособыОкругленияПриРасчетеЗарплаты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УтверждениеТарифнойСетки.ДатаВступленияВСилу,
		|	УтверждениеТарифнойСетки.СпособОкругления,
		|	1
		|ИЗ
		|	Документ.УтверждениеТарифнойСетки КАК УтверждениеТарифнойСетки
		|ГДЕ
		|	УтверждениеТарифнойСетки.ТарифнаяСетка <> &ТарифнаяСетка
		|	И УтверждениеТарифнойСетки.СпособОкругления <> ЗНАЧЕНИЕ(Справочник.СпособыОкругленияПриРасчетеЗарплаты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ДатаВступленияВСилу УБЫВ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СпособОкругления = Выборка.СпособОкругления;
		
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(СпособОкругления) Тогда
		СпособОкругления = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	КонецЕсли; 
	
	Возврат СпособОкругления;
	
КонецФункции

&НаСервере
Процедура СпособОкругленияПриИзмененииНаСервере()
	
	РассчитатьЗначенияТарифов();
		
КонецПроцедуры

&НаСервере
Процедура БазовыйТарифГруппыПриИзмененииНаСервере()
	
	РассчитатьЗначенияТарифов();
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьДатуПоследнегоИзменения()
	
	ДатаПоследнегоИзменения = '00010101';
	Если ЗначениеЗаполнено(Объект.ДатаВступленияВСилу) Тогда
		ДатаПоследнегоИзменения = ДатаПоследнегоИзмененияТарифнойСетки(Объект.ТарифнаяСетка, Объект.ДатаВступленияВСилу);
	КонецЕсли;
	
	ПоследняяДатаИзменения = ДатаПоследнегоИзмененияТарифнойСетки(Объект.ТарифнаяСетка);
	ПоследнееУтверждениеТарифов = ПоследняяДатаИзменения <= Объект.ДатаВступленияВСилу;
	
КонецПроцедуры

&НаСервере
Функция ДатаПоследнегоИзмененияТарифнойСетки(ТарифнаяСетка, Период = '00010101')
	
	ДатаИзменения = '00010101';
	
	Если ЗначениеЗаполнено(ТарифнаяСетка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТарифнаяСетка", ТарифнаяСетка);
		Запрос.УстановитьПараметр("Период", Период);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ЗначенияТарифов.Период) КАК Период
			|ИЗ
			|	РегистрСведений.ЗначенияТарифов КАК ЗначенияТарифов
			|ГДЕ
			|	ЗначенияТарифов.ТарифнаяСетка = &ТарифнаяСетка
			|	И (ЗначенияТарифов.Период < &Период
			|			ИЛИ &Период = ДАТАВРЕМЯ(1, 1, 1))";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Если ЗначениеЗаполнено(Выборка.Период) Тогда
				ДатаИзменения = Выборка.Период;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ДатаИзменения;
		
КонецФункции

&НаСервере
Процедура ТарифыРазрядКатегорияПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Тарифы.НайтиПоИдентификатору(Элементы.Тарифы.ТекущаяСтрока);
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.РазрядКатегория) Тогда
			РеквизитДопУпорядочивания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.РазрядКатегория, "РеквизитДопУпорядочивания");
		Иначе
			РеквизитДопУпорядочивания = 99999;
		КонецЕсли;
		
		ТекущиеДанные.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмененияФОТ()
	
	Если Элементы.ИзмененияФОТ.ТекущаяСтрока <> Неопределено Тогда
		
		ДанныеТекущейСтроки = Новый Структура("Организация,ДокументИзменения,ОбъектИзменения");
		ДанныеСтроки = ИзмененияФОТ.НайтиПоИдентификатору(Элементы.ИзмененияФОТ.ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ДанныеСтроки);
	
	Иначе
		ДанныеТекущейСтроки = Неопределено;
	КонецЕсли;
	
	ИзмененияФОТ.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Тарифы", Объект.Тарифы.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Тарифы.РазрядКатегория,
		|	Тарифы.Тариф
		|ПОМЕСТИТЬ ВТТарифы
		|ИЗ
		|	&Тарифы КАК Тарифы
		|ГДЕ
		|	НЕ Тарифы.Отменить";
		
	Запрос.Выполнить();
	
	// Добавление сведений об изменениях начислений штатного расписания
	ФОИспользоватьШтатноеРасписание = ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание");
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	Если ФОИспользоватьШтатноеРасписание Тогда
		
		РезультатЗапроса = Документы.УтверждениеТарифнойСетки.РезультатЗапросаПоИзменениямПозицийШтатногоРасписания(
			Объект.ТарифнаяСетка, Объект.ДатаВступленияВСилу, Запрос.МенеджерВременныхТаблиц);
			
		Если РезультатЗапроса <> Неопределено Тогда
			
			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл 
				
				СтрокаОрганизации = ИзмененияФОТ.ПолучитьЭлементы().Добавить();	
				СтрокаОрганизации.Организация = Выборка.Организация;
				СтрокаОрганизации.Представление = СтрокаОрганизации.Организация;
				СтрокаОрганизации.ИзменениеУчтено = Истина;
				
				Пока Выборка.СледующийПоЗначениюПоля("ИзменениеШтатногоРасписания") Цикл
					
					СтрокаИзменениеШтатногоРасписания = СтрокаОрганизации.ПолучитьЭлементы().Добавить();
					СтрокаИзменениеШтатногоРасписания.Организация = Выборка.Организация;
					СтрокаИзменениеШтатногоРасписания.ДокументИзменения = Выборка.ИзменениеШтатногоРасписания;
					Если ЗначениеЗаполнено(СтрокаИзменениеШтатногоРасписания.ДокументИзменения) Тогда
						СтрокаИзменениеШтатногоРасписания.ИзменениеУчтено = Истина;
						СтрокаИзменениеШтатногоРасписания.Представление = СтрокаИзменениеШтатногоРасписания.ДокументИзменения;
					Иначе
						
						Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
							СтрокаИзменениеШтатногоРасписания.ИзменениеУчтено = Ложь;
							СтрокаИзменениеШтатногоРасписания.Представление = НСтр("ru='Не найдены изменения позиций штатного расписания';uk='Не знайдені зміни позицій штатного розкладу'");
						Иначе
							СтрокаИзменениеШтатногоРасписания.ИзменениеУчтено = Истина;
							СтрокаИзменениеШтатногоРасписания.Представление = НСтр("ru='Позиции штатного расписания';uk='Позиції штатного розкладу'");
						КонецЕсли;
						
					КонецЕсли;
					
					Пока Выборка.Следующий() Цикл
						
						СтрокаПозиции = СтрокаИзменениеШтатногоРасписания.ПолучитьЭлементы().Добавить();
						СтрокаПозиции.Организация = Выборка.Организация;
						СтрокаПозиции.ДокументИзменения = Выборка.ИзменениеШтатногоРасписания;
						СтрокаПозиции.ОбъектИзменения = Выборка.ПозицияШтатногоРасписания;
						СтрокаПозиции.Представление = СтрокаПозиции.ОбъектИзменения;
						СтрокаПозиции.ИзменениеУчтено = Выборка.ИзменениеУчтено;
						
						Если Не СтрокаПозиции.ИзменениеУчтено Тогда
							
							Если СтрокаИзменениеШтатногоРасписания.ИзменениеУчтено = Истина Тогда
								
								СтрокаИзменениеШтатногоРасписания.ИзменениеУчтено = Ложь;
								СтрокаИзменениеШтатногоРасписания.Представление = СтрокаИзменениеШтатногоРасписания.Представление
									+ " (" + НСтр("ru='не все изменения учтены';uk='не всі зміни враховані'") + ")";
									
							КонецЕсли;
							
							Если ЗначениеЗаполнено(Выборка.РазрядКатегория)
								Или Выборка.ТарифМин = Выборка.ТарифМакс Тогда
								
								СтрокаПозиции.Представление = СтрокаПозиции.Представление + ", " + НСтр("ru='размер тарифа должен быть';uk='розмір тарифу повинен бути'")
									+ " " + Формат(Выборка.Тариф, "ЧДЦ=2");
								
							Иначе
								
								СтрокаПозиции.Представление = СтрокаПозиции.Представление + ", " + НСтр("ru='размер тарифа должен быть в пределах от';uk='розмір тарифу повинен бути в межах від'")
									+ " " + Формат(Выборка.ТарифМин, "ЧДЦ=2") + " " + НСтр("ru='до';uk='до'") + " " + Формат(Выборка.ТарифМакс, "ЧДЦ=2");
									
							КонецЕсли;
							
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЦикла; 
				
			КонецЦикла;
			
		КонецЕсли; 
			
	КонецЕсли; 
	
	// Добавление сведений об изменениях оплаты труда сотрудников
	РезультатЗапроса = Документы.УтверждениеТарифнойСетки.РезультатЗапросаПоИзменениямПлановыхНачислений(
		Объект.ТарифнаяСетка, Объект.ДатаВступленияВСилу, Запрос.МенеджерВременныхТаблиц);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		СтрокаОрганизации = Неопределено;
		Для каждого СтрокаКоллекции Из ИзмененияФОТ.ПолучитьЭлементы() Цикл
			Если СтрокаКоллекции.Организация = Выборка.Организация Тогда
				СтрокаОрганизации = СтрокаКоллекции;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если СтрокаОрганизации = Неопределено Тогда
			
			СтрокаОрганизации = ИзмененияФОТ.ПолучитьЭлементы().Добавить();	
			СтрокаОрганизации.Организация = Выборка.Организация;
			СтрокаОрганизации.Представление = СтрокаОрганизации.Организация;
			СтрокаОрганизации.ИзменениеУчтено = Истина;
			
		КонецЕсли; 
		
		Пока Выборка.СледующийПоЗначениюПоля("ИзменениеПлановыхНачислений") Цикл
			
			СтрокаИзменениеПлановыхНачислений = СтрокаОрганизации.ПолучитьЭлементы().Добавить();
			СтрокаИзменениеПлановыхНачислений.Организация = Выборка.Организация;
			СтрокаИзменениеПлановыхНачислений.ДокументИзменения = Выборка.ИзменениеПлановыхНачислений;
			Если ЗначениеЗаполнено(СтрокаИзменениеПлановыхНачислений.ДокументИзменения) Тогда
				СтрокаИзменениеПлановыхНачислений.ИзменениеУчтено = Истина;
				СтрокаИзменениеПлановыхНачислений.Представление = СтрокаИзменениеПлановыхНачислений.ДокументИзменения;
			Иначе
				СтрокаИзменениеПлановыхНачислений.ИзменениеУчтено = Ложь;
				СтрокаИзменениеПлановыхНачислений.Представление = НСтр("ru='Не найдены изменения начислений сотрудников';uk='Не знайдені зміни нарахувань співробітників'");
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				СтрокаСотрудника = СтрокаИзменениеПлановыхНачислений.ПолучитьЭлементы().Добавить();
				СтрокаСотрудника.Организация = Выборка.Организация;
				СтрокаСотрудника.ДокументИзменения = Выборка.ИзменениеПлановыхНачислений;
				СтрокаСотрудника.ОбъектИзменения = Выборка.Сотрудник;
				СтрокаСотрудника.Представление = Выборка.ПредставлениеСотрудник;
				СтрокаСотрудника.ИзменениеУчтено = Выборка.ИзменениеУчтено;
				
				Если ФОИспользоватьШтатноеРасписание Тогда
					ПредставлениеДолжность = Выборка.ПредставлениеДолжность;
				Иначе
					ПредставлениеДолжность = Выборка.ПредставлениеДолжность + " /" + Выборка.ПредставлениеПодразделение + "/";
				КонецЕсли;
				
				СтрокаСотрудника.Представление = СтрокаСотрудника.Представление + " (" + ПредставлениеДолжность + ")";
				
				Если Не Выборка.ИзменениеУчтено И ЗначениеЗаполнено(Выборка.ИзменениеПлановыхНачислений) Тогда
					
					СтрокаСотрудника.Представление = СтрокаСотрудника.Представление + ", " + НСтр("ru='размер тарифа должен быть';uk='розмір тарифу повинен бути'")
						+ " = " + Формат(Выборка.Тариф, "ЧДЦ=2");
						
				КонецЕсли; 
				
			КонецЦикла;
				
		КонецЦикла; 
		
	КонецЦикла; 
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		
		ТекущаяСтрока = Неопределено;
		Для каждого СтрокаОрганизации Из ИзмененияФОТ.ПолучитьЭлементы() Цикл
			
			Если СтрокаОрганизации.Организация = ДанныеТекущейСтроки.Организация Тогда
				
				Если СтрокаОрганизации.ДокументИзменения = ДанныеТекущейСтроки.ДокументИзменения
					И СтрокаОрганизации.ОбъектИзменения = ДанныеТекущейСтроки.ОбъектИзменения Тогда
					
					ТекущаяСтрока = СтрокаОрганизации.ПолучитьИдентификатор();
					
				Иначе
					
					Для каждого СтрокаДокумента Из СтрокаОрганизации.ПолучитьЭлементы() Цикл
						
						Если СтрокаДокумента.ДокументИзменения = ДанныеТекущейСтроки.ДокументИзменения Тогда
							
							Если СтрокаДокумента.ОбъектИзменения = ДанныеТекущейСтроки.ОбъектИзменения Тогда
								ТекущаяСтрока = СтрокаДокумента.ПолучитьИдентификатор();
							Иначе
								
								Для каждого СтрокаОбъекта Из СтрокаДокумента.ПолучитьЭлементы() Цикл
									
									Если СтрокаОбъекта.ОбъектИзменения = ДанныеТекущейСтроки.ОбъектИзменения Тогда
										
										ТекущаяСтрока = СтрокаОбъекта.ПолучитьИдентификатор();
										Прервать;
										
									КонецЕсли; 
									
								КонецЦикла;
								
							КонецЕсли;
							
							Если ТекущаяСтрока <> Неопределено Тогда
								Прервать;
							КонецЕсли; 
							
						КонецЕсли; 
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ТекущаяСтрока <> Неопределено Тогда
					Прервать;
				КонецЕсли; 
					
			КонецЕсли; 
			
		КонецЦикла;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			Элементы.ИзмененияФОТ.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли; 
					
	КонецЕсли; 
	
	НеобходимРасчетФОТ = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьИзмененияФОТ()
	
	Для каждого СтрокаИзмененияФОТ Из ИзмененияФОТ.ПолучитьЭлементы() Цикл
		Элементы.ИзмененияФОТ.Развернуть(СтрокаИзмененияФОТ.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСообщенияЗадания()
	
	СообщенияПользователю = СообщенияФоновогоЗадания(ИдентификаторЗадания);
	Для Каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
		СообщениеФоновогоЗадания.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
