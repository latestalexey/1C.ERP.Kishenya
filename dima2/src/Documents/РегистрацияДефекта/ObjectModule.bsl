#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("СправочникСсылка.ОбъектыЭксплуатации")
		Или ТипДанныхЗаполнения = Тип("СправочникСсылка.УзлыОбъектовЭксплуатации") Тогда
		
		ЗаполнитьДокументНаОснованииОбъектаЭксплуатации(ДанныеЗаполнения);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.РегистрацияДефекта.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ОбъектыЭксплуатации.ОтразитьПериодыАктуальностиОбъектовЭксплуатации(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ЗначенияРеквизитовДоИзменения = Новый Структура("Дата", Дата(1,1,1,0,0,0));
	Если Не ЭтоНовый() Тогда
		ЗначенияРеквизитовДоИзменения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ЗначенияРеквизитовДоИзменения);
	КонецЕсли;
	
	Если ЭтоНовый() Или Дата <> ЗначенияРеквизитовДоИзменения.Дата Тогда
		
		ДатаАктуальности = Дата;
		Если Дата < ДатаАктуальности Тогда
			
			ТекстОшибки = НСтр("ru='Дата документа должна быть не меньше даты сведений объекта ремонта (%Дата%)';uk='Дата документа повинна бути не менше дати відомостей об''єкта ремонту (%Дата%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ДатаАктуальности,"ДЛФ=DDT"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"Дата",
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет документ на основании ссылки на справочник объектов эксплуатации
//
Процедура ЗаполнитьДокументНаОснованииОбъектаЭксплуатации(Знач Основание)
	
	ДефектныеУзлы.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК ОбъектЭксплуатации,
		|	ОбъектыЭксплуатации.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА ОбъектыЭксплуатации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ОбъектыЭксплуатации.ПометкаУдаления КАК ЕстьОшибкиУдален,
		|	ОбъектыЭксплуатации.ЭтоГруппа КАК ЕстьОшибкиГруппа
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	(ОбъектыЭксплуатации.Ссылка = &Ссылка
		|			ИЛИ ОбъектыЭксплуатации.Ссылка В
		|				(ВЫБРАТЬ
		|					Узлы.Владелец
		|				ИЗ
		|					Справочник.УзлыОбъектовЭксплуатации КАК Узлы
		|				ГДЕ
		|					Узлы.Ссылка = &Ссылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Узлы.Ссылка КАК Узел,
		|	Узлы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Узлы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	Узлы.ПометкаУдаления КАК ЕстьОшибкиУдален
		|ИЗ
		|	Справочник.УзлыОбъектовЭксплуатации КАК Узлы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Узлы.Ссылка = &Ссылка
		|				ТОГДА ИСТИНА
		|			КОГДА Узлы.Владелец = &Ссылка
		|				ТОГДА Узлы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбъектовЭксплуатации.ВЭксплуатации)
		|						И НЕ Узлы.ПометкаУдаления
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	ТекстОшибкиГруппа = НСтр("ru='Элемент справочника ""%1"" является группой. Ввод на основании групп справочника запрещен.';uk='Елемент довідника ""%1"" є групою. Введення на підставі груп довідника заборонено.'");
	ТекстОшибкиУдален = НСтр("ru='%1 ""%2"" помечен на удаление. Ввод на основании помеченного на удаление элемента справочника запрещен.';uk='%1 ""%2"" позначений на вилучення. Введення на підставі позначеного на вилучення елемента довідника заборонено.'");
	ТекстОшибкиСтатус = НСтр("ru='%1 ""%2"" находится в статусе ""%3"". Ввод на основании разрешен только в статусе ""В эксплуатации"".';uk='%1 ""%2"" знаходиться в статусі ""%3"". Введення на підставі дозволене тільки в статусі ""В експлуатації"".'");
	
	Пакет = Запрос.ВыполнитьПакет();
	Если Не Пакет[0].Пустой() Тогда
		
		Выборка = Пакет[0].Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ЕстьОшибкиГруппа Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибкиГруппа,
				Выборка.ОбъектЭксплуатации);
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли Выборка.ЕстьОшибкиУдален Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибкиУдален,
				НСтр("ru='Объект эксплуатации';uk='Об''єкт експлуатації'"),
				Выборка.ОбъектЭксплуатации);
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли Выборка.ЕстьОшибкиСтатус Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибкиСтатус,
				НСтр("ru='Объект эксплуатации';uk='Об''єкт експлуатації'"),
				Выборка.ОбъектЭксплуатации,
				Выборка.Статус);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОбъектЭксплуатации = Выборка.ОбъектЭксплуатации;
		
	КонецЕсли;
	
	Если Не Пакет[1].Пустой() Тогда
		Выборка = Пакет[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ЕстьОшибкиУдален Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиУдален,
					НСтр("ru='Узел объекта эксплуатации';uk='Вузол об''єкта експлуатації'"),
					Выборка.Узел);
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли Выборка.ЕстьОшибкиСтатус Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибкиСтатус,
					НСтр("ru='Узел объекта эксплуатации';uk='Вузол об''єкта експлуатації'"),
					Выборка.Узел,
					Выборка.Статус);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			ЭтотОбъект.ДефектныеУзлы.Добавить().Узел = Выборка.Узел;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры // Инициализировать()

Процедура СформироватьСписокРегистровДляКонтроля()
	
	Массив = Новый Массив;
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
