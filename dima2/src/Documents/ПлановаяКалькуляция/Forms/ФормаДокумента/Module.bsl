&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ИнициализироватьРасчетПоФормуле();
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем Действие;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ВыбранноеЗначение.Свойство("Действие", Действие);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ПлановаяКалькуляция.Форма.ФормаВводаОбластиДействия" И Действие = "ВводОбластиДействия" Тогда
		
		Модифицированность = Истина;
		ЗначениеВыбора = ВыбранноеЗначение.ЗначениеВыбора;
		
		ВыборОбластиДействияНаСервере(ЗначениеВыбора);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПлановаяКалькуляция.Форма.ВыборПозицииЗаказаНаПроизводство" И Действие = "ВыборПозиции" Тогда
		
		Модифицированность = Истина;
		ЗначениеВыбора = ВыбранноеЗначение.ЗначениеВыбора;
		
		Объект.ДействиеКалькуляции.Очистить();
		НоваяСтрока = Объект.ДействиеКалькуляции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеВыбора);
		ЗаказНаПроизводство = ЗначениеВыбора.Объект;
		КодСтрокиЗаказаНаПроизводство = ЗначениеВыбора.КодСтрокиЗаказаНаПроизводство;
		
		ЗаполнитьРеквизитыПредставленияОбластиДействия();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПлановаяКалькуляция.Форма.ФормаВводаОбластиДействия" И Действие = "ЗаполнениеПоПозиции" Тогда
		
		Модифицированность = Истина;
		ЗначениеВыбора = ВыбранноеЗначение.ЗначениеВыбора;
		
		ЗаполнитьПоСпецификацииЗаказаНаСервере(ЗначениеВыбора.ЗаказНаПроизводство, ЗначениеВыбора.КодСтроки);
		
		ОбновитьИтогиТекущейТаблицы();
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ФормаВыбора" Тогда
		
		Модифицированность = Истина;
		ЗаполнитьДокументПоСпецификации(ВыбранноеЗначение, КэшированныеЗначения);
		
		ОбновитьИтогиТекущейТаблицы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СообщениеКалькуляцииОшибка = НСтр("ru='Формула в строке %1 списка ""Статьи калькуляции"" содержит ошибки.';uk='Формула у рядку %1 списку ""Статті калькуляції"" містить помилки.'");
	СообщениеРасходыОшибка = НСтр("ru='Формула в строке %1 списка ""Статьи расходов"" содержит ошибки.';uk='Формула у рядку %1 списку ""Статті витрат"", містить помилки.'");
	
	СообщениеКалькуляцииНеЗаполнено = НСтр("ru='Не заполнена формула в строке %1 списка ""Статьи калькуляции"".';uk='Не заповнена формула у рядку %1 списку ""Статті калькуляції"".'");
	СообщениеРасходыНеЗаполнено = НСтр("ru='Не заполнена формула в строке %1 списка ""Статьи расходов"".';uk='Не заповнена формула у рядку %1 списку ""Статті витрат"".'");
	
	СтруктураОтбора = Новый Структура("СпособРасчета", Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоФормуле);
	НайденныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(СтруктураОтбора);
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Формула) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеКалькуляцииНеЗаполнено, Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.СтатьиКалькуляции", Строка.НомерСтроки, "Формула"),
				,
				Отказ);
		КонецЕсли;
		
		Если Строка.ФормулаСодержитОшибки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеКалькуляцииОшибка, Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.СтатьиКалькуляции", Строка.НомерСтроки, "Формула"),
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура("РасчетПоФормуле", Истина);
	НайденныеСтроки = Объект.СтатьиРасходов.НайтиСтроки(СтруктураОтбора);
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Формула) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеРасходыНеЗаполнено, Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.СтатьиРасходов", Строка.НомерСтроки, "Формула"),
				,
				Отказ);
		КонецЕсли;
		
		Если Строка.ФормулаСодержитОшибки Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеРасходыОшибка, Строка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.СтатьиРасходов", Строка.НомерСтроки, "Формула"),
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизитыФормы();
	ЗаполнитьРеквизитыПредставленияОбластиДействия();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.КраткийСоставДокумента = "";
	
	Для Каждого Строка Из Объект.ДействиеКалькуляции Цикл
		
		Если Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.ЗаказНаПроизводство Тогда
			Представление = Строка.ПредставлениеПозицииЗаказа;
		Иначе
			Представление = Строка(Строка.Объект);
		КонецЕсли;
		
		Если СтрДлина(ТекущийОбъект.КраткийСоставДокумента + Представление) < 100 Тогда
			
			Если ЗначениеЗаполнено(ТекущийОбъект.КраткийСоставДокумента) Тогда
				ТекущийОбъект.КраткийСоставДокумента = ТекущийОбъект.КраткийСоставДокумента + "; " + Представление;
			Иначе
				ТекущийОбъект.КраткийСоставДокумента = Представление;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущийОбъект.КраткийСоставДокумента) Тогда
				ТекущийОбъект.КраткийСоставДокумента = ТекущийОбъект.КраткийСоставДокумента + "; ...";
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектКалькуляцииПриИзменении(Элемент)
	
	ОбъектКалькуляцииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоОбъектовПриИзменении(Элемент)
	
	НесколькоОбъектовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьХарактеристикуПриИзменении(Элемент)
	
	Если Не УказатьХарактеристику Тогда
		Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		Объект.ДействиеКалькуляции[0].Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		Объект.ДействиеКалькуляции[0].ИспользоватьХарактеристику = Ложь;
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='Любая';uk='Будь-яка'");
	Иначе
		Объект.ДействиеКалькуляции[0].ИспользоватьХарактеристику = Истина;
		Элементы.Характеристика.ПодсказкаВвода = "";
	КонецЕсли;
	
	Элементы.Характеристика.Доступность = УказатьХарактеристику;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	Объект.ДействиеКалькуляции.Очистить();
	НоваяСтрока = Объект.ДействиеКалькуляции.Добавить();
	НоваяСтрока.Объект = Номенклатура;
	НоваяСтрока.Характеристика = Характеристика;
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПриИзменении(Элемент)
	
	Объект.ДействиеКалькуляции.Очистить();
	
	Если ЗначениеЗаполнено(Спецификация) Тогда
		НоваяСтрока = Объект.ДействиеКалькуляции.Добавить();
		НоваяСтрока.Объект = Спецификация;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоПриИзменении(Элемент)
	
	Объект.ДействиеКалькуляции.Очистить();
	
	Если ЗначениеЗаполнено(ПредставлениеПозицииЗаказа) Тогда
		ПредставлениеПозицииЗаказа = ПредставлениеПозицииЗаказаИсходное;
		НоваяСтрока = Объект.ДействиеКалькуляции.Добавить();
		НоваяСтрока.Объект = ЗаказНаПроизводство;
		НоваяСтрока.КодСтрокиЗаказаНаПроизводство = КодСтрокиЗаказаНаПроизводство;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Документ, Действие", Объект.Ссылка, "ВыборПозиции");
	ОткрытьФорму("Документ.ПлановаяКалькуляция.Форма.ВыборПозицииЗаказаНаПроизводство", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ДействиеКалькуляции.Количество() > 0 Тогда
		ПоказатьЗначение(Неопределено, Объект.ДействиеКалькуляции[0].Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализироватьСтатьиКалькуляцииПриИзменении(Элемент)
	
	Если Не Объект.ДетализироватьСтатьиКалькуляции Тогда
		
		ДетальныеЗаписи = ДетальныеЗаписиПоСтатье();
		
		Если ДетальныеЗаписи <> Неопределено Тогда
			ТекстВопроса = НСтр("ru='Детальные записи по статьям калькуляции будут удалены. Продолжить?';uk='Детальні записи по статтях калькуляції будуть видалені. Продовжити?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ДетализироватьСтатьиКалькуляцииПриИзмененииЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДетализироватьСтатьиКалькуляцииПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДетализироватьСтатьиКалькуляцииПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Объект.ДетализироватьСтатьиКалькуляции = Истина;
        Возврат;
    КонецЕсли;
    
    ДетализироватьСтатьиКалькуляцииПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДетализироватьСтатьиКалькуляцииПриИзмененииФрагмент()
    
    Перем НайденныеСтроки, ОтборСпособРасчета, Строка;
    
    Объект.ВозвратныеОтходы.Очистить();
    Объект.МатериалыИУслуги.Очистить();
    Объект.Трудозатраты.Очистить();
    Объект.СтатьиРасходов.Очистить();
    
    ОтборСпособРасчета = Новый Структура("СпособРасчета", ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям"));
    НайденныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСпособРасчета);
    
    Для Каждого Строка Из НайденныеСтроки Цикл
        Строка.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ФиксированнымЗначением");
    КонецЦикла;
    
    УстановитьВидимостьПоПризнакуДетализации();

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОбластиДействияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Действие", "ВводОбластиДействия");
	ПараметрыФормы.Вставить("АдресВХранилище", ДействиеКалькуляцииВХранилище());
	ПараметрыФормы.Вставить("КалькуляционнаяЕдиница", Объект.КалькуляционнаяЕдиница);
	ПараметрыФормы.Вставить("ОбъектКалькуляции", Объект.ОбъектКалькуляции);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ПлановаяКалькуляция.Форма.ФормаВводаОбластиДействия", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОрганизациюПриИзменении(Элемент)
	
	Если Не Объект.ИспользоватьОрганизацию Тогда
		Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Элементы.Организация.ПодсказкаВвода = НСтр("ru='Любая';uk='Будь-яка'");
	Иначе
		Элементы.Организация.ПодсказкаВвода = "";
	КонецЕсли;
	
	Элементы.Организация.Доступность = Объект.ИспользоватьОрганизацию;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатьиКалькуляции

&НаКлиенте
Процедура СтатьиКалькуляцииСпособРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтатьиКалькуляции.ТекущиеДанные;
	
	ТекущиеДанные.ФормулаСодержитОшибки = Ложь;
	ТекущиеДанные.Формула = "";
	
	Если Не Объект.ДетализироватьСтатьиКалькуляции
		Или ТекущиеДанные.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям")
		Или Не ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		Возврат;
	КонецЕсли;
	
	ДетальныеЗаписи = ДетальныеЗаписиПоСтатье(ТекущиеДанные.СтатьяКалькуляции);
	
	Если ДетальныеЗаписи <> Неопределено Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Документ содержит детальные записи по статье калькуляции ""%1"".
                                        |При установке способа расчета ""%2"" детальные записи будут удалены. 
                                        |Продолжить?'
                                        |;uk='Документ містить детальні записи по статті калькуляції ""%1"".
                                        |При встановленні способу розрахунку ""%2"" детальні записи будуть видалені. 
                                        |Продовжити?'"),
							ТекущиеДанные.СтатьяКалькуляции,
							ТекущиеДанные.СпособРасчета);
							
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатьиКалькуляцииСпособРасчетаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ДетальныеЗаписи, ТекущиеДанные", ДетальныеЗаписи, ТекущиеДанные));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииСпособРасчетаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ДетальныеЗаписи = ДополнительныеПараметры.ДетальныеЗаписи;
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        ТекущиеДанные.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям");
		Возврат;
    КонецЕсли;
        
    Для Каждого Строка Из ДетальныеЗаписи.Отходы Цикл
        Объект.ВозвратныеОтходы.Удалить(Объект.ВозвратныеОтходы.НайтиПоИдентификатору(Строка));
    КонецЦикла;
    
    Для Каждого Строка Из ДетальныеЗаписи.Материалы Цикл
        Объект.МатериалыИУслуги.Удалить(Объект.МатериалыИУслуги.НайтиПоИдентификатору(Строка));
    КонецЦикла;
    
    Для Каждого Строка Из ДетальныеЗаписи.Трудозатраты Цикл
        Объект.Трудозатраты.Удалить(Объект.Трудозатраты.НайтиПоИдентификатору(Строка));
    КонецЦикла;
    
    Для Каждого Строка Из ДетальныеЗаписи.Статьи Цикл
        Объект.СтатьиРасходов.Удалить(Объект.СтатьиРасходов.НайтиПоИдентификатору(Строка));
    КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СтатьиКалькуляции.ТекущиеДанные;
	
	АдресВХранилище = БазовыеСтатьиКалькуляцииВХранилище(ТекущиеДанные.СтатьяКалькуляции);
	
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("Формула", ТекущиеДанные.Формула);
	ПараметрыРедактирования.Вставить("Операнды", АдресВХранилище);
	ПараметрыРедактирования.Вставить("ОперандыЗаголовок", НСтр("ru='Статьи калькуляции';uk='Статті калькуляції'"));
	ПараметрыРедактирования.Вставить("Операторы", АдресХранилищаДереваОператоров);
	
	РезультатРедактирования = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыРедактирования, Элементы.СтатьиКалькуляцииФормула,,,, Новый ОписаниеОповещения("СтатьиКалькуляцииФормулаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииФормулаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    РезультатРедактирования = Результат;
    
    Если РезультатРедактирования <> Неопределено Тогда
        ТекущиеДанные.Формула = РезультатРедактирования;
        ТекущиеДанные.ФормулаСодержитОшибки = Ложь;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.СтатьиКалькуляции.ТекущиеДанные;
		
		Если Объект.ДетализироватьСтатьиКалькуляции Тогда
			ТекущиеДанные.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям");
		Иначе
			ТекущиеДанные.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ФиксированнымЗначением");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.СтатьиКалькуляции.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		СтруктураОтбора = Новый Структура("СтатьяКалькуляции", ТекущиеДанные.СтатьяКалькуляции);
		НайденныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			Если Не ОтменаРедактирования Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Статья калькуляции ""%1"" уже содержится в списке!';uk='Стаття калькуляції ""%1"" вже міститься в списку!'"),
				ТекущиеДанные.СтатьяКалькуляции);
				
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
				Отказ = Истина;
			Иначе
				ТекущиеДанные.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
				ТекущиеДанные.Идентификатор = "";
				ТекущиеДанные.СтрокаИзменена = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.СтатьиКалькуляции.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.СтрокаИзменена = Истина;
		СтатьиКалькуляцииСтатьяКалькуляцииПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СтатьиКалькуляции.ТекущиеДанные;
	
	Если Не Объект.ДетализироватьСтатьиКалькуляции
		Или ТекущиеДанные.СпособРасчета <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям") Тогда
		Возврат;
	КонецЕсли;
	
	ДетальныеЗаписи = ДетальныеЗаписиПоСтатье(ТекущиеДанные.СтатьяКалькуляции);
	
	Если ДетальныеЗаписи <> Неопределено Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По статье калькуляции ""%1"" введены детальные записи. 
                                    |Удаление строки приведет к удалению детальных записей. 
                                    |Удалить строку?'
                                    |;uk='По статті калькуляції ""%1"" введені детальні записи. 
                                    |Вилучення рядка призведе до вилучення детальних записів. 
                                    |Вилучити рядок?'"),
						ТекущиеДанные.СтатьяКалькуляции);
			
		ДопПараметры = Новый Структура("ДетальныеЗаписи, ИдентификаторСтроки", ДетальныеЗаписи, ТекущиеДанные.ПолучитьИдентификатор());
		ОписаниеОповещения = Новый ОписаниеОповещения("СтатьиКалькуляцииПередУдалениемЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиКалькуляцииПослеУдаления(Элемент)
	
	РассчитатьТаблицуСтатейКалькуляции();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВозвратныеОтходы

&НаКлиенте
Процедура ВозвратныеОтходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ВозвратныеОтходыЦена Тогда
		
		ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""';uk='Для редагування ціни виберіть вид ціни ""<довільна>""'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ВозвратныеОтходы", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		ОбновитьИтогиПоСтатьеКалькуляции("Отходы", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	Иначе
		ОбновитьИтогиПоСтатьеКалькуляции("Отходы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		ТекущиеДанные.ВидЦены = Объект.ВидЦены;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьЗависимыеИтогиПоТабличнымЧастям();
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		ОбновитьИтогиПоСтатьеКалькуляции("Отходы", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	Иначе
		ОбновитьИтогиПоСтатьеКалькуляции("Отходы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	СтруктураЗаполненияВидаЦены = Новый Структура;
	СтруктураЗаполненияВидаЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", СтруктураЗаполненияВидаЦены);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "ВыходныеИзделия"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущиеДанные.Количество);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСтатьяКалькуляцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	ЗапросИзмененияСпособаРасчета(Неопределено, ТекущиеДанные, НСтр("ru='возвратных отходов';uk='зворотних відходів'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратныеОтходыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИУслуги

&НаКлиенте
Процедура МатериалыИУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.МатериалыИУслугиЦена Тогда
		
		ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""';uk='Для редагування ціни виберіть вид ціни ""<довільна>""'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.МатериалыИУслуги", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		ОбновитьИтогиПоСтатьеКалькуляции("Материалы", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	Иначе
		ОбновитьИтогиПоСтатьеКалькуляции("Материалы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
		ТекущиеДанные.ВидЦены = Объект.ВидЦены;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта", Объект.Валюта);
	
	СтруктураЗаполненияВидаЦены = Новый Структура;
	СтруктураЗаполненияВидаЦены.Вставить("ВидЦены", Объект.ВидЦены);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьВидЦены", СтруктураЗаполненияВидаЦены);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИУслуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущиеДанные.Количество);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",   Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиСтатьяКалькуляцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	ЗапросИзмененияСпособаРасчета(Неопределено, ТекущиеДанные, НСтр("ru='материалов';uk='матеріалів'"));
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьЗависимыеИтогиПоТабличнымЧастям();
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		ОбновитьИтогиПоСтатьеКалькуляции("Материалы", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	Иначе
		ОбновитьИтогиПоСтатьеКалькуляции("Материалы");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИУслугиКалькуляцияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЦеныПоКалькуляцииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Калькуляция) И ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
		ТекущиеДанные.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		ОбновитьИтогиПоСтатьеКалькуляции("Трудозатраты", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	Иначе
		ОбновитьИтогиПоСтатьеКалькуляции("Трудозатраты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьЗависимыеИтогиПоТабличнымЧастям();
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		ОбновитьИтогиПоСтатьеКалькуляции("Трудозатраты", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	Иначе
		ОбновитьИтогиПоСтатьеКалькуляции("Трудозатраты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыВидРаботПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	
	РассчитатьТрудозатратыПоРасценкам(Идентификаторы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Расценка;
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыРасценкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Расценка;
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыРабот.ТекущиеДанные;
	
	Если ТекущиеДанные.Расценка > 0 Тогда
		ТекущиеДанные.Количество = ТекущиеДанные.Сумма / ТекущиеДанные.Расценка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСтатьяКалькуляцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	ЗапросИзмененияСпособаРасчета(Неопределено, ТекущиеДанные, НСтр("ru='трудозатрат';uk='трудовитрат'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатьиРасходов

&НаКлиенте
Процедура СтатьиРасходовСтатьяРасходовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СтатьяРасходов) Тогда
		СтатьиРасходовСтатьяРасходовПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		ОбновитьИтогиПоСтатьеКалькуляции("Статьи", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	Иначе
		ОбновитьИтогиПоСтатьеКалькуляции("Статьи");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьЗависимыеИтогиПоТабличнымЧастям();
	ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
		ОбновитьИтогиПоСтатьеКалькуляции("Статьи", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
	Иначе
		ОбновитьИтогиПоСтатьеКалькуляции("Статьи");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовФормулаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
	
	АдресВХранилище = БазовыеСтатьиКалькуляцииВХранилище(ТекущиеДанные.СтатьяКалькуляции);
	
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("Формула", ТекущиеДанные.Формула);
	ПараметрыРедактирования.Вставить("Операнды", АдресВХранилище);
	ПараметрыРедактирования.Вставить("ОперандыЗаголовок", НСтр("ru='Статьи калькуляции';uk='Статті калькуляції'"));
	ПараметрыРедактирования.Вставить("Операторы", АдресХранилищаДереваОператоров);
	
	РезультатРедактирования = Неопределено;

	
	ОткрытьФорму("ОбщаяФорма.КонструкторФормул", ПараметрыРедактирования, Элементы.СтатьиКалькуляцииФормула,,,, Новый ОписаниеОповещения("СтатьиРасходовФормулаНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовФормулаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    РезультатРедактирования = Результат;
    
    Если РезультатРедактирования <> Неопределено Тогда
        
        ТекущиеДанные.Формула = РезультатРедактирования;
        РассчитатьСуммуСтатьиРасходов(ТекущиеДанные.ПолучитьИдентификатор());
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовСтатьяКалькуляцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
	ЗапросИзмененияСпособаРасчета(Новый ОписаниеОповещения("СтатьиРасходовСтатьяКалькуляцииПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные)), ТекущиеДанные, НСтр("ru='статей расходов';uk='статей витрат'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовСтатьяКалькуляцииПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    Если ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
        СтатьиРасходовСтатьяКалькуляцииПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовФормулаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
	
	РассчитатьСуммуСтатьиРасходов(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовРасчетПоФормулеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
	Если Не ТекущиеДанные.РасчетПоФормуле Тогда
		ТекущиеДанные.Формула = "";
		ТекущиеДанные.ФормулаСодержитОшибки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтотОбъект, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтотОбъект, РезультатВыполнения);
	КонецЕсли;
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.ДатаНачалаДействия;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончанияДействия;
	
	Диалог.Показать(Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если Период <> Неопределено Тогда
		
		Объект.ДатаНачалаДействия    = Диалог.Период.ДатаНачала;
		Объект.ДатаОкончанияДействия = Диалог.Период.ДатаОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурснойСпецификации(Команда)
	
	Если Объект.СтатьиКалькуляции.Количество() > 0 Тогда
		Если Объект.ДетализироватьСтатьиКалькуляции Тогда
			ТекстВопроса = НСтр("ru='Таблицы документа будут перезаполнены. Продолжить?';uk='Таблиці документа будуть переповнені сьогодні. Продовжити?'");
		Иначе
			ТекстВопроса = НСтр("ru='Таблица ""Статьи калькуляции"" будет перезаполнена. Продолжить?';uk='Таблиця ""Статті калькуляції"" буде перезаполнена. Продовжити?'");
		КонецЕсли;
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоРесурснойСпецификацииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоРесурснойСпецификацииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурснойСпецификацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗаполнитьПоРесурснойСпецификацииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРесурснойСпецификацииФрагмент()
    
    Перем МассивСпецификаций, ПараметрыФормы, Строка;
    
    ПараметрыФормы = Новый Структура;
    
    Если Объект.ОбъектКалькуляции = ПредопределенноеЗначение("Перечисление.ОбъектыКалькуляции.Изделие")
        И Объект.ДействиеКалькуляции.Количество() > 0 Тогда
        ПараметрыФормы.Вставить("ОтборИзделие", Объект.ДействиеКалькуляции[0].Объект);
        
    ИначеЕсли Объект.ОбъектКалькуляции = ПредопределенноеЗначение("Перечисление.ОбъектыКалькуляции.РесурснаяСпецификация")
        И Объект.ДействиеКалькуляции.Количество() > 0 Тогда
        
        МассивСпецификаций = Новый Массив;
        
        Для Каждого Строка Из Объект.ДействиеКалькуляции Цикл
            МассивСпецификаций.Добавить(Строка.Объект);
        КонецЦикла;
        
        ПараметрыФормы.Вставить("ОтборСписокСпецификаций", Истина);
        ПараметрыФормы.Вставить("МассивСпецификаций", МассивСпецификаций);
        
    ИначеЕсли Объект.ОбъектКалькуляции = ПредопределенноеЗначение("Перечисление.ОбъектыКалькуляции.ЗаказНаПроизводство")
        И Объект.ДействиеКалькуляции.Количество() > 0 Тогда
        
        МассивСпецификаций = СпецификацииДокумента();
        
        ПараметрыФормы.Вставить("ОтборСписокСпецификаций", Истина);
        ПараметрыФормы.Вставить("МассивСпецификаций", МассивСпецификаций);
        
    КонецЕсли;
    
    ОткрытьФорму("Справочник.РесурсныеСпецификации.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.МатериалыИУслуги.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены';uk='В документі не заповнена таблиця %ПредставлениеТабличнойЧасти%. Ціни не можуть бути заповнені'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", НСтр("ru='Материалы и работы';uk='Матеріали та роботи'"));
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ЦенаВключаетНДС", Истина);
	СтруктураОтбора.Вставить("Валюта", Объект.Валюта);
	
	ВидЦен = Неопределено;

	
	ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора", СтруктураОтбора,,,,, Новый ОписаниеОповещения("МатериалыЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЗаполнитьЦеныПоВидуЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВидЦен = Результат;
    
    Если ЗначениеЗаполнено(ВидЦен) Тогда
        
        ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер("МатериалыИУслуги", ВидЦен);
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
        
    КонецЕсли;
    
    ОбновитьИтогиТекущейТаблицы();

КонецПроцедуры

&НаКлиенте
Процедура ОтходыЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если Объект.ВозвратныеОтходы.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены';uk='В документі не заповнена таблиця %ПредставлениеТабличнойЧасти%. Ціни не можуть бути заповнені'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", НСтр("ru='Возвратные отходы';uk='Зворотні відходи'"));
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ЦенаВключаетНДС", Истина);
	СтруктураОтбора.Вставить("Валюта", Объект.Валюта);
	
	ВидЦен = Неопределено;

	
	ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора", СтруктураОтбора,,,,, Новый ОписаниеОповещения("ОтходыЗаполнитьЦеныПоВидуЦенЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтходыЗаполнитьЦеныПоВидуЦенЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВидЦен = Результат;
    
    Если ЗначениеЗаполнено(ВидЦен) Тогда
        ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер("ВозвратныеОтходы", ВидЦен);
        ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
    КонецЕсли;
    
    ОбновитьИтогиТекущейТаблицы();

КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьРасценки(Команда)
	
	Если Объект.Трудозатраты.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Расценки не могут быть заполнены';uk='В документі не заповнена таблиця %ПредставлениеТабличнойЧасти%. Розцінки не можуть бути заповнені'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Трудозатраты");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	Для Каждого Строка Из Элементы.Трудозатраты.ВыделенныеСтроки Цикл
		Идентификаторы.Добавить(Строка);
	КонецЦикла;
	
	РассчитатьТрудозатратыПоРасценкам(Идентификаторы);
	
	ПоказатьОповещениеПользователя(
	НСтр("ru='Расценки заполнены';uk='Розцінки заповнені'"),
	,
	НСтр("ru='Текущие расценки на виды работ заполнены';uk='Поточні розцінки на види робіт заповнені'"),
	БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗаказа(Команда)
	
	Если Объект.ДействиеКалькуляции.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбрана позиция заказа';uk='Не вибрана позиція замовлення'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.СтатьиКалькуляции.Количество() > 0 Тогда
		Если Объект.ДетализироватьСтатьиКалькуляции Тогда
			ТекстВопроса = НСтр("ru='Таблицы документа будут перезаполнены. Продолжить?';uk='Таблиці документа будуть переповнені сьогодні. Продовжити?'");
		Иначе
			ТекстВопроса = НСтр("ru='Таблица ""Статьи калькуляции"" будет перезаполнена. Продолжить?';uk='Таблиця ""Статті калькуляції"" буде перезаполнена. Продовжити?'");
		КонецЕсли;
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоСпецификацииЗаказаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоСпецификацииЗаказаФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗаказаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ЗаполнитьПоСпецификацииЗаказаФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСпецификацииЗаказаФрагмент()
    
    Перем ДанныеПозиции, ПараметрыФормы;
    
    Если Объект.ДействиеКалькуляции.Количество() = 1 Тогда
        ДанныеПозиции = Объект.ДействиеКалькуляции[0];
        ЗаполнитьПоСпецификацииЗаказаНаСервере(ДанныеПозиции.Объект, ДанныеПозиции.КодСтрокиЗаказаНаПроизводство);
    ИначеЕсли Объект.ДействиеКалькуляции.Количество() > 1 Тогда
        
        ПараметрыФормы = Новый Структура;
        
        ПараметрыФормы.Вставить("Действие", "ЗаполнениеПоПозиции");
        ПараметрыФормы.Вставить("РежимВыбора", Истина);
        ПараметрыФормы.Вставить("АдресВХранилище", ДействиеКалькуляцииВХранилище());
        ПараметрыФормы.Вставить("КалькуляционнаяЕдиница", Объект.КалькуляционнаяЕдиница);
        ПараметрыФормы.Вставить("ОбъектКалькуляции", Объект.ОбъектКалькуляции);
        ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
        
        ОткрытьФорму("Документ.ПлановаяКалькуляция.Форма.ФормаВводаОбластиДействия", ПараметрыФормы, ЭтаФорма);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ЗаполнитьПлановыеКалькуляции(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.МатериалыИУслуги.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='В таблице ""Материалы и работы"" не выбрано ни одной строки. Калькуляции и цены не могут быть заполнены';uk='В таблиці ""Матеріали і роботи"" не вибрано жодного рядка. Калькуляції і ціни не можуть бути заповнені'");
		ПоказатьПредупреждение( , ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПлановыеКалькуляцииИЦеныНаСервере(ВыделенныеСтроки);
	
	ОбновитьИтогиТекущейТаблицы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область Инициализация

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ввод формулы доступен только для способа расчета По формуле
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьиКалькуляцииФормула.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатьиКалькуляции.СпособРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоФормуле;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактуальногоСписка);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>';uk='<не потрібно>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// характеристика для материалов
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "МатериалыИУслугиХарактеристика",
																		     "Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
																			 
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																	"МатериалыИУслугиНоменклатураЕдиницаИзмерения",
																	"Объект.МатериалыИУслуги.Упаковка");
	
	// любая характеристика для материалов, если материал указан
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));
	
	// любая характеристика для материалов, если материал не указан
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));
	
	// любой материал
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая номенклатура>';uk='<будь-яка номенклатура>'"));
	
	// характеристика для отходов
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ВозвратныеОтходыХарактеристика",
																		     "Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");
																			 
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																		 	"ВозвратныеОтходыНоменклатураЕдиницаИзмерения",
																	     	"Объект.ВозвратныеОтходы.Упаковка");

	// любая характеристика для отхода, если отход указан
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));
	
	// любая характеристика для отхода, если отход не указан
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая характеристика>';uk='<будь-яка характеристика>'"));
	
	// любой материал
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любая номенклатура>';uk='<будь-яка номенклатура>'"));
	
	// формула доступна, если установлен признак расчета по формуле
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьиРасходовФормула.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатьиРасходов.РасчетПоФормуле");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// сумма доступна, если не установлен признак расчета по формуле
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьиРасходовСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатьиРасходов.РасчетПоФормуле");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// любой вид работ
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыВидРабот.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ВидРабот");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<любой вид работ>';uk='<будь-який вид робіт>'"));
	
	// ошибки в формлулах выделяются красным (СтатьиКалькуляции)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьиКалькуляцииФормула.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатьиКалькуляции.ФормулаСодержитОшибки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);
	
	// ошибки в формлулах выделяются красным (СтатьиРасходов)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьиРасходовФормула.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатьиРасходов.ФормулаСодержитОшибки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);

	// сумма по статьям не требует заполнения, если собирается по детальным записям или формуле
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатьиКалькуляцииСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СтатьиКалькуляции.СпособРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям);
	СписокЗначений.Добавить(Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоФормуле);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// произвольный вид цены для возвратных отходов
	
	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма, "ВозвратныеОтходыВидЦены", "Объект.ВозвратныеОтходы.ВидЦены");
	
	// произвольный вид цены для материалов
	
	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма, "МатериалыИУслугиВидЦены", "Объект.МатериалыИУслуги.ВидЦены");
	
	// цена и сумма только для просмотра, если указан вид цены (МатериалыИУслуги)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// цена и сумма только для просмотра, если указан вид цены (ВозвратныеОтходы)
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыЦена.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВозвратныеОтходыСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВозвратныеОтходы.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// вид цены только для просмотра, если выбрана плановая калькуляция
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИУслугиВидЦены.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИУслуги.Калькуляция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастроитьПараметрыВыбораВидаЦен();
	
	ЗаполнитьСлужебныеРеквизитыФормы();
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия();
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	
	
	УстановитьВидимостьПоПризнакуДетализации();
	
	УстановитьВидимостьПоОбъектуКалькуляции();
	
	Элементы.Организация.Доступность = Объект.ИспользоватьОрганизацию;
	
	Если Не Объект.ИспользоватьОрганизацию Тогда
		Элементы.Организация.ПодсказкаВвода = НСтр("ru='Любая';uk='Будь-яка'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормы()
	
	Валюта = Объект.Валюта;
	
	ЗаполнитьБазовыеСтатьиКалькуляции();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПредставленияОбластиДействия(ОчиститьСлужебныеРеквизиты = Ложь)
	
	Если ОчиститьСлужебныеРеквизиты Тогда
		ОчиститьСлужебныеРеквизиты();
	КонецЕсли;
	
	Если Объект.ДействиеКалькуляции.Количество() > 1 Тогда
		НесколькоОбъектов = Истина;
	КонецЕсли;
	
	Документы.ПлановаяКалькуляция.ЗаполнитьПредставленияОбъектовКалькуляции(
		Объект.ДействиеКалькуляции,
		Объект.ОбъектКалькуляции,
		НесколькоОбъектов,
		ПредставлениеОбщее,
		Элементы.НесколькоОбъектов.Заголовок);
	
	Если Объект.ДействиеКалькуляции.Количество() = 1 Тогда
		
		Строка = Объект.ДействиеКалькуляции[0];
		Если Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.Изделие Тогда
			Номенклатура = Строка.Объект;
			Характеристика = Строка.Характеристика;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Характеристика);
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Номенклатура",	Номенклатура);
			СтруктураСтроки.Вставить("Характеристика",	Характеристика);
			СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ХарактеристикиИспользуются);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, Неопределено);
			
			ХарактеристикиИспользуются = СтруктураСтроки.ХарактеристикиИспользуются;
			Характеристика = СтруктураСтроки.Характеристика;
			УказатьХарактеристику = ЗначениеЗаполнено(Характеристика);
			
		ИначеЕсли Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.РесурснаяСпецификация Тогда
			Спецификация = Строка.Объект;
			СведенияОбИзделиях = Строка.СведенияОбИзделиях;
		Иначе
			ПредставлениеПозицииЗаказа = Строка.ПредставлениеПозицииЗаказа;
			ПредставлениеПозицииЗаказаИсходное = Строка.ПредставлениеПозицииЗаказа;
			ЗаказНаПроизводство = Строка.Объект;
			КодСтрокиЗаказаНаПроизводство = Строка.КодСтрокиЗаказаНаПроизводство;
			СведенияОбИзделиях = Строка.СведенияОбИзделиях;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.Изделие И Объект.ДействиеКалькуляции.Количество() > 0 Тогда
		ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДействиеКалькуляции[0].Объект, "ЕдиницаИзмерения");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИмяТабличнойЧасти = Неопределено, Идентификатор = Неопределено)
	
	Если ИмяТабличнойЧасти = Неопределено Или ИмяТабличнойЧасти = "СтатьиКалькуляции" Тогда
		
		ШаблонПредставленияЗаголовок = НСтр("ru='По статье калькуляции ""%1"" указано позиций';uk='По статті калькуляції ""%1"" зазначено позицій'");
		ШаблонПредставленияОтходы = НСтр("ru='отходов: %1';uk='відходів: %1'");
		ШаблонПредставленияМатериалы = НСтр("ru='материалов: %1';uk='матеріалів: %1'");
		ШаблонПредставленияТрудозатраты = НСтр("ru='трудозатрат: %1';uk='трудовитрат: %1'");
		ШаблонПредставленияСтатьи = НСтр("ru='постатейных расходов: %1';uk='постатейних витрат: %1'");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиКалькуляции.СтатьяКалькуляции КАК СтатьяКалькуляции
		|ПОМЕСТИТЬ ВТСтатьиКалькуляции
		|ИЗ
		|	&СтатьиКалькуляции КАК СтатьиКалькуляции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Отходы.СтатьяКалькуляции,
		|	Отходы.НомерСтроки
		|ПОМЕСТИТЬ ВТОтходы
		|ИЗ
		|	&Отходы КАК Отходы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Материалы.СтатьяКалькуляции,
		|	Материалы.НомерСтроки
		|ПОМЕСТИТЬ ВТМатериалы
		|ИЗ
		|	&Материалы КАК Материалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Трудозатраты.СтатьяКалькуляции,
		|	Трудозатраты.НомерСтроки
		|ПОМЕСТИТЬ ВТТрудозатраты
		|ИЗ
		|	&Трудозатраты КАК Трудозатраты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Статьи.СтатьяКалькуляции,
		|	Статьи.НомерСтроки
		|ПОМЕСТИТЬ ВТСтатьи
		|ИЗ
		|	&Статьи КАК Статьи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСтатьиКалькуляции.СтатьяКалькуляции,
		|	КОЛИЧЕСТВО(Различные ВТМатериалы.НомерСтроки) КАК Материалы,
		|	КОЛИЧЕСТВО(Различные ВТОтходы.НомерСтроки) КАК Отходы,
		|	КОЛИЧЕСТВО(Различные ВТСтатьи.НомерСтроки) КАК Статьи,
		|	КОЛИЧЕСТВО(Различные ВТТрудозатраты.НомерСтроки) КАК Трудозатраты,
		|	ВТСтатьиКалькуляции.СтатьяКалькуляции.Идентификатор КАК Идентификатор
		|ИЗ
		|	ВТСтатьиКалькуляции КАК ВТСтатьиКалькуляции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтходы КАК ВТОтходы
		|		ПО ВТСтатьиКалькуляции.СтатьяКалькуляции = ВТОтходы.СтатьяКалькуляции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМатериалы КАК ВТМатериалы
		|		ПО ВТСтатьиКалькуляции.СтатьяКалькуляции = ВТМатериалы.СтатьяКалькуляции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТрудозатраты КАК ВТТрудозатраты
		|		ПО ВТСтатьиКалькуляции.СтатьяКалькуляции = ВТТрудозатраты.СтатьяКалькуляции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьи КАК ВТСтатьи
		|		ПО ВТСтатьиКалькуляции.СтатьяКалькуляции = ВТСтатьи.СтатьяКалькуляции
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСтатьиКалькуляции.СтатьяКалькуляции,
		|	ВТСтатьиКалькуляции.СтатьяКалькуляции.Идентификатор");
		
		Запрос.УстановитьПараметр("СтатьиКалькуляции", Объект.СтатьиКалькуляции.Выгрузить());
		Запрос.УстановитьПараметр("Отходы", Объект.ВозвратныеОтходы.Выгрузить());
		Запрос.УстановитьПараметр("Материалы", Объект.МатериалыИУслуги.Выгрузить());
		Запрос.УстановитьПараметр("Трудозатраты", Объект.Трудозатраты.Выгрузить());
		Запрос.УстановитьПараметр("Статьи", Объект.СтатьиРасходов.Выгрузить());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Для Каждого Строка Из Объект.СтатьиКалькуляции Цикл
			
			Если Идентификатор <> Неопределено И Строка.ПолучитьИдентификатор() <> Идентификатор Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка.НайтиСледующий(Строка.СтатьяКалькуляции);
			Строка.Идентификатор = Выборка.Идентификатор;
			
			Если Строка.СпособРасчета <> Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям Тогда
				Строка.ПредставлениеДетальныхЗаписей = "";
			Иначе
				
				Если Выборка.Отходы + Выборка.Материалы + Выборка.Трудозатраты + Выборка.Статьи = 0 Тогда
					Строка.ПредставлениеДетальныхЗаписей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Укажите отходы, материалы, виды работ или статьи расходов для статьи калькуляции ""%1"".';uk='Вкажіть відходи, матеріали, види робіт або статті витрат статті калькуляції ""%1"".'"),
						СокрЛП(Выборка.СтатьяКалькуляции));
				Иначе
					
					Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПредставленияЗаголовок,
						СокрЛП(Выборка.СтатьяКалькуляции));
					
					Разделитель = " ";
					
					Если Выборка.Отходы > 0 Тогда
						Представление = Представление + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонПредставленияОтходы,
							Выборка.Отходы);
						Разделитель = ", ";
					КонецЕсли;
					
					Если Выборка.Материалы > 0 Тогда
						Представление = Представление + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонПредставленияМатериалы,
							Выборка.Материалы);
						Разделитель = ", ";
					КонецЕсли;
					
					Если Выборка.Трудозатраты > 0 Тогда
						Представление = Представление + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонПредставленияТрудозатраты,
							Выборка.Трудозатраты);
						Разделитель = ", ";
					КонецЕсли;
					
					Если Выборка.Статьи > 0 Тогда
						Представление = Представление + Разделитель + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонПредставленияСтатьи,
							Выборка.Статьи);
						Разделитель = ", ";
					КонецЕсли;
					
					Строка.ПредставлениеДетальныхЗаписей = Представление;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Выборка.Сбросить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвратныеОтходы,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.МатериалыИУслуги,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоПризнакуДетализации()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовДокумента;
	
	Документы.ПлановаяКалькуляция.ИменаРеквизитовПоПризнакуДетализации(
		Объект.ДетализироватьСтатьиКалькуляции,
		МассивВсехРеквизитов,
		МассивРеквизитовДокумента);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовДокумента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоОбъектуКалькуляции()
	
	Если Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.Изделие Тогда
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницыОбластьДействия.ПодчиненныеЭлементы.СтраницаИзделие;
		Элементы.УказатьХарактеристику.Доступность = ХарактеристикиИспользуются;
		Элементы.Характеристика.Доступность = ХарактеристикиИспользуются И УказатьХарактеристику;
		
		Если ХарактеристикиИспользуются И Не УказатьХарактеристику Тогда
			Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='Любая';uk='Будь-яка'");
		Иначе
			Элементы.Характеристика.ПодсказкаВвода = "";
		КонецЕсли;
		
	ИначеЕсли Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.РесурснаяСпецификация Тогда
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницыОбластьДействия.ПодчиненныеЭлементы.СтраницаСпецификация;
	ИначеЕсли Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.ЗаказНаПроизводство Тогда
		Элементы.СтраницыОбластьДействия.ТекущаяСтраница = Элементы.СтраницыОбластьДействия.ПодчиненныеЭлементы.СтраницаЗаказНаПроизводство;
	КонецЕсли;
	
	Элементы.СтраницыОбластьДействия.Видимость = Не НесколькоОбъектов;
	Элементы.ГруппаКалькуляционнаяЕдиница.Видимость = Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.Изделие;
	
	НастроитьКомандуЗаполненияПоСпецификацииЗаказа();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКомандуЗаполненияПоСпецификацииЗаказа();
	
	КнопкаФормы = Элементы.Найти("ЗаполнитьПоСпецификацииЗаказа");
	Элемент = Элементы.Найти("ФормаЗаполнитьПоРесурснойСпецификации");
	
	Если Объект.ОбъектКалькуляции = Перечисления.ОбъектыКалькуляции.ЗаказНаПроизводство Тогда
		
		Если КнопкаФормы = Неопределено Тогда
			КнопкаФормы = Элементы.Вставить("ЗаполнитьПоСпецификацииЗаказа", Тип("КнопкаФормы"), Элементы.ФормаКоманднаяПанель, КнопкаФормы);
			КнопкаФормы.ИмяКоманды = "ЗаполнитьПоСпецификацииЗаказа";
		Иначе
			КнопкаФормы.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		Если КнопкаФормы <> Неопределено Тогда
			КнопкаФормы.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоСпецификации

&НаСервере
Процедура ЗаполнитьДокументПоСпецификации(ВыбранноеЗначение, КэшированныеЗначения)
	
	Документы.ПлановаяКалькуляция.ЗаполнитьПоСпецификации(Объект, ВыбранноеЗначение);
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей("СтатьиКалькуляции");
	
КонецПроцедуры

&НаСервере
Функция СпецификацииДокумента()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДействиеКалькуляции.Объект КАК Объект,
	|	ДействиеКалькуляции.КодСтрокиЗаказаНаПроизводство КАК КодСтроки
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	&ДействиеКалькуляции КАК ДействиеКалькуляции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Продукция.Спецификация КАК Спецификация
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК Продукция
	|		ПО ВТЗаказы.Объект = Продукция.Ссылка
	|			И ВТЗаказы.КодСтроки = Продукция.КодСтроки");
	
	Запрос.УстановитьПараметр("ДействиеКалькуляции", Объект.ДействиеКалькуляции.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Спецификация);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоСпецификацииЗаказаНаСервере(ЗаказНаПроизводство, КодСтроки);
	
	Документы.ПлановаяКалькуляция.ЗаполнитьПоСпецификацииЗаказа(Объект, ЗаказНаПроизводство, КодСтроки);
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей("СтатьиКалькуляции");
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеКалькуляцийЦенРасценок

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ИмяТабличнойЧасти, ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы[ИмяТабличнойЧасти].ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Строка);
		
		Если ИмяТабличнойЧасти = "МатериалыИУслуги" И ЗначениеЗаполнено(ДанныеСтроки.Калькуляция) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрок.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	СтруктураЗаполненияЦен = Новый Структура("Дата, Валюта, ВидЦены, ПоляЗаполнения",
		Объект.Дата,
		Валюта,
		ВидЦен,
		"Цена, ВидЦены");
		
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект[ИмяТабличнойЧасти],
		МассивСтрок, // Массив строк или структура отбора
		СтруктураЗаполненияЦен,
		СтруктураДействий);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура РассчитатьТрудозатратыПоРасценкам(Идентификаторы);
	Документы.ПлановаяКалькуляция.РассчитатьТрудозатратыПоРасценкам(Объект, Идентификаторы);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлановыеКалькуляцииИЦеныНаСервере(Знач Строки = Неопределено)
	
	Если Строки <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Строки Цикл
			МассивСтрок.Добавить(Объект.МатериалыИУслуги.НайтиПоИдентификатору(Строка));
		КонецЦикла;
		Строки = МассивСтрок;
	КонецЕсли;
	
	ПараметрыКоллекции = Новый Структура();
	ПараметрыКоллекции.Вставить("ОчищатьВидЦены");
	
	Документы.ПлановаяКалькуляция.ЗаполнитьКалькуляцииВКоллекции(
		Объект.МатериалыИУслуги,
		Строки,
		ПараметрыКоллекции,
		Объект.Организация,
		Объект.Дата);
		
	ЗаполнитьЦеныПоКалькуляцииНаСервере(Строки);
	
	РассчитатьЗависимыеИтогиПоТабличнымЧастям();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныПоКалькуляцииНаСервере(Знач Строки = Неопределено)
	
	Если Строки = Неопределено Тогда
		Строки = Объект.МатериалыИУслуги;
	ИначеЕсли ТипЗнч(Строки) = Тип("Число") Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Объект.МатериалыИУслуги.НайтиПоИдентификатору(Строки));
		Строки = МассивСтрок;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыКоллекции = Новый Структура();
	ПараметрыКоллекции.Вставить("ОчищатьВидЦены");
	
	МассивКалькуляций = Новый Массив;
	Для Каждого Строка Из Строки Цикл
		МассивКалькуляций.Добавить(Строка.Калькуляция);
	КонецЦикла;
	
	СуммыКалькуляций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивКалькуляций, "СуммаПоДокументу");
	
	Для Каждого Строка Из Строки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Калькуляция) И ЗначениеЗаполнено(Строка.ВидЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Цена     = СуммыКалькуляций[Строка.Калькуляция];
		Строка.Сумма    = Строка.Цена * Строка.Количество;
		Строка.ВидЦены  = Справочники.ВидыЦен.ПустаяСсылка();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовШапки

&НаСервере
Процедура ОбъектКалькуляцииПриИзмененииНаСервере()
	
	Объект.ДействиеКалькуляции.Очистить();
	
	ОчиститьСлужебныеРеквизиты();
	
	Документы.ПлановаяКалькуляция.ЗаполнитьПредставленияОбъектовКалькуляции(
		Объект.ДействиеКалькуляции,
		Объект.ОбъектКалькуляции,
		НесколькоОбъектов,
		,
		Элементы.НесколькоОбъектов.Заголовок);
	
	УстановитьВидимостьПоОбъектуКалькуляции();
	
КонецПроцедуры

&НаСервере
Процедура НесколькоОбъектовПриИзмененииНаСервере()
	
	Если Не НесколькоОбъектов Тогда
		
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого Строка Из Объект.ДействиеКалькуляции Цикл
			
			Если Строка.НомерСтроки = 1 Тогда
				Продолжить;
			КонецЕсли;
			МассивУдаляемыхСтрок.Добавить(Строка);
			
		КонецЦикла;
		
		Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
			Объект.ДействиеКалькуляции.Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия();
	УстановитьВидимостьПоОбъектуКалькуляции();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("Номенклатура",	Номенклатура);
	СтруктураСтроки.Вставить("Характеристика",	Характеристика);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", ХарактеристикиИспользуются);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Объект"));
		
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтруктураСтроки, СтруктураДействий, Неопределено);
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСтроки);
	ХарактеристикиИспользуются = СтруктураСтроки.ХарактеристикиИспользуются;
	ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются И УказатьХарактеристику;
	Элементы.УказатьХарактеристику.Доступность = ХарактеристикиИспользуются;
	
	Объект.ДействиеКалькуляции.Очистить();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НоваяСтрока = Объект.ДействиеКалькуляции.Добавить();
		НоваяСтрока.Объект = Номенклатура;
		НоваяСтрока.Характеристика = Характеристика;
	КонецЕсли;
	
	Если Не ХарактеристикиИспользуются Тогда
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		УказатьХарактеристику = Ложь;
		Элементы.Характеристика.ПодсказкаВвода = "";
	ИначеЕсли ХарактеристикиИспользуются и Не УказатьХарактеристику Тогда
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru='Любая';uk='Будь-яка'");
	КонецЕсли;
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия();
	
КонецПроцедуры

&НаСервере
Процедура ВыборОбластиДействияНаСервере(АдресВХранилище)
	
	РезультатРедактирования = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Объект.ДействиеКалькуляции.Загрузить(РезультатРедактирования.ДействиеКалькуляции);
	ЕдиницаИзмерения = РезультатРедактирования.ЕдиницаИзмерения;
	
	Если Объект.ДействиеКалькуляции.Количество() < 2 Тогда
		НесколькоОбъектов = Ложь;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПредставленияОбластиДействия(Истина);
	УстановитьВидимостьПоОбъектуКалькуляции();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитов_СтатьиРасходов

&НаСервере
Процедура РассчитатьСуммуСтатьиРасходов(Идентификатор)
	
	ДанныеСтроки = Объект.СтатьиРасходов.НайтиПоИдентификатору(Идентификатор);
	
	ДанныеСтроки.ФормулаСодержитОшибки = Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(ДанныеСтроки.Формула,
		МассивБазовыхСтатейКалькуляции(ДанныеСтроки.СтатьяКалькуляции),
		"Объект.СтатьиРасходов[" + (ДанныеСтроки.НомерСтроки-1) + "].Формула",,,, Новый Структура("НеВыводитьСообщения", Истина));
	
	Если ДанныеСтроки.ФормулаСодержитОшибки Тогда
		ДанныеСтроки.Сумма = 0;
	Иначе
		МассивВлияющихСтатей = ИзвлечьБазовыеСтатьиИзФормулы(ДанныеСтроки.Формула);
		РассчитатьСтроку(ДанныеСтроки, МассивВлияющихСтатей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитов_СтатьиКалькуляции

&НаСервере
Процедура СтатьиКалькуляцииСтатьяКалькуляцииПриИзмененииНаСервере(Идентификатор)
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей("СтатьиКалькуляции", Идентификатор);
	РассчитатьЗависимыеИтогиПоТабличнымЧастям();
	
КонецПроцедуры

&НаСервере
Процедура СтатьиРасходовСтатьяКалькуляцииПриИзмененииНаСервере(Идентификатор)
	
	ДанныеСтроки = Объект.СтатьиРасходов.НайтиПоИдентификатору(Идентификатор);
	
	ОтборСтатья = Новый Структура("СтатьяКалькуляции", ДанныеСтроки.СтатьяКалькуляции);
	НайденныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСтатья);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = Объект.СтатьиКалькуляции.Добавить();
		НоваяСтрока.СтатьяКалькуляции = ДанныеСтроки.СтатьяКалькуляции;
		НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям;
		ЗаполнитьБазовыеСтатьиКалькуляции();
	КонецЕсли;
	
	ПрочиеРасходыПроверитьФормулы();
	РассчитатьСуммуСтатьиРасходов(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура СтатьиРасходовСтатьяРасходовПриИзмененииНаСервере(Идентификатор)
	
	ДанныеСтроки = Объект.СтатьиРасходов.НайтиПоИдентификатору(Идентификатор);
	СтатьяКалькуляции = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ДанныеСтроки.СтатьяРасходов, "СтатьяКалькуляции");
	
	Если ЗначениеЗаполнено(СтатьяКалькуляции) Тогда
		ОтборСтатья = Новый Структура("СтатьяКалькуляции", СтатьяКалькуляции);
		НайденныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСтатья);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Строка = НайденныеСтроки[0];
			Если Строка.СпособРасчета = Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоФормуле И ЗначениеЗаполнено(Строка.Формула) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтроки.СтатьяКалькуляции = СтатьяКалькуляции;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормулами

&НаСервере
Процедура ИнициализироватьРасчетПоФормуле()
	
	ПостроитьДеревоОператоров();
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоОператоров()
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы';uk='Оператори'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы';uk='Логічні оператори і константи'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И';uk='И'"),      " " + НСтр("ru='И';uk='И'")      + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИЛИ';uk='АБО'"),    " " + НСтр("ru='ИЛИ';uk='АБО'")    + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НЕ';uk='НЕ'"),     " " + НСтр("ru='НЕ';uk='НЕ'")     + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА';uk='ІСТИНА'"), " " + НСтр("ru='ИСТИНА';uk='ІСТИНА'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ';uk='ХИБНІСТЬ'"),   " " + НСтр("ru='ЛОЖЬ';uk='ХИБНІСТЬ'")   + " ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Функции';uk='Функції'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум';uk='Максимум'"),    НСтр("ru='Макс(,)';uk='Макс(,)'"), 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум';uk='Мінімум'"),     НСтр("ru='Мин(,)';uk='Мин(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление';uk='Округлення'"),  НСтр("ru='Окр(,)';uk='Окр(,)'"),  2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть';uk='Ціла частина'"), НСтр("ru='Цел()';uk='Цел()'"),   1);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие';uk='Умова'"),     "?(,,)",              3);
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазовыеСтатьиКалькуляции()
	
	БазовыеСтатьиКалькуляции.Очистить();
	
	ОтборПоВлияющимСтатьям = Новый Структура("СтатьяКалькуляции, ВлияющаяСтатьяКалькуляции");
	ОтборПоСтатьеТЧ = Новый Структура("СтатьяКалькуляцииТЧ");
	МассивПроверяемыхСтатей = Новый Массив;
	МассивУдаляемых = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиКалькуляции.СтатьяКалькуляции КАК СтатьяКалькуляции
	|ПОМЕСТИТЬ ВТСтатьи
	|ИЗ
	|	&СтатьиКалькуляции КАК СтатьиКалькуляции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТСтатьи.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	ВТСтатьи.СтатьяКалькуляции.Идентификатор КАК Идентификатор
	|ИЗ
	|	ВТСтатьи КАК ВТСтатьи");
	
	Запрос.УстановитьПараметр("СтатьиКалькуляции", Объект.СтатьиКалькуляции.Выгрузить());
	ИдентификаторыСтатейКалькуляции = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.СтатьиКалькуляции Цикл
		
		Для Каждого Идентификатор Из ИдентификаторыСтатейКалькуляции Цикл
			
			Если Идентификатор.СтатьяКалькуляции = Строка.СтатьяКалькуляции Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = БазовыеСтатьиКалькуляции.Добавить();
			НоваяСтрока.СтатьяКалькуляцииТЧ = Строка.СтатьяКалькуляции;
			НоваяСтрока.СтатьяКалькуляции = Идентификатор.СтатьяКалькуляции;
			НоваяСтрока.Идентификатор = Идентификатор.Идентификатор;
			
		КонецЦикла;
		
		ОтборПоСтатьеТЧ.СтатьяКалькуляцииТЧ = Строка.СтатьяКалькуляции;
		МассивПроверяемыхСтатей.Очистить();
		МассивПроверяемыхСтатей.Добавить(Строка.СтатьяКалькуляции);
		
		Пока МассивПроверяемыхСтатей.Количество() > 0 Цикл
			
			МассивУдаляемых.Очистить();
			ТекСтатья = МассивПроверяемыхСтатей[0];
			
			ТекущиеБазовыеСтатьи = БазовыеСтатьиКалькуляции.НайтиСтроки(ОтборПоСтатьеТЧ);
			
			Для Каждого ТекущаяБазоваяСтатья Из ТекущиеБазовыеСтатьи Цикл
				
				ОтборПоВлияющимСтатьям.ВлияющаяСтатьяКалькуляции = ТекСтатья;
				ОтборПоВлияющимСтатьям.СтатьяКалькуляции = ТекущаяБазоваяСтатья.СтатьяКалькуляции;
				
				НайденныеСтроки = Объект.ВлияющиеСтатьиКалькуляции.НайтиСтроки(ОтборПоВлияющимСтатьям);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					МассивУдаляемых.Добавить(ТекущаяБазоваяСтатья);
					МассивПроверяемыхСтатей.Добавить(НайденныеСтроки[0].СтатьяКалькуляции);
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Строка Из МассивУдаляемых Цикл
				БазовыеСтатьиКалькуляции.Удалить(Строка);
			КонецЦикла;
			
			МассивПроверяемыхСтатей.Удалить(0);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция БазовыеСтатьиКалькуляцииВХранилище(СтатьяКалькуляции)
	
	ОтборПоСтатьеТЧ = Новый Структура("СтатьяКалькуляцииТЧ", СтатьяКалькуляции);
	
	Результат = БазовыеСтатьиКалькуляции.Выгрузить(ОтборПоСтатьеТЧ, "СтатьяКалькуляции, Идентификатор");
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция МассивБазовыхСтатейКалькуляции(СтатьяКалькуляции)
	
	ОтборПоСтатьеТЧ = Новый Структура("СтатьяКалькуляцииТЧ", СтатьяКалькуляции);
	
	НайденныеСтроки = БазовыеСтатьиКалькуляции.НайтиСтроки(ОтборПоСтатьеТЧ);
	
	Результат = Новый Массив;
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Результат.Добавить(Строка.Идентификатор);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СтатьиКалькуляцииПроверитьФормулы(Идентификатор = Неопределено, ИзменятьСтроки = Истина)
	
	Для Каждого Строка Из Объект.СтатьиКалькуляции Цикл
		
		Если Идентификатор <> Неопределено И Строка.ПолучитьИдентификатор() <> Идентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ФормулаСодержитОшибки = Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Строка.Формула,
			МассивБазовыхСтатейКалькуляции(Строка.СтатьяКалькуляции),
			"Объект.СтатьиКалькуляции[" + (Строка.НомерСтроки-1) + "].Формула",,,, Новый Структура("НеВыводитьСообщения", Истина));
		
		Если Строка.ФормулаСодержитОшибки И ИзменятьСтроки Тогда
			Строка.Сумма = 0;
			Строка.СтрокаИзменена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочиеРасходыПроверитьФормулы(Идентификатор = Неопределено, ИзменятьСтроки = Истина)
	
	Для Каждого Строка Из Объект.СтатьиРасходов Цикл
		
		Если Идентификатор <> Неопределено И Строка.ПолучитьИдентификатор() <> Идентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ФормулаСодержитОшибки = Не РаботаСФормуламиКлиентСервер.ПроверитьФормулу(Строка.Формула,
			МассивБазовыхСтатейКалькуляции(Строка.СтатьяКалькуляции),
			"Объект.СтатьиКалькуляции[" + (Строка.НомерСтроки-1) + "].Формула",,,, Новый Структура("НеВыводитьСообщения", Истина));
		
		Если Строка.ФормулаСодержитОшибки И ИзменятьСтроки Тогда
			Строка.Сумма = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыПоСтатьям()
	
	ОтборЗависимыеСтатьи = Новый Структура("ВлияющаяСтатьяКалькуляции");
	ОтборПоСтатье = Новый Структура("СтатьяКалькуляции");
	
	СтатьиДляПересчета = Новый СписокЗначений;
	СтрокиДляПроверки = Новый Массив;
	
	ОтборСтрокаИзменена = Новый Структура("СтрокаИзменена", Истина);
	ИзмененныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСтрокаИзменена);
	
	Для Каждого Строка Из ИзмененныеСтроки Цикл
		Если Строка.СпособРасчета <> Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоФормуле Тогда
			Строка.СтрокаИзменена = Ложь;
		Иначе
			СтатьиДляПересчета.Добавить(Строка.СтатьяКалькуляции);
		КонецЕсли;
		СтрокиДляПроверки.Добавить(Строка);
	КонецЦикла;
	
	Пока СтрокиДляПроверки.Количество() > 0 Цикл
		
		ТекущаяСтрока = СтрокиДляПроверки[0];
		
		ОтборЗависимыеСтатьи.ВлияющаяСтатьяКалькуляции = ТекущаяСтрока.СтатьяКалькуляции;
		ЗависимыеСтатьи = Объект.ВлияющиеСтатьиКалькуляции.НайтиСтроки(ОтборЗависимыеСтатьи);
		
		Для Каждого Статья Из ЗависимыеСтатьи Цикл
			
			ОтборПоСтатье.СтатьяКалькуляции = Статья.СтатьяКалькуляции;
			СтрокиИсходнойТаблицы = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборПоСтатье);
			
			Если СтрокиИсходнойТаблицы.Количество() > 0 Тогда
				
				ЗависимаяСтрока = СтрокиИсходнойТаблицы[0];
				
				СтрокиДляПроверки.Добавить(ЗависимаяСтрока);
				
				Если ЗависимаяСтрока.СпособРасчета = Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоФормуле Тогда
					ЗависимаяСтрока.СтрокаИзменена = Истина;
					Если СтатьиДляПересчета.НайтиПоЗначению(ЗависимаяСтрока.СтатьяКалькуляции) = Неопределено Тогда
						СтатьиДляПересчета.Добавить(ЗависимаяСтрока.СтатьяКалькуляции);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокиДляПроверки.Удалить(0);
		
	КонецЦикла;
	
	СтрокиДляПересчета = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСтрокаИзменена);
	
	Пока СтрокиДляПересчета.Количество() > 0 Цикл
		
		Для Каждого Строка Из СтрокиДляПересчета Цикл
			
			МассивВлияющихСтатей = ИзвлечьБазовыеСтатьиИзФормулы(Строка.Формула);
			ЗначенияОперандовРассчитаны = Истина;
			
			Для Каждого ВлияющаяСтатья Из МассивВлияющихСтатей Цикл 
				
				Если СтатьиДляПересчета.НайтиПоЗначению(ВлияющаяСтатья) <> Неопределено Тогда
					ЗначенияОперандовРассчитаны = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначенияОперандовРассчитаны Тогда
				
				РассчитатьСтроку(Строка, МассивВлияющихСтатей);
				Строка.СтрокаИзменена = Ложь;
				СтатьиДляПересчета.Удалить(СтатьиДляПересчета.НайтиПоЗначению(Строка.СтатьяКалькуляции));
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокиДляПересчета = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСтрокаИзменена);
	КонецЦикла;
	
	ОтборСтатьиРасходов = Новый Структура("РасчетПоФормуле", Истина);
	НайденныеСтроки = Объект.СтатьиРасходов.НайтиСтроки(ОтборСтатьиРасходов);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		МассивВлияющихСтатей = ИзвлечьБазовыеСтатьиИзФормулы(Строка.Формула);
		РассчитатьСтроку(Строка, МассивВлияющихСтатей);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтроку(РассчитываемаяСтрока, МассивВлияющихСтатей)
	
	Если РассчитываемаяСтрока.ФормулаСодержитОшибки Тогда
		РассчитываемаяСтрока.Сумма = 0;
		Возврат;
	КонецЕсли;
	
	ОтборПоСтатьеКалькуляции = Новый Структура("СтатьяКалькуляции");
	
	Формула = РассчитываемаяСтрока.Формула;
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		РассчитываемаяСтрока.Сумма = 0;
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из МассивВлияющихСтатей Цикл
		
		ОтборПоСтатьеКалькуляции.СтатьяКалькуляции = Строка;
		НайденныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборПоСтатьеКалькуляции);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ДанныеСтроки = НайденныеСтроки[0];
			Формула = СтрЗаменить(Формула, "["+ ДанныеСтроки.Идентификатор + "]", Формат(ДанныеСтроки.Сумма, "ЧРД=.; ЧН=0; ЧГ="));
			
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитываемаяСтрока.Сумма = Вычислить(Формула);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимостиСтатейКалькуляции()
	
	Объект.ВлияющиеСтатьиКалькуляции.Очистить();
	
	ОтборСтатьиКалькуляции = Новый Структура("СтатьяКалькуляции, ВлияющаяСтатьяКалькуляции");
	
	ОтборСпособРасчета = Новый Структура("СпособРасчета", Перечисления.СпособыРасчетаЗатратПлановойКалькуляции.ПоФормуле);
	РассчитываемыеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСпособРасчета);
	
	Для Каждого Строка Из РассчитываемыеСтроки Цикл
		
		МассивВлияющихСтатей = ИзвлечьБазовыеСтатьиИзФормулы(Строка.Формула);
		
		Для Каждого ВлияющаяСтатья Из МассивВлияющихСтатей Цикл
			
			ОтборСтатьиКалькуляции.СтатьяКалькуляции = Строка.СтатьяКалькуляции;
			ОтборСтатьиКалькуляции.ВлияющаяСтатьяКалькуляции = ВлияющаяСтатья;
			
			НайденныеСтроки = Объект.ВлияющиеСтатьиКалькуляции.НайтиСтроки(ОтборСтатьиКалькуляции);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.ВлияющиеСтатьиКалькуляции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтборСтатьиКалькуляции);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОтборСпособРасчета = Новый Структура("РасчетПоФормуле", Истина);
	РассчитываемыеСтроки = Объект.СтатьиРасходов.НайтиСтроки(ОтборСпособРасчета);
	
	Для Каждого Строка Из РассчитываемыеСтроки Цикл
		
		МассивВлияющихСтатей = ИзвлечьБазовыеСтатьиИзФормулы(Строка.Формула);
		
		Для Каждого ВлияющаяСтатья Из МассивВлияющихСтатей Цикл
			
			ОтборСтатьиКалькуляции.СтатьяКалькуляции = Строка.СтатьяКалькуляции;
			ОтборСтатьиКалькуляции.ВлияющаяСтатьяКалькуляции = ВлияющаяСтатья;
			
			НайденныеСтроки = Объект.ВлияющиеСтатьиКалькуляции.НайтиСтроки(ОтборСтатьиКалькуляции);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.ВлияющиеСтатьиКалькуляции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтборСтатьиКалькуляции);
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ИзвлечьБазовыеСтатьиИзФормулы(Формула)
	
	Результат = Новый Массив;
	ОтборПоИдентификатору = Новый Структура("Идентификатор");
	
	МассивЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Формула, "[");
	
	Для Индекс = 1 По МассивЭлементов.Количество() - 1 Цикл
		
		Если ЗначениеЗаполнено(МассивЭлементов[Индекс]) Тогда
			
			ОкончаниеИдентификатора = СтрНайти(МассивЭлементов[Индекс], "]");
			
			Если ОкончаниеИдентификатора > 0 Тогда
				
				БазоваяСтатьяИдентификатор = Лев(МассивЭлементов[Индекс], ОкончаниеИдентификатора - 1);
				ОтборПоИдентификатору.Идентификатор = БазоваяСтатьяИдентификатор;
				
				БазовыеСтатьи = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборПоИдентификатору);
				Если БазовыеСтатьи.Количество() > 0 Тогда
					Результат.Добавить(БазовыеСтатьи[0].СтатьяКалькуляции);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура НастроитьПараметрыВыбораВидаЦен()
	
	ВидЦеныПлановойСтоимости = Константы.ВидЦеныПлановойСтоимостиМатериаловРабот.Получить();
	ЦенаВключаетНДС = Не ЗначениеЗаполнено(ВидЦеныПлановойСтоимости) Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦеныПлановойСтоимости, "ЦенаВключаетНДС");
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЦенаВключаетНДС",       ЦенаВключаетНДС));
	
	Элементы.ВидЦены.ПараметрыВыбора                 = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров.Добавить(Новый ПараметрВыбора("ВыводитьПроизвольныйВидЦен",  Истина));
	
	Элементы.МатериалыИУслугиВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ВозвратныеОтходыВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗависимыеИтогиПоТабличнымЧастям()
	
	Документы.ПлановаяКалькуляция.РассчитатьЗависимыеИтогиПоТабличнымЧастям(Объект);
	
	РассчитатьТаблицуСтатейКалькуляции();
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей("СтатьиКалькуляции");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиТекущейТаблицы()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВозвратныеОтходы Тогда
		ТекущиеДанные = Элементы.ВозвратныеОтходы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
			ОбновитьИтогиПоСтатьеКалькуляции("Отходы", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
		Иначе
			ОбновитьИтогиПоСтатьеКалькуляции("Отходы");
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаМатериалыИУслуги Тогда
		ТекущиеДанные = Элементы.МатериалыИУслуги.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
			ОбновитьИтогиПоСтатьеКалькуляции("Материалы", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
		Иначе
			ОбновитьИтогиПоСтатьеКалькуляции("Материалы");
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТрудозатраты Тогда
		ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
			ОбновитьИтогиПоСтатьеКалькуляции("Трудозатраты", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
		Иначе
			ОбновитьИтогиПоСтатьеКалькуляции("Трудозатраты");
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСтатьиРасходов Тогда
		ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.СтатьяКалькуляции) Тогда
			ОбновитьИтогиПоСтатьеКалькуляции("Статьи", ТекущиеДанные.СтатьяКалькуляции, ТекущиеДанные.Сумма);
		Иначе
			ОбновитьИтогиПоСтатьеКалькуляции("Статьи");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиПоСтатьеКалькуляции(ИмяПоказателя, СтатьяКалькуляции = Неопределено, Сумма = 0)
	
	ИмяЭлементаФормы = "Итоги" + ИмяПоказателя;
	
	Если СтатьяКалькуляции = Неопределено Тогда
		Элементы[ИмяЭлементаФормы].ТекущаяСтраница = Элементы[ИмяЭлементаФормы + "Пояснение"];
		Возврат;
	Иначе
		Элементы[ИмяЭлементаФормы].ТекущаяСтраница = Элементы[ИмяЭлементаФормы + "Расчет"];
	КонецЕсли;
	
	ОтборСтатьяКалькуляции = Новый Структура("СтатьяКалькуляции", СтатьяКалькуляции);
	
	НайденныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСтатьяКалькуляции);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ЭтаФорма["ЗаголовокИтогаПоСтатье" + ИмяПоказателя] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Всего (%1):';uk='Всього (%1):'"),
			СокрЛП(СтатьяКалькуляции));
			
		Если НайденныеСтроки[0].Сумма > 0 Тогда
			Итог = НайденныеСтроки[0].Сумма;
		Иначе
			Итог = - НайденныеСтроки[0].Сумма;
		КонецЕсли;
		
		ЭтаФорма["ИтогПоСтатье" + ИмяПоказателя] = Итог;
		
		Если Итог = 0 Тогда
			ЭтаФорма["УдельныйВес" + ИмяПоказателя] = 0;
		Иначе
			ЭтаФорма["УдельныйВес" + ИмяПоказателя] = 100 * Сумма / Итог;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДетальныеЗаписиПоСтатье(СтатьяКалькуляции = Неопределено)
	
	Если СтатьяКалькуляции = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	Иначе
		СтруктураОтбора = Новый Структура("СтатьяКалькуляции", СтатьяКалькуляции);
	КонецЕсли;
	
	ТЗОтходы = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	ТЗМатериалы = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
	ТЗТрудозатраты = Объект.Трудозатраты.НайтиСтроки(СтруктураОтбора);
	ТЗСтатьи = Объект.СтатьиРасходов.НайтиСтроки(СтруктураОтбора);
	
	Если ТЗОтходы.Количество() = 0 
		И ТЗМатериалы.Количество() = 0 
		И ТЗТрудозатраты.Количество() = 0 
		И ТЗСтатьи.Количество() = 0 Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Отходы = Новый Массив;
	Для Каждого Строка Из ТЗОтходы Цикл
		Отходы.Добавить(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	Материалы = Новый Массив;
	Для Каждого Строка Из ТЗМатериалы Цикл
		Материалы.Добавить(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	Трудозатраты = Новый Массив;
	Для Каждого Строка Из ТЗТрудозатраты Цикл
		Трудозатраты.Добавить(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	Статьи = Новый Массив;
	Для Каждого Строка Из ТЗСтатьи Цикл
		Статьи.Добавить(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
	Результат = Новый Структура("Отходы, Материалы, Трудозатраты, Статьи", Отходы, Материалы, Трудозатраты, Статьи);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РассчитатьТаблицуСтатейКалькуляции()
	
	ЗаполнитьЗависимостиСтатейКалькуляции();
	ЗаполнитьБазовыеСтатьиКалькуляции();
	СтатьиКалькуляцииПроверитьФормулы();
	РассчитатьСуммыПоСтатьям();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросИзмененияСпособаРасчета(Знач Оповещение, ДанныеСтроки, ПредставлениеТЧ)
	
	ОтборСтатьяКалькуляции = Новый Структура("СтатьяКалькуляции", ДанныеСтроки.СтатьяКалькуляции);
	
	НайденныеСтроки = Объект.СтатьиКалькуляции.НайтиСтроки(ОтборСтатьяКалькуляции);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ТекущийСпособ = НайденныеСтроки[0].СпособРасчета;
		
		Если ТекущийСпособ <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ПоДетальнымЗаписям") Тогда
			
			Если ТекущийСпособ = ПредопределенноеЗначение("Перечисление.СпособыРасчетаЗатратПлановойКалькуляции.ФиксированнымЗначением") Тогда
				ТекстВопроса = НСтр("ru='Сумма по выбранной статье калькуляции задается фиксированным значением. 
                                            |Для детализации статьи до %1 требуется установить способ расчета ""По детальным записям"". 
                                            |Установить способ расчета автоматически?'
                                            |;uk='Сума по вибраній статті калькуляції визначається фіксованим значенням. 
                                            |Для деталізації статті до %1 потрібно встановити спосіб розрахунку ""За детальними записами"". 
                                            |Встановити спосіб розрахунку автоматично?'");
			Иначе
				ТекстВопроса = НСтр("ru='Сумма по выбранной статье калькуляции рассчитывается по формуле.
                                            |Для детализации статьи до %1 требуется установить способ расчета ""По детальным записям"". 
                                            |Установить способ расчета автоматически?'
                                            |;uk='Сума по вибраній статті калькуляції розраховується за формулою.
                                            |Для деталізації статті до %1 потрібно встановити спосіб розрахунку ""За детальними записами"". 
                                            |Встановити спосіб розрахунку автоматично?'");
			КонецЕсли;
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПредставлениеТЧ);
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗапросИзмененияСпособаРасчетаЗавершение", ЭтотОбъект, Новый Структура("ДанныеСтроки, Оповещение", ДанныеСтроки, Оповещение));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросИзмененияСпособаРасчетаФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросИзмененияСпособаРасчетаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        ДанныеСтроки.СтатьяКалькуляции = ПредопределенноеЗначение("Справочник.СтатьиКалькуляции.ПустаяСсылка");
    КонецЕсли;
    
    ЗапросИзмененияСпособаРасчетаФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗапросИзмененияСпособаРасчетаФрагмент(Знач Оповещение)
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Процедура ОчиститьСлужебныеРеквизиты()
	
	Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Характеристика = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
	Спецификация = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
	ЗаказНаПроизводство = ПредопределенноеЗначение("Документ.ЗаказНаПроизводство.ПустаяСсылка");
	ПредставлениеПозицииЗаказа = "";
	ПредставлениеПозицииЗаказаИсходное = "";
	СведенияОбИзделиях = "";
	ПредставлениеОбщее = ?(НесколькоОбъектов, НСтр("ru='Выбрать';uk='Обрати'"), "");
	
	ХарактеристикиИспользуются = Ложь;
	УказатьХарактеристику = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ДействиеКалькуляцииВХранилище()
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Объект.ДействиеКалькуляции.Выгрузить());
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаКлиенте
Процедура СтатьиКалькуляцииПередУдалениемЗавершение(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.СтатьиКалькуляции.НайтиПоИдентификатору(ДопПараметры.ИдентификаторСтроки);
	Объект.СтатьиКалькуляции.Удалить(ТекущаяСтрока);
	
	Для Каждого Строка Из ДопПараметры.ДетальныеЗаписи.Отходы Цикл
		Объект.ВозвратныеОтходы.Удалить(Объект.ВозвратныеОтходы.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	Для Каждого Строка Из ДопПараметры.ДетальныеЗаписи.Материалы Цикл
		Объект.МатериалыИУслуги.Удалить(Объект.МатериалыИУслуги.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	Для Каждого Строка Из ДопПараметры.ДетальныеЗаписи.Трудозатраты Цикл
		Объект.Трудозатраты.Удалить(Объект.Трудозатраты.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	Для Каждого Строка Из ДопПараметры.ДетальныеЗаписи.Статьи Цикл
		Объект.СтатьиРасходов.Удалить(Объект.СтатьиРасходов.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтотОбъект, ИмяЭлемента, РезультатВыполнения);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

