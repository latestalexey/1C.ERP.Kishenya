#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Материалы") Тогда
			
			Для Каждого СтрокаМатериал из ДанныеЗаполнения.Материалы Цикл
				ЗаполнитьЗначенияСвойств(Материалы.Добавить(), СтрокаМатериал);
			КонецЦикла;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Аналог") Тогда
			
			НоваяСтрока = Аналоги.Добавить();
			НоваяСтрока.Номенклатура = ДанныеЗаполнения.Аналог;
			
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		ЗаказНаПроизводство = ДанныеЗаполнения;
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
		Спецификация = ДанныеЗаполнения;
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
		
		Если Не ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
			ТекстИсключения = НСтр("ru='Ввод разрешений на замену возможен при использовании обособленного обеспечения заказов.';uk='Введення дозволів на заміну можливе при використанні відокремленого забезпечення замовлень.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если Не ЕстьТоварыПодЗаказ(ДанныеЗаполнения) Тогда
			ТекстИсключения = НСтр("ru='Ввод разрешений на замену возможен при наличии товаров с обеспечением ""Обособленно"".';uk='Введення дозволів на заміну можливе за наявності товарів із забезпеченням ""Відокремлено"".'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ЗаказКлиента = ДанныеЗаполнения;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Дата окончания действия соглашения должна быть не меньше, чем дата начала действия.
	Если ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
		
		Если ДатаНачалаДействия > ДатаОкончанияДействия Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания действия разрешения должна быть не меньше даты начала';uk='Дата закінчення дії дозволу повинна бути не менше дати початку'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				"ДатаОкончанияДействия",
				,
				Отказ);
			
		Конецесли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Спецификация) Тогда
		ПроверитьНаборМатериаловСпецификации(Отказ);
	Иначе
		ПроверитьДублиНабора("Материалы", НСтр("ru='Обнаружено дублирование строк в наборе заменяемых материалов.';uk='Виявлено дублювання рядків у наборі замінних матеріалів.'"), Отказ);
	КонецЕсли;
	
	ПроверитьДублиНабора("Аналоги", НСтр("ru='Обнаружено дублирование строк в наборе аналогов.';uk='Виявлено дублювання рядків у наборі аналогів.'"), Отказ);
	
	МассивНепроверяемыхРеквизитов.Добавить("Материалы.КлючСвязиСпецификация");
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Материалы";
	ПараметрыПроверки.ПроверитьВозможностьОкругления = Ложь;
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиЗаполненияКоличества();
	ПараметрыПроверки.ИмяТЧ = "Аналоги";
	ПараметрыПроверки.ПроверитьВозможностьОкругления = Ложь;
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, ПараметрыПроверки);

	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Материалы";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	ПараметрыПроверки.ИмяТЧ = "Аналоги";
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	Документы.РазрешениеНаЗаменуМатериалов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ОперативныйУчетПроизводства.ОтразитьАналогиВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный			= ПараметрыСеанса.ТекущийПользователь;
	ДатаНачалаДействия		= НачалоДня(ТекущаяДатаСеанса());
	Статус					= Перечисления.СтатусыРазрешенийНаЗаменуМатериалов.Создано;
	
КонецПроцедуры

Функция ЕстьТоварыПодЗаказ(Ссылка)
	
	СтруктураОтбора = Новый Структура("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.Обособленно);
	
	НайденныеСтроки = Ссылка.Товары.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПроверитьНаборМатериаловСпецификации(Отказ)
	
	МассивКлючей = Новый Массив;
	
	Для Каждого Строка Из Материалы Цикл
		
		Если Не ЗначениеЗаполнено(Строка.КлючСвязиСпецификация) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Ошибка связи со строкой спецификации в наборе заменяемых материалов.';uk='Помилка зв''язку з рядком специфікації в наборі замінних матеріалів.'"),
				ЭтотОбъект,
				"Материалы[" + (Строка.НомерСтроки - 1) + "].ПрименениеМатериала",
				"Объект",
				Отказ);
			Продолжить;
			
		КонецЕсли;
		
		Если МассивКлючей.Найти(Строка.КлючСвязиСпецификация) = Неопределено Тогда
			МассивКлючей.Добавить(Строка.КлючСвязиСпецификация);
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Обнаружено дублирование строк в наборе заменяемых материалов.';uk='Виявлено дублювання рядків у наборі замінних матеріалів.'"),
				ЭтотОбъект,
				"Материалы[" + (Строка.НомерСтроки - 1) + "].ПрименениеМатериала",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДублиНабора(ИмяНабора, Сообщение, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Набор.Номенклатура,
	|	Набор.Характеристика,
	|	Набор.НомерСтроки
	|ПОМЕСТИТЬ ВТНабор
	|ИЗ
	|	&Набор КАК Набор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Набор.Номенклатура,
	|	Набор.Характеристика,
	|	МАКСИМУМ(Набор.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	ВТНабор КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.Номенклатура,
	|	Набор.Характеристика
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Набор.НомерСтроки) > 1";
	
	Запрос.УстановитьПараметр("Набор", ЭтотОбъект[ИмяНабора]);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Сообщение,
			ЭтотОбъект,
			ИмяНабора + "[" + (Выборка.НомерСтроки - 1) + "].Номенклатура",
			"Объект",
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
