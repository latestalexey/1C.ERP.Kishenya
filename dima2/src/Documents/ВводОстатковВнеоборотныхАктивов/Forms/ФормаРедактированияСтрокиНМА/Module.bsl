&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДанныеЗаполнения);
	
	ДатаУчетнойПолитики = Дата + 86400;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма,
		Организация,
		ДатаУчетнойПолитики);
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	
	// Установка значений по умолчанию.
	Если Параметры.ЭтоНовый И НЕ Параметры.Копирование Тогда
		
		СчетУчета = ПланыСчетов.Хозрасчетный.ДругиеНематериальныеАктивы;
		
		СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный;
		СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный;
		
		НачислятьАмортизациюБУ = Истина;
		НачислятьАмортизациюНУ = Истина;
		
		СчетаАмортизации = ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов;
		
		ОтражатьВНалоговомУчете = Истина;
		
		СчетУчетаДооценокНМА = ПланыСчетов.Хозрасчетный.ДооценкаНематериальныхАктивов;
		
	КонецЕсли;
	
	ЗаголовокНакопленнаяАмортизация = НСтр("ru='Собственные средства, остаток на счете %1:';uk='Власні кошти, залишок на рахунку %1:'");
	
	ЗаголовокТекущаяСтоимость = НСтр("ru='Собственные средства, остаток на счете %1:';uk='Власні кошти, залишок на рахунку %1:'");
	
	Заголовок = НСтр("ru='Нематериальные активы: %1';uk='Нематеріальні активи: %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ?(Параметры.ЭтоНовый, НСтр("ru='Новая строка';uk='Новий рядок'"), НематериальныйАктив));
	
	ОстаточнаяСтоимостьБУ = ПервоначальнаяСтоимостьБУ - НакопленнаяАмортизацияБУ;
	ОстаточнаяСтоимостьНУ = ПервоначальнаяСтоимостьНУ - НакопленнаяАмортизацияНУ;
		
	Элементы.ГруппаАмортизацияНУ.Видимость = ПлательщикНалогаНаПрибыль;
	
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	АналитикаРасходовАмортизацииОбязательна =
		ЗначениеЗаполнено(СтатьяРасходовАмортизации)
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовАмортизации, "КонтролироватьЗаполнениеАналитики")=Истина);
	
	СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияБУ);
	СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтаФорма),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат=Неопределено, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьЗаполнение() Тогда
			Модифицированность = Ложь;
			Закрыть(ПолучитьСтруктуруДанных());
		КонецЕсли;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ДатаУчетнойПолитики = Дата + 86400; 
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, ДатаУчетнойПолитики);
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ НачислятьАмортизациюБУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииБУ");
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходовАмортизации");
	Иначе
		Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
		Иначе
		   МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияБУ");
		КонецЕсли;
	КонецЕсли;
	
	Если ПлательщикНалогаНаПрибыль Тогда
	
		Если НЕ НачислятьАмортизациюНУ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииНУ");
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизацииНУ");

	КонецЕсли;
	
	Если НЕ НачислятьАмортизациюБУ И (ПлательщикНалогаНаПрибыль И НЕ НачислятьАмортизациюНУ) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходовАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("АналитикаРасходовАмортизации");
	Иначе
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтаФорма,
			"СтатьяРасходовАмортизации, АналитикаРасходовАмортизации",
			МассивНепроверяемыхРеквизитов,
			Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НематериальныйАктивПриИзменении(Элемент)
	
	НематериальныйАктивПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НематериальныйАктивПриИзмененииСервер()
	
		СчетУчета 			 = ПланыСчетов.Хозрасчетный.ДругиеНематериальныеАктивы;
		СчетАмортизации 	 = ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов;
		СчетУчетаДооценокНМА = ПланыСчетов.Хозрасчетный.ДооценкаНематериальныхАктивов;
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

#Область ОбработчикиСобытийСтраницыУчет




 

 


#КонецОбласти

#Область ОбработчикиСобытийСтраницыСтоимость

&НаКлиенте
Процедура ПересчитатьЗависимыеСуммы()
	
	ОстаточнаяСтоимостьБУ = ПервоначальнаяСтоимостьБУ - НакопленнаяАмортизацияБУ;
	ОстаточнаяСтоимостьНУ = ПервоначальнаяСтоимостьНУ - НакопленнаяАмортизацияНУ;
	
КонецПроцедуры


&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	Если НЕ НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность")
			И ПервоначальнаяСтоимостьНУ = 0 Тогда
		ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
	
	Если НЕ НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность")
			И ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимостьБУ  Тогда
		НакопленнаяАмортизацияНУ = НакопленнаяАмортизацияБУ;
	КонецЕсли; 
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьЗависимыеСуммы(); 
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийСтраницыАмортизация

&НаКлиенте
Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("НачислятьАмортизациюБУ");
	НачислятьАмортизациюНУ = НачислятьАмортизациюБУ;
	ОбновитьСвойстваЭлементовФормы("НачислятьАмортизациюНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияБУПриИзменении(Элемент)
	
	Если ПлательщикНалогаНаПрибыль И СрокПолезногоИспользованияНУ = 0 Тогда
		
		СрокПолезногоИспользованияНУ = СрокПолезногоИспользованияБУ;
		СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
		
	КонецЕсли;
	
	СрокИспользованияБУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияБУ);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУПриИзменении(Элемент)
	
	СрокИспользованияНУРасшифровка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
	
КонецПроцедуры


&НаКлиенте
Процедура НачислятьАмортизациюНУ_НМАПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("НачислятьАмортизациюНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	Если НачислятьАмортизациюНУ Тогда
		
		СпособНачисленияАмортизацииНУ = 
			?(СпособНачисленияАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции"),
				СпособНачисленияАмортизацииБУ,ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный"));
		
	КонецЕсли; 
	
	ОбновитьСвойстваЭлементовФормы("СпособНачисленияАмортизацииБУ");
	
КонецПроцедуры

 

&НаКлиенте
Процедура СтатьяРасходовАмортизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтатьяРасходовАмортизации) Тогда
		СтатьяРасходовАмортизацииПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовАмортизацииОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовАмортизацииПриИзмененииНаСервере()
	
	АналитикаРасходовАмортизацииОбязательна =
		ЗначениеЗаполнено(СтатьяРасходовАмортизации)
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовАмортизации, "КонтролироватьЗаполнениеАналитики")=Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	УстановитьЗначениеРеквизитовЗависящихОтАмортизации();
	
	Если ПроверитьЗаполнение() Тогда
		Модифицированность = Ложь;
		Закрыть(ПолучитьСтруктуруДанных());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеРеквизитовЗависящихОтАмортизации()

	Если НЕ НачислятьАмортизациюБУ Тогда
		СпособНачисленияАмортизацииБУ	= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка");
		СрокПолезногоИспользованияБУ	= 0;
		ОбъемВыработки					= 0;
		ЛиквидационнаяСтоимостьБУ 		= 0;
		СтатьяРасходовАмортизации		= ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		АналитикаРасходовАмортизации	= "";
	КонецЕсли; 
	Если НЕ НачислятьАмортизациюНУ Тогда
		СпособНачисленияАмортизацииНУ	= ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка");
		СрокПолезногоИспользованияНУ	=	0;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление,, Ложь);
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление, "СтатьяРасходовАмортизации, АналитикаРасходовАмортизации", Ложь);
	
КонецПроцедуры



&НаСервере
Процедура ОбновитьСвойстваЭлементовФормы(ИзмененныеРеквизиты=Неопределено)
	
	ОбновитьВсе = (ИзмененныеРеквизиты = Неопределено);
	Реквизиты = Новый Структура(ИзмененныеРеквизиты);
	
	Если ОбновитьВсе Тогда
		
		СписокСпособовНачисленияАмортизацииБУ = Элементы.СпособНачисленияАмортизацииБУ.СписокВыбора;
		СписокСпособовНачисленияАмортизацииБУ.Очистить();
		
					
			Элементы.СчетУчетаОсновной.Заголовок = НСтр("ru='Нематериального актива';uk='Нематеріального активу'");
			Элементы.СчетАмортизацииОсновной.Доступность = Истина;
			
			Элементы.ГруппаНакопленнаяАмортизация.Видимость = Истина;
			Элементы.ГруппаОстаточнаяСтоимость.Видимость = Истина;
			
			Элементы.ГруппаОтражениеАмортизации.Заголовок = НСтр("ru='Отражение амортизационных расходов';uk='Відображення амортизаційних витрат'");
			Элементы.ЗаголовокНачислениеАмортизацииБУ.Заголовок = НСтр("ru='Начисление амортизации:';uk='Нарахування амортизації:'");
			Элементы.ЗаголовокНачислениеАмортизацииБУ.Заголовок = НСтр("ru='Начисление амортизации:';uk='Нарахування амортизації:'");
			Элементы.ЗаголовокСпособАмортизацииБУ.Заголовок = НСтр("ru='Способ начисления амортизации:';uk='Спосіб нарахування амортизації:'");
			Элементы.ЗаголовокСрокИспользованияБУ.Заголовок = НСтр("ru='Срок использования, мес:';uk='Строк використання, міс:'");
						
			СписокСпособовНачисленияАмортизацииБУ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный"));
			СписокСпособовНачисленияАмортизацииБУ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
			СписокСпособовНачисленияАмортизацииБУ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции"));
			СписокСпособовНачисленияАмортизацииБУ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка"));
			СписокСпособовНачисленияАмортизацииБУ.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Кумулятивный"));
			
			СпособыНачисленияАмортизацииНУ = Элементы.СпособНачисленияАмортизацииНУ.СписокВыбора;
			СпособыНачисленияАмортизацииНУ.Очистить();
			СпособыНачисленияАмортизацииНУ.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
			СпособыНачисленияАмортизацииНУ.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка);
			СпособыНачисленияАмортизацииНУ.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка);
			СпособыНачисленияАмортизацииНУ.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный);

			
			Элементы.СрокИспользованияНУ.Доступность = Истина;
		
		
		Реквизиты.Вставить("СчетУчета");
		Реквизиты.Вставить("СчетАмортизации");
		
	КонецЕсли;
		
	Если ОбновитьВсе Или Реквизиты.Свойство("НачислятьАмортизациюБУ") Тогда
		
		Элементы.ЗаголовокСпособАмортизацииБУ.Доступность	= НачислятьАмортизациюБУ;
		Элементы.СпособНачисленияАмортизацииБУ.Доступность	= НачислятьАмортизациюБУ;
		Элементы.ЗаголовокСрокИспользованияБУ.Доступность	= НачислятьАмортизациюБУ;
		Элементы.ГруппаСрокИспользованияБУ.Доступность		= НачислятьАмортизациюБУ;
		
		Элементы.ЗаголовокОбъемВыработкиБУ.Доступность = НачислятьАмортизациюБУ;
		Элементы.ОбъемВыработки.Доступность = НачислятьАмортизациюБУ;
		
		Элементы.ЛиквидационнаяСтоимостьБУ.Доступность	= НачислятьАмортизациюБУ;
		Элементы.ГруппаОтражениеАмортизации.Доступность = НачислятьАмортизациюБУ;
		Элементы.НачислятьАмортизациюНУ.Доступность = НачислятьАмортизациюБУ;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("НачислятьАмортизациюНУ") Тогда
		
		Элементы.ЗаголовокСрокИспользованияНУ.Доступность	= НачислятьАмортизациюНУ;
		Элементы.ГруппаСрокИспользованияНУ.Доступность 		= НачислятьАмортизациюНУ;
		Элементы.ЗаголовокСпособНачисленияАмортизацииНУ.Доступность	= НачислятьАмортизациюНУ;
		Элементы.ЗаголовокСрокИспользованияНУ.Доступность 			= НачислятьАмортизациюНУ;
		Элементы.СпособНачисленияАмортизацииНУ.Доступность 			= НачислятьАмортизациюНУ;
		Элементы.СрокИспользованияНУ.Доступность 					= НачислятьАмортизациюНУ;
		Элементы.СрокИспользованияНУРасшифровка.Доступность 		= НачислятьАмортизациюНУ;
		
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("НалоговоеНазначение") Тогда
		
		ДоступностьЭлемента = НЕ НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность");
		
		Элементы.ПервоначальнаяСтоимостьНУ.Доступность	= ДоступностьЭлемента;
		Элементы.НакопленнаяАмортизацияНУ.Доступность 	= ДоступностьЭлемента;
		Элементы.ОстаточнаяСтоимостьНУ.Доступность		= ДоступностьЭлемента;
		
	КонецЕсли;

	
		
	Если ОбновитьВсе Или Реквизиты.Свойство("СпособНачисленияАмортизацииБУ") Тогда
		
		ПропорциональноОбъемуПродукции = (СпособНачисленияАмортизацииБУ=Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
		Элементы.ЗаголовокОбъемВыработкиБУ.Видимость = ПропорциональноОбъемуПродукции;
		Элементы.ОбъемВыработки.Видимость = ПропорциональноОбъемуПродукции;
		Элементы.СрокПолезногоИспользованияБУ.Видимость		= НЕ ПропорциональноОбъемуПродукции;
		Элементы.ЗаголовокСрокИспользованияБУ.Видимость 	= НЕ ПропорциональноОбъемуПродукции;
		Элементы.СрокИспользованияБУРасшифровка.Видимость	= НЕ ПропорциональноОбъемуПродукции;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("НалоговаяГруппаОС") Тогда
		
		СписокНалоговыхГруппОС = Элементы.НалоговаяГруппаОС.СписокВыбора;
		СписокНалоговыхГруппОС.Очистить();
		СписокНалоговыхГруппОС.Добавить(ПредопределенноеЗначение("Справочник.НалоговыеГруппыОсновныхСредств.НМАГруппа1"));
		СписокНалоговыхГруппОС.Добавить(ПредопределенноеЗначение("Справочник.НалоговыеГруппыОсновныхСредств.НМАГруппа2"));
		СписокНалоговыхГруппОС.Добавить(ПредопределенноеЗначение("Справочник.НалоговыеГруппыОсновныхСредств.НМАГруппа3"));
		СписокНалоговыхГруппОС.Добавить(ПредопределенноеЗначение("Справочник.НалоговыеГруппыОсновныхСредств.НМАГруппа4"));
		СписокНалоговыхГруппОС.Добавить(ПредопределенноеЗначение("Справочник.НалоговыеГруппыОсновныхСредств.НМАГруппа5"));
		СписокНалоговыхГруппОС.Добавить(ПредопределенноеЗначение("Справочник.НалоговыеГруппыОсновныхСредств.НМАГруппа6"));
		
	КонецЕсли; 

		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДанных()
	
	СтруктураДанных = Новый Структура(
	"НематериальныйАктив,
	|СчетУчета,
	|СчетАмортизации,
	|СчетУчетаДооценокНМА,
	|ПревышениеСуммДооценокНадСуммамиУценокБУ,
	|СуммаДопКапиталаНачисленногоПриДооценкахНМАБУ,
	|ПервоначальнаяСтоимостьБУ,
	|ПервоначальнаяСтоимостьНУ,
	|НакопленнаяАмортизацияБУ,
	|НакопленнаяАмортизацияНУ,
	|ДатаПринятияКУчетуРегл,
	|ВидОбъектаУчета,
	|НачислятьАмортизациюБУ,
	|НачислятьАмортизациюНУ,
	|ОбъемПродукцииРаботДляВычисленияАмортизации,
	|СпособНачисленияАмортизацииБУ,
	|СпособНачисленияАмортизацииНУ,
	|СрокПолезногоИспользованияБУ,
	|СрокПолезногоИспользованияНУ,
	|СтатьяРасходовАмортизации,
	|АналитикаРасходовАмортизации,
	|МОЛ,
	|НалоговаяГруппаОС,
	|ЛиквидационнаяСтоимостьБУ,
	|НалоговоеНазначение,
	|Подразделение");
		
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ЭтаФорма);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура НалоговаяГруппаОСПриИзменении(Элемент)
	ОбновитьСвойстваЭлементовФормы("НалоговаяГруппаОС");
КонецПроцедуры

&НаКлиенте
Процедура НалоговоеНазначениеПриИзменении(Элемент)
	
	Если НалоговоеНазначение = ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность") Тогда
		ПервоначальнаяСтоимостьНУ = 0;
		НакопленнаяАмортизацияНУ  = 0;
		ПересчитатьЗависимыеСуммы();
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы("НалоговоеНазначение");
	
КонецПроцедуры
#КонецОбласти
