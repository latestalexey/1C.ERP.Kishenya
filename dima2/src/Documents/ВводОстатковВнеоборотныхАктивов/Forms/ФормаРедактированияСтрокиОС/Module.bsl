&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДанныеЗаполнения);
	
	ДатаУчетнойПолитики = КонецМесяца(Дата) + 1;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма, Организация, ДатаУчетнойПолитики);
	
	Если Параметры.ЭтоНовый И НЕ Параметры.Копирование Тогда
		
		
		//СчетАмортизации = ПланыСчетов.Хозрасчетный.ИзносАмортизацияНеоборотныхАктивов;
		СчетУчетаДооценокОС = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств;
		МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
		СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
		НачислятьАмортизациюБУ = Истина;
		НачислятьАмортизациюНУ = Истина;
		
		
	КонецЕсли;
	
	ЗаголовокНакопленнаяАмортизация = НСтр("ru='Собственные средства, остаток на счете %1:';uk='Власні кошти, залишок на рахунку %1:'");
	ЗаголовокТекущаяСтоимость = НСтр("ru='Собственные средства, остаток на счете %1:';uk='Власні кошти, залишок на рахунку %1:'");
		
	Заголовок = НСтр("ru='Основные средства: %1';uk='Основні засоби: %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ?(Параметры.ЭтоНовый, НСтр("ru='Новая строка';uk='Новий рядок'"), ОсновноеСредство));
	
	СрокИспользованияБУСохраненный = СрокИспользованияБУ;
	Элементы.СрокИспользованияБУ.Подсказка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияБУ);
	Элементы.СрокИспользованияНУ.Подсказка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияНУ);
	
	ОстаточнаяСтоимостьБУ = ТекущаяСтоимостьБУ - НакопленнаяАмортизацияБУ;
	ОстаточнаяСтоимостьНУ = ТекущаяСтоимостьНУ - НакопленнаяАмортизацияНУ;
	
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	
	ОбновитьСвойстваЭлементовФормы();
	
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(
		АдресМестонахождения,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	АналитикаРасходовАмортизацииОбязательна =
		ЗначениеЗаполнено(СтатьяРасходовАмортизации)
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовАмортизации, "КонтролироватьЗаполнениеАналитики") = Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗавершитьРедактирование", ЭтаФорма),
			НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Результат=Неопределено, ДополнительныеСведения=Неопределено) Экспорт
	
	Если Результат = Неопределено Тогда
		Результат = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ПроверитьЗаполнение() Тогда
			Модифицированность = Ложь;
			Закрыть(ПолучитьСтруктуруДанных());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РеквизитыПроверкиСтатейРасходов = "";
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	
	Если НачислятьАмортизациюБУ = Истина Тогда
		РеквизитыПроверкиСтатейРасходов = РеквизитыПроверкиСтатейРасходов + ", СтатьяРасходовАмортизации, АналитикаРасходовАмортизации";
		
	Иначе
		
		НепроверяемыеРеквизиты.Добавить("СтатьяРасходовАмортизации");
		НепроверяемыеРеквизиты.Добавить("АналитикаРасходовАмортизации");
		
		НепроверяемыеРеквизиты.Добавить("МетодНачисленияАмортизацииБУ");
		НепроверяемыеРеквизиты.Добавить("СрокИспользованияБУ");
		НепроверяемыеРеквизиты.Добавить("ОбъемНаработкиБУ");
		
	КонецЕсли;
	
		Если НалоговоеНазначение = 
				ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность") Тогда
			НепроверяемыеРеквизиты.Добавить("ТекущаяСтоимостьНУ");
		КонецЕсли;

		
	Если (МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный
		И МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		
		НепроверяемыеРеквизиты.Добавить("СрокИспользованияБУ");
		
	КонецЕсли;
		
	Если МетодНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
		
		НепроверяемыеРеквизиты.Добавить("ОбъемНаработкиБУ");
		НепроверяемыеРеквизиты.Добавить("ПоказательНаработки");
		
	КонецЕсли;
	
	Если Не ПередаватьРасходыВДругуюОрганизацию Тогда
		НепроверяемыеРеквизиты.Добавить("ОрганизацияПолучательРасходов");
		НепроверяемыеРеквизиты.Добавить("СчетПередачиРасходов");
	КонецЕсли;
	
	
	Если Не ПустаяСтрока(РеквизитыПроверкиСтатейРасходов) Тогда
		
		ПланыВидовХарактеристик.СтатьиРасходов.ПроверитьЗаполнениеАналитик(
			ЭтаФорма,
			Сред(РеквизитыПроверкиСтатейРасходов, 3),
			НепроверяемыеРеквизиты,
			Отказ);
		
	КонецЕсли;
	
		
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОсновноеСредствоПриИзменении(Элемент)
	
	ОсновноеСредствоПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОсновноеСредствоПриИзмененииНаСервере()
	
	СтруктураРеквизитов = Новый Структура; 
	СтруктураРеквизитов.Вставить("ИнвентарныйНомер", "Код");
	РеквизитыОбъектаУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновноеСредство, СтруктураРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыОбъектаУчета);
	
КонецПроцедуры

#Область ОбработчикиСобытийСтраницыУчет

&НаКлиенте
Процедура СчетУчетаПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("СчетУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура СчетАмортизацииПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("СчетАмортизации");
	
КонецПроцедуры


&НаКлиенте
Процедура АдресМестонахожденияПриИзменении(Элемент)
	
	АдресМестонахожденияЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(
		АдресМестонахождения,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияОчистка(Элемент, СтандартнаяОбработка)
	
	АдресМестонахожденияЗначенияПолей = "";
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(
		УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"),
			АдресМестонахожденияЗначенияПолей),
		ЭтотОбъект,
		Новый ОписаниеОповещения("АдресМестонахожденияЗавершениеВыбора", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресМестонахожденияЗавершениеВыбора(РезультатОткрытияФормы, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(РезультатОткрытияФормы)<>Тип("Структура") Тогда
		// не было измнений в данных
		Возврат;
	КонецЕсли;
	
	АдресМестонахожденияЗначенияПолей = РезультатОткрытияФормы.КонтактнаяИнформация;
	АдресМестонахождения = РезультатОткрытияФормы.Представление;
	
КонецПроцедуры


&НаКлиенте
Процедура ПревышениеСуммДооценокНадСуммамиУценокБУПриИзменении(Элемент)
	Если СуммаДопКапиталаНачисленногоПриДооценкахОСБУ = 0 Тогда
		СуммаДопКапиталаНачисленногоПриДооценкахОСБУ = ПревышениеСуммДооценокНадСуммамиУценокБУ;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыСтоимость

&НаКлиенте
Процедура ПервоначальнаяСтоимостьОтличаетсяПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("ПервоначальнаяСтоимостьОтличается");
	
	Если Не ПервоначальнаяСтоимостьОтличается Тогда
		
		ПервоначальнаяСтоимостьБУ = ТекущаяСтоимостьБУ;
		ПервоначальнаяСтоимостьНУ = ТекущаяСтоимостьНУ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьПервоначальнуюСтоимость()
	
	Если Не ПервоначальнаяСтоимостьОтличается Тогда
		
		ПервоначальнаяСтоимостьБУ = ТекущаяСтоимостьБУ;
		ПервоначальнаяСтоимостьНУ = ТекущаяСтоимостьНУ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЗависимыеСуммы()
	
	ПересчитатьПервоначальнуюСтоимость();
	
	ОстаточнаяСтоимостьБУ = ТекущаяСтоимостьБУ - НакопленнаяАмортизацияБУ;
	ОстаточнаяСтоимостьНУ = ТекущаяСтоимостьНУ - НакопленнаяАмортизацияНУ;
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьБУПриИзменении(Элемент)
	
	СуммаНУ = ПервоначальнаяСтоимостьБУ;
	Если СуммаНУ < 0 Тогда
		ПервоначальнаяСтоимостьНУ = 0;
		//ПервоначальнаяСтоимостьВР = ПервоначальнаяСтоимостьБУ - ПервоначальнаяСтоимостьНУ;
	Иначе
		ПервоначальнаяСтоимостьНУ = СуммаНУ;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТекущаяСтоимостьБУПриИзменении(Элемент)
	
	СуммаНУ = ПересчитатьСуммуНУ(ТекущаяСтоимостьБУ);
	
	Если СуммаНУ < 0 Тогда
		ТекущаяСтоимостьНУ = 0;
	Иначе
		ТекущаяСтоимостьНУ = СуммаНУ;
	КонецЕсли;
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяСтоимостьНУПриИзменении(Элемент)
	
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияБУПриИзменении(Элемент)
		
		СуммаНУ = ПересчитатьСуммуНУ(НакопленнаяАмортизацияБУ);
		
		Если СуммаНУ < 0 Тогда
			НакопленнаяАмортизацияНУ = 0;
		Иначе
			НакопленнаяАмортизацияНУ = СуммаНУ;
		КонецЕсли;
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура НакопленнаяАмортизацияНУПриИзменении(Элемент)
	
	
	ПересчитатьЗависимыеСуммы();
	
КонецПроцедуры

&НаКлиенте
Функция ПересчитатьСуммуНУ(ПеремСуммаБУ)
	
	ПеремСуммаНУ = 0;
	
	Если НалоговоеНазначение <> 
			ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность") Тогда
		ПеремСуммаНУ = ПеремСуммаБУ;
	КонецЕсли; 
	
	Возврат ПеремСуммаНУ;

КонецФункции // ПересчитатьСуммуНУ()

#КонецОбласти

#Область ОбработчикиСобытийСтраницыСобытия

&НаКлиенте
Процедура ЕстьСобытияМодернизацииПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("ЕстьСобытияМодернизации");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыАмортизация

&НаКлиенте
Процедура МетодНачисленияАмортизацииБУПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы("МетодНачисленияАмортизацииБУ");
	
	СпособНачисленияАмортизацииНУ = 
			?(МетодНачисленияАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции"),
				МетодНачисленияАмортизацииБУ,ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный"));
		
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУПриИзменении(Элемент)
	
	Если (СрокИспользованияНУ = 0 Или СрокИспользованияБУСохраненный = СрокИспользованияНУ) Тогда
		
		СрокИспользованияНУ = СрокИспользованияБУ;
		Элементы.СрокИспользованияНУ.Подсказка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияНУ);
		
	КонецЕсли;
	
	СрокИспользованияБУСохраненный = СрокИспользованияБУ;
	Элементы.СрокИспользованияБУ.Подсказка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияБУ);
	 
	
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияБУОстаточныйПриИзменении(Элемент)
	
	СрокИспользованияБУСохраненный = СрокИспользованияБУ;
	Элементы.СрокИспользованияБУ.Подсказка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияБУ);
	Элементы.ИзносСрокИспользованияБУ.Подсказка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияБУ);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИспользованияНУПриИзменении(Элемент)
	
	Элементы.СрокИспользованияНУ.Подсказка = БухгалтерскийУчетКлиентСерверПереопределяемый.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияНУ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательНаработкиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ПоказательНаработки) Тогда
		ОбновитьСвойстваЭлементовФормы("ПоказательНаработки");
	Иначе
		Элементы.ОбъемНаработкиБУ.Подсказка = "";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыИзнос

#КонецОбласти

#Область ОбработчикиСобытийСтраницыОтражениеРасходов

&НаКлиенте
Процедура ПередаватьРасходыВДругуюОрганизациюПриИзменении(Элемент)
	
	Если Не ПередаватьРасходыВДругуюОрганизацию Тогда
		
		ОрганизацияПолучательРасходов = Неопределено;
		СчетПередачиРасходов = Неопределено;
		
	КонецЕсли;
	
	ОбновитьСвойстваЭлементовФормы("ПередаватьРасходыВДругуюОрганизацию");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовАмортизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтатьяРасходовАмортизации) Тогда
		СтатьяРасходовАмортизацииПриИзмененииНаСервере();
	Иначе
		АналитикаРасходовАмортизацииОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовАмортизацииПриИзмененииНаСервере()
	
	АналитикаРасходовАмортизацииОбязательна =
		(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходовАмортизации, "КонтролироватьЗаполнениеАналитики") = Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗавершитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиДоходов.УстановитьУсловноеОформлениеАналитик(УсловноеОформление,, Ложь);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление,
		"СтатьяРасходовАмортизации, АналитикаРасходовАмортизации",
		Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СчетУчетаПредставление(Счет)
	Возврат ?(ЗначениеЗаполнено(Счет), Счет, НСтр("ru='учета ОС';uk='обліку ОЗ'"));
КонецФункции

&НаСервере
Процедура ОбновитьСвойстваЭлементовФормы(ИзмененныеРеквизиты=Неопределено)
	
	ОбновитьВсе = (ИзмененныеРеквизиты = Неопределено);
	Реквизиты = Новый Структура(ИзмененныеРеквизиты);
	
	//	Иначе
	//		ЗаголовокТекущаяСтоимость = НСтр("ru='Остаток на счете %1:'");
	//		ЗаголовокНакопленнаяАмортизация = НСтр("ru='Остаток на счете %1:'");
	//		Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок = НСтр("ru='Сумма:'");
	//		
	//		Элементы.ГруппаСчетаУчета.Видимость = Истина;
	//		Элементы.ГруппаСчетаУчетаЦФ.Видимость = Ложь;
	//		Элементы.СтраницаОтражениеРасходов.Заголовок = НСтр("ru='Отражение расходов'");
	//		
	//		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость = Ложь;
	//		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Ложь;
	//		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость = Ложь;
	//		
	//		Элементы.ГруппаТекущаяСтоимостьСуммыЦФ.Видимость = Ложь;
	//		Элементы.ГруппаНакопленнаяАмортизацияСуммыЦФ.Видимость = Ложь;
	//		Элементы.ГруппаОстаточнаяСтоимостьСуммыЦФ.Видимость = Ложь;
	//		
	//		Элементы.ГруппаДоходыЦелевогоФинансирования.Видимость = Ложь;
	//		
	//	КонецЕсли;
	//	
	//	Реквизиты.Вставить("СчетУчета");
	//	Реквизиты.Вставить("СчетАмортизации");
	//	
	//КонецЕсли;
	//
	//Если ОбновитьВсе Или Реквизиты.Свойство("НачислениеИзноса") Тогда
	//	
	//	Элементы.СтраницаИзнос.Видимость = НачислениеИзноса;
	//	Элементы.ПорядокУчетаНУ.ТолькоПросмотр = НачислениеИзноса;
	//	Элементы.ПрименениеЦелевогоФинансирования.ТолькоПросмотр = НачислениеИзноса;
	//	
	//	МассивВидовСубконто = Новый Массив;
	//	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	//	МассивПараметровВыбора = Новый Массив;
	//	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ВидыСубконто", Новый ФиксированныйМассив(МассивВидовСубконто)));
	//	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	//	
	//	Если НачислениеИзноса Тогда
	//		
	//		
	//		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Истина));
	//		
	//		Элементы.СчетАмортизацииОсновной.Заголовок = НСтр("ru='Накопленного износа'");
	//		
	//		Элементы.ГруппаОстаточнаяСтоимость.Видимость = Ложь;
	//		Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru='Накопленный износ'");
	//		
	//		Элементы.НакопленнаяАмортизацияНУ.ТолькоПросмотр = Истина;
	//		Элементы.НакопленнаяАмортизацияПР.ТолькоПросмотр = Истина;
	//		
	//	Иначе
	//		
	//		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Забалансовый", Ложь));
	//		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Родитель", ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств));
	//		
	//		Элементы.СчетАмортизацииОсновной.Заголовок = НСтр("ru='Накопленной амортизации'");
	//		
	//		Элементы.ГруппаОстаточнаяСтоимость.Видимость = Истина;
	//		Элементы.ГруппаНакопленнаяАмортизация.Заголовок = НСтр("ru='Накопленная амортизация'");
	//		
	//		Элементы.НакопленнаяАмортизацияНУ.ТолькоПросмотр = Ложь;
	//		Элементы.НакопленнаяАмортизацияПР.ТолькоПросмотр = Ложь;
	//		
	//	КонецЕсли;
	//	
	//	//Элементы.СчетАмортизацииОсновной.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	//	
	//КонецЕсли;
	//
	//-- НЕУКР
	
	Если ОбновитьВсе Тогда
	
		
		Если Элементы.ГруппаСчетаУчета.Видимость Тогда
			Элементы.СчетАмортизацииОсновной.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ГруппаНакопленнаяАмортизация.Видимость = Истина;
		Элементы.ГруппаОстаточнаяСтоимость.Видимость = Истина;
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПервоначальнаяСтоимостьОтличается") Тогда
		
		Элементы.ГруппаПервоначальнаяСтоимостьСуммы.ТолькоПросмотр = Не ПервоначальнаяСтоимостьОтличается;
		
		Элементы.ПервоначальнаяСтоимостьБУ.АвтоОтметкаНезаполненного = ПервоначальнаяСтоимостьОтличается;
		Элементы.ПервоначальнаяСтоимостьБУ.ОтметкаНезаполненного = ПервоначальнаяСтоимостьОтличается И Не ЗначениеЗаполнено(ПервоначальнаяСтоимостьБУ);
		
		Элементы.ПервоначальнаяСтоимостьНУ.АвтоОтметкаНезаполненного = ПервоначальнаяСтоимостьОтличается;
		Элементы.ПервоначальнаяСтоимостьНУ.ОтметкаНезаполненного = ПервоначальнаяСтоимостьОтличается И Не ЗначениеЗаполнено(ПервоначальнаяСтоимостьНУ);
		
	КонецЕсли;
	
	
	Если ОбновитьВсе Или Реквизиты.Свойство("СчетУчета") Тогда
		
		
		Элементы.МетодНачисленияАмортизацииБУ.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСпособовАмортизацииБУ(СчетУчета));
		Элементы.СпособНачисленияАмортизацииНУ.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокСпособовАмортизацииБУ(СчетУчета,Ложь));
		
		Если  СчетУчета.Родитель = ПланыСчетов.Хозрасчетный.ОсновныеСредства Тогда
			СчетАмортизации = ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств;	
		ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.БиблиотечныеФондыИндивидуально 
			 ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыИндивидуально Тогда
			СчетАмортизации = ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовИндивидуально;
		ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно 
			 ИЛИ СчетУчета = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно Тогда
			СчетАмортизации = ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно;
		КонецЕсли;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок = СтрШаблон(ЗаголовокТекущаяСтоимость, СчетУчетаПредставление(СчетУчета));
		
	КонецЕсли;
	
	
	
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ЕстьСобытияМодернизации") Тогда
		
		Элементы.ДатаМодернизации.ТолькоПросмотр = Не ЕстьСобытияМодернизации;
		Элементы.НазваниеДокументаМодернизации.ТолькоПросмотр = Не ЕстьСобытияМодернизации;
		Элементы.НомерДокументаМодернизации.ТолькоПросмотр = Не ЕстьСобытияМодернизации;
		Элементы.СобытиеМодернизации.ТолькоПросмотр = Не ЕстьСобытияМодернизации;
		
		Элементы.СтоимостьДляВычисленияАмортизации.Видимость = ЕстьСобытияМодернизации;
		Реквизиты.Вставить("МетодНачисленияАмортизацииБУ");
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ДатаПринятияКУчету") Тогда
			
		
	КонецЕсли;
	
		
		
	
	Если ОбновитьВсе Тогда
		
		Элементы.ГруппаПервоначальнаяСтоимостьСуммы.ТолькоПросмотр = Не ПервоначальнаяСтоимостьОтличается;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("МетодНачисленияАмортизацииБУ") Тогда
		Элементы.СрокИспользованияБУ.АвтоОтметкаНезаполненного = (
			МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			Или МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
			Или МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			Или МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка
			Или МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка	
			Или МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._100
			Или МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._50_50);
			
		ПоНаработке = (МетодНачисленияАмортизацииБУ=Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);		
		Элементы.ОбъемНаработкиБУ.Видимость = ПоНаработке;
		Элементы.ПоказательНаработки.Видимость = ПоНаработке;
		Элементы.ГрафикАмортизацииБУ.Видимость = ПоНаработке;
		Элементы.СрокИспользованияБУ.Видимость = Не ЕстьСобытияМодернизации Или ПоНаработке;
		Элементы.СрокИспользованияБУОстаточный.Видимость = ЕстьСобытияМодернизации И Не ПоНаработке;
		
		Элементы.ОбъемНаработкиБУ.Видимость = Не ЕстьСобытияМодернизации И ПоНаработке;
		Элементы.ОбъемНаработкиБУОстаточный.Видимость = ЕстьСобытияМодернизации И ПоНаработке;
		Если МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._50_50
			ИЛИ МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда
		    НачислятьАмортизациюНУ = (НачислятьАмортизациюБУ = Истина);
			Элементы.НачислятьАмортизациюНУ.Доступность = Ложь;
		Иначе 
			Элементы.НачислятьАмортизациюНУ.Доступность = Истина;
		КонецЕсли;
		
		Элементы.СрокИспользованияБУ.Видимость = (
		    МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			ИЛИ МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			ИЛИ МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка
			ИЛИ МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
		
		Элементы.ЛиквидационнаяСтоимостьБУ.Видимость = (
		 	МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
			ИЛИ МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции
			ИЛИ МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный
			ИЛИ МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка
			ИЛИ МетодНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
		Если Элементы.ЛиквидационнаяСтоимостьБУ.Видимость = Ложь Тогда
		   ЛиквидационнаяСтоимостьБУ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("НалоговаяГруппаОС") Тогда	
	КонецЕсли;

	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПередаватьРасходыВДругуюОрганизацию") Тогда
		
		Элементы.ОрганизацияПолучательРасходов.Доступность = ПередаватьРасходыВДругуюОрганизацию;
		Элементы.СчетПередачиРасходов.Доступность = ПередаватьРасходыВДругуюОрганизацию;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("ПоказательНаработки") Тогда
		
		Если ЗначениеЗаполнено(ПоказательНаработки) Тогда
			Элементы.ОбъемНаработкиБУ.Подсказка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоказательНаработки, "ЕдиницаИзмерения");
		Иначе
			Элементы.ОбъемНаработкиБУ.Подсказка = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьВсе Или Реквизиты.Свойство("Организация") Тогда
		
		ЕстьСвязанныеОрганизации = Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация);
		Элементы.ПередаватьРасходыВДругуюОрганизацию.Видимость = ЕстьСвязанныеОрганизации;
		Элементы.ОрганизацияПолучательРасходов.Видимость = ЕстьСвязанныеОрганизации;
		Элементы.СчетПередачиРасходов.Видимость = ЕстьСвязанныеОрганизации;
		
	КонецЕсли;
	
	
	Если ОбновитьВсе Или Реквизиты.Свойство("НалоговоеНазначение") Тогда
		Если НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
			Элементы.ГруппаАмортизацияНУ.Видимость = Ложь;
		Иначе 
			Элементы.ГруппаАмортизацияНУ.Видимость = Истина;
		КонецЕсли;
		Если НалоговоеНазначение = 
				ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность") Тогда
				
			Элементы.ТекущаяСтоимостьНУ.АвтоОтметкаНезаполненного = Ложь;
			
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСписокСпособовАмортизацииБУ(СчетУчетаБУ,СписокСпособовБУ=Истина) Экспорт
	
	СписокПеречисления = Новый Массив;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	Если СписокСпособовБУ Тогда
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	КонецЕсли; 		
	
	Если ЗначениеЗаполнено(СчетУчетаБУ) 
	   И СчетУчетаБУ.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа) Тогда		  
	   
	   	Если СчетУчетаБУ.Родитель = ПланыСчетов.Хозрасчетный.БиблиотечныеФонды 
		 ИЛИ СчетУчетаБУ.Родитель = ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивы Тогда			
			СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС._50_50);
			СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС._100);			
		КонецЕсли;
		
	Иначе	
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка);
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный);		
	КонецЕсли;
	
	Возврат СписокПеречисления;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДанных()
	
	СтруктураДанных = Новый Структура(
	"ОсновноеСредство,
	|ИнвентарныйНомер,
	|СчетУчета,
	|СчетАмортизации,
	|МОЛ,
	|АдресМестонахождения,
	|ПервоначальнаяСтоимостьБУ,
	|ПервоначальнаяСтоимостьНУ,
	|ТекущаяСтоимостьБУ,
	|ТекущаяСтоимостьНУ,
	|НакопленнаяАмортизацияБУ,
	|НакопленнаяАмортизацияНУ,
	|НачислятьАмортизациюБУ,
	|МетодНачисленияАмортизацииБУ,
	|СпособНачисленияАмортизацииНУ,
	|СчетУчетаДооценокОС,
	|НалоговоеНазначение,
	|НалоговаяГруппаОС,
	|ЛиквидационнаяСтоимостьБУ,
	|СуммаПоследнейМодернизацииБУ,
	|ПревышениеСуммДооценокНадСуммамиУценокБУ,
	|СуммаДопКапиталаНачисленногоПриДооценкахОСБУ,
	|СрокИспользованияБУ,
	|ПоказательНаработки,
	|ОбъемНаработкиБУ,
	|ГрафикАмортизацииБУ,
	|НачислятьАмортизациюНУ,
	|СрокИспользованияНУ,
	|СтатьяРасходовАмортизации,
	|АналитикаРасходовАмортизации,
	|НомерДокументаПринятияКУчету,
	|НомерДокументаМодернизации,
	|СобытиеПринятияКУчету,
	|СобытиеМодернизации,
	|НазваниеДокументаПринятияКУчету,
	|НазваниеДокументаМодернизации,
	|ДатаПринятияКУчету,
	|ДатаМодернизации,
	|ПередаватьРасходыВДругуюОрганизацию,
	|ОрганизацияПолучательРасходов,
	|СчетПередачиРасходов,
	|ЕстьСобытияМодернизации,
	|СтоимостьДляВычисленияАмортизации,
	|ПервоначальнаяСтоимостьОтличается");
	
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ЭтаФорма);
	
	Возврат СтруктураДанных;
	
КонецФункции


&НаКлиенте
Процедура ГруппаОСПриИзменении(Элемент)
	ГруппаОСПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ГруппаОСПриИзмененииНаСервере()
	ОбновитьСвойстваЭлементовФормы("НалоговаяГруппаОС");	
КонецПроцедуры

&НаКлиенте
Процедура НалоговоеНазначениеПриИзменении(Элемент)
	ОбновитьСвойстваЭлементовФормы("НалоговоеНазначение");
КонецПроцедуры


#КонецОбласти
