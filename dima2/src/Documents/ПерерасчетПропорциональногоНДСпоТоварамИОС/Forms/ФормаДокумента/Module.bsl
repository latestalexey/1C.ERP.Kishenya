#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    УстановитьУсловноеОформление();
    
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
    
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		Объект.Дата = Параметры.ПериодРегистрации;
    КонецЕсли;
    
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
    
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
        Объект.ФормироватьДокументУстановкиКоэффициентаНаСледующийГод = (Месяц(Объект.Дата) = 12);
    КонецЕсли;
    
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
    
	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
  
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
    ПриЧтенииСозданииНаСервере();
    
    МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
    
    ЗаполнитьРеквизитыФормы();
    УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

    ДатаПриИзмененииНаСервере();
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;

	РасшифровкаОВключенииВДекларацию = НСтр("ru='Данные перерасчета будут включены в декларацию по НДС за ';uk='Результати перерахунку будуть включені до декларації з ПДВ за '") + Формат(Объект.Дата,"ДФ=MM.yyyy");
	
	Объект.ФормироватьДокументУстановкиКоэффициентаНаСледующийГод = (Месяц(Объект.Дата) = 12);
    
    УправлениеЭлементамиФормы();
	
	ЗаполнитьКолонкиПараметрыПерерасчетаОС();	
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецРежимНалогообложенияПриИзменении(Элемент)
	
	ЭлементСпискаЗначений = Элемент.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);

КонецПроцедуры

&НаКлиенте
Процедура СуммаВсехОперацийПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта();
	РассчитатьКоэффициент(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	// Параллельно сделаем пересчет в ТЧ по ОС текущего года и одного года эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций;		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОблагаемыхОперацийПриИзменении(Элемент)

	ДанныеОбъекта = ДанныеОбъекта();
	РассчитатьКоэффициент(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	// Параллельно сделаем пересчет в ТЧ по ОС текущего года и одного года эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций;		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентПриИзменении(Элемент)

	ДанныеОбъекта = ДанныеОбъекта();
    РассчитатьСуммуВключенияВКредит(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
	// Параллельно сделаем пересчет в ТЧ по ОС текущего года и одного года эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) > 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций;		
		Строка.Коэффициент 				= Объект.Коэффициент;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПоставкиПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта();
	
    ДанныеОбъекта.НДСПоставки = ДанныеОбъекта.СуммаПоставки * НДСОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСЧислом(НДСОбщегоНазначенияПовтИсп.СтавкаНДСПоУмолчанию());
	
	РассчитатьСуммуВключенияВКредит(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура НДСПропорциональноКредитДоПерерасчетаПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта();
	РассчитатьСуммуКорректировки(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура НДСПропорциональноКредитПриИзменении(Элемент)
	
	ДанныеОбъекта = ДанныеОбъекта();
	
	РассчитатьСуммуКорректировки(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКорректировкиНДСПриИзменении(Элемент)
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВсехОпераций2годаПриИзменении(Элемент)
	
	РассчитатьКоэффициент2Года();
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций2года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций2года;		
		Строка.Коэффициент 				= Объект.Коэффициент2года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаОблагаемыхОпераций2ГодаПриИзменении(Элемент)
	
	РассчитатьКоэффициент2Года();
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций2года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций2года;		
		Строка.Коэффициент 				= Объект.Коэффициент2года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВсехОпераций3ГодаПриИзменении(Элемент)
	
	РассчитатьКоэффициент3Года();
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 3 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций3года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций3года;		
		Строка.Коэффициент 				= Объект.Коэффициент3года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();

КонецПроцедуры

&НаКлиенте
Процедура СуммаОблагаемыхОпераций3ГодаПриИзменении(Элемент)
	
	РассчитатьКоэффициент3Года();
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 3 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций3года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций3года;		
		Строка.Коэффициент 				= Объект.Коэффициент3года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура Коэффициент2ГодаПриИзменении(Элемент)
	
	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций2года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций2года;		
		Строка.Коэффициент 				= Объект.Коэффициент2года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура Коэффициент3ГодаПриИзменении(Элемент)

	// Параллельно сделаем пересчет в ТЧ по ОС двух лет эксплуатации, 
	// т.к. в этих строках параметры перерасчета используются из шапки (за текущий и предыдущий год)
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
	
		Если Год(Объект.Дата) - Год(Строка.ДатаНачалаИспользования) <> 3 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.СуммаВсехОпераций 		= Объект.СуммаВсехОпераций3года;		
		Строка.СуммаОблагаемыхОпераций 	= Объект.СуммаОблагаемыхОпераций3года;		
		Строка.Коэффициент 				= Объект.Коэффициент3года;		
		
		ДанныеСтроки = ДанныеСтроки(Строка, "ПараметрыПерерасчетаОС");
		РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
		
		ЗаполнитьЗначенияСвойств(Строка, ДанныеСтроки);
		
	КонецЦикла;
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАвансыПоставщикам

&НаКлиенте
Процедура АвансыПоставщикамНДСПропорциональноКредитДоПерерасчетаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	
	ТекущиеДанные.СуммаКорректировкиНДС = ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.ВидыПоставки.Поставка"), ТекущиеДанные.НДСПропорциональноКредит, 			   - ТекущиеДанные.НДСПропорциональноКредит)
								 		- ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.ВидыПоставки.Поставка"), ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета, - ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета);
										
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамНДСПропорциональноКредитПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	
	ТекущиеДанные.СуммаКорректировкиНДС = ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.ВидыПоставки.Поставка"), ТекущиеДанные.НДСПропорциональноКредит, 			   - ТекущиеДанные.НДСПропорциональноКредит)
								 		- ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.ВидыПоставки.Поставка"), ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета, - ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета);
										
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамПослеУдаления(Элемент)
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамРасчетыВозвратПриИзменении(Элемент)
	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	
	ТекущиеДанные.СуммаКорректировкиНДС = ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.ВидыПоставки.Поставка"), ТекущиеДанные.НДСПропорциональноКредит, 			   - ТекущиеДанные.НДСПропорциональноКредит)
								 		- ?(ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.ВидыПоставки.Поставка"), ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета, - ТекущиеДанные.НДСПропорциональноКредитДоПерерасчета);
										
	РассчитатьСуммуКорректировкиПоАктивам();
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		РассчитатьСуммуКорректировкиПоАктивам();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыПерерасчетаОС

&НаКлиенте
Процедура ПараметрыПерерасчетаОСНеоборотныйАктивПриИзменении(Элемент)
    ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;
    ЗаполнитьКолонкуПараметрыПерерасчетаОС(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСДатаНачалаИспользованияПриИзменении(Элемент)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССуммаВсехОперацийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКоэффициент(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССуммаОблагаемыхОперацийПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКоэффициент(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСКоэффициентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССуммаПоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
    ДанныеСтроки.НДСПоставки = ДанныеСтроки.СуммаПоставки * НДСОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСЧислом(НДСОбщегоНазначенияПовтИсп.СтавкаНДСПоУмолчанию());
	РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСНДСПоставкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуВключенияВКредит(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСНДСПропорциональноКредитДоПерерасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСНДСПропорциональноКредитПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСОССписанПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьСуммуКорректировки(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	РассчитатьСуммуКорректировкиПоАктивам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССтоимостьБУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	СуммаКорректировкиНУ = ТекущиеДанные.СуммаКорректировкиНУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиНУ = СуммаКорректировкиНУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСАмортизацияБУПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	СуммаКорректировкиНУ = ТекущиеДанные.СуммаКорректировкиНУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиНУ = СуммаКорректировкиНУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОССтоимостьНУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	СуммаКорректировкиБУ = ТекущиеДанные.СуммаКорректировкиБУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиБУ = СуммаКорректировкиБУ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПерерасчетаОСАмортизацияНУПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПараметрыПерерасчетаОС.ТекущиеДанные;

	СуммаКорректировкиБУ = ТекущиеДанные.СуммаКорректировкиБУ;
	
	ДанныеСтроки = ДанныеСтроки(ТекущиеДанные, "ПараметрыПерерасчетаОС");
	РассчитатьКорректировкуБУНУ(ДанныеСтроки);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтроки);
	
	ТекущиеДанные.СуммаКорректировкиБУ = СуммаКорректировкиБУ;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПерерасчет(Команда)
    
	ТекстВопроса	= НСтр("ru='Документ будет заполнен заново, все введенные данные будут удалены. Продолжить?';uk='Документ буде заповнений заново, усі введені дані будуть вилучені. Продовжити?'");
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПерерасчетЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
    
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
    
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыПерерасчетаОСПартияТМЦВЭксплуатации.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПараметрыПерерасчетаОС.НеоборотныйАктив");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
    
    //

    Элемент = УсловноеОформление.Элементы.Добавить();

    ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
    ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПараметрыПерерасчетаОСПартияТМЦВЭксплуатации.Имя);

    ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПараметрыПерерасчетаОС.ТипНеоборотногоАктива");
    ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ОтборЭлемента.ПравоеЗначение = "Номенклатура";
    
    Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры    

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьРеквизитыФормы();

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьКолонкиПараметрыПерерасчетаОС()

	Для Каждого СтрокаТаблицы Из Объект.ПараметрыПерерасчетаОС Цикл
		ЗаполнитьКолонкуПараметрыПерерасчетаОС(СтрокаТаблицы);
	КонецЦикла; 
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКолонкуПараметрыПерерасчетаОС(СтрокаТаблицы)

    Если ТипЗнч(СтрокаТаблицы.НеоборотныйАктив) = Тип("СправочникСсылка.Номенклатура") Тогда
        СтрокаТаблицы.ТипНеоборотногоАктива = "Номенклатура";
    Иначе     
        СтрокаТаблицы.ТипНеоборотногоАктива = "НеНоменклатура";
    КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Функция ДанныеОбъекта()
	
	ДанныеОбъекта = Новый Структура(
        "ЭтоОбъект, Коэффициент, СуммаПоставки, СуммаВсехОпераций, СуммаОблагаемыхОпераций, НДСПоставки,
		|СуммаКорректировкиНДС, НДСПропорциональноКредитДоПерерасчета, НДСПропорциональноКредит, 
        |СуммаКорректировкиНДСПоАвансамПоставщикамИОС, СуммаКорректировкиБУ", 
        Истина
    );
    
    ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Функция ДанныеСтроки(СтрокаТабличнойЧасти, ИмяТЧ = "ПараметрыПерерасчетаОС")
	
	Если ИмяТЧ = "ПараметрыПерерасчетаОС" Тогда
		ДанныеСтроки = Новый Структура(
            "Коэффициент, СуммаВсехОпераций, СуммаОблагаемыхОпераций, СуммаПоставки, НДСПоставки, 
			|СуммаКорректировкиНДС, НДСПропорциональноКредитДоПерерасчета, НДСПропорциональноКредит, 
			|СуммаКорректировкиБУ, СуммаКорректировкиНУ, 
			|СтоимостьБУ, СтоимостьНУ, АмортизацияБУ, АмортизацияНУ, ОССписан"
        );
	КонецЕсли;	
	                                            
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуКорректировкиПоАктивам()
	
	ДанныеОбъекта = ДанныеОбъекта();
	РассчитатьКорректировкуБУНУ(ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);

КонецПроцедуры

&НаСервере
Процедура РассчитатьКорректировкуБУНУ(СтрокаТабличнойЧасти)

	Если ТипЗнч(СтрокаТабличнойЧасти) = Тип("ДанныеФормыСтруктура") ИЛИ (СтрокаТабличнойЧасти.Свойство("ЭтоОбъект") И СтрокаТабличнойЧасти.ЭтоОбъект = Истина) Тогда
	
		СтрокаТабличнойЧасти.СуммаКорректировкиНДСПоАвансамПоставщикамИОС = Объект.АвансыПоставщикам.Итог("СуммаКорректировкиНДС");
		
		Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
			// для расчета отбираем только строки по ОС, введенным в эксплуатацию в этом году
			Если Строка.ДатаНачалаИспользования < НачалоГода(Объект.Дата) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СуммаКорректировкиНДСПоАвансамПоставщикамИОС = СтрокаТабличнойЧасти.СуммаКорректировкиНДСПоАвансамПоставщикамИОС + Строка.СуммаКорректировкиНДС;
			
		КонецЦикла;
		
		СтрокаТабличнойЧасти.СуммаКорректировкиБУ = СтрокаТабличнойЧасти.СуммаКорректировкиНДСПоАвансамПоставщикамИОС - СтрокаТабличнойЧасти.СуммаКорректировкиНДС; 
		
	Иначе
		
		СтруктураПроверкиНаличияСвойства = Новый Структура("СтоимостьБУ, ОССписан", Неопределено, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураПроверкиНаличияСвойства, СтрокаТабличнойЧасти);
		
		Если  НЕ СтруктураПроверкиНаличияСвойства.СтоимостьБУ = Неопределено
			И НЕ СтруктураПроверкиНаличияСвойства.ОССписан = Истина Тогда
		
			СтрокаТабличнойЧасти.СуммаКорректировкиБУ = - ?(СтрокаТабличнойЧасти.СтоимостьБУ = 0, 0, СтрокаТабличнойЧасти.АмортизацияБУ * (СтрокаТабличнойЧасти.СуммаКорректировкиНДС) / СтрокаТабличнойЧасти.СтоимостьБУ);		
			СтрокаТабличнойЧасти.СуммаКорректировкиНУ = - ?(СтрокаТабличнойЧасти.СтоимостьНУ = 0, 0, СтрокаТабличнойЧасти.АмортизацияНУ * (СтрокаТабличнойЧасти.СуммаКорректировкиНДС) / СтрокаТабличнойЧасти.СтоимостьНУ);		
			
		ИначеЕсли НЕ СтруктураПроверкиНаличияСвойства.ОССписан = Неопределено Тогда
			
			СтрокаТабличнойЧасти.СуммаКорректировкиБУ = - СтрокаТабличнойЧасти.СуммаКорректировкиНДС;
			СтрокаТабличнойЧасти.СуммаКорректировкиНУ = - СтрокаТабличнойЧасти.СуммаКорректировкиНДС;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициент(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.Коэффициент = ?(СтрокаТабличнойЧасти.СуммаВсехОпераций = 0, 0, СтрокаТабличнойЧасти.СуммаОблагаемыхОпераций / СтрокаТабличнойЧасти.СуммаВсехОпераций) * 100;
    РассчитатьСуммуВключенияВКредит(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициент2Года()
	
	Объект.Коэффициент2Года = ?(Объект.СуммаВсехОпераций2Года = 0, 0, Объект.СуммаОблагаемыхОпераций2Года / Объект.СуммаВсехОпераций2Года) * 100;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоэффициент3Года()

	Объект.Коэффициент3Года = ?(Объект.СуммаВсехОпераций3Года = 0, 0, Объект.СуммаОблагаемыхОпераций3Года / Объект.СуммаВсехОпераций3Года) * 100;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВключенияВКредит(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.НДСПропорциональноКредит = СтрокаТабличнойЧасти.НДСПоставки * СтрокаТабличнойЧасти.Коэффициент / 100;
	
	РассчитатьСуммуКорректировки(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуКорректировки(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаКорректировкиНДС = - СтрокаТабличнойЧасти.НДСПропорциональноКредитДоПерерасчета + СтрокаТабличнойЧасти.НДСПропорциональноКредит;

	РассчитатьКорректировкуБУНУ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмненииСуммыОстаткаНа15Счете(СтрокаТабличнойЧасти)
	
    ЗначениеСтавкиНДСПоУмолчанию = НДСОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСЧислом(НДСОбщегоНазначенияПовтИсп.СтавкаНДСПоУмолчанию());
	
	СтрокаТабличнойЧасти.СуммаПоставки = СтрокаТабличнойЧасти.СуммаОстаток / (1 + ЗначениеСтавкиНДСПоУмолчанию * (1 - КоэффициентПропорциональногоНДС));		
	
	СтрокаТабличнойЧасти.НДСПоставки   = СтрокаТабличнойЧасти.СуммаПоставки * ЗначениеСтавкиНДСПоУмолчанию;
	
	СтрокаТабличнойЧасти.НДСПропорциональноКредитДоПерерасчета = (СтрокаТабличнойЧасти.НДСПоставки + СтрокаТабличнойЧасти.СуммаПоставки) - СтрокаТабличнойЧасти.СуммаОстаток;
	
	РассчитатьСуммуВключенияВКредит(СтрокаТабличнойЧасти);
	
	// проводим окончательный расчет
	РассчитатьКорректировкуБУНУ(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПерерасчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполнитьПерерасчетСервер();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСуммыОблагаемыхПоставокПоНДС(Организация, НачПериода, КонПериода, СпецРежимНалогообложения = 0) 

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  КонПериода);
	
	МассивВсеОперации = Новый Массив();
	МассивОблагаемыеОперации = Новый Массив();
	
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20ПоставкаОФ);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Экспорт);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Другие);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаНецелевоеИсп);
	// из неиспользуемых в 2011 году
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаСамостОшибки);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаПрочее);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОИмпортВексель);
	
	Для Каждого ОблОперация Из МассивОблагаемыеОперации Цикл
		МассивВсеОперации.Добавить(ОблОперация);
    КонецЦикла;
    
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОУслугиВнеУкраины);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден);
	
	Запрос.УстановитьПараметр("МассивВсеОперации", МассивВсеОперации);
	Запрос.УстановитьПараметр("МассивОблагаемыеОперации", МассивОблагаемыеОперации);
	
    Ставка0ИЛИ20 = Новый Массив();
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС20);
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС0);
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС7);
	Запрос.УстановитьПараметр("Ставка0ИЛИ20", Ставка0ИЛИ20);
	
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", СпецРежимНалогообложения);
	
	УсловнаяПродажа = Новый Массив;
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа);
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажаНеоборотныхАктивов);
	//УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийПриложений2КНалоговойНакладной.УсловнаяПродажаВозврат);
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа);
	Запрос.УстановитьПараметр("УсловнаяПродажа", УсловнаяПродажа);
	
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	ЕСТЬNULL(СУММА(НДСНалоговыеОбязательстваОбороты.СуммаБезНДСОборот), 0) КАК СуммаВсехОпераций,
    |	ЕСТЬNULL(СУММА(ВЫБОР
    |				КОГДА НДСНалоговыеОбязательстваОбороты.СтатьяДекларацииНДСНалоговыеОбязательства В (&МассивОблагаемыеОперации)
    |						И НДСНалоговыеОбязательстваОбороты.СтавкаНДС В (&Ставка0ИЛИ20)
    |					ТОГДА НДСНалоговыеОбязательстваОбороты.СуммаБезНДСОборот
    |				ИНАЧЕ 0
    |			КОНЕЦ), 0) КАК СуммаОблагаемыхОпераций
    |ИЗ
    |	РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов.Обороты(
    |			&НачПериода,
    |			&КонПериода,
    |			Регистратор,
    |			АналитикаУчетаПоПартнерам.Организация = &Организация
    |				И СтатьяДекларацииНДСНалоговыеОбязательства В (&МассивВсеОперации)) КАК НДСНалоговыеОбязательстваОбороты
    | ГДЕ 
    |	НЕ Регистратор.ВидОперации В (&УсловнаяПродажа) ИЛИ Период < ДатаВремя(2015,07,01)
    |	И ЕстьNULL(Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
    |";          
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПродажНДС = Новый Структура();
	СтруктураПродажНДС.Вставить("СуммаОблагаемыхОпераций", 0);
	СтруктураПродажНДС.Вставить("СуммаВсехОпераций", 0);
	
	Если Выборка.Следующий() Тогда
		
		СтруктураПродажНДС.СуммаОблагаемыхОпераций = Выборка.СуммаОблагаемыхОпераций;
		СтруктураПродажНДС.СуммаВсехОпераций 	   = Выборка.СуммаВсехОпераций;
	
	КонецЕсли;
	
    Возврат  СтруктураПродажНДС;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПерерасчетСервер()
	// очищаем документ
	Объект.ПараметрыПерерасчетаОС.Очистить();
	Объект.АвансыПоставщикам.Очистить();
	
	// заполняем перерасчет текущего года определяем суммы продаж (обл. и не обл. операции)
	НачПериода = НачалоГода(Объект.Дата);
	КонПериода = КонецМесяца(Объект.Дата);
	СтруктураПродажНДСТовары = ПолучитьСуммыОблагаемыхПоставокПоНДС(Объект.Организация, НачПериода, КонПериода, Объект.СпецРежимНалогообложения);
	Объект.СуммаВсехОпераций 		 = СтруктураПродажНДСТовары.СуммаВсехОпераций;
	Объект.СуммаОблагаемыхОпераций   = СтруктураПродажНДСТовары.СуммаОблагаемыхОпераций;
	
	// Теперь получим суммы приобретений товаров, то есть суммы, включенные в декларацию в строки 15, 16.1.2, 16.1.3 + все уточненки за указанный период
	Запрос = Новый Запрос();
						   
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);


	
	Запрос.УстановитьПараметр("ВидПоставки", Перечисления.ВидыПоставки.Поставка);
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", Объект.СпецРежимНалогообложения);
	Запрос.УстановитьПараметр("ПропорциональныйНДС", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	ЕСТЬNULL(СУММА(НДСНалоговыйКредит.СуммаВзаиморасчетовРасход), 0) КАК СуммаПоставки,
    |	ЕСТЬNULL(СУММА(НДСНалоговыйКредит.СуммаНДСКредитРасход), 0) КАК НДСПропорциональноКредитДоПерерасчета,
    |	НДСНалоговыйКредит.СтавкаНДС
    |ИЗ
    |	РегистрНакопления.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов.Обороты(&НачПериода, &КонПериода, Регистратор, ВидПоставки = &ВидПоставки) КАК НДСНалоговыйКредит
    |ГДЕ
    |	ВЫБОР
    |			КОГДА ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
    |				ТОГДА НДСНалоговыйКредит.Регистратор.УточняемыйПериод МЕЖДУ &НачПериода И &КонПериода
    |			ИНАЧЕ ИСТИНА
    |		КОНЕЦ
    |	И (НДСНалоговыйКредит.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
    |			ИЛИ НДСНалоговыйКредит.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7))
    |	И ЕСТЬNULL(НДСНалоговыйКредит.Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
    |	И НДСНалоговыйКредит.АналитикаУчетаПоПартнерам.Организация = &Организация
    |	И НДСНалоговыйКредит.НалоговоеНазначение = &ПропорциональныйНДС
    |
    |СГРУППИРОВАТЬ ПО
    |	НДСНалоговыйКредит.СтавкаНДС
    |	    
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	СУММА(ТаможеннаяДекларацияИмпортТовары.ТаможеннаяСтоимость+ТаможеннаяДекларацияИмпортТовары.СуммаПошлины+ТаможеннаяДекларацияИмпортТовары.СуммаАкциза+ТаможеннаяДекларацияИмпортТовары.СуммаНДС) КАК СуммаПоставки,
    |	СУММА(ТаможеннаяДекларацияИмпортТовары.СуммаНДС-ТаможеннаяДекларацияИмпортТовары.СуммаНДСПропорционально) КАК НДСПропорциональноКредитДоПерерасчета,
    |	ТаможеннаяДекларацияИмпортРазделы.СтавкаНДС
    |ИЗ
    |	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт.Разделы КАК ТаможеннаяДекларацияИмпортРазделы
    |   ПО ТаможеннаяДекларацияИмпортТовары.Ссылка = ТаможеннаяДекларацияИмпортРазделы.Ссылка   
    |   И  ТаможеннаяДекларацияИмпортТовары.НомерРаздела = ТаможеннаяДекларацияИмпортРазделы.НомерРаздела   
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпортШапка
    |   ПО ТаможеннаяДекларацияИмпортТовары.Ссылка = ТаможеннаяДекларацияИмпортШапка.Ссылка   
    |ГДЕ
    |	ТаможеннаяДекларацияИмпортШапка.Дата МЕЖДУ &НачПериода И &КонПериода
    |	И ТаможеннаяДекларацияИмпортШапка.Проведен 
    |	И ТаможеннаяДекларацияИмпортШапка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни)
    |	И (ТаможеннаяДекларацияИмпортРазделы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
    |			ИЛИ ТаможеннаяДекларацияИмпортРазделы.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7))
    |	И ТаможеннаяДекларацияИмпортШапка.СпецРежимНалогообложения = &СпецРежимНалогообложения
    |	И ТаможеннаяДекларацияИмпортШапка.Организация = &Организация
    |	И ТаможеннаяДекларацияИмпортТовары.НалоговоеНазначение = &ПропорциональныйНДС
    |
    |СГРУППИРОВАТЬ ПО
    |	ТаможеннаяДекларацияИмпортРазделы.СтавкаНДС
    |";	    
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объект.СуммаПоставки = 0;
	Объект.НДСПропорциональноКредитДоПерерасчета = 0;
	Объект.НДСПоставки = 0;
	Пока Выборка.Следующий() Цикл
		ЗначениеСтавкиНДС = НДСОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС);
		Объект.СуммаПоставки = Объект.СуммаПоставки + Выборка.СуммаПоставки/ (1 + ЗначениеСтавкиНДС);
		Объект.НДСПропорциональноКредитДоПерерасчета = Объект.НДСПропорциональноКредитДоПерерасчета + Выборка.НДСПропорциональноКредитДоПерерасчета;
		Объект.НДСПоставки 	 = Объект.НДСПоставки + Выборка.СуммаПоставки*ЗначениеСтавкиНДС / (1 + ЗначениеСтавкиНДС);
	КонецЦикла;
	
	// рассчитаем коэффициент
	РассчитатьКоэффициент(Объект);
	
	// заполним таблицу с авансами поставщиков
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ПропорциональныйНДС", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально);
	Запрос.УстановитьПараметр("ВидПоставки", Перечисления.ВидыПоставки.Поставка);
	Запрос.УстановитьПараметр("ВидПоставкиВозврат", Перечисления.ВидыПоставки.Возврат);
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	ВЫБОР
    |		КОГДА НДСПоставкиВходящиеНалоговые.ВидПоставки = &ВидПоставкиВозврат
    |			ТОГДА ИСТИНА
    |		ИНАЧЕ ЛОЖЬ
    |	КОНЕЦ КАК ЭтоВозврат,
    |	СУММА(ВЫБОР
    |			КОГДА НДСПоставкиВходящиеНалоговые.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
    |				ТОГДА -НДСПоставкиВходящиеНалоговые.СуммаВзаиморасчетов
    |			ИНАЧЕ НДСПоставкиВходящиеНалоговые.СуммаВзаиморасчетов
    |		КОНЕЦ) КАК СуммаВзаиморасчетов,
    |	СУММА(ВЫБОР
    |			КОГДА НДСПоставкиВходящиеНалоговые.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
    |				ТОГДА -НДСПоставкиВходящиеНалоговые.СуммаНДСКредит
    |			ИНАЧЕ НДСПоставкиВходящиеНалоговые.СуммаНДСКредит
    |		КОНЕЦ) КАК СуммаНДСПропорционально,
    |	НДСПоставкиВходящиеНалоговые.СтавкаНДС,
    |	НДСПоставкиВходящиеНалоговые.ОбъектРасчетов КАК Сделка,
    |	НДСПоставкиВходящиеНалоговые.АналитикаУчетаПоПартнерам
    |ПОМЕСТИТЬ АвансыСложныйУчет
    |ИЗ
    |	РегистрНакопления.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов КАК НДСПоставкиВходящиеНалоговые
    |ГДЕ
    |	НДСПоставкиВходящиеНалоговые.Период <= &Период
    |	И НДСПоставкиВходящиеНалоговые.АналитикаУчетаПоПартнерам.Организация = &Организация
    |	И НДСПоставкиВходящиеНалоговые.НалоговоеНазначение = &ПропорциональныйНДС
    |	И НДСПоставкиВходящиеНалоговые.ВидПоставки <> &ВидПоставкиВозврат
    |
    |СГРУППИРОВАТЬ ПО
    |	НДСПоставкиВходящиеНалоговые.ВидПоставки,
    |	НДСПоставкиВходящиеНалоговые.СтавкаНДС,
    |	НДСПоставкиВходящиеНалоговые.ОбъектРасчетов,
    |	НДСПоставкиВходящиеНалоговые.АналитикаУчетаПоПартнерам
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	ВЫБОР
    |		КОГДА НДССоставПоставки.ВидПоставки = &ВидПоставкиВозврат
    |			ТОГДА ИСТИНА
    |		ИНАЧЕ ЛОЖЬ
    |	КОНЕЦ,
    |	СУММА(НДССоставПоставки.СуммаВзаиморасчетовРасход),
    |	СУММА(НДССоставПоставки.СуммаНДСКредитРасход),
    |	НДССоставПоставки.СтавкаНДС,
    |	НДССоставПоставки.ОбъектРасчетов,
    |	НДССоставПоставки.АналитикаУчетаПоПартнерам
    |ИЗ
    |	РегистрНакопления.НДССоставПоставкиДляРегистрацииВходящихНалоговыхДокументов.ОстаткиИОбороты(&НачПериода, &Период, , , ) КАК НДССоставПоставки
    |ГДЕ
    |	НДССоставПоставки.АналитикаУчетаПоПартнерам.Организация = &Организация
    |	И НДССоставПоставки.НалоговоеНазначение = &ПропорциональныйНДС
    |	И НДССоставПоставки.СуммаНДСКредитКонечныйОстаток < 0
    |	И НДССоставПоставки.ВидПоставки = &ВидПоставкиВозврат
    |
    |СГРУППИРОВАТЬ ПО
    |	НДССоставПоставки.ВидПоставки,
    |	НДССоставПоставки.ОбъектРасчетов,
    |	НДССоставПоставки.СтавкаНДС,
    |	НДССоставПоставки.АналитикаУчетаПоПартнерам
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	АвансыСложныйУчет.Сделка,
    |	ВЫБОР
    |		КОГДА АвансыСложныйУчет.ЭтоВозврат = ИСТИНА
    |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Возврат)
    |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПоставки.Поставка)
    |	КОНЕЦ КАК РасчетыВозврат,
    |	АвансыСложныйУчет.СтавкаНДС,
    |	-АвансыСложныйУчет.СуммаВзаиморасчетов КАК СуммаАванса,
    |	-АвансыСложныйУчет.СуммаНДСПропорционально КАК НДСПропорциональноКредитДоПерерасчета,
    |	АвансыСложныйУчет.АналитикаУчетаПоПартнерам
    |ИЗ
    |	АвансыСложныйУчет КАК АвансыСложныйУчет
    |ГДЕ
    |	АвансыСложныйУчет.СуммаВзаиморасчетов < 0
    |
    |УПОРЯДОЧИТЬ ПО
    |	АвансыСложныйУчет.АналитикаУчетаПоПартнерам,
    |	АвансыСложныйУчет.Сделка
    |АВТОУПОРЯДОЧИВАНИЕ
    |";
		
	Если Объект.СпецРежимНалогообложения = 0 Тогда
					   
		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();			
		Для каждого СтрокаОстатков ИЗ ТаблицаОстатков Цикл

			СтрокаАвансов = Объект.АвансыПоставщикам.Добавить();
			
		    ЗаполнитьЗначенияСвойств(СтрокаАвансов, СтрокаОстатков);
			
			ЗначениеСтавкиНДС = НДСОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСЧислом(СтрокаАвансов.СтавкаНДС);
			СтрокаАвансов.НДСПоставки = СтрокаАвансов.СуммаАванса * ЗначениеСтавкиНДС / (1 + ЗначениеСтавкиНДС);
			
			СтрокаАвансов.НДСПропорциональноКредит = СтрокаАвансов.НДСПоставки * Объект.Коэффициент / 100;
			
			СтрокаАвансов.СуммаКорректировкиНДС = ?(СтрокаАвансов.РасчетыВозврат = Перечисления.ВидыПоставки.Поставка, СтрокаАвансов.НДСПропорциональноКредит, 			   - СтрокаАвансов.НДСПропорциональноКредит)
									 		   - ?(СтрокаАвансов.РасчетыВозврат = Перечисления.ВидыПоставки.Поставка, СтрокаАвансов.НДСПропорциональноКредитДоПерерасчета, - СтрокаАвансов.НДСПропорциональноКредитДоПерерасчета);
			
		КонецЦикла;
	
	Иначе	
		
		Сообщить(НСтр("ru='Табличные части:"
"   ""Авансы поставщикам"" и ""Остатки по счетам капитальных инвестиций"" "
"заполняются только для документа, который не относится к спец. режиму налогообложения. Требуемую информацию необходимо вручную перенести в данный документ!';uk='Табличні частини:"
"   ""Аванси постачальникам"" та ""Залишки на рахунках капітальних інвестицій"" "
"заповнюються тільки для документа, який не відноситься до спец. режиму оподаткування. Потрібну інформацію потрібно перенести в цей документ вручну.'")
				 , СтатусСообщения.Информация);
		
	КонецЕсли;				   
	
	// заполняем перерасчет ОС, которые введены в текущем году
	ЗаполнитьДанныеПоОС();
	
	// проводим окончательный расчет
	РассчитатьКорректировкуБУНУ(Объект);
    ЗаполнитьКолонкиПараметрыПерерасчетаОС();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоОС()
	
	// Получим данные по ОС (данные по объемам продаж - за последние три года
	ПериодИспользованияПослеГодаВводаВЭксплуатацию2Года = НачалоГода(ДобавитьМесяц(Объект.Дата, -12));
	ПериодИспользованияПослеГодаВводаВЭксплуатацию3Года = НачалоГода(ДобавитьМесяц(Объект.Дата, -24));
	
	КонПериода = КонецМесяца(Объект.Дата);
	
	СтруктураПродаж2года = ПолучитьСуммыОблагаемыхПоставокПоНДС(Объект.Организация, ПериодИспользованияПослеГодаВводаВЭксплуатацию2Года, КонПериода, Объект.СпецРежимНалогообложения);
	СтруктураПродаж3года = ПолучитьСуммыОблагаемыхПоставокПоНДС(Объект.Организация, ПериодИспользованияПослеГодаВводаВЭксплуатацию3Года, КонПериода, Объект.СпецРежимНалогообложения);
	
	Объект.СуммаВсехОпераций2Года 		 = СтруктураПродаж2года.СуммаВсехОпераций;
	Объект.СуммаОблагаемыхОпераций2Года  = СтруктураПродаж2года.СуммаОблагаемыхОпераций;
	РассчитатьКоэффициент2Года();
	
	Объект.СуммаВсехОпераций3Года 		 = СтруктураПродаж3года.СуммаВсехОпераций;
	Объект.СуммаОблагаемыхОпераций3Года  = СтруктураПродаж3года.СуммаОблагаемыхОпераций;
	РассчитатьКоэффициент3Года();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.УстановитьПараметр("Период1", НачалоГода(ДобавитьМесяц(Объект.Дата, -36)));
	Запрос.УстановитьПараметр("Период2", КонецГода(Объект.Дата));
	Запрос.УстановитьПараметр("Период3", НачалоГода(Объект.Дата));
	
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", Объект.СпецРежимНалогообложения);
	
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.НеоборотныйАктив,
    |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.ПартияТМЦВЭксплуатации,
    |	МИНИМУМ(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.ДатаНачалаИспользования) КАК ДатаНачалаИспользования,
    |	СУММА(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.БазаНДСОстаток) КАК СуммаПоставки,
    |	СУММА(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.СуммаНДСОстаток) КАК НДСПоставки,
    |	СУММА(СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.СуммаНДСПропорциональноКредитОстаток) КАК НДСПропорциональноКредитДоПерерасчета
    |ИЗ
    |	РегистрНакопления.СтоимостьПриобретенияОСПропорциональноОблагаемыхНДС.Остатки(
    |			&КонПериода,
    |			Организация = &Организация
    |				И СпецРежимНалогообложения = &СпецРежимНалогообложения
    |				И ДатаНачалаИспользования >= &Период1
    |				И ДатаНачалаИспользования <= &Период2                                                                     
    |				) КАК СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки
    |
    |СГРУППИРОВАТЬ ПО
    |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.НеоборотныйАктив, СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.ПартияТМЦВЭксплуатации
    |
    |УПОРЯДОЧИТЬ ПО
    |	СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.НеоборотныйАктив, СтоимостьПриобретенияОСПропорциональноОблагаемыхНДСОстатки.ПартияТМЦВЭксплуатации
    |АВТОУПОРЯДОЧИВАНИЕ
    |";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
        
	
		СтрокаТЧ = Объект.ПараметрыПерерасчетаОС.Добавить();	
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
		
		Если Выборка.ДатаНачалаИспользования >= НачалоГода(Объект.Дата)  Тогда
			
			// данные по продажам = из шапки документа
			СтрокаТЧ.СуммаВсехОпераций 		 = Объект.СуммаВсехОпераций;
			СтрокаТЧ.СуммаОблагаемыхОпераций = Объект.СуммаОблагаемыхОпераций;
			СтрокаТЧ.Коэффициент 			 = Объект.Коэффициент;
			
		ИначеЕсли Выборка.ДатаНачалаИспользования >= ПериодИспользованияПослеГодаВводаВЭксплуатацию2Года  Тогда
			
			СтрокаТЧ.СуммаВсехОпераций 		 = Объект.СуммаВсехОпераций;
			СтрокаТЧ.СуммаОблагаемыхОпераций = Объект.СуммаОблагаемыхОпераций;
			СтрокаТЧ.Коэффициент 			 = Объект.Коэффициент;
			
		ИначеЕсли Выборка.ДатаНачалаИспользования >= ПериодИспользованияПослеГодаВводаВЭксплуатацию3Года  Тогда
			
			СтрокаТЧ.СуммаВсехОпераций 		 = Объект.СуммаВсехОпераций2года;
			СтрокаТЧ.СуммаОблагаемыхОпераций = Объект.СуммаОблагаемыхОпераций2Года;
			СтрокаТЧ.Коэффициент			 = Объект.Коэффициент2Года; 
			
		Иначе
			
			СтрокаТЧ.СуммаВсехОпераций 		 = Объект.СуммаВсехОпераций3Года;
			СтрокаТЧ.СуммаОблагаемыхОпераций = Объект.СуммаОблагаемыхОпераций3Года;
			СтрокаТЧ.Коэффициент			 = Объект.Коэффициент3Года; 
			
		КонецЕсли;	
		
	КонецЦикла;
	
	// заполним данные по балансовой стоимости и амортизации
	
	//1. для ОС
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаИтогов" , Объект.Дата);
	
	ТаблицаОС = Объект.ПараметрыПерерасчетаОС.Выгрузить();
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("НеоборотныйАктив");
	
	Запрос.УстановитьПараметр("СписокОС"  , СписокОС);
	Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос.Текст = " 
	|ВЫБРАТЬ
	|	ПредварительныйЗапрос.ОС КАК ОС,
	|	СУММА(ПредварительныйЗапрос.СтоимостьБУ) КАК СтоимостьБУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияБУ) КАК АмортизацияБУ,
	|	СУММА(ПредварительныйЗапрос.СтоимостьНУ) КАК СтоимостьНУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияНУ) КАК АмортизацияНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьБУ.Субконто1 КАК ОС,
	|		СтоимостьБУ.СуммаОстатокДт КАК СтоимостьБУ,
	|		0 КАК АмортизацияБУ,
	|		СтоимостьБУ.СуммаНУОстатокДт КАК СтоимостьНУ,
	|		0 КАК АмортизацияНУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаИтогов,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБухгалтерскогоУчета.СчетУчета
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаИтогов, Организация = &Организация
	|							И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчета),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК СтоимостьБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПереоценкаОСБухгалтерскийУчет.Остатки(
	|					&ДатаИтогов,
	|					Организация = &Организация
	|						И ОсновноеСредство В (&СписокОС)) КАК ПереоценкаОС
	|			ПО СтоимостьБУ.Субконто1 = ПереоценкаОС.ОсновноеСредство
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АмортизацияБУ.Субконто1,
	|		0,
	|		АмортизацияБУ.СуммаОстатокКт,
	|		0,
	|		АмортизацияБУ.СуммаНУОстатокКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаИтогов,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаИтогов, Организация = &Организация
	|							И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчета),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК АмортизацияБУ) КАК ПредварительныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныйЗапрос.ОС
    |";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл
		
		СтрокаТЗ = ТЗ.Найти(Строка.НеоборотныйАктив, "ОС"); 
		
		Если НЕ СтрокаТЗ = Неопределено Тогда
			
			Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
			Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
			Строка.СтоимостьНУ          = СтрокаТЗ.СтоимостьНУ;
			Строка.АмортизацияНУ        = СтрокаТЗ.АмортизацияНУ;
			
		КонецЕсли;
		
	КонецЦикла;

	//2. для НМА
	ТаблицаНМА = Объект.ПараметрыПерерасчетаОС.Выгрузить();
	СписокНМА = ТаблицаНМА.ВыгрузитьКолонку("НеоборотныйАктив");

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"   , Объект.Организация);
	Запрос.УстановитьПараметр("СписокНМА"     , СписокНМА);
	Запрос.УстановитьПараметр("Период"        , Объект.Дата);
	Запрос.УстановитьПараметр("СубконтоНМА"   , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("ДатаДока"      , Объект.Дата);
	
	Запрос.Текст = " 
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив КАК НематериальныйАктив,
	|	СтоимостьОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	СтоимостьОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	АмортизацияОстатки.СуммаОстатокКт КАК АмортизацияБУ,
	|	АмортизацияОстатки.СуммаНУОстатокКт КАК АмортизацияНУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБУ.СчетУчета
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&Период, Организация = &Организация
	|							И НематериальныйАктив В (&СписокНМА)) КАК СчетаБУ),
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК СтоимостьОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьОстатки.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&Период,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБУ.СчетНачисленияАмортизации
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&Период, Организация = &Организация
	|							И НематериальныйАктив В (&СписокНМА)) КАК СчетаБУ),
	|				&СубконтоНМА,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокНМА)) КАК АмортизацияОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияОстатки.Субконто1
    |";
    
	ТЗ_БУ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из Объект.ПараметрыПерерасчетаОС Цикл

		// В соответствующие поля строки запишем данные из запроса
		СтрокаТЗБУ = ТЗ_БУ.Найти(Строка.НеоборотныйАктив, "НематериальныйАктив");

		Если НЕ СтрокаТЗБУ = Неопределено Тогда

			Строка.СтоимостьБУ                  = СтрокаТЗБУ.СтоимостьБУ;
			Строка.СтоимостьНУ                  = СтрокаТЗБУ.СтоимостьНУ;
			Строка.АмортизацияБУ                = СтрокаТЗБУ.АмортизацияБУ;
			Строка.АмортизацияНУ                = СтрокаТЗБУ.АмортизацияНУ;

		КонецЕсли;

	КонецЦикла;
	
	// 3. Малоценка без пообъектного учета
	// такие объекты полностью амортизированы, поэтому для правильности работы алгоритма проведения приравняем стоимости и амортизации к стоимости их приобретения
	Для каждого СтрокаТЧ Из Объект.ПараметрыПерерасчетаОС Цикл
		Если ТипЗнч(СтрокаТЧ.НеоборотныйАктив) = Тип("СправочникСсылка.Номенклатура") Тогда
		
			СтрокаТЧ.СтоимостьБУ                  = СтрокаТЧ.СуммаПоставки + СтрокаТЧ.НДСПоставки - СтрокаТЧ.НДСПропорциональноКредитДоПерерасчета;
			СтрокаТЧ.СтоимостьНУ                  = СтрокаТЧ.СтоимостьБУ;
			СтрокаТЧ.АмортизацияБУ                = СтрокаТЧ.СтоимостьБУ;
			СтрокаТЧ.АмортизацияНУ                = СтрокаТЧ.СтоимостьБУ;
		
		КонецЕсли;
	КонецЦикла;
	
	// 4. пометим список тех ОС и НМА, которые уже не состоят на учете в организации (по ним не нужно пересчитывать амортизацию)
	МассивСписанныхОС = новый Массив;
	
	// 4.1 ОС
	ТаблицаОС = Объект.ПараметрыПерерасчетаОС.Выгрузить();
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("НеоборотныйАктив");
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"  , Объект.Дата);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("Списано" , Перечисления.СостоянияОС.СнятоСУчета);
	
	МассивСостояний = Новый Массив(2);
	МассивСостояний[0] = Перечисления.СостоянияОС.ПринятоКУчету;
	МассивСостояний[1] = Перечисления.СостоянияОС.СнятоСУчета;
	Запрос.УстановитьПараметр("СписокСостояний", МассивСостояний);
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОС_БУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СостоянияОС.Состояние = &Списано
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Списано
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.Организация = &Организация
	|	И СостоянияОС.ОсновноеСредство В(&СписокОС)
	|	И СостоянияОС.Состояние В(&СписокСостояний)
	|	И СостоянияОС.ДатаСостояния <= &НаДату
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство
    |";
    
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из Объект.ПараметрыПерерасчетаОС Цикл
		
		ТекОС          = СтрокаТЧ.НеоборотныйАктив;
		СтрокаСведений = ТаблицаСведений.Найти(ТекОС, "ОС_БУ");
		
		Если НЕ СтрокаСведений = Неопределено Тогда
			
			Если СтрокаСведений.Списано Тогда
				МассивСписанныхОС.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 4.2 НМА
	ТаблицаНМА = Объект.ПараметрыПерерасчетаОС.Выгрузить();
	СписокНМА = ТаблицаНМА.ВыгрузитьКолонку("НеоборотныйАктив");
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"  ,    Объект.Дата);
	Запрос.УстановитьПараметр("СписокОС",    СписокНМА);
	Запрос.УстановитьПараметр("Списано" ,    Перечисления.ВидыСостоянийНМА.Списан);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив КАК НМА_БУ,
	|	ВЫБОР
	|		КОГДА СостоянияНМА.Состояние = &Списано
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Списано
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&НаДату,
	|			НематериальныйАктив В (&СписокОС)
	|				И Организация = &Организация) КАК СостоянияНМА
    |";
    
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Объект.ПараметрыПерерасчетаОС Цикл
		
		ТекНМА          = СтрокаТЧ.НеоборотныйАктив;
		СтрокаСведений = ТаблицаСведений.Найти(ТекНМА, "НМА_БУ");
		
		Если НЕ СтрокаСведений = Неопределено Тогда
			
			Если СтрокаСведений.Списано Тогда
				МассивСписанныхОС.Добавить(СтрокаТЧ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 4.3 пометим строки по каким не пересчитывается амортизация
	Для каждого СтрокаТЧ Из МассивСписанныхОС Цикл
		СтрокаТЧ.ОССписан = Истина;	
	КонецЦикла;
	
	// 5. проводим построчный расчет
	Для каждого СтрокаТЧ Из Объект.ПараметрыПерерасчетаОС Цикл
		РассчитатьСуммуВключенияВКредит(СтрокаТЧ);
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Функция	ПолучитьЗапросПоПропорциональномуПриобретению()
	
    ВидОперацииЗКП =  "ВидыОперацийРегистрацияВходящегоНалоговогоДокумента";
    ВидРегистраДекларацияКредит = "НДСНалоговыйКредит"; 
    ВидРегистраДекларацияОбязательства = "НДСНалоговыеОбязательства"; 
    ИмяСтатьиДекларацииП2 = "СтатьяДекларацииНДСНалоговыеОбязательства";
    ИмяСтатьиДекларацииЗКП = "СтатьяДекларацииНДСНалоговыйКредит";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачПериода",  НачалоГода(Объект.Дата));
	Запрос.УстановитьПараметр("КонПериода",  КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
    
	//ПропорциональныеОперации = Новый Массив();
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредит);
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредит);
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ);
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредит);
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредит);
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредитПоставкаОФ);	
	//// восстановление кредита
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаВосстановлениеКредитаПропорциональноВклВКредит);
	//ПропорциональныеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаВосстановлениеКредитаПропорциональноНеВклВКредит);	
	//Запрос.УстановитьПараметр("ПропорциональныеОперации", ПропорциональныеОперации);

	//МассивОблагаемыеОперации = Новый Массив();
	//МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредит);
	//МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	//МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредит);
	//МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);
	//МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаВосстановлениеКредитаПропорциональноВклВКредит);
	//Запрос.УстановитьПараметр("МассивОблагаемыеОперации", МассивОблагаемыеОперации);
	//
	//ПоставкаОС = Новый Массив();
	//ПоставкаОС.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	//ПоставкаОС.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НКПропорциональноНеВклВКредитПоставкаОФ);
	//ПоставкаОС.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);
	//ПоставкаОС.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НККорректировкаПропорциональноНеВклВКредитПоставкаОФ);	
	//Запрос.УстановитьПараметр("ПоставкаОС", ПоставкаОС);
	//
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", Объект.СпецРежимНалогообложения);
	Запрос.УстановитьПараметр("НалоговоеНазначениеПоФакту", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность);
	
	Запрос.Текст = "
    |ВЫБРАТЬ
    |	ТаможеннаяДекларацияИмпортТовары.Ссылка КАК Ссылка,
    |	СУММА(ТаможеннаяДекларацияИмпортТовары.ТаможеннаяСтоимость) КАК ТаможеннаяСтоимость,
    |	СУММА(ТаможеннаяДекларацияИмпортТовары.СуммаНДС) КАК СуммаНДС,
    |	СУММА(ТаможеннаяДекларацияИмпортТовары.СуммаНДСПропорционально) КАК СуммаНДСПропорционально,
    |	ТаможеннаяДекларацияИмпортТовары.Ссылка.Дата КАК ДатаВх,
    |	ТаможеннаяДекларацияИмпортТовары.Ссылка.Номер КАК НомерВх
    |ПОМЕСТИТЬ ВложенныйЗапрос
    |ИЗ
    |	Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
    |ГДЕ
    |	ТаможеннаяДекларацияИмпортТовары.СуммаНДСПропорционально <> 0
    |
    |СГРУППИРОВАТЬ ПО
    |	ТаможеннаяДекларацияИмпортТовары.Ссылка,
    |	ТаможеннаяДекларацияИмпортТовары.Ссылка.Дата,
    |	ТаможеннаяДекларацияИмпортТовары.Ссылка.Номер
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка,
    |	СУММА(РегистрацияВходящегоНалоговогоДокументаПоставка.Сумма),
    |	СУММА(РегистрацияВходящегоНалоговогоДокументаПоставка.СуммаНДС),
    |	СУММА(РегистрацияВходящегоНалоговогоДокументаПоставка.СуммаНДСПропорционально),
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат)
    |					ИЛИ РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка)
    |				ТОГДА РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка.ДатаКорректируемогоВходящегоДокумента
    |			ИНАЧЕ РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка.ДатаВходящегоДокумента
    |		КОНЕЦ),
    |	МАКСИМУМ(ВЫБОР
    |			КОГДА РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат)
    |					ИЛИ РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка)
    |				ТОГДА РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка.НомерКорректируемогоВходящегоДокумента
    |			ИНАЧЕ РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка.НомерВходящегоДокумента
    |		КОНЕЦ)
    |ИЗ
    |	Документ.РегистрацияВходящегоНалоговогоДокумента.Поставка КАК РегистрацияВходящегоНалоговогоДокументаПоставка
    |ГДЕ
    |	РегистрацияВходящегоНалоговогоДокументаПоставка.СуммаНДСПропорционально <> 0
    |
    |СГРУППИРОВАТЬ ПО
    |	РегистрацияВходящегоНалоговогоДокументаПоставка.Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	НАЧАЛОПЕРИОДА(НДСУсловныеПродажи.Период, МЕСЯЦ) КАК Период,
    |	НДСУсловныеПродажи.Регистратор КАК Ссылка,
    |	НДСУсловныеПродажи.СтавкаНДС КАК СтавкаНДС,
    |	МАКСИМУМ(ЕСТЬNULL(НДСУсловныеПродажи.Номенклатура.ВидДокумента, """")) КАК ВидДокумента,
    |	МАКСИМУМ(НДСУсловныеПродажи.Регистратор.Контрагент.ИННПлательщикаНДС) КАК ИННКонтрагента,
    |	МАКСИМУМ(ВложенныйЗапрос.ДатаВх) КАК ДатаВх,
    |	МАКСИМУМ(ВложенныйЗапрос.НомерВх) КАК НомерВх,
    |	СУММА(НДСУсловныеПродажи.НДСРеглОборот) КАК НДСРеглОборот,
    |	СУММА(ВложенныйЗапрос.ТаможеннаяСтоимость) КАК СуммаПоставки,
    |	СУММА(ВложенныйЗапрос.СуммаНДС) КАК НДСПоставки,
    |	СУММА(ВложенныйЗапрос.СуммаНДСПропорционально) КАК СуммаНДСПропорционально,
    |	НДСУсловныеПродажи.Номенклатура
    |ИЗ
    |	РегистрНакопления.НДСУсловныеПродажи.Обороты(
    |			&НачПериода,
    |			&КонПериода,
    |			Регистратор,
    |			Организация = &Организация
    |			И ВидУсловнойПродажи = ЗНАЧЕНИЕ(Перечисление.ВидУсловнойПродажи.ПредполагаемаяСводнаяУсловнаяПродажа)
    |			И НалоговоеНазначениеПоФакту = &НалоговоеНазначениеПоФакту) КАК НДСУсловныеПродажи
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВложенныйЗапрос КАК ВложенныйЗапрос
    |		ПО НДСУсловныеПродажи.Регистратор = ВложенныйЗапрос.Ссылка
    |ГДЕ
    |	ВЫБОР
    |			КОГДА ЕСТЬNULL(НДСУсловныеПродажи.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
    |				ТОГДА НДСУсловныеПродажи.Регистратор.УточняемыйПериод МЕЖДУ &НачПериода И &КонПериода
    |			ИНАЧЕ ИСТИНА
    |		КОНЕЦ
    |	И (НДСУсловныеПродажи.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
    |			ИЛИ НДСУсловныеПродажи.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7))
    |	И ЕСТЬNULL(НДСУсловныеПродажи.Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
    |
    |СГРУППИРОВАТЬ ПО
    |	НАЧАЛОПЕРИОДА(НДСУсловныеПродажи.Период, МЕСЯЦ),
    |	НДСУсловныеПродажи.Регистратор,
    |	НДСУсловныеПродажи.СтавкаНДС,
    |	НДСУсловныеПродажи.Номенклатура
    |
    |УПОРЯДОЧИТЬ ПО
    |	НДСУсловныеПродажи.Регистратор.МоментВремени,
    |	СтавкаНДС
    |";	   
                   
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	РегистрацияВходящегоНалоговогоДокумента.Ссылка,
	//               |	СУММА(РегистрацияВходящегоНалоговогоДокумента.СуммаНДСДокумента) - СУММА(РегистрацияВходящегоНалоговогоДокумента.СуммаНДСПриложение8Декларации) КАК БазаНДС
	//               |ПОМЕСТИТЬ РВНД
	//               |ИЗ
	//               |	Документ.РегистрацияВходящегоНалоговогоДокумента КАК РегистрацияВходящегоНалоговогоДокумента
	//               |ГДЕ
	//               |	РегистрацияВходящегоНалоговогоДокумента.Организация = &Организация
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	РегистрацияВходящегоНалоговогоДокумента.Ссылка
	//               |;
	//               |
	//               |////////////////////////////////////////////////////////////////////////////////
	//               |ВЫБРАТЬ
	//               |	НАЧАЛОПЕРИОДА(НДСУсловныеПродажи.Период, МЕСЯЦ) КАК Период,
	//               |	НДСУсловныеПродажи.Регистратор КАК Ссылка,
	//               |	НДСУсловныеПродажи.СтавкаНДС КАК СтавкаНДС,
	//               |	МАКСИМУМ(ЕСТЬNULL(НДСУсловныеПродажи.Номенклатура.ВидДокумента, """")) КАК ВидДокумента,
	//               |	МАКСИМУМ(НДСУсловныеПродажи.Регистратор.Контрагент.ИННПлательщикаНДС) КАК ИННКонтрагента,
	//               |	СУММА(РВНД.БазаНДС) КАК БазаНДС,
	//               |	МАКСИМУМ(ВЫБОР
	//               |			КОГДА ЕСТЬNULL(НДСУсловныеПродажи.Регистратор.ДатаВходящегоДокумента, ИСТИНА) = ИСТИНА
	//               |				ТОГДА НДСУсловныеПродажи.Регистратор.Дата
	//               |			ИНАЧЕ ВЫБОР
	//               |					КОГДА НДСУсловныеПродажи.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат)
	//               |							ИЛИ НДСУсловныеПродажи.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка)
	//               |						ТОГДА НДСУсловныеПродажи.Регистратор.ДатаКорректируемогоВходящегоДокумента
	//               |					ИНАЧЕ НДСУсловныеПродажи.Регистратор.ДатаВходящегоДокумента
	//               |				КОНЕЦ
	//               |		КОНЕЦ) КАК ДатаВх,
	//               |	МАКСИМУМ(ВЫБОР
	//               |			КОГДА ЕСТЬNULL(НДСУсловныеПродажи.Регистратор.НомерВходящегоДокумента, ИСТИНА) = ИСТИНА
	//               |				ТОГДА НДСУсловныеПродажи.Регистратор.НомерГТД
	//               |			ИНАЧЕ ВЫБОР
	//               |					КОГДА НДСУсловныеПродажи.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиВозврат)
	//               |							ИЛИ НДСУсловныеПродажи.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента.РасчетКорректировкиКорректировка)
	//               |						ТОГДА НДСУсловныеПродажи.Регистратор.НомерКорректируемогоВходящегоДокумента
	//               |					ИНАЧЕ НДСУсловныеПродажи.Регистратор.НомерВходящегоДокумента
	//               |				КОНЕЦ
	//               |		КОНЕЦ) КАК НомерВх,
	//               |	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
	//               |	ВложенныйЗапрос.ТаможеннаяСтоимость,
	//               |	СУММА(ВложенныйЗапрос.СуммаНДСПропорционально) КАК СуммаНДСПропорционально,
	//               |	СУММА(НДСУсловныеПродажи.НДСРеглОборот) КАК НДСРеглОборот
	//               |ИЗ
	//               |	РегистрНакопления.НДСУсловныеПродажи.Обороты(
	//               |			&НачПериода,
	//               |			&КонПериода,
	//               |			Регистратор,
	//               |			Организация = &Организация
	//               |				И ВидУсловнойПродажи = ЗНАЧЕНИЕ(Перечисление.ВидУсловнойПродажи.ПредполагаемаяСводнаяУсловнаяПродажа)
	//               |				И НалоговоеНазначениеПоФакту = &НалоговоеНазначениеПоФакту) КАК НДСУсловныеПродажи
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ РВНД КАК РВНД
	//               |		ПО НДСУсловныеПродажи.Номенклатура = РВНД.Ссылка
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//               |			ТаможеннаяДекларацияИмпортТовары.Ссылка КАК Ссылка,
	//               |			ТаможеннаяДекларацияИмпортТовары.СуммаНДСПропорционально КАК СуммаНДСПропорционально,
	//               |			ТаможеннаяДекларацияИмпортТовары.СуммаНДС КАК СуммаНДС,
	//               |			ТаможеннаяДекларацияИмпортТовары.ТаможеннаяСтоимость КАК ТаможеннаяСтоимость
	//               |		ИЗ
	//               |			Документ.ТаможеннаяДекларацияИмпорт.Товары КАК ТаможеннаяДекларацияИмпортТовары
	//               |		ГДЕ
	//               |			ТаможеннаяДекларацияИмпортТовары.СуммаНДСПропорционально <> 0) КАК ВложенныйЗапрос
	//               |		ПО НДСУсловныеПродажи.Номенклатура = ВложенныйЗапрос.Ссылка
	//               |ГДЕ
	//               |	ВЫБОР
	//               |			КОГДА ЕСТЬNULL(НДСУсловныеПродажи.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
	//               |				ТОГДА НДСУсловныеПродажи.Регистратор.УточняемыйПериод МЕЖДУ &НачПериода И &КонПериода
	//               |			ИНАЧЕ ИСТИНА
	//               |		КОНЕЦ
	//               |	И (НДСУсловныеПродажи.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	//               |			ИЛИ НДСУсловныеПродажи.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС7))
	//               |	И ЕСТЬNULL(НДСУсловныеПродажи.Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
	//               |
	//               |СГРУППИРОВАТЬ ПО
	//               |	НАЧАЛОПЕРИОДА(НДСУсловныеПродажи.Период, МЕСЯЦ),
	//               |	НДСУсловныеПродажи.Регистратор,
	//               |	НДСУсловныеПродажи.СтавкаНДС,
	//               |	ВложенныйЗапрос.ТаможеннаяСтоимость
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	НДСУсловныеПродажи.Регистратор.МоментВремени,
	//               |	СтавкаНДС";	    
	Возврат Запрос;				   
				   
КонецФункции

//&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	ДоговорКонтрагента = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Объект.АвансыПоставщикам,Перечисления.ХозяйственныеОперации.ОплатаПоставщику.Пустая());
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
    
    ЗаполнитьРеквизитыФормы();
    
	Если Элементы.СпецРежимНалогообложения.СписокВыбора.Количество() = 0 Тогда
		НДСОбщегоНазначенияСервер.ЗаполнитьСписокВыбораСпецРежимаНалогообложения(Элементы.СпецРежимНалогообложения.СписокВыбора);
	КонецЕсли;
	ЭлементСпискаЗначений 				= Элементы.СпецРежимНалогообложения.СписокВыбора.НайтиПоЗначению(Объект.СпецРежимНалогообложения);
	РасшифровкаСпецРежимНалогообложения = ?(ЭлементСпискаЗначений = Неопределено, "", ЭлементСпискаЗначений.Представление);
	
	РасшифровкаОВключенииВДекларацию = НСтр("ru='Данные перерасчета будут включены в декларацию по НДС за ';uk='Результати перерахунку будуть включені до декларації з ПДВ за '") + Формат(Объект.Дата,"ДФ=MM.yyyy");
    
	УправлениеЭлементамиФормы();
	
	ЗаполнитьКолонкиПараметрыПерерасчетаОС();	
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормы()

	КоэффициентПропорциональногоНДС = НДСОбщегоНазначенияПовтИсп.ПолучитьКоэффициентПропорциональногоНДСКредит(Объект.Организация, Объект.Дата);
	
	ПлательщикНалогаНаПрибыль       = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Объект.Организация, Объект.Дата);	
	ПлательщикНДС                   = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);	
	
КонецПроцедуры 

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	
	Элементы.ФормироватьДокументУстановкиКоэффициентаНаСледующийГод.Видимость = (Месяц(Объект.Дата) = 12);
    
	Элементы.ПараметрыПерерасчетаОССуммаВсехОпераций.Видимость 			= Ложь;
	Элементы.ПараметрыПерерасчетаОССуммаОблагаемыхОпераций.Видимость 	= Ложь;
	Элементы.ПараметрыПерерасчетаОСКоэффициент.Видимость 				= Ложь;
	
КонецПроцедуры

#КонецОбласти