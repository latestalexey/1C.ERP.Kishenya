#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "Сотрудник");
	
КонецПроцедуры

// Подсистема "Управление доступом".

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ПередЗаписьюМногофункциональногоДокумента(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ИсправлениеДокументовЗарплатаКадры.ПроверитьЗаполнение(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ, "ПериодическиеСведения");
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= ДатаВозврата;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= ДатаВозврата;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник);

	КадровыйУчет.ПроверитьРаботающихФизическихЛиц(
		СписокФизическихЛиц,
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект"));
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Истина, Организация, ДатаВозврата);
	Если Не ОсновныеСотрудники.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru='%1 не работает в организации на %2.';uk='%1 не працює в організації на %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Сотрудник, Формат(ДатаВозврата,"ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Сотрудник",, Отказ);
	КонецЕсли;

	КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(ЭтотОбъект, ДатаВозврата, "Начисления", "Показатели", Отказ, Истина, "РабочееМесто");
	
	КадровыйУчетРасширенный.ПроверкаСпискаНачисленийКадровогоДокумента(ЭтотОбъект, ДатаВозврата, "Льготы", "Показатели", Отказ, Истина, "РабочееМесто", "Льгота");
	
	ИсключаемыеРеквизиты = Новый Массив;
	
	Если Не ИзменитьНачисления Или НЕ НачисленияУтверждены Тогда
		ИсключаемыеРеквизиты.Добавить("Начисления.РабочееМесто");
	КонецЕсли;
	
	Если Не ИзменитьАванс Или НЕ НачисленияУтверждены Тогда
		ИсключаемыеРеквизиты.Добавить("Авансы.РабочееМесто");
		ИсключаемыеРеквизиты.Добавить("Авансы.СпособРасчетаАванса");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
	ЗарплатаКадрыРасширенный.ПроверитьУтверждениеДокумента(ЭтотОбъект, Отказ);
	
	Если ИзменитьНачисления И НачисленияУтверждены Тогда 
		РасчетЗарплатыРасширенный.ПроверитьМножественностьОплатыВремениУходЗаРебенком(ДатаВозврата, Начисления, Ссылка, Отказ, , , ИсправленныйДокумент);
		РасчетЗарплатыРасширенный.ПроверитьУникальностьЗапрашиванияПоказателяУходЗаРебенком(Начисления, Показатели, ДатаВозврата, Ссылка, Отказ);
		ПараметрыОтображенияПолейТарифнойСтавки = ЗарплатаКадрыРасширенный.ПараметрыОтображенияТарифнойСтавкиУходЗаРебенком(Начисления);
		Если ПараметрыОтображенияПолейТарифнойСтавки.НесколькоТарифныхСтавок Тогда
			ОдинСотрудник = ПересчетТарифныхСтавок.Количество() = 1;
			ТекстОшибки = НСтр("ru='Поле ""Совокупная тарифная ставка"" не заполнено';uk='Поле ""Сукупна тарифна ставка"" не заповнено'");
			Для Каждого ДанныеСотрудника Из ПересчетТарифныхСтавок Цикл 
				Если Не ЗначениеЗаполнено(ДанныеСотрудника.СовокупнаяТарифнаяСтавка)
					И ПараметрыОтображенияПолейТарифнойСтавки.Сотрудники.Получить(ДанныеСотрудника.РабочееМесто) <> Неопределено Тогда 
					Если ОдинСотрудник Тогда 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "СовокупнаяТарифнаяСтавка", ,Отказ);
					Иначе 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "ПересчетТарифныхСтавок[" + Формат(ПересчетТарифныхСтавок.Индекс(ДанныеСотрудника), "ЧН=0; ЧГ=0") + "].СовокупнаяТарифнаяСтавка", , Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ИсправлениеПериодическихСведений.ИсправлениеПериодическихСведений(ЭтотОбъект, Отказ, РежимПроведения);
	ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияРегистраОстатков(Движения.ЗанятыеПозицииШтатногоРасписания, ЭтотОбъект.ИсправленныйДокумент);
	
	// Начинаем состояние «Работа».
	ПараметрыСостояния = СостоянияСотрудников.ПараметрыСостоянияФизическогоЛица();
	ПараметрыСостояния.Состояние = Перечисления.СостоянияСотрудника.Работа; 
	ПараметрыСостояния.ДокументСсылка = Ссылка;
	ПараметрыСостояния.Организация = Организация;
	ПараметрыСостояния.Начало = ДатаВозврата; 
	СостоянияСотрудников.ЗарегистрироватьСостояниеФизическогоЛица(Движения, Сотрудник, ПараметрыСостояния);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Проведение документа
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	Если НачисленияУтверждены Тогда
		
		СтруктураПлановыхНачислений = Новый Структура;
		СтруктураПлановыхНачислений.Вставить("ДанныеОПлановыхНачислениях", ДанныеДляПроведения.ПлановыеНачисления);
		СтруктураПлановыхНачислений.Вставить("ЗначенияПоказателей", ДанныеДляПроведения.ЗначенияПоказателей);
		СтруктураПлановыхНачислений.Вставить("ПрименениеДополнительныхПоказателей", ДанныеДляПроведения.ПрименениеДополнительныхПоказателей);
		РасчетЗарплаты.СформироватьДвиженияПлановыхНачислений(ЭтотОбъект, Движения, СтруктураПлановыхНачислений, Истина);
		
		РасчетЗарплатыРасширенный.СформироватьДвиженияПримененияПлановыхНачислений(Движения, ДанныеДляПроведения.ПрименениеНачислений);
		РасчетЗарплатыРасширенный.СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(Движения, ДанныеДляПроведения.ПорядокПересчетаТарифнойСтавки);
		РасчетЗарплатыРасширенный.СформироватьДвиженияЗначенийСовокупныхТарифныхСтавок(Движения, ДанныеДляПроведения.ДанныеСовокупныхТарифныхСтавок);
		
		РасчетЗарплаты.СформироватьДвиженияПлановыхВыплат(Движения, ДанныеДляПроведения.ПлановыеАвансы)
		
	КонецЕсли;
	
	Если ЗаниматьСтавку Тогда
		КадровыйУчетРасширенный.ЗанятьСтавку(Движения, ДанныеДляПроведения.ЗанятыеСтавки);
	КонецЕсли;
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетов(Движения, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подготовка к регистрации перерасчетов
	ДанныеДляРегистрацииПерерасчетов = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеДокументов(ДанныеДляРегистрацииПерерасчетов);
	ЕстьПерерасчеты = ПерерасчетЗарплаты.СборДанныхДляРегистрацииПерерасчетов(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	
	// Регистрация перерасчетов
	Если ЕстьПерерасчеты Тогда
		ПерерасчетЗарплаты.РегистрацияПерерасчетовПриОтменеПроведения(Ссылка, ДанныеДляРегистрацииПерерасчетов, Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ОбъектОснование = ДанныеЗаполнения;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Сотрудник") Тогда
		ОбъектОснование = ДанныеЗаполнения.Сотрудник;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектОснование) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ОбъектОснование);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РабочееМесто", ОбъектОснование);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОтпускПоУходуЗаРебенкомНачисления.Ссылка,
		|	ОтпускПоУходуЗаРебенкомНачисления.Ссылка.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	Документ.ОтпускПоУходуЗаРебенком.Начисления КАК ОтпускПоУходуЗаРебенкомНачисления
		|ГДЕ
		|	ОтпускПоУходуЗаРебенкомНачисления.РабочееМесто = &РабочееМесто
		|	И ОтпускПоУходуЗаРебенкомНачисления.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.Ссылка,
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.Ссылка.ДатаИзменения
		|ИЗ
		|	Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Начисления КАК ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления
		|ГДЕ
		|	ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто = &РабочееМесто
		|	И ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомНачисления.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала УБЫВ";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ОбъектОснование = Выборка.Ссылка;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектОснование, "Проведен, Организация, Сотрудник, ОсвобождатьСтавку");
		Если НЕ ЗначенияРеквизитов.Проведен Тогда
			ВызватьИсключение НСтр("ru='Ввод на основании непроведенного документа невозможен.';uk='Введення на підставі документа, що непроведений, неможливе.'");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Сотрудник"); 
			ДокументОснование  	= ОбъектОснование;
			ЗаниматьСтавку  	= ЗначенияРеквизитов.ОсвобождатьСтавку;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектОснование, "Проведен, Организация, Сотрудник, ДокументОснование");
		Если НЕ ЗначенияРеквизитов.Проведен Тогда
			ВызватьИсключение НСтр("ru='Ввод на основании непроведенного документа невозможен.';uk='Введення на підставі документа, що непроведений, неможливе.'");
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Организация, Сотрудник, ДокументОснование"); 
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектОснование) = Тип("Структура") Тогда
		Если ОбъектОснование.Свойство("Действие") И ОбъектОснование.Действие = "Исправить" Тогда
			ИсправлениеДокументовЗарплатаКадры.СкопироватьДокумент(ЭтотОбъект, ОбъектОснование.Ссылка);
			ИсправленныйДокумент = ОбъектОснование.Ссылка;
			ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.ОбработкаЗаполненияМногофункциональногоДокумента(ЭтотОбъект, ОбъектОснование, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗарплатаКадрыРасширенный.ПриКопированииМногофункциональногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьРеквизитыОснования(Реквизиты = "ВыплачиватьПособиеДоПолутораЛет,ДатаОкончанияПособияДоПолутораЛет,
	|КоличествоДетей,КоличествоПервыхДетей,
	|ВыплачиватьПособиеДоТрехЛет,ДатаОкончанияПособияДоТрехЛет") Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, Реквизиты);
	
КонецФункции

#Область ПолучитьДанныеДляПроведения

Функция ПолучитьДанныеДляПроведения()
	
	ДанныеДляПроведения = Новый Структура; 
	
	ЗаполнитьПлановыеНачисленияИПоказатели(ДанныеДляПроведения);
	
	ЗаполнитьПлановыеАвансы(ДанныеДляПроведения);
	
	ЗаполнитьПрименениеПлановыхНачислений(ДанныеДляПроведения);
	
	ЗаполнитьПрименениеДополнительныхПоказателей(ДанныеДляПроведения);
	
	ЗаполнитьПересчетТарифныхСтавок(ДанныеДляПроведения);
	
	ЗаполнитьСовокупныеТарифныеСтавки(ДанныеДляПроведения);
	
	ЗаполнитьДанныеВремениРегистрацииДокумента(ДанныеДляПроведения);
	
	ЗаполнитьЗанятыеСтавки(ДанныеДляПроведения);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

#Область ПлановыеНачисленияИПоказатели

Процедура ЗаполнитьПлановыеНачисленияИПоказатели(ДанныеДляПроведения)
	
	ПлановыеНачисления = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииПлановыхНачислений();
	ЗначенияПоказателей = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииЗначенийПериодическихПоказателей();
			
	ДобавитьПособияПоУходу(ПлановыеНачисления);
	
	Если ИзменитьНачисления Тогда
		ДобавитьПлановыеНачисления(ПлановыеНачисления);
		ДобавитьПлановыеПоказатели(ЗначенияПоказателей);	
	КонецЕсли;
	
	Если ИзменитьЛьготы Тогда
		ДобавитьЛьготы(ПлановыеНачисления);
		ДобавитьПоказателиЛьгот(ЗначенияПоказателей);
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПлановыеНачисления", ПлановыеНачисления);
	ДанныеДляПроведения.Вставить("ЗначенияПоказателей", ЗначенияПоказателей);
	
КонецПроцедуры

Процедура ДобавитьПособияПоУходу(ПлановыеНачисления)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПлановыеНачисленияСрезПоследних(Запрос);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Период КАК ДатаСобытия,
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление,
	|	ВЫРАЗИТЬ(ПлановыеНачисления.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ПлановыеНачисления.ФизическоеЛицо,
	|	ЛОЖЬ КАК Используется
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПлановыеНачисления.Добавить(), Выборка);
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьПлановыеНачисления(ПлановыеНачисления)
	
	Запрос = ЗапросССсылкой();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата КАК ДатаСобытия,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Начисление,
	|	ВЫБОР
	|		КОГДА ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Используется,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Сотрудник КАК ФизическоеЛицо,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ДокументОснование,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Размер,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
	|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПлановыеНачисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПлановыеПоказатели(ЗначенияПоказателей)
		
	Запрос = ЗапросССсылкой();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Организация,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Сотрудник КАК ФизическоеЛицо,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ДокументОснование,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Значение,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата КАК ДатаСобытия,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Показатели КАК ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
	|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка
	|			И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета = ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
	|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка = &Ссылка
	|	И ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗначенияПоказателей.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТПлановыеНачисленияСрезПоследних(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ДатаВозврата КАК Период,
	|	&ОсновнойСотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТИзмеренияДаты";
	Запрос.УстановитьПараметр("ДатаВозврата", ДатаВозврата);
	Запрос.УстановитьПараметр("ОсновнойСотрудник", ОсновнойСотрудник);
	
	Запрос.Выполнить();
	
	КатегорииПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "В", КатегорииПособий);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПлановыеНачисления", Запрос.МенеджерВременныхТаблиц,	Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты", "Сотрудник"), ПараметрыПостроения);
		
КонецПроцедуры

Процедура ДобавитьЛьготы(ПлановыеНачисления)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Ссылка.ДатаВозврата КАК ДатаСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.РабочееМесто КАК Сотрудник,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Льгота КАК Начисление,
		|	ВЫБОР
		|		КОГДА ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Ссылка.Сотрудник КАК ФизическоеЛицо,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.ДокументОснование КАК ДокументОснование,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Размер КАК Размер,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Ссылка.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Льготы КАК ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы
		|ГДЕ
		|	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Ссылка = &Ссылка";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПлановыеНачисления.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказателиЛьгот(ЗначенияПоказателей)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.Организация КАК Организация,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.Сотрудник КАК ФизическоеЛицо,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.РабочееМесто КАК Сотрудник,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель КАК Показатель,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.ДокументОснование КАК ДокументОснование,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Значение КАК Значение,
	               |	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.ДатаВозврата КАК ДатаСобытия,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
	               |ИЗ
	               |	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Показатели КАК ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Льготы КАК ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы
	               |		ПО ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Ссылка
	               |			И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета = ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.ИдентификаторСтрокиВидаРасчета
	               |			И (ВозвратИзОтпускаПоУходуЗаРебенкомЛьготы.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить))
	               |			И (ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = &Ссылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗначенияПоказателей.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

Процедура ЗаполнитьПлановыеАвансы(ДанныеДляПроведения)
	
	ПлановыеАвансы =  ПустаяТаблицаРегистрацииПлановыхАвансов();
	
	Если ИзменитьАванс Тогда
		Запрос = ЗапросССсылкой();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата КАК ДатаСобытия,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомАвансы.РабочееМесто КАК Сотрудник,
		|	ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ВидыКадровыхСобытий.Перемещение) КАК ВидСобытия,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомАвансы.СпособРасчетаАванса КАК СпособРасчетаАванса,
		|	ВозвратИзОтпускаПоУходуЗаРебенкомАвансы.Аванс КАК Аванс,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Сотрудник КАК ФизическоеЛицо
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Авансы КАК ВозвратИзОтпускаПоУходуЗаРебенкомАвансы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
		|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомАвансы.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка
		|ГДЕ
		|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПлановыеАвансы.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПлановыеАвансы", ПлановыеАвансы);
	
КонецПроцедуры

Функция ПустаяТаблицаРегистрацииПлановыхАвансов()
	
	ТаблицаРегистрации = Новый ТаблицаЗначений;
	ТаблицаРегистрации.Колонки.Добавить("ДатаСобытия", 			Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("Сотрудник", 			Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаРегистрации.Колонки.Добавить("ВидСобытия", 			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	ТаблицаРегистрации.Колонки.Добавить("СпособРасчетаАванса", 	Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаАванса"));
	ТаблицаРегистрации.Колонки.Добавить("Аванс", 				Новый ОписаниеТипов("Число"));
	ТаблицаРегистрации.Колонки.Добавить("ДействуетДо", 			Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Возврат ТаблицаРегистрации;
	
КонецФункции

Процедура ЗаполнитьПрименениеПлановыхНачислений(ДанныеДляПроведения)
	
	ПрименениеНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаРегистрацииПримененияПлановыхНачислений();
	
	Запрос = ЗапросССсылкой();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата КАК ДатаСобытия,
	|	МАКСИМУМ(ИСТИНА) КАК Применение
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенком КАК ВозвратИзОтпускаПоУходуЗаРебенком
	|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенком.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто,
	|	ВозвратИзОтпускаПоУходуЗаРебенком.ДатаВозврата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПрименениеНачислений.Добавить(), Выборка);
	КонецЦикла;

	ДанныеДляПроведения.Вставить("ПрименениеНачислений", ПрименениеНачислений);
	
КонецПроцедуры

Процедура ЗаполнитьПрименениеДополнительныхПоказателей(ДанныеДляПроведения)
	
	ПрименениеДополнительныхПоказателей = Неопределено;
	
	Если ИзменитьНачисления Тогда
		Запрос = ЗапросССсылкой();
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.РабочееМесто
			|ПОМЕСТИТЬ ВТПоказателиНачислений
			|ИЗ
			|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Показатели КАК ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели
			|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка
			|			И ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто = ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.РабочееМесто
			|			И ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.ИдентификаторСтрокиВидаРасчета = ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета
			|ГДЕ
			|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = &Ссылка
			|	И ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.ДатаВозврата КАК ДатаСобытия,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.Организация КАК Организация,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.РабочееМесто КАК Сотрудник,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка.Сотрудник КАК ФизическоеЛицо,
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель КАК Показатель,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
			|	ВЫБОР
			|		КОГДА ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Применение
			|ИЗ
			|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Показатели КАК ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиНачислений КАК ПоказателиНачислений
			|		ПО ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = ПоказателиНачислений.Ссылка
			|			И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.РабочееМесто = ПоказателиНачислений.РабочееМесто
			|			И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель = ПоказателиНачислений.Показатель
			|ГДЕ
			|	ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Ссылка = &Ссылка
			|	И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.ИдентификаторСтрокиВидаРасчета = 0
			|	И ВозвратИзОтпускаПоУходуЗаРебенкомПоказатели.Показатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)
			|	И ПоказателиНачислений.Показатель ЕСТЬ NULL ";
		ПрименениеДополнительныхПоказателей = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПрименениеДополнительныхПоказателей", ПрименениеДополнительныхПоказателей);
	
КонецПроцедуры

Процедура ЗаполнитьПересчетТарифныхСтавок(ДанныеДляПроведения)	
	
	ПорядокПересчетаТарифнойСтавки = Неопределено;
	
	Если ИзменитьНачисления Тогда
		Запрос = ЗапросССсылкой();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПересчетТарифныхСтавок.Ссылка.ДатаВозврата КАК ДатаСобытия,
		|	ПересчетТарифныхСтавок.РабочееМесто КАК Сотрудник,
		|	ПересчетТарифныхСтавок.Ссылка.Сотрудник КАК ФизическоеЛицо,
		|	ПересчетТарифныхСтавок.ПорядокРасчетаСтоимостиЕдиницыВремени КАК ПорядокРасчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.ПересчетТарифныхСтавок КАК ПересчетТарифныхСтавок
		|ГДЕ
		|	ПересчетТарифныхСтавок.Ссылка = &Ссылка";
		ПорядокПересчетаТарифнойСтавки = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ПорядокПересчетаТарифнойСтавки", ПорядокПересчетаТарифнойСтавки);
	
КонецПроцедуры

Процедура ЗаполнитьСовокупныеТарифныеСтавки(ДанныеДляПроведения)	
	
	ДанныеСовокупныхТарифныхСтавок = Неопределено;
	
	Если ИзменитьНачисления Тогда
		Запрос = ЗапросССсылкой();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПересчетТарифныхСтавок.Ссылка.ДатаВозврата КАК ДатаСобытия,
		|	ПересчетТарифныхСтавок.РабочееМесто КАК Сотрудник,
		|	ПересчетТарифныхСтавок.Ссылка.Сотрудник КАК ФизическоеЛицо,
		|	ПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка КАК Значение,
		|	ВЫБОР
		|		КОГДА ПересчетТарифныхСтавок.СовокупнаяТарифнаяСтавка = 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|		ИНАЧЕ ПересчетТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.ПересчетТарифныхСтавок КАК ПересчетТарифныхСтавок
		|ГДЕ
		|	ПересчетТарифныхСтавок.Ссылка = &Ссылка";
		ДанныеСовокупныхТарифныхСтавок = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ДанныеСовокупныхТарифныхСтавок", ДанныеСовокупныхТарифныхСтавок);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВремениРегистрацииДокумента(ДанныеДляПроведения)
	
	Запрос = ЗапросССсылкой();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.РабочееМесто КАК Сотрудник,
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка.ДатаВозврата КАК ДатаСобытия
	|ИЗ
	|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Начисления КАК ВозвратИзОтпускаПоУходуЗаРебенкомНачисления
	|ГДЕ
	|	ВозвратИзОтпускаПоУходуЗаРебенкомНачисления.Ссылка = &Ссылка";
	СотрудникиДаты = Запрос.Выполнить().Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);
	
КонецПроцедуры

Процедура ЗаполнитьЗанятыеСтавки(ДанныеДляПроведения)
	
	ЗанятыеСтавки = Неопределено;
	
	Если ЗаниматьСтавку Тогда
		
		МассивРабочихМест  = КадровыйУчетРасширенный.МассивСотрудников(Сотрудник, Организация, ДатаВозврата);
		
		ЗанятыеСтавки = Новый ТаблицаЗначений;
		ЗанятыеСтавки.Колонки.Добавить("Сотрудник", 		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ЗанятыеСтавки.Колонки.Добавить("ДатаЗанятияСтавки", Новый ОписаниеТипов("Дата"));
		
		Для каждого РабочееМесто Из МассивРабочихМест Цикл
			ЗанятаяСтавка = ЗанятыеСтавки.Добавить();
			ЗанятаяСтавка.Сотрудник 		= РабочееМесто;
			ЗанятаяСтавка.ДатаЗанятияСтавки = ДатаВозврата;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ЗанятыеСтавки", ЗанятыеСтавки);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗанятыеСтавки.Сотрудник,
			|	ЗанятыеСтавки.ДатаЗанятияСтавки
			|ПОМЕСТИТЬ ВТЗанятыеСтавки
			|ИЗ
			|	&ЗанятыеСтавки КАК ЗанятыеСтавки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗанятыеСтавки.Сотрудник,
			|	ЗанятыеСтавки.ДатаЗанятияСтавки,
			|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТВозвратныеДвиженияСтавокПредварительно
			|ИЗ
			|	ВТЗанятыеСтавки КАК ЗанятыеСтавки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияОплатыОтпускаПоУходуЗаРебенком КАК УсловияОплатыОтпускаПоУходуЗаРебенком
			|		ПО ЗанятыеСтавки.ДатаЗанятияСтавки > УсловияОплатыОтпускаПоУходуЗаРебенком.Период
			|			И ЗанятыеСтавки.Сотрудник = УсловияОплатыОтпускаПоУходуЗаРебенком.Сотрудник
			|ГДЕ
			|	УсловияОплатыОтпускаПоУходуЗаРебенком.Регистратор ССЫЛКА Документ.ОтпускПоУходуЗаРебенком
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗанятыеСтавки.Сотрудник,
			|	ЗанятыеСтавки.ДатаЗанятияСтавки,
			|	ЗанятыеПозицииШтатногоРасписания.Период КАК ДатаОсвобождения
			|ПОМЕСТИТЬ ВТВозвратныеДвиженияСтавок
			|ИЗ
			|	ВТВозвратныеДвиженияСтавокПредварительно КАК ЗанятыеСтавки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеПозицииШтатногоРасписания КАК ЗанятыеПозицииШтатногоРасписания
			|		ПО ЗанятыеСтавки.Сотрудник = ЗанятыеПозицииШтатногоРасписания.Сотрудник
			|			И ЗанятыеСтавки.Регистратор = ЗанятыеПозицииШтатногоРасписания.Регистратор
			|			И (ЗанятыеПозицииШтатногоРасписания.УсловноеДвижение)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВозвратныеДвиженияСтавок.Сотрудник
			|ИЗ
			|	ВТВозвратныеДвиженияСтавок КАК ВозвратныеДвиженияСтавок";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗанятыеСтавки.Сотрудник,
				|	ЗанятыеСтавки.ДатаЗанятияСтавки,
				|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОсвобождения
				|ИЗ
				|	ВТЗанятыеСтавки КАК ЗанятыеСтавки
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозвратныеДвиженияСтавок КАК ВозвратныеДвиженияСтавок
				|		ПО ЗанятыеСтавки.Сотрудник = ВозвратныеДвиженияСтавок.Сотрудник
				|			И ЗанятыеСтавки.ДатаЗанятияСтавки = ВозвратныеДвиженияСтавок.ДатаЗанятияСтавки
				|ГДЕ
				|	ВозвратныеДвиженияСтавок.Сотрудник ЕСТЬ NULL 
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ВозвратныеДвиженияСтавок.Сотрудник,
				|	ВозвратныеДвиженияСтавок.ДатаЗанятияСтавки,
				|	ВозвратныеДвиженияСтавок.ДатаОсвобождения
				|ИЗ
				|	ВТВозвратныеДвиженияСтавок КАК ВозвратныеДвиженияСтавок";
			
			ЗанятыеСтавки = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли; 
			
	КонецЕсли;
	
	ДанныеДляПроведения.Вставить("ЗанятыеСтавки", ЗанятыеСтавки);
	
КонецПроцедуры

Функция ЗапросССсылкой()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос;
КонецФункции 

#КонецОбласти

Процедура СоздатьВТДанныеДокументов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка.Организация,
		|	ТаблицаДокумента.РабочееМесто КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ТаблицаДокумента.Ссылка.ДатаВозврата, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаДокумента.Ссылка КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Начисления КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Регистратор";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
