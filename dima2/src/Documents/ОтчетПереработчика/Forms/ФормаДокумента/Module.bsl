&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление(); 
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("УправлениеПредприятием") 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		ЭлементСписка = Элементы.ГруппировкаЗатрат.СписокВыбора.НайтиПоЗначению(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
		Элементы.ГруппировкаЗатрат.СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли; 
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтогоПродукция.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	НДСОбщегоНазначенияСервер.ЗаполнитьСписокВыбораНалоговыхНазначенийВыпуска(Элементы.НалоговоеНазначение.СписокВыбора);
		
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеГруппыЗатрат(Отказ);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи) 
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьНормативыМатериаловНаСервере();
	
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если (ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка)
		Или ЗакупкиКлиент.ИзменилисьДокументыОплатыПоставщиком(ИмяСобытия) Тогда
		ИзмененаОплатаСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи) 
	
	Оповестить("Запись_ОтчетПереработчика", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


#Область УслугаПоПереработке

&НаКлиенте
Процедура СуммаПриИзменении(Элемент) 
	
	ПриИзмененииСуммыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент) 
	
	ПриИзмененииСуммыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Объект;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент) 
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПересчитатьСуммы = Истина;
		
		Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ПересчитатьСуммы = Ложь;
			
		ИначеЕсли Объект.Валюта = ВалютаДокумента Тогда
			ПересчитатьСуммы = Ложь;
			
		ИначеЕсли Объект.Сумма = 0 Тогда
			ПересчитатьСуммы = Ложь;
			
		КонецЕсли;
		
		Если ПересчитатьСуммы Тогда
			
			ТекстСообщения = НСтр("ru='Пересчитать сумму в документе в валюту ""%Валюта%""?';uk='Перерахувати суму в документі у валюту ""%Валюта%""?'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Объект.Валюта);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ВалютаПриИзмененииЗавершение", ЭтотОбъект), ТекстСообщения, РежимДиалогаВопрос.ДаНет);
            Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВалютаПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        ПриИзмененииВалютыСервер(Объект.Валюта);
        ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(
        ВалютаДокумента,
        Объект.Валюта);
        
    КонецЕсли;
    
    ВалютаПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииФрагмент()
    
    ВалютаДокумента = Объект.Валюта;
    
    ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент) 
	
	Если ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		
		ПриИзмененииВалютыВзаиморасчетовСервер();
		
	КонецЕсли;
	
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ПроверитьНаличиеОтчетовПоДаннымПереработчика(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, СтавкаНДС, Сумма, СуммаНДС, СуммаСНДС");
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Объект);
	ТекущаяСтрока.ХарактеристикиИспользуются = ХарактеристикиИспользуются;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Объект.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Объект.СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
	Объект.СуммаНДС = ТекущаяСтрока.СуммаНДС;
	Объект.СуммаСНДС = ТекущаяСтрока.СуммаСНДС;
	ХарактеристикиИспользуются = ТекущаяСтрока.ХарактеристикиИспользуются;
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	Объект.ПроверятьУказаниеРаботы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаЗатратПриИзменении(Элемент)
	
	Если ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат Тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗатратПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НакладнаяПоЗаказуПриИзменении(Элемент)
	
	Если Объект.ПоЗаказам Тогда
		ПодборПоЗаказамПереработчикам();
	Иначе
		НакладнаяПоЗаказуПриИзмененииНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтчетыУТКлиентПереопределяемый.ОткрытьОтчетКарточкаРасчетовСПоставщиками("КарточкаРасчетовСПоставщикамиПоДокументамКонтекст", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если Поле = Элементы.ПродукцияДокументПоступления И ЗначениеЗаполнено(ТекущиеДанные.ДокументПоступления) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ДокументПоступления);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если НЕ Объект.ПоЗаказам Тогда
		// Если отчет не по заказам то нужно подбирать из поступлений,
		// т.к. в отчете должна быть такая же продукция как и в поступлении
		Отказ = Истина;
		ПодобратьИзПоступлений();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "Продукция");
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
		ТекущиеДанные.ТипСтоимости = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент) 
	
	ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
	ЗаполнитьУслугиПоПродукции(Объект);
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если Не ОтменаРедактирования Тогда
		
		ЗаполнитьНомерГруппыЗатратВСтрокеПродукцииПриОкончанииРедактирования(ТекущиеДанные, Объект, ПродукцияКешТекущейСтроки, НоваяСтрока);
		
		Если НоваяСтрока ИЛИ ПродукцияКешТекущейСтроки.НомерГруппыЗатрат <> ТекущиеДанные.НомерГруппыЗатрат Тогда
			ОбновитьКоличествоСтрокВГруппе(Объект.Продукция, ТекущиеДанные.НомерГруппыЗатрат);
		КонецЕсли; 
		
		ЗаполнитьУслугиПоПродукции(Объект);
		ПриИзмененииСуммыУслуг(ЭтаФорма);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если НоваяСтрока Тогда
		ТребуетсяЗаполнитьДанныеРаспоряжения = Истина;
	КонецЕсли; 
	
	ЗаполнитьМатериалыПриИзмененииПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьНормативыМатериаловНаСервере();
	ЗаполнитьСпецификацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьНормативыМатериаловНаСервере();
	ЗаполнитьСпецификацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьНормативыМатериаловНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Продукция", СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьНормативыМатериаловНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	Если Объект.ПоЗаказам И ТекущиеДанные.КодСтроки = 0 Тогда
		// Если отчет по заказу и продукция сверх заказа то нужно выбрать существующую группу затрат
		СтандартнаяОбработка = Ложь;
		ВыбратьГруппуЗатрат("Продукция");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьГруппуЗатрат("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные.НомерГруппыЗатрат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	
	Если Поле = Элементы.ПродукцияДокументПоступления И ЗначениеЗаполнено(ТекущиеДанные.ДокументПоступления) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ДокументПоступления);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент) 
	
	ЗаполнитьНормативыМатериаловНаСервере();
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования) 
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	Если НоваяСтрока Тогда
		ЗаполнитьНормативыМатериаловНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьНормативыМатериаловНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьНормативыМатериаловНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыУпаковкаПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ЗаполнитьНормативыМатериаловНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоУпаковокПриИзменении(Элемент) 
	
	ТекущаяСтрока = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок("Материалы", СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	МатериалыКоличествоУпаковокПриИзмененииНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьГруппуЗатрат("Материалы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ОткрытьРаспоряжениеГруппы(ТекущиеДанные.НомерГруппыЗатрат);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыДокументПоступленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьГруппуЗатрат("Материалы");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьВыбранныеУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	Если Поле = Элементы.УслугиДокументПоступления И ЗначениеЗаполнено(ТекущиеДанные.ДокументПоступления) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.ДокументПоступления);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НДСОбщегоНазначенияПовтИсп.НалогообложениеНДСНалоговогоНазначения(Объект.НалоговоеНазначение));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Услуги"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Продукция

&НаКлиенте
Процедура ПродукцияПодобратьИзЗаказа(Команда)
	
	ПодборТоваровИзЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКопированиеСкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Продукция.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Продукция");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Продукция.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_Заполнить_Перезаполнить(Команда)
	
	Если ВозможноЗаполнитьМатериалы() Тогда
		ЗаполнитьМатериалы();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_Заполнить_ПодобратьИзПоступлений(Команда)
	
	ПодобратьИзПоступлений();
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

&НаКлиенте
Процедура МатериалыКопированиеСкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Материалы.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("Материалы");
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Материалы.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Материалы_Заполнить_ЗаполнитьГруппуЗатрат(Команда)
	
	ВыбратьГруппуЗатрат("Материалы");
	
КонецПроцедуры

#КонецОбласти

#Область Услуги

&НаКлиенте
Процедура Услуги_ВыбратьИЗаполнитьУслугу(Команда)
	
	Если Элементы.Услуги.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для заполнения услуги необходимо выбрать строки.';uk='Для заповнення послуги необхідно вибрати рядки.'"));
		Возврат;
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Услуги_ВыбратьИЗаполнитьУслугуЗавершение", ЭтотОбъект);
	ПараметрыОтбора = Новый Структура("ТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Услуги_УдалитьУслугу(Команда)
	
	УдалитьВыбранныеУслуги();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	УстановитьВидимостьДоговора();
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
		КонецЕсли;
			
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчетОрганизации, , Объект.НаправлениеДеятельности);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьВидимостьДоговора();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(
		Объект.Договор,
		Объект.БанковскийСчетОрганизации,
		Объект.БанковскийСчетКонтрагента);
	
	Если Объект.ВалютаВзаиморасчетов.Пустая() И Не Объект.Договор.Пустая() Тогда
		Объект.ВалютаВзаиморасчетов = Объект.Договор.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер() 
	
	УстановитьВидимостьДоговора();
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	УстановитьСписокВыбораСтавокНДС(Истина);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	
	ЗаполнитьСлужебныеРеквизиты();
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	УстановитьВидимостьДоговора();
	
	
	УстановитьВидимостьДоговора();
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Контрагент");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	УстановитьСписокВыбораСтавокНДС(Истина);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, , Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСуммыСервер()
	
	ТекущаяСтрока = Объект;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииСуммыУслуг(Форма)

	Форма.Объект.Сумма = Форма.Объект.Услуги.Итог("Сумма");
	Форма.Объект.СуммаСНДС = Форма.Объект.Услуги.Итог("СуммаСНДС");
	Форма.Объект.СуммаНДС = Форма.Объект.Услуги.Итог("СуммаНДС");
	Форма.Объект.СуммаДокумента = Форма.Объект.СуммаСНДС;
	Форма.КоличествоУслуг = Форма.Объект.Услуги.Количество();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	Если Объект.ПоЗаказам И Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		
		// Пересчет общей суммы документа
		Объект.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.Сумма,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
		
		// Пересчет общей суммы документа
		ПриИзмененииСуммыСервер();
		
	Иначе	
	
		// Пересчет сумм в услугах
		ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Услуги,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты);
			
		ПриИзмененииСуммыУслуг(ЭтаФорма);
		
	КонецЕсли; 
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыВзаиморасчетовСервер()
	
	ЗаполнитьДоговорПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммыТабличнойЧастиВВалюту(Таблица, 
	Знач СтараяВалюта,
	Знач НоваяВалюта,
	Знач СтруктураКурсовСтаройВалюты,
	Знач СтруктураКурсовНовойВалюты)
	
	СуммаКРаспределению = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		Таблица.Итог("СуммаСНДС"),
		СтараяВалюта, НоваяВалюта,
		СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
		СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
	
	МассивСумм = Новый Массив;
	
	Для Х = 0 По Таблица.Количество() - 1 Цикл
		
		ТекСтрока = Таблица[Х];
		
		СуммаВНовойВалюте = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.СуммаСНДС,
			СтараяВалюта, НоваяВалюта,
			СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность);
		
		МассивСумм.Добавить(СуммаВНовойВалюте);
		
	КонецЦикла;
	
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СуммаКРаспределению, МассивСумм);
	
	Если МассивСумм <> Неопределено Тогда
		
		Для Х = 0 По Таблица.Количество() - 1 Цикл
			
			ТекСтрока = Таблица[Х];
			ТекСтрока.СуммаСНДС = МассивСумм[Х];
			
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(ТекСтрока, Ложь, Ложь, Ложь, Ложь, "Сумма");
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Подборы

&НаКлиенте
Процедура ПодборТоваровИзЗаказа()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборТоваровИзЗаказаЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ", Объект.ЗаказПереработчику);
	ПараметрыФормы.Вставить("ОтчетПереработчика", Объект.Ссылка);
	ОткрытьФорму("Документ.ОтчетПереработчика.Форма.ПодборПродукцииИзЗаказа", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваровИзЗаказаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ПодборТоваровИзЗаказаЗавершениеНаСервере(РезультатЗакрытия);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПодборТоваровИзЗаказаЗавершениеНаСервере(ДанныеЗаполнения)
	Перем КэшированныеЗначения;
	
	НомераГруппыЗатрат = Новый Массив;
	
	Для каждого ДанныеПродукции Из ДанныеЗаполнения Цикл
		
		СтруктураПоиска = Новый Структура("КодСтроки,НомерГруппыЗатрат");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПродукции);
  		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокаПродукция = Объект.Продукция.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПродукция, ДанныеПродукции,, "Количество");
		Иначе
			СтрокаПродукция = СписокСтрок[0];
		КонецЕсли;
		
		СтрокаПродукция.Количество = СтрокаПродукция.Количество + ДанныеПродукции.Количество;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаПродукция, СтруктураДействий, КэшированныеЗначения);
		
		Если НомераГруппыЗатрат.Найти(ДанныеПродукции.НомерГруппыЗатрат) = Неопределено Тогда
			НомераГруппыЗатрат.Добавить(ДанныеПродукции.НомерГруппыЗатрат);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Документы.ОтчетПереработчика.ЗаполнитьПоЗаказуПереработчику(Объект.ЗаказПереработчику, Объект, НомераГруппыЗатрат);
	
	ЗаполнитьСлужебныеРеквизиты();

	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	КоличествоУслуг = Объект.Услуги.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ДоступностьИВидимостьЭлементовНаФорме

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ВалютаВзаиморасчетов");
	
	// Элементы управления, связанные с оплатой
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("БанковскийСчетОрганизации");
	МассивЭлементов.Добавить("БанковскийСчетКонтрагента");
	
	// Элементы управления, связанные с таблицей Возвращаемые товары
	МассивЭлементов.Добавить("ПродукцияНоменклатура");
	МассивЭлементов.Добавить("ПродукцияХарактеристика");
	МассивЭлементов.Добавить("ПродукцияКоличествоУпаковок");
	МассивЭлементов.Добавить("ПродукцияУпаковка");
	
	// Элементы управления, связанные с таблицей Заменяющие товары
	МассивЭлементов.Добавить("МатериалыНоменклатура");
	МассивЭлементов.Добавить("МатериалыХарактеристика");
	МассивЭлементов.Добавить("МатериалыКоличествоУпаковок");
	МассивЭлементов.Добавить("МатериалыУпаковка");
	МассивЭлементов.Добавить("МатериалыВидЦены");
	
	// Элементы управления, связанные с таблицей Возвращаемые товары
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ПродукцияДобавить");
	МассивЭлементов.Добавить("ПродукцияИзменить");
	МассивЭлементов.Добавить("ПродукцияСкопировать");
	МассивЭлементов.Добавить("ПродукцияУдалить");
	
	МассивЭлементов.Добавить("ПродукцияЗаполнитьПоСпецификации");
	МассивЭлементов.Добавить("ПродукцияОткрытьПодбор");
	
	// Элементы управления, связанные с таблицей Заменяющие товары
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("МатериалыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("МатериалыДобавить");
	МассивЭлементов.Добавить("МатериалыИзменить");
	МассивЭлементов.Добавить("МатериалыСкопировать");
	МассивЭлементов.Добавить("МатериалыУдалить");
	
	МассивЭлементов.Добавить("МатериалыЗаполнитьПоСпецификации");
	МассивЭлементов.Добавить("МатериалыОткрытьПодбор");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоговора() 
	
	ПараметрыОбъекта = Новый Структура("Партнер, Договор, Контрагент, Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(
		ПараметрыОбъекта,
		Элементы.Договор.Доступность,
		Элементы.Договор.Видимость,
		Объект.Договор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоПорядкуРасчетов() 
	
	ВидимостьЭлементов = Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ДатаПлатежа");
	МассивЭлементов.Добавить("ФормаОплаты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ВидимостьЭлементов);
	
	ВзаиморасчетыСервер.УстановитьВидимостьГруппыФинансовогоУчета(ЭтаФорма, Ложь, Объект.ПоЗаказам);
	ВзаиморасчетыСервер.УстановитьВидимостьЗачетаОплаты(ЭтаФорма, Ложь, Объект.ПоЗаказам);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений


&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент)
	Если Элемент.Имя = "Дата" Тогда
		ДатаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "Валюта" Тогда
		ВалютаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ВалютаВзаиморасчетов" Тогда
		ВалютаВзаиморасчетовПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияКоличествоУпаковок" Тогда
		ПродукцияКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияУпаковка" Тогда
		ПродукцияУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыКоличествоУпаковок" Тогда
		МатериалыКоличествоУпаковокПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыУпаковка" Тогда
		МатериалыУпаковкаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияНоменклатура" Тогда
		ПродукцияНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "ПродукцияХарактеристика" Тогда
		ПродукцияХарактеристикаПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыНоменклатура" Тогда
		МатериалыНоменклатураПриИзменении(Элемент);
	ИначеЕсли Элемент.Имя = "МатериалыХарактеристика" Тогда
		МатериалыХарактеристикаПриИзменении(Элемент);
	Иначе
		ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ОбщегоНазначенияУТКлиент.КонтрольНеСогласованныхИзмененийВызватьИсключение(ЭтаФорма, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеНажатие(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеКоманды(Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломИзменения(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередУдалением(Элемент, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		КонтрольНеСогласованныхИзмененийОбработатьСобытиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	ИзменитьДокументСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ) 
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(
		Элементы[ИмяТЧ].ВыделенныеСтроки,
		Объект[ИмяТЧ]);
	
КонецПроцедуры

#КонецОбласти

#Область ГруппировкаЗатрат

&НаСервере
Процедура ГруппировкаЗатратПриИзмененииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.ГруппировкаЗатрат) Тогда
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки;
	КонецЕсли;
	
	ПерезаполнитьУслуги = Ложь;
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям 
		И ГруппировкаЗатратДоИзменения = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
		
		ВыполнитьСменуГруппировкиЗатратСПродукцииНаСпецификации();
		ПерезаполнитьУслуги = Истина;
		
	Иначе
		
		// В остальных случаях пользователю нужно заново определять группировки
		
		Для каждого ДанныеСтроки Из Объект.Продукция Цикл
			ДанныеСтроки.НомерГруппыЗатрат = 0;
			Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
				ДанныеСтроки.ТипСтоимости = Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается;
			КонецЕсли;
		КонецЦикла;
		Для каждого ДанныеСтроки Из Объект.Материалы Цикл
			ДанныеСтроки.НомерГруппыЗатрат = 0;
		КонецЦикла;
		
		Для каждого ДанныеСтроки Из Объект.Продукция Цикл
			ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(ДанныеСтроки, Объект);
		КонецЦикла;
		
		ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
		
		ПерезаполнитьУслуги = Истина;
		
	КонецЕсли; 
	
	Если ПерезаполнитьУслуги Тогда
		ЗаполнитьУслугиПоПродукции(Объект);
		ПриИзмененииСуммыУслуг(ЭтаФорма);
		РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	КонецЕсли; 
	
	ЗаполнитьПредставлениеГруппыЗатрат();
	НастроитьФормуПоСпособуГруппировкиЗатрат();
	
	ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеГруппыЗатрат()

	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыГруппыЗатрат = Новый Структура("НомерГруппыЗатрат,Распоряжение,РаспоряжениеНомер,РаспоряжениеДата,Спецификация");
	
	Если Объект.ПоЗаказам Тогда
		ДанныеЗаказа = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхЗаказа);
		ТаблицаПродукция = ДанныеЗаказа.Продукция;
	Иначе
		ТаблицаПродукция = Объект.Продукция;
	КонецЕсли; 
	
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, СтрокаУслуга);
		ПредставлениеГруппы = ПредставлениеГруппыЗатрат(ПараметрыГруппыЗатрат, Объект.ГруппировкаЗатрат, ТаблицаПродукция);
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ДанныеСтроки.ГруппаЗатрат = ПредставлениеГруппы;
		КонецЦикла;
		СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ДанныеСтроки.ГруппаЗатрат = ПредставлениеГруппы;
		КонецЦикла;
		СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ДанныеСтроки.ГруппаЗатрат = ПредставлениеГруппы;
		КонецЦикла;
		
	КонецЦикла;
	
	// Очистка наименования группы затрат если она не указана
	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", 0);
 	СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		ДанныеСтроки.ГруппаЗатрат = "";
	КонецЦикла; 
 	СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		ДанныеСтроки.ГруппаЗатрат = "";
	КонецЦикла; 
 	СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		ДанныеСтроки.ГруппаЗатрат = "";
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеГруппыЗатрат(Знач ПараметрыГруппыЗатрат, Знач ГруппировкаЗатрат, Знач Продукция)
	
	ПредставлениеГруппы = "";
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ПараметрыГруппыЗатрат.НомерГруппыЗатрат);
		СписокСтрок = Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			СтрокаПродукция = СписокСтрок[0];
			Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
				ПредставлениеГруппы = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
											Строка(СтрокаПродукция.Номенклатура),
											Строка(СтрокаПродукция.Характеристика));
				
			Иначе
				ПредставлениеГруппы = Строка(СтрокаПродукция.Спецификация);
			КонецЕсли;
		КонецЕсли; 
		
		//++ НЕ УТКА	
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыГруппыЗатрат.Распоряжение) Тогда
			РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыГруппыЗатрат.Распоряжение, "Номер,Дата");
			ПредставлениеГруппы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Заказ № %1 от %2 (%3)';uk='Замовлення № %1 від %2 (%3)'"),
										ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ПараметрыГруппыЗатрат.РаспоряжениеНомер, Ложь, Истина),
										Формат(ПараметрыГруппыЗатрат.РаспоряжениеДата, "ДЛФ=D"),
										ПараметрыГруппыЗатрат.Спецификация);
		КонецЕсли; 
		
		//-- НЕ УТКА
	КонецЕсли;
	
	Возврат ПредставлениеГруппы;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьУслугиПоПродукции(Объект)

	Если Объект.ПоЗаказам И Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ПоЗаказам Тогда
		// Новые услуги добавляются только если отчет не по заказу
		ПараметрыГруппыЗатрат = Новый Структура("НомерГруппыЗатрат,Распоряжение,Спецификация");
		Для каждого СтрокаПродукция Из Объект.Продукция Цикл
			Если СтрокаПродукция.НомерГруппыЗатрат = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, СтрокаПродукция);
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаПродукция.НомерГруппыЗатрат);
	  		СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				СтрокаУслуга = Объект.Услуги.Добавить();
				СтрокаУслуга.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
				СтрокаУслуга.Спецификация = СтрокаПродукция.Спецификация;
				СтрокаУслуга.ДокументПоступления = СтрокаПродукция.ДокументПоступления;
				СтрокаУслуга.ГруппаЗатрат = ПредставлениеГруппыЗатрат(ПараметрыГруппыЗатрат, Объект.ГруппировкаЗатрат, Объект.Продукция);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Удаление услуг для групп, которых нет в списке продукции
	СтрокиКУдалению = Новый Массив;
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаУслуга);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаУслуга Из СтрокиКУдалению Цикл
		// Удаление связанных данных
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
	 	СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			Объект.Материалы.Удалить(ДанныеСтроки);
		КонецЦикла; 
		
		Объект.Услуги.Удалить(СтрокаУслуга);
	КонецЦикла; 
	
	КоличествоУслуг = Объект.Услуги.Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерГруппыЗатратВСтрокеПродукцииПриОкончанииРедактирования(СтрокаПродукция, Объект, КешТекущейСтроки, НоваяСтрока)

	Если НЕ Объект.ПоЗаказам Тогда
		// Если отчет не по заказу то номер группы затрат заполняется при подборе
		// Новые строки просто так не добавляются
		Возврат;
	КонецЕсли;
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям") 
			И КешТекущейСтроки.Спецификация <> СтрокаПродукция.Спецификация 
		ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции") 
			И НоваяСтрока Тогда
		
		ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(СтрокаПродукция, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНомерГруппыЗатратВСтрокеПродукции(СтрокаПродукция, Объект)

	СтрокаПродукция.НомерГруппыЗатрат = ПереработкаНаСторонеКлиентСервер.НомерГруппыЗатратВОтчетеПереработчика(Объект, СтрокаПродукция);
	Если СтрокаПродукция.НомерГруппыЗатрат <> 0 Тогда
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаПродукция.НомерГруппыЗатрат);
  		СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			СтрокаПродукция.ГруппаЗатрат = СписокСтрок[0].ГруппаЗатрат;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКоличествоСтрокВГруппе(Таблица, НомерГруппыЗатрат = Неопределено)

	Если НомерГруппыЗатрат <> Неопределено Тогда
		
		// Обработка строк с определенным номером группы затрат
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппыЗатрат);
  		СписокСтрок = Таблица.НайтиСтроки(СтруктураПоиска);
		КоличествоСтрокВГруппе = СписокСтрок.Количество();
		КоличествоИзделийСТипомСтоимостиРассчитывается = 0;
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ДанныеСтроки.КоличествоСтрокВГруппе = КоличествоСтрокВГруппе;
			Если ДанныеСтроки.ТипСтоимости = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается") Тогда
				КоличествоИзделийСТипомСтоимостиРассчитывается = КоличествоИзделийСТипомСтоимостиРассчитывается + 1;
			КонецЕсли;
		КонецЦикла; 
		Для каждого ДанныеСтроки Из СписокСтрок Цикл
			ДанныеСтроки.КоличествоИзделийСТипомСтоимостиРассчитывается = КоличествоИзделийСТипомСтоимостиРассчитывается;
		КонецЦикла; 
		
	Иначе
		
		// Обработка всех строк
		СписокКоличествоСтрокВГруппе = Новый Соответствие;
		КоличествоСТипомСтоимостиРассчитывается = Новый Соответствие;
		Для каждого ДанныеСтроки Из Таблица Цикл
			КоличествоСтрокВГруппе = СписокКоличествоСтрокВГруппе.Получить(ДанныеСтроки.НомерГруппыЗатрат);
			КоличествоСтрокВГруппе = ?(КоличествоСтрокВГруппе <> Неопределено, КоличествоСтрокВГруппе, 0) + 1;
			СписокКоличествоСтрокВГруппе.Вставить(ДанныеСтроки.НомерГруппыЗатрат, КоличествоСтрокВГруппе); 
			Если ДанныеСтроки.ТипСтоимости = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается") Тогда
				КоличествоСтрокВГруппе = КоличествоСТипомСтоимостиРассчитывается.Получить(ДанныеСтроки.НомерГруппыЗатрат);
				КоличествоСтрокВГруппе = ?(КоличествоСтрокВГруппе <> Неопределено, КоличествоСтрокВГруппе, 0) + 1;
				КоличествоСТипомСтоимостиРассчитывается.Вставить(ДанныеСтроки.НомерГруппыЗатрат, КоличествоСтрокВГруппе); 
			Иначе
				КоличествоСТипомСтоимостиРассчитывается.Вставить(ДанныеСтроки.НомерГруппыЗатрат, 0); 
			КонецЕсли;
		КонецЦикла;
		Для каждого ДанныеСтроки Из Таблица Цикл
			ДанныеСтроки.КоличествоСтрокВГруппе = СписокКоличествоСтрокВГруппе.Получить(ДанныеСтроки.НомерГруппыЗатрат);
			ДанныеСтроки.КоличествоИзделийСТипомСтоимостиРассчитывается = КоличествоСТипомСтоимостиРассчитывается.Получить(ДанныеСтроки.НомерГруппыЗатрат);
		КонецЦикла; 
		
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ВыполнитьСменуГруппировкиЗатратСПродукцииНаСпецификации()

	Для каждого СтрокаПродукция Из Объект.Продукция Цикл
		СтруктураПоиска = Новый Структура("Спецификация", СтрокаПродукция.Спецификация);
  		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаПродукцияСТакойжеСпецификацией Из СписокСтрок Цикл
			Если СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат);
			СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаМатериал Из СписокСтрок Цикл
				СтрокаМатериал.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат;
			КонецЦикла; 
			СтрокаПродукцияСТакойжеСпецификацией.НомерГруппыЗатрат = СтрокаПродукция.НомерГруппыЗатрат ;
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппуЗатрат(ИмяТЧ)

	Если ИмяТЧ = "Продукция" Тогда
		ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	КонецЕсли; 
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоЗаказам", Объект.ПоЗаказам);
	ПараметрыФормы.Вставить("ГруппировкаЗатрат", Объект.ГруппировкаЗатрат);
	ПараметрыФормы.Вставить("Услуги", Объект.Услуги);
	ПараметрыФормы.Вставить("АдресХранилищаДанныхЗаказа", АдресХранилищаДанныхЗаказа);
	ПараметрыФормы.Вставить("НомерГруппыЗатрат", ТекущиеДанные.НомерГруппыЗатрат);
	
	Если ИмяТЧ = "Продукция" И НЕ Объект.ПоЗаказам Тогда
		// Группу можно выбрать только по такому же документу поступления
		ПараметрыФормы.Вставить("ОтборПоДокументуПоступления", ТекущиеДанные.ДокументПоступления);
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьГруппуЗатратЗавершение", ЭтотОбъект, ИмяТЧ);
	ОткрытьФорму("Документ.ОтчетПереработчика.Форма.ВыборГруппыЗатрат", ПараметрыФормы,,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьГруппуЗатратЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "Продукция" Тогда
		ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
		ТабличнаяЧасть = Объект.Продукция;
	ИначеЕсли ИмяТЧ = "Материалы" Тогда
		ВыделенныеСтроки = Элементы.Материалы.ВыделенныеСтроки;
		ТабличнаяЧасть = Объект.Материалы;
	КонецЕсли; 
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.НомерГруппыЗатрат = РезультатЗакрытия.НомерГруппыЗатрат;
		ТекущиеДанные.ГруппаЗатрат = РезультатЗакрытия.ГруппаЗатрат;
		ТекущиеДанные.ДокументПоступления = РезультатЗакрытия.ДокументПоступления;
		
		Если ИмяТЧ = "Продукция" 
			И (Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство") 
				ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям")) Тогда
			ТекущиеДанные.Спецификация = РезультатЗакрытия.Спецификация;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ВыбратьГруппуЗатратЗавершениеНаСервере(РезультатЗакрытия.НомерГруппыЗатрат);
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьГруппуЗатратЗавершениеНаСервере(НомерГруппыЗатрат)

	Если Объект.ПоЗаказам Тогда
		// Если отчет по заказу, то пользователь выбирает из списка групп заказа
		// Если выбранной группы нет в отчете то ее нужно добавить
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппыЗатрат);
  		СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			ДанныеЗаказа = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхЗаказа);
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппыЗатрат);
	  		СтрокаУслугаЗаказа = ДанныеЗаказа.Услуги.Найти(НомерГруппыЗатрат, "НомерГруппыЗатрат");
			СтрокаУслуа = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуа, СтрокаУслугаЗаказа);
		КонецЕсли; 
	КонецЕсли; 
	
	ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
	ЗаполнитьУслугиПоПродукции(Объект);
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	ЗаполнитьПредставлениеГруппыЗатрат();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРаспоряжениеГруппы(НомерГруппыЗатрат)

	Если НомерГруппыЗатрат = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство") Тогда
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппыЗатрат);
	 	СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ПоказатьЗначение(, СписокСтрок[0].Распоряжение);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура ЗаполнитьМатериалыПриИзмененииПродукции()

	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные.КоличествоСтрокВГруппе = 1 
		И (Объект.ПоЗаказам
				И ТекущиеДанные.НомерГруппыЗатрат <> 0
				И ПродукцияКешТекущейСтроки <> Неопределено 
				И ПродукцияКешТекущейСтроки.Количество <> ТекущиеДанные.Количество
				И ТекущиеДанные.Количество <> 0
			ИЛИ НЕ Объект.ПоЗаказам
				И ЗначениеЗаполнено(ТекущиеДанные.Спецификация)
				И (ПродукцияКешТекущейСтроки.Спецификация <> ТекущиеДанные.Спецификация
						ИЛИ ПродукцияКешТекущейСтроки.Количество <> ТекущиеДанные.Количество
							И ТекущиеДанные.Количество <> 0)) Тогда
		
		ЗаполнитьМатериалы();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВозможноЗаполнитьМатериалы()

	Если Объект.ПоЗаказам Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Отказ = Ложь;
	Для каждого ТекущаяСтрока Из Элементы.Продукция.ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ТекущаяСтрока);
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Спецификация) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Не заполнено поле ""Спецификация"" в строке %1 списка ""Продукция""';uk='Не заповнено поле ""Специфікація"" в рядку %1 списку ""Продукція""'"), ТекущиеДанные.НомерСтроки);
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ТекущиеДанные.НомерСтроки, "Спецификация");
   			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ПутьКРеквизиту,, Отказ);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат НЕ Отказ;
	
КонецФункции
 
&НаКлиенте
Процедура ЗаполнитьМатериалы()

	Если Объект.ПоЗаказам Тогда
		ТекстВопроса = НСтр("ru='Заполнить сырье и материалы по заказу?';uk='Заповнити сировину і матеріали по замовленню?'");
	Иначе
		ТекстВопроса = НСтр("ru='Заполнить сырье и материалы по спецификации?';uk='Заповнити сировину і матеріали за специфікацією?'");
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для каждого ТекущаяСтрока Из Элементы.Продукция.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(ТекущаяСтрока);
	КонецЦикла;	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьМатериалыПриИзмененииПродукцииЗавершение", ЭтотОбъект, МассивСтрок);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры
 
&НаКлиенте
Процедура ЗаполнитьМатериалыПриИзмененииПродукцииЗавершение(РезультатВопроса, ВыделенныеСтроки) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьМатериалыНаСервере(ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыНаСервере(ВыделенныеСтроки)

	Если Объект.ПоЗаказам Тогда
		
		ЗаполнитьМатериалыПоЗаказу(ВыделенныеСтроки);
		
	Иначе
		
		ЗаполнитьМатериалыПоСпецификации(ВыделенныеСтроки);
		
	КонецЕсли;

	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьНормативыМатериаловНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоЗаказу(ВыделенныеСтроки)

	НомераГруппыЗатрат = Новый Массив;
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если НомераГруппыЗатрат.Найти(ТекущиеДанные.НомерГруппыЗатрат) = Неопределено Тогда
			НомераГруппыЗатрат.Добавить(ТекущиеДанные.НомерГруппыЗатрат);
		КонецЕсли; 
		
	КонецЦикла; 
	
	Если НомераГруппыЗатрат.Количество() <> 0 Тогда
		Документы.ОтчетПереработчика.ЗаполнитьПоЗаказуПереработчику(Объект.ЗаказПереработчику, Объект, НомераГруппыЗатрат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоСпецификации(ВыделенныеСтроки)

	НомераГруппыЗатрат = Новый Массив;
	СписокНоменклатуры = Новый Массив;
	
	Для каждого ТекущаяСтрока Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если НомераГруппыЗатрат.Найти(ТекущиеДанные.НомерГруппыЗатрат) = Неопределено Тогда
			ДанныеПоНоменклатуре = Новый Структура;
			ДанныеПоНоменклатуре.Вставить("Номенклатура",        ТекущиеДанные.Номенклатура);
			ДанныеПоНоменклатуре.Вставить("Характеристика",      ТекущиеДанные.Характеристика);
			ДанныеПоНоменклатуре.Вставить("Подразделение",       Объект.Подразделение);
			ДанныеПоНоменклатуре.Вставить("Спецификация",        ТекущиеДанные.Спецификация);
			ДанныеПоНоменклатуре.Вставить("Количество",          ТекущиеДанные.Количество);
			ДанныеПоНоменклатуре.Вставить("Упаковка",            ТекущиеДанные.Упаковка);
			ДанныеПоНоменклатуре.Вставить("НомерГруппыЗатрат",   ТекущиеДанные.НомерГруппыЗатрат);
			ДанныеПоНоменклатуре.Вставить("ДокументПоступления", ТекущиеДанные.ДокументПоступления);
			
			СписокНоменклатуры.Добавить(ДанныеПоНоменклатуре);
			НомераГруппыЗатрат.Добавить(ТекущиеДанные.НомерГруппыЗатрат);
		КонецЕсли; 
		
	КонецЦикла;	
	
	Документы.ОтчетПереработчика.ЗаполнитьМатериалыПоСпецификации(СписокНоменклатуры, Объект);

КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#Область Прочее

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Стандартное оформление формы.
	#Область СтандартноеОформление
	

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "ПродукцияНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Продукция.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
																   "МатериалыНоменклатураЕдиницаИзмерения", 
                                                                   "Объект.Материалы.Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "МатериалыХарактеристика",
																		     "Объект.Материалы.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ПродукцияХарактеристика",
																		     "Объект.Продукция.ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "УслугиХарактеристика",
																		     "Объект.Услуги.ХарактеристикиИспользуются");
																			 
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма,
																			 "Характеристика",
																		     "ХарактеристикиИспользуются");
	#КонецОбласти

	// Доля стоимости "<не требуется>"
	#Область ПродукцияДоляСтоимости
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДоляСтоимости.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипСтоимости");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не требуется>';uk='<не потрібно>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти

	// Доля стоимости ОтметкаНезаполненного
	#Область ПродукцияДоляСтоимости
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДоляСтоимости.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Продукция.КоличествоИзделийСТипомСтоимостиРассчитывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Только просмотр СуммыНДС, если СтавкаНДС = БезНДС или НДС0%
#Область УслугиСуммаНДС_ТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиСуммаНДС.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Услуги.СтавкаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СписокЗначений.Добавить(Перечисления.СтавкиНДС.НДС0);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
#КонецОбласти

	// ЦветГиперссылки для поля ДокументПоступления
#Область ЦветГиперссылки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияДокументПоступления.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыДокументПоступления.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиДокументПоступления.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);																 
#КонецОбласти

#Область Прочее
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номенклатура.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УслугиНоменклатура.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроверятьУказаниеРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НаправлениеДеятельности.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаправлениеДеятельностиОбязательно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НаправлениеДеятельности.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораСтавокНДС(ПересчетНДС = Ложь)
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Форма)
	
	СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Ложь);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Продукция, СтруктураДействий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Материалы, СтруктураДействий);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий, Истина);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Услуги, СтруктураДействий);
	
	ЗаполнитьСлужебныеРеквизитыПоЗаказу();
	ЗаполнитьПредставлениеГруппыЗатрат();
	
	ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоЗаказу()

	Если НЕ Объект.ПоЗаказам Тогда
		Возврат;
	КонецЕсли;
	
	СписокСвойств = "Распоряжение,Спецификация,Этап";
	//++ НЕ УТКА
	СписокСвойств = СписокСвойств + ",РаспоряжениеНомер,РаспоряжениеДата";
	//-- НЕ УТКА
	ДанныеЗаказа = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхЗаказа);
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		СписокСтрок = ДанныеЗаказа.Услуги.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаУслуга, СписокСтрок[0], СписокСвойств);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеЗаказаВХранилище()

	Если Объект.ЗаказПереработчику.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказУслуги.Спецификация       КАК Спецификация,
	|	ЗаказУслуги.Этап               КАК Этап,
	|	ЗаказУслуги.Распоряжение       КАК Распоряжение,
	//++ НЕ УТКА
	|	ЗаказУслуги.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	ЗаказУслуги.Распоряжение.Дата  КАК РаспоряжениеДата,
	//-- НЕ УТКА
	|	ЗаказУслуги.НомерГруппыЗатрат  КАК НомерГруппыЗатрат
	|ИЗ
	|	Документ.ЗаказПереработчику.Услуги КАК ЗаказУслуги
	|ГДЕ
	|	ЗаказУслуги.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПродукция.Номенклатура       КАК Номенклатура,
	|	ЗаказПродукция.Характеристика     КАК Характеристика,
	|	ЗаказПродукция.Спецификация       КАК Спецификация,
	|	ЗаказПродукция.НомерГруппыЗатрат  КАК НомерГруппыЗатрат,
	|	СУММА(ЗаказПродукция.Количество)  КАК Количество
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ЗаказПродукция
	|ГДЕ
	|	ЗаказПродукция.Ссылка = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПродукция.Номенклатура,
	|	ЗаказПродукция.Характеристика,
	|	ЗаказПродукция.Спецификация,
	|	ЗаказПродукция.НомерГруппыЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПереработчикуМатериалы.Номенклатура        КАК Номенклатура,
	|	ЗаказПереработчикуМатериалы.Характеристика      КАК Характеристика,
	|	ЗаказПереработчикуМатериалы.НомерГруппыЗатрат   КАК НомерГруппыЗатрат,
	|	СУММА(ЗаказПереработчикуМатериалы.Количество)   КАК Количество
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ЗаказПереработчикуМатериалы
	|ГДЕ
	|	ЗаказПереработчикуМатериалы.Ссылка = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПереработчикуМатериалы.Номенклатура,
	|	ЗаказПереработчикуМатериалы.Характеристика,
	|	ЗаказПереработчикуМатериалы.НомерГруппыЗатрат";
	
	Запрос.УстановитьПараметр("Заказ", Объект.ЗаказПереработчику);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаУслуги = Результат[0].Выгрузить();
	ТаблицаПродукция = Результат[1].Выгрузить();
	ТаблицаМатериалы = Результат[2].Выгрузить();
	
	ТаблицаУслуги.Колонки.Добавить("ГруппаЗатрат", Новый ОписаниеТипов("Строка"));
	ПараметрыГруппыЗатрат = Новый Структура("НомерГруппыЗатрат,Распоряжение,РаспоряжениеНомер,РаспоряжениеДата,Спецификация");
	Для каждого СтрокаУслуга Из ТаблицаУслуги Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыГруппыЗатрат, СтрокаУслуга);
		СтрокаУслуга.ГруппаЗатрат = ПредставлениеГруппыЗатрат(ПараметрыГруппыЗатрат, Объект.ГруппировкаЗатрат, ТаблицаПродукция);
	КонецЦикла; 
	
	ДанныеЗаказа = Новый Структура;
	ДанныеЗаказа.Вставить("Услуги", ТаблицаУслуги);
	ДанныеЗаказа.Вставить("Продукция", ТаблицаПродукция);
	ДанныеЗаказа.Вставить("Материалы", ТаблицаМатериалы);
	
	АдресХранилищаДанныхЗаказа = ПоместитьВоВременноеХранилище(ДанныеЗаказа, УникальныйИдентификатор);
	
	Возврат ДанныеЗаказа;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	ПараметрыОбъекта = Новый Структура("Партнер, Договор, Контрагент, Организация");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	ПараметрыОбъекта.Вставить("Соглашение", Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
			
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
			И ИспользоватьНаправленияДеятельности Тогда
	
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъекта, 
															Объект.ХозяйственнаяОперация, 
															Объект.ВалютаВзаиморасчетов,
															Объект.НаправлениеДеятельности);
	Иначе
															
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъекта, 
															Объект.ХозяйственнаяОперация, 
															Объект.ВалютаВзаиморасчетов);
	КонецЕсли;	
		
	Если Договор <> Объект.Договор Тогда
		
		Объект.Договор = Договор;
		
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(
			Объект.Договор,
			Объект.БанковскийСчетОрганизации,
			Объект.БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеОтчетовПоДаннымПереработчика(НомерПоДаннымПартнера)
	
	СписокОтчетов = ПолучитьСписокОтчетовПоДаннымПереработчика(Объект.Ссылка, Объект.Контрагент, НомерПоДаннымПартнера);
	
	Если СписокОтчетов.Количество() > 0 Тогда
		
		СписокКнопок = Новый СписокЗначений;
		
		Если СписокОтчетов.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru='В информационной базе уже существует отчет с таким же номером по данным переработчика. Продолжить?';uk='В інформаційній базі вже існує звіт з таким же номером за даними переробника. Продовжити?'");
			СписокКнопок.Добавить("ОткрытьСписокОтчетов", НСтр("ru='Открыть отчет';uk='Відкрити звіт'"));
		Иначе
			ТекстВопроса = НСтр("ru='В информационной базе уже существуют отчеты с таким же номером по данным переработчика. Продолжить?';uk='В інформаційній базі вже існують звіти з таким же номером за даними переробника. Продовжити?'");
			СписокКнопок.Добавить("ОткрытьСписокОтчетов", НСтр("ru='Открыть список отчетов';uk='Відкрити список звітів'"));
		КонецЕсли;
		
		СписокКнопок.Добавить("Продолжить", НСтр("ru='Продолжить';uk='Продовжити'"));
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьНаличиеОтчетовПоДаннымПереработчикаЗавершение", ЭтотОбъект, Новый Структура("СписокОтчетов", СписокОтчетов)), ТекстВопроса, СписокКнопок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеОтчетовПоДаннымПереработчикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    СписокОтчетов = ДополнительныеПараметры.СписокОтчетов;
    
    
    ОтветНаВопрос = РезультатВопроса;
    
    Если ОтветНаВопрос = "ОткрытьСписокОтчетов" Тогда
        
        Если СписокОтчетов.Количество() > 1 Тогда
            ОткрытьФорму(
            "ОбщаяФорма.ПросмотрСпискаДокументов",
            Новый Структура("СписокДокументов, Заголовок",
            СписокОтчетов,
            НСтр("ru='Отчеты переработчиков (%КоличествоДокументов%)';uk='Звіти переробників (%КоличествоДокументов%)'")));
        Иначе
            
            ПараметрыФормы = Новый Структура("Ключ", СписокОтчетов.Получить(0).Значение);
            ОткрытьФорму("Документ.ОтчетПереработчика.ФормаОбъекта", ПараметрыФормы);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОтчетовПоДаннымПереработчика(ТекущийОтчет, Контрагент, НомерВходящегоДокумента)
	
	ДатаВходящегоДокумента = ?(ЗначениеЗаполнено(ТекущийОтчет.Дата), ТекущийОтчет.Дата, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетПереработчика
	|ГДЕ
	|	Ссылка <> &ТекущийЗаказ
	|	И Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НомерПоДаннымПартнера = &НомерПоДаннымПартнера
	|	И Контрагент = &Контрагент
	|	И НЕ ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДатаНачала",    ДобавитьМесяц(ДатаВходящегоДокумента, -3));
	Запрос.УстановитьПараметр("ДатаОкончания", ДобавитьМесяц(ДатаВходящегоДокумента, 3));
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("ТекущийЗаказ",  ТекущийОтчет);
	Запрос.УстановитьПараметр("НомерПоДаннымПартнера", НомерВходящегоДокумента);
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЗаказов;
	
КонецФункции


&НаСервере
Процедура ПриЧтенииСозданииНаСервере() 
	
	ВалютаДокумента = Объект.Валюта;
	ВалютаВзаиморасчетовДокумента = Объект.ВалютаВзаиморасчетов;
	ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат;
	
	ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(Объект.Номенклатура);
	Элементы.Характеристика.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовНоменклатуры");
	Элементы.Характеристика.Доступность = ХарактеристикиИспользуются;
	
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	ДанныеЗаказа = ПоместитьДанныеЗаказаВХранилище();
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьНормативыМатериаловНаСервере(ДанныеЗаказа);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	УстановитьВидимостьЭлементовПоПорядкуРасчетов();
	
	
	УстановитьВидимостьДоговора();
	
	УстановитьСписокВыбораСтавокНДС();
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "Продукция");
	
	КоличествоУслуг = Объект.Услуги.Количество();
	
	НастроитьФормуПоФлагуПоЗаказам();
	НастроитьФормуПоСпособуГруппировкиЗатрат();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиДокумента(Форма) 
	
	БезНДС	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	НДС0	= ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
	
	ЕстьНДС = Ложь;
	Если Форма.Объект.ПоЗаказам И Форма.Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки") Тогда
		ЕстьНДС = Форма.Объект.СтавкаНДС <> БезНДС;
	Иначе
		Для каждого СтрокаУслуга Из Форма.Объект.Услуги Цикл
			Если СтрокаУслуга.СтавкаНДС <> БезНДС Тогда
				ЕстьНДС = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Если ЕстьНДС Тогда
		Форма.Элементы.ГруппаСтраницыНДСПродукция.ТекущаяСтраница	= Форма.Элементы.СтраницаСНДСПродукция;
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница	= Форма.Элементы.СтраницаВсегоСНДСПродукция;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДСПродукция.ТекущаяСтраница	= Форма.Элементы.СтраницаБезНДСПродукция;
		Форма.Элементы.ГруппаСтраницыВсегоПродукция.ТекущаяСтраница	= Форма.Элементы.СтраницаВсегоБезНДСПродукция;
	КонецЕсли;
	
	ТолькоПросмотрНДС		= (Форма.Объект.СтавкаНДС = БезНДС) ИЛИ (Форма.Объект.СтавкаНДС = НДС0);
	ОтметкаНезаполненного	= (Форма.Объект.СуммаНДС = 0 И Не ТолькоПросмотрНДС);
	
	Форма.Элементы.СуммаНДС.ТолькоПросмотр				= ТолькоПросмотрНДС;
	Форма.Элементы.СуммаНДС.ОтметкаНезаполненного		= ОтметкаНезаполненного;
	Форма.Элементы.СуммаНДС.АвтоОтметкаНезаполненного	= ОтметкаНезаполненного;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоОбновлениюВспомРевизитовСтроки(СтруктураДействий, ЭтоУслуги = Ложь) 
	
	СтруктураХарактеристики  = Новый Структура("Номенклатура", "ХарактеристикиИспользуются");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураХарактеристики);
	
	Если НЕ ЭтоУслуги Тогда
		СтруктураТипНоменклатуры = Новый Структура("Номенклатура", "ТипНоменклатуры");
		СтруктураАртикул         = Новый Структура("Номенклатура", "Артикул");
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураТипНоменклатуры);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", СтруктураАртикул);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТабличнойЧасти, СтруктураДействий)
	
	ПараметрыПересчета = Неопределено;
	Если ИмяТабличнойЧасти = "Материалы" Тогда
		ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчета);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДокументСервер()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер() 
	
	Если Объект.ПоЗаказам И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		Документы.ЗаказПереработчику.РассчитатьСостояние(
			Объект.ЗаказПереработчику,
			Объект.Договор,
			ЭтаФорма);
		
	Иначе
		
		Документы.ОтчетПереработчика.РассчитатьСостояние(
			Объект.Ссылка,
			Объект.Договор,
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам() 
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Расчеты = НСтр("ru='Расчеты по договору';uk='Розрахунки за договором'");
	ИначеЕсли Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным И Объект.ПоЗаказам Тогда
		Расчеты = НСтр("ru='Оплачено по заказу';uk='Сплачено за замовленням'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	Иначе
		Расчеты = НСтр("ru='Оплачено';uk='Оплачено'") + ": " + Формат(СуммаОплаты, "ЧЦ=15; ЧДЦ=2; ЧН=") + " " + ВалютаВзаиморасчетовДокумента + "  " + ПроцентОплаты + "%";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзмененаОплатаСервер()
	
	ОбновитьСостояниеСервер();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоСпособуГруппировкиЗатрат()

	// Заголовки элементов
	#Область Заголовки
	ЗаголовокГруппы = ЗаголовокПоляГруппыЗатрат();
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru='Продукция к которой относится продукция';uk='Продукція до якої належить продукція'");
		ПодсказкаГруппыМатериалы = НСтр("ru='Продукция к которой относится материал';uk='Продукція до якої належить матеріал'");
		ПодсказкаГруппыУслуги    = НСтр("ru='Продукция к которой относится услуга';uk='Продукція до якої відноситься послуга'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru='Продукцию';uk='Продукцію'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru='Спецификация к которой относится продукция';uk='Специфікація до якої належить продукція'");
		ПодсказкаГруппыМатериалы = НСтр("ru='Спецификация к которой относится материал';uk='Специфікація до якої належить матеріал'");
		ПодсказкаГруппыУслуги    = НСтр("ru='Спецификация к которой относится услуга';uk='Специфікація до якої відноситься послуга'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru='Спецификацию';uk='Специфікацію'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		
		ПодсказкаГруппыПродукция = НСтр("ru='Заказ (этап, спецификация) к которому относится продукция';uk='Замовлення (етап, специфікація) до якого відноситься продукція'");
		ПодсказкаГруппыМатериалы = НСтр("ru='Заказ (этап, спецификация) к которому относится материал';uk='Замовлення (етап, специфікація) до якого відноситься матеріал'");
		ПодсказкаГруппыУслуги    = НСтр("ru='Заказ (этап, спецификация) к которому относится услуга';uk='Замовлення (етап, специфікація) до якого відноситься послуга'");
		
		ЗаголовокКомандыЗаполнитьГруппуЗатрат = НСтр("ru='Заказ (этап, спецификация)';uk='Замовлення (етап, специфікація)'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки
		И НЕ Объект.ПоЗаказам Тогда
		
		Элементы.МатериалыЗаполнитьГруппуЗатрат.Заголовок = НСтр("ru='Документ поступления';uk='Документ надходження'");
		
	КонецЕсли;

	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Элементы.ПродукцияГруппаЗатрат.Заголовок        = ЗаголовокГруппы;
		Элементы.МатериалыГруппаЗатрат.Заголовок        = ЗаголовокГруппы;
		Элементы.УслугиГруппаЗатрат.Заголовок           = ЗаголовокГруппы;
		
		Элементы.ПродукцияГруппаЗатрат.Подсказка        = ПодсказкаГруппыПродукция;
		Элементы.МатериалыГруппаЗатрат.Подсказка        = ПодсказкаГруппыМатериалы;
		Элементы.УслугиГруппаЗатрат.Подсказка           = ПодсказкаГруппыУслуги;
		
		Элементы.МатериалыЗаполнитьГруппуЗатрат.Заголовок = ЗаголовокКомандыЗаполнитьГруппуЗатрат;
	КонецЕсли; 
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		Элементы.СтраницаНесколькоУслуг.Заголовок = НСтр("ru='Заказы и услуги';uk='Замовлення та послуги'");
	Иначе	
		Элементы.СтраницаНесколькоУслуг.Заголовок = НСтр("ru='Услуги';uk='Послуги'");
	КонецЕсли;
	#КонецОбласти

	// Видимость элементов
	#Область Видимость
	Элементы.ПродукцияСпецификация.Видимость = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
													ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции);
	
	Элементы.ПродукцияГруппаЗатрат.Видимость = (Объект.ПоЗаказам
												И (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
													ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство));
														
	Элементы.МатериалыНорматив.Видимость = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
												ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
												ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
															
	Элементы.МатериалыОтклонение.Видимость = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
												ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
												ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
															
	Элементы.МатериалыГруппаЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	Элементы.УслугиГруппаЗатрат.Видимость = (Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки);
	Элементы.ПродукцияПерезаполнить.Видимость = Объект.ПоЗаказам ИЛИ Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки;
	#КонецОбласти

	// Прочее
	#Область Прочее
	ЕстьКнопкаОткрытия = (Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
	Элементы.ПродукцияГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.МатериалыГруппаЗатрат.КнопкаОткрытия = ЕстьКнопкаОткрытия;
	Элементы.УслугиГруппаЗатрат.ГиперссылкаЯчейки = ЕстьКнопкаОткрытия;
	
	Если Объект.ПоЗаказам И Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Элементы.СтраницыУслуги.ТекущаяСтраница = Элементы.СтраницаОднаУслуга;
	Иначе
		Элементы.СтраницыУслуги.ТекущаяСтраница = Элементы.СтраницаНесколькоУслуг;
	КонецЕсли; 
	
	Элементы.МатериалыДокументПоступления.ТолькоПросмотр = Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
															ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
															ИЛИ Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоФлагуПоЗаказам()

	// Доступность
	Элементы.ГруппировкаЗатрат.Доступность = НЕ Объект.ПоЗаказам;
	
	// Видимость
	Элементы.ПродукцияПодобратьИзЗаказа.Видимость = Объект.ПоЗаказам;
	Элементы.ПродукцияПодобратьИзПоступлений.Видимость = НЕ Объект.ПоЗаказам;
	Элементы.ПродукцияДокументПоступления.Видимость = НЕ Объект.ПоЗаказам;
	Элементы.МатериалыДокументПоступления.Видимость = НЕ Объект.ПоЗаказам;
	Элементы.УслугиДокументПоступления.Видимость = НЕ Объект.ПоЗаказам;
	Элементы.ПродукцияСпецификация.Видимость = НЕ Объект.ПоЗаказам;

	// Прочее
	//++ НЕ УТКА
	ЗначениеВыбора = Элементы.ГруппировкаЗатрат.СписокВыбора.НайтиПоЗначению(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
	Если Объект.ПоЗаказам Тогда
		Если ЗначениеВыбора = Неопределено Тогда
			Элементы.ГруппировкаЗатрат.СписокВыбора.Добавить(Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство);
		КонецЕсли;
	Иначе
		Если ЗначениеВыбора <> Неопределено Тогда
			Элементы.ГруппировкаЗатрат.СписокВыбора.Удалить(ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоЗаказамПереработчикам()

	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ПараметрыОтбора.Вставить("Партнер", Объект.Партнер);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Объект.НаправлениеДеятельности) Тогда
		ПараметрыОтбора.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодборПоЗаказамПереработчикамЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ОткрытьФорму("Документ.ЗаказПереработчику.Форма.ВыборЗаказаВОтчетПереработчика", 
					ПараметрыФормы,,,,, 
					ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПодборПоЗаказамПереработчикамЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		ПодборПоЗаказамПереработчикамЗавершениеНаСервере(РезультатЗакрытия);
	Иначе
		Объект.ПоЗаказам = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодборПоЗаказамПереработчикамЗавершениеНаСервере(ЗаказСсылка)

	Объект.Продукция.Очистить();
	Объект.Материалы.Очистить();
	Объект.Услуги.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьНаОснованииЗаказаПереработчику(ЗаказСсылка);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ПоместитьДанныеЗаказаВХранилище();
	ЗаполнитьСлужебныеРеквизиты();
	ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	НастроитьФормуПоФлагуПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзПоступлений()

	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Продукция Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(СтрокаТЧ.ДокументПоступления) Тогда
			МассивКодовСтрок.Добавить(Новый Структура("КодСтроки,Распоряжение", СтрокаТЧ.КодСтроки, СтрокаТЧ.ДокументПоступления));
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("Партнер", Объект.Партнер);
	ПараметрыФормы.Вставить("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	ПараметрыФормы.Вставить("МассивКодовСтрок", МассивКодовСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьИзПоступленийЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ОтчетПереработчика.Форма.ПодборПродукцииИзПоступлений", ПараметрыФормы,,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзПоступленийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		ПодобратьИзПоступленийЗавершениеНаСервере(РезультатЗакрытия);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьИзПоступленийЗавершениеНаСервере(ДанныеЗаполнения)

	Документы.ОтчетПереработчика.ЗаполнитьПоПоступлениям(Объект, ДанныеЗаполнения.МассивРаспоряжений, ДанныеЗаполнения.СписокПродукции);

	ЗаполнитьСлужебныеРеквизиты();
	ОбновитьКоличествоСтрокВГруппе(Объект.Продукция);
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НакладнаяПоЗаказуПриИзмененииНаСервере()

	Если НЕ Объект.ПоЗаказам Тогда
		Объект.ЗаказПереработчику = Неопределено;
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки;
	КонецЕсли;
	
	// Нельзя текущие данные привязать к заказам, поэтому удалим все
	// Пользователю нужно воспользоваться подбором из поступлений
	Объект.Продукция.Очистить();
	Объект.Материалы.Очистить();
	Объект.Услуги.Очистить();
	
	ГруппировкаЗатратПриИзмененииНаСервере();
	УстановитьВидимостьЭлементовПоПорядкуРасчетов();
	
	НастроитьФормуПоФлагуПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура Услуги_ВыбратьИЗаполнитьУслугуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(ЭтаФорма);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", НДСОбщегоНазначенияПовтИсп.НалогообложениеНДСНалоговогоНазначения(Объект.НалоговоеНазначение));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Услуги"));

	Для каждого ИдентификаторСтроки Из Элементы.Услуги.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Услуги.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.Номенклатура = РезультатЗакрытия;
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ДанныеСтроки.Характеристика);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла; 
	
	ПриИзмененииСуммыУслуг(ЭтаФорма);
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпецификацию()
	
	Если Объект.ПоЗаказам 
		ИЛИ Объект.ГруппировкаЗатрат = ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Продукция.ТекущиеДанные;
	
	Если ДанныеСтроки.Номенклатура.Пустая() Тогда
		ДанныеСтроки.Спецификация = Неопределено;
		Возврат;
	КонецЕсли;
	
	ДанныеСпецификации = УправлениеДаннымиОбИзделияхВызовСервера.СпецификацияИзделия(
											Объект.Подразделение, 
											ДанныеСтроки.Номенклатура, 
											ДанныеСтроки.Характеристика, 
											Объект.Дата, 
											ДанныеСтроки.Спецификация);
											
	Если ДанныеСпецификации = Неопределено Тогда
		ДанныеСтроки.Спецификация = Неопределено;
	Иначе
		
		Если ДанныеСпецификации.Спецификация <> ДанныеСтроки.Спецификация Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеСпецификации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыМатериаловНаСервере(Знач ДанныеЗаказа = Неопределено)

	Если Объект.ПоЗаказам Тогда
		ЗаполнитьНормативыМатериаловПоЗаказу(ДанныеЗаказа);
	Иначе
		ЗаполнитьНормативыМатериаловПоСпецификациям();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыМатериаловПоЗаказу(ДанныеЗаказа)
	Перем КэшированныеЗначения;
	
	Если Объект.ЗаказПереработчику.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаМатериалОтчета Из Объект.Материалы Цикл
		СтрокаМатериалОтчета.КоличествоУпаковокНорматив = 0;
		СтрокаМатериалОтчета.КоличествоНорматив = 0;
		СтрокаМатериалОтчета.КоличествоОтклонение = 0;
		СтрокаМатериалОтчета.КоличествоУпаковокОтклонение = 0;
	КонецЦикла; 
	
	Если ДанныеЗаказа = Неопределено Тогда
		ДанныеЗаказа = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхЗаказа);
	КонецЕсли; 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок", "Норматив");
	
	МатериалыЗаказа = ДанныеЗаказа.Материалы.Скопировать();
	
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		ФактическаяПродукция = Объект.Продукция.Выгрузить(СтруктураПоиска, "Номенклатура,Характеристика,Количество");
		ФактическаяПродукция.Свернуть("Номенклатура,Характеристика", "Количество");
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		НормативнаяПродукция = ДанныеЗаказа.Продукция.Скопировать(СтруктураПоиска);
		
		КоэффициентНормативов = Документы.ЗаказПереработчику.КоэффициентНормативов(ФактическаяПродукция, НормативнаяПродукция);
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		СписокМатериаловГруппы = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаМатериал Из СписокМатериаловГруппы Цикл
			
			СтрокаМатериал.КоличествоНорматив = 0;
			
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат,Номенклатура,Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаМатериал);
   			СписокСтрок = МатериалыЗаказа.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				СтрокаМатериалЗаказа = СписокСтрок[0];
				СтрокаМатериал.КоличествоНорматив = СтрокаМатериалЗаказа.Количество * КоэффициентНормативов;
				Если ЗначениеЗаполнено(СтрокаМатериал.Упаковка) Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаМатериал, СтруктураДействий, КэшированныеЗначения);
				Иначе
					СтрокаМатериал.КоличествоУпаковокНорматив = СтрокаМатериал.КоличествоНорматив;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для каждого СтрокаМатериалОтчета Из СписокМатериаловГруппы Цикл
			РассчитатьОтклонениеОтНорматива(СтрокаМатериалОтчета, КэшированныеЗначения);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыМатериаловПоСпецификациям()
	Перем КэшированныеЗначения;
	
	Если Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		И Объект.ГруппировкаЗатрат <> Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого СтрокаМатериалОтчета Из Объект.Материалы Цикл
		СтрокаМатериалОтчета.КоличествоУпаковокНорматив = 0;
		СтрокаМатериалОтчета.КоличествоНорматив = 0;
		СтрокаМатериалОтчета.КоличествоОтклонение = 0;
		СтрокаМатериалОтчета.КоличествоУпаковокОтклонение = 0;
	КонецЦикла; 
	
	НомераГруппыЗатрат = Новый Массив;
	СписокНоменклатуры = Новый Массив;
	
	Для каждого ТекущиеДанные Из Объект.Продукция Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Спецификация) ИЛИ ТекущиеДанные.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НомераГруппыЗатрат.Найти(ТекущиеДанные.НомерГруппыЗатрат) = Неопределено Тогда
			ДанныеПоНоменклатуре = Новый Структура;
			ДанныеПоНоменклатуре.Вставить("Номенклатура",      ТекущиеДанные.Номенклатура);
			ДанныеПоНоменклатуре.Вставить("Характеристика",    ТекущиеДанные.Характеристика);
			ДанныеПоНоменклатуре.Вставить("Подразделение",     Объект.Подразделение);
			ДанныеПоНоменклатуре.Вставить("Спецификация",      ТекущиеДанные.Спецификация);
			ДанныеПоНоменклатуре.Вставить("Количество",        ТекущиеДанные.Количество);
			ДанныеПоНоменклатуре.Вставить("Упаковка",          ТекущиеДанные.Упаковка);
			ДанныеПоНоменклатуре.Вставить("НомерГруппыЗатрат", ТекущиеДанные.НомерГруппыЗатрат);
			
			СписокНоменклатуры.Добавить(ДанныеПоНоменклатуре);
			НомераГруппыЗатрат.Добавить(ТекущиеДанные.НомерГруппыЗатрат);
		КонецЕсли; 
		
	КонецЦикла;	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок", "Норматив");
	
	ДанныеСпецификаций = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры);
	Для ИндексТекущихДанных = 0 По СписокНоменклатуры.ВГраница() Цикл
	
		СтруктураДанных = ДанныеСпецификаций.Получить(ИндексТекущихДанных);
		Если СтруктураДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоНоменклатуре = СписокНоменклатуры.Получить(ИндексТекущихДанных);
		
		СтруктураДанных.МатериалыИУслуги.Свернуть("Номенклатура,Характеристика", "Количество");
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ДанныеПоНоменклатуре.НомерГруппыЗатрат);
  		МатериалыОтчета = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаМатериалОтчета Из МатериалыОтчета Цикл
			
			СтрокаМатериалОтчета.КоличествоУпаковокНорматив = 0;
			СтрокаМатериалОтчета.КоличествоНорматив = 0;
			
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаМатериалОтчета);
   			СписокСтрок = СтруктураДанных.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				СтрокаМатериалСпецификации = СписокСтрок[0];
				СтрокаМатериалОтчета.КоличествоНорматив = СтрокаМатериалСпецификации.Количество;
				Если ЗначениеЗаполнено(СтрокаМатериалОтчета.Упаковка) Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаМатериалОтчета, СтруктураДействий, КэшированныеЗначения);
				Иначе
					СтрокаМатериалОтчета.КоличествоУпаковокНорматив = СтрокаМатериалОтчета.КоличествоНорматив;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла; 
		
		Для каждого СтрокаМатериалОтчета Из МатериалыОтчета Цикл
			РассчитатьОтклонениеОтНорматива(СтрокаМатериалОтчета, КэшированныеЗначения);
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьОтклонениеОтНорматива(ДанныеСтроки, КэшированныеЗначения)

	КоличествоФакт = 0;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,НомерГруппыЗатрат");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
 	МатериалыОтчета = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаМатериалОтчета Из МатериалыОтчета Цикл
		КоличествоФакт = КоличествоФакт + СтрокаМатериалОтчета.Количество;
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок", "Отклонение");
	
	Для каждого СтрокаМатериалОтчета Из МатериалыОтчета Цикл
		
		СтрокаМатериалОтчета.КоличествоОтклонение = КоличествоФакт - ДанныеСтроки.КоличествоНорматив;
		Если ЗначениеЗаполнено(СтрокаМатериалОтчета.Упаковка) Тогда
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(
					СтрокаМатериалОтчета, 
					СтруктураДействий, 
					КэшированныеЗначения);
		Иначе
			СтрокаМатериалОтчета.КоличествоУпаковокОтклонение = СтрокаМатериалОтчета.КоличествоОтклонение;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура МатериалыКоличествоУпаковокПриИзмененииНаСервере(КэшированныеЗначения)

	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	
	ТекущаяСтрока = Элементы.Материалы.ТекущаяСтрока;
	ТекущиеДанные = Объект.Материалы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ТекущиеДанные.НомерГруппыЗатрат);
  	МатериалыОтчета = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаМатериалОтчета Из МатериалыОтчета Цикл
		РассчитатьОтклонениеОтНорматива(СтрокаМатериалОтчета, КэшированныеЗначения);
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Функция ЗаголовокПоляГруппыЗатрат()

	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
		
		ЗаголовокГруппы = НСтр("ru='Продукция';uk='Продукція'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		ЗаголовокГруппы = НСтр("ru='Спецификация продукции';uk='Специфікація продукції'");
		
	ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
		
		ЗаголовокГруппы = НСтр("ru='Заказ (этап, спецификация)';uk='Замовлення (етап, специфікація)'");
		
	КонецЕсли;

	Возврат ЗаголовокГруппы;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеГруппыЗатрат(Отказ)

	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3""';uk='Не заповнена колонка ""%1"" у рядку %2 списку ""%3""'");
	ЗаголовокПоля = ЗаголовокПоляГруппыЗатрат();
	
	Для каждого ДанныеСтроки Из Объект.Продукция Цикл
		
		Если ДанныеСтроки.НомерГруппыЗатрат = 0 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаголовокПоля, ДанныеСтроки.НомерСтроки, НСтр("ru='Продукция';uk='Продукція'"));

			ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", ДанныеСтроки.НомерСтроки, "ГруппаЗатрат");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ПутьКТЧ,, Отказ);
		КонецЕсли; 
		
	КонецЦикла; 

	Для каждого ДанныеСтроки Из Объект.Материалы Цикл
		
		Если ДанныеСтроки.НомерГруппыЗатрат = 0 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаголовокПоля, ДанныеСтроки.НомерСтроки, НСтр("ru='Сырье и материалы';uk='Сировина й матеріали'"));
			ПутьКТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Материалы", ДанныеСтроки.НомерСтроки, "ГруппаЗатрат");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, ПутьКТЧ,, Отказ);
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныеУслуги()

	Если Элементы.Услуги.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Услуги.ВыделенныеСтроки.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru='Будет удалена услуга и соответствующие ей продукция и материалы.
                             |Продолжить?'
                             |;uk='Буде вилучена послуга і відповідні їй продукція і матеріали.
                             |Продовжити?'");
	Иначе
		ТекстВопроса = НСтр("ru='Будут удалены выбранные услуги и соответствующие им продукция и материалы.
                             |Продолжить?'
                             |;uk='Будуть вилучені вибрані послуги і відповідні їм продукція і матеріали.
                             |Продовжити?'");
	КонецЕсли; 
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьУслугуЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьУслугуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьУслугуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьУслугуНаСервере()

	УслугиКУдалению = Новый Массив;
	
	Для каждого ИдентификаторСтроки Из Элементы.Услуги.ВыделенныеСтроки Цикл
		
		СтрокаУслуга = Объект.Услуги.НайтиПоИдентификатору(ИдентификаторСтроки);
		УслугиКУдалению.Добавить(СтрокаУслуга);
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		СписокСтрок = Объект.Продукция.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТаблицы Из СписокСтрок Цикл
			Объект.Продукция.Удалить(СтрокаТаблицы);
		КонецЦикла; 

		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		СписокСтрок = Объект.Материалы.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТаблицы Из СписокСтрок Цикл
			Объект.Материалы.Удалить(СтрокаТаблицы);
		КонецЦикла; 

	КонецЦикла; 

	Для каждого СтрокаУслуга Из УслугиКУдалению Цикл
		Объект.Услуги.Удалить(СтрокаУслуга);
	КонецЦикла; 
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтаФорма);
	КоличествоУслуг = Объект.Услуги.Количество();
	
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#КонецОбласти
