
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	//++ НЕ УТКА
	УстановитьУсловноеОформление();
	//-- НЕ УТКА
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Если ВыполняетсяОбновлениеЧитаемыхДанных() Тогда
		ОбновлениеИнформационнойБазыУТ.СообщитьЧтоРаботаСФормойВременноОграничена(); 
	КонецЕсли; 
	
	ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("ЗаказПереработчикуРабочееМесто", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
	КонецЕсли;
	
	// Отработаем открытие формы из формы "Текущие дела"
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Менеджер") Тогда
			ОтборМенеджер = Параметры.СтруктураБыстрогоОтбора.Менеджер;
		КонецЕсли;
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Приоритет") Тогда
			ОтборПриоритет = Параметры.СтруктураБыстрогоОтбора.Приоритет;
		КонецЕсли;
	КонецЕсли; 
	
	ЗаполнитьГрафикПроизводства();
	
	УстановитьТекущуюСтраницу();
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.Менеджер.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейСПравомДобавления(Метаданные.Документы.ЗаказПереработчику));
		
	Элементы.Страницы.ОтображениеСтраниц = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство"), ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам");
	
	#Область СтандартныеПроцедуры
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты
	#КонецОбласти

	//-- НЕ УТКА
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//++ НЕ УТКА
	
	МенеджерОборудованияКлиентПереопределяемый.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	//++ НЕ УТКА
	МенеджерОборудованияКлиентПереопределяемый.НачатьОтключениеОборудованиеПриЗакрытииФормы(ЭтаФорма);
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	//++ НЕ УТКА
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ДокументыВлияющиеНаГрафик = Новый Массив;
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЗаказПереработчику");
	ДокументыВлияющиеНаГрафик.Добавить("Запись_ЗаказНаПроизводство");
	
	Если Не ДокументыВлияющиеНаГрафик.Найти(ИмяСобытия) = Неопределено Тогда
		ЗаполнитьГрафикПроизводства();
	КонецЕсли;
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГрафикПроизводстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//++ НЕ УТКА
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ГрафикПроизводства.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Необходимо выбрать этап графика.';uk='Необхідно вибрати етап графіка.'"));
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Распоряжение);
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Менеджер",
		ОтборМенеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборМенеджер));
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПриоритетПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Приоритет",
		ОтборПриоритет,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборПриоритет));
		
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженийПриИзменении(Элемент)
	
	//++ НЕ УТКА
	
	ПриИзмененииОтборов();
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтатусНеСогласован(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("НеСогласован", НСтр("ru='Не согласован';uk='Не погоджено'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКИсполнению(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("КИсполнению", НСтр("ru='К исполнению';uk='До виконання'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКОбеспечению(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("КОбеспечению", НСтр("ru='К обеспечению';uk='До забезпечення'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	//++ НЕ УТКА
	
	УстановитьСтатусЗаказа("Закрыт", НСтр("ru='Закрыт';uk='Закритий'"));
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЗаказПереработчику(Команда)
	
	//++ НЕ УТКА
	
	Если Элементы.ГрафикПроизводства.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Необходимо выбрать этапы графика.';uk='Необхідно вибрати етапи графіка.'"));
		Возврат;
	КонецЕсли; 
	
	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.ГрафикПроизводства.ВыделенныеСтроки Цикл
		ДанныеСтроки = ГрафикПроизводства.НайтиПоИдентификатору(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ДанныеЗаполнения = ПроизводствоКлиент.ДанныеДляФормированияЗаказовПереработчикам(СписокСтрок);
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
		ОткрытьФорму("Документ.ЗаказПереработчику.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	КонецЕсли; 
	
	//-- НЕ УТКА
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	//++ НЕ УТКА
	ЗаполнитьГрафикПроизводства();
	//-- НЕ УТКА
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец МенюОтчеты

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

//++ НЕ УТКА

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		ПоказатьЗначение(,МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	Документы.ЗаказПереработчику.УстановитьУсловноеОформлениеСписка(Список);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
																			 "ГрафикПроизводстваХарактеристика",
																		     "ГрафикПроизводства.ХарактеристикиИспользуются");
																			 
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "СписокДата");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтборов()
	
	СохранитьПараметрыОтбора();
	ЗаполнитьГрафикПроизводства();
	
КонецПроцедуры

&НаСервере
Функция ЕстьОтборПоРаспоряжению()
	
	ЕстьОтборПоРаспоряжению = Ложь;
	
	Для каждого ЭлементКоллекции Из СписокРаспоряжений Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			ЕстьОтборПоРаспоряжению = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОтборПоРаспоряжению;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГрафикПроизводства()

	ГрафикПроизводства.Очистить();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПереработкаПоГрафику.ЗаказНаПроизводство.Организация    КАК Организация,
	|	ПереработкаПоГрафику.ЗаказНаПроизводство                КАК Распоряжение,
	|	ПереработкаПоГрафику.ЗаказНаПроизводство.Номер          КАК НомерРаспоряжения,
	|	ПереработкаПоГрафику.ЗаказНаПроизводство.Дата           КАК ДатаРаспоряжения,
	|	ЗаказЭтапы.Подразделение                                КАК Подразделение,
	|	ЗаказЭтапы.Партнер                                      КАК Переработчик,
	|	ПереработкаПоГрафику.КодСтрокиЭтапыГрафик               КАК КодСтрокиЭтапыГрафик,
	|	ПереработкаПоГрафику.Номенклатура                       КАК Номенклатура,
	|	ПереработкаПоГрафику.Характеристика                     КАК Характеристика,
	|	ПереработкаПоГрафику.Склад                              КАК Склад,
	|	ПереработкаПоГрафику.Склад.Родитель                     КАК ГруппаСкладов,
	|	ЕСТЬNULL(ПереработкаПоГрафику.Склад.Родитель.ВыборГруппы, НЕОПРЕДЕЛЕНО) КАК ВыборГруппы,
	|	ПереработкаПоГрафику.КЗаказуОстаток                     КАК Количество,
	|	ЗаказЭтапыГрафик.Этап.Представление                     КАК ЭтапПредставление,
	|	ЗаказНаПроизводствоПродукция.Спецификация.Представление КАК СпецификацияПредставление,
	|	ЗаказНаПроизводствоПродукция.Спецификация.МногоэтапныйПроизводственныйПроцесс КАК МногоэтапныйПроизводственныйПроцесс,
	|	ЗаказЭтапыГрафик.НачалоПредварительногоБуфера           КАК Начало,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводствоПродукция.Номенклатура.ИспользованиеХарактеристик В (
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), 
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры), 
	|					ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                   КАК ХарактеристикиИспользуются,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) < &ТекущаяДата
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                   КАК ДатаЗапускаПросрочена,
	|	ПереработкаПоГрафику.ЗаказНаПроизводство.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Остатки(
	|			,
	|			(НЕ &ОтборПоРаспоряжению
	|				ИЛИ ЗаказНаПроизводство В (&СписокРаспоряжений))
	|			И &УсловиеЗаблокированныеРаспоряжения) КАК ПереработкаПоГрафику
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ЗаказЭтапыГрафик
	|		ПО (ЗаказЭтапыГрафик.Ссылка = ПереработкаПоГрафику.ЗаказНаПроизводство)
	|			И (ЗаказЭтапыГрафик.КодСтроки = ПереработкаПоГрафику.КодСтрокиЭтапыГрафик)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ЗаказЭтапы
	|		ПО (ЗаказЭтапы.Ссылка = ЗаказЭтапыГрафик.Ссылка)
	|			И (ЗаказЭтапы.КлючСвязи = ЗаказЭтапыГрафик.КлючСвязиЭтапы)
	|			И (ЗаказЭтапы.КлючСвязиПродукция = ЗаказЭтапыГрафик.КлючСвязиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО (ЗаказНаПроизводствоПродукция.Ссылка = ЗаказЭтапыГрафик.Ссылка)
	|			И (ЗаказНаПроизводствоПродукция.КлючСвязи = ЗаказЭтапыГрафик.КлючСвязиПродукция)
	|ГДЕ
	|	(&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) >= &ДатаНачала)
	|	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ КОНЕЦПЕРИОДА(ЗаказЭтапыГрафик.НачалоПредварительногоБуфера, ДЕНЬ) <= &ДатаОкончания)
	|	И (&Переработчик = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ИЛИ ЗаказЭтапы.Партнер = &Переработчик)
	|	И (&Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ИЛИ ЗаказЭтапы.Подразделение = &Подразделение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказЭтапыГрафик.НачалоПредварительногоБуфера";

	ТаблицыДляКонтроля = Новый Массив;
	ТаблицыДляКонтроля.Добавить("Документ.ЗаказНаПроизводство");
	ТаблицыДляКонтроля.Добавить("РегистрНакопления.ПереработкаПоГрафикуПроизводства");
	ЗаблокированныеРаспоряжения = Документы.ЗаказНаПроизводство.ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки(ТаблицыДляКонтроля);
	Если ЗаблокированныеРаспоряжения.Количество() <> 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеЗаблокированныеРаспоряжения", "И НЕ ЗаказНаПроизводство В (&ЗаблокированныеРаспоряжения)");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеЗаблокированныеРаспоряжения", "");
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущаяДата",         ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Переработчик",        ОтборПереработчик);
	Запрос.УстановитьПараметр("Подразделение",       ОтборПодразделение);
	Запрос.УстановитьПараметр("ДатаНачала",          ОтборПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",       ОтборПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("ОтборПоРаспоряжению", ЕстьОтборПоРаспоряжению());
	Запрос.УстановитьПараметр("СписокРаспоряжений",  СписокРаспоряжений);
	Запрос.УстановитьПараметр("ЗаблокированныеРаспоряжения",  ЗаблокированныеРаспоряжения);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСтроки = ГрафикПроизводства.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
		
		СпецификацияСтрока = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЭтапа(
										Выборка.СпецификацияПредставление,
										Выборка.ЭтапПредставление,
										Выборка.МногоэтапныйПроизводственныйПроцесс);
										
		ДанныеСтроки.РаспоряжениеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru='Заказ № %1 от %2 (%3)';uk='Замовлення № %1 від %2 (%3)'"),
														ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.НомерРаспоряжения, Ложь, Истина),
														Формат(Выборка.ДатаРаспоряжения, "ДЛФ=D"),
														СпецификацияСтрока);
		
	КонецЦикла;
	
	КоличествоРаспоряжений = ГрафикПроизводства.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказа(НовыйСтатус, ИмяСтатуса)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""%ИмяСтатуса%"". Продолжить?';uk='У виділених у списку замовлень буде встановлено статус ""%ИмяСтатуса%"". Продовжити?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяСтатуса%", ИмяСтатуса);
	ДопПараметры = Новый Структура("ВыделенныеСтроки, ИмяСтатуса, НовыйСтатус", ВыделенныеСтроки, ИмяСтатуса, НовыйСтатус);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусЗаказаЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗаказаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
    ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
    ИмяСтатуса = ДополнительныеПараметры.ИмяСтатуса;
    НовыйСтатус = ДополнительныеПараметры.НовыйСтатус;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ОчиститьСообщения();
    
    КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, НовыйСтатус);
    
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
		    Элементы.Список,
		    КоличествоОбработанных,
		    ВыделенныеСтроки.Количество(),
		    ИмяСтатуса);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()

	ПараметрыОтбора = Новый Структура("ОтборПереработчик,ОтборМенеджер,ОтборПериод,ОтборПодразделение,ОтборПриоритет");

	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("ЗаказПереработчикуРабочееМесто", "ПараметрыОтбора", ПараметрыОтбора);

КонецПроцедуры

&НаСервере
Функция ВыполняетсяОбновлениеЧитаемыхДанных()

	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаИзменений.Регистратор
	|ИЗ
	|	РегистрНакопления.ПереработкаПоГрафикуПроизводства.Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаИзменений.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Изменения КАК ТаблицаИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство КАК ТаблицаОбъекта
	|		ПО (ТаблицаОбъекта.Ссылка = ТаблицаИзменений.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО (ТаблицаЭтапы.Ссылка = ТаблицаОбъекта.Ссылка)
	|			И (ТаблицаЭтапы.ПроизводствоНаСтороне)
	|ГДЕ
	|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА