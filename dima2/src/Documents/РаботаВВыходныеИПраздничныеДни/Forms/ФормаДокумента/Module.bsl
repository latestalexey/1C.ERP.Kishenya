
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		// Создается новый документ.
		ЗначенияДляЗаполнения = Новый Структура("Организация, Месяц, Ответственный", "Объект.Организация", "Объект.ПериодРегистрации", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		ЗаполнитьДанныеФормыПоОрганизации();
		ПриПолученииДанныхНаСервере();
		
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки".
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "ВерсионированиеОбъектов".
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Печать".
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьСтраницуГруппаСогласиеРаботника(Элементы, Объект.СогласиеТребуется);

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.УстановитьПараметрыВыбораСотрудников(ЭтаФорма, "СотрудникиСотрудник");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	ЗаполнитьФормуПоДаннымОбъекта(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка работающих сотрудников
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Объект.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= НачалоМесяца(Объект.ПериодРегистрации);
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= КонецМесяца(Объект.ПериодРегистрации);
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	МассивСотрудников = Новый Массив;
	Для каждого Сотрудник Из Сотрудники Цикл
		МассивСотрудников.Добавить(Сотрудник.Сотрудник);
	КонецЦикла; 
	
	КадровыйУчет.ПроверитьРаботающихСотрудников(
		МассивСотрудников,
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "Сотрудник", "Объект.Сотрудники"));
	
	// Проверка введенной подневной информации
	Если (ВремяВЧасах = 1 И НЕ РегистрацияВремениДоступна)
		ИЛИ (ВремяВЧасах <> 0 И ВремяВЧасах <> 1) Тогда
		Возврат;
	КонецЕсли;
	
	УникальныеЗначения = Новый ТаблицаЗначений;
	УникальныеЗначения.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	УникальныеЗначения.Колонки.Добавить("ЗаполненнаяДата", Новый ОписаниеТипов("Дата"));
	
	Ошибки = Неопределено;
	
	Для каждого СтрокаТаблицы Из Сотрудники Цикл
		ЕстьЗаполненноеЗначение = Ложь;
		Для Каждого ЭлементСписка Из СписокДат Цикл
			ИскомоеИмяКолонки = ?(ВремяВЧасах = 1, ИмяКолонкиСтрока(ЭлементСписка.Значение), ИмяКолонкиРаботалСтрока(ЭлементСписка.Значение));
			Если (ВремяВЧасах = 1 И ЗначениеЗаполнено(СтрокаТаблицы[ИскомоеИмяКолонки]))
				ИЛИ (ВремяВЧасах = 0 И СтрокаТаблицы[ИскомоеИмяКолонки] = Истина) Тогда
				
				ЕстьЗаполненноеЗначение = Истина;
				
				УникальныеЗначенияОтбор = Новый Структура("Сотрудник, ЗаполненнаяДата", СтрокаТаблицы.Сотрудник, ЭлементСписка.Значение);
				НайденныеСтроки = УникальныеЗначения.НайтиСтроки(УникальныеЗначенияОтбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(УникальныеЗначения.Добавить(), УникальныеЗначенияОтбор);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Информация о сотруднике %1 по дню %2 была введена в документе ранее.';uk='Інформація про працівника %1 по дню %2 була введена в документі раніше.'"),
						СтрокаТаблицы.Сотрудник,
						Формат(ЭлементСписка.Значение,"ДЛФ=D"));
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"Сотрудники[%1]." + ИскомоеИмяКолонки,
						ТекстСообщения, "",
						Сотрудники.Индекс(СтрокаТаблицы));
				КонецЕсли;
					
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьЗаполненноеЗначение Тогда
			Если ВремяВЧасах = 1 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Для сотрудника %1 не заполнено количество отработанных часов';uk='Для співробітника %1 не заповнено кількість відпрацьованих годин'"), СтрокаТаблицы.Сотрудник);
			Иначе	
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Для сотрудника %1 не указаны отработанные дни';uk='Для співробітника %1 не вказані відпрацьовані дні'"), СтрокаТаблицы.Сотрудник);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Сотрудники[%1].Сотрудник", ТекстСообщения, "", Сотрудники.Индекс(СтрокаТаблицы));
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Ошибки = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени("ПроведениеДокументаРаботаВВыходныеИПраздничныеДни");
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьОбъектПоДаннымФормы(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьФормуПоДаннымОбъекта(ТекущийОбъект);
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МесяцНачисленияСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцНачисленияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяУчтеноПриИзменении(Элемент)
	ВремяУчтеноПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВремяУчтеноПриИзмененииНаСервере()
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, РегистрацияВремениДоступна);
КонецПроцедуры

&НаКлиенте
Процедура СогласиеТребуетсяПриИзменении(Элемент)
	
	УстановитьСтраницуГруппаСогласиеРаботника(Элементы, Объект.СогласиеТребуется);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуГруппаСогласиеРаботника(Элементы, СогласиеТребуется)

	Элементы.ГруппаСогласиеРаботника.ТекущаяСтраница = ?(СогласиеТребуется, Элементы.СогласиеНеобходимо, Элементы.СогласиеНеТребуется);

КонецПроцедуры

&НаКлиенте
Процедура ВремяВЧасахПриИзменении(Элемент)
	УстановитьСвойстваЭлементовФормыПоСпособуВвода();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДат

&НаКлиенте
Процедура СписокДатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьДатуСервер(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДатПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	СтруктураПараметровВыбора = Новый Структура;
	СтруктураПараметровВыбора.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	СтруктураПараметровВыбора.Вставить("МассивДат", СписокДат.ВыгрузитьЗначения());
	СтруктураПараметровВыбора.Вставить("Подсказка", НСтр("ru='Выберите даты выходных или нерабочих праздничных дней';uk='Виберіть дати вихідних або неробочих святкових днів'"));
	
	ОткрытьФорму("ОбщаяФорма.ВыборДат", СтруктураПараметровВыбора, Элемент);
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДатПослеУдаления(Элемент)
	
	ДниРаботыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДниРаботыЗначениеПриИзменении(Элемент)
	
	ДниРаботыПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура СотрудникиПриИзменении(Элемент)
	Если РегистрацияВремениДоступна Тогда 
		УстановитьСвойствоВремяУчтено();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаПодбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.СпособКомпенсацииПереработки = ПредопределенноеЗначение("Перечисление.СпособыКомпенсацииПереработки.ПовышеннаяОплата");
		Для Каждого ДеньРаботы Из СписокДат Цикл 
			Элемент.ТекущиеДанные[ИмяКолонкиРаботалСтрока(ДеньРаботы.Значение)] = Истина;
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыОткрытия = Неопределено;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ГосударственнаяСлужбаКлиент");
		Модуль.УточнитьПараметрыОткрытияФормыВыбораСотрудников(ПараметрыОткрытия);
	КонецЕсли; 
		
	ДатаНачала = Объект.ПериодРегистрации;
	ДатаОкончания = КонецМесяца(ДатаНачала);
	
	КадровыйУчетКлиент.ВыбратьСотрудниковРаботающихВПериодеПоПараметрамОткрытияФормыСписка(
		Элементы.Сотрудники,
		Объект.Организация,
		,
		ДатаНачала,
		ДатаОкончания,
		Истина,
		АдресСпискаПодобранныхСотрудников(),
		ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	УстановитьДоступностьРегистрацииВремени();
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодРегистрации", "МесяцНачисленияСтрокой");
	УстановитьДоступностьЭлементов();
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, РегистрацияВремениДоступна);
	
	ВремяВЧасах = ?(ТекущийОбъект.ВремяВЧасах, 1, 0);
	
	УстановитьСвойстваЭлементовФормыПоСпособуВвода();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораНаСервере(МассивСотрудников)
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		Если Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 0 Тогда
			СтрокаТаблицы = Сотрудники.Добавить();
			СтрокаТаблицы.Сотрудник = Сотрудник;
			Для Каждого ДеньРаботы Из СписокДат Цикл 
				СтрокаТаблицы[ИмяКолонкиРаботалСтрока(ДеньРаботы.Значение)] = Истина;
			КонецЦикла; 
			СтрокаТаблицы.СпособКомпенсацииПереработки = ПредопределенноеЗначение("Перечисление.СпособыКомпенсацииПереработки.ПовышеннаяОплата");
		КонецЕсли;	
	КонецЦикла;	
	
	Сотрудники.Сортировать("Сотрудник");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДатуСервер(ДатыРаботы)
	
	СписокДат.ЗагрузитьЗначения(ДатыРаботы);
	ДниРаботыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиТаблицыСотрудники(МассивДат)
	
	// Добавление реквизитов формы.
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого ДатаРаботы Из МассивДат Цикл 
		// Часы для почасового.
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ИмяКолонкиСтрока(ДатаРаботы), 
				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2, ДопустимыйЗнак.Неотрицательный)), 
				"Сотрудники", 
				Формат(ДатаРаботы, "ДЛФ=Д"), 
				Истина));
		// Булевский признак для подневного.
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ИмяКолонкиРаботалСтрока(ДатаРаботы), 
				Новый ОписаниеТипов("Булево"), 
				"Сотрудники", 
				Формат(ДатаРаботы, "ДЛФ=Д"), 
				Истина));
	КонецЦикла;
	
	// Выявляем существующие реквизиты (чтобы исключить повторное добавление).
	ИменаСуществующихРеквизитов = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, ИменаСуществующихРеквизитов, "Сотрудники");
	
	// Добавляем реквизиты формы
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтаФорма, ДобавляемыеРеквизиты, ИменаСуществующихРеквизитов);

	// Добавление элементов формы
	Для Каждого РеквизитФормы Из ДобавляемыеРеквизиты Цикл 
		Если Элементы.Найти(РеквизитФормы.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитФормы.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			СледующийЭлемент = СледующийЭлементТаблицыСотрудники(РеквизитФормы.Имя, Элементы.СотрудникиДатыПризнак, "Работал");
			Элемент = Элементы.Вставить(РеквизитФормы.Имя, Тип("ПолеФормы"), Элементы.СотрудникиДатыПризнак, СледующийЭлемент);
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Иначе
			СледующийЭлемент = СледующийЭлементТаблицыСотрудники(РеквизитФормы.Имя, Элементы.СотрудникиДатыЧасы, "Дата");
			Элемент = Элементы.Вставить(РеквизитФормы.Имя, Тип("ПолеФормы"), Элементы.СотрудникиДатыЧасы, СледующийЭлемент);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
		
		Элемент.ПутьКДанным = "Сотрудники." + РеквизитФормы.Имя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СледующийЭлементТаблицыСотрудники(ИмяНовойКолонки, ГруппаФормы, Префикс)
	
	ДлинаПрефикса = СтрДлина(Префикс);
	Для Каждого Колонка Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если Лев(Колонка.Имя, ДлинаПрефикса) = Префикс И ИмяНовойКолонки < Колонка.Имя Тогда 
			Возврат Колонка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДниРаботыПриИзмененииНаСервере()
	
	РеквизитыТаблицыСотрудники = ПолучитьРеквизиты("Сотрудники");
	
	ИменаКолонок = Новый Структура;
	
	Для Каждого РеквизитТаблицы Из РеквизитыТаблицыСотрудники Цикл
		Если Лев(РеквизитТаблицы.Имя, 4) = "Дата" Или Лев(РеквизитТаблицы.Имя, 7) = "Работал" Тогда 
			ИменаКолонок.Вставить(РеквизитТаблицы.Имя, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ДобавленныеДаты = Новый Массив;
	
	Для Каждого ЭлементСписка Из СписокДат Цикл 
		
		ДатаРаботы = ЭлементСписка.Значение;
		
		Если ДатаРаботы = '00010101' Тогда
			ЭлементСписка.Представление = Формат(ДатаРаботы, "ДЛФ=Д");
			Продолжить;
		КонецЕсли;	
		
		ИмяКолонки = ИмяКолонкиСтрока(ДатаРаботы);
		Если ИменаКолонок.Свойство(ИмяКолонки) Тогда
			ИменаКолонок.Удалить(ИмяКолонки);
		Иначе
			ДобавленныеДаты.Добавить(ДатаРаботы);
			ЭлементСписка.Представление = Формат(ДатаРаботы, "ДЛФ=Д");
		КонецЕсли;
		
		ИмяКолонки = ИмяКолонкиРаботалСтрока(ДатаРаботы);
		Если ИменаКолонок.Свойство(ИмяКолонки) Тогда
			ИменаКолонок.Удалить(ИмяКолонки);
		ИначеЕсли ДобавленныеДаты.Найти(ДатаРаботы) = Неопределено Тогда 
			ДобавленныеДаты.Добавить(ДатаРаботы);
			ЭлементСписка.Представление = Формат(ДатаРаботы, "ДЛФ=Д");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленныеДаты.Количество() > 0 Тогда 
		СписокДат.СортироватьПоЗначению();
		ДобавитьКолонкиТаблицыСотрудники(ДобавленныеДаты);
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	
	Для Каждого КлючИЗначение Из ИменаКолонок Цикл 
		
		ПутьКРеквизиту = "Сотрудники." + КлючИЗначение.Ключ;
		УдаляемыеРеквизиты.Добавить(ПутьКРеквизиту);
		
		Элемент = Элементы.Найти(КлючИЗначение.Ключ);
		Если Элемент <> Неопределено Тогда 
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
	КонецЦикла;

	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектПоДаннымФормы(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийОбъект.ВремяВЧасах = ВремяВЧасах = 1;
	ТекущийОбъект.Сотрудники.Очистить();
	
	Для Каждого СтрокаТаблицы Из Сотрудники Цикл 
		Для Каждого ДеньРаботы Из СписокДат Цикл 
			НоваяСтрока = ТекущийОбъект.Сотрудники.Добавить();
			НоваяСтрока.Сотрудник 		= СтрокаТаблицы.Сотрудник;
			НоваяСтрока.СпособКомпенсацииПереработки = СтрокаТаблицы.СпособКомпенсацииПереработки;
			НоваяСтрока.Дата 			= ДеньРаботы.Значение;
			Если ТекущийОбъект.ВремяВЧасах Тогда
				НоваяСтрока.ОтработаноЧасов = СтрокаТаблицы[ИмяКолонкиСтрока(ДеньРаботы.Значение)];
			Иначе
				НоваяСтрока.НеРаботал = НЕ СтрокаТаблицы[ИмяКолонкиРаботалСтрока(ДеньРаботы.Значение)];
			КонецЕсли;
		КонецЦикла;
		Если СписокДат.Количество() = 0 Тогда 
			НоваяСтрока = ТекущийОбъект.Сотрудники.Добавить();
			НоваяСтрока.Сотрудник = СтрокаТаблицы.Сотрудник;
		КонецЕсли;	
	КонецЦикла;
	
	Если Сотрудники.Количество() = 0 Тогда 
		Для Каждого ДеньРаботы Из СписокДат Цикл 
			НоваяСтрока = ТекущийОбъект.Сотрудники.Добавить();
			НоваяСтрока.Дата = ДеньРаботы.Значение;
		КонецЦикла;
	КонецЕсли;
	
	ТекущийОбъект.ДатаНачалаСобытия = ?(СписокДат.Количество() > 0, СписокДат[0].Значение, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоДаннымОбъекта(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДат.Очистить();
	Сотрудники.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудники.Дата КАК Дата
	|ИЗ
	|	Документ.РаботаВВыходныеИПраздничныеДни.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Дата КАК Дата,
	|	Сотрудники.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Сотрудники.НеРаботал КАК НеРаботал,
	|	Сотрудники.СпособКомпенсацииПереработки КАК СпособКомпенсацииПереработки
	|ИЗ
	|	Документ.РаботаВВыходныеИПраздничныеДни.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Ссылка
	|	И Сотрудники.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|ИТОГИ ПО
	|	Сотрудник,
	|	СпособКомпенсацииПереработки";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Заполнение таблицы ДниРаботы и создание реквизитов таблицы Сотрудники.
	Выборка = РезультатыЗапроса[0].Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если ЗначениеЗаполнено(Выборка.Дата) Тогда 
			СписокДат.Добавить(Выборка.Дата, Формат(Выборка.Дата, "ДЛФ=Д"));
		КонецЕсли;	
	КонецЦикла;	
	
	ДобавитьКолонкиТаблицыСотрудники(СписокДат.ВыгрузитьЗначения());
	
	// Заполнение таблицы Сотрудники.
	ВыборкаИтогов = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИтогов.Следующий() Цикл 
		ВыборкаПоСотрудникам = ВыборкаИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСотрудникам.Следующий() Цикл 
			Выборка = ВыборкаПоСотрудникам.Выбрать();
			НоваяСтрока = Сотрудники.Добавить();
			НоваяСтрока.Сотрудник = ВыборкаПоСотрудникам.Сотрудник;
			НоваяСтрока.СпособКомпенсацииПереработки = ВыборкаПоСотрудникам.СпособКомпенсацииПереработки;
			Пока Выборка.Следующий() Цикл 
				Если ЗначениеЗаполнено(Выборка.Дата) Тогда 
					ИмяКолонки = ИмяКолонкиСтрока(Выборка.Дата);
					НоваяСтрока[ИмяКолонки] = Выборка.ОтработаноЧасов;
					ИмяКолонки = ИмяКолонкиРаботалСтрока(Выборка.Дата);
					НоваяСтрока[ИмяКолонки] = НЕ Выборка.НеРаботал;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиСтрока(Период)
	
	Возврат "Дата" + Формат(Период, "ДФ=""ггггММдд""");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиРаботалСтрока(Период)
	
	Возврат "Работал" + Формат(Период, "ДФ=""ггггММдд""");

КонецФункции

&НаСервере
Процедура УстановитьДоступностьРегистрацииВремени()
	
	РегистрацияВремениДоступна = Документы.РаботаВВыходныеИПраздничныеДни.ПолныеПраваНаДокумент(); 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	Для Каждого Колонка Из Элементы.СотрудникиДатыЧасы.ПодчиненныеЭлементы Цикл
		Если Лев(Колонка.Имя, 4) = "Дата" Тогда 
			Колонка.ТолькоПросмотр = Не РегистрацияВремениДоступна;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуетсяРасчетЗарплаты И Не РегистрацияВремениДоступна И Объект.ВремяУчтено Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ИнфоНадпись.Видимость = ИспользуетсяРасчетЗарплаты И Не РегистрацияВремениДоступна И Объект.ВремяУчтено;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойствоВремяУчтено()
	
	Если РегистрацияВремениДоступна Тогда 
		Объект.ВремяУчтено = Истина;
	КонецЕсли;
	
	ЗарплатаКадрыРасширенный.УстановитьВторогоОтветственногоВМногофункциональныхДокументах(ЭтаФорма, РегистрацияВремениДоступна);
	
КонецПроцедуры	

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура УстановитьСвойстваЭлементовФормыПоСпособуВвода()
	
	// При вводе "по дням"
	// - скрываем колонки с датами (считаем, что все сотрудники работали все дни)
	// - меняем заголовок у таблицы
	
	ВводПоДням = ВремяВЧасах = 0;
	
	Элементы.СотрудникиДатыЧасы.Видимость = Не ВводПоДням;
	Элементы.СотрудникиДатыПризнак.Видимость = ВводПоДням;
	Элементы.СписокСотрудников.Заголовок = ?(ВводПоДням, НСтр("ru='Сотрудники';uk='Співробітники'"), НСтр("ru='Часы работы в выходные';uk='Години роботи у вихідні'"));
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьДанныеФормыПоОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоОрганизации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапрашиваемыеЗначения = Новый Структура;
	ЗапрашиваемыеЗначения.Вставить("Организация", "Объект.Организация");
	
	ЗапрашиваемыеЗначения.Вставить("Руководитель", "Объект.Руководитель");
	ЗапрашиваемыеЗначения.Вставить("ДолжностьРуководителя", "Объект.ДолжностьРуководителя");
	
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(ЭтаФорма, ЗапрашиваемыеЗначения, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Организация"));	
	
КонецПроцедуры

#КонецОбласти
