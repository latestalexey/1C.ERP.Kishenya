#Если Не ТолстыйКлиентУправляемоеПриложение Или Сервер Тогда

#Область ПрограммныйИнтерфейс

// Подсистема "Управление доступом".

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическиеЛица.ФизическоеЛицо");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
		
		
	РегламентированнаяОтчетность.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбъектЗафиксирован() Экспорт
	
	Возврат НЕ ПрямыеВыплатыПособийСоциальногоСтрахования.СтатусПозволяетРедактироватьДокумент(СтатусДокумента);
	
КонецФункции 

Функция ОбновитьВторичныеДанныеДокумента(ДанныеОрганизации = Истина, ДанныеОплат = Истина, МассивОплат = Неопределено) Экспорт
	
	Модифицирован = Ложь;
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Модифицирован;
	КонецЕсли;
	
	Если ДанныеОрганизации И ОбновитьДанныеСтрахователя() Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Если ДанныеОплат И ОбновитьДанныеОплат(МассивОплат) Тогда
		Модифицирован = Истина;
	КонецЕсли;
	
	Возврат Модифицирован
	
КонецФункции

Функция ОбновитьДанныеСтрахователя()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаРеквизиты = "НомерФССУ,НомерФСС,НомерФССНесчСлучай,НазваниеРабочегоОрганаФонда,ФИОДиректораФонда,КодПоЕДРПОУ,КодКВЕД,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер,ТелефонСоставителя,АдресОрганизации";
	СтрокаРеквизиты = СтрокаРеквизиты + ",Банк,НаименованиеБанка,НомерЛицевогоСчета,НомерСчета,МФОБанка";
	РеквизитыДокумента = Новый Структура(СтрокаРеквизиты);
	
	СтрокаРеквизитыОрганизации = "НомерФССУ,НомерФСС, НомерФССНесчСлучай, НазваниеРабочегоОрганаФонда,ФИОДиректораФонда,КодПоЕДРПОУ,КодКВЕД";
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, СтрокаРеквизитыОрганизации);
	
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, РеквизитыОрганизации, СтрокаРеквизитыОрганизации);
	
	ЗаполняемыеЗначения = Новый Структура("Организация,Руководитель,ДолжностьРуководителя,ГлавныйБухгалтер", Организация);
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	ЗаполняемыеЗначения.Свойство("Руководитель", РеквизитыДокумента.Руководитель);
	ЗаполняемыеЗначения.Свойство("ДолжностьРуководителя", РеквизитыДокумента.ДолжностьРуководителя);
	ЗаполняемыеЗначения.Свойство("ГлавныйБухгалтер", РеквизитыДокумента.ГлавныйБухгалтер);
	
	
	АдресаОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),	
																					Перечисления.ТипыКонтактнойИнформации.Адрес, 
																					Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Если АдресаОрганизации.Количество() > 0 Тогда
		РеквизитыДокумента.АдресОрганизации = АдресаОрганизации[0].ЗначенияПолей;	
	Иначе
		РеквизитыДокумента.АдресОрганизации = "";	
	КонецЕсли;
	
	ТелефоныОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация),	
																					Перечисления.ТипыКонтактнойИнформации.Телефон, 
																					Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	
	Если ТелефоныОрганизации.Количество() > 0 Тогда
		РеквизитыДокумента.ТелефонСоставителя = ТелефоныОрганизации[0].ЗначенияПолей;	
	Иначе
		РеквизитыДокумента.ТелефонСоставителя = "";	
	КонецЕсли;
	
	Запрос = ПрямыеВыплатыПособийСоциальногоСтрахования.ЗапросПоСтрокеПолей(СтрокаРеквизиты);
	
	ЗаполнитьЗначенияСвойств(Запрос.Параметры, РеквизитыДокумента); 
	
	Запрос.Выполнить();
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(Запрос.МенеджерВременныхТаблиц, ЭтотОбъект);
	
КонецФункции

Функция ОбновитьДанныеОплат(МассивОплат = Неопределено)
	
	Если ОбъектЗафиксирован() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеОплат = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Месяц, ФондСоциальногоСтрахования, Организация, , Ссылка);
	
	Если ДанныеОплат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("ДанныеОплат", ДанныеОплат.Выгрузить());
	Запрос.УстановитьПараметр("МассивОплат", ?(МассивОплат = Неопределено, Оплаты.Выгрузить().ВыгрузитьКолонку("ДокументОснование"), МассивОплат));
	
	ОписаниеФиксацииРеквизитов = Документы.ЗаявлениеРасчетВФСС.ПараметрыФиксацииВторичныхДанных().ОписаниеФиксацииРеквизитов;
	
	ИмяГруппыОписания = "Оплаты";
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеСтрок.ДокументОснование КАК ДокументОснование,";
	Для каждого ОписаниеРеквизита Из ОписаниеФиксацииРеквизитов Цикл
		Если ОписаниеРеквизита.Значение.ИмяГруппы <> ИмяГруппыОписания Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	ДанныеСтрок." + ОписаниеРеквизита.Значение.ИмяРеквизита + " КАК " + ОписаниеРеквизита.Значение.ИмяРеквизита + ",";
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Запрос.Текст, 1);
	
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТВторичныеДанные
	|ИЗ
	|	&ДанныеОплат КАК ДанныеСтрок
	|ГДЕ
	|	ДанныеСтрок.ДокументОснование В(&МассивОплат)";
	
	Запрос.Выполнить();
	
	Возврат ФиксацияВторичныхДанныхВДокументах.ОбновитьВторичныеДанные(Запрос.МенеджерВременныхТаблиц, ЭтотОбъект, "Оплаты");
	
КонецФункции

Процедура ЗаполнитьДокументОплаты(СписокСотрудников) Экспорт
	Если СписокСотрудников = Неопределено ИЛИ ТипЗнч(СписокСотрудников) = Тип("СписокЗначений") Тогда
	Оплаты.Очистить();
	
	ДанныеОплат = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Месяц, ФондСоциальногоСтрахования, Организация, СписокСотрудников, Ссылка);
	
	Если ДанныеОплат <> Неопределено Тогда
		Оплаты.Загрузить(ДанныеОплат.Выгрузить());
	КонецЕсли;
	ИначеЕсли ТипЗнч(СписокСотрудников) = Тип("СправочникСсылка.Сотрудники") Тогда
		ТабличнаяЧасть = Оплаты.НайтиСтроки(Новый Структура("Сотрудник", СписокСотрудников));
		Для каждого Стр Из ТабличнаяЧасть Цикл
			Оплаты.Удалить(Стр.НомерСтроки - 1);
		КонецЦикла;
		Список = Новый СписокЗначений;
		Список.Добавить(СписокСотрудников);
		ДанныеПособий = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Месяц, ФондСоциальногоСтрахования, Организация, Список, Ссылка);
		Для каждого Строка ИЗ ДанныеПособий.Выгрузить() Цикл 
			НовЗапись = Оплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, Строка);
		КонецЦикла;	
	КонецЕсли;
	Оплаты.Сортировать("Сотрудник Возр");
	
КонецПроцедуры

Процедура ЗаполнитьДокументПособия(СписокСотрудников) Экспорт
	
	
	Если СписокСотрудников = Неопределено ИЛИ ТипЗнч(СписокСотрудников) = Тип("СписокЗначений") Тогда
		ПособияНаПогребение.Очистить();
		ДанныеПособий = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияРасходовНаПогребение(Месяц, ФондСоциальногоСтрахования, Организация, СписокСотрудников, Ссылка);
		Если ДанныеПособий <> Неопределено Тогда
			ПособияНаПогребение.Загрузить(ДанныеПособий.Выгрузить());
		КонецЕсли;
	ИначеЕсли ТипЗнч(СписокСотрудников) = Тип("СправочникСсылка.Сотрудники") Тогда
		ТабличнаяЧасть = ПособияНаПогребение.НайтиСтроки(Новый Структура("Сотрудник", СписокСотрудников));
		Для каждого Стр Из ТабличнаяЧасть Цикл
			ПособияНаПогребение.Удалить(Стр.НомерСтроки - 1);
		КонецЦикла;
		Список = Новый СписокЗначений;
		Список.Добавить(СписокСотрудников);
		ДанныеПособий = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияРасходовНаПогребение(Месяц, ФондСоциальногоСтрахования, Организация, Список, Ссылка);
		Для каждого Строка ИЗ ДанныеПособий.Выгрузить() Цикл 
			НовЗапись = ПособияНаПогребение.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, Строка);
		КонецЦикла;	
	КонецЕсли;
	ПособияНаПогребение.Сортировать("Сотрудник Возр");
	
КонецПроцедуры

Функция ДанныеСтроки(ДокументОснование = Неопределено, ТабличнаяЧасть, Сотрудник) Экспорт
	
	СписокСотрудников = Новый СписокЗначений;
	СписокСотрудников.Добавить(Сотрудник);
	Если ТабличнаяЧасть = "Оплаты" Тогда
		Данные = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Месяц, ФондСоциальногоСтрахования, Организация, СписокСотрудников, Ссылка, ДокументОснование);
	ИначеЕсли ТабличнаяЧасть = "ПособияНаПогребение" Тогда
		Данные = ПрямыеВыплатыПособийСоциальногоСтрахования.ДанныеЗаполненияРасходовНаПогребение(Месяц, ФондСоциальногоСтрахования, Организация, СписокСотрудников, Ссылка, ДокументОснование);
	КонецЕсли;	
	ДанныеСтроки = Данные.Выбрать();
	Если ДанныеСтроки.Следующий() Тогда
		Возврат ДанныеСтроки
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции 

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если Ссылка.СтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПереданВФСС Тогда	
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
		ДанныеДляПроведения = ДанныеДляПроведения(ЭтотОбъект.Ссылка);
		ДвижениеПоРегиструРасчетыСФондамиПоПособиям(ДанныеДляПроведения, Движения, Ссылка);
	Иначе
		Запись = РегистрыНакопления.РасчетыСФондамиПоПособиям.СоздатьНаборЗаписей();
		Запись.Отбор.Регистратор.Установить(Ссылка);
		Запись.Очистить();
		Запись.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ДвижениеПоРегиструРасчетыСФондамиПоПособиям(Данные, Движения, Ссылка)
	
	Для Каждого Строка ИЗ Данные.Больничные Цикл
		НовыеДвижения = Движения.РасчетыСФондамиПоПособиям.Добавить();
		ЗаполнитьЗначенияСвойств(НовыеДвижения,Строка);
	КонецЦикла;
	Для Каждого Строка ИЗ Данные.ПособияНаПогребения Цикл
		НовыеДвижения = Движения.РасчетыСФондамиПоПособиям.Добавить();
		ЗаполнитьЗначенияСвойств(НовыеДвижения,Строка);
	КонецЦикла;
	Движения.РасчетыСФондамиПоПособиям.Записывать = Истина;
	Движения.РасчетыСФондамиПоПособиям.Записать();
	
КонецПроцедуры


Функция ДанныеДляПроведения(ЭтотОбъект)
	
	ДанныеДляПроведения = Новый Структура;
	Если ЭтотОбъект.Оплаты.Количество() > 0 Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявлениеРасчетВФСС.Организация,
		|	ЗаявлениеРасчетВФСС.Месяц,
		|	ЗаявлениеРасчетВФСС.Ссылка КАК Заявление,
		|	ЗаявлениеРасчетВФСС.ФондСоциальногоСтрахования,
		|	ЗаявлениеРасчетВФССОплаты.Сотрудник,
		|	ЗаявлениеРасчетВФССОплаты.СуммаПособияВсегоФСС КАК Сумма,
		|	ЗаявлениеРасчетВФССОплаты.КоличествоДнейВсегоФСС КАК КоличествоДней,
		|	ЗаявлениеРасчетВФССОплаты.СуммаЛьготыЧернобыльцы,
		|	ЗаявлениеРасчетВФССОплаты.ДокументОснование,
		|	ЗаявлениеРасчетВФССОплаты.ПричинаНетрудоспособности,
		|	ЗаявлениеРасчетВФСС.Ссылка КАК Регистратор,
		|	ЗаявлениеРасчетВФСС.Дата КАК Период
		|ПОМЕСТИТЬ Оплаты
		|ИЗ
		|	Документ.ЗаявлениеРасчетВФСС.Оплаты КАК ЗаявлениеРасчетВФССОплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеРасчетВФСС КАК ЗаявлениеРасчетВФСС
		|		ПО ЗаявлениеРасчетВФССОплаты.Ссылка = ЗаявлениеРасчетВФСС.Ссылка
		|ГДЕ
		|	ЗаявлениеРасчетВФССОплаты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Оплаты.Организация,
		|	Оплаты.Месяц,
		|	Оплаты.Заявление,
		|	Оплаты.ФондСоциальногоСтрахования,
		|	Оплаты.Сотрудник,
		|	Оплаты.Сумма,
		|	Оплаты.КоличествоДней,
		|	Оплаты.СуммаЛьготыЧернобыльцы,
		|	Оплаты.ДокументОснование,
		|	Оплаты.ПричинаНетрудоспособности,
		|	НастройкаРасчетовСФондамиПоПособиям.СтатьяРасчетов,
		|	Оплаты.Регистратор,
		|	Оплаты.Период
		|ИЗ
		|	Оплаты КАК Оплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаРасчетовСФондамиПоПособиям КАК НастройкаРасчетовСФондамиПоПособиям
		|		ПО Оплаты.ФондСоциальногоСтрахования = НастройкаРасчетовСФондамиПоПособиям.ФондСоциальногоСтрахования
		|			И Оплаты.ПричинаНетрудоспособности = НастройкаРасчетовСФондамиПоПособиям.Пособие";
		
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект);
		
		ДанныеДляПроведения.Вставить("Больничные", Запрос.Выполнить().Выгрузить());
	Иначе
		ДанныеДляПроведения.Вставить("Больничные", Новый ТаблицаЗначений);
	КонецЕсли;	
	Если ЭтотОбъект.ПособияНаПогребение.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявлениеРасчетВФСС.Организация,
		|	ЗаявлениеРасчетВФСС.Месяц,
		|	ЗаявлениеРасчетВФСС.Ссылка КАК Заявление,
		|	ЗаявлениеРасчетВФСС.Ссылка КАК Регистратор,
		|	ЗаявлениеРасчетВФСС.ФондСоциальногоСтрахования,
		|	ЗаявлениеРасчетВФССПособияНаПогребение.Сотрудник,
		|	ЗаявлениеРасчетВФССПособияНаПогребение.ДокументОснование,
		|	ЗаявлениеРасчетВФССПособияНаПогребение.РазмерПособия КАК Сумма,
		|	0 КАК КоличествоДней,
		|	0 КАК СуммаЛьготыЧернобыльцы,
		|	ЗаявлениеРасчетВФСС.Дата КАК Период
		|ПОМЕСТИТЬ Оплаты
		|ИЗ
		|	Документ.ЗаявлениеРасчетВФСС.ПособияНаПогребение КАК ЗаявлениеРасчетВФССПособияНаПогребение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеРасчетВФСС КАК ЗаявлениеРасчетВФСС
		|		ПО ЗаявлениеРасчетВФССПособияНаПогребение.Ссылка = ЗаявлениеРасчетВФСС.Ссылка
		|ГДЕ
		|	ЗаявлениеРасчетВФССПособияНаПогребение.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Оплаты.Организация,
		|	Оплаты.Месяц,
		|	Оплаты.Заявление,
		|	Оплаты.ФондСоциальногоСтрахования,
		|	Оплаты.Сотрудник,
		|	Оплаты.ДокументОснование,
		|	Оплаты.Сумма,
		|	Оплаты.КоличествоДней,
		|	Оплаты.СуммаЛьготыЧернобыльцы,
		|	НастройкаРасчетовСФондамиПоПособиям.СтатьяРасчетов,
		|	Оплаты.Регистратор,
		|	Оплаты.Период
		|ИЗ
		|	Оплаты КАК Оплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаРасчетовСФондамиПоПособиям КАК НастройкаРасчетовСФондамиПоПособиям
		|		ПО Оплаты.ФондСоциальногоСтрахования = НастройкаРасчетовСФондамиПоПособиям.ФондСоциальногоСтрахования
		|			И (НастройкаРасчетовСФондамиПоПособиям.Пособие = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение))";
		
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект);
		ДанныеДляПроведения.Вставить("ПособияНаПогребения", Запрос.Выполнить().Выгрузить());
	Иначе
		ДанныеДляПроведения.Вставить("ПособияНаПогребения",Новый ТаблицаЗначений);
	КонецЕсли;	
	Возврат ДанныеДляПроведения; 
	
КонецФункции	

#КонецОбласти

#КонецЕсли
