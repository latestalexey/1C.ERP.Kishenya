


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", 
		"Объект.Организация",
		"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);
		
		Если Не ЗначениеЗаполнено(Объект.Месяц) Тогда
			Объект.Месяц = НачалоМесяца(ТекущаяДатаСеанса());
		КонецЕсли;
		
		ПриПолученииДанныхНаСервере("Объект");
		
		ОрганизацияПриИзмененииНаСервере();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ФиксацияСохранитьРеквизитыФормыФикс(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект);
	ФиксацияУстановитьОбъектЗафиксирован();
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Месяц", "МесяцСтрокой", Модифицированность);
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Месяц", "МесяцСтрокой");
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Месяц", "МесяцСтрокой", Направление, Модифицированность);
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойАвтоПодбор(Элемент, 
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойОкончаниеВводаТекста(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АдресОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("АдресОрганизацииЗавершениеВыбора", ЭтотОбъект);
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"), Объект.АдресОрганизации);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура АдресОрганизацииЗавершениеВыбора(СтруктураАдреса, ПараметрыОповещения) Экспорт 
	
	Если ТипЗнч(СтруктураАдреса) = Тип("Структура")Тогда
		Объект.АдресОрганизации = СтруктураАдреса.КонтактнаяИнформация;
		ФиксацияЗафиксироватьИзменениеРеквизита("АдресОрганизации");
		АдресОрганизации = СтруктураАдреса.Представление;
	КонецЕсли;
	
	УстановитьПодсказкуАдресам(ЭтотОбъект, Объект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонСоставителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Оповещение = Новый ОписаниеОповещения("ТелефонСоставителяЗавершениеВыбора", ЭтотОбъект);
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"), Объект.ТелефонСоставителя);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ТелефонСоставителяЗавершениеВыбора(СтруктураТелефона, ПараметрыОповещения) Экспорт 
	
	Если ТипЗнч(СтруктураТелефона) = Тип("Структура") Тогда
		Объект.ТелефонСоставителя = СтруктураТелефона.КонтактнаяИнформация;
		ФиксацияЗафиксироватьИзменениеРеквизита("ТелефонСоставителя");
		ТелефонСоставителя = СтруктураТелефона.Представление;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Оплаты

&НаКлиенте
Процедура ОплатыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьОтображениеПредупрежденийТЧ_Оплаты", 0.2, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыДокументОснованиеПриИзменении(Элемент)
	Сотрудник = Элементы.ОплатыБольничных.ТекущиеДанные.Сотрудник; 
	ОплатыДокументОснованиеПриИзмененииНаСервере(Элементы.ОплатыБольничных.ТекущаяСтрока, "Оплаты", Сотрудник);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьОплаты(Команда)
	Если ЗначениеЗаполнено(Объект.ФондСоциальногоСтрахования) И ЗначениеЗаполнено(Объект.Месяц) Тогда
		ЗаполнитьДокументОплаты();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен реквизит " + ?(ЗначениеЗаполнено(Объект.ФондСоциальногоСтрахования), "Месяц расчета", "Фонд социального страхования") + ", заполнение не выполнено!");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПособия(Команда)
	Если ЗначениеЗаполнено(Объект.ФондСоциальногоСтрахования) И ЗначениеЗаполнено(Объект.Месяц) Тогда
		ЗаполнитьДокументПособия();
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен реквизит " + ?(ЗначениеЗаполнено(Объект.ФондСоциальногоСтрахования), "Месяц расчета", "Фонд социального страхования") + ", заполнение не выполнено!");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ОбновитьВторичныеДанныеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИсправления(Команда) 
	ОтменитьВсеИсправленияНаСервере();
	ПособияНаПогребениеОтменитьВсеИсправления();
	ОплатыБольничныхОтменитьВсеИсправления();
КонецПроцедуры

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать	

&НаКлиенте
Процедура Подключаемый_ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь)

	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки 

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтаФорма, "Организация");
	ОбновитьВторичныеДанныеДокумента(Истина, Ложь);
	ФиксацияОбновитьФиксациюВФорме();
КонецПроцедуры

#Область МеханизмФиксацииИзменений

&НаСервере
Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ИменаСлужебныхРеквизитов = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ИменаСлужебныхРеквизитовИЭлементовМеханизмаФиксацииДанных();
	
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтотОбъект, МассивИменРеквизитовФормы);
	
	Если МассивИменРеквизитовФормы.Найти(ИменаСлужебныхРеквизитов["ПараметрыФиксацииВторичныхДанных"]) = Неопределено Тогда
		ПараметрыФиксации = Документы.ЗаявлениеРасчетВФСС.ПараметрыФиксацииВторичныхДанных();
		ПараметрыФиксации.Вставить("ОписаниеФормы", ФиксацияОписаниеФормы(ПараметрыФиксации));
	Иначе	
		ПараметрыФиксации = ЭтотОбъект[ИменаСлужебныхРеквизитов["ПараметрыФиксацииВторичныхДанных"]];
	КонецЕсли;
	
	Возврат ПараметрыФиксации;
	
КонецФункции

&НаСервере
Функция ФиксацияОписаниеФормы(ПараметрыФиксации) Экспорт
	
	ОписаниеФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеФормы();
	
	ОписаниеЭлементовФормы = Новый Соответствие();
	ОписаниеЭлементаФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	
	ОписаниеЭлементаФормы.ПрефиксПути = "Объект";
	ОписаниеЭлементаФормы.ПрефиксПутиТекущиеДанные = "Элементы.Оплаты.ТекущиеДанные";
	
	ОписаниеЭлементаФормыПособия = ОписаниеЭлементаФормы;
	ОписаниеЭлементаФормыПособия.ПрефиксПутиТекущиеДанные = "Элементы.ПособияНаПогребение.ТекущиеДанные";
	
	
	Для каждого ОписаниеФиксацииРеквизита Из ПараметрыФиксации.ОписаниеФиксацииРеквизитов Цикл
		Если Найти(ОписаниеФиксацииРеквизита.Ключ, "ПособияНаПогребение") = 0 Тогда
			ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеЭлементаФормы);
		Иначе
			ОписаниеЭлементовФормы.Вставить(ОписаниеФиксацииРеквизита.Ключ, ОписаниеЭлементаФормыПособия);
		КонецЕсли;	
	КонецЦикла;
	
	// Т.к. адреса редактируется через рек-т формы, укажем ему особые пути к данным.
	ПустоеОписаниеЭлементовФормы = ФиксацияВторичныхДанныхВДокументахФормы.ОписаниеЭлементаФормы();
	ОписаниеЭлементовФормы.Вставить("АдресОрганизации", ПустоеОписаниеЭлементовФормы);
	ОписаниеЭлементовФормы.Вставить("ТелефонСоставителя", ПустоеОписаниеЭлементовФормы);
	
	ОписаниеФормы.Вставить("ОписаниеЭлементовФормы", ОписаниеЭлементовФормы);
	ОписаниеФормы.Вставить("ФормаРедактируетсяПослеФиксации", Ложь);
	Возврат ОписаниеФормы;
КонецФункции

&НаСервере
Функция ФиксацияЭлементыОбработчикаЗафиксироватьИзменение(ПараметрыФиксацииВторичныхДанных)

	ИсключаемыеЭлементы = Новый Массив;
	
	ОписаниеЭлементов = Новый Соответствие;
	Для каждого Описание Из ПараметрыФиксацииВторичныхДанных.ОписаниеФиксацииРеквизитов Цикл
		Если ИсключаемыеЭлементы.Найти(Описание.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеЭлементов.Вставить(Описание.Значение.ИмяРеквизита, Описание.Значение.ИмяРеквизита);
		
	КонецЦикла;
	
	Возврат ОписаниеЭлементов;
	
КонецФункции

&НаСервере
Процедура ФиксацияОбновитьФиксациюВФорме()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьФорму(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ФиксацияЗаполнитьРеквизитыФормыФикс(ТекущийОбъект)
	ФиксацияВторичныхДанныхВДокументахФормы.ЗаполнитьРеквизитыФормыФикс(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФиксацияЗаполнитьИдентификаторыФиксТЧ(Форма)
	
	ИменаСлужебныхРеквизитов = ФиксацияВторичныхДанныхВДокументахКлиентСервер.ИменаСлужебныхРеквизитовИЭлементовМеханизмаФиксацииДанных();

	ОписанияТЧ = Форма[ИменаСлужебныхРеквизитов["ПараметрыФиксацииВторичныхДанных"]]["ОписанияТЧ"];
	
	Для каждого ОписаниеТЧ Из ОписанияТЧ Цикл
		ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗаполнитьИдентификаторыФиксТЧ(Форма.Объект[ОписаниеТЧ.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФиксацияСохранитьРеквизитыФормыФикс(Форма, ТекущийОбъект)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.СохранитьРеквизитыФормыФикс(Форма, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Функция ФиксацияПодготовленныйДокумент()
	
	ФиксацияЗаполнитьИдентификаторыФиксТЧ(ЭтаФорма);
	ПодготовленныйДокумент = РеквизитФормыВЗначение("Объект");
	ФиксацияСохранитьРеквизитыФормыФикс(ЭтаФорма, ПодготовленныйДокумент);
	
	Возврат ПодготовленныйДокумент;
	
КонецФункции

&НаСервере
Процедура ФиксацияУстановитьОбъектЗафиксирован();
	 ФиксацияВторичныхДанныхВДокументахФормы.УстановитьОбъектЗафиксирован(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеДокумента(ДанныеОрганизации = Истина, ДанныеЗаявлений = Истина, МассивПервичныхДокументов = Неопределено)
	
	Если ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбъектФормыЗафиксирован(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = ФиксацияПодготовленныйДокумент();
	
	Если ДокументОбъект.ОбновитьВторичныеДанныеДокумента(ДанныеОрганизации, ДанныеЗаявлений, МассивПервичныхДокументов) Тогда
		Если НЕ ДокументОбъект.ЭтоНовый() Тогда
			ФиксацияВторичныхДанныхВДокументахФормы.УстановитьМодифицированность(ЭтотОбъект, Истина);	
		КонецЕсли;
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		УстановитьПредставлениеАдресов();
	КонецЕсли;	
	
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИсправленияНаСервере()
	
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОчиститьФиксациюИзменений(ЭтаФорма, Объект);
	ФиксацияЗаполнитьРеквизитыФормыФикс(Объект);
	ОбновитьВторичныеДанныеДокумента();
	ФиксацияОбновитьФиксациюВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗафиксироватьИзменениеРеквизитаВФорме(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	

КонецПроцедуры

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.ОбъектЗафиксирован();
	
КонецФункции 

&НаКлиенте
Процедура ОбновитьОтображениеПредупрежденийТЧ_Оплаты()
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ОбновитьОтображениеПредупрежденийТЧ(ЭтотОбъект, "Оплаты", Элементы.ОплатыБольничных.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ФиксацияЗафиксироватьИзменениеРеквизита(ИмяРеквизита, ТекущаяСтрока = 0)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтаФорма, ИмяРеквизита, ТекущаяСтрока)
КонецПроцедуры

#КонецОбласти 

#Область КлючевыеРеквизитыЗаполненияФормы

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Оплаты");
	Массив.Добавить("Объект.ПособияНаПогребение");
	Возврат Массив
КонецФункции 

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",	НСтр("ru='организации';uk='організації'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "ФондСоциальногоСтрахования",	НСтр("ru='фонда социального страхования';uk='фонду соціального страхування'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "МесяцСтрокой",	НСтр("ru='месяца расчета';uk='місяця розрахунку'")));
	
	Возврат Массив
КонецФункции

#КонецОбласти 

&НаСервере
Процедура ПриПолученииДанныхНаСервере(ТекущийОбъект, ДополнятьФорму = Истина)
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Месяц", "МесяцСтрокой");
	
	ФиксацияВторичныхДанныхВДокументахФормы.ИнициализироватьМеханизмФиксацииРеквизитов(ЭтаФорма, ТекущийОбъект);
	ФиксацияВторичныхДанныхВДокументахФормы.ПодключитьОбработчикиФиксацииИзмененийРеквизитов(ЭтотОбъект, ФиксацияЭлементыОбработчикаЗафиксироватьИзменение(ЭтотОбъект["ПараметрыФиксацииВторичныхДанных"]));
	
	ОбновитьВторичныеДанныеДокумента();
	ФиксацияОбновитьФиксациюВФорме();
	
	РеквизитыКДобавлению.Очистить();
	РеквизитыКУдалению.Очистить();
	
	НовыйДокумент = Параметры.Ключ.Пустая();
	НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент);
	//ЗарплатаКадрыРасширенный.ИзменитьРеквизитыФормы(ЭтаФорма);
	ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент);
	

	УстановитьПредставлениеАдресов();
	УстановитьПодсказкуАдресам(ЭтотОбъект, Объект);	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументОплаты(СписокСотрудников = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьДокументОплаты(СписокСотрудников);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПособия(СписокСотрудников = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьДокументПособия(СписокСотрудников);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуАдресам(Форма, Объект)
	УстановитьПодсказкуАдреса(Форма, Объект, "АдресОрганизации");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПодсказкуАдреса(Форма, Объект, ИмяПоляАдрес)
	СообщениеОРезультатахПроверкиАдреса = ПрямыеВыплатыПособийСоциальногоСтрахованияКлиентСервер.СообщениеОРезультатахПроверкиАдреса(Объект[ИмяПоляАдрес]);
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяПоляАдрес, СообщениеОРезультатахПроверкиАдреса); 
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеАдресов()
	Если Не ПустаяСтрока(Объект.АдресОрганизации) Тогда
		СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(
		Объект.АдресОрганизации,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
		УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, ЭтаФорма.АдресОрганизации);
	Иначе
		ЭтаФорма.АдресОрганизации = НСтр("ru='<Не заполнен>';uk='<Не заповнений>'");
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.ТелефонСоставителя) Тогда
		СтруктураТелефона = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
		Объект.ТелефонСоставителя,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
		ЭтаФорма.ТелефонСоставителя = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, 
																					  СтруктураТелефона.КодГорода, 
																					  СтруктураТелефона.НомерТелефона, 
																					  СтруктураТелефона.Добавочный, 
																					  СтруктураТелефона.Комментарий);
	Иначе
		ЭтаФорма.ТелефонСоставителя = НСтр("ru='<Не заполнен>';uk='<Не заповнений>'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСведений(Идентификатор, ТабличнаяЧасть, Сотрудник)
	
	ТекущаяСтрока = Объект[ТабличнаяЧасть].НайтиПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование) Тогда 
		//ФиксацияВторичныхДанныхВДокументахКлиентСервер.СброситьФиксациюИзмененийРеквизитовПоОснованиюЗаполнения(ЭтотОбъект, "ДокументОснование", Идентификатор);
		ДанныеСтроки = ДанныеСтроки(ТекущаяСтрока.ДокументОснование, ТабличнаяЧасть, Сотрудник);
		Если ЗначениеЗаполнено(ДанныеСтроки) Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСтроки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДанныеСтроки(Ссылка, ТабличнаяЧасть, Сотрудник)
	
	Документ = РеквизитФормыВЗначение("Объект");
	
	Возврат Документ.ДанныеСтроки(Ссылка, ТабличнаяЧасть, Сотрудник);
	
КонецФункции

&НаСервере
Процедура ОплатыДокументОснованиеПриИзмененииНаСервере(Идентификатор, ТабличнаяЧасть, Сотрудник)
	ЗаполнитьСтрокуСведений(Идентификатор, ТабличнаяЧасть, Сотрудник); 	
КонецПроцедуры




&НаКлиенте
Процедура ПособияНаПогребениеДокументОснованиеПриИзменении(Элемент)
	
	Сотрудник = Элементы.ПособияНаПогребение.ТекущиеДанные.Сотрудник;
	ОплатыДокументОснованиеПриИзмененииНаСервере(Элементы.ПособияНаПогребение.ТекущаяСтрока, "ПособияНаПогребение", Сотрудник);

	
КонецПроцедуры

// Контролируемые поля
&НаСервере
Функция ПолучитьКонтролируемыеПоля() Экспорт
	
	КонтролируемыеПоля = Новый Структура;
	
	// ПособияНаПогребение
	ПособияНаПогребение = Новый Массив;
	ПособияНаПогребение.Добавить("РазмерПособия");
	
	НачисленияПоля = Новый Структура;
	НачисленияПоля.Вставить("ФиксРасчет", ПособияНаПогребение);
	НачисленияПоля.Вставить("ФиксЗаполнение", Новый Массив);

	
	КонтролируемыеПоля.Вставить("ПособияНаПогребение", НачисленияПоля);
	
	Возврат КонтролируемыеПоля;
	
КонецФункции

&НаСервере
Процедура НачатьИнициализациюФормы(ДополнятьФорму, НовыйДокумент = Истина)
	
	
	УстановитьФункциональныеОпцииФормы();
	
	Если Не ФормаДополнена И ДополнятьФорму Тогда
		// Вызываем ДополнитьФорму() в режиме отложенных вызовов.
		ДополнитьФорму(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьИнициализациюФормы(ТекущийОбъект, ДополнятьФорму, НовыйДокумент = Истина)

	Если Не ФормаДополнена И ДополнятьФорму Тогда 
		// Досоздаем форму.
		ДополнитьФорму(Ложь);
		ДополнитьФорму();
	КонецЕсли;	
	
	УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(НайденыИсправленияПриОткрытии);
	
КонецПроцедуры

// Подключение универсальных механизмов.
&НаСервере
Процедура ДополнитьФорму(ОтложенноеИзменение = Неопределено, КонтролируемыеПоля = Неопределено, ОписаниеПанелиВычеты = Неопределено, ОписаниеКлючевыхРеквизитов = Неопределено, ТаблицыОчищаемыеПриИзменении = Неопределено)
	
	Если ОтложенноеИзменение = Неопределено Тогда // Выполняем процедуры, не нуждающиеся в механизме отложенного создания.	
		// Создание элементов.
		ЗарплатаКадрыРасширенный.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтаФорма, ОписаниеКлючевыхРеквизитов);
		ЗарплатаКадрыРасширенныйКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтаФорма, , ОписаниеКлючевыхРеквизитов, ТаблицыОчищаемыеПриИзменении);
	Иначе
		Если ОтложенноеИзменение Тогда
			ДобавлятьЭлементыФормы = Ложь;
			ДобавлятьРеквизитыФормы = Истина;
		Иначе
			ДобавлятьЭлементыФормы = Истина;
			ДобавлятьРеквизитыФормы = Ложь;
		КонецЕсли;
		
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормыРасширенный.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыНачислений(), , "ПособияНаПогребениеАвтоКоманды", , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
		ПрямыеВыплатыПособийСоциальногоСтрахованияФормыРасширенный.ДокументыВыполненияНачисленийДополнитьФорму(
			ЭтаФорма, ОписаниеТаблицыОплаты(), , "ОплатыАвтоКоманды", , КонтролируемыеПоля, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение, Объект.Ссылка);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияНаПогребениеОтменитьИсправление(Команда)
	СписокСотрудников = Элементы.ПособияНаПогребение.ТекущиеДанные.Сотрудник;
	ЗаполнитьДокументПособия(СписокСотрудников);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПособияНаПогребениеОтменитьВсеИсправления(Команда)
	ПособияНаПогребениеОтменитьВсеИсправления();
КонецПроцедуры

&НаСервере
Процедура ПособияНаПогребениеОтменитьВсеИсправления()
	Таблица = Объект.ПособияНаПогребение.Выгрузить();
	Таблица.Свернуть("Сотрудник");
	СписокСотрудников = Новый СписокЗначений;
	Для каждого Строка Из Таблица Цикл
		СписокСотрудников.Добавить(Строка.Сотрудник);
	КонецЦикла;	
	ЗаполнитьДокументПособия(СписокСотрудников);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОплатыОтменитьИсправление(Команда)
	СписокСотрудников = Элементы.ОплатыБольничных.ТекущиеДанные.Сотрудник;
	ЗаполнитьДокументОплаты(СписокСотрудников);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОплатыОтменитьВсеИсправления(Команда)
	ОплатыБольничныхОтменитьВсеИсправления();
КонецПроцедуры

&НаСервере
Процедура ОплатыБольничныхОтменитьВсеИсправления()
	ТаблицаСотрудников = Объект.Оплаты.Выгрузить();
	ТаблицаСотрудников.Свернуть("Сотрудник");
	СписокСотрудников = Новый СписокЗначений;
	Для каждого Строка Из ТаблицаСотрудников Цикл
		СписокСотрудников.Добавить(Строка.Сотрудник);
	КонецЦикла;	
	ЗаполнитьДокументОплаты(СписокСотрудников);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыНачислений()
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяТаблицы", "ПособияНаПогребение");
	Описание.Вставить("ОтменятьВсеИсправления", Истина);
	Описание.Вставить("ПутьКДанным", "Объект.ПособияНаПогребение"); 
	Описание.Вставить("ЭтоПерерасчеты", Ложь);
	Описание.Вставить("СодержитПолеВидРасчета", Ложь);
	Описание.Вставить("ИмяРеквизитаСотрудник", "Сотрудник");
	Возврат Описание;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеТаблицыОплаты()
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяТаблицы", "Оплаты");
	Описание.Вставить("ОтменятьВсеИсправления", Истина);
	Описание.Вставить("ПутьКДанным", "Объект.Оплаты"); 
	Описание.Вставить("ЭтоПерерасчеты", Ложь);
	Описание.Вставить("СодержитПолеВидРасчета", Ложь);
	Описание.Вставить("ИмяРеквизитаСотрудник", "Сотрудник");
	Возврат Описание;
	
КонецФункции


&НаСервере
Процедура УстановитьДоступностьКомандыЗаполнитьССохранениемИсправлений(ЕстьИсправленныеСтроки = Неопределено)
	
	Если ЕстьИсправленныеСтроки = Неопределено Тогда 
		ЕстьИсправленныеСтроки = ЕстьИсправленныеСтрокиНаСервере();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
		"ЗаполнитьССохранениемИсправлений", "Доступность", ЕстьИсправленныеСтроки);
		
КонецПроцедуры

Процедура УстановитьФункциональныеОпцииФормы()
	ПараметрыФО = Новый Структура("Организация, Период", Объект.Организация, НачалоДня(Объект.Месяц));
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
КонецПроцедуры

&НаКлиенте
Функция ЕстьИсправленныеСтроки() Экспорт
	Возврат ЕстьИсправленныеСтрокиНаСервере();
КонецФункции

&НаСервере
Функция ЕстьИсправленныеСтрокиНаСервере()
	Возврат РасчетЗарплатыРасширенныйФормы.ЕстьИсправленныеСтроки(ЭтаФорма);
КонецФункции


//&НаКлиенте
//Процедура ПособияНаПогребениеПриАктивизацииСтроки(Элемент)
//	ПрямыеВыплатыПособийСоциальногоСтрахованияКлиент.ДокументыВыполненияНачисленийПриАктивацииСтроки(ЭтаФорма, "ПособияНаПогребение", Истина);
//КонецПроцедуры

//&НаКлиенте
//Процедура ПособияНаПогребениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
//	
//	Если ОтменаРедактирования Тогда
//		Возврат;
//	КонецЕсли;
//	
//	РасчетЗарплатыКлиент.СтрокаРасчетаПриОкончанииРедактирования(ЭтаФорма, ОписаниеТаблицыНачислений(),,Ложь);

//КонецПроцедуры

&НаКлиенте
Процедура ОплатыДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураДанных = Новый Структура("ФСС, Сотрудник, Месяц", Объект.ФондСоциальногоСтрахования, Элементы.ОплатыБольничных.ТекущиеДанные.Сотрудник, Объект.Месяц);  
	
	МассивПараметров = Новый Структура();
	МассивПараметров.Вставить("ВыборИзЗаявленияВФСС", Истина);
	МассивПараметров.Вставить("ФСС", СтруктураДанных);
	ОткрытьФорму("Документ.БольничныйЛист.ФормаВыбора",МассивПараметров,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФондСоциальногоСтрахованияПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПособияНаПогребениеСуммаПособияПриИзменении(Элемент)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "РазмерПособия", ЭтотОбъект.ТекущийЭлемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОплатыБольничныхКоличествоДнейВсегоФССПриИзменении(Элемент)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "КоличествоДнейВсегоФСС", ЭтотОбъект.ТекущийЭлемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОплатыБольничныхКоличествоДнейВсегоПриИзменении(Элемент)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "КоличествоДнейВсего", ЭтотОбъект.ТекущийЭлемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОплатыБольничныхСуммаПособияВсегоПриИзменении(Элемент)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СуммаПособияВсего", ЭтотОбъект.ТекущийЭлемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОплатыБольничныхСуммаПособияВсегоФССПриИзменении(Элемент)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СуммаПособияВсегоФСС", ЭтотОбъект.ТекущийЭлемент.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОплатыБольничныхСуммаЛьготыЧернобыльцамПриИзменении(Элемент)
	ФиксацияВторичныхДанныхВДокументахКлиентСервер.ЗафиксироватьИзменениеРеквизита(ЭтотОбъект, "СуммаЛьготыЧернобыльцы", ЭтотОбъект.ТекущийЭлемент.ТекущаяСтрока);
КонецПроцедуры
//	

#КонецОбласти


#Область Выгрузка

&НаКлиенте
Процедура ВыгрузкаВFredo(Команда)
	
	Если Не РегламентированнаяОтчетностьКлиент.ПодключитьМенеджерЗвит1С(Истина) Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		Если Объект.Ссылка.Пустая() Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные еще не записаны."
					 "Выполнение действия ""%1"" возможно только после записи данных."
					 "Данные будут записаны.';uk='Дані ще не записані."
				 	 "Виконання дії ""%1"" можливо тільки після запису даних."
					 "Дані будуть записані.'"),
					 НСтр("ru='выгрузки';uk= 'вивантаження'"));
				
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВыгрузку", ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
	Иначе
		ВыполнитьВыгрузку(КодВозвратаДиалога.ОК, Неопределено);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // запись не удалась, сообщения о причинах выводит платформа
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПодключениеКЗвит1С = глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Объект.Организация);
	Если Не ЕстьПодключениеКЗвит1С Тогда
		ОписаниеОшибки = НСтр("ru='<Ошибка взаимодействия с ""FREDO Звіт"">';uk='<Помилка взаємодії з ""FREDO Звіт"">'");
		ВызватьИсключение ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = ПолучитьВыборкуШапка();
	ВыборкаТЧ = ПолучитьВыборкуТЧ();
	
	глКомпонентаЗвит1С.Bring1CToFront();
	
	ВерсияОтчета = "01";
	
	// Создаем основной документ C11001..
	ТипПериода	   = 0; 
	НомерВПериоде  = Месяц(Объект.Месяц);
	Год			   = Год(Объект.Месяц);
	ИмяСхемыЗвит1С = "C11001"+ВерсияОтчета;
	
	ИдГоловнойОтчет = СтрЗаменить("" + Объект.Ссылка.УникальныйИдентификатор(), "-", "");
	Попытка
		ГоловнойОтчет = глКомпонентаЗвит1С.OpenCreateReport(ВыборкаШапка.КодПоЕДРПОУ, ИмяСхемыЗвит1С, ТипПериода, НомерВПериоде, Год, ИдГоловнойОтчет);
	Исключение
	    Сообщить("Ошибка создания отчета " + ИмяСхемыЗвит1С + ": " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Сообщить("Формирование отчета прервано!", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;

	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_NAME",    ВыборкаШапка.НаименованиеПолное);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_EDRPOU",  ВыборкаШапка.КодПоЕДРПОУ);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "CODE_FSSU",    ВыборкаШапка.НомерФССУ);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_ADR", 	ВыборкаШапка.АдресОрганизации);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_TELORG", 	ВыборкаШапка.ТелефонСоставителя);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_FSSUACC", ВыборкаШапка.НомерСчета);	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_FSSUBANK",ВыборкаШапка.НаименованиеБанка);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_FSSUMFO", ВыборкаШапка.МФОБанка);
	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A1_3",  ВыборкаТЧ.Итоги11Б_Дни);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A1_4",  ВыборкаТЧ.Итоги11Б_Сумма);
	Если ВыборкаТЧ.Итоги11Б_Сумма > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N16", 1);
	КонецЕсли;
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A11_3",  ВыборкаТЧ.Итоги11Б_ДниЛьготы);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A11_4",  ВыборкаТЧ.Итоги11Б_СуммаЛьготы);
	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A2_3",  ВыборкаТЧ.Итоги11Д_Дни);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A2_4",  ВыборкаТЧ.Итоги11Д_Сумма);
	Если ВыборкаТЧ.Итоги11Д_Сумма > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N17", 1);
	КонецЕсли;
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A21_3",  ВыборкаТЧ.Итоги11Д_ДниЛьготы);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A21_4",  ВыборкаТЧ.Итоги11Д_СуммаЛьготы);

	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A3_3",  ВыборкаТЧ.Итоги12_КоличествоЛиц);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A3_4",  ВыборкаТЧ.Итоги12_Сумма);
	Если ВыборкаТЧ.Итоги12_Сумма > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N18", 1);
	КонецЕсли;

	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A4_3",  ВыборкаТЧ.Итоги13_Дни);
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A4_4",  ВыборкаТЧ.Итоги13_Сумма);
	Если ВыборкаТЧ.Итоги13_Сумма > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N19", 1);
	КонецЕсли;
	
	//Итог
	СуммаИтог = ВыборкаТЧ.Итоги11Б_Сумма + ВыборкаТЧ.Итоги11Д_Сумма + ВыборкаТЧ.Итоги12_Сумма + ВыборкаТЧ.Итоги13_Сумма; 
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "A7_4",  СуммаИтог);

	// подписи приложений
	Если ВыборкаТЧ.Итоги11Б_Сумма > 0 ИЛИ ВыборкаТЧ.Итоги11Д_Сумма > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N1", ВыборкаШапка.ДолжностьСоставителя);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N2", ВыборкаШапка.Ответственный);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N3", ВыборкаШапка.ТелефонСоставителя);	
	КонецЕсли;	
	Если ВыборкаТЧ.Итоги12_Сумма > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N4", ВыборкаШапка.ДолжностьСоставителя);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N5", ВыборкаШапка.Ответственный);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N6", ВыборкаШапка.ТелефонСоставителя);	
	КонецЕсли;	
	Если ВыборкаТЧ.Итоги13_Сумма > 0 Тогда
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N7", ВыборкаШапка.ДолжностьСоставителя);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N8", ВыборкаШапка.Ответственный);	
		ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "N9", ВыборкаШапка.ТелефонСоставителя);	
	КонецЕсли;
	
	// Приложение 1.1
	НомерСтроки = 1;
	Для каждого Выборка ИЗ ВыборкаТЧ.ТЧ11 Цикл
		
		Если ЗначениеЗаполнено(Выборка.РезультатФСС) Тогда
				
			ДобавитьСтрокуВОтчетЗвит1С(ГоловнойОтчет, "TAB1");
				
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A1", НомерСтроки);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A2", Выборка.Фамилия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A3", Выборка.Имя);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A4", Выборка.Отчество);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A5", Выборка.КодПоДРФО);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A6", Выборка.ВидЗанятости);
			СерияНомер = ПолучитьСериюНомер(Выборка);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A7", СерияНомер.Серия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A8", СерияНомер.Номер);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A9", Выборка.ЭтоПродолжениеБольничного);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A10", Выборка.ПричинаНетрудоспособности);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A11", Выборка.ДатаНачала);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A12", Выборка.ДатаОкончания);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A13", Выборка.КоличествоДней);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A14", Выборка.КоличествоДнейФСС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A15", Выборка.Результат);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A16", Выборка.РезультатФСС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A17", Выборка.КоличествоДнейЧАЕС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A18", Выборка.РезультатЧАЕС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A19", "");
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A21", Выборка.СтажВМесяцах);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB1", "TAB1_A22", Выборка.СтажЗа12МесяцевВМесяцах);
				
			НомерСтроки = НомерСтроки +1;
				
		КонецЕсли;
	КонецЦикла;

	// Приложение 1.2
	НомерСтроки = 1;
	Для каждого Выборка ИЗ ВыборкаТЧ.ТЧ12 Цикл
		
		Если ЗначениеЗаполнено(Выборка.Сумма) Тогда
				
			ДобавитьСтрокуВОтчетЗвит1С(ГоловнойОтчет, "TAB2");
				
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A1", НомерСтроки);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A1_1", 1); //получатель физ.лицо
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A2", Выборка.Фамилия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A3", Выборка.Имя);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A4", Выборка.Отчество);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A5", Выборка.КодПоДРФО);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A6", Выборка.ФамилияУмершего);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A7", Выборка.ИмяУмершего);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A8", Выборка.ОтчествоУмершего);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A9", Выборка.СвидетельствоСерия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A10", Выборка.СвидетельствоНомер);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB2", "TAB2_A11", Выборка.Сумма);
				
			НомерСтроки = НомерСтроки +1;
				
		КонецЕсли;
	КонецЦикла;
	
	// Приложение 1.3
	НомерСтроки = 1;
	Для каждого Выборка ИЗ ВыборкаТЧ.ТЧ13 Цикл
		
		Если ЗначениеЗаполнено(Выборка.РезультатФСС) Тогда
				
			ДобавитьСтрокуВОтчетЗвит1С(ГоловнойОтчет, "TAB3");
				
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A1", НомерСтроки);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A2", Выборка.Фамилия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A3", Выборка.Имя);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A4", Выборка.Отчество);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A5", Выборка.КодПоДРФО);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A6", Выборка.ВидЗанятости);
			СерияНомер = ПолучитьСериюНомер(Выборка);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A9", СерияНомер.Серия);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A10", СерияНомер.Номер);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A11", Выборка.ПричинаНетрудоспособности);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A12", Выборка.ДатаНачала);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A13", Выборка.ДатаОкончания);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A14", Выборка.КоличествоДнейФСС);
			ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, "TAB3", "TAB3_A15", Выборка.РезультатФСС);
				
			НомерСтроки = НомерСтроки +1;
				
		КонецЕсли;
	КонецЦикла;

	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "REP_DATE", Объект.Дата);	
    ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_RUK", ВыборкаШапка.Руководитель);	
	ДобавитьПоказательВОтчетЗвит1С(ГоловнойОтчет, , "FIRM_BUH", ВыборкаШапка.Бухгалтер);	
	
	глКомпонентаЗвит1С.SaveReportEx(ГоловнойОтчет, 1);
	
	ПоказатьПредупреждение(,НСтр("ru='Заявление успешно выгружено во FREDO!';uk='Заяву успішно вивантажено у FREDO!'"));
	
	глКомпонентаЗвит1С.BringZvitToFront();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказательВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С = "", ИмяЗвит1С, Значение, ЗаписыватьПустое = Ложь)
	
	Если НЕ ЗаписыватьПустое И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Отчет.SetValue(ИмяТаблицыЗвит1С, ИмяЗвит1С, Значение); 
	Исключение
		Если глМенеджерЗвит1С.ФлагОтладки Тогда
			Сообщить("FREDO. Ошибка установки показателя (схема """+Отчет.CharCode+?(ПустаяСтрока(ИмяТаблицыЗвит1С),"",""", имя таблицы """+ИмяТаблицыЗвит1С)+""", поле """+ИмяЗвит1С+""", тип значения """+ТипЗнч(Значение)+""", значение """+ Значение+""")", СтатусСообщения.Внимание);
		КонецЕсли;
	КонецПопытки;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВОтчетЗвит1С(Отчет, ИмяТаблицыЗвит1С)

	Отчет.NewRow(ИмяТаблицыЗвит1С);

КонецПроцедуры

&НаСервере
Функция ПолучитьВыборкуШапка()
	
	Шапка = Новый Структура;
	Шапка.Вставить("Организация", Объект.Организация);
	Шапка.Вставить("НаименованиеПолное", Объект.Организация.НаименованиеПолное);
	Шапка.Вставить("КодПоЕДРПОУ", Объект.КодПоЕДРПОУ);
	Шапка.Вставить("НомерФССУ", Объект.НомерФССУ);
	Шапка.Вставить("НаименованиеБанка", Объект.НаименованиеБанка);
	Шапка.Вставить("НомерСчета", Объект.НомерСчета);
	Шапка.Вставить("МФОБанка", Объект.МФОБанка);
	Шапка.Вставить("ДолжностьСоставителя", Объект.ДолжностьСоставителя.Наименование);
	
	Если Не ПустаяСтрока(Объект.АдресОрганизации) Тогда
		 СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(
		 Объект.АдресОрганизации,
		 ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
		 Адрес = "";
		 УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, Адрес);
		 Шапка.Вставить("АдресОрганизации", Адрес);
	 Иначе
		 Шапка.Вставить("АдресОрганизации", НСтр("ru='<Не заполнен>';uk='<Не заповнений>'"));
	 КонецЕсли;
	 
	 Если Не ПустаяСтрока(Объект.ТелефонСоставителя) Тогда
		СтруктураТелефона = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(
		Объект.ТелефонСоставителя,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
		Телефон = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(СтруктураТелефона.КодСтраны, 
																					  СтруктураТелефона.КодГорода, 
																					  СтруктураТелефона.НомерТелефона, 
																					  СтруктураТелефона.Добавочный, 
																					  СтруктураТелефона.Комментарий);
		Шапка.Вставить("ТелефонСоставителя", ФормированиеПечатныхФорм.ПолучитьТелефонДляНалоговойНакладной(Телефон));																			  
	Иначе
		Шапка.Вставить("ТелефонСоставителя", НСтр("ru='<Не заполнен>';uk='<Не заповнений>'"));
	КонецЕсли;	
	
	СписокФизическихЛиц = Новый СписокЗначений;
	СписокФизическихЛиц.Добавить(Объект.Руководитель);
	СписокФизическихЛиц.Добавить(Объект.ГлавныйБухгалтер);
	СписокФизическихЛиц.Добавить(Объект.ЗаявлениеСоставил);
	ТаблицаКадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
		Истина, 
		СписокФизическихЛиц, 
		"Фамилия, Имя, Отчество,", 
		Объект.Дата);
	Руководитель = ТаблицаКадровыеДанныеФизическихЛиц.Найти(Объект.Руководитель,"ФизиЧескоеЛицо");
	Если Руководитель <> Неопределено Тогда
		Шапка.Вставить("Руководитель", Руководитель.Фамилия + " " + Руководитель.Имя + " " + Руководитель.Отчество);
	Иначе
		Шапка.Вставить("Руководитель",  "");	
	КонецЕсли;
	Бухгалтер = ТаблицаКадровыеДанныеФизическихЛиц.Найти(Объект.ГлавныйБухгалтер,"ФизиЧескоеЛицо");
	Если Бухгалтер <> Неопределено Тогда
		Шапка.Вставить("Бухгалтер",  Бухгалтер.Фамилия + " " + Бухгалтер.Имя + " " + Бухгалтер.Отчество);
	Иначе
		Шапка.Вставить("Бухгалтер",  "");
	КонецЕсли;
	ЗаявлениеСоставил = ТаблицаКадровыеДанныеФизическихЛиц.Найти(Объект.ЗаявлениеСоставил,"ФизиЧескоеЛицо");
	Если ЗаявлениеСоставил <> Неопределено Тогда
		Шапка.Вставить("Ответственный", ЗаявлениеСоставил.Фамилия + " " + ЗаявлениеСоставил.Имя + " " + ЗаявлениеСоставил.Отчество);
	Иначе
		Шапка.Вставить("Ответственный",  "");
	КонецЕсли;

	
	
	

	
	Возврат Шапка;
	
КонецФункции	

&НаСервере
Функция ПолучитьВыборкуТЧ()
	
	ВыборкаТЧ = Новый Структура;
	РезультатыПоТЧ = Документы.ЗаявлениеРасчетВФСС.СформироватьЗапросДляПечатиПриложений2018(Объект.Ссылка, Истина);
	
	ВыборкаТЧ.Вставить("Итоги11Б_Дни", 0);
	ВыборкаТЧ.Вставить("Итоги11Б_Сумма", 0);
	ВыборкаТЧ.Вставить("Итоги11Б_СуммаЛьготы", 0);
	ВыборкаТЧ.Вставить("Итоги11Б_ДниЛьготы", 0);
	ВыборкаТЧ.Вставить("Итоги11Д_Дни", 0);
	ВыборкаТЧ.Вставить("Итоги11Д_Сумма", 0);
	ВыборкаТЧ.Вставить("Итоги11Д_СуммаЛьготы", 0);
	ВыборкаТЧ.Вставить("Итоги11Д_ДниЛьготы", 0);
	ВыборкаТЧ.Вставить("Итоги12_КоличествоЛиц", 0);
	ВыборкаТЧ.Вставить("Итоги12_Сумма", 0);
	ВыборкаТЧ.Вставить("Итоги13_Дни", 0);
	ВыборкаТЧ.Вставить("Итоги13_Сумма", 0);

	
	Для Каждого СтрокаТЧ ИЗ РезультатыПоТЧ.Итоги11Б Цикл 
		Если СтрокаТЧ.Сумма = NULL Тогда
			Продолжить;
		КонецЕсли;	
		ВыборкаТЧ.Итоги11Б_Дни = СтрокаТЧ.Дни;	
		ВыборкаТЧ.Итоги11Б_Сумма = СтрокаТЧ.Сумма;	
		ВыборкаТЧ.Итоги11Б_СуммаЛьготы = СтрокаТЧ.СуммаЛьготы;	
		ВыборкаТЧ.Итоги11Б_ДниЛьготы = СтрокаТЧ.ДниЛьготы;	
	КонецЦикла;
	Для Каждого СтрокаТЧ ИЗ РезультатыПоТЧ.Итоги11Д Цикл 
		Если СтрокаТЧ.Сумма = NULL Тогда
			Продолжить;
		КонецЕсли;	
		ВыборкаТЧ.Итоги11Д_Дни = СтрокаТЧ.Дни;	
		ВыборкаТЧ.Итоги11Д_Сумма = СтрокаТЧ.Сумма;	
		ВыборкаТЧ.Итоги11Д_СуммаЛьготы = СтрокаТЧ.СуммаЛьготы;	
		ВыборкаТЧ.Итоги11Д_ДниЛьготы = СтрокаТЧ.ДниЛьготы;
	КонецЦикла;	
	Для Каждого СтрокаТЧ ИЗ РезультатыПоТЧ.Итоги12 Цикл 
		Если СтрокаТЧ.Сумма = NULL Тогда
			Продолжить;
		КонецЕсли;	
		ВыборкаТЧ.Итоги12_КоличествоЛиц = СтрокаТЧ.КоличествоЛиц;	
		ВыборкаТЧ.Итоги12_Сумма = СтрокаТЧ.Сумма;	
	КонецЦикла;	
	Для Каждого СтрокаТЧ ИЗ РезультатыПоТЧ.Итоги13 Цикл 
		Если СтрокаТЧ.Сумма = NULL Тогда
			Продолжить;
		КонецЕсли;	
		ВыборкаТЧ.Итоги13_Дни = СтрокаТЧ.Дни;	
		ВыборкаТЧ.Итоги13_Сумма = СтрокаТЧ.Сумма;	
	КонецЦикла;	

	ВыборкаТЧ.Вставить("ТЧ11", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыПоТЧ.ТЧ11));
	ВыборкаТЧ.Вставить("ТЧ12", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыПоТЧ.ТЧ12));
	ВыборкаТЧ.Вставить("ТЧ13", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатыПоТЧ.ТЧ13));
	
	Возврат ВыборкаТЧ;
	
КонецФункции	

&НаСервере
Функция ПолучитьСериюНомер(Выборка)
	
	Возврат УчетПособийСоциальногоСтрахования.РазложитьНомерБольничного(Выборка.НомерБольничного);
	
КонецФункции	


#КонецОбласти




