&НаКлиенте
Процедура ВыбратьСоставКомиссии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ОткрытьФорму("РегистрСведений.СоставКомиссий.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ДополнительныеОтчетыИОбработки
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПодменюПечать);
	// Конец СтандартныеПодсистемы.Печать

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// ВводНаОсновании
	ВводНаОсновании.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюСоздатьНаОсновании);
	// Конец ВводНаОсновании

	// МенюОтчеты
	МенюОтчеты.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПодменюОтчеты);
	// Конец МенюОтчеты

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.НематериальныеАктивы.Форма.ФормаВыбора" Тогда
		Если ВыбранноеЗначение.Количество() > 0 Тогда
			Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
				Объект.НМА.Добавить().НематериальныйАктив = ЭлементМассива;
				
			КонецЦикла;
			ЗаполнитьРеквизитыТЧ();
		КонецЕсли;
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.СоставКомиссий.Форма.ФормаВыбора" Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.НМА.Количество() > 0 Тогда
		ЗаполнитьРеквизитыТЧ();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если Объект.НМА.Количество() > 0 Тогда
		ЗаполнитьРеквизитыТЧ();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОС




&НаКлиенте
Процедура НМАПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование = Истина Тогда
		СтрокаТЧ = Элементы.НМА.ТекущиеДанные;
		СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
		СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;
	КонецЕсли;

КонецПроцедуры





&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)

	СтрокаТЧ = Элементы.НМА.ТекущиеДанные;
	СтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	СтрокаТЧ.НаличиеПоДаннымУчета   = Ложь;

	НематериальныйАктив = СтрокаТЧ.НематериальныйАктив;
	Если НЕ ЗначениеЗаполнено(НематериальныйАктив) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
		СтрокаТЧ.МОЛ = Неопределено;
	Иначе
		ДополнительныеПоля = ПолучитьДополнительныеПоляНМА(НематериальныйАктив, Объект.Организация, Объект.Дата);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДополнительныеПоля);
	КонецЕсли;

КонецПроцедуры






&НаКлиенте
Процедура НМАНаличиеФактическоеПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.НМА.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.НаличиеФактическое Тогда
		Если ТекущаяСтрокаТЧ.СтоимостьФактическая = 0 Тогда
			ТекущаяСтрокаТЧ.СтоимостьФактическая = ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета;
		КонецЕсли;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьФактическая = 0;
	КонецЕсли;

	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ);

КонецПроцедуры






&НаКлиенте
Процедура НМАНаличиеПоДаннымУчетаПриИзменении(Элемент)

	ТекущаяСтрокаТЧ = Элементы.НМА.ТекущиеДанные;

	Если ТекущаяСтрокаТЧ.НаличиеПоДаннымУчета Тогда
		Если ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = 0 Тогда
			ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = ТекущаяСтрокаТЧ.СтоимостьФактическая;
		КонецЕсли;
	Иначе
		ТекущаяСтрокаТЧ.СтоимостьПоДаннымУчета = 0;
	КонецЕсли;

	РассчитатьВычисляемыеПоляПоСтроке(ТекущаяСтрокаТЧ);

КонецПроцедуры




&НаКлиенте
Процедура НМАСтоимостьФактическаяПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.НМА.ТекущиеДанные);

КонецПроцедуры





&НаКлиенте
Процедура НМАСтоимостьПоДаннымУчетаПриИзменении(Элемент)

	РассчитатьВычисляемыеПоляПоСтроке(Элементы.НМА.ТекущиеДанные);

КонецПроцедуры





&НаКлиенте
Процедура НМАПриИзменении(Элемент)

	Если Элементы.НМА.ТекущиеДанные <> Неопределено Тогда
		РассчитатьВычисляемыеПоляПоСтроке(Элементы.НМА.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
























 

#Область ОбработчикиКомандФормы

// ВводНаОсновании
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьНаОсновании(Команда)
	
	ВводНаОснованииКлиент.ВыполнитьПодключаемуюКомандуСоздатьНаОсновании(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ВводНаОсновании

// МенюОтчеты
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуОтчет(Команда)
	
	МенюОтчетыКлиент.ВыполнитьПодключаемуюКомандуОтчет(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец МенюОтчеты


&НаКлиенте
Процедура ПодборНМА(Команда)
	
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.ВидыСостоянийНМА.ПринятКУчету"));
	СписокСостояний.Добавить(ПредопределенноеЗначение("Перечисление.ВидыСостоянийНМА.НеПринятКУчету"));
	
	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("БУСостояние", СписокСостояний);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Контекст", "БУ, МФУ");
	ПараметрыФормы.Вставить("ДатаСведений", Объект.Дата);
	ПараметрыФормы.Вставить("ТекущийРегистратор", Объект.Ссылка);
	//ПараметрыФормы.Вставить("Отбор", ПараметрыОтбор);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.НематериальныеАктивы.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ПодборФизическихЛиц(Команда)

	ПараметрыФормы = Новый Структура("РежимВыбора, МножественныйВыбор, ЗакрыватьПриВыборе", Истина, Ложь, Ложь);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элементы.ИнвентаризационнаяКомиссия, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	ПродолжитьЗаполнениеИзОстатков("ЗаполнитьПоОстаткам");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеУчета(Команда)
	
	ПродолжитьЗаполнениеИзОстатков("ЗаполнитьДанныеУчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеДанные(Команда)
	
	ПродолжитьЗаполнениеИзОстатков("ЗаполнитьФактическиеДанные");
	
КонецПроцедуры

#Область СтандартныеПодсистемы_Печать

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	Если НЕ ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьНазначаемуюКомандуНаКлиенте(ЭтаФорма, Команда.Имя) Тогда
		РезультатВыполнения = Неопределено;
		ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(Команда.Имя, РезультатВыполнения);
		ДополнительныеОтчетыИОбработкиКлиент.ПоказатьРезультатВыполненияКоманды(ЭтаФорма, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнительныеОтчетыИОбработкиВыполнитьНазначаемуюКомандуНаСервере(ИмяЭлемента, РезультатВыполнения)
	
	ДополнительныеОтчетыИОбработки.ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЗаполнитьРеквизитыТЧ();
	
	Для каждого Строка Из Объект.НМА Цикл
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
	КонецЦикла;
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьТаблицуМОЛНМА(Знач ТаблицаНМА, Знач Организация, Знач Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеНМАБухгалтерскийУчет.НематериальныйАктив КАК НематериальныйАктив,
	|	МестонахождениеНМАБухгалтерскийУчет.МОЛ
	|ПОМЕСТИТЬ ТаблицаМОЛ
	|ИЗ
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК МестонахождениеНМАБухгалтерскийУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ЕСТЬNULL(ТаблицаМОЛ.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК МОЛ
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаМОЛ КАК ТаблицаМОЛ
	|		ПО ТаблицаНМА.НематериальныйАктив = ТаблицаМОЛ.НематериальныйАктив
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции



&НаСервереБезКонтекста
Функция ПолучитьТаблицуСчетУчетаНМА(Знач ТаблицаНМА, Знач Организация, Знач Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаНМА", ТаблицаНМА);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМА.СчетУчета
	|ПОМЕСТИТЬ ТаблицаСчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СчетаБухгалтерскогоУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ЕСТЬNULL(ТаблицаСчетУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТаблицаСчетУчета КАК ТаблицаСчетУчета
	|	ПО
	|		ТаблицаНМА.НематериальныйАктив = ТаблицаСчетУчета.НематериальныйАктив
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыТЧ()
	
	ТаблицаНМА = Объект.НМА.Выгрузить();
	ТаблицаМОЛ = ПолучитьТаблицуМОЛНМА(ТаблицаНМА, Объект.Организация, Объект.Дата);
	ТаблицаНМА.ЗагрузитьКолонку(ТаблицаМОЛ.ВыгрузитьКолонку("МОЛ"), "МОЛ");
	ТаблицаСчетУчета = ПолучитьТаблицуСчетУчетаНМА(ТаблицаНМА, Объект.Организация, Объект.Дата);
	ТаблицаНМА.ЗагрузитьКолонку(ТаблицаСчетУчета.ВыгрузитьКолонку("СчетУчета"), "СчетУчета");
	Объект.НМА.Загрузить(ТаблицаНМА);
		
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьМОЛНМА(Знач НематериальныйАктив, Знач Организация, Знач Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(МестонахождениеНМАБухгалтерскийУчет.МОЛ, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК МОЛ
	|ИЗ
	|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив = &НематериальныйАктив) КАК МестонахождениеНМАБухгалтерскийУчет";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.МОЛ;
	КонецЕсли;
	
КонецФункции




&НаСервереБезКонтекста
Функция ПолучитьСчетУчетаНМА(Знач НематериальныйАктив, Знач Организация, Знач Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СчетаБухгалтерскогоУчетаНМА.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив = &НематериальныйАктив) КАК СчетаБухгалтерскогоУчетаНМА";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СчетУчета;
	КонецЕсли;

КонецФункции






&НаСервереБезКонтекста
Функция ПолучитьДополнительныеПоляНМА(Знач НематериальныйАктив, Знач Организация, Знач Дата)

	Результат = Новый Структура;
	Результат.Вставить("МОЛ", ПолучитьМОЛНМА(НематериальныйАктив, Организация, Дата));
	Результат.Вставить("СчетУчета", ПолучитьСчетУчетаНМА(НематериальныйАктив, Организация, Дата));

	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(Строка)

	РазницаПоНаличию   = Число(Строка.НаличиеФактическое) - Число(Строка.НаличиеПоДаннымУчета);
	РазницаПоСтоимости = Строка.СтоимостьФактическая - Строка.СтоимостьПоДаннымУчета;
	

	Строка.ИзлишекКоличество = ?(РазницаПоНаличию > 0, РазницаПоНаличию, 0);
	Строка.НедостачаКоличество = ?(РазницаПоНаличию < 0, -РазницаПоНаличию, 0);
	Строка.ИзлишекСумма = ?(РазницаПоСтоимости > 0, РазницаПоСтоимости, 0);
	Строка.НедостачаСумма = ?(РазницаПоСтоимости < 0, -РазницаПоСтоимости, "");

КонецПроцедуры


&НаСервере
Функция ОстаткиНМА()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(	
		"ВЫБРАТЬ
		|	МестонахождениеНМАБухгалтерскийУчет.НематериальныйАктив КАК НематериальныйАктив,
		|	МестонахождениеНМАБухгалтерскийУчет.Организация КАК Организация,
		|	МестонахождениеНМАБухгалтерскийУчет.Местонахождение КАК ПодразделениеОрганизации
		|ПОМЕСТИТЬ МестонахождениеНМА
		|ИЗ
		|	РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
		|			&ДатаОстатков,
		|			Организация = &Организация
		|				И МОЛ = &МОЛ
		|				И Местонахождение = &Подразделение) КАК МестонахождениеНМАБухгалтерскийУчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив,
		|	Организация,
		|	ПодразделениеОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МестонахождениеНМА.НематериальныйАктив КАК НематериальныйАктив,
		|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
		|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
		|ПОМЕСТИТЬ ВтНематериальныеАктивы
		|ИЗ
		|	МестонахождениеНМА КАК МестонахождениеНМА
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
		|				&ДатаОстатков,
		|				НематериальныйАктив В
		|					(ВЫБРАТЬ
		|						МестонахождениеНМА.НематериальныйАктив
		|					ИЗ
		|						МестонахождениеНМА)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
		|		ПО МестонахождениеНМА.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Субконто1 КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив,
		|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.СуммаОстатокДт, 0)) КАК ВосстановительнаяСтоимость
		|ПОМЕСТИТЬ ВтХозрасчетныйОстатки_ВосстановительнаяСтоимость
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатков,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВтНематериальныеАктивы.СчетУчета
		|				ИЗ
		|					ВтНематериальныеАктивы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
		|			Организация = &Организация
		|				И (Подразделение, Субконто1) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						МестонахождениеНМА.ПодразделениеОрганизации,
		|						МестонахождениеНМА.НематериальныйАктив
		|					ИЗ
		|						МестонахождениеНМА)) КАК ХозрасчетныйОстатки_ВосстановительнаяСтоимость
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки_ВосстановительнаяСтоимость.Субконто1 КАК Справочник.НематериальныеАктивы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки_НакопленнаяАмортизация.Субконто1 КАК Справочник.НематериальныеАктивы) КАК НематериальныйАктив,
		|	СУММА(ЕСТЬNULL(ХозрасчетныйОстатки_НакопленнаяАмортизация.СуммаОстатокКт, 0)) КАК НакопленнаяАмортизация
		|ПОМЕСТИТЬ ВтХозрасчетныйОстатки_НакопленнаяАмортизация
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатков,
		|			Счет В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ВтНематериальныеАктивы.СчетНачисленияАмортизации
		|				ИЗ
		|					ВтНематериальныеАктивы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
		|			Организация = &Организация
		|				И (Подразделение, Субконто1) В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						МестонахождениеНМА.ПодразделениеОрганизации,
		|						МестонахождениеНМА.НематериальныйАктив
		|					ИЗ
		|						МестонахождениеНМА)) КАК ХозрасчетныйОстатки_НакопленнаяАмортизация
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки_НакопленнаяАмортизация.Субконто1 КАК Справочник.НематериальныеАктивы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтХозрасчетныйОстатки_ВосстановительнаяСтоимость.НематериальныйАктив,
		|	ВтХозрасчетныйОстатки_ВосстановительнаяСтоимость.ВосстановительнаяСтоимость,
		|	ЕСТЬNULL(ВтХозрасчетныйОстатки_НакопленнаяАмортизация.НакопленнаяАмортизация, 0) КАК НакопленнаяАмортизация
		|ИЗ
		|	ВтХозрасчетныйОстатки_ВосстановительнаяСтоимость КАК ВтХозрасчетныйОстатки_ВосстановительнаяСтоимость
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтХозрасчетныйОстатки_НакопленнаяАмортизация КАК ВтХозрасчетныйОстатки_НакопленнаяАмортизация
		|		ПО ВтХозрасчетныйОстатки_ВосстановительнаяСтоимость.НематериальныйАктив = ВтХозрасчетныйОстатки_НакопленнаяАмортизация.НематериальныйАктив");
	
	Запрос.УстановитьПараметр("ДатаОстатков",	Объект.Дата);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение",	Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("МОЛ",			Объект.МОЛ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()

	Объект.НМА.Очистить();

	ТаблицаНМА = ОстаткиНМА(); 

	Для каждого СтрокаНМА Из ТаблицаНМА Цикл
		НоваяСтрока = Объект.НМА.Добавить();
		НоваяСтрока.НематериальныйАктив 	= СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.НакопленнаяАмортизация  = СтрокаНМА.НакопленнаяАмортизация;
		НоваяСтрока.СтоимостьПоДаннымУчета  = СтрокаНМА.ВосстановительнаяСтоимость;
		НоваяСтрока.НаличиеПоДаннымУчета    = Истина;
		НоваяСтрока.СтоимостьФактическая    = 0;
		НоваяСтрока.НаличиеФактическое      = Ложь;
		РассчитатьВычисляемыеПоляПоСтроке(НоваяСтрока);
	КонецЦикла;

	ЗаполнитьРеквизитыТЧ();
	 
	
КонецПроцедуры


	


	
	

	 
	

&НаКлиенте
Процедура ПродолжитьЗаполнениеИзОстатков(Действия)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Местонахождение НМА';uk='Місцезнаходження НМА'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ПодразделениеОрганизации");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.МОЛ) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='МОЛ';uk='МВО'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.МОЛ");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны.
        |Продолжить?'
        |;uk='При заповненні існуючі дані будуть перераховані.
        |Продовжити?'");
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОбработкаОтветаНаВопрос", ЭтаФорма, Новый Структура(Действия)),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопрос(Результат, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Или ДополнительныеПараметры=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЗаполнитьПоОстаткам") Тогда
		ЗаполнитьПоОстаткамСервер();
	КонецЕсли;
	
		
КонецПроцедуры


#КонецОбласти
