#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Метаданные.ПланыСчетов.Найти("Хозрасчетный") <> Неопределено Тогда
		Элементы.КорреспондирующийСчет.Видимость = Ложь;
	КонецЕсли;
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов);
	Элементы.ФормаИзменитьВыделенные.Видимость = МожноРедактировать;
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	ФормироватьФинансовыйРезультат = ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	
	//++ НЕ УТ
	Если Параметры.ПараметрыФункциональныхОпций.Свойство("Организация") И Параметры.ПараметрыФункциональныхОпций.Свойство("Период") Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Параметры.ПараметрыФункциональныхОпций);
	Иначе
		ПараметрыФО = Новый Структура("Период, Организация", Дата(1,1,1), Справочники.Организации.ПустаяСсылка());
		УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы


&НаКлиенте
Процедура ПризнаниеРасходовПриИзменении(Элемент)
	
	//++ НЕ УТ
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПризнаватьРасходамиПриУСН", ПризнаниеРасходов = 1,,, ПризнаниеРасходов);
	//-- НЕ УТ
	Возврат; // в УТ пустой
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереместитьЭлементВверх(Команда)
	
	НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВверхВыполнить(Список, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементВниз(Команда)
	
	НастройкаПорядкаЭлементовКлиент.ПереместитьЭлементВнизВыполнить(Список, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры


&НаКлиенте
Процедура ПризнаватьРасходом(Команда)
	
	//++ НЕ УТ
	УстановитьПризнаниеРасхода(Истина);
	//-- НЕ УТ
	Возврат; // в УТ пустой
	
КонецПроцедуры

&НаКлиенте
Процедура НеПризнаватьРасходом(Команда)
	
	//++ НЕ УТ
	УстановитьПризнаниеРасхода(Ложь);
	//-- НЕ УТ
	Возврат; // в УТ пустой
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Ссылка",
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаблокированныеСтатьиРасходов(),
		ВидСравненияКомпоновкиДанных.НеВСписке);

	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВариантРаспределенияРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВариантРаспределенияРасходов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФормироватьФинансовыйРезультат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='На финансовый результат';uk='На фінансовий результат'"));
	
	УстановитьПараметрыДинамическогоСписка();
	
КонецПроцедуры

//++ НЕ УТ

&НаКлиенте
Процедура УстановитьПризнаниеРасхода(ПризнаватьРасходом)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Расходы по выделенным статьям%1 будут признаваться для целей УСН. Продолжить?';uk='Витрати по виділених статтями%1 будуть визнаватися для цілей УСН. Продовжити?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ?(ПризнаватьРасходом, "", " " + НСтр("ru='не';uk='не'")));
	
	ПараметрыОповещения = Новый Структура("ВыделенныеСтроки, НовоеЗначение", ВыделенныеСтроки, ПризнаватьРасходом);
	ОповещениеПризнаниеРасходаЗавершение = Новый ОписаниеОповещения("УстановитьПризнаниеРасходаЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОповещениеПризнаниеРасходаЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнаниеРасходаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
        
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	МассивИзменяемыхСсылок = СписокСсылокПоВыбраннымСтрокамДинамическогоСписка(ДополнительныеПараметры.ВыделенныеСтроки, Список);
	                                                                                  
	// Присваиваем объектам новые значения.
	ВыполнитьИзменениеОбъектов(МассивИзменяемыхСсылок, ДополнительныеПараметры.НовоеЗначение);
	// Обновляем данные формы:
	Элементы.Список.Обновить();
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция СписокСсылокПоВыбраннымСтрокамДинамическогоСписка(ВыделенныеСтрокиСписка, ДинамическийСписокФормы)
	
	#Область ПодготовкаОтбораПоДинамическомуСпискуИЕгоВыделеннымЭлементам
	
	ОтборСписка = Новый ОтборКомпоновкиДанных;
	
	// Для статей "на внеоборотные активы" флаг ПризнаватьРасходамиПриУСН не используется
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		ОтборСписка, 
		"ВариантРаспределенияРасходов",
		Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	ОтборПоГруппировке = Неопределено;
	ОтборПоСсылке = Неопределено;
		
	Для каждого ТекущаяСтрокаСписка из ВыделенныеСтрокиСписка Цикл
		
		Если ТипЗнч(ТекущаяСтрокаСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Если ОтборПоГруппировке = Неопределено Тогда
				ОтборПоГруппировке = КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборСписка,
																				ТекущаяСтрокаСписка.ИмяГруппировки,
																				ТекущаяСтрокаСписка.Ключ);
			Иначе
				ОтборПоГруппировке.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Если Не ТипЗнч(ОтборПоГруппировке.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					СписокДляОтбора = Новый СписокЗначений;
					СписокДляОтбора.Добавить(ОтборПоГруппировке.ПравоеЗначение);
					ОтборПоГруппировке.ПравоеЗначение = СписокДляОтбора;
				КонецЕсли;	
				ОтборПоГруппировке.ПравоеЗначение.Добавить(ТекущаяСтрокаСписка.Ключ);
			КонецЕсли;
		Иначе
			
			Если ОтборПоСсылке = Неопределено Тогда
				ТекущийВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				ОтборПоСсылке = КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборСписка, "Ссылка", ТекущаяСтрокаСписка, ТекущийВидСравнения);
			Иначе
				ОтборПоСсылке.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Если Не ТипЗнч(ОтборПоСсылке.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					СписокДляОтбора = Новый СписокЗначений;
					СписокДляОтбора.Добавить(ОтборПоСсылке.ПравоеЗначение);
					ОтборПоСсылке.ПравоеЗначение = СписокДляОтбора;
				КонецЕсли;	
				ОтборПоСсылке.ПравоеЗначение.Добавить(ТекущаяСтрокаСписка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ОтборСписка, ДинамическийСписокФормы.Отбор, Ложь);
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ОтборСписка, ДинамическийСписокФормы.КомпоновщикНастроек.Настройки.Отбор, Ложь);
	// Исключим группы из списка ссылок:
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборСписка, "ЭтоГруппа", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	#КонецОбласти
	
	#Область ПолучениеСпискаСсылокНаОснованииОтбора
	
	ИзменениеРеквизитов = Обработки.ГрупповоеИзменениеРеквизитов.Создать();
	
	// Определим текст запроса:
	Если ЗначениеЗаполнено(ДинамическийСписокФормы.ТекстЗапроса) Тогда
		ТекстЗапроса = ДинамическийСписокФормы.ТекстЗапроса;
	Иначе
		ТекстЗапроса = ИзменениеРеквизитов.ТекстЗапроса(ДинамическийСписокФормы.ОсновнаяТаблица);
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ИзменениеРеквизитов.СхемаКомпоновкиДанных(ТекстЗапроса);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиКомпоновки.Отбор, ОтборСписка);
	
	ФинансоваяОтчетностьСервер.НоваяГруппировка(КомпоновщикНастроек.Настройки.Структура, "Ссылка");
	ТаблицаИзменяемыхОбъектов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновки);
	
	Возврат ТаблицаИзменяемыхОбъектов.ВыгрузитьКолонку("Ссылка");
	
	#КонецОбласти
	
КонецФункции

#Область ВыполнениеОперацийНадВыбраннымиОбъектами

&НаКлиенте
Процедура ВыполнитьИзменениеОбъектов(ОбъектыДляИзменения, ПрисваиваемоеЗначение)
	
	Если Не ТипЗнч(ОбъектыДляИзменения) = Тип("Массив") ИЛИ ОбъектыДляИзменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыОбработкиИзменения = ПараметрыОбработкиИзменения();
	ПараметрыОбработкиИзменения.ИмяМетаданныхОбъекта = "ПланВидовХарактеристик.СтатьиРасходов";
	ПараметрыОбработкиИзменения.ИзменяемыеРеквизиты = Новый Структура("ПризнаватьРасходамиПриУСН", ПрисваиваемоеЗначение);
	ПараметрыОбработкиИзменения.ОбрабатываемыеОбъекты = ОбъектыДляИзменения;
	
	Результат = ВыполнитьИзменениеОбъектовВФоновомЗадании(ПараметрыОбработкиИзменения, УникальныйИдентификатор);
	
	Если Результат.Статус = "Выполняется" Тогда
		
		ПараметрыФормаДлительнойОперации = ПараметрыФормыДлительнойОперации();
		ПараметрыФормаДлительнойОперации.ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменениеОбъектовЗавершено", ЭтотОбъект);
		
		ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", ПараметрыФормаДлительнойОперации, ЭтотОбъект, , , , ОповещениеОЗакрытии);
		
	Иначе
		
		ИзменениеОбъектовЗавершено(Результат);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОбработкиИзменения()
	
	ПараметрыОбработкиИзменения = Новый Структура;
	ПараметрыОбработкиИзменения.Вставить("ИмяМетаданныхОбъекта");
	ПараметрыОбработкиИзменения.Вставить("ИзменяемыеРеквизиты");
	ПараметрыОбработкиИзменения.Вставить("ОбрабатываемыеОбъекты");
	
	Возврат ПараметрыОбработкиИзменения;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыДлительнойОперации()
	
	ПараметрыДлительнойОперации = Новый Структура;
	ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания");
	ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
	ПараметрыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
	ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
	
	Возврат ПараметрыДлительнойОперации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьИзменениеОбъектовВФоновомЗадании(ПараметрыОбработки, УникальныйИдентификатор)
	
	ВыполняемыйМетод = "Обработки.ПомощникПодготовкиУведомленияОКонтролируемыхСделках.УстановитьНовыеЗначенияДляСпискаОбъектов";
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 0.5;
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НСтр("ru='Групповое изменение реквизита ""ПризнаватьРасходамиПриУСН"" для списка статей расходов';uk='Групове зміна реквізиту ""ПризнаватьРасходамиПриУСН"" списку статей витрат'");
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = "ИзменениеРеквизитаПризнаватьРасходамиПриУСН";
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыОбработки, ПараметрыФоновогоЗадания);
			
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ИзменениеОбъектовЗавершено(Результат, Параметры = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(Результат.АдресРезультата) Тогда
			СтрокаОшибок = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			
			Если ЗначениеЗаполнено(СтрокаОшибок) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибок);
			КонецЕсли;
		КонецЕсли;
		
		// Обновляем данные формы:
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТ

#КонецОбласти
