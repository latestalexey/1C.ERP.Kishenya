
////////////////////////////////////////////////////////////////////////////////
// Модуль "ОтражениеЗарплатыВФинансовомУчетеУП" содержит процедуры и функции для 
// обслуживания механизмов отражения зарплаты в финансовом учете.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФормированиеДвижений

// Процедура формирования движений по регистру "Заказы на производство трудозатраты".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьЗаказыНаПроизводствоТрудозатраты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаПроизводствоТрудозатраты;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.ЗаказыНаПроизводствоТрудозатраты;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Трудозатраты незавершенного производства".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьТрудозатратыНезавершенногоПроизводства(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТрудозатратыНезавершенногоПроизводства;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.ТрудозатратыНезавершенногоПроизводства;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирует дополнительные движения для документов блока расчета зарплаты.
//
// Параметры:
//	Движения - КоллекцияДвижений - Коллекция наборов записей движений документа.
//	Отказ - Булево - Признак отказа от проведения документа.
//	Организация - СправочникСсылка.Организации - Организация, по которой вводится документ.
//	ПериодРегистрации - Период - Отчетный период.
//  ДанныеДляПроведения - Структура, ключ - имя регистра, значение - таблица значений с движениями документа
//						это источник данных, если Неопределено, тогда источник данных - движения регистров.
//	СтрокаСписокТаблиц - Строка - Список таблиц для отражения в финансовом учете.
//
Процедура СформироватьДвиженияПоДокументу(Движения, Отказ, Организация, ПериодРегистрации, ДанныеДляПроведения, СтрокаСписокТаблиц = "") Экспорт
	
	Если Движения.Найти("ВыплатаОтпусковЗаСчетРезерва") <> Неопределено Тогда
		
		ДанныеДляОтражения = ОтражениеЗарплатыВБухучете.ДанныеДляОтраженияЗарплатыВБухучете(ПериодРегистрации, Организация, СтрокаСписокТаблиц, ДанныеДляПроведения);
		
		ДокументСсылка = Движения.Найти("ВыплатаОтпусковЗаСчетРезерва").Отбор.Регистратор.Значение;  
		Движения.ВыплатаОтпусковЗаСчетРезерва.Очистить();
		Движения.ВыплатаОтпусковЗаСчетРезерва.Записать();
		
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		НастройкиРезервовОтпусков = МодульРезервОтпусков.НастройкиРезервовОтпусков(Организация, ПериодРегистрации);
		
		Если НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ Тогда
			
			КолонкиСуммирования = Неопределено;
			ОтражениеЗарплатыВБухучете.НоваяТаблицаБухучетНачисленнаяЗарплатаИВзносы(КолонкиСуммирования);
			НачисленныеОтпуска = ОтражениеЗарплатыВБухучете.НоваяТаблицаНачисленныеОтпуска();
			МодульРезервОтпусков.СписатьРасходыПоОплатеОтпускаЗаСчетОценочныхОбязательств(Организация, ПериодРегистрации, ДокументСсылка, ДанныеДляОтражения.НачисленнаяЗарплатаИВзносы, НачисленныеОтпуска, КолонкиСуммирования);
			МодульРезервОтпусков.СформироватьДвиженияВыплатаОтпусковЗаСчетРезерва(Движения, Отказ, Организация, ПериодРегистрации, НачисленныеОтпуска);
			ДвиженияВыплатаОтпусковЗаСчетРезерва = Движения.ВыплатаОтпусковЗаСчетРезерва.Выгрузить();
			МодульРезервОтпусков.СформироватьДвиженияСписаниеРезерваОтпусков (Движения, Отказ, Организация, ПериодРегистрации, ДвиженияВыплатаОтпусковЗаСчетРезерва);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует дополнительные движения по регистрам финанового учета для документа НачислениеОценочныхОбязательствПоОтпускам.
//
// Параметры:
//	ЭтотОбъект - ДокументОбъект.НачислениеОценочныхОбязательствПоОтпускам - Документ к проведению.
//	Отказ - Булево - Признак отказа от проведения документа.
//	РежимПроведения - РежимПроведенияДокумента - Режим проведения документа.
//
Процедура ОбработкаПроведенияНачислениеОценочныхОбязательствПоОтпускам(ЭтотОбъект, Отказ, РежимПроведения) Экспорт
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(ЭтотОбъект.Ссылка, ЭтотОбъект.ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	ИнициализироватьДанныеДокументаНачислениеОценочныхОбязательствПоОтпускам(ЭтотОбъект.Ссылка, ЭтотОбъект.ДополнительныеСвойства);
	
	// Движения по прочим расходам.
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ЭтотОбъект.ДополнительныеСвойства, ЭтотОбъект.Движения, Отказ);
	
	// Движения по партиям прочих расходов.
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ЭтотОбъект.ДополнительныеСвойства, ЭтотОбъект.Движения, Отказ);
	
	// Движения по оборотным регистрам управленческого учета
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияДоходыРасходыПрочиеАктивыПассивы(ЭтотОбъект.ДополнительныеСвойства, ЭтотОбъект.Движения, Отказ);
	
	//Движения по отражению зарплаты в учете прочих пассивов
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ЭтотОбъект.ДополнительныеСвойства, ЭтотОбъект.Движения, Отказ);
	
	РеглУчетПроведениеСервер.ОтразитьПорядокОтраженияПрочихОпераций(ЭтотОбъект.ДополнительныеСвойства, Отказ);
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ЭтотОбъект.ДополнительныеСвойства, ЭтотОбъект.Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ЭтотОбъект.ДополнительныеСвойства);
	
КонецПроцедуры

#КонецОбласти

// Формирует документ начисления оценочных обязательств по отпускам за период по указанной организации. Вызывается
// при автоматическом выполнении операций закрытия месяца.
// 
// Параметры:
//   Организации - СправочникСсылка.Организации - Организация, по которой формируется документ
//   Период - Дата - Период, за который формируется документ
//
Процедура НачислениеООПриЗакрытииМесяца(Организации, Период) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачислениеОО.Ссылка КАК Ссылка,
	|	НачислениеОО.Организация КАК Организация,
	|	НачислениеОО.Проведен КАК Проведен
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК НачислениеОО
	|ГДЕ
	|	(НачислениеОО.Организация В (&Организации)
	|		ИЛИ &ПоВсемОрганизациям)
	|	И НЕ НачислениеОО.ПометкаУдаления
	|	И НАЧАЛОПЕРИОДА(НачислениеОО.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Проведен УБЫВ");
	
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организации));
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
	
	СуществующиеДокументы = Запрос.Выполнить().Выбрать();
	
	Для Каждого Организация Из Организации Цикл
		
		ДокументыПоОрганизацииОбработаны = Ложь;
		
		ДокументОбъект = Неопределено;
		
		СуществующиеДокументы.Сбросить();
		
		Пока СуществующиеДокументы.НайтиСледующий(Новый Структура("Организация, Проведен", Организация, Истина)) Цикл
			
			ДокументОбъект = СуществующиеДокументы.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.ПроверитьЗаполнение() Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			ДокументыПоОрганизацииОбработаны = Истина;
			
		КонецЦикла;
		
		Если ДокументыПоОрганизацииОбработаны Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкиРезервовОтпусков = РезервОтпусков.НастройкиРезервовОтпусков(Организация, Период);
		
		Если Не НастройкиРезервовОтпусков.ФормироватьРезервОтпусковБУ Тогда
			Продолжить;
		КонецЕсли;
		
		СуществующиеДокументы.Сбросить();
		
		Если СуществующиеДокументы.НайтиСледующий(Новый Структура("Организация, Проведен", Организация, Ложь)) Тогда
			ДокументОбъект = СуществующиеДокументы.Ссылка.ПолучитьОбъект();
			ДокументОбъект.РасчетРезерваОтпусков.Очистить();
			ДокументОбъект.ОценочныеОбязательстваПоВознаграждениямРаботникам.Очистить();
			ДокументОбъект.ОценочныеОбязательства.Очистить();
			ДокументОбъект.ФизическиеЛица.Очистить();
		КонецЕсли;
		
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы.НачислениеОценочныхОбязательствПоОтпускам.СоздатьДокумент();
		КонецЕсли;
		
		СтруктураЗаполнения = Новый Структура("Организация, ПериодРегистрации", Организация, Период);
		ДокументОбъект.Заполнить(СтруктураЗаполнения);
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(Период);
		ДокументОбъект.Дата = КонецМесяца(Период);
		РезервОтпусков.ЗаполнитьДокументНачислениеОценочныхОбязательствПоОтпускам(ДокументОбъект);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет проверку заполнения расшифровки платежа в документах выдачи займа сотруднику.
// 
// Параметры:
//   ДокументОбъект - ДокументОбъект.РасходныйКассовыйОрдер,
//                    ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств,
//                    ДокументОбъект.СписаниеБезналичныхДенежныхСредств - проверяемый документ
//   Отказ - Булево - признак отказа от проведения документа
//
Процедура ПроверитьЗаполнениеДокументаВыдачиЗайма(ДокументОбъект, Отказ) Экспорт
	
	Организация       = ДокументОбъект.Организация;
	Дата              = ДокументОбъект.Дата;
	ФизическоеЛицо    = ДокументОбъект.ПодотчетноеЛицо;
	Ссылка            = ДокументОбъект.Ссылка;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 				= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода				= Дата;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода			= Дата;
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ 	= Неопределено;
	
	КадровыйУчет.ПроверитьРаботающихФизическихЛиц(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
		ПараметрыПолученияСотрудниковОрганизаций,
		Отказ,
		Новый Структура("ИмяПоляСотрудник, ИмяОбъекта", "ФизическоеЛицо", "Объект"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договора.ДоговорЗаймаСотруднику КАК ДоговорЗайма,
	|	Договора.Сумма
	|ПОМЕСТИТЬ ВТДоговора
	|ИЗ
	|	&Договора КАК Договора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоговора.ДоговорЗайма КАК ДоговорЗайма,
	|	СУММА(ВТДоговора.Сумма) КАК Сумма
	|ИЗ
	|	ВТДоговора КАК ВТДоговора
	|ГДЕ
	|	ВТДоговора.ДоговорЗайма <> ЗНАЧЕНИЕ(Документ.ДоговорЗаймаСотруднику.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДоговора.ДоговорЗайма";
	Запрос.УстановитьПараметр("Договора", ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,"ДоговорЗаймаСотруднику, Сумма"));
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДоговорЗайма = Выборка.ДоговорЗайма;
		Сумма = Выборка.Сумма;
		
		ДатаПредоставления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорЗайма, "ДатаПредоставления");
		ЗаймыСотрудникам.ПроверитьДатуВыдачиЗайма(Дата, ДатаПредоставления, "Объект.Дата", Отказ);
		
		НевыданныйОстаток = ЗаймыСотрудникам.ОстатокНевыданныхСумм(ДоговорЗайма, Дата, Ссылка);
		
		Если НевыданныйОстаток < Сумма Тогда 
			ТекстСообщения = НСтр("ru='На %1 по договору займа не выдано %2 грн. Сумма выдачи не может превышать невыданный остаток.';uk='На %1 за договором позики не видано %2 грн. Сума видачі не може перевищувати невиданий залишок.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Формат(Дата, "ДЛФ=Д"), НевыданныйОстаток);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сумма", "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет проверку заполнения расшифровки платежа в документах погашения займа сотрудником.
// 
// Параметры:
//   ДокументОбъект - ДокументОбъект.ПриходныйКассовыйОрдер,
//                    ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - проверяемый документ
//   Отказ - Булево - признак отказа от проведения документа
//
Процедура ПроверитьЗаполнениеДокументаПогашенияЗайма(ДокументОбъект, Отказ) Экспорт
	
	Организация       = ДокументОбъект.Организация;
	Дата              = ДокументОбъект.Дата;
	ФизическоеЛицо    = ДокументОбъект.ПодотчетноеЛицо;
	Ссылка            = ДокументОбъект.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договора.ДоговорЗаймаСотруднику КАК ДоговорЗайма,
	|	ВЫБОР
	|		КОГДА Договора.ТипСуммыКредитаДепозита = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|			ТОГДА Договора.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсновнойДолг,
	|	ВЫБОР
	|		КОГДА Договора.ТипСуммыКредитаДепозита = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|			ТОГДА Договора.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Проценты
	|ПОМЕСТИТЬ ВТДоговора
	|ИЗ
	|	&Договора КАК Договора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДоговора.ДоговорЗайма КАК ДоговорЗайма,
	|	СУММА(ВТДоговора.ОсновнойДолг) КАК ОсновнойДолг,
	|	СУММА(ВТДоговора.Проценты) КАК Проценты
	|ИЗ
	|	ВТДоговора КАК ВТДоговора
	|ГДЕ
	|	ВТДоговора.ДоговорЗайма <> ЗНАЧЕНИЕ(Документ.ДоговорЗаймаСотруднику.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДоговора.ДоговорЗайма";
	Запрос.УстановитьПараметр("Договора", ДокументОбъект.РасшифровкаПлатежа.Выгрузить(,"ДоговорЗаймаСотруднику, ТипСуммыКредитаДепозита, Сумма"));
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = "";
		ОстатокЗадолженности = ЗаймыСотрудникам.ОстатокЗадолженности(Выборка.ДоговорЗайма, Дата, Ссылка);
		
		Если Выборка.Проценты > ОстатокЗадолженности.Проценты Тогда
			ТекстСообщения = НСтр("ru='Сумма погашения процентов превышает остаток к погашению на %1 грн. Требуется уменьшить сумму погашаемых процентов.';uk='Сума погашення відсотків перевищує залишок до погашення на %1 грн. Потрібно зменшити суму відсотків, які погашаються.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Проценты - ОстатокЗадолженности.Проценты);
		ИначеЕсли Выборка.Проценты < ОстатокЗадолженности.Проценты И Выборка.ОсновнойДолг > 0 Тогда
			ТекстСообщения = НСтр("ru='Введено погашение основного долга, при этом есть остаток к погашению процентов, в размере %1 грн. В первую очередь требуется погасить проценты, а затем - основной долг.';uk='Введено погашення основного боргу, при цьому є залишок до погашення відсотків, у розмірі %1 грн. У першу чергу потрібно погасити відсотки, а потім - основний борг.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОстатокЗадолженности.Проценты - Выборка.Проценты);
		ИначеЕсли Выборка.ОсновнойДолг > ОстатокЗадолженности.СуммаЗайма Тогда
			ТекстСообщения = НСтр("ru='Сумма погашения основного долга превышает остаток к погашению на %1 грн. Требуется уменьшить сумму погашения основного долга.';uk='Сума погашення основного боргу перевищує залишок до погашення на %1 грн. Потрібно зменшити суму погашення основного боргу.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.ОсновнойДолг - ОстатокЗадолженности.СуммаЗайма);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Сумма", "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Коррекрирует список выбора операций по зарплате.
//
// Параметры:
//	ДанныеВыбора - СписокЗначений - Список, подготовленный стандартной обработкой
//	Параметры - Структура - содержит параметры выбора
//
Процедура НастройкаДанныхВыбораВидаОперацийПоЗарплате(ДанныеВыбора, Параметры) Экспорт
	
	НеиспользуемыеОперации = Новый СписокЗначений;
	
	НеиспользуемыеОперации.Добавить(Перечисления.ВидыОперацийПоЗарплате.Депонирование);
	НеиспользуемыеОперации.Добавить(Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента);
	НеиспользуемыеОперации.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет);
	НеиспользуемыеОперации.Добавить(Перечисления.ВидыОперацийПоЗарплате.Дивиденды);
	НеиспользуемыеОперации.Добавить(Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников);
	НеиспользуемыеОперации.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервыБУ);
	НеиспользуемыеОперации.Добавить(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервыНУ);
	НеиспользуемыеОперации.Добавить(Перечисления.ВидыОперацийПоЗарплате.НачисленоПроцентовПоЗайму);
	
	Для Каждого Элемент Из НеиспользуемыеОперации Цикл
		
		УдаляемыйЭлемент = ДанныеВыбора.НайтиПоЗначению(Элемент.Значение);
		
		Если УдаляемыйЭлемент <> Неопределено Тогда
			ДанныеВыбора.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	// настройка наименований операций
	Операция = ДанныеВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства);
	Если Операция <> Неопределено Тогда
		Операция.Представление = НСтр("ru='Отпуск за счет обязательств';uk='Відпустка за рахунок зобов''язань'");
	КонецЕсли;
	Операция = ДанныеВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы);
	Если Операция <> Неопределено Тогда
		Операция.Представление = НСтр("ru='Отпуск за счет резервов';uk='Відпустка за рахунок резервів'");
	КонецЕсли;
	Операция = ДанныеВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы);
	Если Операция <> Неопределено Тогда
		Операция.Представление = НСтр("ru='Отпуск за счет обязательств и резервов';uk='Відпустка за рахунок зобов''язань і резервів'");
	КонецЕсли;
	Операция = ДанныеВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска);
	Если Операция <> Неопределено Тогда
		Операция.Представление = НСтр("ru='Компенсация отпуска';uk='Компенсація відпустки'");
	КонецЕсли;
	Операция = ДанныеВыбора.НайтиПоЗначению(Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства);
	Если Операция <> Неопределено Тогда
		Операция.Представление = НСтр("ru='Компенсация отпуска за счет обязательств';uk='Компенсація відпустки за рахунок зобов''язань'");
	КонецЕсли;
	
КонецПроцедуры

Процедура УсловноеОформлениеОперацийПоЗарплате(УсловноеОФормление, ПутьКДанным, ЭлементФормы) Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Отпуск за счет обязательств';uk='Відпустка за рахунок зобов''язань'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускРезервы;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Отпуск за счет резервов';uk='Відпустка за рахунок резервів'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Отпуск за счет обязательств и резервов';uk='Відпустка за рахунок зобов''язань і резервів'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпуска;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Компенсация отпуска';uk='Компенсація відпустки'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийПоЗарплате.КомпенсацияЕжегодногоОтпускаОценочныеОбязательства;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Компенсация отпуска за счет обязательств';uk='Компенсація відпустки за рахунок зобов''язань'"));
	
КонецПроцедуры

#Область ДополнительныеПроцедурыРасчетаРезервовОтпусков

Процедура ЗаполнитьПодразделениеПредприятиеПоМестамСотрудников(ТаблицаРезервов, ПериодРегистрации) Экспорт
	
	ТаблицаРезервов.Колонки.Добавить("ПодразделениеПредприятия",   Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	
	// заполнение подразделений по кадровым данным сотрудников
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Ложь,
		ТаблицаРезервов.ВыгрузитьКолонку("Сотрудник"),
		"МестоВСтруктуреПредприятия",
		КонецМесяца(ПериодРегистрации));
	
	ПодразделенияСотрудников = Новый Соответствие;
	Для Каждого Строка Из КадровыеДанные Цикл
		ПодразделенияСотрудников.Вставить(Строка.Сотрудник, Строка.МестоВСтруктуреПредприятия);
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаРезервов Цикл
		Строка.ПодразделениеПредприятия = ПодразделенияСотрудников[Строка.Сотрудник];
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Отключает учет по статьям финансирования, если используется.
// В ERP учет по статьям финансирования не предусмотрен.
Процедура НастроитьУчетПоСтатьямФинансирования() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Константы.ИспользоватьСтатьиФинансированияЗарплата.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокСпособаОтражения(Форма, ИмяЭлемента) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = НСтр("ru='Способ отражения';uk='Спосіб відображення'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПроводок

// Возвращает текст запроса для формирования временной таблицы перед отражением в регламентированном учете
// документов Начисление оценочных обязательств по отпускам.
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчетеОО() Экспорт
	
	Возврат
		
		ТекстЗапросаСписокСпособов() +
		Справочники.СпособыОтраженияЗарплатыВБухУчете.ТекстЗапросаДанныхСпособов("ВТСпособыОтражения") + ";" +
		ТекстЗапросаТаблицаВТРасходыДокумента() +
		
		"ВЫБРАТЬ
		|	ВТРасходыДокумента.СтатьяРасходов,
		|	ВТРасходыДокумента.ВариантРаспределения,
		|	ВТРасходыДокумента.АналитикаРасходов,
		|	ВТРасходыДокумента.АналитикаАктивовПассивов,
		|	ВТРасходыДокумента.СчетУчета,
		|	ВТРасходыДокумента.Субконто1,
		|	ВТРасходыДокумента.Субконто2,
		|	ВТРасходыДокумента.Субконто3,
		|	ВТРасходыДокумента.СчетКт,
		|	СУММА(ВТРасходыДокумента.Сумма) КАК Сумма,
		|	МАКСИМУМ(ВТРасходыДокумента.НомерСтроки) КАК НомерСтроки,
		|	ВТРасходыДокумента.Подразделение,
		|	ВТРасходыДокумента.СтатьяАктивовПассивов,
		|	ВТРасходыДокумента.Ссылка
		|ПОМЕСТИТЬ РасходыДокумента
		|ИЗ
		|	ВТРасходыДокумента КАК ВТРасходыДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТРасходыДокумента.Ссылка,
		|	ВТРасходыДокумента.СчетКт,
		|	ВТРасходыДокумента.Подразделение,
		|	ВТРасходыДокумента.СтатьяАктивовПассивов,
		|	ВТРасходыДокумента.СтатьяРасходов,
		|	ВТРасходыДокумента.ВариантРаспределения,
		|	ВТРасходыДокумента.АналитикаРасходов,
		|	ВТРасходыДокумента.АналитикаАктивовПассивов,
		|	ВТРасходыДокумента.СчетУчета,
		|	ВТРасходыДокумента.Субконто1,
		|	ВТРасходыДокумента.Субконто2,
		|	ВТРасходыДокумента.Субконто3
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДанныеДокументаНачислениеОценочныхОбязательствПоОтпускам(ДокументСсылка, ДополнительныеСвойства)
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстЗапросаДанныхСпособов = Справочники.СпособыОтраженияЗарплатыВБухУчете.ТекстЗапросаДанныхСпособов("ВТСпособыОтражения") + ";";
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаДокументовКОтражению(),              "");
	ТекстыЗапроса.Добавить(ТекстЗапросаСписокСпособов(),                           "");
	ТекстыЗапроса.Добавить(ТекстЗапросаДанныхСпособов,                             "");
	ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаВТРасходыДокумента(),                "");
	ТекстыЗапроса.Добавить(ТекстЗапросаПрочиеРасходы(),                            "ТаблицаПрочиеРасходы");
	ТекстыЗапроса.Добавить(ТекстЗапросаПартииПрочихРасходов(),                     "ТаблицаПартииПрочихРасходов");
	ТекстыЗапроса.Добавить(ТекстЗапросаПрочиеАктивыПассивы(),                      "ТаблицаПрочиеАктивыПассивы");
	ТекстыЗапроса.Добавить(ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(), "ТаблицаДвиженияДоходыРасходыПрочиеАктивыПассивы");
	ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаПорядокОтраженияПрочихОпераций(),    "ТаблицаПорядокОтраженияПрочихОпераций");
	ТекстыЗапроса.Добавить(ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(),     "ТаблицаОтражениеДокументовВРеглУчете");
	
	ПроведениеСервер.ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.ПериодРегистрации КАК Период,
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.КорректировкаОбязательств КАК КорректировкаОбязательств,
	|	ДанныеШапки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Константы.ВалютаРегламентированногоУчета.Получить(),
		,
		Реквизиты.Период);
	
	Запрос.УстановитьПараметр("Период",                         КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КорректировкаОбязательств",      Реквизиты.КорректировкаОбязательств);
	Запрос.УстановитьПараметр("Организация",                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ИспользоватьНачислениеЗарплаты", ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ"));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр", Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДокументовКОтражению()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСписокСпособов()
	
	Возврат 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОценочныеОбязательства.СпособОтраженияЗарплатыВБухучете КАК СпособОтражения
	|ПОМЕСТИТЬ ВтСписокСпособовОтражения
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК ОценочныеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО ОценочныеОбязательства.Ссылка = ДокументыКОтражению.Ссылка
	|
	|;";
	
КонецФункции

Функция ТекстЗапросаТаблицаВТРасходыДокумента()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиРасходов.СтатьяРасходов КАК СтатьяРасходов,
	|	СтатьиРасходов.ВариантРаспределения КАК ВариантРаспределения,
	|
	|	ВЫБОР
	|		КОГДА СтатьиРасходов.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ОценочныеОбязательства.ПодразделениеПредприятия
	|		КОГДА СтатьиРасходов.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОценочныеОбязательства.Ссылка.Организация
	|		ИНАЧЕ СтатьиРасходов.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаРасходов,
	|
	|	ВЫБОР
	|		КОГДА СтатьиРасходов.АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ОценочныеОбязательства.ПодразделениеПредприятия
	|		КОГДА СтатьиРасходов.АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОценочныеОбязательства.Ссылка.Организация
	|		ИНАЧЕ СтатьиРасходов.АналитикаАктивовПассивов
	|	КОНЕЦ КАК АналитикаАктивовПассивов,
	|
	|	СтатьиРасходов.СчетУчета КАК СчетУчета,
	|	СтатьиРасходов.Субконто1 КАК Субконто1,
	|	СтатьиРасходов.Субконто2 КАК Субконто2,
	|	СтатьиРасходов.Субконто3 КАК Субконто3,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбеспечениеВыплатОтпусков) КАК СчетКт,
	|	ОценочныеОбязательства.СуммаРезерва КАК Сумма,
	|	ОценочныеОбязательства.НомерСтроки КАК НомерСтроки,
	|	ОценочныеОбязательства.ПодразделениеПредприятия КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПоВознаграждениям) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда) КАК СтатьяАктивовПассивов,
	|	ОценочныеОбязательства.Ссылка 
	|ПОМЕСТИТЬ ВТРасходыДокумента
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК ОценочныеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО ОценочныеОбязательства.Ссылка = ДокументыКОтражению.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпособыОтражения КАК СтатьиРасходов
	|		ПО ОценочныеОбязательства.СпособОтраженияЗарплатыВБухучете = СтатьиРасходов.СпособОтражения
	|ГДЕ
	|	НЕ ДокументыКОтражению.Ссылка.КорректировкаОбязательств
	|	И ОценочныеОбязательства.СуммаРезерва <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатьиРасходов.СтатьяРасходовВзносов,
	|	СтатьиРасходов.ВариантРаспределенияВзносов,
	|
	|	ВЫБОР
	|		КОГДА СтатьиРасходов.АналитикаРасходовВзносов = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ОценочныеОбязательства.ПодразделениеПредприятия
	|		КОГДА СтатьиРасходов.АналитикаРасходовВзносов = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОценочныеОбязательства.Ссылка.Организация
	|		ИНАЧЕ СтатьиРасходов.АналитикаРасходовВзносов
	|	КОНЕЦ,
	|
	|	ВЫБОР
	|		КОГДА СтатьиРасходов.АналитикаАктивовПассивовВзносов = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ОценочныеОбязательства.ПодразделениеПредприятия
	|		КОГДА СтатьиРасходов.АналитикаАктивовПассивовВзносов = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОценочныеОбязательства.Ссылка.Организация
	|		ИНАЧЕ СтатьиРасходов.АналитикаАктивовПассивовВзносов
	|	КОНЕЦ,
	|
	|	СтатьиРасходов.СчетУчетаВзносов,
	|	СтатьиРасходов.Субконто1Взносов,
	|	СтатьиРасходов.Субконто2Взносов,
	|	СтатьиРасходов.Субконто3Взносов,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбеспечениеВыплатОтпусков) КАК СчетКт,
	|	ОценочныеОбязательства.СуммаРезерваСтраховыхВзносов,
	|	ОценочныеОбязательства.НомерСтроки,
	|	ОценочныеОбязательства.ПодразделениеПредприятия,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.НачислениеРезервовПоСтраховымВзносам),
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги),
	|	ОценочныеОбязательства.Ссылка 
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК ОценочныеОбязательства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО ОценочныеОбязательства.Ссылка = ДокументыКОтражению.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпособыОтражения КАК СтатьиРасходов
	|		ПО ОценочныеОбязательства.СпособОтраженияЗарплатыВБухучете = СтатьиРасходов.СпособОтражения
	|ГДЕ
	|	НЕ ДокументыКОтражению.Ссылка.КорректировкаОбязательств
	|	И ОценочныеОбязательства.СуммаРезерваСтраховыхВзносов <> 0 
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПрочиеРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВТДанныеРасходы.НомерСтроки            КАК НомерСтроки,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	ВТДанныеРасходы.Подразделение          КАК Подразделение,
	|	ВТДанныеРасходы.СтатьяРасходов         КАК СтатьяРасходов,
	|	ВТДанныеРасходы.АналитикаРасходов      КАК АналитикаРасходов,
	
	|	ВЫРАЗИТЬ(СУММА(ВТДанныеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр) КАК ЧИСЛО(15, 2)) КАК Сумма,
	
	|	ВЫБОР КОГДА ВТДанныеРасходы.ВариантРаспределения = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты) ТОГДА
	|		ВЫРАЗИТЬ(СУММА(ВТДанныеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр) КАК ЧИСЛО(15, 2)) 
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДС,

	|	СУММА(ВЫБОР КОГДА ВТДанныеРасходы.ВариантРаспределения = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы) ТОГДА
	|		0
	|	ИНАЧЕ
	|		ВТДанныеРасходы.Сумма
	|	КОНЕЦ) КАК СуммаРегл,

	|	СУММА(ВЫБОР КОГДА ВтДанныеРасходы.ВариантРаспределения =
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)                                 КАК ВременнаяРазница,

	|	СУММА(ВЫБОР КОГДА ВтДанныеРасходы.ВариантРаспределения =
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ)                                 КАК ПостояннаяРазница

	|ИЗ
	|	ВТРасходыДокумента КАК ВТДанныеРасходы
	|
	|ГДЕ
	|	ВТДанныеРасходы.ВариантРаспределения <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И ВТДанныеРасходы.СтатьяРасходов Ссылка ПланВидовХарактеристик.СтатьиРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРасходы.ВариантРаспределения,
	|	ВТДанныеРасходы.НомерСтроки,
	|	ВТДанныеРасходы.СтатьяРасходов,
	|	ВТДанныеРасходы.АналитикаРасходов,
	|	ВТДанныеРасходы.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПартииПрочихРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	МАКСИМУМ(ВТДанныеРасходы.НомерСтроки)       КАК НомерСтроки,
	|	ВТДанныеРасходы.Подразделение               КАК Подразделение,
	|	ВТДанныеРасходы.СтатьяРасходов              КАК СтатьяРасходов,
	|	ВТДанныеРасходы.АналитикаРасходов           КАК АналитикаРасходов,
	|	ВТДанныеРасходы.Ссылка                      КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаУчетаПартий,
	|	СУММА(ВЫРАЗИТЬ(ВТДанныеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))) КАК Стоимость,
	|	СУММА(ВЫРАЗИТЬ(ВТДанныеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))) КАК СтоимостьБезНДС,
	|	СУММА(ВТДанныеРасходы.Сумма)                КАК СтоимостьРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК НДСРегл
	
	|ИЗ
	|	ВТРасходыДокумента КАК ВТДанныеРасходы
	|
	|ГДЕ
	|	ВТДанныеРасходы.ВариантРаспределения = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И ВТДанныеРасходы.СтатьяРасходов Ссылка ПланВидовХарактеристик.СтатьиРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРасходы.Подразделение,
	|	ВТДанныеРасходы.СтатьяРасходов,
	|	ВТДанныеРасходы.АналитикаРасходов,
	|	ВТДанныеРасходы.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПрочиеАктивыПассивы()

	ТекстЗапроса = 
	// расходное движение по предопределенным статьям Оплата труда и Взносы с оплаты труда
	"ВЫБРАТЬ
	|	&Период                                  КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)   КАК ВидДвижения,
	|	МАКСИМУМ(ВТДанныеРасходы.НомерСтроки)    КАК НомерСтроки,
	|	&Организация                             КАК Организация,
	|	ВТДанныеРасходы.СтатьяАктивовПассивов    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                             КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(ВТДанныеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))) КАК Сумма
	|ИЗ
	|	ВТРасходыДокумента КАК ВТДанныеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРасходы.СтатьяАктивовПассивов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// приходное движение по статьям пассивов, указанных в способах отражения
	|ВЫБРАТЬ
	|	&Период                                  КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	МАКСИМУМ(ВТДанныеРасходы.НомерСтроки)    КАК НомерСтроки,
	|	&Организация                             КАК Организация,
	|	ВТДанныеРасходы.СтатьяРасходов           КАК Статья,
	|	ВТДанныеРасходы.АналитикаАктивовПассивов КАК Аналитика,
	|	СУММА(ВЫРАЗИТЬ(ВТДанныеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))) КАК Сумма
	|ИЗ
	|	ВТРасходыДокумента КАК ВТДанныеРасходы
	|
	|ГДЕ
	|	ВТДанныеРасходы.СтатьяРасходов Ссылка ПланВидовХарактеристик.СтатьиАктивовПассивов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРасходы.СтатьяРасходов,
	|	ВТДанныеРасходы.АналитикаАктивовПассивов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы()

	ТекстЗапроса =
	// расходы - пассивы
	"ВЫБРАТЬ
	|	&Период                                  КАК Период,
	|	МАКСИМУМ(ВТДанныеРасходы.НомерСтроки)    КАК НомерСтроки,
	|
	|	ВТДанныеРасходы.ХозяйственнаяОперация    КАК ХозяйственнаяОперация,
	|
	|	&Организация                             КАК Организация,
	|	ВТДанныеРасходы.Подразделение            КАК Подразделение,
	|
	|	ВТДанныеРасходы.СтатьяРасходов           КАК Статья,
	|	ВТДанныеРасходы.АналитикаРасходов        КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                             КАК АналитикаАктивовПассивов,
	|
	|	ВТДанныеРасходы.СтатьяАктивовПассивов    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                             КАК КорАналитикаАктивовПассивов,
	|
	|	СУММА(ВЫРАЗИТЬ(ВТДанныеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ВТДанныеРасходы.Сумма)                    КАК СуммаРегл
	|
	|ИЗ
	|	ВТРасходыДокумента КАК ВТДанныеРасходы
	|
	|ГДЕ
	|	ВТДанныеРасходы.Сумма <> 0
	|	И ВТДанныеРасходы.СтатьяРасходов Ссылка ПланВидовХарактеристик.СтатьиРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРасходы.СтатьяРасходов,
	|	ВТДанныеРасходы.АналитикаРасходов,
	|	ВТДанныеРасходы.СтатьяАктивовПассивов,
	|	ВТДанныеРасходы.ХозяйственнаяОперация,
	|	ВТДанныеРасходы.Подразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// пассивы - пассивы
	|ВЫБРАТЬ
	|	&Период                                  КАК Период,
	|	МАКСИМУМ(ВТДанныеРасходы.НомерСтроки)    КАК НомерСтроки,
	|
	|	ВТДанныеРасходы.ХозяйственнаяОперация    КАК ХозяйственнаяОперация,
	|
	|	&Организация                             КАК Организация,
	|	ВТДанныеРасходы.Подразделение            КАК Подразделение,
	|
	|	ВТДанныеРасходы.СтатьяРасходов           КАК Статья,
	|	НЕОПРЕДЕЛЕНО                             КАК АналитикаРасходов,
	|	ВТДанныеРасходы.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|	ВТДанныеРасходы.СтатьяАктивовПассивов    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                             КАК КорАналитикаАктивовПассивов,
	|
	|	СУММА(ВЫРАЗИТЬ(ВТДанныеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2))) КАК Сумма,
	|	СУММА(ВТДанныеРасходы.Сумма)             КАК СуммаРегл
	|
	|ИЗ
	|	ВТРасходыДокумента КАК ВТДанныеРасходы
	|
	|ГДЕ
	|	ВТДанныеРасходы.Сумма > 0
	|	И ВТДанныеРасходы.СтатьяРасходов Ссылка ПланВидовХарактеристик.СтатьиАктивовПассивов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеРасходы.СтатьяРасходов,
	|	ВТДанныеРасходы.АналитикаАктивовПассивов,
	|	ВТДанныеРасходы.СтатьяАктивовПассивов,
	|	ВТДанныеРасходы.ХозяйственнаяОперация,
	|	ВТДанныеРасходы.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПорядокОтраженияПрочихОпераций()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Период	КАК Дата,
	|	&Организация КАК Организация,
	|	&Ссылка КАК Документ,
	|	"""" КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.НачислениеОценочныхОбязательствПоОтпускам.ОценочныеОбязательства КАК Строки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВБухУчете КАК СпособыОтражения
	|		ПО СпособыОтражения.Ссылка = Строки.СпособОтраженияЗарплатыВБухучете
	|ГДЕ
	|	Строки.Ссылка = &Ссылка
	|	И СпособыОтражения.ЕстьПрочиеОперации
	|	И НЕ &КорректировкаОбязательств
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период           КАК Период,
	|	&Организация      КАК Организация,
	|	&Период           КАК ДатаОтражения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ОбновленияИнформационнойБазы

#КонецОбласти

#КонецОбласти