
#Область ПрограммныйИнтерфейс

//++ НЕ УТКА

#Область ДокументМаршрутныйЛистПроизводства

Функция ПечатьМаршрутныйЛистПроизводства(ОписаниеКоманды) Экспорт
	
	ОткрытьФорму(
		"Документ.МаршрутныйЛистПроизводства.Форма.ПараметрыПечатиМаршрутногоЛиста",
		Новый Структура("Объекты", ОписаниеКоманды.ОбъектыПечати))
	
КонецФункции

Процедура ПечатьМаршрутныхКартНаПродукцию(ДанныеОПродукции) Экспорт
	
	Если ДанныеОПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляПечати = ОперативныйУчетПроизводстваВызовСервера.ПодготовитьДанныеДляПечатиМаршрутнойКартыНаПродукцию(ДанныеОПродукции);
	
	Если ДанныеДляПечати.ЕстьПолуфабрикаты Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьМаршрутныхКартНаПродукциюЗавершение", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("АдресХранилища", ДанныеДляПечати.АдресХранилища);
		ОткрытьФорму("Документ.ЗаказНаПроизводство.Форма.ПечатьМаршрутныхКартНаПродукцию", ПараметрыФормы,,,,,ОписаниеОповещения);
	Иначе
		ПечатьМаршрутныхКартНаПродукциюЗавершение(ДанныеДляПечати, Неопределено);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ДокументОтчетДавальцу

Функция ПечатьАктаОтчетДавальцуMicrosoftWord(ОписаниеКоманды) Экспорт
	
	Состояние(НСтр("ru='Выполняется формирование печатных форм';uk='Виконується формування друкованих форм'"));
	
	ИмяМакета = "ПФ_DOC_Акт";
	ТипМакета = "doc";
	
	МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.МакетыИДанныеОбъектовДляПечати("Документ.ОтчетДавальцу",
		ИмяМакета,
		ОписаниеКоманды.ОбъектыПечати);
		
	ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	
	Секции = МакетИДанныеОбъекта.Макеты.ОписаниеСекций;
	
	Для Каждого ДокументСсылка Из ОписаниеКоманды.ОбъектыПечати Цикл
		
		ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
		
		Попытка
			
			ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета);
			Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(
				ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета);
				
			// Вывод колонтитулов документа.
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета]["ВерхнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
		
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет, Секции[ИмяМакета]["НижнийКолонтитул"]);
			УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета].Заголовок);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
			УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформацияШапки) Тогда
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета].ДополнительнаяИнформацияШапки);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
			КонецЕсли;
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета].ЗаголовокШапки);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
			
			ЕстьНДС = ДанныеОбъекта.УчитыватьНДС;
			ПоказыватьНДС = ДанныеОбъекта.ПоказыватьНДС;
			
			СуффиксОбласти = ?(ЕстьНДС И ПоказыватьНДС, "СНДС", "");
			
			ОбластьШапки = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета]["ШапкаТаблицы" + СуффиксОбласти]);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, ОбластьШапки, Ложь);

			ОбластьСтроки = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета]["Строка" + СуффиксОбласти]);
			УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,ОбластьСтроки, ДанныеОбъекта.Услуги, Ложь);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета].Итого);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
			УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
			
			Если ЕстьНДС Тогда
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета].ИтогоНДС);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
			КонецЕсли;
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета].СуммаПрописью);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
			УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
			
			Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета].Подписи);
			УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
			УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
				Область = УправлениеПечатьюКлиент.ОбластьМакета(Макет,Секции[ИмяМакета].ДополнительнаяИнформация);
				УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
				УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
			КонецЕсли;

			УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
			УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
			
			Возврат Ложь;
			
		КонецПопытки;
		
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
	КонецЦикла;
	
	Состояние(НСтр("ru='Формирование печатных форм завершено';uk='Формування друкованих форм завершено'"));
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

// Дополнтельный обработчик для документов, в печатных формах которых используются проводки.
// Проверяет, сформированы ли проводки по документам и предлагает отразить документы в регл. учете, если это не так.
// Затем документы выводятся на печать.
//
Функция ПроверкаОтраженияВРеглУчете(ОписаниеКоманды) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ОписаниеКоманды", ОписаниеКоманды);
	ПараметрыПечати.Вставить("ОбъектыПечати", ОписаниеКоманды.ОбъектыПечати);
	
	ДокументыДляПроверки = ПараметрыПечати.ОбъектыПечати;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьПечать", ЭтотОбъект, ПараметрыПечати);
	
	ДокументыБезПроводок = РеглУчетВызовСервера.ПроверитьПраваДоступаОтражениеДокументовВРеглУчете(ДокументыДляПроверки);
	ПараметрыПечати.Вставить("ДокументыБезПроводок", ДокументыБезПроводок);
	Если ДокументыБезПроводок.Количество() > 0 Тогда
		ПроверкаОтраженияВРеглУчетеДиалогОтражения(ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Продолжение функции УправлениеПечатьюУТКлиент.ПроверкаОтраженияВРеглУчете
Процедура ПроверкаОтраженияВРеглУчетеДиалогОтражения(ОписаниеПроцедурыЗавершения)
	
	ПараметрыПечати = ОписаниеПроцедурыЗавершения.ДополнительныеПараметры;
	
	Если ПараметрыПечати.ДокументыБезПроводок.Количество() = 1 Тогда
		ТекстВопроса = НСтр("ru='Для заполнения в печатной форме счетов учета необходимо, чтобы документ был отражен в регл. учете.
        |Отразить документ в регл. учете перед продолжением печати?'
        |;uk='Для заповнення у друкованій формі рахунків обліку необхідно, щоб документ був відображений у регл. обліку.
        |Відобразити документ в регл. обліку перед продовженням друку?'");
	Иначе
		ТекстВопроса = НСтр("ru='Для заполнения в печатной форме счетов учета необходимо, чтобы документы были отражены в регл. учете.
        |Отразить документы в регл. учете перед продолжением печати?'
        |;uk='Для заповнення у друкованій формі рахунків обліку необхідно, щоб документи були відображені в регл. обліку.
        |Відобразити документи в регл. обліку перед продовженням друку?'");
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаОтраженияВРеглУчетеФормированиеПроводок", ЭтотОбъект, ОписаниеПроцедурыЗавершения);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

// Продолжение функции УправлениеПечатьюУТКлиент.ПроверкаОтраженияВРеглУчете
Процедура ПроверкаОтраженияВРеглУчетеФормированиеПроводок(РезультатВопроса, ОписаниеПроцедурыЗавершения) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПечати = ОписаниеПроцедурыЗавершения.ДополнительныеПараметры;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДокументыБезПроводок = РеглУчетВызовСервера.ОтразитьДокументыВРеглУчете(ПараметрыПечати.ДокументыБезПроводок, Истина);
		ПараметрыПечати.Вставить("ДокументыБезПроводок", ДокументыБезПроводок);
	Иначе
		ПараметрыПечати.Вставить("ДокументыБезПроводок", Новый Массив);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеПроцедурыЗавершения);
	
КонецПроцедуры

// Продолжение функции УправлениеПечатьюУТКлиент.ПроверкаОтраженияВРеглУчете
Процедура ПродолжитьПечать(Результат, ПараметрыПечати) Экспорт
	
	ОписаниеКоманды = ПараметрыПечати.ОписаниеКоманды;
	ОбъектыПечати = ПараметрыПечати.ОбъектыПечати;
	
	ПередаваемыеПараметрыПечати = Новый Структура;
	ПередаваемыеПараметрыПечати.Вставить("ДокументыБезПроводок", ПараметрыПечати.ДокументыБезПроводок);
	
	Если ОписаниеКоманды.Идентификатор = "КомплектДокументов" Тогда
		УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов(ОписаниеКоманды);
	ИначеЕсли ОписаниеКоманды.Идентификатор = "КомплектДокументовСНастройкой" Тогда
		УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой(ОписаниеКоманды);
	Иначе
		Если ОписаниеКоманды.СразуНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(ОписаниеКоманды.МенеджерПечати, ОписаниеКоманды.Идентификатор,
				ОбъектыПечати, ПередаваемыеПараметрыПечати);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ОписаниеКоманды.МенеджерПечати, ОписаниеКоманды.Идентификатор,
				ОбъектыПечати, ОписаниеКоманды.Форма, ПередаваемыеПараметрыПечати);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ПечатьМаршрутныхКартНаПродукциюЗавершение(ДанныеДляПечати, ДополнительныеПараметры) Экспорт

	Если ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли; 
		
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ДополнительныеПараметры", ДанныеДляПечати.ДанныеДляПечати);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.ЗаказНаПроизводство",
		"МаршрутнаяКартаНаПродукцию",
		ДанныеДляПечати.МассивОбъектов,
		Неопределено,
		ПараметрыПечати);
		
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти
