
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет наборы записей регистра ЗначенияТарифов.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		ДанныеРазрядовТарифнойСетки - таблица значений с колонками
//			ДатаСобытия
//			ТарифнаяСетка
//			РазрядКатегория
//			РазрядныйКоэффициент.
//			Тариф
//
Процедура СформироватьДвиженияЗначенийРазрядовТарифнойСетки(Движения, ДанныеРазрядовТарифнойСетки) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДанныеРазрядовТарифнойСетки) Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ЗначенияТарифов.Записывать = Истина;
	
	Для Каждого ТекСтрока Из ДанныеРазрядовТарифнойСетки Цикл
		
		НоваяСтрока = Движения.ЗначенияТарифов.Добавить();
		НоваяСтрока.Период = ТекСтрока.ДатаСобытия;
		НоваяСтрока.ТарифнаяСетка = ТекСтрока.ТарифнаяСетка;
		НоваяСтрока.РазрядКатегория = ТекСтрока.РазрядКатегория;
		НоваяСтрока.РазрядныйКоэффициент = ТекСтрока.РазрядныйКоэффициент;
		НоваяСтрока.Тариф = ТекСтрока.Тариф;
		НоваяСтрока.Используется = ТекСтрока.Используется;
		
	КонецЦикла;
	
	Движения.ЗначенияБазовыхТарифов.Записывать = Истина;

	НоваяСтрока = Движения.ЗначенияБазовыхТарифов.Добавить();
	НоваяСтрока.Период = ТекСтрока.ДатаСобытия;
	НоваяСтрока.ТарифнаяСетка = ТекСтрока.ТарифнаяСетка;
	НоваяСтрока.Тариф = ТекСтрока.БазовыйТарифГруппы;

КонецПроцедуры

// Заполняет наборы записей регистра РазрядыКатегорииСотрудников.
// Параметры:
//		Движения - коллекция движений регистратора.
//		РазрядыКатегорииСотрудников - таблица значений с колонками
//			ДатаСобытия.
//			Сотрудник
//			РазрядКатегория
//			ДействуетДо
//
Процедура СформироватьДвиженияРазрядовКатегорийСотрудников(Движения, РазрядыКатегорииСотрудников) Экспорт

	Если Не ЗначениеЗаполнено(РазрядыКатегорииСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = РазрядыКатегорииСотрудников.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.РазрядыКатегорииСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.РазрядыКатегорииСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = РазрядыКатегорииСотрудников.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из РазрядыКатегорииСотрудников Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		НоваяСтрока.Период = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
	КонецЦикла;
	
	ИзмеренияДаты.Свернуть("Сотрудник, Период");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазрядыКатегорииСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РазрядыКатегорииСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
	|	РазрядыКатегорииСотрудников.Сотрудник,
	|	РазрядыКатегорииСотрудников.РазрядКатегория КАК ТекущееЗначение
	|ИЗ
	|	ВТРазрядыКатегорииСотрудниковСрезПоследних КАК РазрядыКатегорииСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();

	РазрядыКатегорииСотрудников.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("СправочникСсылка.РазрядыКатегорииДолжностей"));
	СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строка = РазрядыКатегорииСотрудников.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
	КонецЦикла;
		
	Для Каждого Строка Из РазрядыКатегорииСотрудников Цикл
		
		Если Не ИспользуютсяВозвратныеСобытия Или Не ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
			Если Строка.РазрядКатегория = Строка.ТекущееЗначение Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Движения.РазрядыКатегорииСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.РазрядыКатегорииСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.РазрядКатегория = Строка.РазрядКатегория;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.РазрядКатегорияПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет наборы записей регистра ПКУСотрудников.
// Параметры:
//		Движения - коллекция движений регистратора.
//		ПКУСотрудников - таблица значений с колонками
//			ДатаСобытия.
//			Сотрудник
//			ПКУ
//			ДействуетДо
//
Процедура СформироватьДвиженияПКУСотрудников(Движения, ПКУСотрудников) Экспорт

	Если Не ЗначениеЗаполнено(ПКУСотрудников) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ПКУСотрудников.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ПКУСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПКУСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = ПКУСотрудников.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из ПКУСотрудников Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		НоваяСтрока.Период = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
	КонецЦикла;
	
	ИзмеренияДаты.Свернуть("Сотрудник, Период");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПКУСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПКУСотрудников.Период, ДЕНЬ) КАК ДатаСобытия,
	|	ПКУСотрудников.Сотрудник,
	|	ПКУСотрудников.ПКУ КАК ТекущееЗначение
	|ИЗ
	|	ВТПКУСотрудниковСрезПоследних КАК ПКУСотрудников";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ПКУСотрудников.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("СправочникСсылка.РазрядыКатегорииДолжностей"));
	СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строка = ПКУСотрудников.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
	КонецЦикла;
		
	Для Каждого Строка Из ПКУСотрудников Цикл
		
		Если Не ИспользуютсяВозвратныеСобытия Или Не ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
			Если Строка.ПКУ = Строка.ТекущееЗначение Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Движения.ПКУСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ПКУСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.ПКУ = Строка.ПКУ;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.ПКУПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает значения действующих тарифов и дату последнего изменения тарифной сетки.
//
Функция ДанныеТарифнойСетки(ТарифнаяСетка, ДатаСобытия = '00010101', Регистратор = Неопределено) Экспорт 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить().Период = ДатаСобытия;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТарифнаяСетка", "=", ТарифнаяСетка);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	ПараметрыПостроения.ВключаяГраницу = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияТарифов",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	ПараметрыПостроения.Отборы.Очистить();	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТарифнаяСетка", "=", ТарифнаяСетка);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияБазовыхТарифов",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
			
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияТарифов.РазрядКатегория КАК РазрядКатегория,
		|	ВЫРАЗИТЬ(ЗначенияТарифов.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).Наименование КАК РазрядНаименование,
		|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(ЗначенияТарифов.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).НаименованиеПолное КАК СТРОКА(1024)) КАК РазрядНаименованиеПолное,
		|	ВЫРАЗИТЬ(ЗначенияТарифов.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	ЕСТЬNULL(ЗначенияТарифов.РазрядныйКоэффициент, 0) КАК РазрядныйКоэффициент,
		|	ЕСТЬNULL(ЗначенияТарифов.Тариф, 0) КАК Тариф
		|ИЗ
		|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
		|ГДЕ
		|	ЕСТЬNULL(ЗначенияТарифов.Используется, ЛОЖЬ) = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗначенияТарифов.ПериодЗаписи) КАК Период,
		|	МАКСИМУМ(ЗначенияБазовыхТарифов.Тариф) КАК БазовыйТарифГруппы
		|ИЗ
		|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияБазовыхТарифовСрезПоследних КАК ЗначенияБазовыхТарифов
		|		ПО (ИСТИНА)";
				   
	РезультатыЗапросов = Запрос.ВыполнитьПакет();			   
				   
	ЗначенияТарифов = РезультатыЗапросов[0].Выгрузить();			   
	
	Выборка = РезультатыЗапросов[1].Выбрать();
	
	ДатаИзменения = '00010101';
	Если Выборка.Следующий() Тогда 
		ДатаИзменения = Выборка.Период;
		БазовыйТарифГруппы = Выборка.БазовыйТарифГруппы;
	КонецЕсли;
	
	СтруктураДанныхТарифнойСетки = Новый Структура("ЗначенияТарифов,ДатаИзменения,БазовыйТарифГруппы", ЗначенияТарифов, ДатаИзменения, БазовыйТарифГруппы);
	
	Возврат СтруктураДанныхТарифнойСетки;
	
КонецФункции

// Возвращает описание параметров создания временной таблицы ВТЗначенияПоказателейТарифныхСеток.
//
// Параметры:
//		ИмяВТЗаданныеТарифныеСетки
//		ИмяПоляПериод
//		ИмяПоляТарифнаяСетка
//		ИмяПоляРазрядКатегория.
//		УчитыватьРазрядКатегорию - Булево, если Ложь срез, формируется без учета значений поля РазрядКатегория,
//						используется для построения таблиц со сводными значениями.
//
Функция ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток(ИмяВТЗаданныеТарифныеСетки, ИмяПоляПериод = "Период", ИмяПоляТарифнаяСетка = "ТарифнаяСетка", ИмяПоляРазрядКатегория = "РазрядКатегория") Экспорт
	
	ПараметрыПостроения = Новый Структура;
	
	ПараметрыПостроения.Вставить("ИмяВТЗаданныеТарифныеСетки", ИмяВТЗаданныеТарифныеСетки);
	ПараметрыПостроения.Вставить("ИмяПоляПериод", ИмяПоляПериод);
	ПараметрыПостроения.Вставить("ИмяПоляТарифнаяСетка", ИмяПоляТарифнаяСетка);
	ПараметрыПостроения.Вставить("ИмяПоляРазрядКатегория", ИмяПоляРазрядКатегория);
	ПараметрыПостроения.Вставить("УчитыватьРазрядКатегорию", Истина);
	
	Возврат ПараметрыПостроения;
	
КонецФункции

// Возвращает запрос, создающий временную таблицу ВТЗначенияПоказателейТарифныхСеток.
//
// Параметры:
//		ТолькоРазрешенные
//		ПараметрыПостроения - описание параметров построения ВТЗначенияПоказателейТарифныхСеток
//		                      см.ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток.
//		ПоляОтбора  - Массив структур с ключами "ЛевоеЗначение,ВидСравнения,ПравоеЗначение".
//					- Соответствие массивов структур отборов именам регистров сведений
//		ИмяВТЗначенияПоказателейТарифныхСеток.
//
// ВозвращаемоеЗначение
//		Запрос
//
Функция ЗапросВТЗначенияПоказателейТарифныхСеток(ТолькоРазрешенные, ПараметрыПостроения, ПоляОтбора = Неопределено, ИмяВТЗначенияПоказателейТарифныхСеток = "ВТЗначенияПоказателейТарифныхСеток") Экспорт
	
	МассивИзмерений = Новый Массив;
	МассивИзмерений.Добавить("ТарифнаяСетка");
	Если ПараметрыПостроения.УчитыватьРазрядКатегорию Тогда
		МассивИзмерений.Добавить("РазрядКатегория");
	КонецЕсли; 
	
	Если ТипЗнч(ПоляОтбора) = Тип("Соответствие") Тогда
		Отбор = ПоляОтбора.Получить("ЗначенияТарифов");
	Иначе
		Отбор = ПоляОтбора;
	КонецЕсли; 
	
	ИмяВТЗначенияТарифовСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЗначенияТарифовСрезПоследних");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ПараметрыПостроения.ИмяВТЗаданныеТарифныеСетки, МассивИзмерений);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ПараметрыПостроения.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ТарифнаяСетка", ПараметрыПостроения.ИмяПоляТарифнаяСетка);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("РазрядКатегория", ПараметрыПостроения.ИмяПоляРазрядКатегория);
	
	ПараметрыПостроенияСреза = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияСреза.Отборы = Отбор;
		
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ЗначенияТарифов",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроенияСреза,
		Истина,
		ИмяВТЗначенияТарифовСрезПоследних);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаданныеТарифныеСетки.Период,
		|	ЗаданныеТарифныеСетки.ТарифнаяСетка,
		|	ЗаданныеТарифныеСетки.РазрядКатегория,
		|	ЕСТЬNULL(ЗначенияТарифовСрезПоследних.Тариф, 0) КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ ВТЗначенияПоказателейТарифныхСеток
		|{ВЫБРАТЬ
		|	Период,
		|	ТарифнаяСетка,
		|	РазрядКатегория,
		|	ЗначениеПоказателя}
		|ИЗ
		|	ВТЗаданныеТарифныеСетки КАК ЗаданныеТарифныеСетки
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифовСрезПоследних
		|		ПО ЗаданныеТарифныеСетки.Период = ЗначенияТарифовСрезПоследних.Период
		|			И ЗаданныеТарифныеСетки.ТарифнаяСетка = ЗначенияТарифовСрезПоследних.ТарифнаяСетка
		|			И (ЗаданныеТарифныеСетки.РазрядКатегория = ЗначенияТарифовСрезПоследних.РазрядКатегория
		|				ИЛИ ЗаданныеТарифныеСетки.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка))}";
				   
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗаданныеТарифныеСетки", ПараметрыПостроения.ИмяВТЗаданныеТарифныеСетки);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаданныеТарифныеСетки.Период", "ЗаданныеТарифныеСетки." + ПараметрыПостроения.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаданныеТарифныеСетки.ТарифнаяСетка", "ЗаданныеТарифныеСетки." + ПараметрыПостроения.ИмяПоляТарифнаяСетка);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗаданныеТарифныеСетки.РазрядКатегория", "ЗаданныеТарифныеСетки." + ПараметрыПостроения.ИмяПоляРазрядКатегория);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗначенияПоказателейТарифныхСеток", ИмяВТЗначенияПоказателейТарифныхСеток);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗначенияТарифовСрезПоследних", ИмяВТЗначенияТарифовСрезПоследних);
	
	Запрос.Текст =
		Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Создает временную таблицу со значениями показателей, соответствующими разрядам тарифной сетки.
// Параметры:
//
//		МенеджерВременныхТаблиц
//      ТолькоРазрешенные - если истина, выбираются только разрешенные записи.
//      ПараметрыПостроения - описание параметров построения ВТЗначенияПоказателейТарифныхСеток
//                            см.ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток.
//		ПоляОтбора  - Массив структур с ключами "ЛевоеЗначение,ВидСравнения,ПравоеЗначение".
//					- Соответствие массивов структур отборов именам регистров сведений.
//
Процедура СоздатьВТЗначенияПоказателейТарифныхСеток(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПостроения, ПоляОтбора = Неопределено) Экспорт
	
	Запрос = ЗапросВТЗначенияПоказателейТарифныхСеток(ТолькоРазрешенные, ПараметрыПостроения, ПоляОтбора);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает запрос, создающий временную таблицу ЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке.
//
// Параметры:
//		ТолькоРазрешенные
//		ПараметрыПостроения - описание параметров построения ВТЗначенияПоказателейТарифныхСеток
//		                      см.ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток.
//		ПоляОтбора  - Массив структур с ключами "ЛевоеЗначение,ВидСравнения,ПравоеЗначение".
//					- Соответствие массивов структур отборов именам регистров сведений
//		ИмяВТСводныеЗначенияПоказателейПоТарифнойСетке.
//		ИмяВТЗначенияПоказателейТарифныхСеток - параметр задает имя временной таблицы, которая создается в ходе создания
//		                                        ВТСводныеЗначенияПоказателейПоТарифнойСетке в параметр можно передать
//		                                        ожидаемое имя этой таблицы, если параметр не задан, в него сохраняется имя
//		                                        временной таблицы, используемое при создании
//		                                        ВТСводныеЗначенияПоказателейПоТарифнойСетке.
//
// ВозвращаемоеЗначение
//		Запрос
//
Функция ЗапросВТСводныеЗначенияПоказателейПоТарифнымСеткам(ТолькоРазрешенные, ПараметрыПостроения, ПоляОтбора = Неопределено, ИмяВТСводныеЗначенияПоказателейПоТарифнойСетке = "ВТСводныеЗначенияПоказателейПоТарифнойСетке", ИмяВТЗначенияПоказателейТарифныхСеток = "") Экспорт
	
	ПараметрыПостроения.УчитыватьРазрядКатегорию = Ложь;
	
	Если ПустаяСтрока(ИмяВТЗначенияПоказателейТарифныхСеток) Тогда
		ИмяВТЗначенияПоказателейТарифныхСеток = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЗначенияПоказателейТарифныхСеток");
	КонецЕсли;
	
	Запрос = ЗапросВТЗначенияПоказателейТарифныхСеток(ТолькоРазрешенные, ПараметрыПостроения, , ИмяВТЗначенияПоказателейТарифныхСеток);
	
	ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке =
		"ВЫБРАТЬ
		|	ЗначенияПоказателейТарифныхСеток.Период КАК Период,
		|	ЗначенияПоказателейТарифныхСеток.ТарифнаяСетка,
		|	МИНИМУМ(ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя) КАК Значение,
		|	МИНИМУМ(ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя) КАК ЗначениеМин,
		|	МАКСИМУМ(ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя) КАК ЗначениеМакс
		|ПОМЕСТИТЬ ВТСводныеЗначенияПоказателейПоТарифнойСетке
		|ИЗ
		|	ВТЗначенияПоказателейТарифныхСеток КАК ЗначенияПоказателейТарифныхСеток
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателейТарифныхСеток.Период,
		|	ЗначенияПоказателейТарифныхСеток.ТарифнаяСетка"; 

	ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке = СтрЗаменить(ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке,
		"ВТЗначенияПоказателейТарифныхСеток", ИмяВТЗначенияПоказателейТарифныхСеток);
	ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке = СтрЗаменить(ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке,
		"ВТСводныеЗначенияПоказателейПоТарифнойСетке", ИмяВТСводныеЗначенияПоказателейПоТарифнойСетке);
			
	Запрос.Текст = 
		Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапросВТСводныеЗначенияПоказателейПоТарифнойСетке;
		
	Возврат Запрос;
	
КонецФункции

// Возвращает описание значений показателей тарифной сетки, с учетом разряда.
//
// Параметры:
//		ТарифнаяСетка
//		РазрядКатегория
//		ДатаСведений - Дата, если не указать возвращены будут самые последние значения.
//
// ВозвращаемоеЗначение:
//		Структура:
//			* Период
//			* ТарифнаяСетка
//			* РазрядКатегория
//			* Значение
//			* ЗначениеМин
//			* ЗначениеМакс
//
Функция ЗначениеПоказателейТарифнойСетки(ТарифнаяСетка, РазрядКатегория, ДатаСведений = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ?(ДатаСведений = Неопределено, '00010101', ДатаСведений));
	Запрос.УстановитьПараметр("ТарифнаяСетка", ТарифнаяСетка);
	Запрос.УстановитьПараметр("РазрядКатегория", РазрядКатегория);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	&ТарифнаяСетка КАК ТарифнаяСетка,
		|	&РазрядКатегория КАК РазрядКатегория
		|ПОМЕСТИТЬ ВТЗаданныеТарифныеСетки";
		
	Запрос.Выполнить();
	
	ПараметрыПостроения = ПараметрыПостроенияВТЗначенияПоказателейТарифныхСеток("ВТЗаданныеТарифныеСетки");
	
	ЗапросЗначений = ЗапросВТСводныеЗначенияПоказателейПоТарифнымСеткам(Истина, ПараметрыПостроения, , "ВТСводныеЗначенияПоказателейПоТарифнойСетке", "ВТЗначенияПоказателейТарифныхСеток");
	ЗапросЗначений.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросЗначений.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ТарифнаяСетка", "=", ТарифнаяСетка);

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияБазовыхТарифов",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТЗаданныеТарифныеСетки"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаданныеТарифныеСетки.Период,
		|	ЗаданныеТарифныеСетки.ТарифнаяСетка,
		|	ЗаданныеТарифныеСетки.РазрядКатегория,
		|	ВЫБОР
		|		КОГДА &РазрядКатегория <> ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|				И НЕ ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя ЕСТЬ NULL 
		|			ТОГДА ЗначенияПоказателейТарифныхСеток.ЗначениеПоказателя
		|		КОГДА &РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
		|				И НЕ СводныеЗначенияПоказателейПоТарифнойСетке.Значение ЕСТЬ NULL 
		|			ТОГДА СводныеЗначенияПоказателейПоТарифнойСетке.Значение
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Значение,
		|	ЕСТЬNULL(СводныеЗначенияПоказателейПоТарифнойСетке.ЗначениеМин, 0) КАК ЗначениеМин,
		|	ЕСТЬNULL(СводныеЗначенияПоказателейПоТарифнойСетке.ЗначениеМакс, 0) КАК ЗначениеМакс
		|ИЗ
		|	ВТЗаданныеТарифныеСетки КАК ЗаданныеТарифныеСетки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейТарифныхСеток КАК ЗначенияПоказателейТарифныхСеток
		|		ПО ЗаданныеТарифныеСетки.Период = ЗначенияПоказателейТарифныхСеток.Период
		|			И ЗаданныеТарифныеСетки.РазрядКатегория = ЗначенияПоказателейТарифныхСеток.РазрядКатегория
		|			И (ЗаданныеТарифныеСетки.РазрядКатегория <> ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка))
		|			И ЗаданныеТарифныеСетки.ТарифнаяСетка = ЗначенияПоказателейТарифныхСеток.ТарифнаяСетка
		|			И (ЗаданныеТарифныеСетки.ТарифнаяСетка <> ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСводныеЗначенияПоказателейПоТарифнойСетке КАК СводныеЗначенияПоказателейПоТарифнойСетке
		|		ПО ЗаданныеТарифныеСетки.Период = СводныеЗначенияПоказателейПоТарифнойСетке.Период
		|			И ЗаданныеТарифныеСетки.ТарифнаяСетка = СводныеЗначенияПоказателейПоТарифнойСетке.ТарифнаяСетка
		|			И (ЗаданныеТарифныеСетки.ТарифнаяСетка <> ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияБазовыхТарифовСрезПоследних КАК ЗначенияБазовыхТарифов
		|		ПО ЗаданныеТарифныеСетки.Период = ЗначенияБазовыхТарифов.Период
		|			И ЗаданныеТарифныеСетки.ТарифнаяСетка = ЗначенияБазовыхТарифов.ТарифнаяСетка
		|			И (ЗаданныеТарифныеСетки.ТарифнаяСетка <> ЗНАЧЕНИЕ(Справочник.ТарифныеСетки.ПустаяСсылка))";
		
	ЗначенияПоказателей = Новый Структура("Период,ТарифнаяСетка,РазрядКатегория,Значение,ЗначениеМин,ЗначениеМакс",
		ДатаСведений, ТарифнаяСетка, РазрядКатегория, , 0, 0, 0);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияПоказателей, Выборка);
		
	КонецЕсли; 
	
	Возврат ЗначенияПоказателей;
	
КонецФункции

Процедура СоздатьВТПериодыИзмененияБазовогоТарифа(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник,
	|	НачисленияСотрудников.Начисление,
	|	НачисленияСотрудников.ДокументОснование,
	|	ЗначенияБазовыхТарифов.Период КАК Период
	|ПОМЕСТИТЬ ВТПериодыИзмененияБазовогоТарифа
	|ИЗ
	|	ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО НачисленияСотрудников.Начисление = НачисленияПоказатели.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	|		ПО НачисленияСотрудников.Сотрудник = РабочиеМестаСотрудников.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияБазовыхТарифов КАК ЗначенияБазовыхТарифов
	|		ПО (РабочиеМестаСотрудников.ДолжностьПоШтатномуРасписанию.ТарифнаяСетка = ЗначенияБазовыхТарифов.ТарифнаяСетка)
	|			И (ЗначенияБазовыхТарифов.Период МЕЖДУ &Начало И &Окончание)
	|ГДЕ
	|	НачисленияПоказатели.Показатель = &БазовыйТарифГруппы";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("БазовыйТарифГруппы", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.БазовыйТарифГруппы"));
	Запрос.Выполнить();

	// Добавляем упоминание временной таблицы.
	ИменаВТ.Добавить("ВТПериодыИзмененияБазовогоТарифа");
	
КонецПроцедуры

Функция ИнициализироватьЗаголовокФормыИРеквизитов(Объект, ВидТарифнойСетки = Неопределено, ЭтоНовый = Ложь) Экспорт
	
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	Объект = Объект + ?(ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф, "Тариф", "");
	Объект = Объект + ?(ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Надбавка, "Надбавка", "");
	
	СоответствиеЭлементаИЗаголовка = Новый Соответствие;
	
	Если РаботаВБюджетномУчреждении Тогда 
		
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписок", 			НСтр("ru='Профессиональные квалификационные группы и надбавки';uk='Професійні кваліфікаційні групи і надбавки'"));	
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаЭлементТариф", 	НСтр("ru='Профессиональная квалификационная группа';uk='Професійна кваліфікаційна група'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписокТариф", 	НСтр("ru='Профессиональные квалификационные группы';uk='Професійні кваліфікаційні групи'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаЭлементНадбавка",	НСтр("ru='Квалификационная надбавка';uk='Кваліфікаційна надбавка'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписокНадбавка", 	НСтр("ru='Квалификационные надбавки';uk='Кваліфікаційні надбавки'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписок", 		   НСтр("ru='Утверждения ПКГ/ПКУ и квалификационных надбавок';uk='Затвердження ПКГ/ПКУ та кваліфікаційних надбавок'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиЭлементТариф",	   НСтр("ru='Утверждение ПКГ/ПКУ';uk='Затвердження ПКГ/ПКУ'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписокТариф",	   НСтр("ru='Утверждения ПКГ/ПКУ';uk='Затвердження ПКГ/ПКУ'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиЭлементНадбавка", НСтр("ru='Утверждение квалификационных надбавок';uk='Затвердження кваліфікаційних надбавок'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписокНадбавка",  НСтр("ru='Утверждения квалификационных надбавок';uk='Затвердження кваліфікаційних надбавок'"));	
		
		СоответствиеЭлементаИЗаголовка.Вставить("ИзменениеРазрядаСписок", 	НСтр("ru='Изменения квалификационных категорий сотрудников';uk='Зміни кваліфікаційних категорій співробітників'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ИзменениеРазрядаЭлемент", 	НСтр("ru='Изменение квалификационной категории сотрудника';uk='Зміна кваліфікаційної категорії співробітника'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовСписок", 		НСтр("ru='Квалификационные категории (уровни)';uk='Кваліфікаційні категорії (рівні)'"));
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовСписокТариф", 	НСтр("ru='Профессиональные квалификационные уровни';uk='Професійні кваліфікаційні рівні'"));
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовЭлемент", 		НСтр("ru='Квалификационная категория (уровни)';uk='Кваліфікаційна категорія (рівні)'"));
					
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифнаяСеткаТариф",			НСтр("ru='ПКГ';uk='ПКГ'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияТариф", 		НСтр("ru='ПКУ';uk='ПКУ'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифнаяСеткаНадбавка",		НСтр("ru='Вид надбавки';uk='Вид надбавки'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияНадбавка", 		НСтр("ru='Квалиф. категория';uk='Кваліф. категорія'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСетки",			НСтр("ru='Все изменения тарифной группы';uk='Всі зміни тарифної групи'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСеткиТариф",		НСтр("ru='Все изменения ПКГ';uk='Всі зміни ПКГ'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСеткиНадбавка",	НСтр("ru='Все изменения надбавки';uk='Всі зміни надбавки'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияВКадровыхДокументах",	  НСтр("ru='Квалиф. категория';uk='Кваліф. категорія'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифВКадровыхДокументах",	  НСтр("ru='Квалиф. надбавка';uk='Кваліф. надбавка'"));
		
	Иначе
		
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписок", 			НСтр("ru='Тарифные группы';uk='Тарифні групи'"));	
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаЭлементТариф",	НСтр("ru='Тарифная группа';uk='Тарифна група'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписокТариф", 	НСтр("ru='Тарифные группы';uk='Тарифні групи'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаЭлементНадбавка",	НСтр("ru='Тарифная группа надбавки';uk='Тарифна група надбавки'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ТарифнаяСеткаСписокНадбавка", 	НСтр("ru='Тарифные группы надбавок';uk='Тарифні групи надбавок'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписок", 		НСтр("ru='Утверждения тарифных групп';uk='Затвердження тарифних груп'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиЭлементТариф", НСтр("ru='Утверждение тарифной группы';uk='Затвердження тарифної групи'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписокТариф",  НСтр("ru='Утверждения тарифных групп';uk='Затвердження тарифних груп'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиЭлементНадбавка", НСтр("ru='Утверждение тарифной группы надбавок';uk='Затвердження тарифної групи надбавок'"));
		СоответствиеЭлементаИЗаголовка.Вставить("УтверждениеТарифнойСеткиСписокНадбавка",  НСтр("ru='Утверждения тарифных групп надбавок';uk='Затвердження тарифних груп надбавок'"));	
		
		СоответствиеЭлементаИЗаголовка.Вставить("ИзменениеРазрядаСписок", 	НСтр("ru='Изменения квалификационных разрядов (категорий) сотрудников';uk='Зміни кваліфікаційних розрядів (категорій) працівників'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ИзменениеРазрядаЭлемент",  НСтр("ru='Изменение квалификационного разряда (категории) сотрудника';uk='Зміна кваліфікаційного розряду (категорії) співробітника'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовСписок", 		НСтр("ru='Квалификационные разряды (категории)';uk='Кваліфікаційні розряди (категорії)'"));
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовСписокТариф", 	НСтр("ru='Квалификационные разряды (категории)';uk='Кваліфікаційні розряди (категорії)'"));
		СоответствиеЭлементаИЗаголовка.Вставить("СправочникРазрядовЭлемент", 		НСтр("ru='Квалификационный разряд (категория)';uk='Кваліфікаційний розряд (категорія)'"));
					
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифнаяСеткаТариф", 		НСтр("ru='Тарифная группа';uk='Тарифна група'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияТариф", 	НСтр("ru='Разряд (категория)';uk='Розряд (категорія)'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифнаяСеткаНадбавка",	НСтр("ru='Тарифная группа надбавки';uk='Тарифна група надбавки'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияНадбавка",  НСтр("ru='Разряд (категория) надбавки';uk='Розряд (категорія) надбавки'"));
		
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСетки",		НСтр("ru='Все изменения тарифной группы';uk='Всі зміни тарифної групи'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСеткиТариф",	НСтр("ru='Все изменения тарифной группы';uk='Всі зміни тарифної групи'"));
		СоответствиеЭлементаИЗаголовка.Вставить("ВсеИзмененияТарифнойСеткиНадбавка",	НСтр("ru='Все изменения тарифной группы надбавки';uk='Всі зміни тарифної групи надбавки'"));

		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитРазрядКатегорияВКадровыхДокументах", НСтр("ru='Разряд (категория)';uk='Розряд (категорія)'"));
		СоответствиеЭлементаИЗаголовка.Вставить("РеквизитТарифВКадровыхДокументах",	  НСтр("ru='Оклад (тариф)';uk='Оклад (тариф)'"));
		
	КонецЕсли;
	
	Заголовок = Строка(СоответствиеЭлементаИЗаголовка.Получить(Объект)) + ?(ЭтоНовый, НСтр("ru=' (Создание)';uk=' (Створення)'"),"");
	
	Возврат Заголовок;
	
КонецФункции

Функция ПоказателиТарифнойСетки(ТарифнаяСетка, СчитатьПоказателиПоДолжности = Ложь, СчитатьПоказателиПоКвалификации = Истина) Экспорт    
	
	Список = Новый Массив;
	
	Если ТарифнаяСетка <> Неопределено И ТарифнаяСетка <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ТарифныеСетки.ПустаяСсылка") Тогда
		
		ВидТарифнойСетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТарифнаяСетка,"ВидТарифнойСетки");
		
		Если СчитатьПоказателиПоДолжности Тогда
			
			Если ВидТарифнойСетки = ПредопределенноеЗначение("Перечисление.ВидыТарифныхСеток.Тариф") Тогда		
				Список.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОкладПоДолжности"));
				Список.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДневнойТарифПоДолжности"));
				Список.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ЧасовойТарифПоДолжности"));
			ИначеЕсли ВидТарифнойСетки = ПредопределенноеЗначение("Перечисление.ВидыТарифныхСеток.Надбавка") Тогда
				Список.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДолжностнаяНадбавка"));
			КонецЕсли;
			
		КонецЕсли;
		
		Если СчитатьПоказателиПоКвалификации Тогда
			
			Если ВидТарифнойСетки = ПредопределенноеЗначение("Перечисление.ВидыТарифныхСеток.Тариф") Тогда		
				Список.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.Оклад"));
				Список.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаДневная"));
				Список.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая"));
			ИначеЕсли ВидТарифнойСетки = ПредопределенноеЗначение("Перечисление.ВидыТарифныхСеток.Надбавка") Тогда
				Список.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КвалификационнаяНадбавка"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Список
	
КонецФункции

// Одновременно по сотруднику может быть установлен только один из основных показателей.
Функция ПоказательТарифнойСеткиСотрудника(ТарифнаяСетка = Неопределено, ТарифнаяСеткаНадбавки = Неопределено, НачисленияСотрудника) Экспорт
	
	МассивНачислений = Новый Массив;
	МассивПоказателей = Новый Массив;
	СписокПоказателейТарифнойСетки = ПоказателиТарифнойСетки(ТарифнаяСетка, Ложь);
	СписокПоказателейТарифнойСеткиНадбавки = ПоказателиТарифнойСетки(ТарифнаяСеткаНадбавки, Ложь);

	Для каждого СтрокаНачислений Из НачисленияСотрудника Цикл
				
		ОписаниеНачисления = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
		Для каждого ОписаниеПоказателя Из ОписаниеНачисления.Показатели Цикл
			Если ОписаниеПоказателя.ЗапрашиватьПриВводе Тогда
				Если СписокПоказателейТарифнойСетки.Найти(ОписаниеПоказателя.Показатель) <> Неопределено Тогда
					Возврат ОписаниеПоказателя.Показатель;
				ИначеЕсли СписокПоказателейТарифнойСеткиНадбавки.Найти(ОписаниеПоказателя.Показатель) <> Неопределено Тогда
					Возврат ОписаниеПоказателя.Показатель;	
				КонецЕсли;	
			КонецЕсли; 
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьПКУСотрудникаПоУмолчанию(Форма, ПутьКРеквизиту, ДатаСобытия, ДолжностьПоШтатномуРасписанию) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("РазрешеноИзменениеПКУВКадровыхДокументах") Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту, Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту, Неопределено);
		Возврат;
	КонецЕсли;
	
	ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ДолжностьПоШтатномуРасписанию, ДатаСобытия, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизиту, ДанныеПозиции.РазрядКатегория);
	
КонецПроцедуры

Процедура ЗаполнитьРазрядКатегориюСотрудникаПоУмолчанию(Форма, Знач ПутьКРеквизитуРазрядКатегория, Знач ТарифнаяСетка, Знач Должность, Знач ДолжностьПоШтатномуРасписанию, Знач Сотрудник, Знач ДатаСобытия) Экспорт
	
	Если ЗначениеЗаполнено(Сотрудник) И Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		
		РазрядКатегория = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКРеквизитуРазрядКатегория);
		
		РазрядПоУмолчанию = Неопределено;
		Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьСпециальностиФизическихЛиц") Тогда
			РазрядПоУмолчанию = РазрядСотрудникаПоУмолчанию(ТарифнаяСетка, Должность, ДолжностьПоШтатномуРасписанию, Сотрудник, ДатаСобытия);
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(РазрядПоУмолчанию) Тогда 
			Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") И ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда
				ДанныеДолжности = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ДолжностьПоШтатномуРасписанию, ДатаСобытия, Ложь);
			ИначеЕсли ЗначениеЗаполнено(Должность) Тогда
				ДанныеДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Должность, "ТарифнаяСетка,ТарифнаяСеткаНадбавки,РазрядКатегория,РазрядКатегорияНадбавки");
			КонецЕсли;
			Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКвалификационнуюНадбавку") Тогда
		    	РазрядПоУмолчанию = ДанныеДолжности.РазрядКатегорияНадбавки;
			КонецЕсли;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РазрядПоУмолчанию) И ЗначениеЗаполнено(Сотрудник)
			И (ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) ИЛИ ЗначениеЗаполнено(Должность))Тогда
			
			Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКвалификационнуюНадбавку") Тогда
				ТарифнаяСетка = ДанныеДолжности.ТарифнаяСеткаНадбавки;
			Иначе
				ТарифнаяСетка = ДанныеДолжности.ТарифнаяСетка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТарифнаяСетка) Тогда
				
				ИзмеренияДаты = Новый ТаблицаЗначений;
				ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
				ИзмеренияДаты.Колонки.Добавить("ТарифнаяСетка", Новый ОписаниеТипов("СправочникСсылка.ТарифныеСетки"));
				
				СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
				СтрокаИзмеренияДаты.Период = ДатаСобытия;
				СтрокаИзмеренияДаты.ТарифнаяСетка = ТарифнаяСетка;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("РазрядКатегория", РазрядКатегория);
				
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, Сотрудник, "РазрядКатегория", ДатаСобытия);
				
				ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
					"ЗначенияТарифов",
					Запрос.МенеджерВременныхТаблиц,
					Истина,
					ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты)
				);
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ЗначенияТарифов.ТарифнаяСетка,
					|	МИНИМУМ(ЗначенияТарифов.РазрядКатегория.РеквизитДопУпорядочивания) КАК РазрядКатегорияРеквизитДопУпорядочивания
					|ПОМЕСТИТЬ ВТМинимальныйПорядокРазрядов
					|ИЗ
					|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
					|		ПО ЗначенияТарифов.РазрядКатегория = КадровыеДанныеСотрудников.РазрядКатегория
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗначенияТарифов.ТарифнаяСетка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЗначенияТарифов.ТарифнаяСетка,
					|	ЗначенияТарифов.РазрядКатегория,
					|	ВЫБОР
					|		КОГДА ЗначенияТарифовРазрядаКатегории.РазрядКатегория ЕСТЬ NULL 
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ТекущийРазрядКатегорияИспользуется
					|ИЗ
					|	ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифов
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифовРазрядаКатегории
					|		ПО ЗначенияТарифов.ТарифнаяСетка = ЗначенияТарифовРазрядаКатегории.ТарифнаяСетка
					|			И (ЗначенияТарифовРазрядаКатегории.РазрядКатегория = &РазрядКатегория)
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныйПорядокРазрядов КАК МинимальныйПорядокРазрядов
					|		ПО ЗначенияТарифов.ТарифнаяСетка = МинимальныйПорядокРазрядов.ТарифнаяСетка
					|			И ЗначенияТарифов.РазрядКатегория.РеквизитДопУпорядочивания = МинимальныйПорядокРазрядов.РазрядКатегорияРеквизитДопУпорядочивания";
					
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					
					Если НЕ Выборка.ТекущийРазрядКатегорияИспользуется Тогда
						РазрядПоУмолчанию = Выборка.РазрядКатегория;
					КонецЕсли; 
					
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РазрядПоУмолчанию) Тогда
			РазрядКатегория = РазрядПоУмолчанию;
		КонецЕсли; 
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКРеквизитуРазрядКатегория, РазрядКатегория);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция РазрядСотрудникаПоУмолчанию(ТарифнаяСетка, Должность, ДолжностьПоШтатномуРасписанию, Сотрудник, ДатаСобытия)
	
	РазрядПоУмолчанию = Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСпециальностиФизическихЛиц") 
		ИЛИ Сотрудник = Неопределено ИЛИ  НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		Возврат РазрядПоУмолчанию;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить().Период = ДатаСобытия;
	
	Специальности = Новый Массив;
	Если ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда	
		
		ДанныеПозиции = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ДолжностьПоШтатномуРасписанию, ДатаСобытия, Ложь);
		МассивСтруктурСпециальности = ДанныеПозиции.Специальности; 
		Для Каждого СтруктураСпециальности Из МассивСтруктурСпециальности Цикл
			Специальности.Добавить(СтруктураСпециальности.Специальность);		
		КонецЦикла;
		ТарифнаяСетка = ДанныеПозиции.ТарифнаяСетка;
		ТарифнаяСеткаНадбавки  = ДанныеПозиции.ТарифнаяСеткаНадбавки;
		
	ИначеЕсли ЗначениеЗаполнено(Должность) Тогда	

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Должность", Должность);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДолжностиСпециальности.Специальность КАК Специальность
			|ИЗ
			|	Справочник.Должности.Специальности КАК ДолжностиСпециальности
			|ГДЕ
			|	ДолжностиСпециальности.Ссылка = &Должность";
		СпециальностиДолжности = Запрос.Выполнить().Выгрузить();
		Если СпециальностиДолжности.Количество() > 0 Тогда 
			Специальности = СпециальностиДолжности.ВыгрузитьКолонку("Специальность");	
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"ЗначенияТарифов",
	МенеджерВременныхТаблиц,
	Истина,
	ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
	ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ФизическоеЛицо", "=", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо"));	
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
	"СпециальностиФизическихЛиц",
	МенеджерВременныхТаблиц,
	Истина,
	ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
	ПараметрыПостроения);
	
	Запрос = Новый Запрос;	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("Специальности", Специальности);
	Запрос.УстановитьПараметр("ТарифныеСетки", МассивСеток(ТарифнаяСетка, ТарифнаяСеткаНадбавки));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпециальностиФизическихЛицСрезПоследних.РазрядКатегория
		|ПОМЕСТИТЬ ВТСпециальностиФизическогоЛица
		|ИЗ
		|	ВТСпециальностиФизическихЛицСрезПоследних КАК СпециальностиФизическихЛицСрезПоследних
		|ГДЕ
		|	СпециальностиФизическихЛицСрезПоследних.Специальность В(&Специальности)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ЗначенияТарифовСрезПоследних.РазрядКатегория,
		|	ЗначенияТарифовСрезПоследних.Тариф КАК Тариф
		|ИЗ
		|	ВТСпециальностиФизическогоЛица КАК СпециальностиФизическогоЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияТарифовСрезПоследних КАК ЗначенияТарифовСрезПоследних
		|		ПО СпециальностиФизическогоЛица.РазрядКатегория = ЗначенияТарифовСрезПоследних.РазрядКатегория
		|			И (ЗначенияТарифовСрезПоследних.ТарифнаяСетка В (&ТарифныеСетки))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тариф УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РазрядПоУмолчанию = Выборка.РазрядКатегория;
	КонецЕсли; 

	Возврат РазрядПоУмолчанию;
	
КонецФункции

Функция МассивСеток(ТарифнаяСетка, ТарифнаяСеткаНадбавки) Экспорт
	
	Массив = Новый Массив;
	Если ЗначениеЗаполнено(ТарифнаяСеткаНадбавки) Тогда
		Массив.Добавить(ТарифнаяСеткаНадбавки)
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКвалификационнуюНадбавку") Или Массив.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ТарифнаяСетка) Тогда
			Массив.Добавить(ТарифнаяСетка)
		КонецЕсли;
	КонецЕсли;
		
	Возврат Массив;
	
КонецФункции

Функция ЗаполнениеВидаТарифнойСетки(Параметры, ВидТарифнойСетки) Экспорт
	
	Если Параметры.Свойство("ВидТарифнойСетки") Тогда
		Возврат Параметры.ВидТарифнойСетки;
	ИначеЕсли Не Параметры.Ключ.Пустая() Тогда
		Возврат ВидТарифнойСетки;
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("ВидТарифнойСетки") Тогда 
		Возврат Параметры.ЗначенияЗаполнения.ВидТарифнойСетки;	
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		Возврат Параметры.ЗначениеКопирования.ВидТарифнойСетки;
	КонецЕсли;
		
КонецФункции

Процедура ПрочитатьДанныеТарифныхСетокДолжностиВФорму(Форма, Должность, ДолжностьПоШтатномуРасписанию, ДатаСведений) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТарифнаяСетка = Справочники.ТарифныеСетки.ПустаяСсылка();
		РазрядКатегория = Справочники.РазрядыКатегорииДолжностей.ПустаяСсылка();
		ТарифнаяСеткаНадбавки = Справочники.ТарифныеСетки.ПустаяСсылка();
		
		ДанныеТарифныхСеток = Неопределено;
		Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание") 
			И ЗначениеЗаполнено(ДолжностьПоШтатномуРасписанию) Тогда
			ДанныеТарифныхСеток = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(ДолжностьПоШтатномуРасписанию, ДатаСведений, Ложь);
		ИначеЕсли ЗначениеЗаполнено(Должность) Тогда
			ДанныеТарифныхСеток = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Должность, "ТарифнаяСетка,РазрядКатегория,ТарифнаяСеткаНадбавки");
		КонецЕсли; 
		
		Если ДанныеТарифныхСеток <> Неопределено Тогда
			ТарифнаяСетка = ДанныеТарифныхСеток.ТарифнаяСетка;
			РазрядКатегория = ДанныеТарифныхСеток.РазрядКатегория;
			ТарифнаяСеткаНадбавки = ДанныеТарифныхСеток.ТарифнаяСеткаНадбавки;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "ТарифнаяСетка", ТарифнаяСетка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "РазрядКатегория", РазрядКатегория);
			
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "ТарифнаяСеткаНадбавки", ТарифнаяСеткаНадбавки);
			
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТарифыПоДаннымФормы(Тарифы, ВидТарифнойСетки, ТарифнаяСетка, Отказ, ПутьКДанным) Экспорт
	
	Если Тарифы.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		
		Тарифы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		НомерСтроки = 1;
		Для каждого СтрокаТарифы Из Тарифы Цикл
			СтрокаТарифы.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	// Обновление или создание категорий
	Если ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф
		И ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Тарифы", Тарифы);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Тарифы.НомерСтроки,
			|	Тарифы.РазрядКатегория,
			|	Тарифы.РазрядНаименование,
			|	Тарифы.РазрядНаименованиеПолное,
			|	Тарифы.РазрядныйКоэффициент,
			|	Тарифы.Тариф
			|ПОМЕСТИТЬ ВТТарифы
			|ИЗ
			|	&Тарифы КАК Тарифы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Тарифы.НомерСтроки КАК НомерСтроки,
			|	Тарифы.РазрядКатегория,
			|	Тарифы.РазрядНаименование,
			|	Тарифы.РазрядНаименованиеПолное,
			|	Тарифы.РазрядныйКоэффициент,
			|	Тарифы.Тариф,
			|	ВЫБОР
			|		КОГДА Тарифы.РазрядКатегория = ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)
			|			ТОГДА ИСТИНА
			|		КОГДА Тарифы.РазрядНаименование <> ВЫРАЗИТЬ(Тарифы.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).Наименование
			|			ТОГДА ИСТИНА
			|		КОГДА (ВЫРАЗИТЬ(Тарифы.РазрядНаименованиеПолное КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ВЫРАЗИТЬ(Тарифы.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).НаименованиеПолное КАК СТРОКА(1024)))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОбновитьРазрядКатегорию
			|ИЗ
			|	ВТТарифы КАК Тарифы
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		ПутьКОбъекту = "";
		ПутьКТабличнойЧасти = "";
		
		ЧастиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
		Если ЧастиПути.Количество() > 1 Тогда
			ПутьКОбъекту = ЧастиПути[0];
		КонецЕсли; 
		Для НомерЧасти = ?(ЧастиПути.Количество() > 1, 1, 0) По ЧастиПути.Количество() - 1 Цикл
			ПутьКТабличнойЧасти = ?(ПустаяСтрока(ПутьКТабличнойЧасти), "", ПутьКТабличнойЧасти + ".") + ЧастиПути[НомерЧасти];
		КонецЦикла;
			
		ТаблицаТарифов = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТаблицыТарифов Из ТаблицаТарифов Цикл
			
			Если ПустаяСтрока(СтрокаТаблицыТарифов.РазрядНаименование) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнено наименование';uk='Не заповнено найменування'"),
					,
					ПутьКТабличнойЧасти + "[" + (СтрокаТаблицыТарифов.НомерСтроки - 1) + "].РазрядНаименование",
					ПутьКОбъекту,
					Отказ
				);
				Продолжить;
				
			ИначеЕсли ПустаяСтрока(СтрокаТаблицыТарифов.РазрядНаименованиеПолное) Тогда
				СтрокаТаблицыТарифов.РазрядНаименованиеПолное = СтрокаТаблицыТарифов.РазрядНаименование;
			КонецЕсли; 
			
			Если СтрокаТаблицыТарифов.ОбновитьРазрядКатегорию Тогда
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицыТарифов.РазрядКатегория) Тогда
					РазрядКатегорияОбъект = Справочники.РазрядыКатегорииДолжностей.СоздатьЭлемент();
				Иначе
					РазрядКатегорияОбъект = СтрокаТаблицыТарифов.РазрядКатегория.ПолучитьОбъект();
				КонецЕсли;
				
				РазрядКатегорияОбъект.ТарифнаяСетка = ТарифнаяСетка;
				РазрядКатегорияОбъект.Наименование = СтрокаТаблицыТарифов.РазрядНаименование;
				РазрядКатегорияОбъект.НаименованиеПолное = СтрокаТаблицыТарифов.РазрядНаименованиеПолное;
				
				РазрядКатегорияОбъект.Записать();
				
				СтрокаТаблицыТарифов.РазрядКатегория = РазрядКатегорияОбъект.Ссылка;

			КонецЕсли; 
			
		КонецЦикла;
		
		Тарифы = ТаблицаТарифов.Скопировать();
		
		// Обновление порядка категорий
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Тарифы", Тарифы.Скопировать());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Тарифы.НомерСтроки,
			|	Тарифы.РазрядКатегория
			|ПОМЕСТИТЬ ВТТарифы
			|ИЗ
			|	&Тарифы КАК Тарифы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Тарифы.НомерСтроки,
			|	Тарифы.РазрядКатегория,
			|	ВЫРАЗИТЬ(Тарифы.РазрядКатегория КАК Справочник.РазрядыКатегорииДолжностей).РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
			|ПОМЕСТИТЬ ВТТарифыСПорядком
			|ИЗ
			|	ВТТарифы КАК Тарифы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТарифыСПорядком.НомерСтроки,
			|	ТарифыСПорядком.РеквизитДопУпорядочивания,
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТарифыСПорядкомПредыдущие.РеквизитДопУпорядочивания) КАК НомерСтрокиПоПорядку
			|ПОМЕСТИТЬ ВТТарифыСНовымиНомерамиСтрок
			|ИЗ
			|	ВТТарифыСПорядком КАК ТарифыСПорядком
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТарифыСПорядком КАК ТарифыСПорядкомПредыдущие
			|		ПО ТарифыСПорядком.РеквизитДопУпорядочивания >= ТарифыСПорядкомПредыдущие.РеквизитДопУпорядочивания
			|
			|СГРУППИРОВАТЬ ПО
			|	ТарифыСПорядком.НомерСтроки,
			|	ТарифыСПорядком.РеквизитДопУпорядочивания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТарифыСПорядком.НомерСтроки,
			|	ТарифыСПорядком.РазрядКатегория,
			|	ТарифыСПорядком.РеквизитДопУпорядочивания,
			|	ТарифыСНовымиНомерамиСтрок.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочиванияНовый
			|ИЗ
			|	ВТТарифыСПорядком КАК ТарифыСПорядком
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТарифыСНовымиНомерамиСтрок КАК ТарифыСНовымиНомерамиСтрок
			|		ПО ТарифыСПорядком.НомерСтроки = ТарифыСНовымиНомерамиСтрок.НомерСтрокиПоПорядку
			|			И ТарифыСПорядком.РеквизитДопУпорядочивания <> ТарифыСНовымиНомерамиСтрок.РеквизитДопУпорядочивания";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РазрядКатегорияОбъект = Выборка.РазрядКатегория.ПолучитьОбъект();
			РазрядКатегорияОбъект.РеквизитДопУпорядочивания = Выборка.РеквизитДопУпорядочиванияНовый;
			РазрядКатегорияОбъект.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвязиПараметровВыбораРазрядаКадровогоПриказа(Форма, ИмяПоляРазряд = "РазрядКатегория") Экспорт 
	
	ПутьКДанным = ?(ПолучитьФункциональнуюОпцию("ИспользоватьКвалификационнуюНадбавку"), "ТарифнаяСеткаНадбавки", "ТарифнаяСетка");
	Связь = Новый СвязьПараметраВыбора("ТарифнаяСетка", ПутьКДанным);
	СвязиПараметровВыбора = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Связь));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоляРазряд, "СвязиПараметровВыбора", СвязиПараметровВыбора);
	
КонецПроцедуры

Функция СписокПоказателейДоплатыЗаКвалификацию() Экспорт 
	
	СписокПоказателей = Новый Массив;
	
	РазмерДоплатыЗаКвалификацию = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДоплатыЗаКвалификацию");
	Если РазмерДоплатыЗаКвалификацию <> Неопределено Тогда 
		СписокПоказателей.Добавить(РазмерДоплатыЗаКвалификацию);
	КонецЕсли;
	
	РазмерДневнойДоплатыЗаКвалификацию = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерДневнойДоплатыЗаКвалификацию");
	Если РазмерДневнойДоплатыЗаКвалификацию <> Неопределено Тогда 
		СписокПоказателей.Добавить(РазмерДневнойДоплатыЗаКвалификацию);
	КонецЕсли;
	
	РазмерЧасовойДоплатыЗаКвалификацию = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерЧасовойДоплатыЗаКвалификацию");
	Если РазмерЧасовойДоплатыЗаКвалификацию <> Неопределено Тогда 
		СписокПоказателей.Добавить(РазмерЧасовойДоплатыЗаКвалификацию);
	КонецЕсли;
	
	Возврат СписокПоказателей;
	
КонецФункции	

#Область ПервоначальногоЗаполненияИОбновленияИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.16.12";
	Обработчик.Процедура = "РазрядыКатегорииДолжностей.ОбновитьДанныеЗначенияБазовыхТарифов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.17.4";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательБазовыйТарифГруппы";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.24";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательКвалификационнаяНадбавка";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.24";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательОкладПоДолжности";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.24";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательЧасовойТарифПоДолжности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.24";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательДневнойТарифПоДолжности";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.24";
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказательДолжностнаяНадбавка";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.24";
	Обработчик.Процедура = "РазрядыКатегорииДолжностей.ОбновитьДанныеВидыТарифныхСеток";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.26";
	Обработчик.Процедура = "РазрядыКатегорииДолжностей.ОбновитьНастройкиРасчетаЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.18.26";    
	Обработчик.Процедура = "Справочники.ПоказателиРасчетаЗарплаты.ОбновитьПоказателиПредопределенныхСпособовРасчета";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.19.32";    
	Обработчик.Процедура = "Справочники.РазрядыКатегорииДолжностей.ЗаполнитьНаименованиеПолное";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.9";    
	Обработчик.Процедура = "Справочники.РазрядыКатегорииДолжностей.ЗаполнитьТарифныеСетки";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.9";    
	Обработчик.Процедура = "Документы.УтверждениеТарифнойСетки.ЗаполнитьСпособыОкругления";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.11";    
	Обработчик.Процедура = "РегистрыСведений.ЗначенияТарифов.УстановитьИспользованиеТарифов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.22.122";    
	Обработчик.Процедура = "РазрядыКатегорииДолжностей.УстановитьИспользованиеКвалификационнойНадбавки";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.27";    
	Обработчик.Процедура = "Документы.УтверждениеТарифнойСетки.ЗаполнитьИзмененияПозицийШтатногоРасписанияПоДвижениям";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.24.27";    
	Обработчик.Процедура = "Документы.УтверждениеТарифнойСетки.ЗаполнитьИзменениеПлановыхНачисленийСотрудниковПоДвижениям";
	
КонецПроцедуры

// Заполняет регистр сведений значения базовых тарифов, на основании 
// тарифа первого разряда.
Процедура ОбновитьДанныеЗначенияБазовыхТарифов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗначенияТарифов.Регистратор,
				|	ЗначенияТарифов.Период,
				|	ЗначенияТарифов.ТарифнаяСетка,
				|	ЗначенияТарифов.РазрядКатегория,
				|	РазрядыКатегорииДолжностей.РеквизитДопУпорядочивания,
				|	ЗначенияТарифов.Тариф
				|ПОМЕСТИТЬ ВТУтвержденныеТС
				|ИЗ
				|	РегистрСведений.ЗначенияТарифов КАК ЗначенияТарифов
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РазрядыКатегорииДолжностей КАК РазрядыКатегорииДолжностей
				|		ПО (РазрядыКатегорииДолжностей.Ссылка = ЗначенияТарифов.РазрядКатегория)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МладшиеРазрядыТС.Регистратор,
				|	МладшиеРазрядыТС.Период,
				|	МладшиеРазрядыТС.ТарифнаяСетка КАК ТарифнаяСетка,
				|	УтвержденныеТС.РазрядКатегория КАК МладшийРазряд,
				|	УтвержденныеТС.Тариф КАК Тариф
				|ИЗ
				|	(ВЫБРАТЬ
				|		УтвержденныеТС.Регистратор КАК Регистратор,
				|		УтвержденныеТС.Период КАК Период,
				|		УтвержденныеТС.ТарифнаяСетка КАК ТарифнаяСетка,
				|		МИНИМУМ(УтвержденныеТС.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
				|	ИЗ
				|		ВТУтвержденныеТС КАК УтвержденныеТС
				|
				|	СГРУППИРОВАТЬ ПО
				|		УтвержденныеТС.Регистратор,
				|		УтвержденныеТС.Период,
				|		УтвержденныеТС.ТарифнаяСетка) КАК МладшиеРазрядыТС
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУтвержденныеТС КАК УтвержденныеТС
				|		ПО (УтвержденныеТС.Регистратор = МладшиеРазрядыТС.Регистратор)
				|			И (УтвержденныеТС.Период = МладшиеРазрядыТС.Период)
				|			И (УтвержденныеТС.ТарифнаяСетка = МладшиеРазрядыТС.ТарифнаяСетка)
				|			И (УтвержденныеТС.РеквизитДопУпорядочивания = МладшиеРазрядыТС.РеквизитДопУпорядочивания)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияБазовыхТарифов КАК ЗначенияБазовыхТарифовСрезПоследних
				|		ПО МладшиеРазрядыТС.Регистратор = ЗначенияБазовыхТарифовСрезПоследних.Регистратор
				|			И МладшиеРазрядыТС.ТарифнаяСетка = ЗначенияБазовыхТарифовСрезПоследних.ТарифнаяСетка
				|ГДЕ
				|	ЕСТЬNULL(ЗначенияБазовыхТарифовСрезПоследних.Тариф, 0) <> ЕСТЬNULL(УтвержденныеТС.Тариф, 0)";


	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ЗначенияБазовыхТарифов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
			НаборЗаписей.Записать(Истина);

			// Заполнение в документах утверждения тарифной сетки нового реквизита.
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.БазовыйТарифГруппы = Выборка.Тариф;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;

	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет регистр сведений значения базовых тарифов, на основании 
// тарифа первого разряда.
Процедура ОбновитьДанныеВидыТарифныхСеток() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
				"ВЫБРАТЬ
				|	ТарифныеСетки.Ссылка КАК Объект,
				|	ИСТИНА КАК ЭтоСправочник
				|ИЗ
				|	Справочник.ТарифныеСетки КАК ТарифныеСетки
				|ГДЕ
				|	ТарифныеСетки.ВидТарифнойСетки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСеток.ПустаяСсылка)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	УтверждениеТарифнойСетки.Ссылка,
				|	ЛОЖЬ
				|ИЗ
				|	Документ.УтверждениеТарифнойСетки КАК УтверждениеТарифнойСетки
				|ГДЕ
				|	УтверждениеТарифнойСетки.ВидТарифнойСетки = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСеток.ПустаяСсылка)";


	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();

		Пока Выборка.Следующий() Цикл
			
			// Заполнение в документах утверждения тарифной сетки и справочника тарифных сеток нового реквизита.
			Объект = Выборка.Объект.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ВидТарифнойСетки = Перечисления.ВидыТарифныхСеток.Тариф;
			
			Если Выборка.ЭтоСправочник Тогда
				Объект.Записать();			
			Иначе
				Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет регистр сведений НастройкаРасчетаЗарплатыРасширенный, на основании 
// учета организации.
Процедура ОбновитьНастройкиРасчетаЗарплаты() Экспорт
	
	Настройка = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройка.Прочитать();
	ИспользоватьТарифныеСетки = Настройка.ИспользоватьТарифныеСеткиПриРасчетеЗарплаты;
	РаботаВБюджетномУчреждении = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");	
	
	Если ИспользоватьТарифныеСетки Тогда
		Если РаботаВБюджетномУчреждении Тогда
			Настройка.ИспользоватьТарифныеСеткиПриРасчетеЗарплатыБюджет = ИспользоватьТарифныеСетки;
			Настройка.ИспользоватьТарифныеСеткиПриРасчетеЗарплатыХозрасчет = Ложь;
		Иначе
			Настройка.ИспользоватьТарифныеСеткиПриРасчетеЗарплатыБюджет = Ложь;
			Настройка.ИспользоватьТарифныеСеткиПриРасчетеЗарплатыХозрасчет = ИспользоватьТарифныеСетки;	
		КонецЕсли;
	Настройка.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИспользованиеКвалификационнойНадбавки() Экспорт 
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКвалификационнуюНадбавку") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Константы.УдалитьИспользоватьКвалификационнуюНадбавку.Получить() Тогда 
		Возврат;
	КонецЕсли;
	
	НастройкиРасчетаЗарплаты = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьНаборЗаписей();
	НастройкиРасчетаЗарплаты.Прочитать();
	Если НастройкиРасчетаЗарплаты.Количество() > 0 Тогда 
		НастройкиРасчетаЗарплаты[0].ИспользоватьКвалификационнуюНадбавку = Истина;
		НастройкиРасчетаЗарплаты.Записать();
		Константы.УдалитьИспользоватьКвалификационнуюНадбавку.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
