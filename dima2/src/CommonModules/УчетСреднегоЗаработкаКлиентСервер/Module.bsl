////////////////////////////////////////////////////////////////////////////////
// Подсистема «Учет среднего заработка».
// 
// Процедуры и функции, предназначенные для использования как на сервере, 
// так и на клиенте
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Предоставляет значение среднего заработка.
//
// Параметры
//	Начисления - тип коллекция строк, для которой доступен обход Для Каждого ... Из...
//		структура строк соответствует конструктору ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка
//	Время - тип коллекция строк, для которой доступен обход Для Каждого ... Из...
//	ДополнительныеПараметры - тип Структура, см. УчетСреднегоЗаработкаКлиентСервер.ДополнительныеПараметрыРасчетаСреднегоЗаработка
//
// Возвращаемое значение - Число, значение среднедневного или среднечасового заработка.
//
Функция СреднийЗаработокОбщий(Начисления, Время, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДанныеДляРасчета = ДанныеДляРасчетаСреднегоЗаработка(Начисления, Время, ДополнительныеПараметры);
	
	ВсегоЗаработок = ИтогиПоПолю(ДанныеДляРасчета.Заработок, "Учтено");	
	ВсегоВремя = ИтогиПоПолю(ДанныеДляРасчета.ОтработанноеВремя, "Учтено");	
	
	Возврат СреднийЗаработок(ВсегоЗаработок, ВсегоВремя); 
	
КонецФункции

// Преобразованные данные для расчета среднего заработка, рассчитывается доля времени и сумм заработка, 
// принимаемых к расчету в соответствии с заданными параметрами.
//
Функция ДанныеДляРасчетаСреднегоЗаработка(Начисления, Время, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДанныеДляРасчета = Новый Структура(
		"Заработок, 
		|ОтработанноеВремя");
	
	ДанныеДляРасчета.ОтработанноеВремя = Новый Массив;
	РассчитатьУчитываемоеВремя(Время, ДанныеДляРасчета.ОтработанноеВремя, ДополнительныеПараметры);
	ДанныеДляРасчета.Заработок = Новый Массив;
	РассчитатьУчитываемыйЗаработок(Начисления, ДанныеДляРасчета.Заработок, Время, ДополнительныеПараметры);
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Преобразованные данные для расчета среднего заработка по ФОТ, рассчитывается доля времени и сумм заработка, 
// принимаемых к расчету в соответствии с заданными параметрами.
//
Функция ДанныеДляРасчетаСреднегоЗаработкаПоФОТ(Начисления, Время, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДанныеДляРасчета = Новый Структура(
		"Заработок, 
		|ОтработанноеВремя");
	ДанныеДляРасчета.ОтработанноеВремя = Новый Массив;
	РассчитатьУчитываемоеВремя(Время, ДанныеДляРасчета.ОтработанноеВремя, ДополнительныеПараметры);
	Заработок = Начисления.СкопироватьКолонки(); 
	
	Для Каждого Строка Из Начисления Цикл 
		Если Строка.Результат > 0 Тогда 
			НоваяСтрока = Заработок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	
	Заработок.Колонки.Результат.Имя = "СуммаЗароботка";
	ДанныеДляРасчета.Заработок = Заработок;
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Возвращает коэффициент отработанного времени используемый для нормирования премий при расчете среднего заработка.
//
Функция ДоляОтработанногоВремени(ОтработанноеВремя) Экспорт
	ДоляОтработанногоВремени = 1;
	Возврат ДоляОтработанногоВремени;
	
	Норма = 0;
	Отработано = 0;
	
	Норма = ИтогиПоПолю(ОтработанноеВремя, "НормаПятидневка");
	Отработано = ИтогиПоПолю(ОтработанноеВремя, "ОтработаноПятидневка");
	
	Если Норма > 0 Тогда	
		ДоляОтработанногоВремени = Отработано / Норма;
	КонецЕсли;
	
	Возврат Окр(ДоляОтработанногоВремени, 8);
	
КонецФункции

// Возвращает рассчитанный показатель среднего заработка.
//
Функция СреднийЗаработок(Заработок, Время) Экспорт
	 Возврат ?(Время = 0, 0, Окр(Заработок / Время, 2));
КонецФункции

// Возвращает сумму значений в поле [ИмяПоля] всех элементов коллекции.
//
Функция ИтогиПоПолю(Коллекция, ИмяПоля) Экспорт
	
	ИтогиПоПолю = 0;
	
	Для каждого Элемент Из Коллекция Цикл
		ИтогиПоПолю = ИтогиПоПолю + Элемент[ИмяПоля]; 
	КонецЦикла;
	
	Возврат ИтогиПоПолю;
	
КонецФункции 

// Функция запрашивает период расчета среднего заработка для указанного начисления (или удержания).
//
Функция ПериодРасчетаОбщегоСреднегоЗаработка(ДатаНачалаСобытия, ВидРасчета = Неопределено) Экспорт
	ПериодРасчета = Новый СтандартныйПериод;
	ДлительностьПериода = 2;
	
	Если ЗначениеЗаполнено(ВидРасчета) Тогда	
		#Если Клиент Тогда
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйКлиентПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		#Иначе
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		#КонецЕсли
		Если ИнфоОВидеРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = ПредопределенноеЗначение("Перечисление.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору") 
			И ИнфоОВидеРасчета.КоличествоМесяцевРасчетаСреднегоЗаработка > 0 Тогда
			ДлительностьПериода = ИнфоОВидеРасчета.КоличествоМесяцевРасчетаСреднегоЗаработка;
		КонецЕсли;
		Если ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска")
			Или ИнфоОВидеРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска") Тогда
			ДлительностьПериода = 12;
		Иначе
			ДлительностьПериода = 2;
		КонецЕсли;	
	КонецЕсли;	
	
	ПериодРасчета.ДатаНачала	= НачалоМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -ДлительностьПериода));
	ПериодРасчета.ДатаОкончания	= КонецМесяца(ДобавитьМесяц(ДатаНачалаСобытия, -1));
	
	Возврат ПериодРасчета;
	
КонецФункции

// Функция определяет порядок расчета общего среднего заработка, 
// актуальный на указанную дату.
//
Функция ПорядокРасчетаОбщегоСреднегоЗаработка(Период) Экспорт
	
	ПрименениеПорядкаРасчета = Новый Массив;
	ПрименениеПорядкаРасчета.Добавить(
		СтруктураПримененияПорядкаРасчета(
			ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010"), 
			Дата(2010, 1, 1)));
	
	// значение по умолчанию		
	ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010");
	
	ПодобратьПорядокРасчетаПоДатеПрименения(ПорядокРасчета, Период, ПрименениеПорядкаРасчета);
	
	Возврат ПорядокРасчета;
	
КонецФункции

// Функция составляет коллекцию показателей среднего заработка.
//
// Возвращаемое значение - структура, 
//		где ключ - служебный идентификатор показателя, значение ссылка на показатель.
//
Функция ПоказателиРасчетаСреднегоЗаработка() Экспорт
	
	Показатели = Новый Структура;
	
	Показатели.Вставить("СреднийЗаработокОбщий", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий"));
	Показатели.Вставить("СреднедневнойЗаработок", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднедневнойЗаработок"));
	СреднечасовойЗаработок = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднечасовойЗаработок");
	Если СреднечасовойЗаработок <> Неопределено Тогда
		Показатели.Вставить("СреднечасовойЗаработок", СреднечасовойЗаработок);
	КонецЕсли;
	
	Показатели.Вставить("СреднийЗаработокФСС", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС"));
	
	Возврат Показатели;
	
КонецФункции

// Функция составляет коллекцию показателей общего среднего заработка.
//
// Возвращаемое значение - массив.
//
Функция ПоказателиОбщегоСреднегоЗаработка() Экспорт
	ИменаПоказателей = Новый Массив;
	ИменаПоказателей.Добавить("СреднийЗаработокОбщий");
	ИменаПоказателей.Добавить("СреднедневнойЗаработок");
	ИменаПоказателей.Добавить("СреднечасовойЗаработок");
	ИменаПоказателей.Добавить("СреднийЗаработокОтпуск");
	
	МассивПоказателей = Новый Массив;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		ПоказательСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИмяПоказателя);
		Если ПоказательСсылка <> Неопределено Тогда
			МассивПоказателей.Добавить(ПоказательСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПоказателей;
	
КонецФункции

// Определяет представление команды, предназначенной для расшифровки показателя.
//
Функция ПредставлениеКомандыРасшифровки() Экспорт
	Возврат НСтр("ru='Подробнее';uk='Докладніше'");
КонецФункции

// Год, за который следует принимать к учету годовые премии.
//
// Параметры
//	ДатаНачалаСобытия - тип Дата
//
// Возвращаемое значение - тип Число 4, 0
//
Функция ГодГодовыхПремий(ДатаНачалаСобытия) Экспорт
	Возврат Год(ДобавитьМесяц(ДатаНачалаСобытия, -12));
КонецФункции

// Функция выполняет упаковку данных общего среднего заработка формы документа для передачи в форму редактирования.
//
Функция ПараметрыРедактированияОбщегоСреднегоЗаработкаПоДокументу() Экспорт
	
	ПараметрыРедактирования = Новый Структура(
	"ДокументСсылка,
	|Сотрудник,
	|Организация,
	|ДатаНачалаСобытия,
	|Начисление,
	|НачалоПериодаРасчета,
	|ОкончаниеПериодаРасчета,
	|ФиксПериодРасчета,
	|ПорядокРасчета,
	|СпособыРасчета,
	|РучнаяКорректировкаСреднегоЗаработка,
	|ВидУчетаВремениДляСредней,
	|СреднийЗаработок,
	|ЭтоСреднеЧасовойЗаработок,
	|ДокументВладелецДанныеАдрес,
	|ТолькоПросмотр,
	|ДанныеОНачислениях,
	|ДанныеОВремени,
	|ДанныеОбИндексации");
	
	ПараметрыРедактирования.ФиксПериодРасчета = Ложь;
	ПараметрыРедактирования.ЭтоСреднеЧасовойЗаработок = Ложь;
	ПараметрыРедактирования.ТолькоПросмотр = Ложь;
	
	Возврат ПараметрыРедактирования;
	
КонецФункции

// Конструирует структуру дополнительных параметров методов расчета среднего заработка.
//
Функция ДополнительныеПараметрыРасчетаСреднегоЗаработка() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"НачалоПериода, 
		|ОкончаниеПериода, 
		|ДатаНачалаСобытия, 
		|Индексации, 
		|ПоЧасам, 
		|Начисление, 
		|СпособРасчетаОтпуска,
		|ПоСтатьямФинансирования,
		|ВидУчетаВремениДляСредней,
		|ПорядокРасчета");
		
	ДополнительныеПараметры.ПоЧасам = Ложь;
	ДополнительныеПараметры.ПоСтатьямФинансирования = Ложь;
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

#Область МетодыОбслуживанияФормДокументовДляРасчетаСреднегоЗаработка

Функция ТекстПредупрежденияДокументНеРассчитан() Экспорт
	ТекстПредупреждения = НСтр("ru='Документ не рассчитан';uk='Документ не розраховано'");
	Возврат Новый ФорматированнаяСтрока(ТекстПредупреждения);
КонецФункции

#КонецОбласти

// Функция возвращает количество месяцев между двумя датами.
//
Функция КоличествоМесяцевПериодаРасчетаСреднего(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт
	
	Возврат (Год(ДатаОкончанияПериода) - Год(ДатаНачалаПериода)) * 12 + Месяц(ДатаОкончанияПериода) - Месяц(ДатаНачалаПериода) + 1;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДатыИзмененийЗаконодательства

Функция ДатаИзмененияКоличестваДнейДляОтпускных()

	Возврат '20140402'

КонецФункции

#КонецОбласти

#Область ФормированиеДанныхРасчетаСреднегоЗаработка
Процедура РассчитатьУчитываемоеВремя(Время, УчитываемоеВремя, ДополнительныеПараметры)
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДатаНачалаСобытия = ДополнительныеПараметры.ДатаНачалаСобытия;
	СпособРасчетаОтпуска = ДополнительныеПараметры.СпособРасчетаОтпуска;
	НачалоПериода = ДополнительныеПараметры.НачалоПериода;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
			
	Для Каждого ПервичнаяСтрокаВремени Из Время Цикл
		
		// Используем данные только за рассчитываемый период.
		Если ПервичнаяСтрокаВремени.Период < НачалоПериода 
			Или ПервичнаяСтрокаВремени.Период > ОкончаниеПериода Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = ОтборЭлементаВремени(ПервичнаяСтрокаВремени.Период);
		
		СтрокаОтработанноеВремя 							= ЭлементВремениПоОтбору(УчитываемоеВремя, Отбор);
		
		СтрокаОтработанноеВремя.КалендарныхДней 			= ПервичнаяСтрокаВремени.ОтработаноДнейКалендарных;
		СтрокаОтработанноеВремя.НормаКалендарныхДней 		= ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(ПервичнаяСтрокаВремени.Период);
		
		СтрокаОтработанноеВремя.ОтработаноДней				= ПервичнаяСтрокаВремени.ОтработаноДней;
		СтрокаОтработанноеВремя.ОтработаноЧасов 			= ПервичнаяСтрокаВремени.ОтработаноЧасов;
		
		СтрокаОтработанноеВремя.СреднемесячноеКоличествоДней = ПервичнаяСтрокаВремени.СреднемесячноеКоличествоДней;
			 
		Если СпособРасчетаОтпуска = Неопределено Тогда
			Если ДополнительныеПараметры.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010") Тогда
				СтрокаОтработанноеВремя.Учтено 	= СтрокаОтработанноеВремя.ОтработаноДней;
				Если ДополнительныеПараметры.ВидУчетаВремениДляСредней = ПредопределенноеЗначение("Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимЧасам") Тогда
					СтрокаОтработанноеВремя.Учтено 	= СтрокаОтработанноеВремя.ОтработаноЧасов
				КонецЕсли;
				Если НЕ СтрокаОтработанноеВремя.СреднемесячноеКоличествоДней = NULL И НЕ СтрокаОтработанноеВремя.СреднемесячноеКоличествоДней = 0 Тогда
					СтрокаОтработанноеВремя.Учтено 	= СтрокаОтработанноеВремя.СреднемесячноеКоличествоДней
				КонецЕсли;
			Иначе
				СтрокаОтработанноеВремя.Учтено = СтрокаОтработанноеВремя.КалендарныхДней
			КонецЕсли;	
		ИначеЕсли СпособРасчетаОтпуска = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ОплатаОтпускаПоКалендарнымДням") 
			ИЛИ ПервичнаяСтрокаВремени.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные") Тогда
				СтрокаОтработанноеВремя.Учтено = СтрокаОтработанноеВремя.КалендарныхДней
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура РассчитатьУчитываемыйЗаработок(Начисления, УчитываемыйЗаработок, Время, ДополнительныеПараметры)
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыРасчетаСреднегоЗаработка();
	КонецЕсли;
	
	ДатаНачалаСобытия = ДополнительныеПараметры.ДатаНачалаСобытия;
	СпособРасчетаОтпуска = ДополнительныеПараметры.СпособРасчетаОтпуска;
	Индексации = ДополнительныеПараметры.Индексации;
	НачалоПериода = ДополнительныеПараметры.НачалоПериода;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
			
	КоэффициентыИндексацииПоПериодам = КоэффициентыИндексацииПоПериодам(Индексации);
		
	КоличествоМесяцевПериодаРасчета = УчетСреднегоЗаработкаКлиентСервер.КоличествоМесяцевПериодаРасчетаСреднего(НачалоПериода, ОкончаниеПериода);
	
	Для Каждого СтрокаНачислений Из Начисления Цикл
		
		// Используем данные только за рассчитываемый период.
		Если ЭтоПремияГодовая(СтрокаНачислений.СоставнаяЧасть) Тогда
			// Проверяем предыдущий год от даты начала события.
			Если СтрокаНачислений.Год <> УчетСреднегоЗаработкаКлиентСервер.ГодГодовыхПремий(ДатаНачалаСобытия) Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если СтрокаНачислений.Период < НачалоПериода 
				Или СтрокаНачислений.Период > ОкончаниеПериода Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтатьяФинансирования = Неопределено;
		Если ДополнительныеПараметры.ПоСтатьямФинансирования Тогда
			СтатьяФинансирования = СтрокаНачислений.СтатьяФинансирования;
		КонецЕсли;
		
		Если Не ЭтоПремияПроцентом(СтрокаНачислений.СоставнаяЧасть) 
			И Не ЭтоПремияФиксированнойСуммой(СтрокаНачислений.СоставнаяЧасть) Тогда
			// не является премией
			КоэффициентИндексации = 1;
			Если СтрокаНачислений.Индексируется 
				И КоэффициентыИндексацииПоПериодам[СтрокаНачислений.Период] <> Неопределено Тогда
				КоэффициентИндексации = КоэффициентыИндексацииПоПериодам[СтрокаНачислений.Период];
			КонецЕсли;
			
			Отбор = ОтборЭлементаЗаработка();
			Отбор.Месяц = СтрокаНачислений.Период;
			Отбор.СоставнаяЧасть = СтрокаНачислений.СоставнаяЧасть;
			Отбор.КоэффициентИндексации = КоэффициентИндексации;
			Отбор.СтатьяФинансирования = СтатьяФинансирования;
			
			СтрокаЗаработка 		= ЭлементЗаработкаПоОтбору(УчитываемыйЗаработок, Отбор);
			СтрокаЗаработка.Сумма 	= СтрокаЗаработка.Сумма + СтрокаНачислений.Сумма;
			СтрокаЗаработка.Учтено 	= Окр(СтрокаЗаработка.Сумма * СтрокаЗаработка.КоэффициентИндексации, 2);
			Продолжить;
		КонецЕсли;
		
		// является премией
		
		КоэффициентИндексации = 1;
		Если СтрокаНачислений.Индексируется Тогда
			КоэффициентИндексации = КоэффициентыИндексацииПоПериодам[СтрокаНачислений.Период];
			Если КоэффициентИндексации = Неопределено Тогда
				КоэффициентИндексации = 1;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоМесяцев = СтрокаНачислений.КоличествоМесяцев;
		Если ЭтоПремияГодовая(СтрокаНачислений.СоставнаяЧасть) Тогда
			КоличествоМесяцев = 12;
		Иначе	
			Если Не ЗначениеЗаполнено(СтрокаНачислений.КоличествоМесяцев) Тогда
				КоличествоМесяцев = 1;
			КонецЕсли;
		КонецЕсли;	
		
		
		
		//	Для видов премий, учитываемых пропорционально отработанному времени:
		ПремииПоПериодам = Неопределено;
		Если ЭтоПремияФиксированнойСуммой(СтрокаНачислений.СоставнаяЧасть) Тогда
			Если КоличествоМесяцев = 1 Тогда 
				ПремииПоПериодам = ДолиВремениПоПрериодам(Время, ДополнительныеПараметры.ВидУчетаВремениДляСредней, СтрокаНачислений.Период);
			Иначе	
				ПремииПоПериодам = ДолиВремениПоПрериодам(Время, ДополнительныеПараметры.ВидУчетаВремениДляСредней,);
			КонецЕсли;	
		КонецЕсли;	
		
		КоэффициентИндексации = 1;
		МесячнаяЧасть = СтрокаНачислений.Сумма / КоличествоМесяцев;
		УчтеннаяСуммаПремии = 0;

		Если ДополнительныеПараметры.ПорядокРасчета = ПредопределенноеЗначение("Перечисление.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление2010") 
			ИЛИ ДополнительныеПараметры.ПорядокРасчета = Неопределено Тогда 
			ИндексированнаяПремия = Новый Соответствие;
			Для Каждого ПериодИндексации Из КоэффициентыИндексацииПоПериодам Цикл
				Если НЕ ПериодИндексации.Ключ = НачалоМесяца(ДополнительныеПараметры.ДатаНачалаСобытия) Тогда
					Если (КоличествоМесяцев > 1) Или (КоличествоМесяцев = 1 И ПериодИндексации.Ключ = СтрокаНачислений.Период) Тогда
						УчтеннаяСуммаПремии = УчтеннаяСуммаПремии + Окр(МесячнаяЧасть*ПериодИндексации.Значение,2);
						ИндексированнаяПремия.Вставить(ПериодИндексации.Ключ, Окр(МесячнаяЧасть*ПериодИндексации.Значение,2));
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			
			Отбор = ОтборЭлементаЗаработка();
			Отбор.Месяц = СтрокаНачислений.Период;
			Отбор.Год = СтрокаНачислений.Год;
			Отбор.СоставнаяЧасть = СтрокаНачислений.СоставнаяЧасть;
			Отбор.КоэффициентИндексации = КоэффициентИндексации;
			Отбор.КоличествоМесяцев = КоличествоМесяцев;
			Отбор.СтатьяФинансирования = СтатьяФинансирования;
		
			СтрокаПремии 				= ЭлементЗаработкаПоОтбору(УчитываемыйЗаработок, Отбор);
			СтрокаПремии.Сумма 			= СтрокаПремии.Сумма 			+ СтрокаНачислений.Сумма;
			СтрокаПремии.МесячнаяЧасть 	= СтрокаПремии.МесячнаяЧасть 	+ Окр(СтрокаНачислений.Сумма / КоличествоМесяцев, 2);
			Если НЕ ПремииПоПериодам = Неопределено Тогда 
				УчтеннаяПремия = 0;
				Для Каждого ПериодПремии Из ПремииПоПериодам Цикл
					
					Отбор.Месяц = ПериодПремии.Ключ;
					СтрокаПремии 				= ЭлементЗаработкаПоОтбору(УчитываемыйЗаработок, Отбор);
					СтрокаПремии.Сумма 			= СтрокаНачислений.Сумма;
					СтрокаПремии.МесячнаяЧасть 	= Окр(СтрокаНачислений.Сумма / КоличествоМесяцев, 2);
					Если (НЕ ИндексированнаяПремия.Количество() = 0) И (НЕ ПериодПремии.Ключ = НачалоМесяца(ДополнительныеПараметры.ДатаНачалаСобытия)) Тогда
						СтрокаПремии.Учтено = Окр(ИндексированнаяПремия.Получить(ПериодПремии.Ключ)*ПериодПремии.Значение,2);	
					КонецЕсли;
				КонецЦикла;
				Если СтрокаПремии.Учтено = 0 Тогда
					СтрокаПремии.Учтено = Окр(СтрокаПремии.МесячнаяЧасть*КоличествоМесяцевПериодаРасчета,2);	
				КонецЕсли;
			Иначе
				СтрокаПремии.Учтено = ?(УчтеннаяСуммаПремии = 0, Окр(СтрокаПремии.МесячнаяЧасть*КоличествоМесяцевПериодаРасчета,2), Окр(УчтеннаяСуммаПремии,2))	
			КонецЕсли;
		Иначе
			Если СтрокаНачислений.Индексируется И ЭтоПремияГодовая(СтрокаНачислений.СоставнаяЧасть) Тогда
				ИндексированнаяГодоваяПремия = Новый Соответствие;
				Для Каждого ПериодИндексации Из КоэффициентыИндексацииПоПериодам Цикл
					Если НЕ ПериодИндексации.Ключ = НачалоМесяца(ДополнительныеПараметры.ДатаНачалаСобытия) Тогда
						УчтеннаяСуммаПремии = УчтеннаяСуммаПремии + Окр(МесячнаяЧасть*ПериодИндексации.Значение,2);
						ИндексированнаяГодоваяПремия.Вставить(ПериодИндексации.Ключ, Окр(МесячнаяЧасть*ПериодИндексации.Значение,2));
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;	
			
			Отбор = ОтборЭлементаЗаработка();
			Отбор.Месяц = СтрокаНачислений.Период;
			Отбор.Год = СтрокаНачислений.Год;
			Отбор.СоставнаяЧасть = СтрокаНачислений.СоставнаяЧасть;
			Отбор.КоэффициентИндексации = КоэффициентИндексации;
			Отбор.КоличествоМесяцев = КоличествоМесяцев;
			Отбор.СтатьяФинансирования = СтатьяФинансирования;
		
			СтрокаПремии 				= ЭлементЗаработкаПоОтбору(УчитываемыйЗаработок, Отбор);
			СтрокаПремии.Сумма 			= СтрокаПремии.Сумма 			+ СтрокаНачислений.Сумма;
			СтрокаПремии.МесячнаяЧасть 	= СтрокаПремии.МесячнаяЧасть 	+ Окр(СтрокаНачислений.Сумма / КоличествоМесяцев, 2);
		
			Если НЕ ПремииПоПериодам = Неопределено И НЕ ИндексированнаяГодоваяПремия = Неопределено И НЕ ИндексированнаяПремия.Количество() = 0 Тогда
				УчтеннаяСуммаПремииПропорционально = 0;
				Для Каждого ПериодПремии Из ПремииПоПериодам Цикл
					УчтеннаяСуммаПремииПропорционально = УчтеннаяСуммаПремииПропорционально + Окр(ИндексированнаяГодоваяПремия.Получить(ПериодПремии.Ключ)*ПериодПремии.Значение,2);	
					СтрокаПремии.Учтено = УчтеннаяСуммаПремииПропорционально;
				КонецЦикла;	
			Иначе
				СтрокаПремии.Учтено 		= ?(УчтеннаяСуммаПремии = 0, Окр(СтрокаПремии.МесячнаяЧасть*КоличествоМесяцев,2), УчтеннаяСуммаПремии)
			КонецЕсли;	
		
		 КонецЕсли;
		//
	КонецЦикла;	
	
КонецПроцедуры	

Функция СтруктураЗаработкаДляРасчетаСреднегоЗаработка()
	
	ТипДата = Новый ОписаниеТипов("Дата");
	ПустаяДата = ТипДата.ПривестиЗначение();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ПустоеЧисло = ТипЧисло.ПривестиЗначение();  
	
	ТипСоставнаяЧастьЗаработка = Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий");
	ПустаяСоставнаяЧастьЗаработка = ТипСоставнаяЧастьЗаработка.ПривестиЗначение();
	
	Заработок = Новый Структура;
	Заработок.Вставить("Месяц", 					ПустаяДата);
	Заработок.Вставить("Год", 						ПустоеЧисло);
	Заработок.Вставить("СоставнаяЧасть", 			ПустаяСоставнаяЧастьЗаработка);
	Заработок.Вставить("Сумма", 					ПустоеЧисло);
	Заработок.Вставить("КоэффициентИндексации", 	ПустоеЧисло);
	Заработок.Вставить("КоличествоМесяцев", 		ПустоеЧисло);
	Заработок.Вставить("МесячнаяЧасть", 			ПустоеЧисло);
	Заработок.Вставить("КоэффициентНормирования", 	ПустоеЧисло);
	Заработок.Вставить("Учтено", 					ПустоеЧисло);
	Заработок.Вставить("СтатьяФинансирования", ПустаяСтатьяФинансирования());
	
	Возврат Заработок;
	
КонецФункции
Функция СтруктураВремениДляРасчетаСреднегоЗаработка()
	
	ТипДата = Новый ОписаниеТипов("Дата");
	ПустаяДата = ТипДата.ПривестиЗначение();
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ПустоеЧисло = ТипЧисло.ПривестиЗначение();  
	
	ТипСоставнаяЧастьЗаработка = Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий");
	ПустаяСоставнаяЧастьЗаработка = ТипСоставнаяЧастьЗаработка.ПривестиЗначение();
	
	ОтработанноеВремя = Новый Структура;
	ОтработанноеВремя.Вставить("Месяц", 					ПустаяДата);
	
	ОтработанноеВремя.Вставить("КалендарныхДней", 			ПустоеЧисло);
	ОтработанноеВремя.Вставить("НормаКалендарныхДней", 		ПустоеЧисло);
	
	ОтработанноеВремя.Вставить("ОтработаноДней",			ПустоеЧисло);
	ОтработанноеВремя.Вставить("ОтработаноЧасов", 			ПустоеЧисло);
	
	
	
	ОтработанноеВремя.Вставить("Учтено", 					ПустоеЧисло);
	
	ОтработанноеВремя.Вставить("СреднемесячноеКоличествоДней", ПустоеЧисло);
	
	Возврат ОтработанноеВремя;
	
КонецФункции

Функция ОписаниеТипаСтатьяФинансирования()
	Возврат Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата");
КонецФункции

Функция ПустаяСтатьяФинансирования()
	ОписаниеТипаСтатьяФинансирования = ОписаниеТипаСтатьяФинансирования();
	Возврат ОписаниеТипаСтатьяФинансирования.ПривестиЗначение();
КонецФункции

Функция КоэффициентыИндексацииПоПериодам(ДанныеОбИндексации)
	
	КоэффициентыИндексацииПоПериодам = Новый Соответствие;
	
	Для Каждого Индексация Из ДанныеОбИндексации Цикл
		КоэффициентыИндексацииПоПериодам.Вставить(Индексация.Период, Индексация.КоэффициентИндексации);
	КонецЦикла;
	
	Возврат КоэффициентыИндексацииПоПериодам;
	
КонецФункции
Функция ДолиВремениПоПрериодам(ДанныеОВремени, ВидУчетаВремениДляСредней, ПериодНачислений = Неопределено)
	
	ДолиВремениПоПериодам = Новый Соответствие;
	
	Для Каждого СтрокаПериода Из ДанныеОВремени Цикл
		Если ВидУчетаВремениДляСредней = ПредопределенноеЗначение("Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням") Тогда
			ДоляВремениПоПериодам = Окр(?(СтрокаПериода.НормаДнейПоГрафикуСотрудника = 0, 0, СтрокаПериода.ОтработаноДней/СтрокаПериода.НормаДнейПоГрафикуСотрудника),5);	
		Иначе
			ДоляВремениПоПериодам = Окр(?(СтрокаПериода.НормаЧасовПоГрафикуСотрудника = 0, 0,СтрокаПериода.ОтработаноЧасов/СтрокаПериода.НормаЧасовПоГрафикуСотрудника),5);
		КонецЕсли;	
		Если ПериодНачислений = Неопределено Или (СтрокаПериода.Период = ПериодНачислений)Тогда
			ДолиВремениПоПериодам.Вставить(СтрокаПериода.Период, ДоляВремениПоПериодам);
		КонецЕсли;
	КонецЦикла;                                       
	
	Возврат ДолиВремениПоПериодам;
	
КонецФункции

Функция ОтборЭлементаЗаработка()
	
	ОтборЭлементаЗаработка = Новый Структура(
		"Месяц, 
		|Год,
		|СоставнаяЧасть,
		|КоэффициентИндексации,
		|КоличествоМесяцев,
		|КоэффициентНормирования,
		|СтатьяФинансирования");
	
	Возврат ОтборЭлементаЗаработка;
	
КонецФункции 

Функция ОтборЭлементаВремени(Месяц)
	
	ОтборЭлементаВремени = Новый Структура;
	ОтборЭлементаВремени.Вставить("Месяц", Месяц);
	
	Возврат ОтборЭлементаВремени;
	
КонецФункции 

Функция ЭлементЗаработкаПоОтбору(Коллекция, Отбор)
	
	ПодходящийЭлемент = ЭлементКоллекцииПоОтбору(Коллекция, Отбор);
	
	Если ПодходящийЭлемент = Неопределено Тогда
		ПодходящийЭлемент = СтруктураЗаработкаДляРасчетаСреднегоЗаработка();
		ЗаполнитьЭлементКоллекцииПоОтбору(ПодходящийЭлемент, Отбор);
		
		Коллекция.Добавить(ПодходящийЭлемент);
	КонецЕсли;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Функция ЭлементВремениПоОтбору(Коллекция, Отбор)
	
	ПодходящийЭлемент = ЭлементКоллекцииПоОтбору(Коллекция, Отбор);
	
	Если ПодходящийЭлемент = Неопределено Тогда
		ПодходящийЭлемент = СтруктураВремениДляРасчетаСреднегоЗаработка();
		ЗаполнитьЭлементКоллекцииПоОтбору(ПодходящийЭлемент, Отбор);
		
		Коллекция.Добавить(ПодходящийЭлемент);
	КонецЕсли;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Процедура ЗаполнитьЭлементКоллекцииПоОтбору(Элемент, Отбор) Экспорт
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если ЭлементОтбора.Значение <> Неопределено Тогда
			Элемент[ЭлементОтбора.Ключ] = ЭлементОтбора.Значение; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ЭлементКоллекцииПоОтбору(Коллекция, Отбор) Экспорт
	
	ПодходящийЭлемент = Неопределено;
	
	Для каждого Элемент Из Коллекция Цикл
		ЭтоПодходящийЭлемент = Истина;
		
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ЭлементОтбора.Значение <> Неопределено
				И Элемент[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение  Тогда
				ЭтоПодходящийЭлемент = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПодходящийЭлемент Тогда
			ПодходящийЭлемент = Элемент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодходящийЭлемент;
	
КонецФункции

Функция ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод(СтрокаНачислений, ДатаНачалаПериода, ДатаОкончанияПериода)
	
	ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод = Ложь;
	
	Если ЗначениеЗаполнено(СтрокаНачислений.ДатаНачалаБазовогоПериода) Тогда
		Если СтрокаНачислений.ДатаНачалаБазовогоПериода < ДатаНачалаПериода 
			Или СтрокаНачислений.ДатаНачалаБазовогоПериода > ДатаОкончанияПериода Тогда
			ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПремияНачисленаЗаВремяНеВходящееВРасчетныйПериод
	
КонецФункции 

Функция УменьшатьПремииПроцентомНачисленныеЗаВремяНеВходящееВРасчетныйПериод()
	Возврат Истина;
КонецФункции 

Функция ЭтоПремияПроцентом(СоставнаяЧастьЗаработка)
	Возврат СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияПроцентом") 
			Или СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом");
КонецФункции 

Функция ЭтоПремияФиксированнойСуммой(СоставнаяЧастьЗаработка)
	Возврат СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияФиксированнойСуммой") 
			Или СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой");
КонецФункции 

Функция ЭтоПремияГодовая(СоставнаяЧастьЗаработка)
	Возврат СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяПроцентом") 
			Или СоставнаяЧастьЗаработка = ПредопределенноеЗначение("Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ПремияГодоваяФиксированнойСуммой");
КонецФункции 

Процедура ПодобратьПорядокРасчетаПоДатеПрименения(ПорядокРасчета, Период, ПравилаПримененияПорядкаРасчета)
	
	// Подбирается порядок расчета, 
	// дата начала применения которого "ближе" всего к заданному периоду.
	
	Для Каждого ПрименениеПорядкаРасчета Из ПравилаПримененияПорядкаРасчета Цикл
		Если Период >= ПрименениеПорядкаРасчета.НачалоПрименения Тогда
			ПорядокРасчета = ПрименениеПорядкаРасчета.ПорядокРасчета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураПримененияПорядкаРасчета(ПорядокРасчета, НачалоПрименения)
	
	СтруктураПрименения = Новый Структура;
	СтруктураПрименения.Вставить("ПорядокРасчета", ПорядокРасчета);
	СтруктураПрименения.Вставить("НачалоПрименения", НачалоПрименения);
	
	Возврат СтруктураПрименения;
	
КонецФункции

Функция КоличествоДнейВМесяцеДляОплатыОтпусков(ДатаНачалаСобытия)
	
	Возврат ?(Не ЗначениеЗаполнено(ДатаНачалаСобытия), 29.4, ?(ДатаНачалаСобытия < ДатаИзмененияКоличестваДнейДляОтпускных(), 29.4, 29.3));	

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормыКалькулятораСреднегоЗаработка

// Функция заполняет соответствие месяца и его номера по порядку от 1 до 12.
//
Функция НомераМесяцевПериодаРасчетаСреднего(НачалоПериода, ОкончаниеПериода, КоличествоМесяцев = 12) Экспорт
	
	НомераМесяцев = Новый Соответствие;
	
	ТекущийМесяц	= НачалоМесяца(ОкончаниеПериода);
	НомерМесяца		= КоличествоМесяцев;
	Пока ТекущийМесяц >= НачалоМесяца(НачалоПериода)
		И НомерМесяца >= 1 Цикл
		НомераМесяцев.Вставить(ТекущийМесяц, НомерМесяца);	
		ТекущийМесяц	= ДобавитьМесяц(ТекущийМесяц, -1);
		НомерМесяца		= НомерМесяца - 1;
	КонецЦикла;
	
	Возврат НомераМесяцев;
	
КонецФункции	

Функция СтрокаСреднегоЗаработка(СреднийЗаработок, Идентификатор) Экспорт
	
	НайденныеСтроки = СреднийЗаработок.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор));
	
	Возврат ?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0]);
	
КонецФункции

// Функция конструирует структуру, описывающую данные о начислениях 
// для расчета среднего заработка за один месяц расчетного периода.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиДанныхОНачисленияхОбщегоСреднегоЗаработка() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПоляОписания.Вставить("ПорядокРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСреднегоЗаработкаОбщий"));
	ПоляОписания.Вставить("СоставнаяЧасть", Новый ОписаниеТипов("ПеречислениеСсылка.УчетНачисленийВСреднемЗаработкеОбщий"));
	ПоляОписания.Вставить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	ПоляОписания.Вставить("Период", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("Индексируется", Новый ОписаниеТипов("Булево"));
	ПоляОписания.Вставить("Сумма", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	ПоляОписания.Вставить("Год", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ДатаНачалаБазовогоПериода", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("КоличествоМесяцев", Новый ОписаниеТипов("Число"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

// Функция конструирует структуру, описывающую данные о времени 
// для расчета среднего заработка за один месяц расчетного периода.
// Поля структуры заполнены пустыми значениями соответствующих типов.
//
Функция ОписаниеСтрокиДанныхОВремениСреднегоЗаработкаФСС() Экспорт
	
	ПоляОписания = Новый Соответствие;
	ПоляОписания.Вставить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПоляОписания.Вставить("Период", Новый ОписаниеТипов("Дата"));
	ПоляОписания.Вставить("ОтработаноДнейКалендарных", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("ДнейБолезниУходаЗаДетьми", Новый ОписаниеТипов("Число"));
	ПоляОписания.Вставить("Источник", Новый ОписаниеТипов("ПеречислениеСсылка.ИсточникиДанныхДляРасчетаСреднегоЗаработка"));
	
	Описание = Новый Структура;
	Для Каждого КлючИЗначение Из ПоляОписания Цикл
		Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти
