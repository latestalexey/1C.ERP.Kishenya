////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции планирования производства и расчета графика производства
//
////////////////////////////////////////////////////////////////////////////////

//++ НЕ УТКА

#Область ПрограммныйИнтерфейс

#Область ЗаказНаПроизводство

// Выполняет проверку заполнения спецификации в строках продукции документа "Заказ на производство"
//
// Параметры:
//  Объект						- ДокументОбъект.ЗаказНаПроизводство - заказ на производство, который нужно проверить
//  МассивКлючей				- Массив - массив ключей строк табличной части Продукция
//  Отказ						- Булево - устанавливается в значение Истина, если найдены ошибки
//  ОбновитьСостояние			- Булево - Истина, если требуется обновить состояние спецификации в строках
//
Процедура ПроверитьЗаполнениеСпецификацииВЗаказеНаПроизводство(Объект, МассивКлючей, Отказ = Ложь, ОбновитьСостояние = Ложь, СообщитьОбОшибках = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоРабота,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В (&МассивНоменклатуры)";
	
	МассивНоменклатуры = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
		ОбщегоНазначенияУТ.ПолучитьМассивУникальныхЗначенийКолонкиТаблицы(Объект.МатериалыИУслуги, "Номенклатура"));
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
		ОбщегоНазначенияУТ.ПолучитьМассивУникальныхЗначенийКолонкиТаблицы(Объект.ВыходныеИзделия,  "Номенклатура"));
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		МассивНоменклатуры, 
		ОбщегоНазначенияУТ.ПолучитьМассивУникальныхЗначенийКолонкиТаблицы(Объект.ВозвратныеОтходы, "Номенклатура"));
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	
	ПараметрыНоменклатуры = Новый Соответствие;

	Пока Выборка.Следующий() Цикл
		СтруктураПараметров = Новый Структура("ХарактеристикиИспользуются, ЭтоРабота");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		ПараметрыНоменклатуры.Вставить(Выборка.Номенклатура, СтруктураПараметров);
	КонецЦикла;
	
	ТаблицаПродукция = Объект.Продукция.Выгрузить(, "Назначение");
	
	РеквизитыНазначений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ТаблицаПродукция.ВыгрузитьКолонку("Назначение"), "Заказ");
		
	ПараметрыЭтапов = Объект.Этапы.Выгрузить(, "
		|КлючСвязи, 
		|Этап, 
		|ПроизводствоНаСтороне");
		
	ПараметрыЭтапов.Индексы.Добавить("КлючСвязи");
	ПараметрыЭтапов.Индексы.Добавить("КлючСвязи, ПроизводствоНаСтороне");
	
	ПоЗаказуДавальца = Объект.ПроизводствоПоЗаказу И ТипЗнч(Объект.Заказ) = Тип("ДокументСсылка.ЗаказДавальца");
	
	ЕстьНазначениеЗаказа = ЗначениеЗаполнено(Объект.Назначение);
	
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Для Каждого Ключ Из МассивКлючей Цикл
		
		СтрокаПродукция = Объект.Продукция.НайтиСтроки(Новый Структура("КлючСвязи", Ключ))[0];
		
		ЕстьОшибкиЗаполнения = Ложь;
		ЕстьУточненияМатериалов = Ложь;
		
		ЕстьНазначениеПродукции = ЗначениеЗаполнено(СтрокаПродукция.Назначение);
		
		ИспользуетсяСубдавальческаяСхема = Ложь;
		ПродукцияПрисутствуетВВыходныхИзделиях = Ложь;
		
		СтруктураОтбора = Новый Структура("КлючСвязиПродукция", Ключ);
		
		МассивСтрокЭтапы                            = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
		МассивСтрокВыходныеИзделия                  = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора);
		МассивСтрокВозвратныеОтходы                 = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
		МассивСтрокМатериалыИУслуги                 = Объект.МатериалыИУслуги.НайтиСтроки(СтруктураОтбора);
		МассивСтрокТрудозатраты                     = Объект.Трудозатраты.НайтиСтроки(СтруктураОтбора);
		МассивСтрокВидыРабочихЦентров               = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураОтбора);
		МассивСтрокАльтернативныеВидыРабочихЦентров = Объект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураОтбора);
		
		// Материалы и услуги.
		Для Каждого Строка из МассивСтрокМатериалыИУслуги Цикл
			
			ПараметрыНоменклатурыТекущейСтроки = ПараметрыНоменклатуры[Строка.Номенклатура];
			
			Если Не ЗначениеЗаполнено(Строка.Номенклатура)
				Или Не ЗначениеЗаполнено(Строка.Характеристика) И ХарактеристикиИспользуются
					И ПараметрыНоменклатурыТекущейСтроки.ХарактеристикиИспользуются
				Или Не ЗначениеЗаполнено(Строка.Склад) И Строка.ЗаказатьНаСклад
				Или Не ЗначениеЗаполнено(Строка.ИсточникПолученияПолуфабриката) И Строка.ПроизводитсяВПроцессе
				Или Не ЗначениеЗаполнено(Строка.КлючСвязи)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиПродукция)
				Или Не ЗначениеЗаполнено(Строка.СтатьяКалькуляции)
				Или Не ЗначениеЗаполнено(Строка.Этап)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиЭтапы)
				Или ПараметрыЭтапов.НайтиСтроки(Новый Структура("КлючСвязи", Строка.КлючСвязиЭтапы)).ВГраница() = -1
				Или ПараметрыЭтапов.НайтиСтроки(Новый Структура("КлючСвязи, ПроизводствоНаСтороне", Строка.КлючСвязиЭтапы, Истина)).ВГраница() <> -1 
						И ПараметрыНоменклатурыТекущейСтроки.ЭтоРабота
				Или ЕстьНазначениеПродукции И ПланированиеПроизводстваКлиентСервер.ЕстьОшибкиЗаполненияНазначенияВСтрокеТЧМатериалыИУслуги(Строка)
				Или Не ЕстьНазначениеПродукции И ЕстьНазначениеЗаказа И ПланированиеПроизводстваКлиентСервер.ЕстьОшибкиЗаполненияНазначенияВСтрокеТЧМатериалыИУслуги(Строка)
					
				Тогда
				
				Если Строка.Номенклатура.Пустая() Или Строка.Характеристика.Пустая()
						И ХарактеристикиИспользуются И ПараметрыНоменклатурыТекущейСтроки.ХарактеристикиИспользуются Тогда
					ЕстьУточненияМатериалов = Истина;
				Иначе
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьОшибкиЗаполнения и ЕстьУточненияМатериалов Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьОшибкиЗаполнения Тогда
			
			ПараметрыПроверкиВнутреннихПолуфабрикатов = УправлениеДаннымиОбИзделиях.ПолучитьПараметрыПроверкиВнутреннихПолуфабрикатов(
				Объект, МассивСтрокВозвратныеОтходы, МассивСтрокЭтапы);
		
			СтруктураПроверок = Новый Структура("
				|СтатусСпецификации,
				|СоответствиеСпецификации,
				|ПроизводствоНаСтороне,
				|ЗаполнениеВнутреннихПолуфабрикатов");
			
			ПараметрыПроверки = Новый Структура();
			ПараметрыПроверки.Вставить("СтруктураПроверок", СтруктураПроверок);
			ПараметрыПроверки.Вставить("ВыводитьСообщения", Ложь);
			ПараметрыПроверки.Вставить("ПараметрыПроверкиВнутреннихПолуфабрикатов", ПараметрыПроверкиВнутреннихПолуфабрикатов);
			
			УправлениеДаннымиОбИзделиях.ПроверитьСпецификацииПолуфабрикатов(, МассивСтрокМатериалыИУслуги, ПараметрыПроверки, ЕстьОшибкиЗаполнения);
			
		КонецЕсли;
		
		// Этапы.
		Для Каждого Строка из МассивСтрокЭтапы Цикл
			
			ИспользуетсяСубдавальческаяСхема = ИспользуетсяСубдавальческаяСхема 
				ИЛИ Строка.ПроизводствоНаСтороне 
					И (ПоЗаказуДавальца
						ИЛИ РеквизитыНазначений[СтрокаПродукция.Назначение] <> Неопределено
								И ТипЗнч(РеквизитыНазначений[СтрокаПродукция.Назначение].Заказ) = Тип("ДокументСсылка.ЗаказДавальца"));
			
			Если Не ЗначениеЗаполнено(Строка.Подразделение)
				Или ЗначениеЗаполнено(Строка.Этап) 
					И Не ЗначениеЗаполнено(Строка.Спецификация)
				Или Строка.ПланироватьРаботуВидовРабочихЦентров
					И Не ЗначениеЗаполнено(Строка.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий)
				Или Не Строка.ПланироватьРаботуВидовРабочихЦентров
					И Не ЗначениеЗаполнено(Строка.ЕдиницаИзмеренияДлительностиЭтапа)
				Или Не ЗначениеЗаполнено(Строка.ЕдиницаИзмеренияПредварительногоБуфера)
				Или Не ЗначениеЗаполнено(Строка.ЕдиницаИзмеренияЗавершающегоБуфера)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязи)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиПродукция)
				Или Строка.ПроизводствоНаСтороне
						И Объект.ВыходныеИзделия.НайтиСтроки(
							Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапы", 
												Строка.КлючСвязиПродукция, 
												Строка.КлючСвязи)).Количество() = 0 Тогда
				
				ЕстьОшибкиЗаполнения = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Выходные изделия.
		Для Каждого Строка из МассивСтрокВыходныеИзделия Цикл
			
			ПараметрыНоменклатурыТекущейСтроки = ПараметрыНоменклатуры[Строка.Номенклатура];
			
			ПродукцияПрисутствуетВВыходныхИзделиях = ПродукцияПрисутствуетВВыходныхИзделиях
				ИЛИ (Строка.Номенклатура = СтрокаПродукция.Номенклатура
					 И Строка.Характеристика = СтрокаПродукция.Характеристика
					 И Не Строка.ПроизводитсяВПроцессе
					 И (НЕ ПараметрыНоменклатурыТекущейСтроки.ЭтоРабота И Строка.Склад = СтрокаПродукция.Склад
						 ИЛИ ПараметрыНоменклатурыТекущейСтроки.ЭтоРабота И Строка.Подразделение = СтрокаПродукция.Подразделение));
			
			Если Не ЗначениеЗаполнено(Строка.Номенклатура)
				Или (Не ЗначениеЗаполнено(Строка.Характеристика)
					И ХарактеристикиИспользуются И ПараметрыНоменклатурыТекущейСтроки.ХарактеристикиИспользуются)
				Или (Не ЗначениеЗаполнено(Строка.КоличествоУпаковок) 
						И (Не Строка.ПроизводитсяВПроцессе И Не (Строка.Номенклатура = СтрокаПродукция.Номенклатура 
							И Строка.Характеристика = СтрокаПродукция.Характеристика)))
				Или Не ЗначениеЗаполнено(Строка.Этап)
				Или Не (ЗначениеЗаполнено(Строка.Склад) Или ЗначениеЗаполнено(Строка.Подразделение))
				Или Не ЗначениеЗаполнено(Строка.Склад)
						И ПараметрыЭтапов.НайтиСтроки(Новый Структура("КлючСвязи, ПроизводствоНаСтороне", Строка.КлючСвязиЭтапы, Истина)).ВГраница() <> -1
				Или Не ЗначениеЗаполнено(Строка.КлючСвязи)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиПродукция)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиЭтапы) Тогда
				
				ЕстьОшибкиЗаполнения = Истина;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Возвратные отходы.
		Для Каждого Строка из МассивСтрокВозвратныеОтходы Цикл
			Если Не ЗначениеЗаполнено(Строка.Номенклатура)
				Или (Не ЗначениеЗаполнено(Строка.Характеристика)
					И ХарактеристикиИспользуются И ПараметрыНоменклатуры[Строка.Номенклатура].ХарактеристикиИспользуются)
				Или Не ЗначениеЗаполнено(Строка.КоличествоУпаковок)
				Или Не ЗначениеЗаполнено(Строка.Этап)
				Или Не (ЗначениеЗаполнено(Строка.Склад) Или ЗначениеЗаполнено(Строка.Подразделение))
				Или Не ЗначениеЗаполнено(Строка.Склад)
						И ПараметрыЭтапов.НайтиСтроки(Новый Структура("КлючСвязи, ПроизводствоНаСтороне", Строка.КлючСвязиЭтапы, Истина)).ВГраница() <> -1
				Или Не ЗначениеЗаполнено(Строка.КлючСвязи)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиПродукция)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиЭтапы)
				Или Не ЗначениеЗаполнено(Строка.СтатьяКалькуляции) Тогда
				
				ЕстьОшибкиЗаполнения = Истина;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Трудозатраты.
		Для Каждого Строка из МассивСтрокТрудозатраты Цикл
			Если Не ЗначениеЗаполнено(Строка.ВидРабот)
				Или Не ЗначениеЗаполнено(Строка.Количество)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязи)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиПродукция)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиЭтапы)
				Или Не ЗначениеЗаполнено(Строка.СтатьяКалькуляции) Тогда
				
				ЕстьОшибкиЗаполнения = Истина;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Виды рабочих центров.
		Для Каждого Строка из МассивСтрокВидыРабочихЦентров Цикл
			Если Не ЗначениеЗаполнено(Строка.ВидРабочегоЦентра)
				Или Не ЗначениеЗаполнено(Строка.ВремяРаботы)
				Или Не ЗначениеЗаполнено(Строка.ЕдиницаИзмерения)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиПродукция)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязи) Тогда
				
				ЕстьОшибкиЗаполнения = Истина;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Альтернативные виды рабочих центров.
		Для Каждого Строка из МассивСтрокАльтернативныеВидыРабочихЦентров Цикл
			Если Не ЗначениеЗаполнено(Строка.ВидРабочегоЦентра)
				Или Не ЗначениеЗаполнено(Строка.ВремяРаботы)
				Или Не ЗначениеЗаполнено(Строка.ЕдиницаИзмерения)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиВидыРабочихЦентров)
				Или Не ЗначениеЗаполнено(Строка.КлючСвязиПродукция) Тогда
				
				ЕстьОшибкиЗаполнения = Истина;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЕстьОшибкиЗаполнения = ЕстьОшибкиЗаполнения ИЛИ НЕ ПродукцияПрисутствуетВВыходныхИзделиях;
		
		Если ЕстьОшибкиЗаполнения Или ЕстьУточненияМатериалов Тогда
			
			Если ЕстьУточненияМатериалов И ЕстьОшибкиЗаполнения Тогда
				ШаблонСообщения = НСтр("ru='Не заданы уточнения материалов в строке ""%1"" списка ""Продукция"".';uk='Не задані уточнення матеріалів у рядку ""%1"" списку ""Продукція"".'");
				СтрокаПродукция.СостояниеСпецификации = 4;
			ИначеЕсли ЕстьУточненияМатериалов Тогда
				ШаблонСообщения = НСтр("ru='Не заданы уточнения материалов в строке ""%1"" списка ""Продукция"".';uk='Не задані уточнення матеріалів у рядку ""%1"" списку ""Продукція"".'");
				СтрокаПродукция.СостояниеСпецификации = 2;
			Иначе
				ШаблонСообщения = НСтр("ru='Ошибка заполнения спецификации в строке ""%1"" списка ""Продукция"".';uk='Помилка заповнення специфікації у рядку ""%1"" списку ""Продукція"".'");
				СтрокаПродукция.СостояниеСпецификации = 3;
			КонецЕсли;
			
			Если СообщитьОбОшибках Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаПродукция.НомерСтроки);
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Продукция", СтрокаПродукция.НомерСтроки, "СостояниеСпецификации");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКРеквизиту,, Отказ);
			КонецЕсли;
				
		ИначеЕсли ОбновитьСостояние Тогда
			
			СтрокаПродукция.СостояниеСпецификации = 0;
			СтрокаПродукция.ЕстьСоответствиеСтандартнойСпецификации = Истина;
			
		КонецЕсли;
		
		Если ИспользуетсяСубдавальческаяСхема Тогда 
			
			ШаблонСообщения = НСтр("ru='При производстве по заказу давальца не поддерживается выполнение этапов сторонними переработчиками, см. строку ""%1"" списка ""Продукция"".';uk='При виробництві по замовленню давальця не підтримується виконання етапів сторонніми переробниками, див. рядок ""%1"" списку ""Продукція"".'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, СтрокаПродукция.НомерСтроки);
			
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.Продукция", СтрокаПродукция.НомерСтроки, "Спецификация");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,, 
				ПутьКРеквизиту,, 
				Отказ);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет проверку заполнения табличной части "Продукция" документа "Заказ на производство"
//
Процедура ПроверитьЗаполнениеПродукция(Объект, Отказ) Экспорт
	
	Колонки = "НомерСтроки, НачатьНеРанее, ДатаПотребности, Номенклатура, Склад, Подразделение";
	АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Продукция""';uk=' у рядку %НомерСтроки% списку ""Продукція""'");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Продукция.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Продукция.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Продукция.Склад КАК Справочник.Склады) КАК Склад,
	|	Продукция.НачатьНеРанее КАК НачатьНеРанее,
	|	Продукция.ДатаПотребности КАК ДатаПотребности,
	|	Продукция.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ВТПродукция
	|ИЗ
	|	&Продукция КАК Продукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукция.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТПродукция КАК Продукция
	|ГДЕ
	|	Продукция.НачатьНеРанее <> ДАТАВРЕМЯ(1, 1, 1)
	|	И Продукция.ДатаПотребности <> ДАТАВРЕМЯ(1, 1, 1)
	|	И Продукция.ДатаПотребности < Продукция.НачатьНеРанее
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукция.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТПродукция КАК Продукция
	|ГДЕ
	|	Продукция.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И Продукция.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукция.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТПродукция КАК Продукция
	|ГДЕ
	|	Продукция.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Продукция.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("Продукция", Объект.Продукция.Выгрузить(, Колонки));
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='Дата потребности меньше даты начала производства';uk='Дата потреби менше дати початку виробництва'");

		Выборка = МассивРезультатов[1].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				КлючДанных,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Выборка.НомерСтроки, "ДатаПотребности"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ МассивРезультатов[2].Пустой() Тогда
	
		ТекстОшибки = НСтр("ru='Не заполнена колонка ""Склад""';uk='Не заповнена колонка ""Склад""'");
		
		Выборка = МассивРезультатов[2].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Выборка.НомерСтроки, "Склад"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ МассивРезультатов[3].Пустой() Тогда
		
		ТекстОшибки = НСтр("ru='Не заполнена колонка ""Подразделение""';uk='Не заповнена колонка ""Підрозділ""'");
		
		Выборка = МассивРезультатов[3].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Продукция", Выборка.НомерСтроки, "Подразделение"),
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет спецификацию заказа на производство
//
// Параметры:
//  Объект										- ДокументОбъект.ЗаказНаПроизводство - заказ на производство, который нужно заполнить
//  МассивДанных								- Массив - массив данных о продукции для которой нужно заполнить спецификацию заказа
//  КэшированныеЗначения						-  Структура
//  ЗаполнитьПризнакХарактеристикиИспользуются	- Булево - Истина, если нужно заполнить реквизит ХарактеристикиИспользуются
//  ЗаполнятьИнформациюПоАвтовыбору				- Булево - Истина, если нужно заполнить информацию об автовыборе материалов
//  ЕстьУточненияМатериалов 					- Булево
//
Процедура ЗаполнитьСпецификациюЗаказа(Объект, МассивДанных, КэшированныеЗначения, ЗаполнитьПризнакХарактеристикиИспользуются = Ложь, ЗаполнятьИнформациюПоАвтовыбору = Ложь, ЕстьУточненияМатериалов = Неопределено) Экспорт
	
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	ДанныеДляЗаполнения = МассивДанных;
	Пока ДанныеДляЗаполнения.Количество() <> 0 Цикл
		
		ДанныеДляЗаполнения = ЗаполнитьСпецификациюЗаказаПоСпискуНоменклатуры(
													Объект, 
													ДанныеДляЗаполнения,
													КэшированныеЗначения, 
													ЗаполнятьИнформациюПоАвтовыбору, 
													ЕстьУточненияМатериалов,
													ХарактеристикиИспользуются);
				
	КонецЦикла;
	
КонецПроцедуры

// Помещает данные спецификации заказа в хранилище и возвращает адрес в хранилище.
//
// Параметры:
//  ЗаказНаПроизводство - ДокументОбъект.ЗаказНаПроизводство, ДокументСсылка.ЗаказНаПроизводство - заказ на производство
//  КлючСвязиПродукция - УникальныйИдентификатор - Идентификатор строки продукции в заказе на производство
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор формы
//
Функция ДанныеСпецификацииЗаказаВХранилилище(Знач ЗаказНаПроизводство, КлючСвязиПродукция, УникальныйИдентификатор) Экспорт
	
	Если ТипЗнч(ЗаказНаПроизводство) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		ЗаказНаПроизводство = ЗаказНаПроизводство.ПолучитьОбъект();
		
	КонецЕсли;
	
	ДанныеПродукции = ЗаказНаПроизводство.Продукция.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязиПродукция))[0];
	
	СтруктураПродукции = Новый Структура;
	
	СтруктураПродукции.Вставить("Ссылка",                                    ЗаказНаПроизводство.Ссылка);
	СтруктураПродукции.Вставить("СтатусЗаказаНаПроизводство",                ЗаказНаПроизводство.Статус);
	СтруктураПродукции.Вставить("СтатусГрафикаПроизводства",                 ЗаказНаПроизводство.СтатусГрафикаПроизводства);
	СтруктураПродукции.Вставить("ПроизводствоПоЗаказу",                      ЗаказНаПроизводство.ПроизводствоПоЗаказу);
	СтруктураПродукции.Вставить("Заказ",                                     ЗаказНаПроизводство.Заказ);
	СтруктураПродукции.Вставить("НомерСтроки",                               ДанныеПродукции.НомерСтроки);
	СтруктураПродукции.Вставить("Номенклатура",                              ДанныеПродукции.Номенклатура);
	СтруктураПродукции.Вставить("Характеристика",                            ДанныеПродукции.Характеристика);
	СтруктураПродукции.Вставить("Упаковка",                                  ДанныеПродукции.Упаковка);
	СтруктураПродукции.Вставить("КоличествоУпаковок",                        ДанныеПродукции.КоличествоУпаковок);
	СтруктураПродукции.Вставить("Количество",                                ДанныеПродукции.Количество);
	СтруктураПродукции.Вставить("Спецификация",                              ДанныеПродукции.Спецификация);
	СтруктураПродукции.Вставить("ДатаПотребности",                           ДанныеПродукции.ДатаПотребности);
	СтруктураПродукции.Вставить("НачатьНеРанее",                             ДанныеПродукции.НачатьНеРанее);
	СтруктураПродукции.Вставить("РазмещениеВыпуска",                         ДанныеПродукции.РазмещениеВыпуска);
	СтруктураПродукции.Вставить("Склад",                                     ДанныеПродукции.Склад);
	СтруктураПродукции.Вставить("ИзмененияЗапрещены",                        ДанныеПродукции.ИзмененияЗапрещены);
	СтруктураПродукции.Вставить("КодСтроки",                                 ДанныеПродукции.КодСтроки);
	СтруктураПродукции.Вставить("КлючСвязи",                                 ДанныеПродукции.КлючСвязи);
	СтруктураПродукции.Вставить("КлючСвязиМатериалыИУслуги",                 ДанныеПродукции.КлючСвязиМатериалыИУслуги);
	СтруктураПродукции.Вставить("КлючСвязиПродукция",                        ДанныеПродукции.КлючСвязиПродукция);
	СтруктураПродукции.Вставить("ПодразделениеДиспетчер",                    ЗаказНаПроизводство.Подразделение);
	СтруктураПродукции.Вставить("НаправлениеДеятельности",                   ЗаказНаПроизводство.НаправлениеДеятельности);
	СтруктураПродукции.Вставить("Подразделение",                             ДанныеПродукции.Подразделение);
	СтруктураПродукции.Вставить("ЕстьСоответствиеСтандартнойСпецификации",   ДанныеПродукции.ЕстьСоответствиеСтандартнойСпецификации);
	СтруктураПродукции.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", ДанныеПродукции.ОптимальноеКоличествоПередачиМеждуЭтапами);
	
	СтруктураПродукции.Вставить("ЕстьУточненияМатериалов", Ложь);
	СтруктураПродукции.Вставить("ЕстьОшибкиЗаполнения", Ложь);
	
	СтруктураПродукции.Вставить("Назначение",       ДанныеПродукции.Назначение);
	СтруктураПродукции.Вставить("НазначениеЗаказа", ЗаказНаПроизводство.Назначение);
	
	Если ДанныеПродукции.СостояниеСпецификации = 2 Тогда
		
		СтруктураПродукции.Вставить("ЕстьУточненияМатериалов", Истина);
		
	ИначеЕсли ДанныеПродукции.СостояниеСпецификации = 3 Тогда
		
		СтруктураПродукции.Вставить("ЕстьОшибкиЗаполнения", Истина);
		
	ИначеЕсли ДанныеПродукции.СостояниеСпецификации = 4 Тогда
		
		СтруктураПродукции.Вставить("ЕстьУточненияМатериалов", Истина);
		СтруктураПродукции.Вставить("ЕстьОшибкиЗаполнения", Истина);
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("КлючСвязиПродукция", КлючСвязиПродукция);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("СтруктураПродукции", СтруктураПродукции);
	СтруктураДанных.Вставить("Этапы", ЗаказНаПроизводство.Этапы.Выгрузить(СтруктураОтбора));
	СтруктураДанных.Вставить("ВыходныеИзделия", ЗаказНаПроизводство.ВыходныеИзделия.Выгрузить(СтруктураОтбора));
	СтруктураДанных.Вставить("ВозвратныеОтходы", ЗаказНаПроизводство.ВозвратныеОтходы.Выгрузить(СтруктураОтбора));
	СтруктураДанных.Вставить("МатериалыИУслуги", ЗаказНаПроизводство.МатериалыИУслуги.Выгрузить(СтруктураОтбора));
	СтруктураДанных.Вставить("Трудозатраты", ЗаказНаПроизводство.Трудозатраты.Выгрузить(СтруктураОтбора));
	СтруктураДанных.Вставить("ВидыРабочихЦентров", ЗаказНаПроизводство.ВидыРабочихЦентров.Выгрузить(СтруктураОтбора));
	СтруктураДанных.Вставить("АльтернативныеВидыРабочихЦентров", ЗаказНаПроизводство.АльтернативныеВидыРабочихЦентров.Выгрузить(СтруктураОтбора));
	СтруктураДанных.Вставить("ЭтапыВосстановленияБрака", ЗаказНаПроизводство.ЭтапыВосстановленияБрака.Выгрузить(СтруктураОтбора));
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	
КонецФункции

// Заполняет служебный реквизит КоличествоЭтаповНаЕдиницуСледующегоЭтапа в заказе на производство и обработке редактирования спецификации заказа.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаПроизводство, ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа - заказ на производство,
//  	обработка редактирования спецификации заказа
//  КлючСвязиПродукция - УникальныйИдентификатор - Идентификатор строки продукции в заказе на производство
//
Процедура ЗаполнитьКоличествоЭтаповНаЕдиницуСледующегоЭтапаРекурсивно(Объект, КлючСвязиПродукция, ЭтапРодитель = Неопределено) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиПродукция", КлючСвязиПродукция);
	
	Если ЭтапРодитель = Неопределено Тогда
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Иначе
		СтруктураОтбора.Вставить("КлючСвязиЭтапы", ЭтапРодитель.КлючСвязи);
	КонецЕсли;
	
	НайденныеСтроки = Объект.Этапы.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка из НайденныеСтроки Цикл
		
		Если ЭтапРодитель = Неопределено Тогда
			Строка.КоличествоЭтаповНаЕдиницуСледующегоЭтапа = 1;
		Иначе
			Строка.КоличествоЭтаповНаЕдиницуСледующегоЭтапа = Строка.Количество / ?(ЭтапРодитель.Количество = 0, Строка.Количество, ЭтапРодитель.Количество);
		КонецЕсли;
		
		ЗаполнитьКоличествоЭтаповНаЕдиницуСледующегоЭтапаРекурсивно(Объект, КлючСвязиПродукция, Строка);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет этап из спецификации заказа.
//
// Параметры:
//	Объект - ДокументОбъект.ЗаказНаПроизводство, ОбработкаОбъект.РедактированиеСпецификацииЗаказа - Объект, в котором удаляются этапы.
//	КлючСвязи - УникальныйИдентификатор - идентификатор удаляемого этапа
//	Отказ - Булево - признак отказа от удаления
//	ОписаниеОшибки - Строка - описание ошибки при удалении этапа
//	БракПоМаршрутнымЛистам - ДанныеФормыКоллекция - Таблица с данными о браке по маршрутным листам этапов
//
Процедура УдалитьЭтапПроизводства(Объект, КлючСвязи, Отказ = Ложь, ОписаниеОшибки = Неопределено, БракПоМаршрутнымЛистам = Неопределено) Экспорт
	
	ОтборКлючСвязи = Новый Структура("КлючСвязи", КлючСвязи);
	ОтборКлючСвязиЭтапы = Новый Структура("КлючСвязиЭтапы");
	
	ТекущиеДанные = Объект.Этапы.НайтиСтроки(ОтборКлючСвязи)[0];
	
	// Проверка возможности удаления этапов по наличию выходного изделия, которое является продукцией.
	Если Не ТекущиеДанные.ЭтапВосстановленияБрака Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", Объект.Номенклатура);
		СтрокаВыходноеИзделие = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураОтбора)[0];
		Если СтрокаВыходноеИзделие.КлючСвязиЭтапы = ТекущиеДанные.КлючСвязи Тогда
			Отказ = Истина;
			ОписаниеОшибки = НСтр("ru='Нельзя удалять этап, содержащий продукцию в качестве выходного изделия.';uk='Не можна вилучати етап, що містить продукцію в якості вихідного виробу.'");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивКлючейДляУдаления = Новый Массив;
	МассивКлючейДляУдаления.Добавить(ТекущиеДанные.КлючСвязи);
	
	// Найдем и удалим этапы полуфабрикатов, которые связаны с удаляемым этапом
	МассивКлючейДляПроверки = Новый Массив;
	МассивКлючейДляПроверки.Добавить(ТекущиеДанные.КлючСвязи);
	Пока МассивКлючейДляПроверки.Количество() > 0 Цикл
		
		ТекущийКлюч = МассивКлючейДляПроверки[0];
		
		ОтборКлючСвязиЭтапы.КлючСвязиЭтапы = ТекущийКлюч;
		
		НайденныеСтроки = Объект.Этапы.НайтиСтроки(ОтборКлючСвязиЭтапы);
		
		Для Каждого СтрокаЭтап из НайденныеСтроки Цикл
			
			Если МассивКлючейДляУдаления.Найти(СтрокаЭтап.КлючСвязи) = Неопределено Тогда
				
				МассивКлючейДляУдаления.Добавить(СтрокаЭтап.КлючСвязи);
				МассивКлючейДляПроверки.Добавить(СтрокаЭтап.КлючСвязи);
				
			КонецЕсли;
			
		КонецЦикла;
		
		МассивКлючейДляПроверки.Удалить(0);
		
	КонецЦикла;
	
	// Перенумерация этапов
	ТребуетсяПеренумероватьВсеЭтапы = Ложь;
	Если Не ТекущиеДанные.ЭтапВосстановленияБрака Тогда
		
		Если ТекущиеДанные.НомерСледующегоЭтапа <> 0 Тогда
			
			// Алгоритм перенумерации:
			// 1. Заменяется номер этапов на который ссылается удаляемый этап - присваивается номер удаляемого этапа
			// 2. Заменяется номер следующего этапа у этапов которые ссылаются на этапы найденные на шаге 1
			// 3. Если у этапов на шаге 2 нумерация становится некорректной то выполняется перенумерация всех этапов
			
			// Шаг 1
			СтруктураПоиска = Новый Структура("НомерЭтапа,КлючСвязиЭтапы", 
												ТекущиеДанные.НомерСледующегоЭтапа, ТекущиеДанные.КлючСвязиЭтапы);
	  		СписокСтрок = Объект.Этапы.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаЭтап Из СписокСтрок Цикл
				СтрокаЭтап.НомерЭтапа = ТекущиеДанные.НомерЭтапа;
			КонецЦикла;
			
			// Шаг 2
			СтруктураПоиска = Новый Структура("НомерСледующегоЭтапа,КлючСвязиЭтапы", 
												ТекущиеДанные.НомерСледующегоЭтапа, ТекущиеДанные.КлючСвязиЭтапы);
	  		СписокСтрок = Объект.Этапы.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаЭтап Из СписокСтрок Цикл
				Если СтрокаЭтап.КлючСвязи = ТекущиеДанные.КлючСвязи Тогда
					Продолжить;
				КонецЕсли;
				СтрокаЭтап.НомерСледующегоЭтапа = ТекущиеДанные.НомерЭтапа;
				
				Если СтрокаЭтап.НомерЭтапа >= СтрокаЭтап.НомерСледующегоЭтапа Тогда
					ТребуетсяПеренумероватьВсеЭтапы = Истина;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			СтруктураПоиска = Новый Структура("НомерСледующегоЭтапа,КлючСвязиЭтапы", 
												ТекущиеДанные.НомерЭтапа, ТекущиеДанные.КлючСвязиЭтапы);
	  		СписокСтрок = Объект.Этапы.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаЭтап Из СписокСтрок Цикл
				СтрокаЭтап.НомерСледующегоЭтапа = 0;
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	МассивДанныхДляОтменыПотребности = Новый Массив;
	СтруктураДанныхДляОтменыПотребности = Новый Структура("КлючСвязи, КлючСвязиПродукция");
	
	// Удаление
	Для Каждого Ключ из МассивКлючейДляУдаления Цикл
		
		ОтборКлючСвязи.КлючСвязи = Ключ;
		
		НайденныеСтроки = Объект.Этапы.НайтиСтроки(ОтборКлючСвязи);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.Этапы.Удалить(Строка);
		КонецЦикла;
		
		ОтборКлючСвязиЭтапы.КлючСвязиЭтапы = Ключ;
		
		НайденныеСтроки = Объект.ВидыРабочихЦентров.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.ВидыРабочихЦентров.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.МатериалыИУслуги.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого Строка из НайденныеСтроки Цикл
			
			Если Строка.ПроизводитсяВПроцессе
				И ТипЗнч(Строка.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.ЭтапыПроизводства") Тогда
				
				СтруктураДанныхДляОтменыПотребности = Новый Структура;
				СтруктураДанныхДляОтменыПотребности.Вставить("КлючСвязи", Строка.КлючСвязи);
				СтруктураДанныхДляОтменыПотребности.Вставить("КлючСвязиПродукция", Строка.КлючСвязиПродукция);
				
				МассивДанныхДляОтменыПотребности.Добавить(СтруктураДанныхДляОтменыПотребности);
				
			КонецЕсли;
			
			Объект.МатериалыИУслуги.Удалить(Строка);
			
		КонецЦикла;
		
		НайденныеСтроки = Объект.ВыходныеИзделия.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.ВыходныеИзделия.Удалить(Строка);
		КонецЦикла;
		
		НайденныеСтроки = Объект.Трудозатраты.НайтиСтроки(ОтборКлючСвязиЭтапы);
		Для Каждого Строка из НайденныеСтроки Цикл
			Объект.Трудозатраты.Удалить(Строка);
		КонецЦикла;
		
		Если Не ТекущиеДанные.ЭтапВосстановленияБрака Тогда
			НайденныеСтроки = Объект.ЭтапыВосстановленияБрака.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка из НайденныеСтроки Цикл
				Объект.ЭтапыВосстановленияБрака.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
		
		Если БракПоМаршрутнымЛистам <> Неопределено Тогда
			НайденныеСтроки = БракПоМаршрутнымЛистам.НайтиСтроки(ОтборКлючСвязиЭтапы);
			Для Каждого Строка из НайденныеСтроки Цикл
				БракПоМаршрутнымЛистам.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ТекущиеДанные.ЭтапВосстановленияБрака Тогда
		
		// Шаг 3
		Если ТребуетсяПеренумероватьВсеЭтапы Тогда
			
			// Найдем первые этапы, чтобы начать перенумерацию с них
			ПервыеЭтапы = Новый Массив;
			СтруктураПоиска = Новый Структура("КлючСвязиЭтапы", ТекущиеДанные.КлючСвязиЭтапы);
	  		ТаблицаЭтапы = Объект.Этапы.Выгрузить(СтруктураПоиска);
			ТаблицаЭтапы.Колонки.Добавить("НомерЭтапаНовый");
			ТаблицаЭтапы.Колонки.Добавить("НомерСледующегоЭтапаНовый");
			Для каждого СтрокаЭтап Из ТаблицаЭтапы Цикл
				СтруктураПоиска = Новый Структура("НомерСледующегоЭтапа", СтрокаЭтап.НомерЭтапа);
				СписокСтрок = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
				Если СписокСтрок.Количество() = 0 Тогда
					ПервыеЭтапы.Добавить(СтрокаЭтап);
				КонецЕсли; 
			КонецЦикла;
			
			// Определим номер этапов
			ТекущийНомерЭтапа = 1;
			ЭтапыКПеренумерации = Новый СписокЗначений;
			ЭтапыКПеренумерации.ЗагрузитьЗначения(ПервыеЭтапы);
			Пока ЭтапыКПеренумерации.Количество() <> 0 Цикл
				
				ТекущиеЭтапы = ЭтапыКПеренумерации.ВыгрузитьЗначения();
				ЭтапыКПеренумерации.Очистить();
				Для каждого СтрокаЭтап Из ТекущиеЭтапы Цикл
					Если ЗначениеЗаполнено(СтрокаЭтап.НомерЭтапаНовый) Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаЭтап.НомерЭтапаНовый = ТекущийНомерЭтапа;
					
					СтруктураПоиска = Новый Структура("НомерЭтапа", СтрокаЭтап.НомерСледующегоЭтапа);
					СписокСтрок = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
					Для каждого СтрокаЭтапКПеренумерации Из СписокСтрок Цикл
						ЭтапыКПеренумерации.Добавить(СтрокаЭтапКПеренумерации);
					КонецЦикла;
					
					СтруктураПоиска = Новый Структура("НомерЭтапа", СтрокаЭтап.НомерЭтапа);
					СписокСтрок = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
					Для каждого СтрокаЭтапСТакимЖеНомером Из СписокСтрок Цикл
						СтрокаЭтапСТакимЖеНомером.НомерЭтапаНовый = ТекущийНомерЭтапа;
						
						СтруктураПоиска = Новый Структура("НомерЭтапа", СтрокаЭтапСТакимЖеНомером.НомерСледующегоЭтапа);
						СписокСтрок = ТаблицаЭтапы.НайтиСтроки(СтруктураПоиска);
						Для каждого СтрокаЭтапКПеренумерации Из СписокСтрок Цикл
							ЭтапыКПеренумерации.Добавить(СтрокаЭтапКПеренумерации);
						КонецЦикла;
					КонецЦикла;
					
					ТекущийНомерЭтапа = ТекущийНомерЭтапа + 1;
					
				КонецЦикла; 
			КонецЦикла;
			
			// Заполним номер следующего этапа
			Для каждого СтрокаЭтап Из ТаблицаЭтапы Цикл
				СтрокаСледующийЭтап = ТаблицаЭтапы.Найти(СтрокаЭтап.НомерСледующегоЭтапа, "НомерЭтапа");
				Если СтрокаСледующийЭтап <> Неопределено Тогда
					СтрокаЭтап.НомерСледующегоЭтапаНовый = СтрокаСледующийЭтап.НомерЭтапаНовый;
				Иначе
					СтрокаЭтап.НомерСледующегоЭтапаНовый = 0;
				КонецЕсли; 
			КонецЦикла;
			
			// Перенесем новую нумерацию в объект
			СтруктураПоиска = Новый Структура("КлючСвязиЭтапы", ТекущиеДанные.КлючСвязиЭтапы);
   			СписокСтрок = Объект.Этапы.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаЭтап Из СписокСтрок Цикл
				СтрокаЭтапНовый = ТаблицаЭтапы.Найти(СтрокаЭтап.КлючСвязи, "КлючСвязи");
				СтрокаЭтап.НомерЭтапа = СтрокаЭтапНовый.НомерЭтапаНовый;
				СтрокаЭтап.НомерСледующегоЭтапа = СтрокаЭтапНовый.НомерСледующегоЭтапаНовый;
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДанныеПотребности Из МассивДанныхДляОтменыПотребности Цикл
		
		ОтменитьПотребностьВоВнутреннихПолуфабрикатах(
			Объект, ДанныеПотребности.КлючСвязи, ДанныеПотребности.КлючСвязиПродукция);
		
	КонецЦикла;
	
	Для Каждого СтрокаМатериалы из Объект.МатериалыИУслуги Цикл
		
		Если СтрокаМатериалы.ПроизводитсяВПроцессе
			И ТипЗнч(СтрокаМатериалы.ИсточникПолученияПолуфабриката) = Тип("СправочникСсылка.РесурсныеСпецификации") Тогда
			
			НайденныеСтроки = Объект.Этапы.НайтиСтроки(Новый Структура("КлючСвязиПолуфабрикат", СтрокаМатериалы.КлючСвязи));
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаМатериалы.ПроизводитсяВПроцессе = Ложь;
				СтрокаМатериалы.ИсточникПолученияПолуфабриката = ПредопределенноеЗначение("Справочник.РесурсныеСпецификации.ПустаяСсылка");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет номер текущего и номер следующего этапа с учетом вложенных этапов производства.
//
// Параметры:
//	ТаблицаЭтапов - ДанныеФормыКоллекция - Коллекция элементов этапов производства.
//
Процедура ПостроитьСтруктуруЭтапов(ТаблицаЭтапов) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиЭтапы", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураОтбора);
	КоличествоУровней = 1;
	
	ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, 1, КоличествоУровней);
	
	ТаблицаЭтапов.Сортировать("Уровень Возр");
	
	КлючиСвязейЭтапов = Новый Соответствие;
	
	Для Каждого Строка из ТаблицаЭтапов Цикл
		
		Строка.Уровень = КоличествоУровней - Строка.Уровень + 1;
		
		Строка.НомерЭтапаФорма = "" + Строка.Уровень + "." + Строка.НомерЭтапа;
		
		КлючиСвязейЭтапов.Вставить(Строка.КлючСвязи, Строка.НомерЭтапаФорма);
		
		Если ЗначениеЗаполнено(Строка.НомерСледующегоЭтапа) Тогда
			Строка.НомерСледующегоЭтапаФорма = "" + Строка.Уровень + "." + Строка.НомерСледующегоЭтапа;
		Иначе
			Строка.НомерСледующегоЭтапаФорма = КлючиСвязейЭтапов[Строка.КлючСвязиЭтапы];
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЭтапов.Сортировать("НомерЭтапаФорма, НомерСледующегоЭтапаФорма, НаименованиеЭтапа, ЭтапВыполнен Убыв");
	
КонецПроцедуры

// Возвращает этапы, по которым уже запущено производство
//
// Параметры:
//  СписокЗаказов	- ТаблицаЗначений - таблица, содержащая данные строк заказа на производство (Заказ, КодСтроки),
//										по которым нужно получить запущенные этапы
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Содержит этапы производства
//
Функция ЭтапыПоКоторымЗапущеноПроизводство(СписокЗаказов) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СписокЗаказов.Заказ КАК Распоряжение,
	|	СписокЗаказов.КодСтроки КАК КодСтрокиПродукция
	|ПОМЕСТИТЬ СписокЗаказов
	|ИЗ
	|	&СписокЗаказов КАК СписокЗаказов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЭтапыОбороты.Распоряжение КАК Распоряжение,
	|	ТЭтапыОбороты.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	СУММА(ТЭтапыОбороты.КВыполнениюОборот 
	|			+ ТЭтапыОбороты.ВыполненоОборот 
	|			+ ТЭтапыОбороты.БракОборот) КАК НеПланироватьЗаказом
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства.Обороты(
	|			,
	|			,
	|			,
	|			(Распоряжение, КодСтрокиПродукция) В
	|				(ВЫБРАТЬ
	|					СписокЗаказов.Распоряжение,
	|					СписокЗаказов.КодСтрокиПродукция
	|				ИЗ
	|					СписокЗаказов)) КАК ТЭтапыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЭтапыОбороты.Распоряжение,
	|	ТЭтапыОбороты.КодСтрокиПродукция
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТЭтапыОбороты.КВыполнениюОборот 
	|		+ ТЭтапыОбороты.ВыполненоОборот 
	|		+ ТЭтапыОбороты.БракОборот) > 0");
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#Область РедактированиеСпецификацииСтрокиЗаказа

// Функция возвращает пустую структуру данных по продукции
//
// Параметры
//  ДанныеЗаполнения - Структура - структура данных строки продукции заказа на производство
//    * КлючСвязи - УникальныйИдентификатор - Идентификатор строки продукции в заказе на производство
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура продукции
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика продукции
//    * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение-получатель для работ
//    * Склад - СправочникСсылка.Склады - склад для продукции
//    * Назначение - СправочникСсылка.Назначения - назначение продукции заказа на производство
//    * НазначениеЗаказа - СправочникСсылка.Назначения - назначение заказа на производство
//
// Возвращаемое значение
//  Структура - данные по продукции 
//
Функция СтруктураДанныхПродукции(Знач ДанныеЗаполнения = Неопределено) Экспорт
	
	ДанныеПоПродукции = Новый Структура;
	
	ДанныеПоПродукции.Вставить("КлючСвязи");
	
	ДанныеПоПродукции.Вставить("Номенклатура");
	ДанныеПоПродукции.Вставить("Характеристика");
	ДанныеПоПродукции.Вставить("Подразделение");
	ДанныеПоПродукции.Вставить("Склад");
	
	ДанныеПоПродукции.Вставить("Назначение");
	ДанныеПоПродукции.Вставить("НазначениеЗаказа");
	
	ДанныеПоПродукции.Вставить("ЕстьНазначение", Ложь);
	ДанныеПоПродукции.Вставить("ПоЗаказуДавальца", Ложь);
	
	ДанныеПоПродукции.Вставить("ЭтоРабота");
	ДанныеПоПродукции.Вставить("НаборУпаковок");
	ДанныеПоПродукции.Вставить("ТипНоменклатуры");
	ДанныеПоПродукции.Вставить("ИспользоватьУпаковки");
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			
		ДанныеПоПродукции.КлючСвязи = ДанныеЗаполнения.КлючСвязи;
		
		ДанныеПоПродукции.Номенклатура   = ДанныеЗаполнения.Номенклатура;
		ДанныеПоПродукции.Характеристика = ДанныеЗаполнения.Характеристика;
		ДанныеПоПродукции.Подразделение  = ДанныеЗаполнения.Подразделение;
		ДанныеПоПродукции.Склад          = ДанныеЗаполнения.Склад;
		
		ДанныеПоПродукции.Назначение       = ДанныеЗаполнения.Назначение;
		ДанныеПоПродукции.НазначениеЗаказа = ДанныеЗаполнения.НазначениеЗаказа;
		
		ЗначенияДополнительныхРеквизитовПродукции = ПолучитьЗначенияДополнительныхРеквизитовПродукции(ДанныеПоПродукции);
		
		РеквизитыНоменклатуры = ЗначенияДополнительныхРеквизитовПродукции.РеквизитыНоменклатуры;
		
		ДанныеПоПродукции.ЭтоРабота = РеквизитыНоменклатуры.ЭтоРабота;
		ДанныеПоПродукции.НаборУпаковок = РеквизитыНоменклатуры.НаборУпаковок;
		ДанныеПоПродукции.ТипНоменклатуры = РеквизитыНоменклатуры.ТипНоменклатуры;
		ДанныеПоПродукции.ИспользоватьУпаковки = РеквизитыНоменклатуры.ИспользоватьУпаковки;
		
		РеквизитыНазначения = ЗначенияДополнительныхРеквизитовПродукции.РеквизитыНазначения;
		
		ДанныеПоПродукции.ЕстьНазначение = РеквизитыНазначения.ЕстьНазначение;
		ДанныеПоПродукции.ПоЗаказуДавальца = РеквизитыНазначения.ПоЗаказуДавальца;
		
	КонецЕсли;
		
	Возврат ДанныеПоПродукции;
	
КонецФункции

// Функция получает значения дополнительных реквизитов продукции
//
// Параметры:
//  РеквизитыПродукции - Структура - ревизиты продукции
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура продукции
//    * Назначение - СправочникСсылка.Назначения - назначение продукции заказа на производство
//
// Возвращаемое значение:
//  Структура - значения дополнительных реквизитов
//    * РеквизитыНоменклатуры - структура - реквизиты номенклатуры
//      ** ТипНоменклатуры
//      ** ЭтоРабота
//      ** НаборУпаковок
//      ** ИспользоватьУпаковки
//    * РеквизитыНазначения - структура - реквизиты назначения
//      ** ЕстьНазначение
//      ** ПоЗаказуДавальца
//
Функция ПолучитьЗначенияДополнительныхРеквизитовПродукции(Знач РеквизитыПродукции)
	
	Результат = Новый Структура;
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыПродукции.Номенклатура, "НаборУпаковок, ТипНоменклатуры, ИспользоватьУпаковки");
	
	Если РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
		РеквизитыНоменклатуры.Вставить("ЭтоРабота", Истина);
	Иначе
		РеквизитыНоменклатуры.Вставить("ЭтоРабота", Ложь);
	КонецЕсли;
	
	Результат.Вставить("РеквизитыНоменклатуры", РеквизитыНоменклатуры);
	
	Если ЗначениеЗаполнено(РеквизитыПродукции.Назначение) Тогда
	
		РеквизитыНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыПродукции.Назначение, "Заказ");
		
		РеквизитыНазначения.Вставить("ЕстьНазначение", Истина);
		РеквизитыНазначения.Вставить("ПоЗаказуДавальца", ТипЗнч(РеквизитыНазначения.Заказ) = Тип("ДокументСсылка.ЗаказДавальца"));
		
	Иначе
		
		РеквизитыНазначения = Новый Структура;
		
		РеквизитыНазначения.Вставить("ЕстьНазначение", Ложь);
		РеквизитыНазначения.Вставить("ПоЗаказуДавальца", Ложь);
		
	КонецЕсли;
	
	Результат.Вставить("РеквизитыНазначения", РеквизитыНазначения);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает способ получения материала для этапа производства по умолчанию
//
// Параметры:
//   * ДанныеЗаказа - Структура - структура данных заказа
//       * ПодразделениеДиспетчер - СправочникСсылка.СтруктураПредприятия - Подразделение, ответственное за выполнение заказа
//       * Назначение             - СправочникСсылка.Назначения - назначение обособленной потребности
//       * НачатьНеРанее          - Дата - дата, не ранее которой необходимо начать производить.
//   * ДанныеМатериала - Структура - структура данных материала
//       * Подразделение          - СправочникСсылка.СтруктураПредприятия - подразделение-получатель 
//       * ПроизводствоНаСтороне  - Булево - признак, что производство выполняется на стороне
//       * Номенклатура           - СправочникСсылка.Номенклатура - материала, для которого определяется настройка
//       * Характеристика         - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика материала, для которого определяется настройка
// 
// Возвращаемое значение:
//   * Структура
//       * ПолучениеМатериалов - ПеречислениеСсылка.СпособыПолучениеМатериаловЭтапаПроизводства - способы получение материалов этапа производства
//       * Склад - СправочникСсылка.Склады - Склад, с которого передаются материалы в подразделение. 
//       * ЗаказатьНаСклад - Булево - признак, материал необходимо заказать на склад
//       * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения
//       * Запланировать - Булево - признак, материал возможно 
//
Функция СпособПолученияМатериалаПоУмолчанию(Знач ДанныеЗаказа, Знач ДанныеМатериала) Экспорт
	
	НастройкаПередачиМатериалов = ПланированиеПроизводстваКлиентСервер.СтруктураСпособыПолученияМатериаловПоУмолчанию();
	
	Если ЗначениеЗаполнено(ДанныеМатериала.Подразделение)
		И ЗначениеЗаполнено(ДанныеМатериала.Номенклатура) Тогда
		
		ТаблицаМатериалов = Новый ТаблицаЗначений;
		ТаблицаМатериалов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		ТаблицаМатериалов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
		ТаблицаМатериалов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаМатериалов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
		ЗаполнитьЗначенияСвойств(ТаблицаМатериалов.Добавить(), ДанныеМатериала);
		ЗаполнитьЗначенияСвойств(НастройкаПередачиМатериалов, СпособыПолученияМатериаловПоУмолчанию(ДанныеЗаказа, ТаблицаМатериалов)[0]);
		
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(НастройкаПередачиМатериалов);
	
КонецФункции

// Функция возвращает способы получения материалов для этапов производства по умолчанию
//
// Параметры:
//   * ДанныеЗаказа - Структура - структура данных заказа
//       * ПодразделениеДиспетчер - СправочникСсылка.СтруктураПредприятия - Подразделение, ответственное за выполнение заказа
//       * Назначение             - СправочникСсылка.Назначения - назначение обособленной потребности
//   * ТаблицаМатериалов - ТаблицаЗначений - таблица материалов
//       * Подразделение         - СправочникСсылка.СтруктураПредприятия - подразделение-получатель 
//       * ПроизводствоНаСтороне - Булево - признак, что производство выполняется на стороне
//       * Номенклатура          - СправочникСсылка.Номенклатура - материала, для которого определяется настройка
//       * Характеристика        - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика материала, для которого определяется настройка
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица материалов дополненная способами получения материалов
//       * Номенклатура - СправочникСсылка.Номенклатура - материала, для которого определяется настройка
//       * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика материала, для которого определяется настройка
//       * ПолучениеМатериалов - ПеречислениеСсылка.СпособыПолучениеМатериаловЭтапаПроизводства - способы получение материалов этапа производства
//       * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение-получатель 
//       * ПроизводствоНаСтороне - Булево - признак, что производство выполняется на стороне
//       * Склад - СправочникСсылка.Склады - Склад, с которого передаются материалы в подразделение. 
//       * ЗаказатьНаСклад - Булево - признак, материал необходимо заказать на склад
//       * ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения
//       * Запланировать - Булево - признак, материал возможно 
//
Функция СпособыПолученияМатериаловПоУмолчанию(ДанныеЗаказа, ТаблицаМатериалов) Экспорт
	
	ТекстЗапроса = "";
	ЗаказНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаказа.Назначение, "Заказ");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер", ДанныеЗаказа.ПодразделениеДиспетчер);
	
	Если ДанныеЗаказа.Свойство("ДатаПотребности") Тогда
		Запрос.УстановитьПараметр("ДатаПотребности", ДанныеЗаказа.ДатаПотребности);
	ИначеЕсли ДанныеЗаказа.Свойство("НачатьНеРанее") Тогда
		Запрос.УстановитьПараметр("ДатаПотребности", ДанныеЗаказа.НачатьНеРанее);
	Иначе
		Запрос.УстановитьПараметр("ДатаПотребности", '00010101');
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаМатериалов", ТаблицаМатериалов);
	
	Если ТипЗнч(ЗаказНазначения) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		
		Запрос.УстановитьПараметр("ЗаказНазначения", ЗаказНазначения);
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	Материалы.Номенклатура КАК Номенклатура,
		|	Материалы.Характеристика КАК Характеристика,
		|	МАКСИМУМ(Материалы.Склад) КАК Склад
		|ПОМЕСТИТЬ ВТМатериалыЗаказаДавальца
		|ИЗ
		|	Документ.ЗаказДавальца.Материалы КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка = &ЗаказНазначения
		|
		|СГРУППИРОВАТЬ ПО
		|	Материалы.Номенклатура,
		|	Материалы.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад
		|ПОМЕСТИТЬ ВТМатериалыЗаказаДавальца
		|ГДЕ
		|	ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";

	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	РегистрыСведений.СхемыОбеспечения.ВременнаяТаблицаФорматыСкладов(Ложь)
	+ "ВЫБРАТЬ
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.ПроизводствоНаСтороне КАК БУЛЕВО) КАК ПроизводствоНаСтороне
	|ПОМЕСТИТЬ ВТМатериалыИУслуги
	|ИЗ
	|	&ТаблицаМатериалов КАК МатериалыИУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	МатериалыИУслуги.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|						ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(НастройкаПередачиХарактеристика.ОснованиеДляПолучения, ЕСТЬNULL(НастройкаПередачиНоменклатура.ОснованиеДляПолучения, ЕСТЬNULL(НастройкаПередачиСклад.ОснованиеДляПолучения, ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)))) = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
	|						ИЛИ МатериалыИУслуги.ПроизводствоНаСтороне
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ЗаказатьНаСклад)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПолучениеМатериаловЭтапаПроизводства.ИзПодразделения)
	|	КОНЕЦ КАК ПолучениеМатериалов,
	|	МатериалыИУслуги.Подразделение КАК Подразделение,
	|	МатериалыИУслуги.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	
	// Начало. Склад
	//  Производимые в процессе полуфабрикаты не поддерживаются
	|	ВЫБОР 
	|		КОГДА НЕ ТМатериалыЗаказаДавальца.Склад ЕСТЬ NULL ТОГДА
	|			ТМатериалыЗаказаДавальца.Склад
	|	
	|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
	|																ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|		КОГДА ЕСТЬNULL(НастройкаПередачиХарактеристика.ОснованиеДляПолучения,
	|				ЕСТЬNULL(НастройкаПередачиНоменклатура.ОснованиеДляПолучения,
	|					ЕСТЬNULL(НастройкаПередачиСклад.ОснованиеДляПолучения,
	|						ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)))) = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
	|				ИЛИ МатериалыИУслуги.ПроизводствоНаСтороне
	|			ТОГДА ЕСТЬNULL(НастройкаПередачиХарактеристика.Склад, 
	|					ЕСТЬNULL(НастройкаПередачиНоменклатура.Склад, 
	|						ЕСТЬNULL(НастройкаПередачиСклад.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|	КОНЕЦ                                             КАК Склад,
	// Конец. Склад
	
	// Начало. Заказать на склад
	//  Производимые в процессе полуфабрикаты не поддерживаются
	|	ВЫБОР 
	|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
	|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|			ТОГДА ЛОЖЬ
	|		КОГДА ЕСТЬNULL(НастройкаПередачиХарактеристика.ОснованиеДляПолучения,
	|				ЕСТЬNULL(НастройкаПередачиНоменклатура.ОснованиеДляПолучения,
	|					ЕСТЬNULL(НастройкаПередачиСклад.ОснованиеДляПолучения,
	|						ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)))) = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
	|				ИЛИ МатериалыИУслуги.ПроизводствоНаСтороне
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                              КАК ЗаказатьНаСклад,
	// Конец. Заказать на склад

	// Начало. Вариант обеспечения
	//  Производимые в процессе полуфабрикаты не поддерживаются
	|	ВЫБОР 
	|		КОГДА МатериалыИУслуги.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) ТОГДА
	|			
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|		
	|		КОГДА НЕ ТМатериалыЗаказаДавальца.Номенклатура ЕСТЬ NULL ТОГДА
	|
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|
	|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|			
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|			
	|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
	|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) ТОГДА
	|			
	|			ВЫБОР КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|			КОНЕЦ
	|
	|		КОГДА МатериалыИУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|				И (ЕСТЬNULL(НастройкаПередачиХарактеристика.ОснованиеДляПолучения,
	|					ЕСТЬNULL(НастройкаПередачиНоменклатура.ОснованиеДляПолучения,
	|						ЕСТЬNULL(НастройкаПередачиСклад.ОснованиеДляПолучения,
	|							ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)))) = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
	|					ИЛИ МатериалыИУслуги.ПроизводствоНаСтороне) ТОГДА
	|		
	|			ВЫБОР КОГДА МатериалыИУслуги.Номенклатура.ОбособленнаяЗакупкаПродажа ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|			КОНЕЦ
	|	
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|	КОНЕЦ                                              КАК ВариантОбеспечения,
	// Конец. Вариант обеспечения
	
	|	&ДатаПотребности КАК ДатаПотребности,
	|	ВЫБОР
	|		КОГДА (&ПодразделениеДиспетчер = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ИЛИ ЕСТЬNULL(СпрСпособОбеспечения.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = &ПодразделениеДиспетчер
	|				ИЛИ ЕСТЬNULL(СпрСпособОбеспечения.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|				И ЕСТЬNULL(СпрСпособОбеспечения.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Запланировать
	|ИЗ
	|	ВТМатериалыИУслуги КАК МатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиХарактеристика
	|		ПО МатериалыИУслуги.Подразделение = НастройкаПередачиХарактеристика.Подразделение
	|			И МатериалыИУслуги.Номенклатура = НастройкаПередачиХарактеристика.Номенклатура
	|			И МатериалыИУслуги.Характеристика = НастройкаПередачиХарактеристика.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиНоменклатура
	|		ПО МатериалыИУслуги.Подразделение = НастройкаПередачиНоменклатура.Подразделение
	|			И МатериалыИУслуги.Номенклатура = НастройкаПередачиНоменклатура.Номенклатура
	|			И (НастройкаПередачиНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (НастройкаПередачиХарактеристика.Подразделение ЕСТЬ NULL )
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаПередачиМатериаловВПроизводство КАК НастройкаПередачиСклад
	|		ПО МатериалыИУслуги.Подразделение = НастройкаПередачиСклад.Подразделение
	|			И (НастройкаПередачиСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И (НастройкаПередачиСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (НастройкаПередачиХарактеристика.Подразделение ЕСТЬ NULL )
	|			И (НастройкаПередачиНоменклатура.Подразделение ЕСТЬ NULL )
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|		ПО ВЫБОР КОГДА ЕСТЬNULL(НастройкаПередачиХарактеристика.ОснованиеДляПолучения,
	|				ЕСТЬNULL(НастройкаПередачиНоменклатура.ОснованиеДляПолучения,
	|				ЕСТЬNULL(НастройкаПередачиСклад.ОснованиеДляПолучения,
	|				ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство))))
	|					= ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство) ТОГДА
	|					
	|					ЕСТЬNULL(НастройкаПередачиХарактеристика.Склад,
	|						ЕСТЬNULL(НастройкаПередачиНоменклатура.Склад,
	|						ЕСТЬNULL(НастройкаПередачиСклад.Склад,
	|						ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))))
	|					ИНАЧЕ
	|						ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				КОНЕЦ = СпрСклады.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособОбеспечения
	|		ПО &ПодстановкаОсновногоСпособаОбеспечения
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМатериалыЗаказаДавальца КАК ТМатериалыЗаказаДавальца
	|		ПО МатериалыИУслуги.Номенклатура = ТМатериалыЗаказаДавальца.Номенклатура
	|			И МатериалыИУслуги.Характеристика = ТМатериалыЗаказаДавальца.Характеристика";
	
	ПоляСоединения = "МатериалыИУслуги.Номенклатура, МатериалыИУслуги.Характеристика,СпрСклады.Ссылка";
	ИмяПараметра = "ПодстановкаОсновногоСпособаОбеспечения";
	ТекстЗапроса = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
		ТекстЗапроса, ИмяПараметра, ПоляСоединения);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Назначение

// Процедура инициализирует назначение заказа на производство
//    и дозаполняет назначение в строках спецификации заказа
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаПроизводство - заказ на производство
//
Процедура СоздатьНазначениеЗаказа(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	// заполним назначение в шапке заказа на производство
	
	Назначение = Справочники.Назначения.ПолучитьСсылкуДляНовогоЗаказа(Объект.НаправлениеДеятельности);
	Объект.Назначение = Назначение;
	
	// дозаполним назначение в строках спецификации заказа на производство
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	ОтборПустоеНазначение = Новый Структура;
	ОтборПустоеНазначение.Вставить("Назначение", ПустоеНазначение);
	
	НайденныеСтроки = Объект.Продукция.НайтиСтроки(ОтборПустоеНазначение);
	
	Если НайденныеСтроки.ВГраница() <> -1 Тогда
		
		ОтборВыходныеИзделия = Новый Структура;
		ОтборВыходныеИзделия.Вставить("КлючСвязиПродукция");
		ОтборВыходныеИзделия.Вставить("Назначение", ПустоеНазначение);
		ОтборВыходныеИзделия.Вставить("ПроизводитсяВПроцессе", Истина);
		
		ОтборМатериалыИУслуги = Новый Структура;
		ОтборМатериалыИУслуги.Вставить("КлючСвязиПродукция");
		ОтборМатериалыИУслуги.Вставить("Назначение", ПустоеНазначение);
		
		Для Каждого СтрокаПродукция Из НайденныеСтроки Цикл
			
			ОтборВыходныеИзделия.КлючСвязиПродукция = СтрокаПродукция.КлючСвязи;
			
			Для Каждого ЭлементКоллекции Из Объект.ВыходныеИзделия.НайтиСтроки(ОтборВыходныеИзделия) Цикл
				ЭлементКоллекции.Назначение = Назначение;
			КонецЦикла;
			
			Для Каждого ЭлементКоллекции Из Объект.ВозвратныеОтходы.НайтиСтроки(ОтборВыходныеИзделия) Цикл
				ЭлементКоллекции.Назначение = Назначение;
			КонецЦикла;
			
			ОтборМатериалыИУслуги.КлючСвязиПродукция = СтрокаПродукция.КлючСвязи;
			
			Для Каждого ЭлементКоллекции Из Объект.МатериалыИУслуги.НайтиСтроки(ОтборМатериалыИУслуги) Цикл
				
				Если ЭлементКоллекции.ПроизводитсяВПроцессе
					ИЛИ ЭлементКоллекции.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно")
					ИЛИ ЭлементКоллекции.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно") Тогда 
				
					ЭлементКоллекции.Назначение = Назначение;
					
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияМаршрутныхЛистов

// Функция проверяет требуется ли актуализация маршрутных листов
//
// Параметры:
//  ЗаказОбъект - ДокументОбъект.ЗаказНаПроизводство - Объект, для которого требуется выполнить проверку.
// 
// Возвращаемое значение:
//   - Булево - Истина, если актуализация требуется
//
Функция ТребуетсяАктуализацияМаршрутныхЛистов(ЗаказОбъект) Экспорт
	
	Возврат ЗаказОбъект.ДополнительныеСвойства.Свойство("ПараметрыАктуализацииМаршрутныхЛистов");
	
КонецФункции

// Функция возвращает параметры актуализации маршрутных листов
//
// Параметры:
//  ЗаказОбъект - ДокументОбъект.ЗаказНаПроизводство - Объект, для которого требуется получить параметры актуализации маршрутных листов.
// 
// Возвращаемое значение:
//   * Структура -
//       * Распоряжение - ДокументСсылка.ЗаказНаПроизводство - заказ на производство
//       * МассивКодовСтрокПродукции - Массив - массив кодов строк продукции
//
Функция ПараметрыАктуализацииМаршрутныхЛистов(ЗаказОбъект) Экспорт
	
	Возврат ЗаказОбъект.ДополнительныеСвойства.ПараметрыАктуализацииМаршрутныхЛистов;
	
КонецФункции

// Процедура очищает параметры актуализации маршрутных листов
// Параметры:
//  ЗаказОбъект - ДокументОбъект.ЗаказНаПроизводство - Объект, для которого требуется выполнить очистку параметров актуализации МЛ.
//
Процедура ОчиститьПараметрыАктуализацииМаршрутныхЛистов(ЗаказОбъект) Экспорт
	
	ЗаказОбъект.ДополнительныеСвойства.Удалить("ПараметрыАктуализацииМаршрутныхЛистов");
	
КонецПроцедуры

// Процедура добавляет параметры актуализации маршрутных листов в структуре дополнительных свойств
//  ДополнительныеСвойства - Структура - структура доп. свойств
//  Заказ - ДокументСсылка.ЗаказНаПроизводство - ссылка на распоряжение
//  МассивКодовСтрокПродукции - Массив - массив кодов строк продукции
// 
// Возвращаемое значение:
//   * Структура -
//       * Распоряжение - ДокументСсылка.ЗаказНаПроизводство - заказ на производство
//       * МассивКодовСтрокПродукции - Массив - массив кодов строк продукции
//
Процедура ДобавитьПараметрыАктуализацииМаршрутныхЛистов(ДополнительныеСвойства, Заказ, МассивКодовСтрокПродукции = Неопределено) Экспорт
	
	ДополнительныеСвойства.Вставить("ПараметрыАктуализацииМаршрутныхЛистов", 
			Новый Структура("Распоряжение, МассивКодовСтрокПродукции", Заказ, МассивКодовСтрокПродукции));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеГрафика

// Выполняет расчет графика производства
Процедура ВыполнитьПланирование(СтруктураПараметров, ПоследовательностьЭтапов) Экспорт
	
	ВыполнитьПланированиеЭтапов(СтруктураПараметров, ПоследовательностьЭтапов);
	
КонецПроцедуры

// Корректирует время выполнения этапов с учетом буферов и интервала планирования
//
Процедура СкорректироватьВремяВыполненияЭтапов(СтруктураПараметров) Экспорт
	
	Этапы = СтруктураПараметров.Этапы;
	ТекущаяДатаСеанса = СтруктураПараметров.ТекущаяДатаСеанса;
	
	Для каждого Этап из Этапы Цикл
		
		Этап.Начало = Макс(Этап.Начало, ТекущаяДатаСеанса);
		Этап.Окончание = Макс(Этап.Окончание, ТекущаяДатаСеанса);
		
		// Учитываемый буфер до (в секундах)
		Этап.ПредварительныйБуфер = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
												Этап.ПредварительныйБуфер, 
												Этап.ЕдиницаИзмеренияПредварительногоБуфера);
												
		Этап.ПредварительныйБуфер = УчитываемыйРазмерБуфера(Этап.ПредварительныйБуфер, Этап.ВидыРабочихЦентров);
		
		// Учитываемый буфер после (в секундах)
		Этап.ЗавершающийБуфер = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
												Этап.ЗавершающийБуфер, 
												Этап.ЕдиницаИзмеренияЗавершающегоБуфера);
												
		Этап.ЗавершающийБуфер = УчитываемыйРазмерБуфера(Этап.ЗавершающийБуфер, Этап.ВидыРабочихЦентров);
		
		Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Для каждого ИсполнительЭтапа из Этап.ВидыРабочихЦентров Цикл
				
				// Время работы (в секундах)
				ИсполнительЭтапа.ВремяРаботы = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
															ИсполнительЭтапа.ВремяРаботы,
															ИсполнительЭтапа.ЕдиницаИзмерения);
				
			КонецЦикла;
			
			// Начало и окончание этапа выравниваются с учетом границы периода планирования
			Этап.Начало = ПланированиеПроизводстваКлиентСервер.СледующийИнтервалПланирования(
																	Этап.Начало, 
																	Этап.ИнтервалПланирования, 
																	Этап.НачалоИнтервалаПланирования);
			
			Этап.Окончание = ПланированиеПроизводстваКлиентСервер.ПредыдущийИнтервалПланирования(
																	Этап.Окончание, 
																	Этап.ИнтервалПланирования, 
																	Этап.ОкончаниеИнтервалаПланирования);
			
			// Этап может начинаться только в текущем интервале планирования
			Если НЕ СтруктураПараметров.НаПустойЗавод Тогда
				
				// В текущем часе этап не может начинаться
				Если Этап.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час
					ИЛИ ТекущаяДатаСеанса > ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(
																					ТекущаяДатаСеанса, 
																					Этап.ИнтервалПланирования, 
																					Этап.ОкончаниеИнтервалаПланирования) Тогда
					
					Этап.Начало = Макс(Этап.Начало, ПланированиеПроизводстваКлиентСервер.СледующийИнтервалПланирования(ТекущаяДатаСеанса, Этап.ИнтервалПланирования, Этап.НачалоИнтервалаПланирования));
					
				Иначе
					
					Этап.Начало = Макс(Этап.Начало, ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ТекущаяДатаСеанса, Этап.ИнтервалПланирования));
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Этап.Начало = Макс(Этап.Начало, ТекущаяДатаСеанса);
			
			// Длительность этапа (в секундах)
			Этап.ДлительностьЭтапа = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
															Этап.ДлительностьЭтапа,
															Этап.ЕдиницаИзмеренияДлительностиЭтапа);
															
		КонецЕсли;
		
		// Скорректируем начало этапа с учетом даты обеспечения материалами
		Если НЕ СтруктураПараметров.ИгнорироватьОграниченияДоступностиМатериалов Тогда
			
			ДатаОбеспечения = СтруктураПараметров.ДатыОбеспечения.Получить(Этап.КлючСвязи);
			Если ДатаОбеспечения <> Неопределено Тогда
				
				Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда
					Этап.Начало = ПланированиеПроизводстваКлиентСервер.СледующийИнтервалПланирования(Макс(Этап.Начало, ДатаОбеспечения), Этап.ИнтервалПланирования, Этап.НачалоИнтервалаПланирования);
				Иначе
					Этап.Начало = Макс(Этап.Начало, ДатаОбеспечения);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеМатрицы

// Подгототавливает и возвращает таблицу последовательности этапов
//
Функция ПоследовательностьЭтапов(СтруктураПараметров) Экспорт
	
	СтруктураПараметров.Этапы.Индексы.Добавить("КлючСвязиПродукция, НомерЭтапа, Спецификация, КлючСвязиПолуфабрикат");
	СтруктураПараметров.Этапы.Индексы.Добавить("КлючСвязиПродукция, НомерСледующегоЭтапа, Спецификация");
	СтруктураПараметров.Этапы.Индексы.Добавить("КлючСвязиПродукция, КлючСвязи");
	СтруктураПараметров.Этапы.Индексы.Добавить("КлючСвязиПродукция, КлючСвязиЭтапы");
	СтруктураПараметров.Этапы.Индексы.Добавить("КлючСвязи");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КлючСвязиЭтап",                        Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("КлючСвязиСледующийЭтап",               Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("КлючСвязиПолуфабрикат",                Новый ОписаниеТипов("УникальныйИдентификатор"));
	Результат.Колонки.Добавить("Этап",                                 Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	Результат.Колонки.Добавить("СледующийЭтап",                        Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	Результат.Колонки.Добавить("ВидыРабочихЦентровЭтап",               Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("ВидыРабочихЦентровСледующийЭтап",      Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("ПодразделениеЭтап",                    Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Результат.Колонки.Добавить("ПодразделениеСледующийЭтап",           Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	Результат.Колонки.Добавить("ЗавершающийБуфер",                     Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ПредварительныйБуфер",                 Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ГраницыЭтапа",                         Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("Размещен",                             Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЕстьЗависимыеЭтапы",                   Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЗависимыеЭтапы",                       Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("ПланироватьРаботуВидовРабочихЦентров", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("КоличествоЭтап",                       Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КоличествоСледующийЭтап",              Новый ОписаниеТипов("Число"));
	
	ПервыйЭтап = Неопределено;
	
	Для каждого Этап из СтруктураПараметров.Этапы Цикл
		
		// К окончанию
		Если СтруктураПараметров.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
			
			СледующиеЭтапы = СледующиеЭтапы(Этап);
			
			// Конечный этап
			Если СледующиеЭтапы.ВГраница() = -1 Тогда
				
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.КлючСвязиСледующийЭтап               = Этап.КлючСвязи;
				НоваяСтрока.КлючСвязиПолуфабрикат                = Этап.КлючСвязиПолуфабрикат;
				НоваяСтрока.СледующийЭтап                        = Этап.Этап;
				НоваяСтрока.ВидыРабочихЦентровСледующийЭтап      = Этап.ВидыРабочихЦентров;
				НоваяСтрока.ПодразделениеСледующийЭтап           = Этап.Подразделение;
				НоваяСтрока.ПредварительныйБуфер                 = Этап.ПредварительныйБуфер;
				НоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = Этап.ПланироватьРаботуВидовРабочихЦентров;
				НоваяСтрока.КоличествоСледующийЭтап              = Этап.КоличествоЭтаповЗаказа;
				НоваяСтрока.ГраницыЭтапа                         = ?(Этап.КоличествоЭтаповЗаказа > 0, Новый Массив(Этап.КоличествоЭтаповЗаказа), Новый Массив);
				
				Для ИндексГраницыЭтапа = 0 по Этап.ГраницыЭтапа.ВГраница() Цикл
					
					НоваяСтрока.ГраницыЭтапа[ИндексГраницыЭтапа] = Этап.ГраницыЭтапа[ИндексГраницыЭтапа];
					
				КонецЦикла;
				
				ПервыйЭтап = Этап;
				
			Иначе // Есть следующие этапы
				
				Для каждого СледующийЭтап из СледующиеЭтапы Цикл
					
					НоваяСтрока = Результат.Добавить();
					
					НоваяСтрока.КлючСвязиЭтап                        = СледующийЭтап.КлючСвязи;
					НоваяСтрока.КлючСвязиСледующийЭтап               = Этап.КлючСвязи;
					НоваяСтрока.КлючСвязиПолуфабрикат                = СледующийЭтап.КлючСвязиПолуфабрикат;
					НоваяСтрока.Этап                                 = СледующийЭтап.Этап;
					НоваяСтрока.СледующийЭтап                        = Этап.Этап;
					НоваяСтрока.ВидыРабочихЦентровЭтап               = СледующийЭтап.ВидыРабочихЦентров;
					НоваяСтрока.ВидыРабочихЦентровСледующийЭтап      = Этап.ВидыРабочихЦентров;
					НоваяСтрока.ПодразделениеЭтап                    = СледующийЭтап.Подразделение;
					НоваяСтрока.ПодразделениеСледующийЭтап           = Этап.Подразделение;
					НоваяСтрока.ЗавершающийБуфер                     = СледующийЭтап.ЗавершающийБуфер;
					НоваяСтрока.ПредварительныйБуфер                 = Этап.ПредварительныйБуфер;
					НоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = Этап.ПланироватьРаботуВидовРабочихЦентров;
					НоваяСтрока.КоличествоЭтап                       = СледующийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрока.КоличествоСледующийЭтап              = Этап.КоличествоЭтаповЗаказа;
					НоваяСтрока.ГраницыЭтапа                         = ?(СледующийЭтап.КоличествоЭтаповЗаказа > 0, Новый Массив(СледующийЭтап.КоличествоЭтаповЗаказа), Новый Массив);
					
					Для ИндексГраницыЭтапа = 0 по СледующийЭтап.ГраницыЭтапа.ВГраница() Цикл
						
						НоваяСтрока.ГраницыЭтапа[ИндексГраницыЭтапа] = СледующийЭтап.ГраницыЭтапа[ИндексГраницыЭтапа];
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Начальный этап
			Если НачальныйЭтап(Этап) Тогда
				
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.КлючСвязиЭтап                        = Этап.КлючСвязи;
				НоваяСтрока.КлючСвязиПолуфабрикат                = Этап.КлючСвязиПолуфабрикат;
				НоваяСтрока.Этап                                 = Этап.Этап;
				НоваяСтрока.ВидыРабочихЦентровЭтап               = Этап.ВидыРабочихЦентров;
				НоваяСтрока.ПодразделениеЭтап                    = Этап.Подразделение;
				НоваяСтрока.ЗавершающийБуфер                     = Этап.ЗавершающийБуфер;
				НоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = Этап.ПланироватьРаботуВидовРабочихЦентров;
				НоваяСтрока.КоличествоЭтап                       = Этап.КоличествоЭтаповЗаказа;
				НоваяСтрока.ГраницыЭтапа                         = ?(Этап.КоличествоЭтаповЗаказа > 0, Новый Массив(Этап.КоличествоЭтаповЗаказа), Новый Массив);
				
				Для ИндексГраницыЭтапа = 0 по Этап.ГраницыЭтапа.ВГраница() Цикл
					
					НоваяСтрока.ГраницыЭтапа[ИндексГраницыЭтапа] = Этап.ГраницыЭтапа[ИндексГраницыЭтапа];
					
				КонецЦикла;
				
			КонецЕсли;
		
		Иначе // К началу
			
			СледующиеЭтапы = СледующиеЭтапы(Этап);
			
			// Конечный этап
			Если СледующиеЭтапы.ВГраница() = -1 Тогда
				
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.КлючСвязиЭтап                        = Этап.КлючСвязи;
				НоваяСтрока.КлючСвязиПолуфабрикат                = Этап.КлючСвязиПолуфабрикат;
				НоваяСтрока.Этап                                 = Этап.Этап;
				НоваяСтрока.ВидыРабочихЦентровЭтап               = Этап.ВидыРабочихЦентров;
				НоваяСтрока.ПодразделениеЭтап                    = Этап.Подразделение;
				НоваяСтрока.ЗавершающийБуфер                     = Этап.ЗавершающийБуфер;
				НоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = Этап.ПланироватьРаботуВидовРабочихЦентров;
				НоваяСтрока.КоличествоЭтап                       = Этап.КоличествоЭтаповЗаказа;
				НоваяСтрока.ГраницыЭтапа                         = ?(Этап.КоличествоЭтаповЗаказа > 0, Новый Массив(Этап.КоличествоЭтаповЗаказа), Новый Массив);
				
				Для ИндексГраницыЭтапа = 0 по Этап.ГраницыЭтапа.ВГраница() Цикл
					
					НоваяСтрока.ГраницыЭтапа[ИндексГраницыЭтапа] = Этап.ГраницыЭтапа[ИндексГраницыЭтапа];
					
				КонецЦикла;
				
			Иначе // Есть следующие этапы
				
				Для каждого СледующийЭтап из СледующиеЭтапы Цикл
					
					НоваяСтрока = Результат.Добавить();
					
					НоваяСтрока.КлючСвязиЭтап                        = Этап.КлючСвязи;
					НоваяСтрока.КлючСвязиСледующийЭтап               = СледующийЭтап.КлючСвязи;
					НоваяСтрока.КлючСвязиПолуфабрикат                = Этап.КлючСвязиПолуфабрикат;
					НоваяСтрока.Этап                                 = Этап.Этап;
					НоваяСтрока.СледующийЭтап                        = СледующийЭтап.Этап;
					НоваяСтрока.ВидыРабочихЦентровЭтап               = Этап.ВидыРабочихЦентров;
					НоваяСтрока.ВидыРабочихЦентровСледующийЭтап      = СледующийЭтап.ВидыРабочихЦентров;
					НоваяСтрока.ПодразделениеЭтап                    = Этап.Подразделение;
					НоваяСтрока.ПодразделениеСледующийЭтап           = СледующийЭтап.Подразделение;
					НоваяСтрока.ЗавершающийБуфер                     = Этап.ЗавершающийБуфер;
					НоваяСтрока.ПредварительныйБуфер                 = СледующийЭтап.ПредварительныйБуфер;
					НоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = Этап.ПланироватьРаботуВидовРабочихЦентров;
					НоваяСтрока.КоличествоЭтап                       = Этап.КоличествоЭтаповЗаказа;
					НоваяСтрока.КоличествоСледующийЭтап              = СледующийЭтап.КоличествоЭтаповЗаказа;
					НоваяСтрока.ГраницыЭтапа                         = ?(Этап.КоличествоЭтаповЗаказа > 0, Новый Массив(Этап.КоличествоЭтаповЗаказа), Новый Массив);;
					
					Для ИндексГраницыЭтапа = 0 по Этап.ГраницыЭтапа.ВГраница() Цикл
						
						НоваяСтрока.ГраницыЭтапа[ИндексГраницыЭтапа] = Этап.ГраницыЭтапа[ИндексГраницыЭтапа];
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Начальный этап
			Если НачальныйЭтап(Этап) Тогда
				
				НоваяСтрока = Результат.Добавить();
				
				НоваяСтрока.КлючСвязиСледующийЭтап               = Этап.КлючСвязи;
				НоваяСтрока.КлючСвязиПолуфабрикат                = Этап.КлючСвязиПолуфабрикат;
				НоваяСтрока.СледующийЭтап                        = Этап.Этап;
				НоваяСтрока.ВидыРабочихЦентровСледующийЭтап      = Этап.ВидыРабочихЦентров;
				НоваяСтрока.ПодразделениеСледующийЭтап           = Этап.Подразделение;
				НоваяСтрока.ПредварительныйБуфер                 = Этап.ПредварительныйБуфер;
				НоваяСтрока.ПланироватьРаботуВидовРабочихЦентров = Этап.ПланироватьРаботуВидовРабочихЦентров;
				НоваяСтрока.КоличествоСледующийЭтап              = Этап.КоличествоЭтаповЗаказа;
				НоваяСтрока.ГраницыЭтапа                         = ?(Этап.КоличествоЭтаповЗаказа > 0, Новый Массив(Этап.КоличествоЭтаповЗаказа), Новый Массив);
				
				Для ИндексГраницыЭтапа = 0 по Этап.ГраницыЭтапа.ВГраница() Цикл
					
					НоваяСтрока.ГраницыЭтапа[ИндексГраницыЭтапа] = Этап.ГраницыЭтапа[ИндексГраницыЭтапа];
					
				КонецЦикла;
				
				ПервыйЭтап = Этап;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Индексы.Добавить("Размещен");
	Результат.Индексы.Добавить("Размещен, ЕстьЗависимыеЭтапы");
	Результат.Индексы.Добавить("КлючСвязиЭтап");
	Результат.Индексы.Добавить("КлючСвязиЭтап, Размещен");
	Результат.Индексы.Добавить("КлючСвязиЭтап, КлючСвязиСледующийЭтап, Размещен");
	Результат.Индексы.Добавить("КлючСвязиСледующийЭтап, Размещен");
	
	Если СтруктураПараметров.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу
		И НЕ ПервыйЭтап.ПланироватьРаботуВидовРабочихЦентров Тогда
		
		СледующиеЭтапы = СледующиеЭтапы(ПервыйЭтап);
		
		Если СледующиеЭтапы.Количество() = 1
			И СледующиеЭтапы[0].ПланироватьРаботуВидовРабочихЦентров Тогда
			
			НайденныеСтроки = Результат.НайтиСтроки(Новый Структура("КлючСвязиЭтап", СледующиеЭтапы[0].КлючСвязи));
			
			Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
				
				ПараметрыЗависимости = Новый Структура;
				ПараметрыЗависимости.Вставить("КлючСвязиЭтап", ПервыйЭтап.КлючСвязи);
				ПараметрыЗависимости.Вставить("РазмещениеВыпуска", ИзменитьРазмещениеВыпуска(СтруктураПараметров.РазмещениеВыпуска));
				ПараметрыЗависимости.Вставить("КоличествоЭтаповЗаказа", ПервыйЭтап.КоличествоЭтаповЗаказа);
				ПараметрыЗависимости.Вставить("ЗначениеГраницыЭтапа");
				
				НайденнаяСтрока.ЕстьЗависимыеЭтапы = Истина; 
				НайденнаяСтрока.ЗависимыеЭтапы.Добавить(ПараметрыЗависимости);
				
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СледующиеЭтапы(Этап)
	
	// Следующий этап не указан и не производятся в процессе
	Если НЕ ЗначениеЗаполнено(Этап.НомерСледующегоЭтапа) И
		НЕ ЗначениеЗаполнено(Этап.КлючСвязиЭтапы) Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	// Поиск следующих этапов
	ПараметрыОтбораСледующиеЭтапы = Новый Структура("КлючСвязиПродукция");
	ПараметрыОтбораСледующиеЭтапы.КлючСвязиПродукция = Этап.КлючСвязиПродукция;
	
	Если ЗначениеЗаполнено(Этап.НомерСледующегоЭтапа) Тогда
		
		ПараметрыОтбораСледующиеЭтапы.Вставить("НомерЭтапа", Этап.НомерСледующегоЭтапа);
		ПараметрыОтбораСледующиеЭтапы.Вставить("Спецификация", Этап.Спецификация);
		ПараметрыОтбораСледующиеЭтапы.Вставить("КлючСвязиПолуфабрикат", Этап.КлючСвязиПолуфабрикат);
		
	ИначеЕсли ЗначениеЗаполнено(Этап.КлючСвязиЭтапы) Тогда
		
		ПараметрыОтбораСледующиеЭтапы.Вставить("КлючСвязи", Этап.КлючСвязиЭтапы);
		
	КонецЕсли;
		
	Возврат Этап.Владелец().НайтиСтроки(ПараметрыОтбораСледующиеЭтапы);
	
КонецФункции

Функция ПредыдущиеЭтапы(Этап)
	
	// Поиск предыдущих этапов
	ПараметрыОтбораПредыдущиеЭтапы = Новый Структура("КлючСвязиПродукция, НомерСледующегоЭтапа, Спецификация");
	ПараметрыОтбораПредыдущиеЭтапы.КлючСвязиПродукция   = Этап.КлючСвязиПродукция;
	ПараметрыОтбораПредыдущиеЭтапы.НомерСледующегоЭтапа = Этап.НомерЭтапа;
	ПараметрыОтбораПредыдущиеЭтапы.Спецификация         = Этап.Спецификация;
	
	ПредыдущиеЭтапы = Этап.Владелец().НайтиСтроки(ПараметрыОтбораПредыдущиеЭтапы);
	
	Если ПредыдущиеЭтапы.ВГраница() = -1 Тогда
		
		ПараметрыОтбораПредыдущиеЭтапы = Новый Структура("КлючСвязиПродукция, КлючСвязиЭтапы");
		ПараметрыОтбораПредыдущиеЭтапы.КлючСвязиПродукция = Этап.КлючСвязиПродукция;
		ПараметрыОтбораПредыдущиеЭтапы.КлючСвязиЭтапы     = Этап.КлючСвязи;
		
		Возврат Этап.Владелец().НайтиСтроки(ПараметрыОтбораПредыдущиеЭтапы);
		
	КонецЕсли;
	
	Возврат ПредыдущиеЭтапы;
	
КонецФункции

Функция НачальныйЭтап(Этап)
	
	Возврат ПредыдущиеЭтапы(Этап).ВГраница() = -1;
	
КонецФункции

#КонецОбласти

#Область ДиспетчированиеГрафикаПроизводства

// Определяет периоды недоступности, которые подходят сразу всем исполнителям
//
// Параметры:
//  Начало		- Дата - начало периода, в котором нужно получить периоды недоступности
//  Окончание	- Дата - окончание периода, в котором нужно получить периоды недоступности
//  Исполнители	- Массив - список рабочих центров, видов рабочих центров, подразделений
//  
//
// Возвращаемое значение:
//   ТаблицаЗначений   - содержит начало и окончание периода недоступности
//
Функция ПериодыНедоступностиРабочихЦентров(Начало, Окончание, Исполнители, РасписаниеРаботы = Неопределено) Экспорт

	НачалоПериода    = НачалоДня(Начало);
	ОкончаниеПериода = КонецДня(Окончание);
	
	ТаблицаПериодыНедоступности = Новый ТаблицаЗначений;
	ТаблицаПериодыНедоступности.Колонки.Добавить("Начало",    Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПериодыНедоступности.Колонки.Добавить("Окончание", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Если Исполнители.Количество() = 0 
		ИЛИ НачалоПериода = '000101010000' 
		ИЛИ ОкончаниеПериода = '000101010000' Тогда
		
		Возврат ТаблицаПериодыНедоступности;
	КонецЕсли;
	
	// Нужно разделить исполнителей
	СписокПодразделений = Новый Массив;
	СписокРабочихЦентров = Новый Массив;
	СписокВидовРабочихЦентров = Новый Массив;
	Для каждого Исполнитель Из Исполнители Цикл
		Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			СписокПодразделений.Добавить(Исполнитель);
		ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
			СписокРабочихЦентров.Добавить(Исполнитель);
		Иначе
			СписокВидовРабочихЦентров.Добавить(Исполнитель);
		КонецЕсли; 
	КонецЦикла; 
	
	СписокПодразделений = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокПодразделений);
	СписокРабочихЦентров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокРабочихЦентров);
	СписокВидовРабочихЦентров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокВидовРабочихЦентров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДоступностьРабочихЦентровИнтервалы.ДатаГрафика, ДЕНЬ) КАК Дата
	|ИЗ
	|	Документ.ДоступностьРабочихЦентров.Интервалы КАК ДоступностьРабочихЦентровИнтервалы
	|ГДЕ
	|	ДоступностьРабочихЦентровИнтервалы.РабочийЦентр В
	|			(ВЫБРАТЬ
	|				РабочиеЦентры.Ссылка
	|			ИЗ
	|				Справочник.РабочиеЦентры КАК РабочиеЦентры
	|			ГДЕ
	|				(РабочиеЦентры.ВидРабочегоЦентра В (&СписокВидовРабочихЦентров)
	|					ИЛИ РабочиеЦентры.Ссылка В (&СписокРабочихЦентров)))
	|	И ДоступностьРабочихЦентровИнтервалы.ДатаГрафика МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И ДоступностьРабочихЦентровИнтервалы.Ссылка.Проведен
	|	И ДоступностьРабочихЦентровИнтервалы.Количество <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА СтруктураПредприятия.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА СтруктураПредприятия.ГрафикРаботы
	|		ИНАЧЕ ОсновнойКалендарьПредприятия.Значение
	|	КОНЕЦ КАК ГрафикРаботы
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СтруктураПредприятия.Ссылка В(&СписокПодразделений)";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
	Запрос.УстановитьПараметр("СписокРабочихЦентров", СписокРабочихЦентров);
	Запрос.УстановитьПараметр("СписокВидовРабочихЦентров", СписокВидовРабочихЦентров);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаДатыДоступности = Результат[0].Выгрузить();
	ТаблицаДатыДоступности.Индексы.Добавить("Дата");
	
	МассивГрафикиРаботы = Результат[1].Выгрузить().ВыгрузитьКолонку("ГрафикРаботы");
	РасписанияРаботы = РасписаниеРаботыПоГрафику(МассивГрафикиРаботы, НачалоПериода, ОкончаниеПериода);
	РасписанияРаботы.Свернуть("ДатаГрафика");
	РасписанияРаботы.Индексы.Добавить("ДатаГрафика");
	
	ТекущийПериод = НачалоПериода;
	Пока ТекущийПериод <= ОкончаниеПериода Цикл
		Если ТаблицаДатыДоступности.Найти(ТекущийПериод, "Дата") = Неопределено
			И РасписанияРаботы.Найти(ТекущийПериод, "ДатаГрафика") = Неопределено Тогда
			
			НовыйПериод = ТаблицаПериодыНедоступности.Добавить();
			НовыйПериод.Начало = ТекущийПериод;
			НовыйПериод.Окончание = КонецДня(НовыйПериод.Начало);
		КонецЕсли; 
		ТекущийПериод = ТекущийПериод + 86400;
	КонецЦикла; 
	
	Возврат ТаблицаПериодыНедоступности;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура РасчетГрафикаПроизводства(Заказы = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка КАК ЗаказНаПроизводство
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Проведен
	|	И ЗаказНаПроизводство.СтатусГрафикаПроизводства = ЗНАЧЕНИЕ(Перечисление.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать)
	|	И ЗаказНаПроизводство.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.КПроизводству)
	|	И (&Заказы = НЕОПРЕДЕЛЕНО
	|			ИЛИ ЗаказНаПроизводство.Ссылка В (&Заказы))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
	|	ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
	|	ЗаказНаПроизводство.Очередь");
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаказНаПроизводство = Выборка.ЗаказНаПроизводство.ПолучитьОбъект();
		
		РезультатРасчета = ЗаказНаПроизводство.РассчитатьГрафикВыпуска();
		
		Если РезультатРасчета.Запланирован Тогда
			
			ЗаказНаПроизводство.Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству;
			
			ЗаказНаПроизводство.ДополнительныеСвойства.Вставить("АктуализироватьМаршрутныеЛистыПроизводства", Истина);
			
			ЗаказНаПроизводство.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Сортирует массив по значениям или по реквизитам значений в указанном порядке
//
// Параметры:
//  Массив      - Массив - Исходный массив для сортировки
//  Направление - НаправлениеСортировки - Способ сортировки - по возрастанию или по убыванию
//  Свойство	- Строка - Имя реквизита, по которому выполняется сравнение элементов массива.
//                         Если не указан, сортировка выполняется по значению.
Процедура СортироватьМассив(Массив, Направление, Свойство = Неопределено) Экспорт
	
	СравнениеЗначений = Новый СравнениеЗначений;
	
	Для Индекс = 0 по Массив.ВГраница() Цикл
		
		Для ИндексЭлемента = 0 по Массив.ВГраница() - Индекс - 1 Цикл
			
			Если Свойство = Неопределено Тогда
				
				Значение1 = Массив[ИндексЭлемента];
				Значение2 = Массив[ИндексЭлемента + 1];
				
			Иначе
				
				Значение1 = Массив[ИндексЭлемента][Свойство];
				Значение2 = Массив[ИндексЭлемента + 1][Свойство];
				
			КонецЕсли;
			
			РезультатСравнения = СравнениеЗначений.Сравнить(Значение1, Значение2);
			
			Если РезультатСравнения > 0 И Направление = НаправлениеСортировки.Возр
				ИЛИ РезультатСравнения < 0 И Направление = НаправлениеСортировки.Убыв Тогда
				
				ТекущийЭлемент = Массив[ИндексЭлемента];
				Массив[ИндексЭлемента] = Массив[ИндексЭлемента + 1];
				Массив[ИндексЭлемента + 1] = ТекущийЭлемент;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаписиДвиженийВРегистр

// Заполняет движения документа "Этапы производства"
//
Процедура ОтразитьЭтапыПроизводства(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЭтапыПроизводства;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Движения.ЭтапыПроизводства.Записывать = Истина;
	Движения.ЭтапыПроизводства.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения документа "Доступность видов рабочих центров"
//
Процедура ОтразитьДоступностьВидовРабочихЦентров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоступностьВидовРабочихЦентров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Движения.ДоступностьВидовРабочихЦентров.Записывать = Истина;
	Движения.ДоступностьВидовРабочихЦентров.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения по регистру "Брак в производстве"
//
Процедура ОтразитьБракВПроизводстве(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБракВПроизводстве;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Движения.БракВПроизводстве.Записывать = Истина;
	Движения.БракВПроизводстве.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения по регистру "Переработка по графику производства"
//
Процедура ОтразитьПереработкаПоГрафикуПроизводства(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПереработкаПоГрафикуПроизводства;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Движения.ПереработкаПоГрафикуПроизводства.Записывать = Истина;
	Движения.ПереработкаПоГрафикуПроизводства.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Возвращает расписание работы заданное в графиках работы
//
// Параметры:
//	СписокГрафиков - Массив - список календарей
//	НачалоПериода - Дата - начало периода, за который нужно составить расписания
//	ОкончаниеПериода - Дата - окончания периода
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Расписание работы
//
Функция РасписаниеРаботыПоГрафику(СписокГрафиков, НачалоПериода, ОкончаниеПериода) Экспорт

	Расписание = КалендарныеГрафики.РасписанияРаботыНаПериод(СписокГрафиков, НачалоПериода, ОкончаниеПериода);
	
	Расписание.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	
	Для каждого СтрокаРасписание Из Расписание Цикл
		Если СтрокаРасписание.ВремяНачала = NULL Тогда
			СтрокаРасписание.ВремяНачала = '000101010000';
		КонецЕсли; 
		Если СтрокаРасписание.ВремяОкончания = NULL Тогда
			СтрокаРасписание.ВремяОкончания = '00010101235959';
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(СтрокаРасписание.ВремяОкончания) 
			ИЛИ СтрокаРасписание.ВремяОкончания = '000101012359'
			ИЛИ СтрокаРасписание.ВремяОкончания = '00010101235959' Тогда
			Длительность = КонецДня(СтрокаРасписание.ВремяОкончания) - СтрокаРасписание.ВремяНачала + 1;
		Иначе
			Длительность = СтрокаРасписание.ВремяОкончания - СтрокаРасписание.ВремяНачала;
		КонецЕсли;
		СтрокаРасписание.Длительность = Длительность;
	КонецЦикла;

	Возврат Расписание;
	
КонецФункции

// Возвращает список вариантов обеспечения, который используется в производстве
//
// Параметры:
//  ДоступноОбособленноеОбеспечение	 - Булево - Истина, если должен быть доступен выбор вариантов для обособленного обеспечения
// 
// Возвращаемое значение:
//   - СписокЗначений
//
Функция ДоступныеВариантыОбеспечения(ДоступноОбособленноеОбеспечение = Истина) Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ИзЗаказов"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Требуется"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	
	Если ДоступноОбособленноеОбеспечение Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Обособленно"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
	КонецЕсли; 
	
	Возврат Список;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПланированиеЭтапов

Процедура ВыполнитьПланированиеЭтапов(СтруктураПараметров, ПоследовательностьЭтапов)
	
	ГрафикВыпускаПродукции = Новый ТаблицаЗначений;
	ГрафикВыпускаПродукции.Колонки.Добавить("Этап",                         Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ГрафикВыпускаПродукции.Колонки.Добавить("НачалоПредварительногоБуфера", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ГрафикВыпускаПродукции.Колонки.Добавить("НачалоЭтапа",                  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ГрафикВыпускаПродукции.Колонки.Добавить("ОкончаниеЭтапа",               Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ГрафикВыпускаПродукции.Колонки.Добавить("ОкончаниеЗавершающегоБуфера",  Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ГрафикВыпускаПродукции.Колонки.Добавить("Количество",                   Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(15, 3)));
	ГрафикВыпускаПродукции.Колонки.Добавить("КлючСвязиЭтап",                Новый ОписаниеТипов("УникальныйИдентификатор"));
	ГрафикВыпускаПродукции.Колонки.Добавить("КлючСвязи",                    Новый ОписаниеТипов("УникальныйИдентификатор"));
	ГрафикВыпускаПродукции.Колонки.Добавить("Занятость");
	
	ГрафикВыпускаПродукции.Индексы.Добавить("КлючСвязи");
	
	СтруктураПараметров.Вставить("ГрафикВыпускаПродукции", ГрафикВыпускаПродукции);
	
	МенеджерВременныхТаблиц = ПолучитьДоступностьДляОграничений(СтруктураПараметров);
	ЗапланироватьЭтапы(МенеджерВременныхТаблиц, СтруктураПараметров, ПоследовательностьЭтапов);
	
КонецПроцедуры

Функция ПолучитьДоступностьДляОграничений(СтруктураПараметров)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗанятостьВидовРЦ.ВидРабочегоЦентра КАК Справочник.ВидыРабочихЦентров) КАК ВидРабочегоЦентра,
	|	ЗанятостьВидовРЦ.ДатаИнтервала КАК Период,
	|	ЗанятостьВидовРЦ.Количество КАК Занятость
	|ПОМЕСТИТЬ ВТЗанятостьВидовРЦ
	|ИЗ
	|	&ЗанятостьВидовРЦ КАК ЗанятостьВидовРЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРЦ.Ссылка КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА &ИгнорироватьОграниченияДоступности
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВидыРЦ.УчитыватьДоступностьПоГрафикуРаботы
	|	КОНЕЦ КАК УчитыватьДоступностьПоГрафикуРаботы,
	|	ВЫБОР
	|		КОГДА ВидыРЦ.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|			ТОГДА ВидыРЦ.Подразделение.ГрафикРаботы
	|		ИНАЧЕ ВидыРЦ.Календарь
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВидыРЦ.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ВидыРЦ.РезервДоступности КАК РезервДоступности,
	|	ВЫБОР ВидыРЦ.ЕдиницаИзмеренияДоступностиРЦ
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Минута)
	|			ТОГДА ВидыРЦ.МаксимальнаяДоступностьРЦ * 60
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Час)
	|			ТОГДА ВидыРЦ.МаксимальнаяДоступностьРЦ * 3600
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ЕдиницыИзмеренияВремени.Сутки)
	|			ТОГДА ВидыРЦ.МаксимальнаяДоступностьРЦ * 86400
	|	КОНЕЦ КАК МаксимальнаяДоступность,
	|	ВЫБОР ВидыРЦ.Подразделение.ИнтервалПланирования
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|			ТОГДА &НачалоЧаса
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|			ТОГДА &НачалоДня
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|			ТОГДА &НачалоНедели
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|			ТОГДА &НачалоМесяца
	|	КОНЕЦ КАК Начало,
	|	ВЫБОР ВидыРЦ.Подразделение.ИнтервалПланирования
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|			ТОГДА &ОкончаниеЧаса
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|			ТОГДА &ОкончаниеДня
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|			ТОГДА &ОкончаниеНедели
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|			ТОГДА &ОкончаниеМесяца
	|	КОНЕЦ КАК Окончание
	|ПОМЕСТИТЬ ВТВидыРЦ
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРЦ
	|ГДЕ
	|	ВидыРЦ.Ссылка В(&МассивВидовРЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Исполнитель  КАК Исполнитель,
	|	Т.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТИсполнители
	|ИЗ
	|	&ТаблицаИсполнителей КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доступность.ВидРабочегоЦентра КАК Исполнитель,
	|	Доступность.ДатаИнтервала КАК ДатаИнтервала,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				ТОГДА 0
	|			КОГДА Доступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|				ТОГДА Доступность.ДоступностьПоВидуРЦ
	|			ИНАЧЕ Доступность.ДоступностьПоРЦ
	|		КОНЕЦ) КАК КоличествоПриход,
	|	СУММА(ВЫБОР
	|			КОГДА Доступность.ЭтоДвижениеВводаДоступности
	|				ТОГДА 0
	|			ИНАЧЕ Доступность.Занято
	|		КОНЕЦ) КАК КоличествоРасход,
	|	СУММА(ВЫБОР
	|			КОГДА Доступность.ЭтоДвижениеВводаДоступности
	|				ТОГДА 0
	|			КОГДА Доступность.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство).ЗадействоватьРезервДоступности
	|				ТОГДА Доступность.Занято
	|			КОГДА Доступность.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.ЗадействоватьРезервДоступности
	|				ТОГДА Доступность.Занято
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоРасходЗадействоватьРезервДоступности,
	|	СУММА(ВЫБОР
	|			КОГДА Доступность.ЭтоДвижениеВводаДоступности
	|				ТОГДА 0
	|			КОГДА Доступность.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|					И НЕ ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство).ЗадействоватьРезервДоступности
	|				ТОГДА Доступность.Занято
	|			КОГДА Доступность.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|					И НЕ ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.ЗадействоватьРезервДоступности
	|				ТОГДА Доступность.Занято
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоРасходНеЗадействоватьРезервДоступности,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				ТОГДА 0
	|			КОГДА Доступность.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|				ТОГДА Доступность.МаксимальнаяДоступностьПоВидуРЦ
	|			ИНАЧЕ Доступность.МаксимальнаяДоступность
	|		КОНЕЦ) КАК МаксимальнаяДоступность,
	|	МАКСИМУМ(ВидыРЦ.УчитыватьДоступностьПоГрафикуРаботы) КАК УчитыватьДоступностьПоГрафикуРаботы,
	|	МАКСИМУМ(ВидыРЦ.ИнтервалПланирования) КАК ИнтервалПланирования,
	|	МАКСИМУМ(ВидыРЦ.РезервДоступности) КАК РезервДоступности
	|ПОМЕСТИТЬ ВТДоступностьВидыРЦ
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК Доступность
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРЦ КАК ВидыРЦ
	|		ПО (ВидыРЦ.Исполнитель = Доступность.ВидРабочегоЦентра)
	|			И Доступность.ДатаИнтервала >= ВидыРЦ.Начало
	|			И (Доступность.ДатаИнтервала <= ВидыРЦ.Окончание
	|				ИЛИ &КНачалу)
	|ГДЕ
	|	(Доступность.ЭтоДвижениеВводаДоступности
	|			ИЛИ НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				И Доступность.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство
	|				И (ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания < &ПриоритетНомер
	|					ИЛИ ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания < &ПодразделениеНомер
	|					ИЛИ ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство).Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство).Подразделение.РеквизитДопУпорядочивания = &ПодразделениеНомер
	|						И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.ЗаказНаПроизводство).Очередь < &НомерВОчереди)
	|			ИЛИ НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				И Доступность.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|				И (ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания < &ПриоритетНомер
	|					ИЛИ ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания < &ПодразделениеНомер
	|					ИЛИ ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Приоритет.РеквизитДопУпорядочивания = &ПриоритетНомер
	|						И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Подразделение.РеквизитДопУпорядочивания = &ПодразделениеНомер
	|						И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение.Очередь < &НомерВОчереди)
	|				И Доступность.Занято < 0
	|			ИЛИ НЕ Доступность.ЭтоДвижениеВводаДоступности
	|				И Доступность.Регистратор ССЫЛКА Документ.МаршрутныйЛистПроизводства
	|				И ВЫРАЗИТЬ(Доступность.Регистратор КАК Документ.МаршрутныйЛистПроизводства).Распоряжение <> &Заказ
	|				И Доступность.Занято > 0)
	|	И (Доступность.ЭтоДвижениеВводаДоступности
	|			ИЛИ НЕ &НаПустойЗавод)
	|	И Доступность.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	Доступность.ВидРабочегоЦентра,
	|	Доступность.ДатаИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Исполнитель КАК Исполнитель,
	|	ВложенныйЗапрос.УчитыватьДоступностьПоГрафикуРаботы КАК УчитыватьДоступностьПоГрафикуРаботы,
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.Доступность КАК Доступность,
	|	ВложенныйЗапрос.МаксимальнаяДоступность КАК МаксимальнаяДоступность
	|ПОМЕСТИТЬ ВТДоступность
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТДоступность.Исполнитель КАК Исполнитель,
	|		ТДоступность.УчитыватьДоступностьПоГрафикуРаботы КАК УчитыватьДоступностьПоГрафикуРаботы,
	|		ТДоступность.ДатаИнтервала КАК Период,
	|		ВЫБОР
	|			КОГДА &ЗадействоватьРезервДоступности
	|				ТОГДА ТДоступность.КоличествоПриход - ТДоступность.КоличествоРасход - ЕСТЬNULL(ТЗанятостьВидовРЦ.Занятость, 0) - ЕСТЬNULL(ТНедоступностьВТекущемИнтервале.Количество, 0)
	|			ИНАЧЕ ТДоступность.КоличествоПриход * (100 - ТДоступность.РезервДоступности) / 100 - ТДоступность.КоличествоРасходНеЗадействоватьРезервДоступности - ЕСТЬNULL(ТЗанятостьВидовРЦ.Занятость, 0) - ЕСТЬNULL(ТНедоступностьВТекущемИнтервале.Количество, 0) - ВЫБОР
	|					КОГДА ТДоступность.КоличествоРасходЗадействоватьРезервДоступности + ВЫБОР
	|							КОГДА &ЗадействоватьРезервДоступности
	|								ТОГДА ЕСТЬNULL(ТЗанятостьВидовРЦ.Занятость, 0)
	|							ИНАЧЕ 0
	|						КОНЕЦ + ВЫБОР
	|							КОГДА &ЗадействоватьРезервДоступности
	|								ТОГДА ЕСТЬNULL(ТНедоступностьВТекущемИнтервале.Количество, 0)
	|							ИНАЧЕ 0
	|						КОНЕЦ > ТДоступность.КоличествоПриход * ТДоступность.РезервДоступности / 100
	|						ТОГДА ТДоступность.КоличествоРасходЗадействоватьРезервДоступности + ВЫБОР
	|								КОГДА &ЗадействоватьРезервДоступности
	|									ТОГДА ЕСТЬNULL(ТЗанятостьВидовРЦ.Занятость, 0)
	|								ИНАЧЕ 0
	|							КОНЕЦ + ВЫБОР
	|								КОГДА &ЗадействоватьРезервДоступности
	|									ТОГДА ЕСТЬNULL(ТНедоступностьВТекущемИнтервале.Количество, 0)
	|								ИНАЧЕ 0
	|							КОНЕЦ - ТДоступность.КоличествоПриход * ТДоступность.РезервДоступности / 100
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ КАК Доступность,
	|		ТДоступность.МаксимальнаяДоступность КАК МаксимальнаяДоступность
	|	ИЗ
	|		ВТДоступностьВидыРЦ КАК ТДоступность
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТЗанятостьВидовРЦ.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|				ТЗанятостьВидовРЦ.Период КАК Период,
	|				СУММА(ТЗанятостьВидовРЦ.Занятость) КАК Занятость
	|			ИЗ
	|				ВТЗанятостьВидовРЦ КАК ТЗанятостьВидовРЦ
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТЗанятостьВидовРЦ.ВидРабочегоЦентра,
	|				ТЗанятостьВидовРЦ.Период) КАК ТЗанятостьВидовРЦ
	|			ПО (ТЗанятостьВидовРЦ.ВидРабочегоЦентра = ТДоступность.Исполнитель)
	|				И (ТЗанятостьВидовРЦ.Период = ТДоступность.ДатаИнтервала)
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТИнтервалы.Ссылка.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|				ТИнтервалы.ДатаГрафика КАК Период,
	|				СУММА(РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ТИнтервалы.ВремяНачала, СЕКУНДА)), ВЫБОР
	|							КОГДА &ТекущаяДатаСеанса > ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ТИнтервалы.ВремяОкончания, СЕКУНДА)), СЕКУНДА, -1)
	|								ТОГДА ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ТИнтервалы.ВремяОкончания, СЕКУНДА)), СЕКУНДА, -1)
	|							ИНАЧЕ ДОБАВИТЬКДАТЕ(&ТекущаяДатаСеанса, СЕКУНДА, -1)
	|						КОНЕЦ, СЕКУНДА) + 1) КАК Количество
	|			ИЗ
	|				Документ.ДоступностьРабочихЦентров.Интервалы КАК ТИнтервалы
	|			ГДЕ
	|				ТИнтервалы.Ссылка.Проведен
	|				И ТИнтервалы.Ссылка.ВидРабочегоЦентра В
	|						(ВЫБРАТЬ
	|							ТВидыРЦ.Исполнитель
	|						ИЗ
	|							ВТВидыРЦ КАК ТВидыРЦ)
	|				И ВЫБОР ТИнтервалы.Ссылка.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования
	|						КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|							ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|						КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|							ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
	|						КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|							ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, НЕДЕЛЯ)
	|						КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|							ТОГДА НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, МЕСЯЦ)
	|					КОНЕЦ = ТИнтервалы.ДатаГрафика
	|				И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ТИнтервалы.ВремяНачала, СЕКУНДА)) < &ТекущаяДатаСеанса
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТИнтервалы.Ссылка.ВидРабочегоЦентра,
	|				ТИнтервалы.ДатаГрафика) КАК ТНедоступностьВТекущемИнтервале
	|			ПО (ТНедоступностьВТекущемИнтервале.ВидРабочегоЦентра = ТДоступность.Исполнитель)
	|				И (ТНедоступностьВТекущемИнтервале.Период = ТДоступность.ДатаИнтервала)
	|	ГДЕ
	|		ТДоступность.УчитыватьДоступностьПоГрафикуРаботы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТВидыРЦ.Исполнитель,
	|		ТВидыРЦ.УчитыватьДоступностьПоГрафикуРаботы,
	|		ВЫБОР ТВидыРЦ.ИнтервалПланирования
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|				ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|				ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|				ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|				ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
	|		КОНЕЦ,
	|		СУММА(ТВидыРЦ.МаксимальнаяДоступность),
	|		СУММА(ТВидыРЦ.МаксимальнаяДоступность)
	|	ИЗ
	|		ВТВидыРЦ КАК ТВидыРЦ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО (ТВидыРЦ.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|			ПО (ВЫБОР
	|					КОГДА ТВидыРЦ.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|						ТОГДА КалендарныеГрафики.Календарь = Константы.ОсновнойКалендарьПредприятия
	|					ИНАЧЕ КалендарныеГрафики.Календарь = ТВидыРЦ.ГрафикРаботы
	|				КОНЕЦ)
	|				И (КалендарныеГрафики.ДатаГрафика >= ТВидыРЦ.Начало)
	|				И (КалендарныеГрафики.ДатаГрафика <= ТВидыРЦ.Окончание
	|					ИЛИ &КНачалу)
	|				И (КалендарныеГрафики.ДеньВключенВГрафик)
	|	ГДЕ
	|		НЕ ТВидыРЦ.УчитыватьДоступностьПоГрафикуРаботы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТВидыРЦ.Исполнитель,
	|		ТВидыРЦ.УчитыватьДоступностьПоГрафикуРаботы,
	|		ВЫБОР ТВидыРЦ.ИнтервалПланирования
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Час)
	|				ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
	|				ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, ДЕНЬ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
	|				ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, НЕДЕЛЯ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
	|				ТОГДА НАЧАЛОПЕРИОДА(КалендарныеГрафики.ДатаГрафика, МЕСЯЦ)
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТИсполнители.Исполнитель,
	|		ЛОЖЬ,
	|		ДОБАВИТЬКДАТЕ(ТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ЕСТЬNULL(ТРасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), СЕКУНДА)),
	|		СУММА(ВЫБОР
	|				КОГДА ТРасписанияРаботы.ВремяОкончания ЕСТЬ NULL
	|						ИЛИ ТРасписанияРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ТРасписанияРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0)
	|						ИЛИ ТРасписанияРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
	|					ТОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(ТРасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), КОНЕЦПЕРИОДА(ЕСТЬNULL(ТРасписанияРаботы.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)), ДЕНЬ), СЕКУНДА) + 1
	|				ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(ТРасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), ТРасписанияРаботы.ВремяОкончания, СЕКУНДА)
	|			КОНЕЦ),
	|		СУММА(ВЫБОР
	|				КОГДА ТРасписанияРаботы.ВремяОкончания ЕСТЬ NULL
	|						ИЛИ ТРасписанияРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ ТРасписанияРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0)
	|						ИЛИ ТРасписанияРаботы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
	|					ТОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(ТРасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), КОНЕЦПЕРИОДА(ЕСТЬNULL(ТРасписанияРаботы.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)), ДЕНЬ), СЕКУНДА) + 1
	|				ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(ТРасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), ТРасписанияРаботы.ВремяОкончания, СЕКУНДА)
	|			КОНЕЦ)
	|	ИЗ
	|		ВТИсполнители КАК ТИсполнители
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК ТРасписанияРаботы
	|			ПО ТИсполнители.ГрафикРаботы = ТРасписанияРаботы.ГрафикРаботы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТИсполнители.Исполнитель,
	|		ДОБАВИТЬКДАТЕ(ТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ЕСТЬNULL(ТРасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1)), СЕКУНДА))) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.Доступность > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗанятостьВидовРЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВидыРЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИсполнители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРасписанияРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДоступностьВидыРЦ");
	
	МассивВидовРЦ = Новый Массив;
	МассивГрафиковРаботы = Новый Массив;
	
	ТаблицаИсполнителей = Новый ТаблицаЗначений;
	ТаблицаИсполнителей.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаИсполнителей.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	
	Для каждого Этап из СтруктураПараметров.Этапы Цикл
		
		Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Для каждого ИсполнительЭтапа из Этап.ВидыРабочихЦентров Цикл
				МассивВидовРЦ.Добавить(ИсполнительЭтапа.ВидРабочегоЦентра);
			КонецЦикла;
			
		Иначе
			
			ДанныеИсполнителя = ДанныеИсполнителяЭтапаУББВ(Этап);
			
			Если ТаблицаИсполнителей.Найти(ДанныеИсполнителя.Исполнитель, "Исполнитель") = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаИсполнителей.Добавить(), ДанныеИсполнителя);
			КонецЕсли;
			
			Если МассивГрафиковРаботы.Найти(ДанныеИсполнителя.ГрафикРаботы) = Неопределено Тогда
				МассивГрафиковРаботы.Добавить(ДанныеИсполнителя.ГрафикРаботы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Начало = ТекущаяДатаСеанса();
	Окончание = СтруктураПараметров.Окончание;
	
	КНачалу = СтруктураПараметров.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВременныхТаблиц, МассивГрафиковРаботы, НачалоДня(Начало), ?(КНачалу, '39991231235959', Окончание));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивВидовРЦ",                      МассивВидовРЦ);
	
	Запрос.УстановитьПараметр("ЗанятостьВидовРЦ",                   СтруктураПараметров.ЗанятостьВидовРЦ);
	Запрос.УстановитьПараметр("ТаблицаИсполнителей",                ТаблицаИсполнителей);
	
	Запрос.УстановитьПараметр("Заказ",                              СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("КНачалу",                            КНачалу);
	Запрос.УстановитьПараметр("НаПустойЗавод",                      СтруктураПараметров.НаПустойЗавод);
	Запрос.УстановитьПараметр("НомерВОчереди",                      СтруктураПараметров.НомерВОчереди);
	Запрос.УстановитьПараметр("ПриоритетНомер",                     СтруктураПараметров.ПриоритетНомер);
	Запрос.УстановитьПараметр("ПодразделениеНомер",                 СтруктураПараметров.ПодразделениеНомер);
	Запрос.УстановитьПараметр("ЗадействоватьРезервДоступности",     СтруктураПараметров.ЗадействоватьРезервДоступности);
	Запрос.УстановитьПараметр("ИгнорироватьОграниченияДоступности", СтруктураПараметров.ИгнорироватьОграниченияДоступностиВидовРабочихЦентров);
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса",                  Начало);
	Запрос.УстановитьПараметр("НачалоЧаса",                         НачалоЧаса(Начало));
	Запрос.УстановитьПараметр("НачалоДня",                          НачалоДня(Начало));
	Запрос.УстановитьПараметр("НачалоНедели",                       НачалоНедели(Начало));
	Запрос.УстановитьПараметр("НачалоМесяца",                       НачалоМесяца(Начало));
	Запрос.УстановитьПараметр("ОкончаниеЧаса",                      КонецЧаса(Окончание));
	Запрос.УстановитьПараметр("ОкончаниеДня",                       КонецДня(Окончание));
	Запрос.УстановитьПараметр("ОкончаниеНедели",                    КонецНедели(Окончание));
	Запрос.УстановитьПараметр("ОкончаниеМесяца",                    КонецМесяца(Окончание));
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ПолучитьОграниченияЭтапа(ПараметрыЭтапа, РазмещениеВыпуска, МенеджерВременныхТаблиц)
	
	Перем ТекстГраница, ТекстПериод, ТекстПериодЗавершения, ТекстИсточник;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Граница КАК Граница,
	|	&Период КАК Период,
	|	&ПериодЗавершения КАК ПериодЗавершения,
	|	ТДоступность.Исполнитель КАК ВидРабочегоЦентра,
	|	ТДоступность.УчитыватьДоступностьПоГрафикуРаботы КАК УчитыватьДоступностьПоГрафикуРаботы,
	|	ТДоступность.Доступность КАК Доступность,
	|	ТДоступность.МаксимальнаяДоступность КАК МаксимальнаяДоступность
	|ИЗ
	|	&Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	&Порядок
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	МАКСИМУМ(ПериодЗавершения)
	|ПО
	|	Граница";
	
	Если ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ТекстГраница 			= "ТДоступность.Период";
		ТекстПериод 			= "ТДоступность.Период";
		ТекстПериодЗавершения 	= "ТДоступность.Период";
		
		ТекстИсточник = "ВТДоступность КАК ТДоступность ГДЕ ТДоступность.Исполнитель В(&Исполнители)"
		
	Иначе
		
		Если ПараметрыЭтапа.ДлительностьЭтапа > 0 
			И ПараметрыЭтапа.ЕдиницаИзмеренияДлительностиЭтапа = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День") Тогда
			
			ТекстГраница 			= "ТДоступность.Период";
			ТекстПериод 			= "ТДоступность.Период";
			ТекстПериодЗавершения 	= "ТДоступность.ПериодЗавершения";
			
			ТекстИсточник = 
			"(ВЫБРАТЬ
			|		ДоступностьВДнях.Период,
			|		ДоступностьВДнях.ПериодЗавершения,
			|		ДоступностьВДнях.Исполнитель,
			|		ЛОЖЬ КАК УчитыватьДоступностьПоГрафикуРаботы,
			|		86400 КАК Доступность,
			|		86400 КАК МаксимальнаяДоступность
			|	ИЗ
			|		(ВЫБРАТЬ
			|			НАЧАЛОПЕРИОДА(ТДоступность.Период, ДЕНЬ),
			|			ТДоступность.Исполнитель,
			|			МИНИМУМ(ТДоступность.Период) КАК Период,
			|			МАКСИМУМ(ДОБАВИТЬКДАТЕ(ТДоступность.Период, СЕКУНДА, ТДоступность.Доступность - 1)) КАК ПериодЗавершения
			|		ИЗ
			|			ВТДоступность КАК ТДоступность ГДЕ ТДоступность.Исполнитель В(&Исполнители)
			|		
			|		СГРУППИРОВАТЬ ПО
			|			НАЧАЛОПЕРИОДА(ТДоступность.Период, ДЕНЬ), ТДоступность.Исполнитель) КАК ДоступностьВДнях) КАК ТДоступность";
			
		Иначе
				
			ТекстГраница 			= "ВЫБОР КОГДА &КНачалу ТОГДА ДОБАВИТЬКДАТЕ(ТДоступность.Период, СЕКУНДА, ТДоступность.Доступность - 1) ИНАЧЕ ТДоступность.Период КОНЕЦ";
			ТекстПериод 			= "ТДоступность.Период";
			ТекстПериодЗавершения 	= "ДОБАВИТЬКДАТЕ(ТДоступность.Период, СЕКУНДА, ТДоступность.Доступность - 1)";
			
			ТекстИсточник = "ВТДоступность КАК ТДоступность ГДЕ ТДоступность.Исполнитель В(&Исполнители)";
			
		КонецЕсли;
			
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Граница", ТекстГраница);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПериодЗавершения", ТекстПериодЗавершения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Период", ТекстПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Источник", ТекстИсточник);
	
	Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Порядок", "Период УБЫВ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Порядок", "Период ВОЗР");
	КонецЕсли;
	
	МассивИсполнители = Новый Массив;
	
	Если ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда
		Для Каждого Исполнитель из ПараметрыЭтапа.ВидыРабочихЦентров Цикл
			МассивИсполнители.Добавить(Исполнитель.ВидРабочегоЦентра);
		КонецЦикла;
	Иначе
		МассивИсполнители.Добавить(ДанныеИсполнителяЭтапаУББВ(ПараметрыЭтапа).Исполнитель);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("КНачалу",     РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу);
	Запрос.УстановитьПараметр("ПустаяДата",  '00010101');
	Запрос.УстановитьПараметр("Исполнители", МассивИсполнители);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция СледующийЭтап(ПоследовательностьЭтапов, КлючСвязи, КлючСвязиПолуфабрикат, ГраницыЭтапа, РазмещениеВыпуска)
	
	КлючСвязи = Неопределено;
	РазмещениеВыпуска = Неопределено;
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Если КлючСвязи = Неопределено Тогда
		
		НайденныеСтроки = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтап, КлючСвязиПолуфабрикат, Размещен", ПустойУникальныйИдентификатор, КлючСвязиПолуфабрикат, Ложь));
		
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			
			КлючСвязи = НайденнаяСтрока.КлючСвязиСледующийЭтап;
			
			ГраницыЭтапа = Новый Массив;
			
			Для каждого ГраницаЭтапа из НайденнаяСтрока.ГраницыЭтапа Цикл
			
				ГраницыЭтапа.Добавить(ГраницаЭтапа);
				
			КонецЦикла;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КлючСвязи = Неопределено Тогда
		
		НайденныеСтроки = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиПолуфабрикат, Размещен", КлючСвязиПолуфабрикат, Ложь));
		
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			
			Если ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиСледующийЭтап, Размещен", НайденнаяСтрока.КлючСвязиЭтап, Ложь)).ВГраница() = -1 Тогда
				
				КлючСвязи = НайденнаяСтрока.КлючСвязиЭтап;
				
				ГраницыЭтапа = Новый Массив;
				
				Для каждого ГраницаЭтапа из НайденнаяСтрока.ГраницыЭтапа Цикл
				
					ГраницыЭтапа.Добавить(ГраницаЭтапа);
					
				КонецЦикла;
					
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если КлючСвязи = Неопределено Тогда
		
		НайденныеСтроки = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтап, Размещен", ПустойУникальныйИдентификатор, Ложь));
		
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			
			КлючСвязи = НайденнаяСтрока.КлючСвязиСледующийЭтап;
			КлючСвязиПолуфабрикат = НайденнаяСтрока.КлючСвязиПолуфабрикат;
			
			ГраницыЭтапа = Новый Массив;
			
			Для каждого ГраницаЭтапа из НайденнаяСтрока.ГраницыЭтапа Цикл
			
				ГраницыЭтапа.Добавить(ГраницаЭтапа);
				
			КонецЦикла;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КлючСвязи = Неопределено Тогда
		
		НайденныеСтроки = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("Размещен", Ложь));
		
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			
			Если ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиСледующийЭтап, Размещен", НайденнаяСтрока.КлючСвязиЭтап, Ложь)).ВГраница() = -1 Тогда
				
				КлючСвязи = НайденнаяСтрока.КлючСвязиЭтап;
				КлючСвязиПолуфабрикат = НайденнаяСтрока.КлючСвязиПолуфабрикат;
				
				ГраницыЭтапа = Новый Массив;
				
				Для каждого ГраницаЭтапа из НайденнаяСтрока.ГраницыЭтапа Цикл
				
					ГраницыЭтапа.Добавить(ГраницаЭтапа);
					
				КонецЦикла;
					
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если КлючСвязи = Неопределено Тогда
		
		НайденныеСтроки = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("Размещен, ЕстьЗависимыеЭтапы", Истина, Истина));
		
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			
			Для Индекс = 0 По НайденнаяСтрока.ЗависимыеЭтапы.ВГраница() Цикл
				
				ЗависимыйЭтап = НайденнаяСтрока.ЗависимыеЭтапы[Индекс];
				
				Если ЗависимыйЭтап.ЗначениеГраницыЭтапа <> Неопределено Тогда
					
					КлючСвязи = ЗависимыйЭтап.КлючСвязиЭтап;
					РазмещениеВыпуска = ЗависимыйЭтап.РазмещениеВыпуска;
					
					ГраницыЭтапа = Новый Массив;
					
					Для Счетчик = -ЗависимыйЭтап.КоличествоЭтаповЗаказа + 1 По 0 Цикл
						
						ГраницыЭтапа.Добавить(ЗависимыйЭтап.ЗначениеГраницыЭтапа);
						
					КонецЦикла;
					
				КонецЕсли;
				
				НайденнаяСтрока.ЗависимыеЭтапы.Удалить(Индекс);
				
				Прервать;
				
			КонецЦикла;
			
			НайденнаяСтрока.ЕстьЗависимыеЭтапы = НайденнаяСтрока.ЗависимыеЭтапы.ВГраница() <> -1;
				
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат (КлючСвязи <> Неопределено);
	
КонецФункции

Процедура РазместитьЭтап(СтруктураПараметров, ПоследовательностьЭтапов, РазмещениеВыпуска, ПараметрыЭтапа, ГраницыЭтапа)
	
	НижняяГраницаЭтапа = Неопределено;
	ВерхняяГраницаЭтапа = Неопределено;
	
	ПустойУникальныйИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	// В результате перепланирования части этапа, границы этапа могут оказаться не отсортированы по возрастанию
	ГраницыЭтапаСписок = Новый СписокЗначений;
	ГраницыЭтапаСписок.ЗагрузитьЗначения(ГраницыЭтапа);
	ГраницыЭтапаСписок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ГраницыЭтапа = ГраницыЭтапаСписок.ВыгрузитьЗначения();
	
	// Текущий этап без предыдущего
	НайденныеСтроки = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтап, КлючСвязиСледующийЭтап, Размещен", ПустойУникальныйИдентификатор, ПараметрыЭтапа.КлючСвязи, Ложь));
	
	Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		НайденнаяСтрока.Размещен = Истина;
		
	КонецЦикла;
	
	// Текущий этап без следующего
	НайденныеСтроки = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтап, КлючСвязиСледующийЭтап, Размещен", ПараметрыЭтапа.КлючСвязи, ПустойУникальныйИдентификатор, Ложь));
	
	Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		НайденнаяСтрока.Размещен = Истина;
		
		Если НайденнаяСтрока.ЕстьЗависимыеЭтапы Тогда
			
			ЗаполнитьГраницыЗависимыхЭтапов(НайденнаяСтрока.ЗависимыеЭтапы, СтруктураПараметров.ГрафикВыпускаПродукции, ПараметрыЭтапа.КлючСвязи, НижняяГраницаЭтапа, ВерхняяГраницаЭтапа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Текущий этап со следующим
	НайденныеСтроки = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтап, Размещен", ПараметрыЭтапа.КлючСвязи, Ложь));
	
	Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		НайденнаяСтрока.Размещен = Истина;
		
		СледующиеЭтапы = ПоследовательностьЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтап", НайденнаяСтрока.КлючСвязиСледующийЭтап));
		
		Для каждого СледующийЭтап из СледующиеЭтапы Цикл
			
			ПараметрыСледующегоЭтапа = СтруктураПараметров.Этапы.Найти(НайденнаяСтрока.КлючСвязиСледующийЭтап, "КлючСвязи");
			
			Для ИндексГраницыЭтапа = 0 по ГраницыЭтапа.ВГраница() Цикл
				
				НачалоЦикла = Макс(Цел(ИндексГраницыЭтапа * СледующийЭтап.КоличествоЭтап / НайденнаяСтрока.КоличествоЭтап), ПараметрыСледующегоЭтапа.КоличествоЭтаповЗаказа - ПараметрыСледующегоЭтапа.Количество);
				ГраницаЦикла = Цел((ИндексГраницыЭтапа + 1) * СледующийЭтап.КоличествоЭтап / НайденнаяСтрока.КоличествоЭтап) - 1;
				
				Если НачалоЦикла > ГраницаЦикла Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЗначениеГраницыЭтапа = ГраницыЭтапа[ИндексГраницыЭтапа];
				
				Если ЗначениеЗаполнено(ЗначениеГраницыЭтапа) Тогда
					
					Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
						
						Если ПараметрыСледующегоЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда 
							
							ЗначениеГраницыЭтапа = ПланированиеПроизводстваКлиентСервер.ПредыдущийИнтервалПланирования(ЗначениеГраницыЭтапа - 1, ПараметрыСледующегоЭтапа.ИнтервалПланирования, ПараметрыСледующегоЭтапа.ОкончаниеИнтервалаПланирования);
							
						ИначеЕсли ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров ИЛИ ПараметрыЭтапа.ДлительностьЭтапа > 0 Тогда 
							
							ЗначениеГраницыЭтапа = ЗначениеГраницыЭтапа - 1;
							
						КонецЕсли;
						
					Иначе
						
						Если ПараметрыСледующегоЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда 
							
							ЗначениеГраницыЭтапа = ПланированиеПроизводстваКлиентСервер.СледующийИнтервалПланирования(ЗначениеГраницыЭтапа + 1, ПараметрыСледующегоЭтапа.ИнтервалПланирования, ПараметрыСледующегоЭтапа.НачалоИнтервалаПланирования);
							
						ИначеЕсли ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров ИЛИ ПараметрыЭтапа.ДлительностьЭтапа > 0 Тогда 
							
							ЗначениеГраницыЭтапа = ЗначениеГраницыЭтапа + 1;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Для Индекс = НачалоЦикла По ГраницаЦикла Цикл
					
					Если ЗначениеЗаполнено(СледующийЭтап.ГраницыЭтапа[Индекс]) Тогда
						
						Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
							
							СледующийЭтап.ГраницыЭтапа[Индекс] = ?(ЗначениеЗаполнено(ЗначениеГраницыЭтапа), Мин(ЗначениеГраницыЭтапа, СледующийЭтап.ГраницыЭтапа[Индекс]), СледующийЭтап.ГраницыЭтапа[Индекс]);
							
						Иначе 
							
							СледующийЭтап.ГраницыЭтапа[Индекс] = ?(ЗначениеЗаполнено(ЗначениеГраницыЭтапа), Макс(ЗначениеГраницыЭтапа, СледующийЭтап.ГраницыЭтапа[Индекс]), СледующийЭтап.ГраницыЭтапа[Индекс]);
							
						КонецЕсли;
						
					Иначе
						
						СледующийЭтап.ГраницыЭтапа[Индекс] = ЗначениеГраницыЭтапа;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НайденнаяСтрока.ЕстьЗависимыеЭтапы Тогда
			
			ЗаполнитьГраницыЗависимыхЭтапов(НайденнаяСтрока.ЗависимыеЭтапы, СтруктураПараметров.ГрафикВыпускаПродукции, ПараметрыЭтапа.КлючСвязи, НижняяГраницаЭтапа, ВерхняяГраницаЭтапа);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапланироватьЭтапы(МенеджерВременныхТаблиц, СтруктураПараметров, ПоследовательностьЭтапов)
	
	Перем ДанныеОЗанятости, РазмещениеВыпуска;
	Перем КлючСвязиРазмещаемыйЭтап, КлючСвязиРазмещаемыйПолуфабрикат, ГраницыЭтапа;
	
	Ошибки = Новый Массив;
	
	Пока СледующийЭтап(ПоследовательностьЭтапов, КлючСвязиРазмещаемыйЭтап, КлючСвязиРазмещаемыйПолуфабрикат, ГраницыЭтапа, РазмещениеВыпуска) Цикл
		
		// Параметры этапа
		ПараметрыЭтапа = СтруктураПараметров.Этапы.Найти(КлючСвязиРазмещаемыйЭтап, "КлючСвязи");
		
		// Оптимальное количество передачи между этапами
		ОптимальноеКоличествоПередачи = СтруктураПараметров.ОптимальноеКоличествоПередачиМеждуЭтапами;
		
		НачальныйИндексГраницыЭтапа = ПараметрыЭтапа.КоличествоЭтаповЗаказа - ПараметрыЭтапа.Количество;
		
		Размещен = (ПараметрыЭтапа.Количество = 0);
		
		Если РазмещениеВыпуска = Неопределено Тогда
			
			РазмещениеВыпуска = СтруктураПараметров.РазмещениеВыпуска;
			
		ИначеЕсли РазмещениеВыпуска <> СтруктураПараметров.РазмещениеВыпуска Тогда
			
			Для каждого УдаляемаяСтрока Из СтруктураПараметров.ГрафикВыпускаПродукции.НайтиСтроки(Новый Структура("КлючСвязиЭтап", КлючСвязиРазмещаемыйЭтап)) Цикл
				
				СтруктураПараметров.ГрафикВыпускаПродукции.Удалить(УдаляемаяСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
			
			НачалоЭтапа = ДатаСУчетомБуфера(ПараметрыЭтапа.Начало,
											-ПараметрыЭтапа.ПредварительныйБуфер,
											ПараметрыЭтапа.ГрафикРаботыПодразделения,
											ПараметрыЭтапа.ЕдиницаИзмеренияПредварительногоБуфера);
			
			ОкончаниеЭтапа = ДатаСУчетомБуфера(ПараметрыЭтапа.Окончание,
											-ПараметрыЭтапа.ЗавершающийБуфер,
											ПараметрыЭтапа.ГрафикРаботыПодразделения,
											ПараметрыЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера);
											
		Иначе
			
			НачалоЭтапа = ДатаСУчетомБуфера(ПараметрыЭтапа.Начало,
											ПараметрыЭтапа.ПредварительныйБуфер,
											ПараметрыЭтапа.ГрафикРаботыПодразделения,
											ПараметрыЭтапа.ЕдиницаИзмеренияПредварительногоБуфера);
											
			ОкончаниеЭтапа = ДатаСУчетомБуфера(ПараметрыЭтапа.Окончание,
											ПараметрыЭтапа.ЗавершающийБуфер,
											ПараметрыЭтапа.ГрафикРаботыПодразделения,
											ПараметрыЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера);
											
		КонецЕсли;
		
		Если ОптимальноеКоличествоПередачи > 1 Тогда
			
			Для Индекс = НачальныйИндексГраницыЭтапа по ГраницыЭтапа.ВГраница() Цикл
				
				ГраницыЭтапа[Индекс] = ГраницыЭтапа[Мин(((Цел((Индекс + 1) / ОптимальноеКоличествоПередачи) + ?((Индекс + 1) % ОптимальноеКоличествоПередачи > 0, 1, 0))) * ОптимальноеКоличествоПередачи - 1, ГраницыЭтапа.ВГраница())];
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Скорректируем границы этапа с учетом с учетом буферов
		Если ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров 
			И (РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию И ПараметрыЭтапа.ЗавершающийБуфер > 0
				ИЛИ РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу И ПараметрыЭтапа.ПредварительныйБуфер > 0) Тогда
			
			Для Индекс = НачальныйИндексГраницыЭтапа по ГраницыЭтапа.ВГраница() Цикл
			
				Если ЗначениеЗаполнено(ГраницыЭтапа[Индекс]) Тогда
					
					Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
						
						ГраницыЭтапа[Индекс] = ДатаСУчетомБуфера(ГраницыЭтапа[Индекс],
																	-ПараметрыЭтапа.ЗавершающийБуфер,
																	ПараметрыЭтапа.ГрафикРаботыПодразделения,
																	ПараметрыЭтапа.ЕдиницаИзмеренияПредварительногоБуфера);
																					
					Иначе
						
						ГраницыЭтапа[Индекс] = ДатаСУчетомБуфера(ГраницыЭтапа[Индекс],
																	ПараметрыЭтапа.ПредварительныйБуфер,
																	ПараметрыЭтапа.ГрафикРаботыПодразделения,
																	ПараметрыЭтапа.ЕдиницаИзмеренияПредварительногоБуфера);
																	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НовыеГраницыЭтапа = Новый Массив;
		
		Для Индекс = 0 по ГраницыЭтапа.ВГраница() Цикл
			
			НовыеГраницыЭтапа.Добавить(ГраницыЭтапа[Индекс]);
			
		КонецЦикла;
		
		ВыборкаПериод = ПолучитьОграниченияЭтапа(ПараметрыЭтапа, РазмещениеВыпуска, МенеджерВременныхТаблиц);
		
		ТекущаяГраницаЭтапа = Неопределено;
		МожноРазместитьЭтапов = 0;
		РазмещеноЭтапов = 0;
		
		Для ИндексГраницыЭтапа = НачальныйИндексГраницыЭтапа по ГраницыЭтапа.ВГраница() Цикл
			
			Если ИндексГраницыЭтапа = НачальныйИндексГраницыЭтапа
				И ИндексГраницыЭтапа <> ГраницыЭтапа.ВГраница()
				ИЛИ ТекущаяГраницаЭтапа = ГраницыЭтапа[ИндексГраницыЭтапа]
				И ИндексГраницыЭтапа < ГраницыЭтапа.ВГраница() Тогда
				
				МожноРазместитьЭтапов = МожноРазместитьЭтапов + 1;
				ТекущаяГраницаЭтапа = ГраницыЭтапа[ИндексГраницыЭтапа];
				
				Продолжить;
				
			ИначеЕсли ИндексГраницыЭтапа = ГраницыЭтапа.ВГраница() Тогда
				
				МожноРазместитьЭтапов = МожноРазместитьЭтапов + 1;
				ТекущаяГраницаЭтапа = ГраницыЭтапа[ИндексГраницыЭтапа];
				
			КонецЕсли;
			
			// Размещение этапа
			ТребуетсяРазместитьЭтапов = МожноРазместитьЭтапов - РазмещеноЭтапов;
			ТребуетсяРазместитьЭтаповОстаток = ТребуетсяРазместитьЭтапов;
			
			ПараметрыРазмещения = Новый Структура;
			ПараметрыРазмещения.Вставить("ПараметрыЭтапа",         ПараметрыЭтапа);
			ПараметрыРазмещения.Вставить("ВремяРаботы",            Новый Соответствие);
			ПараметрыРазмещения.Вставить("РазмещениеВыпуска",      РазмещениеВыпуска);
			ПараметрыРазмещения.Вставить("ДанныеОграничений",      Новый Массив);
			ПараметрыРазмещения.Вставить("ДоступноеВремяРаботы",   Новый Соответствие);
			ПараметрыРазмещения.Вставить("ГрафикВыпускаПродукции", СтруктураПараметров.ГрафикВыпускаПродукции);
			
			УчитыватьДоступностьПоГрафикуРаботы = Новый Соответствие;
			
			Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
				
				ТекущаяГраницаЭтапа = ?(ЗначениеЗаполнено(ТекущаяГраницаЭтапа), Мин(ОкончаниеЭтапа, ТекущаяГраницаЭтапа), ОкончаниеЭтапа);
				
			Иначе
				
				ТекущаяГраницаЭтапа = ?(ЗначениеЗаполнено(ТекущаяГраницаЭтапа), Макс(НачалоЭтапа, ТекущаяГраницаЭтапа), НачалоЭтапа);
				
			КонецЕсли;
			
			ПродолжатьРазмещение = ВыборкаПериод.Следующий();
			
			Пока ПродолжатьРазмещение
				И (РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию И ВыборкаПериод.Граница >= ТекущаяГраницаЭтапа
					ИЛИ РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу И ВыборкаПериод.Граница < ТекущаяГраницаЭтапа) Цикл
				
				ПродолжатьРазмещение = ВыборкаПериод.Следующий();
				
			КонецЦикла;
			
			Пока ПродолжатьРазмещение Цикл
				
				ВыборкаИсполнитель = ВыборкаПериод.Выбрать();
				
				Если ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда
					
					Если ПараметрыЭтапа.ВидыРабочихЦентров.Количество() <> ВыборкаИсполнитель.Количество() Тогда
						
						ПродолжатьРазмещение = ВыборкаПериод.Следующий();
						Продолжить;
						
					ИначеЕсли ВыборкаИсполнитель.Количество() > 1 Тогда
						
						ПараметрыРазмещения.ДанныеОграничений = Новый Массив;
						ПараметрыРазмещения.ДоступноеВремяРаботы = Новый Соответствие;
						
					КонецЕсли;
					
				ИначеЕсли ВыборкаИсполнитель.Количество() = 0 Тогда
					
					ПродолжатьРазмещение = ВыборкаПериод.Следующий();
					Продолжить;
					
				КонецЕсли;
				
				Пока ВыборкаИсполнитель.Следующий() Цикл
					
					УчитыватьДоступностьПоГрафикуРаботы.Вставить(ВыборкаИсполнитель.ВидРабочегоЦентра, ВыборкаИсполнитель.УчитыватьДоступностьПоГрафикуРаботы);
					
					ВремяРаботыИДоступноеВремя(ПараметрыРазмещения, ДанныеОЗанятости, ТекущаяГраницаЭтапа, ВыборкаИсполнитель);
					
					// Структура, содержащая данные ограничения
					ДанныеОграничения = Новый Структура(
						"ВидРабочегоЦентра,
						|Период,
						|ПериодЗавершения,
						|Доступность,
						|МаксимальнаяДоступность,
						|ИнтервалПланирования,
						|УчитыватьДоступностьПоГрафикуРаботы,
						|КлючСвязи");
					
					// Данные ограничения из выборки
					ЗаполнитьЗначенияСвойств(ДанныеОграничения, ВыборкаИсполнитель);
					
					ПараметрыРазмещения.ДанныеОграничений.Добавить(ДанныеОграничения);
					
				КонецЦикла;
				
				ВозможноРазместитьЭтапов = ВозможноРазместитьЭтапов(ПараметрыРазмещения, УчитыватьДоступностьПоГрафикуРаботы);
				
				Если ВозможноРазместитьЭтапов.Значение = Неопределено Тогда
					
					ПараметрыРазмещения.ДанныеОграничений = Новый Массив;
					
				ИначеЕсли ВыборкаИсполнитель.Количество() > 1 
					И ВозможноРазместитьЭтапов.Значение = 0 Тогда
					
					ПродолжатьРазмещение = ВыборкаПериод.Следующий();
					Продолжить;
					
				КонецЕсли;
				
				Если ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда
					
					Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
						
						ЗначениеГраницыЭтапа = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ВыборкаПериод.Период, ПараметрыЭтапа.ИнтервалПланирования, ПараметрыЭтапа.НачалоИнтервалаПланирования);
						ЗначениеГраницыЭтапа = ДатаСУчетомБуфера(ЗначениеГраницыЭтапа, -ПараметрыЭтапа.ПредварительныйБуфер, ПараметрыЭтапа.ГрафикРаботыПодразделения, ПараметрыЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера);
						
					Иначе
						
						ЗначениеГраницыЭтапа = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ВыборкаПериод.Период, ПараметрыЭтапа.ИнтервалПланирования, ПараметрыЭтапа.ОкончаниеИнтервалаПланирования);
						ЗначениеГраницыЭтапа = ДатаСУчетомБуфера(ЗначениеГраницыЭтапа, ПараметрыЭтапа.ЗавершающийБуфер, ПараметрыЭтапа.ГрафикРаботыПодразделения, ПараметрыЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера);
						
					КонецЕсли;
					
				Иначе
					
					Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
						
						ЗначениеГраницыЭтапа = ВыборкаПериод.Период + (ПараметрыРазмещения.ДоступноеВремяРаботы[ПараметрыЭтапа.Подразделение][0] - ПараметрыРазмещения.ВремяРаботы[ПараметрыЭтапа.Подразделение]);
						ЗначениеГраницыЭтапа = Макс(ЗначениеГраницыЭтапа, ВыборкаПериод.Период);
						
					Иначе
						
						ЗначениеГраницыЭтапа = ВыборкаПериод.ПериодЗавершения - (ПараметрыРазмещения.ДоступноеВремяРаботы[ПараметрыЭтапа.Подразделение][0] - ПараметрыРазмещения.ВремяРаботы[ПараметрыЭтапа.Подразделение]);
						ЗначениеГраницыЭтапа = Мин(ЗначениеГраницыЭтапа, ВыборкаПериод.ПериодЗавершения);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВозможноРазместитьЭтапов.Значение = Неопределено
					ИЛИ ВозможноРазместитьЭтапов.Значение + РазмещеноЭтапов < ТребуетсяРазместитьЭтапов Тогда
					
					Если ЗначениеЗаполнено(ВозможноРазместитьЭтапов.Значение)
						И ВозможноРазместитьЭтапов.Значение > 0 Тогда
						
						КоличествоЭтапов = 0;
						
						Для Индекс = НачальныйИндексГраницыЭтапа + РазмещеноЭтапов по НачальныйИндексГраницыЭтапа + РазмещеноЭтапов + ВозможноРазместитьЭтапов.Значение - 1 Цикл
							
							Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
								
								НовыеГраницыЭтапа[Индекс] = ?(ЗначениеЗаполнено(НовыеГраницыЭтапа[Индекс]), Мин(НовыеГраницыЭтапа[Индекс], ЗначениеГраницыЭтапа), ЗначениеГраницыЭтапа);
								
							Иначе
								
								НовыеГраницыЭтапа[Индекс] = ?(ЗначениеЗаполнено(НовыеГраницыЭтапа[Индекс]), Макс(НовыеГраницыЭтапа[Индекс], ЗначениеГраницыЭтапа), ЗначениеГраницыЭтапа);
								
							КонецЕсли;
							
							КоличествоЭтапов = КоличествоЭтапов + 1;
							
						КонецЦикла;
						
						ЗаполнитьГрафикВыпускаПродукции(
							ПараметрыРазмещения,
							ДанныеОЗанятости,
							ВозможноРазместитьЭтапов,
							ТекущаяГраницаЭтапа,
							ЗначениеГраницыЭтапа,
							КоличествоЭтапов);
						
						РазмещеноЭтапов = РазмещеноЭтапов + КоличествоЭтапов;
						ТребуетсяРазместитьЭтаповОстаток = ТребуетсяРазместитьЭтаповОстаток - КоличествоЭтапов;
						
					КонецЕсли;
					
					ПродолжатьРазмещение = ВыборкаПериод.Следующий();
					Продолжить;
					
				КонецЕсли;
				
				КоличествоЭтапов = 0;
				
				Для Индекс = НачальныйИндексГраницыЭтапа + РазмещеноЭтапов по НачальныйИндексГраницыЭтапа + РазмещеноЭтапов + ТребуетсяРазместитьЭтаповОстаток - 1 Цикл
				
					Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
						
						НовыеГраницыЭтапа[Индекс] = ?(ЗначениеЗаполнено(НовыеГраницыЭтапа[Индекс]), Мин(НовыеГраницыЭтапа[Индекс], ЗначениеГраницыЭтапа), ЗначениеГраницыЭтапа);
						
					Иначе
						
						НовыеГраницыЭтапа[Индекс] = ?(ЗначениеЗаполнено(НовыеГраницыЭтапа[Индекс]), Макс(НовыеГраницыЭтапа[Индекс], ЗначениеГраницыЭтапа), ЗначениеГраницыЭтапа);
						
					КонецЕсли;
					
					КоличествоЭтапов = КоличествоЭтапов + 1;
					
				КонецЦикла;
				
				ГрафикВыпуска = ЗаполнитьГрафикВыпускаПродукции(
									ПараметрыРазмещения,
									ДанныеОЗанятости,
									ВозможноРазместитьЭтапов,
									ТекущаяГраницаЭтапа,
									ЗначениеГраницыЭтапа,
									КоличествоЭтапов);
		
				РазмещеноЭтапов = РазмещеноЭтапов + КоличествоЭтапов;
				ТребуетсяРазместитьЭтаповОстаток = ТребуетсяРазместитьЭтаповОстаток - КоличествоЭтапов;
				
				Если РазмещениеКОкончанию(ПараметрыРазмещения)
					И ГрафикВыпуска.НачалоПредварительногоБуфера < СтруктураПараметров.ТекущаяДатаСеанса Тогда
					
					ДобавитьОшибкуРазмещенияЭтапа(Ошибки, КлючСвязиРазмещаемыйЭтап, ПараметрыЭтапа);
					
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
			Если Ошибки.Количество() > 0 Тогда
				
				Прервать;
				
			КонецЕсли;
			
			Если ИндексГраницыЭтапа < ГраницыЭтапа.ВГраница() Тогда
				
				МожноРазместитьЭтапов = МожноРазместитьЭтапов + 1;
				ТекущаяГраницаЭтапа = ГраницыЭтапа[ИндексГраницыЭтапа];
				ВыборкаПериод.Сбросить();
				
			КонецЕсли;
			
			Если ПараметрыЭтапа.Количество <= РазмещеноЭтапов Тогда
				
				Размещен = Истина;
				
			ИначеЕсли НЕ ПродолжатьРазмещение Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ошибки.Количество() > 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
		Если Размещен Тогда
			
			РазместитьЭтап(СтруктураПараметров, ПоследовательностьЭтапов, РазмещениеВыпуска, ПараметрыЭтапа, НовыеГраницыЭтапа);
			
		КонецЕсли;
		
		Если НЕ Размещен Тогда
			
			ДобавитьОшибкуРазмещенияЭтапа(Ошибки, КлючСвязиРазмещаемыйЭтап, ПараметрыЭтапа);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("Ошибки", Ошибки);
	
КонецПроцедуры

Процедура ВремяРаботыИДоступноеВремя(ПараметрыРазмещения, ДанныеОЗанятости, ТекущаяГраницаЭтапа, ВыборкаИсполнитель)
	
	Доступность   = 0;
	Занятость     = 0;
	Недоступность = 0;
	
	Этап                 = ПараметрыРазмещения.ПараметрыЭтапа;
	ВремяРаботы          = ПараметрыРазмещения.ВремяРаботы;
	ДоступноеВремяРаботы = ПараметрыРазмещения.ДоступноеВремяРаботы;
	РазмещениеВыпуска    = ПараметрыРазмещения.РазмещениеВыпуска;
	
	Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда
	
		Для каждого ИсполнительЭтапа из Этап.ВидыРабочихЦентров Цикл
			
			Если ИсполнительЭтапа.ВидРабочегоЦентра = ВыборкаИсполнитель.ВидРабочегоЦентра Тогда
				
				ВремяРаботы.Вставить(ВыборкаИсполнитель.ВидРабочегоЦентра, ИсполнительЭтапа.ВремяРаботы);
				
				Если ДоступноеВремяРаботы[ВыборкаИсполнитель.ВидРабочегоЦентра] = Неопределено Тогда
				
					ДоступноеВремяРаботы.Вставить(ВыборкаИсполнитель.ВидРабочегоЦентра, Новый Массив);
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыборкаИсполнитель.УчитыватьДоступностьПоГрафикуРаботы Тогда
			
			Занятость = ПолучитьЗанятость(ДанныеОЗанятости, ВыборкаИсполнитель.ВидРабочегоЦентра, ВыборкаИсполнитель.Период);
			
		КонецЕсли;
		
		Доступность = ВыборкаИсполнитель.Доступность - Занятость;
		
	Иначе
		
		ВремяРаботы.Вставить(Этап.Подразделение, Этап.ДлительностьЭтапа);
		
		Если ДоступноеВремяРаботы[Этап.Подразделение] = Неопределено Тогда
		
			ДоступноеВремяРаботы.Вставить(Этап.Подразделение, Новый Массив);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяГраницаЭтапа) Тогда
			
			Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
				
				Недоступность = Макс(ВыборкаИсполнитель.ПериодЗавершения - ТекущаяГраницаЭтапа, 0);
				
			Иначе
				
				Недоступность = Макс(ТекущаяГраницаЭтапа - ВыборкаИсполнитель.Период, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Этап.ДлительностьЭтапа > 0 И Этап.ЕдиницаИзмеренияДлительностиЭтапа = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День") Тогда
			
			Доступность = ВыборкаИсполнитель.Доступность * ?(Недоступность > 0, 0, 1); 
			
		Иначе
			
			Доступность = ВыборкаИсполнитель.Доступность - Недоступность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Индекс = 0 По Цел(Доступность / ВыборкаИсполнитель.МаксимальнаяДоступность) Цикл
		
		Если Индекс > ДоступноеВремяРаботы[ВыборкаИсполнитель.ВидРабочегоЦентра].ВГраница() Тогда
			
			ДоступноеВремяРаботы[ВыборкаИсполнитель.ВидРабочегоЦентра].Добавить(Мин(Доступность, ВыборкаИсполнитель.МаксимальнаяДоступность));
			
		Иначе
			
			ДоступноеВремяРаботы[ВыборкаИсполнитель.ВидРабочегоЦентра][Индекс] = ДоступноеВремяРаботы[ВыборкаИсполнитель.ВидРабочегоЦентра][Индекс] + Мин(Доступность, ВыборкаИсполнитель.МаксимальнаяДоступность);
			
		КонецЕсли;
		
		Доступность = Доступность - Мин(Доступность, ВыборкаИсполнитель.МаксимальнаяДоступность);
		
		Если Доступность = 0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВозможноРазместитьЭтапов(ПараметрыРазмещения, УчитыватьДоступностьПоГрафикуРаботы)
	
	Результат = Новый Структура("Значение, Расшифровка");
	
	ПараметрыЭтапа       = ПараметрыРазмещения.ПараметрыЭтапа;
	ВремяРаботы          = ПараметрыРазмещения.ВремяРаботы; 
	ДоступноеВремяРаботы = ПараметрыРазмещения.ДоступноеВремяРаботы;
	
	ОдновременноПроизводимое = ?(ПараметрыЭтапа.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий <> 0, 
									ПараметрыЭтапа.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий, 1);
	
	КоличествоПараллельных = Неопределено;
	
	Для каждого Доступность из ДоступноеВремяРаботы Цикл
		
		Если КоличествоПараллельных = Неопределено Тогда
			
			КоличествоПараллельных = Доступность.Значение.Количество();
			
		Иначе
			
			КоличествоПараллельных = Мин(КоличествоПараллельных, Доступность.Значение.Количество());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КоличествоПараллельных) Тогда
		
		Результат.Расшифровка = Новый Массив(КоличествоПараллельных);
		
	Иначе
		
		Результат.Расшифровка = Новый Массив;
		Возврат Результат;
		
	КонецЕсли;
	
	Для каждого ВремяРаботыКлючЗначение из ВремяРаботы Цикл
		
		РезультатПоВидуРабочегоЦентра = Неопределено;
		
		Если ЗначениеЗаполнено(КоличествоПараллельных) Тогда
			
			РезультатПоВидуРабочегоЦентраРасшифровка = Новый Массив(КоличествоПараллельных);
			
		Иначе
			
			РезультатПоВидуРабочегоЦентраРасшифровка = Новый Массив;
			
		КонецЕсли;
		
		Для Индекс = 0 по КоличествоПараллельных - 1 Цикл
			
			Числитель = ДоступноеВремяРаботы[ВремяРаботыКлючЗначение.Ключ][Индекс];
			Знаменатель = ?(ВремяРаботыКлючЗначение.Значение > 0, ВремяРаботыКлючЗначение.Значение, 1);
			НеполноеЧастное = Цел(Числитель / Знаменатель);
			
			Если РезультатПоВидуРабочегоЦентра = Неопределено И Числитель > 0 Тогда
				
				РезультатПоВидуРабочегоЦентра = НеполноеЧастное;
				
			ИначеЕсли Числитель > 0 Тогда
				
				РезультатПоВидуРабочегоЦентра = РезультатПоВидуРабочегоЦентра + НеполноеЧастное;
				
			КонецЕсли;
			
			Если РезультатПоВидуРабочегоЦентра = Неопределено
				ИЛИ РезультатПоВидуРабочегоЦентра = 0
				ИЛИ РезультатПоВидуРабочегоЦентра > 0 И НеполноеЧастное > 0 Тогда
				
				РезультатПоВидуРабочегоЦентраРасшифровка[Индекс] = Дробь(Числитель, Знаменатель);
				
			Иначе
				
				РезультатПоВидуРабочегоЦентраРасшифровка[Индекс] = Дробь(0, 1);
				ДоступноеВремяРаботы[ВремяРаботыКлючЗначение.Ключ][Индекс] = 0;
				
			КонецЕсли;
				
		КонецЦикла;
		
		Если РезультатПоВидуРабочегоЦентра = Неопределено Тогда
			
			Результат.Значение = Неопределено;
			Прервать;
			
		Иначе
			
			Если Результат.Значение = Неопределено Тогда
				
				Результат.Значение = РезультатПоВидуРабочегоЦентра;
				
			Иначе
				
				Результат.Значение = Мин(Результат.Значение, РезультатПоВидуРабочегоЦентра);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Индекс = 0 по КоличествоПараллельных - 1 Цикл
			
			Если Результат.Расшифровка[Индекс] = Неопределено Тогда
				
				Результат.Расшифровка[Индекс] = РезультатПоВидуРабочегоЦентраРасшифровка[Индекс];
				
			Иначе
				
				Результат.Расшифровка[Индекс] = МинДробь(Результат.Расшифровка[Индекс], РезультатПоВидуРабочегоЦентраРасшифровка[Индекс]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ УчитыватьДоступностьПоГрафикуРаботы[ВремяРаботыКлючЗначение.Ключ] И Результат.Значение <> Неопределено И Результат.Значение >= 1 Тогда
			
			Результат.Значение = Макс(Результат.Значение, ПараметрыЭтапа.Количество);
			
			Для Индекс = 0 по Результат.Расшифровка.ВГраница() Цикл
				
				Результат.Расшифровка[Индекс] = СуммаДробей(Результат.Расшифровка[Индекс], Дробь(ПараметрыЭтапа.Количество, 1));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.Значение <> Неопределено Тогда
		
		Результат.Значение = Результат.Значение * ОдновременноПроизводимое;
		
		Для Индекс = 0 по Результат.Расшифровка.ВГраница() Цикл
			
			Результат.Расшифровка[Индекс] = Дробь(Результат.Расшифровка[Индекс].Числитель * ОдновременноПроизводимое, Результат.Расшифровка[Индекс].Знаменатель);
			
		КонецЦикла;
		 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьГрафикВыпускаПродукции(ПараметрыРазмещения, ДанныеОЗанятости, ВозможноРазместитьЭтапов, ТекущаяГраницаЭтапа, ЗначениеГраницыЭтапа, КоличествоЭтапов)
	
	ПараметрыЭтапа         = ПараметрыРазмещения.ПараметрыЭтапа;
	ГрафикВыпускаПродукции = ПараметрыРазмещения.ГрафикВыпускаПродукции;
	РазмещениеВыпуска      = ПараметрыРазмещения.РазмещениеВыпуска;
	ДанныеОграничений      = ПараметрыРазмещения.ДанныеОграничений;
	
	ГрафикЭтапа = ГрафикВыпускаПродукции.Добавить();
	
	ГрафикЭтапа.Этап          = ПараметрыЭтапа.Этап;
	ГрафикЭтапа.КлючСвязиЭтап = ПараметрыЭтапа.КлючСвязи;
	ГрафикЭтапа.КлючСвязи     = Новый УникальныйИдентификатор;
	ГрафикЭтапа.Количество    = КоличествоЭтапов;
	
	ГрафикЭтапаЗанятость = Новый ТаблицаЗначений;
	ГрафикЭтапаЗанятость.Колонки.Добавить("ВидРабочегоЦентра");
	ГрафикЭтапаЗанятость.Колонки.Добавить("ДатаИнтервала");
	ГрафикЭтапаЗанятость.Колонки.Добавить("Количество");
	
	ГрафикЭтапа.Занятость = ГрафикЭтапаЗанятость;
	
	ПериодНачало    = Неопределено;
	ПериодОкончание = Неопределено;

	Занятость = РассчитатьЗанятость(ПараметрыРазмещения, ВозможноРазместитьЭтапов, КоличествоЭтапов);
	
	Для каждого ДанныеОграничения из ДанныеОграничений Цикл
		
		Если ЗначениеЗаполнено(ДанныеОграничения.КлючСвязи) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеОграничения.КлючСвязи = ГрафикЭтапа.КлючСвязи;
		
		ПериодНачало    = ?(ПериодНачало = Неопределено, ДанныеОграничения.Период, Мин(ДанныеОграничения.Период, ПериодНачало));
		ПериодОкончание = ?(ПериодОкончание = Неопределено, ДанныеОграничения.ПериодЗавершения, Макс(ДанныеОграничения.ПериодЗавершения, ПериодОкончание));
		
		Если ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ДобавитьЗанятость(
				ПараметрыРазмещения,
				ДанныеОграничения,
				ДанныеОЗанятости,
				Занятость,
				ГрафикЭтапаЗанятость);
				
		Иначе
			
			ДобавитьЗанятость(
				ПараметрыРазмещения,
				ДанныеОграничения,
				ДанныеОЗанятости,
				Занятость);
				
		КонецЕсли;

	КонецЦикла;
	
	Если ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда

		ПериодНачало    = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ПериодНачало, ПараметрыЭтапа.ИнтервалПланирования, ПараметрыЭтапа.НачалоИнтервалаПланирования);
		ПериодОкончание = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ПериодОкончание, ПараметрыЭтапа.ИнтервалПланирования, ПараметрыЭтапа.ОкончаниеИнтервалаПланирования);
		
		ГрафикЭтапа.НачалоПредварительногоБуфера = ДатаСУчетомБуфера(ПериодНачало, -ПараметрыЭтапа.ПредварительныйБуфер, ПараметрыЭтапа.ГрафикРаботыПодразделения, ПараметрыЭтапа.ЕдиницаИзмеренияПредварительногоБуфера);
		ГрафикЭтапа.НачалоЭтапа                  = ПериодНачало;
		ГрафикЭтапа.ОкончаниеЭтапа               = ПериодОкончание;
		ГрафикЭтапа.ОкончаниеЗавершающегоБуфера  = ДатаСУчетомБуфера(ПериодОкончание, ПараметрыЭтапа.ЗавершающийБуфер, ПараметрыЭтапа.ГрафикРаботыПодразделения, ПараметрыЭтапа.ЕдиницаИзмеренияЗавершающегоБуфера);
		
	Иначе
		
		Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
			
			ОкончаниеЭтапа = ?(ЗначениеЗаполнено(ТекущаяГраницаЭтапа), Мин(ТекущаяГраницаЭтапа, ПериодОкончание), ПериодОкончание);
			НачалоЭтапа = Мин(ЗначениеГраницыЭтапа, ОкончаниеЭтапа);
			
		Иначе
			
			НачалоЭтапа = ?(ЗначениеЗаполнено(ТекущаяГраницаЭтапа), Макс(ТекущаяГраницаЭтапа, ПериодНачало), ПериодНачало);
			ОкончаниеЭтапа = Макс(ЗначениеГраницыЭтапа, НачалоЭтапа);
			
		КонецЕсли;
		
		ГрафикЭтапа.НачалоПредварительногоБуфера = НачалоЭтапа;
		ГрафикЭтапа.НачалоЭтапа                  = НачалоЭтапа;
		ГрафикЭтапа.ОкончаниеЭтапа               = ОкончаниеЭтапа;
		ГрафикЭтапа.ОкончаниеЗавершающегоБуфера  = ОкончаниеЭтапа;
		
	КонецЕсли;
	
	ПараметрыРазмещения.ДоступноеВремяРаботы.Очистить();

	Возврат ГрафикЭтапа;
	
КонецФункции

#КонецОбласти

#Область ЗаказНаПроизводство

Процедура ЗаполнитьДанныеСпецификаций(Объект, МассивДанных, КэшированныеЗначения) Экспорт
	
	Если МассивДанных.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	МассивКлючей = Новый Массив;
	
	Для каждого ДанныеПоНоменклатуре из МассивДанных Цикл
		
		МассивКлючей.Добавить(ДанныеПоНоменклатуре.КлючСвязиПродукция);
		
	КонецЦикла;
	
	УдалитьДанныеСпецификаций(Объект, МассивКлючей);
	
	ЗаполнитьСпецификациюЗаказа(Объект, МассивДанных, КэшированныеЗначения, Истина);
	
	Для Каждого Ключ Из МассивКлючей Цикл
		ЗаполнитьКоличествоЭтаповНаЕдиницуСледующегоЭтапаРекурсивно(Объект, Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДанныеСпецификаций(Объект, МассивКлючей, НеПерезаполнятьПолуфабрикаты = Ложь) Экспорт	
	
	Если МассивКлючей.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Для каждого Ключ Из МассивКлючей Цикл
		УдалитьДанныеСпецификацииПоКлючу(Объект, Ключ);
	КонецЦикла;
	
	Если НЕ НеПерезаполнятьПолуфабрикаты Тогда
	// Удалим связанные полуфабрикаты из табличной части "Продукция"
	МассивКлючейПродукция = Новый ФиксированныйМассив(МассивКлючей);
	Пока МассивКлючейПродукция.Количество() <> 0 Цикл
		
		МассивКлючейПродукцияНовый = Новый Массив;
		
		Для каждого Ключ Из МассивКлючейПродукция Цикл
			УдаляемыеСтроки = Объект.Продукция.НайтиСтроки(Новый Структура("КлючСвязиПродукция", Ключ));
			Для каждого ДанныеСтроки Из УдаляемыеСтроки Цикл
				МассивКлючейПродукцияНовый.Добавить(ДанныеСтроки.КлючСвязи);
				Объект.Продукция.Удалить(ДанныеСтроки);
				УдалитьДанныеСпецификацииПоКлючу(Объект, ДанныеСтроки.КлючСвязи);
			КонецЦикла;
		КонецЦикла;
		
		ОчиститьГрафикПродукции(Объект, МассивКлючейПродукцияНовый);
		
		МассивКлючейПродукция = Новый ФиксированныйМассив(МассивКлючейПродукцияНовый);
		
	КонецЦикла;
	КонецЕсли;
	
	// Если заказ в статусе "К производству" или "Закрыт" то график не очищаем.
	Если Объект.Статус = Перечисления.СтатусыЗаказовНаПроизводство.Создан Тогда
		ОчиститьГрафикПродукции(Объект, МассивКлючей);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНеиспользуемыеДанныеСпецификации(Объект) Экспорт
	
	ПродукцияКлючиСвязи = Объект.Продукция.Выгрузить(,"КлючСвязи, НомерСтроки");
	ПродукцияКлючиСвязи.Индексы.Добавить("КлючСвязи");
	
	ЭтапыКлючиСвязи = Объект.Этапы.Выгрузить(,"КлючСвязи");
	ЭтапыКлючиСвязи.Индексы.Добавить("КлючСвязи");
	
	ВыходныеИзделияКлючиСвязи = Объект.ВыходныеИзделия.Выгрузить(,"КлючСвязи");
	ВыходныеИзделияКлючиСвязи.Индексы.Добавить("КлючСвязи");
	
	ВозвратныеОтходыКлючиСвязи = Объект.ВозвратныеОтходы.Выгрузить(,"КлючСвязи");
	ВозвратныеОтходыКлючиСвязи.Индексы.Добавить("КлючСвязи");
	
	МатериалыИУслугиКлючиСвязи = Объект.МатериалыИУслуги.Выгрузить(, "КлючСвязи");
	МатериалыИУслугиКлючиСвязи.Индексы.Добавить("КлючСвязи");
	
	ТрудозатратыКлючиСвязи = Объект.Трудозатраты.Выгрузить(,"КлючСвязи");
	ТрудозатратыКлючиСвязи.Индексы.Добавить("КлючСвязи");
	
	ЭтапыГрафикКлючиСвязи = Объект.ЭтапыГрафик.Выгрузить(,"КлючСвязи, КлючСвязиЭтапы");
	ЭтапыГрафикКлючиСвязи.Индексы.Добавить("КлючСвязи");
	
	ОтборКлючСвязи = Новый Структура("КлючСвязи");
	ОтборКлючСвязиЭтапы = Новый Структура("КлючСвязиЭтапы");
	
	// Этапы
	Для Индекс = -Объект.Этапы.Количество() + 1 по 0 Цикл
		
		СтрокаЭтапы = Объект.Этапы[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаЭтапы.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЗначениеЗаполнено(СтрокаЭтапы.КлючСвязиЭтапы) И ЭтапыКлючиСвязи.Найти(СтрокаЭтапы.КлючСвязиЭтапы, "КлючСвязи") = Неопределено Тогда
			
			ОтборКлючСвязи.КлючСвязи = СтрокаЭтапы.КлючСвязи; 
			УдалитьСтрокиВТаблицеПоКлючу(ЭтапыКлючиСвязи, ОтборКлючСвязи);
			
			Объект.Этапы.Удалить(СтрокаЭтапы);
			
		ИначеЕсли СтрокаЭтапы.Количество = 0 Тогда
			
			ОтборКлючСвязиЭтапы.КлючСвязиЭтапы = СтрокаЭтапы.КлючСвязи; 
			УдалитьСтрокиВТаблицеПоКлючу(ЭтапыГрафикКлючиСвязи, ОтборКлючСвязиЭтапы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выходные изделия
	Для Индекс = -Объект.ВыходныеИзделия.Количество() + 1 по 0 Цикл
		
		СтрокаВыходныеИзделия = Объект.ВыходныеИзделия[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаВыходныеИзделия.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыКлючиСвязи.Найти(СтрокаВыходныеИзделия.КлючСвязиЭтапы, "КлючСвязи") = Неопределено Тогда
			
			ОтборКлючСвязи.КлючСвязи = СтрокаВыходныеИзделия.КлючСвязи; 
			УдалитьСтрокиВТаблицеПоКлючу(ВыходныеИзделияКлючиСвязи, ОтборКлючСвязи);
			
			Объект.ВыходныеИзделия.Удалить(СтрокаВыходныеИзделия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Материалы и услуги
	Для Индекс = -Объект.МатериалыИУслуги.Количество() + 1 по 0 Цикл
		
		СтрокаМатериалыИУслуги = Объект.МатериалыИУслуги[-Индекс];
		
		Если НЕ СтрокаМатериалыИУслуги.Отменено
			И (ПродукцияКлючиСвязи.Найти(СтрокаМатериалыИУслуги.КлючСвязиПродукция, "КлючСвязи") = Неопределено
				ИЛИ ЭтапыКлючиСвязи.Найти(СтрокаМатериалыИУслуги.КлючСвязиЭтапы, "КлючСвязи") = Неопределено) Тогда
			
			ОтборКлючСвязи.КлючСвязи = СтрокаМатериалыИУслуги.КлючСвязи; 
			УдалитьСтрокиВТаблицеПоКлючу(МатериалыИУслугиКлючиСвязи, ОтборКлючСвязи);
			
			Объект.МатериалыИУслуги.Удалить(СтрокаМатериалыИУслуги);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Возвратные отходы
	Для Индекс = -Объект.ВозвратныеОтходы.Количество() + 1 по 0 Цикл
		
		СтрокаВозвратныеОтходы = Объект.ВозвратныеОтходы[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаВозвратныеОтходы.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыКлючиСвязи.Найти(СтрокаВозвратныеОтходы.КлючСвязиЭтапы, "КлючСвязи") = Неопределено Тогда
			
			ОтборКлючСвязи.КлючСвязи = СтрокаВозвратныеОтходы.КлючСвязи; 
			УдалитьСтрокиВТаблицеПоКлючу(ВозвратныеОтходыКлючиСвязи, ОтборКлючСвязи);
			
			Объект.ВозвратныеОтходы.Удалить(СтрокаВозвратныеОтходы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Трудозатраты
	Для Индекс = -Объект.Трудозатраты.Количество() + 1 по 0 Цикл
		
		СтрокаТрудозатраты = Объект.Трудозатраты[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаТрудозатраты.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыКлючиСвязи.Найти(СтрокаТрудозатраты.КлючСвязиЭтапы, "КлючСвязи") = Неопределено Тогда
			
			ОтборКлючСвязи.КлючСвязи = СтрокаТрудозатраты.КлючСвязи; 
			УдалитьСтрокиВТаблицеПоКлючу(ТрудозатратыКлючиСвязи, ОтборКлючСвязи);
			
			Объект.Трудозатраты.Удалить(СтрокаТрудозатраты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Виды рабочих центров
	Для Индекс = -Объект.ВидыРабочихЦентров.Количество() + 1 по 0 Цикл
		
		СтрокаВидыРабочихЦентров = Объект.ВидыРабочихЦентров[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаВидыРабочихЦентров.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыКлючиСвязи.Найти(СтрокаВидыРабочихЦентров.КлючСвязиЭтапы, "КлючСвязи") = Неопределено Тогда
			
			Объект.ВидыРабочихЦентров.Удалить(СтрокаВидыРабочихЦентров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Продукция (график)
	Для Индекс = -Объект.ПродукцияГрафик.Количество() + 1 по 0 Цикл
		
		СтрокаПродукцияГрафик = Объект.ПродукцияГрафик[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаПродукцияГрафик.КлючСвязиПродукция, "КлючСвязи") = Неопределено Тогда
			
			Объект.ПродукцияГрафик.Удалить(СтрокаПродукцияГрафик);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Этапы (график)
	Для Индекс = -Объект.ЭтапыГрафик.Количество() + 1 по 0 Цикл
		
		СтрокаЭтапыГрафик = Объект.ЭтапыГрафик[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаЭтапыГрафик.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыКлючиСвязи.Найти(СтрокаЭтапыГрафик.КлючСвязиЭтапы, "КлючСвязи") = Неопределено 
			ИЛИ ЭтапыГрафикКлючиСвязи.Найти(СтрокаЭтапыГрафик.КлючСвязи, "КлючСвязи") = Неопределено Тогда
			
			ОтборКлючСвязи.КлючСвязи = СтрокаЭтапыГрафик.КлючСвязи; 
			УдалитьСтрокиВТаблицеПоКлючу(ЭтапыГрафикКлючиСвязи, ОтборКлючСвязи);
			
			Объект.ЭтапыГрафик.Удалить(СтрокаЭтапыГрафик);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выходные изделия (график)
	Для Индекс = -Объект.ВыходныеИзделияГрафик.Количество() + 1 по 0 Цикл
		
		СтрокаВыходныеИзделияГрафик = Объект.ВыходныеИзделияГрафик[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаВыходныеИзделияГрафик.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыГрафикКлючиСвязи.Найти(СтрокаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик, "КлючСвязи") = Неопределено
			ИЛИ ВыходныеИзделияКлючиСвязи.Найти(СтрокаВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия, "КлючСвязи") = Неопределено Тогда
			
			Объект.ВыходныеИзделияГрафик.Удалить(СтрокаВыходныеИзделияГрафик);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Материалы и услуги (график)
	Для Индекс = -Объект.МатериалыИУслугиГрафик.Количество() + 1 по 0 Цикл
		
		СтрокаМатериалыИУслугиГрафик = Объект.МатериалыИУслугиГрафик[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаМатериалыИУслугиГрафик.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыГрафикКлючиСвязи.Найти(СтрокаМатериалыИУслугиГрафик.КлючСвязиЭтапыГрафик, "КлючСвязи") = Неопределено
			ИЛИ МатериалыИУслугиКлючиСвязи.Найти(СтрокаМатериалыИУслугиГрафик.КлючСвязиМатериалыИУслуги, "КлючСвязи") = Неопределено Тогда
			
			Объект.МатериалыИУслугиГрафик.Удалить(СтрокаМатериалыИУслугиГрафик);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Возвратные отходы (график)
	Для Индекс = -Объект.ВозвратныеОтходыГрафик.Количество() + 1 по 0 Цикл
		
		СтрокаВозвратныеОтходы = Объект.ВозвратныеОтходыГрафик[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаВозвратныеОтходы.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыГрафикКлючиСвязи.Найти(СтрокаВозвратныеОтходы.КлючСвязиЭтапыГрафик, "КлючСвязи") = Неопределено
			ИЛИ ВозвратныеОтходыКлючиСвязи.Найти(СтрокаВозвратныеОтходы.КлючСвязиВозвратныеОтходы, "КлючСвязи") = Неопределено Тогда
			
			Объект.ВозвратныеОтходыГрафик.Удалить(СтрокаВозвратныеОтходы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Трудозатраты (график)
	Для Индекс = -Объект.ТрудозатратыГрафик.Количество() + 1 по 0 Цикл
		
		СтрокаТрудозатратыГрафик = Объект.ТрудозатратыГрафик[-Индекс];
		
		Если ПродукцияКлючиСвязи.Найти(СтрокаТрудозатратыГрафик.КлючСвязиПродукция, "КлючСвязи") = Неопределено
			ИЛИ ЭтапыГрафикКлючиСвязи.Найти(СтрокаТрудозатратыГрафик.КлючСвязиЭтапыГрафик, "КлючСвязи") = Неопределено
			ИЛИ ТрудозатратыКлючиСвязи.Найти(СтрокаТрудозатратыГрафик.КлючСвязиТрудозатраты, "КлючСвязи") = Неопределено Тогда
			
			Объект.ТрудозатратыГрафик.Удалить(СтрокаТрудозатратыГрафик);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Занятость видов рабочих центров
	Для Индекс = -Объект.ЗанятостьВидовРабочихЦентров.Количество() + 1 по 0 Цикл
		
		СтрокаЗанятостьВидовРабочихЦентров = Объект.ЗанятостьВидовРабочихЦентров[-Индекс];
		
		Если ЭтапыГрафикКлючиСвязи.Найти(СтрокаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапыГрафик, "КлючСвязи") = Неопределено Тогда
			
			Объект.ЗанятостьВидовРабочихЦентров.Удалить(СтрокаЗанятостьВидовРабочихЦентров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение ключа связи этапа и номера строки продукции в занятости рабочих центров
	Для каждого СтрокаЗанятостьВидовРабочихЦентров из Объект.ЗанятостьВидовРабочихЦентров Цикл
		
		СтрокаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапы = ЭтапыГрафикКлючиСвязи.Найти(СтрокаЗанятостьВидовРабочихЦентров.КлючСвязиЭтапыГрафик, "КлючСвязи").КлючСвязиЭтапы;
		СтрокаЗанятостьВидовРабочихЦентров.НомерСтрокиПродукция = ПродукцияКлючиСвязи.Найти(СтрокаЗанятостьВидовРабочихЦентров.КлючСвязиПродукция, "КлючСвязи").НомерСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет данные спецификации из документа "Заказ на производство"
//
// Параметры:
//  Объект		- ДокументОбъект.ЗаказНаПроизводство - заказ на производство, данные которого нужно удалить
//  Ключ		- УникальныйИдентификатор - ключ связи табличной части Продукция
//
Процедура УдалитьДанныеСпецификацииПоКлючу(Объект, Ключ) Экспорт

	УдалитьСтрокиПоКлючу(Объект, "Этапы", Ключ);
	УдалитьСтрокиПоКлючу(Объект, "ВыходныеИзделия", Ключ);
	УдалитьСтрокиПоКлючу(Объект, "ВозвратныеОтходы", Ключ);
	УдалитьСтрокиПоКлючу(Объект, "МатериалыИУслуги", Ключ);
	УдалитьСтрокиПоКлючу(Объект, "Трудозатраты", Ключ);
	УдалитьСтрокиПоКлючу(Объект, "ВидыРабочихЦентров", Ключ);
	УдалитьСтрокиПоКлючу(Объект, "АльтернативныеВидыРабочихЦентров", Ключ);
	УдалитьСтрокиПоКлючу(Объект, "ЭтапыВосстановленияБрака", Ключ);
	
КонецПроцедуры

Процедура УдалитьСтрокиПоКлючу(Объект, ИмяТабличнойЧасти, КлючСвязи, ИмяКлюча = "КлючСвязиПродукция") Экспорт
	
	УдаляемыеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура(ИмяКлюча, КлючСвязи));
	
	Для каждого УдаляемаяСтрока из УдаляемыеСтроки Цикл
		
		Объект[ИмяТабличнойЧасти].Удалить(УдаляемаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиВТаблицеПоКлючу(Таблица, ПараметрыОтбора)
	
	УдаляемыеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);
	Для Каждого УдаляемаяСтрока из УдаляемыеСтроки Цикл
		Таблица.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьПотребностьВоВнутреннихПолуфабрикатах(Объект, КлючСвязи, КлючСвязиПродукция)
	
	Перем КэшированныеЗначения;
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСвязиМатериалыИУслуги", КлючСвязи);
	
	ПромежуточныйВыпуски = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора);
	Если ПромежуточныйВыпуски.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	// Определим склад по умолчанию, 
	//  если выпускаем работу, то склад по умолчанию будет пустой
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаПроизводство") Тогда
		
		СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КлючСвязи", КлючСвязиПродукция);
		
		Для Каждого СтрокаПродукция Из Объект.Продукция.НайтиСтроки(СтруктураОтбора) Цикл
			СкладПоУмолчанию = СтрокаПродукция.Склад;
			Прервать;
		КонецЦикла;
		
	Иначе
		
		СкладПоУмолчанию = Объект.Склад;
		
	КонецЕсли;
	
	МассивСтрокКУдалению  = Новый Массив;
	МассивСтрокКПересчету = Новый Массив;
	
	СтруктураПоиска = Новый Структура("
		|Номенклатура,
		|Характеристика,
		|КлючСвязиЭтапы");
		
	СтруктураПоиска.Вставить("Склад", СкладПоУмолчанию);
	
	Для Каждого ПромежуточныйВыпуск из ПромежуточныйВыпуски Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПромежуточныйВыпуск,, "Склад");
		
		ПобочныеВыпуски = Объект.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
		
		Если ПобочныеВыпуски.ВГраница() <> -1 Тогда
			
			ПобочныйВыпуск = ПобочныеВыпуски[0];
			ПобочныйВыпуск.Количество = ПобочныйВыпуск.Количество + ПромежуточныйВыпуск.Количество;
			
			МассивСтрокКУдалению.Добавить(ПромежуточныйВыпуск);
			МассивСтрокКПересчету.Добавить(ПобочныйВыпуск);
			
		Иначе
			
			ПромежуточныйВыпуск.ПроизводитсяВПроцессе = Ложь;
			ПромежуточныйВыпуск.КлючСвязиМатериалыИУслуги = ПустойКлюч;
			
			ПромежуточныйВыпуск.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
			ПромежуточныйВыпуск.Склад              = СкладПоУмолчанию;
			ПромежуточныйВыпуск.Подразделение      = Справочники.СтруктураПредприятия.ПустаяСсылка();
			ПромежуточныйВыпуск.Получатель         = СкладПоУмолчанию;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Для Каждого Строка Из МассивСтрокКУдалению Цикл
		
		Объект.ВозвратныеОтходы.Удалить(Строка);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для Каждого Строка Из МассивСтрокКПересчету Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьГрафикПродукции(Объект, МассивКлючей) Экспорт

	Для каждого Ключ Из МассивКлючей Цикл
		
		УдалитьСтрокиПоКлючу(Объект, "ПродукцияГрафик", Ключ);
		УдалитьСтрокиПоКлючу(Объект, "ЭтапыГрафик", Ключ);
		УдалитьСтрокиПоКлючу(Объект, "ВыходныеИзделияГрафик", Ключ);
		УдалитьСтрокиПоКлючу(Объект, "ВозвратныеОтходыГрафик", Ключ);
		УдалитьСтрокиПоКлючу(Объект, "МатериалыИУслугиГрафик", Ключ);
		УдалитьСтрокиПоКлючу(Объект, "ТрудозатратыГрафик", Ключ);
		УдалитьСтрокиПоКлючу(Объект, "ЗанятостьВидовРабочихЦентров", Ключ);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция УчитываемыйРазмерБуфера(Буфер, ВидыРабочихЦентров)

	Результат = 0;
	
	Если Буфер = 0 Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Для каждого ИсполнительЭтапа из ВидыРабочихЦентров Цикл
		
		Если ИсполнительЭтапа.МинимальныйЗначимыйБуфер = 0 Тогда
			
			Результат = Буфер;
			Прервать;
			
		КонецЕсли;
			
		Если ИсполнительЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
			
			ВремяИнтервала = 3600; // 60 * 60
			
		ИначеЕсли ИсполнительЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
			
			ВремяИнтервала = 86400; // 60 * 60 * 24
			
		ИначеЕсли ИсполнительЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
			
			ВремяИнтервала = 604800; // 60 * 60 * 24 * 7
			
		ИначеЕсли ИсполнительЭтапа.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
			
			ВремяИнтервала = 2592000; // 60 * 60 * 24 * 30
			
		КонецЕсли; 
		
		Если (Буфер / ВремяИнтервала * 100) >= ИсполнительЭтапа.МинимальныйЗначимыйБуфер Тогда
			
			Результат = Буфер;
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

Функция ДатаСУчетомБуфера(Дата, Буфер, ГрафикРаботыИлиПодразделение, ЕдиницаИзмеренияБуфера) Экспорт
	
	Результат = Дата;
	
	Если Буфер = 0 ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если ЕдиницаИзмеренияБуфера = Перечисления.ЕдиницыИзмеренияВремени.День Тогда
		
		Если ТипЗнч(ГрафикРаботыИлиПодразделение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВЫБОР
			|		КОГДА СтруктураПредприятия.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
			|			ТОГДА СтруктураПредприятия.ГрафикРаботы
			|		ИНАЧЕ ОсновнойКалендарьПредприятия.Значение
			|	КОНЕЦ КАК ГрафикРаботы
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ОсновнойКалендарьПредприятия КАК ОсновнойКалендарьПредприятия
			|		ПО (ИСТИНА)
			|ГДЕ
			|	СтруктураПредприятия.Ссылка = &Подразделение";
			
			Запрос.УстановитьПараметр("Подразделение", ГрафикРаботыИлиПодразделение);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда

				ГрафикРаботы = Выборка.ГрафикРаботы;

			Иначе

				ГрафикРаботы = Неопределено;

			КонецЕсли;
			
		Иначе
			
			ГрафикРаботы = ГрафикРаботыИлиПодразделение;
			
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ГрафикРаботы) Тогда
			
			Возврат ?(Буфер > 0, КонецДня(Дата + Буфер), НачалоДня(Дата + Буфер));
			
		КонецЕсли; 
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.ДатаПоКалендарю КАК ДатаПоКалендарю
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 0
		|		КалендарныеГрафики.ДатаГрафика КАК ДатаПоКалендарю
		|	ИЗ
		|		РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|	ГДЕ
		|		КалендарныеГрафики.Календарь = &ГрафикРаботы
		|		И КалендарныеГрафики.ДеньВключенВГрафик
		|		И ВЫБОР КОГДА &Буфер > 0 ТОГДА
		|			КалендарныеГрафики.ДатаГрафика >= &Дата
		|		ИНАЧЕ
		|			КалендарныеГрафики.ДатаГрафика < &Дата
		|		КОНЕЦ
		|	
		|	УПОРЯДОЧИТЬ ПО
		|		&УпорядочитьПоВложенныйЗапрос) КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	&УпорядочитьПоТ";
		
		Если Буфер > 0 Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 0", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(?(Цел(Буфер / 86400) = Буфер / 86400, Буфер / 86400, Цел(Буфер / 86400) + 1), "ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УпорядочитьПоВложенныйЗапрос", "ДатаПоКалендарю ВОЗР");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УпорядочитьПоТ", "ДатаПоКалендарю УБЫВ");
			
		Иначе
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ ПЕРВЫЕ 0", "ВЫБРАТЬ ПЕРВЫЕ " + Формат(-?(Цел(Буфер / 86400) = Буфер / 86400, Буфер / 86400, Цел(Буфер / 86400) - 1), "ЧН=0; ЧГ="));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УпорядочитьПоВложенныйЗапрос", "ДатаПоКалендарю УБЫВ");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УпорядочитьПоТ", "ДатаПоКалендарю ВОЗР");
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("Дата", ?(НачалоДня(Дата) <= НачалоДня(ТекущаяДатаСеанса()), КонецДня(ТекущаяДатаСеанса()) + 1, ?(Буфер > 0, Дата, КонецДня(Дата) + 1)));
		Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
		Запрос.УстановитьПараметр("Буфер", Буфер / 86400);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Результат = ?(Буфер > 0, КонецДня(Выборка.ДатаПоКалендарю), НачалоДня(Выборка.ДатаПоКалендарю));
				Прервать;
				
			КонецЦикла;
			
		Иначе
			
			Результат = ?(Буфер > 0, КонецДня(Результат + Буфер), НачалоДня(Результат + Буфер));
			
		КонецЕсли;
		
	Иначе
		
		Результат = Дата + Буфер;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьСпецификациюЗаказаПоСпискуНоменклатуры(Объект, МассивДанных, КэшированныеЗначения, ЗаполнятьИнформациюПоАвтовыбору, ЕстьУточненияМатериалов, ХарактеристикиИспользуются)

	ДанныеСпецификаций = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(МассивДанных,, Истина);
	
	ДобавленныеСтрокиМатериалов = Новый Массив;
	МатериалыПроизводимыеВПроцессеПоСпецификации = Новый Массив;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	МассивНазначений = Новый Массив;
	МассивНоменклатуры = Новый Массив;
	
	Для ИндексТекущихДанных = 0 По МассивДанных.ВГраница() Цикл
		
		ДанныеПоНоменклатуре = МассивДанных[ИндексТекущихДанных];
		
		Если ЗначениеЗаполнено(ДанныеПоНоменклатуре.Назначение)
			И МассивНазначений.Найти(ДанныеПоНоменклатуре.Назначение) = Неопределено Тогда
			МассивНазначений.Добавить(ДанныеПоНоменклатуре.Назначение);
		КонецЕсли;
		
		Если МассивНоменклатуры.Найти(ДанныеПоНоменклатуре.Номенклатура) = Неопределено Тогда
			МассивНоменклатуры.Добавить(ДанныеПоНоменклатуре.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначенияРеквизитовНазначений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНазначений, "Заказ");
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "ТипНоменклатуры");
	
	Для ИндексТекущихДанных = 0 По МассивДанных.ВГраница() Цикл
	
		СтруктураДанных = ДанныеСпецификаций.Получить(ИндексТекущихДанных);
		
		Если СтруктураДанных = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		КлючиСвязиЭтапов = Новый Соответствие;
		
		МатериалыПроизводимыеВПроцессеНаЭтапе = Новый Массив;
		ВыпускИспользованныйНаСледующихЭтапах = Новый Соответствие;
		
		ДанныеПоНоменклатуре = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(МассивДанных[ИндексТекущихДанных]);
		
		РеквизитыНоменклатуры = ЗначенияРеквизитовНоменклатуры.Получить(ДанныеПоНоменклатуре.Номенклатура);
		Если РеквизитыНоменклатуры <> Неопределено 
			И РеквизитыНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
			ДанныеПоНоменклатуре.Вставить("ЭтоРабота", Истина);
		Иначе
			ДанныеПоНоменклатуре.Вставить("ЭтоРабота", Ложь);
		КонецЕсли;
		
		РеквизитыНазначения = ЗначенияРеквизитовНазначений.Получить(ДанныеПоНоменклатуре.Назначение);
		Если РеквизитыНазначения <> Неопределено Тогда
			ДанныеПоНоменклатуре.Вставить("ЕстьНазначение", Истина);
			ДанныеПоНоменклатуре.Вставить("ПоЗаказуДавальца", ТипЗнч(РеквизитыНазначения.Заказ) = Тип("ДокументСсылка.ЗаказДавальца"));
		Иначе
			ДанныеПоНоменклатуре.Вставить("ЕстьНазначение", Ложь);
			ДанныеПоНоменклатуре.Вставить("ПоЗаказуДавальца", Ложь);
		КонецЕсли;
		
		Если НЕ ДанныеПоНоменклатуре.Свойство("Подразделение") Тогда
			ДанныеПоНоменклатуре.Вставить("Подразделение");
		КонецЕсли;
		
		Если НЕ ДанныеПоНоменклатуре.Свойство("Склад") Тогда
			ДанныеПоНоменклатуре.Вставить("Склад");
		КонецЕсли;
		
		// Продукция
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказНаПроизводство")
			ИЛИ ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура")
			И Объект.Свойство("Продукция")
			И ТипЗнч(Объект.Продукция) = Тип("ДанныеФормыКоллекция") Тогда
		
			Для Каждого ПродукцияСтрока Из Объект.Продукция Цикл
				
				Если ПродукцияСтрока.КлючСвязи = ДанныеПоНоменклатуре.КлючСвязиПродукция
					И НЕ ЗначениеЗаполнено(ДанныеПоНоменклатуре.КлючСвязиПолуфабрикат) Тогда
					
					ПродукцияСтрока.ОптимальноеКоличествоПередачиМеждуЭтапами = СтруктураДанных.ОптимальноеКоличествоПередачиМеждуЭтапами;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Объект.Свойство("ОптимальноеКоличествоПередачиМеждуЭтапами") Тогда
			
			Объект.ОптимальноеКоличествоПередачиМеждуЭтапами = СтруктураДанных.ОптимальноеКоличествоПередачиМеждуЭтапами;
			
		КонецЕсли;
		
		// Этапы
		Для Каждого ЭтапыЭлемент Из СтруктураДанных.Этапы Цикл
			
			НоваяСтрока = Объект.Этапы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭтапыЭлемент);
			
			Если СтруктураДанных.МногоэтапныйПроизводственныйПроцесс Тогда
				НоваяСтрока.НаименованиеЭтапа = ЭтапыЭлемент.ЭтапПредставление;
			Иначе
				НоваяСтрока.НаименованиеЭтапа = СтруктураДанных.СпецификацияПредставление;
			КонецЕсли;
			НоваяСтрока.КлючСвязи          = Новый УникальныйИдентификатор;
			НоваяСтрока.КлючСвязиПродукция = ДанныеПоНоменклатуре.КлючСвязиПродукция;
			НоваяСтрока.КлючСвязиЭтапы     = ДанныеПоНоменклатуре.КлючСвязиЭтапы;
			
			Если ЗначениеЗаполнено(ДанныеПоНоменклатуре.КлючСвязиПолуфабрикат) Тогда
				
				НоваяСтрока.КлючСвязиПолуфабрикат = ДанныеПоНоменклатуре.КлючСвязиПолуфабрикат;
				
			КонецЕсли;
			
			КлючиСвязиЭтапов.Вставить(ЭтапыЭлемент.Этап, НоваяСтрока.КлючСвязи);
			
		КонецЦикла;
		
		// Материалы и услуги
		Для Каждого МатериалыИУслугиЭлемент Из СтруктураДанных.МатериалыИУслуги Цикл
			
			НоваяСтрока = Объект.МатериалыИУслуги.Добавить();
			ДобавленныеСтрокиМатериалов.Добавить(НоваяСтрока);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, МатериалыИУслугиЭлемент);
			
			НоваяСтрока.КлючСвязиСпецификация = МатериалыИУслугиЭлемент.КлючСвязи;
			
			НоваяСтрока.КлючСвязиПродукция   = ДанныеПоНоменклатуре.КлючСвязиПродукция;
			НоваяСтрока.КлючСвязиЭтапы       = КлючиСвязиЭтапов[МатериалыИУслугиЭлемент.Этап];
			НоваяСтрока.КлючСвязиЭтапыСтрока = Строка(НоваяСтрока.КлючСвязиЭтапы);
			НоваяСтрока.КлючСвязи            = Новый УникальныйИдентификатор;
			
			Если МатериалыИУслугиЭлемент.ПроизводитсяВПроцессе Тогда
				
				Если МатериалыИУслугиЭлемент.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации Тогда
				
					ДанныеМатериала = Новый Структура;
					ДанныеМатериала.Вставить("КлючСвязиПродукция",     ДанныеПоНоменклатуре.КлючСвязиПродукция);
					ДанныеМатериала.Вставить("Назначение",             ДанныеПоНоменклатуре.Назначение);
					ДанныеМатериала.Вставить("НазначениеЗаказа",       ДанныеПоНоменклатуре.НазначениеЗаказа);
					ДанныеМатериала.Вставить("ДатаПотребности",        ДанныеПоНоменклатуре.ДатаПотребности);
					ДанныеМатериала.Вставить("ПодразделениеДиспетчер", ДанныеПоНоменклатуре.ПодразделениеДиспетчер);
					ДанныеМатериала.Вставить("Склад",                  НоваяСтрока.Склад);
					ДанныеМатериала.Вставить("Номенклатура",           НоваяСтрока.Номенклатура);
					ДанныеМатериала.Вставить("Характеристика",         НоваяСтрока.Характеристика);
					ДанныеМатериала.Вставить("Подразделение",          МатериалыИУслугиЭлемент.ПодразделениеЭтапа);
					ДанныеМатериала.Вставить("Спецификация",           НоваяСтрока.ИсточникПолученияПолуфабриката);
					ДанныеМатериала.Вставить("Количество",             НоваяСтрока.Количество);
					ДанныеМатериала.Вставить("Упаковка",               НоваяСтрока.Упаковка);
					ДанныеМатериала.Вставить("КлючСвязиПолуфабрикат",  НоваяСтрока.КлючСвязи);
					ДанныеМатериала.Вставить("КлючСвязиЭтапы",         НоваяСтрока.КлючСвязиЭтапы);
					ДанныеМатериала.Вставить("ЗаказатьНаСклад",        НоваяСтрока.ЗаказатьНаСклад);
					
					МатериалыПроизводимыеВПроцессеПоСпецификации.Добавить(ДанныеМатериала);
					
				ИначеЕсли МатериалыИУслугиЭлемент.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе Тогда
					
					НоваяСтрока.КлючСвязиЭтапВыпуска = КлючиСвязиЭтапов[НоваяСтрока.ИсточникПолученияПолуфабриката];
					
					ДанныеМатериала = Новый Структура;
					ДанныеМатериала.Вставить("КлючСвязи",      НоваяСтрока.КлючСвязи);
					ДанныеМатериала.Вставить("Номенклатура",   НоваяСтрока.Номенклатура);
					ДанныеМатериала.Вставить("Характеристика", НоваяСтрока.Характеристика);
					ДанныеМатериала.Вставить("Этап",           НоваяСтрока.ИсточникПолученияПолуфабриката);
					ДанныеМатериала.Вставить("Подразделение",  МатериалыИУслугиЭлемент.ПодразделениеЭтапа);
					ДанныеМатериала.Вставить("Упаковка",       НоваяСтрока.Упаковка);
					ДанныеМатериала.Вставить("Количество",     НоваяСтрока.Количество);
					ДанныеМатериала.Вставить("ЗаказатьНаСклад",НоваяСтрока.ЗаказатьНаСклад);
					ДанныеМатериала.Вставить("Склад",          НоваяСтрока.Склад);
					
					МатериалыПроизводимыеВПроцессеНаЭтапе.Добавить(ДанныеМатериала);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаполнятьИнформациюПоАвтовыбору Тогда
				
				УправлениеДаннымиОбИзделияхКлиентСервер.ЗаполнитьИнформациюПоАвтовыборуМатериала(НоваяСтрока);
				
			КонецЕсли;
			
			Если ЕстьУточненияМатериалов = Ложь Тогда
				
				Если (НоваяСтрока.Номенклатура.Пустая()
					ИЛИ НоваяСтрока.Характеристика.Пустая()
					И НоваяСтрока.ХарактеристикиИспользуются
					И ХарактеристикиИспользуются)
					И НоваяСтрока.ИспользуетсяАвтовыбор Тогда
					
					ЕстьУточненияМатериалов = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(НоваяСтрока, ДанныеПоНоменклатуре);
			
		КонецЦикла;
		
		// Выходные изделия
		Для Каждого ВыходныеИзделияЭлемент Из СтруктураДанных.ВыходныеИзделия Цикл
			
			НоваяСтрока = Объект.ВыходныеИзделия.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыходныеИзделияЭлемент);
			
			НоваяСтрока.КлючСвязи             = Новый УникальныйИдентификатор;
			НоваяСтрока.КлючСвязиПродукция    = ДанныеПоНоменклатуре.КлючСвязиПродукция;
			НоваяСтрока.КлючСвязиЭтапы        = КлючиСвязиЭтапов[ВыходныеИзделияЭлемент.Этап];
			НоваяСтрока.КлючСвязиПолуфабрикат = ДанныеПоНоменклатуре.КлючСвязиПолуфабрикат;
			
			Если НоваяСтрока.Номенклатура = ДанныеПоНоменклатуре.Номенклатура И ЗначениеЗаполнено(НоваяСтрока.КлючСвязиПолуфабрикат) Тогда
				НоваяСтрока.ПроизводитсяВПроцессе = Истина;
			КонецЕсли;
			
			Если ВыходныеИзделияЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				НоваяСтрока.Подразделение = ДанныеПоНоменклатуре.Подразделение;
			Иначе
				Если НоваяСтрока.ПроизводитсяВПроцессе Тогда
					Если ДанныеПоНоменклатуре.ЗаказатьНаСклад Тогда
						НоваяСтрока.Склад = ДанныеПоНоменклатуре.Склад;
					Иначе
						НоваяСтрока.Подразделение = ДанныеПоНоменклатуре.Подразделение;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(ДанныеПоНоменклатуре.Склад) Тогда
					НоваяСтрока.Склад = ДанныеПоНоменклатуре.Склад;
				КонецЕсли;
			КонецЕсли;
			
			ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
				НоваяСтрока, ДанныеПоНоменклатуре, Перечисления.ТипыСтоимостиВыходныхИзделий.Рассчитывается);
			
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура");
		СтруктураОтбора.Вставить("Характеристика");
		СтруктураОтбора.Вставить("Этап");
		
		// Промежуточные выпуски
		Для Каждого СтрокаМатериалы Из МатериалыПроизводимыеВПроцессеНаЭтапе Цикл
			
			КоличествоПотребность = СтрокаМатериалы.Количество;
			
			СтруктураОтбора.Номенклатура   = СтрокаМатериалы.Номенклатура;
			СтруктураОтбора.Характеристика = СтрокаМатериалы.Характеристика;
			СтруктураОтбора.Этап           = СтрокаМатериалы.Этап;
			
			Для Каждого ПобочныйВыпуск Из СтруктураДанных.ВозвратныеОтходы.НайтиСтроки(СтруктураОтбора) Цикл
				
				Если КоличествоПотребность = 0 Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоПобочныйВыпуск = ВыпускИспользованныйНаСледующихЭтапах.Получить(ПобочныйВыпуск);
				Если КоличествоПобочныйВыпуск <> Неопределено Тогда
					КоличествоОстаток = Макс(КоличествоПобочныйВыпуск - КоличествоПотребность, 0);
					КоличествоИспользовано = КоличествоПобочныйВыпуск - КоличествоОстаток;
				Иначе
					КоличествоОстаток = Макс(ПобочныйВыпуск.Количество - КоличествоПотребность, 0);
					КоличествоИспользовано = ПобочныйВыпуск.Количество - КоличествоОстаток;
				КонецЕсли;
				
				Если КоличествоИспользовано = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Объект.ВозвратныеОтходы.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПобочныйВыпуск);
				
				НоваяСтрока.КлючСвязи             = Новый УникальныйИдентификатор;
				НоваяСтрока.КлючСвязиПродукция    = ДанныеПоНоменклатуре.КлючСвязиПродукция;
				НоваяСтрока.КлючСвязиЭтапы        = КлючиСвязиЭтапов[ПобочныйВыпуск.Этап];
				НоваяСтрока.КлючСвязиПолуфабрикат = ДанныеПоНоменклатуре.КлючСвязиПолуфабрикат;
				
				НоваяСтрока.ПроизводитсяВПроцессе = Истина;
				НоваяСтрока.КлючСвязиМатериалыИУслуги = СтрокаМатериалы.КлючСвязи;
				
				ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
					НоваяСтрока, ДанныеПоНоменклатуре, Перечисления.ТипыСтоимостиВыходныхИзделий.Фиксированная);
				
				НоваяСтрока.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПолуфабрикатыПроизводимыеВПроцессе;
				НоваяСтрока.Упаковка          = СтрокаМатериалы.Упаковка;
				НоваяСтрока.Количество        = КоличествоИспользовано;
				
				Если СтрокаМатериалы.ЗаказатьНаСклад Тогда
					НоваяСтрока.Склад = СтрокаМатериалы.Склад;
				Иначе
					НоваяСтрока.Подразделение = СтрокаМатериалы.Подразделение;
				КонецЕсли;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				ВыпускИспользованныйНаСледующихЭтапах.Вставить(ПобочныйВыпуск, КоличествоОстаток);
				
				КоличествоПотребность = КоличествоПотребность - НоваяСтрока.Количество;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Побочные выпуски
		Для Каждого ВозвратныеОтходыЭлемент Из СтруктураДанных.ВозвратныеОтходы Цикл
			
			КоличествоОстаток = ВыпускИспользованныйНаСледующихЭтапах.Получить(ВозвратныеОтходыЭлемент);
			
			Если КоличествоОстаток <> Неопределено 
				И КоличествоОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.ВозвратныеОтходы.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВозвратныеОтходыЭлемент);
			
			НоваяСтрока.КлючСвязи             = Новый УникальныйИдентификатор;
			НоваяСтрока.КлючСвязиПродукция    = ДанныеПоНоменклатуре.КлючСвязиПродукция;
			НоваяСтрока.КлючСвязиЭтапы        = КлючиСвязиЭтапов[ВозвратныеОтходыЭлемент.Этап];
			НоваяСтрока.КлючСвязиПолуфабрикат = ДанныеПоНоменклатуре.КлючСвязиПолуфабрикат;
			
			Если ВыходныеИзделияЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				
				НоваяСтрока.Подразделение = ВозвратныеОтходыЭлемент.ПодразделениеЭтапа;
				
			Иначе
				
				Если ЗначениеЗаполнено(ДанныеПоНоменклатуре.Склад) Тогда
					НоваяСтрока.Склад = ДанныеПоНоменклатуре.Склад;
				Иначе
					НоваяСтрока.Склад = ВозвратныеОтходыЭлемент.СкладМатериалов;
				КонецЕсли;
				
			КонецЕсли;
			
			ПланированиеПроизводстваКлиентСервер.ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
				НоваяСтрока, ДанныеПоНоменклатуре, Перечисления.ТипыСтоимостиВыходныхИзделий.Фиксированная);
			
			Если КоличествоОстаток <> Неопределено Тогда
				
				НоваяСтрока.Количество = КоличествоОстаток;
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Трудозатраты
		Для Каждого ТрудозатратыЭлемент Из СтруктураДанных.Трудозатраты Цикл
			
			НоваяСтрока = Объект.Трудозатраты.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТрудозатратыЭлемент);
			
			НоваяСтрока.КлючСвязиПродукция = ДанныеПоНоменклатуре.КлючСвязиПродукция;
			НоваяСтрока.КлючСвязиЭтапы     = КлючиСвязиЭтапов[ТрудозатратыЭлемент.Этап];
			НоваяСтрока.КлючСвязи          = Новый УникальныйИдентификатор;
			
		КонецЦикла;
		
		// ВидыРабочихЦентров
		Для Каждого ВидыРабочихЦентровЭлемент Из СтруктураДанных.ВидыРабочихЦентров Цикл
			
			НоваяСтрока = Объект.ВидыРабочихЦентров.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВидыРабочихЦентровЭлемент);
			
			НоваяСтрока.Использовать = Истина;
			
			НоваяСтрока.КлючСвязи          = Новый УникальныйИдентификатор;
			НоваяСтрока.КлючСвязиПродукция = ДанныеПоНоменклатуре.КлючСвязиПродукция;
			НоваяСтрока.КлючСвязиЭтапы     = КлючиСвязиЭтапов[ВидыРабочихЦентровЭлемент.Этап];
			
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ВидРабочегоЦентра");
		СтруктураОтбора.Вставить("КлючСвязиЭтапы");
		
		// АльтернативныеВидыРабочихЦентров
		Для Каждого АльтернативныеВидыРабочихЦентровЭлемент Из СтруктураДанных.АльтернативныеВидыРабочихЦентров Цикл
			
			НоваяСтрока = Объект.АльтернативныеВидыРабочихЦентров.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, АльтернативныеВидыРабочихЦентровЭлемент);
			
			НоваяСтрока.КлючСвязи          = Новый УникальныйИдентификатор;
			НоваяСтрока.КлючСвязиПродукция = ДанныеПоНоменклатуре.КлючСвязиПродукция;
			НоваяСтрока.КлючСвязиЭтапы     = КлючиСвязиЭтапов[АльтернативныеВидыРабочихЦентровЭлемент.Этап];
			
			СтруктураОтбора.ВидРабочегоЦентра = АльтернативныеВидыРабочихЦентровЭлемент.ОсновнойВидРабочегоЦентра;
			СтруктураОтбора.КлючСвязиЭтапы    = НоваяСтрока.КлючСвязиЭтапы;
			
			ДанныеВидаРЦ = Объект.ВидыРабочихЦентров.НайтиСтроки(СтруктураОтбора)[0];
			
			НоваяСтрока.КлючСвязиВидыРабочихЦентров = ДанныеВидаРЦ.КлючСвязи;
			
		КонецЦикла;
		
	КонецЦикла;

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаПроизводство));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий, ДобавленныеСтрокиМатериалов);
	
	Возврат МатериалыПроизводимыеВПроцессеПоСпецификации;
	
КонецФункции

Процедура ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, Уровень, КоличествоУровней)
	
	Для Каждого Строка из НайденныеСтроки Цикл
		
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("КлючСвязиЭтапы", Строка.КлючСвязи));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			КоличествоУровней = Макс(Уровень, КоличествоУровней);
			
			Если Строка.НомерЭтапа = 1 Тогда
				Строка.Уровень = КоличествоУровней;
			Иначе
				Строка.Уровень = Уровень;
			КонецЕсли;
			
		Иначе
			Строка.Уровень = Уровень;
			ЗаполнитьУровеньЭтапов(ТаблицаЭтапов, НайденныеСтроки, Уровень + 1, КоличествоУровней);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗанятость(ПараметрыРазмещения, ДанныеОграничения, ДанныеОЗанятости, Занятость, ГрафикЭтапаЗанятость = Неопределено)

	Период      = ДанныеОграничения.Период;
	Исполнитель = ДанныеОграничения.ВидРабочегоЦентра;
	
	ДоступностьОстаток      = ДанныеОграничения.Доступность;
	МаксимальнаяДоступность = ДанныеОграничения.МаксимальнаяДоступность;
	
	ДоступноеВремяРаботы = ПараметрыРазмещения.ДоступноеВремяРаботы;
	
	ПланироватьРаботуВидовРабочихЦентров = ГрафикЭтапаЗанятость <> Неопределено;
	
	Если Занятость[Исполнитель] = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеОграничения.УчитыватьДоступностьПоГрафикуРаботы Тогда
	
		Если ТипЗнч(ДанныеОЗанятости) <> Тип("Соответствие") Тогда
			
			ДанныеОЗанятости = Новый Соответствие;
			
		КонецЕсли;
		
		Если ДанныеОЗанятости[Исполнитель] = Неопределено Тогда
			
			ДанныеОЗанятости.Вставить(Исполнитель, Новый Соответствие);
			
		КонецЕсли;
		
		Если ДанныеОЗанятости[Исполнитель][Период] = Неопределено Тогда
			
			ДанныеОЗанятости[Исполнитель].Вставить(Период, 0);
			
		КонецЕсли;
		
		ДоступностьОстаток = ДоступностьОстаток - ПолучитьЗанятость(ДанныеОЗанятости, Исполнитель, Период);
		
	КонецЕсли;
	
	Для Индекс = 0 по Мин(Занятость[Исполнитель].ВГраница(), ДоступноеВремяРаботы[Исполнитель].ВГраница()) Цикл
		
		ТекущаяЗанятость = Мин(ДоступностьОстаток, МаксимальнаяДоступность, Занятость[Исполнитель][Индекс]);
		
		Если ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ГрафикЭтапаЗанятостьНоваяСтрока = ГрафикЭтапаЗанятость.Добавить();
			ГрафикЭтапаЗанятостьНоваяСтрока.ВидРабочегоЦентра = Исполнитель;
			ГрафикЭтапаЗанятостьНоваяСтрока.ДатаИнтервала = Период;
			ГрафикЭтапаЗанятостьНоваяСтрока.Количество = ТекущаяЗанятость;
			
		КонецЕсли;
		
		Если ДанныеОграничения.УчитыватьДоступностьПоГрафикуРаботы Тогда
			
			ДанныеОЗанятости[Исполнитель][Период] = ДанныеОЗанятости[Исполнитель][Период] + ТекущаяЗанятость;
			
		КонецЕсли;
		
		ДоступноеВремяРаботы[Исполнитель][Индекс] = ДоступноеВремяРаботы[Исполнитель][Индекс] - ТекущаяЗанятость;
		Занятость[Исполнитель][Индекс] = Занятость[Исполнитель][Индекс] - ТекущаяЗанятость;
		ДоступностьОстаток = ДоступностьОстаток - ТекущаяЗанятость;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗанятость(ДанныеОЗанятости, Исполнитель, Период)
	
	Если ТипЗнч(ДанныеОЗанятости) <> Тип("Соответствие") Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ДанныеОЗанятости[Исполнитель] = Неопределено Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ДанныеОЗанятости[Исполнитель][Период] = Неопределено Тогда
		
		Возврат 0;
		
	Иначе
		
		Возврат ДанныеОЗанятости[Исполнитель][Период];
		
	КонецЕсли;
	
КонецФункции

Функция РассчитатьЗанятость(ПараметрыРазмещения, ВозможноРазместитьЭтапов, КоличествоЭтапов)
	
	Занятость = Новый Соответствие;
	
	Если КоличествоЭтапов = 0 Тогда
		
		Возврат Занятость;
		
	КонецЕсли;
	
	ВремяРаботы    = ПараметрыРазмещения.ВремяРаботы;
	ПараметрыЭтапа = ПараметрыРазмещения.ПараметрыЭтапа;
	
	КоличествоЭтаповОстаток = КоличествоЭтапов;
	ОдновременноПроизводимое = ?(ПараметрыЭтапа.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий <> 0, 
									ПараметрыЭтапа.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий, 1);
	
	Граница = ВозможноРазместитьЭтапов.Расшифровка.ВГраница();
	
	Для Индекс = 0 по Граница Цикл
		
		Количество = Мин(Цел(ВозможноРазместитьЭтапов.Расшифровка[Индекс].Значение), КоличествоЭтаповОстаток);
		
		Если ОдновременноПроизводимое > 0 Тогда
			
			Если КоличествоЭтаповОстаток = Количество
				И Количество % ОдновременноПроизводимое > 0 Тогда
				
				КоличествоПартий = Цел(Количество / ОдновременноПроизводимое) + 1;
				
			Иначе
				
				КоличествоПартий = Цел(Количество / ОдновременноПроизводимое);
				
			КонецЕсли;
			
		Иначе
			
			КоличествоПартий = Количество;
			
		КонецЕсли;
		
		Для каждого ИсполнительВремяРаботы из ВремяРаботы Цикл
			
			Если Занятость[ИсполнительВремяРаботы.Ключ] = Неопределено Тогда
				
				Занятость.Вставить(ИсполнительВремяРаботы.Ключ, Новый Массив);
				
			КонецЕсли;
			
			Если Индекс <= Занятость[ИсполнительВремяРаботы.Ключ].ВГраница() Тогда
				
				Занятость[ИсполнительВремяРаботы.Ключ][Индекс] = Занятость[ИсполнительВремяРаботы.Ключ][Индекс]
					+ КоличествоПартий * ИсполнительВремяРаботы.Значение;
				
			Иначе
				
				Занятость[ИсполнительВремяРаботы.Ключ].Добавить(
					КоличествоПартий * ИсполнительВремяРаботы.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоЭтаповОстаток = КоличествоЭтаповОстаток - КоличествоПартий * ОдновременноПроизводимое;
		
		Если КоличествоЭтаповОстаток > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Занятость;
	
КонецФункции

Функция ИзменитьРазмещениеВыпуска(РазмещениеВыпуска)
	
	Если РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
		
		Возврат Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
		
	Иначе
		
		Возврат Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию;
		
	КонецЕсли;
	
КонецФункции

Функция РазмещениеКОкончанию(Параметры)
	
	Возврат (Параметры.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию);
	
КонецФункции

Процедура ЗаполнитьГраницыЗависимыхЭтапов(ЗависимыеЭтапы, ГрафикВыпускаПродукции, КлючСвязиЭтап, НижняяГраницаЭтапа, ВерхняяГраницаЭтапа)
	
	Если НижняяГраницаЭтапа = Неопределено
		ИЛИ ВерхняяГраницаЭтапа = Неопределено Тогда
		
		Для каждого ГрафикЭтапа Из ГрафикВыпускаПродукции.НайтиСтроки(Новый Структура("КлючСвязиЭтап", КлючСвязиЭтап)) Цикл
			
			НижняяГраницаЭтапа = ?(НижняяГраницаЭтапа = Неопределено, ГрафикЭтапа.НачалоПредварительногоБуфера, Мин(ГрафикЭтапа.НачалоПредварительногоБуфера, НижняяГраницаЭтапа));
			ВерхняяГраницаЭтапа = ?(ВерхняяГраницаЭтапа = Неопределено, ГрафикЭтапа.ОкончаниеЗавершающегоБуфера, Макс(ГрафикЭтапа.ОкончаниеЗавершающегоБуфера, ВерхняяГраницаЭтапа));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НижняяГраницаЭтапа <> Неопределено
		И ВерхняяГраницаЭтапа <> Неопределено Тогда
		
		Для каждого ЗависимыйЭтап Из ЗависимыеЭтапы Цикл
			
			Если ЗависимыйЭтап.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КОкончанию Тогда
				ЗависимыйЭтап.ЗначениеГраницыЭтапа = НижняяГраницаЭтапа - 1;
			Иначе
				ЗависимыйЭтап.ЗначениеГраницыЭтапа = ВерхняяГраницаЭтапа + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеИсполнителяЭтапаУББВ(Знач Этап)
	
	ДанныеИсполнителя = Новый Структура("Исполнитель, ГрафикРаботы");
	
	Если Этап.ПроизводствоНаСтороне И ЗначениеЗаполнено(Этап.ГрафикРаботыПартнера) Тогда
		
		ДанныеИсполнителя.Исполнитель = Этап.Подразделение;
		ДанныеИсполнителя.ГрафикРаботы = Этап.ГрафикРаботыПартнера;
		
	Иначе
		
		ДанныеИсполнителя.Исполнитель = Этап.Подразделение;
		ДанныеИсполнителя.ГрафикРаботы = Этап.ГрафикРаботы;
		
	КонецЕсли;
	
	Возврат ДанныеИсполнителя;

КонецФункции

Процедура ДобавитьОшибкуРазмещенияЭтапа(Ошибки, Знач КлючСвязиРазмещаемыйЭтап, Знач ПараметрыЭтапа)
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("КлючСвязиЭтап", КлючСвязиРазмещаемыйЭтап);
	
	Если ПараметрыЭтапа.ПланироватьРаботуВидовРабочихЦентров Тогда
		
		УчитыватьДоступностьПоГрафикуРаботы = Ложь;
		
		Для каждого ВидРабочегоЦентра из ПараметрыЭтапа.ВидыРабочихЦентров Цикл
			
			Если ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы Тогда
				
				УчитыватьДоступностьПоГрафикуРаботы = Истина;
				
			КонецЕсли;
			
		КонеццИкла;
		
		Если УчитыватьДоступностьПоГрафикуРаботы Тогда
			
			Ошибка.Вставить("ВидыРабочихЦентров", ПараметрыЭтапа.ВидыРабочихЦентров);
			
		Иначе
			
			Ошибка.Вставить("ВидыРабочихЦентров", ПараметрыЭтапа.Подразделение);
			
		КонецЕсли;
		
	Иначе
		
		Ошибка.Вставить("ВидыРабочихЦентров", ПараметрыЭтапа.Подразделение);
		
	КонецЕсли;
	
	Ошибки.Добавить(Ошибка);

КонецПроцедуры

#Область Дроби

Функция Дробь(Знач Числитель, Знач Знаменатель, Сократить = Истина)
	
	Результат = Новый Структура("Числитель, Знаменатель, Значение");
	
	Результат.Числитель   = Числитель;
	Результат.Знаменатель = Знаменатель;
	Результат.Значение    = Числитель / Знаменатель;
	
	Если Сократить Тогда
		
		НаибольшийОбщийДелитель = НаибольшийОбщийДелитель(Числитель, Знаменатель);
		
		Результат.Числитель   = Результат.Числитель / НаибольшийОбщийДелитель;
		Результат.Знаменатель = Результат.Знаменатель / НаибольшийОбщийДелитель;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МинДробь(Дробь1, Дробь2)
	
	Если Дробь1.Числитель * Дробь2.Знаменатель < Дробь2.Числитель * Дробь1.Знаменатель Тогда
		
		Возврат Дробь(Дробь1.Числитель, Дробь1.Знаменатель);
		
	Иначе
		
		Возврат Дробь(Дробь2.Числитель, Дробь2.Знаменатель);
		
	КонецЕсли;
	
КонецФункции

Функция СуммаДробей(Дробь1, Дробь2)
	
	Возврат Дробь(Дробь1.Числитель * Дробь2.Знаменатель + Дробь2.Числитель * Дробь1.Знаменатель, Дробь1.Знаменатель * Дробь2.Знаменатель);
	
КонецФункции

Функция НаибольшийОбщийДелитель(Знач Числитель, Знач Знаменатель)
	
	Если Числитель = 0 ИЛИ Знаменатель = 0 Тогда
		
		Возврат 1;
		
	КонецЕсли;

	Пока Знаменатель <> 0 Цикл
		
		ОстатокОтДеления = Числитель % Знаменатель;
		Числитель = Знаменатель;
		Знаменатель = ОстатокОтДеления;
		
	КонецЦикла;
	
	Возврат Числитель;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА
