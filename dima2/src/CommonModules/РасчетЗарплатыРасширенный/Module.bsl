
#Область ПрограммныйИнтерфейс

// Регистрирует значения оперативных показателей расчета зарплаты.
//
// Параметры:
//	Движения
//	Организация
//	ОперативныеПоказатели - таблица значений с колонками.
//		Дата
//		Сотрудник - СправочникСсылка.Сотрудники
//		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица (необязательная колонка).
//		Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//		Значение - число
//	ЗаписыватьДвижения - булево, если Истина, движения будут записаны.
//
Процедура ЗаписатьЗначенияОперативныхПоказателей(Движения, Организация, ОперативныеПоказатели, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если ОперативныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем необходимость выявления физического лица.
	ЗаполнятьФизическоеЛицо = Ложь;
	Если ОперативныеПоказатели.Колонки.Найти("ФизическоеЛицо") = Неопределено Тогда
		ЗаполнятьФизическоеЛицо = Истина;
	КонецЕсли;
	
	Если ЗаполнятьФизическоеЛицо Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ОперативныеПоказатели, "Сотрудник", Истина);
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	КонецЕсли;
	
	Для Каждого Строка Из ОперативныеПоказатели Цикл
		Запись = Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		Запись.Период = Строка.Дата;
		Запись.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		Если ЗаполнятьФизическоеЛицо Тогда
			Запись.ФизическоеЛицо = ФизическиеЛицаСотрудников[Строка.Сотрудник];
		КонецЕсли;
		Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать Тогда
			Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записать();
			Движения.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура регистрирует в системе данные о выполненных сотрудниками работах.
//
// Параметры:
//	- Движения
//	- Отказ
//	- ВыполненныеРаботы - таблица значений с колонками:
//		- Период - дата выполнения работ,
//		- Сотрудник
//		- ВидРабот - вид работ сотрудников.
//		- Сумма - число, сумма оплаты за выполненные работы.
//
Процедура ЗарегистрироватьВыполненныеРаботыСотрудников(Движения, Отказ, ВыполненныеРаботы) Экспорт
	
	Если ВыполненныеРаботы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ВыполненныеРаботы Цикл
		ЗаполнитьЗначенияСвойств(Движения.ВыполненныеРаботыСотрудников.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	Движения.ВыполненныеРаботыСотрудников.Записывать = Истина;
	
КонецПроцедуры

// Процедура регистрирует в системе данные о сдельном заработке сотрудников.
//
// Параметры:
//		Движения
//		Организация
//		СдельныйЗаработок - таблица значений с колонками.
//			Дата
//			Сотрудник - СправочникСсылка.Сотрудники
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица (необязательная колонка).
//			Значение - число
//
Процедура ЗарегистрироватьСдельныйЗаработок(Движения, Организация, СдельныйЗаработок) Экспорт
	
	НастройкиРасчетаЗарплаты = НастройкиРасчетаЗарплаты();
	Если Не НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	
	СдельныйЗаработок.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	СдельныйЗаработок.ЗаполнитьЗначения(ПоказательСдельногоЗаработка, "Показатель");
	
	ЗаписатьЗначенияОперативныхПоказателей(Движения, Организация, СдельныйЗаработок);
	
КонецПроцедуры

// Добавляет новый показатель расчета зарплаты, 
// используемый для ввода оперативных данных.
//
// Параметры:
//	- Идентификатор - строковый идентификатор показателя, 
//		используется в формуле начислений, 
//		а также для идентификации показателя в исходном коде.
//		Идентификатор, используемый в формуле начислений может изменятся пользователем, 
//		но из кода показатель всегда будет доступен при помощи 
//		метода РасчетЗарплатыРасширенный.ОперативныйПоказательПоИдентификатору.
//	- Представление - пользовательское представление показателя.
//	- КраткоеПредставление - необязательный, пользовательское представление, 
//		используемое для заголовков колонок в документах ввода.
//	- Валюта - необязательный, валюта показателя, по умолчанию - валюта учета.
//	- Точность - необязательный, точность значения показателя по умолчанию - целое число.
//
// Возвращаемое значение - ссылка на созданный показатель.
//
Функция СоздатьОперативныйПоказатель(Идентификатор, Представление, КраткоеПредставление = Неопределено, Валюта = Неопределено, Точность = Неопределено) Экспорт
	
	Возврат Справочники.ПоказателиРасчетаЗарплаты.СоздатьОперативныйПоказатель(
				Идентификатор, Представление, КраткоеПредставление, Валюта, Точность);
	
КонецФункции

// Получает оперативный показатель по служебному идентификатору.
//
// Параметры:
//	- Идентификатор - строка, служебный идентификатор показателя, 
//			например, используемый при создании показателя 
//			методом СоздатьОперативныйПоказатель.
//
// Возвращаемое значение - найденный показатель, 
//		пустая ссылка - в случае, если показателя с таким идентификатором не существует.
//
Функция ОперативныйПоказательПоИдентификатору(Идентификатор) Экспорт
	Возврат РасчетЗарплатыРасширенный.ПоказательПоИдентификатору(Идентификатор);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Регистрация результатов расчета.

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			ДатаНачала - дата, начало начисления.
//			ДатаОкончания - дата, окончание начисления.
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//			НормаДней
//			НормаЧасов
//			ОплаченоДней
//			ОплаченоЧасов
//			ГрафикРаботы - ссылка на график, примененный при расчете строки.
//			ГрафикРаботыНорма - ссылка на график, используемый для расчета нормы времени при неполном рабочем дне.
//			ВидУчетаВремени - ссылка на вид учета времени, примененный при расчете строки
//			ВремяВЧасах
//			ПериодРегистрацииВремени
//			ИдентификаторСтроки.
//		Показатели - таблица значений с колонками (необязательный).
//			Показатель - ссылка на показатель расчета зарплаты.
//			Значение
//			ИдентификаторСтроки - идентификатор строки таблицы с начислениями.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура СформироватьДвиженияНачислений(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Показатели = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	СтрокиЗаполнениеФизическихЛиц = Новый Массив;
	СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
	СтрокиЗаполнениеГрафикаРаботы = Новый Массив;
	МассивНачислений = Новый Массив;
	Для Каждого Строка Из Начисления Цикл
		Если Не ЗначениеЗаполнено(Строка.ФизическоеЛицо) Тогда
			СтрокиЗаполнениеФизическихЛиц.Добавить(Строка);
			СотрудникиЗаполнениеФизическихЛиц.Добавить(Строка.Сотрудник);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.ГрафикРаботы) Тогда
			СтрокиЗаполнениеГрафикаРаботы.Добавить(Строка);
		КонецЕсли;
		МассивНачислений.Добавить(Строка.Начисление);
	КонецЦикла;
	
	ЗаполнитьФизическихЛицПоСотрудникам(СтрокиЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
	
	Если СтрокиЗаполнениеГрафикаРаботы.Количество() > 0 Тогда
		ЗарплатаКадрыРасширенный.СкорректироватьДатыНачисленийБезПериодаДействия(СтрокиЗаполнениеГрафикаРаботы, ПериодРегистрации);
	КонецЕсли;
	
	// Получаем реквизиты видов расчета.
	ИменаРеквизитов = 
		"ИспользованиеПериода,
		|ПериодРасчетаБазовыхНачислений,
		|КоличествоМесяцевБазовогоПериода,
		|СдвигБазовогоПериода";
	РеквизитыНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНачислений, ИменаРеквизитов);
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	Для Каждого Строка Из Начисления Цикл
		НоваяСтрока = Движения.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ГоловнаяОрганизация = ГоловнаяОрганизация;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ВидРасчета = Строка.Начисление;
		НоваяСтрока.ДокументОснование = Строка.ДокументОснование;
		НоваяСтрока.Результат = Строка.Сумма;
		НоваяСтрока.РезультатВТомЧислеЗаСчетФБ = 0;
		// Определяем месяц (период действия).
		Месяц = Строка.ПериодДействия;
		Если Не ЗначениеЗаполнено(Месяц) Тогда
			Месяц = НачалоМесяца(Строка.ДатаНачала);
		КонецЕсли;
		НачалоМесяца = НачалоМесяца(Месяц);
		КонецМесяца = КонецМесяца(Месяц);
		НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
		НоваяСтрока.БазовыйПериодНачало = НоваяСтрока.ПериодДействияНачало;
		НоваяСтрока.БазовыйПериодКонец = НоваяСтрока.ПериодДействияКонец;
		Если РеквизитыНачислений[Строка.Начисление].ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			НоваяСтрока.ПериодДействияНачало = НачалоМесяца;
			НоваяСтрока.ПериодДействияКонец = КонецМесяца;
		КонецЕсли;
		Если Строка.Сторно Тогда
			// Для сторно-записей не выполняем корректировку базового периода.
			Продолжить;
		КонецЕсли;
		БазовыйПериодПереопределен = Ложь;
		// - Если базовый период переопределяется.
		Если ЕстьПолеВСтрокеКоллекции(Строка, "НачалоБазовогоПериода") И ЗначениеЗаполнено(Строка.НачалоБазовогоПериода) 
			И ЕстьПолеВСтрокеКоллекции(Строка, "ОкончаниеБазовогоПериода") И ЗначениеЗаполнено(Строка.ОкончаниеБазовогоПериода) Тогда
			БазовыйПериодПереопределен = Истина;
			НоваяСтрока.БазовыйПериодНачало = Строка.НачалоБазовогоПериода;
			НоваяСтрока.БазовыйПериодКонец = Строка.ОкончаниеБазовогоПериода;
		КонецЕсли;
		// - если не переопределяется
		Если Не БазовыйПериодПереопределен Тогда
			РеквизитыНачисления = РеквизитыНачислений[Строка.Начисление];
			Если РеквизитыНачисления.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
				БазовыйПериод = РасчетЗарплатыРасширенныйКлиентСервер.БазовыйПериодНачисления(
					Месяц, РеквизитыНачисления.ПериодРасчетаБазовыхНачислений, РеквизитыНачисления.КоличествоМесяцевБазовогоПериода, РеквизитыНачисления.СдвигБазовогоПериода);
				НоваяСтрока.БазовыйПериодНачало = БазовыйПериод.ДатаНачала;
				НоваяСтрока.БазовыйПериодКонец = БазовыйПериод.ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Начисления.Записывать = Истина;
	
	Если Показатели <> Неопределено Тогда
		// Получим значение регистратора.
		Регистратор = Движения.ЗначенияПоказателейНачислений.Отбор.Регистратор.Значение;
		Для Каждого Строка Из Показатели Цикл
			НоваяСтрока = Движения.ЗначенияПоказателейНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.РегистраторИзмерение = Регистратор;
		КонецЦикла;
		Движения.ЗначенияПоказателейНачислений.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.Начисления.Записать();
		Движения.Начисления.Записывать = Ложь;
		Если Показатели <> Неопределено Тогда
			Движения.ЗначенияПоказателейНачислений.Записать();
			Движения.ЗначенияПоказателейНачислений.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//
//		Удержания - таблица значений с колонками (необязательный)
//			ФизическоеЛицо.
//			Удержание - ссылка на план видов расчета.
//			ДокументОснование - (необязательный) ДокументСсылка.ИсполнительныйЛист
//			Получатель - (необязательный) СправочникСсылка.Контрагенты
//			ПлатежныйАгент - (необязательный) СправочникСсылка.Контрагенты
//			ДатаНачала
//			ДатаОкончания
//			Сумма
//			СуммаКорректировкиВыплаты.
//		Показатели - таблица значений с колонками (необязательный).
//			Показатель - ссылка на показатель расчета зарплаты.
//			Значение
//			ИдентификаторСтроки - идентификатор строки таблицы с удержаниями.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияУдержаний(Движения, Отказ, Организация, ПериодРегистрации, Удержания, Показатели = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	НеобходимостьРасчетаБазы = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "Удержание", Истина), "ТребуетсяРасчетБазы");
	
	Для Каждого Строка Из Удержания Цикл
		НоваяСтрока = Движения.Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		НоваяСтрока.ВидРасчета = Строка.Удержание;
		НоваяСтрока.Результат = Строка.Сумма;
		НоваяСтрока.ПериодДействияНачало = НачалоМесяца(ПериодРегистрации);
		НоваяСтрока.ПериодДействияКонец = КонецМесяца(ПериодРегистрации);
		Если НеобходимостьРасчетаБазы[Строка.Удержание] = Истина Тогда
			НоваяСтрока.БазовыйПериодНачало = Строка.ДатаНачала;
			НоваяСтрока.БазовыйПериодКонец = Строка.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	Движения.Удержания.Записывать = Истина;
	
	Если Показатели <> Неопределено Тогда
		// Получим значение регистратора.
		Регистратор = Движения.ЗначенияПоказателейУдержаний.Отбор.Регистратор.Значение;
		
		Для Каждого Строка Из Показатели Цикл
			НоваяСтрока = Движения.ЗначенияПоказателейУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.РегистраторИзмерение = Регистратор;
		КонецЦикла;
		Движения.ЗначенияПоказателейУдержаний.Записывать = Истина;
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.Удержания.Записать();
		Движения.Удержания.Записывать = Ложь;
		Если Показатели <> Неопределено Тогда
			Движения.ЗначенияПоказателейУдержаний.Записать();
			Движения.ЗначенияПоказателейУдержаний.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками (необязательный).
//			Сотрудник
//			Договор
//
//		Допустимо присутствие других колонок в передаваемой таблице значений.
//
Процедура СформироватьДвиженияНачисленийПоДоговорам(Движения, Отказ, Организация, ПериодРегистрации, Начисления) Экспорт
	
	Для Каждого Строка Из Начисления Цикл
		
		Если (ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ДоговорАвторскогоЗаказа") 
			Или ТипЗнч(Строка.ДокументОснование) = Тип("ДокументСсылка.ДоговорРаботыУслуги"))
			И Строка.ДокументОснование.СпособОплаты = Перечисления.СпособыОплатыПоДоговоруГПХ.ВКонцеСрокаСАвансовымиПлатежами Тогда
			
			НоваяСтрокаНачисленияПоДоговорамГПХ = Движения.НачисленияПоДоговорамГПХ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНачисленияПоДоговорамГПХ, Строка);
			НоваяСтрокаНачисленияПоДоговорамГПХ.Период = ПериодРегистрации;
			НоваяСтрокаНачисленияПоДоговорамГПХ.Организация = Организация;
			
		Иначе
			
			НоваяСтрока = Движения.ОплаченныеДоговоры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ДоговорАкт = Строка.ДокументОснование;
			НоваяСтрока.МесяцНачисления = ПериодРегистрации;
			НоваяСтрока.Организация = Организация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ОплаченныеДоговоры.Записывать = Истина;
	Движения.НачисленияПоДоговорамГПХ.Записывать = Истина;
		
КонецПроцедуры

// Сохранение результатов распределения по территориям, условиям труда.
//
Процедура СформироватьДвиженияРаспределенияПоТерриториямУсловиямТруда(Движения, Отказ, ДокументСсылка, ТаблицаРаспределения) Экспорт
	
	Для Каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
		НоваяСтрока = Движения.РаспределениеПоТерриториямУсловиямТруда.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		НоваяСтрока.РегистраторИзмерение = ДокументСсылка;
		Движения.РаспределениеПоТерриториямУсловиямТруда.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений с колонками
//	ФизическоеЛицо.
//	Сотрудник
//	Подразделение
//	Сумма
//
// Параметры:
//	ФизическиеЛица
//	МесяцНачисления
//
Функция БазаУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные			= "ТарифнаяСтавка,Подразделение,ТерриторияВыполненияРаботВОрганизации,ДатаПриема,ДатаУвольнения,ВАрхиве";
	ПараметрыПолученияСотрудниковОрганизаций.РаботникиПоДоговорамГПХ = Истина;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Сумма
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	НЕ КадровыеДанныеСотрудников.ВАрхиве
	|	И НЕ КадровыеДанныеСотрудников.ТарифнаяСтавка ЕСТЬ NULL 
	|	И (КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, МЕСЯЦ) >= &МесяцНачисления)
	|	И КадровыеДанныеСотрудников.ДатаПриема < КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Плановые начисления и удержания.

// Заполняет движения плановыми начислениями
//		ПлановыеНачисления
//		ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.
//
// Параметры:
//	РегистраторОбъект - документ объект.
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	СтруктураДанных - Структура, содержащая ключи:
//		* ДанныеОПлановыхНачислениях (необязательный) - таблица значений с полями:
//			ДатаСобытия
//			ДействуетДо (не обязательно)
//			ИспользуетсяПоОкончании (не обязательно).
//			Сотрудник
//			Начисление
//			Используется - булево
//	ВАЖНО. Таблица значений должна содержать только события о начале использования
//			начисления или окончании использования начисления. В том числе 
//			срочные события (имеющие дату окончания).
//			Нельзя передавать события вида "продолжение использования начисления".
//
//		* ЗначенияПоказателей (необязательный) - таблица значений с полями:
//			ДатаСобытия
//			ДействуетДо (не обязательно).
//			Организация
//			ФизическоеЛицо
//			Сотрудник 
//			Показатель
//			Значение
//
//		* ПрименениеДополнительныхПоказателей (необязательный) - таблица значений с полями:
//			ДатаСобытия
//			ДействуетДо (не обязательно).
//			Организация
//			ФизическоеЛицо
//			Сотрудник 
//			Показатель
//			Применение
//	ОтдельнаяРегистрацияПлановогоФОТ - Булево
// 		
Процедура СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ОтдельнаяРегистрацияПлановогоФОТ = Ложь, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	РасчетЗарплатыБазовый.СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ОтдельнаяРегистрацияПлановогоФОТ, Ложь);
	
	ДанныеОПлановыхНачислениях = Неопределено;
	Если СтруктураДанных.Свойство("ДанныеОПлановыхНачислениях") Тогда
		ДанныеОПлановыхНачислениях = СтруктураДанных.ДанныеОПлановыхНачислениях;
	КонецЕсли;
	
	ЗначенияПоказателей = Неопределено;
	Если СтруктураДанных.Свойство("ЗначенияПоказателей") Тогда
		ЗначенияПоказателей = СтруктураДанных.ЗначенияПоказателей;
	КонецЕсли;
	
	ПрименениеДополнительныхПоказателей = Неопределено;
	Если СтруктураДанных.Свойство("ПрименениеДополнительныхПоказателей") Тогда
		ПрименениеДополнительныхПоказателей = СтруктураДанных.ПрименениеДополнительныхПоказателей;
	КонецЕсли;
	
	Если ДанныеОПлановыхНачислениях <> Неопределено Тогда
		
		ИспользуютсяВозвратныеСобытия = ДанныеОПлановыхНачислениях.Колонки.Найти("ДействуетДо") <> Неопределено;
		
		// Получение состава действующих начислений.
		
		// Получим действующие начисления, чтобы записать возвратные движения,
		// Признак Используется начисления должен соответствовать значению, действующему на дату текущего события.
		// Однако признак может быть и в явном виде указан в таблице, в этом случае используем его значение.
		ИспользованиеПоОкончанииОпределено = ДанныеОПлановыхНачислениях.Колонки.Найти("ИспользуетсяПоОкончании") <> Неопределено;
		
		Если ОтдельнаяРегистрацияПлановогоФОТ Тогда
			
			Если ДанныеОПлановыхНачислениях.Колонки.Найти("ХарактерНачисления") = Неопределено Тогда
				ДанныеОПлановыхНачислениях.Колонки.Добавить("ХарактерНачисления",  Новый ОписаниеТипов("ПеречислениеСсылка.ХарактерПлановогоНачисления"));
			КонецЕсли;
			
			СохранятьСрокДействияИндивидуальныхНачислений = Истина;
			
		Иначе
			СохранятьСрокДействияИндивидуальныхНачислений = Ложь;
		КонецЕсли;
		
		ВремяРегистрацииДокумента = Неопределено;
		Движения.ПлановыеНачисления.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
		
		Если ВремяРегистрацииДокумента = Неопределено Тогда 
			МассивДат = ДанныеОПлановыхНачислениях.ВыгрузитьКолонку("ДатаСобытия");
			ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(РегистраторОбъект.Ссылка, МассивДат);
		КонецЕсли;
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ИзмеренияДаты.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
		
		Для Каждого СтрокаДвижений Из ДанныеОПлановыхНачислениях Цикл 
			НоваяСтрока = ИзмеренияДаты.Добавить();
			НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
			НоваяСтрока.Начисление = СтрокаДвижений.Начисление;
			НоваяСтрока.Период = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
		КонецЦикла;
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", РегистраторОбъект.Ссылка);
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияФОТ.Отборы, "Основание", "<>", РегистраторОбъект.Ссылка);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыйФОТ",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроенияФОТ);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПлановыеНачисления.ПериодЗаписи,
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Начисление,
			|	ПлановыеНачисления.ДокументОснование,
			|	ВЫБОР
			|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
			|			ТОГДА ПлановыеНачисления.Размер
			|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
			|	КОНЕЦ КАК Размер,
			|	ПлановыеНачисления.Используется
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
			|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
			|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
			|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование";
		
		Если СохранятьСрокДействияИндивидуальныхНачислений Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисления.Используется",
				"ПлановыеНачисления.Используется,
				|	ЕСТЬNULL(ПлановыеНачисленияВозвратные.ДействуетДо, ДАТАВРЕМЯ(1,1,1)) КАК ПериодВозвратногоСобытия,
				|	ЕСТЬNULL(ПлановыеНачисленияВозвратные.ИспользуетсяПоОкончании, ЛОЖЬ) КАК ИспользуетсяПоОкончании");
			
			Запрос.Текст = Запрос.Текст + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисленияВозвратные
				|		ПО ПлановыеНачисления.ПериодЗаписи = ПлановыеНачисленияВозвратные.Период
				|			И ПлановыеНачисления.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
				|			И ПлановыеНачисления.Начисление = ПлановыеНачисленияВозвратные.Начисление
				|			И ПлановыеНачисления.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование
				|			И ПлановыеНачисления.Период < ПлановыеНачисленияВозвратные.ДействуетДо";
			
		ИначеЕсли ОтдельнаяРегистрацияПлановогоФОТ Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПлановыеНачисления.Используется",
				"ПлановыеНачисления.Используется,
				|	ПлановыеНачисления.ПериодВозвратногоСобытия");
			
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ДействующиеНачисления = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из ДанныеОПлановыхНачислениях Цикл
			
			СохранятьСрокДействияИндивидуальногоНачисления = Ложь;
			
			СтруктураОтбораСтрок = Новый Структура;
			СтруктураОтбораСтрок.Вставить("Сотрудник", Строка.Сотрудник);
			СтруктураОтбораСтрок.Вставить("Начисление", Строка.Начисление);
			СтруктураОтбораСтрок.Вставить("ДокументОснование", Строка.ДокументОснование);
			
			СтрокиПредыдущихЗначений = ДействующиеНачисления.НайтиСтроки(СтруктураОтбораСтрок);
			Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
				СтрокаПредыдущихЗначений = СтрокиПредыдущихЗначений[0];
			Иначе
				СтрокаПредыдущихЗначений = Неопределено;
			КонецЕсли;
			
			Если ОтдельнаяРегистрацияПлановогоФОТ
				Или СохранятьСрокДействияИндивидуальныхНачислений Тогда
				
				СохранятьСрокДействияИндивидуальногоНачисления = СохранятьСрокДействияИндивидуальныхНачислений
					И Строка.ХарактерНачисления <> Перечисления.ХарактерПлановогоНачисления.Штатное;
				
				Если СтрокаПредыдущихЗначений <> Неопределено
					И СтрокаПредыдущихЗначений.Используется = Строка.Используется Тогда
					
					Если Не СохранятьСрокДействияИндивидуальногоНачисления Тогда
						
						Если ИспользуютсяВозвратныеСобытия Тогда
							
							Если Не ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
								Или СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия >= Строка.ДействуетДо Тогда
								
								Продолжить;
								
							КонецЕсли;
							
						Иначе
							Продолжить;
						КонецЕсли;
						
					Иначе
						
						Если ИспользуютсяВозвратныеСобытия Тогда
							
							ИнфоОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Строка.Начисление);
							Если Не ИнфоОНачислении.Рассчитывается
								И Строка.ХарактерНачисления <> Перечисления.ХарактерПлановогоНачисления.Штатное Тогда
								
								Строка.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
								
							КонецЕсли;
							
							Если ИнфоОНачислении.Рассчитывается Или СтрокаПредыдущихЗначений.Размер = Строка.Размер Тогда
								
								Если Строка.ХарактерНачисления <> Перечисления.ХарактерПлановогоНачисления.Штатное
									Или Не ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
									Или СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия = Строка.ДействуетДо Тогда
									
									Продолжить;
									
								КонецЕсли;
								
							КонецЕсли;
							
						Иначе
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				// Движения с возвратным значениями записываются всегда.
				// Движения не меняющие состав начислений записываются в случаях изменения состояния.
				Если СтрокаПредыдущихЗначений <> Неопределено Тогда
					
					Если ДанныеОПлановыхНачислениях.Колонки.Найти("Размер") <> Неопределено Тогда
						
						УстанавливаемыйРазмер = Строка.Размер;
						Если СтрокиПредыдущихЗначений[0].Размер = УстанавливаемыйРазмер
							И СтрокиПредыдущихЗначений[0].Используется = Строка.Используется Тогда
							
							Продолжить;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = Движения.ПлановыеНачисления.Добавить();
			НоваяСтрока.Период = Строка.ДатаСобытия;
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
			НоваяСтрока.ФизическоеЛицо = Строка.ФизическоеЛицо;
			НоваяСтрока.ГоловнаяОрганизация = Строка.ГоловнаяОрганизация;
			НоваяСтрока.Начисление = Строка.Начисление;
			НоваяСтрока.ДокументОснование = Строка.ДокументОснование;
			НоваяСтрока.Используется = Строка.Используется;
			
			// необязательные колонки
			Если ДанныеОПлановыхНачислениях.Колонки.Найти("Размер") <> Неопределено Тогда
				НоваяСтрока.Размер = Строка.Размер;
			КонецЕсли;
			
			Если ИспользуютсяВозвратныеСобытия Тогда
				
				Если Не СохранятьСрокДействияИндивидуальныхНачислений Тогда
					
					Если ЗначениеЗаполнено(Строка.ДействуетДо)
						И Строка.ДействуетДо > НоваяСтрока.Период Тогда
						
						НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
						
						Если СтрокаПредыдущихЗначений <> Неопределено И СтрокаПредыдущихЗначений.Используется Тогда
							
							НоваяСтрока.РазмерПоОкончании = СтрокаПредыдущихЗначений.Размер;
							Если ИспользованиеПоОкончанииОпределено Тогда
								НоваяСтрока.ИспользуетсяПоОкончании = Строка.ИспользуетсяПоОкончании;
							Иначе
								НоваяСтрока.ИспользуетсяПоОкончании = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(Строка.ДействуетДо)
						И (СтрокаПредыдущихЗначений = Неопределено
							Или Не ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
							Или СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия > Строка.ДействуетДо
							Или Строка.ХарактерНачисления = Перечисления.ХарактерПлановогоНачисления.Штатное) Тогда
						
						НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
						Если СтрокаПредыдущихЗначений <> Неопределено И СтрокаПредыдущихЗначений.Используется Тогда
							
							Если ИспользованиеПоОкончанииОпределено Тогда
								НоваяСтрока.ИспользуетсяПоОкончании = Строка.ИспользуетсяПоОкончании;
							ИначеЕсли СтрокаПредыдущихЗначений <> Неопределено
								И ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
								И СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия < Строка.ДействуетДо Тогда
								
								НоваяСтрока.ИспользуетсяПоОкончании = СтрокаПредыдущихЗначений.ИспользуетсяПоОкончании;
								
							Иначе
								НоваяСтрока.ИспользуетсяПоОкончании = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
						Если СтрокаПредыдущихЗначений <> Неопределено
							И СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия > Строка.ДействуетДо
							И СтрокаПредыдущихЗначений.ИспользуетсяПоОкончании <> НоваяСтрока.ИспользуетсяПоОкончании Тогда
							
							СтрокаВосстановленияВозвратногоСобытия = Движения.ПлановыеНачисления.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,ФизическоеЛицо,ГоловнаяОрганизация,Начисление,ДокументОснование");
							
							СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо;
							СтрокаВосстановленияВозвратногоСобытия.Используется = НоваяСтрока.ИспользуетсяПоОкончании;
							СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
							СтрокаВосстановленияВозвратногоСобытия.ИспользуетсяПоОкончании = СтрокаПредыдущихЗначений.ИспользуетсяПоОкончании;
							
						КонецЕсли;
						
					ИначеЕсли СтрокаПредыдущихЗначений <> Неопределено
						И ЗначениеЗаполнено(СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия)
						И НоваяСтрока.Используется <> СтрокаПредыдущихЗначений.ИспользуетсяПоОкончании
						И НоваяСтрока.Период < СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия Тогда
						
						НоваяСтрока.ДействуетДо = СтрокаПредыдущихЗначений.ПериодВозвратногоСобытия;
						НоваяСтрока.ИспользуетсяПоОкончании = СтрокаПредыдущихЗначений.ИспользуетсяПоОкончании;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(Движения, ЗначенияПоказателей, , ОтдельнаяРегистрацияПлановогоФОТ);
	
	СформироватьДвиженияПримененияДополнительныхПериодическихПоказателейСотрудников(Движения, ПрименениеДополнительныхПоказателей, ОтдельнаяРегистрацияПлановогоФОТ);
	
	Если Движения.ПлановыеНачисления.Записывать Тогда
		Движения.ПлановыеНачисления.Записать();
		Движения.ПлановыеНачисления.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет движения регистра ПрименениеПлановыхНачислений.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ДанныеОПримененииПлановыхНачислений - таблица значений 
//		см. функцию ПустаяТаблицаРегистрацииПримененияПлановыхНачислений.
// 		
Процедура СформироватьДвиженияПримененияПлановыхНачислений(Движения, ДанныеОПримененииПлановыхНачислений) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеОПримененииПлановыхНачислений Цикл
		НоваяСтрока = Движения.ПрименениеПлановыхНачислений.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.Применение = СтрокаДанных.Применение;
		Движения.ПрименениеПлановыхНачислений.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения плановыми удержаниями (см. процедуру
// РасчетЗарплатыВнутренний.СформироватьДвиженияПлановыхУдержаний).
//
Процедура СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных) Экспорт
	
	РасчетЗарплатыБазовый.СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных);
	
	Если СтруктураДанных.Свойство("ЗначенияПоказателей") Тогда
		СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(Движения, СтруктураДанных.ЗначенияПоказателей, Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструДетиПоИсполнительномуДокументу(Движения, СтруктураДанных) Экспорт
	
	Для Каждого СтрокаДанных Из СтруктураДанных Цикл
		НоваяСтрока = Движения.ДетиПоПоИсполнительномуДокументу.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		Движения.ДетиПоПоИсполнительномуДокументу.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструДетиПоИсполнительномуДокументуКорректировка(Движения, СтруктураДанных) Экспорт
	
	//НаборЗаписей = РегистрыСведений.ДетиПоПоИсполнительномуДокументу.СоздатьНаборЗаписей();
	//НаборЗаписей.отбор.Регистратор.Установить(Документ.ИсполнительныйЛист);
	//НаборЗаписей.Прочитать();
	//НаборЗаписей.Очистить();
	//
	//Для каждого Строка из СтруктураДанных Цикл
	//	
	//	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
	//	НаборЗаписей.Записать();
	//	
	//КонецЦикла;

КонецПроцедуры

// Заполняет набор записей регистра периодических значений показателей сотрудников.
//
Процедура СформироватьДвиженияЗначенийПериодическихПоказателейСотрудников(Движения, ЗначенияПоказателей, РегистрироватьПоФизическомуЛицу = Ложь, ФормироватьЗаписиТолькоДляИзменяемыхЗначений = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗначенияПоказателей) Тогда
		Возврат;
	КонецЕсли;
	
	// Используется при сохранении сроков действия
	Если ФормироватьЗаписиТолькоДляИзменяемыхЗначений Тогда
		
		Если ЗначенияПоказателей.Колонки.Найти("ХарактерНачисления") = Неопределено Тогда
			ЗначенияПоказателей.Колонки.Добавить("ХарактерНачисления", Новый описаниеТипов("ПеречислениеСсылка.ХарактерПлановогоНачисления"));
		КонецЕсли;
		
		СохранятьСрокДействияПоказателейИндивидуальныхНачислений = Истина;
		
	Иначе
		СохранятьСрокДействияПоказателейИндивидуальныхНачислений = Ложь;
	КонецЕсли;
	
	ЗаполнятьДокументОснование = ЗначенияПоказателей.Колонки.Найти("ДокументОснование") <> Неопределено;
	ИспользуютсяВозвратныеСобытия = ЗначенияПоказателей.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Отбор.Регистратор.Значение;
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополняем таблицу полем ЗначениеПоОкончании.
	ДополнитьТекущимиДаннымиОПоказателях(ЗначенияПоказателей, Регистратор, РегистрироватьПоФизическомуЛицу, ЗаполнятьДокументОснование, ВремяРегистрацииДокумента);
	
	Для Каждого Строка Из ЗначенияПоказателей Цикл
		
		СохранятьСрокДействияПоказателяИндивидуальногоНачисления = СохранятьСрокДействияПоказателейИндивидуальныхНачислений
			И Строка.ХарактерНачисления <> Перечисления.ХарактерПлановогоНачисления.Штатное;
		
		Если ФормироватьЗаписиТолькоДляИзменяемыхЗначений
			Или СохранятьСрокДействияПоказателейИндивидуальныхНачислений Тогда
			
			Если Строка.Значение = Строка.ТекущееЗначение Тогда
				
				Если Не СохранятьСрокДействияПоказателейИндивидуальныхНачислений Тогда
					
					Если ИспользуютсяВозвратныеСобытия Тогда
						
						Если Не ЗначениеЗаполнено(Строка.ПериодВозвратногоСобытия)
							Или Строка.ПериодВозвратногоСобытия = Строка.ДействуетДо Тогда
						
							Продолжить;
						
						КонецЕсли;
						
					Иначе
						Продолжить;
					КонецЕсли;
					
				Иначе
					
					Если Строка.ХарактерНачисления <> Перечисления.ХарактерПлановогоНачисления.Штатное
						Или Не ЗначениеЗаполнено(Строка.ПериодВозвратногоСобытия)
						Или Строка.ПериодВозвратногоСобытия = Строка.ДействуетДо Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если Не ИспользуютсяВозвратныеСобытия
				Или Не ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				
				Если Строка.Значение = Строка.ТекущееЗначение Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.Организация = Строка.Организация;
		НоваяСтрока.ФизическоеЛицо = Строка.ФизическоеЛицо;
		
		Если Не РегистрироватьПоФизическомуЛицу Тогда
			// Не заполняем сотрудника при регистрации показателей физического лица, 
			// в том числе для поддержки для контроля уникальности.
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
		КонецЕсли;
		
		НоваяСтрока.Показатель = Строка.Показатель;
		НоваяСтрока.Значение = Строка.Значение;
		
		// необязательные колонки
		Если ЗаполнятьДокументОснование Тогда
			НоваяСтрока.ДокументОснование = Строка.ДокументОснование;
		КонецЕсли;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			
			Если Не СохранятьСрокДействияПоказателейИндивидуальныхНачислений
				Или Строка.ХарактерНачисления = Перечисления.ХарактерПлановогоНачисления.Штатное Тогда
				
				Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
					
					НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
					НоваяСтрока.ЗначениеПоОкончании = Строка.ТекущееЗначение;
					
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(Строка.ДействуетДо)
					И (Не ЗначениеЗаполнено(Строка.ПериодВозвратногоСобытия)
						Или  Строка.ПериодВозвратногоСобытия > Строка.ДействуетДо) Тогда
					
					НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
					НоваяСтрока.ЗначениеПоОкончании = Строка.ТекущееЗначение;
					
					Если Строка.ПериодВозвратногоСобытия > Строка.ДействуетДо
						И Строка.ЗначениеПоОкончании <> НоваяСтрока.ЗначениеПоОкончании Тогда
						
						СтрокаВосстановленияВозвратногоСобытия = Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Сотрудник,Организация,ФизическоеЛицо,Показатель,ДокументОснование");
						
						СтрокаВосстановленияВозвратногоСобытия.Период = НоваяСтрока.ДействуетДо;
						СтрокаВосстановленияВозвратногоСобытия.Значение = НоваяСтрока.ЗначениеПоОкончании;
						СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = Строка.ПериодВозвратногоСобытия;
						СтрокаВосстановленияВозвратногоСобытия.ЗначениеПоОкончании = Строка.ЗначениеПоОкончании;
						
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(Строка.ПериодВозвратногоСобытия)
					И Строка.ЗначениеПоОкончании <> НоваяСтрока.Значение
					И НоваяСтрока.Период < Строка.ПериодВозвратногоСобытия Тогда
					
					НоваяСтрока.ДействуетДо = Строка.ПериодВозвратногоСобытия;
					НоваяСтрока.ЗначениеПоОкончании = Строка.ЗначениеПоОкончании;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать Тогда
		Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Записать();
		Движения.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет набор записей регистра применения дополнительных периодических показателей сотрудников.
//
Процедура СформироватьДвиженияПримененияДополнительныхПериодическихПоказателейСотрудников(Движения, ПрименениеДополнительныхПоказателей, ФормироватьЗаписиТолькоДляИзменяемыхПрименений = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПрименениеДополнительныхПоказателей) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ПрименениеДополнительныхПоказателей.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПрименениеПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Показатель,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = ПрименениеДополнительныхПоказателей.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из ПрименениеДополнительныхПоказателей Цикл
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		НоваяСтрока.Показатель = СтрокаДвижений.Показатель;
		НоваяСтрока.Период = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
	КонецЦикла;
	
	ИзмеренияДаты.Свернуть("Период, Показатель, Сотрудник");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПрименениеПоказателей.Период, ДЕНЬ) КАК ДатаСобытия,
		|	ПрименениеПоказателей.Организация,
		|	ПрименениеПоказателей.ФизическоеЛицо,
		|	ПрименениеПоказателей.Сотрудник,
		|	ПрименениеПоказателей.Показатель,
		|	ПрименениеПоказателей.Применение КАК ТекущееЗначение,
		|	ЕСТЬNULL(ПрименениеПоказателейВозвратные.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодВозвратногоСобытия,
		|	ЕСТЬNULL(ПрименениеПоказателейВозвратные.ПрименениеПоОкончании, ЛОЖЬ) КАК ПрименениеПоОкончании
		|ИЗ
		|	ВТПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ПрименениеПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ПрименениеПоказателейВозвратные
		|		ПО ПрименениеПоказателей.ПериодЗаписи = ПрименениеПоказателейВозвратные.Период
		|			И ПрименениеПоказателей.Организация = ПрименениеПоказателейВозвратные.Организация
		|			И ПрименениеПоказателей.Сотрудник = ПрименениеПоказателейВозвратные.Сотрудник
		|			И ПрименениеПоказателей.Показатель = ПрименениеПоказателейВозвратные.Показатель
		|			И ПрименениеПоказателей.Период < ПрименениеПоказателейВозвратные.ДействуетДо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПрименениеДополнительныхПоказателей.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("Булево"));
	ПрименениеДополнительныхПоказателей.Колонки.Добавить("ПериодВозвратногоСобытия", Новый ОписаниеТипов("Дата"));
	ПрименениеДополнительныхПоказателей.Колонки.Добавить("ПрименениеПоОкончании", Новый ОписаниеТипов("Булево"));
	
	СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строка = ПрименениеДополнительныхПоказателей.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение,ПериодВозвратногоСобытия,ПрименениеПоОкончании");
	КонецЦикла;
	
	Для Каждого Строка Из ПрименениеДополнительныхПоказателей Цикл
		
		Если ФормироватьЗаписиТолькоДляИзменяемыхПрименений
			Или Не ИспользуютсяВозвратныеСобытия
			Или Не ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
			
			Если Строка.Применение = Строка.ТекущееЗначение Тогда
				
				Если ФормироватьЗаписиТолькоДляИзменяемыхПрименений Тогда
					
					Если ИспользуютсяВозвратныеСобытия
						И (Не ЗначениеЗаполнено(Строка.ПериодВозвратногоСобытия)
							Или Строка.ПериодВозвратногоСобытия = Строка.ДействуетДо
							Или Строка.Применение = Строка.ПрименениеПоОкончании) Тогда
						
						Продолжить;
						
					ИначеЕсли Не ИспользуютсяВозвратныеСобытия
						И ЗначениеЗаполнено(Строка.ПериодВозвратногоСобытия) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.Организация = Строка.Организация;
		НоваяСтрока.ФизическоеЛицо = Строка.ФизическоеЛицо;
		
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.Показатель = Строка.Показатель;
		НоваяСтрока.Применение = Строка.Применение;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.ПрименениеПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
			
			Если ФормироватьЗаписиТолькоДляИзменяемыхПрименений
				И Строка.ПериодВозвратногоСобытия > НоваяСтрока.ДействуетДо
				И Строка.Применение <> НоваяСтрока.Применение Тогда
				
				СтрокаВосстановленияВозвратногоСобытия = Движения.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВосстановленияВозвратногоСобытия, НоваяСтрока, "Организация,Сотрудник,ФизическоеЛицо,Показатель");
				
				СтрокаВосстановленияВозвратногоСобытия.Период = КонецДня(НоваяСтрока.ДействуетДо) + 1;
				СтрокаВосстановленияВозвратногоСобытия.Применение = НоваяСтрока.ПрименениеПоОкончании;
				СтрокаВосстановленияВозвратногоСобытия.ДействуетДо = Строка.ПериодВозвратногоСобытия;
				СтрокаВосстановленияВозвратногоСобытия.ПрименениеПоОкончании =  Строка.ПрименениеПоОкончании;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания.
// Добавляет записи об их прекращении на указанную дату.
//
// Параметры:
//	Движения
//	Сотрудник - сотрудник, удержания которого прекращаются.
//	ДатаПрекращения - дата, после которой не действует ни одного удержания.
//	Организация
//	ПрекращатьУдержания - (необязательный), по умолчанию Истина, 
//		если Ложь - прекращаются только действующие начисления.
//
Процедура ПрекратитьВсеПлановыеНачисленияУдержания(Движения, Сотрудник, ДатаПрекращения, Организация, ПрекращатьУдержания = Истина) Экспорт
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ИсходныеДанные.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Период = ДатаПрекращения;
	
	ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(Движения, ИсходныеДанные);
	
	Если ПрекращатьУдержания Тогда
		
		ИсходныеДанные.Колонки.Удалить("Сотрудник");
		
		// Добавляем и заполняем колонки для удержаний.
		ИсходныеДанные.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ИсходныеДанные.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ИсходныеДанные[0].Период = НачалоДня(НачалоДня(ДатаПрекращения) - 1);
		ИсходныеДанные[0].ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
		ИсходныеДанные[0].Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		
		ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(Движения, ИсходныеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания по сотрудникам,
// переданным в таблице значений на указанную в таблице значений дату
//
// Параметры:
//	Движения
//	СотрудникиПериоды	- ТаблицаЗначений
//				* Сотрудник 		- СправочникСсылка.Сотрудники
//				* Период			- Дата
//				* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//							имеет смысл, только если значение параметра ПрекращатьУдержания равно Истина
//				* Организация		- СправочникСсылка.Организации
//							имеет смысл, только если значение параметра ПрекращатьУдержания равно Истина
//	ПрекращатьУдержания - (необязательный), по умолчанию Истина, 
//		если Ложь - прекращаются только действующие начисления.
//
Процедура ПрекратитьВсеПлановыеНачисленияПоТаблицеСотрудников(Движения, СотрудникиПериоды) Экспорт
	
	Регистратор = Движения.ПлановыеНачисления.Отбор.Регистратор.Значение;
	
	// Плановые начисления
	ДействующиеНачисления = ДействующиеПлановыеНачисления(СотрудникиПериоды, Регистратор, Истина);
	
	Для Каждого СтрокаТаблицы Из ДействующиеНачисления Цикл
		
		СтрокаДвижений = Движения.ПлановыеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДвижений, СтрокаТаблицы);
		СтрокаДвижений.Используется = Ложь;
		
		Движения.ПлановыеНачисления.Записывать = Истина;
		
	КонецЦикла;

КонецПроцедуры

// Получает все действующие на дату плановые начисления и удержания по сотрудникам,
// переданным в таблице значений на указанную в таблице значений дату
//
// Параметры:
//	Движения
//	СотрудникиПериоды	- ТаблицаЗначений
//				* Сотрудник 		- СправочникСсылка.Сотрудники
//				* Период			- Дата
//				* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//							имеет смысл, только если значение параметра ПрекращатьУдержания равно Истина
//				* Организация		- СправочникСсылка.Организации
//							имеет смысл, только если значение параметра ПрекращатьУдержания равно Истина
//	ПрекращатьУдержания - (необязательный), по умолчанию Истина, 
//		если Ложь - прекращаются только действующие начисления.
//
Процедура ПрекратитьВсеПлановыеУдержанияПоТаблицеСотрудников(Движения, СотрудникиПериоды) Экспорт
	
	Регистратор = Движения.ПлановыеУдержания.Отбор.Регистратор.Значение;
	
	// Плановые удержания
	ДействующиеУдержания = ДействующиеПлановыеУдержания(СотрудникиПериоды, Регистратор);
	Для Каждого СтрокаТаблицы Из ДействующиеУдержания Цикл
		СтрокаДвижений = Движения.ПлановыеУдержания.Добавить();
		СтрокаДвижений.Период = 			КонецДня(СтрокаТаблицы.Период) + 1;
		СтрокаДвижений.Организация = 		СтрокаТаблицы.Организация;
		СтрокаДвижений.ФизическоеЛицо = 	СтрокаТаблицы.ФизическоеЛицо;
		СтрокаДвижений.Удержание = 			СтрокаТаблицы.Удержание;
		СтрокаДвижений.ДокументОснование = 	СтрокаТаблицы.ДокументОснование;
		СтрокаДвижений.Используется = 		Ложь;
		Движения.ПлановыеУдержания.Записывать = Истина;
	КонецЦикла;

КонецПроцедуры

// Заполняет движения плановыми выплатами (авансы).
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ДанныеОПлановыхВыплатах - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		ДействуетДо (не обязательно).
//		Сотрудник
//		Аванс
// 		
Процедура СформироватьДвиженияПлановыхВыплат(Движения, ДанныеОПлановыхВыплатах) Экспорт
	
	Регистратор = Движения.ПлановыеАвансы.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (ДанныеОПлановыхВыплатах.Колонки.Найти("ДействуетДо") <> Неопределено);
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПлановыеАвансы.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиДаннымиАвансов(ДанныеОПлановыхВыплатах, Регистратор, ВремяРегистрацииДокумента);
	
	Для Каждого СтрокаДанных Из ДанныеОПлановыхВыплатах Цикл
		
		Движения.ПлановыеАвансы.Записывать = Истина;
		
		НоваяСтрока = Движения.ПлановыеАвансы.Добавить();
		
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.СпособРасчетаАванса = СтрокаДанных.ТекущийСпособРасчетаАванса;
			НоваяСтрока.Аванс = СтрокаДанных.ТекущийАванс;
		Иначе
			НоваяСтрока.СпособРасчетаАванса = СтрокаДанных.СпособРасчетаАванса;
			НоваяСтрока.Аванс = СтрокаДанных.Аванс;
		КонецЕсли;
		
		// Если есть дата "обратного" события - вводим его данные.
		Если ДействуетДоЕсть Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = НачалоМесяца(СтрокаДанных.ДействуетДо);
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.СпособРасчетаАвансаПоОкончании = СтрокаДанных.СпособРасчетаАванса;
					НоваяСтрока.АвансПоОкончании = СтрокаДанных.Аванс;
				Иначе
					НоваяСтрока.СпособРасчетаАвансаПоОкончании = СтрокаДанных.ТекущийСпособРасчетаАванса;
					НоваяСтрока.АвансПоОкончании = СтрокаДанных.ТекущийАванс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Конструирует объект для хранения данных для проведения плановых удержаний.
//
// Структура содержит
//		ДанныеПлановыхУдержаний - Таблица значений.
//			Организация - СправочникСсылка.Организации
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			Удержание - ПланВидовРасчетаСсылка.Удержания
//			ДатаСобытия - Дата начала удержания.
//			ДействуетДо - Дата, до которой действует удержание, если пустая дата, то удержание бессрочное.
//			Используется - Булево
//
//		ЗначенияПоказателей - Таблица значений.
//			Организация - СправочникСсылка.Организации
//			ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			ДатаСобытия - Дата начала удержания.
//			ДействуетДо - Дата, до которой действует удержание, если пустая дата, то удержание бессрочное.
//			Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты
//			Значение - Число(15,3) значение показателя.
//
Функция СоздатьДанныеДляРегистрацииПлановыхУдержаний() Экспорт
	
	ПоляСтруктуры =
	"ДанныеПлановыхУдержаний,
	|ЗначенияПоказателей";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

// Заполняет данные для проведения плановых удержаний.
//
// Параметры:
//		ДанныеДляПроведения - Структура, описанная в СоздатьДанныеДляРегистрацииПлановыхУдержаний.
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляРегистрацииПлановыхУдержаний(ДанныеДляПроведения, Документ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Организация.ГоловнаяОрганизация КАК Организация,
	|	ДокументУдержания.Удержание,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Организация.ГоловнаяОрганизация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ЗначенияПоказателей.Показатель,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗначенияПоказателей.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	#ТаблицаДокумента КАК ДокументУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаПоказателейДокумента КАК ЗначенияПоказателей
	|		ПО (ЗначенияПоказателей.Ссылка = ДокументУдержания.Ссылка)
	|			И (ДокументУдержания.Ссылка = &Документ)";
	
	МетаданныеДокумента = Документ.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаДокумента", ИмяДокумента);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателейДокумента", ИмяДокумента + ".Показатели");
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения.ДанныеПлановыхУдержаний = РезультатыЗапроса[0].Выгрузить();
	ДанныеДляПроведения.ЗначенияПоказателей = РезультатыЗапроса[1].Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения плановых удержаний для многосотрудникового документа.
//
// Параметры:
//		ДанныеДляПроведения - Структура, описанная в СоздатьДанныеДляРегистрацииПлановыхУдержаний.
//		Документ - Ссылка на документ.
//
Процедура ЗаполнитьДанныеДляРегистрацииПлановыхУдержанийСпискаСотрудников(ДанныеДляПроведения, Документ) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК Организация,
	|	ДокументУдержания.Ссылка.Удержание,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ДокументУдержания.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Начать)
	|				ИЛИ ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Изменить)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|ГДЕ
	|	ДокументУдержания.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументУдержания.Ссылка.ДатаНачала КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА ДокументУдержания.Ссылка.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДокументУдержания.Ссылка.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДатаОкончания
	|	КОНЕЦ КАК ДействуетДо,
	|	ДокументУдержания.ФизическоеЛицо,
	|	ДокументУдержания.Ссылка.Организация.ГоловнаяОрганизация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
	|			ТОГДА ДокументУдержания.Ссылка
	|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
	|	КОНЕЦ КАК ДокументОснование,
	|	ЗначенияПоказателей.Показатель,
	|	ВЫБОР
	|		КОГДА ДокументУдержания.Ссылка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСУдержаниями.Прекратить)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ЗначенияПоказателей.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	#ТаблицаУдержанийДокумента КАК ДокументУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ТаблицаПоказателейДокумента КАК ЗначенияПоказателей
	|		ПО (ЗначенияПоказателей.Ссылка = ДокументУдержания.Ссылка)
	|			И (ЗначенияПоказателей.ИдентификаторСтрокиВидаРасчета = ДокументУдержания.ИдентификаторСтрокиВидаРасчета)
	|			И (ДокументУдержания.Ссылка = &Документ)";
	
	МетаданныеДокумента = Документ.Метаданные();
	ИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаУдержанийДокумента", ИмяДокумента + ".Удержания");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателейДокумента", ИмяДокумента + ".Показатели");
	
	// Если документ регистрирует удержания без учета документа основания, модифицируем текст запроса.
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
			|	ВЫБОР
			|		КОГДА ДокументУдержания.Ссылка.ДокументОснование = &ПустойДокументОснование
			|			ТОГДА ДокументУдержания.Ссылка
			|		ИНАЧЕ ДокументУдержания.Ссылка.ДокументОснование
			|	КОНЕЦ КАК ДокументОснование,", 
			"");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ПустойДокументОснование", Документы[МетаданныеДокумента.Имя].ПустаяСсылка());
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения.ДанныеПлановыхУдержаний = РезультатыЗапроса[0].Выгрузить();
	ДанныеДляПроведения.ЗначенияПоказателей = РезультатыЗапроса[1].Выгрузить();
	
КонецПроцедуры

Функция НоваяТаблицаПолучателиУдержаний() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ФизическоеЛицо",  Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Удержание",  Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	Таблица.Колонки.Добавить("Контрагент",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Возврат Таблица;

КонецФункции 

// Добавляет запись о получателе удержания по документу основания.
//
Процедура ЗарегистрироватьПолучателяУдержания(ПолучателиУдержаний, Организация, ДокументОснование) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПолучателиУдержаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументОснование.Установить(ДокументОснование);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Для каждого СтрокаТаблицы Из ПолучателиУдержаний Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ФизическоеЛицо) И ЗначениеЗаполнено(СтрокаТаблицы.Удержание) И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись,СтрокаТаблицы);
				НоваяЗапись.ДокументОснование = ДокументОснование;
				НоваяЗапись.Организация = Организация;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение и пересчет в расчетных документах.

Функция ДополнительныеПараметрыЗаполненияТаблицДокумента() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"Подразделение,
		|ДокументСсылка, 
		|Сотрудники, 
		|ОкончаниеПериода, 
		|РежимНачисления, 
		|ПорядокВыплаты, 
		|СотрудникиПериодДействияПерерасчет, 
		|ИспользоватьВоеннуюСлужбу, 
		|НачислениеЗарплатыВоеннослужащим,
		|МногопотоковоеЗаполнение,
		|СотрудникиДополнительныйДоход,
		|АдресХранилища,
		|ОкончательныйРасчетНДФЛ");
		                           
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = Ложь;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Ложь;
	ДополнительныеПараметры.МногопотоковоеЗаполнение = Ложь;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = Ложь;

	Возврат ДополнительныеПараметры;
	
КонецФункции

// Получает данные для заполнения табличных частей документа, выполняющего начисление зарплаты.
//
Функция ДанныеДляЗаполненияТаблицДокумента(ОписаниеДокумента, Организация, МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт	
	

	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗаполненияТаблицДокумента();
	КонецЕсли;
	
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	ДокументСсылка = ДополнительныеПараметры.ДокументСсылка;
	Подразделение = ДополнительныеПараметры.Подразделение;
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	РежимНачисления = ДополнительныеПараметры.РежимНачисления;
	ПорядокВыплаты = ДополнительныеПараметры.ПорядокВыплаты;
	СотрудникиПериодДействияПерерасчет = ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет;
	ИспользоватьВоеннуюСлужбу = ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу;
	НачислениеЗарплатыВоеннослужащим = ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим;
	МногопотоковоеЗаполнение = ДополнительныеПараметры.МногопотоковоеЗаполнение;
	СотрудникиДополнительныйДоход = ДополнительныеПараметры.СотрудникиДополнительныйДоход;
	АдресХранилища = ДополнительныеПараметры.АдресХранилища;
	ОкончательныйРасчетНДФЛ = ДополнительныеПараметры.ОкончательныйРасчетНДФЛ;
	
	ДанныеЗаполнения = ОписаниеДанныхДляЗаполненияТаблицДокумента();
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	РасчетПервойПоловиныМесяца = (РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца);
	
	// Флаги выполняемых действия при заполнении
	РассчитыватьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	РассчитыватьПособияПерерасчет = ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено;
	РассчитыватьНачисления = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияИмя <> Неопределено;
	ЗаполнятьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	РассчитыватьПособия = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПособияИмя <> Неопределено;
	РассчитыватьЛьготы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ЛьготыИмя <> Неопределено;
	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И (ОписаниеДокумента.ВзносыИмя <> Неопределено ИЛИ ОписаниеДокумента.ВзносыФОТИмя <> Неопределено);
	ЗаполнятьПогашениеЗаймов = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Имена временных таблиц для последующего сбора физических лиц.
	ИменаВТ = Новый Массив;
	
	Если МногопотоковоеЗаполнение Тогда 
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.МногопотоковоеЗаполнениеДокументов") Тогда 
			Модуль = ОбщегоНазначения.ОбщийМодуль("МногопотоковоеЗаполнениеДокументов");
			Модуль.СформироватьВременныеТаблицыСотрудников(ИменаВТ, МенеджерВременныхТаблиц, Сотрудники, СотрудникиДополнительныйДоход);
		КонецЕсли;
	КонецЕсли;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
	Если Сотрудники = Неопределено Тогда
		
		ДополнительныеПараметры = РасчетЗарплатыРасширенный.ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
		ДополнительныеПараметры.ОкончаниеПериода = ОкончаниеПериода;
		ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда = ЗаполнятьНачисленияПоДоговорамПодряда;
		ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = ИспользоватьВоеннуюСлужбу;
		ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = НачислениеЗарплатыВоеннослужащим;
		ДополнительныеПараметры.РежимДоначисления = ОписаниеДокумента.РежимДоначисления;
		ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет;
		ДополнительныеПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Сотрудники = СотрудникиДляНачисленияЗарплаты(Организация, Подразделение, МесяцНачисления, ДополнительныеПараметры);
			
		Если Сотрудники.Количество() = 0 Тогда 
			Возврат ДанныеЗаполнения;
		КонецЕсли;
		
		ИменаВТ.Добавить("ВТВсеСотрудникиОрганизации");
		
		// Для сотрудников, уже не работающих, но, возможно, имевших доход в выбранном периоде.
		УчетНДФЛРасширенный.СоздатьВТСотрудникиДополнительныйДоход(МенеджерВременныхТаблиц, Организация, Подразделение, Сотрудники, МесяцНачисления, ОкончаниеПериода);
		ИменаВТ.Добавить("ВТСотрудникиДополнительныйДоход");
		
	КонецЕсли;
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременнаяСсылка);
	
	СтрокиРасчета = Новый Массив;
	
	// Начисления
	// получить данные по плановым и внеплановым начислениям 
	Если Не ОписаниеДокумента.РежимДоначисления Тогда
			
		Если РассчитыватьЛьготы И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			ДанныеДляНачисления = Модуль.ДанныеДляНачисленияЗарплатыИЛьгот(
				Организация, МесяцНачисления, ОкончаниеПериода, МесяцНачисления, Подразделение, Сотрудники, , , РасчетПервойПоловиныМесяца, ДокументСсылка, Истина);
			ДанныеЗаполнения.Начисления = ДанныеДляНачисления.Начисления;
			ДанныеЗаполнения.Льготы = ДанныеДляНачисления.Льготы;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиРасчета, ДанныеЗаполнения.Начисления);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиРасчета, ДанныеЗаполнения.Льготы);
		ИначеЕсли РассчитыватьНачисления Тогда  
			ДанныеЗаполнения.Начисления = ДанныеДляНачисленияЗарплаты(
				Организация, МесяцНачисления, ОкончаниеПериода, МесяцНачисления, Подразделение, Сотрудники, , , РасчетПервойПоловиныМесяца, ДокументСсылка, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиРасчета, ДанныеЗаполнения.Начисления);
		КонецЕсли;
		
		Если РассчитыватьПособия Тогда 
			ДанныеЗаполнения.Пособия = ДанныеДляНачисленияПособий(
				Организация, МесяцНачисления, ОкончаниеПериода, МесяцНачисления, Подразделение, Сотрудники, РасчетПервойПоловиныМесяца, ДокументСсылка);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиРасчета, ДанныеЗаполнения.Пособия);
		КонецЕсли;
		
	КонецЕсли;
	
	Если РассчитыватьНачисленияПерерасчет Или РассчитыватьПособияПерерасчет Тогда
		ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаНачисленияЗарплаты(
			Организация, МесяцНачисления, Сотрудники, ДокументСсылка, СотрудникиПериодДействияПерерасчет, ОписаниеДокумента.РежимДоначисления);
		Если РассчитыватьНачисленияПерерасчет Тогда
			ДанныеЗаполнения.НачисленияПерерасчет = ДанныеПерерасчета.НачисленияПерерасчет;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиРасчета, ДанныеЗаполнения.НачисленияПерерасчет);
		КонецЕсли; 
		Если РассчитыватьПособияПерерасчет Тогда
			ДанныеЗаполнения.ПособияПерерасчет = ДанныеПерерасчета.ПособияПерерасчет;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиРасчета, ДанныеЗаполнения.ПособияПерерасчет);
		КонецЕсли; 
	КонецЕсли; 
	
	// Договоры подряда
	Если ЗаполнятьНачисленияПоДоговорамПодряда Тогда
		ДанныеЗаполнения.НачисленияПоДоговорам = РезультатНачисленияПоДоговорам(Организация, МесяцНачисления, ДокументСсылка, Подразделение, Сотрудники);
		СоздатьВТНачисленияПоДоговорам(МенеджерВременныхТаблиц, ДанныеЗаполнения.НачисленияПоДоговорам, ИменаВТ, Сотрудники);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	// Выполнить расчет начислений.
	ПараметрыРасчета = ДополнительныеПараметрыРасчетаНачислений();
	ПараметрыРасчета.Организация = Организация;
	ПараметрыРасчета.МесяцНачисления = МесяцНачисления;
	ПараметрыРасчета.ДокументСсылка = ДокументСсылка;
	ПараметрыРасчета.НаборыЗаписей = НаборыЗаписей;
	ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете(, ДокументСсылка);
	
	РассчитатьНачисления(СтрокиРасчета, ПараметрыРасчета);
	
	// Исключаем строки полностью вытесненных записей.
	Если Не ОписаниеДокумента.РежимДоначисления Тогда
		ИсключитьСтрокиПолностьюВытесненныхНачислений(СтрокиРасчета, ВременнаяСсылка);
		ИсключитьСтрокиПолностьюВытесненныхНачислений(ДанныеЗаполнения.Начисления, ВременнаяСсылка);
		ИсключитьСтрокиПолностьюВытесненныхНачислений(ДанныеЗаполнения.Пособия, ВременнаяСсылка);
		ИсключитьСтрокиПолностьюВытесненныхНачислений(ДанныеЗаполнения.Льготы, ВременнаяСсылка);
	КонецЕсли;
	
	
	ПараметрыСоздатьВТНачисления = ДополнительныеПараметрыСоздатьВТНачисления();
	ПараметрыСоздатьВТНачисления.Начисления = СтрокиРасчета;
	ПараметрыСоздатьВТНачисления.Сотрудники = Сотрудники;
	ПараметрыСоздатьВТНачисления.Организация = Организация;
	ПараметрыСоздатьВТНачисления.МесяцНачисления = МесяцНачисления;
	СоздатьВТНачисления(МенеджерВременныхТаблиц, ИменаВТ, ПараметрыСоздатьВТНачисления);
	
	// Регистрируем данные о начислениях по договорам, 
	// если далее потребуется расчет удержаний по исполнительным листам.
	Если ЗаполнятьНачисленияПоДоговорамПодряда Тогда
		ЗарегистрироватьНачисленияПоДоговорам(НаборыЗаписей, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	КонецЕсли;

	ПараметрыДляРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеПараметровДляРаспределенияДанныхЗаполнения();
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	ПараметрыДляРаспределения.БудутРассчитыватьсяВзносы = РассчитыватьВзносы;
	ПараметрыДляРаспределения.РаспределятьНачисления = 
		(ОписаниеДокумента.НачисленияИмя <> НеОпределено
			Или ОписаниеДокумента.НачисленияПоДоговорамИмя <> НеОпределено
			Или ОписаниеДокумента.НачисленияПерерасчетИмя <> НеОпределено
			Или ОписаниеДокумента.ПособияИмя <> НеОпределено
			Или ОписаниеДокумента.ПособияПерерасчетИмя <> НеОпределено
			Или ОписаниеДокумента.ЛьготыИмя <> НеОпределено);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныхДляЗаполненияТаблицДокумента(ОписаниеДокумента, ДанныеЗаполнения, Организация, МесяцНачисления, ДокументСсылка, ПараметрыДляРаспределения);
			
	// Готовим временную таблицу физических лиц для расчета взносов и НДФЛ.
	СоздатьВТФизическиеЛица(МенеджерВременныхТаблиц, ИменаВТ, Ложь);
	
	// Расчет страховых взносов
	НаборыЗаписейДСВ = Неопределено;
	Если РассчитыватьВзносы Тогда
		

		// Формируем доходы и рассчитываем взносы.
		СтруктураВзносы = РезультатРасчетаСтраховыхВзносов(
			Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, Ложь, ПараметрыДляРаспределения.НачисленияСРаспределениемПоЕНВД, НаборыЗаписейДСВ);
	    ДанныеЗаполнения.Взносы = СтруктураВзносы.Взносы;
		ДанныеЗаполнения.ВзносыФОТ = СтруктураВзносы.ВзносыФОТ;
	КонецЕсли;

	// Заполнение удержаний
	Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
		УдержанияЗаПериод = ДанныеДляУдержанияЗарплаты(Организация, МесяцНачисления, ОкончаниеПериода, Подразделение, Сотрудники, РежимНачисления);
		ДанныеЗаполнения.Удержания = УдержанияЗаПериод;
		// Расчет только ДСВ
		// Раскладываем строки в отдельные коллекции.
		СтрокиУдержаний = Новый Соответствие;
		СтрокиУдержаний.Вставить(Перечисления.КатегорииУдержаний.ДСВ, Новый Массив);
		СтрокиУдержаний.Вставить(Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ, Новый Массив);
		РазложитьСтрокиУдержанийПоРолям(УдержанияЗаПериод, СтрокиУдержаний);
		// Составляем массив строк по отдельным ролям.
		РассчитываемыеСтроки = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РассчитываемыеСтроки, СтрокиУдержаний[Перечисления.КатегорииУдержаний.ДСВ]);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РассчитываемыеСтроки, СтрокиУдержаний[Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ]);
		Если (СтрокиУдержаний.Получить(Перечисления.КатегорииУдержаний.ДСВ).Количество() > 0 
			Или СтрокиУдержаний.Получить(Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ).Количество() > 0) 
			И Не РассчитыватьВзносы Тогда
			СформироватьДоходыДляРасчетаСтраховыхВзносов(
				Организация, МесяцНачисления, МенеджерВременныхТаблиц, ИменаВТ, ДокументСсылка, ПараметрыДляРаспределения.НачисленияСРаспределениемПоЕНВД, НаборыЗаписейДСВ);			                   	
		КонецЕсли; 
		ПараметрыРасчета = ДополнительныеПараметрыРасчетаУдержаний();
		ПараметрыРасчета.Организация = Организация;
		ПараметрыРасчета.МесяцУдержания = МесяцНачисления;
		ПараметрыРасчета.ДокументСсылка = ДокументСсылка;
		Если РасчетПервойПоловиныМесяца Тогда
			ПараметрыРасчета.РегистраторыНачислений = Новый Массив;
			ПараметрыРасчета.РегистраторыНачислений.Добавить(ВременнаяСсылка);
		КонецЕсли;
		Если НаборыЗаписейДСВ <> Неопределено И ПараметрыРасчета.РегистраторыНачислений <> Неопределено Тогда
			ПараметрыРасчета.РегистраторыНачислений.Добавить(НаборыЗаписейДСВ.СведенияОДоходахСтраховыеВзносы.Отбор.Регистратор.Значение);
		КонецЕсли;  
		РассчитатьУдержания(РассчитываемыеСтроки, ПараметрыРасчета);
	КонецЕсли;
	
	// НДФЛ
	Если ОписаниеДокумента.НДФЛИмя <> Неопределено Тогда
		
		СформироватьДоходыНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетНДФЛ, НачалоДня(КонецМесяца(МесяцНачисления)));
		РезультатРасчетаНДФЛ = РезультатРасчетаНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетНДФЛ, НачалоДня(КонецМесяца(МесяцНачисления)));
        НДФЛДляРегистрации = РезультатРасчетаНДФЛ.Скопировать();
		
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(НДФЛДляРегистрации);
		ЗарегистрироватьНДФЛ(НаборыЗаписей, НДФЛДляРегистрации, Организация, МесяцНачисления, МенеджерВременныхТаблиц);

		ДанныеЗаполнения.НДФЛ = РезультатРасчетаНДФЛ;
	КонецЕсли;
	
	// Рассчитать все, кроме ДСВ
	Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
		РассчитатьУдержания(СтрокиУдержаний[Перечисления.КатегорииУдержаний.ПустаяСсылка()], ПараметрыРасчета);
		// Строки с удержаниями, результат которых равен нулю, - удаляем.
		УдалитьНулевыеУдержания(УдержанияЗаПериод, Организация, МесяцНачисления);
	КонецЕсли;
	
	// Погашение займов
	Если ЗаполнятьПогашениеЗаймов Тогда
		ДанныеЗаполнения.ПогашениеЗаймов = РезультатРасчетаЗаймов(Организация, ОкончаниеПериода, ДокументСсылка, Сотрудники, Подразделение);
	КонецЕсли;
	
	ПараметрыДляРаспределения.БудутРассчитыватьсяВзносы = Ложь;
	ПараметрыДляРаспределения.РаспределятьНачисления = Ложь;
	ПараметрыДляРаспределения.РаспределятьУдержания = 
		(ОписаниеДокумента.УдержанияИмя <> НеОпределено Или 
		ОписаниеДокумента.НДФЛИмя <> НеОпределено Или 
		ОписаниеДокумента.ПогашениеЗаймовИмя <> НеОпределено);
	
	ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныхДляЗаполненияТаблицДокумента(ОписаниеДокумента, ДанныеЗаполнения, Организация, МесяцНачисления, ДокументСсылка, ПараметрыДляРаспределения);
	
	ОтменитьТранзакцию();
	
	Если МногопотоковоеЗаполнение Тогда 
		ПоместитьВоВременноеХранилище(ДанныеЗаполнения, АдресХранилища);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Структура для определения дополнительных параметров получения данных для начисления зарплаты.
//
Функция ДополнительныеПараметрыДанныхДляНачисленияЗарплаты() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"Подразделение, 
		|Сотрудники, 
		|СотрудникиНачисления, 
		|ИзвестныеЗначенияПоказателей, 
		|РасчетПервойПоловиныМесяца, 
		|ДокументСсылка, 
		|ИсправленныйДокумент, 
		|ИсключатьРанееВыполненныеНачисления,
		|РасчетЛьгот");
		
	ДополнительныеПараметры.Подразделение = Неопределено;
	ДополнительныеПараметры.Сотрудники = Неопределено;
	ДополнительныеПараметры.СотрудникиНачисления = Неопределено;
	ДополнительныеПараметры.ИзвестныеЗначенияПоказателей = Неопределено;
	ДополнительныеПараметры.РасчетПервойПоловиныМесяца = Ложь;
	ДополнительныеПараметры.ДокументСсылка = Неопределено;
	ДополнительныеПараметры.ИсправленныйДокумент = Неопределено;
	ДополнительныеПараметры.ИсключатьРанееВыполненныеНачисления = Ложь;
	ДополнительныеПараметры.РасчетЛьгот = Ложь;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Метод выявляет состав сотрудников и периодов действия начислений 
// в соответствии с кадровыми изменениями.
//
// Параметры:
//	Организация
//	Начало, 
//	Окончание,	
//	МесяцНачисления,
//	ДополнительныеПараметры - необязательный, структура, см. ДополнительныеПараметрыДанныхДляНачисленияЗарплаты(),
//
// Возвращаемое значение - таблица значений, см. ПустаяТаблицаНачисления().
//
Функция ДанныеДляНачисленияЗарплатыБезКорректировкиПериода(Организация, Начало, Окончание,	МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт
	
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляНачисленияЗарплаты();
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Метод работает 
	// - либо в режиме выявления начислений, 
	// - либо для заполнения таблицы конкретными начислениями.
	
	// В любом случае прежде всего получаем сотрудников и кадровые перемещения за интервал с даты начала по дату окончания.
	// Кадровые данные нужны для заполнения подразделений и периодов приема/увольнения.
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	Если ДополнительныеПараметры.СотрудникиНачисления <> Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДополнительныеПараметры.СотрудникиНачисления, "Сотрудник", Истина);
		Начисления = ОбщегоНазначения.ВыгрузитьКолонку(ДополнительныеПараметры.СотрудникиНачисления, "Начисление", Истина);
		Если Начисления.Количество() = 0 Тогда
			НачисленияОпределены = Ложь;
		ИначеЕсли Начисления.Количество() = 1 Тогда
			НачисленияОпределены = Начисления[0] <> ПланыВидовРасчета.Начисления.ПустаяСсылка();
		Иначе
			НачисленияОпределены = Истина;
		КонецЕсли;
	Иначе
		НачисленияОпределены = Ложь;
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= ДополнительныеПараметры.Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= Начало;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = Окончание;
		ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина);
	КонецЕсли; 
		
	// Для выявленных по установленным фильтрам сотрудникам получаем полную кадровую историю в пределах головной
	// организации.
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.Организация  					= Организация;
	ПараметрыПолученияРабочихМест.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияРабочихМест.НачалоПериода					= Начало;
	ПараметрыПолученияРабочихМест.ОкончаниеПериода  			= Окончание;
	ПараметрыПолученияРабочихМест.СписокСотрудников 			= Сотрудники;
	ПараметрыПолученияРабочихМест.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
	
	// Сотрудники у нас уже есть, поэтому допустимо установить привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ДополнительныеПараметры.СотрудникиНачисления = Неопределено Тогда
		// Готовим "пустышку", если не заданы конкретные начисления.
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	NULL КАК Сотрудник,
		|	NULL КАК Начисление
		|ПОМЕСТИТЬ ВТСотрудникиНачисления";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиНачисления.Сотрудник,
		|	СотрудникиНачисления.Начисление
		|ПОМЕСТИТЬ ВТСотрудникиНачисления
		|ИЗ
		|	&СотрудникиНачисления КАК СотрудникиНачисления";
		Запрос.УстановитьПараметр("СотрудникиНачисления", ДополнительныеПараметры.СотрудникиНачисления);
		Запрос.Выполнить();
	КонецЕсли;
	
	// В таблице могут участвовать сотрудники, которые уже не работали в заданном периоде, 
	// но им нужно выполнить определенные начисления.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочиеМестаСотрудников.Сотрудник
	|ПОМЕСТИТЬ ВТВсеСотрудники
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СотрудникиНачисления.Сотрудник
	|ИЗ
	|	ВТСотрудникиНачисления КАК СотрудникиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	|		ПО (РабочиеМестаСотрудников.Сотрудник = СотрудникиНачисления.Сотрудник)
	|ГДЕ
	|	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеСотрудники.Сотрудник,
	|	&Организация КАК Организация,
	|	&ДатаНачала КАК Период,
	|	ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 1) КАК ДатаНачала,
	|	&ДатаОкончания КАК ДатаОкончания,
	|	НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) КАК НачалоМесяца,
	|	КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ) КАК КонецМесяца
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТВсеСотрудники КАК ВсеСотрудники";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если ДополнительныеПараметры.РасчетПервойПоловиныМесяца Тогда
		// В расчет первой половины месяца включаем только тех сотрудников, 
		// для которых установлен соответствующий способ расчета аванса.
		ОтобратьСотрудниковРассчитываемыхВПервуюПоловинуМесяца(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", МесяцНачисления);
	КонецЕсли;
	
	// Нужно получить даты приема/увольнения для корректировки периодов начислений.
	// Получаем еще и кадровые данные для того, чтобы заполнить рабочие места неработающих сотрудников.
	УстановитьПривилегированныйРежим(Истина);
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", "Сотрудник,Период");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "Организация, Подразделение, Должность, ДолжностьПоШтатномуРасписанию, ДатаПриема, ДатаУвольнения, ВидЗанятости");
	УстановитьПривилегированныйРежим(Ложь);
	
	// Пересоздаем таблицу ВТРабочиеМестаСотрудников, чтобы включить в нее еще и неработающих сотрудников.
	Если ДополнительныеПараметры.СотрудникиНачисления <> Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаСотрудников.Период,
		|	РабочиеМестаСотрудников.Сотрудник,
		|	РабочиеМестаСотрудников.Организация,
		|	РабочиеМестаСотрудников.Подразделение,
		|	РабочиеМестаСотрудников.Должность,
		|	РабочиеМестаСотрудников.ВидЗанятости,
		|	РабочиеМестаСотрудников.ВидСобытия,
		|	РабочиеМестаСотрудников.ДолжностьПоШтатномуРасписанию
		|ПОМЕСТИТЬ ВТПрежняяТаблицаРабочиеМестаСотрудников
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеМестаРаботающихСотрудников.Период,
		|	РабочиеМестаРаботающихСотрудников.Сотрудник,
		|	РабочиеМестаРаботающихСотрудников.Организация,
		|	РабочиеМестаРаботающихСотрудников.Подразделение,
		|	РабочиеМестаРаботающихСотрудников.Должность,
		|	РабочиеМестаРаботающихСотрудников.ВидЗанятости,
		|	РабочиеМестаРаботающихСотрудников.ВидСобытия,
		|	РабочиеМестаРаботающихСотрудников.ДолжностьПоШтатномуРасписанию
		|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
		|ИЗ
		|	ВТПрежняяТаблицаРабочиеМестаСотрудников КАК РабочиеМестаРаботающихСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочиеМестаНеработающихСотрудников.Период,
		|	РабочиеМестаНеработающихСотрудников.Сотрудник,
		|	РабочиеМестаНеработающихСотрудников.Организация,
		|	РабочиеМестаНеработающихСотрудников.Подразделение,
		|	РабочиеМестаНеработающихСотрудников.Должность,
		|	РабочиеМестаНеработающихСотрудников.ВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение),
		|	РабочиеМестаНеработающихСотрудников.ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК РабочиеМестаНеработающихСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрежняяТаблицаРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО (РабочиеМестаСотрудников.Сотрудник = РабочиеМестаНеработающихСотрудников.Сотрудник)
		|ГДЕ
		|	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL ";
		Запрос.Выполнить();
	КонецЕсли;
	
	// Определяем источники данных для периодов:
	// нужны ли изменения графика, плановых показателей и т.д.
	// Источники данных для периодов определяются с точностью до начисления, 
	// а также в целом - необходимость запроса к таким данным.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление,
		|	МАКСИМУМ(Начисления.ТребуетсяРасчетВремени) КАК ТребуютсяИзмененияГрафикаРаботы,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьВнутрисменныеОтклонения,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуютсяИзмененияПлановыхНачислений,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА Начисления.КоличествоПостоянныхПоказателей > 0
		|					ИЛИ ПоказателиЗависимыеОтТарифнойСтавки.Показатель ЕСТЬ НЕ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ТребуютсяИзмененияПериодическихПоказателей
		|ПОМЕСТИТЬ ВТТребованияНачислений
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиЗависимыеОтТарифнойСтавки
		|		ПО (ПоказателиЗависимыеОтТарифнойСтавки.Ссылка = Начисления.Ссылка)
		|			И (ПоказателиЗависимыеОтТарифнойСтавки.Показатель В (&ПоказателиЗависимыеОтТарифнойСтавки))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиТипаСтаж
		|		ПО (ПоказателиТипаСтаж.Ссылка = Начисления.Ссылка)
		|			И (ПоказателиТипаСтаж.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|ГДЕ
		|	(Начисления.Ссылка В
		|				(ВЫБРАТЬ
		|					СотрудникиНачисления.Начисление
		|				ИЗ
		|					ВТСотрудникиНачисления КАК СотрудникиНачисления)
		|			ИЛИ НЕ &ПоСотрудникамНачислениям
		|			ИЛИ НЕ &НачисленияОпределены)
		|	И (Начисления.НачисляетсяПриРасчетеПервойПоловиныМесяца
		|			ИЛИ НЕ &РасчетПервойПоловиныМесяца)
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ТребованияНачислений.ТребуютсяИзмененияГрафикаРаботы), ЛОЖЬ) КАК ТребуютсяИзмененияГрафикаРаботы,
		|	ЕСТЬNULL(МАКСИМУМ(ТребованияНачислений.ЕстьВнутрисменныеОтклонения), ЛОЖЬ) КАК ЕстьВнутрисменныеОтклонения,
		|	ЕСТЬNULL(МАКСИМУМ(ТребованияНачислений.ТребуютсяИзмененияПлановыхНачислений), ЛОЖЬ) КАК ТребуютсяИзмененияПлановыхНачислений,
		|	ЕСТЬNULL(МАКСИМУМ(ТребованияНачислений.ТребуютсяИзмененияПериодическихПоказателей), ЛОЖЬ) КАК ТребуютсяИзмененияПериодическихПоказателей
		|ИЗ
		|	ВТТребованияНачислений КАК ТребованияНачислений";
	
	ТребуютсяИзмененияГрафикаРаботы = Ложь;
	ТребуютсяИзмененияПлановыхНачислений = Ложь;
	ЕстьВнутрисменныеОтклонения = Ложь;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПоСотрудникамНачислениям", ДополнительныеПараметры.СотрудникиНачисления <> Неопределено);
	Запрос.УстановитьПараметр("РасчетПервойПоловиныМесяца", ДополнительныеПараметры.РасчетПервойПоловиныМесяца);
	Запрос.УстановитьПараметр("НачисленияОпределены", НачисленияОпределены);
	
	// Показатели, зависимые от тарифной ставки, т.к. рассчитываются на основе ее значения, 
	// а значит требуется учитывать ее изменение для таких начислений.
	ПоказателиЗависимыеОтТарифнойСтавки = Новый Массив;
	ПоказателиЗависимыеОтТарифнойСтавки.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
	ПоказателиЗависимыеОтТарифнойСтавки.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
	ПоказателиЗависимыеОтТарифнойСтавки.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
	Запрос.УстановитьПараметр("ПоказателиЗависимыеОтТарифнойСтавки", ПоказателиЗависимыеОтТарифнойСтавки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТребуютсяИзмененияГрафикаРаботы = Выборка.ТребуютсяИзмененияГрафикаРаботы;
		ТребуютсяИзмененияПлановыхНачислений = Выборка.ТребуютсяИзмененияПлановыхНачислений;
		ЕстьВнутрисменныеОтклонения = Выборка.ЕстьВнутрисменныеОтклонения;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник");
	
	// Сведения об общих графиков нет необходимости ограничивать: сотрудники нам уже доступны, 
	// если по ним не получить графики, то и расчет будет провести невозможно.
	УстановитьПривилегированныйРежим(Истина);
	
	// Срез графиков получаем в любом случае для получения значения графика на дату начала.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрафикРаботыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
	
	Если ТребуютсяИзмененияГрафикаРаботы Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
			"ГрафикРаботыСотрудников",
			МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтра);
	Иначе
		// Добавляем временную таблицу-"пустышку", чтобы не переписывать соединения.
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТГрафикРаботыСотрудников";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РасчетЛьгот = ДополнительныеПараметры.РасчетЛьгот;
	
	Если ТребуютсяИзмененияПлановыхНачислений Тогда
		ПараметрыСреза = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		// Настраиваем фильтр начислений.
		ИсключаемыеКатегорииНачислений = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
		Если Не РасчетЛьгот Тогда 
			ИсключаемыеКатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Льгота);
		КонецЕсли;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыСреза.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "НЕ В", ИсключаемыеКатегорииНачислений);
		Если ДополнительныеПараметры.РасчетПервойПоловиныМесяца Тогда
			// Ограничим начислениями, только участвующими в расчете за первую половину месяца.
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыСреза.Отборы, "Начисление.НачисляетсяПриРасчетеПервойПоловиныМесяца", "=", Истина);
		КонецЕсли;
		Если РасчетЛьгот Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		       Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			   Модуль.ДополнитьОтборПлановыхНачислений(ПараметрыСреза.Отборы);
		   КонецЕсли;
		КонецЕсли;
		
		ПараметрыДвижений = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыДвижений.Отборы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПараметрыСреза.Отборы);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ПлановыеНачисления", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыСреза);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ПлановыйФОТ", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыСреза);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПлановыеНачисления", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыДвижений);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПлановыйФОТ", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра, ПараметрыДвижений);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
		
		ОписаниеФильтра.ИзмеренияФильтра = "Сотрудник,Организация";
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
		
		Если РасчетЛьгот Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		       Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			   Модуль.ДополнитьВТПлановыеНачисленияСрезПоследних(МенеджерВременныхТаблиц, ДополнительныеПараметры.ДокументСсылка);
		   КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Графики работы срез - всегда, движения - по требованию.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Период,
	|	ГрафикРаботыСотрудников.Сотрудник,
	|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафикРаботыСотрудниковСрезИДвижения
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудников";
	
	Если ТребуютсяИзмененияГрафикаРаботы Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудников.Сотрудник,
		|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|";
	КонецЕсли;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Плановые начисления, их применение и показатели - получаем по требованию.
	Если ТребуютсяИзмененияПлановыхНачислений Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Применение
		|ПОМЕСТИТЬ ВТПрименениеПлановыхНачисленийСрезИДвижения
		|ИЗ
		|	ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Применение
		|ИЗ
		|	ВТПрименениеПлановыхНачислений КАК ПрименениеПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	ПлановыеНачисления.Используется,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ПлановыеНачисления.Размер
		|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
		|	КОНЕЦ КАК Размер,
		|	Начисления.Рассчитывается
		|ПОМЕСТИТЬ ВТПлановыеНачисленияМесяца
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Начисления.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|			И (ПлановыеНачисления.Используется)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	ПлановыеНачисления.Используется,
		|	ВЫБОР
		|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
		|			ТОГДА ПлановыеНачисления.Размер
		|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
		|	КОНЕЦ,
		|	Начисления.Рассчитывается
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|			И (ПлановыеНачисления.Используется)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.МесяцыНачисления КАК Месяцы
		|		ПО (Месяцы.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Месяцы.Месяц = &НомерМесяца)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПлановыеНачисления.Период, ПлановыйФОТ.Период),
		|	ЕСТЬNULL(ПлановыеНачисления.Сотрудник, ПлановыйФОТ.Сотрудник),
		|	ЕСТЬNULL(ПлановыеНачисления.Начисление, ПлановыйФОТ.Начисление),
		|	ЕСТЬNULL(ПлановыеНачисления.ДокументОснование, ПлановыйФОТ.ДокументОснование),
		|	ЕСТЬNULL(ПлановыеНачисления.Используется, ИСТИНА),
		|	ЕСТЬNULL(ПлановыйФОТ.ВкладВФОТ, ПлановыеНачисления.Размер),
		|	Начисления.Рассчитывается
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПлановыйФОТ КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Период = ПлановыйФОТ.Период
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Начисления.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ПлановыеНачисления.Период, ПлановыйФОТ.Период),
		|	ЕСТЬNULL(ПлановыеНачисления.Сотрудник, ПлановыйФОТ.Сотрудник),
		|	ЕСТЬNULL(ПлановыеНачисления.Начисление, ПлановыйФОТ.Начисление),
		|	ЕСТЬNULL(ПлановыеНачисления.ДокументОснование, ПлановыйФОТ.ДокументОснование),
		|	ЕСТЬNULL(ПлановыеНачисления.Используется, ИСТИНА),
		|	ЕСТЬNULL(ПлановыйФОТ.ВкладВФОТ, ПлановыеНачисления.Размер),
		|	Начисления.Рассчитывается
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПлановыйФОТ КАК ПлановыйФОТ
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
		|			И ПлановыеНачисления.Период = ПлановыйФОТ.Период
		|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
		|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.МесяцыНачисления КАК Месяцы
		|		ПО (Месяцы.Ссылка = ПлановыеНачисления.Начисление)
		|			И (Месяцы.Месяц = &НомерМесяца)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	МАКСИМУМ(ПлановыеНачисленияСлева.Период) КАК ДатаСлева
		|ПОМЕСТИТЬ ВТПлановыеНачисленияДатыСлева
		|ИЗ
		|	ВТПлановыеНачисленияМесяца КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияМесяца КАК ПлановыеНачисленияСлева
		|		ПО (ПлановыеНачисленияСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисленияСлева.ДокументОснование = ПлановыеНачисления.ДокументОснование)
		|			И (ПлановыеНачисленияСлева.Период < ПлановыеНачисления.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	ВЫБОР
		|	 КОГДА ПлановыеНачисления.ДокументОснование ССЫЛКА Документ.Командировка
		|		ТОГДА
		|           ПлановыеНачисления.ДокументОснование.ВидУчетаВремениДляСредней
		|     ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПустаяСсылка)
		|   КОНЕЦ КАК ВидУчетаВремениДляСредней,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСрезИДвижения
		|ИЗ
		|	ВТПлановыеНачисленияМесяца КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияДатыСлева КАК ПлановыеНачисленияДатыСлева
		|		ПО (ПлановыеНачисленияДатыСлева.Период = ПлановыеНачисления.Период)
		|			И (ПлановыеНачисленияДатыСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияДатыСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисленияДатыСлева.ДокументОснование = ПлановыеНачисления.ДокументОснование)
		|			И (ПлановыеНачисления.Рассчитывается = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияМесяца КАК ПлановыеНачисленияСлева
		|		ПО (ПлановыеНачисленияСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисленияСлева.ДокументОснование = ПлановыеНачисления.ДокументОснование)
		|			И (ПлановыеНачисленияСлева.Период = ПлановыеНачисленияДатыСлева.ДатаСлева)
		|			И (ПлановыеНачисленияСлева.Используется = ПлановыеНачисления.Используется)
		|ГДЕ
		|	ПлановыеНачисленияСлева.Начисление ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	ВЫБОР
		|	 КОГДА ПлановыеНачисления.ДокументОснование ССЫЛКА Документ.Командировка
		|		ТОГДА
		|           ПлановыеНачисления.ДокументОснование.ВидУчетаВремениДляСредней
		|     ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПустаяСсылка)
		|   КОНЕЦ КАК ВидУчетаВремениДляСредней,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер
		|ИЗ
		|	ВТПлановыеНачисленияМесяца КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияДатыСлева КАК ПлановыеНачисленияДатыСлева
		|		ПО (ПлановыеНачисленияДатыСлева.Период = ПлановыеНачисления.Период)
		|			И (ПлановыеНачисленияДатыСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияДатыСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисленияДатыСлева.ДокументОснование = ПлановыеНачисления.ДокументОснование)
		|			И (ПлановыеНачисления.Рассчитывается = ЛОЖЬ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияМесяца КАК ПлановыеНачисленияСлева
		|		ПО (ПлановыеНачисленияСлева.Сотрудник = ПлановыеНачисления.Сотрудник)
		|			И (ПлановыеНачисленияСлева.Начисление = ПлановыеНачисления.Начисление)
		|			И (ПлановыеНачисленияСлева.ДокументОснование = ПлановыеНачисления.ДокументОснование)
		|			И (ПлановыеНачисленияСлева.Период = ПлановыеНачисленияДатыСлева.ДатаСлева)
		|			И (ПлановыеНачисленияСлева.Используется = ПлановыеНачисления.Используется)
		|			И (ПлановыеНачисленияСлева.Размер = ПлановыеНачисления.Размер)
		|ГДЕ
		|	ПлановыеНачисленияСлева.Начисление ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейСотрудников.Период,
		|	ЗначенияПериодическихПоказателейСотрудников.Сотрудник,
		|	ЗначенияПериодическихПоказателейСотрудников.Показатель,
		|	ЗначенияПериодическихПоказателейСотрудников.ДокументОснование,
		|	ЗначенияПериодическихПоказателейСотрудников.Значение
		|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗначенияПериодическихПоказателейСотрудников.Период,
		|	ЗначенияПериодическихПоказателейСотрудников.Сотрудник,
		|	ЗначенияПериодическихПоказателейСотрудников.Показатель,
		|	ЗначенияПериодическихПоказателейСотрудников.ДокументОснование,
		|	ЗначенияПериодическихПоказателейСотрудников.Значение
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателейСотрудников";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НомерМесяца", Месяц(Окончание));
		Запрос.Выполнить();
	Иначе
		// Чтобы оставить неизменным текст запроса, использующий временные таблицы
		// создаем таблицы - "пустышки".
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ИСТИНА КАК Применение
		|ПОМЕСТИТЬ ВТПрименениеПлановыхНачисленийСрезИДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЛОЖЬ КАК Применение
		|ПОМЕСТИТЬ ВТПрименениеПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	0 КАК Размер,
		|	ЛОЖЬ КАК Используется
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	0 КАК ВкладВФОТ
		|ПОМЕСТИТЬ ВТПлановыйФОТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПустаяСсылка) КАК ВидУчетаВремениДляСредней,
		|	0 КАК Размер,
		|	ЛОЖЬ КАК Используется
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСрезИДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка) КАК Показатель,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	0 КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка) КАК Показатель,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
		|	0 КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисленияСрезИДвижения.Начисление,
		|	ПлановыеНачисленияСрезИДвижения.ДокументОснование
		|ПОМЕСТИТЬ ВТОснованияНачислений
		|ИЗ
		|	ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисленияСрезИДвижения";
				  
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если ТребуютсяИзмененияГрафикаРаботы Или ЕстьВнутрисменныеОтклонения Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.Сотрудник
			|ИЗ
			|	ВТСотрудникиПериоды КАК Сотрудники";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		РезультатЗапроса = Запрос.Выполнить();
		
		// Нужно рассчитать фактическое время для получения данных для начисления
		// выполнить формирование данных о времени.
		СотрудникиПериоды = УчетРабочегоВремени.ПустаяТаблицаУстановкиПериодовРегистрацииВремениПоСотрудникам();
		СотрудникиПериодыРегистрации = УчетРабочегоВремени.ПустаяТаблицаУстановкиПериодовРегистрацииВремениПоСотрудникам();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Создаем строки по всем месяцам, попадающим в интервал
			НачалоМесяца = НачалоМесяца(Начало);
			Пока НачалоМесяца < КонецДня(Окончание) Цикл
				НоваяСтрока = СотрудникиПериоды.Добавить();
				НоваяСтрока.Сотрудник = Выборка.Сотрудник;
				НоваяСтрока.ПериодДействия = НачалоМесяца;
				// Копируем строку в соседнюю таблицу 
				ЗаполнитьЗначенияСвойств(СотрудникиПериодыРегистрации.Добавить(), НоваяСтрока);
				НачалоМесяца = ДобавитьМесяц(НачалоМесяца, 1);
			КонецЦикла;
		КонецЦикла;
		
		// Строки, в которых незаполнен период регистрации времени передаем 
		// для заполнения подсистеме УчетРабочегоВремени.
		Если СотрудникиПериодыРегистрации.Количество() > 0 Тогда
			УчетРабочегоВремени.УстановитьПериодыРегистрацииВремениПоСотрудникам(СотрудникиПериодыРегистрации, МесяцНачисления);
			// Заполняем в исходной таблице полученные периоды регистрации времени.
			Для Каждого СтрокаТаблицы Из СотрудникиПериодыРегистрации Цикл
				ОтборСтрок = Новый Структура("Сотрудник, ПериодДействия");
				ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТаблицы);
				ОтборСтрок.Вставить("ПериодРегистрации", Дата(1, 1, 1));
				НайденныеСтроки = СотрудникиПериоды.НайтиСтроки(ОтборСтрок);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.ПериодРегистрации = СтрокаТаблицы.ПериодРегистрации;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// И формируем записи рабочего времени по полученным данным.
		УчетРабочегоВремени.СформироватьЗаписиРабочегоВремениСотрудников(СотрудникиПериоды, Начало, Окончание);
		
		// Используем полученную таблицу для связи с регистром ГрафикиРаботыПоВидамВремени.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПериодыРегистрацииВремени.Сотрудник,
		|	ПериодыРегистрацииВремени.ПериодДействия,
		|	ПериодыРегистрацииВремени.ПериодРегистрации
		|ПОМЕСТИТЬ ВТПериодыРегистрацииВремени
		|ИЗ
		|	&ПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ПериодыРегистрацииВремени", СотрудникиПериоды);
		Запрос.Выполнить();
		
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодДействия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТПериодыРегистрацииВремени";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Начало, Окончание, "МЕСЯЦ", "Период", "ВТДатыНачалаМесяцев");

	// Периоды из разных источников объединяем в единый набор, 
	// при этом про каждый период известно, когда он используется.
	// Затем для каждого начисления составляем интервалы только из периодов, 
	// которые требуются особенностями именно этого начисления,
	// Для начислений, использующих базовый период действия требуется рассчитать его.
	// Если период связан с изменением показателей, то используем его только для тех начислений, 
	// в формулах которых этот показатель используется.
	
	// Определение периодов начисления основной оплаты труда.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Начисления.ПериодДействияКонец, ДЕНЬ, 1), ДЕНЬ) КАК Период,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета
	|ПОМЕСТИТЬ ВТПериодыНачисленияОсновнойОплатыТруда
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
	|			И (Начисления.ПериодДействия МЕЖДУ СотрудникиПериоды.НачалоМесяца И СотрудникиПериоды.КонецМесяца)
	|			И Начисления.ПериодДействияКонец > СотрудникиПериоды.Период
	|			И Начисления.ПериодДействияКонец < СотрудникиПериоды.ДатаОкончания
	|			И (Начисления.Регистратор <> &Регистратор)
	|			И (Начисления.Регистратор <> &ИсправленныйДокумент)
	|			И (Начисления.Сторно = ЛОЖЬ)
	|			И (Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА)
	|			И (Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА)
	|			И (Начисления.ПериодРегистрации <= &МесяцНачисления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторноНачисления
	|		ПО (СторноНачисления.Сотрудник = Начисления.Сотрудник)
	|			И (СторноНачисления.ПериодДействия = Начисления.ПериодДействия)
	|			И (СторноНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (СторноНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
	|			И (СторноНачисления.Сторно = ИСТИНА)
	|			И (СторноНачисления.Регистратор <> &Регистратор)
	|			И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
	|ГДЕ
	|	СторноНачисления.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ПериодДействияНачало,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
	|			И (Начисления.ПериодДействия МЕЖДУ СотрудникиПериоды.НачалоМесяца И СотрудникиПериоды.КонецМесяца)
	|			И Начисления.ПериодДействияНачало > СотрудникиПериоды.Период
	|			И Начисления.ПериодДействияНачало < СотрудникиПериоды.ДатаОкончания
	|			И (Начисления.Регистратор <> &Регистратор)
	|			И (Начисления.Регистратор <> &ИсправленныйДокумент)
	|			И (Начисления.Сторно = ЛОЖЬ)
	|			И (Начисления.ВидРасчета.ЗачетНормыВремени = ИСТИНА)
	|			И (Начисления.ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА)
	|			И (Начисления.ПериодРегистрации <= &МесяцНачисления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторноНачисления
	|		ПО (СторноНачисления.Сотрудник = Начисления.Сотрудник)
	|			И (СторноНачисления.ПериодДействия = Начисления.ПериодДействия)
	|			И (СторноНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (СторноНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
	|			И (СторноНачисления.Сторно = ИСТИНА)
	|			И (СторноНачисления.Регистратор <> &Регистратор)
	|			И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
	|ГДЕ
	|	СторноНачисления.Сотрудник ЕСТЬ NULL ";
	
	// Выполняем в привилегированном режиме, чтобы учесть оплату труда, которая есть, но стала недоступной.
	// Дополнительное соединение по ПериодДействия выполняется для оптимизации.
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Регистратор", ДополнительныеПараметры.ДокументСсылка);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ДополнительныеПараметры.ИсправленныйДокумент);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыИзменений.Период,
	|	НАЧАЛОПЕРИОДА(ПериодыИзменений.Период, МЕСЯЦ) КАК НачалоМесяца,
	|	КОНЕЦПЕРИОДА(ПериодыИзменений.Период, МЕСЯЦ) КАК КонецМесяца,
	|	ПериодыИзменений.Сотрудник,
	|	ПериодыИзменений.ИзменениеПодразделения,
	|	ПериодыИзменений.ЭтоНачалоМесяца,
	|	ПериодыИзменений.ИзменениеГрафика,
	|	ПериодыИзменений.ИзменениеПлановыхНачислений,
	|	ПериодыИзменений.ИзменениеПериодическихПоказателей,
	|	ПериодыИзменений.ИзменениеЗачетНормыВремени,
	|	ПериодыИзменений.ОбъектИзменения,
	|	ПериодыИзменений.ДокументОснование
	|ПОМЕСТИТЬ ВТПериодыИзменений
	|ИЗ
	|	(ВЫБРАТЬ
	|		КадроваяИсторияСотрудников.Период КАК Период,
	|		КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|		ИСТИНА КАК ИзменениеПодразделения,
	|		ЛОЖЬ КАК ЭтоНачалоМесяца,
	|		ЛОЖЬ КАК ИзменениеГрафика,
	|		ЛОЖЬ КАК ИзменениеПлановыхНачислений,
	|		ЛОЖЬ КАК ИзменениеПериодическихПоказателей,
	|		ЛОЖЬ КАК ИзменениеЗачетНормыВремени,
	|		NULL КАК ОбъектИзменения,
	|		NULL КАК ДокументОснование
	|	ИЗ
	|		ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПериодыНачисленияОсновнойОплатыТруда.Период,
	|		ПериодыНачисленияОсновнойОплатыТруда.Сотрудник,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ПериодыНачисленияОсновнойОплатыТруда.ВидРасчета,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		ВТПериодыНачисленияОсновнойОплатыТруда КАК ПериодыНачисленияОсновнойОплатыТруда
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА КадровыеДанные.ДатаПриема >= &ДатаНачала
	|				ТОГДА КадровыеДанные.ДатаПриема
	|			ИНАЧЕ &ДатаНачала
	|		КОНЕЦ,
	|		СотрудникиНачисления.Сотрудник,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		СотрудникиНачисления.Начисление,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		ВТСотрудникиНачисления КАК СотрудникиНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
	|			ПО (КадровыеДанные.Сотрудник = СотрудникиНачисления.Сотрудник)
	|				И (КадровыеДанные.ДатаПриема <= &ДатаОкончания)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДатыНачалаМесяцев.Период,
	|		СотрудникиПериоды.Сотрудник,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ВТДатыНачалаМесяцев КАК ДатыНачалаМесяцев
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|			ПО (ДатыНачалаМесяцев.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
	|			ПО (КадровыеДанные.Сотрудник = СотрудникиПериоды.Сотрудник)
	|				И ДатыНачалаМесяцев.Период >= КадровыеДанные.ДатаПриема
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГрафикРаботыСотрудников.Период,
	|		ГрафикРаботыСотрудников.Сотрудник,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ВТГрафикРаботыСотрудниковСрезИДвижения КАК ГрафикРаботыСотрудников
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрименениеПлановыхНачислений.Период,
	|		ПрименениеПлановыхНачислений.Сотрудник,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПлановыеНачисления.Период,
	|		ПлановыеНачисления.Сотрудник,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ПлановыеНачисления.Начисление,
	|		ПлановыеНачисления.ДокументОснование
	|	ИЗ
	|		ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПериодическихПоказателейСотрудников.Период,
	|		ЗначенияПериодическихПоказателейСотрудников.Сотрудник,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		ЗначенияПериодическихПоказателейСотрудников.Показатель,
	|		ЗначенияПериодическихПоказателейСотрудников.ДокументОснование
	|	ИЗ
	|		ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников) КАК ПериодыИзменений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыИзменений.Сотрудник КАК Сотрудник,
	|	ПериодыИзменений.НачалоМесяца КАК Месяц
	|ПОМЕСТИТЬ ВТИндивидуальныеГрафики
	|ИЗ
	|	ВТПериодыИзменений КАК ПериодыИзменений
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиПоВидамВремени
	|			ГДЕ
	|				ПериодыИзменений.Сотрудник = ГрафикиПоВидамВремени.ГрафикРаботы
	|				И ПериодыИзменений.НачалоМесяца = ГрафикиПоВидамВремени.Месяц
	|				И ГрафикиПоВидамВремени.ПериодРегистрации <= &ПериодРегистрации)";
	
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцНачисления);
	Запрос.Выполнить();
	
	Если ДополнительныеПараметры.СотрудникиНачисления <> Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаНачала,
		|	СотрудникиНачисления.Сотрудник,
		|	СотрудникиНачисления.Начисление,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование
		|ПОМЕСТИТЬ ВТПериодыИспользованияНачислений
		|ИЗ
		|	ВТСотрудникиНачисления КАК СотрудникиНачисления";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыИзменений.Сотрудник,
		|	ПериодыИзменений.Период,
		|	МАКСИМУМ(ГрафикРаботыСотрудников.Период) КАК ДатаИзмененияОбщегоГрафика
		|ПОМЕСТИТЬ ВТДатыИзмененияОбщихГрафиков
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезИДвижения КАК ГрафикРаботыСотрудников
		|		ПО (ГрафикРаботыСотрудников.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ГрафикРаботыСотрудников.Период <= ПериодыИзменений.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзменений.Сотрудник,
		|	ПериодыИзменений.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзменений.Период,
		|	ПериодыИзменений.НачалоМесяца,
		|	ПериодыИзменений.КонецМесяца,
		|	ПериодыИзменений.Сотрудник,
		|	ЕСТЬNULL(ИндивидуальныеГрафики.Сотрудник, ГрафикРаботыСотрудников.ГрафикРаботы) КАК ГрафикРаботы,
		|	ГрафикРаботыСотрудников.ГрафикРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ЕСТЬNULL(ПериодыРегистрацииВремени.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрацииВремени
		|ПОМЕСТИТЬ ВТГрафикиРаботыПоПериодамИзменений
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныеГрафики
		|		ПО (ИндивидуальныеГрафики.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ИндивидуальныеГрафики.Месяц = ПериодыИзменений.НачалоМесяца)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыИзмененияОбщихГрафиков КАК ДатыИзмененияОбщихГрафиков
		|		ПО (ДатыИзмененияОбщихГрафиков.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ДатыИзмененияОбщихГрафиков.Период = ПериодыИзменений.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезИДвижения КАК ГрафикРаботыСотрудников
		|		ПО (ГрафикРаботыСотрудников.Сотрудник = ПериодыИзменений.Сотрудник)
		|			И (ГрафикРаботыСотрудников.Период = ДатыИзмененияОбщихГрафиков.ДатаИзмененияОбщегоГрафика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
		|		ПО ПериодыИзменений.Сотрудник = ПериодыРегистрацииВремени.Сотрудник
		|			И ПериодыИзменений.НачалоМесяца = ПериодыРегистрацииВремени.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзменений.Период,
		|	ПериодыИзменений.Сотрудник,
		|	ПериодыИзменений.НачалоМесяца,
		|	ПериодыИзменений.КонецМесяца,
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	ЕСТЬNULL(ОснованияНачислений.ДокументОснование, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТПоЗначениямПоказателей
		|ИЗ
		|	ВТПериодыИзменений КАК ПериодыИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.ОпределяющийПоказатель)
		|			И (НачисленияПоказатели.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете))
		|			И (НЕ НачисленияПоказатели.Ссылка.ВАрхиве)
		|			И (НЕ НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОснованияНачислений КАК ОснованияНачислений
		|		ПО (НачисленияПоказатели.Ссылка = ОснованияНачислений.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзменений.Период,
		|	ПериодыИзменений.Сотрудник,
		|	ПериодыИзменений.НачалоМесяца,
		|	ПериодыИзменений.КонецМесяца,
		|	ПериодыИзменений.ГрафикРаботы,
		|	ПериодыИзменений.ПроизводственныйКалендарь,
		|	ПериодыИзменений.ПериодРегистрацииВремени,
		|	Начисления.Ссылка КАК Начисление,
		|	ЕСТЬNULL(ОснованияНачислений.ДокументОснование, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
		|	Начисления.СпособВыполненияНачисления,
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени
		|ПОМЕСТИТЬ ВТПоЗначениямВидовВремени
		|ИЗ
		|	ВТГрафикиРаботыПоПериодамИзменений КАК ПериодыИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)))
		|			И (НЕ Начисления.ВАрхиве)
		|			И (НЕ Начисления.ЯвляетсяЛьготой)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОснованияНачислений КАК ОснованияНачислений
		|		ПО (Начисления.Ссылка = ОснованияНачислений.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ПоЗначениямПоказателей.Период) КАК Период,
		|	ПоЗначениямПоказателей.Сотрудник,
		|	ПоЗначениямПоказателей.Начисление,
		|	ПоЗначениямПоказателей.ДокументОснование
		|ПОМЕСТИТЬ ВТВсеПериодыИспользованияНачислений
		|ИЗ
		|	ВТПоЗначениямПоказателей КАК ПоЗначениямПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателейСотрудников
		|		ПО (ЗначенияРазовыхПоказателейСотрудников.ПериодДействия = ПоЗначениямПоказателей.НачалоМесяца)
		|			И (ЗначенияРазовыхПоказателейСотрудников.Сотрудник = ПоЗначениямПоказателей.Сотрудник)
		|			И (ЗначенияРазовыхПоказателейСотрудников.Показатель = ПоЗначениямПоказателей.Показатель)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоЗначениямПоказателей.Сотрудник,
		|	ПоЗначениямПоказателей.Начисление,
		|	ПоЗначениямПоказателей.ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоЗначениямПоказателей.Период,
		|	ПоЗначениямПоказателей.Сотрудник,
		|	ПоЗначениямПоказателей.Начисление,
		|	ПоЗначениямПоказателей.ДокументОснование
		|ИЗ
		|	ВТПоЗначениямПоказателей КАК ПоЗначениямПоказателей
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателейСотрудников
		|			ГДЕ
		|				ЗначенияОперативныхПоказателейСотрудников.Период МЕЖДУ ПоЗначениямПоказателей.Период И ПоЗначениямПоказателей.КонецМесяца
		|				И ЗначенияОперативныхПоказателейСотрудников.Сотрудник = ПоЗначениямПоказателей.Сотрудник
		|				И ЗначенияОперативныхПоказателейСотрудников.Показатель = ПоЗначениямПоказателей.Показатель)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоЗначениямВидовВремени.Период,
		|	ПоЗначениямВидовВремени.Сотрудник,
		|	ПоЗначениямВидовВремени.Начисление,
		|	ПоЗначениямВидовВремени.ДокументОснование
		|ИЗ
		|	ВТПоЗначениямВидовВремени КАК ПоЗначениямВидовВремени
		|ГДЕ
		|	ПоЗначениямВидовВремени.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете)
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ГДЕ
		|				ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ПоЗначениямВидовВремени.Период И ПоЗначениямВидовВремени.КонецМесяца
		|				И ГрафикиРаботыПоВидамВремени.Месяц = ПоЗначениямВидовВремени.НачалоМесяца
		|				И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ПоЗначениямВидовВремени.ГрафикРаботы
		|				И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ПоЗначениямВидовВремени.ВидУчетаВремени
		|				И ГрафикиРаботыПоВидамВремени.ПериодРегистрации = ПоЗначениямВидовВремени.ПериодРегистрацииВремени)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоЗначениямВидовВремени.Период,
		|	ПоЗначениямВидовВремени.Сотрудник,
		|	ПоЗначениямВидовВремени.Начисление,
		|	ПоЗначениямВидовВремени.ДокументОснование
		|ИЗ
		|	ВТПоЗначениямВидовВремени КАК ПоЗначениямВидовВремени
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ПоЗначениямВидовВремени.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете))
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ПоЗначениямВидовВремени.Период И ПоЗначениямВидовВремени.КонецМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = ПоЗначениямВидовВремени.НачалоМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ПоЗначениямВидовВремени.ГрафикРаботы)
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ПоЗначениямВидовВремени.ВидУчетаВремени)
		|			И (ГрафикиРаботыПоВидамВремени.ПериодРегистрации = ПоЗначениямВидовВремени.ПериодРегистрацииВремени)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДатыПраздничныхДней
		|		ПО (ДатыПраздничныхДней.ПроизводственныйКалендарь = ПоЗначениямВидовВремени.ПроизводственныйКалендарь)
		|			И (ДатыПраздничныхДней.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
		|			И (ДатыПраздничныхДней.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|			И (ДатыПраздничныхДней.Дата = ГрафикиРаботыПоВидамВремени.Дата)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование
		|ИЗ
		|	ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование
		|ИЗ
		|	ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
		|		ПО (ПлановыеНачисления.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИспользованияНачислений.Период,
		|	ПериодыИспользованияНачислений.Сотрудник,
		|	ПериодыИспользованияНачислений.Начисление,
		|	ПериодыИспользованияНачислений.ДокументОснование
		|ПОМЕСТИТЬ ВТПериодыИспользованияНачислений
		|ИЗ
		|	ВТВсеПериодыИспользованияНачислений КАК ПериодыИспользованияНачислений";
		
		Если РасчетЛьгот Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ НачисленияПоказатели.Ссылка.ЯвляетсяЛьготой", "ИСТИНА");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕ Начисления.ЯвляетсяЛьготой", "ИСТИНА");
		КонецЕсли;
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСотрудников.Сотрудник,
	|	НачисленияСотрудников.Начисление,
	|	НачисленияСотрудников.ДокументОснование
	|ПОМЕСТИТЬ ВТНачисленияСотрудников
	|ИЗ
	|	ВТПериодыИспользованияНачислений КАК НачисленияСотрудников";
	
	Запрос.Выполнить();
	
	// Определяем даты изменения отдельных начислений для того, 
	// чтобы разделять их на отдельные строки по периодам в зависимости от специфических условий.
	СоздатьВТДополнительныеДатыИзмененияНачислений(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыИзменений.Период,
	|	ПериодыИзменений.Сотрудник,
	|	ПериодыИспользованияНачислений.Начисление,
	|	ПериодыИспользованияНачислений.ДокументОснование
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПериодыИзменений КАК ПериодыИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИспользованияНачислений КАК ПериодыИспользованияНачислений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТребованияНачислений КАК ТребованияНачислений
	|			ПО (ТребованияНачислений.Начисление = ПериодыИспользованияНачислений.Начисление)
	|		ПО ПериодыИзменений.Сотрудник = ПериодыИспользованияНачислений.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ПериодыИзменений.ЭтоНачалоМесяца
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыИзменений.ИзменениеПодразделения
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыИзменений.ИзменениеГрафика
	|					ТОГДА ТребованияНачислений.ТребуютсяИзмененияГрафикаРаботы
	|				КОГДА ПериодыИзменений.ИзменениеЗачетНормыВремени
	|					ТОГДА ИСТИНА
	|				КОГДА ПериодыИзменений.ИзменениеПлановыхНачислений
	|					ТОГДА ТребованияНачислений.ТребуютсяИзмененияПлановыхНачислений
	|								И ПериодыИзменений.ОбъектИзменения ЕСТЬ NULL 
	|							ИЛИ ПериодыИзменений.ОбъектИзменения = ПериодыИспользованияНачислений.Начисление
	|								И ПериодыИзменений.ДокументОснование = ПериодыИспользованияНачислений.ДокументОснование
	|				КОГДА ПериодыИзменений.ИзменениеПериодическихПоказателей
	|					ТОГДА ТребованияНачислений.ТребуютсяИзмененияПериодическихПоказателей
	|							И (ПериодыИзменений.ОбъектИзменения ЕСТЬ NULL 
	|								ИЛИ ПериодыИзменений.ОбъектИзменения В
	|										(ВЫБРАТЬ
	|											ПоказателиНачислений.Показатель
	|										ИЗ
	|											ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|										ГДЕ
	|											ПоказателиНачислений.Ссылка = ПериодыИспользованияНачислений.Начисление)
	|									И ПериодыИзменений.ДокументОснование = ПериодыИспользованияНачислений.ДокументОснование)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДополнительныеДатыИзмененияНачислений.Дата,
	|	ДополнительныеДатыИзмененияНачислений.Сотрудник,
	|	ДополнительныеДатыИзмененияНачислений.Начисление,
	|	ДополнительныеДатыИзмененияНачислений.ДокументОснование
	|ИЗ
	|	ВТДополнительныеДатыИзмененияНачислений КАК ДополнительныеДатыИзмененияНачислений
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Период,
	|	НачисленияСотрудников.Сотрудник,
	|	НачисленияСотрудников.Начисление,
	|	НачисленияСотрудников.ДокументОснование
	|ИЗ
	|	ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазовыеНачисления
	|		ПО (БазовыеНачисления.Ссылка = НачисленияСотрудников.Начисление)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
	|		ПО (ПлановыеНачисления.Сотрудник = НачисленияСотрудников.Сотрудник)
	|			И (БазовыеНачисления.ВидРасчета = ПлановыеНачисления.Начисление)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Период,
	|	НачисленияСотрудников.Сотрудник,
	|	НачисленияСотрудников.Начисление,
	|	НачисленияСотрудников.ДокументОснование
	|ИЗ
	|	ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеНачисления
	|		ПО (ВытесняющиеНачисления.Ссылка = НачисленияСотрудников.Начисление)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
	|		ПО (ПлановыеНачисления.Сотрудник = НачисленияСотрудников.Сотрудник)
	|			И (ВытесняющиеНачисления.ВидРасчета = ПлановыеНачисления.Начисление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Сотрудник,
	|	Периоды.Начисление,
	|	Периоды.ДокументОснование,
	|	Периоды.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыСлед.Период) ЕСТЬ NULL 
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ПериодыСлед.Период, СЕКУНДА, -1))
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК ПериодыСлед
	|		ПО Периоды.Период < ПериодыСлед.Период
	|			И Периоды.Сотрудник = ПериодыСлед.Сотрудник
	|			И Периоды.Начисление = ПериодыСлед.Начисление
	|			И Периоды.ДокументОснование = ПериодыСлед.ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Сотрудник,
	|	Периоды.Период,
	|	Периоды.Начисление,
	|	Периоды.ДокументОснование";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Если ДополнительныеПараметры.ИсключатьРанееВыполненныеНачисления Тогда
		// Готовим таблицу, в которой по другим однотипным документам составляются периоды уже выполненных начислений.
		// При заполнении эти периоды будут исключены.
		// Для этого предварительно составляем ВТ определяющих начислений, то есть таких, 
		// наличие которых в указанном периоде будет означать, что этот период уже "покрыт".
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТОпределяющиеНачисления
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ЗачетНормыВремени = ИСТИНА
		|	И Начисления.ЗачетОтработанногоВремени = ИСТИНА";
		
		Запрос.Выполнить();
		
		ИсключитьИнтервалыРанееВыполненныхНачислений(
			МенеджерВременныхТаблиц, 
			Организация, 
			ДополнительныеПараметры.ДокументСсылка, 
			МесяцНачисления, 
			ДополнительныеПараметры.РасчетПервойПоловиныМесяца, 
			ДополнительныеПараметры.ИсправленныйДокумент);
	КонецЕсли;
	
	// Для начислений, зависящих от накапливаемых показателей, 
	// исключаем интервалы начислений, в которых нет значений опорных показателей.
	Если ДополнительныеПараметры.СотрудникиНачисления = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания,
			|	ВЫБОР
			|		КОГДА ИСТИНА В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачисления
			|				ГДЕ
			|					ПоказателиНачисления.Ссылка = Интервалы.Начисление
			|					И ПоказателиНачисления.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете)
			|					И ПоказателиНачисления.Показатель.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИсключатьИнтервал
			|ПОМЕСТИТЬ ВТВсеИнтервалы
			|ИЗ
			|	ВТИнтервалы КАК Интервалы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТИнтервалы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания
			|ПОМЕСТИТЬ ВТИнтервалы
			|ИЗ
			|	ВТВсеИнтервалы КАК Интервалы
			|ГДЕ
			|	НЕ Интервалы.ИсключатьИнтервал
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания
			|ИЗ
			|	ВТВсеИнтервалы КАК Интервалы
			|ГДЕ
			|	Интервалы.ИсключатьИнтервал
			|	И ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателейСотрудников
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|					ПО
			|						НачисленияПоказатели.Ссылка.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюПоказателяПриОкончательномРасчете)
			|							И НачисленияПоказатели.ОпределяющийПоказатель
			|							И НачисленияПоказатели.Ссылка = Интервалы.Начисление
			|							И (ЗначенияОперативныхПоказателейСотрудников.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
			|							И ЗначенияОперативныхПоказателейСотрудников.Сотрудник = Интервалы.Сотрудник
			|							И ЗначенияОперативныхПоказателейСотрудников.Показатель = НачисленияПоказатели.Показатель)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТВсеИнтервалы";
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// Определяем даты базового периода.
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Интервалы.Начисление,
	|	Интервалы.ДокументОснование,
	|	Интервалы.ДатаНачала КАК ИсходнаяДатаНачала,
	|	Интервалы.ДатаОкончания КАК ИсходнаяДатаОкончания,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -1)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, КВАРТАЛ)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, КВАРТАЛ), КВАРТАЛ, -1)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
	|			ТОГДА НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, ГОД)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, ГОД), ГОД, -1)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -Начисления.КоличествоМесяцевБазовогоПериода - Начисления.СдвигБазовогоПериода + 1)
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Интервалы.ДатаОкончания, МЕСЯЦ, -1), МЕСЯЦ)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал)
	|			ТОГДА КОНЕЦПЕРИОДА(Интервалы.ДатаОкончания, КВАРТАЛ)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Интервалы.ДатаОкончания, КВАРТАЛ, -1), КВАРТАЛ)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийГод)
	|			ТОГДА КОНЕЦПЕРИОДА(Интервалы.ДатаОкончания, ГОД)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Интервалы.ДатаОкончания, ГОД, -1), ГОД)
	|		КОГДА Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев)
	|			ТОГДА КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(Интервалы.ДатаОкончания, МЕСЯЦ, -Начисления.СдвигБазовогоПериода), МЕСЯЦ)
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыРасчетаБазовыхНачислений
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = Интервалы.Начисление)
	|			И (Начисления.ТребуетсяРасчетБазы)
	|			И (Начисления.ПериодРасчетаБазовыхНачислений <> ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц))";
	
	Запрос.Выполнить();
	
	// Определяем графики работы по интервалам.
	// Строим таблицу ВТСотрудникиВидыУчетаВремени для того, чтобы понять, используется ли конкретный вид учета времени в
	// данных времени сотрудника за месяц.
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	МАКСИМУМ(ОбщиеГрафикиСрезИДвижения.Период) КАК ДатаИзмененияГрафика
		|ПОМЕСТИТЬ ВТДатыИзмененияОбщихГрафиковПоИнтервалам
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезИДвижения КАК ОбщиеГрафикиСрезИДвижения
		|		ПО (ОбщиеГрафикиСрезИДвижения.Сотрудник = Интервалы.Сотрудник)
		|			И (ОбщиеГрафикиСрезИДвижения.Период <= Интервалы.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	ОбщиеГрафикиСрезИДвижения.ГрафикРаботы
		|ПОМЕСТИТЬ ВТОбщиеГрафикиРаботыПоИнтервалам
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыИзмененияОбщихГрафиковПоИнтервалам КАК ДатыИзмененияОбщихГрафиковПоИнтервалам
		|		ПО (ДатыИзмененияОбщихГрафиковПоИнтервалам.Сотрудник = Интервалы.Сотрудник)
		|			И (ДатыИзмененияОбщихГрафиковПоИнтервалам.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезИДвижения КАК ОбщиеГрафикиСрезИДвижения
		|		ПО (ОбщиеГрафикиСрезИДвижения.Сотрудник = Интервалы.Сотрудник)
		|			И (ОбщиеГрафикиСрезИДвижения.Период = ДатыИзмененияОбщихГрафиковПоИнтервалам.ДатаИзмененияГрафика)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбщиеГрафикиРаботы.Сотрудник,
		|	ОбщиеГрафикиРаботы.ДатаНачала,
		|	ОбщиеГрафикиРаботы.Месяц КАК Месяц,
		|	ЕСТЬNULL(ИндивидуальныеГрафики.Сотрудник, ОбщиеГрафикиРаботы.ГрафикРаботы) КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ИндивидуальныеГрафики.Сотрудник ЕСТЬ НЕ NULL 
		|			ТОГДА ИндивидуальныеГрафики.Сотрудник
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|					ТОГДА ГрафикиРаботыСотрудников.Ссылка
		|				ИНАЧЕ ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени
		|			КОНЕЦ
		|	КОНЕЦ КАК ГрафикРаботыНорма,
		|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
		|	ЕСТЬNULL(ПериодыРегистрацииВремени.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТГрафикиРаботыПоИнтервалам
		|ИЗ
		|	ВТОбщиеГрафикиРаботыПоИнтервалам КАК ОбщиеГрафикиРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО (ГрафикиРаботыСотрудников.Ссылка = ОбщиеГрафикиРаботы.ГрафикРаботы)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныеГрафики
		|		ПО (ИндивидуальныеГрафики.Сотрудник = ОбщиеГрафикиРаботы.Сотрудник)
		|			И (ИндивидуальныеГрафики.Месяц = НАЧАЛОПЕРИОДА(ОбщиеГрафикиРаботы.ДатаНачала, МЕСЯЦ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
		|		ПО ОбщиеГрафикиРаботы.Сотрудник = ПериодыРегистрацииВремени.Сотрудник
		|			И ОбщиеГрафикиРаботы.Месяц = ПериодыРегистрацииВремени.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикиРаботыПоИнтервалам.Сотрудник КАК Сотрудник,
		|	ГрафикиРаботыПоИнтервалам.ГрафикРаботы,
		|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
		|	НАЧАЛОПЕРИОДА(ГрафикиРаботыПоИнтервалам.ДатаНачала, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТСотрудникиВидыУчетаВремени
		|ИЗ
		|	ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
		|		ПО (ПериодыРегистрацииВремени.Сотрудник = ГрафикиРаботыПоИнтервалам.Сотрудник)
		|			И (ПериодыРегистрацииВремени.ПериодРегистрации <> ДАТАВРЕМЯ(1, 1, 1))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО ГрафикиРаботыПоИнтервалам.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(ГрафикиРаботыПоИнтервалам.ДатаНачала, МЕСЯЦ))
		|			И (ПериодыРегистрацииВремени.ПериодРегистрации ЕСТЬ NULL 
		|				ИЛИ ПериодыРегистрацииВремени.ПериодРегистрации = ГрафикиРаботыПоВидамВремени.ПериодРегистрации)";	
	
	Запрос.Выполнить();
	
	// Для начислений, зависящих от наличия значения вида времени, 
	// исключаем интервалы начислений, в которых нет времени указанного вида.
	Если ДополнительныеПараметры.СотрудникиНачисления = Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания,
			|	ВЫБОР
			|		КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ИсключатьИнтервал
			|ПОМЕСТИТЬ ВТВсеИнтервалы
			|ИЗ
			|	ВТИнтервалы КАК Интервалы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО (Начисления.Ссылка = Интервалы.Начисление)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТИнтервалы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания,
			|	НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) КАК Месяц,
			|	ГрафикиРаботыПоИнтервалам.ГрафикРаботы,
			|	ОбщиеГрафики.ГрафикРаботы КАК ОбщийГрафик,
			|	ЕСТЬNULL(ПериодыРегистрацииВремени.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрацииВремени,
			|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени
			|ПОМЕСТИТЬ ВТИсключаемыеИнтервалы
			|ИЗ
			|	ВТВсеИнтервалы КАК Интервалы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО (Начисления.Ссылка = Интервалы.Начисление)
			|			И (Интервалы.ИсключатьИнтервал)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
			|		ПО Интервалы.Сотрудник = ГрафикиРаботыПоИнтервалам.Сотрудник
			|			И Интервалы.ДатаНачала = ГрафикиРаботыПоИнтервалам.ДатаНачала
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
			|		ПО (ПериодыРегистрацииВремени.Сотрудник = Интервалы.Сотрудник)
			|			И (ПериодыРегистрацииВремени.ПериодДействия = НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ))
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбщиеГрафикиРаботыПоИнтервалам КАК ОбщиеГрафики
			|		ПО (ОбщиеГрафики.Сотрудник = Интервалы.Сотрудник)
			|			И (ОбщиеГрафики.ДатаНачала = Интервалы.ДатаНачала)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания,
			|	Интервалы.Месяц,
			|	Интервалы.ГрафикРаботы,
			|	Интервалы.ОбщийГрафик,
			|	Интервалы.ПериодРегистрацииВремени,
			|	Интервалы.ВидУчетаВремени
			|ПОМЕСТИТЬ ВТУточняемыеИнтервалы
			|ИЗ
			|	ВТИсключаемыеИнтервалы КАК Интервалы
			|ГДЕ
			|	ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
			|			ГДЕ
			|				ВытесняющиеВидыРасчета.ВидРасчета = Интервалы.Начисление)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДатаНачала,
			|	ГрафикиРаботыПоВидамВремени.Дата,
			|	ДОБАВИТЬКДАТЕ(ГрафикиРаботыПоВидамВремени.Дата, ДЕНЬ, -1) КАК ПредыдущаяДата,
			|	ДОБАВИТЬКДАТЕ(ГрафикиРаботыПоВидамВремени.Дата, ДЕНЬ, 1) КАК СледующаяДата
			|ПОМЕСТИТЬ ВТДатыВидовУчетаВремени
			|ИЗ
			|	ВТУточняемыеИнтервалы КАК Интервалы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|		ПО Интервалы.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
			|			И (ГрафикиРаботыПоВидамВремени.Месяц = Интервалы.Месяц)
			|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
			|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = Интервалы.ВидУчетаВремени)
			|			И (ГрафикиРаботыПоВидамВремени.ПериодРегистрации = Интервалы.ПериодРегистрацииВремени)
			|			И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДатыВидовУчетаВремени.Сотрудник,
			|	ДатыВидовУчетаВремени.Начисление,
			|	ДатыВидовУчетаВремени.ДатаНачала,
			|	ДатыВидовУчетаВремени.Дата
			|ПОМЕСТИТЬ ВТДатыНачала
			|ИЗ
			|	ВТДатыВидовУчетаВремени КАК ДатыВидовУчетаВремени
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВидовУчетаВремени КАК ПредыдущиеДаты
			|		ПО (ПредыдущиеДаты.Сотрудник = ДатыВидовУчетаВремени.Сотрудник)
			|			И (ПредыдущиеДаты.Начисление = ДатыВидовУчетаВремени.Начисление)
			|			И (ПредыдущиеДаты.Дата = ДатыВидовУчетаВремени.ПредыдущаяДата)
			|ГДЕ
			|	ПредыдущиеДаты.Дата ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДатыВидовУчетаВремени.Сотрудник,
			|	ДатыВидовУчетаВремени.Начисление,
			|	ДатыВидовУчетаВремени.ДатаНачала,
			|	ДатыВидовУчетаВремени.Дата
			|ПОМЕСТИТЬ ВТДатыОкончания
			|ИЗ
			|	ВТДатыВидовУчетаВремени КАК ДатыВидовУчетаВремени
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВидовУчетаВремени КАК СледующиеДаты
			|		ПО (СледующиеДаты.Сотрудник = ДатыВидовУчетаВремени.Сотрудник)
			|			И (СледующиеДаты.Начисление = ДатыВидовУчетаВремени.Начисление)
			|			И (СледующиеДаты.Дата = ДатыВидовУчетаВремени.СледующаяДата)
			|ГДЕ
			|	СледующиеДаты.Дата ЕСТЬ NULL 
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДатыНачала.Сотрудник,
			|	ДатыНачала.Начисление,
			|	ДатыНачала.ДатаНачала КАК ДатаНачалаИсходногоИнтервала,
			|	ДатыНачала.Дата КАК ДатаНачала,
			|	МИНИМУМ(ДатыОкончания.Дата) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТИнтервалыПоВидамУчетаВремени
			|ИЗ
			|	ВТДатыНачала КАК ДатыНачала
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыОкончания КАК ДатыОкончания
			|		ПО (ДатыОкончания.Сотрудник = ДатыНачала.Сотрудник)
			|			И (ДатыОкончания.Начисление = ДатыНачала.Начисление)
			|			И (ДатыОкончания.Дата >= ДатыНачала.Дата)
			|
			|СГРУППИРОВАТЬ ПО
			|	ДатыНачала.Сотрудник,
			|	ДатыНачала.Начисление,
			|	ДатыНачала.ДатаНачала,
			|	ДатыНачала.Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ГрафикиРаботыПоИнтервалам.Сотрудник,
			|	ГрафикиРаботыПоИнтервалам.ДатаНачала,
			|	ГрафикиРаботыПоИнтервалам.Месяц,
			|	ГрафикиРаботыПоИнтервалам.ГрафикРаботы,
			|	ГрафикиРаботыПоИнтервалам.ГрафикРаботыНорма,
			|	ГрафикиРаботыПоИнтервалам.СуммированныйУчетРабочегоВремени,
			|	ГрафикиРаботыПоИнтервалам.ПериодРегистрации
			|ПОМЕСТИТЬ ВТВсеГрафикиРаботыПоИнтервалам
			|ИЗ
			|	ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТГрафикиРаботыПоИнтервалам
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ГрафикиРаботыПоИнтервалам.Сотрудник,
			|	ГрафикиРаботыПоИнтервалам.ДатаНачала,
			|	ГрафикиРаботыПоИнтервалам.Месяц,
			|	ГрафикиРаботыПоИнтервалам.ГрафикРаботы,
			|	ГрафикиРаботыПоИнтервалам.ГрафикРаботыНорма,
			|	ГрафикиРаботыПоИнтервалам.СуммированныйУчетРабочегоВремени,
			|	ГрафикиРаботыПоИнтервалам.ПериодРегистрации
			|ПОМЕСТИТЬ ВТГрафикиРаботыПоИнтервалам
			|ИЗ
			|	ВТВсеГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГрафикиРаботыПоИнтервалам.Сотрудник,
			|	ИнтервалыПоВидамУчетаВремени.ДатаНачала,
			|	ГрафикиРаботыПоИнтервалам.Месяц,
			|	ГрафикиРаботыПоИнтервалам.ГрафикРаботы,
			|	ГрафикиРаботыПоИнтервалам.ГрафикРаботыНорма,
			|	ГрафикиРаботыПоИнтервалам.СуммированныйУчетРабочегоВремени,
			|	ГрафикиРаботыПоИнтервалам.ПериодРегистрации
			|ИЗ
			|	ВТВсеГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыПоВидамУчетаВремени КАК ИнтервалыПоВидамУчетаВремени
			|		ПО ГрафикиРаботыПоИнтервалам.Сотрудник = ИнтервалыПоВидамУчетаВремени.Сотрудник
			|			И ГрафикиРаботыПоИнтервалам.ДатаНачала = ИнтервалыПоВидамУчетаВремени.ДатаНачалаИсходногоИнтервала
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания
			|ПОМЕСТИТЬ ВТИнтервалы
			|ИЗ
			|	ВТВсеИнтервалы КАК Интервалы
			|ГДЕ
			|	НЕ Интервалы.ИсключатьИнтервал
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания
			|ИЗ
			|	ВТИсключаемыеИнтервалы КАК Интервалы
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУточняемыеИнтервалы КАК УточняемыеИнтервалы
			|		ПО (УточняемыеИнтервалы.Сотрудник = Интервалы.Сотрудник)
			|			И (УточняемыеИнтервалы.Начисление = Интервалы.Начисление)
			|			И (УточняемыеИнтервалы.ДатаНачала = Интервалы.ДатаНачала)
			|ГДЕ
			|	УточняемыеИнтервалы.ДатаНачала ЕСТЬ NULL 
			|	И ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|			ГДЕ
			|				Интервалы.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
			|				И ГрафикиРаботыПоВидамВремени.Месяц = Интервалы.Месяц
			|				И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = Интервалы.ВидУчетаВремени
			|				И ГрафикиРаботыПоВидамВремени.ПериодРегистрации = Интервалы.ПериодРегистрацииВремени
			|				И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.Начисление,
			|	НЕОПРЕДЕЛЕНО,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания
			|ИЗ
			|	ВТИнтервалыПоВидамУчетаВремени КАК Интервалы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТВсеИнтервалы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТИсключаемыеИнтервалы";
		Запрос.Выполнить();
	КонецЕсли;
	
	// Для начислений, выполняемых только по праздничным дням, 
	// исключаем интервалы начислений, в которых нет праздничных дней.
	Если ДополнительныеПараметры.СотрудникиНачисления = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДокументОснование,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсключатьИнтервал
		|ПОМЕСТИТЬ ВТВсеИнтервалы
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = Интервалы.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДокументОснование,
		|	Интервалы.ДатаНачала
		|ПОМЕСТИТЬ ВТИсключаемыеИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбщиеГрафикиРаботыПоИнтервалам КАК ОбщиеГрафикиРаботы
		|		ПО (ОбщиеГрафикиРаботы.Сотрудник = Интервалы.Сотрудник)
		|			И (ОбщиеГрафикиРаботы.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеКалендаря
		|		ПО (ДанныеКалендаря.ПроизводственныйКалендарь = ОбщиеГрафикиРаботы.ГрафикРаботы.ПроизводственныйКалендарь)
		|			И (ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|			И (ДанныеКалендаря.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|ГДЕ
		|	Интервалы.ИсключатьИнтервал
		|	И ДанныеКалендаря.Дата ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДокументОснование,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|ГДЕ
		|	НЕ Интервалы.ИсключатьИнтервал
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДокументОснование,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ИЗ
		|	ВТВсеИнтервалы КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеИнтервалы КАК ИсключаемыеИнтервалы
		|		ПО (ИсключаемыеИнтервалы.Сотрудник = Интервалы.Сотрудник)
		|			И (ИсключаемыеИнтервалы.Начисление = Интервалы.Начисление)
		|			И (ИсключаемыеИнтервалы.ДокументОснование = Интервалы.ДокументОснование)
		|			И (ИсключаемыеИнтервалы.ДатаНачала = Интервалы.ДатаНачала)
		|ГДЕ
		|	Интервалы.ИсключатьИнтервал
		|	И ИсключаемыеИнтервалы.ДатаНачала ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИсключаемыеИнтервалы";
		Запрос.Выполнить();
	КонецЕсли;
	
	// Определяем признак почасовой оплаты труда.
	ИмяВТПлановыеНачисления = Неопределено;
	Если ТребуютсяИзмененияПлановыхНачислений Тогда
		ИмяВТПлановыеНачисления = "ВТПлановыеНачисленияСрезИДвижения";
	КонецЕсли;
	
	СоздатьВТПочасоваяОплатаТруда(МенеджерВременныхТаблиц, "ВТИнтервалы", ИмяВТПлановыеНачисления);
	
	// Определяем в часах или в днях оплачиваются праздничные дни на конкретном интервале.
	Запрос.УстановитьПараметр("Праздники", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениРаботаВыходныеПраздничные());
	Если ДополнительныеПараметры.СотрудникиНачисления <> Неопределено Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК Сотрудник,
			|	NULL КАК ДатаНачала,
			|	NULL КАК Начисление,
			|	NULL КАК ДокументОснование,
			|	NULL КАК ВремяВЧасах
			|ПОМЕСТИТЬ ВТСпособыОплатыПраздничныхДней";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Интервалы.Сотрудник,
			|	Интервалы.ДатаНачала,
			|	Интервалы.ДатаОкончания,
			|	Интервалы.ДокументОснование,
			|	Интервалы.Начисление,
			|	НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) КАК Месяц,
			|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени,
			|	ГрафикиРаботыПоИнтервалам.ГрафикРаботы,
			|	ЕСТЬNULL(ПериодыРегистрацииВремени.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистрацииВремени
			|ПОМЕСТИТЬ ВТИнтервалыОплатыПраздничныхДней
			|ИЗ
			|	ВТИнтервалы КАК Интервалы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
			|		ПО (Начисления.Ссылка = Интервалы.Начисление)
			|			И (Начисления.ОбозначениеВТабелеУчетаРабочегоВремени В (&Праздники))
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыПоИнтервалам
			|		ПО (ГрафикиРаботыПоИнтервалам.Сотрудник = Интервалы.Сотрудник)
			|			И (ГрафикиРаботыПоИнтервалам.ДатаНачала = Интервалы.ДатаНачала)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
			|		ПО (ПериодыРегистрацииВремени.Сотрудник = Интервалы.Сотрудник)
			|			И (ПериодыРегистрацииВремени.ПериодДействия = НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Интервалы.Сотрудник,
			|	Интервалы.ДатаНачала,
			|	Интервалы.Начисление,
			|	Интервалы.ДокументОснование,
			|	ВЫБОР
			|		КОГДА ИСТИНА В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ИСТИНА
			|				ИЗ
			|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
			|				ГДЕ
			|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Интервалы.ГрафикРаботы
			|					И ГрафикиРаботыПоВидамВремени.Месяц = Интервалы.Месяц
			|					И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания
			|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = Интервалы.ВидУчетаВремени
			|					И ГрафикиРаботыПоВидамВремени.ПериодРегистрации = Интервалы.ПериодРегистрацииВремени
			|					И ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ
			|					И ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение > 0)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ВремяВЧасах
			|ПОМЕСТИТЬ ВТСпособыОплатыПраздничныхДней
			|ИЗ
			|	ВТИнтервалыОплатыПраздничныхДней КАК Интервалы";	
		Запрос.Выполнить();
	КонецЕсли;
	
	// Определяем признак суммированного учета общего графика для принятия решения о способе оплаты по среднему.
	УстановитьПривилегированныйРежим(Истина);
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТИнтервалы", "Сотрудник,ДатаНачала");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "СуммированныйУчетРабочегоВремени");
	УстановитьПривилегированныйРежим(Ложь);
	
	// Определены интервалы и состав полагающихся сотрудникам начислений,
	// составляем итоговую выборку.
	
	// Для начислений, выполняемых в целом за месяц, нужно определить дату такого начисления.
	// Считаем такой датой последнее изменение рабочего места в месяце.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	Интервалы.Начисление,
	|	Интервалы.ДокументОснование,
	|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК КадроваяИсторияСотрудниковПериод,
	|	МАКСИМУМ(ПрименениеПлановыхНачислений.Период) КАК ПрименениеПлановыхНачисленийПериод,
	|	МАКСИМУМ(ПлановыеНачисления.Период) КАК ПлановыеНачисленияПериод
	|ПОМЕСТИТЬ ВТИнтервалыИДатыСрезов
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|		ПО (КадроваяИсторияСотрудников.Сотрудник = Интервалы.Сотрудник)
	|			И (КадроваяИсторияСотрудников.Период <= Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
	|		ПО (ПрименениеПлановыхНачислений.Сотрудник = Интервалы.Сотрудник)
	|			И (ПрименениеПлановыхНачислений.Период <= Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
	|		ПО (ПлановыеНачисления.Сотрудник = Интервалы.Сотрудник)
	|			И (ПлановыеНачисления.Начисление = Интервалы.Начисление)
	|			И (ПлановыеНачисления.ДокументОснование = Интервалы.ДокументОснование)
	|			И (ПлановыеНачисления.Период <= Интервалы.ДатаНачала)
	|
	|СГРУППИРОВАТЬ ПО
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	Интервалы.Начисление,
	|	Интервалы.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМеста.Сотрудник,
	|	МАКСИМУМ(РабочиеМеста.Период) КАК Период
	|ПОМЕСТИТЬ ВТДатаПоследнихРабочихМестСотрудников
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеМеста.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Интервалы.Сотрудник,
	|	КадроваяИсторияСотрудников.Организация,
	|	КадроваяИсторияСотрудников.Подразделение,
	|	КадроваяИсторияСотрудников.Должность,
	|	КадроваяИсторияСотрудников.ДолжностьпоШтатномуРасписанию,	
	|	КадроваяИсторияСотрудников.ВидЗанятости,
	|	ГрафикиРаботыСотрудников.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ГрафикРаботыНорма,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ВТСотрудникиВидыУчетаВремени КАК СотрудникиВидыУчетаВремени
	|				ГДЕ
	|					Интервалы.Сотрудник = СотрудникиВидыУчетаВремени.Сотрудник
	|					И НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) = СотрудникиВидыУчетаВремени.Месяц
	|					И ГрафикиРаботыСотрудников.ГрафикРаботы = СотрудникиВидыУчетаВремени.ГрафикРаботы
	|					И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = СотрудникиВидыУчетаВремени.ВидУчетаВремени)
	|			ТОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|						ИЛИ Начисления.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя = ЛОЖЬ
	|						ИЛИ Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Командировка)
	|					ТОГДА &РабочееВремя
	|				ИНАЧЕ Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА Начисления.УчетВремениВЧасах
	|			ТОГДА ИСТИНА
	|		КОГДА Начисления.УчетВремениВДняхЧасах
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.ИспользуетСреднийЗаработокОбщий = ИСТИНА
	|						И ПлановыеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|						ТОГДА ИСТИНА
	|					КОГДА Начисления.ИспользуетСреднийЗаработокОбщий = ИСТИНА
	|						И ПлановыеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|						ТОГДА ЛОЖЬ
	|					КОГДА Начисления.ИспользуетСреднийЗаработокОбщий = ИСТИНА
	|						ТОГДА КадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени
	|					КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
	|						ТОГДА ПочасоваяОплатаТруда.УчетВремениВЧасах
	|					КОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени В (&Праздники)
	|						ТОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах
	|					ИНАЧЕ ПочасоваяОплатаТруда.УчетВремениВЧасах
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВремяВЧасах,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	ЕСТЬNULL(ПериодыБазовыхНачислений.ДатаНачала, Интервалы.ДатаНачала) КАК НачалоБазовогоПериода,
	|	ЕСТЬNULL(ПериодыБазовыхНачислений.ДатаОкончания, Интервалы.ДатаОкончания) КАК ОкончаниеБазовогоПериода,
	|	Интервалы.Начисление,
	|	Интервалы.ДокументОснование,
	|	Начисления.Рассчитывается КАК НачислениеРассчитывается,
	|	Начисления.ЯвляетсяЛьготой КАК ЯвляетсяЛьготой,
	|	Начисления.ПоддерживаетНесколькоПлановыхНачислений КАК ДоступенВыборОснования,
	|	ПлановыеНачисления.Размер,
	|	Начисления.ВидВремени КАК ВидВремени,
	|	ВЫБОР
	|		КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете)
	|			ТОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
	|	КОНЕЦ КАК ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ВЫБОР
	|		КОГДА СотрудникиНачисления.Начисление ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА КадроваяИсторияСотрудников.Организация <> &Организация
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ КадроваяИсторияСотрудников.Подразделение В ИЕРАРХИИ (&Подразделение)
	|				И НЕ &ПоВсемПодразделениям
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СоответствуетОтбору,
	|	ВЫБОР
	|		КОГДА СотрудникиНачисления.Начисление ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ПрименениеПлановыхНачислений.Применение = ЛОЖЬ
	|			ТОГДА ЛОЖЬ
	|		КОГДА Начисления.СпособВыполненияНачисления В (ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете), ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))
	|			ТОГДА ЕСТЬNULL(ПлановыеНачисления.Используется, ЛОЖЬ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Действует,
	|	ПериодыРегистрацииВремени.ПериодРегистрации КАК ПериодРегистрацииВремени,
	|	ПоследниеРабочиеМестаСотрудников.Должность КАК ПоследнееРабочееМестоДолжность,
	|	ПоследниеРабочиеМестаСотрудников.Подразделение КАК ПоследнееРабочееМестоПодразделение,
	|	ПоследниеРабочиеМестаСотрудников.Должность.РеквизитДопУпорядочивания КАК ПорядокДолжности,
	|	ПоследниеРабочиеМестаСотрудников.Подразделение.РеквизитДопУпорядочивания КАК ПорядокПодразделения,
	|	ПоследниеРабочиеМестаСотрудников.ДолжностьПоШтатномуРасписанию.РазрядКатегория.РеквизитДопУпорядочивания КАК ПорядокРазряда,
	|	Сотрудники.Наименование КАК ФИОСотрудника,
	|	Начисления.ОчередностьРасчета КАК ОчередностьРасчета,
	|	Начисления.РеквизитДопУпорядочивания КАК ПорядокНачисления
	|ПОМЕСТИТЬ ВТДанныеНачислений
	|ИЗ
	|	ВТИнтервалыИДатыСрезов КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Интервалы.Сотрудник = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|		ПО Интервалы.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
	|			И Интервалы.КадроваяИсторияСотрудниковПериод = КадроваяИсторияСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаПоследнихРабочихМестСотрудников КАК ДатыПоследнегоРабочегоМеста
	|		ПО Интервалы.Сотрудник = ДатыПоследнегоРабочегоМеста.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК ПоследниеРабочиеМестаСотрудников
	|		ПО Интервалы.Сотрудник = ПоследниеРабочиеМестаСотрудников.Сотрудник
	|			И (ДатыПоследнегоРабочегоМеста.Период = ПоследниеРабочиеМестаСотрудников.Период)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоИнтервалам КАК ГрафикиРаботыСотрудников
	|		ПО (ГрафикиРаботыСотрудников.Сотрудник = Интервалы.Сотрудник)
	|			И Интервалы.ДатаНачала = ГрафикиРаботыСотрудников.ДатаНачала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
	|		ПО Интервалы.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник
	|			И Интервалы.ПрименениеПлановыхНачисленийПериод = ПрименениеПлановыхНачислений.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
	|		ПО Интервалы.Сотрудник = ПлановыеНачисления.Сотрудник
	|			И Интервалы.Начисление = ПлановыеНачисления.Начисление
	|			И Интервалы.ДокументОснование = ПлановыеНачисления.ДокументОснование
	|			И Интервалы.ПлановыеНачисленияПериод = ПлановыеНачисления.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО Интервалы.Начисление = Начисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпособыОплатыПраздничныхДней КАК СпособыОплатыПраздничныхДней
	|		ПО (СпособыОплатыПраздничныхДней.Сотрудник = Интервалы.Сотрудник)
	|			И (СпособыОплатыПраздничныхДней.ДатаНачала = Интервалы.ДатаНачала)
	|			И (СпособыОплатыПраздничныхДней.Начисление = Интервалы.Начисление)
	|			И (СпособыОплатыПраздничныхДней.ДокументОснование = Интервалы.ДокументОснование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРасчетаБазовыхНачислений КАК ПериодыБазовыхНачислений
	|		ПО (ПериодыБазовыхНачислений.Начисление = Интервалы.Начисление)
	|			И (ПериодыБазовыхНачислений.ДокументОснование = Интервалы.ДокументОснование)
	|			И (ПериодыБазовыхНачислений.ИсходнаяДатаНачала = Интервалы.ДатаНачала)
	|			И (ПериодыБазовыхНачислений.ИсходнаяДатаОкончания = Интервалы.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремени КАК ПериодыРегистрацииВремени
	|		ПО (ПериодыРегистрацииВремени.Сотрудник = Интервалы.Сотрудник)
	|			И (ПериодыРегистрацииВремени.ПериодДействия = НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиНачисления КАК СотрудникиНачисления
	|		ПО (СотрудникиНачисления.Сотрудник = Интервалы.Сотрудник)
	|			И (СотрудникиНачисления.Начисление = Интервалы.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО (КадровыеДанныеСотрудников.Сотрудник = Интервалы.Сотрудник)
	|			И (КадровыеДанныеСотрудников.Период = Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПочасоваяОплатаТруда КАК ПочасоваяОплатаТруда
	|		ПО (ПочасоваяОплатаТруда.Сотрудник = Интервалы.Сотрудник)
	|			И (ПочасоваяОплатаТруда.ДатаНачала = Интервалы.ДатаНачала)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНачислений.Сотрудник,
	|	ДанныеНачислений.Начисление,
	|	ДанныеНачислений.ДокументОснование,
	|	НАЧАЛОПЕРИОДА(ДанныеНачислений.ДатаНачала, МЕСЯЦ) КАК Месяц,
	|	МАКСИМУМ(ДанныеНачислений.ДатаНачала) КАК ДатаНачала
	|ПОМЕСТИТЬ ВТДатыНачисленийВЦеломЗаМесяц
	|ИЗ
	|	ВТДанныеНачислений КАК ДанныеНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ДанныеНачислений.Начисление)
	|			И (Начисления.НачисляетсяВЦеломЗаМесяц)
	|			И (ДанныеНачислений.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеНачислений.Сотрудник,
	|	ДанныеНачислений.Начисление,
	|	ДанныеНачислений.ДокументОснование,
	|	НАЧАЛОПЕРИОДА(ДанныеНачислений.ДатаНачала, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНачислений.Сотрудник КАК Сотрудник,
	|	ДанныеНачислений.Организация КАК Организация,
	|	ДанныеНачислений.Подразделение КАК Подразделение,
	|	ДанныеНачислений.Должность КАК Должность,
	|	ДанныеНачислений.ДолжностьпоШтатномуРасписанию,		
	|	ДанныеНачислений.ВидЗанятости КАК ВидЗанятости,
	|	ДанныеНачислений.ГрафикРаботы КАК ГрафикРаботы,
	|	ДанныеНачислений.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|	ДанныеНачислений.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеНачислений.ВремяВЧасах КАК ВремяВЧасах,
	|	ДанныеНачислений.ДатаНачала КАК ДатаНачала,
	|	ДанныеНачислений.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеНачислений.НачалоБазовогоПериода КАК НачалоБазовогоПериода,
	|	ДанныеНачислений.ОкончаниеБазовогоПериода КАК ОкончаниеБазовогоПериода,
	|	ДанныеНачислений.Начисление КАК Начисление,
	|	ДанныеНачислений.ДокументОснование КАК ДокументОснование,
	|	ДанныеНачислений.НачислениеРассчитывается КАК НачислениеРассчитывается,
	|	ДанныеНачислений.ЯвляетсяЛьготой КАК ЯвляетсяЛьготой,
	|	ДанныеНачислений.ДоступенВыборОснования КАК ДоступенВыборОснования,
	|	ДанныеНачислений.Размер КАК Размер,
	|	ДанныеНачислений.ВидВремени КАК ВидВремени,
	|	ДанныеНачислений.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ДанныеНачислений.СоответствуетОтбору КАК СоответствуетОтбору,
	|	ДанныеНачислений.Действует КАК Действует,
	|	ДанныеНачислений.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	ДанныеНачислений.ПоследнееРабочееМестоДолжность КАК ПоследнееРабочееМестоДолжность,
	|	ДанныеНачислений.ПоследнееРабочееМестоПодразделение КАК ПоследнееРабочееМестоПодразделение,
	|	ДанныеНачислений.ПорядокДолжности КАК ПорядокДолжности,
	|	ДанныеНачислений.ПорядокПодразделения КАК ПорядокПодразделения,
	|	ДанныеНачислений.ПорядокРазряда КАК ПорядокРазряда,
	|	ДанныеНачислений.ФИОСотрудника КАК ФИОСотрудника,
	|	ДанныеНачислений.ОчередностьРасчета КАК ОчередностьРасчета,
	|	ДанныеНачислений.ПорядокНачисления КАК ПорядокНачисления
	|ИЗ
	|	ВТДанныеНачислений КАК ДанныеНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ДанныеНачислений.Начисление)
	|			И (НЕ(Начисления.НачисляетсяВЦеломЗаМесяц
	|					И ДанныеНачислений.Действует))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеНачислений.Сотрудник,
	|	ДанныеНачислений.Организация,
	|	ДанныеНачислений.Подразделение,
	|	ДанныеНачислений.Должность,
	|	ДанныеНачислений.ДолжностьпоШтатномуРасписанию,	
	|	ДанныеНачислений.ВидЗанятости,
	|	ДанныеНачислений.ГрафикРаботы,
	|	ДанныеНачислений.ГрафикРаботыНорма,
	|	ДанныеНачислений.ВидУчетаВремени,
	|	ДанныеНачислений.ВремяВЧасах,
	|	ДанныеНачислений.ДатаНачала,
	|	ДанныеНачислений.ДатаОкончания,
	|	ДанныеНачислений.НачалоБазовогоПериода,
	|	ДанныеНачислений.ОкончаниеБазовогоПериода,
	|	ДанныеНачислений.Начисление,
	|	ДанныеНачислений.ДокументОснование,
	|	ДанныеНачислений.НачислениеРассчитывается,
	|	ДанныеНачислений.ЯвляетсяЛьготой,
	|	ДанныеНачислений.ДоступенВыборОснования,
	|	ДанныеНачислений.Размер,
	|	ДанныеНачислений.ВидВремени,
	|	ДанныеНачислений.ОбозначениеВТабелеУчетаРабочегоВремени,
	|	ДанныеНачислений.СоответствуетОтбору,
	|	ДанныеНачислений.Действует,
	|	ДанныеНачислений.ПериодРегистрацииВремени,
	|	ДанныеНачислений.ПоследнееРабочееМестоДолжность,
	|	ДанныеНачислений.ПоследнееРабочееМестоПодразделение,
	|	ДанныеНачислений.ПорядокДолжности,
	|	ДанныеНачислений.ПорядокПодразделения,
	|	ДанныеНачислений.ПорядокРазряда,
	|	ДанныеНачислений.ФИОСотрудника,
	|	ДанныеНачислений.ОчередностьРасчета,
	|	ДанныеНачислений.ПорядокНачисления
	|ИЗ
	|	ВТДанныеНачислений КАК ДанныеНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ДанныеНачислений.Начисление)
	|			И (Начисления.НачисляетсяВЦеломЗаМесяц)
	|			И (ДанныеНачислений.Действует)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыНачисленийВЦеломЗаМесяц КАК ДатыНачисленийВЦеломЗаМесяц
	|		ПО (ДатыНачисленийВЦеломЗаМесяц.Сотрудник = ДанныеНачислений.Сотрудник)
	|			И (ДатыНачисленийВЦеломЗаМесяц.Начисление = ДанныеНачислений.Начисление)
	|			И (ДатыНачисленийВЦеломЗаМесяц.ДокументОснование = ДанныеНачислений.ДокументОснование)
	|			И (ДатыНачисленийВЦеломЗаМесяц.Месяц = НАЧАЛОПЕРИОДА(ДанныеНачислений.ДатаНачала, МЕСЯЦ))
	|			И (ДатыНачисленийВЦеломЗаМесяц.ДатаНачала = ДанныеНачислений.ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеНачислений.ПорядокДолжности,
	|	ДанныеНачислений.ПорядокПодразделения,
	|	ДанныеНачислений.ПорядокРазряда,
	|	ДанныеНачислений.ФИОСотрудника,
	|	ДанныеНачислений.ОчередностьРасчета,
	|	ДанныеНачислений.ПорядокНачисления,
	|	ДанныеНачислений.ДатаНачала";
	
	НачисленияЗаПериод = ПустаяТаблицаНачисления();
	
	ИменаПолейСвойствНачислений = "";
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьТекстЗапросаСвойствамиНачислений(ТекстЗапроса, НачисленияЗаПериод, ИменаПолейСвойствНачислений);
	КонецЕсли;
	ЗаполнитьДополнительныеСвойства = Не ПустаяСтрока(ИменаПолейСвойствНачислений);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", ДополнительныеПараметры.Подразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Не ЗначениеЗаполнено(ДополнительныеПараметры.Подразделение));
	
	// Добавляем упорядочивание по настройкам.
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "ДанныеНачислений", Ложь);
	
	// Привилегированный режим допускается, т.к. все первичные данные уже получены.
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Основная выборка для формирования набора записей.
	Выборка = РезультатЗапроса.Выбрать();
	
	Если РасчетЛьгот Тогда 
		НачисленияЗаПериод.Колонки.Добавить("ЯвляетсяЛьготой", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.СоответствуетОтбору Или Не Выборка.Действует Тогда
			Продолжить;
		КонецЕсли;
		
		// Вводим новые строки начисления.
		НовыеСтроки = ВводНовыхСтрокНачислений(Выборка, НачисленияЗаПериод);
		Для Каждого ЭлементМассива Из НовыеСтроки Цикл
			НоваяСтрока = ЭлементМассива.НоваяСтрока;
			НоваяСтрока.Сотрудник = Выборка.Сотрудник;
			НоваяСтрока.Подразделение = Выборка.Подразделение;
			НоваяСтрока.Должность = Выборка.Должность;
			НоваяСтрока.ДолжностьПоШтатномуРасписанию = Выборка.ДолжностьПоШтатномуРасписанию;
			НоваяСтрока.ВидЗанятости = Выборка.ВидЗанятости;
			НоваяСтрока.ГрафикРаботы = Выборка.ГрафикРаботы;
			НоваяСтрока.ГрафикРаботыНорма = Выборка.ГрафикРаботыНорма;
			НоваяСтрока.ВидУчетаВремени = Выборка.ВидУчетаВремени;
			НоваяСтрока.ВидВремени = Выборка.ВидВремени;
			НоваяСтрока.ВремяВЧасах = Выборка.ВремяВЧасах;
			НоваяСтрока.Начисление = Выборка.Начисление;
			НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
			НоваяСтрока.НачалоБазовогоПериода = Выборка.НачалоБазовогоПериода;
			НоваяСтрока.ОкончаниеБазовогоПериода = Выборка.ОкончаниеБазовогоПериода;
			НоваяСтрока.ПериодРегистрацииВремени = Выборка.ПериодРегистрацииВремени;
			НоваяСтрока.ДоступенВыборОснования = Выборка.ДоступенВыборОснования;
			Если Не Выборка.НачислениеРассчитывается Тогда 
				НоваяСтрока.Результат = Выборка.Размер;
			КонецЕсли;
			Если РасчетЛьгот Тогда 
				НоваяСтрока.ЯвляетсяЛьготой = Выборка.ЯвляетсяЛьготой;
			КонецЕсли;
			Если ЗаполнитьДополнительныеСвойства Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, ИменаПолейСвойствНачислений);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДозаполнитьНачисленияДенежногоДовольствия(НачисленияЗаПериод);
	КонецЕсли; 
	
	ЗаполнитьЗначенияПоказателейНачислений(НачисленияЗаПериод, ДополнительныеПараметры.ИзвестныеЗначенияПоказателей);
	
	Возврат НачисленияЗаПериод;
	
КонецФункции

// В дополнение к методу ДанныеДляНачисленияЗарплатыБезКорректировкиПериода заполняет даты начала окончания датами
// базового периода для более наглядного отображения в формах документов.
//
// Параметры:
//	Организация
//	Начало, 
//	Окончание,	
//	МесяцНачисления,
//	Подразделение,
//	СотрудникиНачисления - таблица значений с колонками Сотрудник и Начисление,
//	ИзвестныеЗначенияПоказателей - таблица значений с колонками Сотрудник, Показатель, Значение.
//
// Возвращаемое значение - таблица значений, см. ПустаяТаблицаНачисления().
//
Функция ДанныеДляНачисленияЗарплаты(Организация, Начало, Окончание,	МесяцНачисления, Подразделение = Неопределено, Знач Сотрудники = Неопределено, СотрудникиНачисления = Неопределено, ИзвестныеЗначенияПоказателей = Неопределено, РасчетПервойПоловиныМесяца = Ложь, ДокументСсылка = Неопределено, ИсключатьРанееВыполненныеНачисления = Ложь, РасчетЛьгот = Ложь, ИсправленныйДокумент = Неопределено) Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыДанныхДляНачисленияЗарплаты();
	ДополнительныеПараметры.Подразделение = Подразделение;
	ДополнительныеПараметры.Сотрудники = Сотрудники;
	ДополнительныеПараметры.СотрудникиНачисления = СотрудникиНачисления;
	ДополнительныеПараметры.ИзвестныеЗначенияПоказателей = ИзвестныеЗначенияПоказателей;
	ДополнительныеПараметры.РасчетПервойПоловиныМесяца = РасчетПервойПоловиныМесяца;
	ДополнительныеПараметры.ДокументСсылка = ДокументСсылка;
	ДополнительныеПараметры.ИсправленныйДокумент = ИсправленныйДокумент;
	ДополнительныеПараметры.ИсключатьРанееВыполненныеНачисления = ИсключатьРанееВыполненныеНачисления;
	ДополнительныеПараметры.РасчетЛьгот = РасчетЛьгот;
	
	НачисленияЗаПериод = ДанныеДляНачисленияЗарплатыБезКорректировкиПериода(Организация, Начало, Окончание,	МесяцНачисления, ДополнительныеПараметры);
	
	// Заполним период расчета базовых начислений для тех начислений, 
	// для которых он отличается от периода действия.
	Для Каждого СтрокаНачислений Из НачисленияЗаПериод Цикл
		Если Не ЗначениеЗаполнено(СтрокаНачислений.НачалоБазовогоПериода) 
			Или Не ЗначениеЗаполнено(СтрокаНачислений.ОкончаниеБазовогоПериода) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаНачислений.ДатаНачала <> СтрокаНачислений.НачалоБазовогоПериода Тогда
			СтрокаНачислений.ДатаНачала = СтрокаНачислений.НачалоБазовогоПериода;
		КонецЕсли;
		Если СтрокаНачислений.ДатаОкончания <> СтрокаНачислений.ОкончаниеБазовогоПериода Тогда
			СтрокаНачислений.ДатаОкончания = СтрокаНачислений.ОкончаниеБазовогоПериода;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НачисленияЗаПериод;

КонецФункции

// Метод выявляет состав сотрудников и периодов действия пособий.
//
// Параметры:
//	Организация
//	Начало, 
//	Окончание,	
//	МесяцНачисления,
//	Подразделение,
//	СотрудникиНачисления - таблица значений с колонками Сотрудник и Начисление,
//	ИзвестныеЗначенияПоказателей - таблица значений с колонками Сотрудник, Показатель, Значение.
//
// Возвращаемое значение - таблица значений с колонками.
//	Сотрудник
//	Подразделение
//	Начало
//	Окончание
//	Начисление
//
Функция ДанныеДляНачисленияПособий(Организация, Начало, Окончание,	МесяцНачисления, Подразделение = Неопределено, Знач Сотрудники = Неопределено, РасчетПервойПоловиныМесяца = Ложь, ДокументСсылка = Неопределено, ПерерасчетПособий = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Так как сотрудников, получающих пособия сильно меньше, чем всех остальных, 
	// первичный список получим по регистру плановых начислений определенной категории.
	
	КатегорииПособийПоУходуЗаРебенком = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.ДатаНачала = Начало;
	НоваяСтрока.ДатаОкончания = Окончание;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "В", КатегорииПособийПоУходуЗаРебенком);
	
	Если Сотрудники = Неопределено Тогда
		// Выявление сотрудников.
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы,  "Сотрудник.ГоловнаяОрганизация", "=", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Иначе
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Сотрудник", "В", Сотрудники);
	КонецЕсли;
	
	Если РасчетПервойПоловиныМесяца Тогда
		// Ограничим начислениями, только участвующими в расчете за первую половину месяца.
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.НачисляетсяПриРасчетеПервойПоловиныМесяца", "=", Истина);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения, 
		"ВТПлановыеНачисленияСрезИДвижения");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановыеНачисленияСрезПоследних.Сотрудник
	|ИЗ
	|	ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисленияСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сотрудники = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Сотрудники.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	// Для выявленных по начислениям сотрудникам получаем полную кадровую историю в пределах головной организации.
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.Организация  					= Организация;
	ПараметрыПолученияРабочихМест.ОтбиратьПоГоловнойОрганизации = Истина;
	ПараметрыПолученияРабочихМест.НачалоПериода					= Начало;
	ПараметрыПолученияРабочихМест.ОкончаниеПериода  			= Окончание;
	ПараметрыПолученияРабочихМест.СписокСотрудников 			= Сотрудники;
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочиеМестаСотрудников.Сотрудник,
	|	&Организация КАК Организация,
	|	&ДатаНачала КАК Период,
	|	&ДатаНачала КАК ДатаНачала,
	|	&ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.Выполнить();
	
	Если РасчетПервойПоловиныМесяца Тогда
		// В расчет первой половины месяца включаем только тех сотрудников, 
		// для которых установлен соответствующий способ расчета аванса.
		ОтобратьСотрудниковРассчитываемыхВПервуюПоловинуМесяца(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", МесяцНачисления);
	КонецЕсли;
	
	// Нужно получить даты приема/увольнения для корректировки периодов начислений.
	УстановитьПривилегированныйРежим(Истина);
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", "Сотрудник,ДатаОкончания");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ДатаПриема,ДатаУвольнения");
	УстановитьПривилегированныйРежим(Ложь);
	
	// Показатели плановых начислений.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник,Организация");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Начало, Окончание, "МЕСЯЦ", "Период", "ВТДатыНачалаМесяцев");

	// Периоды из разных источников объединяем в единый набор, 
	// при этом про каждый период известно, когда он используется.
	// Затем для каждого начисления составляем интервалы только из периодов, 
	// которые требуются особенностями именно этого начисления,
	// Для начислений, использующих базовый период действия требуется рассчитать его.
	// Если период связан с изменением показателей, то используем его только для тех начислений, 
	// в формулах которых этот показатель используется.
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадроваяИсторияСотрудников.Период,
	|	КадроваяИсторияСотрудников.Сотрудник,
	|	ИСТИНА КАК ИзменениеПодразделения,
	|	ЛОЖЬ КАК ЭтоНачалоМесяца,
	|	ЛОЖЬ КАК ИзменениеПлановыхНачислений,
	|	ЛОЖЬ КАК ИзменениеПериодическихПоказателей,
	|	NULL КАК ОбъектИзменения
	|ПОМЕСТИТЬ ВТПериодыИзменений
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Начисления.ПериодДействияКонец, ДЕНЬ, 1), ДЕНЬ),
	|	Начисления.Сотрудник,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	Начисления.ВидРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК Сотрудники
	|		ПО (Сотрудники.Сотрудник = Начисления.Сотрудник)
	|			И (Начисления.Регистратор <> &Регистратор)
	|			И (Начисления.Сторно = ЛОЖЬ)
	|			И (Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособийПоУходуЗаРебенком))
	|			И (Начисления.ПериодДействия МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И &ДатаОкончания)
	|			И (Начисления.ПериодДействияКонец > &ДатаНачала)
	|			И (Начисления.ПериодДействияКонец < &ДатаОкончания)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ПериодДействияНачало,
	|	Начисления.Сотрудник,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	Начисления.ВидРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК Сотрудники
	|		ПО (Сотрудники.Сотрудник = Начисления.Сотрудник)
	|			И (Начисления.Регистратор <> &Регистратор)
	|			И (Начисления.Сторно = ЛОЖЬ)
	|			И (Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииПособийПоУходуЗаРебенком))
	|			И (Начисления.ПериодДействия МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И &ДатаОкончания)
	|			И (Начисления.ПериодДействияНачало > &ДатаНачала)
	|			И (Начисления.ПериодДействияНачало < &ДатаОкончания)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДатыНачалаМесяцев.Период,
	|	СотрудникиПериоды.Сотрудник,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	NULL
	|ИЗ
	|	ВТДатыНачалаМесяцев КАК ДатыНачалаМесяцев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ПО (ДатыНачалаМесяцев.Период МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
	|		ПО (КадровыеДанные.Сотрудник = СотрудникиПериоды.Сотрудник)
	|			И ДатыНачалаМесяцев.Период >= КадровыеДанные.ДатаПриема
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Период,
	|	ПлановыеНачисления.Сотрудник,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ПлановыеНачисления.Начисление
	|ИЗ
	|	ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателейСотрудников.Период,
	|	ЗначенияПериодическихПоказателейСотрудников.Сотрудник,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЗначенияПериодическихПоказателейСотрудников.Показатель
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеНачисления.Период,
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление КАК Начисление,
	|	ПлановыеНачисления.Используется КАК Используется
	|ПОМЕСТИТЬ ВТПериодыИспользованияНачислений
	|ИЗ
	|	ВТПлановыеНачисленияСрезИДвижения КАК ПлановыеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияСотрудников.Сотрудник,
	|	НачисленияСотрудников.Начисление,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование
	|ПОМЕСТИТЬ ВТНачисленияСотрудников
	|ИЗ
	|	ВТПериодыИспользованияНачислений КАК НачисленияСотрудников";
	
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Окончание));
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("КатегорииПособийПоУходуЗаРебенком", КатегорииПособийПоУходуЗаРебенком);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	// Для начислений, рассчитываемых предопределенным способом, могут быть определены дополнительные даты, 
	// которые делят строку начисления на отдельные периоды с разными условиями.
	
	СоздатьВТДополнительныеДатыИзмененияНачислений(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыИзменений.Период,
	|	ПериодыИзменений.Сотрудник,
	|	ПериодыИспользованияНачислений.Начисление
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПериодыИзменений КАК ПериодыИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИспользованияНачислений КАК ПериодыИспользованияНачислений
	|		ПО ПериодыИзменений.Сотрудник = ПериодыИспользованияНачислений.Сотрудник
	|			И (ПериодыИзменений.ЭтоНачалоМесяца)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыИзменений.Период,
	|	ПериодыИзменений.Сотрудник,
	|	ПериодыИспользованияНачислений.Начисление
	|ИЗ
	|	ВТПериодыИзменений КАК ПериодыИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИспользованияНачислений КАК ПериодыИспользованияНачислений
	|		ПО ПериодыИзменений.Сотрудник = ПериодыИспользованияНачислений.Сотрудник
	|			И (ПериодыИзменений.ИзменениеПодразделения)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыИзменений.Период,
	|	ПериодыИзменений.Сотрудник,
	|	ПериодыИспользованияНачислений.Начисление
	|ИЗ
	|	ВТПериодыИзменений КАК ПериодыИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИспользованияНачислений КАК ПериодыИспользованияНачислений
	|		ПО ПериодыИзменений.Сотрудник = ПериодыИспользованияНачислений.Сотрудник
	|			И (ПериодыИзменений.ИзменениеПлановыхНачислений)
	|			И ПериодыИзменений.ОбъектИзменения = ПериодыИспользованияНачислений.Начисление
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыИзменений.Период,
	|	ПериодыИзменений.Сотрудник,
	|	ПериодыИспользованияНачислений.Начисление
	|ИЗ
	|	ВТПериодыИзменений КАК ПериодыИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИспользованияНачислений КАК ПериодыИспользованияНачислений
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|			ПО (ПоказателиНачислений.Ссылка = ПериодыИспользованияНачислений.Начисление)
	|		ПО ПериодыИзменений.Сотрудник = ПериодыИспользованияНачислений.Сотрудник
	|			И (ПериодыИзменений.ИзменениеПлановыхНачислений)
	|			И (ПериодыИзменений.ИзменениеПериодическихПоказателей)
	|			И (ПериодыИзменений.ОбъектИзменения = ПоказателиНачислений.Показатель)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыИзменений.Дата,
	|	ПериодыИзменений.Сотрудник,
	|	ПериодыИзменений.Начисление
	|ИЗ
	|	ВТДополнительныеДатыИзмененияНачислений КАК ПериодыИзменений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Сотрудник,
	|	Периоды.Начисление,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	Периоды.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(ПериодыСлед.Период) ЕСТЬ NULL 
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ПериодыСлед.Период, СЕКУНДА, -1))
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК ПериодыСлед
	|		ПО Периоды.Период < ПериодыСлед.Период
	|			И Периоды.Сотрудник = ПериодыСлед.Сотрудник
	|			И Периоды.Начисление = ПериодыСлед.Начисление
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Сотрудник,
	|	Периоды.Период,
	|	Периоды.Начисление";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Готовим таблицу, в которой по другим однотипным документам составляются периоды уже выполненных начислений.
	// При заполнении эти периоды будут исключены.
	// Для этого предварительно составляем ВТ определяющих начислений, то есть таких, 
	// наличие которых в указанном периоде будет означать, что этот период уже "покрыт".
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Начисление
	|ПОМЕСТИТЬ ВТОпределяющиеНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииПособийПоУходуЗаРебенком)";
	
	Запрос.Выполнить();
	
	Если Не ПерерасчетПособий Тогда
		ИсключитьИнтервалыРанееВыполненныхНачислений(МенеджерВременныхТаблиц, Организация, ДокументСсылка, МесяцНачисления, РасчетПервойПоловиныМесяца);
	КонецЕсли;
	
	// Определены интервалы и состав полагающихся сотрудникам начислений,
	// составляем итоговую выборку.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	ВсеНачисления.Начисление,
	|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК КадроваяИсторияСотрудниковПериод,
	|	МАКСИМУМ(ВсеНачисления.Период) КАК ПлановыеНачисленияПериод
	|ПОМЕСТИТЬ ВТИнтервалыИДатыСрезов
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|		ПО (КадроваяИсторияСотрудников.Сотрудник = Интервалы.Сотрудник)
	|			И (КадроваяИсторияСотрудников.Период <= Интервалы.ДатаНачала)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезИДвижения КАК ВсеНачисления
	|		ПО (ВсеНачисления.Сотрудник = Интервалы.Сотрудник)
	|			И (ВсеНачисления.Начисление = Интервалы.Начисление)
	|			И (ВсеНачисления.Период <= Интервалы.ДатаНачала)
	|
	|СГРУППИРОВАТЬ ПО
	|	Интервалы.Сотрудник,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	ВсеНачисления.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Интервалы.Сотрудник,
	|	КадроваяИсторияСотрудников.Организация,
	|	КадроваяИсторияСотрудников.Подразделение,
	|	КадроваяИсторияСотрудников.Должность,
	|	КадроваяИсторияСотрудников.ВидЗанятости,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	ВсеНачисления.Начисление,
	|	ВсеНачисления.Начисление.Рассчитывается,
	|	ВсеНачисления.Размер,
	|	ВЫБОР
	|		КОГДА КадроваяИсторияСотрудников.Организация <> &Организация
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ КадроваяИсторияСотрудников.Подразделение В ИЕРАРХИИ (&Подразделение)
	|				И НЕ &ПоВсемПодразделениям
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВсеНачисления.Используется
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Используется,
	|	Должности.РеквизитДопУпорядочивания КАК ПорядокДолжности,
	|	Подразделения.РеквизитДопУпорядочивания КАК ПорядокПодразделения,
	|	Сотрудники.Наименование КАК ФИОСотрудника
	|ПОМЕСТИТЬ ВТДанныеПособий
	|ИЗ
	|	ВТИнтервалыИДатыСрезов КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО Интервалы.Сотрудник = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
	|		ПО Интервалы.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
	|			И Интервалы.КадроваяИсторияСотрудниковПериод = КадроваяИсторияСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезИДвижения КАК ВсеНачисления
	|		ПО Интервалы.Сотрудник = ВсеНачисления.Сотрудник
	|			И Интервалы.Начисление = ВсеНачисления.Начисление
	|			И Интервалы.ПлановыеНачисленияПериод = ВсеНачисления.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО (Должности.Ссылка = КадроваяИсторияСотрудников.Должность)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ПО (Подразделения.Ссылка = КадроваяИсторияСотрудников.Подразделение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПособий.Сотрудник,
	|	ДанныеПособий.Начисление,
	|	НАЧАЛОПЕРИОДА(ДанныеПособий.ДатаНачала, МЕСЯЦ) КАК Месяц,
	|	МАКСИМУМ(ДанныеПособий.ДатаНачала) КАК ДатаНачала
	|ПОМЕСТИТЬ ВТДатыНачисленийВЦеломЗаМесяц
	|ИЗ
	|	ВТДанныеПособий КАК ДанныеПособий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ДанныеПособий.Начисление)
	|			И (Начисления.НачисляетсяВЦеломЗаМесяц)
	|			И (ДанныеПособий.Используется)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПособий.Сотрудник,
	|	ДанныеПособий.Начисление,
	|	НАЧАЛОПЕРИОДА(ДанныеПособий.ДатаНачала, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПособий.Сотрудник КАК Сотрудник,
	|	ДанныеПособий.Организация КАК Организация,
	|	ДанныеПособий.Подразделение КАК Подразделение,
	|	ДанныеПособий.Должность КАК Должность,
	|	ДанныеПособий.ВидЗанятости КАК ВидЗанятости,
	|	ДанныеПособий.ДатаНачала КАК ДатаНачала,
	|	ДанныеПособий.ДатаОкончания КАК ДатаОкончания,
	|	ДанныеПособий.Начисление КАК Начисление,
	|	ДанныеПособий.Начисление.Рассчитывается КАК НачислениеРассчитывается,
	|	ДанныеПособий.Размер КАК Размер,
	|	ДанныеПособий.Используется КАК Используется,
	|	ДанныеПособий.ПорядокДолжности КАК ПорядокДолжности,
	|	ДанныеПособий.ПорядокПодразделения КАК ПорядокПодразделения,
	|	ДанныеПособий.ФИОСотрудника КАК ФИОСотрудника,
	|	Начисления.ОчередностьРасчета КАК ОчередностьРасчета,
	|	Начисления.РеквизитДопУпорядочивания КАК ПорядокНачисления
	|ИЗ
	|	ВТДанныеПособий КАК ДанныеПособий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ДанныеПособий.Начисление)
	|			И (НЕ(Начисления.НачисляетсяВЦеломЗаМесяц
	|					И ДанныеПособий.Используется))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПособий.Сотрудник,
	|	ДанныеПособий.Организация,
	|	ДанныеПособий.Подразделение,
	|	ДанныеПособий.Должность,
	|	ДанныеПособий.ВидЗанятости,
	|	ДанныеПособий.ДатаНачала,
	|	ДанныеПособий.ДатаОкончания,
	|	ДанныеПособий.Начисление,
	|	ДанныеПособий.Начисление.Рассчитывается,
	|	ДанныеПособий.Размер,
	|	ДанныеПособий.Используется,
	|	ДанныеПособий.ПорядокДолжности,
	|	ДанныеПособий.ПорядокПодразделения,
	|	ДанныеПособий.ФИОСотрудника,
	|	Начисления.ОчередностьРасчета,
	|	Начисления.РеквизитДопУпорядочивания
	|ИЗ
	|	ВТДанныеПособий КАК ДанныеПособий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = ДанныеПособий.Начисление)
	|			И (Начисления.НачисляетсяВЦеломЗаМесяц)
	|			И (ДанныеПособий.Используется)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыНачисленийВЦеломЗаМесяц КАК ДатыНачисленийВЦеломЗаМесяц
	|		ПО (ДатыНачисленийВЦеломЗаМесяц.Сотрудник = ДанныеПособий.Сотрудник)
	|			И (ДатыНачисленийВЦеломЗаМесяц.Начисление = ДанныеПособий.Начисление)
	|			И (ДатыНачисленийВЦеломЗаМесяц.Месяц = НАЧАЛОПЕРИОДА(ДанныеПособий.ДатаНачала, МЕСЯЦ))
	|			И (ДатыНачисленийВЦеломЗаМесяц.ДатаНачала = ДанныеПособий.ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПособий.ПорядокДолжности,
	|	ДанныеПособий.ПорядокПодразделения,
	|	ДанныеПособий.ФИОСотрудника,
	|	ОчередностьРасчета,
	|	ПорядокНачисления,
	|	ДанныеПособий.ДатаНачала";
	
	// Для начислений, выполняемых в целом за месяц, оставляем только одну запись - самую последнюю с признаком
	// "Используется".
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Не ЗначениеЗаполнено(Подразделение));
	
	// Упорядочим согласно настройкам.
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "ДанныеПособий", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Основная выборка для формирования набора записей.
	Выборка = РезультатЗапроса.Выбрать();
	
	ПособияЗаПериод = ПустаяТаблицаПособия();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Используется Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ПособияЗаПериод.Добавить();
		НоваяСтрока.ПериодДействия = НачалоМесяца(Выборка.ДатаНачала);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Не Выборка.НачислениеРассчитывается Тогда 
			НоваяСтрока.Результат = Выборка.Размер;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияПоказателейНачислений(ПособияЗаПериод);
	
	Возврат ПособияЗаПериод;

КонецФункции

// Формирует таблицу с данными о выявленных удержаниях.
// Таблица включает в себя плановые удержания и удержания по значению показателя.
// 
// Параметры:
//	- Организация
//
Функция ДанныеДляУдержанияЗарплаты(Организация, Начало, Окончание, Подразделение = Неопределено, Сотрудники = Неопределено, РежимНачисления = Неопределено) Экспорт
	
	// Выявляем удержания, применимые в указанном периоде.
	// Получаем значения показателей для этих удержаний.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем физических лиц сотрудников, «засветившихся» в указанном периоде в организации.
	Если Сотрудники = Неопределено И ЗначениеЗаполнено(Подразделение) Тогда
		
		// Отбираем рабочие места по подразделению, выбираем сотрудников, по которым затем получаем полную кадровую историю.
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= Начало;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = Окончание;
		ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина);
		
	КонецЕсли;
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.Организация  		= Организация;
	ПараметрыПолученияРабочихМест.НачалоПериода		= Начало;
	ПараметрыПолученияРабочихМест.ОкончаниеПериода  = Окончание;
	ПараметрыПолученияРабочихМест.СписокСотрудников = Сотрудники;
	ПараметрыПолученияРабочихМест.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца Тогда
		ОтобратьСотрудниковРассчитываемыхВПервуюПоловинуМесяца(МенеджерВременныхТаблиц, "ВТРабочиеМестаСотрудников", НачалоМесяца(Начало));
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РабочиеМестаСотрудников.Период,
		|	РабочиеМестаСотрудников.Сотрудник,
		|	РабочиеМестаСотрудников.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА РабочиеМестаСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	РабочиеМестаСотрудников.Подразделение
		|ПОМЕСТИТЬ ВТШтатныеСотрудники
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатныеСотрудники.Период,
		|	ШтатныеСотрудники.Сотрудник,
		|	ШтатныеСотрудники.ФизическоеЛицо,
		|	ШтатныеСотрудники.Используется,
		|	ШтатныеСотрудники.Подразделение
		|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
		|ИЗ
		|	ВТШтатныеСотрудники КАК ШтатныеСотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыДГПХ.ДатаНачала,
		|	ПериодыДГПХ.Сотрудник,
		|	ПериодыДГПХ.ФизическоеЛицо,
		|	ИСТИНА,
		|	ПериодыДГПХ.Подразделение
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДГПХ
		|ГДЕ
		|	ПериодыДГПХ.ДатаНачала <= &ДатаОкончания
		|	И ПериодыДГПХ.ДатаОкончания >= &ДатаНачала
		|	И ПериодыДГПХ.Сотрудник В(&Сотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТШтатныеСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	Сотрудники.ФизическоеЛицо,
		|	&ДатаНачала КАК Период,
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 1) КАК ДатаНачала,
		|	&ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = РабочиеМестаСотрудников.Сотрудник)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("Организация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Формируем временные таблицы по источникам данных: начислениям и показателям.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФизическиеЛицаПериоды", "ФизическоеЛицо,Организация");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеУдержания",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеУдержания",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМестаСотрудников.Сотрудник,
		|	&ДатаНачала КАК Период,
		|	&ДатаНачала КАК ДатаНачала,
		|	&ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериоды", "Сотрудник");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПрименениеПлановыхНачислений",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТПрименениеПлановыхУдержанийСрезИДвижения");
	
	// Временные таблицы для получения показателей.
	СозданныеВТ = Новый Массив;
	СоздатьВТЗначенийПериодическихПоказателейФизическихЛиц(МенеджерВременныхТаблиц, СозданныеВТ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, Начало, Окончание, "МЕСЯЦ", "Период", "ВТДатыНачалаМесяцев");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеУдержанияСрезПоследних.Период,
		|	ПлановыеУдержанияСрезПоследних.ФизическоеЛицо,
		|	ПлановыеУдержанияСрезПоследних.Удержание,
		|	ПлановыеУдержанияСрезПоследних.ДокументОснование,
		|	ПлановыеУдержанияСрезПоследних.Используется,
		|	ПлановыеУдержанияСрезПоследних.Размер
		|ПОМЕСТИТЬ ВТПлановыеУдержанияСрезИДвижения
		|ИЗ
		|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержанияСрезПоследних
		|ГДЕ
		|	(ПлановыеУдержанияСрезПоследних.Удержание.УчаствуетВРасчетеПервойПоловиныМесяца
		|			ИЛИ &ОкончательныйРасчет = ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПлановыеУдержания.Период,
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.Удержание,
		|	ПлановыеУдержания.ДокументОснование,
		|	ПлановыеУдержания.Используется,
		|	ПлановыеУдержания.Размер
		|ИЗ
		|	ВТПлановыеУдержания КАК ПлановыеУдержания
		|ГДЕ
		|	(ПлановыеУдержания.Удержание.УчаствуетВРасчетеПервойПоловиныМесяца
		|			ИЛИ &ОкончательныйРасчет = ИСТИНА)";
	
	Запрос.УстановитьПараметр("ОкончательныйРасчет", РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыНачалаМесяцев.Период,
		|	ФизическиеЛицаПериоды.ФизическоеЛицо,
		|	ИСТИНА КАК Используется
		|ПОМЕСТИТЬ ВТПериодыИзменений
		|ИЗ
		|	ВТДатыНачалаМесяцев КАК ДатыНачалаМесяцев
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ПО (ДатыНачалаМесяцев.Период МЕЖДУ ФизическиеЛицаПериоды.Период И ФизическиеЛицаПериоды.ДатаОкончания)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КадроваяИстория.Период,
		|	КадроваяИстория.ФизическоеЛицо,
		|	КадроваяИстория.Используется
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК КадроваяИстория
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПрименениеПлановыхУдержаний.Период,
		|	ПрименениеПлановыхУдержаний.Сотрудник.ФизическоеЛицо,
		|	ПрименениеПлановыхУдержаний.Применение
		|ИЗ
		|	ВТПрименениеПлановыхУдержанийСрезИДвижения КАК ПрименениеПлановыхУдержаний
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПлановыеУдержания.Период,
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.Используется
		|ИЗ
		|	ВТПлановыеУдержанияСрезИДвижения КАК ПлановыеУдержания
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗначенияПоказателейСотрудников.Период,
		|	ЗначенияПоказателейСотрудников.ФизическоеЛицо,
		|	ИСТИНА
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПоказателейСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.Показатель = ЗначенияПоказателейСотрудников.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияСрезИДвижения КАК ПлановыеУдержания
		|		ПО (ПлановыеУдержания.ФизическоеЛицо = ЗначенияПоказателейСотрудников.ФизическоеЛицо)
		|			И (ПлановыеУдержания.Период = ЗначенияПоказателейСотрудников.Период)
		|			И (ПлановыеУдержания.Удержание = ПоказателиУдержаний.Ссылка)
		|ГДЕ
		|	ПлановыеУдержания.Период ЕСТЬ НЕ NULL ";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Разовые удержания (по значению показателей), выполняемые в целом за месяц, включаем только в окончательный расчет.
	Если РежимНачисления <> Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
			|	ЗНАЧЕНИЕ(ПланВидовРасчета.Удержания.ПустаяСсылка) КАК Удержание
			|ПОМЕСТИТЬ ВТУдержанияПоЗначениюПоказателя
			|ГДЕ
			|	ЛОЖЬ";
		Запрос.Выполнить();
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МАКСИМУМ(ПериодыИзменений.Период) КАК Период,
			|	ПериодыИзменений.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТПериодыУдержанийВЦеломЗаМесяц
			|ИЗ
			|	ВТПериодыИзменений КАК ПериодыИзменений
			|ГДЕ
			|	ПериодыИзменений.Используется = ИСТИНА
			|
			|СГРУППИРОВАТЬ ПО
			|	ПериодыИзменений.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыУдержанийВЦеломЗаМесяц.Период,
			|	ПериодыУдержанийВЦеломЗаМесяц.ФизическоеЛицо,
			|	УдержанияПоказатели.Ссылка КАК Удержание
			|ПОМЕСТИТЬ ВТУдержанияПоЗначениюПоказателя
			|ИЗ
			|	ВТПериодыУдержанийВЦеломЗаМесяц КАК ПериодыУдержанийВЦеломЗаМесяц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхПоказателейСотрудников
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
			|			ПО (УдержанияПоказатели.Показатель = ЗначенияРазовыхПоказателейСотрудников.Показатель)
			|				И (УдержанияПоказатели.ОпределяющийПоказатель)
			|				И (НЕ УдержанияПоказатели.Ссылка.ВАрхиве)
			|				И (УдержанияПоказатели.Ссылка.УчаствуетВРасчетеПервойПоловиныМесяца
			|					ИЛИ &ОкончательныйРасчет)
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
			|			ПО (СотрудникиПериоды.Сотрудник = ЗначенияРазовыхПоказателейСотрудников.Сотрудник)
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|			ПО (Сотрудники.Ссылка = ЗначенияРазовыхПоказателейСотрудников.Сотрудник)
			|				И (Сотрудники.ГоловнаяОрганизация = ЗначенияРазовыхПоказателейСотрудников.Организация.ГоловнаяОрганизация)
			|		ПО (ЗначенияРазовыхПоказателейСотрудников.ПериодДействия = НАЧАЛОПЕРИОДА(ПериодыУдержанийВЦеломЗаМесяц.Период, МЕСЯЦ))
			|			И (Сотрудники.ФизическоеЛицо = ПериодыУдержанийВЦеломЗаМесяц.ФизическоеЛицо)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПериодыУдержанийВЦеломЗаМесяц.Период,
			|	ПериодыУдержанийВЦеломЗаМесяц.ФизическоеЛицо,
			|	УдержанияПоказатели.Ссылка
			|ИЗ
			|	ВТПериодыУдержанийВЦеломЗаМесяц КАК ПериодыУдержанийВЦеломЗаМесяц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхПоказателейСотрудников
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
			|			ПО (УдержанияПоказатели.Показатель = ЗначенияОперативныхПоказателейСотрудников.Показатель)
			|				И (УдержанияПоказатели.ОпределяющийПоказатель)
			|				И (НЕ УдержанияПоказатели.Ссылка.ВАрхиве)
			|				И (УдержанияПоказатели.Ссылка.УчаствуетВРасчетеПервойПоловиныМесяца
			|					ИЛИ &ОкончательныйРасчет)
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
			|			ПО (СотрудникиПериоды.Сотрудник = ЗначенияОперативныхПоказателейСотрудников.Сотрудник)
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|			ПО (Сотрудники.Ссылка = ЗначенияОперативныхПоказателейСотрудников.Сотрудник)
			|		ПО (ЗначенияОперативныхПоказателейСотрудников.Период МЕЖДУ НАЧАЛОПЕРИОДА(ПериодыУдержанийВЦеломЗаМесяц.Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(ПериодыУдержанийВЦеломЗаМесяц.Период, МЕСЯЦ))
			|			И (Сотрудники.ФизическоеЛицо = ПериодыУдержанийВЦеломЗаМесяц.ФизическоеЛицо)
			|			И (Сотрудники.ГоловнаяОрганизация = ЗначенияОперативныхПоказателейСотрудников.Организация.ГоловнаяОрганизация)";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПериодыИзменений.Период,
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.Удержание,
		|	ПлановыеУдержания.ДокументОснование
		|ПОМЕСТИТЬ ВТПериодыУдержаний
		|ИЗ
		|	ВТПлановыеУдержанияСрезИДвижения КАК ПлановыеУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзменений КАК ПериодыИзменений
		|		ПО (ПериодыИзменений.ФизическоеЛицо = ПлановыеУдержания.ФизическоеЛицо)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдержанияПоЗначениюПоказателя.Период,
		|	УдержанияПоЗначениюПоказателя.ФизическоеЛицо,
		|	УдержанияПоЗначениюПоказателя.Удержание,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	ВТУдержанияПоЗначениюПоказателя КАК УдержанияПоЗначениюПоказателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияСрезИДвижения КАК ПлановыеУдержания
		|		ПО УдержанияПоЗначениюПоказателя.Период = ПлановыеУдержания.Период
		|			И УдержанияПоЗначениюПоказателя.ФизическоеЛицо = ПлановыеУдержания.ФизическоеЛицо
		|			И УдержанияПоЗначениюПоказателя.Удержание = ПлановыеУдержания.Удержание
		|ГДЕ
		|	ПлановыеУдержания.Период ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеУдержания.Период,
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.Удержание,
		|	ПлановыеУдержания.ДокументОснование,
		|	ПлановыеУдержания.Используется,
		|	ПлановыеУдержания.Размер
		|ПОМЕСТИТЬ ВТВсеУдержания
		|ИЗ
		|	ВТПлановыеУдержанияСрезИДвижения КАК ПлановыеУдержания
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УдержанияПоЗначениюПоказателя.Период,
		|	УдержанияПоЗначениюПоказателя.ФизическоеЛицо,
		|	УдержанияПоЗначениюПоказателя.Удержание,
		|	НЕОПРЕДЕЛЕНО,
		|	ИСТИНА,
		|	0
		|ИЗ
		|	ВТУдержанияПоЗначениюПоказателя КАК УдержанияПоЗначениюПоказателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.ФизическоеЛицо,
		|	Периоды.Удержание,
		|	Периоды.ДокументОснование,
		|	Периоды.Период КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ПериодыСлед.Период) ЕСТЬ NULL 
		|			ТОГДА &ДатаОкончания
		|		ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ПериодыСлед.Период, СЕКУНДА, -1))
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТПериодыУдержаний КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыУдержаний КАК ПериодыСлед
		|		ПО Периоды.Период < ПериодыСлед.Период
		|			И Периоды.ФизическоеЛицо = ПериодыСлед.ФизическоеЛицо
		|			И Периоды.Удержание = ПериодыСлед.Удержание
		|			И Периоды.ДокументОснование = ПериодыСлед.ДокументОснование
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.ФизическоеЛицо,
		|	Периоды.Удержание,
		|	Периоды.ДокументОснование,
		|	Периоды.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	ВсеУдержания.Удержание,
		|	ВсеУдержания.ДокументОснование,
		|	МАКСИМУМ(ВсеУдержания.Период) КАК ПлановыеУдержанияПериод,
		|	МАКСИМУМ(ПрименениеПлановыхУдержаний.Период) КАК ПрименениеПлановыхУдержанийПериод,
		|	МАКСИМУМ(КадроваяИстория.Период) КАК КадроваяИсторияПериод
		|ПОМЕСТИТЬ ВТИнтервалыДатыСрезов
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеУдержания КАК ВсеУдержания
		|		ПО (ВсеУдержания.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ВсеУдержания.Удержание = Интервалы.Удержание)
		|			И (ВсеУдержания.ДокументОснование = Интервалы.ДокументОснование)
		|			И (ВсеУдержания.Период <= Интервалы.ДатаНачала)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИстория
		|		ПО (КадроваяИстория.Сотрудник.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (КадроваяИстория.Период <= Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхУдержанийСрезИДвижения КАК ПрименениеПлановыхУдержаний
		|		ПО (ПрименениеПлановыхУдержаний.Сотрудник.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ПрименениеПлановыхУдержаний.Период <= Интервалы.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	ВсеУдержания.Удержание,
		|	ВсеУдержания.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.ДатаНачала КАК ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	НЕ Удержания.УчаствуетВРасчетеПервойПоловиныМесяца КАК УдерживаетсяВЦеломЗаМесяц,
		|	Интервалы.ДокументОснование,
		|	ВсеУдержания.Размер,
		|	ВсеУдержания.Используется
		|ПОМЕСТИТЬ ВТДанныеУдержаний
		|ИЗ
		|	ВТИнтервалыДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
		|		ПО (Удержания.Ссылка = Интервалы.Удержание)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеУдержания КАК ВсеУдержания
		|		ПО Интервалы.ФизическоеЛицо = ВсеУдержания.ФизическоеЛицо
		|			И Интервалы.Удержание = ВсеУдержания.Удержание
		|			И Интервалы.ДокументОснование = ВсеУдержания.ДокументОснование
		|			И Интервалы.ПлановыеУдержанияПериод = ВсеУдержания.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИстория
		|		ПО (КадроваяИстория.Сотрудник.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (КадроваяИстория.Период = Интервалы.КадроваяИсторияПериод)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхУдержанийСрезИДвижения КАК ПрименениеПлановыхУдержаний
		|		ПО Интервалы.ФизическоеЛицо = ПрименениеПлановыхУдержаний.Сотрудник.ФизическоеЛицо
		|			И Интервалы.ПрименениеПлановыхУдержанийПериод = ПрименениеПлановыхУдержаний.Период
		|ГДЕ
		|	ВсеУдержания.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеУдержаний.ФизическоеЛицо,
		|	ДанныеУдержаний.Удержание,
		|	ДанныеУдержаний.ДокументОснование,
		|	МАКСИМУМ(ДанныеУдержаний.ДатаНачала) КАК Дата
		|ПОМЕСТИТЬ ВТДатыУдержанийВЦеломЗаМесяц
		|ИЗ
		|	ВТДанныеУдержаний КАК ДанныеУдержаний
		|ГДЕ
		|	ДанныеУдержаний.УдерживаетсяВЦеломЗаМесяц
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУдержаний.ФизическоеЛицо,
		|	ДанныеУдержаний.Удержание,
		|	ДанныеУдержаний.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеУдержаний.ФизическоеЛицо,
		|	ДанныеУдержаний.ДатаНачала,
		|	ДанныеУдержаний.ДатаОкончания,
		|	ДанныеУдержаний.Удержание,
		|	ДанныеУдержаний.ДокументОснование,
		|	ДанныеУдержаний.Размер,
		|	ДанныеУдержаний.Используется
		|ПОМЕСТИТЬ ВТУдержанияЗаПериод
		|ИЗ
		|	ВТДанныеУдержаний КАК ДанныеУдержаний
		|ГДЕ
		|	НЕ ДанныеУдержаний.УдерживаетсяВЦеломЗаМесяц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеУдержаний.ФизическоеЛицо,
		|	ДанныеУдержаний.ДатаНачала,
		|	ДанныеУдержаний.ДатаОкончания,
		|	ДанныеУдержаний.Удержание,
		|	ДанныеУдержаний.ДокументОснование,
		|	ДанныеУдержаний.Размер,
		|	ДанныеУдержаний.Используется
		|ИЗ
		|	ВТДанныеУдержаний КАК ДанныеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыУдержанийВЦеломЗаМесяц КАК ДатыУдержанийВЦеломЗаМесяц
		|		ПО ДанныеУдержаний.ФизическоеЛицо = ДатыУдержанийВЦеломЗаМесяц.ФизическоеЛицо
		|			И ДанныеУдержаний.Удержание = ДатыУдержанийВЦеломЗаМесяц.Удержание
		|			И ДанныеУдержаний.ДокументОснование = ДатыУдержанийВЦеломЗаМесяц.ДокументОснование
		|			И ДанныеУдержаний.ДатаНачала = ДатыУдержанийВЦеломЗаМесяц.Дата
		|			И (ДанныеУдержаний.УдерживаетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТФизическиеЛицаПериоды
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Не ЗначениеЗаполнено(Подразделение));
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	УдержанияЗаПериод = ПустаяТаблицаУдержанияДокумента();
	
	ЗаполнитьЗначенияПоказателейУдержаний(МенеджерВременныхТаблиц, УдержанияЗаПериод, Организация, СозданныеВТ, РежимНачисления);
	
	Возврат УдержанияЗаПериод;
	
КонецФункции

// Формирует таблицу начислений, заполненную строками для указанного сотрудника.
//
Функция ДанныеДляНачисленияСотруднику(Организация, Начало, Окончание, МесяцНачисления, Сотрудник, Начисление, ДокументСсылка, ИзвестныеПоказатели = Неопределено) Экспорт
	
	СотрудникиНачисления = ПустаяТаблицаСотрудниковНачислений();
	
	НоваяСтрока = СотрудникиНачисления.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Начисление = Начисление;
	
	ИзвестныеЗначенияПоказателей = Неопределено;
	Если ИзвестныеПоказатели <> Неопределено Тогда
		ИзвестныеЗначенияПоказателей = ИзвестныеЗначенияПоказателейСотрудника(Сотрудник, ИзвестныеПоказатели);
	КонецЕсли;
	
	Возврат ДанныеДляНачисленияЗарплаты(Организация, Начало, Окончание, МесяцНачисления, , , СотрудникиНачисления, ИзвестныеЗначенияПоказателей, , ДокументСсылка);
	
КонецФункции

// Формирует таблицу удержаний, заполненную строками для указанного сотрудника.
//
Функция ДанныеДляУдержанияЗарплатыСотрудника(Организация, Начало, Окончание, Сотрудник, Удержание, ДокументОснование = Неопределено, ИзвестныеПоказатели = Неопределено, РежимНачисления = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо,
	|	&ДатаНачала КАК ДатаНачала,
	|	&ДатаОкончания КАК ДатаОкончания,
	|	&Удержание КАК Удержание,
	|	&ДокументОснование КАК ДокументОснование,
	|	ИСТИНА КАК Используется,
	|	0 КАК Размер
	|ПОМЕСТИТЬ ВТУдержанияЗаПериод
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка = &Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНачала", Начало);
	Запрос.УстановитьПараметр("ДатаОкончания", Окончание);
	Запрос.УстановитьПараметр("Удержание", Удержание);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Выполнить();
	
	УдержанияЗаПериод = ПустаяТаблицаУдержанияДокумента();
	
	ЗаполнитьЗначенияПоказателейУдержаний(МенеджерВременныхТаблиц, УдержанияЗаПериод, Организация, , РежимНачисления);	
	
	// Расставляем известные значения показателей.
	Если ИзвестныеПоказатели <> Неопределено Тогда
		КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете("Удержания");
		Для Каждого СтрокаУдержаний Из УдержанияЗаПериод Цикл
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				Показатель = СтрокаУдержаний["Показатель" + НомерПоказателя];
				СтруктураЗначения = ИзвестныеПоказатели[Показатель];
				Если СтруктураЗначения <> Неопределено Тогда
					Для Каждого КлючИЗначение Из СтруктураЗначения Цикл
						СтрокаУдержаний[КлючИЗначение.Ключ + НомерПоказателя] = КлючИЗначение.Значение;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат УдержанияЗаПериод;
	
КонецФункции

// Функция предназначена для получения значений показателей 
// одного из начислений сотрудника.
//
// Параметры:
//	Сотрудник
//	Начисление
//	Начало
//	Окончание
//
// Возвращаемое значение:
//	Структура, содержащая показатели начисления, их значения, сопутствующие сведения.
//
Функция ЗначенияПоказателейНачисления(Сотрудник, Начисление, Начало, Окончание, ДокументОснование = Неопределено) Экспорт
	
	СотрудникиНачисления = ПустаяТаблицаСотрудниковНачислений();
	
	НоваяСтрока = СотрудникиНачисления.Добавить();
	НоваяСтрока.Сотрудник			= Сотрудник;
	НоваяСтрока.Начисление			= Начисление;
	НоваяСтрока.ДокументОснование	= ДокументОснование;
	НоваяСтрока.ДатаНачала			= Начало;
	НоваяСтрока.ДатаОкончания		= Окончание;
	
	ЗначенияПоказателей = ЗначенияПоказателейНачислений(СотрудникиНачисления);
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ЗначенияПоказателей[0]);
	
КонецФункции

// Функция предназначена для получения значений показателей 
// начислений сотрудников.
//
// Параметры:
//	ИсходныеДанные - таблица значений с колонками:
//		- Сотрудник,
//		- Начисление,
//		- ДатаНачала,
//		- ДатаОкончания
//	ИзвестныеЗначенияПоказателей - необязательный, таблица значений, 
//		значения показателей, которые не нужно выявлять 
//		(они уже известны потребителю, 
//			например, показатель «Средний заработок» в документе «Больничный лист»).
//
// Параметры:
//	Таблица значений, аналогичная исходной, 
//	добавляются колонки с показателями начислений, их значениями, сопутствующими сведениями.
//
Функция ЗначенияПоказателейНачислений(ИсходныеДанные, ИзвестныеЗначенияПоказателей = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Создаем таблицу значений с типизированными колонками и заполняем ее.
	СотрудникиНачисления = ПустаяТаблицаСотрудниковНачислений();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИсходныеДанные, СотрудникиНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиНачисления.Сотрудник,
		|	СотрудникиНачисления.Начисление,
		|	СотрудникиНачисления.ДокументОснование,
		|	СотрудникиНачисления.ДатаНачала,
		|	СотрудникиНачисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиНачисления
		|ИЗ
		|	&ИсходныеДанные КАК СотрудникиНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ДатаНачала,
		|	Сотрудники.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиНачисления КАК Сотрудники";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", СотрудникиНачисления);
	Запрос.Выполнить();
	
	// Определяем минимальную и максимальную даты для оптимизации последующих запросов.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Сотрудники.ДатаНачала) КАК МинимальнаяДата,
		|	МАКСИМУМ(Сотрудники.ДатаОкончания) КАК МаксимальнаяДата
		|ИЗ
		|	ВТСотрудникиПериоды КАК Сотрудники";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	МинимальнаяДата = Неопределено;
	МаксимальнаяДата = Неопределено;
	Если Выборка.Следующий() Тогда
		МинимальнаяДата = Выборка.МинимальнаяДата;
		МаксимальнаяДата = Выборка.МаксимальнаяДата;
	КонецЕсли;
	
	// Получаем ВТРабочиеМестаСотрудников для определения организации и подразделения на конкретные даты.
	ПараметрыВТРабочиеМеста = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
		"ВТСотрудникиПериоды", "Сотрудник",	"ДатаНачала", "ДатаОкончания");
	ПараметрыВТРабочиеМеста.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗапросВТРабочиеМеста = КадровыйУчет.ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(Истина, "ВТРабочиеМестаСотрудников", ПараметрыВТРабочиеМеста);
	ЗапросВТРабочиеМеста.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросВТРабочиеМеста.Выполнить();
	
	// Получаем "кадровый" график работы.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", "Сотрудник,ДатаНачала");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ГрафикРаботы, СуммированныйУчетРабочегоВремени, Организация, Подразделение");
	УстановитьПривилегированныйРежим(Ложь);
	
	СоздатьВТПочасоваяОплатаТруда(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	// Пересоздаем таблицу ВТРабочиеМестаСотрудников, чтобы включить в нее еще и неработающих сотрудников.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаСотрудников.Период,
		|	РабочиеМестаСотрудников.Сотрудник,
		|	РабочиеМестаСотрудников.Организация,
		|	РабочиеМестаСотрудников.Подразделение
		|ПОМЕСТИТЬ ВТПрежняяТаблицаРабочиеМестаСотрудников
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеМестаРаботающихСотрудников.Период,
		|	РабочиеМестаРаботающихСотрудников.Сотрудник,
		|	РабочиеМестаРаботающихСотрудников.Организация,
		|	РабочиеМестаРаботающихСотрудников.Подразделение
		|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
		|ИЗ
		|	ВТПрежняяТаблицаРабочиеМестаСотрудников КАК РабочиеМестаРаботающихСотрудников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочиеМестаНеработающихСотрудников.Период,
		|	РабочиеМестаНеработающихСотрудников.Сотрудник,
		|	РабочиеМестаНеработающихСотрудников.Организация,
		|	РабочиеМестаНеработающихСотрудников.Подразделение
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК РабочиеМестаНеработающихСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрежняяТаблицаРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО (РабочиеМестаСотрудников.Сотрудник = РабочиеМестаНеработающихСотрудников.Сотрудник)
		|ГДЕ
		|	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL ";
	Запрос.Выполнить();
	
	// Формируем ВТ с организацией для корректного выявления значений показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Сотрудник,
		|	МИНИМУМ(СотрудникиНачисления.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(СотрудникиНачисления.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиОрганизации
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиНачисления КАК СотрудникиНачисления
		|		ПО РабочиеМеста.Сотрудник = СотрудникиНачисления.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Сотрудник";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиОрганизации", "Сотрудник,Организация");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения");
	
	// Применение начислений
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.Начисление,
		|	Сотрудники.ДатаНачала КАК ДатаНачала,
		|	Сотрудники.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиНачисления КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	// Организации и подразделения.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Подразделение,
		|	СотрудникиНачисления.ДатаНачала КАК ДатаНачала,
		|	СотрудникиНачисления.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОрганизацииПодразделения
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиНачисления КАК СотрудникиНачисления
		|		ПО РабочиеМеста.Сотрудник = СотрудникиНачисления.Сотрудник";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Таблицы периодических показателей организации.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииПодразделения",
			"Организация"),
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения");
	
	// Таблицы периодических показателей подразделения.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииПодразделения",
			"Подразделение"),
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения");
		
	Запрос.УстановитьПараметр("Праздники", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениРаботаВыходныеПраздничные());
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ВТМесяцыКадровыхДанных
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИндивидуальныеГрафики.Сотрудник КАК ГрафикРаботы,
		|	ИндивидуальныеГрафики.Месяц
		|ПОМЕСТИТЬ ВТИндивидуальныеГрафики
		|ИЗ
		|	ВТМесяцыКадровыхДанных КАК ИндивидуальныеГрафики
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ГДЕ
		|				ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ИндивидуальныеГрафики.Сотрудник
		|				И ГрафикиРаботыПоВидамВремени.Месяц = ИндивидуальныеГрафики.Месяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.Период,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ГрафикРаботы, КадровыеДанныеСотрудников.ГрафикРаботы) КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ИндивидуальныйГрафик.ГрафикРаботы ЕСТЬ НЕ NULL 
		|			ТОГДА ИндивидуальныйГрафик.ГрафикРаботы
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|					ТОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени
		|				ИНАЧЕ ГрафикиРаботыСотрудников.Ссылка
		|			КОНЕЦ
		|	КОНЕЦ КАК ГрафикРаботыНорма,
		|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени
		|ПОМЕСТИТЬ ВТГрафикиРаботы
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО (ГрафикиРаботыСотрудников.Ссылка = КадровыеДанныеСотрудников.ГрафикРаботы)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныйГрафик
		|		ПО (ИндивидуальныйГрафик.ГрафикРаботы = КадровыеДанныеСотрудников.Сотрудник)
		|			И (ИндивидуальныйГрафик.Месяц = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияЗаПериод.Сотрудник,
		|	НачисленияЗаПериод.ДатаНачала,
		|	НачисленияЗаПериод.ДатаОкончания,
		|	НачисленияЗаПериод.Начисление,
		|	НачисленияЗаПериод.ДокументОснование,
		|	НАЧАЛОПЕРИОДА(НачисленияЗаПериод.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени,
		|	ГрафикиРаботы.ГрафикРаботы
		|ПОМЕСТИТЬ ВТИнтервалыОплатыПраздничныхДней
		|ИЗ
		|	ВТСотрудникиНачисления КАК НачисленияЗаПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = НачисленияЗаПериод.Начисление)
		|			И (Начисления.ОбозначениеВТабелеУчетаРабочегоВремени В (&Праздники))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботы КАК ГрафикиРаботы
		|		ПО НачисленияЗаПериод.Сотрудник = ГрафикиРаботы.Сотрудник
		|			И НачисленияЗаПериод.ДатаНачала = ГрафикиРаботы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	Интервалы.Начисление,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ГДЕ
		|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Интервалы.ГрафикРаботы
		|					И ГрафикиРаботыПоВидамВремени.Месяц = Интервалы.Месяц
		|					И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания
		|					И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = Интервалы.ВидУчетаВремени
		|					И ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ
		|					И ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение > 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВремяВЧасах
		|ПОМЕСТИТЬ ВТСпособыОплатыПраздничныхДней
		|ИЗ
		|	ВТИнтервалыОплатыПраздничныхДней КАК Интервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиПроизвольнойФормулы.Ссылка КАК Начисление,
		|	ПоказателиПроизвольнойФормулы.Показатель,
		|	ПоказателиПроизвольнойФормулы.ЗапрашиватьПриВводе,
		|	ПоказателиПроизвольнойФормулы.НомерСтроки
		|ПОМЕСТИТЬ ВТНачисленияПоказатели
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиПроизвольнойФормулы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиНачисления КАК СотрудникиНачисления
		|		ПО (СотрудникиНачисления.Начисление = ПоказателиПроизвольнойФормулы.Ссылка)
		|ГДЕ
		|	ПоказателиПроизвольнойФормулы.ИспользоватьПриРасчете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК КадроваяИсторияСотрудниковПериод
		|ПОМЕСТИТЬ ВТДатыКадровойИстории
		|ИЗ
		|	ВТСотрудникиНачисления КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
		|		ПО (КадроваяИсторияСотрудников.Сотрудник = Интервалы.Сотрудник)
		|			И (КадроваяИсторияСотрудников.Период <= Интервалы.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала";
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Сотрудники.ФизическоеЛицо,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Интервалы.Начисление,
		|	Интервалы.Начисление.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц КАК ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	Интервалы.ДокументОснование,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.ЗапрашиватьПриВводе,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейСотрудников.Период) КАК ЗначенияПериодическихПоказателейСотрудниковПериод,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейПодразделений.Период) КАК ЗначенияПериодическихПоказателейПодразделенийПериод,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейОрганизаций.Период) КАК ЗначенияПериодическихПоказателейОрганизацийПериод
		|ПОМЕСТИТЬ ВТИнтервалыИДатыСрезов
		|ИЗ
		|	ВТСотрудникиНачисления КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыКадровойИстории КАК ДатыКадровойИстории
		|		ПО (ДатыКадровойИстории.Сотрудник = Интервалы.Сотрудник)
		|			И (ДатыКадровойИстории.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
		|		ПО Интервалы.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И (ДатыКадровойИстории.Сотрудник = КадроваяИсторияСотрудников.Сотрудник)
		|			И (ДатыКадровойИстории.КадроваяИсторияСотрудниковПериод = КадроваяИсторияСотрудников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Начисление = Интервалы.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
		|		ПО (ЗначенияПериодическихПоказателейСотрудников.Сотрудник = Интервалы.Сотрудник)
		|			И (НЕ НачисленияПоказатели.ЗапрашиватьПриВводе
		|				ИЛИ ЗначенияПериодическихПоказателейСотрудников.ДокументОснование = Интервалы.ДокументОснование)
		|			И (ЗначенияПериодическихПоказателейСотрудников.Показатель = НачисленияПоказатели.Показатель)
		|			И (ВЫБОР
		|				КОГДА Интервалы.Начисление.НачисляетсяВЦеломЗаМесяц
		|					ТОГДА ЗначенияПериодическихПоказателейСотрудников.Период <= Интервалы.ДатаОкончания
		|				ИНАЧЕ ЗначенияПериодическихПоказателейСотрудников.Период <= Интервалы.ДатаНачала
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения КАК ЗначенияПериодическихПоказателейПодразделений
		|		ПО (ЗначенияПериодическихПоказателейПодразделений.Подразделение = КадроваяИсторияСотрудников.Подразделение)
		|			И (ЗначенияПериодическихПоказателейПодразделений.Показатель = НачисленияПоказатели.Показатель)
		|			И (ЗначенияПериодическихПоказателейПодразделений.Период <= Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения КАК ЗначенияПериодическихПоказателейОрганизаций
		|		ПО (ЗначенияПериодическихПоказателейОрганизаций.Организация = КадроваяИсторияСотрудников.Организация)
		|			И (ЗначенияПериодическихПоказателейОрганизаций.Показатель = НачисленияПоказатели.Показатель)
		|			И (ЗначенияПериодическихПоказателейОрганизаций.Период <= Интервалы.ДатаНачала)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО Интервалы.Сотрудник = Сотрудники.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Сотрудник,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Начисление,
		|	Интервалы.Начисление.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	Интервалы.ДокументОснование,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.ЗапрашиватьПриВводе,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	Сотрудники.ФизическоеЛицо";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияРазовыхОрганизации.ПериодДействия,
		|	ЗначенияРазовыхОрганизации.Организация,
		|	ЗначенияРазовыхОрганизации.Показатель,
		|	ЗначенияРазовыхОрганизации.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхОрганизации
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыОрганизаций КАК ЗначенияРазовыхОрганизации
		|		ПО Интервалы.Организация = ЗначенияРазовыхОрганизации.Организация
		|			И Интервалы.Месяц = ЗначенияРазовыхОрганизации.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияРазовыхПодразделения.ПериодДействия,
		|	ЗначенияРазовыхПодразделения.Подразделение,
		|	ЗначенияРазовыхПодразделения.Показатель,
		|	ЗначенияРазовыхПодразделения.Организация,
		|	ЗначенияРазовыхПодразделения.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхПодразделения
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияРазовыхПодразделения
		|		ПО Интервалы.Подразделение = ЗначенияРазовыхПодразделения.Подразделение
		|			И Интервалы.Месяц = ЗначенияРазовыхПодразделения.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияРазовыхСотрудники.ПериодДействия,
		|	ЗначенияРазовыхСотрудники.Сотрудник,
		|	ЗначенияРазовыхСотрудники.Показатель,
		|	ЗначенияРазовыхСотрудники.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхСотрудники
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхСотрудники
		|		ПО Интервалы.Сотрудник = ЗначенияРазовыхСотрудники.Сотрудник
		|			И Интервалы.Месяц = ЗначенияРазовыхСотрудники.ПериодДействия";
		
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);	
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата);	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник КАК Сотрудник,
		|	Интервалы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Интервалы.Организация КАК Организация,
		|	Интервалы.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Интервалы.Месяц КАК Месяц,
		|	Интервалы.ДатаНачала КАК ДатаНачала,
		|	Интервалы.ДатаОкончания КАК ДатаОкончания,
		|	Интервалы.Начисление КАК Начисление,
		|	Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	НачисленияПоказатели.Показатель КАК Показатель
		|ПОМЕСТИТЬ ВТИнтервалыОперативныхСотрудники
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Начисление = Интервалы.Начисление)
		|			И (НачисленияПоказатели.Показатель = Интервалы.Показатель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиСотрудников
		|		ПО (ПоказателиСотрудников.Ссылка = Интервалы.Показатель)
		|			И (ПоказателиСотрудников.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника))
		|			И (ПоказателиСотрудников.СпособВводаЗначений В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.НакапливаетсяПоОтдельнымЗначениям), ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяЕдиновременно)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.Сотрудник КАК Сотрудник,
		|	Интервалы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Интервалы.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА ЗначенияОперативныхСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПоФизическомуЛицу,
		|	Интервалы.ДатаНачала КАК ДатаНачала,
		|	Интервалы.ДатаОкончания КАК ДатаОкончания,
		|	Интервалы.Начисление КАК Начисление,
		|	Интервалы.Показатель КАК Показатель,
		|	СУММА(ЗначенияОперативныхСотрудники.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхСотрудникиПоДням
		|ИЗ
		|	ВТИнтервалыОперативныхСотрудники КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхСотрудники
		|		ПО (ЗначенияОперативныхСотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияОперативныхСотрудники.Организация = Интервалы.ГоловнаяОрганизация)
		|			И (ЗначенияОперативныхСотрудники.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|			И (ЗначенияОперативныхСотрудники.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхСотрудники.Показатель = Интервалы.Показатель)
		|			И (Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Сотрудник,
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА ЗначенияОперативныхСотрудники.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Начисление,
		|	Интервалы.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияОперативныхСотрудники.Сотрудник,
		|	ЗначенияОперативныхСотрудники.Показатель,
		|	ЗначенияОперативныхСотрудники.Организация,
		|	ЗначенияОперативныхСотрудники.ФизическоеЛицо,
		|	ЗначенияОперативныхСотрудники.Период КАК Месяц,
		|	ЗначенияОперативныхСотрудники.ЗначениеОборот КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхСотрудникиВЦеломЗаМесяц
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Обороты(
		|			&МинимальнаяДата,
		|			&МаксимальнаяДата,
		|			Месяц,
		|			(ФизическоеЛицо, Показатель, Организация) В
		|				(ВЫБРАТЬ
		|					Интервалы.ФизическоеЛицо,
		|					Интервалы.Показатель,
		|					Интервалы.ГоловнаяОрганизация
		|				ИЗ
		|					ВТИнтервалыОперативныхСотрудники КАК Интервалы
		|				ГДЕ
		|					Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ЗначенияОперативныхСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗначенияОперативныхСотрудники.Сотрудник,
		|	ЗначенияОперативныхСотрудники.ДатаНачала,
		|	ЗначенияОперативныхСотрудники.ДатаОкончания,
		|	ЗначенияОперативныхСотрудники.Начисление,
		|	ЗначенияОперативныхСотрудники.Показатель,
		|	СУММА(ЗначенияОперативныхСотрудники.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхСотрудники
		|ИЗ
		|	(ВЫБРАТЬ
		|		Интервалы.Сотрудник КАК Сотрудник,
		|		Интервалы.ДатаНачала КАК ДатаНачала,
		|		Интервалы.ДатаОкончания КАК ДатаОкончания,
		|		Интервалы.Начисление КАК Начисление,
		|		Интервалы.Показатель КАК Показатель,
		|		ЗначенияОперативныхСотрудники.Значение КАК Значение
		|	ИЗ
		|		ВТИнтервалыОперативныхСотрудники КАК Интервалы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхСотрудникиПоДням КАК ЗначенияОперативныхСотрудники
		|			ПО (ЗначенияОперативныхСотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|				И (ЗначенияОперативныхСотрудники.ГоловнаяОрганизация = Интервалы.ГоловнаяОрганизация)
		|				И (ЗначенияОперативныхСотрудники.ДатаНачала = Интервалы.ДатаНачала)
		|				И (ЗначенияОперативныхСотрудники.ДатаОкончания = Интервалы.ДатаОкончания)
		|				И (ЗначенияОперативныхСотрудники.Начисление = Интервалы.Начисление)
		|				И (ЗначенияОперативныхСотрудники.Показатель = Интервалы.Показатель)
		|				И (Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|				И (ВЫБОР
		|					КОГДА ЗначенияОперативныхСотрудники.ПоФизическомуЛицу = ЛОЖЬ
		|						ТОГДА ЗначенияОперативныхСотрудники.Сотрудник = Интервалы.Сотрудник
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Интервалы.Сотрудник,
		|		Интервалы.ДатаНачала,
		|		Интервалы.ДатаОкончания,
		|		Интервалы.Начисление,
		|		Интервалы.Показатель,
		|		ЗначенияОперативныхСотрудники.Значение
		|	ИЗ
		|		ВТИнтервалыОперативныхСотрудники КАК Интервалы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхСотрудникиВЦеломЗаМесяц КАК ЗначенияОперативныхСотрудники
		|			ПО (ЗначенияОперативныхСотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|				И (ЗначенияОперативныхСотрудники.Организация = Интервалы.ГоловнаяОрганизация)
		|				И Интервалы.Месяц = ЗначенияОперативныхСотрудники.Месяц
		|				И (ЗначенияОперативныхСотрудники.Показатель = Интервалы.Показатель)
		|				И (Интервалы.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)
		|				И (ВЫБОР
		|					КОГДА ЗначенияОперативныхСотрудники.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|						ТОГДА ЗначенияОперативныхСотрудники.Сотрудник = Интервалы.Сотрудник
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)) КАК ЗначенияОперативныхСотрудники
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияОперативныхСотрудники.Сотрудник,
		|	ЗначенияОперативныхСотрудники.ДатаНачала,
		|	ЗначенияОперативныхСотрудники.ДатаОкончания,
		|	ЗначенияОперативныхСотрудники.Начисление,
		|	ЗначенияОперативныхСотрудники.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.Сотрудник,
		|	ЗначенияОперативныхПодразделения.Подразделение,
		|	ЗначенияОперативныхПодразделения.Показатель,
		|	Интервалы.Начисление,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	СУММА(ЗначенияОперативныхПодразделения.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхПодразделения
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Начисление = Интервалы.Начисление)
		|			И (НачисленияПоказатели.Показатель = Интервалы.Показатель)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиПодразделений
		|		ПО (ПоказателиПодразделений.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияОперативныхПодразделения
		|		ПО (ЗначенияОперативныхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияОперативныхПодразделения.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|			И (ЗначенияОперативныхПодразделения.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПодразделения.Показатель = НачисленияПоказатели.Показатель)
		|			И (ЗначенияОперативныхПодразделения.Показатель = ПоказателиПодразделений.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияОперативныхПодразделения.Подразделение,
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	ЗначенияОперативныхПодразделения.Показатель,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.ДатаНачала";
		
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Начисление,
		|	Интервалы.ДокументОснование,
		|	НачисленияПоказатели.Показатель,
		|	ВЫБОР
		|		КОГДА НачисленияПоказатели.Показатель.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗначениеПоказателяВводитсяНепосредственноПриРасчете,
		|	Начисления.КоличествоПоказателейИспользуемыхПриРасчете КАК КоличествоПоказателей,
		|	ВЫБОР
		|		КОГДА Начисления.УчетВремениВЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА Начисления.УчетВремениВДняхЧасах
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.ИспользуетСреднийЗаработокОбщий = ИСТИНА
		|						ТОГДА КадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени
		|					КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|						ТОГДА ПочасоваяОплатаТруда.УчетВремениВЧасах
		|					КОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах ЕСТЬ НЕ NULL 
		|						ТОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах
		|					ИНАЧЕ ПочасоваяОплатаТруда.УчетВремениВЧасах
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВремяВЧасах,
		|	Начисления.ВидВремени,
		|	Начисления.ИспользованиеПериода,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ ЗначенияПериодическихПоказателейСотрудников.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияПериодическихПоказателейСотрудников.Значение
		|			КОГДА НЕ ЗначенияПериодическихПоказателейПодразделений.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияПериодическихПоказателейПодразделений.Значение
		|			КОГДА НЕ ЗначенияПериодическихПоказателейОрганизаций.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияПериодическихПоказателейОрганизаций.Значение
		|			КОГДА НЕ ЗначенияРазовыхСотрудники.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияРазовыхСотрудники.Значение
		|			КОГДА НЕ ЗначенияРазовыхПодразделения.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияРазовыхПодразделения.Значение
		|			КОГДА НЕ ЗначенияРазовыхОрганизации.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияРазовыхОрганизации.Значение
		|			КОГДА НЕ ЗначенияОперативныхСотрудники.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияОперативныхСотрудники.Значение
		|			КОГДА НЕ ЗначенияОперативныхПодразделения.Значение ЕСТЬ NULL 
		|				ТОГДА ЗначенияОперативныхПодразделения.Значение
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Значение,
		|	ВЫБОР
		|		КОГДА ЗначенияПериодическихПоказателейСотрудников.Значение ЕСТЬ NULL 
		|				И ЗначенияПериодическихПоказателейПодразделений.Значение ЕСТЬ NULL 
		|				И ЗначенияПериодическихПоказателейОрганизаций.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхСотрудники.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхПодразделения.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхОрганизации.Значение ЕСТЬ NULL 
		|				И ЗначенияОперативныхСотрудники.Значение ЕСТЬ NULL 
		|				И ЗначенияОперативныхПодразделения.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗначениеОпределено,
		|	Начисления.ОчередностьРасчета,
		|	Начисления.РеквизитДопУпорядочивания,
		|	НачисленияПоказатели.НомерСтроки
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
		|		ПО Интервалы.Подразделение = Подразделения.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|			ПО (ГрафикиРаботыСотрудников.Ссылка = КадровыеДанныеСотрудников.ГрафикРаботы)
		|		ПО (КадровыеДанныеСотрудников.Сотрудник = Интервалы.Сотрудник)
		|			И (КадровыеДанныеСотрудников.Период = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоказатели КАК НачисленияПоказатели
		|		ПО (НачисленияПоказатели.Начисление = Интервалы.Начисление)
		|			И (НачисленияПоказатели.Показатель = Интервалы.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО Интервалы.Начисление = Начисления.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпособыОплатыПраздничныхДней КАК СпособыОплатыПраздничныхДней
		|		ПО (СпособыОплатыПраздничныхДней.Сотрудник = Интервалы.Сотрудник)
		|			И (СпособыОплатыПраздничныхДней.ДатаНачала = Интервалы.ДатаНачала)
		|			И (СпособыОплатыПраздничныхДней.Начисление = Интервалы.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПочасоваяОплатаТруда КАК ПочасоваяОплатаТруда
		|		ПО (ПочасоваяОплатаТруда.Сотрудник = Интервалы.Сотрудник)
		|			И (ПочасоваяОплатаТруда.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
		|		ПО Интервалы.Сотрудник = ЗначенияПериодическихПоказателейСотрудников.Сотрудник
		|			И (НЕ Интервалы.ЗапрашиватьПриВводе
		|				ИЛИ Интервалы.ДокументОснование = ЗначенияПериодическихПоказателейСотрудников.ДокументОснование)
		|			И (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателейСотрудников.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейСотрудниковПериод = ЗначенияПериодическихПоказателейСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения КАК ЗначенияПериодическихПоказателейПодразделений
		|		ПО Интервалы.Подразделение = ЗначенияПериодическихПоказателейПодразделений.Подразделение
		|			И (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателейПодразделений.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейПодразделенийПериод = ЗначенияПериодическихПоказателейПодразделений.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения КАК ЗначенияПериодическихПоказателейОрганизаций
		|		ПО Интервалы.Организация = ЗначенияПериодическихПоказателейОрганизаций.Организация
		|			И (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателейОрганизаций.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейОрганизацийПериод = ЗначенияПериодическихПоказателейОрганизаций.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхСотрудники КАК ЗначенияРазовыхСотрудники
		|		ПО (ЗначенияРазовыхСотрудники.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхСотрудники.Сотрудник = Интервалы.Сотрудник)
		|			И (ЗначенияРазовыхСотрудники.Показатель = НачисленияПоказатели.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПодразделения КАК ЗначенияРазовыхПодразделения
		|		ПО (ЗначенияРазовыхПодразделения.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияРазовыхПодразделения.Показатель = НачисленияПоказатели.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхОрганизации КАК ЗначенияРазовыхОрганизации
		|		ПО (ЗначенияРазовыхОрганизации.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхОрганизации.Показатель = НачисленияПоказатели.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхСотрудники КАК ЗначенияОперативныхСотрудники
		|		ПО (ЗначенияОперативныхСотрудники.Сотрудник = Интервалы.Сотрудник)
		|			И (ЗначенияОперативныхСотрудники.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхСотрудники.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхСотрудники.Начисление = Интервалы.Начисление)
		|			И (ЗначенияОперативныхСотрудники.Показатель = НачисленияПоказатели.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПодразделения КАК ЗначенияОперативныхПодразделения
		|		ПО (ЗначенияОперативныхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияОперативныхПодразделения.Сотрудник = Интервалы.Сотрудник)
		|			И (ЗначенияОперативныхПодразделения.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхПодразделения.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПодразделения.Начисление = Интервалы.Начисление)
		|			И (ЗначенияОперативныхПодразделения.Показатель = НачисленияПоказатели.Показатель)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.Организация,
		|	Интервалы.Сотрудник,
		|	Интервалы.Подразделение,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Начисление,
		|	Интервалы.ДокументОснование,
		|	НачисленияПоказатели.Показатель,
		|	ВЫБОР
		|		КОГДА НачисленияПоказатели.Показатель.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Начисления.УчетВремениВЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА Начисления.УчетВремениВДняхЧасах
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.ИспользуетСреднийЗаработокОбщий = ИСТИНА
		|						ТОГДА КадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени
		|					КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|						ТОГДА ПочасоваяОплатаТруда.УчетВремениВЧасах
		|					КОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах ЕСТЬ НЕ NULL 
		|						ТОГДА СпособыОплатыПраздничныхДней.ВремяВЧасах
		|					ИНАЧЕ ПочасоваяОплатаТруда.УчетВремениВЧасах
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Начисления.ВидВремени,
		|	Начисления.ИспользованиеПериода,
		|	ВЫБОР
		|		КОГДА ЗначенияПериодическихПоказателейСотрудников.Значение ЕСТЬ NULL 
		|				И ЗначенияПериодическихПоказателейПодразделений.Значение ЕСТЬ NULL 
		|				И ЗначенияПериодическихПоказателейОрганизаций.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхСотрудники.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхПодразделения.Значение ЕСТЬ NULL 
		|				И ЗначенияРазовыхОрганизации.Значение ЕСТЬ NULL 
		|				И ЗначенияОперативныхСотрудники.Значение ЕСТЬ NULL 
		|				И ЗначенияОперативныхПодразделения.Значение ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	НачисленияПоказатели.НомерСтроки,
		|	Начисления.КоличествоПоказателейИспользуемыхПриРасчете,
		|	Начисления.ОчередностьРасчета,
		|	Начисления.РеквизитДопУпорядочивания
		|
		|УПОРЯДОЧИТЬ ПО
		|	Интервалы.Сотрудник,
		|	Начисления.ОчередностьРасчета,
		|	Начисления.РеквизитДопУпорядочивания,
		|	Интервалы.Начисление,
		|	Интервалы.ДокументОснование,
		|	Интервалы.ДатаНачала,
		|	Интервалы.Подразделение,
		|	НачисленияПоказатели.НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);	
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	ЗначенияПоказателей.Колонки.Добавить("Сотрудник");
	ЗначенияПоказателей.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ЗначенияПоказателей.Колонки.Добавить("ДатаНачала");
	ЗначенияПоказателей.Колонки.Добавить("ДатаОкончания");
	ЗначенияПоказателей.Колонки.Добавить("Начисление");
	ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ЗначенияПоказателей.Колонки.Добавить("ВидВремени");
	ЗначенияПоказателей.Колонки.Добавить("ИспользованиеПериода");
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		ЗначенияПоказателей.Колонки.Добавить("Показатель" + Счетчик);
		ЗначенияПоказателей.Колонки.Добавить("Значение" + Счетчик);
		ЗначенияПоказателей.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;
	
	// Таблица показателей, которые не удалось заполнить по данным подсистемы, 
	// их значения попытаемся заполнить внешними подсистемами.
	ДополнительныеПоказатели = Новый ТаблицаЗначений;
	ДополнительныеПоказатели.Колонки.Добавить("Сотрудник");
	ДополнительныеПоказатели.Колонки.Добавить("Организация");
	ДополнительныеПоказатели.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДополнительныеПоказатели.Колонки.Добавить("ДатаНачала");
	ДополнительныеПоказатели.Колонки.Добавить("ДатаОкончания");
	ДополнительныеПоказатели.Колонки.Добавить("Начисление");
	ДополнительныеПоказатели.Колонки.Добавить("Показатель");
	ДополнительныеПоказатели.Колонки.Добавить("Значение");
	ДополнительныеПоказатели.Колонки.Добавить("ВремяВЧасах");
	ДополнительныеПоказатели.Колонки.Добавить("КомандаРасшифровки");
	ДополнительныеПоказатели.Колонки.Добавить("ЗначениеОпределено", Новый ОписаниеТипов("Булево"));
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЗначенияПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Если Не ЗначениеЗаполнено(Выборка.КоличествоПоказателей) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока["Показатель1"] = Выборка.Показатель;
		// Если значение уже известно из потребителя, то подставим его "как есть".
		ДанныеЗначения = ИзвестноеЗначениеПоказателя(ИзвестныеЗначенияПоказателей, Выборка.Сотрудник, Выборка.Показатель);
		Если ДанныеЗначения <> Неопределено Тогда
			НоваяСтрока["Значение1"] = ДанныеЗначения.Значение;
			НоваяСтрока["КомандаРасшифровки1"] = ДанныеЗначения.КомандаРасшифровки;
		Иначе
			НоваяСтрока["Значение1"] = Выборка.Значение;
			Если Не Выборка.ЗначениеОпределено И Не Выборка.ЗначениеПоказателяВводитсяНепосредственноПриРасчете Тогда
				ЗаполнитьЗначенияСвойств(ДополнительныеПоказатели.Добавить(), Выборка);
			КонецЕсли;
		КонецЕсли;
		Для НомерПоказателя = 2 По Выборка.КоличествоПоказателей Цикл
			Выборка.Следующий();
			НоваяСтрока["Показатель" + НомерПоказателя] = Выборка.Показатель;
			ДанныеЗначения = ИзвестноеЗначениеПоказателя(ИзвестныеЗначенияПоказателей, Выборка.Сотрудник, Выборка.Показатель);
			Если ДанныеЗначения <> Неопределено Тогда
				НоваяСтрока["Значение" + НомерПоказателя] = ДанныеЗначения.Значение;
				НоваяСтрока["КомандаРасшифровки" + НомерПоказателя] = ДанныеЗначения.КомандаРасшифровки;
			Иначе
				НоваяСтрока["Значение" + НомерПоказателя] = Выборка.Значение;
				Если Не Выборка.ЗначениеОпределено И Не Выборка.ЗначениеПоказателяВводитсяНепосредственноПриРасчете Тогда
					ЗаполнитьЗначенияСвойств(ДополнительныеПоказатели.Добавить(), Выборка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполняем значения известных подсистеме предопределенных показателей.
	ЗаполнитьЗначенияПредопределенныхПоказателей(ДополнительныеПоказатели);
	
	ЗарплатаКадрыРасширенный.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(ДополнительныеПоказатели);
	
	УчетСреднегоЗаработка.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(ДополнительныеПоказатели);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(ДополнительныеПоказатели);
	
	// Заполняем значения показателей других подсистем.
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьЗначенияДополнительныхПоказателей(ДополнительныеПоказатели);
	
	ОтборНачислений = Новый Структура("Сотрудник, Подразделение, Начисление, ДатаНачала, ДатаОкончания");
	ЗначенияПоказателей.Индексы.Добавить("Сотрудник, Подразделение, Начисление, ДатаНачала, ДатаОкончания");	
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если Не СтрокаПоказателей.ЗначениеОпределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОтборНачислений, СтрокаПоказателей);
		СтрокиНачислений = ЗначенияПоказателей.НайтиСтроки(ОтборНачислений);
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
				Если СтрокаНачислений["Показатель" + НомерПоказателя] = СтрокаПоказателей.Показатель Тогда
					СтрокаНачислений["Значение" + НомерПоказателя] = СтрокаПоказателей.Значение;
					СтрокаНачислений["КомандаРасшифровки" + НомерПоказателя] = СтрокаПоказателей.КомандаРасшифровки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗначенияПоказателей;
	
КонецФункции

// Получает и заполняет значения показателей начислений в переданной таблице значений.
// Создает при необходимости колонки для показателей вида Показатель1, ..., ПоказательN.
// 
// Параметры:
//	- НачисленияЗаПериод - таблица значений, в которой есть колонки, см. ПустаяТаблицаСотрудниковНачислений().
//		Сотрудник, 
//		Начисление, 
//		ДатаНачала, 
//		ДатаОкончания
//	- ИзвестныеЗначенияПоказателей - (необязательный), если указан, то для заполнения указанных показателей 
//		будут использованы значения из этой таблицы, см. ПустаяТаблицаЗначенийПоказателей().
//
Процедура ЗаполнитьЗначенияПоказателейНачислений(НачисленияЗаПериод, ИзвестныеЗначенияПоказателей = Неопределено) Экспорт
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Если НачисленияЗаПериод.Колонки.Найти("Показатель" + Счетчик) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Если для показателей пока не добавлено колонок, добавляем их.
		НачисленияЗаПериод.Колонки.Добавить("Показатель" + Счетчик);
		НачисленияЗаПериод.Колонки.Добавить("Значение" + Счетчик);
		НачисленияЗаПериод.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;

	// Проверяем есть ли в таблице показатели, значения которых необходимо заполнить (по данным учета).
	// Такой необходимости может не возникнуть, если все показатели вводятся непосредственно при расчете,
	// или их значения уже определены в коллекции известных показателей.
	
	Если Не ТребуетсяЗаполнениеЗначенийПоказателей(НачисленияЗаПериод, ИзвестныеЗначенияПоказателей) Тогда
		ЗаполнитьСведенияОПоказателях(НачисленияЗаПериод);
		ЗаполнитьИзвестныеЗначенияПоказателей(НачисленияЗаПериод, ИзвестныеЗначенияПоказателей);
		Возврат;
	КонецЕсли;
	
	ЗначенияПоказателей = ЗначенияПоказателейНачислений(НачисленияЗаПериод, ИзвестныеЗначенияПоказателей);
	
	ОтборНачислений = Новый Структура("Сотрудник, Подразделение, Начисление, ДокументОснование, ДатаНачала, ДатаОкончания");
	НачисленияЗаПериод.Индексы.Добавить("Сотрудник, Подразделение, Начисление, ДокументОснование, ДатаНачала, ДатаОкончания"); 	
	Для Каждого СтрокаПоказателей Из ЗначенияПоказателей Цикл
		ЗаполнитьЗначенияСвойств(ОтборНачислений, СтрокаПоказателей);
		СтрокиНачислений = НачисленияЗаПериод.НайтиСтроки(ОтборНачислений);
		Для Каждого СтрокаНачислений Из СтрокиНачислений Цикл
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, СтрокаПоказателей);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Структура для определения дополнительных параметров для расчета данных формы по сотрудникам.
//
Функция ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам() Экспорт
	
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам = Новый Структура(
	    "ОписаниеТаблицы, 
		|СохранятьИсправления, 
		|ИзвестныеЗначенияПоказателейНачислений, 
		|КонтролируемыеПоля, 
		|ИсключатьСтрокиПолностьюВытесненныхНачислений, 
		|РежимПересчетаНДФЛ, 
		|РежимПересчетаВзносов,
		|РаспределениеРезультатов,
		|ДанныеРаспределенияПоТерриториямУсловиямТруда,
		|РассчитыватьНДФЛБезусловно,
		|ОкончательныйРасчетНДФЛ");
		
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.СохранятьИсправления = Истина;	
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.ИсключатьСтрокиПолностьюВытесненныхНачислений = Ложь;
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.РежимПересчетаНДФЛ = Ложь;
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.РежимПересчетаВзносов = Ложь;
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.РассчитыватьНДФЛБезусловно = Ложь;
	ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам.ОкончательныйРасчетНДФЛ = Ложь;
	
	Возврат ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам;
	
КонецФункции

// Выполняет расчет данных формы по отдельным сотрудникам.
// Используется 
// - при редактировании содержимого таблиц документа, например, при изменении значений показателей,
// - при отмене исправлений.
//
// Параметры:
//	Сотрудники - массив сотрудников или ссылка на одного сотрудника.
//	Форма
//	ОписаниеДокумента - см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеРасчетногоДокумента().
//  ДополнительныеПараметры - необязательный, структура, см. ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам().
//
Процедура РассчитатьДанныеФормыПоСотрудникам(Знач СотрудникиФизическиеЛица, Форма, ОписаниеДокумента, ДополнительныеПараметры = Неопределено) Экспорт
	
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.ФормаДокументаГотоваДляРасчетаЗарплаты(Форма, ОписаниеДокумента, Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	КонецЕсли;
	
	ОписаниеТаблицы = ДополнительныеПараметры.ОписаниеТаблицы; 
	СохранятьИсправления = ДополнительныеПараметры.СохранятьИсправления; 
	ИзвестныеЗначенияПоказателейНачислений = ДополнительныеПараметры.ИзвестныеЗначенияПоказателейНачислений; 
	КонтролируемыеПоля = ДополнительныеПараметры.КонтролируемыеПоля;
	ИсключатьСтрокиПолностьюВытесненныхНачислений = ДополнительныеПараметры.ИсключатьСтрокиПолностьюВытесненныхНачислений; 
	РежимПересчетаНДФЛ = ДополнительныеПараметры.РежимПересчетаНДФЛ;
	РежимПересчетаВзносов = ДополнительныеПараметры.РежимПересчетаВзносов;
	РаспределениеРезультатов = ДополнительныеПараметры.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = ДополнительныеПараметры.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	РассчитыватьНДФЛБезусловно = ДополнительныеПараметры.РассчитыватьНДФЛБезусловно;
	ОкончательныйРасчетНДФЛ = ДополнительныеПараметры.ОкончательныйРасчетНДФЛ;
	
	// Если пересчитывается только таблица НДФЛ или взносов - не выполняем расчет начислений, а только формируем движения.
	ПересчитыватьТаблицыНачислений = Не РежимПересчетаНДФЛ И Не РежимПересчетаВзносов;
	
	// Флаги выполняемых действия при заполнении
	РассчитыватьНачисленияПерерасчет = ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено;
	РассчитыватьПособияПерерасчет = ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено;
	РассчитыватьНачисления = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияИмя <> Неопределено;
	РассчитыватьПособия =  Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ПособияИмя <> Неопределено;
	РассчитыватьНачисленияПоДоговорамПодряда = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено;
	РассчитыватьВзносы = Не ОписаниеДокумента.РежимДоначисления И (ОписаниеДокумента.ВзносыИмя <> Неопределено ИЛИ ОписаниеДокумента.ВзносыФОТИмя <> Неопределено);
	РассчитыватьЛьготы = Не ОписаниеДокумента.РежимДоначисления И ОписаниеДокумента.ЛьготыИмя <> Неопределено;
	
	Объект = Форма.Объект;
	Организация = Объект.Организация;
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	ДокументСсылка = Объект.Ссылка;
	
	Если КонтролируемыеПоля = Неопределено Тогда
		КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	КонецЕсли;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	ВедущиеОбъекты = СотрудникиФизическиеЛица(СотрудникиФизическиеЛица, Организация);
	Если ВедущиеОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Сотрудники = ВедущиеОбъекты.Сотрудники;
	Физлица = ВедущиеОбъекты.ФизическиеЛица;
	
	ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо", Физлица);
	
	// Накапливаем данные ведущих коллекций для расчета зависимых.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ИменаВТ = Новый Массив;
	
	ПричинаИзменений = Неопределено;
	Если ОписаниеТаблицы <> Неопределено Тогда
		ПричинаИзменений = ОписаниеТаблицы.ИмяТаблицы;
	КонецЕсли;
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	// Прежде всего рассчитываем записи перерасчета.
	Если РассчитыватьНачисленияПерерасчет И ТипЗнч(Объект) = Тип("Структура") 
		И Не Объект.Свойство(ОписаниеДокумента.НачисленияПерерасчетИмя) Тогда 
		РассчитыватьНачисленияПерерасчет = Ложь;
	КонецЕсли;
	
	Если РассчитыватьПособияПерерасчет И ТипЗнч(Объект) = Тип("Структура") 
		И Не Объект.Свойство(ОписаниеДокумента.ПособияПерерасчетИмя) Тогда 
		РассчитыватьПособияПерерасчет = Ложь;
	КонецЕсли;
	
	НаборыЗаписей =	ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);	
	
	// Накапливаем регистраторы наборов записей начислений для отбора при расчете удержаний.
	РегистраторыНачислений = Новый Массив;
	РегистраторыНачислений.Добавить(НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
	
	ПараметрыРасчета = ДополнительныеПараметрыРасчетаНачислений();
	ПараметрыРасчета.Организация = Организация;
	ПараметрыРасчета.ДокументСсылка = ДокументСсылка;
	ПараметрыРасчета.МесяцНачисления = МесяцНачисления;
	ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей(, ДокументСсылка);
	ПараметрыРасчета.ДанныеФормыОбъект = Объект;
	ПараметрыРасчета.ДанныеРаспределенияПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда;
	
	Если РассчитыватьНачисленияПерерасчет Или РассчитыватьПособияПерерасчет Тогда
		// Отбираем строки по физическим лицам.
		Если РассчитыватьНачисленияПерерасчет Тогда
			СтрокиНачисленийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияПерерасчетИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		КонецЕсли;
		Если (ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет").Найти(ПричинаИзменений) <> Неопределено 
			Или ПричинаИзменений = Неопределено) И ПересчитыватьТаблицыНачислений Тогда
			// Наборы записей передаем, для того, чтобы затем можно было исключить полностью вытесненные записи.
			ПараметрыРасчета.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
			СтрокиНачисления = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияПерерасчетИмя], "Сотрудник", Сотрудники);
			РассчитатьНачисления(СтрокиНачисления, ПараметрыРасчета);
			РегистраторыНачислений.Добавить(ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
		Иначе
			// Начисления регистрируются в системе в процессе расчета (это необходимо для целей расчета)
			// если же начисления не пересчитываются, то для целей расчета удержаний например, 
			// нужно принудительно сформировать движения.
			Начисления = ПустаяТаблицаНачисления();
			СтрокиЗаполнениеФизическихЛиц = Новый Массив;
			СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
			Для Каждого СтрокаНачисления Из СтрокиНачисленийПоФизическимЛицам Цикл
				// Заполняем коллекцию для формирования движений.
				НоваяСтрока = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				НоваяСтрока.Сумма = СтрокаНачисления.Результат;
				// Собираем данные для заполнения физических лиц.
				Если Не ЗначениеЗаполнено(НоваяСтрока.ФизическоеЛицо) Тогда
					СтрокиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока);
					СотрудникиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			// Заполняем физических лиц в коллекции.
			ЗаполнитьФизическихЛицПоСотрудникам(СтрокиЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
			// Заполняем регистр расчета Начисления, необходимый для последующих расчетов.
			УстановитьПривилегированныйРежим(Истина);
			СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Начисления, , Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		// Заполняем базовые данные и менеджер временных таблиц.
		ПараметрыСоздатьВТНачисления = ДополнительныеПараметрыСоздатьВТНачисления();
		ПараметрыСоздатьВТНачисления.Начисления = СтрокиНачисленийПоФизическимЛицам;
		ПараметрыСоздатьВТНачисления.ИмяВТ = "ВТНачисленияПерерасчет";
		ПараметрыСоздатьВТНачисления.Организация = Организация;
		ПараметрыСоздатьВТНачисления.МесяцНачисления = МесяцНачисления;
		СоздатьВТНачисления(МенеджерВременныхТаблиц, ИменаВТ, ПараметрыСоздатьВТНачисления);
		Если РассчитыватьПособияПерерасчет Тогда
			СтрокиПособийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ПособияПерерасчетИмя], "Сотрудник.ФизическоеЛицо", Физлица);
			ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей("Пособия");
			// Наборы записей передаем, для того, чтобы затем можно было исключить полностью вытесненные записи.
			ПараметрыРасчета.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
			РассчитатьНачисления(СтрокиПособийПоФизическимЛицам, ПараметрыРасчета);
			РегистраторыНачислений.Добавить(ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
			// В результате могли образоваться полностью вытесненные записи, исключаем их.
			Если ИсключатьСтрокиПолностьюВытесненныхНачислений Тогда
				ИсключитьСтрокиПолностьюВытесненныхНачислений(Объект[ОписаниеДокумента.ПособияПерерасчетИмя], ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
			КонецЕсли;
			// Объединяем строки пособий со строками начислений.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиНачисленийПоФизическимЛицам, СтрокиПособийПоФизическимЛицам);
		КонецЕсли; 
	КонецЕсли;
	
	// Расчет начислений
	ПланируемаяДатаВыплаты = НачалоДня(КонецМесяца(МесяцНачисления));
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя) Тогда
		ПланируемаяДатаВыплаты = Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя];
	КонецЕсли;
		
	ПорядокВыплаты = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		ПорядокВыплаты = Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	Иначе
		ПорядокВыплаты = ОписаниеДокумента.ПорядокВыплаты;
	КонецЕсли;
	
	РассчитыватьУдержания = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.РассчитыватьУдержанияИмя) Тогда
		РассчитыватьУдержания = Объект[ОписаниеДокумента.РассчитыватьУдержанияИмя];
	Иначе 
		РассчитыватьУдержания = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	РассчитыватьНДФЛ = РассчитыватьУдержания Или РассчитыватьНДФЛБезусловно;
	
	Если РассчитыватьНачисления Тогда
		ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей(, ДокументСсылка);
		// Отбираем строки по физическим лицам.
		СтрокиНачисленийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		ОбщиеЗначения = Новый Структура;
		Если ОписаниеДокумента.ВидНачисленияВШапке Тогда
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Объект[ОписаниеДокумента.ВидНачисленияИмя]);
			ПараметрыРасчета.КоличествоПоказателей = ВидРасчетаИнфо.КоличествоОтображаемыхПоказателей;
			ОбщиеЗначения.Вставить("Начисление", Объект[ОписаниеДокумента.ВидНачисленияИмя]);
		КонецЕсли;
		Если ОписаниеДокумента.ПериодДействияВШапке Тогда
			ОбщиеЗначения.Вставить("ДатаНачала", НачалоМесяца(МесяцНачисления));
			Если ОписаниеДокумента.ДатаНачалаИмя <> Неопределено Тогда
				ОбщиеЗначения.Вставить("ДатаНачала", Объект[ОписаниеДокумента.ДатаНачалаИмя]);
			КонецЕсли;
			ОбщиеЗначения.Вставить("ДатаОкончания", КонецМесяца(МесяцНачисления));
			Если ОписаниеДокумента.ДатаОкончанияИмя <> Неопределено Тогда
				ОбщиеЗначения.Вставить("ДатаОкончания", Объект[ОписаниеДокумента.ДатаОкончанияИмя]);
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.НачалоБазовогоПериодаИмя <> Неопределено Тогда
			ОбщиеЗначения.Вставить("НачалоБазовогоПериода", Объект[ОписаниеДокумента.НачалоБазовогоПериодаИмя]);
		КонецЕсли;
		Если ОписаниеДокумента.ОкончаниеБазовогоПериодаИмя <> Неопределено Тогда
			ОбщиеЗначения.Вставить("ОкончаниеБазовогоПериода", Объект[ОписаниеДокумента.ОкончаниеБазовогоПериодаИмя]);
		КонецЕсли;
		Если ОбщиеЗначения.Количество() > 0 Тогда
			ПараметрыРасчета.ОбщиеЗначения = ОбщиеЗначения;
		КонецЕсли;
		// Регистрируем доходы по перерасчетам для расчета вычетов
		Если РассчитыватьНачисленияПерерасчет Тогда
			НаборыЗаписейДоходыНДФЛ = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
			СформироватьДоходыНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетНДФЛ, ПланируемаяДатаВыплаты, НаборыЗаписейДоходыНДФЛ);
		КонецЕсли;
		Если (ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет").Найти(ПричинаИзменений) <> Неопределено 
			Или ПричинаИзменений = Неопределено) И ПересчитыватьТаблицыНачислений Тогда    	
			ПараметрыРасчета.ИзвестныеЗначенияПоказателей = ИзвестныеЗначенияПоказателейНачислений;
			// Наборы записей передаем, для того, чтобы затем можно было исключить полностью вытесненные записи.
			ПараметрыРасчета.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
			СтрокиНачисления = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияИмя], "Сотрудник", Сотрудники);
			РассчитатьНачисления(СтрокиНачисления, ПараметрыРасчета);
			РегистраторыНачислений.Добавить(ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
		Иначе
			// Начисления регистрируются в системе в процессе расчета (это необходимо для целей расчета)
			// если же начисления не пересчитываются, то для целей расчета удержаний например, 
			// нужно принудительно сформировать движения.
			Начисления = ПустаяТаблицаНачисления();
			СтрокиЗаполнениеФизическихЛиц = Новый Массив;
			СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
			Для Каждого СтрокаНачисления Из СтрокиНачисленийПоФизическимЛицам Цикл
				// Заполняем коллекцию для формирования движений.
				НоваяСтрока = Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеЗначения);
				НоваяСтрока.Сумма = СтрокаНачисления.Результат;
				// Собираем данные для заполнения физических лиц.
				Если Не ЗначениеЗаполнено(НоваяСтрока.ФизическоеЛицо) Тогда
					СтрокиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока);
					СотрудникиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			// Заполняем физических лиц в коллекции.
			ЗаполнитьФизическихЛицПоСотрудникам(СтрокиЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
			// Заполняем регистр расчета Начисления, необходимый для последующих расчетов.
			УстановитьПривилегированныйРежим(Истина);
			СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Начисления, , Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		// В результате могли образоваться полностью вытесненные записи, исключаем их.
		Если ИсключатьСтрокиПолностьюВытесненныхНачислений Тогда
			ИсключитьСтрокиПолностьюВытесненныхНачислений(Объект[ОписаниеДокумента.НачисленияИмя], ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
			// ..И заново перезаполняем массив строк.
			СтрокиНачисленийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		КонецЕсли;
		//ЗаполнитьЗначенияВычетов(СтрокиНачисленийПоФизическимЛицам, Организация, ДокументСсылка, ПланируемаяДатаВыплаты, ПараметрыРасчета.ОбщиеЗначения);
		//Если РассчитыватьНачисленияПерерасчет Тогда
		//	УстановитьПривилегированныйРежим(Истина);
		//	НаборыЗаписейДоходыНДФЛ.СведенияОДоходахНДФЛ.Очистить();
		//	НаборыЗаписейДоходыНДФЛ.СведенияОДоходахНДФЛ.Записать();
		//	УстановитьПривилегированныйРежим(Ложь);
		//КонецЕсли;
	КонецЕсли;
	
	// Расчет начислений по таблице пособий.
	Если РассчитыватьПособия Тогда
		СтрокиПособий = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ПособияИмя], "Сотрудник", Сотрудники);
		ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей("Пособия");
		// Наборы записей передаем, для того, чтобы затем можно было исключить полностью вытесненные записи.
		ПараметрыРасчета.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
		РассчитатьНачисления(СтрокиПособий, ПараметрыРасчета);
		РегистраторыНачислений.Добавить(ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
		// В результате могли образоваться полностью вытесненные записи, исключаем их.
		Если ИсключатьСтрокиПолностьюВытесненныхНачислений Тогда
			ИсключитьСтрокиПолностьюВытесненныхНачислений(Объект[ОписаниеДокумента.ПособияИмя], ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
		КонецЕсли;
		// Отбираем строки по физическим лицам.
		СтрокиПособийПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ПособияИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		// Объединяем строки пособий со строками начислений.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиНачисленийПоФизическимЛицам, СтрокиПособийПоФизическимЛицам);
	КонецЕсли;
	
	// Расчет начислений по таблице льгот.
	Если РассчитыватьЛьготы Тогда
		СтрокиЛьгот = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ЛьготыИмя], "Сотрудник", Сотрудники);
		Если ПересчитыватьТаблицыНачислений Тогда 
			ПараметрыРасчета.КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоОтображаемыхПоказателей();
			// Наборы записей передаем, для того, чтобы затем можно было исключить полностью вытесненные записи.
			ПараметрыРасчета.НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
			РассчитатьНачисления(СтрокиЛьгот, ПараметрыРасчета);
			РегистраторыНачислений.Добавить(ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
		Иначе 
			// Начисления регистрируются в системе в процессе расчета (это необходимо для целей расчета)
			// если же начисления не пересчитываются, то для целей расчета удержаний например, 
			// нужно принудительно сформировать движения.
			Льготы = ПустаяТаблицаНачисления();
			СтрокиЗаполнениеФизическихЛиц = Новый Массив;
			СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
			Для Каждого СтрокаЛьготы Из СтрокиЛьгот Цикл
				// Заполняем коллекцию для формирования движений.
				НоваяСтрока = Льготы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЛьготы);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеЗначения);
				НоваяСтрока.Сумма = СтрокаЛьготы.Результат;
				// Собираем данные для заполнения физических лиц.
				Если Не ЗначениеЗаполнено(НоваяСтрока.ФизическоеЛицо) Тогда
					СтрокиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока);
					СотрудникиЗаполнениеФизическихЛиц.Добавить(НоваяСтрока.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			// Заполняем физических лиц в коллекции.
			ЗаполнитьФизическихЛицПоСотрудникам(СтрокиЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
			// Заполняем регистр расчета Начисления, необходимый для последующих расчетов.
			УстановитьПривилегированныйРежим(Истина);
			СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Льготы, , Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		// В результате могли образоваться полностью вытесненные записи, исключаем их.
		Если ИсключатьСтрокиПолностьюВытесненныхНачислений Тогда
			ИсключитьСтрокиПолностьюВытесненныхНачислений(Объект[ОписаниеДокумента.ЛьготыИмя], ПараметрыРасчета.НаборыЗаписей.Начисления.Отбор.Регистратор.Значение);
		КонецЕсли;
		// Отбираем строки по физическим лицам.
		СтрокиЛьготПоФизическимЛицам = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.ЛьготыИмя], "Сотрудник.ФизическоеЛицо", Физлица);
		// Объединяем строки пособий со строками начислений.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиНачисленийПоФизическимЛицам, СтрокиЛьготПоФизическимЛицам);
	КонецЕсли;
	
	// Заполняем базовые данные и менеджер временных таблиц.
	Если РассчитыватьНачисления Тогда
		ПараметрыСоздатьВТНачисления = ДополнительныеПараметрыСоздатьВТНачисления();
		ПараметрыСоздатьВТНачисления.Начисления = СтрокиНачисленийПоФизическимЛицам;
		ПараметрыСоздатьВТНачисления.ЗаполнениеСтрок = ПараметрыРасчета.ОбщиеЗначения;
		ПараметрыСоздатьВТНачисления.Организация = Организация;
		ПараметрыСоздатьВТНачисления.ИмяВТ = ?(ИменаВТ.Найти("ВТНачисленияПерерасчет") = Неопределено, "ВТНачисления", "ВТНачисленияПредварительно");
		ПараметрыСоздатьВТНачисления.МесяцНачисления = МесяцНачисления;
		СоздатьВТНачисления(МенеджерВременныхТаблиц, ИменаВТ, ПараметрыСоздатьВТНачисления);
		Если ИменаВТ.Найти("ВТНачисления") = Неопределено Тогда 
			ОбъединитьТаблицыНачисленийИПерерасчета(МенеджерВременныхТаблиц, ИменаВТ);
		КонецЕсли;
	КонецЕсли;
	
	// Договоры подряда не пересчитываются, но участвуют в качестве исходных данных при последующих расчетах.
	Если РассчитыватьНачисленияПоДоговорамПодряда Тогда
		СтрокиНачисления = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.НачисленияПоДоговорамИмя], "Сотрудник", Сотрудники);
			СоздатьВТНачисленияПоДоговорам(МенеджерВременныхТаблиц, СтрокиНачисления, ИменаВТ, Сотрудники);
			// Регистрируем данные о начислениях по договорам, 
			// если далее потребуется расчет удержаний по исполнительным листам.
			ЗарегистрироватьНачисленияПоДоговорам(НаборыЗаписей, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Готовим менеджер временных таблиц с базовыми данными.
	ПроверятьЗаполнениеДатыРождения = Ложь;
	СоздатьВТФизическиеЛица(МенеджерВременныхТаблиц, ИменаВТ, ПроверятьЗаполнениеДатыРождения, Физлица);
	
	ПараметрыДляРаспределения = ОтражениеЗарплатыВБухучетеРасширенный.ОписаниеПараметровДляРаспределенияДанныхЗаполнения();
	ПараметрыДляРаспределения.ОкончательныйРасчетНДФЛ = ОкончательныйРасчетНДФЛ;
	ПараметрыДляРаспределения.РаспределениеИзХранилища = РаспределениеРезультатов;
	ПараметрыДляРаспределения.ДанныеРаспределенияПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда;
	Если (ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет,НачисленияПоДоговорам,Льготы").Найти(ПричинаИзменений) <> Неопределено 
		Или ПричинаИзменений = Неопределено) И ПересчитыватьТаблицыНачислений Тогда

		ПараметрыДляРаспределения.Движения = НаборыЗаписей;
		ПараметрыДляРаспределения.РаспределятьНачисления = Истина;
		ПараметрыДляРаспределения.БудутРассчитыватьсяВзносы = (РассчитыватьУдержания Или Не ЗначениеЗаполнено(ПорядокВыплаты)) И РассчитыватьВзносы;
		ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныеФормыПоСотрудникам(СотрудникиФизическиеЛица, Форма, ОписаниеДокумента, ПараметрыДляРаспределения);
		
	КонецЕсли;
	 
	Если РассчитыватьНДФЛ Или Не ЗначениеЗаполнено(ПорядокВыплаты) Тогда
		
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			// Отбор строк по физическим лицам.
			СтрокиУдержания = НайтиСтрокиОтборПоМассиву(Объект[ОписаниеДокумента.УдержанияИмя], "ФизическоеЛицо", Физлица);
			// Расчет только ДСВ
			// Раскладываем строки в отдельные коллекции.
			СтрокиУдержанийПоРолям = Новый Соответствие;
			СтрокиУдержанийПоРолям.Вставить(Перечисления.КатегорииУдержаний.ДСВ, Новый Массив);
			СтрокиУдержанийПоРолям.Вставить(Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ, Новый Массив);
			РазложитьСтрокиУдержанийПоРолям(СтрокиУдержания, СтрокиУдержанийПоРолям);
		КонецЕсли;
		
		ФормироватьДоходыДляРасчетаСтраховыхВзносов = Ложь;
		НаборыЗаписейДСВ = Неопределено;
		Если РассчитыватьВзносы И Не РежимПересчетаНДФЛ Тогда
			ФормироватьДоходыДляРасчетаСтраховыхВзносов = Истина;
		Иначе
			Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
												
				Если СтрокиУдержанийПоРолям.Получить(Перечисления.КатегорииУдержаний.ДСВ).Количество() > 0 
					Или СтрокиУдержанийПоРолям.Получить(Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ).Количество() > 0 Тогда
					
					ФормироватьДоходыДляРасчетаСтраховыхВзносов = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		

		Если ФормироватьДоходыДляРасчетаСтраховыхВзносов Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			СформироватьДоходыДляРасчетаСтраховыхВзносов(
			Организация, МесяцНачисления, МенеджерВременныхТаблиц, ИменаВТ, ДокументСсылка, ПараметрыДляРаспределения.НачисленияСРаспределениемПоЕНВД, НаборыЗаписейДСВ);

			УстановитьПривилегированныйРежим(Ложь);
			
			
		КонецЕсли;	 		
		
		Если РассчитыватьВзносы И Не РежимПересчетаНДФЛ Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			// Пересчитываем взносы только в случае изменения ведущих коллекций.
			Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы").Найти(ПричинаИзменений) <> Неопределено
				Или ПричинаИзменений = Неопределено 
				Или (ПричинаИзменений = "Удержания" И (ОписаниеДокумента.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс ИЛИ ОписаниеДокумента.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет) ) 
				Тогда
				СтруктураВзносы = УчетСтраховыхВзносов.РассчитатьВзносы(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
                Если ОписаниеДокумента.ВзносыИмя <> Неопределено Тогда
					ЗаменитьСтрокиВзносов(Объект[ОписаниеДокумента.ВзносыИмя], СтруктураВзносы.Взносы, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрокФизическихЛиц, СохранятьИсправления);
				КонецЕсли;	
				Если ОписаниеДокумента.ВзносыФОТИмя <> Неопределено Тогда
					ЗаменитьСтрокиВзносов(Объект[ОписаниеДокумента.ВзносыФОТИмя], СтруктураВзносы.ВзносыФОТ, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрокФизическихЛиц, СохранятьИсправления);
				КонецЕсли;	
			КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		// Если производится окончательный расчет, то выполняем без отбора по регистраторам начислений.
		Если ОписаниеДокумента.РежимНачисления = Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет Тогда
			РегистраторыНачислений = Неопределено;
		КонецЕсли;
		
		// Расчет удержаний, влияющих на расчет НДФЛ (ДСВ и пр.).
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			// Составляем массив строк по отдельным ролям.
			РассчитываемыеСтроки = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РассчитываемыеСтроки, СтрокиУдержанийПоРолям[Перечисления.КатегорииУдержаний.ДСВ]);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РассчитываемыеСтроки, СтрокиУдержанийПоРолям[Перечисления.КатегорииУдержаний.ДобровольныеВзносыВНПФ]);
			Если (ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы,Удержания").Найти(ПричинаИзменений) <> Неопределено 
				Или ПричинаИзменений = Неопределено) Тогда
				// Рассчитываем ДСВ
				ПараметрыРасчета = ДополнительныеПараметрыРасчетаУдержаний();
				ПараметрыРасчета.Организация = Организация;
				ПараметрыРасчета.МесяцУдержания = МесяцНачисления;
				ПараметрыРасчета.ДокументСсылка = ДокументСсылка;
				ПараметрыРасчета.РегистраторыНачислений = РегистраторыНачислений;
				
				РассчитатьУдержания(РассчитываемыеСтроки, ПараметрыРасчета, ПересчитыватьТаблицыНачислений);
				ПараметрыДляРаспределения.УдержанияИзменились = Истина;

			КонецЕсли;
		КонецЕсли;
		
		// Расчет НДФЛ
		Если ОписаниеДокумента.НДФЛИмя <> Неопределено И Не РежимПересчетаВзносов Тогда
			НаборыЗаписейДоходыНДФЛ = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
			СформироватьДоходыНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетНДФЛ, ПланируемаяДатаВыплаты, НаборыЗаписейДоходыНДФЛ);
			УстановитьПривилегированныйРежим(Истина);
			Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы,Удержания").Найти(ПричинаИзменений) <> Неопределено
				Или ПричинаИзменений = Неопределено Тогда
				РезультатРасчетаНДФЛ = РезультатРасчетаНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетНДФЛ, ПланируемаяДатаВыплаты);
				ЗаменитьСтрокиНДФЛ(Объект[ОписаниеДокумента.НДФЛИмя], РезультатРасчетаНДФЛ, Неопределено, Неопределено, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрокФизическихЛиц, СохранятьИсправления);
				ПараметрыДляРаспределения.НДФЛИзменился = Истина;
			Иначе
				РезультатРасчетаНДФЛ = Объект[ОписаниеДокумента.НДФЛИмя].Выгрузить();
			КонецЕсли;
			РегистрацияНДФЛ = РезультатРасчетаНДФЛ.Скопировать();
			УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(РегистрацияНДФЛ);
			// Регистрируем НДФЛ, если далее нужно считать удержания по исполнительным листам.
			ЗарегистрироватьНДФЛ(НаборыЗаписей, РегистрацияНДФЛ, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
			
			НаборыЗаписейДоходыНДФЛ.СведенияОДоходахНДФЛ.Очистить();
			НаборыЗаписейДоходыНДФЛ.СведенияОДоходахНДФЛ.Записать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		// Расчет остальных удержаний
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено И ПересчитыватьТаблицыНачислений Тогда
			// Рассчитать все, кроме ДСВ (удержания по исполнительным документам и др.).
			Если ПричиныПересчета("Начисления,ОплатаТруда,НачисленияПерерасчет,НачисленияПоДоговорам,Льготы,ОплатаЛьгот,Взносы,НДФЛ,Удержания").Найти(ПричинаИзменений) <> Неопределено
				Или ПричинаИзменений = Неопределено Тогда
				ПараметрыРасчета = ДополнительныеПараметрыРасчетаУдержаний();
				ПараметрыРасчета.Организация = Организация;
				ПараметрыРасчета.МесяцУдержания = МесяцНачисления;
				ПараметрыРасчета.ДокументСсылка = ДокументСсылка;
				ПараметрыРасчета.РегистраторыНачислений = РегистраторыНачислений;
				РассчитатьУдержания(СтрокиУдержанийПоРолям[Перечисления.КатегорииУдержаний.ПустаяСсылка()], ПараметрыРасчета);
				ПараметрыДляРаспределения.УдержанияИзменились = Истина;
			КонецЕсли;
			// Строки с удержаниями, результат которых равен нулю, - удаляем, 
			// делаем это только для документов, заполняющихся полным составом начислений.
			Если Не ЗначениеЗаполнено(ПорядокВыплаты) Тогда
				УдалитьНулевыеУдержания(Объект[ОписаниеДокумента.УдержанияИмя], Организация, МесяцНачисления, СтрокиУдержания);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыДляРаспределения.Движения = НаборыЗаписей;
	ПараметрыДляРаспределения.РаспределятьНачисления = Ложь;
	ПараметрыДляРаспределения.РаспределятьУдержания = Истина;
	ПараметрыДляРаспределения.БудутРассчитыватьсяВзносы = Ложь;
	ОтражениеЗарплатыВБухучетеРасширенный.ПолучитьРаспределениеДанныеФормыПоСотрудникам(СотрудникиФизическиеЛица, Форма, ОписаниеДокумента, ПараметрыДляРаспределения);
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
		
КонецПроцедуры

// Определяет является ли характер выплаты межрасчетным
//
// Параметры:
//  ПорядокВыплаты	 - Перечисление.ХарактерВыплатыЗарплаты 
// 
// Возвращаемое значение:
//   Булево   
//
Функция ЭтоМежрасчетнаяВыплата(ПорядокВыплаты) Экспорт
	
	Возврат ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет
			Или ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс;
		
КонецФункции

// Удаляет строки удержаний, результат расчета которых равен нулю.
//
// Параметры:
//	ВладелецКоллекцииСтрок - объект-держатель коллекции строк, необходим для удаления, 
//	СтрокиУдержаний - необязательный, если не задан, анализируется вся коллекция.
//
Процедура УдалитьНулевыеУдержания(ВладелецКоллекцииСтрок, Организация, МесяцНачисления, СтрокиУдержаний = Неопределено)
	
	КоллекцияСтрок = ВладелецКоллекцииСтрок;
	Если СтрокиУдержаний <> Неопределено Тогда
		КоллекцияСтрок = СтрокиУдержаний;
	КонецЕсли;
	
	// Удаляем строку только если результат нулевой.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаУдержаний Из КоллекцияСтрок Цикл
		Если СтрокаУдержаний.Результат = 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаУдержаний);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ВладелецКоллекцииСтрок.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку всех коллекций расчетного документа при изменении сотрудника.
//
Процедура ОбработатьИзменениеСотрудникаВедущейТаблицыФормы(Форма, ОписаниеДокумента, НовыйСотрудник, ПрежнийСотрудник) Экспорт
	
	// Очистить все коллекции документа от данных предыдущего сотрудника, 
	// если в ведущей таблице больше не осталось его представителей
	// создать строки зависимых коллекций по новому сотруднику.
	
	Объект = Форма.Объект;
	Организация = Объект.Организация;
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	ДокументСсылка = Объект.Ссылка;
	ОкончаниеПериода = КонецМесяца(Объект[ОписаниеДокумента.МесяцНачисленияИмя]);
	Если ОписаниеДокумента.Окончание <> Неопределено Тогда
		ОкончаниеПериода = Объект[ОписаниеДокумента.Окончание];
	КонецЕсли;
	
	ОчиститьДанныеФормыПоСотруднику(Форма, ОписаниеДокумента, ПрежнийСотрудник, Организация);
	
	ПорядокВыплаты = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		ПорядокВыплаты = Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	КонецЕсли;
	
	РассчитыватьУдержания = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.РассчитыватьУдержанияИмя) Тогда
		РассчитыватьУдержания = Объект[ОписаниеДокумента.РассчитыватьУдержанияИмя];
	Иначе 
		РассчитыватьУдержания = ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	КонецЕсли;
	
	Если РассчитыватьУдержания Тогда
		// Среди зависимых коллекций, для которых нужно создавать строки - только удержания, 
		// т.к. для расчета НДФЛ и Взносы не требуется наличия строк.
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			Физлица = КадровыйУчет.ФизическиеЛицаСотрудников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовыйСотрудник));
			СтрокиУдержания = ДанныеДляУдержанияЗарплаты(Организация, МесяцНачисления, ОкончаниеПериода, , НовыйСотрудник, ОписаниеДокумента.РежимНачисления);
			ЗаменитьСтрокиНаНовыеДанные(Объект[ОписаниеДокумента.УдержанияИмя], СтрокиУдержания, "ФизическоеЛицо", , Новый Структура("ФизическоеЛицо", Физлица));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Запрашивает строки удержаний по сотруднику, заменяет их в таблице документа.
//
Процедура ОбновитьСтрокиУдержаний(Форма, ОписаниеДокумента, Сотрудники, СохранятьИсправления = Истина) Экспорт
	
	Объект = Форма.Объект;
	Организация = Объект.Организация;
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	ОкончаниеПериода = КонецМесяца(Объект[ОписаниеДокумента.МесяцНачисленияИмя]);
	
	ПорядокВыплаты = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		ПорядокВыплаты = Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	КонецЕсли;
	
	РассчитыватьУдержания = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.РассчитыватьУдержанияИмя) Тогда
		РассчитыватьУдержания = Объект[ОписаниеДокумента.РассчитыватьУдержанияИмя];
	Иначе 
		РассчитыватьУдержания = ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	КонецЕсли;
	
	// Удержания рассчитываем, если выплата в межрасчетный период.
	Если Не РассчитыватьУдержания Тогда
		Объект[ОписаниеДокумента.УдержанияИмя].Очистить();
		Возврат;
	КонецЕсли;
	
	ВедущиеОбъекты = СотрудникиФизическиеЛица(Сотрудники, Организация);
	Если ВедущиеОбъекты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Сотрудники = ВедущиеОбъекты.Сотрудники;
	Физлица = ВедущиеОбъекты.ФизическиеЛица;
	
	ОтборСтрокФизическихЛиц = Новый Структура("ФизическоеЛицо", Физлица);
	
	// Получаем строки удержаний сотрудников.
	СтрокиУдержания = ДанныеДляУдержанияЗарплаты(Организация, МесяцНачисления, ОкончаниеПериода, , Сотрудники, ОписаниеДокумента.РежимНачисления);
	
	// Обновляем строки в коллекции документа.
	ЗаменитьСтрокиУдержаний(Объект[ОписаниеДокумента.УдержанияИмя], СтрокиУдержания, СохранятьИсправления, Форма.ПолучитьКонтролируемыеПоля(), ОтборСтрокФизическихЛиц);
	
КонецПроцедуры 

// Перезаполняет (и пересчитывает) данные формы документа-начисления 
// по переданным сотрудникам.
//
// Параметры:
//	Форма
//	ОписаниеДокумента - структура, описывающая документ-начисление 
//		(см. ОписаниеРасчетногоДокумента).
//	Сотрудники - ссылка или массив ссылок на сотрудников.
// 	СохранятьИсправления - если Истина, перезаполнены не будут строки, 
//		для которых в наборах по определенному ключу содержатся исправления.
//		Например, для таблицы Начислений состав ключа Сотрудник и Начисление, 
//		это значит, что если хотя бы одна строка с таким начислением сотрудника содержит исправления, 
//		то все строки этого начисления этому сотруднику не будут перезаполнены
// 	ИспользоватьДлительнуюОперацию.
// 	ПерезаполнятьВедущиеТаблицы - в документах есть таблицы, от наполнения которых зависит содержимое других таблиц,
//		если изменение данных производится в этих таблицах, то их перезаполнять не нужно, в этом случае нужно установить 
//		ПерезаполнятьВедущиеТаблицы = Ложь
//		Например, при изменении сотрудника в таблице Начислений, 
//		нужно перезаполнить зависимые (ведомые) таблицы удержаний, НДФЛ и др., но не перезаполнять начисления по договорам.
//		
//
Функция ПерезаполнитьДанныеФормы(Форма, ОписаниеДокумента, Знач СотрудникиФизическиеЛица = Неопределено, СохранятьИсправления = Истина, ИспользоватьДлительнуюОперацию = Ложь, ПерезаполнятьВедущиеТаблицы = Истина, СотрудникиПериодДействияПерерасчет = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	МесяцНачисления = Объект[ОписаниеДокумента.МесяцНачисленияИмя];
	
	Организация = Объект.Организация;
	ДокументСсылка = Объект.Ссылка;
	Подразделение = Объект.Подразделение;
	
	ФизическиеЛица = Неопределено;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если СотрудникиФизическиеЛица <> Неопределено Тогда
		ВедущиеОбъекты = СотрудникиФизическиеЛица(СотрудникиФизическиеЛица, Организация);
		Если ВедущиеОбъекты = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Сотрудники = ВедущиеОбъекты.Сотрудники;
		ФизическиеЛица = ВедущиеОбъекты.ФизическиеЛица;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") И Сотрудники <> Неопределено Тогда 
		ПараметрыПолученияПодработок = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники, МесяцНачисления, КонецМесяца(МесяцНачисления));
	    МассивПодработок = КадровыйУчетРасширенный.ПодработкиСотрудников(Истина, ПараметрыПолученияПодработок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, МассивПодработок, Истина);
	КонецЕсли;
	
	// Период заполнения данных определяем по месяцу начисления, 
	// если он не определяется отдельными полями.
	ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	Если ЗначениеЗаполнено(ОписаниеДокумента.Окончание) Тогда
		ОкончаниеПериода = КонецДня(Объект[ОписаниеДокумента.Окончание]);
	КонецЕсли;
	
	// Метод работает как в режиме окончательного расчета, так и для расчета первой половины месяца.
	РежимНачисления = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.РежимНачисления) Тогда
		РежимНачисления = ОписаниеДокумента.РежимНачисления;
	КонецЕсли;
	
	ПорядокВыплаты = Неопределено;
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		ПорядокВыплаты = Объект[ОписаниеДокумента.ПорядокВыплатыИмя];
	КонецЕсли;
	
	СтруктураПараметров = РасчетЗарплатыРасширенныйКлиентСервер.ПараметрыПолученияДанныхЗаполненияДокумента();
	СтруктураПараметров.Организация = Организация;
	СтруктураПараметров.ДокументСсылка = ДокументСсылка;
	СтруктураПараметров.Подразделение = Подразделение;
	СтруктураПараметров.МесяцНачисления = МесяцНачисления;
	СтруктураПараметров.Сотрудники = Сотрудники;
	СтруктураПараметров.ОкончаниеПериода = ОкончаниеПериода;
	СтруктураПараметров.РежимНачисления = РежимНачисления;
	СтруктураПараметров.ПорядокВыплаты = ПорядокВыплаты;
	СтруктураПараметров.ОписаниеДокумента = ОписаниеДокумента;
	СтруктураПараметров.СохранятьИсправления = СохранятьИсправления;
	СтруктураПараметров.СодержимоеДокумента = СодержимоеДокументаРасчетаЗарплаты(Объект, ОписаниеДокумента, ФизическиеЛица);
	СтруктураПараметров.КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	СтруктураПараметров.СотрудникиПериодДействияПерерасчет = СотрудникиПериодДействияПерерасчет;
	СтруктураПараметров.РежимПересчетаНДФЛ = ОписаниеДокумента.ЭтоНачислениеЗарплаты И Форма.РежимПересчетаНДФЛ;
	СтруктураПараметров.РежимПересчетаВзносов = ОписаниеДокумента.ЭтоНачислениеЗарплаты И Форма.РежимПересчетаВзносов;
	Если Не ПустаяСтрока(ОписаниеДокумента.НДФЛИмя) Тогда
		СтруктураПараметров.ОкончательныйРасчетНДФЛ = Форма["ОкончательныйРасчетНДФЛ"];
	КонецЕсли;
	
	ДанныеРаспределения = Новый Структура;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено;
	
	Если ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата <> Неопределено Тогда 
		Для Каждого КлючИЗначение Из ОписаниеДокумента.ОписанияТаблицДляРаспределенияРезультата Цикл
			ПутьКДанным = КлючИЗначение.Значение.ПутьКДаннымАдресРаспределенияРезультатовВХранилище;
			Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Форма[ПутьКДанным]) И Не ДанныеРаспределения.Свойство(ПутьКДанным) Тогда
				ДанныеРаспределения.Вставить(ПутьКДанным, ПолучитьИзВременногоХранилища(Форма[ПутьКДанным]));
			КонецЕсли;
			ПутьКДанным = КлючИЗначение.Значение.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда;
			Если ЗначениеЗаполнено(ПутьКДанным) И ЗначениеЗаполнено(Форма[ПутьКДанным]) И ДанныеРаспределенияПоТерриториямУсловиямТруда = Неопределено Тогда
				ДанныеРаспределенияПоТерриториямУсловиямТруда = ПолучитьИзВременногоХранилища(Форма[ПутьКДанным]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПараметров.РаспределениеРезультатов = ДанныеРаспределения;
	СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда;
	
	Если Не ИспользоватьДлительнуюОперацию Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		РасчетЗарплатыРасширенный.ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища);
		СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента") Тогда
			ЗагрузитьДанныеПодготовленные(Форма, СтруктураДанных.ДанныеДляПерезаполненияТаблицДокумента, СтруктураПараметров);
		КонецЕсли;
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru='Заполнение документа ""Начисление зарплаты""';uk='Заповнення документа ""Нарахування зарплати""'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		Форма.УникальныйИдентификатор,
		"РасчетЗарплатыРасширенный.ПодготовитьДанныеДляПерезаполнения",
		СтруктураПараметров,
		НаименованиеЗадания);
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если СтруктураДанных.Свойство("ДанныеДляПерезаполненияТаблицДокумента") Тогда
			ЗагрузитьДанныеПодготовленные(Форма, СтруктураДанных.ДанныеДляПерезаполненияТаблицДокумента, СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Подготавливает данные формы документа-начисления для перезаполнения документа
// по переданным параметрам.
// Используется фоновым заданием, если БД серверная.
//
// Параметры:
//		СтруктураПараметров - структура с параметрам
//				(см. ПерезаполнитьДанныеФормы и ОписаниеРасчетногоДокумента).
//		АдресХранилища - адрес, куда будет помещен результат выполнения.
//
Процедура ПодготовитьДанныеДляПерезаполнения(СтруктураПараметров, АдресХранилища) Экспорт
	
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента; 
	Организация = СтруктураПараметров.Организация; 
	ДокументСсылка = СтруктураПараметров.ДокументСсылка;
	Подразделение = СтруктураПараметров.Подразделение;
	МесяцНачисления = СтруктураПараметров.МесяцНачисления;
	Сотрудники = СтруктураПараметров.Сотрудники;
	ОкончаниеПериода = СтруктураПараметров.ОкончаниеПериода;
	РежимНачисления = СтруктураПараметров.РежимНачисления;
	СохранятьИсправления = СтруктураПараметров.СохранятьИсправления;
	СодержимоеДокумента = СтруктураПараметров.СодержимоеДокумента;
	КонтролируемыеПоля = СтруктураПараметров.КонтролируемыеПоля;
	РежимПересчетаНДФЛ = СтруктураПараметров.РежимПересчетаНДФЛ;
	РежимПересчетаВзносов = СтруктураПараметров.РежимПересчетаВзносов;
	РаспределениеРезультатов = СтруктураПараметров.РаспределениеРезультатов;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = СтруктураПараметров.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	КонецЕсли;
	
	РасчетПервойПоловиныМесяца = РежимНачисления = Перечисления.РежимНачисленияЗарплаты.РасчетПервойПоловиныМесяца;
	
	// Выявляем сотрудников, для которых будет выполняться заполнение документа.
    Если Сотрудники = Неопределено И Не РежимПересчетаНДФЛ И Не РежимПересчетаВзносов Тогда

		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудников.Организация  		= Организация;
		ПараметрыПолученияСотрудников.Подразделение 	= Подразделение;
		ПараметрыПолученияСотрудников.НачалоПериода		= МесяцНачисления;
		ПараметрыПолученияСотрудников.ОкончаниеПериода  = ОкончаниеПериода;
		ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "Сотрудник", Истина);
		СтруктураПараметров.Сотрудники = Сотрудники;
		
	КонецЕсли;
	
	ПолучатьДанныеУчета = Не РежимПересчетаНДФЛ И Не РежимПересчетаВзносов;
	
	СотрудникиРасчета = Новый Массив;
	ФизическиеЛицаРасчета = Новый Массив;
	
	Если ПолучатьДанныеУчета Тогда 
		
		// Получаем данные коллекций по учету.
		Если ОписаниеДокумента.ЛьготыИмя <> Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			ДанныеДляНачисления = Модуль.ДанныеДляНачисленияЗарплатыИЛьгот(Организация, МесяцНачисления, ОкончаниеПериода, МесяцНачисления, Подразделение, Сотрудники, , , РасчетПервойПоловиныМесяца, ДокументСсылка, Истина);
			Начисления = ДанныеДляНачисления.Начисления;
			Льготы = ДанныеДляНачисления.Льготы;
		Иначе 
			Начисления = ДанныеДляНачисленияЗарплаты(Организация, МесяцНачисления, ОкончаниеПериода, МесяцНачисления, Подразделение, Сотрудники, , , РасчетПервойПоловиныМесяца, ДокументСсылка, Истина);
		КонецЕсли;
		
		Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено
			Или ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено Тогда
			
			ДанныеПерерасчета = ПерерасчетЗарплаты.ДанныеПерерасчетаНачисленияЗарплаты(
				Организация, МесяцНачисления, Сотрудники, ДокументСсылка, СтруктураПараметров.СотрудникиПериодДействияПерерасчет, ОписаниеДокумента.РежимДоначисления);
				
			Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено Тогда
				НачисленияПерерасчет = ДанныеПерерасчета.НачисленияПерерасчет;
			КонецЕсли;
				
			Если ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено Тогда
				ПособияПерерасчет = ДанныеПерерасчета.ПособияПерерасчет;
			КонецЕсли;
				
		КонецЕсли;
		
		Если ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено Тогда
			НачисленияПоДоговорам = РезультатНачисленияПоДоговорам(Организация, МесяцНачисления, ДокументСсылка, Подразделение, Сотрудники);
		КонецЕсли;
		Если ОписаниеДокумента.ПособияИмя <> Неопределено Тогда
			Пособия = ДанныеДляНачисленияПособий(Организация, МесяцНачисления, ОкончаниеПериода, МесяцНачисления, Подразделение, Сотрудники, РасчетПервойПоловиныМесяца, ДокументСсылка);
		КонецЕсли;
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			Удержания = ДанныеДляУдержанияЗарплаты(Организация, МесяцНачисления, ОкончаниеПериода, Подразделение, Сотрудники, РежимНачисления);
		КонецЕсли;
		Если ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено Тогда
			ПогашениеЗаймов = РезультатРасчетаЗаймов(Организация, ОкончаниеПериода, ДокументСсылка, Сотрудники, Подразделение);
		КонецЕсли;
		
		// Объединяем полученные коллекции с содержимым документа.
		
		// Заполняем структуру отбора, если установлен отбор по сотрудникам.
		ОтборПоСотрудникам = Неопределено;
		ОтборПоФизическимЛицам = Неопределено;
		Если Сотрудники <> Неопределено Тогда
			Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
				// Значит была ссылка на одного сотрудника.
				Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
			КонецЕсли;
			ОтборПоСотрудникам = Новый Структура("Сотрудник", Сотрудники);
			ОтборПоФизическимЛицам = Новый Структура("ФизическоеЛицо", КадровыйУчет.ФизическиеЛицаСотрудников(Сотрудники));
		КонецЕсли;
		
		УсловияЗаменыСтрок = Неопределено;
		
		Если ОписаниеДокумента.НачисленияИмя <> Неопределено Тогда
			КлючевыеКолонки = "Сотрудник";
			Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
				КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
			КонецЕсли;
			ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.НачисленияИмя];
			Если СохранятьИсправления Тогда
				УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияИмя);
			КонецЕсли;
			ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, Начисления, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено Тогда
			КлючевыеКолонки = "Сотрудник";
			Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
				КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
			КонецЕсли;
			ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.НачисленияПерерасчетИмя];
			Если СохранятьИсправления Тогда
				УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияПерерасчетИмя);
			КонецЕсли;
			ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, НачисленияПерерасчет, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено Тогда
			ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.ПособияПерерасчетИмя];
			Если СохранятьИсправления Тогда
				УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ПособияПерерасчетИмя);
			КонецЕсли;
			ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, ПособияПерерасчет, "Сотрудник", УсловияЗаменыСтрок, ОтборПоСотрудникам);
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено Тогда
			ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.НачисленияПоДоговорамИмя];
			Если СохранятьИсправления Тогда
				УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияПоДоговорамИмя);
			КонецЕсли;
			ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, НачисленияПоДоговорам, "Сотрудник,ДокументОснование", УсловияЗаменыСтрок, ОтборПоСотрудникам);
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеДокумента.ПособияИмя <> Неопределено Тогда
			ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.ПособияИмя];
			Если СохранятьИсправления Тогда
				УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ПособияИмя);
			КонецЕсли;
			ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, Пособия, "Сотрудник", УсловияЗаменыСтрок, ОтборПоСотрудникам);
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеДокумента.ЛьготыИмя <> Неопределено Тогда
			ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.ЛьготыИмя];
			Если СохранятьИсправления Тогда
				УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ЛьготыИмя);
			КонецЕсли;
			ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, Льготы, "Сотрудник", УсловияЗаменыСтрок, ОтборПоСотрудникам);
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.УдержанияИмя];
			ЗаменитьСтрокиУдержаний(ОбновляемаяКоллекция, Удержания, СохранятьИсправления, КонтролируемыеПоля, ОтборПоФизическимЛицам);
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "ФизическоеЛицо"), Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено Тогда
			ОбновляемаяКоллекция = СодержимоеДокумента[ОписаниеДокумента.ПогашениеЗаймовИмя];
			Если СохранятьИсправления Тогда
				УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ПогашениеЗаймовИмя);
			КонецЕсли;
			ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, ПогашениеЗаймов, "ФизическоеЛицо,ДоговорЗайма", УсловияЗаменыСтрок, ОтборПоФизическимЛицам);
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаРасчета, ОбщегоНазначения.ВыгрузитьКолонку(ОбновляемаяКоллекция, "ФизическоеЛицо"), Истина);
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		
		Если ОписаниеДокумента.НачисленияИмя <> Неопределено Тогда
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, 
					ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.НачисленияИмя], "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено Тогда
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, 
					ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.НачисленияПерерасчетИмя], "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено Тогда
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, 
					ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.ПособияПерерасчетИмя], "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено Тогда
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, 
					ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.НачисленияПоДоговорамИмя], "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.ПособияИмя <> Неопределено Тогда
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, 
					ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.ПособияИмя], "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.ЛьготыИмя <> Неопределено Тогда
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, 
					ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.ЛьготыИмя], "Сотрудник"), Истина);
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаРасчета, 
					ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.УдержанияИмя], "ФизическоеЛицо"), Истина);
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено Тогда
			Если Сотрудники = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаРасчета, 
					ОбщегоНазначения.ВыгрузитьКолонку(СодержимоеДокумента[ОписаниеДокумента.ПогашениеЗаймовИмя], "ФизическоеЛицо"), Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Имитируем данные формы Объект.
	СодержимоеДокумента.Вставить("Организация", Организация);
	СодержимоеДокумента.Вставить("Ссылка", ДокументСсылка);
	СодержимоеДокумента.Вставить(ОписаниеДокумента.МесяцНачисленияИмя, МесяцНачисления);
	Если ОписаниеДокумента.Окончание <> Неопределено Тогда
		СодержимоеДокумента.Вставить(ОписаниеДокумента.Окончание, ОкончаниеПериода);
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиРасчета, 
			КадровыйУчетРасширенный.СотрудникиФизическихЛиц(ФизическиеЛицаРасчета, Организация), Истина);
	Иначе
		СотрудникиРасчета = Сотрудники;
	КонецЕсли;
	
	// Имитируем форму
	ОбразФормы = Новый Структура;
	ОбразФормы.Вставить("Объект", СодержимоеДокумента);
	ИмяПоляМесяцСтрокой = ОписаниеДокумента.МесяцНачисленияИмя + "Строкой";
	ОбразФормы.Вставить(ИмяПоляМесяцСтрокой);
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(
		ОбразФормы, "Объект." + ОписаниеДокумента.МесяцНачисленияИмя, ИмяПоляМесяцСтрокой);
		
	ДополнительныеПараметры = ДополнительныеПараметрыДляРасчетаДанныхФормыПоСотрудникам();
	ДополнительныеПараметры.РежимПересчетаНДФЛ = РежимПересчетаНДФЛ;
	ДополнительныеПараметры.РежимПересчетаВзносов = РежимПересчетаВзносов;
	ДополнительныеПараметры.РаспределениеРезультатов = РаспределениеРезультатов;
	ДополнительныеПараметры.ДанныеРаспределенияПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда;
	ДополнительныеПараметры.СохранятьИсправления = СохранятьИсправления;
	ДополнительныеПараметры.КонтролируемыеПоля = КонтролируемыеПоля;
	ДополнительныеПараметры.ИсключатьСтрокиПолностьюВытесненныхНачислений = Истина;
	ДополнительныеПараметры.ОкончательныйРасчетНДФЛ = СтруктураПараметров.ОкончательныйРасчетНДФЛ;
	
	РассчитатьДанныеФормыПоСотрудникам(
		СотрудникиРасчета, ОбразФормы, ОписаниеДокумента, ДополнительныеПараметры);
	
	ДанныеДляЗаполнения = Новый Структура;
	
	ДанныеДляЗаполнения.Вставить("ДанныеДляПерезаполненияТаблицДокумента", СодержимоеДокумента);
	ДанныеДляЗаполнения.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

// Загружает подготовленные данные для перезаполнения документа-начисления,
// вызывается после завершения фонового задания.
//
Процедура ЗагрузитьДанныеПодготовленные(Форма, ДанныеЗаполнения, СтруктураПараметров) Экспорт
	
	Сотрудники = СтруктураПараметров.Сотрудники;
	ОписаниеДокумента = СтруктураПараметров.ОписаниеДокумента;
	СохранятьИсправления = СтруктураПараметров.СохранятьИсправления;
	Объект = Форма.Объект;
	
	РежимПересчетаНДФЛ = СтруктураПараметров.РежимПересчетаНДФЛ;
	РежимПересчетаВзносов = СтруктураПараметров.РежимПересчетаВзносов;
	ПерезаполнятьТаблицы = Не РежимПересчетаНДФЛ И Не РежимПересчетаВзносов;	
	
	// Заполняем структуру отбора, если установлен отбор по сотрудникам.
	ОтборПоСотрудникам = Неопределено;
	ОтборПоФизическимЛицам = Неопределено;
	Если Сотрудники <> Неопределено Тогда
		Если ТипЗнч(Сотрудники) <> Тип("Массив") Тогда
			// Значит была ссылка на одного сотрудника.
			Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		КонецЕсли;
		ОтборПоСотрудникам = Новый Структура("Сотрудник", Сотрудники);
		ОтборПоФизическимЛицам = Новый Структура("ФизическоеЛицо", КадровыйУчет.ФизическиеЛицаСотрудников(Сотрудники));
	КонецЕсли;
	
	УсловияЗаменыСтрок = Неопределено;
	КонтролируемыеПоля = Форма.ПолучитьКонтролируемыеПоля();
	
	Если ОписаниеДокумента.НачисленияИмя <> Неопределено И ПерезаполнятьТаблицы Тогда
		КлючевыеКолонки = "Сотрудник";
		Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
			КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
		КонецЕсли;
		ОбновляемаяКоллекция = Объект[ОписаниеДокумента.НачисленияИмя];
		Если СохранятьИсправления Тогда
			УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияИмя);
		КонецЕсли;
		ЗамененныеСтроки = ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, ДанныеЗаполнения.Начисления, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	КонецЕсли;
	
	Если ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено И ПерезаполнятьТаблицы Тогда
		КлючевыеКолонки = "Сотрудник";
		Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
			КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
		КонецЕсли;
		ОбновляемаяКоллекция = Объект[ОписаниеДокумента.НачисленияПерерасчетИмя];
		Если СохранятьИсправления Тогда
			УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияПерерасчетИмя);
		КонецЕсли;
		ЗамененныеСтроки = ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, ДанныеЗаполнения.НачисленияПерерасчет, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	КонецЕсли;
	
	Если ОписаниеДокумента.ПособияПерерасчетИмя <> Неопределено И ПерезаполнятьТаблицы Тогда
		КлючевыеКолонки = "Сотрудник";
		Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
			КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
		КонецЕсли;
		ОбновляемаяКоллекция = Объект[ОписаниеДокумента.ПособияПерерасчетИмя];
		Если СохранятьИсправления Тогда
			УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ПособияПерерасчетИмя);
		КонецЕсли;
		ЗамененныеСтроки = ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, ДанныеЗаполнения.ПособияПерерасчет, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	КонецЕсли;
	
	Если ОписаниеДокумента.НачисленияПоДоговорамИмя <> Неопределено И ПерезаполнятьТаблицы Тогда
		ОбновляемаяКоллекция = Объект[ОписаниеДокумента.НачисленияПоДоговорамИмя];
		Если СохранятьИсправления Тогда
			УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияПоДоговорамИмя);
		КонецЕсли;
		ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, ДанныеЗаполнения.НачисленияПоДоговорам, "Сотрудник,ДокументОснование", УсловияЗаменыСтрок, ОтборПоСотрудникам);
	КонецЕсли;
	
	Если ОписаниеДокумента.ПособияИмя <> Неопределено И ПерезаполнятьТаблицы Тогда
		Если СохранятьИсправления Тогда
			УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ПособияИмя);
		КонецЕсли;
		ЗаменитьСтрокиНаНовыеДанные(Объект[ОписаниеДокумента.ПособияИмя], ДанныеЗаполнения.Пособия, "Сотрудник", УсловияЗаменыСтрок, ОтборПоСотрудникам);
	КонецЕсли;
	
	Если ОписаниеДокумента.УдержанияИмя <> Неопределено Тогда
		ЗаменитьСтрокиУдержаний(Объект[ОписаниеДокумента.УдержанияИмя], ДанныеЗаполнения.Удержания, СохранятьИсправления, КонтролируемыеПоля, ОтборПоФизическимЛицам);
	КонецЕсли;
	
	Если ОписаниеДокумента.НДФЛИмя <> Неопределено И Не РежимПересчетаВзносов Тогда
		Если ОтборПоФизическимЛицам <> Неопределено Тогда 
			КлючевыеКолонки = "ФизическоеЛицо";
			ПодразделенияФизическихЛиц = Новый Соответствие;
			НайденныеСтроки = НайтиСтрокиОтборПоМассиву(ДанныеЗаполнения.НДФЛ, "ФизическоеЛицо", ОтборПоФизическимЛицам.ФизическоеЛицо);
			Для Каждого СтрокаНДФЛ Из НайденныеСтроки Цикл 
				МассивФизическихЛиц = ПодразделенияФизическихЛиц[СтрокаНДФЛ.Подразделение];
				Если МассивФизическихЛиц = Неопределено Тогда 
					МассивФизическихЛиц = Новый Массив;
					ПодразделенияФизическихЛиц.Вставить(СтрокаНДФЛ.Подразделение, МассивФизическихЛиц);
				КонецЕсли;
				МассивФизическихЛиц.Добавить(СтрокаНДФЛ.ФизическоеЛицо);
			КонецЦикла;
			Для Каждого КлючИЗначение Из ПодразделенияФизическихЛиц Цикл 
				ОтборСтрок = Новый Структура;
				ОтборСтрок.Вставить("ФизическоеЛицо", КлючИЗначение.Значение);
				ЗаменитьСтрокиНДФЛ(Объект[ОписаниеДокумента.НДФЛИмя], ДанныеЗаполнения.НДФЛ, Неопределено, Неопределено, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрок, СохранятьИсправления, КлючевыеКолонки);
			КонецЦикла;
		Иначе 
            ЗаменитьСтрокиНДФЛ(Объект[ОписаниеДокумента.НДФЛИмя], ДанныеЗаполнения.НДФЛ, Неопределено, Неопределено, КонтролируемыеПоля, ОписаниеДокумента, ОтборПоФизическимЛицам, СохранятьИсправления);
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеДокумента.ВзносыИмя <> Неопределено И Не РежимПересчетаНДФЛ Тогда
		ЗаменитьСтрокиВзносов(Объект[ОписаниеДокумента.ВзносыИмя], ДанныеЗаполнения.Взносы, КонтролируемыеПоля, ОписаниеДокумента.ВзносыИмя, ОтборПоФизическимЛицам, СохранятьИсправления);
	КонецЕсли;
	
	Если ОписаниеДокумента.ВзносыФОТИмя <> Неопределено И Не РежимПересчетаНДФЛ Тогда
		ЗаменитьСтрокиВзносов(Объект[ОписаниеДокумента.ВзносыФОТИмя], ДанныеЗаполнения.ВзносыФОТ, КонтролируемыеПоля, ОписаниеДокумента.ВзносыФОТИмя, ОтборПоФизическимЛицам, СохранятьИсправления);
	КонецЕсли;
	
	Если ОписаниеДокумента.ПогашениеЗаймовИмя <> Неопределено И ПерезаполнятьТаблицы Тогда
		ПогашениеЗаймов = Объект[ОписаниеДокумента.ПогашениеЗаймовИмя];
		Если СохранятьИсправления Тогда
			УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ПогашениеЗаймовИмя);
		КонецЕсли;
		ЗаменитьСтрокиНаНовыеДанные(ПогашениеЗаймов, ДанныеЗаполнения.ПогашениеЗаймов, "ФизическоеЛицо,ДоговорЗайма", УсловияЗаменыСтрок, ОтборПоФизическимЛицам);
	КонецЕсли;
	
	Если ОписаниеДокумента.ЛьготыИмя <> Неопределено И ПерезаполнятьТаблицы Тогда
		КлючевыеКолонки = "Сотрудник";
		Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
			КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
		КонецЕсли;
		ОбновляемаяКоллекция = Объект[ОписаниеДокумента.ЛьготыИмя];
		Если СохранятьИсправления Тогда
			УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.ЛьготыИмя);
		КонецЕсли;
		ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, ДанныеЗаполнения.Льготы, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет строки, связанные с сотрудником из всех коллекций расчетного документа.
//
Процедура ОчиститьДанныеФормыПоСотруднику(Форма, ОписаниеДокумента, Сотрудник, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	// Проверяем остались ли строки в ведущих таблицах: 
	ВедущиеТаблицы = РасчетЗарплатыРасширенныйКлиентСервер.ВедущиеТаблицы();
	
	// Начисления, НачисленияПоДоговорам
	СтрокиСотрудника = Новый Массив;
	Для Каждого ВедущаяТаблица Из ВедущиеТаблицы Цикл
		Если ОписаниеДокумента[ВедущаяТаблица + "Имя"] <> Неопределено Тогда
			НайденныеСтроки = Объект[ОписаниеДокумента[ВедущаяТаблица + "Имя"]].НайтиСтроки(
					Новый Структура("Сотрудник", Сотрудник));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиСотрудника, НайденныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиСотрудника.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем сотрудников и физических лиц.
	ВедущиеОбъекты = СотрудникиФизическиеЛица(Сотрудник, Организация);
	Сотрудники = ВедущиеОбъекты.Сотрудники;
	Физлица = ВедущиеОбъекты.ФизическиеЛица;
	
	КоллекцииПоФизическомуЛицу = Новый Массив;
	КоллекцииПоФизическомуЛицу.Добавить("Удержания");
	КоллекцииПоФизическомуЛицу.Добавить("Взносы");
	КоллекцииПоФизическомуЛицу.Добавить("НДФЛ");
	
	Для Каждого ИмяКоллекции Из КоллекцииПоФизическомуЛицу Цикл
		ИмяТаблицыДокумента = ОписаниеДокумента[ИмяКоллекции + "Имя"];
		Если ИмяТаблицыДокумента = Неопределено Тогда
			// Нет такой таблицы в этом документе.
			Продолжить;
		КонецЕсли;
		СтрокиКоллекции = НайтиСтрокиОтборПоМассиву(Объект[ИмяТаблицыДокумента], "ФизическоеЛицо", Физлица);
		Для Каждого СтрокаКоллекции Из СтрокиКоллекции Цикл
			Объект[ИмяТаблицыДокумента].Удалить(СтрокаКоллекции);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Выбирает объекты, являющиеся ведущими для обновления (сотрудники или физические лица)
// и вызывает процедуру перезаполнения данных формы.
//
// Параметры:
//	Форма
//	ИмяТаблицы - имя таблицы документа, как оно указывается в описании расчетного документа, 
//		см. РасчетЗарплатыРасширенный.ОписаниеРасчетногоДокумента.
//	ВыбранныеСтроки - идентификаторы выбранных строк таблицы.
//	ВедущееПоле - имя поля, содержащего ведущее поле для обновления (Сотрудник или ФизическоеЛицо).
//	ТипВедущего - тип значения, являющегося ведущим для обновления (Сотрудник или ФизическоеЛицо).
//
Процедура ПересчитатьСотрудникаНаСервере(Форма, ИмяТаблицы, ВыбранныеСтроки, ВедущееПоле, ТипВедущегоПоля) Экспорт
	
	Объект = Форма.Объект;
	
	// В таблицах реквизиты разного типа и с разными именами
	// если это сотрудники - нужно получить физических лиц, 
	// если физические лица - сотрудников
	// очистить строки по всем таблицам, запомнить места вставки строк по таблицам.
	
	// Составляем коллекцию выделенных пользователем строк.
	СтрокиТаблицы = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		СтрокиТаблицы.Добавить(Объект[ИмяТаблицы].НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	ВедущиеОбъекты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиТаблицы, ВедущееПоле, Истина);
	
	Если ТипВедущегоПоля = Тип("СправочникСсылка.Сотрудники") Тогда
		// Получаем физических лиц по сотрудникам.
		Сотрудники = ВедущиеОбъекты;
	Иначе
		// Получаем сотрудников по физическим лицам.
		Физлица = ВедущиеОбъекты;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Объект.Организация, , Истина);
	КонецЕсли;
	
	Форма.ПерезаполнитьДанныеФормыНаСервере(Сотрудники, Истина);
	
КонецПроцедуры

// Подготавливает таблицу с данными расчета займов и материальной выгоды.
//
Функция РезультатРасчетаЗаймов(Организация, ДатаОкончания, Документ, Сотрудники = Неопределено, Подразделение = Неопределено) Экспорт
	
	// Получаем данные расчета займов.
	РасчетЗаймов = ЗаймыСотрудникам.РасчетЗаймовСотрудникам(
		Организация, ДатаОкончания, Документ, , Сотрудники, Подразделение, Истина);
	//// Дополняем таблицу данными расчета материальной выгоды.
	//УчетНДФЛРасширенный.РасчетМатериальнойВыгодыПоЗаймамСотрудников(Организация, ДатаОкончания, РасчетЗаймов, Документ);
	
	РасчетЗаймов.Свернуть("ФизическоеЛицо, ДоговорЗайма, Подразделение", 
//		"НачисленоПроцентов, ПогашениеПроцентов, ПогашениеЗайма, МатериальнаяВыгода, НалогНаМатериальнуюВыгоду");
	"НачисленоПроцентов, ПогашениеПроцентов, ПогашениеЗайма");
		
	// Удаляем строки с нулевыми суммами.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаРасчета Из РасчетЗаймов Цикл
		Если СтрокаРасчета.НачисленоПроцентов = 0
			И СтрокаРасчета.ПогашениеПроцентов = 0
			И СтрокаРасчета.ПогашениеЗайма = 0
			//И СтрокаРасчета.МатериальнаяВыгода = 0 
			//И СтрокаРасчета.НалогНаМатериальнуюВыгоду = 0 
			Тогда
			УдаляемыеСтроки.Добавить(СтрокаРасчета);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		РасчетЗаймов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Возврат РасчетЗаймов;
	
КонецФункции

// Возвращает структуру параметров для ПроверитьПересечениеФактическогоПериодаДействия.
//
Функция ПараметрыПроверкиПересеченияФактическогоПериодаДействия() Экспорт 
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("Организация");
	ПараметрыПроверки.Вставить("ПериодРегистрации");
	ПараметрыПроверки.Вставить("Документ");
	ПараметрыПроверки.Вставить("Начисления");
	ПараметрыПроверки.Вставить("НачисленияПерерасчет");
	ПараметрыПроверки.Вставить("ИмяКолонки", "Начисление");
	ПараметрыПроверки.Вставить("Начисление");
	ПараметрыПроверки.Вставить("ИсправленныйДокумент");
	ПараметрыПроверки.Вставить("ОсновныеНачисления");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет пересечение фактического периода действия начислений с зачетом нормы времени.
//
// Параметры:
//		Организация - организация из документа.
//		ПериодРегистрации - период регистрации документа.
//		Документ - ссылка на документ.
//		Начисления - табличная часть Начисления.
//		НачисленияПерерасчет - табличная часть НачисленияПерерасчет.
//		ИмяКолонки - имя колонки таблицы, к которой будет привязано сообщение об ошибке.
//      Начисление - для документов, у которых в табличной части Начисления нет вида расчета.
//
Процедура ПроверитьПересечениеФактическогоПериодаДействия(Параметры, Отказ = Ложь) Экспорт 
	
	Организация 			= Параметры.Организация;
	ПериодРегистрации 		= Параметры.ПериодРегистрации;
	Документ 				= Параметры.Документ;
	Начисления 				= Параметры.Начисления;
	НачисленияПерерасчет 	= Параметры.НачисленияПерерасчет;
	ИмяКолонки 				= Параметры.ИмяКолонки;
	Начисление 				= Параметры.Начисление;
	ИсправленныйДокумент 	= Параметры.ИсправленныйДокумент;
	ОсновныеНачисления 		= Параметры.ОсновныеНачисления;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ПериодРегистрации) Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	
	НачатьТранзакцию();
	
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления();
	
	// удаляем текущие движения
	Если ЗначениеЗаполнено(Документ) Тогда
		НачисленияНабор.Отбор.Регистратор.Установить(Документ);
		НачисленияНабор.Записать(); 
	КонецЕсли;
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор.Отбор.Регистратор.Установить(ВременнаяСсылка);
	
	ТаблицаНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		Если Не ЗаполненыИзмеренияРегистраРасчетаВСтроке(СтрокаНачисления, Начисление) Тогда 
			Продолжить;
		КонецЕсли;	
		НоваяСтрока = ТаблицаНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.Начисление = ?(Начисление = Неопределено, СтрокаНачисления.Начисление, Начисление);
	КонецЦикла;
	
	Если ОсновныеНачисления <> Неопределено Тогда 
		
		ДокументИсправлен = Ложь;
		
		Если ИсправленныйДокумент <> Неопределено И ЗначениеЗаполнено(Документ) Тогда 
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Документ.Ссылка КАК Ссылка
			|ИЗ
			|	#Таблица КАК Документ
			|ГДЕ
			|	Документ.ИсправленныйДокумент = &Ссылка
			|	И Документ.Проведен");
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ОбщегоНазначения.ИмяТаблицыПоСсылке(Документ));
			Запрос.УстановитьПараметр("Ссылка", Документ);
			
			РезультатЗапроса = Запрос.Выполнить();
			ДокументИсправлен = Не РезультатЗапроса.Пустой();
			
		КонецЕсли;
		
		Если Не ДокументИсправлен Тогда 
			
			СписокИсправленныхДокументов = Новый Массив; 
			
			Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
				
				СписокИсправленныхДокументов.Добавить(ИсправленныйДокумент);
				
				МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				ИмяДокумента = СтрРазделить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Документ), ".")[1];
				ИсправлениеДокументовЗарплатаКадры.СоздатьВТИсправленныеДокументы(МенеджерВременныхТаблиц, СписокИсправленныхДокументов, ИмяДокумента, "ВТИсправленныеДокументы");
				
				Запрос = Новый Запрос;
				
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				
				Запрос.УстановитьПараметр("ПустаяСсылка", ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ).ПустаяСсылка());
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ИсправленныеДокументы.ИсправленныйДокумент
				|ИЗ
				|	ВТИсправленныеДокументы КАК ИсправленныеДокументы
				|ГДЕ
				|	ИсправленныеДокументы.ИсправленныйДокумент <> &ПустаяСсылка";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл 
					СписокИсправленныхДокументов.Добавить(Выборка.ИсправленныйДокумент);
				КонецЦикла;
				
			КонецЕсли;
			
			МассивНачислений = Новый Массив;
			Для Каждого ОсновноеНачисление Из ОсновныеНачисления Цикл 
				Отбор = Новый Структура("Начисление", ОсновноеНачисление);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНачислений, ТаблицаНачислений.НайтиСтроки(Отбор));
			КонецЦикла;
			
			Движения = Новый Структура("Начисления", НачисленияНабор);
			
			РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, Организация, ПериодРегистрации, МассивНачислений, , Ложь);
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("СписокИсправленныхДокументов", СписокИсправленныхДокументов);
			Запрос.УстановитьПараметр("Начисления", Движения.Начисления);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Начисления.ПериодДействия,
			|	Начисления.Сотрудник,
			|	Начисления.ВидРасчета,
			|	Начисления.ПериодДействияНачало,
			|	Начисления.ПериодДействияКонец,
			|	Начисления.НомерСтроки
			|ПОМЕСТИТЬ ВТДанныеДокумента
			|ИЗ
			|	&Начисления КАК Начисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеРегистра.Регистратор,
			|	ДанныеРегистра.Сотрудник,
			|	ДанныеРегистра.ВидРасчета,
			|	ДанныеДокумента.НомерСтроки
			|ИЗ
			|	ВТДанныеДокумента КАК ДанныеДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ДанныеРегистра
			|		ПО (НЕ ДанныеРегистра.Регистратор В (&СписокИсправленныхДокументов))
			|			И ДанныеДокумента.ПериодДействия = ДанныеРегистра.ПериодДействия
			|			И ДанныеДокумента.Сотрудник = ДанныеРегистра.Сотрудник
			|			И ДанныеДокумента.ВидРасчета = ДанныеРегистра.ВидРасчета
			|			И (НЕ ДанныеДокумента.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
			|			И ДанныеДокумента.ПериодДействияНачало = ДанныеРегистра.ПериодДействияНачало
			|			И ДанныеДокумента.ПериодДействияКонец = ДанныеРегистра.ПериодДействияКонец";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() > 0 Тогда 
				
				ШаблонСообщения = НСтр("ru='Работник %1: начисление %2 на эти даты уже введено документом %3.';uk='Працівник %1: нарахування %2 на ці дати вже введено документом %3.'");
				
				Пока Выборка.Следующий() Цикл 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, Выборка.ВидРасчета, Выборка.Регистратор);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ, "Начисления" + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + "Результат", , Отказ);
				КонецЦикла;
				
				ОтменитьТранзакцию();
				Возврат;
				
			КонецЕсли;
			
			НачисленияНабор.Очистить();
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если НачисленияПерерасчет <> Неопределено Тогда
		Для Каждого СтрокаНачисления Из НачисленияПерерасчет Цикл
			Если Не ЗаполненыИзмеренияРегистраРасчетаВСтроке(СтрокаНачисления) Тогда 
				Продолжить;
			КонецЕсли;	
			НоваяСтрока = ТаблицаНачислений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		КонецЦикла;
	КонецЕсли;	
		
	Движения = Новый Структура("Начисления", НачисленияНабор);
	
	РасчетЗарплатыРасширенный.СформироватьДвиженияНачислений(Движения, Отказ, Организация, ПериодРегистрации, ТаблицаНачислений, , Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Документ", ВременнаяСсылка);
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФПДНачислений.Регистратор КАК Регистратор,
	|	ФПДНачислений.Сотрудник КАК Сотрудник,
	|	ФПДНачислений.ВидРасчета КАК ВидРасчета,
	|	ФПДНачислений.ПериодДействияНачало КАК ДатаНачала,
	|	ФПДНачислений.ПериодДействияКонец КАК ДатаОкончания,
	|	ФПДНачислений.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТФПДНачислений
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			ВидРасчета.ЗачетНормыВремени = ИСТИНА
	|				И Сотрудник В (&МассивСотрудников)
	|				И ПериодРегистрации = &ПериодРегистрации
	|				И Сторно = ЛОЖЬ) КАК ФПДНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДокумента.Сотрудник КАК Сотрудник,
	|	ДвиженияДокумента.ВидРасчета КАК ВидРасчета,
	|	ДвиженияДокумента.ДатаНачала КАК ДатаНачала,
	|	ДвиженияДокумента.ДатаОкончания КАК ДатаОкончания,
	|	ДвиженияДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ВидРасчета КАК ВидРасчетаРегистр,
	|	ДанныеРегистра.ДатаНачала КАК ДатаНачалаРегистр,
	|	ДанныеРегистра.ДатаОкончания КАК ДатаОкончанияРегистр,
	|	ДанныеРегистра.НомерСтроки КАК НомерСтрокиРегистр
	|ИЗ
	|	ВТФПДНачислений КАК ДвиженияДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ДанныеРегистра
	|		ПО ДвиженияДокумента.Сотрудник = ДанныеРегистра.Сотрудник
	|			И (ДвиженияДокумента.Регистратор = &Документ)
	|			И (ДанныеРегистра.Регистратор <> &Документ)
	|			И ДвиженияДокумента.ДатаНачала <= ДанныеРегистра.ДатаОкончания
	|			И ДвиженияДокумента.ДатаОкончания >= ДанныеРегистра.ДатаНачала
	|			И (НЕ ДанныеРегистра.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
	|			И (НЕ ДвиженияДокумента.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеОтработанноеВПределахНормы)))
	|			И (ВЫБОР
	|				КОГДА ДанныеРегистра.ВидРасчета.ЗачетОтработанногоВремени
	|						И ДвиженияДокумента.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ДанныеРегистра.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ДвиженияДокумента.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияРегистратора.Сотрудник КАК Сотрудник,
	|	ДвиженияРегистратора.ВидРасчета КАК ВидРасчета,
	|	ДвиженияРегистратора.ДатаНачала КАК ДатаНачала,
	|	ДвиженияРегистратора.ДатаОкончания КАК ДатаОкончания,
	|	ДвиженияРегистратора.НомерСтроки КАК НомерСтроки,
	|	ДвиженияРегистратораДляПроверки.ВидРасчета КАК ВидРасчетаДляПроверки,
	|	ДвиженияРегистратораДляПроверки.ДатаНачала КАК ДатаНачалаДляПроверки,
	|	ДвиженияРегистратораДляПроверки.ДатаОкончания КАК ДатаОкончанияДляПроверки,
	|	ДвиженияРегистратораДляПроверки.НомерСтроки КАК НомерСтрокиДляПроверки
	|ИЗ
	|	ВТФПДНачислений КАК ДвиженияРегистратора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ДвиженияРегистратораДляПроверки
	|		ПО (ДвиженияРегистратора.Регистратор = &Документ)
	|			И (ДвиженияРегистратораДляПроверки.Регистратор = &Документ)
	|			И ДвиженияРегистратора.Сотрудник = ДвиженияРегистратораДляПроверки.Сотрудник
	|			И ДвиженияРегистратора.НомерСтроки <> ДвиженияРегистратораДляПроверки.НомерСтроки
	|			И ДвиженияРегистратора.ДатаНачала <= ДвиженияРегистратораДляПроверки.ДатаОкончания
	|			И ДвиженияРегистратора.ДатаОкончания >= ДвиженияРегистратораДляПроверки.ДатаНачала
	|			И (ВЫБОР
	|				КОГДА ДвиженияРегистратора.ВидРасчета.ЗачетОтработанногоВремени
	|						И ДвиженияРегистратораДляПроверки.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ДвиженияРегистратора.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ДвиженияРегистратораДляПроверки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НомерСтроки";
				   
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ОтменитьТранзакцию();
	
	ШаблонСообщения = НСтр("ru='Работник %1: период %2 будет оплачен как ""%3"" текущим документом и как ""%4"" документом %5';uk='Працівник %1: період %2 буде оплачений як ""%3"" поточним документом і як ""%4"" документом %5'");
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ДатаНачала = Макс(Выборка.ДатаНачала, Выборка.ДатаНачалаРегистр);
		ДатаОкончания = Мин(Выборка.ДатаОкончания, Выборка.ДатаОкончанияРегистр);
		ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, ПредставлениеПериода, Выборка.ВидРасчета, Выборка.ВидРасчетаРегистр, Выборка.Регистратор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Регистратор, "Начисления" + "[" + Формат(Выборка.НомерСтрокиРегистр - 1, "ЧН=0; ЧГ=0") + "]." + "Результат", , Отказ);
	КонецЦикла;	
	
	ШаблонСообщения = НСтр("ru='Работник %1: период %2 будет оплачен как ""%3"" (строка %4) и как ""%5"" (строка %6)';uk='Працівник %1: період %2 буде оплачений як ""%3"" (рядок %4) і як ""%5"" (рядок %6)'");
	
	НомераСтрок = Новый Соответствие;
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если НомераСтрок[Выборка.НомерСтрокиДляПроверки] = Неопределено Тогда 
			НомераСтрок.Вставить(Выборка.НомерСтроки, Истина);
			
			ДатаНачала = Макс(Выборка.ДатаНачала, Выборка.ДатаНачалаДляПроверки);
			ДатаОкончания = Мин(Выборка.ДатаОкончания, Выборка.ДатаОкончанияДляПроверки);
			ПредставлениеПериода = ЗарплатаКадрыРасширенный.ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, ПредставлениеПериода, Выборка.ВидРасчета, Выборка.НомерСтроки, Выборка.ВидРасчетаДляПроверки, Выборка.НомерСтрокиДляПроверки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ, "Объект.Начисления" + "[" + Формат(Выборка.НомерСтрокиДляПроверки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяКолонки, , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненыИзмеренияРегистраРасчетаВСтроке(СтрокаНачисления, Начисление = Неопределено)
	
	ВидРасчета = ?(Начисление = Неопределено, СтрокаНачисления.Начисление, Начисление);
	
	Если ЗначениеЗаполнено(ВидРасчета) 
		И ЗначениеЗаполнено(СтрокаНачисления.Сотрудник) 
		И ЗначениеЗаполнено(СтрокаНачисления.ДатаНачала) 
		И ЗначениеЗаполнено(СтрокаНачисления.ДатаОкончания) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Процедура удаляет из переданной коллекции строки, 
// фактический период действия которых в результате вытеснения другими записями получился пустым.
//
// Параметры:
//	- ДанныеДляНачисления - коллекция строк начислений.
//	- Регистратор - ссылка на регистратор, по которому записан анализируемый набор записей начислений.
//
Процедура ИсключитьСтрокиПолностьюВытесненныхНачислений(ДанныеДляНачисления, Регистратор)
	
	// Строки, которые целиком пришлись на период ранее введенного отклонения, можно удалить.
	// Для их выявления, запишем набор записей (он должен быть уже записан), 
	// и исключим те записи, фактический период действия которых будет пустым.
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ФПД.НомерСтроки
		|ПОМЕСТИТЬ ВТФПД
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &Регистратор) КАК ФПД
		|ГДЕ
		|	ФПД.Регистратор = &Регистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФПД.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ИдентификаторСтроки
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФПД КАК ФПД
		|		ПО (ФПД.НомерСтроки = Начисления.НомерСтроки)
		|ГДЕ
		|	Начисления.Регистратор = &Регистратор
		|	И ФПД.НомерСтроки ЕСТЬ NULL ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ИдентификаторыУдаляемыхСтрок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ИдентификаторыУдаляемыхСтрок.Вставить(Выборка.ИдентификаторСтроки, Истина);
	КонецЦикла;
	
	Индекс = 0;
	Пока Индекс < ДанныеДляНачисления.Количество() Цикл
		СтрокаДанных = ДанныеДляНачисления[Индекс];
		Если ИдентификаторыУдаляемыхСтрок[СтрокаДанных.ИдентификаторСтрокиВидаРасчета] = Неопределено Тогда
			Индекс = Индекс + 1;
		Иначе
			ДанныеДляНачисления.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняется распределение результата расчета по территориям и условиям труда, в которых сотрудник был задействован в течение месяца.
//
Процедура ЗаполнитьРаспределениеПоТерриториямУсловиямТруда(СтрокиРасчетаПоИдентификатору, СтрокиРаспределенияПоИдентификатору, Организация, Месяц)
		
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ИсходныеДанные.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	
	СтрокиПоИдентификаторуСЗафиксированнымРасчетом = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СтрокиРасчетаПоИдентификатору Цикл
		ИдентификаторСтроки = КлючИЗначение.Ключ;
		СтрокаРасчета = КлючИЗначение.Значение;
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаРасчета.Начисление);
		Если РасчетЗафиксирован(СтрокаРасчета) И ВидРасчетаИнфо.Рассчитывается Тогда
			СтрокиПоИдентификаторуСЗафиксированнымРасчетом.Вставить(ИдентификаторСтроки, СтрокаРасчета);
		Иначе
			// Удаляем текущее распределение.
			СтрокиРаспределенияПоИдентификатору.Удалить(ИдентификаторСтроки);
			// Заполняем данные строки в таблицу для запроса.
			НоваяСтрока = ИсходныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Начисление,
		|	НАЧАЛОПЕРИОДА(ИсходныеДанные.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	ИсходныеДанные.ДатаНачала,
		|	ИсходныеДанные.ДатаОкончания,
		|	ИсходныеДанные.ГрафикРаботы,
		|	ИсходныеДанные.ПериодРегистрацииВремени,
		|	ИсходныеДанные.ВидУчетаВремени,
		|	ИсходныеДанные.ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТСтрокиРасчета
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные";
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписаниеФильтра = УчетРабочегоВремени.ОписаниеФильтраДляСоздатьВТОтработанноеВремяПоТерриториямУсловияхТруда();
	ОписаниеФильтра.ИмяТаблицы = "ВТСтрокиРасчета";
	
	УстановитьПривилегированныйРежим(Истина);
	УчетРабочегоВремени.СоздатьВТОтработанноеВремяПоТерриториямУсловияхТруда(МенеджерВременныхТаблиц, ОписаниеФильтра);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТИдентификаторыСтрокРаспределения
		|ИЗ
		|	ВТСтрокиРасчета КАК СтрокиРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоТерриториямУсловияхТруда КАК ВремяПоТерриториямУсловиямТруда
		|		ПО (ВремяПоТерриториямУсловиямТруда.Сотрудник = СтрокиРасчета.Сотрудник)
		|			И (ВремяПоТерриториямУсловиямТруда.Месяц = СтрокиРасчета.Месяц)
		|			И (ВремяПоТерриториямУсловиямТруда.ДатаНачала = СтрокиРасчета.ДатаНачала)
		|			И (ВремяПоТерриториямУсловиямТруда.ДатаОкончания = СтрокиРасчета.ДатаОкончания)
		|			И (ВремяПоТерриториямУсловиямТруда.ПериодРегистрацииВремени = СтрокиРасчета.ПериодРегистрацииВремени)
		|			И (ВремяПоТерриториямУсловиямТруда.ВидУчетаВремени = СтрокиРасчета.ВидУчетаВремени)
		|			И (ВремяПоТерриториямУсловиямТруда.ГрафикРаботы = СтрокиРасчета.ГрафикРаботы)
		|			И (НЕ(ВремяПоТерриториямУсловиямТруда.Территория = ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
		|					И ВремяПоТерриториямУсловиямТруда.УсловияТруда = ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Территории.Ссылка КАК Территория,
		|	&РайонныйКоэффициент КАК Показатель,
		|	Территории.РайонныйКоэффициент КАК Значение,
		|	1 КАК Порядок
		|ПОМЕСТИТЬ ВТПоказателиТерриторий
		|ИЗ
		|	Справочник.ТерриторииВыполненияРабот КАК Территории
		|ГДЕ
		|	&ИспользуетсяРайонныйКоэффициент
		|	И Территории.Владелец = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УсловияТруда.Ссылка КАК УсловияТруда,
		|	&НадбавкаЗаВредность КАК Показатель,
		|	УсловияТруда.ПроцентНадбавкиЗаВредность КАК Значение,
		|	2 КАК Порядок
		|ПОМЕСТИТЬ ВТПоказателиУсловийТруда
		|ИЗ
		|	Справочник.УсловияТруда КАК УсловияТруда
		|ГДЕ
		|	&ИспользуетсяНадбавкаЗаВредность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СтрокиРасчета.Начисление,
		|	ВремяПоТерриториямУсловиямТруда.Территория,
		|	ВремяПоТерриториямУсловиямТруда.УсловияТруда,
		|	ВремяПоТерриториямУсловиямТруда.Дней,
		|	ВремяПоТерриториямУсловиямТруда.Часов
		|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
		|ИЗ
		|	ВТСтрокиРасчета КАК СтрокиРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоТерриториямУсловияхТруда КАК ВремяПоТерриториямУсловиямТруда
		|		ПО (ВремяПоТерриториямУсловиямТруда.Сотрудник = СтрокиРасчета.Сотрудник)
		|			И (ВремяПоТерриториямУсловиямТруда.Месяц = СтрокиРасчета.Месяц)
		|			И (ВремяПоТерриториямУсловиямТруда.ДатаНачала = СтрокиРасчета.ДатаНачала)
		|			И (ВремяПоТерриториямУсловиямТруда.ДатаОкончания = СтрокиРасчета.ДатаОкончания)
		|			И (ВремяПоТерриториямУсловиямТруда.ПериодРегистрацииВремени = СтрокиРасчета.ПериодРегистрацииВремени)
		|			И (ВремяПоТерриториямУсловиямТруда.ВидУчетаВремени = СтрокиРасчета.ВидУчетаВремени)
		|			И (ВремяПоТерриториямУсловиямТруда.ГрафикРаботы = СтрокиРасчета.ГрафикРаботы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИдентификаторыСтрокРаспределения КАК ИдентификаторыСтрок
		|		ПО (ИдентификаторыСтрок.ИдентификаторСтроки = СтрокиРасчета.ИдентификаторСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распределение.ИдентификаторСтроки,
		|	СУММА(Распределение.Часов) КАК Часов
		|ПОМЕСТИТЬ ВТРаспределениеПоДням
		|ИЗ
		|	ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
		|
		|СГРУППИРОВАТЬ ПО
		|	Распределение.ИдентификаторСтроки
		|
		|ИМЕЮЩИЕ
		|	СУММА(Распределение.Часов) = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распределение.ИдентификаторСтроки,
		|	Распределение.Территория,
		|	Распределение.УсловияТруда,
		|	ЕСТЬNULL(ПоказателиТерриторий.Порядок, ПоказателиУсловийТруда.Порядок) КАК Порядок,
		|	ЕСТЬNULL(ПоказателиТерриторий.Показатель, ПоказателиУсловийТруда.Показатель) КАК Показатель,
		|	ЕСТЬNULL(ПоказателиТерриторий.Значение, ПоказателиУсловийТруда.Значение) КАК Значение
		|ИЗ
		|	ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.Ссылка = Распределение.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиТерриторий КАК ПоказателиТерриторий
		|		ПО (ПоказателиТерриторий.Территория = Распределение.Территория)
		|			И (ПоказателиНачислений.Показатель = ПоказателиТерриторий.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиУсловийТруда КАК ПоказателиУсловийТруда
		|		ПО (ПоказателиУсловийТруда.УсловияТруда = Распределение.УсловияТруда)
		|			И (ПоказателиНачислений.Показатель = ПоказателиУсловийТруда.Показатель)
		|ГДЕ
		|	(ПоказателиТерриторий.Показатель ЕСТЬ НЕ NULL 
		|			ИЛИ ПоказателиУсловийТруда.Показатель ЕСТЬ НЕ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распределение.ИдентификаторСтроки,
		|	Распределение.Территория,
		|	Распределение.УсловияТруда,
		|	Порядок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распределение.ИдентификаторСтроки,
		|	Распределение.Начисление,
		|	Распределение.Территория,
		|	Распределение.УсловияТруда,
		|	Распределение.Дней,
		|	Распределение.Часов,
		|	ВЫБОР
		|		КОГДА РаспределениеПоДням.ИдентификаторСтроки ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РаспределятьПоДням
		|ИЗ
		|	ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоДням КАК РаспределениеПоДням
		|		ПО (РаспределениеПоДням.ИдентификаторСтроки = Распределение.ИдентификаторСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распределение.ИдентификаторСтроки,
		|	Распределение.Территория,
		|	Распределение.УсловияТруда";
		
	ПоказательРайонныйКоэффициент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
	ПоказательНадбавкаЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
	
	Запрос.УстановитьПараметр("ИспользуетсяРайонныйКоэффициент", ЗначениеЗаполнено(ПоказательРайонныйКоэффициент));
	Запрос.УстановитьПараметр("РайонныйКоэффициент", ПоказательРайонныйКоэффициент);
	Запрос.УстановитьПараметр("ИспользуетсяНадбавкаЗаВредность", ЗначениеЗаполнено(ПоказательНадбавкаЗаВредность));
	Запрос.УстановитьПараметр("НадбавкаЗаВредность", ПоказательНадбавкаЗаВредность);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	ВыборкаПоказателей = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		СтрокаРасчета = СтрокиРасчетаПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокиРаспределения = Новый Массив;
		// Используем часы в качестве долей распределения.
		// В некоторых исключительных случаях, время может быть выражено только в днях, без указания часов.
		// В таких (и только таких) случаях используем дни для распределения.
		Пока Выборка.Следующий() Цикл
			ОписаниеСтроки = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
			ЗаполнитьЗначенияСвойств(ОписаниеСтроки, Выборка);
			ОписаниеСтроки.ДоляРаспределения = Выборка.Часов;
			Если Выборка.РаспределятьПоДням Тогда
				ОписаниеСтроки.ДоляРаспределения = Выборка.Дней;
			КонецЕсли;
			// Заполняем показатели в строке.
			СтруктураПоиска = Новый Структура("ИдентификаторСтроки, Территория, УсловияТруда");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			НомерПоказателя = 1;
			Пока ВыборкаПоказателей.НайтиСледующий(СтруктураПоиска) Цикл
				ОписаниеСтроки["Показатель" + НомерПоказателя] = ВыборкаПоказателей.Показатель;
				ОписаниеСтроки["Значение" + НомерПоказателя] = ВыборкаПоказателей.Значение;
				НомерПоказателя = НомерПоказателя + 1;
			КонецЦикла;
			СтрокиРаспределения.Добавить(ОписаниеСтроки);
		КонецЦикла;
		СтрокиРаспределенияПоИдентификатору.Вставить(Выборка.ИдентификаторСтроки, СтрокиРаспределения);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СтрокиПоИдентификаторуСЗафиксированнымРасчетом Цикл
		ИдентификаторСтроки = КлючИЗначение.Ключ;
		СтрокаРасчета = КлючИЗначение.Значение;
		РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределенияПоИдентификатору[ИдентификаторСтроки]);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Аванс

// Функция возвращает таблицу значений с информацией о плановых авансах сотрудников.
//
// Параметры:
//	ТаблицаСотрудников - таблица значений с колонками.
//		- Сотрудник; 
//		- Период
//	ДокументСсылка - если указать, то зарегистрированные этим документом авансы будут игнорироваться;
//	ВсеЗаписи - булево значение. 
//		Если Истина, то в результирующей временной таблице
//		будет столько же записей, сколько во входной временной таблице сотрудников.
//		Если Ложь, то в результирующей временной таблице 
//		будут записи только для тех сотрудников, для которых задан плановый аванс.
//		По умолчанию - Ложь
//
// Возвращаемое значение - таблица значений с колонками.
//		- Сотрудник
//		- СпособРасчетаАванса
//		- Аванс
//
Функция АвансыСотрудников(ТаблицаСотрудников, ДокументСсылка = Неопределено, ВсеЗаписи  = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = ВсеЗаписи;
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	Если ДокументСсылка <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	КонецЕсли;	

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников),
		ПараметрыПостроения);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеАвансыСрезПоследних.Сотрудник,
	|	ПлановыеАвансыСрезПоследних.СпособРасчетаАванса КАК СпособРасчетаАванса,
	|	ПлановыеАвансыСрезПоследних.Аванс КАК Аванс
	|ИЗ
	|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансыСрезПоследних";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

// Возвращает структуру с параметрами для метода СоздатьВТАвансыСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВТСотрудники - имя временной таблицы сотрудников.
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВТСотрудники
//
Функция ОписательВременныхТаблицДляСоздатьВТАвансыСотрудников(МенеджерВременныхТаблиц, ИмяВТСотрудники) Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТСотрудники", ИмяВТСотрудники);
	
	Возврат ОписательВременныхТаблиц
	
КонецФункции

// Процедура создает временную таблицу с информацией о плановых авансах сотрудников.
// В результате выполнения в менеджере временных таблиц создается временная таблица 
// ВТАвансыСотрудников с колонками:
//		- Сотрудник
//		- СпособРасчетаАванса
//		- Аванс
//
// Параметры:
//	ОписательВременныхТаблиц - структура, см. ОписательВременныхТаблицДляСоздатьВТАвансыСотрудников; 
//	ТолькоРазрешенные - булево признак выбора только разрешенных сотрудников;
//	ДатаАктуальности - дата, на которую определяется состояние авансов;
//	Отбор - коллекция условий отбора, соединяемых по "И" и применяемых к регистру сведений.
//		Коллекция, строки которой имеют поля.
//			ЛевоеЗначение - строка, имя поля регистра сведений.
//			ВидСравнения - строка, вид сравнения, допустимый в языке запросов.
//			ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//		По умолчанию отбор не задан.
//
//	ВсеЗаписи - булево значение. 
//		Если Истина, то в результирующей временной таблице
//		будет столько же записей, сколько во входной временной таблице сотрудников.
//		Если Ложь, то в результирующей временной таблице 
//		будут записи только для тех сотрудников, для которых задан плановый аванс.
//		По умолчанию - Ложь
//
Процедура СоздатьВТАвансыСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, ДатаАктуальности, Отбор = Неопределено, ВсеЗаписи  = Ложь) Экспорт
	
	ИмяВТСотрудникиИПериод = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиИПериод");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	&ДатаАктуальности КАК Период
	|ПОМЕСТИТЬ #ВТСотрудникиИПериод
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиИПериод",ИмяВТСотрудникиИПериод);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники",		ОписательВременныхТаблиц.ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.Отборы = Отбор;
	ПараметрыПостроения.ВсеЗаписи = ВсеЗаписи;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		ОписательВременныхТаблиц.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			ИмяВТСотрудникиИПериод,
			"Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеАвансыСрезПоследних.Сотрудник,
	|	ПлановыеАвансыСрезПоследних.СпособРасчетаАванса КАК СпособРасчетаАванса,
	|	ПлановыеАвансыСрезПоследних.Аванс КАК Аванс
	|ПОМЕСТИТЬ ВТАвансыСотрудников
	|ИЗ
	|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудникиИПериод";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиИПериод",ИмяВТСотрудникиИПериод);
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Индексация

Процедура СформироватьДвиженияБазовыеПериодыИндексации(РегистраторОбъект, Движения, ДанныеДляПроведения) Экспорт
	
	Если ДанныеДляПроведения = Неопределено
		ИЛИ ДанныеДляПроведения.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движения.БазовыеПериодыИндексации.Записывать = Истина;
	
	Движения.БазовыеПериодыИндексации.Загрузить(ДанныеДляПроведения);
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистраторОбъект)) Тогда
		Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
			И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
			
			Движения.ПлановыеНачисления.БазовыеПериодыИндексации.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
	Если Движения.БазовыеПериодыИндексации.Записывать Тогда
		Движения.БазовыеПериодыИндексации.Записать();
		Движения.БазовыеПериодыИндексации.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Пересчет тарифных ставок

// Заполняет набор записей регистра порядка пересчета тарифных ставок сотрудников.
//
Процедура СформироватьДвиженияПорядкаПересчетаТарифныхСтавок(Движения, ПорядокПересчетаТарифнойСтавки) Экспорт 

	Если Не ЗначениеЗаполнено(ПорядокПересчетаТарифнойСтавки) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ПорядокПересчетаТарифнойСтавки.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Отбор.Регистратор.Значение;
	
	// Дополняем таблицу полем ПорядокРасчетаПоОкончании.
	КлючевыеИзмерения = "ДатаСобытия,Сотрудник";
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = ПорядокПересчетаТарифнойСтавки.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из ПорядокПересчетаТарифнойСтавки Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		НоваяСтрока.Период = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
	КонецЦикла;
	
	ИзмеренияДаты.Свернуть("Сотрудник, Период");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ПорядокРасчетаСтоимостиЕдиницыВремени.Период, ДЕНЬ) КАК ДатаСобытия,
	|	ПорядокРасчетаСтоимостиЕдиницыВремени.ФизическоеЛицо,
	|	ПорядокРасчетаСтоимостиЕдиницыВремени.Сотрудник,
	|	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета КАК ТекущееЗначение
	|ИЗ
	|	ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних КАК ПорядокРасчетаСтоимостиЕдиницыВремени";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ПорядокПересчетаТарифнойСтавки.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда"));
	СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строка = ПорядокПересчетаТарифнойСтавки.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение");
	КонецЦикла;
		
	Для Каждого Строка Из ПорядокПересчетаТарифнойСтавки Цикл
		
		Если Не ИспользуютсяВозвратныеСобытия Или Не ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
			Если Строка.ПорядокРасчета = Строка.ТекущееЗначение Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.ФизическоеЛицо = Строка.ФизическоеЛицо;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.ПорядокРасчета = Строка.ПорядокРасчета;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.ПорядокРасчетаПоОкончании = Строка.ТекущееЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(МенеджерВременныхТаблиц) Экспорт 
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"));
	
КонецПроцедуры

// Заполняет набор записей регистра значений совокупных тарифных ставок сотрудников.
//
Процедура СформироватьДвиженияЗначенийСовокупныхТарифныхСтавок(Движения, ДанныеСовокупныхТарифныхСтавок) Экспорт 

	Если Не ЗначениеЗаполнено(ДанныеСовокупныхТарифныхСтавок) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВозвратныеСобытия = ДанныеСовокупныхТарифныхСтавок.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	Регистратор = Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников.Отбор.Регистратор.Значение;
	
	ВремяРегистрацииДокумента = Неопределено;
	Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = ДанныеСовокупныхТарифныхСтавок.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из ДанныеСовокупныхТарифныхСтавок Цикл 
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = СтрокаДвижений.Сотрудник;
		НоваяСтрока.Период = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
	КонецЦикла;
	
	ИзмеренияДаты.Свернуть("Сотрудник, Период");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВторичнаяЗапись", "=", Ложь);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияСовокупныхТарифныхСтавокСотрудников",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСовокупныхТарифныхСтавок.Период КАК Период,
	|	ЗначенияСовокупныхТарифныхСтавок.Сотрудник,
	|	ЗначенияСовокупныхТарифныхСтавок.Значение КАК ФактическоеЗначениеСтавки
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТЗначенияСовокупныхТарифныхСтавокСотрудниковСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавок";
				   
	Запрос.Выполнить();

	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"),
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"),
		ПараметрыПостроенияФОТ);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"),
		ПараметрыПостроения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Период КАК Период,
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление,
	|	ВЫБОР
	|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
	|			ТОГДА ПлановыеНачисления.Размер
	|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
	|	КОНЕЦ КАК РазмерФОТ,
	|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ГрафикРаботы,
	|	0 КАК КоличествоСтавок,
	|	ПлановыеНачисления.НомерСтроки
	|ПОМЕСТИТЬ ВТТаблицаСотрудниковТекущиеДанные
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
	|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
	|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
	|ГДЕ
	|	ПлановыеНачисления.Используется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудниковТекущиеДанные.Период,
	|	ТаблицаСотрудниковТекущиеДанные.Сотрудник,
	|	ТаблицаСотрудниковТекущиеДанные.Начисление,
	|	НачисленияПоказатели.Показатель
	|ПОМЕСТИТЬ ВТПоказателиНачислений
	|ИЗ
	|	ВТТаблицаСотрудниковТекущиеДанные КАК ТаблицаСотрудниковТекущиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО ТаблицаСотрудниковТекущиеДанные.Начисление = НачисленияПоказатели.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиНачислений.Период,
	|	ПоказателиНачислений.Сотрудник,
	|	ПоказателиНачислений.Показатель,
	|	ЗначенияПоказателейРасчетаЗарплаты.Значение
	|ПОМЕСТИТЬ ВТПоказателиСотрудниковТекущиеДанные
	|ИЗ
	|	ВТПоказателиНачислений КАК ПоказателиНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателейРасчетаЗарплаты
	|		ПО ПоказателиНачислений.Период = ЗначенияПоказателейРасчетаЗарплаты.Период
	|			И ПоказателиНачислений.Сотрудник = ЗначенияПоказателейРасчетаЗарплаты.Сотрудник
	|			И ПоказателиНачислений.Показатель = ЗначенияПоказателейРасчетаЗарплаты.Показатель";
				   
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТПлановыеНачисленияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйФОТСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПоказателиНачислений";
	
	Запрос.Выполнить();
	
	ИзмеренияДаты = ДанныеСовокупныхТарифныхСтавок.Скопировать(, "ДействуетДо,Сотрудник");
	ИзмеренияДаты.Свернуть("ДействуетДо,Сотрудник");
	
	Запрос.УстановитьПараметр("ИзмеренияДаты", ИзмеренияДаты);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИзмеренияДаты.ДействуетДо КАК Период,
	               |	ИзмеренияДаты.Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиДаты
	               |ИЗ
	               |	&ИзмеренияДаты КАК ИзмеренияДаты";

	Запрос.Выполнить();
				   
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиДаты",
			"Сотрудник"));
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиДаты",
			"Сотрудник"));
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиДаты",
			"Сотрудник"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Период КАК Период,
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.Начисление,
	|	ВЫБОР
	|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
	|			ТОГДА ПлановыеНачисления.Размер
	|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
	|	КОНЕЦ КАК РазмерФОТ,
	|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка) КАК ГрафикРаботы,
	|	0 КАК КоличествоСтавок,
	|	ПлановыеНачисления.НомерСтроки
	|ПОМЕСТИТЬ ВТТаблицаСотрудниковПредварительно
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
	|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
	|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
	|ГДЕ
	|	ПлановыеНачисления.Используется
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСотрудниковТекущиеДанные.Период,
	|	ТаблицаСотрудниковТекущиеДанные.Сотрудник,
	|	ТаблицаСотрудниковТекущиеДанные.Начисление,
	|	ТаблицаСотрудниковТекущиеДанные.РазмерФОТ,
	|	ТаблицаСотрудниковТекущиеДанные.ГрафикРаботы,
	|	ТаблицаСотрудниковТекущиеДанные.КоличествоСтавок,
	|	ТаблицаСотрудниковТекущиеДанные.НомерСтроки
	|ИЗ
	|	ВТТаблицаСотрудниковТекущиеДанные КАК ТаблицаСотрудниковТекущиеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСотрудниковПредварительно.Период,
	|	ТаблицаСотрудниковПредварительно.Сотрудник,
	|	ТаблицаСотрудниковПредварительно.Начисление,
	|	НачисленияПоказатели.Показатель
	|ПОМЕСТИТЬ ВТПоказателиНачислений
	|ИЗ
	|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	|		ПО ТаблицаСотрудниковПредварительно.Начисление = НачисленияПоказатели.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиНачислений.Период,
	|	ПоказателиНачислений.Сотрудник,
	|	ПоказателиНачислений.Показатель,
	|	ЗначенияПоказателейРасчетаЗарплаты.Значение
	|ПОМЕСТИТЬ ВТПоказателиСотрудников
	|ИЗ
	|	ВТПоказателиНачислений КАК ПоказателиНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателейРасчетаЗарплаты
	|		ПО ПоказателиНачислений.Период = ЗначенияПоказателейРасчетаЗарплаты.Период
	|			И ПоказателиНачислений.Сотрудник = ЗначенияПоказателейРасчетаЗарплаты.Сотрудник
	|			И ПоказателиНачислений.Показатель = ЗначенияПоказателейРасчетаЗарплаты.Показатель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПоказателиСотрудниковТекущиеДанные.Период,
	|	ПоказателиСотрудниковТекущиеДанные.Сотрудник,
	|	ПоказателиСотрудниковТекущиеДанные.Показатель,
	|	ПоказателиСотрудниковТекущиеДанные.Значение
	|ИЗ
	|	ВТПоказателиСотрудниковТекущиеДанные КАК ПоказателиСотрудниковТекущиеДанные";
	
	Запрос.Выполнить();

	Запрос.Текст = "УНИЧТОЖИТЬ ВТПоказателиНачислений";
				   
	Запрос.Выполнить();
	
	ЗарплатаКадрыРасширенный.СоздатьВТЗначенияСовокупныхТарифныхСтавок(МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиПериоды.Период КАК Период,
	               |	СотрудникиПериоды.Сотрудник КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка, 0) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ СотрудникиПериоды.ФактическоеЗначениеСтавки / ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка
	               |	КОНЕЦ КАК Коэффициент
	               |ПОМЕСТИТЬ ВТКоэффициентыПересчета
	               |ИЗ
	               |	ВТСотрудникиПериоды КАК СотрудникиПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавок КАК ЗначенияСовокупныхТарифныхСтавок
	               |		ПО СотрудникиПериоды.Период = ЗначенияСовокупныхТарифныхСтавок.Период
	               |			И СотрудникиПериоды.Сотрудник = ЗначенияСовокупныхТарифныхСтавок.Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СотрудникиДаты.Период КАК ДействуетДо,
	               |	СотрудникиДаты.Сотрудник КАК Сотрудник,
	               |	СотрудникиДаты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки КАК ТекущийВидТарифнойСтавки,
	               |	ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка * ЕСТЬNULL(КоэффициентыПересчета.Коэффициент, 1) КАК ТекущееЗначение
	               |ИЗ
	               |	ВТСотрудникиДаты КАК СотрудникиДаты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавок КАК ЗначенияСовокупныхТарифныхСтавок
	               |		ПО СотрудникиДаты.Период = ЗначенияСовокупныхТарифныхСтавок.Период
	               |			И СотрудникиДаты.Сотрудник = ЗначенияСовокупныхТарифныхСтавок.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчета КАК КоэффициентыПересчета
	               |		ПО СотрудникиДаты.Сотрудник = КоэффициентыПересчета.Сотрудник";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеСовокупныхТарифныхСтавок.Колонки.Добавить("ТекущееЗначение", Новый ОписаниеТипов("Число"));
	ДанныеСовокупныхТарифныхСтавок.Колонки.Добавить("ТекущийВидТарифнойСтавки", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыТарифныхСтавок"));
	
	СтруктураПоиска = Новый Структура("ДействуетДо,Сотрудник");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		МассивСтрок = ДанныеСовокупныхТарифныхСтавок.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда 
			ЗаполнитьЗначенияСвойств(МассивСтрок[0], Выборка, "ТекущееЗначение, ТекущийВидТарифнойСтавки");
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Строка Из ДанныеСовокупныхТарифныхСтавок Цикл
		
		Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников.Добавить();
		НоваяСтрока.Период = Строка.ДатаСобытия;
		НоваяСтрока.ФизическоеЛицо = Строка.ФизическоеЛицо;
		НоваяСтрока.Сотрудник = Строка.Сотрудник;
		НоваяСтрока.Значение = Строка.Значение;
		НоваяСтрока.ВидТарифнойСтавки = Строка.ВидТарифнойСтавки;
		
		Если ИспользуютсяВозвратныеСобытия Тогда
			Если ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				НоваяСтрока.ЗначениеПоОкончании = Строка.ТекущееЗначение;
				НоваяСтрока.ВидТарифнойСтавкиПоОкончании = Строка.ТекущийВидТарифнойСтавки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Расчет вторичных записей совокупных ставок.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗарплатаКадрыРасширенный.СоздатьВТРегистраторыСовокупныхТарифныхСтавок(Регистратор, МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыРасширенный.УдалитьВторичныеЗаписиСовокупныхТарифныхСтавокПредыдущихРегистраторов(Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников);
	
	Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников.Записать();
	Движения.ЗначенияСовокупныхТарифныхСтавокСотрудников.Записывать = Ложь;
	
	ЗарплатаКадрыРасширенный.ПерезаполнитьВторичныеЗаписиЗначенийСовокупныхТарифныхСтавок(Регистратор);
	ЗарплатаКадрыРасширенный.ДополнитьВторичныеЗаписиРегистраторовСовокупныхТарифныхСтавокРегистраторов(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура СоздатьВТЗначенияСовокупныхТарифныхСтавокСотрудников(МенеджерВременныхТаблиц) Экспорт 

	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияСовокупныхТарифныхСтавокСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регистрация движений по регистрам расчета.

// Конструирует объект для хранения данных для проведения.
// Структура может содержать
//		НачисленияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//
//		УдержанияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Удержание
//			Сумма
//
//		ИсчисленныйНДФЛ - таблица значений.
//
//		ИсчисленныеВзносы - таблица значений.
//
//		МенеджерВременныхТаблиц - менеджер временных таблиц на котором могут 
//		удерживаться таблицы
//			ВТНачисления (данные о начисленных суммах).
//				Сотрудник
//				ПериодДействия
//				ДатаНачала
//				Начисление
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				СуммаВычетаВзносы
//				КодВычетаНДФЛ
//				Подразделение
//			ВТФизическиеЛица (список людей по которым выполняется расчет)
//				ФизическоеЛицо.
//
Функция СоздатьДанныеДляПроведенияНачисленияЗарплаты() Экспорт
	
	ПоляСтруктуры = 
		"МенеджерВременныхТаблиц, 
		|Начисления, 
		|НачисленияПоСотрудникам, 
		|ПоказателиНачислений,
		|ОтработанноеВремяПоСотрудникам,
		|Удержания, 
		|УдержанияПоСотрудникам, 
		|ПоказателиУдержаний,
		|УдержанияПоИсполнительнымДокументам, 
		|ПоказателиУдержаний, 
		|НДФЛ, 
		|НДФЛПоСотрудникам, 
		|ИсчисленныйНДФЛ, 
		|ИсчисленныеВзносы,
		|СтраховыеВзносы,
		|Пособия,
		|ПособияПоУходу";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УчетСреднегоЗаработка.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);	
	ЗаймыСотрудникам.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	СостоянияСотрудников.ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

// Заполняет данные для проведения начислениями и 
// временной таблицей ВТНачисления.
//	
// Параметры:	
// 		ДанныеДляПроведения
//		Документ
//		ТаблицаНачислений - имя (имена через запятую) табличной части с начислениями, не обязательно, по умолчанию -
//		                    "Начисления".
//		ПолеДатыДействия - поле запроса для получения даты действия, по умолчанию дата действия - месяц 
// 				начисления первичного документа, т.е. "Ссылка.МесяцНачисления".
//		ПолеВидаНачисление - строка с именами (через запятую) полей, содержащих вид расчета в каждой из таблиц, по
//		                     умолчанию - Начисление.
//		ПолеВидаНачисленияВШапке - строка с именем поля шапки документа, содержащего вид расчета.
//
Процедура ЗаполнитьНачисления(ДанныеДляПроведения, Документ, ТаблицаНачислений = "Начисления", ПолеДатыДействия = "Ссылка.МесяцНачисления", ПолеВидаНачисления = "Начисление", СписокФизическихЛиц = Неопределено) Экспорт
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");

	// Поля, которые есть не во всех табличных частях, проверяем, и если нет, заменяем на NULL.
	НеобязательныеПоля = Новый Соответствие;
	НеобязательныеПоля.Вставить("СуммаВычета", "0");
	НеобязательныеПоля.Вставить("Сторно", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ФиксСторно", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("СторнируемыйДокумент", "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)");
	НеобязательныеПоля.Вставить("ДатаНачала", ПолеДатыДействия);
	НеобязательныеПоля.Вставить("ДатаОкончания", "КОНЕЦПЕРИОДА(" + ПолеДатыДействия + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ПериодДействия", "НАЧАЛОПЕРИОДА(" + ПолеДатыДействия + ", МЕСЯЦ)");
	НеобязательныеПоля.Вставить("ГрафикРаботы", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ГрафикРаботыНорма", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ВидУчетаВремени", "НЕОПРЕДЕЛЕНО");
	НеобязательныеПоля.Вставить("ВремяВЧасах", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ОтработаноДней", "0");
	НеобязательныеПоля.Вставить("ОтработаноЧасов", "0");
	НеобязательныеПоля.Вставить("ОплаченоДней", "0");
	НеобязательныеПоля.Вставить("ОплаченоЧасов", "0");
	НеобязательныеПоля.Вставить("ПериодРегистрацииВремени", "ДАТАВРЕМЯ(1, 1, 1)");
	НеобязательныеПоля.Вставить("РасчетнаяБазаЗаЕдиницуНормыВремени", "0");
	НеобязательныеПоля.Вставить("ФиксСтрока", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ФиксРасчетВремени", "ЛОЖЬ");
	НеобязательныеПоля.Вставить("ДокументОснование", "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)");
	
	// Составляем текст запроса создания временной таблицы ВТЗаписиНачислений.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		// Составляем текст объединения - части запроса.
		ТекстОбъединения = 
			"ВЫБРАТЬ
			|	Начисления.Ссылка КАК ДокументСсылка,
			|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Подразделение,
			|	Начисления.ПериодДействия КАК ПериодДействия,
			|	Начисления.ДатаНачала КАК ДатаНачала,
			|	Начисления.ДатаОкончания КАК ДатаОкончания,
			|	Начисления.ДатаДействия КАК ДатаДействия,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.ДокументОснование КАК ДокументОснование,
			|	Начисления.Результат КАК Сумма,
			|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
			|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
			|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
			|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
			|	Начисления.ОтработаноДней КАК ОтработаноДней,
			|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
			|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
			|	Начисления.Сторно КАК Сторно,
			|	Начисления.ФиксСторно КАК ФиксСторно,
			|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
			|	Начисления.ФиксРасчет КАК ФиксРасчет,
			|	Начисления.ФиксСтрока КАК ФиксСтрока,
			|	Начисления.ФиксЗаполнение КАК ФиксЗаполнение,
			|	Начисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
			|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
			|	Начисления.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки,
			|	Начисления.ОплаченоДней КАК ОплаченоДней,
			|	Начисления.ОплаченоЧасов КАК ОплаченоЧасов,
			|	Начисления.СуммаВычета КАК СуммаВычета,
			|	ВЫБОР
			|		КОГДА Начисления.Начисление.ВидОтпуска.ОтпускЯвляетсяЕжегодным
			|			ТОГДА Начисления.Начисление.ВидОтпуска
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
			|	КОНЕЦ КАК ВидЕжегодногоОтпуска,
			|	Начисления.Начисление.ГруппаУчета КАК ГруппаУчетаНачислений, 
			|	Начисления.Начисление.ИспользованиеПериода КАК ИспользованиеПериода
			|ПОМЕСТИТЬ ВТЗаписиНачислений
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка";
		
		Если СписокФизическихЛиц <> Неопределено Тогда
			ТекстОбъединения = ТекстОбъединения + "
				|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
		КонецЕсли; 
		
		Если Не ПерваяТаблица Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ПОМЕСТИТЬ ВТЗаписиНачислений", "");
		КонецЕсли;
		
		// Проверяем необязательные поля.
		МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений];
		Для Каждого КлючИЗначение Из НеобязательныеПоля Цикл
			ИмяПоля = КлючИЗначение.Ключ;
			ЗначениеПоУмолчанию = КлючИЗначение.Значение;
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поле присутствует в метаданных табличной части - не делаем замен.
				Продолжить;
			КонецЕсли;
			Если ИмяПоля <> "ДокументОснование" И МетаданныеДокумента.Реквизиты.Найти(ИмяПоля) <> Неопределено Тогда
				// Поля нет в табличной части, но оно  присутствует в метаданных документа - заменяем на обращение "через .".
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления." + ИмяПоля + " КАК", "Начисления.Ссылка." + ИмяПоля + " КАК");
			Иначе
				ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисления." + ИмяПоля + " КАК", ЗначениеПоУмолчанию + " КАК");
			КонецЕсли;
		КонецЦикла;
		
		// Выполняем замену параметризуемых имен полей.
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "ДатаДействия КАК ДатаДействия", ПолеДатыДействия + " КАК ДатаДействия");
		
		// Подменяем поле начисления и всего, что с ним связано, лишь в случае, если в анализируемой таблице нет поля "по
		// умолчанию".
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("Начисление") = Неопределено Тогда
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление КАК Начисление", ПолеВидаНачисления + " КАК Начисление");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ВидОтпуска", ПолеВидаНачисления + ".ВидОтпуска");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ИспользованиеПериода", ПолеВидаНачисления + ".ИспользованиеПериода");
			ТекстОбъединения = СтрЗаменить(ТекстОбъединения, "Начисление.ГруппаУчета", ПолеВидаНачисления + ".ГруппаУчета");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстОбъединения;
		ПерваяТаблица = Ложь;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	СкорректироватьПериодВТНачислений(ДанныеДляПроведения.МенеджерВременныхТаблиц, "ВТЗаписиНачислений");
	
	// Если используются источники финансирования дополняем результатом распределения начислений.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		// Дополнить данными о распределении начислений по источникам финансирования.
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
			|	РаспределениеНачислений.СтатьяФинансирования,
			|	РаспределениеНачислений.СтатьяРасходов,
			|	РаспределениеНачислений.СпособОтраженияЗарплатыВБухучете,
			|	РаспределениеНачислений.ОблагаетсяЕНВД,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисленияСРаспределением
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #РаспределениеРезультатовНачислений КАК РаспределениеНачислений
			|		ПО ЗаписиНачислений.ИдентификаторСтроки = РаспределениеНачислений.ИдентификаторСтроки
			|			И ЗаписиНачислений.ДокументСсылка = РаспределениеНачислений.Ссылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеРезультатовНачислений", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовНачислений");
		
	Иначе
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", Организация)) Тогда
			
			// Извлекаем данные из табличной части с распределением.
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Распределение.ИдентификаторСтроки,
				|	Распределение.Территория,
				|	СУММА(Распределение.Результат) КАК Результат
				|ПОМЕСТИТЬ ВТРаспределениеПоТерриториям
				|ИЗ
				|	#ТаблицаРаспределения КАК Распределение
				|ГДЕ
				|	Распределение.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	Распределение.ИдентификаторСтроки,
				|	Распределение.Территория";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеПоТерриториямУсловиямТруда");
			Запрос.Выполнить();
			
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
				|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
				|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
				|	ЛОЖЬ КАК ОблагаетсяЕНВД,
				|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК Сумма,
				|	ЗаписиНачислений.Сторно
				|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
				|	ВЫБОР
				|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
				|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
				|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
				|			ТОГДА РаспределениеНачислений.Территория
				|		ИНАЧЕ ЗаписиНачислений.Подразделение
				|	КОНЕЦ КАК ТерриторияВыполненияРаботВОрганизации,
				|	ЗаписиНачислений.*
				|ПОМЕСТИТЬ ВТНачисленияСРаспределением
				|ИЗ
				|	ВТЗаписиНачислений КАК ЗаписиНачислений
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториям КАК РаспределениеНачислений
				|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)";
				
		Иначе
			
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
				|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
				|	ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка) КАК СпособОтраженияЗарплатыВБухучете,
				|	ЛОЖЬ КАК ОблагаетсяЕНВД,
				|	ЗаписиНачислений.Сумма КАК Сумма,
				|	ЗаписиНачислений.Сторно
				|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
				|	ЗаписиНачислений.*
				|ПОМЕСТИТЬ ВТНачисленияСРаспределением
				|ИЗ
				|	ВТЗаписиНачислений КАК ЗаписиНачислений";
				
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Готовим ВТНачисления
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаписиНачислений.Сотрудник,
			|	ЗаписиНачислений.ПериодДействия,
			|	ЗаписиНачислений.ДатаНачала,
			|	ЗаписиНачислений.ДатаОкончания,
			|	ЗаписиНачислений.Начисление,
			|	ЗаписиНачислений.ДокументОснование,
			|	ЗаписиНачислений.Сумма КАК СуммаДохода,
			|	ЗаписиНачислений.Подразделение,
			|	ЗаписиНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
			|	ЗаписиНачислений.Подразделение КАК ПодразделениеОрганизации,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.СторнируемыйДокумент
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений";
		Запрос.Выполнить();
		
	Иначе
		
		// Извлекаем данные из табличной части с распределением.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Распределение.ИдентификаторСтроки,
			|	Распределение.Территория,
			|	Распределение.УсловияТруда,
			|	Распределение.Результат
			|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
			|ИЗ
			|	#ТаблицаРаспределения КАК Распределение
			|ГДЕ
			|	Распределение.Ссылка = &Ссылка";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаРаспределения", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеПоТерриториямУсловиямТруда");
		Запрос.Выполнить();
		
		// Формируем ВТНачисления.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(РаспределениеНачислений.ИдентификаторСтроки, ЗаписиНачислений.ИдентификаторСтроки) КАК ИдентификаторСтроки,
			|	ВЫБОР
			|		КОГДА РаспределениеНачислений.Территория ЕСТЬ НЕ NULL 
			|				И РаспределениеНачислений.Территория <> НЕОПРЕДЕЛЕНО
			|				И РаспределениеНачислений.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА РаспределениеНачислений.Территория
			|		ИНАЧЕ ЗаписиНачислений.Подразделение
			|	КОНЕЦ КАК Подразделение,
			|	ЕСТЬNULL(РаспределениеНачислений.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)) КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЕСТЬNULL(РаспределениеНачислений.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
			|	ЕСТЬNULL(РаспределениеНачислений.Результат, ЗаписиНачислений.Сумма) КАК СуммаДохода,
			|	ЗаписиНачислений.Подразделение КАК ПодразделениеОрганизации,
			|	ЗаписиНачислений.Сторно
			|		ИЛИ ЗаписиНачислений.ФиксСторно КАК Сторно,
			|	ЗаписиНачислений.*
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	ВТЗаписиНачислений КАК ЗаписиНачислений
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК РаспределениеНачислений
			|		ПО (РаспределениеНачислений.ИдентификаторСтроки = ЗаписиНачислений.ИдентификаторСтроки)";
		Запрос.Выполнить();
		
	КонецЕсли;
	
	// Формируем таблицы для регистрации: 
	
	// 1. Начисления
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТЗаписиНачислений КАК ЗаписиНачислений";
	ДанныеДляПроведения.Начисления = Запрос.Выполнить().Выгрузить();
	
	// 2. Начисления с учетом возможного распределения по источникам финансирования.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТНачисленияСРаспределением КАК ЗаписиНачислений";
	ДанныеДляПроведения.НачисленияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
	// 3. Отработанное время
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТЗаписиНачислений КАК ЗаписиНачислений
		|ГДЕ
		|	НЕ(ЗаписиНачислений.ОтработаноДней = 0
		|				И ЗаписиНачислений.ОтработаноЧасов = 0
		|				И ЗаписиНачислений.ОплаченоДней = 0
		|				И ЗаписиНачислений.ОплаченоЧасов = 0)";
	ДанныеДляПроведения.ОтработанноеВремяПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
	// 4. Показатели
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.Значение,
		|	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
		|ИЗ
		|	#ТаблицаПоказателей КАК ТаблицаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиНачислений КАК Начисления
		|		ПО (Начисления.ИдентификаторСтроки = ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета)
		|ГДЕ
		|	ТаблицаПоказателей.Ссылка = &Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателей", МетаданныеДокумента.ПолноеИмя() + ".Показатели");
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеДляПроведения.ПоказателиНачислений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения удержаниями.
//	
// Параметры:	
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаУдержаний - имя табличной части с удержаниями, не обязательно, по умолчанию - "Удержания".
//
Процедура ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаУдержаний = "Удержания", СписокФизическихЛиц = Неопределено) Экспорт
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Удержания.Ссылка КАК ДокументСсылка,
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Удержание,
	|	Удержания.Удержание.КатегорияУдержания КАК КатегорияУдержания,
	|	Удержания.Результат КАК Сумма,
	|	Удержания.ДокументОснование,
	|	Удержания.Получатель,
	|	Удержания.ПлатежныйАгент,
	|	ВЫБОР
	|		КОГДА Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|			ТОГДА Удержания.Получатель
	|		КОГДА Удержания.Удержание.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
	|			ТОГДА Удержания.ПлатежныйАгент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	НАЧАЛОПЕРИОДА(Удержания.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	Удержания.ДатаНачала,
	|	Удержания.ДатаОкончания,
	|	Удержания.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТЗаписиУдержаний
	|ИЗ
	|	#ТаблицаУдержаний КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка = &Ссылка";
	
	Если СписокФизическихЛиц <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И Удержания.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаУдержаний", МетаданныеДокумента.ПолноеИмя() + "." + ТаблицаУдержаний);
	
	Если МетаданныеДокумента.ТабличныеЧасти[ТаблицаУдержаний].Реквизиты.Найти("Сотрудник") <> Неопределено Тогда
		ЕстьРеквизитСотрудник = Истина;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Удержания.ФизическоеЛицо,", "Удержания.ФизическоеЛицо,
			|	Удержания.Сотрудник,");
	Иначе
		ЕстьРеквизитСотрудник = Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении удержаний по источникам финансирования.
		
		ОтражениеЗарплатыВУчетеРасширенный.СоздатьВТУдержанияПоСотрудникамКонтрагент(Запрос.МенеджерВременныхТаблиц, "ВТЗаписиУдержаний");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.Результат КАК Сумма,
		|	ЕСТЬNULL(УдержанияПоСотрудникамКонтрагент.Контрагент, ЗаписиУдержаний.Контрагент) КАК Контрагент,
		|	ЗаписиУдержаний.*
		|ПОМЕСТИТЬ ВТУдержанияСРаспределением
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК ЗаписиУдержаний
		|		ПО (ЗаписиУдержаний.ДокументСсылка = РаспределениеУдержаний.Ссылка)
		|			И (ЗаписиУдержаний.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)
		|			И (ЗаписиУдержаний.Сотрудник = РаспределениеУдержаний.Сотрудник)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияПоСотрудникамКонтрагент КАК УдержанияПоСотрудникамКонтрагент
		|		ПО ЗаписиУдержаний.ДокументОснование = УдержанияПоСотрудникамКонтрагент.ДокументОснование
		|			И ЗаписиУдержаний.ФизическоеЛицо = УдержанияПоСотрудникамКонтрагент.ФизическоеЛицо
		|			И ЗаписиУдержаний.Удержание = УдержанияПоСотрудникамКонтрагент.Удержание
		|			И (ЗаписиУдержаний.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТУдержанияПоСотрудникамКонтрагент";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеРезультатовУдержаний", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
		
		Если Не ЕстьРеквизитСотрудник Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ЗаписиУдержаний.Сотрудник = РаспределениеУдержаний.Сотрудник)", "");
		КонецЕсли; 
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗаписиУдержаний.Сумма КАК Сумма,
		|	ЗаписиУдержаний.*
		|ПОМЕСТИТЬ ВТУдержанияСРаспределением
		|ИЗ
		|	ВТЗаписиУдержаний КАК ЗаписиУдержаний";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. Удержания
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТЗаписиУдержаний";
	ДанныеДляПроведенияНачисленияЗарплаты.Удержания = Запрос.Выполнить().Выгрузить();
	
	// 2. Удержания с возможным распределением по источникам финансирования.
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТУдержанияСРаспределением";
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
	// 3. Удержания по исполнительным документам.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	ЗаписиУдержаний.ДокументОснование КАК ИсполнительныйДокумент,
		|	ЗаписиУдержаний.Получатель,
		|	ЗаписиУдержаний.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ) КАК МесяцУдержания,
		|	СУММА(ВЫБОР
		|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
		|				ТОГДА РаспределениеУдержаний.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаУдержания,
		|	СУММА(ВЫБОР
		|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
		|				ТОГДА РаспределениеУдержаний.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВознагражденияПлатежногоАгента
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК ЗаписиУдержаний
		|		ПО (ЗаписиУдержаний.ДокументСсылка = РаспределениеУдержаний.Ссылка)
		|			И (ЗаписиУдержаний.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)";
		
		Если ЕстьРеквизитСотрудник Тогда
			Запрос.Текст = Запрос.Текст + "
				|			И (ЗаписиУдержаний.Сотрудник = РаспределениеУдержаний.Сотрудник)";
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
		|		ПО (Удержания.Ссылка = ЗаписиУдержаний.Удержание)
		|			И (Удержания.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)))
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	ЗаписиУдержаний.ДокументОснование,
		|	ЗаписиУдержаний.Получатель,
		|	ЗаписиУдержаний.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ)
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ВЫБОР
		|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
		|					ТОГДА РаспределениеУдержаний.Результат
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> 0
		|		ИЛИ СУММА(ВЫБОР
		|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
		|					ТОГДА РаспределениеУдержаний.Результат
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> 0)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовУдержаний", МетаданныеДокумента.ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗаписиУдержаний.ДокументОснование КАК ИсполнительныйДокумент,
		|	ЗаписиУдержаний.Получатель,
		|	ЗаписиУдержаний.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ) КАК МесяцУдержания,
		|	СУММА(ВЫБОР
		|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
		|				ТОГДА ЗаписиУдержаний.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаУдержания,
		|	СУММА(ВЫБОР
		|			КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
		|				ТОГДА ЗаписиУдержаний.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВознагражденияПлатежногоАгента
		|ИЗ
		|	ВТЗаписиУдержаний КАК ЗаписиУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
		|		ПО (Удержания.Ссылка = ЗаписиУдержаний.Удержание)
		|			И (Удержания.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаписиУдержаний.ДокументОснование,
		|	ЗаписиУдержаний.Получатель,
		|	ЗаписиУдержаний.ПлатежныйАгент,
		|	НАЧАЛОПЕРИОДА(ЗаписиУдержаний.ДатаНачала, МЕСЯЦ)
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ВЫБОР
		|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
		|					ТОГДА ЗаписиУдержаний.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> 0
		|		ИЛИ СУММА(ВЫБОР
		|				КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
		|					ТОГДА ЗаписиУдержаний.Сумма
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> 0)";
	КонецЕсли;
	
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоИсполнительнымДокументам = Запрос.Выполнить().Выгрузить();
	
	// 4. Показатели
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПоказателей.Показатель,
	|	ТаблицаПоказателей.Значение,
	|	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтроки
	|ИЗ
	|	#ТаблицаПоказателей КАК ТаблицаПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиУдержаний КАК Удержания
	|		ПО (Удержания.ИдентификаторСтроки = ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета)
	|ГДЕ
	|	ТаблицаПоказателей.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаПоказателей", МетаданныеДокумента.ПолноеИмя() + ".Показатели");
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеДляПроведенияНачисленияЗарплаты.ПоказателиУдержаний = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения данными НДФЛ.
//	
// Параметры:	
// 		ДанныеДляПроведения - структура с данными для проведения см. СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//		ДокументСсылка - ссылка на расчетный документ.
//
Процедура ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица = Неопределено) Экспорт
	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем данные из документа.
	УчетНДФЛ.СоздатьВТДанныеНДФЛПоДокументу(МенеджерВременныхТаблиц, ДокументСсылка, , ФизическиеЛица);
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		// Дополнить данными о распределении по источникам финансирования.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ИдентификаторСтроки,
		|	СУММА(ВЫБОР
		|			КОГДА РаспределениеУдержаний.ВидУдержания = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|				ТОГДА РаспределениеУдержаний.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НалогПоСтавке13,
		|	СУММА(ВЫБОР
		|			КОГДА РаспределениеУдержаний.ВидУдержания В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету))
		|				ТОГДА РаспределениеУдержаний.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НалогПоСтавке13КЗачетуВозврату
		|ПОМЕСТИТЬ ВТРаспределениеУдержаний
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспределениеУдержаний.Ссылка,
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение КАК ПодразделениеСотрудника,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов,
		|	РаспределениеУдержаний.НалогПоСтавке13,
		|	0 КАК ЗачтеноАвансовыхПлатежейПоСтавке13,
		|	РаспределениеУдержаний.НалогПоСтавке13КЗачетуВозврату,
		|	НДФЛ.Подразделение,
		|	НДФЛ.*
		|ПОМЕСТИТЬ ВТНДФЛПоСотрудникам
		|ИЗ
		|	ВТРаспределениеУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеНДФЛ КАК НДФЛ
		|		ПО (НДФЛ.Ссылка = РаспределениеУдержаний.Ссылка)
		|			И (НДФЛ.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#РаспределениеРезультатовУдержаний", ДокументСсылка.Метаданные().ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеСотрудника,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	НДФЛ.Подразделение,
		|	НДФЛ.*
		|ПОМЕСТИТЬ ВТНДФЛПоСотрудникам
		|ИЗ
		|	ВТДанныеНДФЛ КАК НДФЛ";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Формируем таблицы для регистрации: 
	
	// 1. НДФЛ
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТДанныеНДФЛ";
	ДанныеДляПроведения.НДФЛ = Запрос.Выполнить().Выгрузить();
	
	// 2. НДФЛ с возможным распределением по источникам финансирования.
	Запрос.Текст = 
	"ВЫБРАТЬ * ИЗ ВТНДФЛПоСотрудникам";
	ДанныеДляПроведения.НДФЛПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения страховыми взносами.
//	
// Параметры:	
// 		ДанныеДляПроведения - структура с данными для проведения см. СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//		ДокументСсылка - ссылка на расчетный документ.
//
Процедура ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	РасчетЗарплатыБазовый.ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции-конструкторы используемых коллекций.


Функция ПустаяТаблицаСотрудниковНачислений() Экспорт
	
	СотрудникиНачисления = Новый ТаблицаЗначений;
	СотрудникиНачисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиНачисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	СотрудникиНачисления.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	СотрудникиНачисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	СотрудникиНачисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат СотрудникиНачисления;
	
КонецФункции

Функция ОписаниеТиповЧисло()

	ОписаниеТиповЧисло = Новый Структура;
	ОписаниеТиповЧисло.Вставить("ТипЧисло15_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло7_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло15_3", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло7_0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло10_0", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло12_2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 2)));
	ОписаниеТиповЧисло.Вставить("ТипЧисло16_6", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 6)));
	
	Возврат ОписаниеТиповЧисло;

КонецФункции

// Конструирует таблицу начислений, аналогичную по структуре таблице расчетного документа.
//
// Параметры:
//	ИспользоватьДляПерерасчета - необязательный, по умолчанию Ложь, 
//		если Истина, будут добавлены колонки, используемые в таблицах НачисленияПерерасчет.
//
Функция ПустаяТаблицаНачисления(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Начисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Начисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Начисления.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	Начисления.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ГрафикРаботыНорма", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников,СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	Начисления.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"));
	Начисления.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("НачалоБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ОкончаниеБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Строка", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксРасчетВремени", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ПериодРегистрацииВремени", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Сумма", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("РезультатВТомЧислеЗаСчетФБ", ОписаниеТиповЧисло.ТипЧисло15_2);
	Начисления.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	Начисления.Колонки.Добавить("ОтработаноДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОтработаноЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("НормаДнейПоГрафикуПолногоРабочегоВремени", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("НормаДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("НормаЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОплаченоДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("ОплаченоЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Начисления.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	Начисления.Колонки.Добавить("РаспределениеПоТерриториямУсловиямТруда", Новый ОписаниеТипов());
	Начисления.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	Начисления.Колонки.Добавить("ДоступенВыборОснования", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));
	Начисления.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	Начисления.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));

	Если ИспользоватьДляПерерасчета Тогда
		Начисления.Колонки.Добавить("СторнируемыйДокумент", ИсправлениеДокументовРасчетЗарплаты.ОписаниеТиповСторнируемогоДокумента());
	КонецЕсли;
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Начисления.Колонки.Добавить("Показатель" + Счетчик);
		Начисления.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		Начисления.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;

	Возврат Начисления;
	
КонецФункции

Функция ПустаяТаблицаНачисленияПоДоговорам() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	НачисленияПоДоговорам = Новый ТаблицаЗначений;
	НачисленияПоДоговорам.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияПоДоговорам.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияПоДоговорам.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	НачисленияПоДоговорам.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	НачисленияПоДоговорам.Колонки.Добавить("КатегорияЕСВ", Новый ОписаниеТипов("СправочникСсылка.КатегорииЗастрахованныхЛицЕСВ"));
	НачисленияПоДоговорам.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов("ДокументСсылка.АктПриемкиВыполненныхРаботОказанныхУслуг,ДокументСсылка.ДоговорАвторскогоЗаказа, ДокументСсылка.ДоговорРаботыУслуги"));
	НачисленияПоДоговорам.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	НачисленияПоДоговорам.Колонки.Добавить("Сумма", ОписаниеТиповЧисло.ТипЧисло15_2);
	НачисленияПоДоговорам.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	НачисленияПоДоговорам.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	НачисленияПоДоговорам.Колонки.Добавить("ПланируемаяДатаВыплаты", Новый ОписаниеТипов("Дата"));
	НачисленияПоДоговорам.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	НачисленияПоДоговорам.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	
	Возврат НачисленияПоДоговорам;
	
КонецФункции

Функция ПустаяТаблицаПособия(ИспользоватьДляПерерасчета = Ложь) Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	Пособия = Новый ТаблицаЗначений;
	Пособия.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Пособия.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Пособия.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Пособия.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Пособия.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	Пособия.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Пособия.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксРасчетВремени", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	Пособия.Колонки.Добавить("Сумма", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	Пособия.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	Пособия.Колонки.Добавить("ОплаченоДней", ОписаниеТиповЧисло.ТипЧисло7_2);
	Пособия.Колонки.Добавить("ОплаченоЧасов", ОписаниеТиповЧисло.ТипЧисло7_2);
	Пособия.Колонки.Добавить("РезультатВТомЧислеЗаСчетФБ", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаВсегоПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаСверхНормПоУходуЗаПервымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаВсегоПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	Пособия.Колонки.Добавить("СуммаСверхНормПоУходуЗаВторымРебенком", ОписаниеТиповЧисло.ТипЧисло15_2);
	
	Пособия.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	Пособия.Колонки.Добавить("ЛьготаПоПособию", Новый ОписаниеТипов("ПеречислениеСсылка.ОснованияЛьготПоПособию"));
	Пособия.Колонки.Добавить("СтраховойСлучай", Новый ОписаниеТипов("ДокументСсылка.ОтпускПоУходуЗаРебенком"));
	Пособия.Колонки.Добавить("КоличествоДетей", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Пособия.Колонки.Добавить("КоличествоПервыхДетей", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Пособия.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	Пособия.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));
	
	Если ИспользоватьДляПерерасчета Тогда
		Пособия.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
		Пособия.Колонки.Добавить("ФиксСторно", Новый ОписаниеТипов("Булево"));
		Пособия.Колонки.Добавить("СторнируемыйДокумент", ИсправлениеДокументовРасчетЗарплаты.ОписаниеТиповСторнируемогоДокумента());
	КонецЕсли;

	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		Пособия.Колонки.Добавить("Показатель" + Счетчик);
		Пособия.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		Пособия.Колонки.Добавить("КомандаРасшифровки" + Счетчик);
	КонецЦикла;

	Возврат Пособия;
	
КонецФункции

Функция ПустаяТаблицаПрочиеНачисления() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ПрочиеНачисления = Новый ТаблицаЗначений;
	ПрочиеНачисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПрочиеНачисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПрочиеНачисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ПрочиеНачисления.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	ПрочиеНачисления.Колонки.Добавить("СуммаДохода", ОписаниеТиповЧисло.ТипЧисло15_2);
	
	Возврат ПрочиеНачисления;
	
КонецФункции

Функция ПустаяТаблицаУдержанияДокумента() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	УдержанияЗаПериод = Новый ТаблицаЗначений;
	УдержанияЗаПериод.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УдержанияЗаПериод.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	УдержанияЗаПериод.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	УдержанияЗаПериод.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	УдержанияЗаПериод.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	УдержанияЗаПериод.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);
	УдержанияЗаПериод.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	
	Для Счетчик = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете("Удержания") Цикл
		УдержанияЗаПериод.Колонки.Добавить("Показатель" + Счетчик, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		УдержанияЗаПериод.Колонки.Добавить("Значение" + Счетчик, Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
		УдержанияЗаПериод.Колонки.Добавить("КомандаРасшифровки" + Счетчик, Новый ОписаниеТипов("Строка"));
		УдержанияЗаПериод.Колонки.Добавить("ПредставлениеПоказателя" + Счетчик, Новый ОписаниеТипов("Строка"));
		УдержанияЗаПериод.Колонки.Добавить("ТочностьПоказателя" + Счетчик, Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	ДополнитьКолонкамиУдержанийПоИсполнительнымДокументам(УдержанияЗаПериод);
	
	УдержанияЗаПериод.Колонки.Добавить("Результат", ОписаниеТиповЧисло.ТипЧисло15_2);
	УдержанияЗаПериод.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ФиксЗаполнение", Новый ОписаниеТипов("Булево"));
	УдержанияЗаПериод.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", ОписаниеТиповЧисло.ТипЧисло7_0);
	// Добавляем поле Месяц для того, чтобы строки из разных месяцев не склеивались.
	УдержанияЗаПериод.Колонки.Добавить("Месяц");
	
	Возврат УдержанияЗаПериод;
	
КонецФункции

Функция ПустаяТаблицаНДФЛДокумента()
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ТаблицаНДФЛ = Новый ТаблицаЗначений;
	ТаблицаНДФЛ.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаНДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторииВыполненияРаботВОрганизации.Тип));
	ТаблицаНДФЛ.Колонки.Добавить("МесяцНалоговогоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаНДФЛ.Колонки.Добавить("Налог", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаНДФЛ.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	ТаблицаНДФЛ.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	ТаблицаНДФЛ.Колонки.Добавить("ИдентификаторСтрокиНДФЛ", ОписаниеТиповЧисло.ТипЧисло7_0);
	ТаблицаНДФЛ.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	ТаблицаНДФЛ.Колонки.Добавить("Доход", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаНДФЛ.Колонки.Добавить("ВидСтавки", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСтавокНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("УвеличеннаяСтавка", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСтавокНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("Льгота", Новый ОписаниеТипов("СправочникСсылка.ВидыЛьготПоНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("КоличествоЛьгот", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаНДФЛ.Колонки.Добавить("СуммаЛьготы", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаНДФЛ.Колонки.Добавить("КодДохода", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	ТаблицаНДФЛ.Колонки.Добавить("ДоходПолный", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаНДФЛ.Колонки.Добавить("НалоговыйПериод", Новый ОписаниеТипов("Дата"));
	Возврат ТаблицаНДФЛ;
	
КонецФункции

Функция ПустаяТаблицаВзносыДокумента() 
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ПоляВзносов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УчетСтраховыхВзносов.РассчитываемыеВзносы());
	
	ТаблицаВзносы = Новый ТаблицаЗначений;
	ТаблицаВзносы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносы.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	ТаблицаВзносы.Колонки.Добавить("ВидЕСВ", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЕСВ"));
	ТаблицаВзносы.Колонки.Добавить("КатегорияЕСВ", Новый ОписаниеТипов("СправочникСсылка.КатегорииЗастрахованныхЛицЕСВ"));
	ТаблицаВзносы.Колонки.Добавить("Налог", Новый ОписаниеТипов("СправочникСсылка.Налоги"));
	ТаблицаВзносы.Колонки.Добавить("СтатьяНалоговойДекларации", Новый ОписаниеТипов("СправочникСсылка.СтатьиНалоговыхДеклараций"));
	ТаблицаВзносы.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаВзносы.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для каждого ИмяПоля Из ПоляВзносов Цикл
		Если  ТаблицаВзносы.Колонки.Найти(ИмяПоля) = Неопределено Тогда
			ТаблицаВзносы.Колонки.Добавить(ИмяПоля, ОписаниеТиповЧисло.ТипЧисло16_6);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТаблицаВзносы;
	
КонецФункции

Функция ПустаяТаблицаПогашениеЗаймов()
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ТаблицаПогашениеЗаймов = Новый ТаблицаЗначений;
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ДоговорЗайма", Новый ОписаниеТипов("ДокументСсылка.ДоговорЗаймаСотруднику"));
	ТаблицаПогашениеЗаймов.Колонки.Добавить("МатериальнаяВыгода", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("НалогНаМатериальнуюВыгоду", ОписаниеТиповЧисло.ТипЧисло10_0);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("НачисленоПроцентов", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ПогашениеЗайма", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ПогашениеПроцентов", ОписаниеТиповЧисло.ТипЧисло15_2);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("ИдентификаторСтроки", ОписаниеТиповЧисло.ТипЧисло7_0);
	ТаблицаПогашениеЗаймов.Колонки.Добавить("РезультатРаспределения", Новый ОписаниеТипов());
	
	Возврат ТаблицаПогашениеЗаймов;
	
КонецФункции

Функция ПустаяТаблицаЗначенийПоказателей() Экспорт
	
	ОписаниеТиповЧисло = ОписаниеТиповЧисло();
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	ЗначенияПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ЗначенияПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ЗначенияПоказателей.Колонки.Добавить("Значение", Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
	ЗначенияПоказателей.Колонки.Добавить("КомандаРасшифровки", Новый ОписаниеТипов("Строка"));

	Возврат ЗначенияПоказателей;
	
КонецФункции

Функция ПустаяТаблицаПлановыхНачислений() Экспорт 
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	
	ТаблицаНачислений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
	ТаблицаНачислений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));

	Возврат ТаблицаНачислений;
	
КонецФункции	

Функция ПустаяТаблицаРегистрацииПлановыхНачислений(ИспользуютсяВозвратныеСобытия = Истина) Экспорт 
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	
	ТаблицаНачислений.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаНачислений.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаНачислений.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		ТаблицаНачислений.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
		ТаблицаНачислений.Колонки.Добавить("ИспользуетсяПоОкончании", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	Возврат ТаблицаНачислений;
	
КонецФункции	

Функция ПустаяТаблицаРегистрацииЗначенийПериодическихПоказателей(ИспользуютсяВозвратныеСобытия = Истина) Экспорт 
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	
	ЗначенияПоказателей.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ЗначенияПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ЗначенияПоказателей.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ЗначенияПоказателей.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ЗначенияПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ЗначенияПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисленияУдержания.Тип);
	ЗначенияПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		ЗначенияПоказателей.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	КонецЕсли;

	Возврат ЗначенияПоказателей;
	
КонецФункции

Функция ПустаяТаблицаРасшифровкиРасчетнойБазы()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("БазовоеНачисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КатегорияБазовогоНачисления", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	
	Возврат Таблица;
	
КонецФункции

Функция ПустаяТаблицаИсходныеДанныеДляПолученияЗначенийПоказателейТипаЧислоЗависящихОтСтажа() Экспорт
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ВидСтажа", Новый ОписаниеТипов("СправочникСсылка.ВидыСтажа"));
	ИсходныеДанные.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ПустаяТаблицаИсходныеДанныеДляПолученияЗначенийПоказателяПроцентСевернойНадбавки() Экспорт
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ПустаяТаблицаРаспределениеПоТерриториямУсловиямТруда() Экспорт
	
	ТипЗначенияПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты();
	
	Распределение = Новый ТаблицаЗначений;
	Распределение.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	Распределение.Колонки.Добавить("Территория", Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
	Распределение.Колонки.Добавить("УсловияТруда", Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
	Распределение.Колонки.Добавить("ДоляРаспределения", ТипЗначенияПоказателя);
	Распределение.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	КоличествоПоказателей = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
	Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
		Распределение.Колонки.Добавить("Показатель" + НомерПоказателя, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		Распределение.Колонки.Добавить("Значение" + НомерПоказателя, Новый ОписаниеТипов(ТипЗначенияПоказателя));
	КонецЦикла;
	
	Возврат Распределение;
	
КонецФункции

Функция ОписаниеДанныхДляЗаполненияТаблицДокумента() Экспорт
	
	ДанныеЗаполнения = Новый Структура(
	"Начисления, 
	|НачисленияПерерасчет,
	|НачисленияПоДоговорам, 
	|Пособия, 
	|ПособияПерерасчет,
	|Удержания, 
	|НДФЛ, 
	|ПримененныеВычетыНаДетейИИмущественные, 
	|ПогашениеЗаймов, 
	|Взносы,
	|ВзносыФОТ,
	|Льготы");
	
	// По умолчанию это перечислимые коллекции.
	ДанныеЗаполнения.Начисления = Новый Массив;
	ДанныеЗаполнения.НачисленияПерерасчет = Новый Массив;
	ДанныеЗаполнения.НачисленияПоДоговорам = Новый Массив;
	ДанныеЗаполнения.Пособия = Новый Массив;
	ДанныеЗаполнения.ПособияПерерасчет = Новый Массив;
	ДанныеЗаполнения.Удержания = Новый Массив;
	ДанныеЗаполнения.НДФЛ = Новый Массив;
	ДанныеЗаполнения.ПримененныеВычетыНаДетейИИмущественные = Новый Массив;
	ДанныеЗаполнения.ПогашениеЗаймов = Новый Массив;
	ДанныеЗаполнения.Взносы = Новый Массив;
	ДанныеЗаполнения.ВзносыФОТ = Новый Массив;
	ДанныеЗаполнения.Льготы = Новый Массив;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Создает таблицу для регистрации движений по регистру ПрименениеПлановыхНачислений.
//
Функция ПустаяТаблицаРегистрацииПримененияПлановыхНачислений() Экспорт
	
	ТаблицаРегистрации = Новый ТаблицаЗначений;
	ТаблицаРегистрации.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаРегистрации.Колонки.Добавить("Применение", Новый ОписаниеТипов("Булево"));
	ТаблицаРегистрации.Колонки.Добавить("ДействуетДо", Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("ПрименениеПоОкончании", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаРегистрации;
	
КонецФункции

Функция ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ() Экспорт 
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	
	ТаблицаНачислений.Индексы.Добавить("Начисление, ДокументОснование");
	
	Возврат ТаблицаНачислений;
	
КонецФункции

Функция ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ() Экспорт 
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаПоказателей;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции служебного программного интерфейса.

// Предназначена для получения настроек системы в части расчета зарплаты.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиРасчетаЗарплаты() Экспорт
	
	НастройкиРасчетаЗарплатыРасширенный = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	НастройкиРасчетаЗарплатыРасширенный.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиРасчетаЗарплатыРасширенный, Метаданные.РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный);
	
	Если НастройкиРасчетаЗарплатыРасширенный.Выбран() Тогда
		Возврат СтруктураНастроек;
	КонецЕсли;
	
	// Если настройки не заполнены, устанавливаем значения по умолчанию.
	ЗначенияПоУмолчанию = НастройкиРасчетаЗарплатыПоУмолчанию();
	
	Для Каждого КлючИЗначение Из ЗначенияПоУмолчанию Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Заполняет настройки расчета зарплаты, определяемые по состоянию плана видов расчета.
//
Процедура ЗаполнитьНастройкиРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыЗаДниБолезни) КАК ВыбиратьВидНачисленияДоплатыЗаДниБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска) КАК ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска) КАК ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезни) КАК ВыбиратьВидНачисленияОплатыДнейБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыПраздничныхИВыходных) КАК ВыбиратьВидНачисленияОплатыПраздничныхИВыходных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыСверхурочных) КАК ВыбиратьВидНачисленияОплатыСверхурочных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОсновногоОтпуска) КАК ВыбиратьВидНачисленияОсновногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДополнительногоОтпуска) КАК ВыбиратьВидНачисленияДополнительногоОтпуска,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияВознагражденияПлатежногоАгента) КАК ВыбиратьВидУдержанияВознагражденияПлатежногоАгента,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям) КАК ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияДСВ) КАК ВыбиратьВидУдержанияДСВ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияДобровольныхВзносовВНПФ) КАК ВыбиратьВидУдержанияДобровольныхВзносовВНПФ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияИсполнительногоЛиста) КАК ВыбиратьВидУдержанияИсполнительногоЛиста,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидУдержанияПрофсоюзныхВзносов) КАК ВыбиратьВидУдержанияПрофсоюзныхВзносов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуДоСреднегоЗаработка) КАК ИспользоватьДоплатуДоСреднегоЗаработка,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаДниБолезни) КАК ИспользоватьДоплатуЗаДниБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДСВ) КАК ИспользоватьДСВ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДобровольныеВзносыВНПФ) КАК ИспользоватьДобровольныеВзносыВНПФ,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьИсполнительныеЛисты) КАК ИспользоватьИсполнительныеЛисты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных) КАК ИспользоватьОплатуПраздничныхИВыходных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных) КАК ИспользоватьОплатуСверхурочных,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПоСреднемуЗаработку) КАК ИспользоватьОплатуПоСреднемуЗаработку,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка) КАК ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыКомандировки) КАК ВыбиратьВидНачисленияОплатыКомандировки,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыПростоя) КАК ВыбиратьВидНачисленияОплатыПростоя,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПрочихНевыходов) КАК ВыбиратьВидНачисленияПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОтпускБезОплаты) КАК ВыбиратьВидНачисленияОтпускБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОтгул) КАК ВыбиратьВидНачисленияОтгул,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуКомандировок) КАК ИспользоватьОплатуКомандировок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхКомандировок) КАК ИспользоватьОплатуВнутрисменныхКомандировок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев) КАК ИспользоватьОплатуПростоев,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуВнутрисменныхПростоев) КАК ИспользоватьОплатуВнутрисменныхПростоев,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты) КАК ИспользоватьОтпускаБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтпускаБезОплаты) КАК ИспользоватьВнутрисменныеОтпускаБезОплаты,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтгулы) КАК ИспользоватьОтгулы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьВнутрисменныеОтгулы) КАК ИспользоватьВнутрисменныеОтгулы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов) КАК ИспользоватьУчетПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетВнутрисменныхПрочихНевыходов) КАК ИспользоватьУчетВнутрисменныхПрочихНевыходов,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.НачислятьРазовуюПремиюОтдельнымДокументом) КАК НачислятьРазовуюПремиюОтдельнымДокументом,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.НачислятьРазовыеНачисленияОтдельнымДокументом) КАК НачислятьРазовыеНачисленияОтдельнымДокументом,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет) КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет) КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияВыходногоПособия) КАК ВыбиратьВидНачисленияВыходногоПособия,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя) КАК ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве) КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания) КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами) КАК ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам) КАК ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНеоплачиваемогоВремениБолезни) КАК ВыбиратьВидНеоплачиваемогоВремениБолезни,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам) КАК ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям) КАК ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьПрофсоюзныеВзносы) КАК ИспользоватьПрофсоюзныеВзносы,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьПрочиеУдержанияВПользуТретьихЛиц) КАК ИспользоватьПрочиеУдержанияВПользуТретьихЛиц,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьСовмещениеПрофессийДолжностей) КАК ИспользоватьСовмещениеПрофессийДолжностей,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияДоплатыЗаСовмещение) КАК ВыбиратьВидНачисленияДоплатыЗаСовмещение,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьСдельныйЗаработок) КАК ИспользоватьСдельныйЗаработок,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску) КАК ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощь) КАК ИспользоватьМатериальнуюПомощь,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьМатериальнуюПомощьПриОтпуске) КАК ИспользоватьМатериальнуюПомощьПриОтпуске,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах) КАК ИспользоватьУчетВремениСотрудниковВЧасах,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаУчебные) КАК ИспользоватьОтпускаУчебные,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС) КАК ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоходыВНатуральнойФорме) КАК ИспользоватьДоходыВНатуральнойФорме,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную) КАК ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску) КАК ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ВыбиратьВидНачисленияМесячногоДенежногоСодержания) КАК ВыбиратьВидНачисленияМесячногоДенежногоСодержания,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьНадбавкуЗаВредность) КАК ИспользоватьНадбавкуЗаВредность,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьНесколькоПлановыхНачислений) КАК ИспользоватьНесколькоПлановыхНачислений,
	|	МАКСИМУМ(НастройкиРасчетаЗарплаты.ИспользоватьДоплатуЗаВремяКомандировки) КАК ИспользоватьДоплатуЗаВремяКомандировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособие)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияВыходногоПособия,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыДоСреднегоЗаработка,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыЗаДниБолезни,
	|		NULL КАК ВыбиратьВидНачисленияКомпенсацииОсновногоОтпуска,
	|		NULL КАК ВыбиратьВидНачисленияКомпенсацииДополнительногоОтпуска,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезни,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Праздники
	|									И &Праздники <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыПраздничныхИВыходных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Сверхурочные
	|									И &Сверхурочные <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыСверхурочных,
	|		NULL КАК ВыбиратьВидНачисленияОсновногоОтпуска,
	|		NULL КАК ВыбиратьВидНачисленияДополнительногоОтпуска,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниЗаСчетРаботодателя,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеНесчастногоСлучаяНаПроизводстве,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейБолезниПоПричинеПрофзаболевания,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыДнейУходаЗаДетьмиИнвалидами,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияОплатыКомандировки,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыМатериальнойПомощиКОтпуску,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияОплатыПростоя,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОплатыОтпускаПоБеременностиИРодам,
	|		NULL КАК ВыбиратьВидНачисленияОтпускБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияОтгул,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоПолутораЛет,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияПособияПоУходуЗаРебенкомДоТрехЛет,
	|		ВЫБОР
	|				КОГДА &ИспользоватьНачислениеЗарплаты
	|						И СУММА(ВЫБОР
	|								КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам))
	|										И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЦелодневноеНеотработанное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ВыбиратьВидНачисленияПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНеоплачиваемогоВремениБолезни,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНеоплачиваемогоВремениОтпускаПоБеременностиИРодам,
	|		NULL КАК ВыбиратьВидУдержанияВознагражденияПлатежногоАгента,
	|		NULL КАК ВыбиратьВидУдержанияВСчетРасчетовПоПрочимОперациям,
	|		NULL КАК ВыбиратьВидУдержанияПрофсоюзныхВзносов,
	|		NULL КАК ВыбиратьВидУдержанияДСВ,
	|		NULL КАК ВыбиратьВидУдержанияИсполнительногоЛиста,
	|		NULL КАК ВыбиратьВидУдержанияДобровольныхВзносовВНПФ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоплатуДоСреднегоЗаработка,
	|		NULL КАК ИспользоватьДСВ,
	|		NULL КАК ИспользоватьИсполнительныеЛисты,
	|		NULL КАК ИспользоватьДобровольныеВзносыВНПФ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|									ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СохраняемоеДенежноеСодержание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПоСреднемуЗаработку,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Праздники
	|									И &Праздники <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПраздничныхИВыходных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|									И Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &Сверхурочные
	|									И &Сверхурочные <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуСверхурочных,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоплатуЗаДниБолезни,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуКомандировок,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуВнутрисменныхКомандировок,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника))
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПростоев,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуВнутрисменныхПростоев,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И ВЫБОР
	|										КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным ЕСТЬ NULL 
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ НЕ ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|									КОНЕЦ
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьВнутрисменныеОтпускаБезОплаты,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтгулы,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Отгул)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьВнутрисменныеОтгулы,
	|		NULL КАК ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам))
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прогул), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам))
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетВнутрисменныхПрочихНевыходов,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Премия)
	|									И Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Премия)
	|									И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НачислятьРазовуюПремиюОтдельнымДокументом,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.РазовоеНачисление)
	|									И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК НачислятьРазовыеНачисленияОтдельнымДокументом,
	|		NULL КАК ИспользоватьПрофсоюзныеВзносы,
	|		NULL КАК ИспользоватьПрочиеУдержанияВПользуТретьихЛиц,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьСовмещениеПрофессийДолжностей,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияДоплатыЗаСовмещение,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьСдельныйЗаработок,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьМатериальнуюПомощь,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьМатериальнуюПомощьПриОтпуске,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.УчетВремениВЧасах = ИСТИНА
	|									И Начисления.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаПростоя)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьУчетВремениСотрудниковВЧасах,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска = &ОтпускУчебный
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаУчебные,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|									И Начисления.ВидОтпуска = &ОтпускПострадавшимВАварииЧАЭС
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)
	|									И Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ДоходВНатуральнойФорме)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьДоходыВНатуральнойФорме,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку)
	|									И Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьОплатуПоСреднемуЗаработкуВнутрисменную,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И &ИспользоватьРасчетГосслужащих
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпуску)
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ЕдиновременнаяВыплатаКОтпускуГосслужащего)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияЕдиновременнойВыплатыКОтпуску,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И &ИспользоватьРасчетСохраняемогоДенежногоСодержания
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ВыходноеПособиеМесячноеДенежноеСодержание)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ВыбиратьВидНачисленияМесячногоДенежногоСодержания,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьНадбавкуЗаВредность,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.ПоддерживаетНесколькоПлановыхНачислений
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользоватьНесколькоПлановыхНачислений,
	|		NULL КАК ИспользоватьДоплатуЗаВремяКомандировки
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	|			ПО Начисления.ВидОтпуска = ВидыОтпусков.Ссылка
	|	ГДЕ
	|		НЕ Начисления.ПометкаУдаления
	|		И НЕ Начисления.ВАрхиве
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВознаграждениеПлатежногоАгента)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрофсоюзныеВзносы)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ИсполнительныйЛист)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрофсоюзныеВзносы)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Удержания.КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрочееУдержаниеВПользуТретьихЛиц)
	|									И Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ЕжемесячноПриОкончательномРасчете)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 0
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ПланВидовРасчета.Удержания КАК Удержания
	|	ГДЕ
	|		НЕ Удержания.ПометкаУдаления
	|		И НЕ Удержания.ВАрхиве
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска)
	|									И Начисления.ВидОтпуска = &ОсновнойОтпуск
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска)
	|									И Начисления.ВидОтпуска <> &ОсновнойОтпуск
	|								ТОГДА 1
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА &ИспользоватьНачислениеЗарплаты
	|					И СУММА(ВЫБОР
	|							КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	|								ТОГДА 1
	|							ИНАЧЕ 0
	|						КОНЕЦ) > 1
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		ПланВидовРасчета.Начисления КАК Начисления
	|	ГДЕ
	|		НЕ Начисления.ПометкаУдаления
	|		И НЕ Начисления.ВАрхиве
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ВидВремени,
	|		Начисления.КатегорияНачисленияИлиНеоплаченногоВремени,
	|		Начисления.ВидОтпуска
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА НачисленияВидыВремени.Ссылка.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы)
	|					И &ИспользоватьНачислениеЗарплаты
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		ПланВидовРасчета.Начисления.ВидыВремени КАК НачисленияВидыВремени
	|	ГДЕ
	|		НЕ НачисленияВидыВремени.Ссылка.ПометкаУдаления
	|		И НЕ НачисленияВидыВремени.Ссылка.ВАрхиве
	|		И НачисленияВидыВремени.ВидВремени.ОсновноеВремя = &Командировка) КАК НастройкиРасчетаЗарплаты";
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	КонецЕсли;
	
	НастройкиПрограммы = ЗарплатаКадрыРасширенный.НастройкиПрограммыБюджетногоУчреждения();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИспользоватьНачислениеЗарплаты", ИспользоватьНачислениеЗарплаты);
	Запрос.УстановитьПараметр("Праздники", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Запрос.УстановитьПараметр("Сверхурочные", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Запрос.УстановитьПараметр("Командировка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка"));
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	Запрос.УстановитьПараметр("ОтпускУчебный", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускУчебный"));
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС"));
	Запрос.УстановитьПараметр("ИспользоватьРасчетСохраняемогоДенежногоСодержания", НастройкиПрограммы.ИспользоватьРасчетСохраняемогоДенежногоСодержания);
	Запрос.УстановитьПараметр("ИспользоватьРасчетГосслужащих", НастройкиПрограммы.ИспользоватьГосударственнуюСлужбу Или НастройкиПрограммы.ИспользоватьМуниципальнуюСлужбу Или НастройкиПрограммы.ИспользоватьВоеннуюСлужбу);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	// Получим значения настроек по умолчанию.
	НастройкиПоУмолчанию = НастройкиРасчетаЗарплатыПоУмолчанию();
	
	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	
	Если Не Настройки.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(Настройки, НастройкиПоУмолчанию);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Настройки, Выборка);
	
	// Если начисление зарплаты отключено, настройки, которые не определяются по ПВР нужно «сбросить».
	Если Не ИспользоватьНачислениеЗарплаты Тогда
		Настройки.ИспользоватьВыплатыБывшимСотрудникам = Ложь;
		Настройки.ИспользоватьИндексациюЗаработка = Ложь;
		Настройки.ИспользоватьНачисленияПоДоговорам = Ложь;
		Настройки.ИспользоватьПризыПодарки = Ложь;
		Настройки.ИспользоватьРегистрациюПрочихДоходов = Ложь;
	КонецЕсли;
	
	// Заполняем автоматически устанавливаемые настройки.
	РасчетЗарплатыРасширенный.УстановитьИспользованиеВводаДанныхДляРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты);
	РасчетЗарплатыРасширенный.УстановитьИспользованиеРасчетаПервойПоловиныМесяца(Настройки, ИспользоватьНачислениеЗарплаты);
	ЗарплатаКадрыРасширенный.УстановитьИспользованиеВнешнихХозяйственныхОпераций(ИспользоватьНачислениеЗарплаты);
	
	Настройки.Записать();
	
КонецПроцедуры

// Метод предназначен для установки константы использования документов ввода данных для расчета зарплаты.
//
Процедура УстановитьИспользованиеВводаДанныхДляРасчетаЗарплаты(ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;

	// Включаем использование ввода данных для расчета зарплаты в том случае, 
	// если используется расчет зарплаты и есть хотя бы один шаблон.
	
	ИспользоватьВводДанныхДляРасчетаЗарплаты = Ложь;
	Если ИспользоватьНачислениеЗарплаты Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Справочник.ВидыДокументовВводДанныхДляРасчетаЗарплаты КАК ВидыДокументов
		|ГДЕ
		|	НЕ ВидыДокументов.ПометкаУдаления
		|	И ВидыДокументов.НеИспользуется = ЛОЖЬ");
		ИспользоватьВводДанныхДляРасчетаЗарплаты = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	ТекущееИспользование = Константы.ИспользоватьВводДанныхДляРасчетаЗарплаты.Получить();
	Если ТекущееИспользование <> ИспользоватьВводДанныхДляРасчетаЗарплаты Тогда
		Константы.ИспользоватьВводДанныхДляРасчетаЗарплаты.Установить(ИспользоватьВводДанныхДляРасчетаЗарплаты);
	КонецЕсли;
	
КонецПроцедуры

// Метод предназначен для установки константы использования расчетов за первую половину месяца.
//
Процедура УстановитьИспользованиеРасчетаПервойПоловиныМесяца(Настройки = Неопределено, ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	ЗаписыватьНастройки = Ложь;
	Если Настройки = Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
		Настройки.Прочитать();
		ЗаписыватьНастройки = Истина;
	КонецЕсли;
	
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;

	// Включаем использование в том случае, 
	// если используется расчет зарплаты и есть записи с указанным способом аванса.
	
	ИспользоватьРасчетПервойПоловиныМесяца = Ложь;
	Если ИспользоватьНачислениеЗарплаты Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ПлановыеАвансы КАК ПлановыеАвансы
		|ГДЕ
		|	(ПлановыеАвансы.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца)
		|			ИЛИ ПлановыеАвансы.СпособРасчетаАвансаПоОкончании = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца))");
		ИспользоватьРасчетПервойПоловиныМесяца = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	ТекущееИспользование = Настройки.ИспользоватьРасчетПервойПоловиныМесяца;
	Если ТекущееИспользование <> ИспользоватьРасчетПервойПоловиныМесяца Тогда
		Настройки.ИспользоватьРасчетПервойПоловиныМесяца = ИспользоватьРасчетПервойПоловиныМесяца;
		Если ЗаписыватьНастройки Тогда
			Настройки.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск показателя расчета зарплаты по идентификатору.
//
// Параметры:
//	- Идентификатор - строка, идентификатор показателя (не путать с ИдентификаторОбъекта).
//	- УчитыватьРегистр - необязательный по умолчанию Ложь, если Истина, 
//		то выполняется поиск показателя с учетом регистра, 
//		например по строке "ВремяВДнях", показатель "ВремяВДнях" найден не будет.
//
// Возвращаемое значение - найденный показатель, 
//		Неопределено - в случае, если показателя с таким идентификатором не существует.
//
Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр);
КонецФункции

// Выполняет расчет НДФЛ и Взносов по данным начислений форм документов Выплата бывшим сотрудникам,
// Регистрация прочих доходов
// Возвращает 
Функция НДФЛИВзносыПоНеЗарплатнымДоходамФизическихЛиц(Объект, ПараметрыДляРасчета, НомерСтроки = Неопределено) Экспорт
	
	Если НомерСтроки = Неопределено Тогда
		СтрокиДляВыгрузки	= Неопределено;
	Иначе
		СтрокиДляВыгрузки	= Объект.НачисленияУдержанияВзносы.НайтиСтроки(Новый Структура("НомерСтроки", НомерСтроки));
	КонецЕсли;
	
    Начисления = Объект.НачисленияУдержанияВзносы.Выгрузить(СтрокиДляВыгрузки, "НомерСтроки, ФизическоеЛицо, Начислено");

	Если Начисления.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Соответствие;
	
	Организация					= Объект.Организация;
	Документ					= Объект.Ссылка;
	ДатаПолученияДохода			= Объект.ПланируемаяДатаВыплаты;
	ПериодРегистрации			= НачалоМесяца(Объект.ПланируемаяДатаВыплаты);
	КодДоходаНДФЛ				= ПараметрыДляРасчета.КодДоходаНДФЛ;
	ВидЕСВ						= ПараметрыДляРасчета.ВидЕСВ;
	Подразделение				= Объект.Подразделение;
	
	// Для расчета НДФЛ создаем временную ссылку на документ и коллекцию наборов записей.
	НаборыЗаписейОбъекта = ЗарплатаКадры.НаборыЗаписейРегистратора(Документ.Метаданные());
	
	Отказ = Ложь;
	
	// Сформируем временную таблицу с результатами начислений и списком физических лиц 
	// для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор",				Документ);
	Запрос.УстановитьПараметр("ДатаПолученияДохода",		ДатаПолученияДохода);
	Запрос.УстановитьПараметр("КодДоходаНДФЛ",				КодДоходаНДФЛ);
	Запрос.УстановитьПараметр("ВидЕСВ",						ВидЕСВ);
	Запрос.УстановитьПараметр("Подразделение",				Подразделение);
	Запрос.УстановитьПараметр("Начисления",					Начисления);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаПолученияДохода КАК ДатаПолученияДохода,
	|	&КодДоходаНДФЛ КАК КодДохода,
	|	&ВидЕСВ КАК ВидЕСВ,
	|	&Подразделение КАК Подразделение,
	|	&Регистратор КАК Регистратор,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Начислено КАК Сумма,
	|	0 КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления";
	Запрос.Выполнить();
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.ФизическоеЛицо,
	|	Начисления.НомерСтроки,
	|	Начисления.КодДохода,
	|	Начисления.Подразделение,
	|	Начисления.Сумма КАК СуммаДохода,
	|	Начисления.Сумма КАК Сумма,
	|	0 КАК НДФЛ
	|ИЗ
	|	ВТНачисления КАК Начисления
	|";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	НачисленияНДФЛ = МассивРезультатов[1].Выгрузить();
	// Расчет НДФЛ
	РезультатНДФЛ = УчетНДФЛРасширенный.РассчитатьНалогДляНезарплатыхДоходов(ДатаПолученияДохода, НачисленияНДФЛ);
	
	
	НачатьТранзакцию();
	
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого Результат Из Начисления Цикл
		//РезультатРасчета = Новый Структура("НДФЛ,СуммаВычета" + СтрокаРассчитываемыеВзносы);
		//
		//Отбор.ФизическоеЛицо = Результат.ФизическоеЛицо;
		//НайденныеСтроки = НачисленияНДФЛ.НайтиСтроки(Отбор);
		//Если НайденныеСтроки.Количество() >0 Тогда
		//	ЗаполнитьЗначенияСвойств(РезультатРасчета, НайденныеСтроки[0], "СуммаВычета,НДФЛ");
		//КонецЕсли;
		//
		//ВозвращаемоеЗначение.Вставить(Результат.ФизическоеЛицо, РезультатРасчета);
	КонецЦикла;
	
	
	ОтменитьТранзакцию();
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует временную таблицу со списком физических лиц ВТФизическиеЛица, которые рассчитываются при 
// проведении документа.
//
// Параметры:
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаНачислений - имя табличной части с начислениями, не обязательно, по умолчанию - "Начисления".
//
Процедура ЗаполнитьСписокФизическихЛиц(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений = "Начисления", СписокФизическихЛиц = Неопределено) Экспорт
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	// Составляем текст запроса создания временной таблицы.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		
		Если ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|";
		Иначе	
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|";
		
		Если ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ВТФизическиеЛица
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	#ТаблицаНачислений КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|";
		Если СписокФизическихЛиц <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|	И Начисления.Сотрудник.ФизическоеЛицо В (&СписокФизическихЛиц)";
		КонецЕсли; 
		ПерваяТаблица = Ложь;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведенияНачисленияЗарплаты.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Проверяет наличие колонке в строке коллекции, используемой при расчете.
//
// Параметры:
//	СтрокаКоллекции - строка таблицы расчетного документа.
//	ИмяПоля - имя поля, наличие которого необходимо выяснить.
//
// Возвращаемое значение - Истина, если поле есть, Ложь - в противном случае.
//
Функция ЕстьПолеВСтрокеКоллекции(СтрокаКоллекции, ИмяПоля) Экспорт
	
	Если ТипЗнч(СтрокаКоллекции) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат СтрокаКоллекции.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено;
	Иначе
		Возврат СтрокаКоллекции.Свойство(ИмяПоля);
	КонецЕсли;
	
КонецФункции

// Функция проверяет, есть ли в таблице показатели, значения которых необходимо заполнить (по данным учета).
// Такой необходимости может не возникнуть, если все показатели вводятся непосредственно при расчете,
// или их значения уже определены в коллекции известных показателей.
//
Функция ТребуетсяЗаполнениеЗначенийПоказателей(ТаблицаНачислений, ИзвестныеЗначенияПоказателей)
	
	Если ИзвестныеЗначенияПоказателей = Неопределено Тогда
		// Если значения известных показателей не определены, достаточно проверить только начисления (без учета сотрудников).
		ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНачислений, "Начисление", Истина);
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
		|		ПО (ПоказателиНачислений.Ссылка В (&ВидыРасчета))
		|			И (Показатели.Ссылка = ПоказателиНачислений.Показатель)
		|			И (Показатели.СпособВводаЗначений <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете))
		|			И (НЕ Показатели.Ссылка В (&ПоказателиОпределяемыеПриРасчете))";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВидыРасчета", ВидыРасчета);
		Запрос.УстановитьПараметр("ПоказателиОпределяемыеПриРасчете", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиОпределяемыеПриРасчете());
		РезультатЗапроса = Запрос.Выполнить();
		// Проверяем наличие показателей, которые вводятся не при расчете.
		// Если нет, то вообще не выполняем заполнение значений.
		Возврат Не РезультатЗапроса.Пустой();
	КонецЕсли;
	
	// Если значения известных показателей определены, то проверяем наличие показателей, 
	// требующих заполнение значений, с точностью до сотрудника.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиНачисления.Сотрудник,
	|	СотрудникиНачисления.Начисление
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&СотрудникиНачисления КАК СотрудникиНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзвестныеЗначения.Сотрудник,
	|	ИзвестныеЗначения.Показатель
	|ПОМЕСТИТЬ ВТИзвестныеЗначенияПоказателей
	|ИЗ
	|	&ИзвестныеЗначения КАК ИзвестныеЗначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
	|		ПО (Начисления.Начисление = ПоказателиНачислений.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК Показатели
	|		ПО (Показатели.Ссылка = ПоказателиНачислений.Показатель)
	|			И (Показатели.СпособВводаЗначений <> ЗНАЧЕНИЕ(Перечисление.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете))
	|			И (НЕ Показатели.Ссылка В (&ПоказателиОпределяемыеПриРасчете))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзвестныеЗначенияПоказателей КАК ИзвестныеЗначения
	|		ПО (ИзвестныеЗначения.Сотрудник = Начисления.Сотрудник)
	|			И (ИзвестныеЗначения.Показатель = ПоказателиНачислений.Показатель)
	|ГДЕ
	|	ИзвестныеЗначения.Показатель ЕСТЬ NULL ";
	
	СотрудникиНачисления = ПустаяТаблицаСотрудниковНачислений();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаНачислений, СотрудникиНачисления);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СотрудникиНачисления", СотрудникиНачисления);
	Запрос.УстановитьПараметр("ИзвестныеЗначения", ИзвестныеЗначенияПоказателей);
	Запрос.УстановитьПараметр("ПоказателиОпределяемыеПриРасчете", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиОпределяемыеПриРасчете());
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверяем наличие показателей, которые требуется заполнить.
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Определяет необходимость расчета результата
//
Функция РасчетЗафиксирован(Строка)
	
	Если Строка.ФиксРасчет Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПолеВСтрокеКоллекции(Строка, "ФиксСторно") Тогда
		Если Строка.ФиксСторно Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет необходимость расчета времени
//
Функция РасчетВремениЗафиксирован(Строка)
	
	Если Не ЕстьПолеВСтрокеКоллекции(Строка, "ФиксРасчетВремени") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Строка.ФиксРасчетВремени Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПолеВСтрокеКоллекции(Строка, "ФиксСторно") Тогда
		Если Строка.ФиксСторно Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет необходимость перезаполнения значений показателей
//
Функция ЗначенияПоказателейЗафиксированы(Строка)
	
	Если Строка.ФиксЗаполнение Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьПолеВСтрокеКоллекции(Строка, "ФиксСторно") Тогда
		Если Строка.ФиксСторно Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет ссылки на показатели в строках, а также представление и точность показателей.
//
Процедура ЗаполнитьСведенияОПоказателях(ТаблицаНачислений)
	
	ЕстьПолеВидВремени = ТаблицаНачислений.Колонки.Найти("ВидВремени") <> Неопределено;
	
	Для Каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		Если Не ЗначениеЗаполнено(СтрокаНачислений.Начисление) Тогда
			Продолжить;
		КонецЕсли;
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений.Начисление);
		// Заполняем поле ВидВремени для корректного отображения полей времени.
		Если ЕстьПолеВидВремени Тогда 
			СтрокаНачислений.ВидВремени = Неопределено;
			Если ВидРасчетаИнфо.Свойство("ВидВремени") Тогда
				СтрокаНачислений.ВидВремени = ВидРасчетаИнфо.ВидВремени;
			КонецЕсли;
		КонецЕсли;
		СтрокаНачислений.ИспользованиеПериода = ВидРасчетаИнфо.ИспользованиеПериода;
		// Заполняем сведения о показателях.
		НомерПоказателя = 1;
		Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			Если Не СтрокаПоказателя.ИспользоватьПриРасчете Тогда
				Продолжить;
			КонецЕсли;
			ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
			Если Не ПоказательИнфо.ОтображатьВДокументахНачисления Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНачислений["Показатель" + НомерПоказателя] = СтрокаПоказателя.Показатель;
			Если ЕстьПолеВСтрокеКоллекции(СтрокаНачислений, "ТочностьПоказателя" + НомерПоказателя) Тогда
				СтрокаНачислений["ТочностьПоказателя" + НомерПоказателя] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
			КонецЕсли;
			Если ЕстьПолеВСтрокеКоллекции(СтрокаНачислений, "ПредставлениеПоказателя" + НомерПоказателя) Тогда
				СтрокаНачислений["ПредставлениеПоказателя" + НомерПоказателя] = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
			КонецЕсли;
			НомерПоказателя = НомерПоказателя + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет значения известных показателей в коллекции начислений.
//
Процедура ЗаполнитьИзвестныеЗначенияПоказателей(ТаблицаНачислений, ИзвестныеЗначенияПоказателей)
	
	Если ИзвестныеЗначенияПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаПоказателей Из ИзвестныеЗначенияПоказателей Цикл
		СтрокиПоСотруднику = ТаблицаНачислений.НайтиСтроки(Новый Структура("Сотрудник", СтрокаПоказателей.Сотрудник));
		Для Каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
			Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
				Показатель = СтрокаПоСотруднику["Показатель" + НомерПоказателя];
				Если Показатель = СтрокаПоказателей.Показатель Тогда
					СтрокаПоСотруднику["Значение" + НомерПоказателя] = СтрокаПоказателей.Значение;
					СтрокаПоСотруднику["КомандаРасшифровки" + НомерПоказателя] = СтрокаПоказателей.КомандаРасшифровки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Создает временный набор записей регистра расчета Начисления.
//
// Параметры:
//	ВременнаяСсылка - ссылка на регистратор, 
//	ПропуститьПроверкуЗапретаИзменения - признак того, что запись будет выполняться "сквозь" проверку даты запрета
//	                                     редактирования.
//
// Возвращаемое значение - Набор записей Начисления.
//
Функция НаборЗаписейНачисления(ВременнаяСсылка = Неопределено, ПропуститьПроверкуЗапретаИзменения = Истина, ЭтоВременныйНаборЗаписей = Истина) Экспорт
	Возврат ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременнаяСсылка, ПропуститьПроверкуЗапретаИзменения, ЭтоВременныйНаборЗаписей)["Начисления"];
КонецФункции

// Возвращает размер доплаты до среднего заработка за дни нетрудоспособности.
//
// Параметры:
//  Организация
//
// Возвращаемое значение:
//   Размер доплаты - число
//
Функция ПроцентДоплатыЗаДниНетрудоспособности(Организация) Экспорт
	
	ПроцентДоплаты = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиЗарплатаКадрыРасширенная.ПроцентДоплатыЗаДниНетрудоспособности
	|ИЗ
	|	РегистрСведений.НастройкиЗарплатаКадрыРасширенная КАК НастройкиЗарплатаКадрыРасширенная
	|ГДЕ
	|	НастройкиЗарплатаКадрыРасширенная.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПроцентДоплаты = Выборка.ПроцентДоплатыЗаДниНетрудоспособности;
	КонецЕсли; 
	
	Возврат ПроцентДоплаты;
КонецФункции

// Добавляет команду печати "Подробный расчет начислений", вызывается из модулей
// менеджеров документов.
//
Процедура ДобавитьКомандуПечатиПодробногоРасчетаНачислений(КомандыПечати) Экспорт
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеНачисленнойЗарплатыРасширенная,ПолныеПрава,ЧтениеНачисленнойЗарплатыРасширенная", , Ложь) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная")  Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьРасчетаНачислений";
		КомандаПечати.Идентификатор = "ПодробныйРасчетНачислений";
		КомандаПечати.Представление = НСтр("ru='Подробный расчет начислений';uk='Докладний розрахунок нарахувань'");
		КомандаПечати.Порядок = 100;  		
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу значений - параметры формирования печатной формы подробного расчета начислений.
//
// Параметры:
//	 МассивСсылок 		- массив, печатаемые документы.
//   ДанныеДокумента 	- таблица значений, определяется в
//                      Обработки.ПечатьРасчетаНачислений.ДанныеДокументовДляПодробногоРасчетаНачислений.
//
Процедура ЗаполнитьДанныеДокументовДляПодробногоРасчетаНачислений(МассивСсылок, ИмяДокумента, ДанныеДокументов, ИмяТабличнойЧастиСотрудники = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документ.Сотрудник,
		|	Документ.Ссылка КАК Ссылка,
		|	Документ.Ссылка.Организация КАК Организация,
		|	Документ.Ссылка.Дата КАК ДатаДокумента,
		|	Документ.Ссылка.Номер КАК НомерДокумента
		|ИЗ
		|	&ИмяДокумента КАК Документ
		|ГДЕ
		|	Документ.Ссылка В(&МассивСсылок)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента", "Документ." + ИмяДокумента + ?(ПустаяСтрока(ИмяТабличнойЧастиСотрудники), "", "." + ИмяТабличнойЧастиСотрудники));

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДоработатьТекстЗапросаДляПодробногоРасчетаНачислений(Запрос.Текст, ИмяДокумента);
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеДокумента = ДанныеДокументов.Добавить(); 
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		ДанныеДокумента.МассивСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.Сотрудник);
	КонецЦикла;

КонецПроцедуры

// Возвращает структуру с двумя таблицами "Начисления" и "Показатели".
// Данные в таблицах представлены в разрезе ссылки на документ.
// 	Параметры:
//		МассивСсылок - массив ссылок на документы у которых есть табличные части "Начисления" и "Показатели".
//		ИмяДокумента - Имя объекта метаданных (документа) для формирования запроса.
//
Функция НачисленияПоказателиДокументов(МассивСсылок, ИмяДокумента, ВидНачисленияВШапке = Ложь) Экспорт 
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Начисления.Сотрудник,
	|	&Начисление,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.ОплаченоДней,
	|	Начисления.ОплаченоЧасов,
	|	Начисления.Результат,
	|	ПВРНачисления.КатегорияНачисленияИлиНеоплаченногоВремени КАК Категория
	|ИЗ
	|	&ИмяДокумента_Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПВРНачисления
	|		ПО &Начисление = ПВРНачисления.Ссылка
	|ГДЕ
	|	Начисления.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Ссылка,
	|	Показатели.ИдентификаторСтрокиВидаРасчета,
	|	Показатели.Показатель,
	|	Показатели.Значение
	|ИЗ
	|	&ИмяДокумента_Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Ссылка В(&МассивСсылок)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента_Начисления", "Документ." + ИмяДокумента + ".Начисления");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента_Показатели", "Документ." + ИмяДокумента + ".Показатели");
	
	Если ВидНачисленияВШапке Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Начисление", "Начисления.Ссылка.Начисление");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Начисление", "Начисления.Начисление");
	КонецЕсли;
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("Начисления, Показатели", ПакетРезультатов[0].Выгрузить(), ПакетРезультатов[1].Выгрузить());

КонецФункции

// Создает или "выключает" показатели расчета заработной платы и виды расчета,
//	необходимые для работы с суммированным учетом времени
Процедура СоздатьПоказателиИНачисленияСуммированногоУчета() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьСуммированныйУчет
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|ГДЕ
		|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Проверим соответствие состояния суммированного учета по регистру и включенности соответствующей константы.
	ЕстьГрафикиСуммированногоУчета = НЕ РезультатЗапроса.Пустой();
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	ИспользоватьУчетВремениСотрудниковВЧасах = НастройкиРасчетаЗарплаты.ИспользоватьУчетВремениСотрудниковВЧасах;
	
	// Наличие суммированного учета определяется не только наличием графиков с этим признаком, но и взведенной ФО использования часового учета.
	ЕстьСуммированныйУчет = ЕстьГрафикиСуммированногоУчета И ИспользоватьУчетВремениСотрудниковВЧасах;
	ВключенСуммированныйУчет = Константы.УдалитьИспользуетсяСуммированныйУчетВремени.Получить();
	
	Константы.УдалитьИспользуетсяСуммированныйУчетВремени.Установить(ЕстьСуммированныйУчет);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Удаляет из таблицы начислений те строки, в которых содержатся начисления, не входящие в ФОТ (ВключатьВФОТ = Ложь)
// 	Параметры:
//		ТаблицаНачислений - Таблица значений, обязательно содержащая колонку "Начисление" с типом ПланВидовРасчетаСсылка.Начисления.
Процедура ИсключитьНачисленияНеВключаемыеВФОТ(ТаблицаНачислений) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВключатьВФОТ";
		
	ПривилегированныйРежимУжеБыл = ПривилегированныйРежим();
	
	Если НЕ ПривилегированныйРежимУжеБыл Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли; 
	
	НачисленияВключаемыеВФОТ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если НЕ ПривилегированныйРежимУжеБыл Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	УдаляемыеНачисления = Новый Массив;
	
	Для каждого СтрокаНачислений Из ТаблицаНачислений Цикл
		Если НачисленияВключаемыеВФОТ.Найти(СтрокаНачислений.Начисление) = Неопределено Тогда
			УдаляемыеНачисления.Добавить(СтрокаНачислений);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого СтрокаНачислений Из УдаляемыеНачисления Цикл
		ТаблицаНачислений.Удалить(СтрокаНачислений);
	КонецЦикла; 

КонецПроцедуры

// Создает временную таблиц ВТНачисления
// 	Параметры
//		МенеджерВременныхТаблиц – менеджер временных таблиц, в который помещается таблица ВТНачисления
//		ИменаВТ – массив имен временных таблиц, помещенных в МенеджерВременныхТаблиц
//		ДополнительныеПараметры – структура параметров, см ДополнительныеПараметрыСоздатьВТНачисления
//
Процедура СоздатьВТНачисления(МенеджерВременныхТаблиц, ИменаВТ, ДополнительныеПараметры) Экспорт
	
	Начисления = ДополнительныеПараметры.Начисления;
	Сотрудники = ДополнительныеПараметры.Сотрудники;
	ЗаполнениеСтрок = ДополнительныеПараметры.ЗаполнениеСтрок;
	ИмяВТ = ДополнительныеПараметры.ИмяВТ;
	Организация = ДополнительныеПараметры.Организация;
	МесяцНачисления = ДополнительныеПараметры.МесяцНачисления;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Заполняем начисления во временную таблицу СУБД.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Начисление,
		|	Начисления.Результат,
		|	Начисления.Подразделение,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент,
		|	Начисления.ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТНачисленияБезОтбора
		|ИЗ
		|	&Начисления КАК Начисления";
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаНачислений.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));  
	ТаблицаНачислений.Колонки.Добавить("СторнируемыйДокумент", Новый ОписаниеТипов("ДокументСсылка.НачислениеЗарплаты"));
	ТаблицаНачислений.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	
	РаспределениеПоТерриториямУсловиямТруда = Неопределено;
	Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		РаспределениеПоТерриториямУсловиямТруда = ПустаяТаблицаРаспределениеПоТерриториямУсловиямТруда();
	КонецЕсли;
	
	Для Каждого СтрокаНачислений Из Начисления Цикл
		НоваяСтрока = ТаблицаНачислений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		Если ЗаполнениеСтрок <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаполнениеСтрок);
		КонецЕсли;
		Если ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация)
			И ЕстьПолеВСтрокеКоллекции(СтрокаНачислений, "РаспределениеПоТерриториямУсловиямТруда")
			И СтрокаНачислений.РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда
			Для Каждого СтрокаРаспределения Из СтрокаНачислений.РаспределениеПоТерриториямУсловиямТруда Цикл
				ЗаполнитьЗначенияСвойств(РаспределениеПоТерриториямУсловиямТруда.Добавить(), СтрокаРаспределения);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Начисления", ТаблицаНачислений);
	Запрос.Выполнить();
	
	// Начисления с отбором.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	Начисления.Начисление,
		|	Начисления.Результат КАК СуммаДохода,
		|	Начисления.Подразделение,
		|	Начисления.Подразделение КАК ПодразделениеОрганизации,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент,
		|	Начисления.ИдентификаторСтрокиВидаРасчета
		|ПОМЕСТИТЬ ВТНачисленияСОтбором
		|ИЗ
		|	ВТНачисленияБезОтбора КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|ГДЕ
		|	(Начисления.Сотрудник В (&Сотрудники)
		|			ИЛИ &БезОтбораПоСотрудникам)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияБезОтбора";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("БезОтбораПоСотрудникам", Сотрудники = Неопределено);
	Запрос.Выполнить();
	
	СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, "ВТНачисленияСОтбором");
	
	// Формируем целевую ВТ.
	Если Не ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация) Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Начисления.СуммаДохода КАК СуммаДохода,
			|	Начисления.Подразделение КАК Подразделение,
			|	Начисления.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
			|	Начисления.*
			|ПОМЕСТИТЬ #ИмяВТ
			|ИЗ
			|	ВТНачисленияСОтбором КАК Начисления";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Распределение.ИдентификаторСтроки,
			|	Распределение.Территория,
			|	Распределение.УсловияТруда,
			|	Распределение.Результат
			|ПОМЕСТИТЬ ВТРаспределениеПоТерриториямУсловиямТруда
			|ИЗ
			|	&РаспределениеПоТерриториямУсловиямТруда КАК Распределение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(Распределение.Результат, Начисления.СуммаДохода) КАК СуммаДохода,
			|	ВЫБОР
			|		КОГДА Распределение.Территория ЕСТЬ НЕ NULL 
			|				И Распределение.Территория <> НЕОПРЕДЕЛЕНО
			|				И Распределение.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)
			|			ТОГДА Распределение.Территория
			|		ИНАЧЕ Начисления.Подразделение
			|	КОНЕЦ КАК Подразделение,
			|	Распределение.Территория КАК ТерриторияВыполненияРаботВОрганизации,
			|	ЕСТЬNULL(Распределение.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)) КАК УсловияТруда,
			|	Начисления.*
			|ПОМЕСТИТЬ #ИмяВТ
			|ИЗ
			|	ВТНачисленияСОтбором КАК Начисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК Распределение
			|		ПО (Распределение.ИдентификаторСтроки = Начисления.ИдентификаторСтрокиВидаРасчета)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТРаспределениеПоТерриториямУсловиямТруда";
			
		Запрос.УстановитьПараметр("РаспределениеПоТерриториямУсловиямТруда", РаспределениеПоТерриториямУсловиямТруда);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяВТ", ИмяВТ);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТНачисленияСОтбором";
	Запрос.Выполнить();
	
	// Добавляем упоминание временной таблицы.
	ИменаВТ.Добавить(ИмяВТ);
	
КонецПроцедуры

// Создает временную таблиц ВТНачисленияПоДоговорам
// 	Параметры
//		МенеджерВременныхТаблиц – менеджер временных таблиц, в который помещается таблица ВТНачисления
//		НачисленияПоДоговорам - таблица значений с данными по договорам
//		ИменаВТ – массив имен временных таблиц, помещенных в МенеджерВременныхТаблиц
//		Сотрудники – массив сотрудников для отбора 
//
Процедура СоздатьВТНачисленияПоДоговорам(МенеджерВременныхТаблиц, НачисленияПоДоговорам, ИменаВТ, Сотрудники = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.Результат,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.КатегорияЕСВ,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.ДокументОснование,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорамБезОтбора
	|ИЗ
	|	&НачисленияПоДоговорам КАК НачисленияПоДоговорам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияПоДоговорам.Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги) КАК Начисление,
	|	НАЧАЛОПЕРИОДА(НачисленияПоДоговорам.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
	|	НачисленияПоДоговорам.ДатаНачала,
	|	НачисленияПоДоговорам.Результат КАК Сумма,
	|	НачисленияПоДоговорам.КодДохода,
	|	НачисленияПоДоговорам.КатегорияЕСВ,
	|	НачисленияПоДоговорам.Подразделение,
	|	НачисленияПоДоговорам.Подразделение КАК ПодразделениеОрганизации,
	|	НачисленияПоДоговорам.ДокументОснование КАК Договор,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.Подразделение КАК ТерриторияВыполненияРаботВОрганизации
	|ПОМЕСТИТЬ ВТНачисленияПоДоговорам
	|ИЗ
	|	ВТНачисленияПоДоговорамБезОтбора КАК НачисленияПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО НачисленияПоДоговорам.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	(НачисленияПоДоговорам.Сотрудник В (&Сотрудники)
	|			ИЛИ &БезОтбораПоСотрудникам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисленияПоДоговорамБезОтбора";
	
	ТаблицаНачислений = ПустаяТаблицаНачисленияПоДоговорам();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НачисленияПоДоговорам, ТаблицаНачислений);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачисленияПоДоговорам", ТаблицаНачислений);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("БезОтбораПоСотрудникам", Сотрудники = Неопределено);
	
	Запрос.Выполнить();
	
	// Добавляем упоминание временной таблицы.
	ИменаВТ.Добавить("ВТНачисленияПоДоговорам");
	
КонецПроцедуры

// Возвращает структуру с описанием параметров для создания 
// временной таблицы ВТНачисления
Функция ДополнительныеПараметрыСоздатьВТНачисления() Экспорт
	
	Параметры = Новый Структура(
		"Начисления,
		|Сотрудники,
		|Организация,
		|ЗаполнениеСтрок,
		|МесяцНачисления,
		|ИмяВТ");

	Параметры.ИмяВТ = "ВТНачисления";
		
	Возврат Параметры;
	
КонецФункции

Функция ОснованиеИсчисленияНалогаСОтсроченнойУплатой(Основания) Экспорт

	Результаты = Новый Соответствие;
	БольничныйЛист = Тип("ДокументСсылка.БольничныйЛист");
	Отпуск = Тип("ДокументСсылка.Отпуск");
	ИсправленныеДокументыОснований = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Основания, "ИсправленныйДокумент");
	Для каждого Основание Из Основания Цикл
		ТипОснования = ТипЗнч(Основание);
		Результаты.Вставить(Основание, (ТипОснования = БольничныйЛист Или ТипОснования = Отпуск) И Не ЗначениеЗаполнено(ИсправленныеДокументыОснований[Основание]));
	КонецЦикла;
	
	Возврат Результаты
	
КонецФункции 

// Возвращает начисление надьавка за вредность.
//
Функция НачислениеНадбавкаЗаВредность() Экспорт
	
	Начисления = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность);
	Если Начисления.Количество() > 0 Тогда
		Возврат Начисления[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, обеспечивающие расчет зарплаты.

// Предназначен для размещения вызовов процедур, выполняющих расчет начислений или удержаний предопределенным способом.
//
// Параметры:
//	- РасчетПредопределеннымСпособом - таблица значений, см. ТаблицаРасчетаПредопределеннымСпособом().
//	- НаборыЗаписей - структура наборов записей, моделирующая коллекцию движений документа 
//			с установленным отбором по временному регистратору.
//	- ДокументСсылка - ссылка на документ, выполняющий расчет.
//
Процедура РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СпособыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(РасчетПредопределеннымСпособом, "СпособРасчета", Истина);
	Для Каждого СпособРасчета Из СпособыРасчета Цикл
		
		СтрокиТаблицыРасчета = РасчетПредопределеннымСпособом.НайтиСтроки(Новый Структура("СпособРасчета", СпособРасчета));
		
		// Доплата до среднего заработка.
		РассчитатьДоплатуДоСреднегоЗаработка(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Доплата до среднего заработка ФСС.
		РассчитатьДоплатуДоСреднегоЗаработкаФСС(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Доплата до сохраняемого денежного содержания за дни болезни.
		РассчитатьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);

		// Доплата до МЗП.
		РассчитатьДоплатуДоМЗП(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Индексация.
		РассчитатьИндексацию(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Удержания по исполнительным листам.
		ИсполнительныеЛисты.РассчитатьУдержанияПоИсполнительнымЛистам(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка, ДополнительныеПараметры);
		
		// Вознаграждения платежных агентов.
		ИсполнительныеЛисты.РассчитатьВознагражденияПлатежныхАгентов(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Пособия по нетрудоспособности и по уходу за ребенком.
		УчетПособийСоциальногоСтрахованияРасширенный.РассчитатьПособие(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДополнительныеПараметры);
		
		// Оплата простоев
		ПростоиСотрудников.РассчитатьОплатуПростоя(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Переопределяемые способы расчета.
		РасчетЗарплатыРасширенныйПереопределяемый.РассчитатьПредопределеннымСпособом(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Распределяем результат расчета по территориям и условиям труда.
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("СтрокиРаспределенияПоИдентификатору") Тогда
			Для Каждого СтрокаТаблицыРасчета Из СтрокиТаблицыРасчета Цикл
				СтрокаРасчета = СтрокаТаблицыРасчета.ЗаписьРасчета;
				СтрокиРаспределения = ДополнительныеПараметры.СтрокиРаспределенияПоИдентификатору[СтрокаРасчета.ИдентификаторСтроки];
				РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределения);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСреднегоЗаработка.
//
Процедура РассчитатьДоплатуДоСреднегоЗаработка(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если РасчетЗафиксирован(Запись) Тогда
			ИсходныеДанные.Результат = Запись.Результат;
			Продолжить;
		КонецЕсли;
			
		Запись.Результат = Макс(ИсходныеДанные.СреднийЗаработокОбщий * ИсходныеДанные.ВремяВДняхЧасах - ИсходныеДанные.РасчетнаяБаза, 0);
		ИсходныеДанные.Результат = Запись.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСреднегоЗаработкаФСС.
//
Процедура РассчитатьДоплатуДоСреднегоЗаработкаФСС(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если РасчетЗафиксирован(Запись) Тогда
			ИсходныеДанные.Результат = Запись.Результат;
			Продолжить;
		КонецЕсли;
			
		Запись.Результат = Макс(((ИсходныеДанные.СреднийЗаработокФСС * ИсходныеДанные.КалендарныеДни) * ИсходныеДанные.ПроцентДоплатыЗаДниНетрудоспособности / 100) - ИсходныеДанные.РасчетнаяБаза, 0);
		ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КалендарныеДни;
		ИсходныеДанные.Результат = Запись.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

// Метод выполняет расчет записей с предопределенным способом расчета ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни.
//
Процедура РассчитатьДоплатуДоСохраняемогоДенежногоСодержанияЗаДниБолезни(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если РасчетЗафиксирован(Запись) Тогда
			ИсходныеДанные.Результат = Запись.Результат;
			Продолжить;
		КонецЕсли;
		
		Если ИсходныеДанные.НормаДней = 0 Тогда
			Запись.Результат = 0;
		Иначе
			Запись.Результат = Макс(ИсходныеДанные.СохраняемоеДенежноеСодержание * ИсходныеДанные.КоэффициентИндексацииСохраняемогоДенежногоСодержания * ИсходныеДанные.ВремяВДнях / ИсходныеДанные.НормаДней - ИсходныеДанные.РасчетнаяБаза, 0);
		КонецЕсли;
		ИсходныеДанные.ОплаченоДней = ИсходныеДанные.ВремяВДнях;
		ИсходныеДанные.Результат = Запись.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьДоплатуДоМЗП(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если РасчетЗафиксирован(Запись) Тогда
			ИсходныеДанные.Результат = Запись.Результат;
			Продолжить;
		КонецЕсли;
		
		Если ИсходныеДанные.УчетВремениВЧасах Тогда
			Норма = ИсходныеДанные.НормаЧасов;
			Время = ИсходныеДанные.РасчетнаяБазаЧасов;
		Иначе
			Норма = ИсходныеДанные.НормаДней;
			Время = ИсходныеДанные.РасчетнаяБазаДней;
		КонецЕсли;
		
		Если ИсходныеДанные.ВремяВДняхЧасах = 0 И ИсходныеДанные.ВремяВЧасах <> 0 И ИсходныеДанные.ВремяВДнях <> 0 Тогда
			//Такое бывает при расчете планового ФОТ
			Запись.Результат =  Макс(Окр(Мин(ИсходныеДанные.ДоляНеполногоРабочегоВремени, 1)*ИсходныеДанные.МРОТ, 2) - ИсходныеДанные.РасчетнаяБаза, 0);
		ИначеЕсли Норма = 0 Тогда
			Запись.Результат = 0;
		Иначе	
			Запись.Результат =  Макс(Окр(Мин(Время/Норма, 1)*ИсходныеДанные.МРОТ, 2) - ИсходныеДанные.РасчетнаяБаза, 0);
		КонецЕсли;	
 		ИсходныеДанные.Результат = Запись.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьИндексацию(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.Индексация Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если РасчетЗафиксирован(Запись) Тогда
			ИсходныеДанные.Результат = Запись.Результат;
			Продолжить;
		КонецЕсли;
		
		Если ИсходныеДанные.УчетВремениВЧасах Тогда
			Норма = ИсходныеДанные.НормаЧасов;
			Время = ИсходныеДанные.РасчетнаяБазаЧасов;
		Иначе
			Норма = ИсходныеДанные.НормаДней;
			Время = ИсходныеДанные.РасчетнаяБазаДней;
		КонецЕсли;
		
		Если Норма = 0 Тогда
			Запись.Результат = 0;
		Иначе	
			Запись.Результат = ИсходныеДанные.ПрожиточныйМинимум * ИсходныеДанные.КоэффициентИндексации * Мин(Время/Норма, 1);   
		КонецЕсли;	
 		ИсходныеДанные.Результат = Запись.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

// Предназначен для размещения вызовов процедур, выполняющих расчет переопределяемых показателей
// см. ПереопределяемыеПоказатели().
//
// Параметры:
//	РасчетПереопределяемыхПоказателей - таблица значений (см. ТаблицаРасчетаПереопределяемыхПоказателей).
//
Процедура РассчитатьЗначенияПереопределяемыхПоказателей(РасчетПереопределяемыхПоказателей, ДокументСсылка, РегистраторыОтбор = Неопределено)
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(РасчетПереопределяемыхПоказателей, "Показатель", Истина);
	
	Для Каждого Показатель Из Показатели Цикл
		СтрокиТаблицыРасчета = РасчетПереопределяемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", Показатель));
		РассчитатьБазуСтраховыхВзносов(Показатель, СтрокиТаблицыРасчета, ДокументСсылка, РегистраторыОтбор);
		РассчитатьПоказательКоличествоДнейОтпуска(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательСдельныйЗаработок(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательКалендарныеДниБезПраздников(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательКоэффициентИндексацииСреднегоЗаработка(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательКоэффициентИндексацииСохраняемогоДенежногоСодержания(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательСреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
		РассчитатьПоказательКоэффициентИндексации(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПоказательСреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих(Показатель, СтрокиТаблицыРасчета, ДокументСсылка)

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.РассчитатьПоказательСреднемесячноеКоличествоКалендарныхДнейОтпускаГосслужащих(Показатель, СтрокиТаблицыРасчета, ДокументСсылка);
	КонецЕсли;

КонецПроцедуры

// Выполняет расчет переопределяемого показателя РасчетнаяБазаСтраховыеВзносы.
//
Процедура РассчитатьБазуСтраховыхВзносов(Показатель, СтрокиРасчета, ДокументСсылка, РегистраторыОтбор= Неопределено)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы") Тогда
		Возврат;
	КонецЕсли;
	
	ФизлицаОрганизаций = Новый ТаблицаЗначений;
	ФизлицаОрганизаций.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизлицаОрганизаций.Колонки.Добавить("ГоловнаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ФизлицаОрганизаций.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ФизлицаОрганизаций.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	СтрокиПоИдентификатору = Новый Соответствие;
	
	Организация = Неопределено;
	НачалоПериода = Неопределено;
	ОкончаниеПериода = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		Организация = СтрокаРасчета.Организация;
		НоваяСтрока = ФизлицаОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		НоваяСтрока.Дата = СтрокаРасчета.ДатаНачала;
		НоваяСтрока.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		Если НачалоПериода = Неопределено Тогда
			НачалоПериода = НачалоМесяца(СтрокаРасчета.ДатаНачала);
		КонецЕсли;
		Если ОкончаниеПериода = Неопределено Тогда
			ОкончаниеПериода = КонецМесяца(СтрокаРасчета.ДатаНачала);
		КонецЕсли;
		НачалоПериода = Мин(НачалоПериода, НачалоМесяца(СтрокаРасчета.ДатаНачала));
		ОкончаниеПериода = Макс(ОкончаниеПериода, КонецМесяца(СтрокаРасчета.ДатаНачала));
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФизлицаОрганизаций.ФизическоеЛицо,
	|	ФизлицаОрганизаций.ГоловнаяОрганизация,
	|	ФизлицаОрганизаций.Дата,
	|	ФизлицаОрганизаций.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ФизлицаОрганизаций КАК ФизлицаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизлицаОрганизаций.ФизическоеЛицо,
	|	ФизлицаОрганизаций.ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТФизлицаОрганизаций
	|ИЗ
	|	ВТИсходныеДанные КАК ФизлицаОрганизаций";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ФизлицаОрганизаций", ФизлицаОрганизаций);
	Запрос.Выполнить();
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
		НачалоПериода, ОкончаниеПериода, Организация, МенеджерВременныхТаблиц, , , , , , Истина);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИдентификаторСтроки,
	|	СУММА(СведенияОДоходах.БазаПФР) КАК Значение
	|ИЗ
	|	ВТИсходныеДанные КАК ДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОДоходах КАК СведенияОДоходах
	|		ПО (СведенияОДоходах.ФизическоеЛицо = ДанныеДляРасчета.ФизическоеЛицо)
	|			И (СведенияОДоходах.ГоловнаяОрганизация = ДанныеДляРасчета.ГоловнаяОрганизация)
	|			И (СведенияОДоходах.Период = НАЧАЛОПЕРИОДА(ДанныеДляРасчета.Дата, МЕСЯЦ))
	|			И (СведенияОДоходах.Регистратор <> &Регистратор)
	|			И (СведенияОДоходах.Регистратор В (&МассивВременныхСсылок))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("МассивВременныхСсылок", РегистраторыОтбор);
	
	Если РегистраторыОтбор = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (СведенияОДоходах.Регистратор В (&МассивВременныхСсылок))", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя КоличествоДнейОтпуска.
//
Процедура РассчитатьПоказательКоличествоДнейОтпуска(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК НачалоПериода,
	|	Начисления.ПериодДействияКонец КАК ОкончаниеПериода,
	|	Начисления.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			Регистратор = &Регистратор
	|				И ИдентификаторСтроки В (&ИдентификаторыСтрок)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляРасчета.Сотрудник КАК ГрафикРаботы,
	|	ДанныеДляРасчета.НачалоПериода,
	|	ДанныеДляРасчета.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТПериодыГрафиков
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	УчетРабочегоВремени.СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);
	ОстаткиОтпусков.СоздатьВТКраткосрочныеТрудовыеДоговорыСотрудников(МенеджерВременныхТаблиц, "ВТДанныеДляРасчета", "Сотрудник,НачалоПериода");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИдентификаторСтроки,
	|	СУММА(ВЫБОР
	|			КОГДА ВидыОтпусков.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(ДоговораСотрудников.КраткосрочныйТрудовойДоговор, ЛОЖЬ)
	|							ТОГДА ДанныеКалендаря.ДнейПоШестидневке
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|									ТОГДА ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников
	|								ИНАЧЕ ДанныеКалендаря.ДнейКалендарных
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ВидыОтпусков.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|						ТОГДА ДанныеКалендаря.ДнейПоШестидневке
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|								ТОГДА ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников
	|							ИНАЧЕ ДанныеКалендаря.ДнейКалендарных
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОНЕЦ) КАК Значение
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаря
	|		ПО (ДанныеКалендаря.НачалоПериода = ДанныеДляРасчета.НачалоПериода)
	|			И (ДанныеКалендаря.ОкончаниеПериода = ДанныеДляРасчета.ОкончаниеПериода)
	|			И (ДанныеКалендаря.ГрафикРаботы = ДанныеДляРасчета.Сотрудник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКраткосрочныеТрудовыеДоговорыСотрудников КАК ДоговораСотрудников
	|		ПО (ДоговораСотрудников.Период = ДанныеДляРасчета.НачалоПериода)
	|			И (ДоговораСотрудников.Сотрудник = ДанныеДляРасчета.Сотрудник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
	|			ПО Начисления.ВидОтпуска = ВидыОтпусков.Ссылка
	|		ПО ДанныеДляРасчета.ВидРасчета = Начисления.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя КалендарныеДниБезПраздников.
//
Процедура РассчитатьПоказательКалендарныеДниБезПраздников(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеДляРасчета.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК НачалоПериода,
	|	Начисления.ПериодДействияКонец КАК ОкончаниеПериода,
	|	Начисления.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			Регистратор = &Регистратор
	|				И ИдентификаторСтроки В (&ИдентификаторыСтрок)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляРасчета.Сотрудник КАК ГрафикРаботы,
	|	ДанныеДляРасчета.НачалоПериода,
	|	ДанныеДляРасчета.ОкончаниеПериода
	|ПОМЕСТИТЬ ВТПериодыГрафиков
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	УчетРабочегоВремени.СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИдентификаторСтроки,
	|	ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников КАК Значение
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаря
	|		ПО (ДанныеКалендаря.НачалоПериода = ДанныеДляРасчета.НачалоПериода)
	|			И (ДанныеКалендаря.ОкончаниеПериода = ДанныеДляРасчета.ОкончаниеПериода)
	|			И (ДанныеКалендаря.ГрафикРаботы = ДанныеДляРасчета.Сотрудник)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя СдельныйЗаработок.
//
Процедура РассчитатьПоказательСдельныйЗаработок(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	
	МинимальнаяДата = Неопределено;
	МаксимальнаяДата = Неопределено;
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
		Если Не ЗначениеЗаполнено(МинимальнаяДата) Тогда
			МинимальнаяДата = СтрокаРасчета.ДатаНачала;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(МаксимальнаяДата) Тогда
			МаксимальнаяДата = СтрокаРасчета.ДатаОкончания;
		КонецЕсли;
		Если СтрокаРасчета.ДатаНачала < МинимальнаяДата Тогда
			МинимальнаяДата = СтрокаРасчета.ДатаНачала;
		КонецЕсли;
		Если СтрокаРасчета.ДатаОкончания > МаксимальнаяДата Тогда
			МаксимальнаяДата = СтрокаРасчета.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("СдельныйЗаработок", Показатель);
	Запрос.УстановитьПараметр("НачалоПервогоМесяца", НачалоМесяца(МинимальнаяДата));
	Запрос.УстановитьПараметр("КонецПоследнегоМесяца", КонецМесяца(МаксимальнаяДата));
	Запрос.УстановитьПараметр("МинимальнаяДата", МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата", КонецДня(МаксимальнаяДата));
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц КАК ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ПериодДействия КАК Месяц,
		|	Начисления.ПериодДействияНачало КАК ДатаНачала,
		|	Начисления.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор = &Регистратор
		|				И ИдентификаторСтроки В (&ИдентификаторыСтрок)
		|				И ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ) КАК Начисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц,
		|	Начисления.Организация,
		|	Начисления.ПериодДействия,
		|	НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало, МЕСЯЦ),
		|	КОНЕЦПЕРИОДА(Начисления.ПериодДействияКонец, МЕСЯЦ),
		|	Начисления.ИдентификаторСтроки
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор = &Регистратор
		|	И Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
		|	И Начисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА";
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыполненныеРаботы.Период КАК Месяц,
		|	ВыполненныеРаботы.Сотрудник,
		|	ВыполненныеРаботы.ВидРабот,
		|	ВыполненныеРаботы.ОбъемВыполненныхРаботОборот КАК ОбъемВыполненныхРабот
		|ПОМЕСТИТЬ ВТВыполненныеРаботыПоМесяцам
		|ИЗ
		|	РегистрНакопления.ВыполненныеРаботыСотрудников.Обороты(
		|			&НачалоПервогоМесяца,
		|			&КонецПоследнегоМесяца,
		|			Месяц,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					ДанныеДляРасчета.Сотрудник
		|				ИЗ
		|					ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|				ГДЕ
		|					ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ВыполненныеРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыполненныеРаботы.ВидРабот,
		|	ВыполненныеРаботы.Период
		|ПОМЕСТИТЬ ВТВидыРаботПериоды
		|ИЗ
		|	РегистрНакопления.ВыполненныеРаботыСотрудников КАК ВыполненныеРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ПО (ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник)
		|			И (ВыполненныеРаботы.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|			И (ВыполненныеРаботы.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|			И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВыполненныеРаботыПоМесяцам.ВидРабот,
		|	ВыполненныеРаботыПоМесяцам.Месяц
		|ИЗ
		|	ВТВыполненныеРаботыПоМесяцам КАК ВыполненныеРаботыПоМесяцам";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РасценкиРаботСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТВидыРаботПериоды",
			"ВидРабот"));
	
	// Учитывая данные расценок, рассчитаем значения показателя для сотрудников.
	// Суммируем значения с оперативным показателем, т.к. некоторые значения могли быть определены и непосредственно.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияОперативногоПоказателя.Период КАК Месяц,
		|	ЗначенияОперативногоПоказателя.Сотрудник,
		|	ЗначенияОперативногоПоказателя.ФизическоеЛицо,
		|	ЗначенияОперативногоПоказателя.Организация,
		|	ЗначенияОперативногоПоказателя.ЗначениеОборот КАК Значение
		|ПОМЕСТИТЬ ВТСдельныйЗаработокПоМесяцам
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Обороты(
		|			&НачалоПервогоМесяца,
		|			&КонецПоследнегоМесяца,
		|			Месяц,
		|			Показатель = &СдельныйЗаработок
		|				И Сотрудник В
		|					(ВЫБРАТЬ
		|						ДанныеДляРасчета.Сотрудник
		|					ИЗ
		|						ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|					ГДЕ
		|						ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ЗначенияОперативногоПоказателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗначенияОперативногоПоказателя.Период,
		|	ЗначенияОперативногоПоказателя.Сотрудник,
		|	ЗначенияОперативногоПоказателя.ФизическоеЛицо,
		|	ЗначенияОперативногоПоказателя.Организация,
		|	ЗначенияОперативногоПоказателя.ЗначениеОборот
		|ИЗ
		|	РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Обороты(
		|			&НачалоПервогоМесяца,
		|			&КонецПоследнегоМесяца,
		|			Месяц,
		|			Показатель = &СдельныйЗаработок
		|				И Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				И (ФизическоеЛицо, Организация) В
		|					(ВЫБРАТЬ
		|						ДанныеДляРасчета.ФизическоеЛицо,
		|						ДанныеДляРасчета.Организация
		|					ИЗ
		|						ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|					ГДЕ
		|						ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ЗначенияОперативногоПоказателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателя.ИдентификаторСтроки,
		|	СУММА(ЗначенияПоказателя.Значение) КАК Значение
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		ЕСТЬNULL(ВыполненныеРаботы.ОбъемВыполненныхРабот, 0) * ЕСТЬNULL(РасценкиРаботСотрудников.Расценка, 0) КАК Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыполненныеРаботыСотрудников КАК ВыполненныеРаботы
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТРасценкиРаботСотрудниковСрезПоследних КАК РасценкиРаботСотрудников
		|				ПО ВыполненныеРаботы.ВидРабот = РасценкиРаботСотрудников.ВидРабот
		|					И ВыполненныеРаботы.Период = РасценкиРаботСотрудников.Период
		|			ПО ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник
		|				И (ВыполненныеРаботы.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|				И (ВыполненныеРаботы.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативногоПоказателя
		|			ПО ДанныеДляРасчета.Сотрудник = ЗначенияОперативногоПоказателя.Сотрудник
		|				И (ЗначенияОперативногоПоказателя.Показатель = &СдельныйЗаработок)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|				И (ЗначенияОперативногоПоказателя.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|			ПО (Сотрудники.Ссылка = ДанныеДляРасчета.Сотрудник)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативногоПоказателя
		|			ПО (Сотрудники.ФизическоеЛицо = ЗначенияОперативногоПоказателя.ФизическоеЛицо)
		|				И (ЗначенияОперативногоПоказателя.Организация = ДанныеДляРасчета.Организация)
		|				И (ЗначенияОперативногоПоказателя.Показатель = &СдельныйЗаработок)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата)
		|				И (ЗначенияОперативногоПоказателя.Период МЕЖДУ ДанныеДляРасчета.ДатаНачала И ДанныеДляРасчета.ДатаОкончания)
		|				И (ЗначенияОперативногоПоказателя.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ЛОЖЬ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ВыполненныеРаботы.ОбъемВыполненныхРабот * ЕСТЬNULL(РасценкиРаботСотрудников.Расценка, 0)
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыполненныеРаботыПоМесяцам КАК ВыполненныеРаботы
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТРасценкиРаботСотрудниковСрезПоследних КАК РасценкиРаботСотрудников
		|				ПО ВыполненныеРаботы.ВидРабот = РасценкиРаботСотрудников.ВидРабот
		|					И ВыполненныеРаботы.Месяц = РасценкиРаботСотрудников.Период
		|			ПО ДанныеДляРасчета.Сотрудник = ВыполненныеРаботы.Сотрудник
		|				И (ВыполненныеРаботы.Месяц = ДанныеДляРасчета.Месяц)
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСдельныйЗаработокПоМесяцам КАК ЗначенияОперативногоПоказателя
		|			ПО ДанныеДляРасчета.Сотрудник = ЗначенияОперативногоПоказателя.Сотрудник
		|				И (ЗначенияОперативногоПоказателя.Месяц = ДанныеДляРасчета.Месяц)
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеДляРасчета.ИдентификаторСтроки,
		|		ЗначенияОперативногоПоказателя.Значение
		|	ИЗ
		|		ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСдельныйЗаработокПоМесяцам КАК ЗначенияОперативногоПоказателя
		|			ПО ДанныеДляРасчета.ФизическоеЛицо = ЗначенияОперативногоПоказателя.ФизическоеЛицо
		|				И (ЗначенияОперативногоПоказателя.Организация = ДанныеДляРасчета.Организация)
		|				И (ЗначенияОперативногоПоказателя.Месяц = ДанныеДляРасчета.Месяц)
		|				И (ЗначенияОперативногоПоказателя.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|				И (ДанныеДляРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц = ИСТИНА)) КАК ЗначенияПоказателя
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателя.ИдентификаторСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		СтрокаРасчета.Значение = Выборка.Значение;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя КоэффициентИндексацииСреднегоЗаработка.
//
Процедура РассчитатьПоказательКоэффициентИндексацииСреднегоЗаработка(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСреднегоЗаработка") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		Если СтрокаРасчета.Сторно Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В соответствии с положением о расчете среднего заработка 
	// «..если повышение произошло в период сохранения среднего заработка, 
	// - часть среднего заработка повышается с даты повышения тарифной ставки...».
	// Это значит, что необходимо 
	// - выбрать все месяцы, записи за которые рассчитываются в текущей транзакции (отбором по текущему регистратору)
	// - получить коэффициенты индексации заработка за эти месяцы
	// - последовательно начиная с первого месяца агрегировать умножением, получая коэффициент на каждый месяц
	// - сделать все это в разрезе сотрудников.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Начисления.ПериодДействияНачало) КАК Начало,
	|	МАКСИМУМ(Начисления.ПериодДействияКонец) КАК КОНЕЦ
	|ПОМЕСТИТЬ ВТИнтервалНачислений
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Месяц,
	|	Начисления.ВидРасчета,
	|	Начисления.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИнтервалНачислений КАК ИнтервалНачислений
	|		ПО Начисления.ПериодДействия > ИнтервалНачислений.Начало
	|			И Начисления.ПериодДействия <= ИнтервалНачислений.КОНЕЦ
	|			И (Начисления.Регистратор = &Регистратор)
	|			И (Начисления.ИдентификаторСтроки В (&ИдентификаторыСтрок))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.Сотрудник,
	|	ДанныеДляРасчета.Месяц,
	|	ДанныеДляРасчета.ВидРасчета,
	|	ЕСТЬNULL(КоэффициентыИндексации.Коэффициент, 1) КАК КоэффициентИндексации
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентыИндексации
	|		ПО (КоэффициентыИндексации.Сотрудник = ДанныеДляРасчета.Сотрудник)
	|			И (КоэффициентыИндексации.Период = ДанныеДляРасчета.Месяц)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляРасчета.Сотрудник,
	|	ДанныеДляРасчета.ВидРасчета,
	|	ДанныеДляРасчета.Месяц";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ДанныеПоСотрудникам = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ДанныеПоВидамРасчета = Новый Соответствие;
		Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
			КоэффициентИндексации = 1;
			ДанныеПоМесяцам = Новый Соответствие;
			Пока Выборка.Следующий() Цикл
				КоэффициентИндексации = КоэффициентИндексации * Выборка.КоэффициентИндексации;
				ДанныеПоМесяцам.Вставить(Выборка.Месяц, КоэффициентИндексации);
			КонецЦикла;
			ДанныеПоВидамРасчета.Вставить(Выборка.ВидРасчета, ДанныеПоМесяцам);
		КонецЦикла;
		ДанныеПоСотрудникам.Вставить(Выборка.Сотрудник, ДанныеПоВидамРасчета);
	КонецЦикла;
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		КоэффициентИндексации = 1;
		ДанныеПоВидамРасчета = ДанныеПоСотрудникам[СтрокаРасчета.Сотрудник];
		Если ДанныеПоВидамРасчета <> Неопределено Тогда
			ДанныеПоМесяцам = ДанныеПоВидамРасчета[СтрокаРасчета.ВидРасчета];
			Если ДанныеПоМесяцам <> Неопределено Тогда
				ДанныеМесяца = ДанныеПоМесяцам[НачалоМесяца(СтрокаРасчета.ДатаНачала)];
				Если ДанныеМесяца <> Неопределено Тогда
					КоэффициентИндексации = ДанныеМесяца;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрокаРасчета.Значение = КоэффициентИндексации;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя КоэффициентИндексацииСохраняемогоДенежногоСодержания.
//
Процедура РассчитатьПоказательКоэффициентИндексацииСохраняемогоДенежногоСодержания(Показатель, СтрокиРасчета, ДокументСсылка)
	
	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		Если СтрокаРасчета.Сторно Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В соответствии с положением о расчете сохраняемого денежного содержания 
	// "В случае если в период сохранения денежного содержания произошло увеличение (индексация)
	// единого денежного вознаграждения, оклада денежного содержания и (или) дополнительных выплат,
	// то исчисленное денежное содержание индексируется со дня вступления в силу
	// решения об увеличении (индексации) и до окончания указанного периода.".
	// Это значит, что необходимо 
	// - выбрать все месяцы, записи за которые рассчитываются в текущей транзакции (отбором по текущему регистратору)
	// - получить коэффициенты индексации за эти месяцы
	// - последовательно начиная с первого месяца агрегировать умножением, получая коэффициент на каждый месяц
	// - сделать все это в разрезе сотрудников.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Начисления.ПериодДействияНачало) КАК Начало,
	|	МАКСИМУМ(Начисления.ПериодДействияКонец) КАК КОНЕЦ
	|ПОМЕСТИТЬ ВТИнтервалНачислений
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Месяц,
	|	Начисления.ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИнтервалНачислений КАК ИнтервалНачислений
	|		ПО (Начисления.ПериодДействия МЕЖДУ ИнтервалНачислений.Начало И ИнтервалНачислений.Конец)
	|			И (Начисления.Регистратор = &Регистратор)
	|			И (Начисления.ИдентификаторСтроки В (&ИдентификаторыСтрок))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.Сотрудник,
	|	ДанныеДляРасчета.Месяц,
	|	ЕСТЬNULL(КоэффициентыИндексации.Коэффициент, 1) КАК КоэффициентИндексации
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентыИндексации
	|		ПО (КоэффициентыИндексации.Сотрудник = ДанныеДляРасчета.Сотрудник)
	|			И (КоэффициентыИндексации.Период = ДанныеДляРасчета.Месяц)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляРасчета.Сотрудник,
	|	ДанныеДляРасчета.Месяц";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ДанныеПоСотрудникам = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		КоэффициентИндексации = 1;
		ДанныеПоМесяцам = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			КоэффициентИндексации = КоэффициентИндексации * Выборка.КоэффициентИндексации;
			ДанныеПоМесяцам.Вставить(Выборка.Месяц, КоэффициентИндексации);
		КонецЦикла;
		ДанныеПоСотрудникам.Вставить(Выборка.Сотрудник, ДанныеПоМесяцам);
	КонецЦикла;
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		КоэффициентИндексации = 1;
		ДанныеПоМесяцам = ДанныеПоСотрудникам[СтрокаРасчета.Сотрудник];
		Если ДанныеПоМесяцам <> Неопределено Тогда
			ДанныеМесяца = ДанныеПоМесяцам[НачалоМесяца(СтрокаРасчета.ДатаНачала)];
			Если ДанныеМесяца <> Неопределено Тогда
				КоэффициентИндексации = ДанныеМесяца;
			КонецЕсли;
		КонецЕсли;
		СтрокаРасчета.Значение = КоэффициентИндексации;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет переопределяемого показателя КоэффициентИндексации.
//
Процедура РассчитатьПоказательКоэффициентИндексации(Показатель, СтрокиРасчета, ДокументСсылка)
	

	Если Показатель <> ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексации") Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем временную таблицу с исходными данными для расчета.
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеДляРасчета.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДляРасчета.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеДляРасчета.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	ИдентификаторыСтрок = Новый Массив;
	СтрокиПоИдентификатору = Новый Соответствие;
	Регистратор = Неопределено;
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		Если СтрокаРасчета.Сторно Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыСтрок.Добавить(СтрокаРасчета.ИдентификаторСтроки);
		СтрокиПоИдентификатору.Вставить(СтрокаРасчета.ИдентификаторСтроки, СтрокаРасчета);
		Регистратор = СтрокаРасчета.Регистратор;
		НоваяСтрока = ДанныеДляРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета); 
		
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляРасчета", ДанныеДляРасчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДанныеДляРасчета.Организация КАК Организация,
	|	ДанныеДляРасчета.Сотрудник КАК Сотрудник,
	|	ДанныеДляРасчета.Подразделение КАК Подразделение,
	|	ДанныеДляРасчета.Должность КАК Должность,
	|	ДанныеДляРасчета.ДатаНачала КАК ДатаНачала,
	|	ДанныеДляРасчета.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	&ДанныеДляРасчета КАК ДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДанныеДляРасчета.Организация КАК Организация,
	|	ДанныеДляРасчета.Сотрудник КАК Сотрудник,
	|	ДанныеДляРасчета.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДляРасчета.Подразделение КАК Подразделение,
	|	ДанныеДляРасчета.Должность КАК Должность,
	|	НАЧАЛОПЕРИОДА(ДанныеДляРасчета.ДатаНачала, МЕСЯЦ) КАК ПериодИндексации
	|ПОМЕСТИТЬ ВТСтрокиРасчета
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	БазовыеПериодыИндексации.Сотрудник,
	|	БазовыеПериодыИндексации.Сотрудник.ФизическоеЛицо	КАК ФизическоеЛицо,
	|	БазовыеПериодыИндексации.Подразделение,
	|	БазовыеПериодыИндексации.Должность,
	|	БазовыеПериодыИндексации.Период
	|ПОМЕСТИТЬ ВТБазовыеПериодыИндексации	
	|ИЗ 
	|	РегистрСведений.БазовыеПериодыИндексации Как БазовыеПериодыИндексации
	|ГДЕ 
	|	(БазовыеПериодыИндексации.Сотрудник.ФизическоеЛицо В (ВЫБРАТЬ ФизическоеЛицо ИЗ ВТСтрокиРасчета)
	|	ИЛИ БазовыеПериодыИндексации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|	И БазовыеПериодыИндексации.Организация В (ВЫБРАТЬ Организация ИЗ ВТСтрокиРасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) КАК ДатаПриема
	|ПОМЕСТИТЬ ВТВыборкаДатыПриема	
	|ИЗ 
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников Как ТекущиеКадровыеДанныеСотрудников
	|ГДЕ 
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСтрокиРасчета)
	|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация В (ВЫБРАТЬ Организация ИЗ ВТСтрокиРасчета)
	|СГРУППИРОВАТЬ ПО 
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СтрокиРасчета.ИдентификаторСтроки,
	|	СтрокиРасчета.ПериодИндексации,
	|	СтрокиРасчета.Сотрудник,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДатыИндексации.Период , МЕСЯЦ))	КАК БазовыйПериодИндексации
	|ПОМЕСТИТЬ ВТВыборкаБазовыеПериодыИндексации	
	|	ИЗ 
	|	ВТСтрокиРасчета Как СтрокиРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеПериодыИндексации Как ДатыИндексации
	|		ПО	(СтрокиРасчета.ФизическоеЛицо = ДатыИндексации.ФизическоеЛицо  
	|		  ИЛИ ДатыИндексации.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))  
	|		И	СтрокиРасчета.Подразделение = ДатыИндексации.Подразделение  
	|		И	СтрокиРасчета.Должность = ДатыИндексации.Должность  
	|   	И	СтрокиРасчета.ПериодИндексации >= НАЧАЛОПЕРИОДА(ДатыИндексации.Период , МЕСЯЦ)
	|СГРУППИРОВАТЬ ПО 
	|	СтрокиРасчета.ИдентификаторСтроки,
	|	СтрокиРасчета.ПериодИндексации,
	|	СтрокиРасчета.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	БазовыеПериодыИндексации.ИдентификаторСтроки,
	|	БазовыеПериодыИндексации.ПериодИндексации,
	|	ЕСТЬNULL(БазовыеПериодыИндексации.БазовыйПериодИндексации, ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДатыПриема.ДатаПриема, МЕСЯЦ), МЕСЯЦ, -1))	КАК БазовыйПериодИндексации
	|	ИЗ 
	|	ВТВыборкаБазовыеПериодыИндексации Как БазовыеПериодыИндексации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыборкаДатыПриема Как ДатыПриема
	|		ПО БазовыеПериодыИндексации.Сотрудник = ДатыПриема.Сотрудник  
	|;";

	Запрос.Текст = ТекстЗапроса;
	ТаблицаДанныеИндексации = Запрос.Выполнить().Выгрузить();
	
	ДанныеПоСтрокам = РасчетКоэффициентовИндексации(ТаблицаДанныеИндексации);
	
///////
	////////// В соответствии с положением о расчете среднего заработка 
	////////// «..если повышение произошло в период сохранения среднего заработка, 
	////////// - часть среднего заработка повышается с даты повышения тарифной ставки...».
	////////// Это значит, что необходимо 
	////////// - выбрать все месяцы, записи за которые рассчитываются в текущей транзакции (отбором по текущему регистратору)
	////////// - получить коэффициенты индексации заработка за эти месяцы
	////////// - последовательно начиная с первого месяца агрегировать умножением, получая коэффициент на каждый месяц
	////////// - сделать все это в разрезе сотрудников.
	////////
	////////МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	////////
	////////ТекстЗапроса = 
	////////"ВЫБРАТЬ
	////////|	МИНИМУМ(Начисления.ПериодДействияНачало) КАК Начало,
	////////|	МАКСИМУМ(Начисления.ПериодДействияКонец) КАК КОНЕЦ
	////////|ПОМЕСТИТЬ ВТИнтервалНачислений
	////////|ИЗ
	////////|	РегистрРасчета.Начисления КАК Начисления
	////////|ГДЕ
	////////|	Начисления.Регистратор = &Регистратор
	////////|	И Начисления.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	////////|;
	////////|
	////////|////////////////////////////////////////////////////////////////////////////////
	////////|ВЫБРАТЬ РАЗЛИЧНЫЕ
	////////|	Начисления.Сотрудник,
	////////|	Начисления.ПериодДействия КАК Месяц,
	////////|	Начисления.ВидРасчета,
	////////|	Начисления.ИдентификаторСтроки
	////////|ПОМЕСТИТЬ ВТДанныеДляРасчета
	////////|ИЗ
	////////|	РегистрРасчета.Начисления КАК Начисления
	////////|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИнтервалНачислений КАК ИнтервалНачислений
	////////|		ПО Начисления.ПериодДействия > ИнтервалНачислений.Начало
	////////|			И Начисления.ПериодДействия <= ИнтервалНачислений.КОНЕЦ
	////////|			И (Начисления.Регистратор = &Регистратор)
	////////|			И (Начисления.ИдентификаторСтроки В (&ИдентификаторыСтрок))
	////////|;
	////////|
	////////|////////////////////////////////////////////////////////////////////////////////
	////////|ВЫБРАТЬ
	////////|	ДанныеДляРасчета.Сотрудник,
	////////|	ДанныеДляРасчета.Месяц,
	////////|	ДанныеДляРасчета.ВидРасчета,
	////////|	ЕСТЬNULL(КоэффициентыИндексации.Коэффициент, 1) КАК КоэффициентИндексации
	////////|ИЗ
	////////|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	////////|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентИндексацииЗаработка КАК КоэффициентыИндексации
	////////|		ПО (КоэффициентыИндексации.Сотрудник = ДанныеДляРасчета.Сотрудник)
	////////|			И (КоэффициентыИндексации.Период = ДанныеДляРасчета.Месяц)
	////////|
	////////|УПОРЯДОЧИТЬ ПО
	////////|	ДанныеДляРасчета.Сотрудник,
	////////|	ДанныеДляРасчета.ВидРасчета,
	////////|	ДанныеДляРасчета.Месяц";
	////////
	////////Запрос = Новый Запрос(ТекстЗапроса);
	////////Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	////////Запрос.УстановитьПараметр("ИдентификаторыСтрок", ИдентификаторыСтрок);
	////////Запрос.УстановитьПараметр("Регистратор", Регистратор);
	////////РезультатЗапроса = Запрос.Выполнить();
	////////
	////////Выборка = РезультатЗапроса.Выбрать();
	////////
	////////ДанныеПоСотрудникам = Новый Соответствие;
	////////Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
	////////	ДанныеПоВидамРасчета = Новый Соответствие;
	////////	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
	////////		КоэффициентИндексации = 1;
	////////		ДанныеПоМесяцам = Новый Соответствие;
	////////		Пока Выборка.Следующий() Цикл
	////////			КоэффициентИндексации = КоэффициентИндексации * Выборка.КоэффициентИндексации;
	////////			ДанныеПоМесяцам.Вставить(Выборка.Месяц, КоэффициентИндексации);
	////////		КонецЦикла;
	////////		ДанныеПоВидамРасчета.Вставить(Выборка.ВидРасчета, ДанныеПоМесяцам);
	////////	КонецЦикла;
	////////	ДанныеПоСотрудникам.Вставить(Выборка.Сотрудник, ДанныеПоВидамРасчета);
	////////КонецЦикла;
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		КоэффициентИндексации = 0;
		Коэффициент = ДанныеПоСтрокам[СтрокаРасчета.ИдентификаторСтроки];
		Если Коэффициент <> Неопределено Тогда
			КоэффициентИндексации = Коэффициент;	
		КонецЕсли;
		СтрокаРасчета.Значение = КоэффициентИндексации;
		СтрокаРасчета.ЗначениеРассчитано = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция РасчетКоэффициентовИндексации(ТаблицаДанныеИндексации, КлючевоеПоле = "ИдентификаторСтроки") Экспорт
	

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаИзмененияПорогаИндексации", РасчетЗарплаты.ДатаИзмененияПорогаИндексации());
	
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ИндексыИнфляции.Период			КАК Период,
	|	ВЫБОР
	|		КОГДА ИндексыИнфляции.Период < &ДатаИзмененияПорогаИндексации
	|		ТОГДА 1.01
	|		ИНАЧЕ 1.03
	|	КОНЕЦ КАК Порог,
	|	ИндексыИнфляции.Индекс			КАК Индекс 
	|ИЗ РегистрСведений.ИндексИнфляции КАК ИндексыИнфляции
	|УПОРЯДОЧИТЬ ПО 
	|	ИндексыИнфляции.Период ВОЗР";
	
	ТаблицаИндексыИнфляции = Запрос.Выполнить().Выгрузить();

	тбКоэффициентыИндексации = Новый ТаблицаЗначений;
	тбКоэффициентыИндексации.Колонки.Добавить("Начало");
	тбКоэффициентыИндексации.Колонки.Добавить("Конец");
	тбКоэффициентыИндексации.Колонки.Добавить("Коэффициент");
	
	ДанныеПоСтрокам = Новый Соответствие;
	
	Для Каждого ИсходныеДанные ИЗ ТаблицаДанныеИндексации Цикл
	
		Коэффициент = 1;
		ТекКоэф = 1;
		
		Если ИсходныеДанные.БазовыйПериодИндексации = Null 
			ИЛИ ИсходныеДанные.БазовыйПериодИндексации >= ИсходныеДанные.ПериодИндексации Тогда
			Коэффициент = 1;
		Иначе	
			
			СтрокаОтбора = Новый Структура("Начало, Конец");
			СтрокаОтбора.Начало = ИсходныеДанные.БазовыйПериодИндексации;
			СтрокаОтбора.Конец  = ИсходныеДанные.ПериодИндексации;
			масКоэффициентыИндексации = тбКоэффициентыИндексации.НайтиСтроки(СтрокаОтбора);
			
			Если масКоэффициентыИндексации.Количество() <> 0 Тогда
				//коэффициент уже рассчитан
				Коэффициент = масКоэффициентыИндексации[0].Коэффициент;
			Иначе
				
				Для каждого ТекущаяСтрока Из ТаблицаИндексыИнфляции Цикл
			
					Если ТекущаяСтрока.Период < ДобавитьМесяц(СтрокаОтбора.Начало,1) Тогда
						Продолжить;
					ИначеЕсли ТекущаяСтрока.Период > ДобавитьМесяц(СтрокаОтбора.Конец,-2) Тогда
						Прервать;			
					КонецЕсли; 
					
					ТекКоэф = ТекКоэф * ТекущаяСтрока.Индекс;
					Если Окр(ТекКоэф, 3) > ТекущаяСтрока.Порог Тогда
						Коэффициент = Коэффициент * Окр(ТекКоэф, 3); 
						ТекКоэф = 1;
					КонецЕсли;
					
				КонецЦикла;
				
				НС = тбКоэффициентыИндексации.Добавить();
				НС.Начало = ИсходныеДанные.БазовыйПериодИндексации;
				НС.Конец  = ИсходныеДанные.ПериодИндексации;
				НС.Коэффициент = Коэффициент;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Коэффициент = Окр(Коэффициент,3) - 1;
		
		ДанныеПоСтрокам.Вставить(ИсходныеДанные[КлючевоеПоле], Коэффициент);
		
	КонецЦикла;
	
	Возврат ДанныеПоСтрокам;
	
КонецФункции	

Функция ТаблицаРасчетаПредопределеннымСпособом()
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПредопределеннымСпособом = Новый ТаблицаЗначений;
	РасчетПредопределеннымСпособом.Колонки.Добавить("СпособРасчета");
	РасчетПредопределеннымСпособом.Колонки.Добавить("ЗаписьРасчета");
	РасчетПредопределеннымСпособом.Колонки.Добавить("ИсходныеДанные");
	
	Возврат РасчетПредопределеннымСпособом;
	
КонецФункции

Функция ТаблицаРасчетаПереопределяемыхПоказателей()
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПереопределяемыхПоказателей = Новый ТаблицаЗначений;
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ФизическоеЛицо");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Организация");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Сотрудник");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Показатель");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ВидРасчета");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ДатаНачала");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ДатаОкончания");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ИдентификаторСтроки");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Регистратор");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("ЗначениеРассчитано", Новый ОписаниеТипов("Булево"));
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Подразделение");
	РасчетПереопределяемыхПоказателей.Колонки.Добавить("Должность");
	Возврат РасчетПереопределяемыхПоказателей;
	
КонецФункции

Функция ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты() Экспорт
	
	ДополнительныеПараметры = Новый Структура(
		"ОкончаниеПериода, 
		|ЗаполнятьНачисленияПоДоговорамПодряда, 
		|РежимДоначисления, 
		|СотрудникиПериодДействияПерерасчет, 
		|МенеджерВременныхТаблиц, 
		|ИспользоватьВоеннуюСлужбу, 
		|НачислениеЗарплатыВоеннослужащим");
		
	ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда = Истина;
	ДополнительныеПараметры.РежимДоначисления = Ложь;
	ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу = Ложь;
	ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим = Ложь;
		
	Возврат ДополнительныеПараметры;
		
КонецФункции

Функция СотрудникиДляНачисленияЗарплаты(Организация, Подразделение, МесяцНачисления, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыСотрудниковДляНачисленияЗарплаты();
	КонецЕсли;
	
	ОкончаниеПериода = ДополнительныеПараметры.ОкончаниеПериода;
	ЗаполнятьНачисленияПоДоговорамПодряда = ДополнительныеПараметры.ЗаполнятьНачисленияПоДоговорамПодряда;
	РежимДоначисления = ДополнительныеПараметры.РежимДоначисления;
	СотрудникиПериодДействияПерерасчет = ДополнительныеПараметры.СотрудникиПериодДействияПерерасчет;
	МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
	ИспользоватьВоеннуюСлужбу = ДополнительныеПараметры.ИспользоватьВоеннуюСлужбу;
	НачислениеЗарплатыВоеннослужащим = ДополнительныеПараметры.НачислениеЗарплатыВоеннослужащим;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация  		= Организация;
	ПараметрыПолученияСотрудников.Подразделение 	= Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода		= МесяцНачисления;
	ПараметрыПолученияСотрудников.ОкончаниеПериода  = ОкончаниеПериода;
	ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = ЗаполнятьНачисленияПоДоговорамПодряда;
	ПараметрыПолученияСотрудников.ПодработкиРаботниковПоТрудовымДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьПодработки");
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда 
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников);
	
	Если РежимДоначисления Тогда
		ПерерасчетЗарплаты.СоздатьВТСотрудникиОрганизацииКПерерасчету(МенеджерВременныхТаблиц, ПараметрыПолученияСотрудников, СотрудникиПериодДействияПерерасчет, "ВТВсеСотрудникиОрганизации");
	Иначе
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников, "ВТВсеСотрудникиОрганизации");
	КонецЕсли;
	
	Если ЗаполнятьНачисленияПоДоговорамПодряда Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ИспользоватьВоеннуюСлужбу", ИспользоватьВоеннуюСлужбу);
		Запрос.УстановитьПараметр("НачислениеЗарплатыВоеннослужащим", НачислениеЗарплатыВоеннослужащим);
		Запрос.УстановитьПараметр("ВидыДоговоровВоеннослужащих", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы());
		Запрос.УстановитьПараметр("Дата", КонецМесяца(МесяцНачисления)); 
		Запрос.УстановитьПараметр("КонецПериодаОборотов", Новый Граница(МесяцНачисления, ВидГраницы.Исключая));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеСотрудникиОрганизации.Период,
		|	ВсеСотрудникиОрганизации.ПериодЗаписи,
		|	ВсеСотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизации.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизацииПредварительно
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК ВсеСотрудникиОрганизации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеДляПодбораСотрудников.Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора
		|ПОМЕСТИТЬ ВТВидыДоговоровСотрудников
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Начало <= &Дата
		|	И (ДанныеДляПодбораСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДляПодбораСотрудников.Окончание >= &Дата)
		|	И НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ
		|	И ДанныеДляПодбораСотрудников.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТВсеСотрудникиОрганизацииПредварительно.Сотрудник
		|			ИЗ
		|				ВТВсеСотрудникиОрганизацииПредварительно КАК ВТВсеСотрудникиОрганизацииПредварительно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДанныеДляПодбораСотрудников.Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВсеСотрудникиОрганизацииПредварительно.Период КАК Период,
		|	ВсеСотрудникиОрганизацииПредварительно.ПериодЗаписи КАК ПериодЗаписи,
		|	ВсеСотрудникиОрганизацииПредварительно.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизацииПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииБезДоговорников
		|ИЗ
		|	ВТВсеСотрудникиОрганизацииПредварительно КАК ВсеСотрудникиОрганизацииПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВсеСотрудникиОрганизацииПредварительно.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УсловияДоговораГПХСрезПоследних.Организация КАК Организация,
		|	УсловияДоговораГПХСрезПоследних.Сотрудник,
		|	УсловияДоговораГПХСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	УсловияДоговораГПХСрезПоследних.Договор КАК Договор,
		|	УсловияДоговораГПХСрезПоследних.Сумма,
		|	УсловияДоговораГПХСрезПоследних.ДатаНачала,
		|	УсловияДоговораГПХСрезПоследних.ДатаОкончания,
		|	УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа
		|ПОМЕСТИТЬ ВТДоговорникиСАвансовымиПлатежами
		|ИЗ
		|	РегистрСведений.УсловияДоговораГПХ.СрезПоследних(КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ), Организация = &Организация) КАК УсловияДоговораГПХСрезПоследних
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаНачала, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|	И КОНЕЦПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) >= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Организация,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияПоДоговорамГПХОбороты.Организация КАК Организация,
		|	НачисленияПоДоговорамГПХОбороты.Договор КАК Договор,
		|	НачисленияПоДоговорамГПХОбороты.СуммаОборот
		|ПОМЕСТИТЬ ВТОборотыПоДоговорам
		|ИЗ
		|	РегистрНакопления.НачисленияПоДоговорамГПХ.Обороты(
		|			,
		|			&КонецПериодаОборотов,
		|			,
		|			(ФизическоеЛицо, Договор) В
		|				(ВЫБРАТЬ
		|					ВТДоговорникиСАвансовымиПлатежами.Договор,
		|					ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
		|				ИЗ
		|					ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами)) КАК НачисленияПоДоговорамГПХОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Организация,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОНЕЦПЕРИОДА(ПлановыеНачисленияПоДоговорам.МесяцНачисления, МЕСЯЦ) КАК Период,
		|	КОНЕЦПЕРИОДА(ПлановыеНачисленияПоДоговорам.МесяцНачисления, МЕСЯЦ) КАК ПериодЗаписи,
		|	ПлановыеНачисленияПоДоговорам.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТДоговорникиБезОтбора
		|ИЗ
		|	РегистрСведений.ПлановыеНачисленияПоДоговорам КАК ПлановыеНачисленияПоДоговорам
		|ГДЕ
		|	ПлановыеНачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления
		|	И ПлановыеНачисленияПоДоговорам.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&МесяцНачисления,
		|	&МесяцНачисления,
		|	ВТДоговорникиСАвансовымиПлатежами.Сотрудник,
		|	ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо
		|ИЗ
		|	ВТДоговорникиСАвансовымиПлатежами КАК ВТДоговорникиСАвансовымиПлатежами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОборотыПоДоговорам КАК ВТОборотыПоДоговорам
		|		ПО ВТДоговорникиСАвансовымиПлатежами.Договор = ВТОборотыПоДоговорам.Договор
		|			И ВТДоговорникиСАвансовымиПлатежами.Организация = ВТОборотыПоДоговорам.Организация
		|			И ВТДоговорникиСАвансовымиПлатежами.ФизическоеЛицо = ВТОборотыПоДоговорам.ФизическоеЛицо
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТДоговорникиСАвансовымиПлатежами.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
		|				ТОГДА ВЫБОР
		|						КОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0) > 0
		|							ТОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ВТДоговорникиСАвансовымиПлатежами.РазмерЕжемесячногоАвансовогоПлатежа > ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
		|						ТОГДА ВТДоговорникиСАвансовымиПлатежами.Сумма - ЕСТЬNULL(ВТОборотыПоДоговорам.СуммаОборот, 0)
		|					ИНАЧЕ ВТДоговорникиСАвансовымиПлатежами.РазмерЕжемесячногоАвансовогоПлатежа
		|				КОНЕЦ
		|		КОНЕЦ > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТДоговорникиБезОтбора.Период,
		|	ВТДоговорникиБезОтбора.ПериодЗаписи,
		|	ВТДоговорникиБезОтбора.Сотрудник КАК Сотрудник,
		|	ВТДоговорникиБезОтбора.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДоговорники
		|ИЗ
		|	ВТДоговорникиБезОтбора КАК ВТДоговорникиБезОтбора
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВТДоговорникиБезОтбора.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТСотрудникиОрганизацииБезДоговорников.Период,
		|	ВТСотрудникиОрганизацииБезДоговорников.ПериодЗаписи,
		|	ВТСотрудникиОрганизацииБезДоговорников.Сотрудник,
		|	ВТСотрудникиОрганизацииБезДоговорников.ФизическоеЛицо,
		|	ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
		|ИЗ
		|	ВТСотрудникиОрганизацииБезДоговорников КАК ВТСотрудникиОрганизацииБезДоговорников
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ВТСотрудникиОрганизацииБезДоговорников.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТСотрудникиОрганизацииДоговорники.Период,
		|	ВТСотрудникиОрганизацииДоговорники.ПериодЗаписи,
		|	ВТСотрудникиОрганизацииДоговорники.Сотрудник,
		|	ВТСотрудникиОрганизацииДоговорники.ФизическоеЛицо,
		|	ВТСотрудникиОрганизацииДоговорники.ВидДоговора
		|ИЗ
		|	ВТСотрудникиОрганизацииДоговорники КАК ВТСотрудникиОрганизацииДоговорники
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ВТСотрудникиОрганизацииДоговорники.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ВТСотрудникиОрганизацииДоговорники.ВидДоговора В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		Запрос.Выполнить();
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ИспользоватьВоеннуюСлужбу", ИспользоватьВоеннуюСлужбу);
		Запрос.УстановитьПараметр("НачислениеЗарплатыВоеннослужащим", НачислениеЗарплатыВоеннослужащим);
		Запрос.УстановитьПараметр("ВидыДоговоровВоеннослужащих", Перечисления.ВидыДоговоровССотрудниками.ВидыДоговоровВоеннойСлужбы());
		Запрос.УстановитьПараметр("Дата", КонецМесяца(МесяцНачисления)); 
				
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВсеСотрудникиОрганизации.Период,
		|	ВсеСотрудникиОрганизации.ПериодЗаписи,
		|	ВсеСотрудникиОрганизации.Сотрудник,
		|	ВсеСотрудникиОрганизации.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизацииПредварительно
		|ИЗ
		|	ВТВсеСотрудникиОрганизации КАК ВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеСотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПодбораСотрудников.Сотрудник,
		|	ДанныеДляПодбораСотрудников.ВидДоговора
		|ПОМЕСТИТЬ ВТВидыДоговоровСотрудников
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Начало <= &Дата
		|	И (ДанныеДляПодбораСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ДанныеДляПодбораСотрудников.Окончание >= &Дата)
		|	И НЕ ДанныеДляПодбораСотрудников.ПоДоговоруГПХ
		|	И ДанныеДляПодбораСотрудников.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТВсеСотрудникиОрганизацииПредварительно.Сотрудник
		|			ИЗ
		|				ВТВсеСотрудникиОрганизацииПредварительно КАК ВТВсеСотрудникиОрганизацииПредварительно)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеСотрудникиОрганизацииПредварительно.Период КАК Период,
		|	ВсеСотрудникиОрганизацииПредварительно.ПериодЗаписи КАК ПериодЗаписи,
		|	ВсеСотрудникиОрганизацииПредварительно.Сотрудник КАК Сотрудник,
		|	ВсеСотрудникиОрганизацииПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора
		|ПОМЕСТИТЬ ВТВсеСотрудникиОрганизации
		|ИЗ
		|	ВТВсеСотрудникиОрганизацииПредварительно КАК ВсеСотрудникиОрганизацииПредварительно
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыДоговоровСотрудников КАК ВТВидыДоговоровСотрудников
		|		ПО ВсеСотрудникиОрганизацииПредварительно.Сотрудник = ВТВидыДоговоровСотрудников.Сотрудник
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользоватьВоеннуюСлужбу
		|				ТОГДА ВЫБОР
		|						КОГДА &НачислениеЗарплатыВоеннослужащим
		|							ТОГДА ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) В (&ВидыДоговоровВоеннослужащих)
		|						ИНАЧЕ НЕ ЕСТЬNULL(ВТВидыДоговоровСотрудников.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) В (&ВидыДоговоровВоеннослужащих)
		|					КОНЕЦ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
		Запрос.Выполнить();	
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	ВТВсеСотрудникиОрганизации КАК Сотрудники";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Сотрудники = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Сотрудники.Добавить(Выборка.Сотрудник);
	КонецЦикла;
	
	Возврат Сотрудники;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение значений специализированных показателей.

// Процедура предназначена для заполнения значений показателей, 
// имеющих нетривиальный и/или предопределенный алгоритм выявления значений.
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПредопределенныхПоказателей(ДополнительныеПоказатели)
	
	ЗаполнитьЗначенияПоказателяДоляНеполногоРабочегоВремени(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателейСтоимостьЧасаДня(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенком(ДополнительныеПоказатели);
	
	
	ЗаполнитьЗначенияПоказателейПроцентДоплатыЗаРаботуВНочноеВечернееВремя(ДополнительныеПоказатели);
	
	ЗаполнитьЗначенияПоказателяБазовыйТарифГруппы(ДополнительныеПоказатели);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.ЗаполнитьЗначенияПоказателяОкладНадбавкаЗаКлассныйЧин(ДополнительныеПоказатели);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ЗаполнитьЗначенияПоказателяОкладЗаВоинскоеСпециальноеЗвание(ДополнительныеПоказатели);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ЗаполнитьЗначенияПоказателейЭффективностиСотрудников(ДополнительныеПоказатели);
	КонецЕсли;	
	
КонецПроцедуры

// Вычисляет значение показателя «Доля неполного рабочего времени».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяДоляНеполногоРабочегоВремени(ДополнительныеПоказатели)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени");

	// Для получения данных запросом создаем таблицу значений с колонками явно заданного типа.
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));

	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = Показатель 
			И Не СтрокаПоказателей.ЗначениеОпределено Тогда
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ДоляНеполногоРабочегоВремени");

	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Период КАК ДатаНачала,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 0) КАК ЗначениеПоказателя
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
				
	Выборка=Запрос.Выполнить().Выбрать();
				
	ОтборСтрок = Новый Структура("Сотрудник, ДатаНачала, ЗначениеОпределено, Показатель");
	ОтборСтрок.Вставить("ЗначениеОпределено", Ложь);
	ОтборСтрок.Вставить("Показатель", Показатель);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		СтрокиПоказателя = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаПоказателя Из СтрокиПоказателя Цикл 		
			СтрокаПоказателя.Значение = Выборка.ЗначениеПоказателя;
			СтрокаПоказателя.ЗначениеОпределено = Истина;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры	

// Вычисляет значение показателя «Оклад тарифной группы».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяБазовыйТарифГруппы(ДополнительныеПоказатели)
	
	Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.БазовыйТарифГруппы");

	// Для получения данных запросом создаем таблицу значений с колонками явно заданного типа.
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));

	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = Показатель 
			И Не СтрокаПоказателей.ЗначениеОпределено Тогда
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ТарифнаяСетка");

	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТКадровыеДанныеСотрудников","Период,ТарифнаяСетка");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияБазовыхТарифов",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра);
	
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Период КАК ДатаНачала,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ЗначенияБазовыхТарифов.Тариф, 0) КАК ЗначениеПоказателя
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияБазовыхТарифовСрезПоследних КАК ЗначенияБазовыхТарифов
		|		ПО КадровыеДанныеСотрудников.ТарифнаяСетка = ЗначенияБазовыхТарифов.ТарифнаяСетка
		|			И КадровыеДанныеСотрудников.Период = ЗначенияБазовыхТарифов.Период";
				
	Выборка=Запрос.Выполнить().Выбрать();
				
	ОтборСтрок = Новый Структура("Сотрудник, ДатаНачала, ЗначениеОпределено, Показатель");
	ОтборСтрок.Вставить("ЗначениеОпределено", Ложь);
	ОтборСтрок.Вставить("Показатель", Показатель);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		СтрокиПоказателя = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаПоказателя Из СтрокиПоказателя Цикл 		
			СтрокаПоказателя.Значение = Выборка.ЗначениеПоказателя;
			СтрокаПоказателя.ЗначениеОпределено = Истина;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры	

// Вычисляет значения показателей «Стоимость часа» и «Стоимость дня» в соответствии 
// с настройками порядка пересчета.
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателейСтоимостьЧасаДня(ДополнительныеПоказатели) Экспорт 
	
	// Вычисляемые показатели
	СтоимостьЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса");
	СтоимостьДняПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня");
	СтоимостьДняЧасаПоказатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса");
	
	ВычисляемыеПоказатели = Новый Массив;
	ВычисляемыеПоказатели.Добавить(СтоимостьЧасаПоказатель);
	ВычисляемыеПоказатели.Добавить(СтоимостьДняПоказатель);
	ВычисляемыеПоказатели.Добавить(СтоимостьДняЧасаПоказатель);
	
	// Для получения данных запросом создаем таблицу значений с колонками явно заданного типа.
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	СтрокиПоИдентификатору = Новый Соответствие;
	
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.ЗначениеОпределено Тогда
			Продолжить;
		КонецЕсли;
		Если ВычисляемыеПоказатели.Найти(СтрокаПоказателей.Показатель) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоказателей);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокиПоИдентификатору.Вставить(ИдентификаторСтроки, СтрокаПоказателей);
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник КАК Сотрудник,
		|	ИсходныеДанные.ДатаНачала КАК ДатаНачала,
		|	ИсходныеДанные.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаНачала,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала КАК Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные";
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	УчетРабочегоВремени.СоздатьВТНормыВремениГрафиковКалендарей(МенеджерВременныхТаблиц);
	
	РасчетЗарплатыРасширенный.СоздатьВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудников(МенеджерВременныхТаблиц);
	РасчетЗарплатыРасширенный.СоздатьВТЗначенияСовокупныхТарифныхСтавокСотрудников(МенеджерВременныхТаблиц);
	
	УстановитьПривилегированныйРежим(Истина);
	ОписательТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Ложь, "ОсновноеНачисление,ДоляНеполногоРабочегоВремени");
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки, ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
		|		ИНАЧЕ ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ КАК ВидТарифнойСтавки,
		|	ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.Значение, 0) КАК ЗначениеПоказателя,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряМесяц, 0) КАК НормаДнейКалендаряМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряМесяц, 0) КАК НормаЧасовКалендаряМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряГод, 0) КАК НормаДнейКалендаряГод,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряГод, 0) КАК НормаЧасовКалендаряГод,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейГрафикаМесяц, 0) КАК НормаДнейГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовГрафикаМесяц, 0) КАК НормаЧасовГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейПолногоГрафикаМесяц, 0) КАК НормаДнейПолногоГрафикаМесяц,
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовПолногоГрафикаМесяц, 0) КАК НормаЧасовПолногоГрафикаМесяц,
		|	ДанныеГрафиков.ГрафикРаботы.ГрафикПолногоРабочегоВремени КАК ГрафикПолногоВремени,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ОсновноеНачисление.УчетВремениВЧасах, ЛОЖЬ) КАК УчетВремениВЧасах,
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени,
		|	МАКСИМУМ(ПоказателиДоляНеполногоРабочегоВремени.Показатель) КАК ПоказательДоляНеполногоРабочегоВремени
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеГрафиков КАК ДанныеГрафиков
		|		ПО (ДанныеГрафиков.Сотрудник = ИсходныеДанные.Сотрудник)
		|			И ИсходныеДанные.ДатаНачала = ДанныеГрафиков.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних КАК ПорядокРасчетаСтоимостиЕдиницыВремени
		|		ПО ИсходныеДанные.Сотрудник = ПорядокРасчетаСтоимостиЕдиницыВремени.Сотрудник
		|			И ИсходныеДанные.ДатаНачала = ПорядокРасчетаСтоимостиЕдиницыВремени.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавокСотрудниковСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавок
		|		ПО ИсходныеДанные.Сотрудник = ЗначенияСовокупныхТарифныхСтавок.Сотрудник
		|			И ИсходныеДанные.ДатаНачала = ЗначенияСовокупныхТарифныхСтавок.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ИсходныеДанные.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ИсходныеДанные.ДатаНачала = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиДоляНеполногоРабочегоВремени
		|		ПО (КадровыеДанныеСотрудников.ОсновноеНачисление = ПоказателиДоляНеполногоРабочегоВремени.Ссылка)
		|			И (ПоказателиДоляНеполногоРабочегоВремени.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени))
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсходныеДанные.ИдентификаторСтроки,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.ДатаНачала,
		|	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки, ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка)
		|		ИНАЧЕ ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки
		|	КОНЕЦ,
		|	ЕСТЬNULL(ЗначенияСовокупныхТарифныхСтавок.Значение, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейКалендаряГод, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовКалендаряГод, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейГрафикаМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовГрафикаМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаДнейПолногоГрафикаМесяц, 0),
		|	ЕСТЬNULL(ДанныеГрафиков.НормаЧасовПолногоГрафикаМесяц, 0),
		|	ДанныеГрафиков.ГрафикРаботы.ГрафикПолногоРабочегоВремени,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.ОсновноеНачисление.УчетВремениВЧасах, ЛОЖЬ),
		|	КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени";

	Выборка = Запрос.Выполнить().Выбрать();
	
	// 1. Получаем значения основного показателя для указанных сотрудников.
	// 2. Для сотрудников, у которых основным показателем является 
	//	- часовая ставка 
	//		* для стоимости часа - не пересчитываем
	//		* для стоимости дня - пересчитываем по соотношению часов к дням
	//	- дневная ставка
	//		* для стоимости часа - пересчитываем по соотношению дней к часам
	//		* для стоимости дня - не пересчитываем
	//	- месячная ставка (оклад)
	//		* для стоимости часа - пересчитываем на основании данных о количестве часов в месяце
	//		* для стоимости дня - пересчитываем на основании данных о количестве дней в месяце.
	
	ПорядокРасчетаПоУмолчанию = НастройкиРасчетаЗарплаты().ПорядокРасчетаСтоимостиЕдиницыВремени;
	
	Пока Выборка.Следующий() Цикл
		СтрокаСотрудника = СтрокиПоИдентификатору[Выборка.ИдентификаторСтроки];
		ПорядокРасчета = ?(ЗначениеЗаполнено(Выборка.ПорядокРасчета), Выборка.ПорядокРасчета, ПорядокРасчетаПоУмолчанию);
		Значение = Неопределено;
		Точность = 0;
		// Требуется рассчитать:
		// - стоимость часа
		Если СтрокаСотрудника.Показатель = СтоимостьЧасаПоказатель 
			Или СтрокаСотрудника.Показатель = СтоимостьДняЧасаПоказатель И СтрокаСотрудника.ВремяВЧасах = Истина Тогда
			Точность = 3;
			// * Если показатель сотрудника - часовая ставка, значение не пересчитываем.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
				Значение = Выборка.ЗначениеПоказателя;
			КонецЕсли;
			// * Если показатель сотрудника - дневная ставка, пересчитываем в часовую.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
				Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
					Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц * Выборка.НормаДнейГрафикаМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
					Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряМесяц * Выборка.НормаДнейКалендаряМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
					Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряГод * Выборка.НормаДнейКалендаряГод;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
				Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
					Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
						Если Выборка.УчетВремениВЧасах Тогда
							Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовПолногоГрафикаМесяц;
							КонецЕсли;
						Иначе 
							Если ЗначениеЗаполнено(Выборка.ПоказательДоляНеполногоРабочегоВремени) И Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 Тогда
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовПолногоГрафикаМесяц;
							ИначеЕсли Не ЗначениеЗаполнено(Выборка.ПоказательДоляНеполногоРабочегоВремени) И Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц;
							КонецЕсли;
						КонецЕсли;
					Иначе 
						Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
							Если ЗначениеЗаполнено(Выборка.ПоказательДоляНеполногоРабочегоВремени) Тогда
								Значение = Выборка.ЗначениеПоказателя * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаЧасовГрафикаМесяц;
							Иначе
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовГрафикаМесяц;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
					Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
					Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаЧасовКалендаряГод * 12;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// - стоимость дня
		Если СтрокаСотрудника.Показатель = СтоимостьДняПоказатель
			Или СтрокаСотрудника.Показатель = СтоимостьДняЧасаПоказатель И СтрокаСотрудника.ВремяВЧасах = Ложь Тогда
			Точность = 2;
			// * Если показатель сотрудника - часовая ставка, пересчитываем в дневную.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
				Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
					Если Выборка.НормаЧасовГрафикаМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовГрафикаМесяц / Выборка.НормаДнейГрафикаМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
					Если Выборка.НормаЧасовКалендаряМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовКалендаряМесяц / Выборка.НормаДнейКалендаряМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
					Если Выборка.НормаЧасовКалендаряГод <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовКалендаряГод / Выборка.НормаДнейКалендаряГод;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// * Если показатель сотрудника - дневная ставка, значение не пересчитываем.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
				Значение = Выборка.ЗначениеПоказателя;
			КонецЕсли;
			// * Если показатель сотрудника - месячная ставка (оклад), пересчитываем в часовую.
			Если Выборка.ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда
				Если ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника Тогда
					Если ЗначениеЗаполнено(Выборка.ГрафикПолногоВремени) Тогда 
						Если Выборка.НормаЧасовПолногоГрафикаМесяц <> 0 И Выборка.НормаДнейГрафикаМесяц <> 0 Тогда
							Значение = Выборка.ЗначениеПоказателя * Выборка.НормаЧасовГрафикаМесяц 
								/ Выборка.НормаЧасовПолногоГрафикаМесяц / Выборка.НормаДнейГрафикаМесяц;
						КонецЕсли;
					Иначе 
						Если Выборка.НормаДнейГрафикаМесяц <> 0 Тогда
							Если ЗначениеЗаполнено(Выборка.ПоказательДоляНеполногоРабочегоВремени) Тогда
								Значение = Выборка.ЗначениеПоказателя * Выборка.ДоляНеполногоРабочегоВремени / Выборка.НормаДнейГрафикаМесяц;
							Иначе
								Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейГрафикаМесяц;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря Тогда
					Если Выборка.НормаДнейКалендаряМесяц <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейКалендаряМесяц;
					КонецЕсли;
				ИначеЕсли ПорядокРасчета = Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению Тогда
					Если Выборка.НормаДнейКалендаряГод <> 0 Тогда
						Значение = Выборка.ЗначениеПоказателя / Выборка.НормаДнейКалендаряГод * 12;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если удалось рассчитать значение - заполняем.
		Если Значение <> Неопределено Тогда
			СтрокаСотрудника.Значение = Окр(Значение, Точность);
			СтрокаСотрудника.ЗначениеОпределено = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет значение показателя типа ЧислоЗависящееОтСтажа.
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ДополнительныеПоказатели)
	
	// Вычисляемые типы показателей.
	ТипПоказателяЧислоЗависящееОтСтажа = ПредопределенноеЗначение("Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа");
	
	// Получаем дополнительные реквизиты показателей.
	РеквизитыПоказателей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
								ОбщегоНазначения.ВыгрузитьКолонку(ДополнительныеПоказатели, "Показатель", Истина), 
							"ВидСтажа, ТипПоказателя");
	
	// Для получения данных запросом создаем таблицу значений с колонками явно заданного типа.
	ИсходныеДанные = ПустаяТаблицаИсходныеДанныеДляПолученияЗначенийПоказателейТипаЧислоЗависящихОтСтажа();
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.ЗначениеОпределено Тогда
			Продолжить;
		КонецЕсли;
		РеквизитыПоказателя = РеквизитыПоказателей[СтрокаПоказателей.Показатель];
		Если РеквизитыПоказателя.ТипПоказателя <> ТипПоказателяЧислоЗависящееОтСтажа Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = СтрокаПоказателей.Сотрудник;
		НоваяСтрока.ДатаНачала = СтрокаПоказателей.ДатаНачала;
		НоваяСтрока.Показатель = СтрокаПоказателей.Показатель;
		НоваяСтрока.ВидСтажа = РеквизитыПоказателя.ВидСтажа;
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = РезультатЗапросаЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ИсходныеДанные);
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ОтборСтрок = Новый Структура("Сотрудник, Показатель, ДатаНачала, ЗначениеОпределено");
	ОтборСтрок.Вставить("ЗначениеОпределено", Ложь);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		СтрокиПоказателяСотрудника = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаПоказателяСотрудника Из СтрокиПоказателяСотрудника Цикл
			СтрокаПоказателяСотрудника.Значение = Выборка.ЗначениеПоказателя;
			СтрокаПоказателяСотрудника.ЗначениеОпределено = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет значение показателя «Размер пособия по уходу за ребенком до трех лет».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателяРазмерПособияПоУходуЗаРебенком(ДополнительныеПоказатели)
	
	РазмерПособияДоТрехЛет = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РазмерПособияПоУходуЗаРебенкомДоТрехЛет");
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ДобавленныеДаты = Новый Соответствие;
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель = РазмерПособияДоТрехЛет 
			И Не СтрокаПоказателей.ЗначениеОпределено 
			И ДобавленныеДаты[СтрокаПоказателей.ДатаНачала] = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), СтрокаПоказателей);
			ДобавленныеДаты.Вставить(СтрокаПоказателей.ДатаНачала, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Если строк с искомым показателем не нашлось - ничего не запрашиваем.
	Если ИсходныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.ДатаНачала КАК Период
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"РазмерыГосударственныхПособий",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИсходныеДанные"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмерПособия.Период,
	|	РазмерПособия.ПоУходуЗаРебенкомДоТрехЛет
	|ИЗ
	|	ВТРазмерыГосударственныхПособийСрезПоследних КАК РазмерПособия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазмерыПособий = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РазмерыПособий.Вставить(Выборка.Период, Выборка.ПоУходуЗаРебенкомДоТрехЛет);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Показатель", РазмерПособияДоТрехЛет); 
	
	НайденныеСтроки = ДополнительныеПоказатели.НайтиСтроки(ОтборСтрок);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Значение = РазмерыПособий[НайденнаяСтрока.ДатаНачала];
		НайденнаяСтрока.ЗначениеОпределено = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет значения показателей «Процент доплаты за работу в ночное время» и «Процент доплаты за работу в вечернее
// время».
//
// Параметры:
// - ДополнительныеПоказатели - таблица исходных данных для заполнения документа.
//
Процедура ЗаполнитьЗначенияПоказателейПроцентДоплатыЗаРаботуВНочноеВечернееВремя(ДополнительныеПоказатели)
	
	ПроцентДоплатыЗаНочные = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВНочноеВремя");
	ПроцентДоплатыЗаВечерние = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаРаботуВВечернееВремя");

	Для Каждого СтрокаТаблицы Из ДополнительныеПоказатели Цикл
		Если ЗначениеЗаполнено(ПроцентДоплатыЗаНочные) И СтрокаТаблицы.Показатель = ПроцентДоплатыЗаНочные Тогда
			СтруктураЗначений = ЗарплатаКадрыРасширенныйПовтИсп.ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(СтрокаТаблицы.Организация);
			СтрокаТаблицы.Значение = СтруктураЗначений.ПроцентДоплатыЗаРаботуВНочноеВремя;
			СтрокаТаблицы.ЗначениеОпределено = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроцентДоплатыЗаВечерние) И СтрокаТаблицы.Показатель = ПроцентДоплатыЗаВечерние Тогда
			СтруктураЗначений = ЗарплатаКадрыРасширенныйПовтИсп.ПроцентДоплатыЗаРаботуВНочноеВечернееВремя(СтрокаТаблицы.Организация);
			СтрокаТаблицы.Значение = СтруктураЗначений.ПроцентДоплатыЗаРаботуВВечернееВремя;
			СтрокаТаблицы.ЗначениеОпределено = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Запрашивает значения показателей удержаний. 
// Заполняет таблицу УдержанияЗаПериод строками удержаний и значениями показателей.
//
// Параметры:
//	МенеджерВременныхТаблиц - ожидается таблица ВТУдержанияЗаПериод с колонками
//		- ФизическоеЛицо,
//		- ДатаНачала,
//		- ДатаОкончания,
//		- Удержание,
//		- ДокументОснование,
//		- Используется
//	УдержанияЗаПериод - таблица значений.
//	Организация
//
Процедура ЗаполнитьЗначенияПоказателейУдержаний(МенеджерВременныхТаблиц, УдержанияЗаПериод, Организация, СозданныеВТ = Неопределено, РежимНачисления = Неопределено)
	
	Если СозданныеВТ = Неопределено Тогда
		СозданныеВТ = Новый Массив;
	КонецЕсли;
	
	Если УдержанияЗаПериод = Неопределено Тогда
		УдержанияЗаПериод = ПустаяТаблицаУдержанияДокумента();
	КонецЕсли;
	
	Если РежимНачисления <> Перечисления.РежимНачисленияЗарплаты.ОкончательныйРасчет Тогда
		ИсполнительныеЛисты.ОтобратьУдержанияВыполняемыеДоОкончательногоРасчета(МенеджерВременныхТаблиц, СозданныеВТ);
	КонецЕсли;
	
	// Получение значений показателей.
	ЗначенияПоказателейУдержаний(МенеджерВременныхТаблиц, Организация, СозданныеВТ);
	
	Если СозданныеВТ.Найти("ВТЗначенияПоказателейУдержаний") = Неопределено Тогда
		// Нет удержаний, показатели не запрашивались.
		Возврат;
	КонецЕсли;
	
	// Запрашиваем показатели удержаний предопределенным способом, чтобы корректно «склеивать» строки.
	ИсполнительныеЛисты.СоздатьВТПоказателиУдержанийПоИсполнительнымДокументам(МенеджерВременныхТаблиц, СозданныеВТ);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УдержанияЗаПериод.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(УдержанияЗаПериод.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	УдержанияЗаПериод.ДатаНачала,
		|	УдержанияЗаПериод.ДатаОкончания,
		|	УдержанияЗаПериод.Удержание КАК Удержание,
		|	ВидыУдержаний.КатегорияУдержания КАК КатегорияУдержания,
		|	УдержанияЗаПериод.ПорядокУдержания КАК ПорядокУдержания,
		|	УдержанияЗаПериод.ДокументОснование КАК ДокументОснование,
		|	ВидыУдержаний.Рассчитывается КАК УдержаниеРассчитывается,
		|	УдержанияЗаПериод.Размер КАК Размер,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Получатель КАК Получатель,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.ПлатежныйАгент КАК ПлатежныйАгент,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.ТарифПлатежногоАгента КАК ТарифПлатежногоАгента,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.СпособРасчета,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.ВидБазы,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Процент,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Сумма,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Числитель,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Знаменатель,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.Предел,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.ПрожиточныйМинимум,
		|	ПоказателиУдержанийПоИсполнительнымДокументам.УчитыватьБольничныеЛисты,
		|	УдержанияЗаПериод.Показатель,
		|	УдержанияЗаПериод.КоличествоПоказателей,
		|	УдержанияЗаПериод.НомерПоказателя КАК НомерПоказателя,
		|	УдержанияЗаПериод.Значение
		|ИЗ
		|	ВТЗначенияПоказателейУдержаний КАК УдержанияЗаПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК ВидыУдержаний
		|		ПО (ВидыУдержаний.Ссылка = УдержанияЗаПериод.Удержание)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказателиУдержанийПоИсполнительнымДокументам КАК ПоказателиУдержанийПоИсполнительнымДокументам
		|		ПО (ПоказателиУдержанийПоИсполнительнымДокументам.ИсполнительныйДокумент = УдержанияЗаПериод.ДокументОснование)
		|			И (ПоказателиУдержанийПоИсполнительнымДокументам.Период = УдержанияЗаПериод.ДатаНачала)
		|			И (ПоказателиУдержанийПоИсполнительнымДокументам.КатегорияУдержания = ВидыУдержаний.КатегорияУдержания)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ПорядокУдержания,
		|	Удержание,
		|	ДокументОснование,
		|	УдержанияЗаПериод.ДатаНачала,
		|	НомерПоказателя";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Обходя результат, «склеиваем» заранее избыточно «разрезанные» строки, если в них одинаковые значения во всех
	// колонках.
	// Прежде всего составляем из нескольких отдельных строк (для каждого показателя) одну структуру, 
	// затем сверяем ее поля с значениями предыдущей строки.
	
	// Создаем структуру, идентичную строке таблицы значений.
	СтруктураСтроки = Новый Структура;
	Для Каждого Колонка Из УдержанияЗаПериод.Колонки Цикл
		СтруктураСтроки.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
	КонецЦикла;
	
	ПредыдущаяСтрока = Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураСтроки);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
		Если ЗначениеЗаполнено(Выборка.КоличествоПоказателей) Тогда
			ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Выборка.Показатель);
			ДанныеСтроки["Показатель1"] = Выборка.Показатель;
			ДанныеСтроки["Значение1"] = Выборка.Значение;
			ДанныеСтроки["ТочностьПоказателя1"] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
			ДанныеСтроки["ПредставлениеПоказателя1"] = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
			Для НомерПоказателя = 2 По Выборка.КоличествоПоказателей Цикл
				Выборка.Следующий();
				ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Выборка.Показатель);
				ДанныеСтроки["Показатель" + НомерПоказателя] = Выборка.Показатель;
				ДанныеСтроки["Значение" + НомерПоказателя] = Выборка.Значение;
				ДанныеСтроки["ТочностьПоказателя" + НомерПоказателя] = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо["Точность"]);
				ДанныеСтроки["ПредставлениеПоказателя" + НомерПоказателя] = ?(ЗначениеЗаполнено(ПоказательИнфо["КраткоеНаименование"]), ПоказательИнфо["КраткоеНаименование"], ПоказательИнфо["Наименование"]);
			КонецЦикла;
		КонецЕсли;
		Если Не Выборка.УдержаниеРассчитывается Тогда 
			ДанныеСтроки["Результат"] = Выборка.Размер;
		КонецЕсли;
		
		ДобавлятьНовуюСтроку = Истина;
		Если ПредыдущаяСтрока <> Неопределено Тогда
			ДобавлятьНовуюСтроку = Ложь;
			ИгнорируемыеКолонки = ИгнорируемыеКолонкиСравненияПриЗаполненииУдержаний(Выборка.КатегорияУдержания);
			Для Каждого Колонка Из УдержанияЗаПериод.Колонки Цикл
				Если ИгнорируемыеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если ПредыдущаяСтрока[Колонка.Имя] <> ДанныеСтроки[Колонка.Имя] 
					И (ЗначениеЗаполнено(ПредыдущаяСтрока[Колонка.Имя]) Или ЗначениеЗаполнено(ДанныеСтроки[Колонка.Имя])) Тогда
					ДобавлятьНовуюСтроку = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ДобавлятьНовуюСтроку Тогда
			// добавляем новую строку
			НоваяСтрока = УдержанияЗаПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
			ПредыдущаяСтрока = НоваяСтрока;
		Иначе
			// продлеваем предыдущую
			ПредыдущаяСтрока.ДатаОкончания = ДанныеСтроки.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция предназначена для получения значений показателей 
// удержаний сотрудников.
//
Процедура ЗначенияПоказателейУдержаний(МенеджерВременныхТаблиц, Организация, СозданныеВТ = Неопределено, ИзвестныеЗначенияПоказателей = Неопределено)
	
	Если СозданныеВТ = Неопределено Тогда
		СозданныеВТ = Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанияЗаПериод.ФизическоеЛицо,
		|	УдержанияЗаПериод.Удержание,
		|	УдержанияЗаПериод.ДокументОснование,
		|	УдержанияЗаПериод.ДатаНачала КАК Период,
		|	ДОБАВИТЬКДАТЕ(УдержанияЗаПериод.ДатаНачала, ДЕНЬ, 1) КАК ДатаНачала,
		|	УдержанияЗаПериод.ДатаОкончания
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод
		|ГДЕ
		|	УдержанияЗаПериод.Используется";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	СоздатьВТЗначенийПериодическихПоказателейФизическихЛиц(МенеджерВременныхТаблиц, СозданныеВТ);
	
	// «Общие» показатели (по подразделению и по организации) получаем по основному месту работы.
	// Для этого составляем массив физических лиц, получаем крайние даты периодов.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанияЗаПериод.ФизическоеЛицо,
		|	УдержанияЗаПериод.ДатаНачала,
		|	УдержанияЗаПериод.ДатаОкончания
		|ИЗ
		|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивФизическихЛиц = Новый Массив;
	НачалоПериода = Неопределено;
	ОкончаниеПериода = Неопределено;
	Пока Выборка.Следующий() Цикл
		МассивФизическихЛиц.Добавить(Выборка.ФизическоеЛицо);
		Если НачалоПериода = Неопределено Тогда
			НачалоПериода = Выборка.ДатаНачала;
		КонецЕсли;
		Если ОкончаниеПериода = Неопределено Тогда
			ОкончаниеПериода = Выборка.ДатаОкончания;
		КонецЕсли;
		НачалоПериода = Мин(НачалоПериода, Выборка.ДатаНачала);
		ОкончаниеПериода = Макс(ОкончаниеПериода, Выборка.ДатаОкончания);
	КонецЦикла;
	
	Если МассивФизическихЛиц.Количество() = 0 Тогда
		// Нет ни одного физического лица.
		Возврат;
	КонецЕсли;
	
	// Обращаемся к кадровому учету для получения основных сотрудников физических лиц.
	КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, Истина, МассивФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеСотрудники.Сотрудник
		|ИЗ
		|	ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники";
	
	МассивСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.Организация  		= Организация;
	ПараметрыПолученияРабочихМест.НачалоПериода		= НачалоПериода;
	ПараметрыПолученияРабочихМест.ОкончаниеПериода  = ОкончаниеПериода;
	ПараметрыПолученияРабочихМест.СписокСотрудников = МассивСотрудников;
		
	// Для основных сотрудников получаем данные рабочих мест.
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получаем организации и подразделения для выявления общих показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаСотрудников.Период,
		|	РабочиеМестаСотрудников.Сотрудник,
		|	РабочиеМестаСотрудников.ФизическоеЛицо,
		|	РабочиеМестаСотрудников.Организация,
		|	РабочиеМестаСотрудников.Подразделение
		|ПОМЕСТИТЬ ВТШтатныеСотрудники
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРабочиеМестаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШтатныеСотрудники.Период,
		|	ШтатныеСотрудники.Сотрудник,
		|	ШтатныеСотрудники.ФизическоеЛицо,
		|	ШтатныеСотрудники.Организация,
		|	ШтатныеСотрудники.Подразделение
		|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
		|ИЗ
		|	ВТШтатныеСотрудники КАК ШтатныеСотрудники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыДГПХ.ДатаНачала,
		|	ПериодыДГПХ.Сотрудник,
		|	ПериодыДГПХ.ФизическоеЛицо,
		|	ПериодыДГПХ.Организация,
		|	ПериодыДГПХ.Подразделение
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДГПХ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ПО (ФизическиеЛицаПериоды.ФизическоеЛицо = ПериодыДГПХ.ФизическоеЛицо)
		|			И ПериодыДГПХ.ДатаНачала <= ФизическиеЛицаПериоды.ДатаОкончания
		|			И ПериодыДГПХ.ДатаОкончания >= ФизическиеЛицаПериоды.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтатныеСотрудники КАК ШтатныеСотрудники
		|		ПО (ШтатныеСотрудники.ФизическоеЛицо = ПериодыДГПХ.ФизическоеЛицо)
		|ГДЕ
		|	ШтатныеСотрудники.ФизическоеЛицо ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТШтатныеСотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеСотрудники.ФизическоеЛицо,
		|	РабочиеМеста.Период,
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Подразделение
		|ПОМЕСТИТЬ ВТРабочиеМестаФизическихЛиц
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники
		|		ПО РабочиеМеста.Сотрудник = ОсновныеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМеста.Организация,
		|	РабочиеМеста.Подразделение,
		|	ФизическиеЛицаПериоды.Период КАК ДатаНачала,
		|	ФизическиеЛицаПериоды.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОрганизацииПодразделения
		|ИЗ
		|	ВТРабочиеМестаФизическихЛиц КАК РабочиеМеста
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
		|		ПО (ФизическиеЛицаПериоды.ФизическоеЛицо = РабочиеМеста.ФизическоеЛицо)";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	// Таблицы периодических показателей организации.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииПодразделения",
			"Организация"),
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения");
	
	// Таблицы периодических показателей подразделения.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииПодразделения",
			"Подразделение"),
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения");
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиПроизвольнойФормулы.Ссылка КАК Удержание,
		|	ПоказателиПроизвольнойФормулы.Показатель,
		|	ПоказателиПроизвольнойФормулы.НомерСтроки
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ
		|	ПланВидовРасчета.Удержания.Показатели КАК ПоказателиПроизвольнойФормулы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержанияЗаПериод КАК УдержанияЗаПериод
		|		ПО (УдержанияЗаПериод.Удержание = ПоказателиПроизвольнойФормулы.Ссылка)
		|ГДЕ
		|	ПоказателиПроизвольнойФормулы.ИспользоватьПриРасчете
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдержанияЗаПериод.ФизическоеЛицо,
		|	УдержанияЗаПериод.ДатаНачала,
		|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК КадроваяИсторияСотрудниковПериод
		|ПОМЕСТИТЬ ВТДатыКадровойИстории
		|ИЗ
		|	ВТУдержанияЗаПериод КАК УдержанияЗаПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудники
		|		ПО УдержанияЗаПериод.ФизическоеЛицо = ОсновныеСотрудники.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИсторияСотрудников
		|		ПО (КадроваяИсторияСотрудников.Сотрудник = ОсновныеСотрудники.Сотрудник)
		|			И (КадроваяИсторияСотрудников.Период <= УдержанияЗаПериод.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияЗаПериод.ФизическоеЛицо,
		|	УдержанияЗаПериод.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Интервалы.ФизическоеЛицо,
		|	НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ) КАК Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Размер,
		|	ПоказателиУдержания.Показатель,
		|	ПоказателиУдержания.Показатель.НазначениеПоказателя КАК НазначениеПоказателя,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейСотрудников.Период) КАК ЗначенияПериодическихПоказателейСотрудниковПериод,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейПодразделений.Период) КАК ЗначенияПериодическихПоказателейПодразделенийПериод,
		|	МАКСИМУМ(ЗначенияПериодическихПоказателейОрганизаций.Период) КАК ЗначенияПериодическихПоказателейОрганизацийПериод
		|ПОМЕСТИТЬ ВТИнтервалыИДатыСрезов
		|ИЗ
		|	ВТУдержанияЗаПериод КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыКадровойИстории КАК ДатыКадровойИстории
		|		ПО (ДатыКадровойИстории.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ДатыКадровойИстории.ДатаНачала = Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаФизическихЛиц КАК КадроваяИсторияСотрудников
		|		ПО Интервалы.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо
		|			И (ДатыКадровойИстории.ФизическоеЛицо = КадроваяИсторияСотрудников.ФизическоеЛицо)
		|			И (ДатыКадровойИстории.КадроваяИсторияСотрудниковПериод = КадроваяИсторияСотрудников.Период)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиУдержания
		|		ПО (ПоказателиУдержания.Удержание = Интервалы.Удержание)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
		|		ПО (ЗначенияПериодическихПоказателейСотрудников.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияПериодическихПоказателейСотрудников.ДокументОснование = Интервалы.ДокументОснование)
		|			И (ЗначенияПериодическихПоказателейСотрудников.Показатель = ПоказателиУдержания.Показатель)
		|			И (ЗначенияПериодическихПоказателейСотрудников.Период <= Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения КАК ЗначенияПериодическихПоказателейПодразделений
		|		ПО (ЗначенияПериодическихПоказателейПодразделений.Подразделение = КадроваяИсторияСотрудников.Подразделение)
		|			И (ЗначенияПериодическихПоказателейПодразделений.Показатель = ПоказателиУдержания.Показатель)
		|			И (ЗначенияПериодическихПоказателейПодразделений.Период <= Интервалы.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения КАК ЗначенияПериодическихПоказателейОрганизаций
		|		ПО (ЗначенияПериодическихПоказателейОрганизаций.Организация = КадроваяИсторияСотрудников.Организация)
		|			И (ЗначенияПериодическихПоказателейОрганизаций.Показатель = ПоказателиУдержания.Показатель)
		|			И (ЗначенияПериодическихПоказателейОрганизаций.Период <= Интервалы.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Размер,
		|	ПоказателиУдержания.Показатель,
		|	КадроваяИсторияСотрудников.Организация,
		|	КадроваяИсторияСотрудников.Подразделение,
		|	ПоказателиУдержания.Показатель.НазначениеПоказателя";
		
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель,
		|	ЗначенияРазовыхФизическиеЛица.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхФизическиеЛица
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияРазовыхФизическиеЛица
		|		ПО (ЗначенияРазовыхФизическиеЛица.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхФизическиеЛица.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхФизическиеЛица.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = ЗначенияРазовыхФизическиеЛица.Сотрудник)
		|			И (Сотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Интервалы.Подразделение,
		|	Интервалы.Месяц,
		|	Интервалы.Показатель,
		|	ЗначенияРазовыхПодразделения.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхПодразделения
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияРазовыхПодразделения
		|		ПО (ЗначенияРазовыхПодразделения.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияРазовыхПодразделения.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.Показатель,
		|	ЗначенияРазовыхОрганизации.Значение
		|ПОМЕСТИТЬ ВТЗначенияРазовыхОрганизации
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияРазовыхОрганизации
		|		ПО (ЗначенияРазовыхОрганизации.ПериодДействия = Интервалы.Месяц)
		|			И (ЗначенияРазовыхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхОрганизации.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель,
		|	СУММА(ЗначенияОперативныхФизическиеЛица.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхФизическиеЛица
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияОперативныхФизическиеЛица
		|		ПО (ЗначенияОперативныхФизическиеЛица.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхФизическиеЛица.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхФизическиеЛица.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.Ссылка = ЗначенияОперативныхФизическиеЛица.Сотрудник)
		|			И (Сотрудники.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель,
		|	СУММА(ЗначенияОперативныхПодразделения.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхПодразделения
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений КАК ЗначенияОперативныхПодразделения
		|		ПО (ЗначенияОперативныхПодразделения.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияОперативныхПодразделения.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляПодразделения))
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель,
		|	СУММА(ЗначенияОперативныхОрганизации.Значение) КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияОперативныхОрганизации
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций КАК ЗначенияОперативныхОрганизации
		|		ПО (ЗначенияОперативныхОрганизации.Период МЕЖДУ Интервалы.ДатаНачала И Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхОрганизации.Показатель = Интервалы.Показатель)
		|			И (Интервалы.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляОрганизации))
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.Месяц,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Показатель";
		
	Запрос.Выполнить();
		
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Размер,
		|	ПоказателиУдержания.Показатель,
		|	ПоказателиУдержания.НомерСтроки КАК НомерПоказателя,
		|	Удержания.РеквизитДопУпорядочивания КАК ПорядокУдержания,
		|	Удержания.КоличествоПоказателейИспользуемыхПриРасчете КАК КоличествоПоказателей,
		|	ВЫБОР
		|		КОГДА НЕ СУММА(ЗначенияПериодическихПоказателейСотрудников.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияПериодическихПоказателейСотрудников.Значение)
		|		КОГДА НЕ СУММА(ЗначенияПериодическихПоказателейПодразделений.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияПериодическихПоказателейПодразделений.Значение)
		|		КОГДА НЕ СУММА(ЗначенияПериодическихПоказателейОрганизаций.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияПериодическихПоказателейОрганизаций.Значение)
		|		КОГДА НЕ СУММА(ЗначенияРазовыхФизическиеЛица.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияРазовыхФизическиеЛица.Значение)
		|		КОГДА НЕ СУММА(ЗначенияРазовыхПодразделения.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияРазовыхПодразделения.Значение)
		|		КОГДА НЕ СУММА(ЗначенияРазовыхОрганизации.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияРазовыхОрганизации.Значение)
		|		КОГДА НЕ СУММА(ЗначенияОперативныхФизическиеЛица.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияОперативныхФизическиеЛица.Значение)
		|		КОГДА НЕ СУММА(ЗначенияОперативныхПодразделения.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияОперативныхПодразделения.Значение)
		|		КОГДА НЕ СУММА(ЗначенияОперативныхОрганизации.Значение) ЕСТЬ NULL 
		|			ТОГДА СУММА(ЗначенияОперативныхОрганизации.Значение)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Значение,
		|	ВЫБОР
		|		КОГДА СУММА(ЗначенияПериодическихПоказателейСотрудников.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияПериодическихПоказателейПодразделений.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияПериодическихПоказателейОрганизаций.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияРазовыхФизическиеЛица.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияРазовыхПодразделения.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияРазовыхОрганизации.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияОперативныхФизическиеЛица.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияОперативныхПодразделения.Значение) ЕСТЬ NULL 
		|				И СУММА(ЗначенияОперативныхОрганизации.Значение) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗначениеОпределено
		|ПОМЕСТИТЬ ВТЗначенияПоказателейУдержаний
		|ИЗ
		|	ВТИнтервалыИДатыСрезов КАК Интервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиУдержания
		|		ПО (ПоказателиУдержания.Удержание = Интервалы.Удержание)
		|			И (ПоказателиУдержания.Показатель = Интервалы.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
		|		ПО Интервалы.Удержание = Удержания.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения КАК ЗначенияПериодическихПоказателейСотрудников
		|		ПО Интервалы.ФизическоеЛицо = ЗначенияПериодическихПоказателейСотрудников.ФизическоеЛицо
		|			И Интервалы.ДокументОснование = ЗначенияПериодическихПоказателейСотрудников.ДокументОснование
		|			И (ПоказателиУдержания.Показатель = ЗначенияПериодическихПоказателейСотрудников.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейСотрудниковПериод = ЗначенияПериодическихПоказателейСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделенийСрезИДвижения КАК ЗначенияПериодическихПоказателейПодразделений
		|		ПО Интервалы.Подразделение = ЗначенияПериодическихПоказателейПодразделений.Подразделение
		|			И (ПоказателиУдержания.Показатель = ЗначенияПериодическихПоказателейПодразделений.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейПодразделенийПериод = ЗначенияПериодическихПоказателейПодразделений.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизацийСрезИДвижения КАК ЗначенияПериодическихПоказателейОрганизаций
		|		ПО Интервалы.Организация = ЗначенияПериодическихПоказателейОрганизаций.Организация
		|			И (ПоказателиУдержания.Показатель = ЗначенияПериодическихПоказателейОрганизаций.Показатель)
		|			И Интервалы.ЗначенияПериодическихПоказателейОрганизацийПериод = ЗначенияПериодическихПоказателейОрганизаций.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхФизическиеЛица КАК ЗначенияРазовыхФизическиеЛица
		|		ПО (ЗначенияРазовыхФизическиеЛица.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияРазовыхФизическиеЛица.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхФизическиеЛица.Удержание = Интервалы.Удержание)
		|			И (ЗначенияРазовыхФизическиеЛица.Показатель = Интервалы.Показатель)
		|			И (ЗначенияРазовыхФизическиеЛица.ДокументОснование = Интервалы.ДокументОснование)
		|			И (ЗначенияРазовыхФизическиеЛица.Месяц = Интервалы.Месяц)
		|			И (ЗначенияРазовыхФизическиеЛица.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияРазовыхФизическиеЛица.ДатаОкончания = Интервалы.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхПодразделения КАК ЗначенияРазовыхПодразделения
		|		ПО (ЗначенияРазовыхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияРазовыхПодразделения.Месяц = Интервалы.Месяц)
		|			И (ЗначенияРазовыхПодразделения.Показатель = Интервалы.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияРазовыхОрганизации КАК ЗначенияРазовыхОрганизации
		|		ПО (ЗначенияРазовыхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияРазовыхОрганизации.Месяц = Интервалы.Месяц)
		|			И (ЗначенияРазовыхОрганизации.Показатель = Интервалы.Показатель)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхФизическиеЛица КАК ЗначенияОперативныхФизическиеЛица
		|		ПО (ЗначенияОперативныхФизическиеЛица.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияОперативныхФизическиеЛица.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхФизическиеЛица.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхФизическиеЛица.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхФизическиеЛица.Месяц = Интервалы.Месяц)
		|			И (ЗначенияОперативныхФизическиеЛица.Показатель = Интервалы.Показатель)
		|			И (ЗначенияОперативныхФизическиеЛица.Удержание = Интервалы.Удержание)
		|			И (ЗначенияОперативныхФизическиеЛица.ДокументОснование = Интервалы.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхПодразделения КАК ЗначенияОперативныхПодразделения
		|		ПО (ЗначенияОперативныхПодразделения.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияОперативныхПодразделения.Подразделение = Интервалы.Подразделение)
		|			И (ЗначенияОперативныхПодразделения.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхПодразделения.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхПодразделения.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхПодразделения.Месяц = Интервалы.Месяц)
		|			И (ЗначенияОперативныхПодразделения.Показатель = Интервалы.Показатель)
		|			И (ЗначенияОперативныхПодразделения.Удержание = Интервалы.Удержание)
		|			И (ЗначенияОперативныхПодразделения.ДокументОснование = Интервалы.ДокументОснование)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияОперативныхОрганизации КАК ЗначенияОперативныхОрганизации
		|		ПО (ЗначенияОперативныхОрганизации.ФизическоеЛицо = Интервалы.ФизическоеЛицо)
		|			И (ЗначенияОперативныхОрганизации.Организация = Интервалы.Организация)
		|			И (ЗначенияОперативныхОрганизации.ДатаНачала = Интервалы.ДатаНачала)
		|			И (ЗначенияОперативныхОрганизации.ДатаОкончания = Интервалы.ДатаОкончания)
		|			И (ЗначенияОперативныхОрганизации.Месяц = Интервалы.Месяц)
		|			И (ЗначенияОперативныхОрганизации.Показатель = Интервалы.Показатель)
		|			И (ЗначенияОперативныхОрганизации.Удержание = Интервалы.Удержание)
		|			И (ЗначенияОперативныхОрганизации.ДокументОснование = Интервалы.ДокументОснование)
		|
		|СГРУППИРОВАТЬ ПО
		|	Интервалы.ФизическоеЛицо,
		|	Интервалы.Организация,
		|	Интервалы.Подразделение,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания,
		|	Интервалы.Удержание,
		|	Интервалы.ДокументОснование,
		|	Интервалы.Размер,
		|	Удержания.РеквизитДопУпорядочивания,
		|	ПоказателиУдержания.Показатель,
		|	Удержания.КоличествоПоказателейИспользуемыхПриРасчете,
		|	ПоказателиУдержания.НомерСтроки";
	
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);	
	
	СозданныеВТ.Добавить("ВТЗначенияПоказателейУдержаний");	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции.

Процедура СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(МенеджерВременныхТаблиц, ИсходныеДанные, ИмяВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа = "ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа") Экспорт
	
	ИмяВТИсходныеДанные = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТИсходныеДанные");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.Сотрудник КАК Сотрудник,
	|	ИсходныеДанные.ВидСтажа КАК ВидСтажа,
	|	ИсходныеДанные.ДатаНачала КАК Дата,
	|	ИсходныеДанные.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидСтажа,
	|	Дата,
	|	Сотрудник";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИсходныеДанные", ИмяВТИсходныеДанные);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ИмяВТСтажиСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСтажиСотрудников");
	КадровыйУчетРасширенный.СоздатьВТСтажиСотрудников(МенеджерВременныхТаблиц, , ИмяВТИсходныеДанные, ИмяВТСтажиСотрудников);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.Сотрудник КАК Сотрудник,
	|	ИсходныеДанные.Дата КАК ДатаНачала,
	|	ИсходныеДанные.Показатель КАК Показатель,
	|	СтажСотрудников.РазмерМесяцев КАК РазмерМесяцев,
	|	МАКСИМУМ(ШкалаОценкиСтажа.ЗначениеПоказателя) КАК МаксимальноеЗначениеПоказателя
	|ПОМЕСТИТЬ ВТСтажСотрудниковДляРасчетаПоказателей
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажиСотрудников КАК СтажСотрудников
	|		ПО ИсходныеДанные.Сотрудник = СтажСотрудников.Сотрудник
	|			И ИсходныеДанные.ВидСтажа = СтажСотрудников.ВидСтажа
	|			И ИсходныеДанные.Дата = СтажСотрудников.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
	|		ПО ИсходныеДанные.Показатель = ШкалаОценкиСтажа.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.Дата,
	|	ИсходныеДанные.Показатель,
	|	СтажСотрудников.РазмерМесяцев
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
	|	ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраница,
	|	ШкалаОценкиСтажа.ЗначениеПоказателя,
	|	МАКСИМУМ(ЕСТЬNULL(ШкалаОценкиСтажаНижняяГраница.ВерхняяГраницаИнтервалаСтажа, 0)) КАК НижняяГраница
	|ПОМЕСТИТЬ ВТИнтервалыСтажаПоказателя
	|ИЗ
	|	ВТСтажСотрудниковДляРасчетаПоказателей КАК СтажСотрудниковДляРасчетаПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажаНижняяГраница
	|			ПО ШкалаОценкиСтажа.Ссылка = ШкалаОценкиСтажаНижняяГраница.Ссылка
	|				И (ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа > ШкалаОценкиСтажаНижняяГраница.ВерхняяГраницаИнтервалаСтажа
	|					ИЛИ ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0)
	|		ПО СтажСотрудниковДляРасчетаПоказателей.Показатель = ШкалаОценкиСтажа.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
	|	ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа,
	|	ШкалаОценкиСтажа.ЗначениеПоказателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтажСотрудниковДляРасчетаПоказателей.Сотрудник,
	|	СтажСотрудниковДляРасчетаПоказателей.ДатаНачала,
	|	СтажСотрудниковДляРасчетаПоказателей.Показатель,
	|	ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) КАК ЗначениеПоказателя,
	|	ИнтервалыСтажаПоказателя.ВерхняяГраница,
	|	ИнтервалыСтажаПоказателя.НижняяГраница,
	|	СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтажСотрудниковДляРасчетаПоказателей.МаксимальноеЗначениеПоказателя, 0) > 0
	|				И ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) >= ЕСТЬNULL(СтажСотрудниковДляРасчетаПоказателей.МаксимальноеЗначениеПоказателя, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДостигнутоМаксимальноеЗначение
	|ПОМЕСТИТЬ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа
	|ИЗ
	|	ВТСтажСотрудниковДляРасчетаПоказателей КАК СтажСотрудниковДляРасчетаПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажаПоказателя КАК ИнтервалыСтажаПоказателя
	|		ПО СтажСотрудниковДляРасчетаПоказателей.Показатель = ИнтервалыСтажаПоказателя.Показатель
	|			И СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев >= ИнтервалыСтажаПоказателя.НижняяГраница
	|			И (ИнтервалыСтажаПоказателя.ВерхняяГраница = 0
	|				ИЛИ СтажСотрудниковДляРасчетаПоказателей.РазмерМесяцев < ИнтервалыСтажаПоказателя.ВерхняяГраница)
	|ГДЕ
	|	ЕСТЬNULL(ИнтервалыСтажаПоказателя.ЗначениеПоказателя, 0) <> 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИсходныеДанные", ИмяВТИсходныеДанные);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСтажиСотрудников", ИмяВТСтажиСотрудников);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа", ИмяВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТСтажСотрудниковДляРасчетаПоказателей");
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(ТекстЗапроса, "ВТИнтервалыСтажаПоказателя");
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(МенеджерВременныхТаблиц, ИсходныеДанные, ИмяВТПроцентСевернойНадбавкиСотрудников = "ВТПроцентСевернойНадбавкиСотрудников") Экспорт
	
	ИмяВТСотрудникиПериоды = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСотрудникиПериоды");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.ДатаНачала КАК Период,
		|	ИсходныеДанные.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Выполнить();
	
	ОписательТаблиц = КадровыйУчетРасширенный.ОписательВременныхТаблицДляСоздатьВТПроцентСевернойНадбавкиСотрудников(
		МенеджерВременныхТаблиц,
		ИмяВТСотрудникиПериоды,
		ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	КадровыйУчетРасширенный.СоздатьВТПроцентСевернойНадбавкиСотрудников(ОписательТаблиц);	
	
КонецПроцедуры

Функция РезультатЗапросаЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(Запрос.МенеджерВременныхТаблиц, ИсходныеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.Сотрудник,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ДатаНачала,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.Показатель,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ЗначениеПоказателя,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ВерхняяГраница,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.НижняяГраница,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.РазмерМесяцев,
		|	ЗначенияПоказателейТипаЧислоЗависящееОтСтажа.ДостигнутоМаксимальноеЗначение
		|ИЗ
		|	ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейТипаЧислоЗависящееОтСтажа";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаЗначенийПоказателяПроцентСевернойНадбавки(ИсходныеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(Запрос.МенеджерВременныхТаблиц, ИсходныеДанные);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК ДатаНачала,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки КАК ЗначениеПоказателя,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение КАК ДостигнутоМаксимальноеЗначение
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиСотрудников";
	
	Запрос.Текст  = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ДополнительныеПараметрыРасчетаНачислений()
	
	ДополнительныеПараметры = Новый Структура(
		"Организация,
		|МесяцНачисления,
		|ДокументСсылка,
		|НаборыЗаписей,
		|ИдентификаторСтроки,
		|ДанныеФормыОбъект,
		|КоличествоПоказателей,
		|ИзвестныеЗначенияПоказателей,
		|ИзвестныеЗначенияПоказателейПоОснованиям,
		|ДанныеРаспределенияПоТерриториямУсловиямТруда,
		|ОбщиеЗначения,
		|ВызыватьИсключение,
		|АннулироватьЗапись");
		
	ДополнительныеПараметры.НаборыЗаписей =	ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	ДополнительныеПараметры.ВызыватьИсключение = Истина;
	ДополнительныеПараметры.АннулироватьЗапись = Ложь;
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СведенияОбУдержаниях(Форма) Экспорт
	
	ДанныеОбУдержаниях = Новый Структура;
	ДанныеОбУдержаниях.Вставить("Удержания", Форма.Объект.Удержания.Выгрузить());
	
	Если Форма.Объект.Свойство("ПогашениеЗаймов") Тогда
		ДанныеОбУдержаниях.Вставить("ПогашениеЗаймов", Форма.Объект.ПогашениеЗаймов.Выгрузить());
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеОбУдержаниях, Форма.УникальныйИдентификатор);
	
КонецФункции

// Расчет данных для начисления: получение специализированных показателей (таких как время, база и др.), заполнение
// результата.
// Важно. Перед вызовом метода следует начать транзакцию, которую потом отменить. 
//
// Параметры:
//	- ДанныеДляНачисления - коллекция строк с полями.
//		Сотрудник
//		Подразделение
//		Начисление, необязательно, если отсутствует должно быть задано одноименное свойство в структуре ОбщиеЗначения.
//		Сумма
//		ДатаНачала, необязательно, если отсутствует должно быть задано одноименное свойство в структуре ОбщиеЗначения
//		ДатаОкончания, необязательно, если отсутствует должно быть задано одноименное свойство в структуре ОбщиеЗначения
//		ОтработаноДней
//		ОтработаноЧасов
//		НормаДней
//		НормаЧасов
//		ОплаченоДней
//		ОплаченоЧасов
//		ГрафикРаботы
//		ГрафикРаботыНорма
//		ВидУчетаВремени
//		ВремяВЧасах
//		ПериодРегистрацииВремени.
//		ИдентификаторСтрокиВидРасчета - может быть не заполнен
//	- ДокументСсылка
//	- Организация
//	- МесяцНачисления
//	- ДанныеФормыОбъект
//	- КоличествоПоказателей
//	- ИзвестныеЗначенияПоказателей - необязательный, таблица значений с значениями показателей, 
//		которые уже известны, и именно их нужно использовать при расчете.
//	- ОбщиеЗначения - Коллекция общих значений для всех строк.
//	- ВызыватьИсключение - булево, если Истина, то в случае невозможности рассчитать запись по формуле будет вызвано
//	                       исключение,  в противном случае, результату просто будет установлено значение 0.
//
Процедура РассчитатьНачисления(ДанныеДляНачисления, ПараметрыРасчета)
	
	Если ДанныеДляНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПараметрыРасчета.Организация;
	МесяцНачисления = ПараметрыРасчета.МесяцНачисления;
	ДокументСсылка = ПараметрыРасчета.ДокументСсылка;
	НаборыЗаписей = ПараметрыРасчета.НаборыЗаписей;
	ДанныеФормыОбъект = ПараметрыРасчета.ДанныеФормыОбъект;
	КоличествоПоказателей = ПараметрыРасчета.КоличествоПоказателей;
	ИзвестныеЗначенияПоказателей = ПараметрыРасчета.ИзвестныеЗначенияПоказателей;
	ИзвестныеЗначенияПоказателейПоОснованиям = ПараметрыРасчета.ИзвестныеЗначенияПоказателейПоОснованиям;
	ДанныеРаспределенияПоТерриториямУсловиямТруда = ПараметрыРасчета.ДанныеРаспределенияПоТерриториямУсловиямТруда;
	ОбщиеЗначения = ПараметрыРасчета.ОбщиеЗначения;
	ВызыватьИсключение = ПараметрыРасчета.ВызыватьИсключение;
	АннулироватьЗапись = ПараметрыРасчета.АннулироватьЗапись;
	
	ИспользоватьРаспределениеПоТерриториямУсловиямТруда = ЗарплатаКадрыРасширенный.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
	
	// Определим количество показателей в переданных данных.
	Если КоличествоПоказателей = Неопределено Тогда
		КоличествоПоказателей = 0;
		Для Каждого Колонка Из ДанныеДляНачисления.Колонки Цикл
			Если Лев(Колонка.Имя, 10) = "Показатель" Тогда
				НомерПоказателя = Число(Сред(Колонка.Имя, 11));
				КоличествоПоказателей = Макс(НомерПоказателя, КоличествоПоказателей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВременнаяСсылка = НаборыЗаписей.Начисления.Отбор.Регистратор.Значение;
	
	Начисления = ПустаяТаблицаНачисления();
		
	// Специализированные показатели рассчитываются отдельно.
	РасчетПереопределяемыхПоказателей = ТаблицаРасчетаПереопределяемыхПоказателей();

	// Для расчета 
	// - раскладываем строки расчета в соответствии с очередностью в отдельные таблицы с одинаковой структурой
	// - всем строкам присваиваем идентификатор, идентификатор заполняем также в исходной строке
	// - составляем соответствия по идентификатору строк исходной и новых таблиц для быстрого поиска
	
	СтрокиРасчетаПоИдентификатору = Новый Соответствие;
	СтрокиТаблицыПоИдентификатору = Новый Соответствие;
	
	// Соответствие строк распределения.
	СтрокиРаспределенияПоИдентификатору = Новый Соответствие;
	
	// Соответствие, где ключ очередность расчета, а значение - отдельная таблица начислений.
	СтрокиРасчетаПоОчередности = Новый Соответствие;
	МассивОчередности = Новый Массив;
	
	// Отдельно все строки расчета собираем в массив для регистрации набора записей.
	СтрокиРасчета = Новый Массив;
	
	ИсходныеДанныеПоИдентификаторуСтроки = Новый Соответствие;
	ИзвестныеЗначенияПоИдентификаторуСтроки = Новый Соответствие;
	
	СтрокиРасчетаПереопределяемыхПоказателей = Новый Соответствие;
	
	// Собираем сотрудников для получения физических лиц и строки, в которых затем их нужно заполнить.
	СотрудникиЗаполнениеФизическихЛиц = Новый Массив;
	СтрокиРасчетаЗаполнениеФизическихЛиц = Новый Массив;
	
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаТаблицы Из ДанныеДляНачисления Цикл
		// Определяем вид расчета
		Если ОбщиеЗначения <> Неопределено И ОбщиеЗначения.Свойство("Начисление") Тогда
			Начисление = ОбщиеЗначения.Начисление;
		Иначе
			Начисление = СтрокаТаблицы.Начисление;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Начисление) Тогда 
			Продолжить;
		КонецЕсли;
		// Получаем сведения о виде расчета.
		СведенияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление);
		// Находим таблицу с строками начислений, соответствующих этой очередности, 
		// либо создаем новую, если ее пока не было создано.
		Очередность = СведенияОНачислении.ОчередностьРасчета;
		Начисления = СтрокиРасчетаПоОчередности[Очередность];
		Если Начисления = Неопределено Тогда
			Начисления = ПустаяТаблицаНачисления();
			// Определяем место в упорядоченном массиве очередностей, куда нужно вставить этот элемент.
			Индекс = 0;
			Пока Индекс < МассивОчередности.Количество() Цикл
				Если МассивОчередности[Индекс] > Очередность Тогда
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			МассивОчередности.Вставить(Индекс, Очередность);
			СтрокиРасчетаПоОчередности.Вставить(Очередность, Начисления);
		КонецЕсли;
		// Получили соответствующую таблицу - добавляем строку.
		СтрокаРасчета = Начисления.Добавить();
		// Добавляем строку в массив
		СтрокиРасчета.Добавить(СтрокаРасчета);
		// Заполняем строку
		ЗаполнитьЗначенияСвойств(СтрокаРасчета, СтрокаТаблицы);
		Если ОбщиеЗначения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРасчета, ОбщиеЗначения);
		КонецЕсли;
		СтрокаРасчета.Сумма = СтрокаТаблицы.Результат;
		// Идентифицируем строки...
		СтрокаРасчета.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		// ..И составляем соответствия по идентификаторам для быстрого поиска.
		СтрокиРасчетаПоИдентификатору.Вставить(ИдентификаторСтроки, СтрокаРасчета);
		СтрокиТаблицыПоИдентификатору.Вставить(ИдентификаторСтроки, СтрокаТаблицы);
		// Считываем распределение по территориям условиям труда.
		Если ИспользоватьРаспределениеПоТерриториямУсловиямТруда 
			И ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "РаспределениеПоТерриториямУсловиямТруда") Тогда
			РаспределениеПоТерриториямУсловиямТруда = СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда;
			Если РаспределениеПоТерриториямУсловиямТруда = Неопределено 
				И ДанныеРаспределенияПоТерриториямУсловиямТруда <> Неопределено
				И ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "ИдентификаторСтрокиВидаРасчета") Тогда 
				Отбор = Новый Структура("ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета);
				РаспределениеПоТерриториямУсловиямТруда = ДанныеРаспределенияПоТерриториямУсловиямТруда.НайтиСтроки(Отбор);
			КонецЕсли;
			Если РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда 
				СтрокиРаспределения = Новый Массив;
				Для Каждого СтрокаРаспределения Из РаспределениеПоТерриториямУсловиямТруда Цикл
					ОписаниеСтроки = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
					ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаРаспределения);
					СтрокиРаспределения.Добавить(ОписаниеСтроки);
				КонецЦикла;
				СтрокиРаспределенияПоИдентификатору.Вставить(ИдентификаторСтроки, СтрокиРаспределения);
			КонецЕсли;
		КонецЕсли;
		// Упаковываем показатели
		ПереопределяемыеПоказатели = Новый Массив;
		УпаковатьЗначенияПоказателей(
			СтрокаТаблицы, 
			ИдентификаторСтроки,
			ИсходныеДанныеПоИдентификаторуСтроки, 
			СведенияОНачислении.Показатели, 
			КоличествоПоказателей,
			ПереопределяемыеПоказатели,
			ИзвестныеЗначенияПоказателей,
			ИзвестныеЗначенияПоказателейПоОснованиям, 
			ИзвестныеЗначенияПоИдентификаторуСтроки);
		// Если встречаются переопределяемые показатели, откладываем их в отдельную таблицу.
		МассивСтрокРасчетаПереопределяемыхПоказателей = Новый Массив;
		Для Каждого ПереопределяемыйПоказатель Из ПереопределяемыеПоказатели Цикл
			Если СтрокаТаблицы.ФиксЗаполнение Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПоказателя = РасчетПереопределяемыхПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказателя, СтрокаТаблицы);
			Если ОбщиеЗначения <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ОбщиеЗначения);
				Если ОбщиеЗначения.Свойство("Начисление") Тогда
					СтрокаПоказателя.ВидРасчета = ОбщиеЗначения.Начисление;
				КонецЕсли;
			Иначе
				СтрокаПоказателя.ВидРасчета = СтрокаТаблицы.Начисление;
			КонецЕсли;
			СтрокаПоказателя.Организация = Организация;
			СтрокаПоказателя.Показатель = ПереопределяемыйПоказатель;
			СтрокаПоказателя.ИдентификаторСтроки = ИдентификаторСтроки;
			СтрокаПоказателя.Регистратор = ВременнаяСсылка;
			МассивСтрокРасчетаПереопределяемыхПоказателей.Добавить(СтрокаПоказателя);
		КонецЦикла;
		Если МассивСтрокРасчетаПереопределяемыхПоказателей.Количество() > 0 Тогда
			СтрокиРасчетаПереопределяемыхПоказателей.Вставить(ИдентификаторСтроки, МассивСтрокРасчетаПереопределяемыхПоказателей);
		КонецЕсли;
		// Собираем данные для заполнения физических лиц.
		Если Не ЗначениеЗаполнено(СтрокаРасчета.ФизическоеЛицо) Тогда
			СтрокиРасчетаЗаполнениеФизическихЛиц.Добавить(СтрокаРасчета);
			СотрудникиЗаполнениеФизическихЛиц.Добавить(СтрокаРасчета.Сотрудник);
		КонецЕсли;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	// Заполняем физических лиц
	ЗаполнитьФизическихЛицПоСотрудникам(СтрокиРасчетаЗаполнениеФизическихЛиц, СотрудникиЗаполнениеФизическихЛиц);
		
	// Формируем набор записей регистра расчета теми начислениями, которые требуют записи для расчета (имеют период
	// действия).
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, СтрокиРасчета, , Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Для быстрого поиска составляем также соответствие строк набора записей.
	СтрокиНабораПоИдентификатору = Новый Соответствие;
	Для Каждого СтрокаНабора Из НаборыЗаписей.Начисления Цикл
		СтрокиНабораПоИдентификатору.Вставить(СтрокаНабора.ИдентификаторСтроки, СтрокаНабора);
	КонецЦикла;
	
	// Рассчитываем значения отдельных показателей.
	РассчитатьЗначенияПереопределяемыхПоказателей(РасчетПереопределяемыхПоказателей, ДокументСсылка);
	
	// Расставляем значения переопределяемых показателей в структурах исходных данных.
	Для Каждого СтрокаРасчета Из РасчетПереопределяемыхПоказателей Цикл
		Если СтрокаРасчета.ЗначениеРассчитано Тогда
			ИсходныеДанные = ИзвестныеЗначенияПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
			Если ИсходныеДанные = Неопределено Тогда
				ИсходныеДанные = Новый Структура;
				ИзвестныеЗначенияПоИдентификаторуСтроки.Вставить(СтрокаРасчета.ИдентификаторСтроки, ИсходныеДанные);
			КонецЕсли;
			ИсходныеДанные.Вставить(ЗарплатаКадрыРасширенныйПовтИсп.ИдентификаторПоказателя(СтрокаРасчета.Показатель), СтрокаРасчета.Значение);
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получаем временные таблицы, общие для расчета начислений всех очередностей.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ГрафикРаботы КАК Сотрудник,
		|	Начисления.ПериодДействияНачало КАК Период
		|ПОМЕСТИТЬ ВТИндивидуальныеГрафики
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор = &ВременныйРегистратор
		|				И ВидРасчета.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|				И ГрафикРаботы ССЫЛКА Справочник.Сотрудники) КАК Начисления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременнаяСсылка);
	Запрос.Выполнить();
	
	// Получаем срез общих графиков.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИндивидуальныеГрафики", "Сотрудник");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ГрафикРаботыСотрудников",	МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
		|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	Начисления.ПериодДействия КАК Месяц,
		|	Начисления.ПериодРегистрацииВремени
		|ПОМЕСТИТЬ ВТГрафикиМесяцы
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор = &ВременныйРегистратор
		|	И Начисления.ВидРасчета.ТребуетсяРасчетНормыВремени
		|	И НЕ Начисления.ФиксРасчетВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиМесяцы.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	ГрафикиМесяцы.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикиМесяцы.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	ГрафикиМесяцы.Месяц,
		|	СУММА(ГрафикиРаботы.ОсновноеЗначениеНорма) КАК НормаДней
		|ПОМЕСТИТЬ ВТНормаВремениПредварительно
		|ИЗ
		|	ВТГрафикиМесяцы КАК ГрафикиМесяцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиМесяцы.ГрафикРаботы)
		|			И (ГрафикиРаботы.Месяц = ГрафикиМесяцы.Месяц)
		|			И (НЕ ГрафикиРаботы.ВремяВЧасах)
		|			И (ГрафикиРаботы.ВидУчетаВремени = &РабочееВремя)
		|			И (ГрафикиРаботы.ПериодРегистрации = ГрафикиМесяцы.ПериодРегистрацииВремени)
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиМесяцы.ГрафикРаботы,
		|	ГрафикиМесяцы.ГрафикРаботыНорма,
		|	ГрафикиМесяцы.ПериодРегистрацииВремени,
		|	ГрафикиМесяцы.Месяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиМесяцы.ПериодРегистрацииВремени,
		|	ГрафикиМесяцы.ГрафикРаботы,
		|	ГрафикиМесяцы.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	ГрафикиМесяцы.Месяц,
		|	НормаВремени.НормаДней,
		|	СУММА(ГрафикиРаботы.ОсновноеЗначениеНорма) КАК НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	СУММА(ГрафикиРаботы.ДополнительноеЗначениеНорма) КАК НормаЧасов
		|ПОМЕСТИТЬ ВТНормаВремени
		|ИЗ
		|	ВТГрафикиМесяцы КАК ГрафикиМесяцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.ГрафикРаботы = ГрафикиМесяцы.ГрафикРаботыНорма)
		|			И (ГрафикиРаботы.Месяц = ГрафикиМесяцы.Месяц)
		|			И (НЕ ГрафикиРаботы.ВремяВЧасах)
		|			И (ГрафикиРаботы.ВидУчетаВремени = &РабочееВремя)
		|			И (ГрафикиРаботы.ПериодРегистрации = ГрафикиМесяцы.ПериодРегистрацииВремени)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПредварительно КАК НормаВремени
		|		ПО ГрафикиМесяцы.ГрафикРаботы = НормаВремени.ГрафикРаботы
		|			И ГрафикиМесяцы.ГрафикРаботыНорма = НормаВремени.ГрафикРаботыНорма
		|			И ГрафикиМесяцы.Месяц = НормаВремени.Месяц
		|			И ГрафикиМесяцы.ПериодРегистрацииВремени = НормаВремени.ПериодРегистрацииВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикиМесяцы.ГрафикРаботы,
		|	ГрафикиМесяцы.ГрафикРаботыНорма,
		|	ГрафикиМесяцы.Месяц,
		|	ГрафикиМесяцы.ПериодРегистрацииВремени,
		|	НормаВремени.НормаДней
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФПД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ФПД.ГрафикРаботы,
		|	ФПД.ГрафикРаботыНорма,
		|	ФПД.ВидУчетаВремени,
		|	ФПД.ПериодДействия,
		|	ФПД.ПериодРегистрации,
		|	ФПД.ПериодРегистрацииВремени,
		|	ФПД.ВремяВЧасах,
		|	ФПД.ВидРасчета,
		|	ФПД.ВидРасчета.ТребуетсяРасчетКалендарныхДнейБезПраздников КАК ТребуетсяРасчетКалендарныхДнейБезПраздников,
		|	ФПД.ВидРасчета.ТребуетсяРасчетОтработаноДнейВсего КАК ТребуетсяРасчетОтработаноДнейВсего,
		|	ФПД.ВидРасчета.ТребуетсяРасчетОтработаноЧасовВсего КАК ТребуетсяРасчетОтработаноЧасовВсего,
		|	ФПД.ВидРасчета.СпособВыполненияНачисления КАК СпособВыполненияНачисления,
		|	ФПД.ПериодДействияНачало КАК Начало,
		|	ФПД.ПериодДействияКонец КАК Конец
		|ПОМЕСТИТЬ ВТИнтервалыФПД
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор = &ВременныйРегистратор
		|				И ВидРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать)) КАК ФПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФПД.ГрафикРаботы,
		|	ФПД.ПериодДействия КАК Месяц,
		|	ФПД.ПериодРегистрацииВремени,
		|	МИНИМУМ(ФПД.Начало) КАК МинимальнаяДата,
		|	МАКСИМУМ(ФПД.Конец) КАК МаксимальнаяДата
		|ПОМЕСТИТЬ ВТИсходныеДанныеВремени
		|ИЗ
		|	ВТИнтервалыФПД КАК ФПД
		|
		|СГРУППИРОВАТЬ ПО
		|	ФПД.ГрафикРаботы,
		|	ФПД.ПериодДействия,
		|	ФПД.ПериодРегистрацииВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнтервалыФПД.ИдентификаторСтроки,
		|	СУММА(РАЗНОСТЬДАТ(ИнтервалыФПД.Начало, ИнтервалыФПД.Конец, ДЕНЬ) + 1) КАК КалендарныхДней
		|ПОМЕСТИТЬ ВТКалендарныеДни
		|ИЗ
		|	ВТИнтервалыФПД КАК ИнтервалыФПД
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнтервалыФПД.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПД.ИдентификаторСтроки,
		|	ФПД.Начало,
		|	ЕСТЬNULL(ОбщиеГрафики.ГрафикРаботы.ПроизводственныйКалендарь, ФПД.ГрафикРаботы.ПроизводственныйКалендарь) КАК ПроизводственныйКалендарь
		|ПОМЕСТИТЬ ВТПроизводственныеКалендари
		|ИЗ
		|	ВТИнтервалыФПД КАК ФПД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныеГрафики
		|		ПО (ИндивидуальныеГрафики.Сотрудник = ФПД.ГрафикРаботы)
		|			И (ИндивидуальныеГрафики.Период = ФПД.Начало)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезПоследних КАК ОбщиеГрафики
		|		ПО (ОбщиеГрафики.Сотрудник = ИндивидуальныеГрафики.Сотрудник)
		|			И (ОбщиеГрафики.Период = ФПД.Начало)
		|ГДЕ
		|	ФПД.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеГрафика.ГрафикРаботы,
		|	ДанныеГрафика.Месяц,
		|	ДанныеГрафика.ПериодРегистрации КАК ПериодРегистрацииВремени,
		|	ДанныеГрафика.ВидУчетаВремени,
		|	ДанныеГрафика.Дата,
		|	МАКСИМУМ(ДанныеГрафика.ОсновноеЗначение) КАК Дней,
		|	СУММА(ДанныеГрафика.ДополнительноеЗначение) КАК Часов,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеГрафика.ДополнительноеЗначение > 2
		|				ТОГДА 2
		|			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначение
		|		КОНЕЦ) КАК ЧасовВПределах2Часов
		|ПОМЕСТИТЬ ВТРабочееВремяПоДнямПоВидам
		|ИЗ
		|	ВТИсходныеДанныеВремени КАК ИнтервалыФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ДанныеГрафика
		|		ПО (ДанныеГрафика.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|			И (ДанныеГрафика.Дата МЕЖДУ ИнтервалыФПД.МинимальнаяДата И ИнтервалыФПД.МаксимальнаяДата)
		|			И (ДанныеГрафика.ВремяВЧасах = ЛОЖЬ)
		|			И (ДанныеГрафика.Месяц = ИнтервалыФПД.Месяц)
		|			И (ДанныеГрафика.ПериодРегистрации = ИнтервалыФПД.ПериодРегистрацииВремени)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеГрафика.ГрафикРаботы,
		|	ДанныеГрафика.Месяц,
		|	ДанныеГрафика.ПериодРегистрации,
		|	ДанныеГрафика.ВидУчетаВремени,
		|	ДанныеГрафика.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочееВремяПоДням.ИдентификаторСтроки,
		|	СУММА(РабочееВремяПоДням.Дней) КАК Дней,
		|	СУММА(РабочееВремяПоДням.Часов) КАК Часов,
		|	СУММА(РабочееВремяПоДням.ЧасовВПределах2Часов) КАК ЧасовВПределах2Часов
		|ПОМЕСТИТЬ ВТРабочееВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнтервалыФПД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		МАКСИМУМ(РабочееВремяПоДнямПоВидам.Дней) КАК Дней,
		|		СУММА(РабочееВремяПоДнямПоВидам.Часов) КАК Часов,
		|		СУММА(РабочееВремяПоДнямПоВидам.ЧасовВПределах2Часов) КАК ЧасовВПределах2Часов
		|	ИЗ
		|		ВТИнтервалыФПД КАК ИнтервалыФПД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ПО (ВидыВремени.Ссылка = ИнтервалыФПД.ВидРасчета)
		|				И (ИнтервалыФПД.СпособВыполненияНачисления <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете))
		|				И (ИнтервалыФПД.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочееВремяПоДнямПоВидам КАК РабочееВремяПоДнямПоВидам
		|			ПО (РабочееВремяПоДнямПоВидам.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|				И (РабочееВремяПоДнямПоВидам.Месяц = ИнтервалыФПД.ПериодДействия)
		|				И (РабочееВремяПоДнямПоВидам.ПериодРегистрацииВремени = ИнтервалыФПД.ПериодРегистрацииВремени)
		|				И (РабочееВремяПоДнямПоВидам.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|				И (РабочееВремяПоДнямПоВидам.Дата МЕЖДУ ИнтервалыФПД.Начало И ИнтервалыФПД.Конец)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИнтервалыФПД.ИдентификаторСтроки,
		|		РабочееВремяПоДнямПоВидам.Дата) КАК РабочееВремяПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочееВремяПоДням.ИдентификаторСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнтервалыФПД.ИдентификаторСтроки,
		|	СУММА(РабочееВремяПоДнямПоВидам.Дней),
		|	СУММА(РабочееВремяПоДнямПоВидам.Часов),
		|	СУММА(РабочееВремяПоДнямПоВидам.ЧасовВПределах2Часов)
		|ИЗ
		|	ВТИнтервалыФПД КАК ИнтервалыФПД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочееВремяПоДнямПоВидам КАК РабочееВремяПоДнямПоВидам
		|		ПО (РабочееВремяПоДнямПоВидам.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|			И (ИнтервалыФПД.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|			И (РабочееВремяПоДнямПоВидам.Месяц = ИнтервалыФПД.ПериодДействия)
		|			И (РабочееВремяПоДнямПоВидам.ПериодРегистрацииВремени = ИнтервалыФПД.ПериодРегистрацииВремени)
		|			И (РабочееВремяПоДнямПоВидам.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|			И (РабочееВремяПоДнямПоВидам.Дата МЕЖДУ ИнтервалыФПД.Начало И ИнтервалыФПД.Конец)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнтервалыФПД.ИдентификаторСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РабочееВремяПоДням.ИдентификаторСтроки,
		|	СУММА(РабочееВремяПоДням.Дней),
		|	СУММА(РабочееВремяПоДням.Часов),
		|	СУММА(РабочееВремяПоДням.ЧасовВПределах2Часов)
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнтервалыФПД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		МАКСИМУМ(РабочееВремяПоДнямПоВидам.Дней) КАК Дней,
		|		СУММА(РабочееВремяПоДнямПоВидам.Часов) КАК Часов,
		|		СУММА(РабочееВремяПоДнямПоВидам.ЧасовВПределах2Часов) КАК ЧасовВПределах2Часов
		|	ИЗ
		|		ВТИнтервалыФПД КАК ИнтервалыФПД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ПО (ВидыВремени.Ссылка = ИнтервалыФПД.ВидРасчета)
		|				И (ИнтервалыФПД.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете))
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочееВремяПоДнямПоВидам КАК РабочееВремяПоДнямПоВидам
		|			ПО (РабочееВремяПоДнямПоВидам.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|				И (РабочееВремяПоДнямПоВидам.Месяц = ИнтервалыФПД.ПериодДействия)
		|				И (РабочееВремяПоДнямПоВидам.ПериодРегистрацииВремени = ИнтервалыФПД.ПериодРегистрацииВремени)
		|				И (РабочееВремяПоДнямПоВидам.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|				И (РабочееВремяПоДнямПоВидам.Дата МЕЖДУ ИнтервалыФПД.Начало И ИнтервалыФПД.Конец)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПроизводственныеКалендари КАК ПроизводственныеКалендари
		|			ПО (ПроизводственныеКалендари.ИдентификаторСтроки = ИнтервалыФПД.ИдентификаторСтроки)
		|				И (ПроизводственныеКалендари.Начало = ИнтервалыФПД.Начало)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДатыПраздничныхДней
		|			ПО (ДатыПраздничныхДней.ПроизводственныйКалендарь = ПроизводственныеКалендари.ПроизводственныйКалендарь)
		|				И (ДатыПраздничныхДней.Дата = РабочееВремяПоДнямПоВидам.Дата)
		|				И (ДатыПраздничныхДней.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИнтервалыФПД.ИдентификаторСтроки,
		|		РабочееВремяПоДнямПоВидам.Дата) КАК РабочееВремяПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочееВремяПоДням.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработаноВсего.ИдентификаторСтроки,
		|	СУММА(ОтработаноВсего.Дней) КАК Дней,
		|	СУММА(ОтработаноВсего.Часов) КАК Часов
		|ПОМЕСТИТЬ ВТОтработаноВсего
		|ИЗ
		|	(ВЫБРАТЬ
		|		ИнтервалыФПД.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		ДанныеГрафика.Дата КАК Дата,
		|		МАКСИМУМ(ДанныеГрафика.Дней) КАК Дней,
		|		СУММА(ДанныеГрафика.Часов) КАК Часов
		|	ИЗ
		|		ВТИнтервалыФПД КАК ИнтервалыФПД
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРабочееВремяПоДнямПоВидам КАК ДанныеГрафика
		|			ПО (ДанныеГрафика.ГрафикРаботы = ИнтервалыФПД.ГрафикРаботы)
		|				И (ДанныеГрафика.Дата МЕЖДУ ИнтервалыФПД.Начало И ИнтервалыФПД.Конец)
		|				И (ДанныеГрафика.ВидУчетаВремени.РабочееВремя = ИСТИНА)
		|				И (ДанныеГрафика.Месяц = ИнтервалыФПД.ПериодДействия)
		|				И (ДанныеГрафика.ПериодРегистрацииВремени = ИнтервалыФПД.ПериодРегистрацииВремени)
		|				И (ИнтервалыФПД.ТребуетсяРасчетОтработаноДнейВсего
		|					ИЛИ ИнтервалыФПД.ТребуетсяРасчетОтработаноЧасовВсего)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИнтервалыФПД.ИдентификаторСтроки,
		|		ИнтервалыФПД.ВидРасчета,
		|		ДанныеГрафика.Дата) КАК ОтработаноВсего
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработаноВсего.ИдентификаторСтроки";
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Заполнение распределения по территориям и условиям труда в соответствии СтрокиРаспределенияПоИдентификатору.
	ЗаполнитьРаспределениеПоТерриториямУсловиямТруда(СтрокиРасчетаПоИдентификатору, СтрокиРаспределенияПоИдентификатору, Организация, МесяцНачисления);
	
	// Формируем параметры расчета очередности начислений.
	ПараметрыОчереди = ДополнительныеПараметрыРасчетаОчередиНачислений();
	ПараметрыОчереди.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ПараметрыОчереди.ДанныеФормыОбъект = ДанныеФормыОбъект;
	ПараметрыОчереди.Организация = Организация;
	ПараметрыОчереди.МесяцНачисления = МесяцНачисления;
	ПараметрыОчереди.НаборыЗаписей = НаборыЗаписей; 
	ПараметрыОчереди.ДокументСсылка = ДокументСсылка;
	ПараметрыОчереди.СтрокиРасчетаПоИдентификатору = СтрокиРасчетаПоИдентификатору;
	ПараметрыОчереди.СтрокиРаспределенияПоИдентификатору = СтрокиРаспределенияПоИдентификатору;
	ПараметрыОчереди.ИсходныеДанныеПоИдентификаторуСтроки = ИсходныеДанныеПоИдентификаторуСтроки;
	ПараметрыОчереди.ИзвестныеЗначенияПоИдентификаторуСтроки = ИзвестныеЗначенияПоИдентификаторуСтроки; 
	ПараметрыОчереди.ВызыватьИсключение = ВызыватьИсключение;
	
	// Рассчитываем строки таблицы последовательными порциями в соответствии с очередностью расчета.
	Для Каждого ОчередностьРасчета Из МассивОчередности Цикл
		Начисления = СтрокиРасчетаПоОчередности[ОчередностьРасчета];
		// Расчет
		РассчитатьНачисленияОчередности(ОчередностьРасчета, ПараметрыОчереди);
		// Переносим результат 
		Для Каждого СтрокаРасчета Из Начисления Цикл
			// В набор записей
			СтрокаНабора = СтрокиНабораПоИдентификатору[СтрокаРасчета.ИдентификаторСтроки];
			Если СтрокаНабора <> Неопределено Тогда
				СтрокаНабора.Результат = СтрокаРасчета.Результат;
				СтрокаНабора.ОтработаноДней = СтрокаРасчета.ОтработаноДней;
				СтрокаНабора.ОтработаноЧасов = СтрокаРасчета.ОтработаноЧасов;
			КонецЕсли;
			// Заполняем поле Сумма для учета начисленной зарплаты.
			СтрокаРасчета.Сумма = СтрокаРасчета.Результат;
			// В исходную таблицу
			СтрокаТаблицы = СтрокиТаблицыПоИдентификатору[СтрокаРасчета.ИдентификаторСтроки];
			ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
			Если Не РасчетВремениЗафиксирован(СтрокаТаблицы) Тогда
				Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "ОтработаноДней") Тогда
					СтрокаТаблицы.ОтработаноДней = СтрокаРасчета.ОтработаноДней;
					СтрокаТаблицы.ОтработаноЧасов = СтрокаРасчета.ОтработаноЧасов;
					СтрокаТаблицы.НормаДней = ИсходныеДанные.НормаДней;
					СтрокаТаблицы.НормаЧасов = ИсходныеДанные.НормаЧасов;
					// Нужно инвертировать знак, если запись не Сторно, но при этом ФиксСторно.
					Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "Сторно") Тогда
						Если Не СтрокаТаблицы.Сторно И СтрокаТаблицы.ФиксСторно Тогда
							СтрокаТаблицы.ОтработаноДней = - СтрокаТаблицы.ОтработаноДней;
							СтрокаТаблицы.ОтработаноЧасов = - СтрокаТаблицы.ОтработаноЧасов;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "ОплаченоДней") Тогда
					СтрокаТаблицы.ОплаченоДней = ИсходныеДанные.ОплаченоДней;
					СтрокаТаблицы.ОплаченоЧасов = ИсходныеДанные.ОплаченоЧасов;
					// Нужно инвертировать знак, если запись не Сторно, но при этом ФиксСторно.
					Если ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "Сторно") Тогда
						Если Не СтрокаТаблицы.Сторно И СтрокаТаблицы.ФиксСторно Тогда
							СтрокаТаблицы.ОплаченоДней = - СтрокаТаблицы.ОплаченоДней;
							СтрокаТаблицы.ОплаченоЧасов = - СтрокаТаблицы.ОплаченоЧасов;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Переносим результаты расчета в коллекцию данных для начисления.
			РаспаковатьЗначенияПоказателей(СтрокаТаблицы, КоличествоПоказателей, ИсходныеДанные);
			ПеренестиРезультатыРасчета(СтрокаТаблицы, ИсходныеДанные, ПараметрыОчереди);
			// Переносим распределение по территориям и условиям труда.
			Если ИспользоватьРаспределениеПоТерриториямУсловиямТруда 
				И ЕстьПолеВСтрокеКоллекции(СтрокаТаблицы, "РаспределениеПоТерриториямУсловиямТруда") Тогда
				СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(Новый Массив);
				МассивСтрок = СтрокиРаспределенияПоИдентификатору[СтрокаТаблицы.ИдентификаторСтрокиВидаРасчета];
				Если МассивСтрок <> Неопределено Тогда
					СтрокиРаспределения = Новый Массив;
					Для Каждого СтрокаРаспределения Из МассивСтрок Цикл
						ОписаниеСтрок = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
						ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределения);
						СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
					КонецЦикла;
					СтрокаТаблицы.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(МассивСтрок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Заполняем регистр расчета Начисления, необходимый для последующих расчетов.
		УстановитьПривилегированныйРежим(Истина);
		НаборыЗаписей.Начисления.Записать(Истина, Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
	Если АннулироватьЗапись Тогда
		// Если расчет производится в неотменяемой транзакции, 
		// то единственный способ восстановить состояние ИБ - это очистить записанные в процессе расчета наборы.
		НаборыЗаписей.Начисления.Очистить();
		НаборыЗаписей.Начисления.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительныеПараметрыРасчетаОчередиНачислений()
	
	ДополнительныеПараметры = Новый Структура(
		"Организация,
		|МесяцНачисления,
		|МенеджерВременныхТаблиц,
		|НаборыЗаписей, 
		|ДокументСсылка,
		|ДанныеФормыОбъект,
		|СтрокиРасчетаПоИдентификатору,
		|СтрокиРаспределенияПоИдентификатору,
		|ИсходныеДанныеПоИдентификаторуСтроки,
		|ИзвестныеЗначенияПоИдентификаторуСтроки, 
		|ВызыватьИсключение");
		
	Возврат ДополнительныеПараметры;
		
КонецФункции

Процедура РассчитатьНачисленияОчередности(ОчередностьРасчета, ПараметрыОчереди)
	
	
	МенеджерВременныхТаблиц = ПараметрыОчереди.МенеджерВременныхТаблиц;
	
	ИсключаемыйРегистратор = ПараметрыОчереди.ДокументСсылка;
	ВременныйРегистратор = ПараметрыОчереди.НаборыЗаписей["Начисления"].Отбор.Регистратор.Значение;
	РегистраторыРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВременныйРегистратор);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременныйРегистратор", ВременныйРегистратор);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ПериодДействия,
		|	Начисления.ГрафикРаботы,
		|	Начисления.ГрафикРаботыНорма,
		|	Начисления.ПериодРегистрацииВремени,
		|	Начисления.ИдентификаторСтроки,
		|	ВидыРасчета.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
		|	ВидыРасчета.СпособРасчета КАК СпособРасчета,
		|	ВидыРасчета.ФормулаРасчета КАК ФормулаРасчета,
		|	ВидыРасчета.ФормулаРасчетаДляВыполнения КАК ФормулаРасчетаДляВыполнения,
		|	Начисления.ВремяВЧасах КАК УчетВремениВЧасах,
		|	ВидыРасчета.ТребуетсяРасчетСверхурочных КАК ТребуетсяРасчетСверхурочных,
		|	ВидыРасчета.ТребуетсяРасчетКалендарныхДней КАК ТребуетсяРасчетКалендарныхДней,
		|	ВидыРасчета.ТребуетсяРасчетКалендарныхДнейБезПраздников КАК ТребуетсяРасчетКалендарныхДнейБезПраздников,
		|	ВидыРасчета.ТребуетсяРасчетОтработаноДнейВсего КАК ТребуетсяРасчетОтработаноДнейВсего,
		|	ВидыРасчета.ТребуетсяРасчетОтработаноЧасовВсего КАК ТребуетсяРасчетОтработаноЧасовВсего,
		|	ВидыРасчета.ТребуетсяРасчетНормыВремени,
		|	ВидыРасчета.ЗачетОтработанногоВремени,
		|	ВидыРасчета.ЗачетНормыВремени,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ЧасовоеНеотработанное)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВнутрисменноеОтклонение,
		|	ВидыРасчета.Рассчитывается
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.ВидРасчета)
		|			И (Начисления.Регистратор = &ВременныйРегистратор)
		|			И (ВидыРасчета.ОчередностьРасчета = &ОчередностьРасчета)";
		
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	СоздатьВТРасчетнаяБазаНачисленийПоРегистраторам(МенеджерВременныхТаблиц, РегистраторыРасчета, ОчередностьРасчета, ИсключаемыйРегистратор);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетнаяБаза.Регистратор,
		|	РасчетнаяБаза.НомерСтроки,
		|	СУММА(РасчетнаяБаза.РезультатБаза) КАК РезультатБаза,
		|	СУММА(РасчетнаяБаза.РезультатДнейБаза) КАК РезультатДнейБаза,
		|	СУММА(РасчетнаяБаза.РезультатЧасовБаза) КАК РезультатЧасовБаза		
		|ПОМЕСТИТЬ ВТНачисленияБаза
		|ИЗ
		|	ВТРасчетнаяБаза КАК РасчетнаяБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетнаяБаза.Регистратор,
		|	РасчетнаяБаза.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.КатегорияНачисления,
		|	Начисления.СпособРасчета КАК СпособРасчета,
		|	Начисления.ФормулаРасчета КАК ФормулаРасчета,
		|	Начисления.ФормулаРасчетаДляВыполнения КАК ФормулаРасчетаДляВыполнения,
		|	Начисления.УчетВремениВЧасах,
		|	Начисления.ТребуетсяРасчетСверхурочных КАК ТребуетсяРасчетСверхурочных,
		|	Начисления.ТребуетсяРасчетКалендарныхДней КАК ТребуетсяРасчетКалендарныхДней,
		|	Начисления.ТребуетсяРасчетКалендарныхДнейБезПраздников КАК ТребуетсяРасчетКалендарныхДнейБезПраздников,
		|	Начисления.ТребуетсяРасчетОтработаноДнейВсего КАК ТребуетсяРасчетОтработаноДнейВсего,
		|	Начисления.ТребуетсяРасчетОтработаноЧасовВсего КАК ТребуетсяРасчетОтработаноЧасовВсего,
		|	Начисления.ЗачетОтработанногоВремени,
		|	Начисления.ЗачетНормыВремени,
		|	Начисления.ВнутрисменноеОтклонение,
		|	Начисления.Рассчитывается,
		|	НачисленияБаза.РезультатБаза КАК РасчетнаяБаза,
		|	НачисленияБаза.РезультатДнейБаза КАК РасчетнаяБазаДней,
		|	НачисленияБаза.РезультатЧасовБаза КАК РасчетнаяБазаЧасов,
		|	ЕСТЬNULL(РабочееВремя.Дней, 0) КАК Дней,
		|	ЕСТЬNULL(РабочееВремя.Часов, 0) КАК Часов,
		|	ЕСТЬNULL(РабочееВремя.ЧасовВПределах2Часов, 0) КАК ЧасовВПределах2Часов,
		|	ОтработаноВсего.Дней КАК ОтработаноДнейВсего,
		|	ОтработаноВсего.Часов КАК ОтработаноЧасовВсего,
		|	НормаВремени.НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	НормаВремени.НормаДней,
		|	НормаВремени.НормаЧасов,
		|	КалендарныеДни.КалендарныхДней
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБаза КАК НачисленияБаза
		|		ПО Начисления.Регистратор = НачисленияБаза.Регистратор
		|			И Начисления.НомерСтроки = НачисленияБаза.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочееВремя КАК РабочееВремя
		|		ПО Начисления.ИдентификаторСтроки = РабочееВремя.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноВсего КАК ОтработаноВсего
		|		ПО Начисления.ИдентификаторСтроки = ОтработаноВсего.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремени КАК НормаВремени
		|		ПО (НормаВремени.ГрафикРаботы = Начисления.ГрафикРаботы)
		|			И (НормаВремени.ГрафикРаботыНорма = Начисления.ГрафикРаботыНорма)
		|			И (НормаВремени.Месяц = Начисления.ПериодДействия)
		|			И (НормаВремени.ПериодРегистрацииВремени = Начисления.ПериодРегистрацииВремени)
		|			И (Начисления.ТребуетсяРасчетНормыВремени)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеДни КАК КалендарныеДни
		|		ПО Начисления.ИдентификаторСтроки = КалендарныеДни.ИдентификаторСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРасчетнаяБаза
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисленияБаза
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Проверим заполненность нормы времени.
	ПараметрыПроверки = УчетРабочегоВремени.ПараметрыДляПроверитьЗаполнениеНормыВремени("ВТНормаВремени", "Месяц");
	УчетРабочегоВремени.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверки, "НормаДней", "ГрафикРаботы");
	УчетРабочегоВремени.ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверки, "НормаДнейПоГрафикуПолногоРабочегоВремени", "ГрафикРаботыНорма");
	УчетРабочегоВремени.ПроверитьЗаполнениеНормыВремени(МенеджерВременныхТаблиц, ПараметрыПроверки);
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	// Для устранения искажения совокупного результата расчета, возникающей в результате округления:
	// - накапливаем по сотруднику и начислению строки, имеющие все параметры расчета (кроме показателей времени) одинаковыми,
	// - вычисляем сумму результата,
	// - вычисляем по формуле начисление по накопленной сумме значений показателей времени,
	// - сравниваем сумму результата и вычисленный по формуле результат,
	// - при наличии расхождения, вычисленный по формуле результат распределяем пропорционально вычисленным отдельно результатам.
	СтрокиПоМесяцам = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаРасчета = ПараметрыОчереди.СтрокиРасчетаПоИдентификатору[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ПараметрыОчереди.ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];
		
		// Дополняем структуру исходных данных автоматически рассчитываемыми показателями.
		ИсходныеДанные.Вставить("СпособРасчета", Выборка.СпособРасчета);
		ИсходныеДанные.Вставить("КатегорияНачисления", Выборка.КатегорияНачисления);
		ИсходныеДанные.Вставить("НормаДнейПоГрафикуПолногоРабочегоВремени", СтрокаРасчета.НормаДнейПоГрафикуПолногоРабочегоВремени);
		ИсходныеДанные.Вставить("ВремяВДнях", СтрокаРасчета.ОтработаноДней);
		ИсходныеДанные.Вставить("ВремяВЧасах", СтрокаРасчета.ОтработаноЧасов);
		ИсходныеДанные.Вставить("ВремяВДняхЧасах", ?(Выборка.УчетВремениВЧасах = Истина, СтрокаРасчета.ОтработаноЧасов, СтрокаРасчета.ОтработаноДней));
		ИсходныеДанные.Вставить("ОтработаноДней", СтрокаРасчета.ОтработаноДней);
		ИсходныеДанные.Вставить("ОтработаноЧасов", СтрокаРасчета.ОтработаноЧасов);
		Если СтрокаРасчета.Сторно Тогда
			ИсходныеДанные.ВремяВДнях = - ИсходныеДанные.ВремяВДнях;
			ИсходныеДанные.ВремяВЧасах = - ИсходныеДанные.ВремяВЧасах;
			ИсходныеДанные.ВремяВДняхЧасах = - ИсходныеДанные.ВремяВДняхЧасах;
			ИсходныеДанные.ОтработаноДней = - ИсходныеДанные.ОтработаноДней;
			ИсходныеДанные.ОтработаноЧасов = - ИсходныеДанные.ОтработаноЧасов;
		КонецЕсли;
		ИсходныеДанные.Вставить("КалендарныеДниМесяца", День(КонецМесяца(СтрокаРасчета.ДатаНачала)));
		ИсходныеДанные.Вставить("КалендарныеДни", 0);
		Если Выборка.ТребуетсяРасчетКалендарныхДнейБезПраздников = Истина Тогда
			ИсходныеДанные.Вставить("КалендарныеДниБезПраздников", 0);
		КонецЕсли;
		ИсходныеДанные.Вставить("ТребуетсяРасчетОтработаноДнейВсего", Выборка.ТребуетсяРасчетОтработаноДнейВсего = Истина);
		ИсходныеДанные.Вставить("ТребуетсяРасчетОтработаноЧасовВсего", Выборка.ТребуетсяРасчетОтработаноЧасовВсего = Истина);
		ИсходныеДанные.Вставить("Рассчитывается", Выборка.Рассчитывается);
		ИсходныеДанные.Вставить("ОтработаноСверхурочно", 0);
		ИсходныеДанные.Вставить("ОтработаноСверхурочноВПределах2Часов", 0);
		ИсходныеДанные.Вставить("УчетВремениВЧасах", Выборка.УчетВремениВЧасах);
		
		// Показатели учета времени обновляем расчетными значениями только в случае, если не установлены ручные значения.
		Если Не РасчетВремениЗафиксирован(СтрокаРасчета) Тогда
			Если Выборка.Дней <> Null Тогда
				ИсходныеДанные.ВремяВДнях = Выборка.Дней;
				ИсходныеДанные.ВремяВЧасах = Выборка.Часов;
				Если Выборка.ТребуетсяРасчетСверхурочных Тогда
					// При расчете сверхурочных учитываем только отработанные часы.
					ИсходныеДанные.ВремяВДнях = 0;
				КонецЕсли;
			КонецЕсли;
			Если Выборка.НормаДней <> Null Тогда
				ИсходныеДанные.НормаДнейПоГрафикуПолногоРабочегоВремени = Выборка.НормаДнейПоГрафикуПолногоРабочегоВремени;
				ИсходныеДанные.НормаДней = Выборка.НормаДней;
				ИсходныеДанные.НормаЧасов = Выборка.НормаЧасов;
			КонецЕсли;
			Если Выборка.ОтработаноДнейВсего <> Null Тогда
				ИсходныеДанные.ОтработаноДней = Выборка.ОтработаноДнейВсего;
			КонецЕсли;
			Если Выборка.ОтработаноЧасовВсего <> Null Тогда
				ИсходныеДанные.ОтработаноЧасов = Выборка.ОтработаноЧасовВсего;
			КонецЕсли;
			Если Выборка.КалендарныхДней <> Null Тогда
				ИсходныеДанные.КалендарныеДни = Выборка.КалендарныхДней;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем значения показателей.
		Если Не ЗначенияПоказателейЗафиксированы(СтрокаРасчета) Тогда
			// Расчетная база
			ИсходныеДанные.Вставить("РасчетнаяБаза", 0);
			Если Выборка.РасчетнаяБаза <> Null Тогда
				ИсходныеДанные.Вставить("РасчетнаяБаза", Окр(Выборка.РасчетнаяБаза, 2));
			КонецЕсли;
			ИсходныеДанные.Вставить("РасчетнаяБазаДней", 0);
			Если Выборка.РасчетнаяБаза <> Null Тогда
				ИсходныеДанные.Вставить("РасчетнаяБазаДней", Окр(Выборка.РасчетнаяБазаДней, 2));
			КонецЕсли;
			ИсходныеДанные.Вставить("РасчетнаяБазаЧасов", 0);
			Если Выборка.РасчетнаяБаза <> Null Тогда
				ИсходныеДанные.Вставить("РасчетнаяБазаЧасов", Окр(Выборка.РасчетнаяБазаЧасов, 2));
			КонецЕсли;
		    // Другие показатели, связанные с расчетом времени.
			Если Выборка.ТребуетсяРасчетСверхурочных Тогда
				ИсходныеДанные.ОтработаноСверхурочно = Выборка.Часов;
				ИсходныеДанные.ОтработаноСверхурочноВПределах2Часов = Выборка.ЧасовВПределах2Часов;
			КонецЕсли;
		КонецЕсли;
		
		// Если какие-то значения заранее известны потребителю, 
		// то нужно использовать именно их.
		ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки = ПараметрыОчереди.ИзвестныеЗначенияПоИдентификаторуСтроки;
		Если ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки <> Неопределено 
			И ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки] <> Неопределено Тогда
			ИзвестныеЗначения = ИзвестныеЗначенияПоказателейПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];
			Для Каждого КлючИЗначение Из ИзвестныеЗначения Цикл
				ИсходныеДанные.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если Не РасчетВремениЗафиксирован(СтрокаРасчета) Тогда
			// Значение производных показателей заполняем уже после заполнения известных значений.
			ИсходныеДанные.ВремяВДняхЧасах = ?(Выборка.УчетВремениВЧасах = Истина, ИсходныеДанные.ВремяВЧасах, ИсходныеДанные.ВремяВДнях);
		КонецЕсли;
		
		// Заполняем поля Оплачено дней, часов.
		// Если определен специализированный показатель, то именно он используется в качестве значения оплаченного времени.
		Если Выборка.ФормулаРасчета = "0" Тогда
			// Время без оплаты
			ИсходныеДанные.ОплаченоДней = 0;
			ИсходныеДанные.ОплаченоЧасов = 0;
		Иначе
			ИсходныеДанные.ОплаченоДней = ИсходныеДанные.ВремяВДнях;
			ИсходныеДанные.ОплаченоЧасов = ИсходныеДанные.ВремяВЧасах;
			Если ИсходныеДанные.Свойство("КоличествоДнейОтпуска") Тогда
				ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КоличествоДнейОтпуска;
				ИсходныеДанные.ОплаченоЧасов = 0;
			ИначеЕсли ИсходныеДанные.Свойство("КоличествоДнейКомпенсации") Тогда
				ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КоличествоДнейКомпенсации;
				ИсходныеДанные.ОплаченоЧасов = 0;
			ИначеЕсли ИсходныеДанные.Свойство("КалендарныеДниБезПраздников") Тогда
				ИсходныеДанные.ОплаченоДней = ИсходныеДанные.КалендарныеДниБезПраздников;
				ИсходныеДанные.ОплаченоЧасов = 0;
			ИначеЕсли ИсходныеДанные.Свойство("ДнейЧасовВыходногоПособия") Тогда
				Если СтрокаРасчета.ВремяВЧасах Тогда
					ИсходныеДанные.ОплаченоДней = 0;
					ИсходныеДанные.ОплаченоЧасов = ИсходныеДанные.ДнейЧасовВыходногоПособия;
				Иначе
					ИсходныеДанные.ОплаченоДней = ИсходныеДанные.ДнейЧасовВыходногоПособия;
					ИсходныеДанные.ОплаченоЧасов = 0;
				КонецЕсли;
			ИначеЕсли Выборка.ТребуетсяРасчетОтработаноДнейВсего = Истина Тогда
				ИсходныеДанные.ОплаченоДней = ИсходныеДанные.ОтработаноДней;
			ИначеЕсли Выборка.ТребуетсяРасчетОтработаноЧасовВсего = Истина Тогда
				ИсходныеДанные.ОплаченоЧасов = ИсходныеДанные.ОтработаноЧасов;
			КонецЕсли;
		КонецЕсли;
		
		РассчитатьСтрокуНачисления(СтрокаРасчета, Выборка.СпособРасчета, ИсходныеДанные, Выборка.ФормулаРасчетаДляВыполнения, Выборка.ФормулаРасчета, РасчетПредопределеннымСпособом, ПараметрыОчереди.ВызыватьИсключение, ПараметрыОчереди.СтрокиРаспределенияПоИдентификатору[Выборка.ИдентификаторСтроки]);
		
		// Заполняем поля отработанного времени.
		Если Не РасчетВремениЗафиксирован(СтрокаРасчета) Тогда
			Если Выборка.ЗачетОтработанногоВремени Или Выборка.ЗачетНормыВремени Тогда
				СтрокаРасчета.ОтработаноДней = ИсходныеДанные.ВремяВДнях;
				СтрокаРасчета.ОтработаноЧасов = ИсходныеДанные.ВремяВЧасах;
				СтрокаРасчета.НормаДнейПоГрафикуПолногоРабочегоВремени = ИсходныеДанные.НормаДнейПоГрафикуПолногоРабочегоВремени;
				СтрокаРасчета.НормаДней = ИсходныеДанные.НормаДней;
				СтрокаРасчета.НормаЧасов = ИсходныеДанные.НормаЧасов;
				Если Выборка.ТребуетсяРасчетОтработаноДнейВсего = Истина Тогда
					// Если используется показатель отработано дней по всем видам времени, 
					//	то именно его используем в качестве отработанного времени.
					СтрокаРасчета.ОтработаноДней = ИсходныеДанные.ОтработаноДней;
				КонецЕсли;
				Если Выборка.ТребуетсяРасчетОтработаноЧасовВсего = Истина Тогда
					// Если используется показатель отработано часов по всем видам времени, 
					//	то именно его используем в качестве отработанного времени.
					СтрокаРасчета.ОтработаноЧасов = ИсходныеДанные.ОтработаноЧасов;
				КонецЕсли;
				// Для отработанного времени - сколько отработано, столько и оплачено.
				Если Выборка.ЗачетОтработанногоВремени Тогда
					ИсходныеДанные.ОплаченоДней = СтрокаРасчета.ОтработаноДней;
					ИсходныеДанные.ОплаченоЧасов = СтрокаРасчета.ОтработаноЧасов;
				КонецЕсли;
				Если СтрокаРасчета.Сторно Тогда
					СтрокаРасчета.ОтработаноДней = - СтрокаРасчета.ОтработаноДней;
					СтрокаРасчета.ОтработаноЧасов = - СтрокаРасчета.ОтработаноЧасов;
				КонецЕсли;
			КонецЕсли;
			Если Выборка.ВнутрисменноеОтклонение Тогда
				СтрокаРасчета.ОтработаноЧасов = ИсходныеДанные.ВремяВЧасах;
				Если СтрокаРасчета.Сторно Тогда
					СтрокаРасчета.ОтработаноЧасов = - СтрокаРасчета.ОтработаноЧасов;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаРасчета.Сторно Тогда
				ИсходныеДанные.ОплаченоДней = - ИсходныеДанные.ОплаченоДней;
				ИсходныеДанные.ОплаченоЧасов = - ИсходныеДанные.ОплаченоЧасов;
			КонецЕсли;
		КонецЕсли;
		
		// Заполняем данные строки для последующей корректировки искажений результата.
		ЗаполнитьДанныеДляКорректировкиИскаженияРезультата(СтрокиПоМесяцам, СтрокаРасчета, ИсходныеДанные, Выборка.ФормулаРасчетаДляВыполнения)
	КонецЦикла;
	
	// Выполняем корректировку строк, в которых возможно искажение результата.
	СкорректироватьИскажениеРезультата(СтрокиПоМесяцам, ПараметрыОчереди.ИсходныеДанныеПоИдентификаторуСтроки);	
	
	// Выполняем расчет предопределенным способом.
	РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, ПараметрыОчереди.НаборыЗаписей, ПараметрыОчереди.ДокументСсылка, ПараметрыОчереди);
	
	// Для строк расчета предопределенным способом нужно инвертировать знак оплаченных дней.
	Для Каждого ОписаниеРасчета Из РасчетПредопределеннымСпособом Цикл
		ЗаписьРасчета = ОписаниеРасчета.ЗаписьРасчета;
		ИсходныеДанные = ОписаниеРасчета.ИсходныеДанные;
		Если ЗаписьРасчета.Сторно Тогда
			ИсходныеДанные.ОплаченоДней = - ИсходныеДанные.ОплаченоДней;
			ИсходныеДанные.ОплаченоЧасов = - ИсходныеДанные.ОплаченоЧасов;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнительныеПараметрыРасчетаУдержаний()
	
	ДополнительныеПараметры = Новый Структура(
		"Организация,
		|МесяцУдержания,
		|ДокументСсылка,
		|НаборыЗаписей,
		|РегистраторыНачислений");
		
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Расчет удержаний
// Важно. Перед вызовом метода следует начать транзакцию, которую потом отменить. 
//
Процедура РассчитатьУдержания(УдержанияЗаПериод, ПараметрыРасчета, Рассчитывать = Истина)
	
	Если УдержанияЗаПериод = Неопределено 
		Или УдержанияЗаПериод.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Для расчета удержаний
	// - заполняем коллекцию для формирования движений:
	//	* удержания
	//	* начисления по договорам
	//	* НДФЛ
	//	* начисления уже записаны при расчете начислений
	// - расставляем идентификаторы строк
	// - «упаковываем» значения показателей
	// - записываем записи набора
	// - выполняем запрос к регистру расчета, обходим результат, выполняя расчет результата
	// - заполняем строки исходной коллекции
	
	Организация = ПараметрыРасчета.Организация;
	МесяцУдержания = ПараметрыРасчета.МесяцУдержания;
	ДокументСсылка = ПараметрыРасчета.ДокументСсылка;
	РегистраторыНачислений = ПараметрыРасчета.РегистраторыНачислений;
	
	// Наборы записей могут не быть определены.
	НаборыЗаписей = ПараметрыРасчета.НаборыЗаписей;
	Если НаборыЗаписей = Неопределено Тогда
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	КонецЕсли;
	
	ВременнаяСсылка = НаборыЗаписей["Удержания"].Отбор.Регистратор.Значение;
		
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("ФизическоеЛицо");
	Удержания.Колонки.Добавить("Удержание");
	Удержания.Колонки.Добавить("ДокументОснование");
	Удержания.Колонки.Добавить("Получатель");
	Удержания.Колонки.Добавить("ПлатежныйАгент");
	Удержания.Колонки.Добавить("Сумма");
	Удержания.Колонки.Добавить("ДатаНачала");
	Удержания.Колонки.Добавить("ДатаОкончания");
	Удержания.Колонки.Добавить("ФиксРасчет");
	Удержания.Колонки.Добавить("ФиксЗаполнение");
	Удержания.Колонки.Добавить("ИдентификаторСтроки");
	
	// Специализированные показатели рассчитываются отдельно.
	РасчетПереопределяемыхПоказателей = ТаблицаРасчетаПереопределяемыхПоказателей();
	
	ИдентификаторСтроки = 1;
	ИсходныеДанныеПоИдентификаторуСтроки = Новый Соответствие;
	Для Каждого СтрокаДанных Из УдержанияЗаПериод Цикл
		НоваяСтрока = Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаДанных.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		НоваяСтрока.Сумма = СтрокаДанных.Результат;
		// Упаковываем показатели
		КоличествоПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете("Удержания");
		ПоказателиВидаРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(НоваяСтрока.Удержание).Показатели;
		ПереопределяемыеПоказатели = Новый Массив;
		УпаковатьЗначенияПоказателей(
			СтрокаДанных, 
			ИдентификаторСтроки, 
			ИсходныеДанныеПоИдентификаторуСтроки, 
			ПоказателиВидаРасчета, 
			КоличествоПоказателей, 
			ПереопределяемыеПоказатели);
		// Если встречаются переопределяемые показатели, откладываем их в отдельную таблицу.
		Для Каждого ПереопределяемыйПоказатель Из ПереопределяемыеПоказатели Цикл
			СтрокаПоказателя = РасчетПереопределяемыхПоказателей.Добавить();
			СтрокаПоказателя.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
			СтрокаПоказателя.Организация = Организация;
			СтрокаПоказателя.Показатель = ПереопределяемыйПоказатель;
			СтрокаПоказателя.ВидРасчета = СтрокаДанных.Удержание;
			СтрокаПоказателя.ДатаНачала = СтрокаДанных.ДатаНачала;
			СтрокаПоказателя.ДатаОкончания = СтрокаДанных.ДатаОкончания;
			СтрокаПоказателя.ИдентификаторСтроки = ИдентификаторСтроки;
			СтрокаПоказателя.Регистратор = ВременнаяСсылка;
		КонецЦикла;
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	// Регистрируем данные удержаний.
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДвиженияУдержаний(НаборыЗаписей, Ложь, Организация, МесяцУдержания, Удержания, , Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Если пересчет данных не требуется - просто регистрируем записи в учете
	Если Не Рассчитывать Тогда 
		СписокУдержаний = ОбщегоНазначения.ВыгрузитьКолонку(НаборыЗаписей.Удержания, "ВидРасчета", Истина);
		КатегорииУдержаний = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокУдержаний, "КатегорияУдержания");
		СтрокиУдержанийПоКатегориям = Новый Соответствие;
		Для Каждого СтрокаНабора Из НаборыЗаписей.Удержания Цикл
			КатегорияУдержания = КатегорииУдержаний[СтрокаНабора.ВидРасчета];
			СтрокиУдержаний = СтрокиУдержанийПоКатегориям[КатегорияУдержания];
			Если СтрокиУдержаний = Неопределено Тогда 
				СтрокиУдержаний = Новый Массив;
				СтрокиУдержанийПоКатегориям.Вставить(КатегорияУдержания, СтрокиУдержаний);
			КонецЕсли;
			СтрокиУдержаний.Добавить(СтрокаНабора);
			ИсходныеДанныеПоИдентификаторуСтроки[СтрокаНабора.ИдентификаторСтроки].Результат = СтрокаНабора.Результат;
		КонецЦикла;
		ЗарегистрироватьРезультатыРасчетаОчередности(НаборыЗаписей, СтрокиУдержанийПоКатегориям, ИсходныеДанныеПоИдентификаторуСтроки, ДокументСсылка);
		Возврат;
	КонецЕсли;
	
	// Рассчитываем значения отдельных показателей.
	РассчитатьЗначенияПереопределяемыхПоказателей(РасчетПереопределяемыхПоказателей, ДокументСсылка, ПараметрыРасчета.РегистраторыНачислений);
	
	// Расставляем значения переопределяемых показателей в структурах исходных данных.
	Для Каждого СтрокаРасчета Из РасчетПереопределяемыхПоказателей Цикл
		Если СтрокаРасчета.ЗначениеРассчитано Тогда
			ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки];
			ИсходныеДанные.Вставить(ЗарплатаКадрыРасширенныйПовтИсп.ИдентификаторПоказателя(СтрокаРасчета.Показатель), СтрокаРасчета.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Составляем соответствие строк для более быстрого поиска.
	СтрокиНабора = Новый Соответствие;
	Для Каждого СтрокаНабора Из НаборыЗаписей.Удержания Цикл
		СтрокиНабора.Вставить(СтрокаНабора.ИдентификаторСтроки, СтрокаНабора);
	КонецЦикла;
	
	// Составляем таблицу уже удержанных сумм для того, чтобы рассчитывать удержания в целом за месяц.
	УдержанныеСуммы = Новый ТаблицаЗначений;
	УдержанныеСуммы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	УдержанныеСуммы.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	УдержанныеСуммы.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	УдержанныеСуммы.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	УдержанныеСуммы.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеУдержания.Тип);
	УдержанныеСуммы.Колонки.Добавить("Удержано", Новый ОписаниеТипов("Число"));
	
	Если РегистраторыНачислений = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ВременныйРегистратор", ВременнаяСсылка);
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА Удержания.ВидРасчета.ТребуетсяРасчетБазы
			|			ТОГДА НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ)
			|		ИНАЧЕ Удержания.ПериодРегистрации
			|	КОНЕЦ КАК Месяц,
			|	Удержания.Организация,
			|	Удержания.ФизическоеЛицо,
			|	Удержания.ВидРасчета,
			|	Удержания.ДокументОснование
			|ПОМЕСТИТЬ ВТУдержания
			|ИЗ
			|	РегистрРасчета.Удержания КАК Удержания
			|ГДЕ
			|	Удержания.Регистратор = &ВременныйРегистратор";
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	УдержаноЗаМесяц.Месяц,
			|	УдержаноЗаМесяц.Организация,
			|	УдержаноЗаМесяц.ФизическоеЛицо,
			|	УдержаноЗаМесяц.ВидРасчета,
			|	УдержаноЗаМесяц.ДокументОснование,
			|	СУММА(УдержаноЗаМесяц.Удержано) КАК Удержано
			|ИЗ
			|	(ВЫБРАТЬ
			|		НАЧАЛОПЕРИОДА(УдержаноЗаМесяц.Период, МЕСЯЦ) КАК Месяц,
			|		УдержаноЗаМесяц.Организация.ГоловнаяОрганизация КАК Организация,
			|		УдержаноЗаМесяц.ФизическоеЛицо КАК ФизическоеЛицо,
			|		УдержаноЗаМесяц.НачислениеУдержание КАК ВидРасчета,
			|		УдержаноЗаМесяц.ДокументОснование КАК ДокументОснование,
			|		УдержаноЗаМесяц.Сумма КАК Удержано
			|	ИЗ
			|		РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК УдержаноЗаМесяц
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУдержания КАК Удержания
			|			ПО УдержаноЗаМесяц.Организация.ГоловнаяОрганизация = Удержания.Организация
			|				И УдержаноЗаМесяц.ФизическоеЛицо = Удержания.ФизическоеЛицо
			|				И УдержаноЗаМесяц.НачислениеУдержание = Удержания.ВидРасчета
			|				И УдержаноЗаМесяц.ДокументОснование = Удержания.ДокументОснование
			|				И (УдержаноЗаМесяц.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
			|				И (УдержаноЗаМесяц.Регистратор <> &Регистратор)) КАК УдержаноЗаМесяц
			|
			|СГРУППИРОВАТЬ ПО
			|	УдержаноЗаМесяц.Месяц,
			|	УдержаноЗаМесяц.Организация,
			|	УдержаноЗаМесяц.ФизическоеЛицо,
			|	УдержаноЗаМесяц.ВидРасчета,
			|	УдержаноЗаМесяц.ДокументОснование";

		Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцУдержания));
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(МесяцУдержания));
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(УдержанныеСуммы.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
	// Выбираем записи и рассчитываем их в соответствии с очередностью расчета, 
	// которая предопределена ролью удержания.
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета
		|ИЗ
		|	РегистрРасчета.Удержания КАК Удержания
		|ГДЕ
		|	Удержания.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ВидРасчета.ОчередностьРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ВременнаяСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Параметры расчета удержаний очереди.
	ПараметрыОчереди = ДополнительныеПараметрыРасчетаОчередиУдержаний();
	ПараметрыОчереди.НаборыЗаписей = НаборыЗаписей;
	ПараметрыОчереди.СтрокиНабора = СтрокиНабора;
	ПараметрыОчереди.ДокументСсылка = ДокументСсылка;
	ПараметрыОчереди.УдержанныеСуммы = УдержанныеСуммы;
	ПараметрыОчереди.ИсходныеДанныеПоИдентификаторуСтроки = ИсходныеДанныеПоИдентификаторуСтроки;
	ПараметрыОчереди.РегистраторыНачислений = РегистраторыНачислений;
	
	Пока Выборка.Следующий() Цикл
		РассчитатьУдержанияОчередности(Выборка.ОчередностьРасчета, ПараметрыОчереди);
		УстановитьПривилегированныйРежим(Истина);
		НаборыЗаписей.Удержания.Записать(Истина, Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
	
	// Перенос результата расчета в УдержанияЗаПериод.
	Для Каждого СтрокаДанных Из УдержанияЗаПериод Цикл
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[СтрокаДанных.ИдентификаторСтрокиВидаРасчета];
		РаспаковатьЗначенияПоказателей(СтрокаДанных, КоличествоПоказателей, ИсходныеДанные);
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнительныеПараметрыРасчетаОчередиУдержаний()
	
	ДополнительныеПараметры = Новый Структура(
		"НаборыЗаписей, 
		|СтрокиНабора, 
		|ДокументСсылка,
		|УдержанныеСуммы,
		|ИсходныеДанныеПоИдентификаторуСтроки,
		|РегистраторыНачислений");
		
	Возврат ДополнительныеПараметры;
		
КонецФункции

Процедура РассчитатьУдержанияОчередности(ОчередностьРасчета, ПараметрыОчереди)
	
	НаборыЗаписей = ПараметрыОчереди.НаборыЗаписей;
	СтрокиНабора = ПараметрыОчереди.СтрокиНабора;
	ДокументСсылка = ПараметрыОчереди.ДокументСсылка;
	УдержанныеСуммы = ПараметрыОчереди.УдержанныеСуммы;
	ИсходныеДанныеПоИдентификаторуСтроки = ПараметрыОчереди.ИсходныеДанныеПоИдентификаторуСтроки;
	РегистраторыНачислений = ПараметрыОчереди.РегистраторыНачислений;
	
	// Месяцем удержания считаем месяц базового периода удержания.
	
	// Расчетная база удержания в общем случае складывается из трех составляющих:
	// 1) начисления, зарегистрированные в месяце удержания, период действия которых совпадает с периодом регистрации,
	// 2) начисления, зарегистрированные в месяце удержания, период действия которых больше периода регистрации (например,
	// будущий отпуск)
	// 3) начисления, зарегистрированные в месяце удержания, период действия которых меньше периода регистрации (например,
	// больничный за прошлый месяц).
	
	// Включаем части расчетной базы в следующие группы удержаний
	// - для удержаний, которые начинаются в текущем месяце, включаем только 1 и 2 части
	// - для удержаний, которые заканчиваются в текущем месяце, включаем только 1 и 3 части
	// - для остальных удержаний, включаем все части.
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВременныйРегистратор", НаборыЗаписей["Удержания"].Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.ПериодРегистрации,
		|	Удержания.Регистратор,
		|	Удержания.НомерСтроки,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Организация,
		|	Удержания.ВидРасчета,
		|	Удержания.БазовыйПериодНачало,
		|	Удержания.БазовыйПериодКонец,
		|	Удержания.ИдентификаторСтроки,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания,
		|	ВЫБОР
		|		КОГДА Удержания.БазовыйПериодНачало > НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Начинается,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(Удержания.БазовыйПериодКонец, ДЕНЬ) < КОНЕЦПЕРИОДА(Удержания.БазовыйПериодКонец, МЕСЯЦ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Заканчивается
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	РегистрРасчета.Удержания КАК Удержания
		|ГДЕ
		|	Удержания.Регистратор = &ВременныйРегистратор
		|	И Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
		|	И Удержания.ВидРасчета.ТребуетсяРасчетБазы";
		
	Запрос.Выполнить();	
	
	ИменаИзмерений = ИменаИзмеренийРасчетнойБазыНачислений();
	ИменаИзмерений.ФизическоеЛицо = "ФизическоеЛицо";
	ИменаИзмерений.ГоловнаяОрганизация = "Организация";
	
	ОтборБазовыхЗаписей = Новый Массив;
	ОтборБазовыхЗаписей.Добавить(ЭлементОтбораБазовыхЗаписей("Регистратор", ДокументСсылка, "<>"));
	Если РегистраторыНачислений <> Неопределено Тогда
		// Если РегистраторыНачислений заданы, то расчет выполняем только по базе начислений именно этих регистраторов.
		ОтборБазовыхЗаписей.Добавить(ЭлементОтбораБазовыхЗаписей("Регистратор", РегистраторыНачислений));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяТаблицыБазовыхВР = Метаданные.ПланыВидовРасчета.Удержания.ПолноеИмя() + ".БазовыеВидыРасчета";
	СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей);
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.УстановитьПараметр("РассчитыватьПоРегистратору", РегистраторыНачислений <> Неопределено);
	Запрос.УстановитьПараметр("РегистраторыНачислений", РегистраторыНачислений);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеНачисления.Ссылка КАК Удержание,
		|	БазовыеНачисления.ВидРасчета КАК Начисление
		|ПОМЕСТИТЬ ВТБазовыеНачисления
		|ИЗ
		|	ПланВидовРасчета.Удержания.БазовыеВидыРасчета КАК БазовыеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетнаяБазаУдержаний.НомерСтроки,
		|	РасчетнаяБазаУдержаний.БазовоеНачисление,
		|	РасчетнаяБазаУдержаний.КатегорияБазовогоНачисления,
		|	СУММА(РасчетнаяБазаУдержаний.РасчетнаяБаза) КАК РасчетнаяБаза
		|ПОМЕСТИТЬ ВТРасчетнаяБазаУдержаний
		|ИЗ
		|	(ВЫБРАТЬ
		|		УдержанияБаза.НомерСтроки КАК НомерСтроки,
		|		УдержанияБаза.ВидРасчетаРазрез КАК БазовоеНачисление,
		|		УдержанияБаза.ВидРасчетаРазрез.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияБазовогоНачисления,
		|		УдержанияБаза.РезультатБаза КАК РасчетнаяБаза
		|	ИЗ
		|		ВТРасчетнаяБаза КАК УдержанияБаза
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОсновныеЗаписи КАК УдержанияПоБазе
		|			ПО (УдержанияПоБазе.НомерСтроки = УдержанияБаза.НомерСтроки)
		|				И УдержанияБаза.ПериодРегистрацииРазрез = УдержанияПоБазе.МесяцУдержания
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		УдержанияПоБазе.НомерСтроки,
		|		Начисления.ВидРасчета,
		|		Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени,
		|		ВЫБОР
		|			КОГДА УдержанияПоБазе.Начинается
		|					И НЕ УдержанияПоБазе.Заканчивается
		|				ТОГДА ВЫБОР
		|						КОГДА Начисления.ПериодДействия > УдержанияПоБазе.МесяцУдержания
		|							ТОГДА Начисления.Результат
		|					КОНЕЦ
		|			КОГДА УдержанияПоБазе.Заканчивается
		|					И НЕ УдержанияПоБазе.Начинается
		|				ТОГДА ВЫБОР
		|						КОГДА Начисления.ПериодДействия < УдержанияПоБазе.МесяцУдержания
		|							ТОГДА Начисления.Результат
		|					КОНЕЦ
		|			КОГДА УдержанияПоБазе.Начинается
		|					И УдержанияПоБазе.Заканчивается
		|				ТОГДА 0
		|			ИНАЧЕ ВЫБОР
		|					КОГДА Начисления.ПериодДействия <> УдержанияПоБазе.МесяцУдержания
		|						ТОГДА Начисления.Результат
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ
		|	ИЗ
		|		ВТОсновныеЗаписи КАК УдержанияПоБазе
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|			ПО (Начисления.ПериодРегистрации = УдержанияПоБазе.МесяцУдержания)
		|				И (Начисления.ФизическоеЛицо = УдержанияПоБазе.ФизическоеЛицо)
		|				И (Начисления.ГоловнаяОрганизация = УдержанияПоБазе.Организация)
		|				И (Начисления.Регистратор <> &Регистратор)
		|				И (Начисления.Регистратор В (&РегистраторыНачислений)
		|					ИЛИ &РассчитыватьПоРегистратору = ЛОЖЬ)
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеНачисления КАК БазовыеНачисления
		|			ПО (БазовыеНачисления.Удержание = УдержанияПоБазе.ВидРасчета)
		|				И (БазовыеНачисления.Начисление = Начисления.ВидРасчета)) КАК РасчетнаяБазаУдержаний
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетнаяБазаУдержаний.БазовоеНачисление,
		|	РасчетнаяБазаУдержаний.КатегорияБазовогоНачисления,
		|	РасчетнаяБазаУдержаний.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдержанияБаза.НомерСтроки,
		|	СУММА(УдержанияБаза.РасчетнаяБаза) КАК РасчетнаяБаза
		|ПОМЕСТИТЬ ВТРезультатБаза
		|ИЗ
		|	ВТРасчетнаяБазаУдержаний КАК УдержанияБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	УдержанияБаза.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УдержанияБаза.РасчетнаяБаза,
		|	Удержания.ВидРасчета,
		|	Удержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|	Удержания.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета,
		|	Удержания.ВидРасчета.ФормулаРасчетаДляВыполнения КАК ФормулаРасчетаДляВыполнения,
		|	Удержания.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета,
		|	Удержания.ВидРасчета.КатегорияУдержания КАК КатегорияУдержания,
		|	Удержания.ВидРасчета.Рассчитывается КАК Рассчитывается,
		|	Удержания.ИдентификаторСтроки,
		|	РасшифровкаБазы.БазовоеНачисление,
		|	РасшифровкаБазы.КатегорияБазовогоНачисления,
		|	РасшифровкаБазы.РасчетнаяБаза КАК РасчетнаяБазаПоНачислению
		|ИЗ
		|	РегистрРасчета.Удержания КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезультатБаза КАК УдержанияБаза
		|		ПО Удержания.НомерСтроки = УдержанияБаза.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетнаяБазаУдержаний КАК РасшифровкаБазы
		|		ПО Удержания.НомерСтроки = РасшифровкаБазы.НомерСтроки
		|ГДЕ
		|	Удержания.Регистратор = &ВременныйРегистратор
		|	И Удержания.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удержания.ВидРасчета.ОчередностьРасчета,
		|	Удержания.ИдентификаторСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом.
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	// Записи текущей очередности разложенные по ролям.
	ЗаписиОчередности = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ИдентификаторСтроки") Цикл
		
		СтрокаНабора = СтрокиНабора[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];
		ИсходныеДанные.Вставить("Рассчитывается", Выборка.Рассчитывается);
		
		// Дополняем структуру исходных данных автоматически рассчитываемыми показателями.
		Если Не СтрокаНабора.ФиксЗаполнение Тогда
			ИсходныеДанные.Вставить("КалендарныеДниМесяца", День(КонецМесяца(СтрокаНабора.ПериодДействия)));
			ИсходныеДанные.Вставить("РасчетнаяБаза", 0);
			ИсходныеДанные.Вставить("РасшифровкаРасчетнойБазы", Неопределено);
			Если Выборка.РасчетнаяБаза <> Null Тогда
				ИсходныеДанные.Вставить("РасчетнаяБаза", Окр(Выборка.РасчетнаяБаза, 2));
				// Заполняем расшифровку расчетной базы.
				РасшифровкаРасчетнойБазы = ПустаяТаблицаРасшифровкиРасчетнойБазы();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = РасшифровкаРасчетнойБазы.Добавить();
					НоваяСтрока.БазовоеНачисление = Выборка.БазовоеНачисление;
					НоваяСтрока.КатегорияБазовогоНачисления = Выборка.КатегорияБазовогоНачисления;
					НоваяСтрока.Сумма = Выборка.РасчетнаяБазаПоНачислению;
				КонецЦикла;
				ИсходныеДанные.Вставить("РасшифровкаРасчетнойБазы", РасшифровкаРасчетнойБазы);
			КонецЕсли;
		КонецЕсли;
		
		РассчитатьЗаписьУдержания(СтрокаНабора, Выборка.СпособРасчета, ИсходныеДанные, Выборка.ФормулаРасчетаДляВыполнения, Выборка.ФормулаРасчета, РасчетПредопределеннымСпособом, УдержанныеСуммы, Истина);
		
		Если ЗаписиОчередности[Выборка.КатегорияУдержания] = Неопределено Тогда 
			ЗаписиОчередности.Вставить(Выборка.КатегорияУдержания, Новый Массив);
		КонецЕсли;
		
		ЗаписиОчередности[Выборка.КатегорияУдержания].Добавить(СтрокаНабора);
		
	КонецЦикла;
	
	// Выполняем расчет предопределенным способом.
	РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, ПараметрыОчереди);
	
	// Сформировать движения по связанным регистрам.
	ЗарегистрироватьРезультатыРасчетаОчередности(НаборыЗаписей, ЗаписиОчередности, ИсходныеДанныеПоИдентификаторуСтроки, ДокументСсылка);
	
КонецПроцедуры

#Область РасчетнаяБаза

// Создает ВТРасчетнаяБаза для записей регистра расчета Начисления.
//
// Параметры:
//	- МенеджерВременныхТаблиц, в котором 
//		* будет создана ВТРасчетнаяБаза, состав полей см. метод СоздатьВТРасчетнаяБаза
//	- Регистраторы - массив регистраторов, наборы записей регистра расчета которых нужно рассчитать,
//	- ОчередностьРасчета - число, порядковый номер очередности выбираемых начислений,
//	- ИсключаемыйРегистратор - ссылка на документ, движения которого нужно исключить из рассмотрения.
//
Процедура СоздатьВТРасчетнаяБазаНачисленийПоРегистраторам(МенеджерВременныхТаблиц, Регистраторы, ОчередностьРасчета, ИсключаемыйРегистратор = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Ссылка КАК ВидРасчета,
		|	Начисления.ПериодДействияБазовый
		|ПОМЕСТИТЬ ВТВидыРасчета
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ОчередностьРасчета = &ОчередностьРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияФПД.ПериодРегистрации,
		|	НачисленияФПД.Регистратор,
		|	НачисленияФПД.НомерСтроки,
		|	НачисленияФПД.Сотрудник,
		|	НачисленияФПД.ВидРасчета,
		|	НачисленияФПД.ПериодДействияНачало КАК БазовыйПериодНачало,
		|	НачисленияФПД.ПериодДействияКонец КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Регистратор В (&Регистраторы)
		|				И ВидРасчета В
		|					(ВЫБРАТЬ
		|						ВидыРасчета.ВидРасчета
		|					ИЗ
		|						ВТВидыРасчета КАК ВидыРасчета
		|					ГДЕ
		|						ВидыРасчета.ПериодДействияБазовый = ИСТИНА)) КАК НачисленияФПД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчета КАК ВидыРасчета
		|		ПО (ВидыРасчета.ВидРасчета = Начисления.ВидРасчета)
		|			И (ВидыРасчета.ПериодДействияБазовый = ЛОЖЬ)
		|			И (Начисления.Регистратор В (&Регистраторы))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВидыРасчета";
		
	Запрос.Выполнить();	
	
	ИменаИзмерений = ИменаИзмеренийРасчетнойБазыНачислений();
	ИменаИзмерений.Сотрудник = "Сотрудник";
	
	ОтборБазовыхЗаписей = Новый Массив;
	ОтборБазовыхЗаписей.Добавить(ЭлементОтбораБазовыхЗаписей("Регистратор", ИсключаемыйРегистратор, "<>"));
	
	ИмяТаблицыБазовыхВР = Метаданные.ПланыВидовРасчета.Начисления.ПолноеИмя() + ".БазовыеВидыРасчета";
	СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей);
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТОсновныеЗаписи";
	Запрос.Выполнить();
	
КонецПроцедуры	

// Создает ВТРасчетнаяБаза для записей регистра расчета Начисления.
//
// Параметры:
//	- МенеджерВременныхТаблиц, в котором 
//		* есть таблица ВТОтборНачислений с полями, соответствующими регистру расчета Начисления
//			- Регистратор
//			- НомерСтроки
//		* будет создана ВТРасчетнаяБаза, состав полей см. метод СоздатьВТРасчетнаяБаза
//	- ИсключаемыйРегистратор - ссылка на документ, движения которого нужно исключить из рассмотрения.
//
Процедура СоздатьВТРасчетнаяБазаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИсключаемыйРегистратор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтборНачислений.Регистратор,
		|	ОтборНачислений.НомерСтроки,
		|	Начисления.ВидРасчета,
		|	Начисления.ВидРасчета.ПериодДействияБазовый КАК ПериодДействияБазовый
		|ПОМЕСТИТЬ ВТОтборОсновныхЗаписей
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборНачислений КАК ОтборНачислений
		|		ПО (ОтборНачислений.Регистратор = Начисления.Регистратор)
		|			И (ОтборНачислений.НомерСтроки = Начисления.НомерСтроки)
		|			И (Начисления.ВидРасчета.ТребуетсяРасчетБазы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияФПД.ПериодРегистрации,
		|	НачисленияФПД.Регистратор,
		|	НачисленияФПД.НомерСтроки,
		|	НачисленияФПД.Сотрудник,
		|	НачисленияФПД.ВидРасчета,
		|	НачисленияФПД.ПериодДействияНачало КАК БазовыйПериодНачало,
		|	НачисленияФПД.ПериодДействияКонец КАК БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТОсновныеЗаписи
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			(Регистратор, НомерСтроки) В
		|				(ВЫБРАТЬ
		|					Отбор.Регистратор,
		|					Отбор.НомерСтроки
		|				ИЗ
		|					ВТОтборОсновныхЗаписей КАК Отбор
		|				ГДЕ
		|					Отбор.ПериодДействияБазовый = ИСТИНА)) КАК НачисленияФПД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ПериодРегистрации,
		|	Начисления.Регистратор,
		|	Начисления.НомерСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборОсновныхЗаписей КАК Отбор
		|		ПО (Отбор.Регистратор = Начисления.Регистратор)
		|			И (Отбор.НомерСтроки = Начисления.НомерСтроки)
		|			И (Отбор.ПериодДействияБазовый = ЛОЖЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОтборОсновныхЗаписей";
		
	Запрос.Выполнить();	
	
	ИменаИзмерений = ИменаИзмеренийРасчетнойБазыНачислений();
	ИменаИзмерений.Сотрудник = "Сотрудник";
	
	ОтборБазовыхЗаписей = Новый Массив;
	ОтборБазовыхЗаписей.Добавить(ЭлементОтбораБазовыхЗаписей("Регистратор", ИсключаемыйРегистратор, "<>"));
	
	ИмяТаблицыБазовыхВР = Метаданные.ПланыВидовРасчета.Начисления.ПолноеИмя() + ".БазовыеВидыРасчета";
	СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей);
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТОсновныеЗаписи";
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ИменаИзмеренийРасчетнойБазыНачислений() Экспорт
	
	ИменаИзмерений = Новый Структура(
		"Сотрудник, 
		|ФизическоеЛицо, 
		|ГоловнаяОрганизация");
		
	Возврат ИменаИзмерений;
	
КонецФункции

Функция ЭлементОтбораБазовыхЗаписей(ЛевоеЗначение, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	ЭлементОтбора = Новый Структура(
		"ЛевоеЗначение, 
		|ВидСравнения, 
		|ПравоеЗначение");
		
	ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	Если ВидСравнения = Неопределено Тогда
		ЭлементОтбора.ВидСравнения = "=";
	КонецЕсли;
	
	Возврат ЭлементОтбора;
	
КонецФункции

Процедура СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, ИмяВТСотрудники = "ВТСотрудникиКорректировкиПериода")
	
	// Для начислений фиксированной суммой, корректируем период, по которому будет происходить пропорциональное уменьшение датами приема/увольнения.
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ИмяВТСотрудники);
	ОписательВТ.ИмяВТКадровыеДанныеСотрудников = "ВТДатыПриемаУвольненияСотрудников";
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Ложь, "ДатаПриема, ДатаУвольнения");

	ЗарплатаКадрыРасширенный.СоздатьВТДатыИзмененияПримененияПлановыхНачислений(МенеджерВременныхТаблиц, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыПриемаУвольнения.Сотрудник,
		|	ДатыПриемаУвольнения.ДатаПриема КАК ДатаНачала,
		|	ДатыПриемаУвольнения.ДатаУвольнения КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТДатыПриемаУвольненияСотрудников КАК ДатыПриемаУвольнения
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДатыПримененияПлановыхНачислений.Сотрудник,
		|	ДатыПримененияПлановыхНачислений.ДатаНачала,
		|	ДатыПримененияПлановыхНачислений.ДатаОкончания
		|ИЗ
		|	ВТДатыИзмененияПримененияПлановыхНачислений КАК ДатыПримененияПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыПриемаУвольненияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыИзмененияПримененияПлановыхНачислений";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьПериодДействияВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления = "ВТНачисления")
	
	// Определяем необходимость заполнения периода действия.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия))
		|			И (Начисления.ПериодДействия = ДАТАВРЕМЯ(1, 1, 1))";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Пересоздаем исходную ВТ с заполненным периодом действия.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ПериодДействия
		|	КОНЕЦ КАК ПериодДействия,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТВсеНачисления
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТВсеНачисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеНачисления";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СкорректироватьПериодВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления = "ВТНачисления")
	
	ЗаполнитьПериодДействияВТНачислений(МенеджерВременныхТаблиц, ИмяВТНачисления);
	
	// Определяем необходимость корректировки периода.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия КАК Период,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК Сотрудники";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Запрос.Текст = 
			"УНИЧТОЖИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		Запрос.Выполнить();
		Возврат;
	КонецЕсли;
	
	// Получаем даты корректировки.
	СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, "ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	
	// Пересоздаем исходную ВТ с откорректированными датами.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	Начисления.ПериодДействия,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
		|			ТОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ВидыРасчета.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
		|			ТОГДА КОНЕЦПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ)
		|		ИНАЧЕ Начисления.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	Начисления.Начисление,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТВсеНачисления
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, Начисления.ДатаНачала) КАК ДатаНачала,
		|	ЕСТЬNULL(ДатыОкончания.ДатаОкончания, Начисления.ДатаОкончания) КАК ДатаОкончания,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, Начисления.ДатаНачала) КАК ДатаДействия,
		|	Начисления.*
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТВсеНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
		|		ПО (ВидыРасчета.Ссылка = Начисления.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыНачала
		|		ПО (ДатыНачала.Сотрудник = Начисления.Сотрудник)
		|			И (ДатыНачала.ДатаНачала МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыОкончания
		|		ПО (ДатыОкончания.Сотрудник = Начисления.Сотрудник)
		|			И (ДатыОкончания.ДатаОкончания МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания)
		|			И (ВидыРасчета.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует расчетную базу начислений или удержаний.
// Будет создана ВТРасчетнаяБаза с полями
//		- РезультатБаза - сумма результата базовых начислений
//		- Регистратор
//		- НомерСтроки
//		- РегистраторРазрез
//		- НомерСтрокиРазрез
//		- ПериодРегистрацииРазрез
//		- ВидРасчетаРазрез
//
// Параметры:
//	- МенеджерВременныхТаблиц, содержащий 
//		* ВТОсновныеЗаписи с полями
//			- ПериодРегистрации,
//			- Регистратор,
//			- НомерСтроки,
//			- Сотрудник (или другие поля для измерения, имена полей перечисляются в отдельном параметре ИменаИзмерений),
//			- ВидРасчета,
//			- БазовыйПериодНачало,
//			- БазовыйПериодКонец,
//	- ИменаИзмерений - структура с полями Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация (измерениями базового регистра), 
//		для измерений, которые используются, заполняется соответствующее имя поля из таблицы ВТОсновныеЗаписи. 
//		Если не заполнено, измерение не используется.
//		Для создания см. метод ИменаИзмеренийРасчетнойБазыНачислений.
//	- ИмяТаблицыБазовыхВР - полное имя таблицы, 
//		записи которой будут использоваться для опредедения базовых видов расчета.
//		Таблица должна иметь структуру, соответствующую служебной таблице базовых видов расчета (поля Ссылка и ВидРасчета).
//  
Процедура СоздатьВТРасчетнаяБаза(МенеджерВременныхТаблиц, ИменаИзмерений, ИмяТаблицыБазовыхВР, ОтборБазовыхЗаписей = Неопределено) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Условие связи основных и базовых записей.
	УсловиеСвязи = "";
	Для Каждого КлючИЗначение Из ИменаИзмерений Цикл
		ИмяИзмерения = КлючИЗначение.Ключ;
		ПолеОсновнойЗаписи = КлючИЗначение.Значение;
		Если Не ЗначениеЗаполнено(ПолеОсновнойЗаписи) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПустаяСтрока(УсловиеСвязи) Тогда
			УсловиеСвязи = УсловиеСвязи + " И ";
		КонецЕсли;
		УсловиеСвязи = УсловиеСвязи + СтрШаблон("ОсновныеЗаписи.%1 = БазовыеЗаписи.%2", ПолеОсновнойЗаписи, ИмяИзмерения);
	КонецЦикла;
	
	// Отбор базовых записей.
	УсловиеОтбора = "";
	Для Каждого ЭлементОтбора Из ОтборБазовыхЗаписей Цикл
		Если Не ПустаяСтрока(УсловиеОтбора) Тогда
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;
		ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
		ИмяПараметра = ЛевоеЗначение + ЗарплатаКадрыРасширенныйКлиентСервер.УникальноеИмяРеквизита();
		ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
		Если ТипЗнч(ПравоеЗначение) = Тип("Массив") Тогда
			УсловиеОтбора = УсловиеОтбора + СтрШаблон("БазовыеЗаписи.%1 В(&%2)", ЛевоеЗначение, ИмяПараметра);
		Иначе
			УсловиеОтбора = УсловиеОтбора + СтрШаблон("БазовыеЗаписи.%1 %2 &%3", ЛевоеЗначение, ЭлементОтбора.ВидСравнения, ИмяПараметра);
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяПараметра, ПравоеЗначение);
	КонецЦикла;
	Если ПустаяСтрока(УсловиеОтбора) Тогда
		УсловиеОтбора = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Регистратор КАК Регистратор,
		|	БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.ПериодДействияНачало,
		|	БазовыеЗаписи.ПериодДействияКонец,
		|	ВЫБОР
		|		КОГДА БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодНачало
		|					И ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало
		|				ИЛИ БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодКонец
		|					И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1), ДЕНЬ, -1) > ОсновныеЗаписи.БазовыйПериодКонец
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ВидРасчета.НачисляетсяВЦеломЗаМесяц КАК НачисляетсяВЦеломЗаМесяц,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ФизическоеЛицо,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.Результат,
		|	ВЫБОР 
		|		КОГДА БазовыеВидыРасчета.ВидРасчета.ЗачетОтработанногоВремени
		|		ТОГДА БазовыеЗаписи.ОтработаноДней
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РезультатДней,
		|	ВЫБОР 
		|		КОГДА БазовыеВидыРасчета.ВидРасчета.ЗачетОтработанногоВремени
		|		ТОГДА БазовыеЗаписи.ОтработаноЧасов
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РезультатЧасов,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписи
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК БазовыеЗаписи
		|		ПО (БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.ПериодРегистрации
		|				ИЛИ БазовыеЗаписи.ПериодРегистрации <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (&СвязьОсновныеЗаписиБазовыеЗаписи)
		|			И (ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало)
		|			И (БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (БазовыеЗаписи.Активность = ИСТИНА)
		|			И (&ОтборБазовыхЗаписей)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ПериодДействия КАК Период,
		|	БазовыеЗаписи.ПериодДействияНачало КАК ДатаНачала,
		|	БазовыеЗаписи.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|ГДЕ
		|	БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК Сотрудники";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыБазовыхВР", ИмяТаблицыБазовыхВР);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьОсновныеЗаписиБазовыеЗаписи", УсловиеСвязи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборБазовыхЗаписей", УсловиеОтбора);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		// Для начислений фиксированной суммой, корректируем период, 
		// по которому будет происходить пропорциональное уменьшение датами приема/увольнения, начала окончания отпуска по уходу за ребенком.
		СоздатьВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц(МенеджерВременныхТаблиц, "ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц");
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц";
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазовыеЗаписиФПД.Регистратор,
		|	БазовыеЗаписиФПД.НомерСтроки,
		|	БазовыеЗаписиФПД.ПериодДействияНачало,
		|	БазовыеЗаписиФПД.ПериодДействияКонец
		|ПОМЕСТИТЬ ВТБазовыеЗаписиИнтервалыФПД
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			(Регистратор, НомерСтроки) В
		|				(ВЫБРАТЬ
		|					БазовыеЗаписи.Регистратор,
		|					БазовыеЗаписи.НомерСтроки
		|				ИЗ
		|					ВТБазовыеЗаписи КАК БазовыеЗаписи)) КАК БазовыеЗаписиФПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.Сотрудник,
		|	БазовыеЗаписи.ФизическоеЛицо,
		|	БазовыеЗаписи.ГоловнаяОрганизация,
		|	БазовыеЗаписи.Результат,
		|	БазовыеЗаписи.РезультатДней,
		|	БазовыеЗаписи.РезультатЧасов,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	ЕСТЬNULL(ДатыНачала.ДатаНачала, ПериодыДействияБазовыхЗаписей.ПериодДействияНачало) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(ДатыОкончания.ДатаОкончания, ПериодыДействияБазовыхЗаписей.ПериодДействияКонец) КАК ПериодДействияКонец,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписиФПД
		|ИЗ
		|	ВТБазовыеЗаписи КАК БазовыеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиИнтервалыФПД КАК ПериодыДействияБазовыхЗаписей
		|		ПО (ПериодыДействияБазовыхЗаписей.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (ПериодыДействияБазовыхЗаписей.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыНачала
		|		ПО (ДатыНачала.Сотрудник = БазовыеЗаписи.Сотрудник)
		|			И (ДатыНачала.ДатаНачала МЕЖДУ ПериодыДействияБазовыхЗаписей.ПериодДействияНачало И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец)
		|			И (БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц КАК ДатыОкончания
		|		ПО (ДатыОкончания.Сотрудник = БазовыеЗаписи.Сотрудник)
		|			И (ДатыОкончания.ДатаОкончания МЕЖДУ ПериодыДействияБазовыхЗаписей.ПериодДействияНачало И ПериодыДействияБазовыхЗаписей.ПериодДействияКонец)
		|			И (БазовыеЗаписи.НачисляетсяВЦеломЗаМесяц)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБазовыеЗаписиИнтервалыФПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБазовыеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиКорректировкиПериодаНачисленийВЦеломЗаМесяц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки,
		|	БазовыеЗаписиВремя.ИдентификаторСтроки,
		|	БазовыеЗаписиВремя.ВидРасчета,
		|	БазовыеЗаписиВремя.ПериодРегистрации,
		|	БазовыеЗаписиВремя.ПериодДействия,
		|	БазовыеЗаписиВремя.Сотрудник,
		|	БазовыеЗаписиВремя.ФизическоеЛицо,
		|	БазовыеЗаписиВремя.ГоловнаяОрганизация,
		|	БазовыеЗаписиВремя.Результат,
		|	БазовыеЗаписиВремя.РезультатДней,
		|	БазовыеЗаписиВремя.РезультатЧасов,		
		|	БазовыеЗаписиВремя.ГрафикРаботы,
		|	БазовыеЗаписиВремя.ВремяВЧасах,
		|	БазовыеЗаписиВремя.ПериодРегистрацииВремени,
		|	БазовыеЗаписиВремя.ПериодДействияНачало,
		|	БазовыеЗаписиВремя.ПериодДействияКонец,
		|	БазовыеЗаписиВремя.НеобходимРасчетСуммы,
		|	БазовыеЗаписиВремя.ВидУчетаВремени,
		|	ВЫБОР
		|		КОГДА БазовыеЗаписиВремя.ВремяВЧасах
		|			ТОГДА ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.ВремяЧасы) КАК ЧИСЛО(17, 8))
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.ВремяДни) КАК ЧИСЛО(17, 8))
		|	КОНЕЦ КАК Время
		|ПОМЕСТИТЬ ВТБазовыеЗаписиВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		БазовыеЗаписи.Регистратор КАК Регистратор,
		|		БазовыеЗаписи.НомерСтроки КАК НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета КАК ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
		|		БазовыеЗаписи.Сотрудник КАК Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо КАК ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|		БазовыеЗаписи.Результат КАК Результат,
		|		БазовыеЗаписи.РезультатДней КАК РезультатДней,
		|		БазовыеЗаписи.РезультатЧасов КАК РезультатЧасов,		
		|		БазовыеЗаписи.ГрафикРаботы КАК ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах КАК ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало КАК ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец КАК ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы КАК НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени КАК ВидУчетаВремени,
		|		МАКСИМУМ(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)) КАК ВремяДни,
		|		СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)) КАК ВремяЧасы
		|	ИЗ
		|		ВТБазовыеЗаписиФПД КАК БазовыеЗаписи
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|			ПО БазовыеЗаписи.ВидРасчета = ВидыВремени.Ссылка
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ПО (ГрафикиРаботыПоВидамВремени.Месяц = БазовыеЗаписи.ПериодДействия)
		|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец)
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|				И БазовыеЗаписи.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|				И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|				И БазовыеЗаписи.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|	ГДЕ
		|		БазовыеЗаписи.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		БазовыеЗаписи.Регистратор,
		|		БазовыеЗаписи.НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия,
		|		БазовыеЗаписи.Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация,
		|		БазовыеЗаписи.Результат,
		|		БазовыеЗаписи.РезультатДней,
		|		БазовыеЗаписи.РезультатЧасов,		
		|		БазовыеЗаписи.ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени,
		|		ГрафикиРаботыПоВидамВремени.Дата
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		БазовыеЗаписи.Регистратор,
		|		БазовыеЗаписи.НомерСтроки,
		|		БазовыеЗаписи.ИдентификаторСтроки,
		|		БазовыеЗаписи.ПериодРегистрации,
		|		БазовыеЗаписи.ВидРасчета,
		|		БазовыеЗаписи.ПериодДействия,
		|		БазовыеЗаписи.Сотрудник,
		|		БазовыеЗаписи.ФизическоеЛицо,
		|		БазовыеЗаписи.ГоловнаяОрганизация,
		|		БазовыеЗаписи.Результат,
		|		БазовыеЗаписи.РезультатДней КАК РезультатДней,
		|		БазовыеЗаписи.РезультатЧасов КАК РезультатЧасов,		
		|		БазовыеЗаписи.ГрафикРаботы,
		|		БазовыеЗаписи.ВремяВЧасах,
		|		БазовыеЗаписи.ПериодРегистрацииВремени,
		|		БазовыеЗаписи.ПериодДействияНачало,
		|		БазовыеЗаписи.ПериодДействияКонец,
		|		БазовыеЗаписи.НеобходимРасчетСуммы,
		|		БазовыеЗаписи.ВидУчетаВремени,
		|		ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0),
		|		ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
		|	ИЗ
		|		ВТБазовыеЗаписиФПД КАК БазовыеЗаписи
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|			ПО (ГрафикиРаботыПоВидамВремени.Месяц = БазовыеЗаписи.ПериодДействия)
		|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписи.ПериодДействияНачало И БазовыеЗаписи.ПериодДействияКонец)
		|				И (БазовыеЗаписи.НеобходимРасчетСуммы)
		|				И БазовыеЗаписи.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|				И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|				И БазовыеЗаписи.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|	ГДЕ
		|		БазовыеЗаписи.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)) КАК БазовыеЗаписиВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки,
		|	БазовыеЗаписиВремя.ИдентификаторСтроки,
		|	БазовыеЗаписиВремя.ВидРасчета,
		|	БазовыеЗаписиВремя.ПериодРегистрации,
		|	БазовыеЗаписиВремя.ПериодДействия,
		|	БазовыеЗаписиВремя.Сотрудник,
		|	БазовыеЗаписиВремя.ФизическоеЛицо,
		|	БазовыеЗаписиВремя.ГоловнаяОрганизация,
		|	БазовыеЗаписиВремя.Результат,
		|	БазовыеЗаписиВремя.РезультатДней,
		|	БазовыеЗаписиВремя.РезультатЧасов,
		|	БазовыеЗаписиВремя.ГрафикРаботы,
		|	БазовыеЗаписиВремя.ВремяВЧасах,
		|	БазовыеЗаписиВремя.ПериодРегистрацииВремени,
		|	БазовыеЗаписиВремя.ПериодДействияНачало,
		|	БазовыеЗаписиВремя.ПериодДействияКонец,
		|	БазовыеЗаписиВремя.НеобходимРасчетСуммы,
		|	БазовыеЗаписиВремя.ВидУчетаВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБазовыеЗаписиФПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазовыеЗаписиВремя.Регистратор КАК Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(СУММА(БазовыеЗаписиВремя.Время) КАК ЧИСЛО(23, 8)) КАК Время,
		|	МИНИМУМ(БазовыеЗаписиВремя.ПериодДействияНачало) КАК МинимальнаяДатаНачалаБазовойЗаписи
		|ПОМЕСТИТЬ ВТБазовыеЗаписиМинимальнаяДата
		|ИЗ
		|	ВТБазовыеЗаписиВремя КАК БазовыеЗаписиВремя
		|
		|СГРУППИРОВАТЬ ПО
		|	БазовыеЗаписиВремя.Регистратор,
		|	БазовыеЗаписиВремя.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СУММА(БазовыеЗаписи.Результат) КАК ЧИСЛО(27, 8)) КАК РезультатБаза,
		|	ВЫРАЗИТЬ(СУММА(БазовыеЗаписи.РезультатДней) КАК ЧИСЛО(27, 8)) КАК РезультатДнейБаза,
		|	ВЫРАЗИТЬ(СУММА(БазовыеЗаписи.РезультатЧасов) КАК ЧИСЛО(27, 8)) КАК РезультатЧасовБаза,
		|	ОсновныеЗаписи.Регистратор КАК Регистратор,
		|	ОсновныеЗаписи.НомерСтроки КАК НомерСтроки,
		|	БазовыеЗаписи.Регистратор КАК РегистраторРазрез,
		|	БазовыеЗаписи.НомерСтроки КАК НомерСтрокиРазрез,
		|	БазовыеЗаписи.ИдентификаторСтроки КАК ИдентификаторСтрокиРазрез,
		|	БазовыеЗаписи.ПериодРегистрации КАК ПериодРегистрацииРазрез,
		|	МинимальныеПериодыБазовыхНачислений.Время КАК Время,
		|	МинимальныеПериодыБазовыхНачислений.МинимальнаяДатаНачалаБазовойЗаписи,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодНачало > БазовыеЗаписи.ПериодДействияНачало
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодНачало
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияНачало
		|	КОНЕЦ КАК БазовыйПериодНачало,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодКонец < БазовыеЗаписи.ПериодДействияКонец
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодКонец
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияКонец
		|	КОНЕЦ КАК БазовыйПериодКонец,
		|	БазовыеЗаписи.ВидРасчета КАК ВидРасчетаРазрез,
		|	БазовыеЗаписи.ПериодДействия КАК ПериодДействия,
		|	БазовыеЗаписи.ВидУчетаВремени КАК ВидУчетаВремени
		|ПОМЕСТИТЬ ВТБазовыеЗаписиДанные
		|ИЗ
		|	ВТОсновныеЗаписи КАК ОсновныеЗаписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиВремя КАК БазовыеЗаписи
		|		ПО (&СвязьОсновныеЗаписиБазовыеЗаписи)
		|			И (БазовыеЗаписи.ПериодДействияНачало <= ОсновныеЗаписи.БазовыйПериодКонец)
		|			И (БазовыеЗаписи.ПериодДействияКонец >= ОсновныеЗаписи.БазовыйПериодНачало)
		|			И (ВЫБОР
		|				КОГДА БазовыеЗаписи.ПериодДействия < ОсновныеЗаписи.БазовыйПериодНачало
		|							И ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1) > ОсновныеЗаписи.БазовыйПериодНачало
		|						ИЛИ БазовыеЗаписи.ПериодДействия <= ОсновныеЗаписи.БазовыйПериодКонец
		|							И ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(БазовыеЗаписи.ПериодДействия, МЕСЯЦ, 1), ДЕНЬ, -1) > ОсновныеЗаписи.БазовыйПериодКонец
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ = БазовыеЗаписи.НеобходимРасчетСуммы)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыБазовыхВР КАК БазовыеВидыРасчета
		|		ПО (БазовыеВидыРасчета.ВидРасчета = БазовыеЗаписи.ВидРасчета)
		|			И (БазовыеВидыРасчета.Ссылка = ОсновныеЗаписи.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазовыеЗаписиМинимальнаяДата КАК МинимальныеПериодыБазовыхНачислений
		|		ПО (МинимальныеПериодыБазовыхНачислений.Регистратор = БазовыеЗаписи.Регистратор)
		|			И (МинимальныеПериодыБазовыхНачислений.НомерСтроки = БазовыеЗаписи.НомерСтроки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЗаписи.Регистратор,
		|	ОсновныеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.Регистратор,
		|	БазовыеЗаписи.НомерСтроки,
		|	БазовыеЗаписи.ИдентификаторСтроки,
		|	БазовыеЗаписи.ПериодРегистрации,
		|	МинимальныеПериодыБазовыхНачислений.Время,
		|	МинимальныеПериодыБазовыхНачислений.МинимальнаяДатаНачалаБазовойЗаписи,
		|	БазовыеЗаписи.ГрафикРаботы,
		|	БазовыеЗаписи.ВремяВЧасах,
		|	БазовыеЗаписи.ПериодРегистрацииВремени,
		|	БазовыеЗаписи.НеобходимРасчетСуммы,
		|	БазовыеЗаписи.ВидРасчета,
		|	БазовыеЗаписи.ПериодДействия,
		|	БазовыеЗаписи.ВидУчетаВремени,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодНачало > БазовыеЗаписи.ПериодДействияНачало
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодНачало
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияНачало
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОсновныеЗаписи.БазовыйПериодКонец < БазовыеЗаписи.ПериодДействияКонец
		|			ТОГДА ОсновныеЗаписи.БазовыйПериодКонец
		|		ИНАЧЕ БазовыеЗаписи.ПериодДействияКонец
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБазовыеЗаписиВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБазовыеЗаписиМинимальнаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СУММА(ОсновныеЗаписиБаза.РезультатБаза) КАК ЧИСЛО(38, 8)) КАК РезультатБаза,
		|	ВЫРАЗИТЬ(СУММА(ОсновныеЗаписиБаза.РезультатДнейБаза) КАК ЧИСЛО(38, 8)) КАК РезультатДнейБаза,
		|	ВЫРАЗИТЬ(СУММА(ОсновныеЗаписиБаза.РезультатЧасовБаза) КАК ЧИСЛО(38, 8)) КАК РезультатЧасовБаза,
		|	ОсновныеЗаписиБаза.Регистратор,
		|	ОсновныеЗаписиБаза.НомерСтроки,
		|	ОсновныеЗаписиБаза.РегистраторРазрез,
		|	ОсновныеЗаписиБаза.НомерСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ИдентификаторСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ПериодРегистрацииРазрез,
		|	ОсновныеЗаписиБаза.ВидРасчетаРазрез
		|ПОМЕСТИТЬ ВТРасчетнаяБаза
		|ИЗ
		|	(ВЫБРАТЬ
		|		БазовыеЗаписиДанныеПоДатам.Регистратор КАК Регистратор,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия <> 0
		|					И БазовыеЗаписиДанныеПоДатам.НеобходимРасчетСуммы
		|				ТОГДА (ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.РезультатБаза КАК ЧИСЛО(20, 2))) * (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.ВремяБазовыйПериод КАК ЧИСЛО(5, 2)), 0)) КАК ЧИСЛО(17, 8)) КАК ЧИСЛО(17, 8))) / БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия КАК ЧИСЛО(19, 8)))
		|			ИНАЧЕ ВЫБОР
		|					КОГДА БазовыеЗаписиДанныеПоДатам.МинимальнаяДатаНачалаБазовойЗаписи = БазовыеЗаписиДанныеПоДатам.БазовыйПериодНачало
		|						ТОГДА БазовыеЗаписиДанныеПоДатам.РезультатБаза
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ КАК РезультатБаза,
		|		ВЫБОР
		|			КОГДА БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия <> 0
		|					И БазовыеЗаписиДанныеПоДатам.НеобходимРасчетСуммы
		|				ТОГДА (ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.РезультатДнейБаза КАК ЧИСЛО(20, 2))) * (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.ВремяБазовыйПериод КАК ЧИСЛО(5, 2)), 0)) КАК ЧИСЛО(17, 8)) КАК ЧИСЛО(17, 8))) / БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия КАК ЧИСЛО(19, 8)))
		|			ИНАЧЕ ВЫБОР
		|					КОГДА БазовыеЗаписиДанныеПоДатам.МинимальнаяДатаНачалаБазовойЗаписи = БазовыеЗаписиДанныеПоДатам.БазовыйПериодНачало
		|						ТОГДА БазовыеЗаписиДанныеПоДатам.РезультатДнейБаза
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ КАК РезультатДнейБаза,
		|		ВЫБОР
		|			КОГДА БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия <> 0
		|					И БазовыеЗаписиДанныеПоДатам.НеобходимРасчетСуммы
		|				ТОГДА (ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.РезультатЧасовБаза КАК ЧИСЛО(20, 2))) * (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(СУММА(ЕСТЬNULL(ВЫРАЗИТЬ(БазовыеЗаписиДанныеПоДатам.ВремяБазовыйПериод КАК ЧИСЛО(5, 2)), 0)) КАК ЧИСЛО(17, 8)) КАК ЧИСЛО(17, 8))) / БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия КАК ЧИСЛО(19, 8)))
		|			ИНАЧЕ ВЫБОР
		|					КОГДА БазовыеЗаписиДанныеПоДатам.МинимальнаяДатаНачалаБазовойЗаписи = БазовыеЗаписиДанныеПоДатам.БазовыйПериодНачало
		|						ТОГДА БазовыеЗаписиДанныеПоДатам.РезультатЧасовБаза
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОНЕЦ КАК РезультатЧасовБаза,
		|		БазовыеЗаписиДанныеПоДатам.РегистраторРазрез КАК РегистраторРазрез,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтрокиРазрез КАК НомерСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ИдентификаторСтрокиРазрез КАК ИдентификаторСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ПериодРегистрацииРазрез КАК ПериодРегистрацииРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ВидРасчетаРазрез КАК ВидРасчетаРазрез
		|	ИЗ
		|		(ВЫБРАТЬ
		|			БазовыеЗаписиДанные.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|			ВЫБОР
		|				КОГДА БазовыеЗаписиДанные.ВремяВЧасах
		|					ТОГДА СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0))
		|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0))
		|			КОНЕЦ КАК ВремяБазовыйПериод,
		|			БазовыеЗаписиДанные.Время КАК ВремяПериодДействия,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи КАК МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы КАК НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.РезультатБаза КАК РезультатБаза,
		|			БазовыеЗаписиДанные.РезультатДнейБаза КАК РезультатДнейБаза,
		|			БазовыеЗаписиДанные.РезультатЧасовБаза КАК РезультатЧасовБаза,		
		|			БазовыеЗаписиДанные.Регистратор КАК Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки КАК НомерСтроки,
		|			БазовыеЗаписиДанные.РегистраторРазрез КАК РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез КАК НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез КАК ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез КАК ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез КАК ВидРасчетаРазрез
		|		ИЗ
		|			ВТБазовыеЗаписиДанные КАК БазовыеЗаписиДанные
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВидыВремени КАК ВидыВремени
		|				ПО БазовыеЗаписиДанные.ВидРасчетаРазрез = ВидыВремени.Ссылка
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписиДанные.БазовыйПериодНачало И БазовыеЗаписиДанные.БазовыйПериодКонец)
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|					И БазовыеЗаписиДанные.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|					И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ВидыВремени.ВидВремени)
		|					И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|					И БазовыеЗаписиДанные.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|					И БазовыеЗаписиДанные.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
		|		ГДЕ
		|			БазовыеЗаписиДанные.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			БазовыеЗаписиДанные.РезультатБаза,
		|			БазовыеЗаписиДанные.РезультатДнейБаза,
		|			БазовыеЗаписиДанные.РезультатЧасовБаза,
		|			БазовыеЗаписиДанные.Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки,
		|			БазовыеЗаписиДанные.Время,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.БазовыйПериодНачало,
		|			БазовыеЗаписиДанные.БазовыйПериодКонец,
		|			БазовыеЗаписиДанные.ВремяВЧасах,
		|			ГрафикиРаботыПоВидамВремени.Дата,
		|			БазовыеЗаписиДанные.РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			БазовыеЗаписиДанные.БазовыйПериодНачало,
		|			ВЫБОР
		|				КОГДА БазовыеЗаписиДанные.ВремяВЧасах
		|					ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
		|				ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)
		|			КОНЕЦ,
		|			БазовыеЗаписиДанные.Время,
		|			БазовыеЗаписиДанные.МинимальнаяДатаНачалаБазовойЗаписи,
		|			БазовыеЗаписиДанные.НеобходимРасчетСуммы,
		|			БазовыеЗаписиДанные.РезультатБаза,
		|			БазовыеЗаписиДанные.РезультатДнейБаза,
		|			БазовыеЗаписиДанные.РезультатЧасовБаза,		
		|			БазовыеЗаписиДанные.Регистратор,
		|			БазовыеЗаписиДанные.НомерСтроки,
		|			БазовыеЗаписиДанные.РегистраторРазрез,
		|			БазовыеЗаписиДанные.НомерСтрокиРазрез,
		|			БазовыеЗаписиДанные.ИдентификаторСтрокиРазрез,
		|			БазовыеЗаписиДанные.ПериодРегистрацииРазрез,
		|			БазовыеЗаписиДанные.ВидРасчетаРазрез
		|		ИЗ
		|			ВТБазовыеЗаписиДанные КАК БазовыеЗаписиДанные
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ПО (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ БазовыеЗаписиДанные.БазовыйПериодНачало И БазовыеЗаписиДанные.БазовыйПериодКонец)
		|					И (БазовыеЗаписиДанные.НеобходимРасчетСуммы)
		|					И БазовыеЗаписиДанные.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|					И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя))
		|					И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
		|					И БазовыеЗаписиДанные.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
		|					И БазовыеЗаписиДанные.ПериодДействия = ГрафикиРаботыПоВидамВремени.Месяц
		|		ГДЕ
		|			БазовыеЗаписиДанные.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)) КАК БазовыеЗаписиДанныеПоДатам
		|	
		|	СГРУППИРОВАТЬ ПО
		|		БазовыеЗаписиДанныеПоДатам.Регистратор,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтроки,
		|		БазовыеЗаписиДанныеПоДатам.ВремяПериодДействия,
		|		БазовыеЗаписиДанныеПоДатам.БазовыйПериодНачало,
		|		БазовыеЗаписиДанныеПоДатам.НеобходимРасчетСуммы,
		|		БазовыеЗаписиДанныеПоДатам.РезультатБаза,
		|		БазовыеЗаписиДанныеПоДатам.РезультатДнейБаза,
		|		БазовыеЗаписиДанныеПоДатам.РезультатЧасовБаза,
		|		БазовыеЗаписиДанныеПоДатам.МинимальнаяДатаНачалаБазовойЗаписи,
		|		БазовыеЗаписиДанныеПоДатам.РегистраторРазрез,
		|		БазовыеЗаписиДанныеПоДатам.НомерСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ИдентификаторСтрокиРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ПериодРегистрацииРазрез,
		|		БазовыеЗаписиДанныеПоДатам.ВидРасчетаРазрез) КАК ОсновныеЗаписиБаза
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеЗаписиБаза.Регистратор,
		|	ОсновныеЗаписиБаза.НомерСтроки,
		|	ОсновныеЗаписиБаза.РегистраторРазрез,
		|	ОсновныеЗаписиБаза.НомерСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ИдентификаторСтрокиРазрез,
		|	ОсновныеЗаписиБаза.ПериодРегистрацииРазрез,
		|	ОсновныеЗаписиБаза.ВидРасчетаРазрез
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТБазовыеЗаписиДанные";	
		
	// Адаптируем текст запроса.
	// Устанавливаем имя таблицы базовых видов расчета по виду ПВР.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицыБазовыхВР", ИмяТаблицыБазовыхВР);
	
	// Заполняем условие связи основных и базовых записей.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СвязьОсновныеЗаписиБазовыеЗаписи", УсловиеСвязи);
	
	Запрос.Выполнить();	

КонецПроцедуры	

#КонецОбласти

// Выполняет обход структуры записей расчета текущей очередности, 
// позволяет зарегистрировать результаты расчета очередности в специализированных разделах учета 
// для использования при расчетах последующей очередности.
//
// Параметры:
//	НаборыЗаписей - коллекция движений, посредством которой осуществляется регистрация результатов.
//	ЗаписиОчередности - соответствие, ключом которого является КатегорияУдержания, а значением - массив записей регистра
//	                    расчета.
//	ИсходныеДанныеПоИдентификаторуСтроки - соответствие, 
//		ключом которого является идентификатор строки, а значением - структура показателей.
//
Процедура ЗарегистрироватьРезультатыРасчетаОчередности(НаборыЗаписей, ЗаписиОчередности, ИсходныеДанныеПоИдентификаторуСтроки, ДокументСсылка)
	
	Для Каждого КлючИЗначение Из ЗаписиОчередности Цикл
		КатегорияУдержания = КлючИЗначение.Ключ;
		ЗаписиРасчета = КлючИЗначение.Значение;
		// Регистрация результатов расчета по учету исполнительных документов.
		ИсполнительныеЛисты.ЗарегистрироватьРезультатыРасчетаОчередности(
			НаборыЗаписей, КатегорияУдержания, ЗаписиРасчета, ИсходныеДанныеПоИдентификаторуСтроки);
	КонецЦикла;

КонецПроцедуры

Процедура ЗарегистрироватьНачисленияПоДоговорам(НаборыЗаписей, Организация, МесяцНачисления, МенеджерВременныхТаблиц)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорам.ФизическоеЛицо,
	|	НачисленияПоДоговорам.Сотрудник,
	|	НачисленияПоДоговорам.Подразделение,
	|	ВЫБОР
	|		КОГДА НачисленияПоДоговорам.КодДохода В (&КодыНДФЛДоговорыРаботыУслуги)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа)
	|	КОНЕЦ КАК Начисление,
	|	НачисленияПоДоговорам.Сумма
	|ИЗ
	|	ВТНачисленияПоДоговорам КАК НачисленияПоДоговорам";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КодыНДФЛДоговорыРаботыУслуги", 
		УчетНДФЛРасширенный.ДоходыНДФЛПоВидуОсобыхНачислений(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги));
	
	УстановитьПривилегированныйРежим(Истина);
	УчетНачисленнойЗарплаты.ЗарегистрироватьНачисленияУдержания(НаборыЗаписей, Ложь, Организация, МесяцНачисления,
			Запрос.Выполнить().Выгрузить(), Неопределено, Неопределено, Неопределено, Неопределено, Истина);
	
КонецПроцедуры

Процедура ОбъединитьТаблицыНачисленийИПерерасчета(МенеджерВременныхТаблиц, ИменаВТ)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияПредварительно.СуммаДохода КАК СуммаДохода,
	               |	НачисленияПредварительно.Подразделение КАК Подразделение,
	               |	НачисленияПредварительно.УсловияТруда КАК УсловияТруда,
	               |	НачисленияПредварительно.Сотрудник КАК Сотрудник,
	               |	НачисленияПредварительно.ПериодДействия КАК ПериодДействия,
	               |	НачисленияПредварительно.ДатаНачала КАК ДатаНачала,
	               |	НачисленияПредварительно.ДатаОкончания КАК ДатаОкончания,
	               |	НачисленияПредварительно.Начисление КАК Начисление,
	               |	НачисленияПредварительно.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	               |	НачисленияПредварительно.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	               |	НачисленияПредварительно.Сторно КАК Сторно,
	               |	НачисленияПредварительно.СторнируемыйДокумент КАК СторнируемыйДокумент,
	               |	НачисленияПредварительно.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТНачисления
	               |ИЗ
	               |	ВТНачисленияПредварительно КАК НачисленияПредварительно
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НачисленияПерерасчет.СуммаДохода,
	               |	НачисленияПерерасчет.Подразделение,
	               |	НачисленияПерерасчет.УсловияТруда,
	               |	НачисленияПерерасчет.Сотрудник,
	               |	НачисленияПерерасчет.ПериодДействия,
	               |	НачисленияПерерасчет.ДатаНачала,
	               |	НачисленияПерерасчет.ДатаОкончания,
	               |	НачисленияПерерасчет.Начисление,
	               |	НачисленияПерерасчет.ПодразделениеОрганизации,
	               |	НачисленияПерерасчет.ТерриторияВыполненияРаботВОрганизации,
	               |	НачисленияПерерасчет.Сторно,
	               |	НачисленияПерерасчет.СторнируемыйДокумент,
	               |	НачисленияПерерасчет.ИдентификаторСтрокиВидаРасчета
	               |ИЗ
	               |	ВТНачисленияПерерасчет КАК НачисленияПерерасчет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТНачисленияПредварительно";
	
	Запрос.Выполнить();
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИменаВТ, "ВТНачисленияПредварительно");
	ИменаВТ.Добавить("ВТНачисления");
	
КонецПроцедуры

Процедура СоздатьВТФизическиеЛица(МенеджерВременныхТаблиц, ИменаВТ, ПроверятьЗаполнениеДатыРождения = Истина, ФизическиеЛица = Неопределено)
	
	Если ИменаВТ.Количество() > 0 Тогда 
	
		ТекстЗапроса = "";
		ПерваяТаблица = Истина;
		Для Каждого ИмяВТ Из ИменаВТ Цикл
			Если Не ПерваяТаблица Тогда
				ТекстЗапроса = ТекстЗапроса +
				"
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	Таблица.Сотрудник
			|";
			
			Если ПерваяТаблица Тогда
				ТекстЗапроса = ТекстЗапроса +
				"
				|ПОМЕСТИТЬ ВТСотрудники
				|";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"
			|ИЗ
			|	" + ИмяВТ + " КАК Таблица";
			
			ПерваяТаблица = Ложь;
		КонецЦикла;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
			
		// Проверка заполнения дат рождения.
		Если ПроверятьЗаполнениеДатыРождения Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Сотрудник,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
			|ПОМЕСТИТЬ ВТСотрудникиПроверкаДатыРождения
			|ИЗ
			|	ВТСотрудники КАК Сотрудники";
			Запрос.Выполнить();
			КадровыйУчет.ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПроверкаДатыРождения", Ложь);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ТаблицаСотрудников
		|		ПО (ТаблицаСотрудников.Сотрудник = Сотрудники.Ссылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудники";
		
	Иначе 
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)";
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияВычетов(Начисления, Организация, ДокументСсылка, ПланируемаяДатаВыплаты, ЗаполнениеСтрок = Неопределено) Экспорт 
	
	Если Начисления.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаНачислений = Начисления[0];
	Если ТипЗнч(СтрокаНачислений) = Тип("СтрокаТаблицыЗначений") Тогда 
		ТаблицаНачислений = СтрокаНачислений.Владелец();
		ЕстьПолеФиксСуммаВычета = ТаблицаНачислений.Колонки.Найти("ФиксСуммаВычета") <> Неопределено;
		ЕстьПолеВычетПредоставленныйДругомуРодителю = ТаблицаНачислений.Колонки.Найти("ВычетПредоставленныйДругомуРодителю") <> Неопределено;
	Иначе 	
		ЕстьПолеФиксСуммаВычета = СтрокаНачислений.Свойство("ФиксСуммаВычета");
		ЕстьПолеВычетПредоставленныйДругомуРодителю = СтрокаНачислений.Свойство("ВычетПредоставленныйДругомуРодителю")
	КонецЕсли;	
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ИсходныеДанные.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("КодВычета", Новый ОписаниеТипов("СправочникСсылка.ВидыВычетовНДФЛ"));
	ИсходныеДанные.Колонки.Добавить("КоличествоДетей", Новый ОписаниеТипов("Число"));
	
	СписокНачислений = Новый Массив;
	СписокСотрудников = Новый Массив;
	
	УникальныеНачисления = Новый Соответствие;
	УникальныеСотрудники = Новый Соответствие;
	
	Для Каждого СтрокаНачислений Из Начисления Цикл 
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		Если ЗаполнениеСтрок <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаполнениеСтрок);
		КонецЕсли;
		Если ЕстьПолеВычетПредоставленныйДругомуРодителю Тогда 
			НоваяСтрока.Результат = НоваяСтрока.Результат + СтрокаНачислений.ВычетПредоставленныйДругомуРодителю;
		КонецЕсли;	
		Если УникальныеНачисления[НоваяСтрока.Начисление] = Неопределено Тогда 
			УникальныеНачисления.Вставить(НоваяСтрока.Начисление, Истина);
			Если ЗначениеЗаполнено(НоваяСтрока.Начисление) Тогда 
				СписокНачислений.Добавить(НоваяСтрока.Начисление);
			КонецЕсли;
		КонецЕсли;
		Если УникальныеСотрудники[НоваяСтрока.Сотрудник] = Неопределено Тогда 
			УникальныеСотрудники.Вставить(НоваяСтрока.Сотрудник);
			Если ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда 
				СписокСотрудников.Добавить(НоваяСтрока.Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	КодыДоходовНДФЛ = Новый Соответствие;
	Если СписокНачислений.Количество() > 0 Тогда 
		КодыДоходовНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокНачислений, "КодДоходаНДФЛ");
	КонецЕсли;
	
	ФизическиеЛица = Новый Соответствие;
	Если СписокСотрудников.Количество() > 0 Тогда 
		ФизическиеЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокСотрудников, "ФизическоеЛицо");
	КонецЕсли;
	
	НачисленияФизическихЛиц = Новый ТаблицаЗначений;
	НачисленияФизическихЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	НачисленияФизическихЛиц.Колонки.Добавить("КодДоходаНДФЛ", Новый ОписаниеТипов("СправочникСсылка.ВидыДоходовНДФЛ"));
	НачисленияФизическихЛиц.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияФизическихЛиц.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	НачисленияФизическихЛиц.Колонки.Добавить("СтрокаНачислений");
	
	Для Каждого СтрокаНачислений Из Начисления Цикл 
		НоваяСтрока = НачисленияФизическихЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
		Если ЗаполнениеСтрок <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаполнениеСтрок);
		КонецЕсли;
	    НоваяСтрока.ФизическоеЛицо = ФизическиеЛица[НоваяСтрока.Сотрудник];
	    НоваяСтрока.КодДоходаНДФЛ = КодыДоходовНДФЛ[НоваяСтрока.Начисление];
		НоваяСтрока.СтрокаНачислений = СтрокаНачислений;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсходныеДанные.НомерСтроки,
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Начисление,
		|	ИсходныеДанные.Результат,
		|	ИсходныеДанные.КодВычета,
		|	ИсходныеДанные.КоличествоДетей
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Регистратор КАК Регистратор,
		|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
		|	ДанныеДокумента.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеДокумента.Начисление.КодДоходаНДФЛ КАК КодДохода,
		|	ДанныеДокумента.Результат КАК Сумма,
		|	ДанныеДокумента.КодВычета КАК КодВычета,
		|	ДанныеДокумента.КоличествоДетей КАК КоличествоДетей
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	ВТДанныеДокумента КАК ДанныеДокумента";
		
	УстановитьПривилегированныйРежим(Истина);	
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
		
	УчетНДФЛ.СоздатьВТВычетыКДоходамФизическихЛиц(ДокументСсылка, Организация, ПланируемаяДатаВыплаты, Запрос.МенеджерВременныхТаблиц);
		
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВычетыКДоходамФизическихЛиц.ФизическоеЛицо,
		|	ВычетыКДоходамФизическихЛиц.КодДохода,
		|	ВычетыКДоходамФизическихЛиц.КодВычета,
		|	ВычетыКДоходамФизическихЛиц.СуммаВычета
		|ИЗ
		|	ВТВычетыКДоходамФизическихЛиц КАК ВычетыКДоходамФизическихЛиц";
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтборСтрок = Новый Структура("ФизическоеЛицо, КодДоходаНДФЛ");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтборСтрок.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		ОтборСтрок.КодДоходаНДФЛ = Выборка.КодДохода;
		
		СтрокиНачисленийФизическогоЛица = НачисленияФизическихЛиц.НайтиСтроки(ОтборСтрок);
		Если СтрокиНачисленийФизическогоЛица.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СуммаВычетаОстаток = Выборка.СуммаВычета;
		Для Каждого СтрокаНачисленийФизическогоЛица Из СтрокиНачисленийФизическогоЛица Цикл 
			СтрокаНачислений = СтрокаНачисленийФизическогоЛица.СтрокаНачислений;
			ДанныеВычета = Новый Структура("СуммаВычета", 0);
			ПересчитатьСуммуВычета = Не ЕстьПолеФиксСуммаВычета Или Не СтрокаНачислений.ФиксСуммаВычета;
			Если ПересчитатьСуммуВычета Тогда
				ВычетПредоставленныйДругомуРодителю = ?(ЕстьПолеВычетПредоставленныйДругомуРодителю, СтрокаНачислений.ВычетПредоставленныйДругомуРодителю, 0);
				СуммаВычета = Макс(0, СуммаВычетаОстаток - ВычетПредоставленныйДругомуРодителю);
				СуммаВычета = Мин(СуммаВычета, СтрокаНачислений.Результат);
				ДанныеВычета.Вставить("СуммаВычета", СуммаВычета);
			Иначе 
				ЗаполнитьЗначенияСвойств(ДанныеВычета, СтрокаНачислений);						
			КонецЕсли;
			
			СуммаВычетаОстаток = Макс(0, СуммаВычетаОстаток - ДанныеВычета.СуммаВычета);
			
			ДанныеВычета.Вставить("КодВычета", Выборка.КодВычета);
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ДанныеВычета);
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Процедура СформироватьДоходыДляРасчетаСтраховыхВзносов(Организация, МесяцНачисления, МенеджерВременныхТаблиц, ИменаВТ, ДокументСсылка, НачисленияСРаспределениемПоЕНВД, НаборыЗаписей = Неопределено)
	
	
	// Для формирования доходов создаем временную ссылку на документ и коллекцию наборов записей.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	
	Если ИменаВТ.Найти("ВТНачисления") <> Неопределено Тогда
		// Формирование доходов по начислениям.
		УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(НаборыЗаписей, Неопределено, Организация, МесяцНачисления, МенеджерВременныхТаблиц, Истина, Истина, ДокументСсылка);
	КонецЕсли;
	
	// Формирование доходов по начислениям по договорам.
	Если ИменаВТ.Найти("ВТНачисленияПоДоговорам") <> Неопределено Тогда
		СведенияОДоходахСтраховыеВзносы = УчетСтраховыхВзносовРасширенный.СведенияОДоходахПоДоговорамСтраховыеВзносы(
			Организация, МесяцНачисления, МенеджерВременныхТаблиц);
		УчетСтраховыхВзносов.СформироватьДоходыСтраховыеВзносы(
			НаборыЗаписей, Неопределено, Организация, МесяцНачисления, СведенияОДоходахСтраховыеВзносы, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТЗначенийПериодическихПоказателейФизическихЛиц(МенеджерВременныхТаблиц, СозданныеВТ)
	
	Если СозданныеВТ.Найти("ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТФизическиеЛицаПериоды",
		"ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", "Период");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвиженияПредварительно");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателейСотрудников.Период,
	|	ЗначенияПоказателейСотрудников.ФизическоеЛицо,
	|	ЗначенияПоказателейСотрудников.Показатель,
	|	ЗначенияПоказателейСотрудников.ДокументОснование,
	|	ВЫРАЗИТЬ(ЗначенияПоказателейСотрудников.Значение КАК ЧИСЛО(15, 4)) КАК Значение
	|ПОМЕСТИТЬ ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвижения
	|ИЗ
	|	ВТЗначенияПериодическихПоказателейСотрудниковСрезИДвиженияПредварительно КАК ЗначенияПоказателейСотрудников";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Описываем созданные временные таблицы, чтобы для оптимизации не создавать их повторно.
	СозданныеВТ.Добавить("ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников");
	
КонецПроцедуры

// Метод заполняет переданное соответствие, в котором, ключом является КатегорияУдержания, 
//	а значением выступает массив строк удержаний указанной роли.
//	Строки удержаний, для которых нет значений в переданном соответствии, 
//	собираются в массив и помещаются в соответствие по ключу пустая ссылка на перечисление ролей.
// В случае, если соответствие не указано, оно создается и все строки удержаний 
//	раскладываются по отдельным ролям.
//
// Параметры:
//	СтрокиУдержаний - массив строк коллекции Удержания.
//	КатегорииУдержаний - необязательный, соответствие по которому раскладываются удержания.
//	
Функция РазложитьСтрокиУдержанийПоРолям(СтрокиУдержаний, КатегорииУдержаний = Неопределено)
	
	Если КатегорииУдержаний = Неопределено Тогда
		КатегорииУдержаний = Новый Соответствие;
		Для Каждого Строка Из СтрокиУдержаний Цикл
			КатегорииУдержаний.Вставить(Строка.КатегорияУдержания, Новый Массив);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиУдержаний Цикл
		КатегорияУдержания = Строка.КатегорияУдержания;
		СтрокиУдержанийРоли = КатегорииУдержаний[КатегорияУдержания];
		Если СтрокиУдержанийРоли = Неопределено Тогда
			КатегорияУдержания = Перечисления.КатегорииУдержаний.ПустаяСсылка();
			СтрокиУдержанийРоли = КатегорииУдержаний[КатегорияУдержания];
			Если СтрокиУдержанийРоли = Неопределено Тогда
				СтрокиУдержанийРоли = Новый Массив;
				КатегорииУдержаний.Вставить(КатегорияУдержания, СтрокиУдержанийРоли);
			КонецЕсли;
		КонецЕсли;
		СтрокиУдержанийРоли.Добавить(Строка);
	КонецЦикла;
	
	Возврат КатегорииУдержаний;
	
КонецФункции

Функция ПричиныПересчета(СтрокаПричинПересчета)
	Возврат СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПричинПересчета);
КонецФункции

Функция СотрудникиФизическиеЛица(Знач СотрудникиФизическиеЛица, Организация)
	
	Если Не ЗначениеЗаполнено(СотрудникиФизическиеЛица) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СотрудникиФизическиеЛица) <> Тип("Массив") Тогда
		СотрудникиФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникиФизическиеЛица);
	КонецЕсли;
	
	// В качестве параметров могут быть получены физические лица, а не сотрудники.
	Если ТипЗнч(СотрудникиФизическиеЛица[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудники = СотрудникиФизическиеЛица;
		Физлица = КадровыйУчет.ФизическиеЛицаСотрудников(Сотрудники);
	Иначе
		Физлица = СотрудникиФизическиеЛица;
		Сотрудники = КадровыйУчетРасширенный.СотрудникиФизическихЛиц(Физлица, Организация, , Истина);
	КонецЕсли;
	
	Возврат Новый Структура("Сотрудники, ФизическиеЛица", Сотрудники, Физлица);
	
КонецФункции

// Процедура предназначена для получения актуальных вспомогательных сведений 
// о сотрудниках для расчета.
//
// Параметры:
//  НачисленияЗаПериод - таблица значений с колонками, 
//		см. ПустаяТаблицаНачисления().
//	ПериодРегистрации - период регистрации начислений, 
//		требуется для корректного заполнения периода регистрации времени и индивидуального графика.
//
Процедура ЗаполнитьСведенияСотрудниковДляРасчета(НачисленияЗаПериод, ПериодРегистрации, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	// Необходимо получить
	// - график работы (по кадровым данным)
	// - подразделение (по кадровым данным)
	// - вид учета времени (по начислению и данным графика)
	// - время в часах (по начислению и графику работы)
	// - график работы норма (по графику работы)
	
	// Но прежде нужно сформировать записи рабочего времени, а для этого в свою очередь получить периоды регистрации
	// времени.
	
	// Формируем параметры для получения кадровых данных.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияЗаПериод.Сотрудник,
		|	НачисленияЗаПериод.Начисление,
		|	НачисленияЗаПериод.ДатаНачала,
		|	НачисленияЗаПериод.ДатаОкончания
		|ПОМЕСТИТЬ ВТНачисленияЗаПериод
		|ИЗ
		|	&НачисленияЗаПериод КАК НачисленияЗаПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.ДатаНачала КАК Период,
		|	НАЧАЛОПЕРИОДА(СотрудникиПериоды.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
		|	СотрудникиПериоды.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТНачисленияЗаПериод КАК СотрудникиПериоды";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленияЗаПериод", НачисленияЗаПериод);
	Запрос.Выполнить();
	
	// Получаем периоды регистрации времени.
	УчетРабочегоВремени.СоздатьВТПериодыРегистрацииВремениСотрудников(МенеджерВременныхТаблиц, ПериодРегистрации, "ВТСотрудникиПериоды");
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыРегистрацииВремени.Сотрудник,
		|	ПериодыРегистрацииВремени.ПериодДействия,
		|	ПериодыРегистрацииВремени.ПериодРегистрации
		|ИЗ
		|	ВТПериодыРегистрацииВремениСотрудников КАК ПериодыРегистрацииВремени";
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(НачисленияЗаПериод.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(НачисленияЗаПериод.ДатаОкончания) КАК ДатаОкончания
		|ИЗ
		|	ВТНачисленияЗаПериод КАК НачисленияЗаПериод";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Начало = Неопределено;
	Окончание = Неопределено;
	Если Выборка.Следующий() Тогда
		Начало = Выборка.ДатаНачала;
		Окончание = Выборка.ДатаОкончания;
	КонецЕсли;
	
	// И формируем записи рабочего времени по полученным данным.
	УчетРабочегоВремени.СформироватьЗаписиРабочегоВремениСотрудников(ТаблицаСотрудников, Начало, Окончание);
	
	// Запрашиваем кадровые данные.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц, Истина, "Подразделение, ГрафикРаботы, СуммированныйУчетРабочегоВремени, ВидЗанятости");
		
	СоздатьВТПочасоваяОплатаТруда(МенеджерВременныхТаблиц, "ВТНачисленияЗаПериод");
	
	// Определив кадровый график, проверяем был ли индивидуальный график у сотрудника в этом периоде.
	// Принимая решения о том, был ли индивидуальный график, 
	// нужно учитывать, что в учете времени есть записи-исправления, которые всегда индивидуальные,
	// поэтому отбрасываем записи, период регистрации которых меньше текущего.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИндивидуальныйГрафик.ГрафикРаботы,
		|	ИндивидуальныйГрафик.Месяц
		|ПОМЕСТИТЬ ВТИндивидуальныеГрафики
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафик
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ИндивидуальныйГрафик.ГрафикРаботы = КадровыеДанныеСотрудников.Сотрудник
		|			И (ИндивидуальныйГрафик.Месяц = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ))
		|			И (ИндивидуальныйГрафик.ПериодРегистрации <= &ПериодРегистрации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.Период,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ГрафикРаботы, КадровыеДанныеСотрудников.ГрафикРаботы) КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ИндивидуальныйГрафик.ГрафикРаботы ЕСТЬ НЕ NULL 
		|			ТОГДА ИндивидуальныйГрафик.ГрафикРаботы
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|					ТОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени
		|				ИНАЧЕ ГрафикиРаботыСотрудников.Ссылка
		|			КОНЕЦ
		|	КОНЕЦ КАК ГрафикРаботыНорма,
		|	КадровыеДанныеСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени
		|ПОМЕСТИТЬ ВТГрафикиРаботы
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО (ГрафикиРаботыСотрудников.Ссылка = КадровыеДанныеСотрудников.ГрафикРаботы)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндивидуальныеГрафики КАК ИндивидуальныйГрафик
		|		ПО (ИндивидуальныйГрафик.ГрафикРаботы = КадровыеДанныеСотрудников.Сотрудник)
		|			И (ИндивидуальныйГрафик.Месяц = НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.Период, МЕСЯЦ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияЗаПериод.Сотрудник,
		|	НачисленияЗаПериод.ДатаНачала,
		|	НачисленияЗаПериод.ДатаОкончания,
		|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах
		|				ТОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Дней,
		|	СУММА(ВЫБОР
		|			КОГДА ГрафикиРаботыПоВидамВремени.ВремяВЧасах
		|				ТОГДА ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Часов
		|ПОМЕСТИТЬ ВТДанныеВремениПоИнтервалам
		|ИЗ
		|	ВТНачисленияЗаПериод КАК НачисленияЗаПериод
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботы КАК ГрафикиРаботы
		|		ПО НачисленияЗаПериод.Сотрудник = ГрафикиРаботы.Сотрудник
		|			И НачисленияЗаПериод.ДатаНачала = ГрафикиРаботы.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
		|			И (ГрафикиРаботыПоВидамВремени.ПериодРегистрации <= &ПериодРегистрации)
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = НачисленияЗаПериод.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НачисленияЗаПериод.ДатаНачала И НачисленияЗаПериод.ДатаОкончания)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияЗаПериод.Сотрудник,
		|	НачисленияЗаПериод.ДатаНачала,
		|	НачисленияЗаПериод.ДатаОкончания,
		|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияЗаПериод.Сотрудник,
		|	НачисленияЗаПериод.Начисление,
		|	НачисленияЗаПериод.ДатаНачала,
		|	КадровыеДанные.Подразделение,
		|	КадровыеДанные.ВидЗанятости,
		|	ГрафикиРаботы.ГрафикРаботы,
		|	ГрафикиРаботы.ГрафикРаботыНорма,
		|	ВЫБОР
		|		КОГДА Начисления.УчетВремениВЧасах
		|			ТОГДА ИСТИНА
		|		КОГДА Начисления.УчетВремениВДняхЧасах
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.ИспользуетСреднийЗаработокОбщий = ИСТИНА
		|						ТОГДА КадровыеДанные.СуммированныйУчетРабочегоВремени
		|					КОГДА Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ЗаПраздничныеДниПриОкончательномРасчете)
		|						ТОГДА ПочасоваяОплатаТруда.УчетВремениВЧасах
		|					КОГДА ДанныеВремениПоИнтервалам.ВидУчетаВремени В (&Праздники)
		|						ТОГДА ВЫБОР
		|								КОГДА ДанныеВремениПоИнтервалам.Часов = 0
		|									ТОГДА ЛОЖЬ
		|								ИНАЧЕ ИСТИНА
		|							КОНЕЦ
		|					ИНАЧЕ ПочасоваяОплатаТруда.УчетВремениВЧасах
		|				КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВремяВЧасах,
		|	ВЫБОР
		|		КОГДА ДанныеВремениПоИнтервалам.ВидУчетаВремени ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
		|							ИЛИ Начисления.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя = ЛОЖЬ
		|						ТОГДА &РабочееВремя
		|					ИНАЧЕ Начисления.ОбозначениеВТабелеУчетаРабочегоВремени
		|				КОНЕЦ
		|		ИНАЧЕ ДанныеВремениПоИнтервалам.ВидУчетаВремени
		|	КОНЕЦ КАК ВидУчетаВремени,
		|	ПериодыРегистрацииВремени.ПериодРегистрации КАК ПериодРегистрацииВремени
		|ИЗ
		|	ВТНачисленияЗаПериод КАК НачисленияЗаПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанные
		|		ПО (КадровыеДанные.Сотрудник = НачисленияЗаПериод.Сотрудник)
		|			И (КадровыеДанные.Период = НачисленияЗаПериод.ДатаНачала)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиРаботы КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.Сотрудник = НачисленияЗаПериод.Сотрудник)
		|			И (ГрафикиРаботы.Период = НачисленияЗаПериод.ДатаНачала)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Ссылка = НачисленияЗаПериод.Начисление)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВремениПоИнтервалам КАК ДанныеВремениПоИнтервалам
		|		ПО (ДанныеВремениПоИнтервалам.Сотрудник = НачисленияЗаПериод.Сотрудник)
		|			И (ДанныеВремениПоИнтервалам.ДатаНачала = НачисленияЗаПериод.ДатаНачала)
		|			И (ДанныеВремениПоИнтервалам.ДатаОкончания = НачисленияЗаПериод.ДатаОкончания)
		|			И (ДанныеВремениПоИнтервалам.ВидУчетаВремени = Начисления.ОбозначениеВТабелеУчетаРабочегоВремени)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРегистрацииВремениСотрудников КАК ПериодыРегистрацииВремени
		|		ПО (ПериодыРегистрацииВремени.Сотрудник = НачисленияЗаПериод.Сотрудник)
		|			И (ПериодыРегистрацииВремени.ПериодДействия = НАЧАЛОПЕРИОДА(НачисленияЗаПериод.ДатаНачала, МЕСЯЦ))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПочасоваяОплатаТруда КАК ПочасоваяОплатаТруда
		|		ПО (ПочасоваяОплатаТруда.Сотрудник = НачисленияЗаПериод.Сотрудник)
		|			И (ПочасоваяОплатаТруда.ДатаНачала = НачисленияЗаПериод.ДатаНачала)";
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("Праздники", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениРаботаВыходныеПраздничные());
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтборСтрок = Новый Структура("Сотрудник,Начисление,ДатаНачала");	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
		НайденныеСтроки = НачисленияЗаПериод.НайтиСтроки(ОтборСтрок);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СписокСвойств <> Неопределено Тогда
				Если ИсключаяСвойства <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, СписокСвойств, ИсключаяСвойства);
				Иначе
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, СписокСвойств);
				КонецЕсли;
			Иначе
				Если ИсключаяСвойства <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, , ИсключаяСвойства);
				Иначе
					ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Накладывает на временную таблицу, содержащую сотрудников, фильтр, 
// получая таким образом таблицу с тем же самым именем, 
// но уже содержащую только сотрудников, для которых установлен аванс расчетом за первую половину месяца.
//
Процедура ОтобратьСотрудниковРассчитываемыхВПервуюПоловинуМесяца(МенеджерВременныхТаблиц, ИмяВТСотрудники, МесяцНачисления) Экспорт 
	
	// Получаем менеджер ВТ и имя таблицы в которой есть сотрудник
	// выбираем все из этой таблицы в другую временную таблицу
	// выбираем из нее сотрудников,
	// уничтожаем исходную таблицу.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТДанныеБезОтбора
	|ИЗ
	|	#ВТСотрудники КАК ДанныеБезОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДанныеБезОтбора.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиБезОтбора
	|ИЗ
	|	ВТДанныеБезОтбора КАК ВТДанныеБезОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудники";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ПараметрыВТСпособыАванса = ОписательВременныхТаблицДляСоздатьВТАвансыСотрудников(
		МенеджерВременныхТаблиц, "ВТСотрудникиБезОтбора");
		
	СоздатьВТАвансыСотрудников(ПараметрыВТСпособыАванса, Истина, КонецМесяца(МесяцНачисления));
	
	// Выбираем из созданной временной таблицы с фильтром на сотрудников по авансу,
	// помещаем во временную таблицу с исходным именем.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ #ВТСотрудники
	|ИЗ
	|	ВТДанныеБезОтбора КАК ДанныеБезОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАвансыСотрудников КАК АвансыСотрудников
	|		ПО (АвансыСотрудников.Сотрудник = ДанныеБезОтбора.Сотрудник)
	|		И АвансыСотрудников.СпособРасчетаАванса = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует таблицу значений с начислениями по договорам подряда и авторским договорам.
//
// Параметры:
//		Организация
//		МесяцНачисления
//		ДокументСсылка - ссылка на документ, в котором рассчитываются договоры.
//		Подразделение, СправочникСсылка.ПодразделенияОрганизаций
//		Сотрудники, массив или СправочникСсылка.Сотрудники.
//
Функция РезультатНачисленияПоДоговорам(Организация, МесяцНачисления, ДокументСсылка, Подразделение = Неопределено, Знач Сотрудники = Неопределено)

	
	НачисленияПоДоговорам = ПустаяТаблицаНачисленияПоДоговорам();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		// Договоры гражданско-правового характера не используются.
		Возврат НачисленияПоДоговорам;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		Сотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("БезОтбораПоПодразделению", Не ЗначениеЗаполнено(Подразделение));
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("БезОтбораПоСотрудникам", Сотрудники = Неопределено);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("КонецПериодаОборотов", Новый Граница(МесяцНачисления, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаСреза", КонецМесяца(МесяцНачисления));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор,
	|	МАКСИМУМ(УсловияДоговораГПХ.Период) КАК Период
	|ПОМЕСТИТЬ ВТУсловияДоговораГПХМаксимальныеПериоды
	|ИЗ
	|	РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|ГДЕ
	|	УсловияДоговораГПХ.Период <= &ДатаСреза
	|	И УсловияДоговораГПХ.Организация = &Организация
	|	И (УсловияДоговораГПХ.Сотрудник В (&Сотрудники)
	|			ИЛИ &БезОтбораПоСотрудникам)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&МесяцНачисления,
	|	УсловияДоговораГПХ.Период,
	|	УсловияДоговораГПХ.Регистратор,
	|	УсловияДоговораГПХ.НомерСтроки,
	|	УсловияДоговораГПХ.Организация,
	|	УсловияДоговораГПХ.Сотрудник,
	|	УсловияДоговораГПХ.Договор,
	|	УсловияДоговораГПХ.КодДохода,
	|	УсловияДоговораГПХ.КатегорияЕСВ,
	|	УсловияДоговораГПХ.СпособОтраженияЗарплатыВБухучете,
	|	УсловияДоговораГПХ.Подразделение,
	|	УсловияДоговораГПХ.Сумма,
	|	УсловияДоговораГПХ.РазмерЕжемесячногоАвансовогоПлатежа,
	|	УсловияДоговораГПХ.ДатаНачала,
	|	УсловияДоговораГПХ.ДатаОкончания,
	|	УсловияДоговораГПХ.ЗаключенСоСтудентомРаботающимВСтудотряде,
	|	УсловияДоговораГПХ.СтатьяФинансирования,
	|	УсловияДоговораГПХ.СтатьяРасходов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПланируемаяДатаВыплаты,
	|	УсловияДоговораГПХ.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТУсловияДоговораГПХ
	|ИЗ
	|	ВТУсловияДоговораГПХМаксимальныеПериоды КАК УсловияДоговораГПХМаксимальныеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговораГПХ КАК УсловияДоговораГПХ
	|		ПО УсловияДоговораГПХМаксимальныеПериоды.Организация = УсловияДоговораГПХ.Организация
	|			И УсловияДоговораГПХМаксимальныеПериоды.Сотрудник = УсловияДоговораГПХ.Сотрудник
	|			И УсловияДоговораГПХМаксимальныеПериоды.Договор = УсловияДоговораГПХ.Договор
	|			И УсловияДоговораГПХМаксимальныеПериоды.Период = УсловияДоговораГПХ.Период
	|ГДЕ
	|	&УсловиеПодразделение
	|	И НАЧАЛОПЕРИОДА(УсловияДоговораГПХ.ДатаНачала, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|	И КОНЕЦПЕРИОДА(УсловияДоговораГПХ.ДатаОкончания, МЕСЯЦ) >= КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
			
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстУсловияПодразделение = "УсловияДоговораГПХ.Подразделение В ИЕРАРХИИ (&Подразделение)";
	Иначе
		ТекстУсловияПодразделение = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
			
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияПоДоговорамГПХОбороты.Организация,
	|	НачисленияПоДоговорамГПХОбороты.Договор,
	|	НачисленияПоДоговорамГПХОбороты.ФизическоеЛицо,
	|	НачисленияПоДоговорамГПХОбороты.СуммаОборот
	|ПОМЕСТИТЬ НачисленияПоДоговорамГПХ
	|ИЗ
	|	РегистрНакопления.НачисленияПоДоговорамГПХ.Обороты(
	|			,
	|			&КонецПериодаОборотов,
	|			,
	|			Организация = &Организация
	|				И Договор В
	|					(ВЫБРАТЬ
	|						УсловияДоговораГПХ.Договор
	|					ИЗ
	|						ВТУсловияДоговораГПХ КАК УсловияДоговораГПХ)) КАК НачисленияПоДоговорамГПХОбороты";
	
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияПоДоговорам.МесяцНачисления КАК Период,
	|	НачисленияПоДоговорам.МесяцНачисления КАК МесяцНачисления,
	|	НачисленияПоДоговорам.Организация КАК Организация,
	|	НачисленияПоДоговорам.Сотрудник КАК Сотрудник,
	|	НачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияПоДоговорам.Договор КАК Договор,
	|	НачисленияПоДоговорам.ДоговорАкт КАК ДоговорАкт,
	|	НачисленияПоДоговорам.КодДохода КАК КодДохода,
	|	НачисленияПоДоговорам.КатегорияЕСВ КАК КатегорияЕСВ,
	|	НачисленияПоДоговорам.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	НачисленияПоДоговорам.Подразделение КАК Подразделение,
	|	НачисленияПоДоговорам.Сумма КАК Сумма,
	|	НачисленияПоДоговорам.ДатаНачала КАК ДатаНачала,
	|	НачисленияПоДоговорам.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты,
	|	НачисленияПоДоговорам.Регистратор КАК Регистратор,
	|	НачисленияПоДоговорам.НомерСтроки КАК НомерСтроки,
	|	0 КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияПоДоговорам КАК НачисленияПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплаченныеДоговоры КАК СуществующиеНачисления
	|		ПО (СуществующиеНачисления.Регистратор <> &Ссылка)
	|			И НачисленияПоДоговорам.ДоговорАкт = СуществующиеНачисления.ДоговорАкт
	|			И НачисленияПоДоговорам.МесяцНачисления = СуществующиеНачисления.МесяцНачисления
	|ГДЕ
	|	НачисленияПоДоговорам.Организация = &Организация
	|	И НачисленияПоДоговорам.МесяцНачисления = &МесяцНачисления
	|	И СуществующиеНачисления.НомерСтроки ЕСТЬ NULL 
	|	И &УсловиеПодразделение 
	|	И (НачисленияПоДоговорам.Сотрудник В (&Сотрудники)
	|			ИЛИ &БезОтбораПоСотрудникам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&МесяцНачисления,
	|	&МесяцНачисления,
	|	УсловияДоговораГПХСрезПоследних.Организация,
	|	УсловияДоговораГПХСрезПоследних.Сотрудник,
	|	УсловияДоговораГПХСрезПоследних.ФизическоеЛицо,
	|	УсловияДоговораГПХСрезПоследних.Договор,
	|	УсловияДоговораГПХСрезПоследних.Договор,
	|	УсловияДоговораГПХСрезПоследних.КодДохода,
	|	УсловияДоговораГПХСрезПоследних.КатегорияЕСВ,
	|	УсловияДоговораГПХСрезПоследних.СпособОтраженияЗарплатыВБухучете,
	|	УсловияДоговораГПХСрезПоследних.Подразделение,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) > 0
	|						ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа > УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|					ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|				ИНАЧЕ УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа
	|			КОНЕЦ
	|	КОНЕЦ,
	|	УсловияДоговораГПХСрезПоследних.ДатаНачала,
	|	УсловияДоговораГПХСрезПоследних.ДатаОкончания,
	|	УсловияДоговораГПХСрезПоследних.ПланируемаяДатаВыплаты,
	|	УсловияДоговораГПХСрезПоследних.Регистратор,
	|	УсловияДоговораГПХСрезПоследних.НомерСтроки,
	|	0
	|ИЗ
	|	ВТУсловияДоговораГПХ КАК УсловияДоговораГПХСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияПоДоговорамГПХ КАК НачисленияПоДоговорамГПХОбороты
	|		ПО УсловияДоговораГПХСрезПоследних.Договор = НачисленияПоДоговорамГПХОбороты.Договор
	|			И УсловияДоговораГПХСрезПоследних.Организация = НачисленияПоДоговорамГПХОбороты.Организация
	|ГДЕ
	|	 ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(УсловияДоговораГПХСрезПоследних.ДатаОкончания, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МесяцНачисления, МЕСЯЦ)
	|				ТОГДА ВЫБОР
	|						КОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0) > 0
	|							ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа > УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|						ТОГДА УсловияДоговораГПХСрезПоследних.Сумма - ЕСТЬNULL(НачисленияПоДоговорамГПХОбороты.СуммаОборот, 0)
	|					ИНАЧЕ УсловияДоговораГПХСрезПоследних.РазмерЕжемесячногоАвансовогоПлатежа
	|				КОНЕЦ
	|		КОНЕЦ > 0
	|";
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ТекстУсловияПодразделение = "НачисленияПоДоговорам.Подразделение В ИЕРАРХИИ (&Подразделение)";
	Иначе
		ТекстУсловияПодразделение = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
	
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.МесяцНачисления,
	|	Начисления.Организация,
	|	Начисления.Сотрудник,
	|	Начисления.ДоговорАкт КАК ДокументОснование,
	|	Начисления.КодДохода,
	|	Начисления.КатегорияЕСВ,
	|	Начисления.Подразделение,
	|	Начисления.Сумма КАК Результат,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА Начисления.ПланируемаяДатаВыплаты = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ПланируемаяДатаВыплаты
	|		ИНАЧЕ Начисления.ПланируемаяДатаВыплаты
	|	КОНЕЦ КАК ПланируемаяДатаВыплаты
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления";
	
	ПланируемаяДатаВыплатыЗарплаты = РасчетЗарплатыРасширенныйКлиентСервер.ПланируемаяДатаВыплатыЗарплаты(Организация, МесяцНачисления);
	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", ПланируемаяДатаВыплатыЗарплаты);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), НачисленияПоДоговорам);
	
	Возврат НачисленияПоДоговорам;

КонецФункции

Функция РезультатРасчетаСтраховыхВзносов(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОтменятьЗапись = Истина, НачисленияСРаспределениемПоЕНВД = Неопределено, НаборыЗаписейДСВ = Неопределено)
	
	Если ОтменятьЗапись Тогда 
		НачатьТранзакцию();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СформироватьДоходыДляРасчетаСтраховыхВзносов(Организация, МесяцНачисления, МенеджерВременныхТаблиц, ИменаВТ, ДокументСсылка, НачисленияСРаспределениемПоЕНВД, НаборыЗаписейДСВ);
	
	СтруктураВзносы = УчетСтраховыхВзносов.РассчитатьВзносы(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	
	// Необходимо упорядочить таблицу взносов по тем же правилам, по которым сортируются все списки сотрудников (см. дополнительные настройки).
	// Для этого получаем основных сотрудников.
	Физлица = ОбщегоНазначения.ВыгрузитьКолонку(СтруктураВзносы.ВзносыФОТ, "ФизическоеЛицо", Истина);
	СотрудникиФизическиеЛица = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(Физлица, Истина, Организация, МесяцНачисления);
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиФизическиеЛица, "Сотрудник", Истина);
	
	// По основным сотрудникам запрашиваем сведения о рабочих местах на конец месяца.
	ЗапросУпорядочивания = Новый Запрос;
	ЗапросУпорядочивания.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(ЗапросУпорядочивания.МенеджерВременныхТаблиц, Истина, Сотрудники, "Подразделение,Должность", КонецМесяца(МесяцНачисления));
	ЗапросУпорядочивания.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	| ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	// Добавляем сортировку по настройкам.
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(ЗапросУпорядочивания, "КадровыеДанныеСотрудников", Ложь);
	
	Выборка = ЗапросУпорядочивания.Выполнить().Выбрать();
	
	ПорядокПоФизическимЛицам = Новый Соответствие;
	Порядок = 0;
	Пока Выборка.Следующий() Цикл
		ПорядокПоФизическимЛицам.Вставить(Выборка.ФизическоеЛицо, Порядок);
		Порядок = Порядок + 1;
	КонецЦикла;
	
	// На основе полученного соответствия сортируем строки таблицы.
	СтруктураВзносы.Взносы.Колонки.Добавить("ПорядокСтрок");
	СтруктураВзносы.ВзносыФОТ.Колонки.Добавить("ПорядокСтрок");
	Для Каждого Строка Из СтруктураВзносы.Взносы Цикл
		Строка.ПорядокСтрок = ПорядокПоФизическимЛицам[Строка.ФизическоеЛицо];
	КонецЦикла;
	СтруктураВзносы.Взносы.Сортировать("ПорядокСтрок");
	Для Каждого Строка Из СтруктураВзносы.ВзносыФОТ Цикл
		Строка.ПорядокСтрок = ПорядокПоФизическимЛицам[Строка.ФизическоеЛицо];
	КонецЦикла;
	СтруктураВзносы.ВзносыФОТ.Сортировать("ПорядокСтрок");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ОтменятьЗапись Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат СтруктураВзносы;
	
КонецФункции

Процедура СформироватьДоходыНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетЗарплаты = Истина, ДатаУдержанияИсчисленногоНалога = Неопределено, НаборыЗаписей = Неопределено)
	
	// Для формирования доходов создаем коллекцию наборов записей.
	Если НаборыЗаписей = Неопределено Тогда 
		НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	КонецЕсли;
	
	ДатаОкончания = КонецМесяца(МесяцНачисления);
	
	Если ДатаУдержанияИсчисленногоНалога = Неопределено Тогда 
		ДатаУдержанияИсчисленногоНалога = ДатаОкончания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Формируем доходы по начислениям и по таблице перерасчета.
	Если ИменаВТ.Найти("ВТНачисления") <> Неопределено Или ИменаВТ.Найти("ВТНачисленияПерерасчет") <> Неопределено Тогда 
		
		МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
		ЗначениеПустойСсылки = "ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)";

		ТекстЗапросаНачисления = 
		"ВЫБРАТЬ
		|	НачисленияДокумента.Сотрудник,
		|	НачисленияДокумента.Начисление,
		|	НачисленияДокумента.ДатаНачала,
		|	НачисленияДокумента.ДатаОкончания,
		|	НачисленияДокумента.СуммаДохода,
		|	НачисленияДокумента.Подразделение,
		|	НачисленияДокумента.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	НачисленияДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	НачисленияДокумента.Сторно КАК Сторно
		|ПОМЕСТИТЬ ВТНачисленияДляРасчетаНДФЛ
		|ИЗ
		|	#ИмяВТНачисления КАК НачисленияДокумента";

		Если ИменаВТ.Найти("ВТНачисления") <> Неопределено И ИменаВТ.Найти("ВТНачисленияПерерасчет") = Неопределено Тогда	
			ТекстЗапроса = СтрЗаменить(ТекстЗапросаНачисления, "#ИмяВТНачисления", "ВТНачисления");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.СторнируемыйДокумент", ЗначениеПустойСсылки);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачисленияДокумента.Сторно", "ЛОЖЬ");
		ИначеЕсли ИменаВТ.Найти("ВТНачисленияПерерасчет") <> Неопределено И ИменаВТ.Найти("ВТНачисления") = Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапросаНачисления, "#ИмяВТНачисления", "ВТНачисленияПерерасчет");
		Иначе
			// Если присутствуют обе таблицы, их объединение уже выполнено, ВТНачисления включает ВТНачисленияПерерасчет.
			ТекстЗапроса = СтрЗаменить(ТекстЗапросаНачисления, "#ИмяВТНачисления", "ВТНачисления");
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();	
		
		Записывать = ?(ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Увольнение"), Ложь, Истина);
		УчетНДФЛРасширенный.СформироватьДоходыНДФЛПоНачислениям(
			НаборыЗаписей, Ложь, Организация, ДатаОкончания, ДатаУдержанияИсчисленногоНалога, МенеджерВременныхТаблиц, МесяцНачисления, Записывать, ОкончательныйРасчетЗарплаты, "ВТНачисленияДляРасчетаНДФЛ", ДокументСсылка);
			
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Увольнение") Тогда 
			Документы.Увольнение.УстановитьДатыПолученияДоходовПоОплатеТруда(НаборыЗаписей, ДатаУдержанияИсчисленногоНалога, МесяцНачисления);
		КонецЕсли;
			
		Запрос.Текст = "УНИЧТОЖИТЬ ВТНачисленияДляРасчетаНДФЛ";
		Запрос.Выполнить();	
			
	КонецЕсли;
	
	// Формируем доходы по начислениям по договорам.
	Если ИменаВТ.Найти("ВТНачисленияПоДоговорам") <> Неопределено Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НачисленияПоДоговорам.Сотрудник,
		|	НачисленияПоДоговорам.ФизическоеЛицо,
		|	НачисленияПоДоговорам.Начисление,
		|	НачисленияПоДоговорам.Подразделение,
		|	НачисленияПоДоговорам.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
		|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты КАК ДатаПолученияДохода,
		|	НачисленияПоДоговорам.КодДохода,
		|	НачисленияПоДоговорам.Сумма КАК СуммаДохода
		|ИЗ
		|	ВТНачисленияПоДоговорам КАК НачисленияПоДоговорам
		|ГДЕ
		|	НачисленияПоДоговорам.ПланируемаяДатаВыплаты <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(НаборыЗаписей, Ложь, Организация, ДатаОкончания, Запрос.Выполнить().Выгрузить(), Истина, ОкончательныйРасчетЗарплаты);
	КонецЕсли;
	
	// Формируем доходы по прочим начислениям.
	Если ИменаВТ.Найти("ВТПрочиеНачисления") <> Неопределено Тогда 
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрочиеНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрочиеНачисления.Подразделение,
		|	ПрочиеНачисления.ПодразделениеОрганизации КАК ПодразделениеСотрудника,
		|	ПрочиеНачисления.ДатаНачала КАК ДатаПолученияДохода,
		|	ПрочиеНачисления.КодДохода,
		|	ПрочиеНачисления.Сумма КАК СуммаДохода
		|ИЗ
		|	ВТПрочиеНачисления КАК ПрочиеНачисления";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(НаборыЗаписей, Ложь, Организация, ДатаОкончания, Запрос.Выполнить().Выгрузить(), Истина, ОкончательныйРасчетЗарплаты);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатРасчетаНДФЛ(Организация, МесяцНачисления, ДокументСсылка, МенеджерВременныхТаблиц, ИменаВТ, ОкончательныйРасчетЗарплаты = Истина, ДатаУдержанияИсчисленногоНалога = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Рассчитываем НДФЛ
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, ДокументСсылка, Организация, МесяцНачисления, ОкончательныйРасчетЗарплаты, ДатаУдержанияИсчисленногоНалога);
	
	УстановитьПривилегированныйРежим(Ложь);
		
	// Упорядочим таблицу НДФЛ по тем же правилам, что и начисления (для этого получаем основных сотрудников).
	Физлица = ОбщегоНазначения.ВыгрузитьКолонку(РезультатРасчетаНДФЛ, "ФизическоеЛицо", Истина);
	СотрудникиФизическиеЛица = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(Физлица, Истина, Организация, МесяцНачисления);
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиФизическиеЛица, "Сотрудник", Истина);
	
	// По основным сотрудникам запрашиваем сведения о рабочих местах на конец месяца.
	МенеджерВТУпорядочивания = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(МенеджерВТУпорядочивания, Истина, Сотрудники, "Подразделение,Должность", КонецМесяца(МесяцНачисления));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТУпорядочивания;
	
	// Добавляем сортировку по настройкам.
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "КадровыеДанныеСотрудников", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПорядокПоФизическимЛицам = Новый Соответствие;
	Порядок = 0;
	Пока Выборка.Следующий() Цикл
		ПорядокПоФизическимЛицам.Вставить(Выборка.ФизическоеЛицо, Порядок);
		Порядок = Порядок + 1;
	КонецЦикла;
	
	// На основе полученного соответствия сортируем строки таблицы.
	РезультатРасчетаНДФЛ.Колонки.Добавить("ПорядокСтрок");
	РезультатРасчетаНДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Для Каждого Строка Из РезультатРасчетаНДФЛ Цикл
		Строка.ПорядокСтрок = ПорядокПоФизическимЛицам[Строка.ФизическоеЛицо];
	КонецЦикла;
	РезультатРасчетаНДФЛ.Сортировать("ПорядокСтрок,НалоговыйПериод,КодДоходаКод");
	
	Возврат РезультатРасчетаНДФЛ;
	
КонецФункции

Процедура ЗарегистрироватьНДФЛ(НаборыЗаписей, НДФЛ, Организация, МесяцНачисления, МенеджерВременныхТаблиц)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		Если НДФЛ.Колонки.Найти("ПодразделениеСотрудника") = Неопределено Тогда
			НДФЛ.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		КонецЕсли;
		Если НДФЛ.Колонки.Найти("Подразделение") = Неопределено Тогда
			НДФЛ.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		КонецЕсли;
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(НаборыЗаписей, Ложь, Организация, МесяцНачисления, НДФЛ, МенеджерВременныхТаблиц, , Истина);
		Возврат;
	КонецЕсли;
	
	// Предварительно нужно распределить НДФЛ по рабочим местам.
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛ, "ФизическоеЛицо", Истина);
	БазаРаспределенияНДФЛ = УчетНДФЛ.ПолучитьБазуРасчетаНДФЛ(Организация, МесяцНачисления, ФизическиеЛицаМассив);
	УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.УдержанияПоРабочимМестам(НДФЛ, МесяцНачисления, Организация, БазаРаспределенияНДФЛ, Истина, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
	УдержанияПоРабочимМестам.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Для Каждого СтрокаТаблицы Из УдержанияПоРабочимМестам Цикл
		СтрокаТаблицы.ПодразделениеСотрудника = СтрокаТаблицы.Подразделение;
	КонецЦикла;
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(НаборыЗаписей, Ложь, Организация, МесяцНачисления, УдержанияПоРабочимМестам, МенеджерВременныхТаблиц, , Истина);	
	
КонецПроцедуры

// Процедура предназначена для расширения стандартных критериев, 
// в соответствии с которыми строка с начислением делится на отдельные интервалы.
//
// Параметры:
//	МенеджерВременныхТаблиц - содержит таблицу ВТНачисленияСотрудников с полями Сотрудник и Начисление.
//	МесяцНачисления - период регистрации расчетов.
//	Начало и Окончание - интервал, за который выполняется начисление зарплаты.
//	
Процедура СоздатьВТДополнительныеДатыИзмененияНачислений(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание) Экспорт 
	
	ИменаВТ = Новый Массив;
	
	// Формируем таблицы с датами изменения
	// - стажа,
	СоздатьВТДатыИзмененияНачисленийЗависящихОтСтажа(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание, ИменаВТ);
	// - способа оплаты праздничных дней (по дням или по часам),
	СоздатьВТДатыИзмененияСпособаОплатыПраздников(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание, ИменаВТ);
	// - пособий ,
	УчетПособийСоциальногоСтрахованияРасширенный.СоздатьВТДатыИзмененияЗаписейРасчетаПособияДоПолутораЛет(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	// - базового тарифа, тарифной группы,
	РазрядыКатегорииДолжностей.СоздатьВТПериодыИзмененияБазовогоТарифа(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	// - совокупной тарифной ставки,
	СоздатьВТДатыИзмененияСовокупнойСтавки(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	// - и других начислений.
	РасчетЗарплатыРасширенныйПереопределяемый.СоздатьВТПериодыИзмененияОтдельныхНачислений(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоСодержания");
		Модуль.СоздатьВТДатыИзмененияОкладовЗаКлассныйЧин(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.СоздатьВТДатыИзмененияОкладовЗаЗвание(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) КАК Начисление,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДополнительныеДатыИзмененияНачислений";
	
	Для Каждого ИмяВТ Из ИменаВТ Цикл
		ТекстОбъединения = "
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|ВЫБРАТЬ
		|	ПериодыИзменения.Период,
		|	ПериодыИзменения.Сотрудник,
		|	ПериодыИзменения.Начисление,
		|	ПериодыИзменения.ДокументОснование
		|ИЗ #ИмяВТ КАК ПериодыИзменения
		|";
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстОбъединения, "#ИмяВТ", ИмяВТ);
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДатыИзмененияНачисленийЗависящихОтСтажа(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание, ИменаВТ)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиПериоды.*,
	|	ПоказателиНачислений.Показатель.ВидСтажа КАК ВидСтажа
	|ПОМЕСТИТЬ ВТСотрудникиПериодыВидыСтажа
	|ИЗ
	|	ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ПО СотрудникиПериоды.Сотрудник = НачисленияСотрудников.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО (ПоказателиНачислений.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
	|			И (ПоказателиНачислений.Ссылка = НачисленияСотрудников.Начисление)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(МенеджерВременныхТаблиц, "ВТСотрудникиПериодыВидыСтажа", , , "ВидСтажа");
	
	ТекстЗапроса = 
	"УНИЧТОЖИТЬ ВТСотрудникиПериодыВидыСтажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДатыИзмененияСтажаСотрудников.Сотрудник,
	|	ДатыИзмененияСтажаСотрудников.ДатаСтажа КАК Период,
	|	ПоказателиНачислений.Ссылка КАК Начисление,
	|	НачисленияСотрудников.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДатыИзмененияНачисленийЗависящихОтСтажа
	|ИЗ
	|	ВТПериодыИзмененияСтажа КАК ДатыИзмененияСтажаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ПО (НачисленияСотрудников.Сотрудник = ДатыИзмененияСтажаСотрудников.Сотрудник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО (ПоказателиНачислений.Показатель.ВидСтажа = ДатыИзмененияСтажаСотрудников.ВидСтажа)
	|			И (ПоказателиНачислений.Ссылка = НачисленияСотрудников.Начисление)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ШкалаОценкиСтажа
	|		ПО (ШкалаОценкиСтажа.Ссылка = ПоказателиНачислений.Показатель)
	|			И (ШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = ДатыИзмененияСтажаСотрудников.ЗначениеСтажа
	|				ИЛИ ДатыИзмененияСтажаСотрудников.ЗначениеСтажа = 0)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ИменаВТ.Добавить("ВТДатыИзмененияНачисленийЗависящихОтСтажа");
	
КонецПроцедуры

Процедура СоздатьВТДатыИзмененияСпособаОплатыПраздников(МенеджерВременныхТаблиц, МесяцНачисления, Начало, Окончание, ИменаВТ)
	
	Праздники = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники");
	Если Не ЗначениеЗаполнено(Праздники) Тогда
		Возврат;
	КонецЕсли;
	
	// Определяем даты изменения способа оплаты праздников.
	// В течение заполняемого периода возможны смены способов оплаты праздничных дней (по дням и по часам).
	// Необходимо определить даты, в которых произошла смена способа оплаты, 
	// они будут использоваться для расщепления начислений праздничных дней.
	// Самую первую дату подменяем на начало работы сотрудника в этом месяце, чтобы интервалы были "красивыми".
	
	ТекстЗапроса = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВремяВЧасах
	|ПОМЕСТИТЬ ВТДатыОплатыПраздников
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ПО (НачисленияСотрудников.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &Начало И &Окончание)
	|			И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах = ЛОЖЬ)
	|			И (ГрафикиРаботыПоВидамВремени.ПериодРегистрации <= &ПериодРегистрации)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени В (&Праздники))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыОплатыПраздников.ГрафикРаботы,
	|	ДатыОплатыПраздников.Месяц,
	|	ДатыОплатыПраздников.Дата,
	|	МАКСИМУМ(ДатыСлева.Дата) КАК ДатаСлева
	|ПОМЕСТИТЬ ВТБлижайшиеДатыСлева
	|ИЗ
	|	ВТДатыОплатыПраздников КАК ДатыОплатыПраздников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыОплатыПраздников КАК ДатыСлева
	|		ПО (ДатыСлева.ГрафикРаботы = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (ДатыСлева.Месяц = ДатыОплатыПраздников.Месяц)
	|			И (ДатыСлева.Дата < ДатыОплатыПраздников.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыОплатыПраздников.ГрафикРаботы,
	|	ДатыОплатыПраздников.Месяц,
	|	ДатыОплатыПраздников.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеМеста.Сотрудник,
	|	НАЧАЛОПЕРИОДА(РабочиеМеста.Период, МЕСЯЦ) КАК Месяц,
	|	МИНИМУМ(РабочиеМеста.Период) КАК Период
	|ПОМЕСТИТЬ ВТНачалоРаботыСотрудников
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеМеста.Сотрудник,
	|	НАЧАЛОПЕРИОДА(РабочиеМеста.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыОплатыПраздников.ГрафикРаботы КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА БлижайшиеДатыСлева.ДатаСлева ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(НачалоРаботыСотрудников.Период, ДатыОплатыПраздников.Месяц)
	|		ИНАЧЕ ДатыОплатыПраздников.Дата
	|	КОНЕЦ КАК Период,
	|	НачисленияСотрудников.Начисление КАК Начисление,
	|	НачисленияСотрудников.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТДатыИзмененияСпособаОплатыПраздников
	|ИЗ
	|	ВТДатыОплатыПраздников КАК ДатыОплатыПраздников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБлижайшиеДатыСлева КАК БлижайшиеДатыСлева
	|		ПО (БлижайшиеДатыСлева.ГрафикРаботы = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (БлижайшиеДатыСлева.Месяц = ДатыОплатыПраздников.Месяц)
	|			И (БлижайшиеДатыСлева.Дата = ДатыОплатыПраздников.Дата)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачалоРаботыСотрудников КАК НачалоРаботыСотрудников
	|		ПО (НачалоРаботыСотрудников.Сотрудник = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (НачалоРаботыСотрудников.Месяц = ДатыОплатыПраздников.Месяц)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыОплатыПраздников КАК ДатыОплатыПраздниковСлева
	|		ПО (ДатыОплатыПраздниковСлева.ГрафикРаботы = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (ДатыОплатыПраздниковСлева.Месяц = ДатыОплатыПраздников.Месяц)
	|			И (ДатыОплатыПраздниковСлева.Дата = БлижайшиеДатыСлева.ДатаСлева)
	|			И (ДатыОплатыПраздниковСлева.ВремяВЧасах = ДатыОплатыПраздников.ВремяВЧасах)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
	|		ПО (НачисленияСотрудников.Сотрудник = ДатыОплатыПраздников.ГрафикРаботы)
	|			И (НачисленияСотрудников.Начисление.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоЗначениюВидаВремениПриОкончательномРасчете))
	|			И (НачисленияСотрудников.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени В (&Праздники))
	|ГДЕ
	|	ДатыОплатыПраздниковСлева.Дата ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачалоРаботыСотрудников";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", МесяцНачисления);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("Праздники", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениРаботаВыходныеПраздничные());
	Запрос.Выполнить();
	
	ИменаВТ.Добавить("ВТДатыИзмененияСпособаОплатыПраздников");
	
КонецПроцедуры

Процедура СоздатьВТДатыИзмененияСовокупнойСтавки(МенеджерВременныхТаблиц, Начало, Окончание, ИменаВТ)
	
	// Готовим ВТ для запроса значений совокупных ставок.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСотрудников.Сотрудник,
		|	&Начало КАК Период,
		|	ДОБАВИТЬКДАТЕ(&Начало, ДЕНЬ, 1) КАК ДатаНачала,
		|	&Окончание КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериодыЗначенийСовокупныхСтавок
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.Ссылка = НачисленияСотрудников.Начисление)
		|			И (ПоказателиНачислений.Показатель В (&ПоказателиРасчетПоСовокупнойСтавке))";
	
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("ПоказателиРасчетПоСовокупнойСтавке", Справочники.ПоказателиРасчетаЗарплаты.ПоказателиРасчетПоСовокупнойСтавке());
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериодыЗначенийСовокупныхСтавок", "Сотрудник");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ЗначенияСовокупныхТарифныхСтавокСотрудников", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначениеСовокупныхСтавок.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.Начисление,
		|	НачисленияСотрудников.ДокументОснование
		|ПОМЕСТИТЬ ВТДатыИзмененияСовокупнойСтавки
		|ИЗ
		|	ВТНачисленияСотрудников КАК НачисленияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.Ссылка = НачисленияСотрудников.Начисление)
		|			И (ПоказателиНачислений.Показатель В (&ПоказателиРасчетПоСовокупнойСтавке))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияСовокупныхТарифныхСтавокСотрудников КАК ЗначениеСовокупныхСтавок
		|		ПО (ЗначениеСовокупныхСтавок.Сотрудник = НачисленияСотрудников.Сотрудник)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗначенияСовокупныхТарифныхСтавокСотрудников";
		
	Запрос.Выполнить();
	
	ИменаВТ.Добавить("ВТДатыИзмененияСовокупнойСтавки");
	
КонецПроцедуры

// Сопоставляет строки переданных коллекций, заменяет строки одной коллекции на строки другой.
// Сохраняет внесенные пользователем исправления.
//
Процедура ЗаменитьСтрокиУдержаний(ОбновляемаяКоллекция, СтрокиОбновления, СохранятьИсправления, КонтролируемыеПоля, ОтборПоФизическимЛицам)
	
	Если СохранятьИсправления Тогда
		УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, "Удержания");
	КонецЕсли;
	ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, СтрокиОбновления, "ФизическоеЛицо,Удержание,ДокументОснование", УсловияЗаменыСтрок, ОтборПоФизическимЛицам);
	
КонецПроцедуры

Процедура ЗаменитьСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ, НДФЛ, ОбновляемаяКоллекцияВычеты, ПримененныеВычеты, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрок = Неопределено, СохранятьИсправления = Истина, КлючевыеКолонки = "ФизическоеЛицо") Экспорт
	
	МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ);
	
	// Заполняем строки идентификатором увеличенным на единицу, относительно максимального.
	УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
		МаксимальныйИдентификаторСтрокиНДФЛ + 1, НДФЛ, ПримененныеВычеты);
	
	УсловияЗаменыСтрок = Неопределено;
	
	// Сохранение идентификаторов заменяемых строк НДФЛ.
	ИдентификаторыСтрокНДФЛ = Новый Массив;
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыСтрокНДФЛ, 
		ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ"));
		
	// Обновление строк таблицы НДФЛ.
	Если СохранятьИсправления Тогда
		УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НДФЛИмя);
	КонецЕсли;
	
	// Сбор информации об идентификаторах строка НДФЛ принимающих участие в замене.
	ИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	
	ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекцияНДФЛ, НДФЛ, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборСтрок);
	
	
КонецПроцедуры

Процедура ЗаменитьСтрокиВзносов(ОбновляемаяКоллекция, СтрокиОбновления, КонтролируемыеПоля, ОписаниеДокумента, ОтборСтрок = Неопределено, СохранятьИсправления = Истина)
	
	УсловияЗаменыСтрок = Неопределено;
	
	// Обновление строк таблицы Взносы.
	Если СохранятьИсправления Тогда
		УсловияЗаменыСтрок = УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента);
	КонецЕсли;
	ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекция, СтрокиОбновления, "ФизическоеЛицо,ВидЕСВ", УсловияЗаменыСтрок, ОтборСтрок);
КонецПроцедуры

// Метод преобразовывает значения показателей, указанные в строке, 
// в структуру, которую в свою очередь вставляет в соответствие по идентификатору строки.
// В строке данных показатели представлены в виде Показатель1, ..., ПоказательN.
// Кроме того, выполняется поиск значения показателя в коллекции известных значений.
// 
// Параметры:
//	- СтрокаДанных - строка коллекции с полями показателей и их значений.
//	- ИдентификаторСтроки - число, ключ, по которому структура со значениями показателей помещается в соответствие.
//	- ИсходныеДанныеПоИдентификаторуСтроки - соответствие, 
//	- КоличествоПоказателей - число, количество показателей в коллекции, 
//	- ИзвестныеЗначенияПоказателей - необязательный, таблица значений с известными показателями, 
//	- ИзвестныеЗначенияПоИдентификаторуСтроки - соответствие для упаковки известных показателей.
//
Процедура УпаковатьЗначенияПоказателей(СтрокаДанных, ИдентификаторСтроки, ИсходныеДанныеПоИдентификаторуСтроки, ПоказателиВидаРасчета, КоличествоПоказателей, ПереопределяемыеПоказатели, ИзвестныеЗначенияПоказателей = Неопределено, ИзвестныеЗначенияПоказателейПоОснованиям = Неопределено, ИзвестныеЗначенияПоИдентификаторуСтроки = Неопределено)
	
	ИсходныеДанные = Новый Структура("Результат", 0);
	ИзвестныеЗначения = Новый Структура;
	
	НомерПоказателя = 0;
	Для Каждого СведенияОПоказателе Из ПоказателиВидаРасчета Цикл
		НомерПоказателя = НомерПоказателя + 1;
		Показатель = СведенияОПоказателе.Показатель;
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(Показатель);
		ИсходныеДанные.Вставить(ИдентификаторПоказателя, СтрокаДанных["Значение" + НомерПоказателя]);
		// Если расчет показателя переопределяется, вписываем его в отдельную коллекцию, 
		// но только, если его значение не определено по данным учета.
		Если ЗарплатаКадрыРасширенныйПовтИсп.ПоказателиПереопределяемогоРасчета().Найти(Показатель) <> Неопределено Тогда
			ПереопределяемыеПоказатели.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем все известные значения показателей сотрудника.
	Если ИзвестныеЗначенияПоказателей <> Неопределено Тогда
		ИзвестныеЗначенияСотрудника = ИзвестныеЗначенияПоказателей.НайтиСтроки(Новый Структура("Сотрудник", СтрокаДанных.Сотрудник));
		Для Каждого ДанныеЗначения Из ИзвестныеЗначенияСотрудника Цикл
			ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ДанныеЗначения.Показатель);
			ИзвестныеЗначения.Вставить(ИдентификаторПоказателя, ДанныеЗначения.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзвестныеЗначенияПоказателейПоОснованиям <> Неопределено Тогда
		Отбор = Новый Структура("Сотрудник, ДокументОснование", СтрокаДанных.Сотрудник, СтрокаДанных.ДокументОснование);
		ИзвестныеЗначенияСотрудника = ИзвестныеЗначенияПоказателейПоОснованиям.НайтиСтроки(Отбор);
		Для Каждого ДанныеЗначения Из ИзвестныеЗначенияСотрудника Цикл
			ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ДанныеЗначения.Показатель);
			ИзвестныеЗначения.Вставить(ИдентификаторПоказателя, ДанныеЗначения.Значение);
		КонецЦикла;
		// Значения не запрашиваемых показателей добавляем без учета основания.
		Если СтрокаДанных.ДокументОснование <> Неопределено И ПоказателиВидаРасчета <> Неопределено Тогда 
			ОтобранныеПоказатели = Новый Соответствие;
			Для Каждого ДанныеПоказателя Из ПоказателиВидаРасчета Цикл
				Если Не ДанныеПоказателя.ЗапрашиватьПриВводе И Не ДанныеПоказателя.ЗначениеРассчитываетсяАвтоматически Тогда 
					ОтобранныеПоказатели.Вставить(ДанныеПоказателя.Показатель, Истина);
				КонецЕсли;
			КонецЦикла;
			Если ОтобранныеПоказатели.Количество() > 0 Тогда 
				Отбор = Новый Структура("Сотрудник", СтрокаДанных.Сотрудник);
				ИзвестныеЗначенияСотрудника = ИзвестныеЗначенияПоказателейПоОснованиям.НайтиСтроки(Отбор);
				Для Каждого ДанныеЗначения Из ИзвестныеЗначенияСотрудника Цикл
					Если ОтобранныеПоказатели[ДанныеЗначения.Показатель] <> Неопределено Тогда 
						ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ДанныеЗначения.Показатель);
						ИзвестныеЗначения.Вставить(ИдентификаторПоказателя, ДанныеЗначения.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Добавляем "предопределенные" исходные данные
	// - оплаченное (отработанное) время.
	ИсходныеДанные.Вставить("ОплаченоДней", 0);
	ИсходныеДанные.Вставить("ОплаченоЧасов", 0);
	Если ЕстьПолеВСтрокеКоллекции(СтрокаДанных, "ОплаченоДней") Тогда
		ИсходныеДанные.ОплаченоДней = СтрокаДанных.ОплаченоДней;
		ИсходныеДанные.ОплаченоЧасов = СтрокаДанных.ОплаченоЧасов;
	КонецЕсли;
	// - норма времени
	ИсходныеДанные.Вставить("НормаДней", 0);
	ИсходныеДанные.Вставить("НормаЧасов", 0);
	Если ЕстьПолеВСтрокеКоллекции(СтрокаДанных, "НормаДней") Тогда
		ИсходныеДанные.НормаДней = СтрокаДанных.НормаДней;
		ИсходныеДанные.НормаЧасов = СтрокаДанных.НормаЧасов;
	КонецЕсли;
	
	ИсходныеДанныеПоИдентификаторуСтроки[ИдентификаторСтроки] = ИсходныеДанные;
	Если ИзвестныеЗначения.Количество() > 0 Тогда
		ИзвестныеЗначенияПоИдентификаторуСтроки[ИдентификаторСтроки] = ИзвестныеЗначения;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспаковатьЗначенияПоказателей(СтрокаДанных, КоличествоПоказателей, ИсходныеДанные)
	
	// Перенос результата
	Если Не РасчетЗафиксирован(СтрокаДанных) Тогда
		СтрокаДанных.Результат = ИсходныеДанные.Результат;
	КонецЕсли;
	
	// Перенос расчета базы, значений переопределяемых показателей и удаление "лишних" показателей, 
	// которые не отображаются в документах начисления.
	Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
		Показатель = СтрокаДанных["Показатель" + НомерПоказателя];
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			Продолжить;
		КонецЕсли;
		ПоказательИнфо = ЗарплатаКадрыРасширенный.СведенияОПоказателеРасчетаЗарплаты(Показатель);
		Если Не ПоказательИнфо.ОтображатьВДокументахНачисления Тогда
			СтрокаДанных["Показатель" + НомерПоказателя] = Справочники.ПоказателиРасчетаЗарплаты.ПустаяСсылка();
			СтрокаДанных["Значение" + НомерПоказателя] = 0;
		Иначе
			Если СтрокаДанных["Значение" + НомерПоказателя] <> ИсходныеДанные[ПоказательИнфо.Идентификатор] Тогда
				СтрокаДанных["Значение" + НомерПоказателя] = ИсходныеДанные[ПоказательИнфо.Идентификатор];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Метод предназначен для заполнения специфических результатов расчета в строках исходных коллекций.
//
// Параметры:
//	СтрокаДанных - строка исходной коллекции.
//	ИсходныеДанные - структура со значениями показателей и результатами расчета.
//	ДополнительныеПараметры - параметры расчета очередности начислений.
//
Процедура ПеренестиРезультатыРасчета(СтрокаДанных, ИсходныеДанные, ДополнительныеПараметры)
	
	// Пособия
	УчетПособийСоциальногоСтрахованияРасширенный.ПеренестиРезультатыРасчетаПособия(СтрокаДанных, ИсходныеДанные);
	// Пособия
	УчетПособийСоциальногоСтрахованияРасширенный.ПеренестиРезультатыРасчетаОтпускаНаСанаторноКурортноеЛечение(СтрокаДанных, ИсходныеДанные, ДополнительныеПараметры);
	// Отпуск ЧАЭС
	ОстаткиОтпусков.ПеренестиРезультатыРасчетаОтпускаЧАЭС(СтрокаДанных, ИсходныеДанные);
	
КонецПроцедуры

// Выполняет непосредственный расчет результата для строки таблицы Начисления, 
// рассчитываемой по произвольной формуле.
// Строки, рассчитываемые предопределенным способом откладываются в таблицу значений РасчетПредопределеннымСпособом.
//
// Параметры:
//	СтрокаРасчета - строка таблицы значений Начисления, см. ПустаяТаблицаНачисления(),
//	СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений
//	ИсходныеДанные - структура, содержащая в себе значения показателей и поля результата расчета.
//	ФормулаДляВыполнения - строка.
//	ФормулаДляПредставления - строка.
//	РасчетПредопределеннымСпособом - таблица значений, см. ТаблицаРасчетаПредопределеннымСпособом().
//	ВызыватьИсключение - булево, если Истина, то в случае невозможности рассчитать запись по формуле будет вызвано
//	                     исключение,  в противном случае, результату просто будет установлено значение 0.
//
Процедура РассчитатьСтрокуНачисления(СтрокаРасчета, СпособРасчета, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, РасчетПредопределеннымСпособом, ВызыватьИсключение, СтрокиРаспределения)
		
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		// Если расчет выполняется предопределенным способом, 
		// откладываем запись в отдельную коллекцию.
		НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
		НоваяСтрока.СпособРасчета = СпособРасчета;
		НоваяСтрока.ЗаписьРасчета = СтрокаРасчета;
		НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
		Возврат;
	КонецЕсли;
	
	Если РасчетЗафиксирован(СтрокаРасчета) Или Не ИсходныеДанные.Рассчитывается Тогда
		ИсходныеДанные.Результат = СтрокаРасчета.Результат;
		РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределения);
		Возврат;
	КонецЕсли;
	
	Если СтрокиРаспределения = Неопределено Тогда
		// Не используется распределение по территориям, условиям труда.
		СтрокаРасчета.Результат = ВычислитьРезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ВызыватьИсключение);
	Иначе
		КоличествоПоказателей = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
		// Проверяем, есть ли хотя бы в одной строке распределения значения показателей.
		ЕстьПоказателиРаспределения = Ложь;
		Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
				Если ЗначениеЗаполнено(СтрокаРаспределения["Показатель" + НомерПоказателя]) Тогда
					ЕстьПоказателиРаспределения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если Не ЕстьПоказателиРаспределения Тогда
			// Если показателей нет, то результат сначала считаем по формуле как есть, затем распределяем.
			СтрокаРасчета.Результат = ВычислитьРезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ВызыватьИсключение);
			РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределения);
		Иначе
			// Если показатели есть, то результат является суммой отдельно рассчитанных строк распределения.
			// Предварительно копируем структуру исходных данных, ее будем использовать в качестве значений по умолчанию.
			ЗначенияПоУмолчанию = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИсходныеДанные);
			// Последовательно повторяем расчет для каждой строки распределения, подставляя значения определяемых показателей.
			// Результат расчета будет суммой результата распределения.
			СтрокаРасчета.Результат = 0;
			// Нормируем доли распределения по единице.
			ДолиРаспределения = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "ДоляРаспределения");
			ДолиРаспределения = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(1, ДолиРаспределения, 9);
			Индекс = 0;
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				// Если в конкретной строке распределения определено значение показателя по территории или условиям труда, 
				// то подставляем его в исходные данные и выполняем расчет.
				ИспользованныеПоказатели = Новый Массив;
				Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
					Показатель = СтрокаРаспределения["Показатель" + НомерПоказателя];
					Если Не ЗначениеЗаполнено(Показатель) Тогда
						Продолжить;
					КонецЕсли;
					Значение = СтрокаРаспределения["Значение" + НомерПоказателя];
					ИдентификаторПоказателя = ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(Показатель);
					ИсходныеДанные[ИдентификаторПоказателя] = Значение;
					ИспользованныеПоказатели.Добавить(ИдентификаторПоказателя);
				КонецЦикла;
				СтрокаРаспределения.Результат = ВычислитьРезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ВызыватьИсключение);
				СтрокаРаспределения.Результат = СтрокаРаспределения.Результат * ДолиРаспределения[Индекс];
				СтрокаРасчета.Результат = СтрокаРасчета.Результат + СтрокаРаспределения.Результат;
				// Восстанавливаем значения по умолчанию в структуре исходных данных для использованных показателей.
				Для Каждого ИдентификаторПоказателя Из ИспользованныеПоказатели Цикл
					ИсходныеДанные[ИдентификаторПоказателя] = ЗначенияПоУмолчанию[ИдентификаторПоказателя];
				КонецЦикла;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаРасчета.Сторно Тогда
		СтрокаРасчета.Результат = - СтрокаРасчета.Результат;
		Если СтрокиРаспределения <> Неопределено Тогда
			Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				СтрокаРаспределения.Результат = - СтрокаРаспределения.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИсходныеДанные.Результат = СтрокаРасчета.Результат;
	
КонецПроцедуры

Функция ВычислитьРезультатПоФормуле(ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, СтрокаРасчета, ВызыватьИсключение)
	
	Попытка 
		Возврат Вычислить(ФормулаДляВыполнения);
	Исключение
		Если Не ВызыватьИсключение Тогда
			Возврат 0;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При расчете начисления «%1» за %5 для сотрудника %2 возникла ошибка: %4
                      |Формула, используемая при расчете: %3'
                      |;uk='При розрахунку нарахування «%1» %5 для співробітника %2 виникла помилка: %4
                      |Формула, використовувана при розрахунку: %3'"),
				СтрокаРасчета.Начисление, 
				СтрокаРасчета.ФизическоеЛицо, 
				ФормулаДляПредставления, 
				ИнформацияОбОшибке().Описание, 
				Формат(СтрокаРасчета.ДатаНачала, "ДФ='ММММ гггг'"));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции

// Выполняет непосредственный расчет результата для записи регистра расчета Удержания, 
// рассчитываемой по произвольной формуле.
// Записи, рассчитываемые предопределенным способом откладываются в таблицу значений РасчетПредопределеннымСпособом.
//
// Параметры:
//	Запись - РегистрРасчетаЗапись.Удержания,
//	СпособРасчета - ПеречислениеСсылка.СпособыРасчетаУдержаний
//	ИсходныеДанные - структура, содержащая в себе значения показателей и поля результата расчета.
//	ФормулаДляВыполнения - строка.
//	ФормулаДляПредставления - строка.
//	РасчетПредопределеннымСпособом - таблица значений, см. ТаблицаРасчетаПредопределеннымСпособом().
//	ВызыватьИсключение - булево, если Истина, то в случае невозможности рассчитать запись по формуле будет вызвано
//	                     исключение,  в противном случае, результату просто будет установлено значение 0.
//
Процедура РассчитатьЗаписьУдержания(Запись, СпособРасчета, ИсходныеДанные, ФормулаДляВыполнения, ФормулаДляПредставления, РасчетПредопределеннымСпособом, УдержанныеСуммы, ВызыватьИсключение = Истина)
		
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		// Если расчет выполняется предопределенным способом, 
		// откладываем запись в отдельную коллекцию.
		НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
		НоваяСтрока.СпособРасчета = СпособРасчета;
		НоваяСтрока.ЗаписьРасчета = Запись;
		НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
		Возврат;
	КонецЕсли;
	
	Если Запись.ФиксРасчет Или Не ИсходныеДанные.Рассчитывается Тогда
		ИсходныеДанные.Результат = Запись.Результат;
	КонецЕсли;
	
	Если Запись.ФиксРасчет Тогда
		// Если сумма внесена вручную, то ничего далее не предпринимаем.
		Возврат;
	КонецЕсли;
	
	Если ИсходныеДанные.Рассчитывается Тогда
		Попытка 
			Запись.Результат = Вычислить(ФормулаДляВыполнения);
		Исключение
			Если Не ВызыватьИсключение Тогда
				Запись.Результат = 0;
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При расчете удержания «%1» для сотрудника %2 возникла ошибка: %4
                          |Формула, используемая при расчете: %3'
                          |;uk='При розрахунку утримання «%1» для співробітника %2 виникла помилка: %4
                          |Формула, використовувана при розрахунку: %3'"),
					Запись.ВидРасчета, Запись.ФизическоеЛицо, ФормулаДляПредставления, ИнформацияОбОшибке().Описание);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	// Корректируем на величину уже удержанной суммы.
	// В том числе суммы, которые не рассчитываются.
	Если УдержанныеСуммы <> Неопределено Тогда
		ОтборСтрок = Новый Структура(
			"Месяц, 
			|Организация, 
			|ФизическоеЛицо, 
			|ВидРасчета, 
			|ДокументОснование");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, Запись);
		ОтборСтрок.Месяц = НачалоМесяца(Запись.ПериодДействияНачало);
		НайденныеСтроки = УдержанныеСуммы.НайтиСтроки(ОтборСтрок);
		// Нужно результат "пропустить сквозь" ранее удержанные суммы, учесть то, что уже ранее было удержано.
		// В свою очередь учитывая, также корректируем и ранее удержанные суммы.
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Запись.Результат = Запись.Результат - НайденнаяСтрока.Удержано;
			НайденнаяСтрока.Удержано = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если Запись.Сторно Тогда
		Запись.Результат = - Запись.Результат;
	КонецЕсли;
	
	ИсходныеДанные.Результат = Запись.Результат;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляКорректировкиИскаженияРезультата(СтрокиПоМесяцам, СтрокаРасчета, ИсходныеДанные, ФормулаРасчетаДляВыполнения)
	
	Если Не РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(ИсходныеДанные.СпособРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если РасчетЗафиксирован(СтрокаРасчета) Или Не ИсходныеДанные.Рассчитывается Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПоСотрудникам = СтрокиПоМесяцам[НачалоМесяца(СтрокаРасчета.ДатаНачала)];
	Если СтрокиПоСотрудникам = Неопределено Тогда
		СтрокиПоСотрудникам = Новый Соответствие;
	КонецЕсли;
	СтрокиПоНачислениям = СтрокиПоСотрудникам[СтрокаРасчета.Сотрудник];
	Если СтрокиПоНачислениям = Неопределено Тогда
		СтрокиПоНачислениям = Новый Соответствие;
	КонецЕсли;
	ОписаниеСтрок = СтрокиПоНачислениям[СтрокаРасчета.Начисление];
	Если ОписаниеСтрок = Неопределено Тогда
		ОписаниеСтрок = Новый Структура(
			"НакапливатьСтроки, 
			|Результат,
			|ОтработаноДней,
			|ОтработаноЧасов,
			|ФормулаРасчетаДляВыполнения,
			|ВремяВЧасах,
			|Строки, 
			|Результаты, 
			|ПроверяемыеПоля, 
			|Показатели,
			|ИсходныеДанные");
		Если СтрокаРасчета.ОтработаноДней = СтрокаРасчета.НормаДней Или СтрокаРасчета.ОтработаноЧасов = СтрокаРасчета.НормаЧасов Тогда
			ОписаниеСтрок.НакапливатьСтроки = Ложь;
		Иначе
			// Признак того, что последовательность идентичных строк еще не прервалась.
			ОписаниеСтрок.НакапливатьСтроки = Истина;
			// Инициализируем поля описания.
			ОписаниеСтрок.Строки = Новый Массив;
			ОписаниеСтрок.Результаты = Новый Массив;
			ОписаниеСтрок.ИсходныеДанные = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ИсходныеДанные);
			ОписаниеСтрок.ФормулаРасчетаДляВыполнения = ФормулаРасчетаДляВыполнения;
			ОписаниеСтрок.ВремяВЧасах = СтрокаРасчета.ВремяВЧасах;
			ОписаниеСтрок.Результат = 0;
			ОписаниеСтрок.ОтработаноДней = 0;
			ОписаниеСтрок.ОтработаноЧасов = 0;
			// Поля предназначены для проверки строки на принадлежность коллекции.
			ОписаниеСтрок.ПроверяемыеПоля = Новый Структура("НормаДней, НормаЧасов");
			ОписаниеСтрок.ПроверяемыеПоля.НормаДней = СтрокаРасчета.НормаДней;
			ОписаниеСтрок.ПроверяемыеПоля.НормаЧасов = СтрокаРасчета.НормаЧасов;
			ОписаниеСтрок.Показатели = Новый Структура;
			// Собираем значения показателей.
			СведенияОНачислении = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаРасчета.Начисление);
			Для Каждого Показатель Из СведенияОНачислении.Показатели Цикл
				Если Показатель.ОтображатьВДокументахНачисления Тогда
					ОписаниеСтрок.Показатели.Вставить(Показатель.Идентификатор, ИсходныеДанные[Показатель.Идентификатор]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ОписаниеСтрок.НакапливатьСтроки Тогда
		// Проверяем строку, на предмет принадлежности ее коллекции.
		СтрокаСоответствует = Истина;
		Если ОписаниеСтрок.Количество() > 0 Тогда
			Для Каждого КлючИЗначение Из ОписаниеСтрок.ПроверяемыеПоля Цикл
				Если КлючИЗначение.Значение <> СтрокаРасчета[КлючИЗначение.Ключ] Тогда
					СтрокаСоответствует = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаСоответствует Тогда
				Для Каждого КлючИЗначение Из ОписаниеСтрок.Показатели Цикл
					Если КлючИЗначение.Значение <> ИсходныеДанные[КлючИЗначение.Ключ] Тогда
						СтрокаСоответствует = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Не СтрокаСоответствует Тогда
			// Встретили первую строку, которая не соответствует коллекции, далее накапливать строки не имеет смысла.
			ОписаниеСтрок.НакапливатьСтроки = Ложь;
		Иначе
			// Добавляем строку в набор и накапливаем значения времени.
			ОписаниеСтрок.Строки.Добавить(СтрокаРасчета);
			ОписаниеСтрок.Результаты.Добавить(СтрокаРасчета.Результат);
			ОписаниеСтрок.ОтработаноДней = ОписаниеСтрок.ОтработаноДней + СтрокаРасчета.ОтработаноДней;
			ОписаниеСтрок.ОтработаноЧасов = ОписаниеСтрок.ОтработаноЧасов + СтрокаРасчета.ОтработаноЧасов;
			ОписаниеСтрок.Результат = ОписаниеСтрок.Результат + СтрокаРасчета.Результат;
		КонецЕсли;
	КонецЕсли;
	СтрокиПоНачислениям.Вставить(СтрокаРасчета.Начисление, ОписаниеСтрок);
	СтрокиПоСотрудникам.Вставить(СтрокаРасчета.Сотрудник, СтрокиПоНачислениям);
	СтрокиПоМесяцам.Вставить(НачалоМесяца(СтрокаРасчета.ДатаНачала), СтрокиПоСотрудникам);
	
КонецПроцедуры

Процедура СкорректироватьИскажениеРезультата(СтрокиПоМесяцам, ИсходныеДанныеПоИдентификаторуСтроки)
	
	Для Каждого КлючМесяцИЗначение Из СтрокиПоМесяцам Цикл
		СтрокиПоСотрудникам = КлючМесяцИЗначение.Значение;
		Для Каждого КлючСотрудникИЗначение Из СтрокиПоСотрудникам Цикл
			СтрокиПоНачислениям = КлючСотрудникИЗначение.Значение;
			Для Каждого КлючНачислениеИЗначение Из СтрокиПоНачислениям Цикл
				Начисление = КлючНачислениеИЗначение.Ключ;
				ОписаниеСтрок = КлючНачислениеИЗначение.Значение;
				Если Не ОписаниеСтрок.НакапливатьСтроки Тогда
					Продолжить;
				КонецЕсли;
				Если ОписаниеСтрок.ОтработаноДней <> ОписаниеСтрок.ПроверяемыеПоля.НормаДней
					Или ОписаниеСтрок.ОтработаноЧасов <> ОписаниеСтрок.ПроверяемыеПоля.НормаЧасов Тогда
					Продолжить;
				КонецЕсли;
				// Смоделируем строку начисления и рассчитаем ее
				ИсходныеДанные = ОписаниеСтрок.ИсходныеДанные;
				ИсходныеДанные.Вставить("ВремяВДнях", ОписаниеСтрок.ОтработаноДней);
				ИсходныеДанные.Вставить("ВремяВЧасах", ОписаниеСтрок.ОтработаноЧасов);
				ИсходныеДанные.Вставить("ВремяВДняхЧасах", ?(ОписаниеСтрок.ВремяВЧасах = Истина, ОписаниеСтрок.ОтработаноЧасов, ОписаниеСтрок.ОтработаноДней));
				ИсходныеДанные.Вставить("ОтработаноДней", ОписаниеСтрок.ОтработаноДней);
				ИсходныеДанные.Вставить("ОтработаноЧасов", ОписаниеСтрок.ОтработаноЧасов);
				
				Результат = Вычислить(ОписаниеСтрок.ФормулаРасчетаДляВыполнения);
				Если Результат <> ОписаниеСтрок.Результат Тогда
					// Если полученный результат отличается от накопленного, 
					// распределим полученный результат между отдельными суммами, чтобы избежать искажения.
					Результаты = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(Результат, ОписаниеСтрок.Результаты);
					Индекс = 0;
					Пока Индекс < Результаты.Количество() Цикл
						СтрокаРасчета = ОписаниеСтрок.Строки[Индекс];
						СтрокаРасчета.Результат = Результаты[Индекс];
						ИсходныеДанныеПоИдентификаторуСтроки[СтрокаРасчета.ИдентификаторСтроки].Результат = СтрокаРасчета.Результат;
						Индекс = Индекс + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Получает таблицу действующих плановых начислений.
// Параметры:
//		СотрудникиДаты - таблица значений с полями.
//		Период
//		Сотрудник
// Возвращаемое значение - таблица значений с полями.
//	Период,
//	Сотрудник,
//	Начисление,
//	Размер
//		
Функция ДействующиеПлановыеНачисления(СотрудникиДаты, Регистратор, ФормироватьСПериодичностьДень = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроенияФОТ);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПлановыеНачисления.Период,
	|	ПлановыеНачисления.Сотрудник,
	|	ПлановыеНачисления.ФизическоеЛицо,
	|	ПлановыеНачисления.ГоловнаяОрганизация,
	|	ПлановыеНачисления.Начисление КАК Начисление,
	|	ПлановыеНачисления.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
	|			ТОГДА ПлановыеНачисления.Размер
	|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
	|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
	|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
	|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
	|ГДЕ
	|	ПлановыеНачисления.Используется
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫРАЗИТЬ(ПлановыеНачисления.Начисление КАК ПланВидовРасчета.Начисления).РеквизитДопУпорядочивания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает таблицу действующих плановых удержаний.
//
// Параметры:
//		СотрудникиДаты - таблица значений с полями.
//			Период
//			Сотрудник
//			Организация
//
// Возвращаемое значение - таблица значений с полями.
//	Период,
//	Сотрудник,
//	Начисление
//		
Функция ДействующиеПлановыеУдержания(ИсходныеДанные, Регистратор)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеУдержания",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИсходныеДанные),
		ПараметрыПостроения);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПлановыеУдержания.Период,
	|	ПлановыеУдержания.ФизическоеЛицо,
	|	ПлановыеУдержания.Организация,
	|	ПлановыеУдержания.ДокументОснование,
	|	ПлановыеУдержания.Удержание
	|ИЗ
	|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
	|ГДЕ
	|	ПлановыеУдержания.Используется";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДополнитьТекущимиДаннымиОПоказателях(ЗначенияПоказателей, Регистратор, ПоФизическомуЛицу, ПоДокументуОснование, ВремяРегистрацииДокумента = Неопределено)
	
	// Определяем ключевые измерения для получения значений по окончании.
	КлючевыеИзмерения = "ДатаСобытия,Показатель,Организация";
	
	Если ПоФизическомуЛицу Тогда
		КлючевыеИзмерения = КлючевыеИзмерения + ",ФизическоеЛицо";
	Иначе
		КлючевыеИзмерения = КлючевыеИзмерения + ",Сотрудник";
	КонецЕсли;
	
	Если ПоДокументуОснование Тогда
		КлючевыеИзмерения = КлючевыеИзмерения + ",ДокументОснование";
	КонецЕсли;
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = ЗначенияПоказателей.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	ИзмеренияДаты = ЗначенияПоказателей.Скопировать(, КлючевыеИзмерения);
	ИзмеренияДаты.Свернуть(КлючевыеИзмерения);
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаДвижений Из ИзмеренияДаты Цикл 
		СтрокаДвижений.Период = ВремяРегистрацииДокумента.Получить(СтрокаДвижений.ДатаСобытия);
	КонецЦикла;
	
	ИзмеренияДаты.Колонки.Удалить("ДатаСобытия");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения);
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Значения.Период, ДЕНЬ) КАК ДатаСобытия,
		|	Значения.Организация,
		|	Значения.ФизическоеЛицо,
		|	Значения.ДокументОснование,
		|	Значения.Сотрудник,
		|	Значения.Показатель,
		|	Значения.Значение КАК ТекущееЗначение,
		|	ЕСТЬNULL(ЗначенияПокзаателйВозвратные.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодВозвратногоСобытия,
		|	ЕСТЬNULL(ЗначенияПокзаателйВозвратные.ЗначениеПоОкончании, 0) КАК ЗначениеПоОкончании
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК Значения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПокзаателйВозвратные
		|		ПО Значения.ПериодЗаписи = ЗначенияПокзаателйВозвратные.Период
		|			И Значения.Сотрудник = ЗначенияПокзаателйВозвратные.Сотрудник
		|			И Значения.Организация = ЗначенияПокзаателйВозвратные.Организация
		|			И Значения.Показатель = ЗначенияПокзаателйВозвратные.Показатель
		|			И Значения.ДокументОснование = ЗначенияПокзаателйВозвратные.ДокументОснование
		|			И Значения.Период < ЗначенияПокзаателйВозвратные.Период
		|ГДЕ
		|	(Значения.Значение <> 0
		|			ИЛИ Значения.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначенияПоказателей.Колонки.Добавить("ТекущееЗначение", Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты());
	ЗначенияПоказателей.Колонки.Добавить("ПериодВозвратногоСобытия", Новый ОписаниеТипов("Дата"));
	ЗначенияПоказателей.Колонки.Добавить("ЗначениеПоОкончании", Метаданные.ОпределяемыеТипы.ЗначениеПоказателяРасчетаЗарплаты.Тип);
	
	СтруктураПоиска = Новый Структура(КлючевыеИзмерения);
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		СтрокиЗначений = ЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если СтрокиЗначений.Количество() > 0 Тогда
			Строка = СтрокиЗначений[0];
			ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущееЗначение,ПериодВозвратногоСобытия,ЗначениеПоОкончании");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьКолонкамиУдержанийПоИсполнительнымДокументам(УдержанияЗаПериод)
	
	УдержанияЗаПериод.Колонки.Добавить("Получатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияЗаПериод.Колонки.Добавить("ПлатежныйАгент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	УдержанияЗаПериод.Колонки.Добавить("ТарифПлатежногоАгента", Новый ОписаниеТипов("СправочникСсылка.ТарифыПлатежныхАгентов"));
	УдержанияЗаПериод.Колонки.Добавить("СпособРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаУдержанияПоИсполнительномуДокументу"));
	УдержанияЗаПериод.Колонки.Добавить("ВидБазы", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБазыУдержанияПоИсполнительномуДокументу"));
	УдержанияЗаПериод.Колонки.Добавить("Процент", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Числитель", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Знаменатель", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("Предел", Новый ОписаниеТипов("Число"));
	УдержанияЗаПериод.Колонки.Добавить("УчитыватьБольничныеЛисты", Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

// Заменяет строки таблицы ЗаменяемыеДанные строками таблица ЗаменяющиеДанные.
// Сопоставление строк выполняется по колонке КлючеваяКолонка для массива значений Значения.
// Если требуется - вставляет новые строки.
// Если требуется - удаляет неиспользованные старые строки.
//
// Параметры:
//	Значения
//	КлючеваяКолонка - имена колонок через запятую, по которым выполняется сопоставление заменяемой коллекции.
//	ЗаменяемыеДанные - коллекция строк, в которой необходимо выполнить замену.
//	ЗаменяющиеДанные - коллекция строк, которые нужно использовать для замены строк в коллекции ЗаменяемыеДанные.
//	УсловиеЗамены - структура, если указано, замена производится только в случае, 
//		если значения полей структуры по всем заменяемых строкам соблюдается.
//	ОтборСтрок - структура, если указано, в коллекциях обрабатываются только строки, удовлетворяющие отбору, 
//		в качестве значения может быть указан массив значений.
//
Функция ЗаменитьСтрокиНаНовыеДанные(ЗаменяемыеДанные, ЗаменяющиеДанные, КлючевыеКолонки, УсловияЗамены = Неопределено, ОтборСтрок = Неопределено)
	
	// Возвращаемым значением является массив идентификаторов замененных строк.
	ЗамененныеСтроки = Новый Массив;
	
	МассивКлючевыхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеКолонки);
	
	// Собираем строки коллекции для обработки, 
	// если задан отбор строк, то добавляем только те, которые ему соответствуют.
	КоллекцииСтрок = Новый Массив;
	КоллекцииСтрок.Добавить(ЗаменяемыеДанные);
	КоллекцииСтрок.Добавить(ЗаменяющиеДанные);
	
	НайденныеСтроки = Новый Массив;
	Для Каждого КоллекцияСтрок Из КоллекцииСтрок Цикл
		Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
			СоответствуетУсловиям = Истина;
			Если ОтборСтрок <> Неопределено Тогда
				Для Каждого КлючИЗначение Из ОтборСтрок Цикл
					ИмяОтбора = КлючИЗначение.Ключ;
					ЗначениеОтбора = КлючИЗначение.Значение;
					Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
						СоответствуетУсловиям = ЗначениеОтбора.Найти(СтрокаКоллекции[ИмяОтбора]) <> Неопределено;
					Иначе
						СоответствуетУсловиям = СтрокаКоллекции[ИмяОтбора] = ЗначениеОтбора;
					КонецЕсли;
					Если Не СоответствуетУсловиям Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СоответствуетУсловиям Тогда
				НайденныеСтроки.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СочетанияКлючевых = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из МассивКлючевыхКолонок Цикл
		СочетанияКлючевых.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// Используем ключ поиска для того, чтобы найти все строки 
	// и выбрать из них все возможные сочетания значений ключевых полей по обеим коллекциям.
	КлючОтбора = Новый Структура(КлючевыеКолонки);
	Для Каждого СтрокаКоллекции Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СтрокаКоллекции);
		Если СочетанияКлючевых.НайтиСтроки(КлючОтбора).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СочетанияКлючевых.Добавить(), СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
		
	// Для всех возможных сочетаний выполняем замену строк.
	Для Каждого СочетаниеКлючевых Из СочетанияКлючевых Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СочетаниеКлючевых); 
		СтарыеСтроки = ЗаменяемыеДанные.НайтиСтроки(КлючОтбора);
		СоответствуетУсловиям = Истина;
		Если УсловияЗамены <> Неопределено Тогда
			// Если коллекция старых строк, имеет хотя бы одну строку, 
			// не соответствующую условиям замены - не обновляем.
			Для Каждого СтараяСтрока Из СтарыеСтроки Цикл
				Для Каждого КлючИЗначение Из УсловияЗамены Цикл
					Если СтараяСтрока[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
						СоответствуетУсловиям = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не СоответствуетУсловиям Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не СоответствуетУсловиям Тогда
			Продолжить;
		КонецЕсли;
		НовыеСтроки = ЗаменяющиеДанные.НайтиСтроки(КлючОтбора);
		ИндексСтроки = 0;
		ИндексДляВставки = 0;
		Если СтарыеСтроки.Количество() = 0 И МассивКлючевыхКолонок.Количество() > 0 Тогда
			// Предполагается, что первой колонкой передан сотрудник или физическое лицо.
			ИмяПоляРаботник = МассивКлючевыхКолонок[0];
			СтрокиРаботника = ЗаменяемыеДанные.НайтиСтроки(Новый Структура(ИмяПоляРаботник, СочетаниеКлючевых[ИмяПоляРаботник]));
			КоличествоСтрокРаботника = СтрокиРаботника.Количество();
			Если КоличествоСтрокРаботника > 0 Тогда 
				ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокиРаботника[КоличествоСтрокРаботника - 1]) + 1;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Строка Из НовыеСтроки Цикл
			Если СтарыеСтроки.ВГраница() < ИндексСтроки Тогда
				СтрокаДляЗаполнения = ЗаменяемыеДанные.Вставить(ИндексДляВставки);
			Иначе
				СтрокаДляЗаполнения = СтарыеСтроки[ИндексСтроки];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, Строка);
			ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокаДляЗаполнения) + 1;
			ИндексСтроки = ИндексСтроки + 1;
			Если ЕстьПолеВСтрокеКоллекции(Строка, "ИдентификаторСтрокиВидаРасчета") Тогда
				ЗамененныеСтроки.Добавить(Строка.ИдентификаторСтрокиВидаРасчета);
			КонецЕсли;
		КонецЦикла;
		Для Счетчик = ИндексСтроки По СтарыеСтроки.ВГраница() Цикл
			ЗаменяемыеДанные.Удалить(ЗаменяемыеДанные.Индекс(СтарыеСтроки[Счетчик]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗамененныеСтроки;
	
КонецФункции

// Создает временную таблицу ВТИнтервалы взамен переданной, в которой остаются только интервалы, 
// ранее не выполненных начислений в других документах указанного типа начисления.
// 
Процедура ИсключитьИнтервалыРанееВыполненныхНачислений(МенеджерВременныхТаблиц, Организация, ДокументСсылка, МесяцНачисления, РасчетПервойПоловиныМесяца = Ложь, ИсправленныйДокумент = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Интервалы.Сотрудник,
		|	Интервалы.Начисление,
		|	Интервалы.ДокументОснование,
		|	Интервалы.ДатаНачала,
		|	Интервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеИнтервалы
		|ИЗ
		|	ВТИнтервалы КАК Интервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ПериодДействияНачало КАК ДатаНачала,
		|	ТаблицаНачислений.ПериодДействияКонец КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалыВыполненныхНачислений
		|ИЗ
		|	РегистрРасчета.Начисления КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеИнтервалы КАК Интервалы
		|		ПО (Интервалы.Сотрудник = ТаблицаНачислений.Сотрудник)
		|			И (ТаблицаНачислений.Регистратор <> &ДокументСсылка)
		|			И (ТаблицаНачислений.Регистратор <> &ИсправленныйДокумент)
		|			И (ТаблицаНачислений.Организация = &Организация)
		|			И ТаблицаНачислений.ПериодДействияНачало <= Интервалы.ДатаОкончания
		|			И ТаблицаНачислений.ПериодДействияКонец >= Интервалы.ДатаНачала
		|			И (ТаблицаНачислений.ПериодРегистрации <= &МесяцНачисления)
		|			И (ТаблицаНачислений.Сторно = ЛОЖЬ)
		|			И (ТаблицаНачислений.ВидРасчета В
		|				(ВЫБРАТЬ
		|					ОпределяющиеНачисления.Начисление
		|				ИЗ
		|					ВТОпределяющиеНачисления КАК ОпределяющиеНачисления))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторноНачисления
		|		ПО (СторноНачисления.Сотрудник = ТаблицаНачислений.Сотрудник)
		|			И (СторноНачисления.ПериодДействияНачало = ТаблицаНачислений.ПериодДействияНачало)
		|			И (СторноНачисления.ПериодДействияКонец = ТаблицаНачислений.ПериодДействияКонец)
		|			И (СторноНачисления.ВидРасчета = ТаблицаНачислений.ВидРасчета)
		|			И (СторноНачисления.Сторно = ИСТИНА)
		|			И (СторноНачисления.Регистратор <> &ДокументСсылка)
		|			И (СторноНачисления.ПериодРегистрации > ТаблицаНачислений.ПериодРегистрации)
		|ГДЕ
		|	СторноНачисления.Сотрудник ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.ДатаНачала,
		|	ТаблицаНачислений.ДатаОкончания
		|ИЗ
		|	Документ.НачислениеЗаПервуюПоловинуМесяца.Начисления КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВсеИнтервалы КАК Интервалы
		|		ПО (Интервалы.Сотрудник = ТаблицаНачислений.Сотрудник)
		|			И (ТаблицаНачислений.Ссылка <> &ДокументСсылка)
		|			И (ТаблицаНачислений.Ссылка <> &ИсправленныйДокумент)
		|			И (ТаблицаНачислений.Ссылка.Организация = &Организация)
		|			И ТаблицаНачислений.ДатаНачала <= Интервалы.ДатаОкончания
		|			И ТаблицаНачислений.ДатаОкончания >= Интервалы.ДатаНачала
		|			И (ТаблицаНачислений.Ссылка.Проведен)
		|			И (ТаблицаНачислений.Начисление В
		|				(ВЫБРАТЬ
		|					ОпределяющиеНачисления.Начисление
		|				ИЗ
		|					ВТОпределяющиеНачисления КАК ОпределяющиеНачисления))
		|			И (&РасчетПервойПоловиныМесяца)";
		
	Запрос.УстановитьПараметр("РасчетПервойПоловиныМесяца", РасчетПервойПоловиныМесяца);
	
	УстановитьПривилегированныйРежим(Истина);
	// Проверку уже оплаченных интервалов выполняем по всей базе, сквозь ограничение доступа.
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВсеИнтервалы.Сотрудник,
		|	ВсеИнтервалы.Начисление,
		|	ВсеИнтервалы.ДокументОснование,
		|	ВсеИнтервалы.ДатаНачала,
		|	ВсеИнтервалы.ДатаОкончания
		|ПОМЕСТИТЬ ВТИнтервалы
		|ИЗ
		|	ВТВсеИнтервалы КАК ВсеИнтервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыВыполненныхНачислений КАК ИнтервалыВыполненныхНачислений
		|		ПО ВсеИнтервалы.Сотрудник = ИнтервалыВыполненныхНачислений.Сотрудник
		|			И ВсеИнтервалы.ДатаНачала <= ИнтервалыВыполненныхНачислений.ДатаОкончания
		|			И ВсеИнтервалы.ДатаОкончания >= ИнтервалыВыполненныхНачислений.ДатаНачала
		|ГДЕ
		|	ИнтервалыВыполненныхНачислений.Сотрудник ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеИнтервалы";		
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СодержимоеДокументаРасчетаЗарплаты(Объект, ОписаниеДокумента, ФизическиеЛица = Неопределено) Экспорт 
	
	
	СодержимоеДокумента = Новый Структура;
	СодержимоеДокумента.Вставить("Начисления", ПустаяТаблицаНачисления());
	СодержимоеДокумента.Вставить("НачисленияПерерасчет", ПустаяТаблицаНачисления(Истина));
	СодержимоеДокумента.Вставить("Пособия", ПустаяТаблицаПособия());
	СодержимоеДокумента.Вставить("ПособияПерерасчет", ПустаяТаблицаПособия(Истина));
	СодержимоеДокумента.Вставить("Льготы", ПустаяТаблицаНачисления());
	СодержимоеДокумента.Вставить("НачисленияПоДоговорам", ПустаяТаблицаНачисленияПоДоговорам());
	СодержимоеДокумента.Вставить("Удержания", ПустаяТаблицаУдержанияДокумента());
	СодержимоеДокумента.Вставить("НДФЛ", ПустаяТаблицаНДФЛДокумента());
	СодержимоеДокумента.Вставить("Взносы", ПустаяТаблицаВзносыДокумента());
	СодержимоеДокумента.Вставить("ВзносыФОТ", ПустаяТаблицаВзносыДокумента());
	СодержимоеДокумента.Вставить("ПогашениеЗаймов", ПустаяТаблицаПогашениеЗаймов());
	
	Для Каждого КлючИЗначение Из СодержимоеДокумента Цикл
		Если КлючИЗначение.Ключ = "ПримененныеВычетыНаДетейИИмущественные" Тогда
			ИмяТаблицы = "ПримененныеВычетыИмя";
		Иначе
			ИмяТаблицы = КлючИЗначение.Ключ + "Имя";
		КонецЕсли;
		Если ОписаниеДокумента[ИмяТаблицы] <> Неопределено Тогда
			ТаблицаДокумента = Объект[ОписаниеДокумента[ИмяТаблицы]];
			Если ТаблицаДокумента.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;
			ПроверятьФизическоеЛицо = ТаблицаДокумента[0].Свойство("ФизическоеЛицо") И ФизическиеЛица <> Неопределено;
			Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл 
				Если ПроверятьФизическоеЛицо И ФизическиеЛица.Найти(СтрокаТаблицы.ФизическоеЛицо) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(КлючИЗначение.Значение.Добавить(), СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя) Тогда
		СодержимоеДокумента.Вставить(ОписаниеДокумента.ПланируемаяДатаВыплатыИмя, Объект[ОписаниеДокумента.ПланируемаяДатаВыплатыИмя]);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДокумента.ПорядокВыплатыИмя) Тогда
		СодержимоеДокумента.Вставить(ОписаниеДокумента.ПорядокВыплатыИмя, Объект[ОписаниеДокумента.ПорядокВыплатыИмя]);
	КонецЕсли;
	
	Возврат СодержимоеДокумента;
	
КонецФункции

// Создает временную таблицу ВТПочасоваяОплатаТруда с полями Сотрудник и УчетВремениВЧасах, 
// содержащую признак того, что оплата труда сотрудника на заданную дату осуществляется по часам.
//
// Параметры:
// - МенеджерВременныхТаблиц - должен содержать таблицу с полями Сотрудник и ДатаНачала.
// - ИмяВТСотрудникиПериоды - имя временной таблицы с сотрудниками и датами, по умолчанию - ВТСотрудникиПериоды.
// - ИмяВТПлановыеНачисления - имя временной таблицы "СрезИДвижения", 
// содержащей изменения плановых начислений, аналогично, если не указано, запрашивается по данным учета.
//
Процедура СоздатьВТПочасоваяОплатаТруда(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = Неопределено, ИмяВТПлановыеНачисления = Неопределено) Экспорт
	
	// Оплата труда сотрудника осуществляется по часам, 
	// если хотя бы одно из его плановых начислений с зачетом нормы времени рассчитывается по часам.
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	ПлановыеНачисления.Начисление,
		|	МАКСИМУМ(ПлановыеНачисления.Период) КАК ПлановыеНачисленияПериод
		|ПОМЕСТИТЬ ВТПлановыеНачисленияПериод
		|ИЗ
		|	ВТИнтервалы КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ПО (ПлановыеНачисления.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ПлановыеНачисления.Период <= СотрудникиПериоды.ДатаНачала)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	ПлановыеНачисления.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисления.Начисление ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчетВремениВЧасах
		|ПОМЕСТИТЬ ВТПочасоваяОплатаТруда
		|ИЗ
		|	ВТИнтервалы КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ПО (ПлановыеНачисления.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ПлановыеНачисления.Начисление.ЗачетНормыВремени = ИСТИНА)
		|			И (ПлановыеНачисления.Начисление.УчетВремениВЧасах = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияПериод КАК ПериодыПлановыхНачислений
		|		ПО (ПериодыПлановыхНачислений.Сотрудник = СотрудникиПериоды.Сотрудник)
		|			И (ПериодыПлановыхНачислений.ДатаНачала = СотрудникиПериоды.ДатаНачала)
		|			И (ПлановыеНачисления.Начисление = ПериодыПлановыхНачислений.Начисление)
		|			И (ПлановыеНачисления.Период = ПериодыПлановыхНачислений.ПлановыеНачисленияПериод)";
	
	Если ИмяВТСотрудникиПериоды <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИнтервалы", ИмяВТСотрудникиПериоды);
	Иначе
		ИмяВТСотрудникиПериоды = "ВТИнтервалы";
	КонецЕсли;
	Если ИмяВТПлановыеНачисления <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТПлановыеНачисленияСрезПоследних", ИмяВТПлановыеНачисления);
	Иначе
		// Если имя ВТ не определено, значит нужно запросить соответствующие данные из учета.
		// Для среза плановых начислений необходимо поле Период.
		ТекстЗапросаВТСотрудники = 
			"ВЫБРАТЬ
			|	СотрудникиПериоды.Сотрудник,
			|	СотрудникиПериоды.ДатаНачала КАК Период
			|ПОМЕСТИТЬ ВТИзмеренияДаты
			|ИЗ
			|	ВТИнтервалы КАК СотрудникиПериоды";
		ТекстЗапросаВТСотрудники = СтрЗаменить(ТекстЗапросаВТСотрудники, "ВТИнтервалы", ИмяВТСотрудникиПериоды);
		Запрос = Новый Запрос(ТекстЗапросаВТСотрудники);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		// Получаем срез плановых начислений.
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты", "Сотрудник");
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПлановыеНачисления", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполняет поле ФизическоеЛицо в коллекции строк, опираясь на поле Сотрудник.
// Может использовать заранее выявленную коллекцию сотрудников.
//
// Параметры:
//	КоллекцияСтрок - любая коллекция элементов, доступная для обхода циклом Для каждого Из, 
//		элементы должны иметь обязательные поля ФизическоеЛицо и Сотрудник.
//	Сотрудники - необязательный, массив сотрудников.
//
Процедура ЗаполнитьФизическихЛицПоСотрудникам(КоллекцияСтрок, Сотрудники = Неопределено)
	
	Если КоллекцияСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, "Сотрудник", Истина);
	КонецЕсли;
	
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СтрокаКоллекции.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаКоллекции.Сотрудник];
	КонецЦикла;
	
КонецПроцедуры

#Область РасчетСуммированногоУчетаВремени
	
// Рассчитывает значения показателей суммированного учета для массива сотрудников за заданный период.
// Значение исходных данных для расчета показателей берутся ил регистра расчета,
// за исключением последнего месяца, который "собирается" по данным УчетаРабочегоВремени.
// 
Функция ПоказателиСуммированногоУчетаСотрудниковЗаПериод(МассивСотрудников, ПериодСуммированногоУчетаНачало, ПериодСуммированногоУчетаОкончание) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачалоРасчетногоПериода = НачалоМесяца(ПериодСуммированногоУчетаНачало);
	КонецРасчетногоПериода = КонецМесяца(ДобавитьМесяц(ПериодСуммированногоУчетаОкончание, -1));
	ПоследнийМесяцНачало = НачалоМесяца(ПериодСуммированногоУчетаОкончание);
	ПоследнийМесяцОкончание = КонецДня(ПериодСуммированногоУчетаОкончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоРасчетногоПериода", НачалоРасчетногоПериода);
	Запрос.УстановитьПараметр("КонецРасчетногоПериода", КонецРасчетногоПериода);
	Запрос.УстановитьПараметр("ПоследнийМесяцНачало", ПоследнийМесяцНачало);
	Запрос.УстановитьПараметр("ПоследнийМесяцОкончание", ПоследнийМесяцОкончание);
	
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.УстановитьПараметр("ОтработанноеВремя", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениОтработанноеВремя());
	Запрос.УстановитьПараметр("ВидыВремениВЗачетНормы", Справочники.ВидыИспользованияРабочегоВремени.ВидыВремениВЗачетНормыСуммированногоУчета());
	
	// Читаем сотрудников.
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТРасчитываемыеСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудников)";
	Запрос.Выполнить();
	
	// Расчет по регистру расчета всех месяцев, за исключением последнего.
	ДополнитьЗапросВТПоказателейПоРегиструРасчета(Запрос);
	// Для последнего месяца собираем данные по данным УчетаРабочегоВремени.
	ДополнитьЗапросВТПоказателейПоУчетуВремени(Запрос);
	
	// Объединяем 2 источника.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НормоВремяПоРегистру.Сотрудник КАК Сотрудник,
	|	НормоВремяПоРегистру.НормаЧасов КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяСотрудниковНаСуммированномУчете
	|ИЗ
	|	ВТНормоВремяПоРегистру КАК НормоВремяПоРегистру
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НормоВремяПоУчетуВремени.Сотрудник,
	|	НормоВремяПоУчетуВремени.НормаЧасов
	|ИЗ
	|	ВТНормоВремяПоУчетуВремени КАК НормоВремяПоУчетуВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговоеНормоВремя.Сотрудник,
	|	СУММА(ИтоговоеНормоВремя.НормаЧасов) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяСводно
	|ИЗ
	|	ВТНормоВремяСотрудниковНаСуммированномУчете КАК ИтоговоеНормоВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговоеНормоВремя.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтработаноЧасовРегистр.Сотрудник,
	|	ВТОтработаноЧасовРегистр.ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработанныеЧасы
	|ИЗ
	|	ВТОтработаноЧасовРегистр КАК ВТОтработаноЧасовРегистр
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТОтработаноЧасовУчетВремени.Сотрудник,
	|	ВТОтработаноЧасовУчетВремени.ОтработаноЧасов
	|ИЗ
	|	ВТОтработаноЧасовУчетВремени КАК ВТОтработаноЧасовУчетВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработанныеЧасы.Сотрудник,
	|	СУММА(ОтработанныеЧасы.ОтработаноЧасов) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработанныеЧасыСводно
	|ИЗ
	|	ВТОтработанныеЧасы КАК ОтработанныеЧасы
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтработанныеЧасы.Сотрудник";
	
	// Собираем окончательный итог.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	ЕСТЬNULL(НормоВремяСотрудников.НормаЧасов, 0) КАК НормаЧасов,
	|	ЕСТЬNULL(ОтработанныеЧасы.ОтработаноЧасов, 0) КАК ОтработаноЧасов,
	|	ЕСТЬNULL(ОтработаноВПраздники.ЧасовВПраздники, 0) КАК ОтработаноЧасовВПраздники,
	|	ЕСТЬNULL(ОтработанныеЧасы.ОтработаноЧасов, 0) - ЕСТЬNULL(НормоВремяСотрудников.НормаЧасов, 0) - ЕСТЬNULL(ОтработаноВПраздники.ЧасовВПраздники, 0) КАК Переработки
	|ИЗ
	|	ВТРасчитываемыеСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормоВремяСводно КАК НормоВремяСотрудников
	|		ПО Сотрудники.Сотрудник = НормоВремяСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработанныеЧасыСводно КАК ОтработанныеЧасы
	|		ПО Сотрудники.Сотрудник = ОтработанныеЧасы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраздничные КАК ОтработаноВПраздники
	|		ПО Сотрудники.Сотрудник = ОтработаноВПраздники.Сотрудник";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ДополнитьЗапросВТПоказателейПоРегиструРасчета(Запрос)

	// Считаем отработанные часы.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияНачало КАК Период,
	|	Начисления.ОтработаноЧасов
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыНачислений
	|		ПО Начисления.ВидРасчета = ВидыНачислений.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасчитываемыеСотрудники КАК РасчитываемыеСотрудники
	|		ПО Начисления.Сотрудник = РасчитываемыеСотрудники.Сотрудник
	|ГДЕ
	|	(Начисления.ПериодДействияНачало МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода
	|			ИЛИ Начисления.ПериодДействияКонец МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода)
	|	И ВидыНачислений.ЗачетНормыВремени
	|	И ВидыНачислений.ЗачетОтработанногоВремени";
	
	Запрос.Выполнить();
	
	// Дополняем данные графиками сотрудника.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТНачисления");
    КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ГрафикРаботы");
	
	// Считаем отработанное на сумм.учете.
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.ОтработаноЧасов
	|ПОМЕСТИТЬ ВТНачисленияСуммУчета
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ВТКадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО Начисления.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И Начисления.Период = ВТКадровыеДанныеСотрудников.Период
	|ГДЕ
	|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияСотрудников.Сотрудник,
	|	СУММА(НачисленияСотрудников.ОтработаноЧасов) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработаноЧасовРегистр
	|ИЗ
	|	ВТНачисленияСуммУчета КАК НачисленияСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	// Собираем фактические периоды действия.
	ТекстЗапроса = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФактическийПериодДействия.Сотрудник,
	|	НачисленияФактическийПериодДействия.ПериодДействия,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК Период,
	|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
	|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТНачисленияФПД
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			ВидРасчета.ЗачетОтработанногоВремени
	|				И ВидРасчета.ЗачетНормыВремени
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТРасчитываемыеСотрудники.Сотрудник
	|					ИЗ
	|						ВТРасчитываемыеСотрудники)) КАК НачисленияФактическийПериодДействия
	|ГДЕ
	|	(НачисленияФактическийПериодДействия.ПериодДействияНачало МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода
	|			ИЛИ НачисленияФактическийПериодДействия.ПериодДействияКонец МЕЖДУ &НачалоРасчетногоПериода И &КонецРасчетногоПериода)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	Запрос.Выполнить();
	
	// Дополняем данные графиками сотрудника.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТНачисленияФПД");
    КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "ГрафикРаботы");
	
	// Соединяемся с информацией по графику.
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачисленияФактическийПериодДействия.Сотрудник,
	|	НачисленияФактическийПериодДействия.ПериодДействия,
	|	НачисленияФактическийПериодДействия.ДатаНачала,
	|	НачисленияФактическийПериодДействия.ДатаОкончания,
	|	ВТКадровыеДанныеСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.СпособОпределенияНормыСуммированногоУчета,
	|	ГрафикиРаботыСотрудников.ГрафикНормыПриСуммированномУчете,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТФактическиеПериодыДействия
	|ИЗ
	|	ВТНачисленияФПД КАК НачисленияФактическийПериодДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ВТКадровыеДанныеСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ВТКадровыеДанныеСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО НачисленияФактическийПериодДействия.Сотрудник = ВТКадровыеДанныеСотрудников.Сотрудник
	|			И НачисленияФактическийПериодДействия.Период = ВТКадровыеДанныеСотрудников.Период
	|ГДЕ
	|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеСотрудников";
	
	// Высчитываем нормовремя.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	СотрудникиГрафики.ДатаНачала,
	|	СотрудникиГрафики.ДатаОкончания,
	|	СотрудникиГрафики.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТСчитатьПоПК
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК СотрудникиГрафики
	|ГДЕ
	|	СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоПроизводственномуКалендарю)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	СотрудникиГрафики.ДатаНачала,
	|	СотрудникиГрафики.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ТОГДА СотрудникиГрафики.ГрафикРаботы
	|		ИНАЧЕ СотрудникиГрафики.ГрафикНормыПриСуммированномУчете
	|	КОНЕЦ КАК ГрафикНормы
	|ПОМЕСТИТЬ ВТСчитатьПоГрафику
	|ИЗ
	|	ВТФактическиеПериодыДействия КАК СотрудникиГрафики
	|ГДЕ
	|	(СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ИЛИ СотрудникиГрафики.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымДругогоГрафика))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня
	|ПОМЕСТИТЬ ВТДни
	|ИЗ
	|	ВТСчитатьПоПК КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО СотрудникиГрафики.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ СотрудникиГрафики.ДатаНачала И СотрудникиГрафики.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДни.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	ВТДни КАК ВТДни
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДни.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеГрафика
	|ИЗ
	|	ВТСчитатьПоГрафику КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СотрудникиГрафики.ГрафикНормы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ СотрудникиГрафики.ДатаНачала И СотрудникиГрафики.ДатаОкончания)
	|			И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиГрафики.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТДанныеГрафика.Сотрудник, ВТДанныеПроизводственногоКалендаря.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТДанныеГрафика.НормаЧасов, 0) + ЕСТЬNULL(ВТДанныеПроизводственногоКалендаря.НормаЧасов, 0) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяПоРегистру
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаря КАК ВТДанныеПроизводственногоКалендаря
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДанныеГрафика КАК ВТДанныеГрафика
	|		ПО ВТДанныеПроизводственногоКалендаря.Сотрудник = ВТДанныеГрафика.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоПК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоГрафику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДни
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеПроизводственногоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеГрафика";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура ДополнитьЗапросВТПоказателейПоУчетуВремени(Запрос)

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчитываемыеСотрудники.Сотрудник,
	|	&НачалоРасчетногоПериода КАК ДатаНачала,
	|	&ПоследнийМесяцОкончание КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТРасчитываемыеСотрудники КАК РасчитываемыеСотрудники";
	Запрос.Выполнить();
	
	// Периоды работы на графике с суммированным учетом строим по данным УчетаВремени.
	// Используем в дальнейшем:
	// 	- для расчета праздничных - за весь период.
	// 	- для расчета отработанных часов и нормы - за последний месяц.
	СоздатьВТПериодыРаботыСотрудниковНаСуммированномУчете(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ВТСотрудникиПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчитываемыеСотрудники.Сотрудник,
	|	РасчитываемыеСотрудники.ДатаНачала,
	|	РасчитываемыеСотрудники.ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК РасчитываемыеСотрудники";
	Запрос.Выполнить();
	
    ПараметрыЗаполнения = УчетРабочегоВремени.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
    ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудники";
    ПараметрыЗаполнения.ИмяВТРезультат = "ВТУчетРабочегоВремениПолный";
    ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Истина;
    ПараметрыЗаполнения.ДатаАктуальности  = НачалоМесяца(Запрос.Параметры.НачалоРасчетногоПериода);
    ПараметрыЗаполнения.ДатаНачала = Запрос.Параметры.НачалоРасчетногоПериода;
    ПараметрыЗаполнения.ДатаОкончания = Запрос.Параметры.ПоследнийМесяцОкончание;
    ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(Запрос.Параметры.НачалоРасчетногоПериода);
    ПараметрыЗаполнения.МесяцДатаОкончания = НачалоМесяца(Запрос.Параметры.ПоследнийМесяцОкончание);
	ПараметрыЗаполнения.ВыделятьВыходныеВПериодыОтклонений = Ложь;
	УчетРабочегоВремени.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	
	// Собираем рабочие часы за последний месяц.
	// Тут же собираем праздничные за весь период.
	Запрос.УстановитьПараметр("Праздники", ПредопределенноеЗначение("Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник"));
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетРабочегоВремени.Сотрудник,
	|	УчетРабочегоВремени.Дата,
	|	УчетРабочегоВремени.Часы
	|ПОМЕСТИТЬ ВТРабочееВремя
	|ИЗ
	|	ВТУчетРабочегоВремениПолный КАК УчетРабочегоВремени
	|ГДЕ
	|	УчетРабочегоВремени.ВидУчетаВремени В(&ОтработанноеВремя)
	|	И УчетРабочегоВремени.Часы > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРабочееВремя.Сотрудник,
	|	ВТРабочееВремя.Дата,
	|	СУММА(ВТРабочееВремя.Часы) КАК Часы
	|ПОМЕСТИТЬ ВТДниРаботыСотрудников
	|ИЗ
	|	ВТРабочееВремя КАК ВТРабочееВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРабочееВремя.Сотрудник,
	|	ВТРабочееВремя.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботы.Сотрудник,
	|	ДниРаботы.Дата,
	|	ПериодыРаботы.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ДниРаботы.Часы
	|ПОМЕСТИТЬ ВТДниРаботыРасширенный
	|ИЗ
	|	ВТДниРаботыСотрудников КАК ДниРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК ПериодыРаботы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ПериодыРаботы.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ПО ДниРаботы.Сотрудник = ПериодыРаботы.Сотрудник
	|			И (ДниРаботы.Дата МЕЖДУ ПериодыРаботы.ДатаНачала И ПериодыРаботы.ДатаОкончания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДниРаботыРасширенный.Сотрудник,
	|	ВТДниРаботыРасширенный.Дата,
	|	ВТДниРаботыРасширенный.ГрафикРаботы,
	|	ВТДниРаботыРасширенный.ПроизводственныйКалендарь,
	|	ВТДниРаботыРасширенный.Часы,
	|	ВЫБОР
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = &Праздники
	|			ТОГДА ВТДниРаботыРасширенный.Часы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовВПраздники
	|ПОМЕСТИТЬ ВТДниРаботыРасширенныйСПраздниками
	|ИЗ
	|	ВТДниРаботыРасширенный КАК ВТДниРаботыРасширенный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ВТДниРаботыРасширенный.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И ВТДниРаботыРасширенный.Дата = ДанныеПроизводственногоКалендаря.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботы.Сотрудник,
	|	ДниРаботы.Часы
	|ПОМЕСТИТЬ ВТРабочиеЧасыУчетВремени
	|ИЗ
	|	ВТДниРаботыРасширенный КАК ДниРаботы
	|ГДЕ
	|	ДниРаботы.Дата МЕЖДУ &ПоследнийМесяцНачало И &ПоследнийМесяцОкончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РабочиеЧасы.Сотрудник,
	|	СУММА(РабочиеЧасы.Часы) КАК ОтработаноЧасов
	|ПОМЕСТИТЬ ВТОтработаноЧасовУчетВремени
	|ИЗ
	|	ВТРабочиеЧасыУчетВремени КАК РабочиеЧасы
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеЧасы.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниРаботыСПраздниками.Сотрудник,
	|	СУММА(ДниРаботыСПраздниками.ЧасовВПраздники) КАК ЧасовВПраздники
	|ПОМЕСТИТЬ ВТПраздничные
	|ИЗ
	|	ВТДниРаботыРасширенныйСПраздниками КАК ДниРаботыСПраздниками
	|
	|СГРУППИРОВАТЬ ПО
	|	ДниРаботыСПраздниками.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочееВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыРасширенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДниРаботыРасширенныйСПраздниками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРабочиеЧасыУчетВремени";
	
	// Получаем нормовремя за последний месяц.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	УчетРабочегоВремени.Сотрудник,
	|	УчетРабочегоВремени.Дата,
	|	ПериодыРаботыСотрудников.ГрафикРаботы
	|ПОМЕСТИТЬ ВТУчетРабочегоВремениСГрафиками
	|ИЗ
	|	ВТУчетРабочегоВремениПолный КАК УчетРабочегоВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудниковНаСуммированномУчете КАК ПериодыРаботыСотрудников
	|		ПО УчетРабочегоВремени.Сотрудник = ПериодыРаботыСотрудников.Сотрудник
	|			И (УчетРабочегоВремени.Дата МЕЖДУ ПериодыРаботыСотрудников.ДатаНачала И ПериодыРаботыСотрудников.ДатаОкончания)
	|ГДЕ
	|	УчетРабочегоВремени.ВидУчетаВремени В(&ВидыВремениВЗачетНормы)
	|	И УчетРабочегоВремени.Дата МЕЖДУ &ПоследнийМесяцНачало И &ПоследнийМесяцОкончание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВремяПоДням.Сотрудник,
	|	ВремяПоДням.Дата,
	|	ВремяПоДням.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.СпособОпределенияНормыСуммированногоУчета,
	|	ГрафикиРаботыСотрудников.ГрафикНормыПриСуммированномУчете,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТДатыДляНормы
	|ИЗ
	|	ВТУчетРабочегоВремениСГрафиками КАК ВремяПоДням
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ВремяПоДням.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыДляНормы.Сотрудник,
	|	ДатыДляНормы.Дата,
	|	ДатыДляНормы.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТСчитатьПоПК
	|ИЗ
	|	ВТДатыДляНормы КАК ДатыДляНормы
	|ГДЕ
	|	ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоПроизводственномуКалендарю)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыДляНормы.Сотрудник,
	|	ДатыДляНормы.Дата,
	|	ВЫБОР
	|		КОГДА ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ТОГДА ДатыДляНормы.ГрафикРаботы
	|		ИНАЧЕ ДатыДляНормы.ГрафикНормыПриСуммированномУчете
	|	КОНЕЦ КАК ГрафикНормы
	|ПОМЕСТИТЬ ВТСчитатьПоГрафику
	|ИЗ
	|	ВТДатыДляНормы КАК ДатыДляНормы
	|ГДЕ
	|	(ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымЭтогоГрафика)
	|			ИЛИ ДатыДляНормы.СпособОпределенияНормыСуммированногоУчета = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияНормыСуммированногоУчета.ПоДаннымДругогоГрафика))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник,
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня
	|ПОМЕСТИТЬ ВТДни
	|ИЗ
	|	ВТСчитатьПоПК КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО СотрудникиГрафики.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДанныеПроизводственногоКалендаря.Дата = СотрудникиГрафики.Дата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДни.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			КОГДА ВТДни.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	ВТДни КАК ВТДни
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДни.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиГрафики.Сотрудник КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТДанныеГрафика
	|ИЗ
	|	ВТСчитатьПоГрафику КАК СотрудникиГрафики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО СотрудникиГрафики.ГрафикНормы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Дата = СотрудникиГрафики.Дата)
	|			И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиГрафики.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТДанныеГрафика.Сотрудник, ВТДанныеПроизводственногоКалендаря.Сотрудник) КАК Сотрудник,
	|	ЕСТЬNULL(ВТДанныеГрафика.НормаЧасов, 0) + ЕСТЬNULL(ВТДанныеПроизводственногоКалендаря.НормаЧасов, 0) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТНормоВремяПоУчетуВремени
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаря КАК ВТДанныеПроизводственногоКалендаря
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДанныеГрафика КАК ВТДанныеГрафика
	|		ПО ВТДанныеПроизводственногоКалендаря.Сотрудник = ВТДанныеГрафика.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТУчетРабочегоВремениСГрафиками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДатыДляНормы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоПК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСчитатьПоГрафику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДни
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеПроизводственногоКалендаря
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеГрафика";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапроса);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТПериодыРаботыСотрудниковНаСуммированномУчете(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяРезультирующейВТ = "ВТПериодыРаботыСотрудниковНаСуммированномУчете") Экспорт

	// Получаем историю изменения графиков.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			ИмяВТСотрудникиПериоды,
			"Сотрудник"),
		ПараметрыПостроения,
		"ВТГрафикиРаботыСотрудниковСрезИДвижения");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиГрафики.Сотрудник,
		|	СотрудникиГрафики.ГрафикРаботы,
		|	СотрудникиГрафики.Период КАК ДатаНачала,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СотрудникиГрафикиСледующие.Период ЕСТЬ NULL 
		|				ТОГДА СотрудникиПериоды.ДатаОкончания
		|			ИНАЧЕ КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СотрудникиГрафикиСледующие.Период, ДЕНЬ, -1), ДЕНЬ)
		|		КОНЕЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыГрафиков
		|ИЗ
		|	ВТГрафикиРаботыСотрудниковСрезИДвижения КАК СотрудникиГрафики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыСотрудниковСрезИДвижения КАК СотрудникиГрафикиСледующие
		|		ПО СотрудникиГрафики.Сотрудник = СотрудникиГрафикиСледующие.Сотрудник
		|			И СотрудникиГрафики.Период < СотрудникиГрафикиСледующие.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ВТСотрудникиПериоды% КАК СотрудникиПериоды
		|		ПО СотрудникиГрафики.Сотрудник = СотрудникиПериоды.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиГрафики.Сотрудник,
		|	СотрудникиГрафики.Период,
		|	СотрудникиГрафики.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГрафикиРаботы.Сотрудник,
		|	ГрафикиРаботы.ГрафикРаботы,
		|	ГрафикиРаботы.ДатаНачала,
		|	ГрафикиРаботы.ДатаОкончания
		|ПОМЕСТИТЬ %ВТПериодыРаботыСотрудниковНаСуммированномУчете%
		|ИЗ
		|	ВТПериодыГрафиков КАК ГрафикиРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|ГДЕ
		|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПериодыГрафиков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТГрафикиРаботыСотрудниковСрезИДвижения";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТПериодыРаботыСотрудниковНаСуммированномУчете%", ИмяРезультирующейВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТСотрудникиПериоды%", ИмяВТСотрудникиПериоды);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Проверка множественности оплаты времени.

// Проверяет наличие у сотрудников двух или более действующих плановых начислений с зачетом нормы времени.
// Метод проверяет или конкретный документ, или текущее состояние базы (если ТаблицаНачислений = Неопределено).
//
// Параметры:
//		ТаблицаНачислений - таблица, сформированная методом РасчетЗарплатыРасширенный.ПустаяТаблицаПлановыхНачислений().
//		Документ - ссылка на документ.
//
Процедура ПроверитьМножественностьОплатыВремени(ТаблицаНачислений = Неопределено, Документ = Неопределено, Отказ = Ложь, ДатаСобытия = '00010101', ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТаблицаНачислений <> Неопределено Тогда 
		
		Если ТаблицаНачислений.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаНачислений.Период КАК Период,
		               |	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		               |	ТаблицаНачислений.Начисление КАК Начисление,
		               |	ТаблицаНачислений.Действие КАК Действие,
		               |	ТаблицаНачислений.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ ВТНачисления
		               |ИЗ
		               |	&ТаблицаНачислений КАК ТаблицаНачислений
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Начисления.Период КАК Период,
		               |	Начисления.Сотрудник КАК Сотрудник,
		               |	Начисления.Начисление КАК Начисление,
		               |	Начисления.Действие КАК Действие,
		               |	Начисления.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ ВТДанныеДокумента
		               |ИЗ
		               |	ВТНачисления КАК Начисления
		               |ГДЕ
		               |	Начисления.Начисление.ЗачетНормыВремени = ИСТИНА";
					   
	Иначе				   
		
		Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ДатаСобытия);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	&ТекущаяДатаСеанса КАК Период
		               |ПОМЕСТИТЬ ВТДанныеДокумента";
					   
	КонецЕсли;				   
					   
	Запрос.Выполнить();			   
	
	Если ТаблицаНачислений <> Неопределено Тогда 
		ПроверитьНаличиеПлановыхНачисленийНаДату(Запрос.МенеджерВременныхТаблиц, Документ, Отказ, ИсправленныйДокумент);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТДанныеДокумента", ?(ТаблицаНачислений = Неопределено, Новый Массив, "Сотрудник"));
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Начисление.ЗачетНормыВремени", "=", Истина);
	Если ТаблицаНачислений <> Неопределено Тогда 
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Документ);
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ИсправленныйДокумент);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеНачисленияСрезПоследних.Регистратор КАК Регистратор,
	               |	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
	               |	ПлановыеНачисленияСрезПоследних.Начисление КАК Начисление
	               |ПОМЕСТИТЬ ВТДействующиеНачисления
	               |ИЗ
	               |	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
	               |ГДЕ
	               |	ПлановыеНачисленияСрезПоследних.Используется = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТДействующиеНачисления.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТСуществующиеОшибки
	               |ИЗ
	               |	ВТДействующиеНачисления КАК ВТДействующиеНачисления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТДействующиеНачисления.Сотрудник
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТДействующиеНачисления.Начисление) > 1";
				   
	Запрос.Выполнить();			   
	
	Если ТаблицаНачислений = Неопределено Тогда 
		ПроверитьТекущееСостояниеБазыМножественностьОплатыВремени(Запрос.МенеджерВременныхТаблиц);
	Иначе 
		ПроверитьИзмененияВнесенныеДокументомМножественностьОплатыВремени(Запрос.МенеджерВременныхТаблиц, Документ, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьТекущееСостояниеБазыМножественностьОплатыВремени(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДействующиеНачисления.Регистратор КАК Регистратор,
	               |	ДействующиеНачисления.Сотрудник КАК Сотрудник,
	               |	ДействующиеНачисления.Начисление КАК Начисление
	               |ИЗ
	               |	ВТДействующиеНачисления КАК ДействующиеНачисления
	               |ГДЕ
	               |	ДействующиеНачисления.Сотрудник В
	               |			(ВЫБРАТЬ
	               |				СуществующиеОшибки.Сотрудник
	               |			ИЗ
	               |				ВТСуществующиеОшибки КАК СуществующиеОшибки)
	               |ИТОГИ ПО
	               |	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСотрудникам.Следующий() Цикл 
		
		ТекстСообщения = НСтр("ru='Работнику %1 назначены начисления:';uk='Працівнику %1 призначені нарахування:'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВыборкаПоСотрудникам.Сотрудник);
		
		Выборка = ВыборкаПоСотрудникам.Выбрать();
		ПерваяСтрока = Истина;
		Пока Выборка.Следующий() Цикл 
			ТекстСообщения = ТекстСообщения + ?(ПерваяСтрока, " ", ", ") + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='""%1"" (документ %2)';uk='""%1"" (документ %2)'"), Выборка.Начисление, Выборка.Регистратор);
			ПерваяСтрока = Ложь;
		КонецЦикла;	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИзмененияВнесенныеДокументомМножественностьОплатыВремени(МенеджерВременныхТаблиц, Документ, Отказ)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТОтмененныеНачисления
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеНачисления.Сотрудник КАК Сотрудник,
	|	ДействующиеНачисления.Начисление КАК Начисление,
	|	ДействующиеНачисления.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени
	|ПОМЕСТИТЬ ВТНовыеНачисления
	|ИЗ
	|	ВТДействующиеНачисления КАК ДействующиеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтмененныеНачисления КАК ОтмененныеНачисления
	|		ПО ДействующиеНачисления.Сотрудник = ОтмененныеНачисления.Сотрудник
	|			И ДействующиеНачисления.Начисление = ОтмененныеНачисления.Начисление
	|ГДЕ
	|	ОтмененныеНачисления.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.Начисление,
	|	ДанныеДокумента.Начисление.ОбозначениеВТабелеУчетаРабочегоВремени
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Утвердить)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеНачисления.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТНовыеОшибки
	|ИЗ
	|	ВТНовыеНачисления КАК НовыеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНачисления КАК НовыеНачисленияДополнительно
	|		ПО НовыеНачисления.Сотрудник = НовыеНачисленияДополнительно.Сотрудник
	|			И НовыеНачисления.Начисление <> НовыеНачисленияДополнительно.Начисление
	|			И НовыеНачисления.ОбозначениеВТабелеУчетаРабочегоВремени = НовыеНачисленияДополнительно.ОбозначениеВТабелеУчетаРабочегоВремени
	|ГДЕ
	|	НЕ НовыеНачисления.Сотрудник В
	|				(ВЫБРАТЬ
	|					СуществующиеОшибки.Сотрудник
	|				ИЗ
	|					ВТСуществующиеОшибки КАК СуществующиеОшибки)
	|
	|СГРУППИРОВАТЬ ПО
	|	НовыеНачисления.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НовыеНачисления.Начисление) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеОшибки.Сотрудник КАК Сотрудник,
	|	ДанныеДокумента.Начисление КАК НачислениеВДокументе,
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДействующиеНачисления.Начисление КАК Начисление,
	|	ДействующиеНачисления.Регистратор КАК Регистратор
	|ИЗ
	|	ВТНовыеОшибки КАК НовыеОшибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК ДанныеДокумента
	|		ПО НовыеОшибки.Сотрудник = ДанныеДокумента.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДействующиеНачисления КАК ДействующиеНачисления
	|		ПО НовыеОшибки.Сотрудник = ДействующиеНачисления.Сотрудник
	|ГДЕ
	|	ДанныеДокумента.Начисление <> ДействующиеНачисления.Начисление";
					   
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru='Работнику %1 не может быть назначено начисление ""%2"", поскольку документом %3 ему уже назначено начисление ""%4""';uk='Працівнику %1 не може бути призначено нарахування ""%2"", оскільки документом %3 йому вже призначено нарахування ""%4""'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.Сотрудник, Выборка.НачислениеВДокументе, Выборка.Регистратор, Выборка.Начисление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ, "Объект.Начисления[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Начисление", , Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// При проверке документа с сотрудником в шапке проверяет наличие у сотрудника двух или более действующих 
// плановых начислений с зачетом нормы времени.
//
Процедура ПроверитьМножественностьОплатыВремениРаботникВШапке(Период, Сотрудник, Начисления, Документ, Отказ = Ложь, Действие = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаПлановыхНачислений();

	Для Каждого ТекСтрока Из Начисления Цикл 
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Период = Период;
		НоваяСтрока.Начисление = ТекСтрока.Начисление;
		НоваяСтрока.Действие = ?(ЗначениеЗаполнено(Действие), Действие, ?(ЗначениеЗаполнено(ТекСтрока.Действие), ТекСтрока.Действие, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить));
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
	КонецЦикла;	
	
	ПроверитьМножественностьОплатыВремени(ТаблицаНачислений, Документ, Отказ, , ИсправленныйДокумент);
	
КонецПроцедуры

// При проверке документа отпуска по уходу за ребенком проверяет наличие у сотрудника двух или более действующих 
// плановых начислений с зачетом нормы времени.
//
Процедура ПроверитьМножественностьОплатыВремениУходЗаРебенком(Период, Начисления, Документ, Отказ = Ложь, ТаблицаПособийПоУходу = Неопределено, ИмяКолонкиСотрудник = "РабочееМесто", ИсправленныйДокумент = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНачислений = РасчетЗарплатыРасширенный.ПустаяТаблицаПлановыхНачислений();

	Для Каждого ТекСтрока Из Начисления Цикл 
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока.Сотрудник = ТекСтрока[ИмяКолонкиСотрудник];
		НоваяСтрока.Период = Период;
		НоваяСтрока.Начисление = ТекСтрока.Начисление;
		НоваяСтрока.Действие = ?(ЗначениеЗаполнено(ТекСтрока.Действие), ТекСтрока.Действие, Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить);
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
	КонецЦикла;	
	
	Если ТаблицаПособийПоУходу <> Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПособийПоУходу, ТаблицаНачислений);
	КонецЕсли;
	
	ПроверитьМножественностьОплатыВремени(ТаблицаНачислений, Документ, Отказ, , ИсправленныйДокумент);
	
КонецПроцедуры

Процедура ПроверитьНаличиеПлановыхНачисленийНаДату(МенеджерВременныхТаблиц, Документ = Неопределено, Отказ = Ложь, ИсправленныйДокумент = Неопределено)

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсправленныйДокумент);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияДокумента.Период,
	               |	НачисленияДокумента.Сотрудник,
	               |	НачисленияДокумента.Начисление
	               |ПОМЕСТИТЬ ВТДвиженияДокумента
	               |ИЗ
	               |	ВТНачисления КАК НачисленияДокумента
	               |ГДЕ
	               |	НачисленияДокумента.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПлановыеНачисления.Период,
	               |	ПлановыеНачисления.Регистратор,
	               |	ПлановыеНачисления.Сотрудник,
	               |	ПлановыеНачисления.Начисление
	               |ИЗ
	               |	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияДокумента КАК ДвиженияДокумента
	               |		ПО ПлановыеНачисления.Период = ДвиженияДокумента.Период
	               |			И ПлановыеНачисления.Сотрудник = ДвиженияДокумента.Сотрудник
	               |			И ПлановыеНачисления.Начисление = ДвиженияДокумента.Начисление
	               |			И (ПлановыеНачисления.Регистратор <> &Регистратор)
	               |			И (ПлановыеНачисления.Регистратор <> &ИсключаемыйРегистратор)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТДвиженияДокумента";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонСообщения = НСтр("ru='Сотрудник %1: начисление %2 на дату %3 уже введено документом %4';uk='Співробітник %1: нарахування %2 на дату %3 введено документом %4'");
	
	Пока Выборка.Следующий() Цикл 
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, Выборка.Начисление, Формат(Выборка.Период, "ДЛФ=Д"), Выборка.Регистратор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЦикла;	
	
КонецПроцедуры

#Область КонтрольУникальногоЗапрашиванияПоказателя

Функция ПустаяТаблицаДополнительныхПоказателей() Экспорт 
	
	ДополнительныеПоказатели = Новый ТаблицаЗначений;
	
	ДополнительныеПоказатели.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ДополнительныеПоказатели.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДополнительныеПоказатели.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
	ДополнительныеПоказатели.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ДополнительныеПоказатели.Колонки.Добавить("ЗначениеПоказателя", Новый ОписаниеТипов("Число"));
	
	Возврат ДополнительныеПоказатели;
	
КонецФункции

Процедура ПроверитьУникальностьЗапрашиванияПоказателя(МенеджерВременныхТаблиц, Регистратор, Отказ) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Период,
		|	ПоказателиВидовРасчета.Сотрудник,
		|	ПоказателиВидовРасчета.Показатель,
		|	ПоказателиВидовРасчета.ДокументОснование,
		|	ПоказателиВидовРасчета.ЗначениеПоказателя
		|ПОМЕСТИТЬ ВТДанныеДокументаПоказателиСотрудников
		|ИЗ
		|	ВТПоказателиВидовРасчета КАК ПоказателиВидовРасчета
		|ГДЕ
		|	ПоказателиВидовРасчета.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДополнительныеПоказатели.Период,
		|	ДополнительныеПоказатели.Сотрудник,
		|	ДополнительныеПоказатели.Показатель,
		|	НЕОПРЕДЕЛЕНО,
		|	ДополнительныеПоказатели.ЗначениеПоказателя
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Действие <> ЗНАЧЕНИЕ(Перечисление.ДействияСНачислениямиИУдержаниями.Отменить)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокументаПоказателиСотрудников.Период,
		|	ДанныеДокументаПоказателиСотрудников.Сотрудник,
		|	ДанныеДокументаПоказателиСотрудников.Показатель,
		|	ДанныеДокументаПоказателиСотрудников.ДокументОснование
		|ИЗ
		|	ВТДанныеДокументаПоказателиСотрудников КАК ДанныеДокументаПоказателиСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокументаПоказателиСотрудников.Сотрудник,
		|	ДанныеДокументаПоказателиСотрудников.Показатель,
		|	ДанныеДокументаПоказателиСотрудников.ДокументОснование,
		|	ДанныеДокументаПоказателиСотрудников.Период
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ДанныеДокументаПоказателиСотрудников.ЗначениеПоказателя) > 1";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		ШаблонСообщения = НСтр("ru='%1: сотруднику %2 назначены разные значения показателя %3';uk='%1: співробітникові %2 призначені різні значення показника %3'");
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Регистратор, Выборка.Сотрудник, Выборка.Показатель);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Регистратор, , , Отказ);
		КонецЦикла;
		
	    Возврат;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Период КАК Период,
		|	ПоказателиВидовРасчета.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТИзмеренияДаты
		|ИЗ
		|	ВТПоказателиВидовРасчета КАК ПоказателиВидовРасчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДополнительныеПоказатели.Период,
		|	ДополнительныеПоказатели.Сотрудник
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДаты", "Сотрудник");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	Запрос.УстановитьПараметр("ИспользоватьНесколькоТарифныхСтавок", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиВидовРасчета.Сотрудник,
		|	ПоказателиВидовРасчета.Начисление,
		|	ПоказателиВидовРасчета.ДокументОснование,
		|	ПоказателиВидовРасчета.Действие
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	ВТПоказателиВидовРасчета КАК ПоказателиВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Сотрудник,
		|	ПлановыеНачисленияСрезПоследних.Начисление,
		|	ПлановыеНачисленияСрезПоследних.ДокументОснование,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТНачисленияИнформационнойБазы
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПлановыеНачисленияСрезПоследних.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДокумента КАК НачисленияДокумента
		|		ПО ПлановыеНачисленияСрезПоследних.Сотрудник = НачисленияДокумента.Сотрудник
		|			И ПлановыеНачисленияСрезПоследних.Начисление = НачисленияДокумента.Начисление
		|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = НачисленияДокумента.ДокументОснование
		|			И (ПлановыеНачисленияСрезПоследних.Используется)
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Используется
		|	И НачисленияДокумента.Начисление ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрименениеДополнительныхПериодическихПоказателей.Сотрудник,
		|	ПрименениеДополнительныхПериодическихПоказателей.Показатель,
		|	НЕОПРЕДЕЛЕНО КАК ДокументОснование
		|ПОМЕСТИТЬ ВТДополнительныеПоказателиИнформационнойБазы
		|ИЗ
		|	ВТПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ПрименениеДополнительныхПериодическихПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|		ПО ПрименениеДополнительныхПериодическихПоказателей.Сотрудник = ДополнительныеПоказатели.Сотрудник
		|			И ПрименениеДополнительныхПериодическихПоказателей.Показатель = ДополнительныеПоказатели.Показатель
		|			И (ПрименениеДополнительныхПериодическихПоказателей.Применение)
		|			И (&ИспользоватьНесколькоТарифныхСтавок)
		|ГДЕ
		|	ПрименениеДополнительныхПериодическихПоказателей.Применение
		|	И ДополнительныеПоказатели.Показатель ЕСТЬ NULL 
		|	И &ИспользоватьНесколькоТарифныхСтавок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияИнформационнойБазы.Сотрудник,
		|	НачисленияИнформационнойБазы.Показатель,
		|	НачисленияИнформационнойБазы.ДокументОснование,
		|	ЗначенияПериодическихПоказателей.Регистратор,
		|	ЗначенияПериодическихПоказателей.Значение КАК ЗначениеПоказателя
		|ПОМЕСТИТЬ ВТДанныеБазыПоказателиСотрудников
		|ИЗ
		|	ВТНачисленияИнформационнойБазы КАК НачисленияИнформационнойБазы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
		|		ПО НачисленияИнформационнойБазы.Сотрудник = ЗначенияПериодическихПоказателей.Сотрудник
		|			И НачисленияИнформационнойБазы.Показатель = ЗначенияПериодическихПоказателей.Показатель
		|			И НачисленияИнформационнойБазы.ДокументОснование = ЗначенияПериодическихПоказателей.ДокументОснование
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДополнительныеПоказателиИнформационнойБазы.Сотрудник,
		|	ДополнительныеПоказателиИнформационнойБазы.Показатель,
		|	ДополнительныеПоказателиИнформационнойБазы.ДокументОснование,
		|	ЗначенияПериодическихПоказателей.Регистратор,
		|	ЗначенияПериодическихПоказателей.Значение
		|ИЗ
		|	ВТДополнительныеПоказателиИнформационнойБазы КАК ДополнительныеПоказателиИнформационнойБазы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
		|		ПО ДополнительныеПоказателиИнформационнойБазы.Сотрудник = ЗначенияПериодическихПоказателей.Сотрудник
		|			И ДополнительныеПоказателиИнформационнойБазы.Показатель = ЗначенияПериодическихПоказателей.Показатель
		|			И ДополнительныеПоказателиИнформационнойБазы.ДокументОснование = ЗначенияПериодическихПоказателей.ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеБазыПоказателиСотрудников.Регистратор,
		|	ДанныеБазыПоказателиСотрудников.Сотрудник,
		|	ДанныеБазыПоказателиСотрудников.Показатель,
		|	ДанныеБазыПоказателиСотрудников.ЗначениеПоказателя
		|ИЗ
		|	ВТДанныеБазыПоказателиСотрудников КАК ДанныеБазыПоказателиСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокументаПоказателиСотрудников КАК ДанныеДокументаПоказателиСотрудников
		|		ПО ДанныеБазыПоказателиСотрудников.Сотрудник = ДанныеДокументаПоказателиСотрудников.Сотрудник
		|			И ДанныеБазыПоказателиСотрудников.Показатель = ДанныеДокументаПоказателиСотрудников.Показатель
		|			И ДанныеБазыПоказателиСотрудников.ДокументОснование = ДанныеДокументаПоказателиСотрудников.ДокументОснование
		|			И ДанныеБазыПоказателиСотрудников.ЗначениеПоказателя <> ДанныеДокументаПоказателиСотрудников.ЗначениеПоказателя";
	
	ШаблонСообщения = НСтр("ru='%1: сотрудник %2 - для показателя %3 уже установлено значение %4 документом %5';uk='%1: співробітник %2 - для показника %3 вже встановлено у значення %4 документом %5'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Регистратор, Выборка.Сотрудник, Выборка.Показатель, Выборка.ЗначениеПоказателя, Выборка.Регистратор);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Регистратор, , , Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУникальностьЗапрашиванияПоказателяСотрудникВШапке(ТаблицаНачислений, ТаблицаПоказателей, Сотрудник, ДатаСобытия, Регистратор, Отказ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНачислений.Колонки.Найти("Действие") = Неопределено Тогда 
		ТаблицаНачислений.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
		ТаблицаНачислений.ЗаполнитьЗначения(Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить, "Действие");
	КонецЕсли;
	
	Если ТаблицаНачислений.Колонки.Найти("ДокументОснование") = Неопределено Тогда 
		ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	КонецЕсли;
	
	Если ТаблицаПоказателей.Колонки.Найти("Действие") = Неопределено Тогда 
		ТаблицаПоказателей.Колонки.Добавить("Действие", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияСНачислениямиИУдержаниями"));
		ТаблицаПоказателей.ЗаполнитьЗначения(Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить, "Действие");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("ИспользоватьНесколькоТарифныхСтавок", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаВидовРасчета.Начисление КАК Начисление,
	               |	ТаблицаВидовРасчета.ДокументОснование КАК ДокументОснование,
	               |	ТаблицаВидовРасчета.Действие КАК Действие,
	               |	ТаблицаВидовРасчета.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТВидыРасчета
	               |ИЗ
	               |	&ТаблицаНачислений КАК ТаблицаВидовРасчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПоказателей.Показатель КАК Показатель,
	               |	ТаблицаПоказателей.Значение КАК ЗначениеПоказателя,
	               |	ТаблицаПоказателей.Действие КАК Действие,
	               |	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТПоказатели
	               |ИЗ
	               |	&ТаблицаПоказателей КАК ТаблицаПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ДатаСобытия КАК Период,
	               |	&Сотрудник КАК Сотрудник,
	               |	ВидыРасчета.Начисление КАК Начисление,
	               |	ВидыРасчета.ДокументОснование КАК ДокументОснование,
	               |	ВидыРасчета.Действие КАК Действие,
	               |	ЕСТЬNULL(Показатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
	               |	ЕСТЬNULL(Показатели.ЗначениеПоказателя, 0) КАК ЗначениеПоказателя
	               |ПОМЕСТИТЬ ВТПоказателиВидовРасчета
	               |ИЗ
	               |	ВТВидыРасчета КАК ВидыРасчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
	               |		ПО ВидыРасчета.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ДатаСобытия КАК Период,
	               |	&Сотрудник КАК Сотрудник,
	               |	Показатели.Показатель КАК Показатель,
	               |	Показатели.ЗначениеПоказателя КАК ЗначениеПоказателя,
	               |	Показатели.Действие КАК Действие
	               |ПОМЕСТИТЬ ВТДополнительныеПоказатели
	               |ИЗ
	               |	ВТПоказатели КАК Показатели
	               |ГДЕ
	               |	Показатели.ИдентификаторСтрокиВидаРасчета = 0
	               |	И &ИспользоватьНесколькоТарифныхСтавок";
				   
	Запрос.Выполнить();			   
	
	ПроверитьУникальностьЗапрашиванияПоказателя(Запрос.МенеджерВременныхТаблиц, Регистратор, Отказ);
	
КонецПроцедуры

Процедура ПроверитьУникальностьЗапрашиванияПоказателяУходЗаРебенком(ТаблицаНачислений, ТаблицаПоказателей, ДатаСобытия, Регистратор, Отказ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("ИспользоватьНесколькоТарифныхСтавок", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаВидовРасчета.РабочееМесто КАК Сотрудник,
	               |	ТаблицаВидовРасчета.Начисление КАК Начисление,
	               |	ТаблицаВидовРасчета.ДокументОснование КАК ДокументОснование,
	               |	ТаблицаВидовРасчета.Действие КАК Действие,
	               |	ТаблицаВидовРасчета.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТВидыРасчета
	               |ИЗ
	               |	&ТаблицаНачислений КАК ТаблицаВидовРасчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПоказателей.РабочееМесто КАК Сотрудник,
	               |	ТаблицаПоказателей.Показатель КАК Показатель,
	               |	ТаблицаПоказателей.Значение КАК ЗначениеПоказателя,
	               |	ТаблицаПоказателей.Действие КАК Действие,
	               |	ТаблицаПоказателей.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета
	               |ПОМЕСТИТЬ ВТПоказатели
	               |ИЗ
	               |	&ТаблицаПоказателей КАК ТаблицаПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ДатаСобытия КАК Период,
	               |	ВидыРасчета.Сотрудник КАК Сотрудник,
	               |	ВидыРасчета.Начисление КАК Начисление,
	               |	ВидыРасчета.ДокументОснование КАК ДокументОснование,
	               |	ВидыРасчета.Действие КАК Действие,
	               |	ЕСТЬNULL(Показатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
	               |	ЕСТЬNULL(Показатели.ЗначениеПоказателя, 0) КАК ЗначениеПоказателя
	               |ПОМЕСТИТЬ ВТПоказателиВидовРасчета
	               |ИЗ
	               |	ВТВидыРасчета КАК ВидыРасчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
	               |		ПО ВидыРасчета.ИдентификаторСтрокиВидаРасчета = Показатели.ИдентификаторСтрокиВидаРасчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ДатаСобытия КАК Период,
	               |	Показатели.Сотрудник КАК Сотрудник,
	               |	Показатели.Показатель КАК Показатель,
	               |	Показатели.ЗначениеПоказателя КАК ЗначениеПоказателя,
	               |	Показатели.Действие КАК Действие
	               |ПОМЕСТИТЬ ВТДополнительныеПоказатели
	               |ИЗ
	               |	ВТПоказатели КАК Показатели
	               |ГДЕ
	               |	Показатели.ИдентификаторСтрокиВидаРасчета = 0
	               |	И &ИспользоватьНесколькоТарифныхСтавок";
				   
	Запрос.Выполнить();			   
	
	ПроверитьУникальностьЗапрашиванияПоказателя(Запрос.МенеджерВременныхТаблиц, Регистратор, Отказ);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Работа с показателями расчета зарплаты.

// Функция определяет наличие предопределенных показателей 
// в табличной части вида расчета.
//
// Параметры:
//	- Показатели - данные формы коллекция, связанная с табличной частью показателей.
//	- ИмяПредопределенныхДанных - строковое имя предопределенного показателя.
//
Функция ЕстьПоказательВКоллекции(Коллекция, ИмяПредопределенныхДанных) Экспорт
	
	Возврат ЕстьПоказателиВКоллекции(Коллекция, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИмяПредопределенныхДанных)));
	
КонецФункции

// Функция проверяет наличие показателей в коллекции.
//
// Параметры:
//	- Коллекция - коллекция строк с колонкой Показатель.
//	- Показатели - массив искомых показателей.
//
// Возвращаемое значение 
//	Истина - в коллекции есть хотя бы один из показателей, 
//	Ложь - в противном случае
//
Функция ЕстьПоказателиВКоллекции(Коллекция, Показатели) Экспорт
	
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		Если Показатели.Найти(СтрокаКоллекции["Показатель"]) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура проверяет выполнимость формулы вида расчета.
// Формула должна быть заполнена.
// Важно. Существование показателей проверяется функцией ПоказателиПоИдентификаторам.
// Если при выполнении формулы произошла ошибка, то Отказ = Истина.
Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателей, Отказ = Ложь)
	
	// Подготовим структуру для выполнения формулы.
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для каждого Показатель Из ИдентификаторыПоказателей Цикл
		ИсходныеДанные.Вставить(Показатель, ГСЧ.СлучайноеЧисло(1,9));
	КонецЦикла;
	
	Попытка 
		Результат = Вычислить(ФормулаДляВыполнения);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru='При проверке вычисления по формуле возникла ошибка.';uk='При перевірці обчислення за формулою виникла помилка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецПопытки
	
КонецПроцедуры

// Функция преобразует формулу введенную пользователем в формулу для выполнения при расчете зарплаты.
// К показателям прибавляется префикс.
Функция ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей)
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			ФормулаДляВыполнения = ФормулаДляВыполнения + Сред(Формула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
	Возврат ФормулаДляВыполнения
КонецФункции

Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей)
 	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		Если ИдентификаторыПоказателей.Найти(Слово) <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + Слово;
		Иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;               
КонецПроцедуры

// Функция выбирает из формулы все слова не являющиеся разделителями и функциями.
// Предполагается, что это показатели.
Функция ИдентификаторыПоказателейФормулы(Формула)
    ИдентификаторыПоказателей = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>()," + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT");
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово.
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		// Это должен быть показатель
		ИдентификаторыПоказателей.Добавить(Слово);
	КонецЦикла;
	
    Возврат ИдентификаторыПоказателей
КонецФункции 

// Функция проверяет существование показателя по идентификатору и возвращает массив Показателей.
// Если какой-то из показателей не существует, то возвращается Неопределено.
Функция ПоказателиПоИдентификаторам(ИдентификаторыПоказателей)
	
	Отказ = Ложь;
	
	Показатели = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		// Это должен быть показатель
		Показатель = ПоказательПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось найти показатель по идентификатору %1';uk='Не вдалося знайти показник за ідентифікатором %1'"), Идентификатор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить;
		КонецЕсли;
		Показатели.Добавить(Показатель);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено
	Иначе	
		Возврат Показатели
	КонецЕсли;
	
КонецФункции 

// Функция возвращает структуру в которой содержатся формула для выполнения и показатели использованные в формуле.
// При подготовке результата проверяется существование использованных показателей и возможность вычисления формулы.
// Если проверка не пройдена - возвращается Неопределено.
//
Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина, НедопустимыеПоказатели = Неопределено) Экспорт
	
	Отказ = Ложь;	
	
	ПараметрыВыполнения = Неопределено;
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		Если Не ПроверятьФормулу Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		ТекстСообщения = НСтр("ru='Формула не заполнена';uk='Формулу не заповнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Получим  из формулы идентификаторы используемых показателей.
	ИдентификаторыПоказателейФормулы = ИдентификаторыПоказателейФормулы(Формула);
	// Проверим существование показателей.
	ПоказателиФормулы = ПоказателиПоИдентификаторам(ИдентификаторыПоказателейФормулы);
	Если ПоказателиФормулы = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Внесем изменения, связанные с базовыми показателями.
	ДополнитьФормулуБазовымиПоказателями(Формула, ПоказателиФормулы, ИдентификаторыПоказателейФормулы);
	
	ФормулаДляВыполнения = ФормулаДляВыполнения(Формула, ИдентификаторыПоказателейФормулы);
	
	// Проверим правильность составления формулы.
	Если ПроверятьФормулу Тогда
		ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ);	
		ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателейФормулы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	Возврат Новый Структура("ФормулаДляВыполнения, ПоказателиФормулы", ФормулаДляВыполнения, ПоказателиФормулы) 
	
КонецФункции

Процедура ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ)
	
	Если НедопустимыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПоказательФормулы Из ПоказателиФормулы Цикл
		Если НедопустимыеПоказатели.Найти(ПоказательФормулы) <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Использование показателя %1 в этой формуле расчета недопустимо.';uk='Використання показника %1 у цій формулі розрахунку неприпустимо.'"), 
				ЗарплатаКадрыРасширенный.ИдентификаторПоказателя(ПоказательФормулы));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Преобразует формулу с учетом шкалы зависимости от базовых показателей.
//
Процедура ДополнитьФормулуБазовымиПоказателями(Формула, Показатели, ИдентификаторыПоказателей)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатели", Показатели);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
	               |	ПоказателиРасчетаЗарплаты.Идентификатор КАК ПоказательИдентификатор,
	               |	ПоказателиРасчетаЗарплаты.БазовыйПоказатель КАК БазовыйПоказатель,
	               |	ПоказателиРасчетаЗарплаты.БазовыйПоказатель.Идентификатор КАК БазовыйПоказательИдентификатор
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.Ссылка В(&Показатели)
	               |	И ПоказателиРасчетаЗарплаты.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтДругогоПоказателя)
	               |	И ПоказателиРасчетаЗарплаты.БазовыйПоказатель <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстЗамены = ТекстЗаменыИндентификатораПоказателяОцениваемогоПоШкале(Выборка.Показатель, Выборка.БазовыйПоказательИдентификатор);
		Формула = СтрЗаменить(Формула, Выборка.ПоказательИдентификатор, ТекстЗамены);
		Если Показатели.Найти(Выборка.БазовыйПоказатель) = Неопределено Тогда 
			Показатели.Добавить(Выборка.БазовыйПоказатель);
		КонецЕсли;
		Если ИдентификаторыПоказателей.Найти(Выборка.БазовыйПоказательИдентификатор) = Неопределено Тогда 
			ИдентификаторыПоказателей.Добавить(Выборка.БазовыйПоказательИдентификатор);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// Для показателя, оцениваемого по шкале, возвращает текст для замены идентификатора в формуле расчета.
//
Функция ТекстЗаменыИндентификатораПоказателяОцениваемогоПоШкале(Показатель, БазовыйПоказательИдентификатор) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраницаИнтервалаСтажа,
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя КАК ЗначениеПоказателя,
	               |	ВЫБОР
	               |		КОГДА ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка = &Показатель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок,
	               |	ВерхняяГраницаИнтервалаСтажа";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстЗамены = "";
	ПредыдущееЗначение = Неопределено;
	Пока Выборка.Следующий() Цикл
		ЗначениеПоказателя = СтрЗаменить(Выборка.ЗначениеПоказателя, ",", ".");
		ВерхняяГраницаИнтервалаСтажа = СтрЗаменить(Выборка.ВерхняяГраницаИнтервалаСтажа, ",", ".");
		Если ВерхняяГраницаИнтервалаСтажа = "0" Тогда 
			ТекстЗамены = ТекстЗамены + СтрЗаменить(ЗначениеПоказателя, Символы.НПП, "");
			// Если шкала состоит из одной строки с верхней границей 0, то указанное в строке значение применяется 
			// вне зависимости от значения базового показателя.
			Если ПредыдущееЗначение = Неопределено Тогда 
				Прервать;
			КонецЕсли;
		Иначе 
			ТекстЗамены = ТекстЗамены + "?(" + БазовыйПоказательИдентификатор + " < " 
			+ СтрЗаменить(ВерхняяГраницаИнтервалаСтажа, Символы.НПП, "") + ", " 
			+ СтрЗаменить(ЗначениеПоказателя, Символы.НПП, "") + ", ";
		КонецЕсли;
		ПредыдущееЗначение = Выборка.ЗначениеПоказателя;	
	КонецЦикла;
	Если Прав(ТекстЗамены, 2) = ", " Тогда 
		ТекстЗамены = ТекстЗамены + 0 + ")";
	КонецЕсли;
	Если Лев(ТекстЗамены, 1) = "?" Тогда 
		Для Сч = 1 По Выборка.Количество() - 1 Цикл 
			ТекстЗамены = ТекстЗамены + ")";
		КонецЦикла;
	КонецЕсли;
	Если ТекстЗамены = "" Тогда 
		ТекстЗамены = ТекстЗамены + 0;
	КонецЕсли;	
	
	Возврат ТекстЗамены;
	
КонецФункции	

// Устарела. Следует использовать РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу.
// Функция позволяет заполнить признак ИспользуетФормулу (вторичные данные) вида расчета.
//
// Параметры:
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний
//
// Возвращаемое значение - булево, Истина - если способ расчета - произвольная формула.
//
Функция СпособРасчетаИспользуетФормулу(СпособРасчета) Экспорт
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета);
КонецФункции

// Сообщает о показателях используемых при расчете предопределенным способом.
//
// Параметры:
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний
//
// Возвращаемое значение - массив показателей.
//
Функция ПоказателиПредопределенногоСпособаРасчета(СпособРасчета) Экспорт
	
	ТаблицаПоказателей = ТаблицаПоказателейПредопределенныхСпособовРасчета();
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(
		ТаблицаПоказателей.НайтиСтроки(Новый Структура("СпособРасчета", СпособРасчета)), "Показатель");
	
КонецФункции

// Сообщает о показателях используемых при расчете предопределенным способом.
//
// Возвращаемое значение - таблица значений с колонками: 
//	- СпособРасчета, 
//	- Показатель
//
Функция ТаблицаПоказателейПредопределенныхСпособовРасчета() Экспорт
		
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("СпособРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаНачислений,ПеречислениеСсылка.СпособыРасчетаУдержаний"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	
	// Показатели предопределенных способов расчета.
	ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей);

	Возврат ТаблицаПоказателей;
	
КонецФункции

// Заполнение сведений о показателях, используемых при расчете результата предопределенным способом.
//
// Параметры:
//	- ТаблицаПоказателей - таблица значений с колонками
//		СпособРасчета.
//		Показатель
//
Процедура ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей) Экспорт
	
	// Показатели предопределенных способов расчета подсистемы «Расчет зарплаты».
	
	// Доплата до среднего заработка.
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокОбщий");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	
	// Доплата за дни болезни (до среднего заработка ФСС).
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентДоплатыЗаДниНетрудоспособности");
	
	// Доплата до сохраняемого денежного содержания за дни болезни
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СохраняемоеДенежноеСодержание");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексацииСохраняемогоДенежногоСодержания");
	
	// Индексация
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Индексация;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПрожиточныйМинимум");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Индексация;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КоэффициентИндексации");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Индексация;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Индексация;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Индексация;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах");

	// Доплата до МЗП
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах");

	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях");
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	НоваяСтрока.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП;
	НоваяСтрока.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах");

	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьПоказателиРасчетаПособий(ТаблицаПоказателей);
	
	ИсполнительныеЛисты.ЗаполнитьПоказателиРасчетаИсполнительногоЛиста(ТаблицаПоказателей);
	
	ПростоиСотрудников.ЗаполнитьПоказателиРасчетаПростоевСотрудников(ТаблицаПоказателей);

	// Собираем показатели предопределенных способов расчета по подсистемам.
	РасчетЗарплатыРасширенныйПереопределяемый.ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей);
	
	// Не все псевдопредопределенные показатели существуют безусловно, 
	// не найденные показатели нужно удалить.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПоказателей Из ТаблицаПоказателей Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказателей.Показатель) Тогда
			УдаляемыеСтроки.Добавить(СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПоказателей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаменитьЗначениеИдентификатораВФормулеРасчета(Идентификатор, ПрежнийИдентификатор, ПрежняяФормула) Экспорт
	
	Формула = "";
	ИдентификаторыПоказателей = ИдентификаторыПоказателейФормулы(ПрежняяФормула);
	
	РазмерТекста = СтрДлина(ПрежняяФормула);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(ПрежняяФормула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слово = Сред(ПрежняяФормула, НачалоСлова, Позиция - НачалоСлова);
				Формула = Формула + ?(ИдентификаторыПоказателей.Найти(Слово) <> Неопределено И Слово = ПрежнийИдентификатор, Идентификатор, Слово);
			КонецЕсли;
			Формула = Формула + Сред(ПрежняяФормула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(ПрежняяФормула, НачалоСлова, Позиция - НачалоСлова);
		Формула = Формула + ?(ИдентификаторыПоказателей.Найти(Слово) <> Неопределено И Слово = ПрежнийИдентификатор, Идентификатор, Слово);
	КонецЕсли;
	
	Возврат Формула;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Работа с видами расчетов

// Расчет вторичных данных о показателях.
// Выполняется перед записью вида расчета.
//
// Параметры:
// - ВидРасчетаОбъект - записываемый вид расчета.
//
Процедура ЗаполнитьИнформациюОПоказателяхВидаРасчета(ВидРасчетаОбъект) Экспорт
	
	// Промежуточную структуру используем из-за неодинаковой структуры разных планов видов расчета.
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("КоличествоПостоянныхПоказателей", 0);
	ЗначенияРеквизитов.Вставить("КоличествоПоказателейИспользуемыхПриРасчете", 0);
	ЗначенияРеквизитов.Вставить("КоличествоОтображаемыхПоказателей", 0);
	ЗначенияРеквизитов.Вставить("ТребуетсяРасчетБазы", Ложь);
	ЗначенияРеквизитов.Вставить("ТребуетсяРасчетБазыСтраховыхВзносов", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользуетСдельныйЗаработок", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользуетСреднийЗаработокОбщий", Ложь);
	
	// Определяем основной показатель - единственный показатель, не рассчитываемый автоматически.
	МассивПоказателей = ОбщегоНазначения.ВыгрузитьКолонку(ВидРасчетаОбъект.Показатели, "Показатель");
	СведенияОПоказателях = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(МассивПоказателей);
	
	СтрокиПоказателей = Новый Массив;
	Для Каждого СтрокаПоказателя Из ВидРасчетаОбъект.Показатели Цикл
		// Для начала все строки не основные.
		СтрокаПоказателя.ОсновнойПоказатель = Ложь;
		// Получаем сведения о показателе.
		СведенияОПоказателе = СведенияОПоказателях[СтрокаПоказателя.Показатель];
		Если СведенияОПоказателе <> Неопределено Тогда
			// Собираем не автоматически рассчитываемые показатели.
			Если Не СведенияОПоказателе.ЗначениеРассчитываетсяАвтоматически 
				И СведенияОПоказателе.НазначениеПоказателя = Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника Тогда
				СтрокиПоказателей.Добавить(СтрокаПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СтрокиПоказателей.Количество() > 0 Тогда
		// Если не рассчитываемый показатель единственный, то он и будет основным.
		Если СтрокиПоказателей.Количество() = 1 Тогда
			СтрокиПоказателей[0].ОсновнойПоказатель = Истина;
		Иначе
			// ..Если нет, выберем первый, который запрашивается при вводе.
			ОсновнойПоказатель = Неопределено;
			Для Каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
				Если СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
					СтрокаПоказателя.ОсновнойПоказатель = Истина;
					ОсновнойПоказатель = СтрокаПоказателя.Показатель;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// Если ни один не запрашивается, то назначаем основным просто первый по порядку.
			Если ОсновнойПоказатель = Неопределено Тогда
				СтрокиПоказателей[0].ОсновнойПоказатель = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Упорядочивание в запросе важно потому что оно фактически предъявляется 
	// пользователю в виде последовательности колонок с показателями в документах редактирования начислений.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Показатели.Показатель,
	|	Показатели.ИспользоватьПриРасчете
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Показатели.Показатель,
	|	Показатели.ИспользоватьПриРасчете,
	|	ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления,
	|	ВЫБОР
	|		КОГДА ПоказателиРасчетаЗарплаты.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
	|				И НЕ ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически
	|				И ПоказателиРасчетаЗарплаты.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПостоянныйПоказатель
	|ИЗ
	|	ВТПоказатели КАК Показатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	|		ПО (ПоказателиРасчетаЗарплаты.Ссылка = Показатели.Показатель)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиРасчетаЗарплаты.ОтображатьВДокументахНачисления Убыв,
	|	ПоказателиРасчетаЗарплаты.ЗначениеРассчитываетсяАвтоматически,
	|	ПоказателиРасчетаЗарплаты.СпособПримененияЗначений.Порядок,
	|	ПоказателиРасчетаЗарплаты.Наименование");
	
	Запрос.УстановитьПараметр("Показатели", ВидРасчетаОбъект.Показатели);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомераПоказателей = Новый Соответствие();
	НомерСтроки = 0;
	
	ПоказателиОбщегоСреднегоЗаработка = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиОбщегоСреднегоЗаработка();
	
	Пока Выборка.Следующий() Цикл
		// Подсчет показателей разных видов.
		Если Выборка.ИспользоватьПриРасчете = Истина Тогда
			ЗначенияРеквизитов.КоличествоПоказателейИспользуемыхПриРасчете = ЗначенияРеквизитов.КоличествоПоказателейИспользуемыхПриРасчете + 1;
		КонецЕсли;
		Если Выборка.ПостоянныйПоказатель = Истина Тогда
			ЗначенияРеквизитов.КоличествоПостоянныхПоказателей = ЗначенияРеквизитов.КоличествоПостоянныхПоказателей + 1;
		КонецЕсли;
		Если Выборка.ОтображатьВДокументахНачисления = Истина И Выборка.ИспользоватьПриРасчете = Истина Тогда
			ЗначенияРеквизитов.КоличествоОтображаемыхПоказателей = ЗначенияРеквизитов.КоличествоОтображаемыхПоказателей + 1;
		КонецЕсли;
		// Если встречаются показатели:
		// - Сдельный заработок
		Если Выборка.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок") Тогда 
			ЗначенияРеквизитов.ИспользуетСдельныйЗаработок = Истина;
		КонецЕсли;
		// - Средний заработок общий
		Если ПоказателиОбщегоСреднегоЗаработка.Найти(Выборка.Показатель) <> Неопределено Тогда 
			ЗначенияРеквизитов.ИспользуетСреднийЗаработокОбщий = Истина;
		КонецЕсли;
		// - Расчет базы
		Если Выборка.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза") Тогда 
			ЗначенияРеквизитов.ТребуетсяРасчетБазы = Истина;
		КонецЕсли;
		Если Выборка.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБазаСтраховыеВзносы") Тогда 
			ЗначенияРеквизитов.ТребуетсяРасчетБазыСтраховыхВзносов = Истина;
		КонецЕсли;
		НомераПоказателей[Выборка.Показатель] = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Сортировать таблицу с показателями.
	Для Позиция = 1 По ВидРасчетаОбъект.Показатели.Количество() - 1 Цикл
		ПозицияВнутр = Позиция;
		Пока ПозицияВнутр > 0 Цикл
			Если НомераПоказателей[ВидРасчетаОбъект.Показатели[ПозицияВнутр].Показатель] < НомераПоказателей[ВидРасчетаОбъект.Показатели[ПозицияВнутр - 1].Показатель] Тогда
				// меняем местами
				ВидРасчетаОбъект.Показатели.Сдвинуть(ПозицияВнутр, -1);
			КонецЕсли;
			ПозицияВнутр = ПозицияВнутр - 1;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, ЗначенияРеквизитов);
	
	// Эти значения могут сохранятся среди повторно используемых значений.
	ОбновитьПовторноИспользуемыеЗначения();
		
КонецПроцедуры

// Расчет вторичных данных о начислении на основании написанной формулы 
// или выбранного способа расчета.
// Нужно выполнять перед записью начисления.
Процедура ЗаполнитьИнформациюОбУчетеВремени(ВидРасчетаОбъект) Экспорт
	
	ТребуетсяРасчетВремени = Ложь;
	ТребуетсяРасчетНормыВремени = Ложь;
	ТребуетсяРасчетКалендарныхДней = Ложь;
	ТребуетсяРасчетКалендарныхДнейБезПраздников = Ложь;
	ТребуетсяРасчетСверхурочных = Ложь;
	ТребуетсяРасчетОтработаноДнейВсего = Ложь;
	ТребуетсяРасчетОтработаноЧасовВсего = Ложь;
	УчетВремениВЧасах = Ложь;
	УчетВремениВДняхЧасах = Ложь;
	ТребуетсяРасчетБазы = Ложь;
	
	Для Каждого СтрокаПоказателей Из ВидРасчетаОбъект.Показатели Цикл
		Показатель = СтрокаПоказателей.Показатель;
		Если Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах") Тогда
			ТребуетсяРасчетВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней")  Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетОтработаноДнейВсего = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов")  Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетОтработаноЧасовВсего = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочно") 
			Или Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноСверхурочноВПределах2Часов") Тогда
			ТребуетсяРасчетВремени = Истина;
			ТребуетсяРасчетСверхурочных = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях") Тогда
			ТребуетсяРасчетВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДняхЧасах") Тогда
			ТребуетсяРасчетВремени = Истина;
			УчетВремениВДняхЧасах = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДнейЧасовВыходногоПособия") Тогда
			УчетВремениВДняхЧасах = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни") Тогда
			ТребуетсяРасчетКалендарныхДней = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниБезПраздников") Тогда
			ТребуетсяРасчетКалендарныхДнейБезПраздников = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса") Тогда
			ТребуетсяРасчетНормыВремени = Истина;
		ИначеЕсли Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза") Тогда
			ТребуетсяРасчетБазы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УчетВремениВЧасах = НачислениеРассчитываетсяПоЧасам(ВидРасчетаОбъект);
	
	// Использование периода заполняем по следующим правилам.
	// 1. БазовыйПериод - применяется только в том случае, если начисление использует расчет базы, 
	// но при этом его базовый период НЕ совпадает с периодом действия.
	// 2. НеИспользовать - применяется, если начисление выполняется в целом за месяц, 
	// т.е. не использует ни расчетную базу за текущий месяц, ни показатели учета времени.
	// 3. ПериодДействия - во всех прочих случаях.
	
	Если ТребуетсяРасчетБазы И ВидРасчетаОбъект.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод;
	Иначе
		Если НачислениеВыполняетсяВЦеломЗаМесяц(ВидРасчетаОбъект) Тогда
			ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать;
		Иначе
			ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия;
		КонецЕсли;
	КонецЕсли;
	
	ПериодДействияБазовый = Ложь;
	Если ТребуетсяРасчетБазы И ВидРасчетаОбъект.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		ПериодДействияБазовый = Истина;
		Если ПланыВидовРасчета.Начисления.КатегорииНадбавокПоБазе().Найти(ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
			// Такие надбавки должны вытесняться отклонениями для корректного включения в базу удержаний, 
			// но при этом включать в базу все начисления, выполненные даже в период отклонений.
			// Например, оплату праздничных в период командировки.
			ПериодДействияБазовый = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет времени для неявки нужен, чтобы посчитать время целодневной неявки,
	// а также для того, чтобы это время можно было правильно отобразить в табеле учета рабочего времени.
	КатегорииТребуетсяРасчетВремени = Новый Массив;
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НеявкаПоНевыясненнымПричинам);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прогул);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Отгул);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	КатегорииТребуетсяРасчетВремени.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	Если Не ТребуетсяРасчетВремени 
		И КатегорииТребуетсяРасчетВремени.Найти(ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено Тогда
		ТребуетсяРасчетВремени = Истина;
	КонецЕсли;
	
	ВидРасчетаОбъект.ТребуетсяРасчетВремени = ТребуетсяРасчетВремени;
	ВидРасчетаОбъект.ТребуетсяРасчетНормыВремени = ТребуетсяРасчетНормыВремени;
	ВидРасчетаОбъект.ТребуетсяРасчетКалендарныхДней = ТребуетсяРасчетКалендарныхДней;
	ВидРасчетаОбъект.ТребуетсяРасчетКалендарныхДнейБезПраздников = ТребуетсяРасчетКалендарныхДнейБезПраздников;
	ВидРасчетаОбъект.ТребуетсяРасчетСверхурочных = ТребуетсяРасчетСверхурочных;
	ВидРасчетаОбъект.ТребуетсяРасчетОтработаноДнейВсего = ТребуетсяРасчетОтработаноДнейВсего;
	ВидРасчетаОбъект.ТребуетсяРасчетОтработаноЧасовВсего = ТребуетсяРасчетОтработаноЧасовВсего;
	ВидРасчетаОбъект.УчетВремениВЧасах = УчетВремениВЧасах;
	ВидРасчетаОбъект.УчетВремениВДняхЧасах = УчетВремениВДняхЧасах;
	ВидРасчетаОбъект.ИспользованиеПериода = ИспользованиеПериода;
	ВидРасчетаОбъект.ПериодДействияБазовый = ПериодДействияБазовый; 
		
	// Заполняются реквизиты ЗачетОтработанногоВремени и ЗачетНормыВремени.
	ВидВремени = ВидРасчетаОбъект.ВидВремени;	
	
	ВидРасчетаОбъект.ЗачетНормыВремени = ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетНормыВремениНачисления(ВидРасчетаОбъект);
	ВидРасчетаОбъект.ЗачетОтработанногоВремени = ЗарплатаКадрыРасширенныйКлиентСервер.ЗачетОтработанногоВремени(ВидВремени);
	
КонецПроцедуры

// Заполнение реквизита формы, содержащего список зависимых видов расчета.
//
// Параметры: 
//		Ссылка
//		СписокВидовРасчета - таблица значений с колонкой ВидРасчета.
//
Процедура ЗаполнитьСписокЗависимыхВидовРасчета(Ссылка, СписокВидовРасчета, ИмяТабличнойЧасти, ЗапросПоУдержаниям = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Зависимые.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК Зависимые
	|ГДЕ
	|	Зависимые.ВидРасчета = &ВидРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Зависимые.Ссылка.Наименование";
	
	// замена для удержаний
	Если ЗапросПоУдержаниям Или ТипЗнч(Ссылка) = Тип("ПланВидовРасчетаСсылка.Удержания") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПланВидовРасчета.Начисления", "ПланВидовРасчета.Удержания");
	КонецЕсли;
	// замена для вытесняющих
	Если ИмяТабличнойЧасти = "ВытесняющиеВидыРасчета" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", "ВытесняющиеВидыРасчета");
	КонецЕсли;
	// замена для базовых
	Если ИмяТабличнойЧасти = "БазовыеВидыРасчета" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", "БазовыеВидыРасчета");
		Если Не ЗапросПоУдержаниям Тогда 
			ТекстДоплатаДоСреднего = "Зависимые.Ссылка КАК ВидРасчета,
									|	ВЫБОР
									|		КОГДА Зависимые.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка)
									|			ТОГДА ИСТИНА
									|		ИНАЧЕ ЛОЖЬ
									|	КОНЕЦ КАК ДоплатаДоСреднего";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Зависимые.Ссылка КАК ВидРасчета", ТекстДоплатаДоСреднего);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидРасчета", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВидовРасчета.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокВидовРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Вторичные данные об учете среднего заработка.
//
Процедура ЗаполнитьИнформациюОбУчетеСреднегоЗаработка(ВидРасчетаОбъект) Экспорт
	
	// Анализируем для общего среднего заработка.
	ВходитВУчетСреднего = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ВидРасчетаОбъект.СреднийЗаработокОбщий Цикл
		Если СтрокаТабличнойЧасти.Значение <> Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать Тогда
			ВходитВУчетСреднего = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ВидРасчетаОбъект.ВходитВУчетОбщегоСреднегоЗаработка = ВходитВУчетСреднего;
	
	// Анализируем для среднего заработка ФСС.
	ВходитВУчетСреднего = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ВидРасчетаОбъект.СреднийЗаработокФСС Цикл
		Если СтрокаТабличнойЧасти.Значение <> Перечисления.УчетНачисленийВСреднемЗаработкеФСС.НеВключать Тогда
			ВходитВУчетСреднего = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ВидРасчетаОбъект.ВходитВУчетСреднегоЗаработкаФСС = ВходитВУчетСреднего;
	
КонецПроцедуры

Функция РазрешенВводНесколькихПлановыхНачислений(КатегорияНачисления, СпособВыполнения) Экспорт 
	
	Если КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки
		Или КатегорияНачисления = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение Тогда 
		Возврат Истина;
	КонецЕсли;
	
	КатегорииНачислений = КатегорииНачисленийРазрешеноРедактированиеПризнакаВводаНесколькихНачислений();
	Если КатегорииНачислений.Найти(КатегорияНачисления) <> Неопределено  
		И (СпособВыполнения = Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете
		Или СпособВыполнения = Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете) Тогда 
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

Функция КатегорииНачисленийРазрешеноРедактированиеПризнакаВводаНесколькихНачислений() Экспорт 
	
	КатегорииНачислений = Новый Массив;
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	КатегорииНачислений.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	
	Возврат КатегорииНачислений;
	
КонецФункции

Процедура ЗаполнитьТаблицуПоказателейВидаРасчета(ВидРасчетаОбъект) Экспорт
	
	// Настройка табличной части показателей.
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(ВидРасчетаОбъект.СпособРасчета) Тогда
		ПоказателиФормулы = ЗарплатаКадрыРасширенный.ПоказателиФормулы(ВидРасчетаОбъект.ФормулаРасчета);
	Иначе
		ПоказателиФормулы = ПоказателиПредопределенногоСпособаРасчета(ВидРасчетаОбъект.СпособРасчета);
	КонецЕсли;
	
	СведенияОПоказателях = ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты(ПоказателиФормулы);
	ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПоказателиПоФормуле(СведенияОПоказателях, ВидРасчетаОбъект.Показатели);
    ЗапрашиваемыеПоказатели = ЗарплатаКадрыРасширенный.ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(ВидРасчетаОбъект.Ссылка, ПоказателиФормулы);
	ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьОтметкуЗапрашиватьПриВводе(ЗапрашиваемыеПоказатели, ВидРасчетаОбъект.Показатели);
	
КонецПроцедуры

Функция СсылкиНачисленийУдержанийНачальнойНастройкиПрограммы() Экспорт

	СсылкиНачисленийУдержаний = Новый Структура; 
	СсылкиНачисленийУдержаний.Вставить("ГодоваяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ГодоваяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("КвартальнаяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("КвартальнаяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазоваяПремияСуммой", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазоваяПремияПроцентом", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаВыполнениеПлана", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаВыручкуОтРеализации", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаДнейСдачиКрови", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаДнейСдачиКровиВнутрисменная", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("РазовоеНачисление", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("СдельныйЗаработок", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоДням", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("УдержаниеВСчетВозмещенияУщерба", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВредность", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛет", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОплатаТрудаВНатуральнойФорме", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ДолжностнойОкладГосслужащего", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладЗаКлассныйЧин", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕдиноеДенежноеВознаграждение", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаКОкладуЗаКлассныйЧин", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячнаяКвалификационнаяНадбавка", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛетГосслужащим", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияСлужбыГосслужащих", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСекретность", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕжемесячноеДенежноеПоощрение", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаВыполнениеОсобоВажныхИСложныхЗаданий", Неопределено); 
	СсылкиНачисленийУдержаний.Вставить("ЕдиновременнаяВыплатаКОтпускуГосслужащего", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ЕдиновременнаяВыплатаКОтпуску", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("МатериальнаяПомощьКОтпускуГосслужащего", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ОкладПоВоинскойДолжности", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоВоинскомуЗванию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыслугуЛетНаВоеннойСлужбе", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаКласснуюКвалификацию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияВоеннойСлужбы", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ДолжностнойОкладСотрудникаДД", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ОкладПоСпециальномуЗванию", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСтажСлужбы", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаКвалификационноеЗвание", Неопределено); 
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаОсобыеУсловияСлужбы", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаСекретностьДД", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("НадбавкаЗаВыполнениеЗадачСвязанныхСРиском", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностей", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ПремияЗаДобросовестноеВыполнениеСлужебныхОбязанностейСотрудникам", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ОплатаПреподавателейПоОкладу", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаКлассноеРуководство", Неопределено);
	СсылкиНачисленийУдержаний.Вставить("ДоплатаЗаПроверкуТетрадей", Неопределено);
	
	СсылкиНачисленийУдержаний.Вставить("ДоплатаПоРезультатамОценкиЭффективности", Неопределено);
	
	Возврат СсылкиНачисленийУдержаний;

КонецФункции 

Функция ОписаниеПараметровПланаВидовРасчета() Экспорт

	// ПараметрыПоказателей
	ПараметрыПоказателей = Новый Структура;
	ПараметрыПоказателей.Вставить("ОкладТарифТочность", 0);
	ПараметрыПоказателей.Вставить("ОкладТарифЧасовойТочность", 3);
	
	// ГодоваяПремия
	ПараметрыГодовойПремии = Новый Структура; 
	ПараметрыГодовойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыГодовойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыГодовойПремии.Вставить("НачисляетсяВМесяцах", Ложь);
	ПараметрыГодовойПремии.Вставить("НомерМесяцаНачисленияГодовойПремии", 0);
	
	ПараметрыКвартальнойПремии = Новый Структура; 
	ПараметрыКвартальнойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыКвартальнойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НачисляетсяВМесяцах", Ложь);
	ПараметрыКвартальнойПремии.Вставить("НомераМесяцевНачисленияКвартальнойПремии", Новый Массив);
	
	ПараметрыЕжемесячнойПремии = Новый Структура; 
	ПараметрыЕжемесячнойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыЕжемесячнойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыЕжемесячнойПремии.Вставить("БазовыйПериодПрошлыйМесяц",   Ложь);

	ПараметрыРазовойПремии = Новый Структура;
	ПараметрыРазовойПремии.Вставить("ИспользоватьПремиюСуммой",    Ложь);
	ПараметрыРазовойПремии.Вставить("ИспользоватьПремиюПроцентом", Ложь);
	ПараметрыРазовойПремии.Вставить("НачисляетсяПоЗначениюПоказателей", Ложь);
	ПараметрыРазовойПремии.Вставить("НачисляетсяОтдельнымДокументом", Ложь);
	ПараметрыРазовойПремии.Вставить("ЧислоМесяцевПериодаРазовойПремии",   0);
	
	ПараметрыНадбавок = Новый Структура; 
	ПараметрыНадбавок.Вставить("ИспользоватьНадбавкуЗаВредность", Ложь);
	ПараметрыНадбавок.Вставить("ИспользоватьНадбавкуЗаВыслугуЛет", Ложь);
	ПараметрыНадбавок.Вставить("НадбавкиПроцентом", Новый Массив);
	ПараметрыНадбавок.Вставить("ИдентификаторыНадбавокПроцентом", Новый Массив);
	ПараметрыНадбавок.Вставить("НадбавкиСуммой", Новый Массив);
	ПараметрыНадбавок.Вставить("ИдентификаторыНадбавокСуммой", Новый Массив);
	
	ПараметрыНатуральныхДоходов = Новый Структура; 
	ПараметрыНатуральныхДоходов.Вставить("ОплатаТрудаВНатуральнойФорме", Ложь);
	ПараметрыНатуральныхДоходов.Вставить("НатуральныеДоходы", Новый Массив);
	
	ПараметрыДополнительныеОтпуска = Новый Структура; 
	ПараметрыДополнительныеОтпуска.Вставить("ИспользоватьДополнительныеОтпуска", Ложь);
	ПараметрыДополнительныеОтпуска.Вставить("ДополнительныеОтпуска", Новый ТаблицаЗначений);
	
	ПараметрыКомпенсационныеВыплаты = Новый ТаблицаЗначений;
	
	СсылкиНачисленийУдержаний = СсылкиНачисленийУдержанийНачальнойНастройкиПрограммы();
	СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты = Справочники.ВидыДокументовВводДанныхДляРасчетаЗарплаты.СсылкиВидыДокументовВводДанныхДляРасчетаЗарплатыНачальнойНастройкиПрограммы();
	СсылкиПоказателиРасчетаЗарплаты = Справочники.ПоказателиРасчетаЗарплаты.СсылкиПоказателиРасчетаЗарплатыНачальнойНастройкиПрограммы();
	
	Параметры = Новый Структура;
	Параметры.Вставить("НачальнаяНастройкаПрограммы", Ложь);
	Параметры.Вставить("ПараметрыПоказателей", ПараметрыПоказателей);
	Параметры.Вставить("ГодоваяПремия", ПараметрыГодовойПремии);
	Параметры.Вставить("КвартальнаяПремия", ПараметрыКвартальнойПремии);
	Параметры.Вставить("ЕжемесячнаяПремия", ПараметрыЕжемесячнойПремии);
	Параметры.Вставить("РазоваяПремия", ПараметрыРазовойПремии);
	Параметры.Вставить("Надбавки", ПараметрыНадбавок);
	Параметры.Вставить("КомпенсационныеВыплаты", ПараметрыКомпенсационныеВыплаты);
	Параметры.Вставить("НатуральныеДоходы", ПараметрыНатуральныхДоходов);
	Параметры.Вставить("ДополнительныеОтпуска", ПараметрыДополнительныеОтпуска);
	Параметры.Вставить("ИспользоватьДоплатуЗаВыполнениеПлана", Ложь);
	Параметры.Вставить("ИспользоватьДоплатуЗаВыручкуОтРеализации", Ложь);
	Параметры.Вставить("ИспользоватьОплатуДнейСдачиКрови", Ложь);
	Параметры.Вставить("ИспользоватьОплатуДнейСдачиКровиВнутрисменных", Ложь);
	Параметры.Вставить("ИспользоватьРазовоеНачисление", Ложь);
	Параметры.Вставить("ИспользоватьПодневнуюОплатуТруда", Истина);
	Параметры.Вставить("КоличествоОкладовДляМатериальнойПомощи", 1);
	Параметры.Вставить("КоличествоОкладовДляВыплатыКОтпуску", 2);  
	Параметры.Вставить("КоличествоОкладовДляВыплатыКОтпускуГосслужащего", 2);
	Параметры.Вставить("КоличествоОкладовДляМатериальнойПомощиГосслужащего", 2);
	Параметры.Вставить("СсылкиНачисленийУдержаний", СсылкиНачисленийУдержаний);
	Параметры.Вставить("СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты", СсылкиВидыДокументовВводДанныхДляРасчетаЗарплаты);
	Параметры.Вставить("СсылкиПоказателиРасчетаЗарплаты", СсылкиПоказателиРасчетаЗарплаты);
	Параметры.Вставить("ИспользоватьУдержаниеВСчетВозмещенияУщерба", Ложь);
	Параметры.Вставить("ВыплачиваетсяЕжемесячнаяКвалификационнаяНадбавка", Ложь);
	Параметры.Вставить("ВыплачиваетсяЕдиноеДенежноеВознаграждение", Ложь);
	
	Возврат Параметры;

КонецФункции 

Процедура ПроверитьНаличиеБазовыхВидовРасчета(ВидРасчетаОбъект, Отказ) Экспорт
	
	// Проверяем, что если в формуле присутствует показатель Расчетная база, список базовых начислений не пуст.
	
	РасчетнаяБаза = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза");
	
	Если ВидРасчетаОбъект.Показатели.Найти(РасчетнаяБаза, "Показатель") <> Неопределено
		И ВидРасчетаОбъект.БазовыеВидыРасчета.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не заполнен список базовых начислений.';uk='Не заповнений список базових нарахувань.'"), , "БазовыеВидыРасчета", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Дозаполняет ведущие и вытесняющие начисления и расставляет очередность расчета 
// для переданных начислений.
// Вносит изменения в виды начислений, которые зависят от переданных.
// Параметры:
//	ПакетВидовРасчета - соответствие объектов типа ПланВидовРасчетаОбъект.Начисления, 
//		которые необходимо записать, ключом является ссылка
// ВНИМАНИЕ.
//  Все объекты ПакетВидовРасчета должны иметь ссылки, т.е. должны быть 
//  либо уже записаны, либо им должна быть установлена ссылка нового объекта.
//
Процедура ДозаполнитьВидыРасчета(ПакетВидовРасчета) Экспорт
	
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка);
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС);
	ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(ПакетВидовРасчета, Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни);
	
	// Корректируем список ведущих по базовым и вытесняющим начислениям.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		ВидРасчета = КлючИЗначение.Значение;
		ВедущиеНачисления = Новый Соответствие;
		// Собираем уже имеющиеся ведущие начисления.
		Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
			ВедущиеНачисления.Вставить(Строка.ВидРасчета);
		КонецЦикла;
		// Если расчетная база определяется за текущий период, 
		// то базовые виды расчета являются также ведущими.
		Если РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ВидРасчета.Показатели, "РасчетнаяБаза") Тогда
			Для Каждого Строка Из ВидРасчета.БазовыеВидыРасчета Цикл
				ВедущиеНачисления.Вставить(Строка.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
		// Удаляем из ведущих ссылку на самого себя, если таковая имеется.
		ВедущиеНачисления.Удалить(КлючИЗначение.Ключ);
		// Полученным соответствием перезаписываем список ведущих.
		ВидРасчета.ВедущиеВидыРасчета.Очистить();
		Для Каждого КлючИЗначение Из ВедущиеНачисления Цикл
			ВидРасчета.ВедущиеВидыРасчета.Добавить().ВидРасчета = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРасчетов.Наименование КАК Наименование,
	|	ВидыРасчетов.Ссылка КАК ВидРасчета,
	|	ВидыРасчетов.ОчередностьРасчета КАК ОчередностьПрежняя,
	|	СписокВедущих.ВидРасчета КАК ВедущийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ВидыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК СписокВедущих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетовДляПроверки
	|			ПО СписокВедущих.ВидРасчета = ВидыРасчетовДляПроверки.Ссылка
	|		ПО (СписокВедущих.Ссылка = ВидыРасчетов.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидыРасчетов = Новый Соответствие;
	// Информация обо всех начислениях.
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаРасчета = ВидыРасчетов[Выборка.ВидРасчета];
		Если ОписаниеВидаРасчета = НеОпределено Тогда
			ОписаниеВидаРасчета = ОписаниеВидаРасчета();
			ОписаниеВидаРасчета.ОчередностьПрежняя = Выборка.ОчередностьПрежняя;
			ОписаниеВидаРасчета.Наименование = Выборка.Наименование;
			ВидыРасчетов[Выборка.ВидРасчета] = ОписаниеВидаРасчета;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВедущийВидРасчета) Тогда
			ОписаниеВидаРасчета.ВедущиеПрежние.Добавить(Выборка.ВедущийВидРасчета);
			ОписаниеВидаРасчета.Ведущие.Добавить(Выборка.ВедущийВидРасчета);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРасчетов.Ссылка КАК ВидРасчета,
	|	СписокВытесняющих.ВидРасчета КАК ВытесняющийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ВидыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК СписокВытесняющих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчетовДляПроверки
	|			ПО СписокВытесняющих.ВидРасчета = ВидыРасчетовДляПроверки.Ссылка
	|		ПО (СписокВытесняющих.Ссылка = ВидыРасчетов.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Добавим информацию о вытесняющих видах расчетов.
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаРасчета = ВидыРасчетов[Выборка.ВидРасчета];
		Если ЗначениеЗаполнено(Выборка.ВытесняющийВидРасчета) Тогда
			ОписаниеВидаРасчета.ВытесняющиеПрежние.Добавить(Выборка.ВытесняющийВидРасчета);
			ОписаниеВидаРасчета.Вытесняющие.Добавить(Выборка.ВытесняющийВидРасчета);
		КонецЕсли;
	КонецЦикла;
	
	ЗаказанныеВидыРасчетаСсылки = Новый Массив;
	// Добавим информацию о "заказанных" видах расчета.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		ВидРасчета = КлючИЗначение.Значение;
		Если ВидРасчета.Ссылка.Пустая() Тогда
			Ссылка = ВидРасчета.ПолучитьСсылкуНового();
			ОписаниеВидаРасчета = ОписаниеВидаРасчета();
			ОписаниеВидаРасчета.ОчередностьПрежняя = ВидРасчета.ОчередностьРасчета;
			ОписаниеВидаРасчета.Заказанный = Истина;
			ОписаниеВидаРасчета.Наименование = ВидРасчета.Наименование;
			ОписаниеВидаРасчета.Объект = ВидРасчета;
			ВидыРасчетов[Ссылка] = ОписаниеВидаРасчета;
			Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Ведущие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
			Для Каждого Строка Из ВидРасчета.ВытесняющиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Вытесняющие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
		Иначе
			Ссылка = ВидРасчета.Ссылка;
			ОписаниеВидаРасчета = ВидыРасчетов[Ссылка];
			ОписаниеВидаРасчета.Ведущие.Очистить();
			ОписаниеВидаРасчета.Вытесняющие.Очистить();
			ОписаниеВидаРасчета.Заказанный = Истина;
			ОписаниеВидаРасчета.Наименование = ВидРасчета.Наименование;
			ОписаниеВидаРасчета.Объект = ВидРасчета;
			Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Ведущие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
			Для Каждого Строка Из ВидРасчета.ВытесняющиеВидыРасчета Цикл
				Если ВидРасчета.Ссылка <> Строка.ВидРасчета Тогда 
					ОписаниеВидаРасчета.Вытесняющие.Добавить(Строка.ВидРасчета);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаказанныеВидыРасчетаСсылки.Добавить(Ссылка);
	КонецЦикла;
	
	Для Каждого ВидРасчетаСсылка Из ЗаказанныеВидыРасчетаСсылки Цикл
		ОбработанныеВидыРасчета = Новый Соответствие;
		ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, "Ведущие");
		ОбработанныеВидыРасчета = Новый Соответствие;
		ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, "Вытесняющие");
	КонецЦикла;
	
	ОчереднаяОчередность = 1;
	Пока Истина Цикл
		Обработано = Ложь;
		НачисленияОчереднойОчередности = Новый Массив;
		Для Каждого Элемент Из ВидыРасчетов Цикл
			ОписаниеВидаРасчета = Элемент.Значение;
			Если ОписаниеВидаРасчета.Очередность <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьВедущие = Ложь;
			Для Каждого ВедущийВидРасчета Из ОписаниеВидаРасчета.Ведущие Цикл
				ОписаниеВедущего = ВидыРасчетов[ВедущийВидРасчета];
				Если ОписаниеВедущего <> НеОпределено И ОписаниеВедущего.Очередность = 0 Тогда
					ЕстьВедущие = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьВедущие Тогда
				Продолжить;
			КонецЕсли;
			НачисленияОчереднойОчередности.Добавить(ОписаниеВидаРасчета);
			Обработано = Истина;
		КонецЦикла;
		Для Каждого ОписаниеВидаРасчета Из НачисленияОчереднойОчередности Цикл
			ОписаниеВидаРасчета.Очередность = ОчереднаяОчередность;
		КонецЦикла;
		// следующая...
		ОчереднаяОчередность = ОчереднаяОчередность + 1;
		Если Не Обработано Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверим все ли виды расчета обработаны.
	Для Каждого ОписаниеВидаРасчета Из ВидыРасчетов Цикл
		Если ОписаниеВидаРасчета.Значение.Очередность = 0 Тогда
			ВызватьИсключение НСтр("ru='Начисления не могут быть записаны при заданных настройках последовательности расчета.';uk='Нарахування не можуть бути записані при заданих настройках послідовності розрахунку.'");
		КонецЕсли;
	КонецЦикла;
	
	// Зафиксируем все объекты для которых изменилась очередность, состав вытесняющих или состав ведущих.
	Для Каждого Элемент Из ВидыРасчетов Цикл
		ОписаниеВидаРасчета = Элемент.Значение;
		Если ОписаниеВидаРасчета.Очередность <> ОписаниеВидаРасчета.ОчередностьПрежняя Или 
			ОписаниеВидаРасчета.Ведущие.Количество() <> ОписаниеВидаРасчета.ВедущиеПрежние.Количество() Или
			ОписаниеВидаРасчета.Вытесняющие.Количество() <> ОписаниеВидаРасчета.ВытесняющиеПрежние.Количество() Или 
			ОписаниеВидаРасчета.Заказанный Тогда
			Если ОписаниеВидаРасчета.Заказанный Тогда
				ИзменяемыйВидРасчета = ОписаниеВидаРасчета.Объект;
			Иначе
				ИзменяемыйВидРасчета = ПакетВидовРасчета[Элемент.Ключ];
				Если ИзменяемыйВидРасчета = НеОпределено Тогда
					ИзменяемыйВидРасчета = Элемент.Ключ.ПолучитьОбъект();
					ПакетВидовРасчета[Элемент.Ключ] = ИзменяемыйВидРасчета;
				КонецЕсли;
			КонецЕсли;
			ИзменяемыйВидРасчета.ОчередностьРасчета = ОписаниеВидаРасчета.Очередность;
			ИзменяемыйВидРасчета.ВедущиеВидыРасчета.Очистить();
			Для Каждого ВидРасчета Из ОписаниеВидаРасчета.Ведущие Цикл
				НоваяСтрока = ИзменяемыйВидРасчета.ВедущиеВидыРасчета.Добавить();
				НоваяСтрока.ВидРасчета = ВидРасчета;
			КонецЦикла;
			ИзменяемыйВидРасчета.ВытесняющиеВидыРасчета.Очистить();
			Для Каждого ВидРасчета Из ОписаниеВидаРасчета.Вытесняющие Цикл
				НоваяСтрока = ИзменяемыйВидРасчета.ВытесняющиеВидыРасчета.Добавить();
				НоваяСтрока.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает объекты-виды расчета.
// Предназначена для записи видов расчета, модифицированных в связи с изменениями 
// в том или ином начислении и зависящих от этих изменений.
// Параметры: 
//		ВидыРасчета - массив или соответствие, значения которого - объекты видов расчета.
//
Процедура ЗаписатьПакетВидовРасчета(ВидыРасчета, ОбновлятьНастройки = Истина) Экспорт
	
	Если ВидыРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВидыРасчета) = Тип("Соответствие") Тогда
		ВидыРасчетовМассив = Новый Массив;
		Для Каждого Элемент Из ВидыРасчета Цикл
			ВидыРасчетовМассив.Добавить(Элемент.Значение);
		КонецЦикла;
	Иначе
		ВидыРасчетовМассив = ВидыРасчета;
	КонецЕсли;
	
	Для Каждого ВидРасчета Из ВидыРасчетовМассив Цикл
		Попытка
			ВидРасчета.Заблокировать();
		Исключение
			ПредставлениеВидаРасчета = ?(ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаОбъект.Начисления"), НСтр("ru='начисление';uk='нарахування'"), НСтр("ru='удержание';uk='утримання'"));
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Требуется внести изменение в %2 «%1». 
                |В данный момент изменение невозможно, так как %2 редактируется другим пользователем или в другой форме программы'
                |;uk='Потрібно внести зміна в %2 «%1». 
                |У даний момент змінити неможливо, так як %2 редагується іншим користувачем або в іншій формі програми'"),
				ВидРасчета.Наименование, ПредставлениеВидаРасчета);
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		ВидРасчета.ОбменДанными.Загрузка = Истина;
		ВидРасчета.Записать();
	КонецЦикла;
	
	Если ОбновлятьНастройки Тогда
		РасчетЗарплатыРасширенный.ЗаполнитьНастройкиРасчетаЗарплаты();
		УчетСреднегоЗаработка.ЗаполнитьНастройкиУчетаСреднегоЗаработка();
		ЗарплатаКадрыРасширенный.УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка)
	Если ОбработанныеВидыРасчета[ВидРасчетаСсылка] <> НеОпределено Тогда
		Возврат;
	КонецЕсли;
	// Значение соответствия ОбработанныеВидыРасчета - список видов расчета уже использованных для дополнения списка.
	ОбработанныеВидыРасчета[ВидРасчетаСсылка] = Новый Соответствие; 
	
	ОписаниеВидаРасчета = ВидыРасчетов[ВидРасчетаСсылка];
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета) Тогда
		Возврат;
	КонецЕсли;
	ДополняемыйСписок = Новый Соответствие;
	СтекВидовРасчета = Новый Соответствие;
	ДополнитьСписокРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ОбработанныеВидыРасчета[ВидРасчетаСсылка]);
	Если ОписаниеВидаРасчета[ИмяДополняемогоСписка].Количество() < ДополняемыйСписок.Количество() Тогда
		// Если количество ведущих увеличилось - обновим их список...
		ОписаниеВидаРасчета[ИмяДополняемогоСписка].Очистить();
		Для Каждого Элемент Из ДополняемыйСписок Цикл
			ОписаниеВидаРасчета[ИмяДополняемогоСписка].Добавить(Элемент.Ключ);
		КонецЦикла;
		// ...И обработаем виды расчетов, которые зависят от ВидРасчетаСсылка.
		Для Каждого ЭлементСтруктуры Из ВидыРасчетов Цикл
			Если ЭлементСтруктуры.Значение[ИмяДополняемогоСписка].Найти(ВидРасчетаСсылка) <> НеОпределено Тогда
				ОбработатьВидРасчетаРекурсивно(ЭлементСтруктуры.Ключ, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОписаниеВидаРасчета.Заказанный Тогда
		// В любом случае обработаем виды расчетов, которые зависят от заказанного вида расчета.
		Для Каждого ЭлементСтруктуры Из ВидыРасчетов Цикл
			Если ЭлементСтруктуры.Значение[ИмяДополняемогоСписка].Найти(ВидРасчетаСсылка) <> НеОпределено Тогда
				ОбработатьВидРасчетаРекурсивно(ЭлементСтруктуры.Ключ, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокРекурсивно(ЗаказанныйВидРасчета, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ИспользованныеДляДополнения)
	Если ИспользованныеДляДополнения[ЗаказанныйВидРасчета] <> НеОпределено Тогда
		Возврат;
	КонецЕсли;
	ИспользованныеДляДополнения[ЗаказанныйВидРасчета] = 0;
	
	ОписаниеВидаРасчета = ВидыРасчетов[ЗаказанныйВидРасчета];
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета) Тогда
		Возврат;
	КонецЕсли;
	Если СтекВидовРасчета[ЗаказанныйВидРасчета] <> НеОпределено Тогда
		// рекурсия
		Если ИмяДополняемогоСписка = "Ведущие" Тогда
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Задана противоречивая последовательность расчета для начисления %1. Запись начислений в таком состоянии невозможна';uk='Задана суперечлива послідовність розрахунку для нарахування %1. Запис нарахувань в такому стані неможливий'"),
				ОписаниеВидаРасчета.Наименование);
		ИначеЕсли ИмяДополняемогоСписка = "Вытесняющие" Тогда
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Заданы противоречивые приоритеты расчета для начисления %1. Запись начислений в таком состоянии невозможна';uk='Задані суперечливі пріоритети розрахунку для нарахування %1. Запис нарахувань в такому стані неможливий'"),
				ОписаниеВидаРасчета.Наименование);
		КонецЕсли;
		ВызватьИсключение ТекстИсключенияЗаписи;
	КонецЕсли;
	СтекВидовРасчета[ЗаказанныйВидРасчета] = 0;
		
	Для Каждого ВедущийВР Из ОписаниеВидаРасчета[ИмяДополняемогоСписка] Цикл
		ДополняемыйСписок[ВедущийВР] = 0;
		Если ЗначениеЗаполнено(ВедущийВР) Тогда
			ДополнитьСписокРекурсивно(ВедущийВР, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ИспользованныеДляДополнения);
		КонецЕсли;
	КонецЦикла;
	СтекВидовРасчета.Удалить(ЗаказанныйВидРасчета);
		
КонецПроцедуры

Функция ОписаниеВидаРасчета()
	ОписаниеВидаРасчета = Новый Структура("ВедущиеПрежние,Ведущие,ОчередностьПрежняя,Очередность,ВытесняющиеПрежние,Вытесняющие,Заказанный,Наименование,Объект");
	ОписаниеВидаРасчета.ВедущиеПрежние = Новый Массив;
	ОписаниеВидаРасчета.Ведущие = Новый Массив;
	ОписаниеВидаРасчета.Очередность = 0;
	ОписаниеВидаРасчета.ВытесняющиеПрежние = Новый Массив;
	ОписаниеВидаРасчета.Вытесняющие = Новый Массив;
	ОписаниеВидаРасчета.Заказанный = Ложь;
	ОписаниеВидаРасчета.Наименование = "";
	ОписаниеВидаРасчета.Объект = НеОпределено;
	Возврат ОписаниеВидаРасчета;
	
КонецФункции

// Дополняет коллектор начислений в соответствии с правилом заполнения «техногенного» списка 
// базовых начислений доплаты до среднего заработка.
//
// Параметры:
//	КоллекторНачислений - соответствие начислений, предлагаемых к записи.
//	СпособРасчетаДоплатыДоСреднего - способ расчета «Доплата до среднего» или «Доплата до среднего ФСС».
//
Процедура ЗаполнитьСоставБазовыхНачисленийДоплатыДоСреднегоЗаработка(КоллекторНачислений, СпособРасчетаДоплатыДоСреднего)
	
	// Принимаем коллектор начислений и дополняем его при необходимости.
	// Причины, по которым может понадобиться что-то дозаписать:
	// - среди предложенных видов расчета, есть те, которые нужно ВКЛЮЧИТЬ в базу одной или нескольких доплат до среднего
	// - среди предложенных есть те, которые нужно ИСКЛЮЧИТЬ из базы одной или нескольких доплат до среднего.
	// Отдельно выполняем заполнение базовых начислений доплаты (доплат) до среднего, если они также встречаются среди
	// предложенных.
	
	// 1. Отбираем начисления коллектора, которые 
	// - учитываются при доплате до среднего заработка
	// - не учитываются при доплате
	// - являются доплатой до среднего заработка.
	УчитываютсяПриДоплатеДоСреднего = Новый Массив;
	НеУчитываютсяПриДоплатеДоСреднего = Новый Массив;
	ДоплатыДоСреднего = Новый Массив;
	Для Каждого КлючИЗначение Из КоллекторНачислений Цикл
		НачислениеСсылка = КлючИЗначение.Ключ;
		НачислениеОбъект = КлючИЗначение.Значение;
		Если НачислениеОбъект.СпособРасчета = СпособРасчетаДоплатыДоСреднего Тогда
			ДоплатыДоСреднего.Добавить(НачислениеСсылка);
		Иначе
			Если НачислениеУчитываетсяПриРасчетеДоплатыДоСреднегоЗаработка(НачислениеОбъект, СпособРасчетаДоплатыДоСреднего) Тогда
				УчитываютсяПриДоплатеДоСреднего.Добавить(НачислениеСсылка);
			Иначе
				НеУчитываютсяПриДоплатеДоСреднего.Добавить(НачислениеСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Составляем из полученных ссылок таблицу значений и помещаем ее во временную таблицу
	// ВТУчитываютсяПриДоплатеИзКоллектора.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчитываютсяПриДоплатеИзКоллектора.Начисление
	|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеИзКоллектора
	|ИЗ
	|	&УчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора";
	
	УчитываютсяПриДоплатеТаблица = Новый ТаблицаЗначений;
	УчитываютсяПриДоплатеТаблица.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(УчитываютсяПриДоплатеТаблица, УчитываютсяПриДоплатеДоСреднего, "Начисление");
	
	Запрос.УстановитьПараметр("УчитываютсяПриДоплатеИзКоллектора", УчитываютсяПриДоплатеТаблица);
	Запрос.УстановитьПараметр("СпособРасчетаДоплатыДоСреднего", СпособРасчетаДоплатыДоСреднего);
	Запрос.Выполнить();
	
	// 2. Если в коллекторе есть доплаты до среднего, дополняем начисления общего заработка начислениями из ИБ.
	Если ДоплатыДоСреднего.Количество() > 0 Тогда
		
		СоздатьВТНачисленияУчитываемыеПриРасчетеДоплатыДоСреднегоЗаработка(МенеджерВременныхТаблиц, СпособРасчетаДоплатыДоСреднего);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчитываютсяПриДоплатеДоСреднего.Ссылка
		|ИЗ
		|	ВТУчитываютсяПриДоплатеДоСреднего КАК УчитываютсяПриДоплатеДоСреднего
		|ГДЕ
		|	НЕ УчитываютсяПриДоплатеДоСреднего.Ссылка В
		|				(ВЫБРАТЬ
		|					УчитываютсяПриДоплатеИзКоллектора.Начисление
		|				ИЗ
		|					ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			УчитываютсяПриДоплатеДоСреднего.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		// 3. В коллекторе у имеющихся доплат до среднего корректируем списки базовых начислений.
		Для Каждого ДоплатаДоСреднего Из ДоплатыДоСреднего Цикл
			ДоплатаОбъект = КоллекторНачислений[ДоплатаДоСреднего];
			// Проверим 
			// - нет ли в составе базовых этой доплаты таких начислений, которые нужно изъять
			УдаляемыеСтроки = Новый Массив;
			Для Каждого СтрокаТаблицы Из ДоплатаОбъект.БазовыеВидыРасчета Цикл
				Если УчитываютсяПриДоплатеДоСреднего.Найти(СтрокаТаблицы.ВидРасчета) = Неопределено Тогда
					УдаляемыеСтроки.Добавить(СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ДоплатаОбъект.БазовыеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			// - Все ли нужные начисления есть в составе ее базовых начислений.
			Для Каждого БазовоеНачисление Из УчитываютсяПриДоплатеДоСреднего Цикл
				Если ДоплатаОбъект.БазовыеВидыРасчета.Найти(БазовоеНачисление, "ВидРасчета") = Неопределено Тогда
					ДоплатаОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = БазовоеНачисление;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// 4. Выявляем доплаты до среднего заработка в ИБ, 
	// в которые нужно внести изменения в связи с изменениями в начислениях коллектора.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазаДоплатыДоСреднего.Ссылка КАК ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.ВидРасчета КАК БазовоеНачисление
	|ПОМЕСТИТЬ ВТБазаДоплатыДоСреднего
	|ИЗ
	|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.Ссылка.СпособРасчета = &СпособРасчетаДоплатыДоСреднего
	|	И НЕ БазаДоплатыДоСреднего.Ссылка В (&ДоплатыДоСреднегоКоллектора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.БазовоеНачисление
	|ПОМЕСТИТЬ ВТСовпадающиеНачисления
	|ИЗ
	|	ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.БазовоеНачисление В
	|			(ВЫБРАТЬ
	|				УчитываютсяПриДоплатеИзКоллектора.Начисление
	|			ИЗ
	|				ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего КАК ДоплатаДоСреднего,
	|	УчитываютсяПриДоплатеИзКоллектора.Начисление КАК БазовоеНачисление
	|ИЗ
	|	ВТУчитываютсяПриДоплатеИзКоллектора КАК УчитываютсяПриДоплатеИзКоллектора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСовпадающиеНачисления КАК СовпадающиеНачисления
	|		ПО (СовпадающиеНачисления.ДоплатаДоСреднего = БазаДоплатыДоСреднего.ДоплатаДоСреднего)
	|			И (СовпадающиеНачисления.БазовоеНачисление = УчитываютсяПриДоплатеИзКоллектора.Начисление)
	|ГДЕ
	|	СовпадающиеНачисления.БазовоеНачисление ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БазаДоплатыДоСреднего.ДоплатаДоСреднего,
	|	БазаДоплатыДоСреднего.БазовоеНачисление
	|ИЗ
	|	ВТБазаДоплатыДоСреднего КАК БазаДоплатыДоСреднего
	|ГДЕ
	|	БазаДоплатыДоСреднего.БазовоеНачисление В(&НеУчитываютсяПриДоплатеИзКоллектора)"; 
	
	Запрос.УстановитьПараметр("НеУчитываютсяПриДоплатеИзКоллектора", НеУчитываютсяПриДоплатеДоСреднего);
	Запрос.УстановитьПараметр("ДоплатыДоСреднегоКоллектора", ДоплатыДоСреднего);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавляем недостающие начисления.
	ВыборкаДобавить = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Пока ВыборкаДобавить.СледующийПоЗначениюПоля("ДоплатаДоСреднего") Цикл
		ДоплатаОбъект = КоллекторНачислений[ВыборкаДобавить.ДоплатаДоСреднего];
		Если ДоплатаОбъект = Неопределено Тогда
			// Помещаем начисление в коллектор.
			ДоплатаОбъект = ВыборкаДобавить.ДоплатаДоСреднего.ПолучитьОбъект();
			КоллекторНачислений.Вставить(ВыборкаДобавить.ДоплатаДоСреднего, ДоплатаОбъект);
		КонецЕсли;
		Пока ВыборкаДобавить.Следующий() Цикл
			ДоплатаОбъект.БазовыеВидыРасчета.Добавить().ВидРасчета = ВыборкаДобавить.БазовоеНачисление;
		КонецЦикла;
	КонецЦикла;
	
	// Удаляем избыточные начисления.
	ВыборкаУдалить = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	Пока ВыборкаУдалить.СледующийПоЗначениюПоля("ДоплатаДоСреднего") Цикл
		ДоплатаОбъект = КоллекторНачислений[ВыборкаУдалить.ДоплатаДоСреднего];
		Если ДоплатаОбъект = Неопределено Тогда
			ДоплатаОбъект = ВыборкаУдалить.ДоплатаДоСреднего.ПолучитьОбъект();
			КоллекторНачислений.Вставить(ВыборкаУдалить.ДоплатаДоСреднего, ДоплатаОбъект);
		КонецЕсли;
		Пока ВыборкаУдалить.Следующий() Цикл
			УдаляемыеСтроки = ДоплатаОбъект.БазовыеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета", ВыборкаУдалить.БазовоеНачисление));
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ДоплатаОбъект.БазовыеВидыРасчета.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет нужно ли включать указанное начисление в базу доплаты до среднего заработка.
//
Функция НачислениеУчитываетсяПриРасчетеДоплатыДоСреднегоЗаработка(НачислениеОбъект, СпособРасчетаДоплатыДоСреднего)
	
	Если СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		ОбщийЗаработок = Новый Структура;
		ОбщийЗаработок.Вставить("Значение", Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок);
		Возврат НачислениеОбъект.СреднийЗаработокОбщий.НайтиСтроки(ОбщийЗаработок).Количество() > 0;
	ИначеЕсли СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС 
		Или  СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда
		Возврат НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаБольничного;
	КонецЕсли;
	
КонецФункции

// Создает временную таблицу с начислениями, учитываемыми при расчете доплаты до среднего заработка 
// в зависимости от установленного способа расчета доплаты.
//
Процедура СоздатьВТНачисленияУчитываемыеПриРасчетеДоплатыДоСреднегоЗаработка(МенеджерВременныхТаблиц, СпособРасчетаДоплатыДоСреднего)
	
	Если СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияСреднийЗаработокОбщий.Ссылка
		|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеДоСреднего
		|ИЗ
		|	ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК НачисленияСреднийЗаработокОбщий
		|ГДЕ
		|	НачисленияСреднийЗаработокОбщий.Значение = ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок)
		|	И НачисленияСреднийЗаработокОбщий.Ссылка.СпособРасчета <> &СпособРасчетаДоплатыДоСреднего";
	ИначеЕсли СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС 
		Или СпособРасчетаДоплатыДоСреднего = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка
		|ПОМЕСТИТЬ ВТУчитываютсяПриДоплатеДоСреднего
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ОплатаБольничного)";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СпособРасчетаДоплатыДоСреднего", СпособРасчетаДоплатыДоСреднего);
	Запрос.Выполнить();
	
КонецПроцедуры

// Определяет значение перечисления ВидыДокументовНачисления по документу.
//
// Параметры:
//	Документ - ссылка или объект документа.
//
// Возвращаемое значение - ПеречислениеСсылка.ВидыДокументовНачисления или Неопределено.
//
Функция ВидДокументаНачисленияПоДокументу(Документ) Экспорт
	Возврат ВидДокументаНачисленияПоМетаданнымДокумента(Метаданные.НайтиПоТипу(ТипЗнч(Документ)));
КонецФункции

// Определяет значение перечисления ВидыДокументовНачисления по метаданным документа.
//
// Параметры:
//	МетаданныеДокумента 
//
// Возвращаемое значение - ПеречислениеСсылка.ВидыДокументовНачисления или Неопределено.
//
Функция ВидДокументаНачисленияПоМетаданнымДокумента(МетаданныеДокумента)
	
	Для Каждого ЗначенияПеречисления Из Метаданные.Перечисления.ВидыДокументовНачисления.ЗначенияПеречисления Цикл
		Если ЗначенияПеречисления.Имя = МетаданныеДокумента.Имя Тогда
			Возврат Перечисления.ВидыДокументовНачисления[ЗначенияПеречисления.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

// Определяет значение перечисления ВидыДокументовУдержания по документу.
//
// Параметры:
//	Документ - ссылка или объект документа.
//
// Возвращаемое значение - ПеречислениеСсылка.ВидыДокументовУдержания или Неопределено.
//
Функция ВидДокументаУдержанияПоДокументу(Документ) Экспорт
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	Для Каждого ЗначенияПеречисления Из Метаданные.Перечисления.ВидыДокументовУдержания.ЗначенияПеречисления Цикл
		Если ЗначенияПеречисления.Имя = МетаданныеДокумента.Имя Тогда
			Возврат Перечисления.ВидыДокументовУдержания[ЗначенияПеречисления.Имя];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция ВводНовыхСтрокНачислений(Выборка, НачисленияЗаПериод) Экспорт 
	
	Строки = Новый Массив;
	
	НоваяСтрока = НачисленияЗаПериод.Добавить();
	НоваяСтрока.ДатаНачала = Выборка.ДатаНачала;
	НоваяСтрока.ДатаОкончания = Выборка.ДатаОкончания;
	НоваяСтрока.ПериодДействия = НачалоМесяца(Выборка.ДатаНачала);
	
	Строки.Добавить(Новый Структура("НоваяСтрока, ФиксированнаяДатаОкончания", НоваяСтрока, Неопределено));
	
	Возврат Строки;
	
КонецФункции

// Определяет признак "разовости" начисления за месяц.
//
Функция НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект) Экспорт
	
	ЕстьПоказателиУчетаВремени = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
		НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
		
	ЕстьПоказателиРасчетнаяБаза = РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(НачислениеОбъект.Показатели, "РасчетнаяБаза");
	
	ЕстьОперативныеПоказатели = РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
		НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ОперативныеПоказатели());
	
	Возврат РасчетЗарплатыРасширенныйКлиентСервер.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект, ЕстьПоказателиУчетаВремени, ЕстьПоказателиРасчетнаяБаза, ЕстьОперативныеПоказатели);
	
КонецФункции

// Определяется признак того, что расчет времени для этого начисления выполняется по часам.
//
Функция НачислениеРассчитываетсяПоЧасам(НачислениеОбъект) Экспорт
	
	Если Перечисления.ВидыРабочегоВремениСотрудников.НецелодневныеВидыРабочегоВремени().Найти(НачислениеОбъект.ВидВремени) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ОплатаПростоя Тогда
		// Если начисление рассчитывается не является нецелодневным (т.е. является внутрисменным), 
		// то простой исключение, для него всегда устанавливаем время в днях (из-за необходимости использовать показатель
		// НормаЧасов.
		Возврат Ложь;
	КонецЕсли;
	
	Если НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП 
		 ИЛИ НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Индексация 
		Тогда
		// для них всегда устанавливаем время в днях из-за необходимости использовать показатель НормаЧасов.
		Возврат Ложь;
	КонецЕсли;

	
	// Во всех остальных случаях действуем в зависимости от наличия почасовых показателей.
	Если РасчетЗарплатыРасширенный.ЕстьПоказателиВКоллекции(
			НачислениеОбъект.Показатели, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремениВЧасах()) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные функции и процедуры.

// Создает набор записей для регистратора по переданным метаданным.
Функция СоздатьНаборЗаписейРегистратора(Метаданные, Документ) Экспорт
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.ПолноеИмя());
	НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Документ);
	Возврат НаборЗаписей;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Функция РаспределитьРезультатРасчетаПоТерриториямУсловиямТруда(СтрокаРасчета, СтрокиРаспределения)
	
	Если СтрокаРасчета.Результат = 0 Или СтрокиРаспределения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоэффициентыРаспределения = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "ДоляРаспределения");
	РаспределенныеСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаРасчета.Результат, КоэффициентыРаспределения);
	Если РаспределенныеСуммы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Индекс = 0;
	Пока Индекс < СтрокиРаспределения.Количество() Цикл
		СтрокиРаспределения[Индекс].Результат = РаспределенныеСуммы[Индекс];
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Дополняет переданную коллекцию колонками
//		ТекущийАванс.
// Колонка ТекущийАванс заполняется только для записей перемещения и увольнения.
Процедура ДополнитьТекущимиДаннымиАвансов(ДанныеОПлановыхВыплатах, Регистратор, ВремяРегистрацииДокумента = Неопределено)
	
	ДанныеОПлановыхВыплатах.Колонки.Добавить("ТекущийАванс", Новый ОписаниеТипов("Число"));
	ДанныеОПлановыхВыплатах.Колонки.Добавить("ТекущийСпособРасчетаАванса", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаАванса"));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = ДанныеОПлановыхВыплатах.ВыгрузитьКолонку("ДатаСобытия");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из ДанныеОПлановыхВыплатах Цикл
		// Список событий перемещения и увольнения для получения текущих графиков.
		Если Строка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение 
			Или Строка.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока = СотрудникиДаты.Добавить();
			НоваяСтрока.Период = ВремяРегистрацииДокумента.Получить(Строка.ДатаСобытия);
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеАвансы",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПлановыеАвансы.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ПлановыеАвансы.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ПлановыеАвансы.Период, ДЕНЬ) КАК Период,
	|	ПлановыеАвансы.СпособРасчетаАванса КАК ТекущийСпособРасчетаАванса,
	|	ПлановыеАвансы.Аванс КАК ТекущийАванс
	|ИЗ
	|	ВТПлановыеАвансыСрезПоследних КАК ПлановыеАвансы");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Сотрудник = Выборка.Сотрудник;
		СтруктураПоиска.ДатаСобытия = Выборка.Период;
		Строка = ДанныеОПлановыхВыплатах.НайтиСтроки(СтруктураПоиска)[0];
		ЗаполнитьЗначенияСвойств(Строка, Выборка, "ТекущийСпособРасчетаАванса, ТекущийАванс");
	КонецЦикла;
	
КонецПроцедуры

Функция ИзвестноеЗначениеПоказателя(ЗначенияПоказателей, Сотрудник, Показатель)
	
	Если ЗначенияПоказателей = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИзвестныеЗначения = ЗначенияПоказателей.НайтиСтроки(Новый Структура("Сотрудник, Показатель", Сотрудник, Показатель));
	Если ИзвестныеЗначения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеПоказателя = Новый Структура("Значение, КомандаРасшифровки");
	ЗаполнитьЗначенияСвойств(ЗначениеПоказателя, ИзвестныеЗначения[0]);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция ИзвестныеЗначенияПоказателейСотрудника(Сотрудник, ИзвестныеПоказатели) Экспорт
	
	ИзвестныеЗначенияПоказателей = ПустаяТаблицаЗначенийПоказателей();
	Для Каждого КлючИЗначение Из ИзвестныеПоказатели Цикл
		НоваяСтрока = ИзвестныеЗначенияПоказателей.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Показатель = КлючИЗначение.Ключ;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючИЗначение.Значение);
	КонецЦикла;

	Возврат ИзвестныеЗначенияПоказателей;
	
КонецФункции

Функция УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ИмяТаблицы)
	
	Если Не КонтролируемыеПоля.Свойство(ИмяТаблицы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УсловияЗамены = Новый Структура;
	Для Каждого КлючИЗначение Из КонтролируемыеПоля[ИмяТаблицы] Цикл
		УсловияЗамены.Вставить(КлючИЗначение.Ключ, Ложь);
	КонецЦикла;
	
	Возврат УсловияЗамены;
	
КонецФункции

// Осуществляет поиск строк в КоллекцияСтрок, 
// в которых значение поля ИмяПоля входит в массив МассивЗначений.
//
Функция НайтиСтрокиОтборПоМассиву(КоллекцияСтрок, ИмяПоля, МассивЗначений)
	
	НайденныеСтроки = Новый Массив;
	
	// Имя может быть передано как составное, например "Сотрудник.ФизическоеЛицо".
	// Это значит, что прежде нужно определить значения через ".", 
	// от значений в искомых полях, и искать затем уже именно по ним.
	ЧастиИмениПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	Если ЧастиИмениПоля.Количество() > 1 Тогда
		ЗначенияПервыйУровень = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, ЧастиИмениПоля[0], Истина);
		СоответствиеЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗначенияПервыйУровень, ЧастиИмениПоля[1]);
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетУсловиям = Истина;
		Если МассивЗначений <> Неопределено Тогда
			Если ЧастиИмениПоля.Количество() > 1 Тогда
				// Соответствие по имени поля через ".".
				СоответствуетУсловиям = МассивЗначений.Найти(СоответствиеЗначений[СтрокаКоллекции[ЧастиИмениПоля[0]]]) <> Неопределено;
			Иначе	
				// Соответствие по простому имени поля.
				СоответствуетУсловиям = МассивЗначений.Найти(СтрокаКоллекции[ИмяПоля]) <> Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если СоответствуетУсловиям Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Процедура ДобавитьКатегориюНачисления(КатегорииНачислений, ИдентификаторНачисления, Категория)
	
	НоваяСтрока = КатегорииНачислений.Добавить();
	НоваяСтрока.Идентификатор = ИдентификаторНачисления;
	НоваяСтрока.Категория = Категория;
	
КонецПроцедуры

Функция НастройкиРасчетаЗарплатыПоУмолчанию()
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("ПорядокРасчетаСтоимостиЕдиницыВремени", Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению);
	Если Не ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса") И Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		ЗначенияПоУмолчанию.Вставить("ВыполнятьРасчетЗарплатыПоПодразделениям", Истина);
	КонецЕсли;
	ЗначенияПоУмолчанию.Вставить("ИспользоватьИсполнительныеЛисты", Истина);
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

Функция ИгнорируемыеКолонкиСравненияПриЗаполненииУдержаний(КатегорияУдержания)
	
	// Для отдельных категорий удержаний состав игнорируемых колонок может отличаться.
	
	ИгнорируемыеКолонки = Новый Массив;
	ИгнорируемыеКолонки.Добавить("ДатаНачала");
	ИгнорируемыеКолонки.Добавить("ДатаОкончания");
	
	Если КатегорияУдержания = Перечисления.КатегорииУдержаний.ИсполнительныйЛист Тогда 
		ИгнорируемыеКолонки.Добавить("Получатель");
		ИгнорируемыеКолонки.Добавить("ПлатежныйАгент");
		ИгнорируемыеКолонки.Добавить("ТарифПлатежногоАгента");
	ИначеЕсли КатегорияУдержания = Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента Тогда 
		ИгнорируемыеКолонки.Добавить("ДокументОснование");
		ИгнорируемыеКолонки.Добавить("ВидБазы");
		ИгнорируемыеКолонки.Добавить("Знаменатель");
		ИгнорируемыеКолонки.Добавить("НомерПоказателя");
		ИгнорируемыеКолонки.Добавить("Показатель");
		ИгнорируемыеКолонки.Добавить("Предел");
		ИгнорируемыеКолонки.Добавить("ПрожиточныйМинимум");
		ИгнорируемыеКолонки.Добавить("Процент");
		ИгнорируемыеКолонки.Добавить("СпособРасчета");
		ИгнорируемыеКолонки.Добавить("Сумма");
		ИгнорируемыеКолонки.Добавить("УчитыватьБольничныеЛисты");
		ИгнорируемыеКолонки.Добавить("Числитель");
	КонецЕсли;
	
	Возврат ИгнорируемыеКолонки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет ФОТ в кадровых документах и штатном расписании.

// Рассчитывает ФОТ сотрудников, по одной организации за указанный месяц, результаты
// расчета помещаются в значения коллекций начислений.
// В коллекции показателей следует указывать те показатели, значения которых отличаются
// от значений действующих в периоде расчета. Если не заполнять коллекцию показателей
// расчет будет производиться по значениям показателей на ДатуРасчета в структуре описания сотрудника.
//
// Параметры:
//			ОписанияРассчитываемыхОбъектов - Соответствие,
//						Ключ - Произвольный. Например: ссылка на документ, уникальный идентификатор.
//						Значение - Соответствие, Ключ - Сотрудник
//								Значение - Структура
//									ДатаРасчета - Дата, на эту дату определяются значения показателей.
//									Подразделение - СправочникСсылка.ПодразделенияОрганизаций, если не указано,
//											Подразделение заполнится из кадровых данных сотрудника
//											на ДатаРасчета.
//									ГрафикРаботы - СправочникСсылка.ГрафикиРаботыСотрудников, если не указан,
//											ГрафикРаботы заполнится из кадровых данных сотрудника
//											на ДатаРасчета.
//									Начисления - Соответствие, Ключ - Начисление
//										Значение - Число (вклад в ФОТ).
//									Показатели	- Соответствие, Ключ - Показатель
//										Значение - Число (значение показателя).
//			Организация
//			МесяцРасчета
//			ДополнитьСоставНачислений - Булево, Истина заполняется состав начислений, плановыми начислениями сотрудника
//						на дату ДатаРасчета, указанную в данных сотрудника.
//
Процедура РассчитатьФОТСотрудников(ОписанияРассчитываемыхОбъектов, Организация, МесяцРасчета, ДополнитьСоставНачислений = Ложь) Экспорт
	
	СоответствиеСотрудников = Новый Соответствие;
	
	// Таблица сотрудников
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("РассчитываемыйСотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСотрудников.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСотрудников.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ТаблицаСотрудников.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	
	// Таблица начислений
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	
	// Таблица показателей
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	НачисленияВходящиеВФОТ = НачисленияВходящиеВСоставФОТ();
	
	Для каждого ОбъектКлючИЗначение Из ОписанияРассчитываемыхОбъектов Цикл
		
		Для каждого ОписаниеСотрудникаКлючИЗначение Из ОбъектКлючИЗначение.Значение Цикл
			
			Если ОписаниеСотрудникаКлючИЗначение.Значение.Начисления.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ОписаниеСотрудникаКлючИЗначение.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаСотрудника = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСотрудника, ОписаниеСотрудникаКлючИЗначение.Значение);
			НоваяСтрокаСотрудника.Организация = Организация;
			НоваяСтрокаСотрудника.РассчитываемыйСотрудник = Справочники.Сотрудники.ПолучитьСсылку();
			НоваяСтрокаСотрудника.Сотрудник = ОписаниеСотрудникаКлючИЗначение.Ключ;
			НоваяСтрокаСотрудника.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
			
			СоответствиеСотрудников.Вставить(НоваяСтрокаСотрудника.Сотрудник, НоваяСтрокаСотрудника.РассчитываемыйСотрудник);
			
			ЗафиксированныеРазмеры = Неопределено;
			ОписаниеСотрудникаКлючИЗначение.Значение.Свойство("ФиксРасчет", ЗафиксированныеРазмеры);
			
			Для Каждого ОписаниеНачисления Из ОписаниеСотрудникаКлючИЗначение.Значение.Начисления Цикл
				
				Если ЗначениеЗаполнено(ОписаниеНачисления.Начисление) Тогда
					
					НоваяСтрокаНачисления = ТаблицаНачислений.Добавить();
					НоваяСтрокаНачисления.Сотрудник = НоваяСтрокаСотрудника.РассчитываемыйСотрудник;
					НоваяСтрокаНачисления.Начисление = ОписаниеНачисления.Начисление;
					НоваяСтрокаНачисления.ДокументОснование = ОписаниеНачисления.ДокументОснование;
					
					Если НачисленияВходящиеВФОТ.Найти(ОписаниеНачисления.Начисление) = Неопределено Тогда
						
						НоваяСтрокаНачисления.Размер = 0;
						НоваяСтрокаНачисления.ФиксРасчет = Истина;
						
					Иначе
						
						НоваяСтрокаНачисления.Размер = ОписаниеНачисления.Размер;
						
						Если ЗафиксированныеРазмеры <> Неопределено Тогда
							Если ЗафиксированныеРазмеры.Получить(ОписаниеНачисления.Начисление) = Истина Тогда
								НоваяСтрокаНачисления.ФиксРасчет = Истина;
							КонецЕсли; 
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЕсли; 
					
			КонецЦикла;
			
			Если ОписаниеСотрудникаКлючИЗначение.Значение.Свойство("Показатели") Тогда
				
				Для Каждого ОписаниеПоказателя Из ОписаниеСотрудникаКлючИЗначение.Значение.Показатели Цикл
					
					Если ЗначениеЗаполнено(ОписаниеПоказателя.Показатель) Тогда
						НоваяСтрокаПоказателя = ТаблицаПоказателей.Добавить();
						// Заполняется настоящий Сотрудник, по нему потом собираются значения показателей.
						НоваяСтрокаПоказателя.Сотрудник = НоваяСтрокаСотрудника.Сотрудник;
						НоваяСтрокаПоказателя.ДатаРасчета = НоваяСтрокаСотрудника.ДатаРасчета;
						НоваяСтрокаПоказателя.Показатель = ОписаниеПоказателя.Показатель;
						НоваяСтрокаПоказателя.ДокументОснование = ОписаниеПоказателя.ДокументОснование;
						НоваяСтрокаПоказателя.Значение = ОписаниеПоказателя.Значение;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", МесяцРасчета);
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("НачисленияВходящиеВФОТ", НачисленияВходящиеВФОТ);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.ДатаРасчета КАК Период,
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.РассчитываемыйСотрудник,
		|	ТаблицаСотрудников.ФизическоеЛицо,
		|	ТаблицаСотрудников.Организация,
		|	ТаблицаСотрудников.Подразделение,
		|	ТаблицаСотрудников.ГрафикРаботы,
		|	ТаблицаСотрудников.КоличествоСтавок
		|ПОМЕСТИТЬ ВТТаблицаСотрудниковПредварительно
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.Начисление,
		|	ТаблицаНачислений.ДокументОснование,
		|	ТаблицаНачислений.Размер,
		|	ТаблицаНачислений.ФиксРасчет
		|ПОМЕСТИТЬ ВТТаблицаНачислений
		|ИЗ
		|	&ТаблицаНачислений КАК ТаблицаНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоказателей.ДатаРасчета КАК Период,
		|	ТаблицаПоказателей.Сотрудник,
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.ДокументОснование,
		|	ТаблицаПоказателей.Значение
		|ПОМЕСТИТЬ ВТТаблицаПоказателейПредварительно
		|ИЗ
		|	&ТаблицаПоказателей КАК ТаблицаПоказателей";
		
	Если ДополнитьСоставНачислений Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТТаблицаНачислений", "ПОМЕСТИТЬ ВТТаблицаНачисленийПредварительно");
	КонецЕсли; 
		
	Запрос.Выполнить();
	
	Если ДополнитьСоставНачислений Тогда
		
		ЗапросВТПлановыеНачисленияСотрудников = КадровыйУчетРасширенный.ЗапросВТПлановыеНачисленияСотрудников(Ложь, "ВТПлановыеНачисленияСотрудников", "ВТТаблицаСотрудниковПредварительно");
		ЗапросВТПлановыеНачисленияСотрудников.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросВТПлановыеНачисленияСотрудников.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаСотрудниковПредварительно.РассчитываемыйСотрудник КАК Сотрудник,
			|	ПлановыеНачисленияСотрудников.Начисление,
			|	ПлановыеНачисленияСотрудников.ДокументОснование,
			|	ПлановыеНачисленияСотрудников.Размер
			|ПОМЕСТИТЬ ВТПлановыеНачисленияРассчитываемыхСотрудников
			|ИЗ
			|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
			|		ПО ТаблицаСотрудниковПредварительно.Сотрудник = ПлановыеНачисленияСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаНачислений.Сотрудник,
			|	ТаблицаНачислений.Начисление,
			|	ТаблицаНачислений.ДокументОснование,
			|	ТаблицаНачислений.Размер,
			|	ТаблицаНачислений.ФиксРасчет
			|ПОМЕСТИТЬ ВТТаблицаНачислений
			|ИЗ
			|	ВТТаблицаНачисленийПредварительно КАК ТаблицаНачислений
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПлановыеНачисленияСотрудников.Сотрудник,
			|	ПлановыеНачисленияСотрудников.Начисление,
			|	ПлановыеНачисленияСотрудников.ДокументОснование,
			|	ПлановыеНачисленияСотрудников.Размер,
			|	ЛОЖЬ
			|ИЗ
			|	ВТПлановыеНачисленияРассчитываемыхСотрудников КАК ПлановыеНачисленияСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаНачисленийПредварительно КАК ТаблицаНачислений
			|		ПО ПлановыеНачисленияСотрудников.Сотрудник = ТаблицаНачислений.Сотрудник
			|			И ПлановыеНачисленияСотрудников.Начисление = ТаблицаНачислений.Начисление
			|			И ПлановыеНачисленияСотрудников.ДокументОснование = ТаблицаНачислений.ДокументОснование
			|ГДЕ
			|	ТаблицаНачислений.Начисление ЕСТЬ NULL ";
			
		Запрос.Выполнить();
		
	КонецЕсли; 
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТТаблицаСотрудниковПредварительно", "Сотрудник,Период");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "Подразделение,ГрафикРаботы,ДоляНеполногоРабочегоВремени,КоличествоСтавок", , Ложь);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТТаблицаСотрудниковПредварительно",
			"Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Период,
		|	ТаблицаСотрудников.РассчитываемыйСотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.ФизическоеЛицо,
		|	ТаблицаСотрудников.Организация,
		|	ВЫБОР
		|		КОГДА ТаблицаСотрудников.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА КадровыеДанныеСотрудников.Подразделение
		|		ИНАЧЕ ТаблицаСотрудников.Подразделение
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ТаблицаСотрудников.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|			ТОГДА КадровыеДанныеСотрудников.ГрафикРаботы
		|		ИНАЧЕ ТаблицаСотрудников.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ТаблицаСотрудников.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|				И ТаблицаСотрудников.КоличествоСтавок = 0
		|			ТОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 1)
		|		КОГДА ТаблицаСотрудников.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|						ТОГДА ВЫБОР
		|								КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|									ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					КОГДА ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|						ТОГДА ВЫБОР
		|								КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|									ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					КОГДА ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
		|						ТОГДА ВЫБОР
		|								КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|									ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					ИНАЧЕ ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|					ТОГДА ВЫБОР
		|							КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|								ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|							КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|								ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|							ИНАЧЕ 1
		|						КОНЕЦ
		|				КОГДА ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
		|					ТОГДА ВЫБОР
		|							КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|								ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|							КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|								ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|							ИНАЧЕ 1
		|						КОНЕЦ
		|				ИНАЧЕ ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|			КОНЕЦ
		|	КОНЕЦ КАК ДоляНеполногоРабочегоВремени
		|ПОМЕСТИТЬ ВТТаблицаСотрудников
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ТаблицаСотрудников.Период = КадровыеДанныеСотрудников.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.РассчитываемыйСотрудник КАК Сотрудник,
		|	ТаблицаПоказателей.Показатель КАК Показатель,
		|	ТаблицаПоказателей.ДокументОснование КАК ДокументОснование,
		|	ТаблицаПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ ВТТаблицаПоказателей
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПоказателейПредварительно КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Сотрудник = ТаблицаПоказателей.Сотрудник
		|			И ТаблицаСотрудников.Период = ТаблицаПоказателей.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.РассчитываемыйСотрудник,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО ТаблицаСотрудников.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
		|			И ТаблицаСотрудников.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПоказателейПредварительно КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Сотрудник = ТаблицаПоказателей.Сотрудник
		|			И ТаблицаСотрудников.Период = ТаблицаПоказателей.Период
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель = ТаблицаПоказателей.Показатель)
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование = ТаблицаПоказателей.ДокументОснование)
		|ГДЕ
		|	ТаблицаПоказателей.Показатель ЕСТЬ NULL 
		|	И НЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель ЕСТЬ NULL ";
		
	Запрос.Выполнить();
	
	// Таблицы периодических показателей организации.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТТаблицаСотрудников",
			"Организация"),
		,
		"ВТЗначенияПериодическихПоказателейОрганизаций");
	
	// Таблицы периодических показателей подразделения.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТТаблицаСотрудников",
			"Подразделение"),
		,
		"ВТЗначенияПериодическихПоказателейПодразделений");
	
	
	
	Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	
	Запрос.УстановитьПараметр("ВремяВДнях", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	Запрос.УстановитьПараметр("ОтработаноДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"));
	Запрос.УстановитьПараметр("НормаДнейПоГрафикуПолногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	Запрос.УстановитьПараметр("НормаДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));
	Запрос.УстановитьПараметр("ВремяВДняхПоУмолчанию", 20);
		
	Запрос.УстановитьПараметр("ВремяВЧасах", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	Запрос.УстановитьПараметр("ОтработаноЧасов", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"));
	Запрос.УстановитьПараметр("НормаЧасов", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"));
	Запрос.УстановитьПараметр("ВремяВЧасахПоУмолчанию", 160);
	
	Запрос.УстановитьПараметр("КалендарныеДни", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	Запрос.УстановитьПараметр("КалендарныеДниМесяца", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	
    Запрос.УстановитьПараметр("МРОТ", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ"));
	Запрос.УстановитьПараметр("МРОТЗначение", ЗарплатаКадры.МинимальныйРазмерОплатыТруда(МесяцРасчета));
	Запрос.УстановитьПараметр("МЧТС", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МЧТС"));
	Запрос.УстановитьПараметр("МЧТСЗначение", ЗарплатаКадры.МинимальнаяЧасоваТарифнаяСтавка(МесяцРасчета));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	МАКСИМУМ(СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год) КАК ГодГрафикаРаботы,
		|	ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени КАК ГрафикПолногоРабочегоВремени,
		|	МАКСИМУМ(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.Год) КАК ГодГрафикаПолногоРабочегоВремени
		|ПОМЕСТИТЬ ВТПоследниеГодаСведенийГрафиковРаботы
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|			И (СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год <= ГОД(&Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени
		|		ПО (ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.ГрафикРаботыСотрудников)
		|			И (СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.Год <= ГОД(&Период))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСотрудников.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов = 0
		|			ТОГДА &ВремяВЧасахПоУмолчанию
		|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов
		|	КОНЕЦ КАК СреднемесячноеЧислоЧасов,
		|	ВЫБОР
		|		КОГДА СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней = 0
		|			ТОГДА &ВремяВДняхПоУмолчанию
		|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней
		|	КОНЕЦ КАК СреднемесячноеЧислоДней,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоЧасов, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов) = 0
		|			ТОГДА &ВремяВЧасахПоУмолчанию
		|		ИНАЧЕ ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоЧасов, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов)
		|	КОНЕЦ КАК СреднемесячноеЧислоЧасовНорма,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоДней, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней) = 0
		|			ТОГДА &ВремяВДняхПоУмолчанию
		|		ИНАЧЕ ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоДней, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней)
		|	КОНЕЦ КАК СреднемесячноеЧислоДнейНормаПоГрафикуПолногоРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней, 0) = 0
		|			ТОГДА &ВремяВДняхПоУмолчанию
		|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней
		|	КОНЕЦ КАК СреднемесячноеЧислоДнейНорма,
		|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|			ТОГДА СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников.ГрафикПолногоРабочегоВремени
		|	КОНЕЦ КАК ГрафикРаботыНорма
		|ПОМЕСТИТЬ ВТСреднемесячныеЗначенияНормыВремени
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеГодаСведенийГрафиковРаботы КАК ПоследниеГодаСведенийГрафиковРаботы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
		|			ПО ПоследниеГодаСведенийГрафиковРаботы.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|				И ПоследниеГодаСведенийГрафиковРаботы.ГодГрафикаРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени
		|			ПО ПоследниеГодаСведенийГрафиковРаботы.ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.ГрафикРаботыСотрудников
		|				И ПоследниеГодаСведенийГрафиковРаботы.ГодГрафикаПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.Год
		|		ПО ТаблицаСотрудников.ГрафикРаботы = ПоследниеГодаСведенийГрафиковРаботы.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаПоказателей.Показатель КАК Показатель,
		|	ТаблицаПоказателей.ДокументОснование КАК ДокументОснование,
		|	ТаблицаПоказателей.Значение КАК Значение
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПоказателей КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Сотрудник = ТаблицаПоказателей.Сотрудник
		|			И (ТаблицаПоказателей.Значение <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаПоказателей.Показатель КАК Показатель,
		|	ТаблицаПоказателей.Значение КАК Значение
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизаций КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Организация = ТаблицаПоказателей.Организация
		|ГДЕ
		|	ТаблицаПоказателей.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.Значение
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделений КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Организация = ТаблицаПоказателей.Организация
		|			И ТаблицаСотрудников.Подразделение = ТаблицаПоказателей.Подразделение
		|ГДЕ
		|	ТаблицаПоказателей.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ДоляНеполногоРабочегоВремени,
		|	ТаблицаСотрудников.ДоляНеполногоРабочегоВремени
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	&ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&КалендарныеДни,
		|	1
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	&КалендарныеДни <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&КалендарныеДниМесяца,
		|	1
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	&КалендарныеДниМесяца <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДнейНормаПоГрафикуПолногоРабочегоВремени, &ВремяВДняхПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДнейНорма, &ВремяВДняхПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&НормаДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, &ВремяВДняхПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&ВремяВДнях <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ОтработаноДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, &ВремяВДняхПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&ОтработаноДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&НормаЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасовНорма, &ВремяВЧасахПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&НормаЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ВремяВЧасах,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, &ВремяВЧасахПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&ВремяВЧасах <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ОтработаноЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасов, &ВремяВЧасахПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&ОтработаноЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&МРОТ,
		|	&МРОТЗначение
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	&МРОТ <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&МЧТС,
		|	&МЧТСЗначение
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	&МЧТС <> НЕОПРЕДЕЛЕНО
		|";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();	
	
	ИзвестныеЗначенияПоказателей = РезультатыЗапроса[3].Выгрузить();
	
	ИзвестныеЗначенияПоказателейПоОснованиям = Новый ТаблицаЗначений;
	ИзвестныеЗначенияПоказателейПоОснованиям.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзвестныеЗначенияПоказателейПоОснованиям.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ИзвестныеЗначенияПоказателейПоОснованиям.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ИзвестныеЗначенияПоказателейПоОснованиям.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ИзвестныеЗначенияПоказателейПоОснованиям.Индексы.Добавить("Сотрудник, ДокументОснование");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ИзвестныеЗначенияПоказателейПоОснованиям.Добавить(), Выборка);
	КонецЦикла;
	
	
	// Показатели зависящие от стажа.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.Показатель.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТПоказателиЗависящиеОтСтажа
		|ИЗ
		|	ВТТаблицаНачислений КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ТаблицаНачислений.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПоказателей КАК ТаблицаПоказателей
		|		ПО ТаблицаНачислений.Сотрудник = ТаблицаПоказателей.Сотрудник
		|			И (ТаблицаПоказателей.Показатель = НачисленияПоказатели.Показатель)
		|ГДЕ
		|	ТаблицаПоказателей.Показатель ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.РассчитываемыйСотрудник КАК РассчитываемыйСотрудник,
		|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК ДатаНачала,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.ВидСтажа
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО ТаблицаСотрудников.РассчитываемыйСотрудник = ПоказателиЗависящиеОтСтажа.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.РассчитываемыйСотрудник,
		|	&Период,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.ВидСтажа
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО ТаблицаСотрудников.РассчитываемыйСотрудник = ПоказателиЗависящиеОтСтажа.Сотрудник ГДЕ &Период <> НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ИсходныеДанные = ПустаяТаблицаИсходныеДанныеДляПолученияЗначенийПоказателейТипаЧислоЗависящихОтСтажа();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), Выборка);
		КонецЦикла; 
		
		ПериодыДобавленныхПоказателей = Новый Соответствие;
		Результат = РезультатЗапросаЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ИсходныеДанные);
		Если НЕ Результат.Пустой() Тогда
			
			ВыборкаПоЗначениям = Результат.Выбрать();
			
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				
				ВыборкаПоЗначениям.Сбросить();
				Если ВыборкаПоЗначениям.НайтиСледующий(Новый Структура("Сотрудник,Показатель", Выборка.Сотрудник, Выборка.Показатель)) Тогда
					
					ПериодыПоказателейСотрудника = ПериодыДобавленныхПоказателей.Получить(Выборка.РассчитываемыйСотрудник);
					Если ПериодыПоказателейСотрудника = Неопределено Тогда
						ПериодыПоказателейСотрудника = Новый Соответствие;
					КонецЕсли; 
					
					ПериодыПоказателя = ПериодыПоказателейСотрудника.Получить(ВыборкаПоЗначениям.Показатель);
					Если ПериодыПоказателя = Неопределено Тогда
						
						НоваяСтрока = ИзвестныеЗначенияПоказателей.Добавить();
						НоваяСтрока.Сотрудник = Выборка.РассчитываемыйСотрудник;
						НоваяСтрока.Показатель = ВыборкаПоЗначениям.Показатель;
						НоваяСтрока.Значение = ВыборкаПоЗначениям.ЗначениеПоказателя;
						
						ПериодыПоказателя = Новый Структура("Период,Строка", ВыборкаПоЗначениям.ДатаНачала, НоваяСтрока);
						
					Иначе
						
						Если ПериодыПоказателя.Период > ВыборкаПоЗначениям.ДатаНачала Тогда
							ПериодыПоказателя.Период = ВыборкаПоЗначениям.ДатаНачала;
							ПериодыПоказателя.Строка.Значение = ВыборкаПоЗначениям.ЗначениеПоказателя;
						КонецЕсли; 
						
					КонецЕсли;
					
					ПериодыПоказателейСотрудника.Вставить(ВыборкаПоЗначениям.Показатель, ПериодыПоказателя);
					ПериодыДобавленныхПоказателей.Вставить(Выборка.РассчитываемыйСотрудник, ПериодыПоказателейСотрудника);
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Создание таблицы расчета
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.Организация КАК Организация,
		|	ТаблицаСотрудников.Подразделение КАК Подразделение,
		|	ТаблицаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	ТаблицаСотрудников.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
		|	ТаблицаНачислений.Начисление КАК Начисление,
		|	ТаблицаНачислений.ДокументОснование КАК ДокументОснование,
		|	ТаблицаНачислений.Размер КАК Результат,
		|	СреднемесячныеЗначенияНормыВремени.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(&Период, МЕСЯЦ) КАК ДатаОкончания,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1) КАК ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДнейНормаПоГрафикуПолногоРабочегоВремени, 1) КАК НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1) КАК НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасовНорма, 1) КАК НормаЧасов,
		|	ВЫБОР
		|		КОГДА ТаблицаНачислений.Начисление НЕ В (&НачисленияВходящиеВФОТ)
		|			ТОГДА ИСТИНА
		|		КОГДА ТаблицаНачислений.Размер = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ТаблицаНачислений.ФиксРасчет
		|	КОНЕЦ КАК ФиксРасчет,
		|	0 КАК Значение1,
		|	0 КАК ИдентификаторСтрокиВидаРасчета,
		|	ИСТИНА КАК ФиксРасчетВремени
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаНачислений КАК ТаблицаНачислений
		|		ПО ТаблицаСотрудников.Сотрудник = ТаблицаНачислений.Сотрудник";
	
	ТекстЗапросовПоказателей = "";
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		ТекстЗапросовПоказателей = ТекстЗапросовПоказателей + Символы.ПС + "0 КАК Значение" + НомерПоказателя + ",";
	КонецЦикла;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "0 КАК Значение1,", СокрЛП(ТекстЗапросовПоказателей));
	
	РассчитываемаяТаблица = ПустаяТаблицаНачисления();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РассчитываемаяТаблица.Добавить(), Выборка);
	КонецЦикла; 
		
	УстановитьПривилегированныйРежим(Истина);
		
	РассчитатьФОТ(
		РассчитываемаяТаблица,
		ИзвестныеЗначенияПоказателей,
		Организация,
		МесяцРасчета,
		ИзвестныеЗначенияПоказателейПоОснованиям);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ОбъектКлючИЗначение Из ОписанияРассчитываемыхОбъектов Цикл
		
		Для Каждого ОписаниеСотрудникаКлючИЗначение Из ОбъектКлючИЗначение.Значение Цикл
			
			Сотрудник = СоответствиеСотрудников.Получить(ОписаниеСотрудникаКлючИЗначение.Ключ);
			РассчитанныеСтроки = РассчитываемаяТаблица.Скопировать(Новый Структура("Сотрудник", Сотрудник));
			
			НачисленияСотрудника = ОписаниеСотрудникаКлючИЗначение.Значение.Начисления;
			НовыеРазмеры = Новый Массив;
			Для Каждого ОписаниеНачисления Из НачисленияСотрудника Цикл
				
				Отбор = Новый Структура("Начисление, ДокументОснование", ОписаниеНачисления.Начисление, ОписаниеНачисления.ДокументОснование);
				СтрокиПоНачислению = РассчитанныеСтроки.НайтиСтроки(Отбор);
				Если СтрокиПоНачислению.Количество() > 0 
					И ОписаниеНачисления.Размер <> СтрокиПоНачислению[0].Результат Тогда
					
					НовыеРазмеры.Добавить(
						Новый Структура("Начисление, ДокументОснование, Размер", 
						ОписаниеНачисления.Начисление,
						СтрокиПоНачислению[0].ДокументОснование,
						СтрокиПоНачислению[0].Результат));
						
				КонецЕсли; 
				
			КонецЦикла;
			
			Для Каждого НовыйРазмер Из НовыеРазмеры Цикл
				Отбор = Новый Структура("Начисление, ДокументОснование", НовыйРазмер.Начисление, НовыйРазмер.ДокументОснование);
				СтрокиНачисления = НачисленияСотрудника.НайтиСтроки(Отбор);
				Если СтрокиНачисления.Количество() > 0 Тогда 
					СтрокиНачисления[0].Размер = НовыйРазмер.Размер;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьФОТСотрудникаВФормеДокументаСНесколькимиПозициями(Форма, ДатаРасчета, ОписаниеТаблицыНачислений) Экспорт
	
	Объект = Форма.Объект;
	
	РассчитываемыеОбъекты = Новый Соответствие;
	
	Сотрудники = Новый Соответствие;
	
	ИмяПоляФиксРасчет = ОписаниеТаблицыНачислений.ИмяРеквизитаФиксРасчет;
	ИмяРеквизитаВидРасчета = ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета;
	
	ПутьКДанным = ОписаниеТаблицыНачислений.ПутьКДанным;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	
	МассивНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеНачислений, ИмяРеквизитаВидРасчета, Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	
	Если Форма[ИмяПоляФиксРасчет] <> Неопределено Тогда
		СоответствиеФиксРасчет = Новый Соответствие(Форма[ИмяПоляФиксРасчет]);
	Иначе
		СоответствиеФиксРасчет = Неопределено;
	КонецЕсли;
	
	Для Каждого Сотрудник Из Форма.СотрудникиДокумента Цикл
		
		ОписаниеСотрудника = Новый Структура;
		ОписаниеСотрудника.Вставить("Организация", Объект.Организация);
		ОписаниеСотрудника.Вставить("ДатаРасчета", ДатаРасчета);
		ОписаниеСотрудника.Вставить("Начисления", ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
		ОписаниеСотрудника.Вставить("Показатели", ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
		ОписаниеСотрудника.Вставить("ФиксРасчет", Новый Соответствие);
		
		Если СоответствиеФиксРасчет <> Неопределено Тогда
			ФиксРасчетСотрудника = СоответствиеФиксРасчет.Получить(Сотрудник);
			Если ФиксРасчетСотрудника <> Неопределено Тогда
				ОписаниеСотрудника.ФиксРасчет = ФиксРасчетСотрудника;
			КонецЕсли;
		КонецЕсли; 
		
		ПересчетТолькоЗависимыхНачислений = ОписаниеСотрудника.ФиксРасчет.Количество() > 0;
		
		СтрокиНачислений = ДанныеНачислений.НайтиСтроки(Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник, Сотрудник));
		Для Каждого СтрокаНачисления Из СтрокиНачислений Цикл
			
			Если СтрокаНачисления.Свойство("Действие")
				И СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(СтрокаНачисления[ИмяРеквизитаВидРасчета]) Тогда
				Продолжить;
			КонецЕсли; 
			
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления[ИмяРеквизитаВидРасчета]);
			
			Если ИнфоОВидеРасчета.ЯвляетсяЛьготой И Не ИнфоОВидеРасчета.ЛьготаУчитываетсяПриРасчетеЗарплаты Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ПересчетТолькоЗависимыхНачислений И НЕ ИнфоОВидеРасчета.ТребуетсяРасчетБазы Тогда
				ОписаниеСотрудника.ФиксРасчет.Вставить(СтрокаНачисления[ИмяРеквизитаВидРасчета], Истина);
			КонецЕсли; 
			
			Если ИнфоОВидеРасчета.Рассчитывается Тогда
				Размер = СтрокаНачисления.Размер;
			Иначе
				Размер = СтрокаНачисления.Значение1;
			КонецЕсли;
			
			ДокументОснование = Неопределено;
			Если ЗначениеЗаполнено(ОписаниеТаблицыНачислений.ИмяРеквизитаДокументОснование) Тогда 
				ДокументОснование = СтрокаНачисления[ОписаниеТаблицыНачислений.ИмяРеквизитаДокументОснование];
			КонецЕсли;
			
			ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
			ДанныеНачисления.Начисление = СтрокаНачисления[ИмяРеквизитаВидРасчета];
			ДанныеНачисления.ДокументОснование = ДокументОснование;
			ДанныеНачисления.Размер = Размер;
			
			Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыНачислений) Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаНачисления["Показатель" + НомерПоказателя])
					ИЛИ НЕ ЗначениеЗаполнено(СтрокаНачисления["Значение" + НомерПоказателя]) Тогда
					Прервать;
				КонецЕсли; 
				
				ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
				ДанныеПоказателя.Показатель = СтрокаНачисления["Показатель" + НомерПоказателя];
				ДанныеПоказателя.ДокументОснование = ДокументОснование;
				ДанныеПоказателя.Значение = СтрокаНачисления["Значение" + НомерПоказателя];
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
			
			ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДаннымПоказателей);
			
			СтрокиДополнительныхПоказателей = ДанныеПоказателей.НайтиСтроки(Новый Структура(
				ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник + "," + ОписаниеТаблицыНачислений.ИмяРеквизитаИдентификаторСтроки, Сотрудник, 0));
				
			Для Каждого СтрокаСДополнительнымПоказателем Из СтрокиДополнительныхПоказателей Цикл
				ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
				ДанныеПоказателя.Показатель = СтрокаСДополнительнымПоказателем.Показатель;
				ДанныеПоказателя.ДокументОснование = Неопределено;
				ДанныеПоказателя.Значение = СтрокаСДополнительнымПоказателем.Значение;
			КонецЦикла;
			
		КонецЕсли; 
		
		Сотрудники.Вставить(Сотрудник, ОписаниеСотрудника);
		
		РассчитываемыеОбъекты.Вставить(Объект.Ссылка, Сотрудники);
		
	КонецЦикла;
	
	// Расчет ФОТ
	РассчитатьФОТСотрудников(РассчитываемыеОбъекты, Объект.Организация, ДатаРасчета);
	
	// Заполнение документа результатами расчета.
	ОписаниеОбъекта = РассчитываемыеОбъекты.Получить(Объект.Ссылка);
	Для Каждого СотрудникСНачислениями Из ОписаниеОбъекта Цикл
		
		Сотрудник = СотрудникСНачислениями.Ключ;
		ОписаниеСотрудника = СотрудникСНачислениями.Значение;
		
		Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Начисления Цикл
			
			Отбор = Новый Структура(ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник + "," + ОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета, Сотрудник, ОписаниеНачисления.Начисление);
			Если ЗначениеЗаполнено(ОписаниеТаблицыНачислений.ИмяРеквизитаДокументОснование) Тогда 
				Отбор.Вставить(ОписаниеТаблицыНачислений.ИмяРеквизитаДокументОснование, ОписаниеНачисления.ДокументОснование);
			КонецЕсли;
			
			СтрокиДокумента = ДанныеНачислений.НайтиСтроки(Отбор);
			Если СтрокиДокумента.Количество() > 0 Тогда
				СтрокиДокумента[0].Размер = ОписаниеНачисления.Размер;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма[ИмяПоляФиксРасчет] = Неопределено;
	
КонецПроцедуры

Процедура РассчитатьФОТВФормеСОднимСотрудником(Форма, Сотрудник, Организация, ДатаСобытия, ОписаниеТаблицыВидовРасчета, ГрафикРаботы = Неопределено, Подразделение = Неопределено, КоличествоСтавок = 0) Экспорт
	
	// Подготовка к расчету ФОТ
	РассчитываемыеОбъекты = Новый Соответствие;
	
	Сотрудники = Новый Соответствие;
	
	ОписаниеСотрудника = Новый Структура;
	ОписаниеСотрудника.Вставить("ДатаРасчета", ДатаСобытия);
	ОписаниеСотрудника.Вставить("Организация", Организация);
	ОписаниеСотрудника.Вставить("Подразделение", Подразделение);
	ОписаниеСотрудника.Вставить("ГрафикРаботы", ГрафикРаботы);
	ОписаниеСотрудника.Вставить("КоличествоСтавок", КоличествоСтавок);
	ОписаниеСотрудника.Вставить("Начисления", ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
	ОписаниеСотрудника.Вставить("Показатели", ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
	ОписаниеСотрудника.Вставить("ФиксРасчет", Новый Соответствие);
	
	ИмяПоляФиксРасчет = ОписаниеТаблицыВидовРасчета.ИмяРеквизитаФиксРасчет;
	
	ПересчетТолькоЗависимыхНачислений = Ложь;
	Если Форма[ИмяПоляФиксРасчет] <> Неопределено Тогда
		
		СоответствиеФиксРасчет = Новый Соответствие(Форма[ИмяПоляФиксРасчет]);
		ОписаниеСотрудника.Вставить("ФиксРасчет", СоответствиеФиксРасчет);
		ПересчетТолькоЗависимыхНачислений = СоответствиеФиксРасчет.Количество() > 0;
		
	КонецЕсли;
	
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
	
	МассивНачислений = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеНачислений, ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета, Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если ЗарплатаКадрыРасширенныйКлиентСервер.ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицыВидовРасчета) Тогда
			
			Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.ПустаяСсылка()
				И СтрокаНачисления.Свойство("ДействующийВидРасчета")
				И Не СтрокаНачисления.ДействующийВидРасчета Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаНачисления.Свойство("ДатаНачала")
			И ЗначениеЗаполнено(СтрокаНачисления.ДатаНачала)
			И СтрокаНачисления.ДатаНачала <> НачалоДня(ДатаСобытия) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета]);
		
		Если ИнфоОВидеРасчета.ЯвляетсяЛьготой И Не ИнфоОВидеРасчета.ЛьготаУчитываетсяПриРасчетеЗарплаты Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ПересчетТолькоЗависимыхНачислений И НЕ ИнфоОВидеРасчета.ТребуетсяРасчетБазы Тогда
			ОписаниеСотрудника.ФиксРасчет.Вставить(СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета], Истина);
		КонецЕсли;
		
		Если ИнфоОВидеРасчета.Рассчитывается Тогда
			Размер = СтрокаНачисления.Размер;
		Иначе
			Размер = СтрокаНачисления.Значение1;
		КонецЕсли;
		
		ДокументОснование = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование) Тогда 
			ДокументОснование = СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование];
		КонецЕсли;
		
		ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
		ДанныеНачисления.Начисление = СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета];
		ДанныеНачисления.ДокументОснование = ДокументОснование;
		ДанныеНачисления.Размер = Размер;
		
		Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета) Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаНачисления["Показатель" + НомерПоказателя])
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаНачисления["Значение" + НомерПоказателя]) Тогда
				Прервать;
			КонецЕсли;
			
			ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
			ДанныеПоказателя.Показатель = СтрокаНачисления["Показатель" + НомерПоказателя];
			ДанныеПоказателя.ДокументОснование = ДокументОснование;
			ДанныеПоказателя.Значение = СтрокаНачисления["Значение" + НомерПоказателя];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		
		ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей);
		СтрокиДополнительныхПоказателей = ДанныеПоказателей.НайтиСтроки(Новый Структура(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаИдентификаторСтроки, 0));
		
		Для Каждого СтрокаСДополнительнымПоказателем Из СтрокиДополнительныхПоказателей Цикл
			ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
			ДанныеПоказателя.Показатель = СтрокаСДополнительнымПоказателем.Показатель;
			ДанныеПоказателя.ДокументОснование = Неопределено;
			ДанныеПоказателя.Значение = СтрокаСДополнительнымПоказателем.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыВидовРасчета) Тогда
		
		Если ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма) Тогда
			
			ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
			ДанныеНачисления.Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность");
			ДанныеНачисления.ДокументОснование = Неопределено;
			ДанныеНачисления.Размер = 0;
			
			ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
			ДанныеПоказателя.Показатель = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
			ДанныеПоказателя.ДокументОснование = Неопределено;
			ДанныеПоказателя.Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность");
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Сотрудники.Вставить(Сотрудник, ОписаниеСотрудника);
	
	Ссылка = Новый УникальныйИдентификатор;
	РассчитываемыеОбъекты.Вставить(Ссылка, Сотрудники);
	
	// Расчет ФОТ
	РассчитатьФОТСотрудников(РассчитываемыеОбъекты, Организация, ДатаСобытия);
	
	// Заполнение документа результатами расчета.
	ОписаниеОбъекта = РассчитываемыеОбъекты.Получить(Ссылка);
	ОписаниеСотрудника = ОписаниеОбъекта.Получить(Сотрудник);
	
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
	
	УстановитьМодифицированность = Ложь;
	Для Каждого ОписаниеНачисления Из ОписаниеСотрудника.Начисления Цикл
		
		Отбор = Новый Структура(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета, ОписаниеНачисления.Начисление);
		Если ЗначениеЗаполнено(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование) Тогда 
			Отбор.Вставить(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование, ОписаниеНачисления.ДокументОснование);
		КонецЕсли;
		
		СтрокиДокумента = ДанныеНачислений.НайтиСтроки(Отбор);
		Если СтрокиДокумента.Количество() > 0 Тогда
			
			Для каждого СтрокаДокумента Из СтрокиДокумента Цикл
				
				Если СтрокаДокумента.Свойство("ДатаНачала")
					И ЗначениеЗаполнено(СтрокаДокумента.ДатаНачала)
					И СтрокаДокумента.ДатаНачала <> НачалоДня(ДатаСобытия) Тогда
					
					Продолжить;
					
				Иначе
					
					СтароеЗначение = СтрокаДокумента.Размер;
					НовоеЗначение = ОписаниеНачисления.Размер;
					СтрокаДокумента.Размер = НовоеЗначение;
					
				КонецЕсли;
				
				
			КонецЦикла;
			
		Иначе
			
			СтароеЗначение = 0;
			НовоеЗначение = 0;
			Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыВидовРасчета) Тогда
				
				НовоеЗначение = ОписаниеНачисления.Размер;
				
				ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ОписаниеНачисления.Начисление);
				Если ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
					СтароеЗначение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность");
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность", НовоеЗначение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтароеЗначение <> НовоеЗначение Тогда
			УстановитьМодифицированность = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма[ИмяПоляФиксРасчет] = Неопределено;
	
	Если УстановитьМодифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьФОТ(ТаблицаНачислений, ИзвестныеЗначенияПоказателей, Организация, ДатаРасчета, ИзвестныеЗначенияПоказателейПоОснованиям = Неопределено) Экспорт
	
	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли; 
	
	ПараметрыРасчета = ДополнительныеПараметрыРасчетаНачислений();
	ПараметрыРасчета.Организация = Организация;
	ПараметрыРасчета.МесяцНачисления = НачалоМесяца(ДатаРасчета);
	ПараметрыРасчета.ДокументСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	ПараметрыРасчета.ИзвестныеЗначенияПоказателей = ИзвестныеЗначенияПоказателей;
	ПараметрыРасчета.ИзвестныеЗначенияПоказателейПоОснованиям = ИзвестныеЗначенияПоказателейПоОснованиям;
	ПараметрыРасчета.ВызыватьИсключение = Ложь;
	ПараметрыРасчета.АннулироватьЗапись = Истина;
	
	РассчитатьНачисления(ТаблицаНачислений, ПараметрыРасчета);
		
	Если Не ВнешняяТранзакция Тогда
		ОтменитьТранзакцию();
	КонецЕсли; 
	
КонецПроцедуры

Процедура РассчитатьДенежноеСодержание(ТаблицаНачислений, Организация, ДатаРасчета) Экспорт

	Если ТаблицаНачислений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли; 
	
	ПараметрыРасчета = ДополнительныеПараметрыРасчетаНачислений();
	ПараметрыРасчета.Организация = Организация;
	ПараметрыРасчета.МесяцНачисления = НачалоМесяца(ДатаРасчета);
	ПараметрыРасчета.ДокументСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	ПараметрыРасчета.ВызыватьИсключение = Ложь;
	ПараметрыРасчета.АннулироватьЗапись = Истина;
	
	РассчитатьНачисления(ТаблицаНачислений, ПараметрыРасчета);
		
	Если Не ВнешняяТранзакция Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФОТВДвиженияхЗагружаемогоДокумента(ДвиженияНачислений, ТабличнаяЧастьНачисления, ИмяРеквизитаСотрудник = "") Экспорт
	
	СтрокиВозвратныхДвижений = Новый Массив;
	
	Для каждого СтрокаДвиженияНачислений Из ДвиженияНачислений Цикл
		
		Если СтрокаДвиженияНачислений.ИспользуетсяПоОкончании И ЗначениеЗаполнено(СтрокаДвиженияНачислений.ДействуетДо) Тогда
			СтрокиВозвратныхДвижений.Добавить(СтрокаДвиженияНачислений);
		КонецЕсли; 
		
		Если НЕ СтрокаДвиженияНачислений.Используется Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Начисление", СтрокаДвиженияНачислений.Начисление);
		Если НЕ ПустаяСтрока(ИмяРеквизитаСотрудник) Тогда
			СтруктураПоиска.Вставить(ИмяРеквизитаСотрудник, СтрокаДвиженияНачислений.Сотрудник);
		КонецЕсли; 
		
		СтрокиДокумента = ТабличнаяЧастьНачисления.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДокумента.Количество() > 0 Тогда
			СтрокаДвиженияНачислений.Размер = СтрокиДокумента[0].Размер;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если СтрокиВозвратныхДвижений.Количество() > 0 Тогда
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ИзмеренияДаты.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
		
		Для каждого СтрокаВозвратныхДвижений Из СтрокиВозвратныхДвижений Цикл
			ЗаполнитьЗначенияСвойств(ИзмеренияДаты.Добавить(), СтрокаВозвратныхДвижений);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
			
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыйФОТ",
			Запрос.МенеджерВременныхТаблиц,
			Ложь,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
			
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.Период,
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Начисление,
			|	ВЫБОР
			|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL 
			|			ТОГДА ПлановыеНачисления.Размер
			|		ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
			|	КОНЕЦ КАК Размер
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
			|		ПО ПлановыеНачисления.Сотрудник = ПлановыйФОТ.Сотрудник
			|			И ПлановыеНачисления.Начисление = ПлановыйФОТ.Начисление
			|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТ.ДокументОснование
			|ГДЕ
			|	ПлановыеНачисления.Используется";
			
		ПредыдущиеЗначения = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаВозвратныхДвижений Из СтрокиВозвратныхДвижений Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Период", СтрокаВозвратныхДвижений.ДействуетДо);
			СтруктураПоиска.Вставить("Сотрудник", СтрокаВозвратныхДвижений.Сотрудник);
			СтруктураПоиска.Вставить("Начисление", СтрокаВозвратныхДвижений.Начисление);
			
			СтрокиПредыдущихЗначений = ПредыдущиеЗначения.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
				СтрокаВозвратныхДвижений.РазмерПоОкончании = СтрокиПредыдущихЗначений[0].Размер;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает рассчитывается ФОТ начисления автоматически или нет
//
// Параметры:
//		НачислениеОбъект - ПланВидовРасчета.Начисления - начисление (объект)
//
// Возвращаемое значение:
//		Булево - ИСТИНА, если ФОТ начисления рассчитывается автоматически, иначе ЛОЖЬ
//				ФОТ начисления рассчитывается автоматически если
//				- начисление постоянное,
//				- расчет базы за текущий период,
//				- в его формуле нет ни одного показателя, значение которого не подставляется при расчете ФОТ, 
//				то есть разовые показатели, не являющиеся показателями времени и расчетной базой
//
Функция ФОТРассчитываетсяАвтоматически(НачислениеОбъект) Экспорт
	
	ПостоянноеВыполнение = Новый Массив;
	ПостоянноеВыполнение.Добавить(Перечисления.СпособыВыполненияНачислений.ЕжемесячноПриОкончательномРасчете);
	ПостоянноеВыполнение.Добавить(Перечисления.СпособыВыполненияНачислений.ВЗаданныхМесяцахПриОкончательномРасчете);
	
	Если Не НачислениеОбъект.ВключатьВФОТ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПостоянноеВыполнение.Найти(НачислениеОбъект.СпособВыполненияНачисления) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НачислениеОбъект.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Показатели = ОбщегоНазначения.ВыгрузитьКолонку(НачислениеОбъект.Показатели, "Показатель", Истина);
	СпособыПрименения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Показатели, "СпособПримененияЗначений");
	
	ПоказателиЗаполняемыеПриРасчетеФОТ = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоказателиЗаполняемыеПриРасчетеФОТ, Справочники.ПоказателиРасчетаЗарплаты.ПоказателиУчетаВремени());
	ПоказателиЗаполняемыеПриРасчетеФОТ.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РасчетнаяБаза"));
	
	Для Каждого Показатель Из Показатели Цикл
		Если СпособыПрименения[Показатель] = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Разовое Тогда
			Если ПоказателиЗаполняемыеПриРасчетеФОТ.Найти(Показатель) = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает массив ссылок на план видов расчета Начисления, которые
// участвуют в формировании ФОТ
//
Функция НачисленияВходящиеВСоставФОТ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВключатьВФОТ";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция НачисленияДляКомандировкиВходящиеВСоставФОТ(ВидРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ПОМЕСТИТЬ ВТФОТ
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ВключатьВФОТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка
		|ПОМЕСТИТЬ ВТВытесняющиеся
		|ИЗ
		|	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФОТ КАК ФОТ
		|		ПО (ФОТ.Ссылка = Начисления.Ссылка)
		|ГДЕ
		|	Начисления.ВидРасчета = &ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.БазовыеВидыРасчета КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВытесняющиеся КАК Вытесняющиеся
		|		ПО (Вытесняющиеся.Ссылка = Начисления.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФОТ КАК ФОТ
		|		ПО (ФОТ.Ссылка = Начисления.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ВТВытесняющиеся КАК Начисления";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция РассчитатьФОТСотрудниковПоГрафикуМесяца(ОписанияРассчитываемыхОбъектов, Организация, МесяцРасчета, ДополнитьСоставНачислений = Ложь, НачисленияВходящиеВФОТ = Неопределено) Экспорт
	
	СоответствиеСотрудников = Новый Соответствие;
	
	// Таблица сотрудников
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("РассчитываемыйСотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаСотрудников.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСотрудников.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ТаблицаСотрудников.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	
	// Таблица начислений
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачислений.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаНачислений.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	ТаблицаНачислений.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	
	// Таблица показателей
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	
	Если НачисленияВходящиеВФОТ = Неопределено Тогда 
		НачисленияВходящиеВФОТ = НачисленияВходящиеВСоставФОТ();
	КонецЕсли;	
	
	Для каждого ОбъектКлючИЗначение Из ОписанияРассчитываемыхОбъектов Цикл
		
		Для каждого ОписаниеСотрудникаКлючИЗначение Из ОбъектКлючИЗначение.Значение Цикл
			
			//Если ОписаниеСотрудникаКлючИЗначение.Значение.Начисления.Количество() = 0 Тогда
			//	Продолжить;
			//КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(ОписаниеСотрудникаКлючИЗначение.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаСотрудника = ТаблицаСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСотрудника, ОписаниеСотрудникаКлючИЗначение.Значение);
			НоваяСтрокаСотрудника.Организация = Организация;
			НоваяСтрокаСотрудника.РассчитываемыйСотрудник = Справочники.Сотрудники.ПолучитьСсылку();
			НоваяСтрокаСотрудника.Сотрудник = ОписаниеСотрудникаКлючИЗначение.Ключ;
			НоваяСтрокаСотрудника.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
			
			СоответствиеСотрудников.Вставить(НоваяСтрокаСотрудника.Сотрудник, НоваяСтрокаСотрудника.РассчитываемыйСотрудник);
			
			ЗафиксированныеРазмеры = Неопределено;
			ОписаниеСотрудникаКлючИЗначение.Значение.Свойство("ФиксРасчет", ЗафиксированныеРазмеры);
			
			Для Каждого ОписаниеНачисления Из ОписаниеСотрудникаКлючИЗначение.Значение.Начисления Цикл
				
				Если ЗначениеЗаполнено(ОписаниеНачисления.Начисление) Тогда
					
					НоваяСтрокаНачисления = ТаблицаНачислений.Добавить();
					НоваяСтрокаНачисления.Сотрудник = НоваяСтрокаСотрудника.РассчитываемыйСотрудник;
					НоваяСтрокаНачисления.Начисление = ОписаниеНачисления.Начисление;
					НоваяСтрокаНачисления.ДокументОснование = ОписаниеНачисления.ДокументОснование;
					
					Если НачисленияВходящиеВФОТ.Найти(ОписаниеНачисления.Начисление) = Неопределено Тогда
						
						НоваяСтрокаНачисления.Размер = 0;
						НоваяСтрокаНачисления.ФиксРасчет = Истина;
						
					Иначе
						
						НоваяСтрокаНачисления.Размер = ОписаниеНачисления.Размер;
						
						Если ЗафиксированныеРазмеры <> Неопределено Тогда
							Если ЗафиксированныеРазмеры.Получить(ОписаниеНачисления.Начисление) = Истина Тогда
								НоваяСтрокаНачисления.ФиксРасчет = Истина;
							КонецЕсли; 
						КонецЕсли; 
						
					КонецЕсли;
					
				КонецЕсли; 
					
			КонецЦикла;
			
			Если ОписаниеСотрудникаКлючИЗначение.Значение.Свойство("Показатели") Тогда
				
				Для Каждого ОписаниеПоказателя Из ОписаниеСотрудникаКлючИЗначение.Значение.Показатели Цикл
					
					Если ЗначениеЗаполнено(ОписаниеПоказателя.Показатель) Тогда
						НоваяСтрокаПоказателя = ТаблицаПоказателей.Добавить();
						// Заполняется настоящий Сотрудник, по нему потом собираются значения показателей.
						НоваяСтрокаПоказателя.Сотрудник = НоваяСтрокаСотрудника.Сотрудник;
						НоваяСтрокаПоказателя.ДатаРасчета = НоваяСтрокаСотрудника.ДатаРасчета;
						НоваяСтрокаПоказателя.Показатель = ОписаниеПоказателя.Показатель;
						НоваяСтрокаПоказателя.ДокументОснование = ОписаниеПоказателя.ДокументОснование;
						НоваяСтрокаПоказателя.Значение = ОписаниеПоказателя.Значение;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", МесяцРасчета);
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	Запрос.УстановитьПараметр("НачисленияВходящиеВФОТ", НачисленияВходящиеВФОТ);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.ДатаРасчета КАК Период,
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.РассчитываемыйСотрудник,
		|	ТаблицаСотрудников.ФизическоеЛицо,
		|	ТаблицаСотрудников.Организация,
		|	ТаблицаСотрудников.Подразделение,
		|	ТаблицаСотрудников.ГрафикРаботы,
		|	ТаблицаСотрудников.КоличествоСтавок
		|ПОМЕСТИТЬ ВТТаблицаСотрудниковПредварительно
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.Начисление,
		|	ТаблицаНачислений.ДокументОснование,
		|	ТаблицаНачислений.Размер,
		|	ТаблицаНачислений.ФиксРасчет
		|ПОМЕСТИТЬ ВТТаблицаНачислений
		|ИЗ
		|	&ТаблицаНачислений КАК ТаблицаНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоказателей.ДатаРасчета КАК Период,
		|	ТаблицаПоказателей.Сотрудник,
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.ДокументОснование,
		|	ТаблицаПоказателей.Значение
		|ПОМЕСТИТЬ ВТТаблицаПоказателейПредварительно
		|ИЗ
		|	&ТаблицаПоказателей КАК ТаблицаПоказателей";
		
	Если ДополнитьСоставНачислений Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТТаблицаНачислений", "ПОМЕСТИТЬ ВТТаблицаНачисленийПредварительно");
	КонецЕсли; 
		
	Запрос.Выполнить();
	
	Если ДополнитьСоставНачислений Тогда
		
		ЗапросВТПлановыеНачисленияСотрудников = КадровыйУчетРасширенный.ЗапросВТПлановыеНачисленияСотрудников(Ложь, "ВТПлановыеНачисленияСотрудников", "ВТТаблицаСотрудниковПредварительно");
		ЗапросВТПлановыеНачисленияСотрудников.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросВТПлановыеНачисленияСотрудников.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаСотрудниковПредварительно.РассчитываемыйСотрудник КАК Сотрудник,
			|	ПлановыеНачисленияСотрудников.Начисление,
			|	ПлановыеНачисленияСотрудников.ДокументОснование,
			|	ПлановыеНачисленияСотрудников.Размер
			|ПОМЕСТИТЬ ВТПлановыеНачисленияРассчитываемыхСотрудников
			|ИЗ
			|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
			|		ПО ТаблицаСотрудниковПредварительно.Сотрудник = ПлановыеНачисленияСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаНачислений.Сотрудник,
			|	ТаблицаНачислений.Начисление,
			|	ТаблицаНачислений.ДокументОснование,
			|	ТаблицаНачислений.Размер,
			|	ТаблицаНачислений.ФиксРасчет
			|ПОМЕСТИТЬ ВТТаблицаНачислений
			|ИЗ
			|	ВТТаблицаНачисленийПредварительно КАК ТаблицаНачислений
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПлановыеНачисленияСотрудников.Сотрудник,
			|	ПлановыеНачисленияСотрудников.Начисление,
			|	ПлановыеНачисленияСотрудников.ДокументОснование,
			|	ПлановыеНачисленияСотрудников.Размер,
			|	ЛОЖЬ
			|ИЗ
			|	ВТПлановыеНачисленияРассчитываемыхСотрудников КАК ПлановыеНачисленияСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаНачисленийПредварительно КАК ТаблицаНачислений
			|		ПО ПлановыеНачисленияСотрудников.Сотрудник = ТаблицаНачислений.Сотрудник
			|			И ПлановыеНачисленияСотрудников.Начисление = ТаблицаНачислений.Начисление
			|			И ПлановыеНачисленияСотрудников.ДокументОснование = ТаблицаНачислений.ДокументОснование
			|ГДЕ
			|	ТаблицаНачислений.Начисление ЕСТЬ NULL ";
			
		Запрос.Выполнить();
		
	КонецЕсли; 
	
	ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТТаблицаСотрудниковПредварительно", "Сотрудник,Период");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "Подразделение,ГрафикРаботы,ДоляНеполногоРабочегоВремени,КоличествоСтавок", , Ложь);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТТаблицаСотрудниковПредварительно",
			"Сотрудник"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Период,
		|	ТаблицаСотрудников.РассчитываемыйСотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.ФизическоеЛицо,
		|	ТаблицаСотрудников.Организация,
		|	ВЫБОР
		|		КОГДА ТаблицаСотрудников.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА КадровыеДанныеСотрудников.Подразделение
		|		ИНАЧЕ ТаблицаСотрудников.Подразделение
		|	КОНЕЦ КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ТаблицаСотрудников.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|			ТОГДА КадровыеДанныеСотрудников.ГрафикРаботы
		|		ИНАЧЕ ТаблицаСотрудников.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ТаблицаСотрудников.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|				И ТаблицаСотрудников.КоличествоСтавок = 0
		|			ТОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ДоляНеполногоРабочегоВремени, 1)
		|		КОГДА ТаблицаСотрудников.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|						ТОГДА ВЫБОР
		|								КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|									ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					КОГДА ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|						ТОГДА ВЫБОР
		|								КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|									ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					КОГДА ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
		|						ТОГДА ВЫБОР
		|								КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|									ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|								КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|									ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|								ИНАЧЕ 1
		|							КОНЕЦ
		|					ИНАЧЕ ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(КадровыеДанныеСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|					ТОГДА ВЫБОР
		|							КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|								ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|							КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|								ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|							ИНАЧЕ 1
		|						КОНЕЦ
		|				КОГДА ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели = 1
		|					ТОГДА ВЫБОР
		|							КОГДА ТаблицаСотрудников.КоличествоСтавок <> 0
		|								ТОГДА ТаблицаСотрудников.КоличествоСтавок
		|							КОГДА ЕСТЬNULL(КадровыеДанныеСотрудников.КоличествоСтавок, 0) <> 0
		|								ТОГДА КадровыеДанныеСотрудников.КоличествоСтавок
		|							ИНАЧЕ 1
		|						КОНЕЦ
		|				ИНАЧЕ ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ДлительностьРабочейНедели / ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|			КОНЕЦ
		|	КОНЕЦ КАК ДоляНеполногоРабочегоВремени
		|ПОМЕСТИТЬ ВТТаблицаСотрудников
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ТаблицаСотрудников.Период = КадровыеДанныеСотрудников.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.РассчитываемыйСотрудник КАК Сотрудник,
		|	ТаблицаПоказателей.Показатель КАК Показатель,
		|	ТаблицаПоказателей.ДокументОснование КАК ДокументОснование,
		|	ТаблицаПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ ВТТаблицаПоказателей
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПоказателейПредварительно КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Сотрудник = ТаблицаПоказателей.Сотрудник
		|			И ТаблицаСотрудников.Период = ТаблицаПоказателей.Период
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.РассчитываемыйСотрудник,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование,
		|	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Значение
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников
		|		ПО ТаблицаСотрудников.Сотрудник = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Сотрудник
		|			И ТаблицаСотрудников.Период = ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПоказателейПредварительно КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Сотрудник = ТаблицаПоказателей.Сотрудник
		|			И ТаблицаСотрудников.Период = ТаблицаПоказателей.Период
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель = ТаблицаПоказателей.Показатель)
		|			И (ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.ДокументОснование = ТаблицаПоказателей.ДокументОснование)
		|ГДЕ
		|	ТаблицаПоказателей.Показатель ЕСТЬ NULL 
		|	И НЕ ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Показатель ЕСТЬ NULL ";
		
	Запрос.Выполнить();
	
	// Таблицы периодических показателей организации.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТТаблицаСотрудников",
			"Организация"),
		,
		"ВТЗначенияПериодическихПоказателейОрганизаций");
	
	// Таблицы периодических показателей подразделения.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТТаблицаСотрудников",
			"Подразделение"),
		,
		"ВТЗначенияПериодическихПоказателейПодразделений");
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК ДатаНачалаПериода,
		|	КОНЕЦПЕРИОДА(&Период, МЕСЯЦ) КАК ДатаОкончанияПериода
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|";
		
	ТаблицаГрафиков = Запрос.Выполнить().Выгрузить();
	
	УчетРабочегоВремени.СоздатьВТВремяПоГрафикам(ТаблицаГрафиков, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("ДоляНеполногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	
	Запрос.УстановитьПараметр("ВремяВДнях", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	Запрос.УстановитьПараметр("ОтработаноДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноДней"));
	Запрос.УстановитьПараметр("НормаДнейПоГрафикуПолногоРабочегоВремени", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	Запрос.УстановитьПараметр("НормаДней", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));
	Запрос.УстановитьПараметр("ВремяВДняхПоУмолчанию", 20);
		
	Запрос.УстановитьПараметр("ВремяВЧасах", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	Запрос.УстановитьПараметр("ОтработаноЧасов", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ОтработаноЧасов"));
	Запрос.УстановитьПараметр("НормаЧасов", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"));
	Запрос.УстановитьПараметр("ВремяВЧасахПоУмолчанию", 160);
	
	Запрос.УстановитьПараметр("КалендарныеДни", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДни"));
	Запрос.УстановитьПараметр("КалендарныеДниМесяца", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.КалендарныеДниМесяца"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	МАКСИМУМ(СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год) КАК ГодГрафикаРаботы,
		|	ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени КАК ГрафикПолногоРабочегоВремени,
		|	МАКСИМУМ(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.Год) КАК ГодГрафикаПолногоРабочегоВремени
		|ПОМЕСТИТЬ ВТПоследниеГодаСведенийГрафиковРаботы
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|			И (СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год <= ГОД(&Период))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени
		|		ПО (ВЫРАЗИТЬ(ТаблицаСотрудников.ГрафикРаботы КАК Справочник.ГрафикиРаботыСотрудников).ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.ГрафикРаботыСотрудников)
		|			И (СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.Год <= ГОД(&Период))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСотрудников.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов = 0
		|			ТОГДА &ВремяВЧасахПоУмолчанию
		|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов
		|	КОНЕЦ КАК СреднемесячноеЧислоЧасов,
		|	ВЫБОР
		|		КОГДА СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней = 0
		|			ТОГДА &ВремяВДняхПоУмолчанию
		|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней
		|	КОНЕЦ КАК СреднемесячноеЧислоДней,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоЧасов, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов) = 0
		|			ТОГДА &ВремяВЧасахПоУмолчанию
		|		ИНАЧЕ ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоЧасов, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов)
		|	КОНЕЦ КАК СреднемесячноеЧислоЧасовНорма,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоДней, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней) = 0
		|			ТОГДА &ВремяВДняхПоУмолчанию
		|		ИНАЧЕ ЕСТЬNULL(СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.СреднемесячноеЧислоДней, СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней)
		|	КОНЕЦ КАК СреднемесячноеЧислоДнейНормаПоГрафикуПолногоРабочегоВремени,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней, 0) = 0
		|			ТОГДА &ВремяВДняхПоУмолчанию
		|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней
		|	КОНЕЦ КАК СреднемесячноеЧислоДнейНорма,
		|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
		|			ТОГДА СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников.ГрафикПолногоРабочегоВремени
		|	КОНЕЦ КАК ГрафикРаботыНорма
		|ПОМЕСТИТЬ ВТСреднемесячныеЗначенияНормыВремени
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеГодаСведенийГрафиковРаботы КАК ПоследниеГодаСведенийГрафиковРаботы
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
		|			ПО ПоследниеГодаСведенийГрафиковРаботы.ГрафикРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников
		|				И ПоследниеГодаСведенийГрафиковРаботы.ГодГрафикаРаботы = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени
		|			ПО ПоследниеГодаСведенийГрафиковРаботы.ГрафикПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.ГрафикРаботыСотрудников
		|				И ПоследниеГодаСведенийГрафиковРаботы.ГодГрафикаПолногоРабочегоВремени = СреднемесячныеНормыВремениГрафикПолногоРабочегоВремени.Год
		|		ПО ТаблицаСотрудников.ГрафикРаботы = ПоследниеГодаСведенийГрафиковРаботы.ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаПоказателей.Показатель КАК Показатель,
		|	ТаблицаПоказателей.ДокументОснование КАК ДокументОснование,
		|	ТаблицаПоказателей.Значение КАК Значение
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаПоказателей КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Сотрудник = ТаблицаПоказателей.Сотрудник
		|			И (ТаблицаПоказателей.Значение <> 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаПоказателей.Показатель КАК Показатель,
		|	ТаблицаПоказателей.Значение КАК Значение
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейОрганизаций КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Организация = ТаблицаПоказателей.Организация
		|ГДЕ
		|	ТаблицаПоказателей.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаПоказателей.Показатель,
		|	ТаблицаПоказателей.Значение
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейПодразделений КАК ТаблицаПоказателей
		|		ПО ТаблицаСотрудников.Организация = ТаблицаПоказателей.Организация
		|			И ТаблицаСотрудников.Подразделение = ТаблицаПоказателей.Подразделение
		|ГДЕ
		|	ТаблицаПоказателей.Значение <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ДоляНеполногоРабочегоВремени,
		|	ТаблицаСотрудников.ДоляНеполногоРабочегоВремени
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	&ДоляНеполногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&КалендарныеДни,
		|	1
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	&КалендарныеДни <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&КалендарныеДниМесяца,
		|	1
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|ГДЕ
		|	&КалендарныеДниМесяца <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.НормаДнейПоГрафикуПолногоРабочегоВремени, &ВремяВДняхПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикам КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&НормаДнейПоГрафикуПолногоРабочегоВремени <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.НормаДней, &ВремяВДняхПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикам КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&НормаДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ОтработаноДней, &ВремяВДняхПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикам КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&ВремяВДнях <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ОтработаноДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ОтработаноДней, &ВремяВДняхПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикам КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&ОтработаноДней <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&НормаЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.НормаЧасов, &ВремяВЧасахПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикам КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&НормаЧасов <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ВремяВЧасах,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ОтработаноЧасов, &ВремяВЧасахПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикам КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&ВремяВЧасах <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	&ОтработаноЧасов,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.ОтработаноЧасов, &ВремяВЧасахПоУмолчанию)
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоГрафикам КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|ГДЕ
		|	&ОтработаноЧасов <> НЕОПРЕДЕЛЕНО
		|";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();	
	
	ИзвестныеЗначенияПоказателей = РезультатыЗапроса[3].Выгрузить();
	
	ИзвестныеЗначенияПоказателейПоОснованиям = Новый ТаблицаЗначений;
	ИзвестныеЗначенияПоказателейПоОснованиям.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзвестныеЗначенияПоказателейПоОснованиям.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ИзвестныеЗначенияПоказателейПоОснованиям.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	ИзвестныеЗначенияПоказателейПоОснованиям.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	ИзвестныеЗначенияПоказателейПоОснованиям.Индексы.Добавить("Сотрудник, ДокументОснование");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ИзвестныеЗначенияПоказателейПоОснованиям.Добавить(), Выборка);
	КонецЦикла;
	
	// Показатели зависящие от стажа.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.Показатель.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТПоказателиЗависящиеОтСтажа
		|ИЗ
		|	ВТТаблицаНачислений КАК ТаблицаНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ТаблицаНачислений.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаПоказателей КАК ТаблицаПоказателей
		|		ПО ТаблицаНачислений.Сотрудник = ТаблицаПоказателей.Сотрудник
		|			И (ТаблицаПоказателей.Показатель = НачисленияПоказатели.Показатель)
		|ГДЕ
		|	ТаблицаПоказателей.Показатель ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.РассчитываемыйСотрудник КАК РассчитываемыйСотрудник,
		|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК ДатаНачала,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.ВидСтажа
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО ТаблицаСотрудников.РассчитываемыйСотрудник = ПоказателиЗависящиеОтСтажа.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.РассчитываемыйСотрудник,
		|	&Период,
		|	ПоказателиЗависящиеОтСтажа.Показатель,
		|	ПоказателиЗависящиеОтСтажа.ВидСтажа
		|ИЗ
		|	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиЗависящиеОтСтажа КАК ПоказателиЗависящиеОтСтажа
		|		ПО ТаблицаСотрудников.РассчитываемыйСотрудник = ПоказателиЗависящиеОтСтажа.Сотрудник ГДЕ &Период <> НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ИсходныеДанные = ПустаяТаблицаИсходныеДанныеДляПолученияЗначенийПоказателейТипаЧислоЗависящихОтСтажа();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ИсходныеДанные.Добавить(), Выборка);
		КонецЦикла; 
		
		ПериодыДобавленныхПоказателей = Новый Соответствие;
		Результат = РезультатЗапросаЗначенияПоказателейТипаЧислоЗависящееОтСтажа(ИсходныеДанные);
		Если НЕ Результат.Пустой() Тогда
			
			ВыборкаПоЗначениям = Результат.Выбрать();
			
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл
				
				ВыборкаПоЗначениям.Сбросить();
				Если ВыборкаПоЗначениям.НайтиСледующий(Новый Структура("Сотрудник,Показатель", Выборка.Сотрудник, Выборка.Показатель)) Тогда
					
					ПериодыПоказателейСотрудника = ПериодыДобавленныхПоказателей.Получить(Выборка.РассчитываемыйСотрудник);
					Если ПериодыПоказателейСотрудника = Неопределено Тогда
						ПериодыПоказателейСотрудника = Новый Соответствие;
					КонецЕсли; 
					
					ПериодыПоказателя = ПериодыПоказателейСотрудника.Получить(ВыборкаПоЗначениям.Показатель);
					Если ПериодыПоказателя = Неопределено Тогда
						
						НоваяСтрока = ИзвестныеЗначенияПоказателей.Добавить();
						НоваяСтрока.Сотрудник = Выборка.РассчитываемыйСотрудник;
						НоваяСтрока.Показатель = ВыборкаПоЗначениям.Показатель;
						НоваяСтрока.Значение = ВыборкаПоЗначениям.ЗначениеПоказателя;
						
						ПериодыПоказателя = Новый Структура("Период,Строка", ВыборкаПоЗначениям.ДатаНачала, НоваяСтрока);
						
					Иначе
						
						Если ПериодыПоказателя.Период > ВыборкаПоЗначениям.ДатаНачала Тогда
							ПериодыПоказателя.Период = ВыборкаПоЗначениям.ДатаНачала;
							ПериодыПоказателя.Строка.Значение = ВыборкаПоЗначениям.ЗначениеПоказателя;
						КонецЕсли; 
						
					КонецЕсли;
					
					ПериодыПоказателейСотрудника.Вставить(ВыборкаПоЗначениям.Показатель, ПериодыПоказателя);
					ПериодыДобавленныхПоказателей.Вставить(Выборка.РассчитываемыйСотрудник, ПериодыПоказателейСотрудника);
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Создание таблицы расчета
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.Организация КАК Организация,
		|	ТаблицаСотрудников.Подразделение КАК Подразделение,
		|	ТаблицаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаСотрудников.ГрафикРаботы КАК ГрафикРаботы,
		|	ТаблицаСотрудников.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,
		|	ТаблицаНачислений.Начисление КАК Начисление,
		|	ТаблицаНачислений.ДокументОснование КАК ДокументОснование,
		|	ТаблицаНачислений.Размер КАК Результат,
		|	СреднемесячныеЗначенияНормыВремени.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
		|	НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(&Период, МЕСЯЦ) КАК ДатаОкончания,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1) КАК ВремяВДнях,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДнейНормаПоГрафикуПолногоРабочегоВремени, 1) КАК НормаДнейПоГрафикуПолногоРабочегоВремени,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоДней, 1) КАК НормаДней,
		|	ЕСТЬNULL(СреднемесячныеЗначенияНормыВремени.СреднемесячноеЧислоЧасовНорма, 1) КАК НормаЧасов,
		|	ВЫБОР
		|		КОГДА ТаблицаНачислений.Начисление НЕ В (&НачисленияВходящиеВФОТ)
		|			ТОГДА ИСТИНА
		|		КОГДА ТаблицаНачислений.Размер = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ТаблицаНачислений.ФиксРасчет
		|	КОНЕЦ КАК ФиксРасчет,
		|	0 КАК Значение1,
		|	0 КАК ИдентификаторСтрокиВидаРасчета,
		|	ИСТИНА КАК ФиксРасчетВремени
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСреднемесячныеЗначенияНормыВремени КАК СреднемесячныеЗначенияНормыВремени
		|		ПО ТаблицаСотрудников.ГрафикРаботы = СреднемесячныеЗначенияНормыВремени.ГрафикРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаНачислений КАК ТаблицаНачислений
		|		ПО ТаблицаСотрудников.Сотрудник = ТаблицаНачислений.Сотрудник
		|ГДЕ
		|	ТаблицаНачислений.Начисление В (&НачисленияВходящиеВФОТ)";
	
	ТекстЗапросовПоказателей = "";
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйПовтИсп.МаксимальноеКоличествоПоказателейИспользуемыхПриРасчете() Цикл
		ТекстЗапросовПоказателей = ТекстЗапросовПоказателей + Символы.ПС + "0 КАК Значение" + НомерПоказателя + ",";
	КонецЦикла;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "0 КАК Значение1,", СокрЛП(ТекстЗапросовПоказателей));
	
	РассчитываемаяТаблица = ПустаяТаблицаНачисления();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РассчитываемаяТаблица.Добавить(), Выборка);
	КонецЦикла; 
		
	УстановитьПривилегированныйРежим(Истина);
		
	РассчитатьФОТ(
		РассчитываемаяТаблица,
		ИзвестныеЗначенияПоказателей,
		Организация,
		МесяцРасчета,
		ИзвестныеЗначенияПоказателейПоОснованиям);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатыФОТ = Новый Структура;
	РезультатыФОТ.Вставить("Начисления", РассчитываемаяТаблица.Скопировать(,"Сотрудник,Начисление,Результат,ФиксРасчет")); 
	РезультатыФОТ.Вставить("ВремяВДнях", ИзвестныеЗначенияПоказателей.Скопировать(Новый Структура("Показатель", Справочники.ПоказателиРасчетаЗарплаты.ОтработаноДней)));
	РезультатыФОТ.Вставить("ВремяВЧасах", ИзвестныеЗначенияПоказателей.Скопировать(Новый Структура("Показатель", Справочники.ПоказателиРасчетаЗарплаты.ОтработаноЧасов))); 
	
	Для Каждого ОбъектКлючИЗначение Из ОписанияРассчитываемыхОбъектов Цикл
		
		Для Каждого ОписаниеСотрудникаКлючИЗначение Из ОбъектКлючИЗначение.Значение Цикл
			
			Сотрудник = СоответствиеСотрудников.Получить(ОписаниеСотрудникаКлючИЗначение.Ключ);
			
			Отбор = Новый Структура("Сотрудник", Сотрудник);
			СтрокиПоНачислению = РезультатыФОТ.Начисления.НайтиСтроки(Отбор);
			Для Каждого СтрокаТЗ ИЗ СтрокиПоНачислению Цикл
				СтрокаТЗ.Сотрудник = ОписаниеСотрудникаКлючИЗначение.Ключ;
			КонецЦикла;
			
			СтрокиПоДням = РезультатыФОТ.ВремяВДнях.НайтиСтроки(Отбор);
			Для Каждого СтрокаТЗ ИЗ СтрокиПоДням Цикл
				СтрокаТЗ.Сотрудник = ОписаниеСотрудникаКлючИЗначение.Ключ;
			КонецЦикла;

			СтрокиПоЧасам = РезультатыФОТ.ВремяВЧасах.НайтиСтроки(Отбор);
			Для Каждого СтрокаТЗ ИЗ СтрокиПоЧасам Цикл
				СтрокаТЗ.Сотрудник = ОписаниеСотрудникаКлючИЗначение.Ключ;
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
	
	Возврат РезультатыФОТ;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет ФОТ начислений, зависящих от стажа.

Процедура СоздатьВТНачисленияЗависящиеОтСтажа(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияПоказатели.Ссылка КАК Начисление
		|ПОМЕСТИТЬ ВТНачисленияЗависящиеОтСтажа
		|ИЗ
		|	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|ГДЕ
		|	НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|ИНДЕКСИРОВАТЬ ПО
		|	Начисление";
		
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ОписательВременныхТаблицДляСоздатьВТПериодыИзмененияПоказателейЗависящихОтСтажа(МенеджерВременныхТаблиц, ИмяВТОтборНачислений = "ВТОтборНачислений", ИмяВТПериодыИзмененияСтажа = "ВТПериодыИзмененияСтажа") Экспорт
	
	ОписательТаблиц = Новый Структура;
	ОписательТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательТаблиц.Вставить("ИмяВТОтборНачислений", ИмяВТОтборНачислений);
	ОписательТаблиц.Вставить("ИмяВТПериодыИзмененияСтажа", ИмяВТПериодыИзмененияСтажа);
	
	Возврат ОписательТаблиц;
	
КонецФункции

Процедура СоздатьВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка(ОписательТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Сотрудник,
		|	ПериодыИзмененияСтажа.ДатаСтажа КАК ДатаНачала
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияСтажа.Сотрудник
		|			И (ПериодыИзмененияСтажа.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Северный))
		|ГДЕ
		|	ВЫРАЗИТЬ(ОтборНачислений.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСтажа", ОписательТаблиц.ИмяВТПериодыИзмененияСтажа);
		
	ТабЛицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	ИмяВТПроцентСевернойНадбавкиСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТПроцентСевернойНадбавкиСотрудников");
	СоздатьВТПроцентСевернойНадбавкиСотрудниковПоИсходнымДанным(ОписательТаблиц.МенеджерВременныхТаблиц, ТабЛицаИсходныхДанных, ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	Запрос.УстановитьПараметр("НачислениеСевернаяНадбавка", РасчетЗарплаты.НачислениеСевернаяНадбавка());
	Запрос.УстановитьПараметр("ПоказательСевернаяНадбавка", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки КАК ЗначениеПоказателя,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение КАК ДостигнутоМаксимальноеЗначение,
		|	МАКСИМУМ(ПроцентСевернойНадбавкиПредыдущий.Период) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиПредыдущий
		|		ПО ПроцентСевернойНадбавкиСотрудников.Сотрудник = ПроцентСевернойНадбавкиПредыдущий.Сотрудник
		|			И ПроцентСевернойНадбавкиСотрудников.Период > ПроцентСевернойНадбавкиПредыдущий.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период,
		|	ПроцентСевернойНадбавкиСотрудников.ПроцентСевернойНадбавки,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ПроцентСевернойНадбавкиПредыдущий.ПроцентСевернойНадбавки КАК ЗначениеПоказателяПредыдущее,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение КАК ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами КАК ПроцентСевернойНадбавкиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроцентСевернойНадбавкиСотрудников КАК ПроцентСевернойНадбавкиПредыдущий
		|		ПО ПроцентСевернойНадбавкиСотрудников.Сотрудник = ПроцентСевернойНадбавкиПредыдущий.Сотрудник
		|			И ПроцентСевернойНадбавкиСотрудников.ПериодПредыдущий = ПроцентСевернойНадбавкиПредыдущий.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентСевернойНадбавкиСотрудников.Сотрудник КАК Сотрудник,
		|	&НачислениеСевернаяНадбавка КАК Начисление,
		|	ПроцентСевернойНадбавкиСотрудников.Период КАК Период,
		|	&ПоказательСевернаяНадбавка КАК Показатель,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя / ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее
		|	КОНЕЦ КАК КоэффициентПересчета,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя КАК ЗначениеПоказателя1,
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее,
		|	ПроцентСевернойНадбавкиСотрудников.ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТПериодыИзмененияЗначенийПоказателяСевернаяНадбавка
		|ИЗ
		|	ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими КАК ПроцентСевернойНадбавкиСотрудников
		|ГДЕ
		|	ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателя <> ЕСТЬNULL(ПроцентСевернойНадбавкиСотрудников.ЗначениеПоказателяПредыдущее, -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущимиПериодами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПроцентСевернойНадбавкиСотрудниковСПредыдущими";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПроцентСевернойНадбавкиСотрудников", ИмяВТПроцентСевернойНадбавкиСотрудников);
	
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура СоздатьВТПериодыИзмененияЗначенийСтажевыхПоказателей(ОписательТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтборНачислений.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.Показатель.ВидСтажа КАК ВидСтажа,
		|	ПериодыИзмененияСтажа.ДатаСтажа КАК ДатаНачала
		|ИЗ
		|	ВТОтборНачислений КАК ОтборНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ОтборНачислений.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ПериодыИзмененияСтажа
		|		ПО ОтборНачислений.Сотрудник = ПериодыИзмененияСтажа.Сотрудник
		|			И (НачисленияПоказатели.Показатель.ВидСтажа = ПериодыИзмененияСтажа.ВидСтажа)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыИзмененияСтажа", ОписательТаблиц.ИмяВТПериодыИзмененияСтажа);
	
	ТабЛицаИсходныхДанных = Запрос.Выполнить().Выгрузить();
	
	ИмяВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа");
	СоздатьВТЗначенияПоказателейТипаЧислоЗависящееОтСтажаПоИсходнымДанным(ОписательТаблиц.МенеджерВременныхТаблиц, ТабЛицаИсходныхДанных, ИмяВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение,
		|	МАКСИМУМ(ЗначенияПоказателейПредыдущие.ДатаНачала) КАК ДатаНачалаПредыдущая
		|ПОМЕСТИТЬ ВТЗначенияПоказателейСПредыдущимиДатами
		|ИЗ
		|	ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейПредыдущие
		|		ПО ЗначенияПоказателей.Сотрудник = ЗначенияПоказателейПредыдущие.Сотрудник
		|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейПредыдущие.Показатель
		|			И ЗначенияПоказателей.ДатаНачала > ЗначенияПоказателейПредыдущие.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.ДатаНачала,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателейПредыдущие.ЗначениеПоказателя КАК ЗначениеПоказателяПредыдущее,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение
		|ПОМЕСТИТЬ ВТЗначенияПоказателейСПредыдущими
		|ИЗ
		|	ВТЗначенияПоказателейСПредыдущимиДатами КАК ЗначенияПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа КАК ЗначенияПоказателейПредыдущие
		|		ПО ЗначенияПоказателей.Сотрудник = ЗначенияПоказателейПредыдущие.Сотрудник
		|			И ЗначенияПоказателей.Показатель = ЗначенияПоказателейПредыдущие.Показатель
		|			И ЗначенияПоказателей.ДатаНачалаПредыдущая = ЗначенияПоказателейПредыдущие.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДополняемыеНачисления.Сотрудник КАК Сотрудник,
		|	ДополняемыеНачисления.Начисление КАК Начисление,
		|	ЗначенияПоказателей.ДатаНачала КАК Период,
		|	ЗначенияПоказателей.Показатель,
		|	ЗначенияПоказателей.ЗначениеПоказателя,
		|	ЗначенияПоказателей.ДостигнутоМаксимальноеЗначение,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗначенияПоказателей.ЗначениеПоказателяПредыдущее, 0) = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЗначенияПоказателей.ЗначениеПоказателя / ЗначенияПоказателей.ЗначениеПоказателяПредыдущее
		|	КОНЕЦ КАК КоэффициентПересчета
		|ПОМЕСТИТЬ ВТПериодыИзмененияЗначенийСтажевыхПоказателей
		|ИЗ
		|	ВТОтборНачислений КАК ДополняемыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ДополняемыеНачисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейСПредыдущими КАК ЗначенияПоказателей
		|		ПО ДополняемыеНачисления.Сотрудник = ЗначенияПоказателей.Сотрудник
		|			И (НачисленияПоказатели.Показатель = ЗначенияПоказателей.Показатель)
		|ГДЕ
		|	ЗначенияПоказателей.ЗначениеПоказателя <> ЕСТЬNULL(ЗначенияПоказателей.ЗначениеПоказателяПредыдущее, -1)";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа", ИмяВТЗначенияПоказателейТипаЧислоЗависящееОтСтажа);
	
	ИмяВТЗначенияПоказателейСПредыдущимиДатами = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЗначенияПоказателейСПредыдущимиДатами");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТЗначенияПоказателейСПредыдущимиДатами", ИмяВТЗначенияПоказателейСПредыдущимиДатами);
	
	ИмяВТЗначенияПоказателейСПредыдущими = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЗначенияПоказателейСПредыдущими");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТЗначенияПоказателейСПредыдущими", ИмяВТЗначенияПоказателейСПредыдущими);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборНачислений", ОписательТаблиц.ИмяВТОтборНачислений);
	
	Запрос.Выполнить();
	
КонецПроцедуры


#Область ОбслуживаниеРасчетаПлановогоФОТ

Процедура ПересчитатьФОТПлановыхНачислений(ПараметрыВыполнения, АдресВоВременномХранилище = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Период", ПараметрыВыполнения.ДатаВыполненияПересчета);
	Запрос.УстановитьПараметр("Сотрудник", ПараметрыВыполнения.Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Период КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	&Сотрудник КАК Сотрудник,
		|	Начисления.Ссылка КАК Начисление,
		|	ИСТИНА КАК ДвижениеУдаляется
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления";
		
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДвиженияПлановогоФОТ(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", "Сотрудник");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановогоФОТПоРегистратору(НаборЗаписей) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = НаборЗаписей.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(ДатыИзмененияНачислений.Период) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ДатыИзмененияНачислений.Сотрудник,
		|	ДатыИзмененияНачислений.Начисление,
		|	ДатыИзмененияНачислений.ДвижениеУдаляется
		|ПОМЕСТИТЬ ВТСотрудникиСМинимальнымиПериодамиНачислений
		|ИЗ
		|	ВТДатыИзмененияНачислений КАК ДатыИзмененияНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыИзмененияНачислений.Сотрудник,
		|	ДатыИзмененияНачислений.Начисление,
		|	ДатыИзмененияНачислений.ДвижениеУдаляется";
		
	Запрос.Выполнить();
	
	СформироватьДвиженияПлановогоФОТ(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиСМинимальнымиПериодамиНачислений", "Сотрудник");
	
КонецПроцедуры

Процедура ОчиститьНаборыЗаписейПлановогоФОТ(МенеджерВременныхТаблиц, ИмяТаблицыОтборов, ИмяПоляСотрудник)
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ИмяТаблицыОтборов, "Начисление," + ИмяПоляСотрудник);
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыйФОТ",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТПлановыйФОТОчищаемый");
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыйФОТ.Период,
		|	ПлановыйФОТ.Сотрудник,
		|	ПлановыйФОТ.Начисление
		|ИЗ
		|	ВТПлановыйФОТОчищаемый КАК ПлановыйФОТ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ПлановыйФОТ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			НаборЗаписей.Отбор.Начисление.Установить(Выборка.Начисление);
			
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановогоФОТ(МенеджерВременныхТаблиц, ИмяТаблицыОтборов, ИмяПоляСотрудник, ВТНачисленияЗависящиеОтСтажаСоздана = Ложь, ДанныеНачисленийФормыДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	КатегорииНачисленийПособий = УчетПособийСоциальногоСтрахованияРасширенный.КатегорииНачисленийОплачивающихПособияПоУходуЗаРебенком();
	Запрос.УстановитьПараметр("КатегорииНачисленийПособий", КатегорииНачисленийПособий);
	
	// Очистка движений планового ФОТ
	ИмяВТОчищаемыеНачисления = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОчищаемыеНачисления");
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.ДатаНачала,
		|	ТаблицаНачислений.ДатаОкончания,
		|	ТаблицаНачислений.Сотрудник,
		|	ТаблицаНачислений.Начисление
		|ПОМЕСТИТЬ ВТОчищаемыеНачисления
		|ИЗ
		|	ВТТаблицаНачислений КАК ТаблицаНачислений
		|ГДЕ
		|	(ТаблицаНачислений.ДвижениеУдаляется
		|			ИЛИ ВЫРАЗИТЬ(ТаблицаНачислений.Начисление КАК ПланВидовРасчета.Начисления).ФОТНеРедактируется
		|				И ВЫРАЗИТЬ(ТаблицаНачислений.Начисление КАК ПланВидовРасчета.Начисления).ВключатьВФОТ
		|				И НЕ ВЫРАЗИТЬ(ТаблицаНачислений.Начисление КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.ДатаНачала,
		|	ТаблицаНачислений.ДатаОкончания,
		|	ТаблицаНачислений.Сотрудник,
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаНачислений КАК ТаблицаНачислений
		|		ПО Начисления.ВидРасчета = ТаблицаНачислений.Начисление
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаНачислений КАК ИзменяемаяТаблицаНачислений
		|		ПО Начисления.Ссылка = ИзменяемаяТаблицаНачислений.Начисление
		|ГДЕ
		|	Начисления.Ссылка.ФОТНеРедактируется
		|	И Начисления.Ссылка.ВключатьВФОТ
		|	И ИзменяемаяТаблицаНачислений.Начисление ЕСТЬ NULL 
		|	И НЕ Начисления.Ссылка.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииНачисленийПособий)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчищаемыеНачисления.Начисление
		|ИЗ
		|	ВТОчищаемыеНачисления КАК ОчищаемыеНачисления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаНачислений", ИмяТаблицыОтборов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНачислений.Сотрудник", "ТаблицаНачислений." + ИмяПоляСотрудник);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОчищаемыеНачисления", ИмяВТОчищаемыеНачисления);
	
	РезультатЗапроса =Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьНаборыЗаписейПлановогоФОТ(МенеджерВременныхТаблиц, ИмяВТОчищаемыеНачисления, ИмяПоляСотрудник);
	
	// Подготовка списка зависимых начислений
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	ТаблицаНачислений.Начисление
		|ИЗ
		|	ВТОчищаемыеНачисления КАК ТаблицаНачислений";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОчищаемыеНачисления", ИмяВТОчищаемыеНачисления);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНачислений.Сотрудник", "ТаблицаНачислений." + ИмяПоляСотрудник);
	
	ПерерасчитываемыеНачисленияСотрудников = Запрос.Выполнить().Выгрузить();
	
	Если Не ВТНачисленияЗависящиеОтСтажаСоздана Тогда
		СоздатьВТНачисленияЗависящиеОтСтажа(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	// Подготовка таблиц с периодами в которые возможно изменение ФОТ
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ИмяТаблицыОтборов, ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Начисление.ВключатьВФОТ", "=", Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "НЕ В", КатегорииНачисленийПособий);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТПлановыеНачисленияПредварительно");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПлановыйФОТ",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТПлановыйФОТ");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицыОтборов.ДатаНачала,
		|	ТаблицыОтборов.ДатаОкончания,
		|	ТаблицыОтборов.Сотрудник
		|ПОМЕСТИТЬ ВТТолькоСотрудникиТаблицыОтборов
		|ИЗ
		|	ВТТаблицыОтборов КАК ТаблицыОтборов";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицыОтборов.Сотрудник", "ТаблицыОтборов." + ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицыОтборов", ИмяТаблицыОтборов);
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТТолькоСотрудникиТаблицыОтборов", ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	// Получение периодов изменения графиков работы и кадровых данных сотрудников
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудниковПоследующие.Сотрудник,
		|	МИНИМУМ(ГрафикРаботыСотрудниковПоследующие.Период) КАК ПериодПоследующий
		|ПОМЕСТИТЬ ВТГрафикРаботыСотрудниковСПоследующимПериодом
		|ИЗ
		|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудниковПоследующие
		|		ПО ГрафикРаботыСотрудников.Сотрудник = ГрафикРаботыСотрудниковПоследующие.Сотрудник
		|			И ГрафикРаботыСотрудников.Период < ГрафикРаботыСотрудниковПоследующие.Период
		|			И ГрафикРаботыСотрудников.ГрафикРаботы <> ГрафикРаботыСотрудниковПоследующие.ГрафикРаботы
		|
		|СГРУППИРОВАТЬ ПО
		|	ГрафикРаботыСотрудников.Период,
		|	ГрафикРаботыСотрудниковПоследующие.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикРаботыСотрудниковСПоследующимПериодом.ПериодПоследующий КАК Период,
		|	ГрафикРаботыСотрудниковСПоследующимПериодом.Сотрудник,
		|	ГрафикРаботыСотрудников.Регистратор
		|ПОМЕСТИТЬ ВТПериодыИзмененияГрафиковРаботы
		|ИЗ
		|	ВТГрафикРаботыСотрудниковСПоследующимПериодом КАК ГрафикРаботыСотрудниковСПоследующимПериодом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|		ПО ГрафикРаботыСотрудниковСПоследующимПериодом.ПериодПоследующий = ГрафикРаботыСотрудников.Период
		|			И ГрафикРаботыСотрудниковСПоследующимПериодом.Сотрудник = ГрафикРаботыСотрудников.Сотрудник";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	МИНИМУМ(КадроваяИсторияСотрудниковПоследующие.Период) КАК ПериодПоследующий
		|ПОМЕСТИТЬ ВТКадроваяИсторияСотрудниковСПоследующимПериодом
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПоследующие
		|		ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковПоследующие.Сотрудник
		|			И КадроваяИсторияСотрудников.Период < КадроваяИсторияСотрудниковПоследующие.Период
		|			И КадроваяИсторияСотрудников.КоличествоСтавок <> КадроваяИсторияСотрудниковПоследующие.КоличествоСтавок
		|
		|СГРУППИРОВАТЬ ПО
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзмененияКадровыхДанных.ПериодПоследующий КАК Период,
		|	ПериодыИзмененияКадровыхДанных.Сотрудник,
		|	КадроваяИсторияСотрудников.Регистратор
		|ПОМЕСТИТЬ ВТПериодыИзмененияКадровыхДанных
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСПоследующимПериодом КАК ПериодыИзмененияКадровыхДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ПериодыИзмененияКадровыхДанных.ПериодПоследующий = КадроваяИсторияСотрудников.Период
		|			И ПериодыИзмененияКадровыхДанных.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИзмененияГрафиковРаботы КАК ПериодыИзмененияГрафиковРаботы
		|		ПО ПериодыИзмененияКадровыхДанных.ПериодПоследующий = ПериодыИзмененияГрафиковРаботы.Период
		|			И ПериодыИзмененияКадровыхДанных.Сотрудник = ПериодыИзмененияГрафиковРаботы.Сотрудник
		|ГДЕ
		|	ПериодыИзмененияГрафиковРаботы.Сотрудник ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзмененияГрафиковРаботы.Период,
		|	ПериодыИзмененияГрафиковРаботы.Сотрудник,
		|	ПериодыИзмененияГрафиковРаботы.Регистратор
		|ИЗ
		|	ВТПериодыИзмененияГрафиковРаботы КАК ПериодыИзмененияГрафиковРаботы";
	
	Запрос.Выполнить();
	
	// Получение начислений
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление
		|ПОМЕСТИТЬ ВТОтборНачислений
		|ИЗ
		|	ВТПлановыеНачисленияПредварительно КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияЗависящиеОтСтажа КАК НачисленияЗависящиеОтСтажа
		|		ПО ПлановыеНачисления.Начисление = НачисленияЗависящиеОтСтажа.Начисление";
	
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ТекущаяДатаСеанса()));
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Сотрудник,
		|	МИНИМУМ(ПлановыеНачисления.Период) КАК Период,
		|	&ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериодыДляСтажевыхПоказателей
		|ИЗ
		|	ВТПлановыеНачисленияПредварительно КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияЗависящиеОтСтажа КАК НачисленияЗависящиеОтСтажа
		|		ПО ПлановыеНачисления.Начисление = НачисленияЗависящиеОтСтажа.Начисление
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.Сотрудник";
	
	Запрос.Выполнить();
	
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериодыДляСтажевыхПоказателей");

	ОписательТаблиц = ОписательВременныхТаблицДляСоздатьВТПериодыИзмененияПоказателейЗависящихОтСтажа(
		Запрос.МенеджерВременныхТаблиц,
		"ВТОтборНачислений");
	
	СоздатьВТПериодыИзмененияЗначенийСтажевыхПоказателей(ОписательТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.ПериодЗаписи,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(ПлановыеНачисленияСледующие.ПериодЗаписи, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ)) КАК ПериодСледующейЗаписи
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСПериодомСледующейЗаписи
		|ИЗ
		|	ВТПлановыеНачисленияПредварительно КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияПредварительно КАК ПлановыеНачисленияСледующие
		|		ПО ПлановыеНачисления.Сотрудник = ПлановыеНачисленияСледующие.Сотрудник
		|			И ПлановыеНачисления.ПериодЗаписи < ПлановыеНачисленияСледующие.ПериодЗаписи
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисления.ПериодЗаписи,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.ПериодЗаписи,
		|	ЛОЖЬ КАК ВторичнаяЗапись,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер,
		|	ПлановыеНачисления.ДокументОснование,
		|	ПлановыеНачисления.Регистратор
		|ПОМЕСТИТЬ ВТПлановыеНачисления
		|ИЗ
		|	ВТПлановыеНачисленияПредварительно КАК ПлановыеНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзмененияЗначенийСтажевыхПоказателей.Период,
		|	ПериодыИзмененияЗначенийСтажевыхПоказателей.Период,
		|	ИСТИНА,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер,
		|	ПлановыеНачисления.ДокументОснование,
		|	ПлановыеНачисления.Регистратор
		|ИЗ
		|	ВТПлановыеНачисленияСПериодомСледующейЗаписи КАК ПлановыеНачисленияСПериодомСледующейЗаписи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыИзмененияЗначенийСтажевыхПоказателей КАК ПериодыИзмененияЗначенийСтажевыхПоказателей
		|		ПО ПлановыеНачисленияСПериодомСледующейЗаписи.Сотрудник = ПериодыИзмененияЗначенийСтажевыхПоказателей.Сотрудник
		|			И ПлановыеНачисленияСПериодомСледующейЗаписи.Начисление = ПериодыИзмененияЗначенийСтажевыхПоказателей.Начисление
		|			И ПлановыеНачисленияСПериодомСледующейЗаписи.ПериодЗаписи < ПериодыИзмененияЗначенийСтажевыхПоказателей.Период
		|			И (ПлановыеНачисленияСПериодомСледующейЗаписи.ПериодСледующейЗаписи > ПериодыИзмененияЗначенийСтажевыхПоказателей.Период
		|				ИЛИ ПлановыеНачисленияСПериодомСледующейЗаписи.ПериодСледующейЗаписи = ДАТАВРЕМЯ(1, 1, 1))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияПредварительно КАК ПлановыеНачисления
		|		ПО ПлановыеНачисленияСПериодомСледующейЗаписи.ПериодЗаписи = ПлановыеНачисления.ПериодЗаписи
		|			И ПлановыеНачисленияСПериодомСледующейЗаписи.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И ПлановыеНачисленияСПериодомСледующейЗаписи.Начисление = ПлановыеНачисления.Начисление
		|";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеНачисления.Период КАК Период,
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	ПлановыеНачисления.ДокументОснование КАК ДокументОснование,
		|	ПлановыеНачисления.Регистратор КАК Регистратор,
		|	ПлановыеНачисления.ВторичнаяЗапись КАК ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТПлановыеНачисленияДляОпределенияПериодов
		|ИЗ
		|	ВТПлановыеНачисления КАК ПлановыеНачисления
		|ГДЕ
		|	ПлановыеНачисления.Используется
		|	И ПлановыеНачисления.Период = ПлановыеНачисления.ПериодЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗначенияПоказателей.Период КАК Период,
		|	ЗначенияПоказателей.Сотрудник КАК Сотрудник,
		|	ЗначенияПоказателей.ДокументОснование КАК ДокументОснование,
		|	ЗначенияПоказателей.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТЗначенияПоказателейДляОпределенияПериодов
		|ИЗ
		|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
		|ГДЕ
		|	ЗначенияПоказателей.Период = ЗначенияПоказателей.ПериодЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ПлановыеНачисления.Период, ЗначенияПоказателей.Период) КАК Период,
		|	ЕСТЬNULL(ПлановыеНачисления.Сотрудник, ЗначенияПоказателей.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ПлановыеНачисления.ДокументОснование, ЗначенияПоказателей.ДокументОснование) КАК ДокументОснование,
		|	ЕСТЬNULL(ПлановыеНачисления.Регистратор, ЗначенияПоказателей.Регистратор) КАК Регистратор,
		|	ЕСТЬNULL(ПлановыеНачисления.ВторичнаяЗапись, ЛОЖЬ) КАК ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТВсеПериодыДляРасчетаПредварительно
		|ИЗ
		|	ВТПлановыеНачисленияДляОпределенияПериодов КАК ПлановыеНачисления
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейДляОпределенияПериодов КАК ЗначенияПоказателей
		|		ПО ПлановыеНачисления.Период = ЗначенияПоказателей.Период
		|			И ПлановыеНачисления.Сотрудник = ЗначенияПоказателей.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеПериодыДляРасчетаПредварительно.Период,
		|	ВсеПериодыДляРасчетаПредварительно.Сотрудник,
		|	ВсеПериодыДляРасчетаПредварительно.ДокументОснование,
		|	ВсеПериодыДляРасчетаПредварительно.Регистратор,
		|	МИНИМУМ(ВсеПериодыДляРасчетаПредварительно.ВторичнаяЗапись) КАК ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТВсеПериодыДляРасчета
		|ИЗ
		|	ВТВсеПериодыДляРасчетаПредварительно КАК ВсеПериодыДляРасчетаПредварительно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтборов КАК ТаблицаОтборов
		|		ПО ВсеПериодыДляРасчетаПредварительно.Сотрудник = ТаблицаОтборов.Сотрудник
		|			И ВсеПериодыДляРасчетаПредварительно.Период >= ТаблицаОтборов.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеПериодыДляРасчетаПредварительно.Период,
		|	ВсеПериодыДляРасчетаПредварительно.Сотрудник,
		|	ВсеПериодыДляРасчетаПредварительно.ДокументОснование,
		|	ВсеПериодыДляРасчетаПредварительно.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыИзмененияКадровыхДанных.Период,
		|	ПериодыИзмененияКадровыхДанных.Сотрудник,
		|	НЕОПРЕДЕЛЕНО,
		|	ПериодыИзмененияКадровыхДанных.Регистратор,
		|	ЛОЖЬ
		|ИЗ
		|	ВТПериодыИзмененияКадровыхДанных КАК ПериодыИзмененияКадровыхДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаОтборов КАК ТаблицаОтборов
		|		ПО ПериодыИзмененияКадровыхДанных.Сотрудник = ТаблицаОтборов.Сотрудник
		|			И ПериодыИзмененияКадровыхДанных.Период >= ТаблицаОтборов.ДатаНачала
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеПериодыДляРасчетаПредварительно КАК ВсеПериодыДляРасчета
		|		ПО ПериодыИзмененияКадровыхДанных.Сотрудник = ВсеПериодыДляРасчета.Сотрудник
		|			И ПериодыИзмененияКадровыхДанных.Период = ВсеПериодыДляРасчета.Период
		|ГДЕ
		|	ВсеПериодыДляРасчета.Сотрудник ЕСТЬ NULL ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаОтборов", "ВТТолькоСотрудникиТаблицыОтборов");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ИмяПоляСотрудник);
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВсеПериодыДляРасчета.Период КАК Период,
		|	ВсеПериодыДляРасчета.Сотрудник КАК Сотрудник,
		|	ВсеПериодыДляРасчета.ДокументОснование КАК ДокументОснование,
		|	ВсеПериодыДляРасчета.Регистратор КАК Регистратор,
		|	ВсеПериодыДляРасчета.ВторичнаяЗапись КАК ВторичнаяЗапись,
		|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК ПериодКадровойИстории,
		|	МАКСИМУМ(ГрафикРаботыСотрудников.Период) КАК ПериодГрафиковРаботы
		|ПОМЕСТИТЬ ВТВсеПериодыДляРасчетаСПериодамиКадровыхДанных
		|ИЗ
		|	ВТВсеПериодыДляРасчета КАК ВсеПериодыДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ВсеПериодыДляРасчета.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И ВсеПериодыДляРасчета.Период >= КадроваяИсторияСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|		ПО ВсеПериодыДляРасчета.Сотрудник = ГрафикРаботыСотрудников.Сотрудник
		|			И ВсеПериодыДляРасчета.Период >= ГрафикРаботыСотрудников.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеПериодыДляРасчета.Период,
		|	ВсеПериодыДляРасчета.Сотрудник,
		|	ВсеПериодыДляРасчета.ДокументОснование,
		|	ВсеПериодыДляРасчета.Регистратор,
		|	ВсеПериодыДляРасчета.ВторичнаяЗапись
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПериодыДляРасчета.Период КАК Период,
		|	ВсеПериодыДляРасчета.Сотрудник КАК Сотрудник,
		|	ВсеПериодыДляРасчета.ДокументОснование КАК ДокументОснование,
		|	ВсеПериодыДляРасчета.Регистратор КАК Регистратор,
		|	ВсеПериодыДляРасчета.ВторичнаяЗапись КАК ВторичнаяЗапись,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.Организация КАК Организация,
		|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
		|	КадроваяИсторияСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ГрафикРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТВсеПериодыДляРасчетаСКадровымиДанными
		|ИЗ
		|	ВТВсеПериодыДляРасчетаСПериодамиКадровыхДанных КАК ВсеПериодыДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ВсеПериодыДляРасчета.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И ВсеПериодыДляРасчета.ПериодКадровойИстории = КадроваяИсторияСотрудников.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
		|		ПО ВсеПериодыДляРасчета.Сотрудник = ГрафикРаботыСотрудников.Сотрудник
		|			И ВсеПериодыДляРасчета.ПериодГрафиковРаботы = ГрафикРаботыСотрудников.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ВсеПериодыДляРасчета.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(КадроваяИсторияСотрудников.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	// Применения доп. тарифов
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		"ВТВсеПериодыДляРасчетаСКадровымиДанными", "Сотрудник,Организация");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТПрименениеПоказателей");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВсеПериодыДляРасчетаСКадровымиДанными.Период,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.ГоловнаяОрганизация,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.Организация,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.Сотрудник,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.ФизическоеЛицо,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.Подразделение,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.ГрафикРаботы,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.КоличествоСтавок,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.ДокументОснование,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.Регистратор,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.ВторичнаяЗапись
		|ИЗ
		|	ВТВсеПериодыДляРасчетаСКадровымиДанными КАК ВсеПериодыДляРасчетаСКадровымиДанными
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВсеПериодыДляРасчетаСКадровымиДанными.Период,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.Организация,
		|	ВсеПериодыДляРасчетаСКадровымиДанными.Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		РазмерыФОТНачисленияСотрудников = Новый Соответствие;
		
		// Подготовка таблицы с предыдущими значениями ФОТ
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			ИмяТаблицыОтборов, ИмяПоляСотрудник);
		
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", "ДатаНачала");
		
		// Общие с плановыми начислениями параметры
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Начисление.ВключатьВФОТ", "=", Истина);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Начисление.КатегорияНачисленияИлиНеоплаченногоВремени", "НЕ В", КатегорииНачисленийПособий);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыйФОТ",
			МенеджерВременныхТаблиц,
			Ложь,
			ОписаниеФильтра,
			ПараметрыПостроения);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПлановыйФОТ.Сотрудник КАК Сотрудник,
			|	ПлановыйФОТ.Начисление,
			|	ПлановыйФОТ.ДокументОснование,
			|	ПлановыйФОТ.ВкладВФОТ КАК Размер
			|ИЗ
			|	ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаОтборов КАК ТаблицаОтборов
			|		ПО ПлановыйФОТ.Период = ТаблицаОтборов.ДатаНачала
			|			И ПлановыйФОТ.Сотрудник = ТаблицаОтборов.Сотрудник
			|			И ПлановыйФОТ.Начисление = ТаблицаОтборов.Начисление
			|ГДЕ
			|	НЕ ТаблицаОтборов.ДвижениеУдаляется
			|	И ПлановыйФОТ.Период <> ПлановыйФОТ.ПериодЗаписи
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаОтборов", ИмяТаблицыОтборов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборов.Сотрудник", "ТаблицаОтборов." + ИмяПоляСотрудник);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ФОТНачисленийСотрудника = ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ();
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ФОТНачисленийСотрудника.Добавить(), Выборка);
			КонецЦикла;
			
			РазмерыФОТНачисленияСотрудников.Вставить(Выборка.Сотрудник, ФОТНачисленийСотрудника);
			
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Период") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
				
				Запрос.УстановитьПараметр("Период", Выборка.Период);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	МАКСИМУМ(ПлановыеНачисления.ПериодЗаписи) КАК ПериодЗаписи,
					|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
					|	ПлановыеНачисления.Начисление,
					|	ПлановыеНачисления.ДокументОснование
					|ПОМЕСТИТЬ ВТМаксимальныеПериодыПлановыхНачислений
					|ИЗ
					|	ВТПлановыеНачисления КАК ПлановыеНачисления
					|ГДЕ
					|	ПлановыеНачисления.ПериодЗаписи <= &Период
					|
					|СГРУППИРОВАТЬ ПО
					|	ПлановыеНачисления.Сотрудник,
					|	ПлановыеНачисления.Начисление,
					|	ПлановыеНачисления.ДокументОснование
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	МаксимальныеПериодыПлановыхНачислений.ПериодЗаписи КАК ПериодЗаписиНачислений,
					|	МАКСИМУМ(ПлановыйФОТ.ПериодЗаписи) КАК ПериодЗаписи,
					|	ПлановыйФОТ.Сотрудник КАК Сотрудник,
					|	ПлановыйФОТ.Начисление,
					|	ПлановыйФОТ.ДокументОснование
					|ПОМЕСТИТЬ ВТМаксимальныеПериодыПлановыйФОТ
					|ИЗ
					|	ВТМаксимальныеПериодыПлановыхНачислений КАК МаксимальныеПериодыПлановыхНачислений
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыйФОТ КАК ПлановыйФОТ
					|		ПО (&Период >= ПлановыйФОТ.ПериодЗаписи)
					|			И МаксимальныеПериодыПлановыхНачислений.Сотрудник = ПлановыйФОТ.Сотрудник
					|			И МаксимальныеПериодыПлановыхНачислений.Начисление = ПлановыйФОТ.Начисление
					|			И МаксимальныеПериодыПлановыхНачислений.ДокументОснование = ПлановыйФОТ.ДокументОснование
					|ГДЕ
					|	ПлановыйФОТ.Начисление.Рассчитывается
					|
					|СГРУППИРОВАТЬ ПО
					|	МаксимальныеПериодыПлановыхНачислений.ПериодЗаписи,
					|	ПлановыйФОТ.Сотрудник,
					|	ПлановыйФОТ.Начисление,
					|	ПлановыйФОТ.ДокументОснование
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	&Период КАК Период,
					|	ПлановыеНачисления.ПериодЗаписи,
					|	ПлановыеНачисления.Сотрудник,
					|	ПлановыеНачисления.Начисление,
					|	ПлановыеНачисления.ДокументОснование,
					|	ЕСТЬNULL(ПлановыйФОТ.ВкладВФОТ, ПлановыеНачисления.Размер) КАК Размер,
					|	ПлановыеНачисления.Используется
					|ИЗ
					|	ВТМаксимальныеПериодыПлановыхНачислений КАК МаксимальныеПериодыПлановыхНачислений
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
					|		ПО МаксимальныеПериодыПлановыхНачислений.ПериодЗаписи = ПлановыеНачисления.ПериодЗаписи
					|			И МаксимальныеПериодыПлановыхНачислений.Сотрудник = ПлановыеНачисления.Сотрудник
					|			И МаксимальныеПериодыПлановыхНачислений.Начисление = ПлановыеНачисления.Начисление
					|			И МаксимальныеПериодыПлановыхНачислений.ДокументОснование = ПлановыеНачисления.ДокументОснование
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксимальныеПериодыПлановыйФОТ КАК МаксимальныеПериодыПлановыйФОТ
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыйФОТ КАК ПлановыйФОТ
					|			ПО МаксимальныеПериодыПлановыйФОТ.ПериодЗаписи = ПлановыйФОТ.ПериодЗаписи
					|				И МаксимальныеПериодыПлановыйФОТ.Сотрудник = ПлановыйФОТ.Сотрудник
					|				И МаксимальныеПериодыПлановыйФОТ.Начисление = ПлановыйФОТ.Начисление
					|				И МаксимальныеПериодыПлановыйФОТ.ДокументОснование = ПлановыйФОТ.ДокументОснование
					|		ПО МаксимальныеПериодыПлановыхНачислений.ПериодЗаписи = МаксимальныеПериодыПлановыйФОТ.ПериодЗаписиНачислений
					|			И МаксимальныеПериодыПлановыхНачислений.Сотрудник = МаксимальныеПериодыПлановыйФОТ.Сотрудник
					|			И МаксимальныеПериодыПлановыхНачислений.Начисление = МаксимальныеПериодыПлановыйФОТ.Начисление
					|			И МаксимальныеПериодыПлановыхНачислений.ДокументОснование = МаксимальныеПериодыПлановыйФОТ.ДокументОснование
					|ГДЕ
					|	ПлановыеНачисления.Используется";
				
				ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
				
				Запрос.Текст = "УНИЧТОЖИТЬ ВТМаксимальныеПериодыПлановыхНачислений;УНИЧТОЖИТЬ ВТМаксимальныеПериодыПлановыйФОТ";
				Запрос.Выполнить();
				
				Запрос.УстановитьПараметр("Организация", Выборка.Организация);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	МАКСИМУМ(ЗначенияПоказателей.ПериодЗаписи) КАК Период,
					|	ЗначенияПоказателей.Сотрудник,
					|	ЗначенияПоказателей.Организация,
					|	ЗначенияПоказателей.Показатель,
					|	ЗначенияПоказателей.ДокументОснование
					|ПОМЕСТИТЬ ВТМаксимальныеПериодыЗначенияПоказателей
					|ИЗ
					|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
					|ГДЕ
					|	ЗначенияПоказателей.ПериодЗаписи <= &Период
					|	И ЗначенияПоказателей.Организация = &Организация
					|
					|СГРУППИРОВАТЬ ПО
					|	ЗначенияПоказателей.Сотрудник,
					|	ЗначенияПоказателей.Организация,
					|	ЗначенияПоказателей.Показатель,
					|	ЗначенияПоказателей.ДокументОснование
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	&Период КАК Период,
					|	ЗначенияПоказателей.Организация,
					|	ЗначенияПоказателей.Сотрудник,
					|	ЗначенияПоказателей.Показатель,
					|	ЗначенияПоказателей.ДокументОснование,
					|	ЗначенияПоказателей.Значение
					|ИЗ
					|	ВТМаксимальныеПериодыЗначенияПоказателей КАК МаксимальныеПериодыЗначенияПоказателей
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПоказателей
					|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПоказателей КАК ПрименениеПоказателей
					|			ПО ЗначенияПоказателей.Период = ПрименениеПоказателей.Период
					|				И ЗначенияПоказателей.Организация = ПрименениеПоказателей.Организация
					|				И ЗначенияПоказателей.Сотрудник = ПрименениеПоказателей.Сотрудник
					|				И ЗначенияПоказателей.Показатель = ПрименениеПоказателей.Показатель
					|		ПО МаксимальныеПериодыЗначенияПоказателей.Период = ЗначенияПоказателей.ПериодЗаписи
					|			И МаксимальныеПериодыЗначенияПоказателей.Сотрудник = ЗначенияПоказателей.Сотрудник
					|			И МаксимальныеПериодыЗначенияПоказателей.Организация = ЗначенияПоказателей.Организация
					|			И МаксимальныеПериодыЗначенияПоказателей.Показатель = ЗначенияПоказателей.Показатель
					|			И МаксимальныеПериодыЗначенияПоказателей.ДокументОснование = ЗначенияПоказателей.ДокументОснование
					|ГДЕ
					|	ЕСТЬNULL(ПрименениеПоказателей.Применение, ИСТИНА)";
				
				ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
				
				Запрос.Текст = "УНИЧТОЖИТЬ ВТМаксимальныеПериодыЗначенияПоказателей";
				Запрос.Выполнить();
				
				// Подготовка к расчету ФОТ
				РассчитываемыеОбъекты = Новый Соответствие;
				
				Сотрудники = Новый Соответствие;
				
				ФизическиеЛицаСотрудников = Новый Соответствие;
				ГоловныеОрганизацииСотрудников = Новый Соответствие;
				Пока Выборка.Следующий() Цикл
					
					ОписаниеСотрудника = Новый Структура;
					ОписаниеСотрудника.Вставить("Организация", Выборка.Организация);
					ОписаниеСотрудника.Вставить("ДатаРасчета", Выборка.Период);
					ОписаниеСотрудника.Вставить("Подразделение", Выборка.Подразделение);
					ОписаниеСотрудника.Вставить("ГрафикРаботы", Выборка.ГрафикРаботы);
					ОписаниеСотрудника.Вставить("КоличествоСтавок", Выборка.КоличествоСтавок);
					ОписаниеСотрудника.Вставить("ФиксРасчет", Новый Соответствие);
					
					ОписаниеСотрудника.Вставить("Начисления", ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ());
					ОписаниеСотрудника.Вставить("Показатели", ПустаяТаблицаДанныеПоказателейДляРасчетаФОТ());
					
					ФОТНачисленийСотрудника = РазмерыФОТНачисленияСотрудников.Получить(Выборка.Сотрудник);
					Если ФОТНачисленийСотрудника = Неопределено Тогда
						ФОТНачисленийСотрудника = ПустаяТаблицаДанныеНачисленийДляРасчетаФОТ();
					КонецЕсли;
					
					КоличествоРассчитываемыхСтрокНачислений = 0;
					
					СтрокиНачислений = ТаблицаНачислений.НайтиСтроки(Новый Структура("Период,Сотрудник", Выборка.Период, Выборка.Сотрудник));
					Для каждого СтрокаНачисления Из СтрокиНачислений Цикл
						
						ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления.Начисление);
						
						Если ИнфоОВидеРасчета.ЯвляетсяЛьготой И Не ИнфоОВидеРасчета.ЛьготаУчитываетсяПриРасчетеЗарплаты Тогда 
							Продолжить;
						КонецЕсли;
						
						Если СтрокаНачисления.Используется Тогда
							
							Если СтрокаНачисления.Период <> СтрокаНачисления.ПериодЗаписи Тогда 
								Отбор = Новый Структура("Начисление, ДокументОснование", СтрокаНачисления.Начисление, СтрокаНачисления.ДокументОснование);
								Если ФОТНачисленийСотрудника.НайтиСтроки(Отбор).Количество() = 0 Тогда
									ЗаполнитьЗначенияСвойств(ФОТНачисленийСотрудника.Добавить(), СтрокаНачисления);
								КонецЕсли;
							КонецЕсли;
							
							ДанныеНачисления = ОписаниеСотрудника.Начисления.Добавить();
							ДанныеНачисления.Начисление = СтрокаНачисления.Начисление;
							ДанныеНачисления.ДокументОснование = СтрокаНачисления.ДокументОснование;
							
							СтруктураПоискаРассчитываемыхНачислений = Новый Структура;
							СтруктураПоискаРассчитываемыхНачислений.Вставить("Сотрудник", Выборка.Сотрудник);
							СтруктураПоискаРассчитываемыхНачислений.Вставить("Начисление", СтрокаНачисления.Начисление);
							
							НайденныеСтроки = ПерерасчитываемыеНачисленияСотрудников.НайтиСтроки(СтруктураПоискаРассчитываемыхНачислений);
							НачислениеПерерасчитывается = НайденныеСтроки.Количество() > 0;
							
							Если ИнфоОВидеРасчета.Рассчитывается Тогда
								
								Если НачислениеПерерасчитывается Тогда
									ДанныеНачисления.Размер = 0;
								Иначе
									ДанныеНачисления.Размер = СтрокаНачисления.Размер;
									ОписаниеСотрудника.ФиксРасчет.Вставить(СтрокаНачисления.Начисление, Истина);
								КонецЕсли;
								
								КоличествоРассчитываемыхСтрокНачислений = КоличествоРассчитываемыхСтрокНачислений + 1;
								Если ДанныеНачисленийФормыДокумента <> Неопределено Тогда
									
									СтруктураПоиска = Новый Структура;
									СтруктураПоиска.Вставить("Период", Выборка.Период);
									СтруктураПоиска.Вставить("Начисление", ДанныеНачисления.Начисление);
									
									СтрокиНачисленийДокумента = ДанныеНачисленийФормыДокумента.НайтиСтроки(СтруктураПоиска);
									Если СтрокиНачисленийДокумента.Количество() > 0 Тогда
										
										ДанныеНачисления.Размер = СтрокиНачисленийДокумента[0].Размер;
										ОписаниеСотрудника.ФиксРасчет.Вставить(СтрокаНачисления.Начисление, Истина);
										КоличествоРассчитываемыхСтрокНачислений = КоличествоРассчитываемыхСтрокНачислений - 1;
										
									КонецЕсли;
									
								КонецЕсли;
								
							Иначе
								
								ДанныеНачисления.Размер = СтрокаНачисления.Размер;
								ОписаниеСотрудника.ФиксРасчет.Вставить(СтрокаНачисления.Начисление, Истина);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(Новый Структура("Период,Сотрудник,Организация", Выборка.Период, Выборка.Сотрудник, Выборка.Организация));
					Для каждого СтрокаПоказателя Из СтрокиПоказателей Цикл
						ДанныеПоказателя = ОписаниеСотрудника.Показатели.Добавить();
						ДанныеПоказателя.Показатель = СтрокаПоказателя.Показатель;
						ДанныеПоказателя.ДокументОснование = СтрокаПоказателя.ДокументОснование;
						ДанныеПоказателя.Значение = СтрокаПоказателя.Значение;
					КонецЦикла;
					
					РазмерыФОТНачисленияСотрудников.Вставить(Выборка.Сотрудник, ФОТНачисленийСотрудника);
					
					Сотрудники.Вставить(Выборка.Сотрудник, ОписаниеСотрудника);
					ФизическиеЛицаСотрудников.Вставить(Выборка.Сотрудник, Выборка.ФизическоеЛицо);
					ГоловныеОрганизацииСотрудников.Вставить(Выборка.Сотрудник, Выборка.ГоловнаяОрганизация);
					
				КонецЦикла;
				
				ИдентификаторДокумента = Новый УникальныйИдентификатор;
				РассчитываемыеОбъекты.Вставить(ИдентификаторДокумента, Сотрудники);
				
				// Расчет ФОТ
				Если КоличествоРассчитываемыхСтрокНачислений > 0 Тогда
					РассчитатьФОТСотрудников(РассчитываемыеОбъекты, Выборка.Организация, Выборка.Период);
				КонецЕсли;
				
				РасчитываемеСотрудники = РассчитываемыеОбъекты.Получить(ИдентификаторДокумента);
				Для каждого ОписаниеСотрудника Из РасчитываемеСотрудники Цикл
					
					Сотрудник = ОписаниеСотрудника.Ключ;
					НачисленияСотрудника = ОписаниеСотрудника.Значение.Начисления;
					ФОТНачисленийСотрудника = РазмерыФОТНачисленияСотрудников.Получить(Сотрудник);
					
					НаборЗаписей = РегистрыСведений.ПлановыйФОТ.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
					НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
					
					НаборЗаписей.Прочитать();
					ТаблицаНабора = НаборЗаписей.Выгрузить();
					
					ЗаписатьНабор = Ложь;
					Для каждого ОписаниеНачисления Из НачисленияСотрудника Цикл
						
						ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ОписаниеНачисления.Начисление);
						Если Не ИнфоОВидеРасчета.Рассчитывается Тогда
							Продолжить;
						КонецЕсли;
						
						ПрежнийРазмер = Неопределено;
						Если ФОТНачисленийСотрудника <> Неопределено Тогда 
							Отбор = Новый Структура("Начисление, ДокументОснование", ОписаниеНачисления.Начисление, ОписаниеНачисления.ДокументОснование);
							СтрокиФОТ = ФОТНачисленийСотрудника.НайтиСтроки(Отбор);
							Если СтрокиФОТ.Количество() > 0 Тогда 
								ПрежнийРазмер = СтрокиФОТ[0].Размер;
							КонецЕсли;
						КонецЕсли;
						
						Если ФОТНачисленийСотрудника = Неопределено Или ПрежнийРазмер <> ОписаниеНачисления.Размер Тогда
							
							СтрокиНабора = ТаблицаНабора.НайтиСтроки(Новый Структура("Начисление, ДокументОснование", ОписаниеНачисления.Начисление, ОписаниеНачисления.ДокументОснование));
							Если СтрокиНабора.Количество() > 0 Тогда
								Запись = СтрокиНабора[0];
							Иначе
								Запись = ТаблицаНабора.Добавить();
							КонецЕсли;
							
							Запись.Период = Выборка.Период;
							Запись.Сотрудник = Сотрудник;
							Запись.Начисление = ОписаниеНачисления.Начисление;
							Запись.ФизическоеЛицо = ФизическиеЛицаСотрудников.Получить(Запись.Сотрудник);
							Запись.ГоловнаяОрганизация = ГоловныеОрганизацииСотрудников.Получить(Запись.Сотрудник);
							Запись.ВкладВФОТ = ОписаниеНачисления.Размер;
							Запись.ДокументОснование = ОписаниеНачисления.ДокументОснование;
							Запись.Основание = Выборка.Регистратор;
							Запись.ВторичнаяЗапись = Выборка.ВторичнаяЗапись;
							
							Отбор = Новый Структура("Начисление, ДокументОснование", ОписаниеНачисления.Начисление, ОписаниеНачисления.ДокументОснование);
							СтрокиФОТ = ФОТНачисленийСотрудника.НайтиСтроки(Отбор);
							Если СтрокиФОТ.Количество() > 0 Тогда
								СтрокиФОТ[0].Размер = ОписаниеНачисления.Размер;
							Иначе
								ЗаполнитьЗначенияСвойств(ФОТНачисленийСотрудника.Добавить(), ОписаниеНачисления);
							КонецЕсли;
							
							ЗаписатьНабор = Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
					РазмерыФОТНачисленияСотрудников.Вставить(Сотрудник, ФОТНачисленийСотрудника);
					
					Если ЗаписатьНабор Тогда
						НаборЗаписей.Загрузить(ТаблицаНабора);
						НаборЗаписей.Записать();
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


////////////////////////////////////////////////////////////////////////////////
// Проверка периода действия в коллекциях начислений и удержаний.

// Создает структуру используемую для проверки правильности заполнения периода действия.
//						
//       ИмяРедактируемойТаблицы - Имя табличного поля формы, редактируемого в данный момент, используется при
//                                 подстановке значений из механизма контролируемых полей.
//
//       ИмяРеквизитаВидРасчета     - Строка. Имя свойства проверяемого объекта хранящего проверяемое начисление.
//
//       ИмяРеквизитаДатаНачала     - Строка. Имя свойства проверяемого объекта хранящего проверяемую дату начала.
//
//       ИмяРеквизитаДатаОкончания  - Строка. Имя свойства проверяемого объекта хранящего проверяемую дату окончания.
// 
//		 ОтменаРедактирования		- Признак того, что пользователь отказался от редактирования.
//
//		 Ссылка						- Ссылка на редактируемый объект.
//		 
// Возвращаемое значение:
//  Структура содержащая переданные параметры.
//
Функция ПараметрыПроверкиПериодаДействия() Экспорт
	ПараметрыПроверкиПериодаДействия = Новый Структура;
	ПараметрыПроверкиПериодаДействия.Вставить("ПутьКОбъекту", 						"Объект");
	ПараметрыПроверкиПериодаДействия.Вставить("Ссылка", 							Неопределено);
	Возврат ПараметрыПроверкиПериодаДействия
КонецФункции

// Создает структуру используемую для проверки правильности заполнения периода действия.
//						
//       ИмяРедактируемойТаблицы - Имя табличного поля формы, редактируемого в данный момент, используется при
//                                 подстановке значений из механизма контролируемых полей.
//
//       ИмяРеквизитаВидРасчета     - Строка. Имя свойства проверяемого объекта хранящего проверяемое начисление.
//
//       ИмяРеквизитаДатаНачала     - Строка. Имя свойства проверяемого объекта хранящего проверяемую дату начала.
//
//       ИмяРеквизитаДатаОкончания  - Строка. Имя свойства проверяемого объекта хранящего проверяемую дату окончания.
// 
//		 ОтменаРедактирования		- Признак того, что пользователь отказался от редактирования.
//
//		 Ссылка						- Ссылка на редактируемый объект.
//		 
// Возвращаемое значение:
//  Структура содержащая переданные параметры.
//
Функция ОписаниеКоллекцииДляПроверкиПериодаДействия(ИмяКоллекции, ПредставлениеКоллекции, ИмяРеквизитаВидРасчета = "Начисление", 
													ИмяРеквизитаДатаНачала = "ДатаНачала", ИмяРеквизитаДатаОкончания = "ДатаОкончания",
													ИмяРеквизитаНомерСтроки = "НомерСтроки") Экспорт
	ОписаниеКоллекции = Новый Структура;
	ОписаниеКоллекции.Вставить("ИмяКоллекции", 				ИмяКоллекции);
	ОписаниеКоллекции.Вставить("ПредставлениеКоллекции", 	ПредставлениеКоллекции);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаВидРасчета", 	ИмяРеквизитаВидРасчета);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаДатаНачала", 	ИмяРеквизитаДатаНачала);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаДатаОкончания",	ИмяРеквизитаДатаОкончания);
	ОписаниеКоллекции.Вставить("ИмяРеквизитаНомерСтроки",	ИмяРеквизитаНомерСтроки);
	Возврат ОписаниеКоллекции
КонецФункции

// Определяет правильность периода действия относительно начисления(или удержания) и при необходимости выводит
// сообщения пользователю.
//
// Параметры:
//									
//       ПараметрыПроверки 		- Структура полученная функцией ПериодНачисленияПараметрыПроверкиПериода().
//
//       КоллекцияНачислений    - Табличная часть, таблица или дерево значений. Должна содержать реквизиты дата начала,
//                                дата окончания, вид расчета.
//
//       Отказ     				- Булево 
//
Процедура ПроверитьПериодыДействияВСтрокахКоллекции(Объект, ПараметрыПроверки, ОписаниеКоллекции, Отказ) Экспорт
	ПериодДействияЗаполненПравильно = Истина;
	ТекстПредупреждения = "";
	
	ПроверяемаяКоллекция = Объект[ОписаниеКоллекции.ИмяКоллекции];	
	
	ИнфоОВидахРасчета = ИнформацияОНесколькихВидахРасчета(ПроверяемаяКоллекция.ВыгрузитьКолонку(ОписаниеКоллекции.ИмяРеквизитаВидРасчета));
	
	Для каждого Строка Из ПроверяемаяКоллекция Цикл
		
		// Получим значения для проверки.
		ВидРасчета 		= Строка[ОписаниеКоллекции.ИмяРеквизитаВидРасчета];
		ДатаНачала 		= Строка[ОписаниеКоллекции.ИмяРеквизитаДатаНачала];
		ДатаОкончания 	= Строка[ОписаниеКоллекции.ИмяРеквизитаДатаОкончания];
		
		Если НЕ (ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(ВидРасчета)) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВидаРасчета = ИнфоОВидахРасчета.Получить(ВидРасчета);
		
		РезультатПроверки = РасчетЗарплатыРасширенныйКлиентСервер.ПериодНачисленияЗаполненПравильно(ОписаниеВидаРасчета, ДатаНачала, ДатаОкончания);
		
		Если НЕ РезультатПроверки.ПериодНачисленияЗаполненПравильно Тогда
			
			Отказ = Истина;
			Если РезультатПроверки.ПериодБольшеМесяца Тогда
				ТекстПредупреждения = НСтр("ru='Период в строке %1 таблицы ""%2"" должен быть в пределах одного месяца';uk='Період в рядку %1 таблиці ""%2"" повинен бути в межах одного місяця'");	
			Иначе
				ТекстПредупреждения = НСтр("ru='Окончание периода в строке %1 таблицы ""%2"" должно быть позже его начала';uk='Закінчення періоду в рядку %1 таблиці ""%2"" повинно бути пізніше його початку'");
			КонецЕсли;
			
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, Строка.НомерСтроки, ОписаниеКоллекции.ПредставлениеКоллекции);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, ПараметрыПроверки.Ссылка, 
			ПараметрыПроверки.ПутьКОбъекту + "." + ОписаниеКоллекции.ИмяКоллекции + "[" + Строка(Строка[ОписаниеКоллекции.ИмяРеквизитаНомерСтроки] - 1) + "]"+ "." + ОписаниеКоллекции.ИмяРеквизитаДатаОкончания);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет правильность периода действия относительно начисления(или удержания) и при необходимости выводит
// сообщения пользователю.
//
// Параметры:
//									
//       ПараметрыПроверки 		- Структура полученная функцией ПериодНачисленияПараметрыПроверкиПериода().
//
//       КоллекцияНачислений    - Табличная часть, таблица или дерево значений. Должна содержать реквизиты дата начала,
//                                дата окончания, вид расчета.
//
//       Отказ     				- Булево 
//
Процедура ПроверитьПериодДействияВКоллекцияхНачислений(Объект, ПараметрыПроверки, ПроверяемыеКоллекции, Отказ) Экспорт
	Для каждого ОписаниеКоллекции Из ПроверяемыеКоллекции Цикл
		ПроверитьПериодыДействияВСтрокахКоллекции(Объект, ПараметрыПроверки, ОписаниеКоллекции, Отказ)
	КонецЦикла;	
КонецПроцедуры

// Получает информацию о каждом виде расчета из массива.
Функция ИнформацияОНесколькихВидахРасчета(МассивВидовРасчета) Экспорт
	СоответствиеВидовРасчетаИОписания = Новый Соответствие;
	Для каждого ВидРасчета Из МассивВидовРасчета Цикл
		  СоответствиеВидовРасчетаИОписания.Вставить(ВидРасчета, ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета));
	КонецЦикла;
	Возврат СоответствиеВидовРасчетаИОписания
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.0";
	Обработчик.Процедура = "Справочники.ВидыОтпусков.ОписатьВидОтпускаОсновнойОтпуск";
	Обработчик.НачальноеЗаполнение = Истина;
	
    //ВРЕМЕННО
	////Обработчик = Обработчики.Добавить();
	////Обработчик.Версия = "3.0.5.11";
	////Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОписатьПрочиеДоходыИВыплатыБывшимСотрудникам";
	////Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.УстановитьНастройкуПереноситьДанныеВДругойУчетСреднегоЗаработка";
	Обработчик.Версия = "3.0.0.0";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ОбновитьСправочникВидыОтпусков";
	Обработчик.Версия = "3.0.0.11";
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.15";
	Обработчик.Процедура = "РасчетЗарплатыРасширенный.ИзменитьВидыНачисленияПростоевИОтпусков";
КонецПроцедуры

// Параметр ПараметрыПланаВидовРасчета - см метод  ОписаниеПараметровПланаВидовРасчета.
//
Процедура ИзменитьВидыНачисленияПростоевИОтпусков(ПараметрыПланаВидовРасчета = Неопределено, НачальноеЗаполнение = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивОплатаПростояПоВинеРаботодателя = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ФормулаРасчета = "СтоимостьДняЧаса * (2/3) * ВремяВДняхЧасах * КоэффициентИндексацииСреднегоЗаработка";
		Если СокрЛП(НачислениеОбъект.Код) = "ПРСРЧ" Тогда
			НачислениеОбъект.Наименование	= НСтр("ru='Оплата часового простоя по вине работодателя';uk='Оплата годинного простою з вини роботодавця'");
		Иначе	
			НачислениеОбъект.Наименование	= НСтр("ru='Оплата простоя по вине работодателя';uk='Оплата простою з вини роботодавця'");
		КонецЕсли;
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеСреднегоЗаработка(НачислениеОбъект);
		НачислениеОбъект.НачисляетсяВЦеломЗаМесяц = РасчетЗарплатыРасширенный.НачислениеВыполняетсяВЦеломЗаМесяц(НачислениеОбъект);
		МассивОплатаПростояПоВинеРаботодателя.Добавить(НачислениеОбъект);
	КонецЦикла;
	
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(МассивОплатаПростояПоВинеРаботодателя);
	
	МассивОплатаПростояПоНезависящимОтРаботодателяПричинам = Новый Массив;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ИспользуетФормулу = Истина;
		НачислениеОбъект.ИспользуетСреднийЗаработокОбщий = Истина;
		НачислениеОбъект.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
		НачислениеОбъект.ФормулаРасчета = "СреднийЗаработокОбщий * ВремяВДняхЧасах * КоэффициентИндексацииСреднегоЗаработка";
		ЗарплатаКадрыРасширенный.ОбновитьПоказателиФормулыРасчета(НачислениеОбъект, Ложь);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОПоказателяхВидаРасчета(НачислениеОбъект);
		РасчетЗарплатыРасширенный.ЗаполнитьИнформациюОбУчетеВремени(НачислениеОбъект);
		МассивОплатаПростояПоНезависящимОтРаботодателяПричинам.Добавить(НачислениеОбъект);
	КонецЦикла;
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(МассивОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивОтпусков = Новый Массив;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Ссылка
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |ГДЕ
	               |	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска)
	               |	И Начисления.ВидОтпуска.ОтпускЯвляетсяЕжегодным = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СреднийЗаработокОбщийМножественныйВвод = Метаданные.Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.ЗначенияПеречисления.Количество() > 1;
		Если СреднийЗаработокОбщийМножественныйВвод Тогда
			Если НачислениеОбъект.СреднийЗаработокОбщий.Количество() > 0 Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ПорядокРасчета", Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные);
				НайденныеСтроки = НачислениеОбъект.СреднийЗаработокОбщий.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].Значение = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;	
					НайденныеСтроки[0].Индексируется = Истина;
				Иначе
					НоваяСтрока = НачислениеОбъект.СреднийЗаработокОбщий.Добавить();
					НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные;
					НоваяСтрока.Значение = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
					НоваяСтрока.Индексируется = Истина;
				КонецЕсли;	
				МассивОтпусков.Добавить(НачислениеОбъект);
			Иначе	
				НоваяСтрока = НачислениеОбъект.СреднийЗаработокОбщий.Добавить();
				НоваяСтрока.ПорядокРасчета = Перечисления.ПорядокРасчетаСреднегоЗаработкаОбщий.Постановление100Отпускные;
				НоваяСтрока.Значение = Перечисления.УчетНачисленийВСреднемЗаработкеОбщий.ОбщийЗаработок;
				НоваяСтрока.Индексируется = Истина;
				МассивОтпусков.Добавить(НачислениеОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	РасчетЗарплатыРасширенный.ЗаписатьПакетВидовРасчета(МассивОтпусков);

КонецПроцедуры
// Параметр ПараметрыПланаВидовРасчета - см метод  ОписаниеПараметровПланаВидовРасчета.
//
Процедура СформироватьПланВидовРасчетаПоНастройкам(ПараметрыПланаВидовРасчета = Неопределено, НачальноеЗаполнение = Ложь) Экспорт
	ПланыВидовРасчета.Начисления.СоздатьНачисленияПоНастройкам(ПараметрыПланаВидовРасчета, НачальноеЗаполнение);
КонецПроцедуры

// Создает временную таблицу ВТПорядокПредопределенныхНачисленийУдержаний.
// Используется при первоначальном заполнении ИБ, для заполнения реквизита РеквизитДопУпорядочивания.
//	Поля
//		Ссылка - ссылка, ПланыВидовРасчета.Начисления, ПланыВидовРасчета.Удержания
//		Порядок - число
//		НачислениеУдержание - строка, "Начисление" или "Удержание".
// 
Процедура СоздатьВТПорядокПредопределенныхНачисленийУдержаний(МенеджерВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Ссылка КАК Ссылка,
	|	КатегорииНачисленийИНеоплаченногоВремени.Порядок КАК Порядок,
	|	""Начисления"" КАК НачислениеУдержание
	|ПОМЕСТИТЬ ВТПорядокПредопределенныхНачисленийУдержаний
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.КатегорииНачисленийИНеоплаченногоВремени КАК КатегорииНачисленийИНеоплаченногоВремени
	|		ПО Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = КатегорииНачисленийИНеоплаченногоВремени.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.Удержания.ПустаяСсылка),
	|	0,
	|	""Удержания""
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();

КонецПроцедуры

// Процедура заполняет настройки периода базовых начислений 
// в связи с расширением структуры данных.
//
Процедура ОбновитьНастройкиРасчетаБазовыхНачислений() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц) КАК ПериодРасчетаБазовыхНачислений,
	|	1 КАК КоличествоМесяцевБазовогоПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
	|				И Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПериодДействияБазовый
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА Начисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.БазовыйПериод)
	|						И Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ <> Начисления.ПериодДействияБазовый
	|			ИЛИ Начисления.ПериодРасчетаБазовыхНачислений = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаБазовыхНачислений.ПустаяСсылка))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, Выборка);
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// В связи с вводом реквизитов, определяющих использование начисления 
// в расчете среднего заработка, необходимо заполнение этих вторичных данных
// для уже существующих начислений.
//
Процедура ОбновитьВторичныеДанныеНастройкиНачисленийДляУчетаСреднего() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК Общий
	|				ГДЕ
	|					Общий.Ссылка = Начисления.Ссылка
	|					И Общий.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВходитВУчетОбщегоСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК ФСС
	|				ГДЕ
	|					ФСС.Ссылка = Начисления.Ссылка
	|					И ФСС.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеФСС.НеВключать))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВходитВУчетСреднегоЗаработкаФСС
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	(Начисления.ВходитВУчетОбщегоСреднегоЗаработка <> ВЫБОР
	|				КОГДА ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							ПланВидовРасчета.Начисления.СреднийЗаработокОбщий КАК Общий
	|						ГДЕ
	|							Общий.Ссылка = Начисления.Ссылка
	|							И Общий.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеОбщий.НеВключать))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ Начисления.ВходитВУчетСреднегоЗаработкаФСС <> ВЫБОР
	|				КОГДА ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							ПланВидовРасчета.Начисления.СреднийЗаработокФСС КАК ФСС
	|						ГДЕ
	|							ФСС.Ссылка = Начисления.Ссылка
	|							И ФСС.Значение <> ЗНАЧЕНИЕ(Перечисление.УчетНачисленийВСреднемЗаработкеФСС.НеВключать))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидРасчетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВидРасчетаОбъект, Выборка);
		ВидРасчетаОбъект.ОбменДанными.Загрузка = Истина;
		ВидРасчетаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизит ВидДокументаНачисления в связи с его добавлением.
//
Процедура ЗаполнитьВидДокументаНачислений() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Больничный""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.БольничныйЛист)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""БольничныйЗаСчетРаботодателя""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.БольничныйЛист)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Командировка""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Командировка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускЗаСвойСчетПоСоглашению""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускЗаСвойСчет""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускБезОплатыУчебный""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйОтпускЗаСвойСчетПоСоглашению""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйОтпускЗаСвойСчет""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйОтпускБезОплатыУчебный""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Невыход""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПрогулНеявка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""Прогул""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПрогулНеявка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойОтОкладаПоДням""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойПоТарифуПоДням""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойПоСреднемуЗаработкуПоДням""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойОтОкладаПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойПоТарифуПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойЧасовойОтОкладаПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойЧасовойПоТарифуПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ПростойПоСреднемуЗаработкуПоЧасам""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПростойСотрудников)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ОтпускОсновной""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Отпуск)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""КомпенсацияОтпускаОсновного""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Отпуск)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменнаяКомандировка""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Командировка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйНевыход""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПрогулНеявка)
	|		КОГДА Начисления.УдалитьИдентификаторОбъекта = ""ВнутрисменныйПрогул""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПрогулНеявка)
	|		КОГДА Начисления.ВидОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.Отпуск)
	|	КОНЕЦ КАК ВидДокументаНачисления
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|	И Начисления.ВидДокументаНачисления = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовНачисления.ПустаяСсылка)
	|	И (НЕ Начисления.УдалитьИдентификаторОбъекта ПОДОБНО """"
	|			ИЛИ Начисления.ВидОтпуска <> ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НачислениеОбъект.ВидДокументаНачисления = Выборка.ВидДокументаНачисления;
		НачислениеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьРегистрЗначенийПериодическихПоказателей() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПериодическихПоказателей.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателей
	|ГДЕ
	|	(ЗначенияПериодическихПоказателей.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ИЛИ ЗначенияПериодическихПоказателей.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗначенияПериодическихПоказателей.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПериодическихПоказателей.Период,
	|	ЗначенияПериодическихПоказателей.Регистратор,
	|	ЗначенияПериодическихПоказателей.НомерСтроки,
	|	ЗначенияПериодическихПоказателей.Активность,
	|	ЗначенияПериодическихПоказателей.Регистратор.Организация КАК Организация,
	|	ЗначенияПериодическихПоказателей.Сотрудник,
	|	ЗначенияПериодическихПоказателей.Показатель,
	|	Сотрудники.ФизическоеЛицо,
	|	ЗначенияПериодическихПоказателей.Значение,
	|	ЗначенияПериодическихПоказателей.ДействуетДо,
	|	ЗначенияПериодическихПоказателей.ЗначениеПоОкончании
	|ИЗ
	|	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников КАК ЗначенияПериодическихПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = ЗначенияПериодическихПоказателей.Сотрудник)
	|ГДЕ
	|	ЗначенияПериодическихПоказателей.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТРегистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияПериодическихПоказателей.Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПоказателиПоНастройкам() Экспорт 
	
	Справочники.ПоказателиРасчетаЗарплаты.СоздатьПоказателиПоНастройкам();
	
КонецПроцедуры


Процедура УстановитьНастройкуПереноситьДанныеВДругойУчетСреднегоЗаработка() Экспорт

	Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
	Настройки.Прочитать();
	Настройки.ПереноситьДанныеВДругойУчетСреднегоЗаработка = Ложь;
	Настройки.Записать();

КонецПроцедуры


Процедура ОчиститьВидыОтпусков() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СпособРасчетаОтпуска", Перечисления.СпособыРасчетаОтпуска.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОтпусков.Ссылка,
	               |	ВидыОтпусков.СпособРасчетаОтпуска
	               |ИЗ
	               |	Справочник.ВидыОтпусков КАК ВидыОтпусков
	               |ГДЕ
	               |	ВидыОтпусков.СпособРасчетаОтпуска = &СпособРасчетаОтпуска";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = Справочники.ВидыОтпусков.ДополнительныйЕжегодныйОтпуск Или 
			Выборка.Ссылка = Справочники.ВидыОтпусков.ДополнительныйНаДетей Или
			Выборка.Ссылка = Справочники.ВидыОтпусков.ДополнительныйПрочий Тогда
			Продолжить
		КонецЕсли;
		ВидОтпускаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидОтпускаОбъект.ИмяПредопределенныхДанных = "";
		ВидОтпускаОбъект.ПометкаУдаления = Истина;
		ВидОтпускаОбъект.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьСправочникВидыОтпусков() Экспорт
	
	ОчиститьВидыОтпусков();
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", "ВидыОтпусков");
	
КонецПроцедуры


Процедура ЗаполнитьДатуНачалаРегистраНакопленияОтработанноеВремяПоСотрудникам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникам.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТИсправляемыеРегистраторы
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникам.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсправляемыеРегистраторы.Регистратор
		|ИЗ
		|	ВТИсправляемыеРегистраторы КАК ИсправляемыеРегистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОтработанноеВремяПоСотрудникам.Период,
			|	ВЫБОР
			|		КОГДА ОтработанноеВремяПоСотрудникам.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Начисления.ПериодДействияНачало
			|		ИНАЧЕ ОтработанноеВремяПоСотрудникам.ДатаНачала
			|	КОНЕЦ КАК ДатаНачала,
			|	ОтработанноеВремяПоСотрудникам.*
			|ИЗ
			|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсправляемыеРегистраторы КАК ИсправляемыеРегистраторы
			|		ПО ОтработанноеВремяПоСотрудникам.Регистратор = ИсправляемыеРегистраторы.Регистратор
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
			|		ПО ОтработанноеВремяПоСотрудникам.Регистратор = Начисления.Регистратор
			|			И ОтработанноеВремяПоСотрудникам.ПериодДействия = Начисления.ПериодДействия
			|			И ОтработанноеВремяПоСотрудникам.Сотрудник = Начисления.Сотрудник
			|			И ОтработанноеВремяПоСотрудникам.Организация = Начисления.Организация
			|			И ОтработанноеВремяПоСотрудникам.Начисление = Начисления.ВидРасчета
			|			И ОтработанноеВремяПоСотрудникам.ВремяВЧасах = Начисления.ВремяВЧасах
			|			И ОтработанноеВремяПоСотрудникам.ОтработаноДней = Начисления.ОтработаноДней
			|			И ОтработанноеВремяПоСотрудникам.ОтработаноЧасов = Начисления.ОтработаноЧасов
			|
			|УПОРЯДОЧИТЬ ПО
			|	ОтработанноеВремяПоСотрудникам.Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			ПериодРегистрации = Неопределено;
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				Если ПериодРегистрации = Неопределено Тогда
					ПериодРегистрации = Выборка.Период;
				КонецЕсли;
				
			КонецЦикла;
			
			УчетНачисленнойЗарплатыВнутренний.СкорректироватьДатыНачисленийБезПериодаДействия(
				НаборЗаписей, ПериодРегистрации, "Начисление");
			
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяПоСотрудникамКорректировка
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			Движения = ДокументОбъект.Движения;
			
			ТаблицаПредыдущихДвижений = Движения.ОтработанноеВремяПоСотрудникамКорректировка.Выгрузить();
			
			УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьКорректировкиОтработанногоВремени(Движения);
			
			НаборЗаписей = Движения.ОтработанноеВремяПоСотрудникамКорректировка;
			
			Если Не ОбщегоНазначения.КоллекцииИдентичны(ТаблицаПредыдущихДвижений, НаборЗаписей.Выгрузить()) Тогда
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				НаборЗаписей.Записать();
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры



Функция ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия() Экспорт
	
	ОписаниеТаблицы = Новый Структура(
		"МетаданныеДокумента,
		|ИмяТабличнойЧасти,
		|ПериодРегистрации,
		|ДатаНачала,
		|ВидРасчета");
		
	// Определим умолчания.
	ОписаниеТаблицы.ПериодРегистрации = "Ссылка.ПериодРегистрации";
	ОписаниеТаблицы.ДатаНачала = "ДатаНачала";
	ОписаниеТаблицы.ВидРасчета = "Начисление";
		
	Возврат ОписаниеТаблицы;
	
КонецФункции

Процедура ЗаполнитьПериодДействияВТаблицахНачисления(ПараметрыОбновления) Экспорт
	
	ОписаниеТаблиц = Новый Массив;
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.БольничныйЛист;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.БольничныйЛист;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ДоходВНатуральнойФорме;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	Описание.ДатаНачала = "Ссылка.МесяцНачисления";
	Описание.ВидРасчета = "Ссылка.Начисление";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ДоходВНатуральнойФорме;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Командировка;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Командировка;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.МатериальнаяПомощь;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ВидРасчета = "Ссылка.ВидРасчета";
	Описание.ДатаНачала = "Ссылка.ПериодРегистрации";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.МатериальнаяПомощь;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.ПериодРегистрации";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "Льготы";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "Пособия";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.НачислениеЗарплаты;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаПоСреднемуЗаработку;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОплатаПоСреднемуЗаработку;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Отгул;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Отгул;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Отпуск;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Отпуск;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускБезСохраненияОплаты;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускБезСохраненияОплаты;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускПоУходуЗаРебенком;
	Описание.ИмяТабличнойЧасти = "ОплатаТруда";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ОтпускПоУходуЗаРебенком;
	Описание.ИмяТабличнойЧасти = "ОплатаЛьгот";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Премия;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ВидРасчета = "Ссылка.ВидПремии";
	Описание.ДатаНачала = "Ссылка.ПериодРегистрации";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Премия;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ПрогулНеявка;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ПрогулНеявка;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ПростойСотрудников;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ВидРасчета = "Ссылка.Начисление";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.ПростойСотрудников;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.РазовоеНачисление;
	Описание.ИмяТабличнойЧасти = "Начисления";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	Описание.ВидРасчета = "Ссылка.Начисление";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.РазовоеНачисление;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	Описание.ПериодРегистрации = "Ссылка.МесяцНачисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.СторнированиеНачислений;
	Описание.ИмяТабличнойЧасти = "ДоначисленияИПерерасчеты";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.СторнированиеНачислений;
	Описание.ИмяТабличнойЧасти = "Сторнировано";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "Льготы";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "Пособия";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.Увольнение;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "Начисления";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "НачисленияПерерасчет";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "Льготы";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "Пособия";
	
	Описание = ОписаниеТаблицыНачисленийДляЗаполненияПериодаДействия();
	ОписаниеТаблиц.Добавить(Описание);
	Описание.МетаданныеДокумента = Метаданные.Документы.УвольнениеСписком;
	Описание.ИмяТабличнойЧасти = "ПособияПерерасчет";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоДовольствия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ДополнитьОписаниеТаблицНачисленийДляЗаполненияПериодаДействия(ОписаниеТаблиц);
	КонецЕсли;
	
	ТекстЗапроса = "";
	ПерваяЧасть = Истина;
	Для Каждого ОписаниеТаблицы Из ОписаниеТаблиц Цикл
		Если Не ПерваяЧасть Тогда
			ТекстЗапроса = ТекстЗапроса +
				"
				|ОБЪЕДИНИТЬ ВСЕ 
				|";
		КонецЕсли;
		ТекстЧасти = 
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ТаблицаДокумента.Ссылка КАК Ссылка,
			|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|			ТОГДА ТаблицаДокумента.Ссылка.ПериодРегистрации
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ)
			|	КОНЕЦ КАК ПериодДействия,
			|	""&ИмяТабличнойЧасти"" КАК ИмяТаблицы
			|ИЗ
			|	#ТаблицаДокумента КАК ТаблицаДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ВидыРасчета
			|		ПО (ВидыРасчета.Ссылка = ТаблицаДокумента.Начисление)
			|			И (ТаблицаДокумента.ПериодДействия <> ВЫБОР
			|				КОГДА ВидыРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
			|					ТОГДА ТаблицаДокумента.Ссылка.ПериодРегистрации
			|				ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаНачала, МЕСЯЦ)
			|			КОНЕЦ)";
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "#ТаблицаДокумента", ОписаниеТаблицы.МетаданныеДокумента.ПолноеИмя() + "." + ОписаниеТаблицы.ИмяТабличнойЧасти);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "&ИмяТабличнойЧасти", ОписаниеТаблицы.ИмяТабличнойЧасти);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.Ссылка.ПериодРегистрации", "ТаблицаДокумента." + ОписаниеТаблицы.ПериодРегистрации);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.ДатаНачала", "ТаблицаДокумента." + ОписаниеТаблицы.ДатаНачала);
		ТекстЧасти = СтрЗаменить(ТекстЧасти, "ТаблицаДокумента.Начисление", "ТаблицаДокумента." + ОписаниеТаблицы.ВидРасчета);
		
		ТекстЗапроса = ТекстЗапроса + ТекстЧасти;
		ПерваяЧасть = Ложь;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + 
		"
		|УПОРЯДОЧИТЬ ПО
		|	ПериодДействия УБЫВ,
		|	Ссылка,
		|	ИмяТаблицы,
		|	НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	ПараметрыОбновления.ОбработкаЗавершена = Ложь;
	Если РезультатЗапроса.Пустой() Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		Пока Выборка.Следующий() Цикл
			ДокументОбъект[Выборка.ИмяТаблицы][Выборка.НомерСтроки - 1].ПериодДействия = Выборка.ПериодДействия;
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры


Процедура ИнициализироватьОтложеннуюРегистрациюПлановогоФОТ(Движения) Экспорт
	
	ЗарплатаКадрыРасширенный.УстановитьДополнительноеСвойствоДвижений(Движения, "ИспользоватьОтложеннуюРегистрациюПлановогоФОТ");
	
КонецПроцедуры

Функция ТаблицаНачисленийСотрудниковДляРасчетаПлановогоФОТ()
	
	ТаблицаНачисленийСотрудников = Новый ТаблицаЗначений;
	
	ТаблицаНачисленийСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаНачисленийСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаНачисленийСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаНачисленийСотрудников.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТаблицаНачисленийСотрудников.Колонки.Добавить("ДвижениеУдаляется", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаНачисленийСотрудников;
	
КонецФункции

Процедура СформироватьДвиженияПлановогоФОТОтложеннойРегистрации(Движения, ДанныеНачисленийФормыДокумента = Неопределено) Экспорт
	
	ТаблицаНачисленийСотрудников = ТаблицаНачисленийСотрудниковДляРасчетаПлановогоФОТ();
	ВремяРегистрацииДокумента = Неопределено;
	
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("НачисленияСотрудниковДляРасчетаФОТ") Тогда
			
			Для каждого СтрокаНачислений Из НаборЗаписей.ДополнительныеСвойства.НачисленияСотрудниковДляРасчетаФОТ Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаНачисленийСотрудников.Добавить(), СтрокаНачислений);
			КонецЦикла;
			
			НаборЗаписей.ДополнительныеСвойства.Удалить("НачисленияСотрудниковДляРасчетаФОТ");
			
			Если ВремяРегистрацииДокумента = Неопределено
				И ДанныеНачисленийФормыДокумента <> Неопределено Тогда
				
				НаборЗаписей.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
				Если ВремяРегистрацииДокумента <> Неопределено Тогда
					
					Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
					
					МассивДат = ДанныеНачисленийФормыДокумента.ВыгрузитьКолонку("ДатаСобытия");
					ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаНачисленийСотрудников.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ТаблицаНачисленийСотрудников", ТаблицаНачисленийСотрудников);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаНачисленийСотрудников.ДатаНачала,
			|	ТаблицаНачисленийСотрудников.ДатаОкончания,
			|	ТаблицаНачисленийСотрудников.Сотрудник,
			|	ТаблицаНачисленийСотрудников.Начисление,
			|	ТаблицаНачисленийСотрудников.ДвижениеУдаляется
			|ПОМЕСТИТЬ ВТТаблицаНачисленийСотрудников
			|ИЗ
			|	&ТаблицаНачисленийСотрудников КАК ТаблицаНачисленийСотрудников
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаНачисленийСотрудников.ДатаНачала) КАК ДатаНачала,
			|	МАКСИМУМ(ТаблицаНачисленийСотрудников.ДатаОкончания) КАК ДатаОкончания,
			|	ТаблицаНачисленийСотрудников.Сотрудник,
			|	ТаблицаНачисленийСотрудников.Начисление,
			|	МИНИМУМ(ТаблицаНачисленийСотрудников.ДвижениеУдаляется) КАК ДвижениеУдаляется
			|ПОМЕСТИТЬ ВТНачисленияСотрудниковДляРасчетаФОТ
			|ИЗ
			|	ВТТаблицаНачисленийСотрудников КАК ТаблицаНачисленийСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаНачисленийСотрудников.Сотрудник,
			|	ТаблицаНачисленийСотрудников.Начисление";
		
		Запрос.Выполнить();
		
		Если ДанныеНачисленийФормыДокумента <> Неопределено Тогда
			
			ДанныеНачисленийФормыДокумента.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
			Для каждого СтрокаДанныхНачислений Из ДанныеНачисленийФормыДокумента Цикл
				
				Если ВремяРегистрацииДокумента <> Неопределено Тогда
					СтрокаДанныхНачислений.Период = ВремяРегистрацииДокумента.Получить(СтрокаДанныхНачислений.ДатаСобытия);
				Иначе
					СтрокаДанныхНачислений.Период = СтрокаДанныхНачислений.ДатаСобытия;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СформироватьДвиженияПлановогоФОТ(Запрос.МенеджерВременныхТаблиц, "ВТНачисленияСотрудниковДляРасчетаФОТ", "Сотрудник", , ДанныеНачисленийФормыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
