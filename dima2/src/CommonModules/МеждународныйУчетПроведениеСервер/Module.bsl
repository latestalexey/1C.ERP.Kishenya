////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции, используемые при отражения документов
//  в международном учете
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регистрирует документы к отражению в международном учете.
//
// Параметры:
//	ЗапросИлиТекстЗапроса - Строка - текст запроса, для формирования списка хозяйственных операций к отражению в учете с полями:
//		* Период - Дата - дата регистрации документа к отражению в учете.
//		* Регистратор - ДокументСсылка - ссылка на документ, регистрируемый к отражению в учете.
//		* Организация - СправочникСсылка.Организации - организация, по которой документ регистрируется к отражению в учете.
//		или Запрос - готовый к выполнению запрос
//	ПараметрыЗапроса - Структура - структура параметров запроса. Ключ - имя параметра, Значение - значение параметра. 
//		Используется только когда передан текст запроса
//
Процедура ЗарегистрироватьДокументыКОтражениюВМеждународномУчете(ЗапросИлиТекстЗапроса, ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ТипЗнч(ЗапросИлиТекстЗапроса) = Тип("Строка") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ЗапросИлиТекстЗапроса;
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		
	Иначе // передан готовый запрос
		
		Запрос = ЗапросИлиТекстЗапроса;
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ИсходнаяТаблица = Новый ТаблицаЗначений;
	Для каждого Колонка Из Результат.Колонки Цикл
		ИсходнаяТаблица.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	ВыборкаПоДокументам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ИсходныеДанные = Новый Структура();
		ИсходныеДанные.Вставить("Дата", ВыборкаПоДокументам.Период);
		ИсходныеДанные.Вставить("Регистратор", ВыборкаПоДокументам.Регистратор);
		Выборка = ВыборкаПоДокументам.Выбрать();
		ИсходнаяТаблица.Очистить();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ИсходнаяТаблица.Добавить(), Выборка);
		КонецЦикла;
		ИсходныеДанные.Вставить("ИсходнаяТаблица", ИсходнаяТаблица);
		ЗарегистрироватьДокументКОтражениюВМеждународномУчете(ИсходныеДанные, Ложь);
	КонецЦикла;

КонецПроцедуры

// Обработчик подписки на событие ЗарегистрироватьДокументКОтражениюВМеждународномУчете
//
// Параметры:
//  Стандартные параметры.
//
Процедура ЗарегистрироватьДокументКОтражениюВМеждународномУчетеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт

	Если Не Отказ 
		 И (ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымОперативного")
		 	ИЛИ ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного")) Тогда
		ЗарегистрироватьДокументКОтражениюВМеждународномУчете(Источник, Истина);
	КонецЕсли;

КонецПроцедуры

// Регистрирует документы расчетов с партнерами к отражению в международном учете.
//
// Параметры:
//	ТаблицаРасчетов - ТаблицаЗначений - таблица расчетов с партнерами по документам.
//
Процедура ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВМеждународномУчете(МассивДокументов) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();

	ДокументыКОтражению = МеждународныйУчетСерверПовтИсп.ДокументыКОтражениюВМеждународномУчете();

	ТипыДокументов = Новый Массив;
	Для каждого Документ Из ДокументыКОтражению Цикл
		ТипыДокументов.Добавить(Тип("ДокументСсылка." + Документ));
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасчетов.Период КАК Период,
	|	ТаблицаРасчетов.Регистратор КАК Регистратор,
	|	ТаблицаРасчетов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ТаблицаРасчетов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаРасчетов.Регистратор) В (&ТипыДокументов)
	|	И ТаблицаРасчетов.Регистратор В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасчетов.Период КАК Период,
	|	ТаблицаРасчетов.Регистратор КАК Регистратор,
	|	ТаблицаРасчетов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ТаблицаРасчетов
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаРасчетов.Регистратор) В (&ТипыДокументов)
	|	И ТаблицаРасчетов.Регистратор В (&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаРасчетов.Период,
	|	ТаблицаРасчетов.Регистратор,
	|	ТаблицаРасчетов.АналитикаУчетаПоПартнерам
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Период КАК Период,
	|	ТаблицаДокументов.Регистратор КАК Регистратор,
	|	ТаблицаДокументов.Организация КАК Организация
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор,
	|		ДанныеРегистра.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ
	|		ТаблицаДокументов.Период КАК Период,
	|		ТаблицаДокументов.Регистратор КАК Регистратор,
	|		Аналитика.Организация КАК Организация
	|	ИЗ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО
	|			ТаблицаДокументов.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	) КАК ТаблицаДокументов
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокументов.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК ПериодУчетнойПолитики
	|ПОМЕСТИТЬ ДокументыКОтражениюСПериодомУчетнойПолитики
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ДокументыКОтражению.Организация = УчетнаяПолитикаОрганизаций.Организация
	|		И ДокументыКОтражению.Период >= УчетнаяПолитикаОрганизаций.Период
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКОтражению.Период,
	|	ДокументыКОтражению.Регистратор,
	|	ДокументыКОтражению.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументыКОтражению.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДокументыКОтражению.Регистратор) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|			И ПоступлениеБДС.ПроведеноБанком
	|			ТОГДА КОНЕЦПЕРИОДА(ПоступлениеБДС.ДатаПроведенияБанком, ДЕНЬ)
	|		КОГДА ТИПЗНАЧЕНИЯ(ДокументыКОтражению.Регистратор) = ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|			И СписаниеБДС.ПроведеноБанком
	|			ТОГДА КОНЕЦПЕРИОДА(СписаниеБДС.ДатаПроведенияБанком, ДЕНЬ)
	|		ИНАЧЕ
	|			ДокументыКОтражению.Период
	|	КОНЕЦ КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.УчетнаяПолитика КАК УчетнаяПолитика,
	|	ВЫБОР
	|		КОГДА НЕ ОтражениеДокументовВМеждународномУчете.Статус ЕСТЬ NULL
	|				И (ОтражениеДокументовВМеждународномУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
	|				ИЛИ ОтражениеДокументовВМеждународномУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	ДокументыКОтражениюСПериодомУчетнойПолитики КАК ДокументыКОтражению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ДокументыКОтражению.Организация = УчетнаяПолитикаОрганизаций.Организация
	|		И ДокументыКОтражению.ПериодУчетнойПолитики = УчетнаяПолитикаОрганизаций.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБДС
	|	ПО
	|		ДокументыКОтражению.Регистратор = ПоступлениеБДС.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБДС
	|	ПО
	|		ДокументыКОтражению.Регистратор = СписаниеБДС.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|	ПО
	|		ДокументыКОтражению.Организация = ОтражениеДокументовВМеждународномУчете.Организация
	|		И ДокументыКОтражению.Регистратор = ОтражениеДокументовВМеждународномУчете.Регистратор
	|
	|ИТОГИ ПО
	|	Регистратор
	|";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Регистратор);
		Выборка = ВыборкаПоДокументам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Обработчик вызываемый регламентным заданием ОтражениеДокументовВМеждународномУчете.
//
// Параметры:
//
//
Процедура ОтразитьВМеждународномУчетеРегламентнымЗаданием() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьВМеждународномУчете(,,,,Ложь);

КонецПроцедуры

// Выполняет отражение документов в международном учете.
//
// Параметры:
//	Организация				- СправочникСсылка.Организации - отбор документов по организации.
//	ДатаОкончания			- Дата - отбор документов до даты.
//	Документы				- ДокументСсылка, Массив - документ или массив документов к отражению.
//	АвтоматическоеОтражение - Булево - признак необходимости записи сформированных проводок.
//
// Возвращаемое значение:
//	ТаблицаПроводок - ТаблицаЗначений - Таблица сформированных проводок, 
//										соответствует структуре регистра бухгалтерии Международный.
//
Функция ОтразитьВМеждународномУчете(Организация = Неопределено, ДатаОкончания = Неопределено, Документы = Неопределено, АвтоматическоеОтражение = Истина, ВыполнитьПересчеты = Истина) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ВыполнитьПересчеты Тогда
		ВыполнитьОффлайновыеРасчеты(ДатаОкончания, Документы);
	КонецЕсли;
	
	ВалютыУчета = Новый Структура;
	ВалютыМеждународногоУчета = МеждународнаяОтчетностьВызовСервера.УчетнаяВалюта();
	ВалютыУчета.Вставить("ФункциональнаяВалюта", ВалютыМеждународногоУчета.Функциональная);
	ВалютыУчета.Вставить("ВалютаПредставления", ВалютыМеждународногоУчета.Представления);
	ВалютыУчета.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	ВалютыУчета.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());

	ПараметрыОтражения = Новый Структура;
	ПараметрыОтражения.Вставить("ВалютыУчета", ВалютыУчета);
	ПараметрыОтражения.Вставить("ТаблицаУточненияСчетов", ТаблицаУточненияСчетов());
	ПараметрыОтражения.Вставить("НастройкиОтражения", НастройкиОтраженияВМеждународномУчете());
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыОтражения.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	ПолучитьУчетнуюПолитикуОрганизаций(МенеджерВременныхТаблиц);
	
	ТаблицаПроводок = ТаблицаПроводок();
	
	ПараметрыОтражения.Вставить("ТекстыЗапросовПоРегистрам", ТекстыЗапросовПоРегистрам());
	ПараметрыОтражения.Вставить("ИменаДокументовКОтражению", ДокументыКОтражениюВМеждународномУчете());
	
	МоментВремени = Новый МоментВремени('00010101');
	Пока МоментВремени <> Неопределено Цикл
		
		ДокументыКОтражениюВУчете = ДокументыКОтражениюВУчете(МенеджерВременныхТаблиц, Организация, ДатаОкончания, Документы, МоментВремени);
		Если МоментВремени = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			НачатьТранзакцию();
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОтражениеДокументовВМеждународномУчете.НаборЗаписей");
			УстановитьДанныеБлокировки(ЭлементБлокировки, ПараметрыОтражения.МенеджерВременныхТаблиц);
			БлокировкаДанных.Заблокировать();
			
			ОтразитьПоДаннымОперативногоУчета(ПараметрыОтражения, ТаблицаПроводок);
			ОтразитьПоДаннымРеглУчета(ПараметрыОтражения, ТаблицаПроводок);
			
			ПересчитатьТаблицуПроводокПоКурсу(ПараметрыОтражения, ТаблицаПроводок);
			
			Если АвтоматическоеОтражение Тогда
				ЗаписатьПроводки(ТаблицаПроводок, ДокументыКОтражениюВУчете);
				ТаблицаПроводок.Очистить();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru='Не удалось сформировать проводки международного учета по причине';uk='Не вдалося сформувати проводки міжнародного обліку з причини'") + ":"
							+ Символы.ПС + Символы.Таб + "%Причина%";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
			
		УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц);
		
	КонецЦикла;
	
	Возврат ТаблицаПроводок;
	
КонецФункции

// По передаваемой в качестве параметра таблице проводок, возвращает
// таблицу проводок, удовлетворяющих условиям записи.
//
// Параметры:
//	ПроводкиДокумента - ТаблицаЗначений - таблица проводок.
//	ИсключаемыеПроводки - Массив - массив строк исключаемых проводок.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица записываемых проводок.
//
Функция ЗаписываемыеПроводки(ПроводкиДокумента) Экспорт

	ПараметрыОтбора = Новый Структура("Статус", Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
	ЗаписываемыеПроводки = ПроводкиДокумента.Скопировать(ПараметрыОтбора);
	ИсключаемыеПроводки =  ИсключаемыеПроводки(ЗаписываемыеПроводки);
	Для каждого Проводка Из ИсключаемыеПроводки Цикл
		ЗаписываемыеПроводки.Удалить(Проводка);
	КонецЦикла;
	
	Возврат ЗаписываемыеПроводки;

КонецФункции

// Обновляет статус отражения документа в международном учете на основе статусов сформированных проводок.
//
// Параметры:
//	ПроводкиДокумента - ТаблицаЗначений - таблица проводок документа.
//	Документ - ДокументСсылка - ссылка на документ.
//	ОбновлятьЗаписиОтраженияДляОтстутствующихПроводок - Булево - если среди таблицы проводок нет записей по отраженной организации, по умолчанию будет вставать "Отражено".
//
Процедура ОбновитьСтатусОтраженияДокумента(ПроводкиДокумента, Документ, ОбновлятьЗаписиОтраженияДляОтстутствующихПроводок = Истина) Экспорт

	ЗаписиОтраженияДокумента = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
	ЗаписиОтраженияДокумента.Отбор.Регистратор.Установить(Документ);
	ЗаписиОтраженияДокумента.Прочитать();
	
	Для каждого Запись Из ЗаписиОтраженияДокумента Цикл
		ПараметрыОтбора = Новый Структура("Организация", Запись.Организация);
		ПроводкиОрганизации = ПроводкиДокумента.НайтиСтроки(ПараметрыОтбора);
		Если ПроводкиОрганизации.Количество() > 0 Тогда
			Статус = Неопределено;
			Комментарий = "";
			УникальныеЗначения = Новый Соответствие;
			Для каждого Проводка Из ПроводкиОрганизации Цикл
				Статус = МеждународныйУчетСерверПовтИсп.Статус(Статус, Проводка.Статус);
				ЗаполнитьКомментарий(Комментарий, Проводка, УникальныеЗначения);
			КонецЦикла;
			Запись.Статус = Статус;
			Запись.Комментарий = Комментарий;
		ИначеЕсли ОбновлятьЗаписиОтраженияДляОтстутствующихПроводок Тогда
			Запись.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
			Запись.Комментарий = "";
		КонецЕсли;
	КонецЦикла;
	
	ЗаписиОтраженияДокумента.Записать();

КонецПроцедуры

// Возвращает массив регистров, для отражения в международном учете.
//
// Возвращаемое значение:
//	Массив - массив регистров для отражения в международном учете.
//
Функция РегистрыКОтражениюВМеждународномУчете() Экспорт

	МассивРегистров = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымОперативного") Тогда
		МассивРегистров.Добавить("ДвиженияДенежныхСредств");
		МассивРегистров.Добавить("ДвиженияДенежныеСредстваДоходыРасходы");
		МассивРегистров.Добавить("ДвиженияДенежныеСредстваКонтрагент");
		МассивРегистров.Добавить("ДвиженияКонтрагентДоходыРасходы");
		МассивРегистров.Добавить("ДвиженияКонтрагентКонтрагент");
		МассивРегистров.Добавить("ДвиженияДоходыРасходыПрочиеАктивыПассивы");
		МассивРегистров.Добавить("Закупки");
		МассивРегистров.Добавить("ВыручкаИСебестоимостьПродаж");
		МассивРегистров.Добавить("ДвиженияНоменклатураДоходыРасходы");
		МассивРегистров.Добавить("ДвиженияНоменклатураНоменклатура");
        МассивРегистров.Добавить("КорректировкиНДСПартий");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		МассивРегистров.Добавить("Хозрасчетный");
	КонецЕсли;
	
	Возврат МассивРегистров;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтражениеВМеждународномУчетеПоДаннымОперативного

Функция ТаблицаУточненияСчетов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаОтражения.ШаблонПроводки КАК ШаблонПроводки,
	|	ПравилаУточненияСчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ПравилаУточненияСчетов.ВидДвижения КАК ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета КАК СчетУчета
	|ИЗ
	|	РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтражения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточненияСчетов
	|		ПО ПравилаОтражения.ШаблонПроводки = ПравилаУточненияСчетов.ШаблонПроводки
	|";
	
	ТаблицаУточненияСчетов = Запрос.Выполнить().Выгрузить();
	ТаблицаУточненияСчетов.Индексы.Добавить("ШаблонПроводки, ГруппаФинансовогоУчета, ВидДвижения");

	Возврат ТаблицаУточненияСчетов;

КонецФункции

Процедура ПолучитьУчетнуюПолитикуОрганизаций(МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.Организация КАК Организация,
	|	УчетнаяПолитикаОрганизаций.УчетнаяПолитика КАК УчетнаяПолитика
	|ПОМЕСТИТЬ УчетнаяПолитикаОрганизаций
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета КАК УчетнаяПолитикаОрганизаций
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|";
	
	Запрос.Выполнить();

КонецПроцедуры

Функция ДокументыКОтражениюВУчете(МенеджерВременныхТаблиц, Организация, ДатаОкончания, Документы, МоментВремени)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТаблицаДокументов.Период КАК Период,
	|	ТаблицаДокументов.Регистратор КАК Регистратор,
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.МоментВремени КАК МоментВремени,
	|	МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК ПериодУчетнойПолитики
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ТаблицаДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ТаблицаДокументов.Организация = УчетнаяПолитикаОрганизаций.Организация
	|		И ТаблицаДокументов.Период >= УчетнаяПолитикаОрганизаций.Период
	|ГДЕ
	|	(&НеПроверятьСтатусОтражения
	|	ИЛИ ТаблицаДокументов.Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете)))
	|	И (ТаблицаДокументов.Организация = &Организация ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И ТаблицаДокументов.Период <= &ДатаОкончания
	|	И (ТаблицаДокументов.Регистратор В (&Документы) ИЛИ &Документы = НЕОПРЕДЕЛЕНО)
	|	И ТаблицаДокументов.МоментВремени > &МоментВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Период,
	|	ТаблицаДокументов.Регистратор,
	|	ТаблицаДокументов.Организация,
	|	ТаблицаДокументов.МоментВремени
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПериодУчетнойПолитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокументов.Период) КАК Период,
	|	ТаблицаДокументов.Регистратор КАК Регистратор,
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ЕСТЬNULL(УчетнаяПолитикаОрганизаций.УчетнаяПолитика, НЕОПРЕДЕЛЕНО) КАК УчетнаяПолитика
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		ТаблицаДокументов.Организация = УчетнаяПолитикаОрганизаций.Организация
	|		И ТаблицаДокументов.ПериодУчетнойПолитики = УчетнаяПолитикаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Регистратор,
	|	ТаблицаДокументов.Организация,
	|	ЕСТЬNULL(УчетнаяПолитикаОрганизаций.УчетнаяПолитика, НЕОПРЕДЕЛЕНО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Регистратор КАК Регистратор,
	|	ТаблицаДокументов.МоментВремени КАК МоментВремени
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокументов.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|//Проводки других организаций для документов интрекампани
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Регистратор КАК Документ,
	|	ТаблицаДокументов.МоментВремени КАК МоментВремени,
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.НомерСтроки,
	|	ДанныеРегистра.Активность,
	|	ДанныеРегистра.СчетДт,
	|	ДанныеРегистра.СчетКт,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.ПодразделениеДт,
	|	ДанныеРегистра.ПодразделениеКт,
	|	ДанныеРегистра.ВалютаДт,
	|	ДанныеРегистра.ВалютаКт,
	|	ДанныеРегистра.Сумма,
	|	ДанныеРегистра.СуммаПредставления,
	|	ДанныеРегистра.ВалютнаяСуммаДт,
	|	ДанныеРегистра.ВалютнаяСуммаКт,
	|	ДанныеРегистра.Содержание,
	|	ДанныеРегистра.ШаблонПроводки,
	|	ДанныеРегистра.ТипПроводки,
	|	ДанныеРегистра.СубконтоДт1,
	|	ДанныеРегистра.ВидСубконтоДт1,
	|	ДанныеРегистра.СубконтоДт2,
	|	ДанныеРегистра.ВидСубконтоДт2,
	|	ДанныеРегистра.СубконтоДт3,
	|	ДанныеРегистра.ВидСубконтоДт3,
	|	ДанныеРегистра.СубконтоКт1,
	|	ДанныеРегистра.ВидСубконтоКт1,
	|	ДанныеРегистра.СубконтоКт2,
	|	ДанныеРегистра.ВидСубконтоКт2,
	|	ДанныеРегистра.СубконтоКт3,
	|	ДанныеРегистра.ВидСубконтоКт3
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Международный.ДвиженияССубконто(
	|		,
	|		&ДатаОкончания,
	|		Регистратор В (&Документы) ИЛИ &Документы = НЕОПРЕДЕЛЕНО,
	|		,
	|	) КАК ДанныеРегистра
	|		ПО ТаблицаДокументов.Регистратор = ДанныеРегистра.Регистратор
	|			И (ВЫБОР КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ЛОЖЬ
	|					ИНАЧЕ ДанныеРегистра.Организация <> &Организация
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокументов.МоментВремени
	|ИТОГИ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДокументов";
	
	Запрос.УстановитьПараметр("Организация", ?(Организация = Неопределено, Справочники.Организации.ПустаяСсылка(),Организация));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(НЕ ЗначениеЗаполнено(ДатаОкончания) ИЛИ ЗначениеЗаполнено(Документы), '39991231', ДатаОкончания));
	Запрос.УстановитьПараметр("Документы", Документы);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("НеПроверятьСтатусОтражения", Документы <> Неопределено);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Не Результат[2].Пустой() Тогда
		ДокументыКОтражениюВУчете = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаДокументовКОтражениюВУчете = Результат[2].Выгрузить();
		МоментВремени = ТаблицаДокументовКОтражениюВУчете[ТаблицаДокументовКОтражениюВУчете.Количество() - 1].МоментВремени;
	Иначе
		ДокументыКОтражениюВУчете = Неопределено;
		МоментВремени = Неопределено;
	КонецЕсли;
	
	Возврат ДокументыКОтражениюВУчете;
	
КонецФункции

Функция НастройкиОтраженияВМеждународномУчете()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|	ШаблоныПроводок.ЭтоГруппаШаблонов КАК ЭтоГруппаШаблонов,
	|	ШаблоныПроводок.Операция КАК Операция,
	|	ШаблоныПроводок.Операция.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ШаблоныПроводок.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	|	ШаблоныПроводок.СчетДебетаПоУмолчанию КАК СчетДебетаПоУмолчанию,
	|	ШаблоныПроводок.СчетКредитаПоУмолчанию КАК СчетКредитаПоУмолчанию,
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаДт КАК ИсточникУточненияСчетаДт,
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаКт КАК ИсточникУточненияСчетаКт,
	|	ШаблоныПроводок.ИсточникПодразделенияДт КАК ИсточникПодразделенияДт,
	|	ШаблоныПроводок.ИсточникПодразделенияКт КАК ИсточникПодразделенияКт,
	|	ШаблоныПроводок.ИсточникСуммыВВалютеДт КАК ИсточникСуммыВВалютеДт,
	|	ШаблоныПроводок.ИсточникСуммыВВалютеКт КАК ИсточникСуммыВВалютеКт,
	|	ШаблоныПроводок.ИсточникБалансовойСуммы КАК ИсточникБалансовойСуммы,
	|	ШаблоныПроводок.ИзменятьЗнакОперацииПриОтраженииВУчете КАК ИзменятьЗнакОперации,
	|	ШаблоныПроводок.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ШаблоныПроводок.ДополнительныйОтбор КАК ДополнительныйОтбор,
	|	ШаблоныПроводок.УстановленДополнительныйОтбор КАК УстановленДополнительныйОтбор,
	|	ПравилаОтражения.УчетнаяПолитика КАК УчетнаяПолитика,
	|	НастройкиОпераций.Приход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.Номенклатура) КАК ДвижениеНоменклатурыДт,
	|	НастройкиОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.Номенклатура) КАК ДвижениеНоменклатурыКт
	|ИЗ 
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтражения
	|	ПО
	|		ШаблоныПроводок.Ссылка = ПравилаОтражения.ШаблонПроводки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиОпераций
	|	ПО
	|		ШаблоныПроводок.Операция = НастройкиОпераций.Ссылка
	|ГДЕ
	|	НЕ ШаблоныПроводок.ПометкаУдаления
	|	И (НЕ ПравилаОтражения.УчетнаяПолитика ЕСТЬ NULL
	|	ИЛИ ШаблоныПроводок.ЭтоГруппаШаблонов)
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныПроводок.РеквизитДопУпорядочивания ИЕРАРХИЯ
	|";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"УНИЧТОЖИТЬ ДокументыКОтражению
	|";
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура УстановитьДанныеБлокировки(ЭлементБлокировки, МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКОтражению.Регистратор КАК Регистратор
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|";
	Результат = Запрос.Выполнить();
	
	ЭлементБлокировки.ИсточникДанных  = Результат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");

КонецПроцедуры

Процедура ОтразитьПоДаннымОперативногоУчета(ПараметрыОтражения, ТаблицаПроводок)
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымОперативного") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапросовПоРегистрам = ПараметрыОтражения.ТекстыЗапросовПоРегистрам;
	Для каждого ЭлементКоллекции Из ТекстыЗапросовПоРегистрам Цикл
		ИмяРегистра = ЭлементКоллекции.Ключ;
		ОтразитьДанныеРегистра(ИмяРегистра, ТекстыЗапросовПоРегистрам[ИмяРегистра], ПараметрыОтражения, ТаблицаПроводок);
	КонецЦикла;
	
	Для каждого ИмяДокумента Из ПараметрыОтражения.ИменаДокументовКОтражению Цикл
		ОтразитьДанныеДокумента(ИмяДокумента, ПараметрыОтражения, ТаблицаПроводок);
	КонецЦикла;

КонецПроцедуры

Процедура ОтразитьДанныеДокумента(ИмяДокумента, ПараметрыОтражения, ТаблицаПроводок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыОтражения.МенеджерВременныхТаблиц;
	Запрос.Текст = Документы[ИмяДокумента].ТекстОтраженияВМеждународномУчете();
	Запрос.УстановитьПараметр("ВалютаФункциональная", ПараметрыОтражения.ВалютыУчета.ФункциональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаПредставления", ПараметрыОтражения.ВалютыУчета.ВалютаПредставления);
	Запрос.УстановитьПараметр("ВалютаРегл", ПараметрыОтражения.ВалютыУчета.ВалютаРегл);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Проводка = СтруктураПроводки();
		ЗаполнитьЗначенияСвойств(Проводка, Выборка);
		Проводка.Активность = Истина;
		
		ЗаполнитьЗначенияСвойств(Проводка, ВидыСубконтоСчета(Проводка.СчетДт, "Дт"));
		ЗаполнитьЗначенияСвойств(Проводка, ВидыСубконтоСчета(Проводка.СчетКт, "Кт"));
		
		Документы[ИмяДокумента].ПроверитьЗаполнениеПроводкиМеждународногоУчета(Проводка, Выборка);
		
		ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВидыСубконтоСчета(Счет, Суффикс="Дт")
	
	СтруктураВидовСубконто = Новый Структура;
	СтруктураВидовСубконто.Вставить("ВидСубконто"+Суффикс+"1");
	СтруктураВидовСубконто.Вставить("ВидСубконто"+Суффикс+"2");
	СтруктураВидовСубконто.Вставить("ВидСубконто"+Суффикс+"3");
	
	Если ЗначениеЗаполнено(Счет) Тогда
		
		ВидыСубконто = Счет.ВидыСубконто;
		КоличествоСубконто = ВидыСубконто.Количество();
		Для К = 1 По КоличествоСубконто Цикл
			СтруктураВидовСубконто.Вставить("ВидСубконто"+Суффикс+Формат(К, "ЧГ=0"), ВидыСубконто[К - 1].ВидСубконто);
		КонецЦикла;
		
	КонецЕсли;
	Возврат СтруктураВидовСубконто;
	
КонецФункции

Процедура ОтразитьДанныеРегистра(ИмяРегистра, ТекстЗапроса, ПараметрыОтражения, ТаблицаПроводок);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыОтражения.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОперативногоУчета = Результат.Выгрузить();
	
	// Добавление ключевого поля
	ДанныеОперативногоУчета.Колонки.Добавить("КлючСтроки", Новый ОписаниеТипов("Число"));
	ДанныеОперативногоУчета.Индексы.Добавить("КлючСтроки");
	КлючСтроки = 1;
	Для каждого Строка Из ДанныеОперативногоУчета Цикл
		Строка.КлючСтроки = КлючСтроки;
		КлючСтроки = КлючСтроки + 1;
	КонецЦикла;
	
	ДанныеОперативногоУчета.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
	ДанныеОперативногоУчета.Колонки.Добавить("ГруппаВытеснения", Новый ОписаниеТипов("СправочникСсылка.ШаблоныПроводокДляМеждународногоУчета"));
	
	НеОтражаемыеХозяйственныеОперации = НеОтражаемыеХозяйственныеОперации(ДанныеОперативногоУчета, ТаблицаПроводок);
	Для каждого НеОтражаемаяХозяйственнаяОперация Из НеОтражаемыеХозяйственныеОперации Цикл
		ДанныеОперативногоУчета.Удалить(НеОтражаемаяХозяйственнаяОперация);
	КонецЦикла;
	
	ПараметрыОтражения.Вставить("ИмяРегистра", ИмяРегистра);
	ПараметрыРегистра = МеждународныйУчетСерверПовтИсп.ПараметрыРегистра(ИмяРегистра);
	Если Не ПроверитьКорректностьПоказателей(Результат, ИмяРегистра, ПараметрыРегистра) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОтражения.Вставить("ПараметрыРегистра", ПараметрыРегистра);
	
	ПараметрыОтражения.Вставить("ШаблоныПроводок", ПараметрыОтражения.НастройкиОтражения.Строки);
	ПараметрыОтражения.Вставить("ВариантСовместногоПрименения", Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Все);
	ПараметрыОтражения.Вставить("ДополнительныйОтборГруппы", Неопределено);
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхОперативногоУчета(ДанныеОперативногоУчета);
	
	ОтразитьДанныеОперативногоУчетаРекурсивно(СхемаКомпоновкиДанных,
		ДанныеОперативногоУчета,
		ПараметрыОтражения,
		ТаблицаПроводок);
		
	ДанныеОперативногоУчета.Свернуть("Регистратор, ХозяйственнаяОперация, Организация", "Обработан");
	Для каждого Данные Из ДанныеОперативногоУчета Цикл
		Если Не Данные.Обработан Тогда
			Проводка = СтруктураПроводки();
			ЗаполнитьЗначенияСвойств(Проводка, Данные);
			ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
			ТекстОшибки = НСтр("ru='Для хозяйственной операции ""%ХозяйственнаяОперация%"" отсутствуют шаблоны проводок.';uk='Для господарської операції ""%ХозяйственнаяОперация%"" відсутні шаблони проводок.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ХозяйственнаяОперация%", Данные.ХозяйственнаяОперация);
			ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
			ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НеОтражаемыеХозяйственныеОперации(ДанныеОперативногоУчета, ТаблицаПроводок)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОперативногоУчета.Период КАК Период,
	|	ДанныеОперативногоУчета.КлючСтроки КАК КлючСтроки,
	|	ДанныеОперативногоУчета.Организация КАК Организация,
	|	ДанныеОперативногоУчета.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеОперативногоУчета.УчетнаяПолитика КАК УчетнаяПолитика
	|ПОМЕСТИТЬ ДанныеОперативногоУчета
	|ИЗ
	|	&ДанныеОперативногоУчета КАК ДанныеОперативногоУчета
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозяйственнаяОперация,
	|	УчетнаяПолитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОперативногоУчета.Период КАК Период,
	|	ДанныеОперативногоУчета.КлючСтроки КАК КлючСтроки,
	|	ДанныеОперативногоУчета.Организация КАК Организация,
	|	ДанныеОперативногоУчета.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ИСТИНА КАК ИспользоватьВМеждународномУчете
	|ИЗ
	|	ДанныеОперативногоУчета КАК ДанныеОперативногоУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозопераций
	|	ПО
	|		ДанныеОперативногоУчета.ХозяйственнаяОперация = НастройкиХозопераций.ХозяйственнаяОперация
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ХозяйственныеОперацииНеОтражаемыеВМеждународномУчете КАК НеОтражаемыеХозоперации
	|	ПО
	|		ДанныеОперативногоУчета.УчетнаяПолитика = НеОтражаемыеХозоперации.УчетнаяПолитика
	|		И НастройкиХозопераций.Ссылка = НеОтражаемыеХозоперации.Операция
	|ГДЕ
	|	 НастройкиХозОпераций.ИспользоватьВМеждународномУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеОперативногоУчета.Период КАК Период,
	|	ДанныеОперативногоУчета.КлючСтроки КАК КлючСтроки,
	|	ДанныеОперативногоУчета.Организация КАК Организация,
	|	ДанныеОперативногоУчета.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	НастройкиХозОпераций.ИспользоватьВМеждународномУчете КАК ИспользоватьВМеждународномУчете
	|ИЗ
	|	ДанныеОперативногоУчета КАК ДанныеОперативногоУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозОпераций
	|	ПО
	|		ДанныеОперативногоУчета.ХозяйственнаяОперация = НастройкиХозопераций.ХозяйственнаяОперация
	|ГДЕ
	|	НЕ НастройкиХозОпераций.ИспользоватьВМеждународномУчете
	|";
	
	Запрос.УстановитьПараметр("ДанныеОперативногоУчета", ДанныеОперативногоУчета);
	ВыборкаНеОтражаемыеХозоперации = Запрос.Выполнить().Выбрать();
	НеОтражаемыеХозяйственныеОперации = Новый Массив;
	Пока ВыборкаНеОтражаемыеХозоперации.Следующий() Цикл
		ЗаписьРегистра = ДанныеОперативногоУчета.Найти(ВыборкаНеОтражаемыеХозоперации.КлючСтроки, "КлючСтроки");
		НеОтражаемыеХозяйственныеОперации.Добавить(ЗаписьРегистра);
		Проводка = СтруктураПроводки();
		Проводка.Регистратор = ЗаписьРегистра.Регистратор;
		ЗаполнитьЗначенияСвойств(Проводка, ВыборкаНеОтражаемыеХозоперации);
		ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
		ТекстОшибки = НСтр("ru='Хозяйственная операция ""%ХозяйственнаяОперация%"" игнорируется учетной политикой.';uk='Господарська операція ""%ХозяйственнаяОперация%"" ігнорується обліковою політикою.'");
		Если НЕ ВыборкаНеОтражаемыеХозОперации.ИспользоватьВМеждународномУчете Тогда
			ТекстОшибки = НСтр("ru='Хозяйственная операция ""%ХозяйственнаяОперация%"" не используется в международном учете.';uk='Господарська операція ""%ХозяйственнаяОперация%"" не використовується в міжнародному обліку.'");
		КонецЕсли;
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ХозяйственнаяОперация%", ВыборкаНеОтражаемыеХозоперации.ХозяйственнаяОперация);
		ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
		ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
	КонецЦикла;
	
	Возврат НеОтражаемыеХозяйственныеОперации;

КонецФункции

Функция СхемаКомпоновкиДанныхОперативногоУчета(ДанныеОперативногоУчета)

	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхемаНаборОбъект("ДанныеОперативногоУчета");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("ДанныеОперативногоУчета");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Для Каждого Колонка Из ДанныеОперативногоУчета.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
	КонецЦикла;
	
	Возврат СхемаКомпоновкиДанных;

КонецФункции

Процедура ОтразитьДанныеОперативногоУчетаРекурсивно(СхемаКомпоновкиДанных, ДанныеОперативногоУчета, ПараметрыОтражения, ТаблицаПроводок)

	ШаблоныПроводок = ПараметрыОтражения.ШаблоныПроводок;
	ВариантСовместногоПрименения = ПараметрыОтражения.ВариантСовместногоПрименения;
	ДополнительныйОтборГруппы = ПараметрыОтражения.ДополнительныйОтборГруппы;
	
	МассивВытесненныхСтрок = Новый Массив;
	
	Для каждого ШаблонПроводки Из ШаблоныПроводок Цикл
		
		Если ШаблонПроводки.ЭтоГруппаШаблонов Тогда
			Если ШаблонПроводки.УстановленДополнительныйОтбор Тогда
				ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
				КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
					СхемаКомпоновкиДанных, ДополнительныйОтбор, ШаблонПроводки.ДополнительныйОтбор.Получить()); 
				Если ДополнительныйОтборГруппы <> Неопределено Тогда
					КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
						СхемаКомпоновкиДанных, ДополнительныйОтбор, ДополнительныйОтборГруппы);
				КонецЕсли;
			КонецЕсли;
			ПараметрыОтраженияГруппы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыОтражения);
			ПараметрыОтраженияГруппы.Вставить("ШаблоныПроводок", ШаблонПроводки.Строки);
			ПараметрыОтраженияГруппы.Вставить("ВариантСовместногоПрименения", ШаблонПроводки.ВариантСовместногоПрименения);
			ПараметрыОтраженияГруппы.Вставить("ДополнительныйОтборГруппы", ДополнительныйОтбор);
			
			ОтразитьДанныеОперативногоУчетаРекурсивно(
				СхемаКомпоновкиДанных, 
				ДанныеОперативногоУчета, 
				ПараметрыОтраженияГруппы, 
				ТаблицаПроводок);
		Иначе
			
			Настройки = Новый НастройкиКомпоновкиДанных;
			НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "КлючСтроки");
			
			УстановитьОтборДанныхПоШаблонуПроводки(
				СхемаКомпоновкиДанных, 
				Настройки, 
				ШаблонПроводки, 
				ДополнительныйОтборГруппы,
				ВариантСовместногоПрименения);
				
			ВнешниеНаборы = Новый Структура;
			ВнешниеНаборы.Вставить("ДанныеОперативногоУчета", ДанныеОперативногоУчета);
			
			Результат = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
				
			Показатели				= ПараметрыОтражения.ПараметрыРегистра.Показатели;
			ПоказателиВВалюте		= ПараметрыОтражения.ПараметрыРегистра.ПоказателиВВалюте;
			ИсточникиУточненияСчета = ПараметрыОтражения.ПараметрыРегистра.ИсточникиУточненияСчета;
			ИсточникиПодразделений	= ПараметрыОтражения.ПараметрыРегистра.ИсточникиПодразделений;
			ИсточникиСубконто		= ПараметрыОтражения.ПараметрыРегистра.ИсточникиСубконто;
			
			ТаблицаУточненияСчетов = ПараметрыОтражения.ТаблицаУточненияСчетов;
			ВалютыУчета = ПараметрыОтражения.ВалютыУчета;
			
			Для каждого Строка Из Результат Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("КлючСтроки", Строка.КлючСтроки);
				Данные = ДанныеОперативногоУчета.НайтиСтроки(Отбор)[0];
				
				Данные.Обработан = Истина;
				
				Вытеснение = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение;
				Если ВариантСовместногоПрименения = Вытеснение Тогда
					Данные.ГруппаВытеснения = ШаблонПроводки.Родитель.ШаблонПроводки;
				КонецЕсли;
				
				Если ШаблонПроводки.Уровень() = 2
					И ШаблонПроводки.Родитель.Родитель.ВариантСовместногоПрименения = Вытеснение Тогда
					МассивВытесненныхСтрок.Добавить(Данные);
				КонецЕсли;
				
				Проводка = СтруктураПроводки();
				ЗаполнитьЗначенияСвойств(Проводка, Данные, "Период, Регистратор, Организация");
				
				Если ШаблонПроводки.РучноеУточнениеПроводки Тогда
					ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
				КонецЕсли;
				
				Проводка.Активность = Истина;
				Проводка.ШаблонПроводки = ШаблонПроводки.ШаблонПроводки;
				
				ИсточникБалансовойСуммы = ШаблонПроводки.ИсточникБалансовойСуммы;
				Если Не ЗначениеЗаполнено(ИсточникБалансовойСуммы) Тогда
					ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
					ТекстОшибки = НСтр("ru='Не выбран источник балансовой суммы.';uk='Не вибрано джерело балансової суми.'");
					ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
				Иначе
					Ресурсы = Показатели.Получить(ИсточникБалансовойСуммы).Ресурсы;
					
					БалансоваяСумма = БалансоваяСумма(Данные, ШаблонПроводки, Ресурсы, ВалютыУчета, ВалютыУчета.ФункциональнаяВалюта); 
					Проводка.Сумма = БалансоваяСумма.Сумма;
					Проводка.ВалютаХраненияСуммыФункциональной = БалансоваяСумма.Валюта;
					
					БалансоваяСумма = БалансоваяСумма(Данные, ШаблонПроводки, Ресурсы, ВалютыУчета, ВалютыУчета.ВалютаПредставления);
					Проводка.СуммаПредставления = БалансоваяСумма.Сумма;
					Проводка.ВалютаХраненияСуммыПредставления = БалансоваяСумма.Валюта;
				КонецЕсли;
					
				Проводка.СчетДт = СчетУчета(Данные, ШаблонПроводки, ТаблицаУточненияСчетов, ИсточникиУточненияСчета, "Дт");
					
				Проводка.СчетКт = СчетУчета(Данные, ШаблонПроводки, ТаблицаУточненияСчетов, ИсточникиУточненияСчета, "Кт");
					
				Если МеждународныйУчетОбщегоНазначения.СчетВалютный(Проводка.СчетДт) Тогда
					ИсточникСуммыВВалютеДт = ШаблонПроводки.ИсточникСуммыВВалютеДт;
					Если Не ЗначениеЗаполнено(ИсточникСуммыВВалютеДт) Тогда
						ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
						ТекстОшибки = НСтр("ru='Не выбран источник валютной суммы Дт.';uk='Не вибрано джерело валютної суми Дт.'");
						ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
					Иначе
						ИсточникВалютыДт = ПоказателиВВалюте.Получить(ИсточникСуммыВВалютеДт).ИсточникВалюты;
						Проводка.ВалютаДт = Данные[ИсточникВалютыДт];
						Проводка.ВалютнаяСуммаДт = СуммаВВалюте(Данные, ШаблонПроводки, Ресурсы, ИсточникВалютыДт);
					КонецЕсли;
				Иначе
					Проводка.ВалютаДт = Справочники.Валюты.ПустаяСсылка();
					Проводка.ВалютнаяСуммаДт = 0;
				КонецЕсли;
					
				Если МеждународныйУчетОбщегоНазначения.СчетВалютный(Проводка.СчетКт) Тогда
					ИсточникСуммыВВалютеКт = ШаблонПроводки.ИсточникСуммыВВалютеКт;
					Если Не ЗначениеЗаполнено(ИсточникСуммыВВалютеКт) Тогда
						ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
						ТекстОшибки = НСтр("ru='Не выбран источник валютной суммы Кт.';uk='Не вибрано джерело валютної суми Кт.'");
						ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
					Иначе
						ИсточникВалютыКт = ПоказателиВВалюте.Получить(ИсточникСуммыВВалютеКт).ИсточникВалюты;
						Проводка.ВалютаКт = Данные[ИсточникВалютыКт];
						Проводка.ВалютнаяСуммаКт = СуммаВВалюте(Данные, ШаблонПроводки, Ресурсы, ИсточникВалютыКт);
					КонецЕсли;
				Иначе
					Проводка.ВалютаКт = Справочники.Валюты.ПустаяСсылка();
					Проводка.ВалютнаяСуммаКт = 0;
				КонецЕсли;
					
				Проводка.ПодразделениеДт = Подразделение(Данные, ИсточникиПодразделений, ШаблонПроводки.ИсточникПодразделенияДт);
				Проводка.ПодразделениеКт = Подразделение(Данные, ИсточникиПодразделений, ШаблонПроводки.ИсточникПодразделенияКт);
				
				Проводка.Вставить("ДанныеШаблонаПроводки", ШаблонПроводки);
				ЗаполнитьСубконто(ПараметрыОтражения.ИмяРегистра, Данные, Проводка, ИсточникиСубконто, "Дт");
				ЗаполнитьСубконто(ПараметрыОтражения.ИмяРегистра, Данные, Проводка, ИсточникиСубконто, "Кт");
				
				ПроверитьЗаполнениеПроводки(Проводка, ШаблонПроводки, ПараметрыОтражения.ПараметрыРегистра);
				
				ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ВытесненнаяСтрока Из МассивВытесненныхСтрок Цикл
		ВытесненнаяСтрока.ГруппаВытеснения = ШаблоныПроводок.Родитель.Родитель.ШаблонПроводки
	КонецЦикла;

КонецПроцедуры

Функция УстановитьОтборДанныхПоШаблонуПроводки(СхемаКомпоновкиДанных, Настройки, ШаблонПроводки, ДополнительныйОтборГруппы, ВариантСовместногоПрименения)
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "ХозяйственнаяОперация", ШаблонПроводки.ХозяйственнаяОперация);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "УчетнаяПолитика", ШаблонПроводки.УчетнаяПолитика);
	
	Если ДополнительныйОтборГруппы <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, ДополнительныйОтборГруппы);
	КонецЕсли;
	
	Если ШаблонПроводки.УстановленДополнительныйОтбор Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, ШаблонПроводки.ДополнительныйОтбор.Получить());
	КонецЕсли;
	
	Уровень = ШаблонПроводки.Уровень();
	
	Если Уровень = 1 И ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение Тогда
		ГруппаЭлементовОтбораИли = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
			"Обработан",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
			"ГруппаВытеснения",
			ШаблонПроводки.Родитель.ШаблонПроводки,
			ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	Если Уровень = 2 Тогда
		Если ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Все Тогда
			ГруппаЭлементовОтбораИли = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
				"Обработан",
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
				"ГруппаВытеснения",
				ШаблонПроводки.Родитель.Родитель.ШаблонПроводки,
				ВидСравненияКомпоновкиДанных.НеРавно);
		Иначе
			ГруппаЭлементовОтбораИли = Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИли,
				"Обработан",
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно);
			ГруппаЭлементовОтбораИ = ГруппаЭлементовОтбораИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИ,
				"ГруппаВытеснения",
				ШаблонПроводки.Родитель.ШаблонПроводки,
				ВидСравненияКомпоновкиДанных.НеРавно);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбораИ,
				"ГруппаВытеснения",
				ШаблонПроводки.Родитель.Родитель.ШаблонПроводки,
				ВидСравненияКомпоновкиДанных.НеРавно);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ТекстыЗапросовПоРегистрам()

	ТекстыЗапросов = Новый Соответствие;
	ТекстыЗапросов.Вставить("ДвиженияДенежныхСредств", ТекстЗапросаДвиженияДенежныхСредств());
	ТекстыЗапросов.Вставить("ДвиженияДенежныеСредстваДоходыРасходы", ТекстЗапросаДвиженияДенежныеСредстваДоходыРасходы());
	ТекстыЗапросов.Вставить("ДвиженияДенежныеСредстваКонтрагент", ТекстЗапросаДвиженияДенежныеСредстваКонтрагент());
	ТекстыЗапросов.Вставить("ВыручкаИСебестоимостьПродаж", ТекстЗапросаВыручкаИСебестоимостьПродаж());
	ТекстыЗапросов.Вставить("Закупки", ТекстЗапросаЗакупки());
	ТекстыЗапросов.Вставить("ДвиженияДоходыРасходыПрочиеАктивыПассивы", ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы());
	ТекстыЗапросов.Вставить("ДвиженияНоменклатураДоходыРасходы", ТекстЗапросаДвиженияНоменклатураДоходыРасходы());
	ТекстыЗапросов.Вставить("ДвиженияНоменклатураНоменклатура", ТекстЗапросаДвиженияНоменклатураНоменклатура());
	ТекстыЗапросов.Вставить("ДвиженияКонтрагентДоходыРасходы", ТекстЗапросаДвиженияКонтрагентДоходыРасходы());
	ТекстыЗапросов.Вставить("ДвиженияКонтрагентКонтрагент", ТекстЗапросаДвиженияКонтрагентКонтрагент());
	ТекстыЗапросов.Вставить("РасчетыСКлиентамиПоДокументам", ТекстЗапросаРасчетыСКлиентамиПоДокументам());
	ТекстыЗапросов.Вставить("РасчетыСПоставщикамиПоДокументам", ТекстЗапросаРасчетыСПоставщикамиПоДокументам());
	ТекстыЗапросов.Вставить("КорректировкиНДСПартий", ТекстЗапросаКорректировкиНДСПартий());
	ТекстыЗапросов.Вставить("НДСРеестрВыданныхНалоговыхДокументов", ТекстЗапросаНДСРеестрВыданныхНалоговыхДокументов());
	ТекстыЗапросов.Вставить("НДСРеестрПолученныхНалоговыхДокументов", ТекстЗапросаНДСРеестрПолученныхНалоговыхДокументов());
	
	Возврат ТекстыЗапросов;

КонецФункции

Функция ТекстЗапросаДвиженияДенежныхСредств()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.ДенежныеСредства КАК ДенежныеСредства,
	|	ДанныеРегистра.ДенежныеСредства.Подразделение КАК ДенежныеСредстваПодразделение,
	|	ДанныеРегистра.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.КорДенежныеСредства КАК КорДенежныеСредства,
	|	ДанныеРегистра.КорДенежныеСредства.Подразделение КАК КорДенежныеСредстваПодразделение,
	|	ДанныеРегистра.КорТипДенежныхСредств КАК КорТипДенежныхСредств,
	|	ДанныеРегистра.КорВалюта КАК КорВалюта,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|	ДанныеРегистра.СуммаВКорВалюте КАК СуммаВКорВалюте,
	|
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита + ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплате,
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита КАК СуммаКВыплатеВРамкахЛимита,
	|	ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплатеСверхЛимита,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчетаДенежныхСредств
	|		ИНАЧЕ ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГФУДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ИсточникКорГФУДенежныхСредств ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ДанныеРегистра.ИсточникКорГФУДенежныхСредств.ГруппаФинансовогоУчетаДенежныхСредств
	|		ИНАЧЕ ДанныеРегистра.ИсточникКорГФУДенежныхСредств.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК КорГФУДенежныхСредств,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДенежныеСредстваДоходыРасходы()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.ДенежныеСредства КАК ДенежныеСредства,
	|	ДанныеРегистра.ДенежныеСредства.Подразделение КАК ДенежныеСредстваПодразделение,
	|	ДанныеРегистра.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаДоходовРасходовПодразделение,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита + ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплате,
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита КАК СуммаКВыплатеВРамкахЛимита,
	|	ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплатеСверхЛимита,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчетаДенежныхСредств
	|		ИНАЧЕ ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГФУДенежныхСредств,
	|	ДанныеРегистра.ИсточникГФУДоходовРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияДенежныеСредстваКонтрагент()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.ДенежныеСредства КАК ДенежныеСредства,
	|	ДанныеРегистра.ДенежныеСредства.Подразделение КАК ДенежныеСредстваПодразделение,
	|	ДанныеРегистра.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.ВалютаПлатежа КАК ВалютаПлатежа,
	|
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК ОбъектРасчетовПодразделение,
	|	ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|	
	|	ДанныеРегистра.СуммаОплаты КАК СуммаОплаты,
	|	ДанныеРегистра.СуммаОплатыРегл КАК СуммаОплатыРегл,
	|	ДанныеРегистра.СуммаОплатыВВалютеПлатежа КАК СуммаОплатыВВалютеПлатежа,
	|	ДанныеРегистра.СуммаПостоплаты КАК СуммаПостоплаты,
	|	ДанныеРегистра.СуммаПостоплатыРегл КАК СуммаПостоплатыРегл,
	|	ДанныеРегистра.СуммаПостоплатыВВалютеПлатежа КАК СуммаПостоплатыВВалютеПлатежа,
	|	ДанныеРегистра.СуммаПредоплаты КАК СуммаПредоплаты,
	|	ДанныеРегистра.СуммаПредоплатыРегл КАК СуммаПредоплатыРегл,
	|	ДанныеРегистра.СуммаПредоплатыВВалютеПлатежа КАК СуммаПредоплатыВВалютеПлатежа,
	|	
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаОплатыВВалютеВзаиморасчетов КАК СуммаОплатыВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаПостоплатыВВалютеВзаиморасчетов КАК СуммаПостоплатыВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаПредоплатыВВалютеВзаиморасчетов КАК СуммаПредоплатыВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита + ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплате,
	|	ДанныеРегистра.СуммаКВыплатеВРамкахЛимита КАК СуммаКВыплатеВРамкахЛимита,
	|	ДанныеРегистра.СуммаКВыплатеСверхЛимита КАК СуммаКВыплатеСверхЛимита,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|			ТОГДА ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчетаДенежныхСредств
	|		ИНАЧЕ ДанныеРегистра.ИсточникГФУДенежныхСредств.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГФУДенежныхСредств,
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ТекстЗапросаВыручкаИСебестоимостьПродаж() Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|	
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ВидЗапасов.Контрагент КАК Поставщик,
	|	ДанныеРегистра.Соглашение КАК Соглашение,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказКлиента КАК ЗаказКлиента,
	|	
	|	СУММА(ДанныеРегистра.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ДанныеРегистра.СуммаВыручкиБезНДС) КАК СуммаВыручкиБезНДС,
	|	СУММА(ДанныеРегистра.СуммаВыручки - ДанныеРегистра.СуммаВыручкиБезНДС) КАК СуммаНДС,
	|	СУММА(ДанныеРегистра.СуммаВыручкиСНДСРегл) КАК СуммаВыручкиСНДСРегл,
	|	СУММА(ДанныеРегистра.СуммаВыручкиРегл) КАК СуммаВыручкиРегл,
	|	СУММА(ДанныеРегистра.СуммаВыручкиСНДСРегл - ДанныеРегистра.СуммаВыручкиРегл) КАК СуммаНДСРегл,
	|	
	|	СУММА(ДанныеРегистра.Себестоимость) КАК Себестоимость,
	|	СУММА(ДанныеРегистра.СебестоимостьБезНДС) КАК СебестоимостьБезНДС,
	|	СУММА(ДанныеРегистра.СебестоимостьРегл) КАК СебестоимостьРегл,
	|	СУММА(ДанныеРегистра.СуммаДополнительныхРасходов) КАК СуммаДополнительныхРасходов,
	|	СУММА(ДанныеРегистра.СуммаДополнительныхРасходовБезНДС) КАК СуммаДополнительныхРасходовБезНДС,
	|	СУММА(ДанныеРегистра.СуммаДополнительныхРасходов - ДанныеРегистра.СуммаДополнительныхРасходовБезНДС) КАК СуммаНДСДополнительныхРасходов,
	|	
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ДанныеРегистра.СуммаВВалютеВзаиморасчетов) КАК СуммаВВалютеВзаиморасчетов,
	|	СУММА(ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов) КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	СУММА(ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов) КАК СуммаНДСВВалютеВзаиморасчетов,
	|	
	|	ДанныеРегистра.ВалютаДокумента КАК ВалютаДокумента,
	|	СУММА(ДанныеРегистра.СуммаВВалютеДокумента) КАК СуммаВВалютеДокумента,
	|	СУММА(ДанныеРегистра.СуммаБезНДСВВалютеДокумента) КАК СуммаБезНДСВВалютеДокумента,
	|	СУММА(ДанныеРегистра.СуммаВВалютеДокумента - ДанныеРегистра.СуммаБезНДСВВалютеДокумента) КАК СуммаНДСВВалютеДокумента,
	|	
	|	ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		АналитикаПартнеров.Организация КАК Организация,
	|		ДанныеРегистра.Подразделение КАК Подразделение,
	|	
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ДанныеРегистра.Склад КАК Склад,
	|		ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|		ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	
	|		АналитикаПартнеров.Партнер КАК Партнер,
	|		АналитикаПартнеров.Контрагент КАК Контрагент,
	|		ДанныеРегистра.Соглашение КАК Соглашение,
	|		ДанныеРегистра.Договор КАК Договор,
	|		ДанныеРегистра.ЗаказКлиента КАК ЗаказКлиента,
	|		
	|		ДанныеРегистра.СуммаВыручки КАК СуммаВыручки,
	|		ДанныеРегистра.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|		ДанныеРегистра.СуммаВыручкиСНДСРегл КАК СуммаВыручкиСНДСРегл,
	|		ДанныеРегистра.СуммаВыручкиРегл КАК СуммаВыручкиРегл,
	|	
	|		ДанныеРегистра.Себестоимость КАК Себестоимость,
	|		ДанныеРегистра.СебестоимостьБезНДС КАК СебестоимостьБезНДС,
	|		ДанныеРегистра.СебестоимостьРегл КАК СебестоимостьРегл,
	|		ДанныеРегистра.СуммаДополнительныхРасходов КАК СуммаДополнительныхРасходов,
	|		ДанныеРегистра.СуммаДополнительныхРасходовБезНДС КАК СуммаДополнительныхРасходовБезНДС,
	|	
	|		ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|		ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|		ДанныеРегистра.ВалютаДокумента КАК ВалютаДокумента,
	|		ДанныеРегистра.СуммаВВалютеДокумента КАК СуммаВВалютеДокумента,
	|		ДанныеРегистра.СуммаБезНДСВВалютеДокумента КАК СуммаБезНДСВВалютеДокумента,
	|	
	|		ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|		ДанныеРегистра.ИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
	|		ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПартнеров
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И АналитикаПартнеров.Организация = ДокументыКОтражению.Организация
	|	ГДЕ
	|		ДанныеРегистра.Активность
	//Отсечем движения сделанные расчетом себестоимости (они попадут в результат после выполнения объединения со следующим запросом):
	|		И ДанныеРегистра.ДокументДвижения = НЕОПРЕДЕЛЕНО
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.ДокументДвижения КАК Регистратор,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		АналитикаПартнеров.Организация КАК Организация,
	|		ДанныеРегистра.Подразделение КАК Подразделение,
	|	
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ДанныеРегистра.Склад КАК Склад,
	|		ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|		ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	
	|		АналитикаПартнеров.Партнер КАК Партнер,
	|		АналитикаПартнеров.Контрагент КАК Контрагент,
	|		ДанныеРегистра.Соглашение КАК Соглашение,
	|		ДанныеРегистра.Договор КАК Договор,
	|		ДанныеРегистра.ЗаказКлиента КАК ЗаказКлиента,
	|		
	|		ДанныеРегистра.СуммаВыручки КАК СуммаВыручки,
	|		ДанныеРегистра.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|		ДанныеРегистра.СуммаВыручкиСНДСРегл КАК СуммаВыручкиСНДСРегл,
	|		ДанныеРегистра.СуммаВыручкиРегл КАК СуммаВыручкиРегл,
	|	
	|		ДанныеРегистра.Себестоимость КАК Себестоимость,
	|		ДанныеРегистра.СебестоимостьБезНДС КАК СебестоимостьБезНДС,
	|		ДанныеРегистра.СебестоимостьРегл КАК СебестоимостьРегл,
	|		ДанныеРегистра.СуммаДополнительныхРасходов КАК СуммаДополнительныхРасходов,
	|		ДанныеРегистра.СуммаДополнительныхРасходовБезНДС КАК СуммаДополнительныхРасходовБезНДС,
	|	
	|		ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|		ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|		ДанныеРегистра.ВалютаДокумента КАК ВалютаДокумента,
	|		ДанныеРегистра.СуммаВВалютеДокумента КАК СуммаВВалютеДокумента,
	|		ДанныеРегистра.СуммаБезНДСВВалютеДокумента КАК СуммаБезНДСВВалютеДокумента,
	|	
	|		ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|		ДанныеРегистра.ИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
	|		ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПартнеров
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.ДокументДвижения = ДокументыКОтражению.Регистратор
	|		И АналитикаПартнеров.Организация = ДокументыКОтражению.Организация
	|	ГДЕ
	|		ДанныеРегистра.Активность
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.Склад,
	|	ДанныеРегистра.ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов,
	|	ДанныеРегистра.Партнер,
	|	ДанныеРегистра.Контрагент,
	|	ДанныеРегистра.ВидЗапасов.Контрагент,
	|	ДанныеРегистра.Соглашение,
	|	ДанныеРегистра.Договор,
	|	ДанныеРегистра.ЗаказКлиента,
	|	ДанныеРегистра.ВалютаВзаиморасчетов,
	|	ДанныеРегистра.ВалютаДокумента,
	|	ДанныеРегистра.ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.ИсточникГФУРасчетов,
	|	ДанныеРегистра.УчетнаяПолитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	АналитикаНоменклатуры.Характеристика КАК Характеристика,
	|	АналитикаНоменклатуры.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА ДанныеРегистра.Склад.Подразделение
	|		ИНАЧЕ ДанныеРегистра.Склад
	|	КОНЕЦ КАК СкладПодразделение,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.Поставщик КАК Поставщик,
	|	ДанныеРегистра.Соглашение КАК Соглашение,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ЗаказКлиента КАК Заказ,
	|	ДанныеРегистра.ЗаказКлиента.Подразделение КАК ЗаказПодразделение,
	|	
	|	ДанныеРегистра.СуммаВыручки КАК СуммаВыручки,
	|	ДанныеРегистра.СуммаВыручкиБезНДС КАК СуммаВыручкиБезНДС,
	|	ДанныеРегистра.СуммаВыручки - ДанныеРегистра.СуммаВыручкиБезНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаВыручкиСНДСРегл КАК СуммаВыручкиСНДСРегл,
	|	ДанныеРегистра.СуммаВыручкиРегл КАК СуммаВыручкиРегл,
	|	ДанныеРегистра.СуммаВыручкиСНДСРегл - ДанныеРегистра.СуммаВыручкиРегл КАК СуммаНДСРегл,
	|
	|	ДанныеРегистра.Себестоимость КАК Себестоимость,
	|	ДанныеРегистра.СебестоимостьБезНДС КАК СебестоимостьБезНДС,
	|	ДанныеРегистра.СебестоимостьРегл КАК СебестоимостьРегл,
	|	ДанныеРегистра.СуммаДополнительныхРасходов КАК СуммаДополнительныхРасходов,
	|	ДанныеРегистра.СуммаДополнительныхРасходовБезНДС КАК СуммаДополнительныхРасходовБезНДС,
	|	ДанныеРегистра.СуммаДополнительныхРасходов - ДанныеРегистра.СуммаДополнительныхРасходовБезНДС КАК СуммаНДСДополнительныхРасходов,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаНДСВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеРегистра.СуммаВВалютеДокумента КАК СуммаВВалютеДокумента,
	|	ДанныеРегистра.СуммаБезНДСВВалютеДокумента КАК СуммаБезНДСВВалютеДокумента,
	|	ДанныеРегистра.СуммаВВалютеДокумента - ДанныеРегистра.СуммаБезНДСВВалютеДокумента КАК СуммаНДСВВалютеДокумента,
	|
	|	ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК ГФУНоменклатуры,
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеРегистра
	|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаЗакупки()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА ДанныеРегистра.Склад.Подразделение
	|		ИНАЧЕ ДанныеРегистра.Склад
	|	КОНЕЦ КАК СкладПодразделение,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ВидЗапасов.Контрагент КАК Поставщик,
	|	ДанныеРегистра.Соглашение КАК Соглашение,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.Заказ КАК Заказ,
	|	ДанныеРегистра.Заказ.Подразделение КАК ЗаказПодразделение,
	|	
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаБезНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|	ДанныеРегистра.СуммаРегл - ДанныеРегистра.СуммаРеглБезНДС КАК СуммаНДСРегл,
	|
	|	ДанныеРегистра.Стоимость КАК Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|	ДанныеРегистра.СтоимостьРегл КАК СтоимостьРегл,
	|	ДанныеРегистра.СуммаДопРасходов КАК СуммаДопРасходов,
	|	ДанныеРегистра.СуммаДопРасходовБезНДС КАК СуммаДопРасходовБезНДС,
	|	ДанныеРегистра.СуммаДопРасходов - ДанныеРегистра.СуммаДопРасходовБезНДС КАК СуммаНДСДопРасходов,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаНДСВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.ВалютаДокумента КАК ВалютаДокумента,
	|	ДанныеРегистра.СуммаВВалютеДокумента КАК СуммаВВалютеДокумента,
	|	ДанныеРегистра.СуммаБезНДСВВалютеДокумента КАК СуммаБезНДСВВалютеДокумента,
	|	ДанныеРегистра.СуммаВВалютеДокумента - ДанныеРегистра.СуммаБезНДСВВалютеДокумента КАК СуммаНДСВВалютеДокумента,
	|
	|	ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК ГФУНоменклатуры,
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.Закупки КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.Статья КАК Статья,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Статья ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаДоходовРасходовПодразделение,
	|
	|	ДанныеРегистра.КорПодразделение КАК КорПодразделение,
	|	ДанныеРегистра.КорСтатья КАК КорСтатья,
	|	ДанныеРегистра.КорАналитикаДоходов КАК КорАналитикаДоходов,
	|	ДанныеРегистра.КорАналитикаРасходов КАК КорАналитикаРасходов,
	|	ДанныеРегистра.КорАналитикаАктивовПассивов КАК КорАналитикаАктивовПассивов,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|	ДанныеРегистра.Статья.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|
	|	ДанныеРегистра.ВидОперацииПоЗарплате КАК ВидОперацииПоЗарплате,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураДоходыРасходы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	ДанныеРегистра.ВидЗапасов.Контрагент КАК Поставщик,
	|
	|	СУММА(ДанныеРегистра.Стоимость) КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.Стоимость - ДанныеРегистра.СтоимостьБезНДС) КАК СуммаНДС,
	|	СУММА(ДанныеРегистра.СтоимостьРегл) КАК СтоимостьРегл,
	|	
	|	ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.Подразделение КАК Подразделение,
	|	
	|		ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|		ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|		ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|		ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ДанныеРегистра.Склад КАК Склад,
	|		ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|		ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	
	|		ДанныеРегистра.Стоимость КАК Стоимость,
	|		ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|		ДанныеРегистра.СтоимостьРегл КАК СтоимостьРегл,
	|		
	|		ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|		ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО
	|			ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|	ГДЕ
	|		ДанныеРегистра.Активность
	//Отсечем движения сделанные расчетом себестоимости (они попадут в результат после выполнения объединения со следующим запросом):
	|		И ДанныеРегистра.ДокументДвижения = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.ДокументДвижения КАК Регистратор,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.Подразделение КАК Подразделение,
	|	
	|		ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|		ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|		ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|		ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ДанныеРегистра.Склад КАК Склад,
	|		ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|		ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	
	|		ДанныеРегистра.Стоимость КАК Стоимость,
	|		ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|		ДанныеРегистра.СтоимостьРегл КАК СтоимостьРегл,
	|		
	|		ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|		ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО
	|			ДанныеРегистра.ДокументДвижения = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|	ГДЕ
	|		ДанныеРегистра.Активность
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.Склад,
	|	ДанныеРегистра.ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов,
	|	ДанныеРегистра.ВидЗапасов.Контрагент,
	|	ДанныеРегистра.ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.УчетнаяПолитика
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Стоимость) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.Стоимость - ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьРегл) <> 0 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаДоходовРасходовПодразделение,
	|
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА ДанныеРегистра.Склад.Подразделение
	|		ИНАЧЕ ДанныеРегистра.Склад
	|	КОНЕЦ КАК СкладПодразделение,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	ДанныеРегистра.Поставщик КАК Поставщик,
	|
	|	ДанныеРегистра.Стоимость КАК Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|	ДанныеРегистра.СуммаНДС КАК СуммаНДС,
	|	ДанныеРегистра.СтоимостьРегл КАК СтоимостьРегл,
	|	
	|	ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК ГФУНоменклатуры,
	|	ДанныеРегистра.СтатьяДоходовРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеРегистра
	|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияНоменклатураНоменклатура()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	ДанныеРегистра.ВидЗапасов.Контрагент КАК Поставщик,
	|
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорСклад КАК КорСклад,
	|	ДанныеРегистра.КорТипЗапасов КАК КорТипЗапасов,
	|	ДанныеРегистра.КорВидЗапасов КАК КорВидЗапасов,
	|	ДанныеРегистра.КорВидЗапасов.Контрагент КАК КорПоставщик,
	|
	|	СУММА(ДанныеРегистра.Стоимость) КАК Стоимость,
	|	СУММА(ДанныеРегистра.СтоимостьБезНДС) КАК СтоимостьБезНДС,
	|	СУММА(ДанныеРегистра.СтоимостьРегл) КАК СтоимостьРегл,
	|	
	|	ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.КорИсточникГФУНоменклатуры КАК КорИсточникГФУНоменклатуры,
	|	ДанныеРегистра.КорОрганизация КАК КорОрганизация,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.Регистратор КАК Регистратор,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.Подразделение КАК Подразделение,
	|	
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ДанныеРегистра.Склад КАК Склад,
	|		ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|		ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	
	|		ДанныеРегистра.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|		ДанныеРегистра.КорСклад КАК КорСклад,
	|		ДанныеРегистра.КорТипЗапасов КАК КорТипЗапасов,
	|		ДанныеРегистра.КорВидЗапасов КАК КорВидЗапасов,
	|	
	|		ДанныеРегистра.Стоимость КАК Стоимость,
	|		ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|		ДанныеРегистра.СтоимостьРегл КАК СтоимостьРегл,
	|		
	|		ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|		ДанныеРегистра.КорИсточникГФУНоменклатуры КАК КорИсточникГФУНоменклатуры,
	|		ДанныеРегистра.КорОрганизация КАК КорОрганизация,
	|		ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО
	|			ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|	ГДЕ
	|		ДанныеРегистра.Активность
	//Отсечем движения сделанные расчетом себестоимости (они попадут в результат после выполнения объединения со следующим запросом):
	|		И ДанныеРегистра.ДокументДвижения = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеРегистра.Период КАК Период,
	|		ДанныеРегистра.ДокументДвижения КАК Регистратор,
	|		ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДанныеРегистра.Организация КАК Организация,
	|		ДанныеРегистра.Подразделение КАК Подразделение,
	|	
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ДанныеРегистра.Склад КАК Склад,
	|		ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|		ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	
	|		ДанныеРегистра.КорАналитикаУчетаНоменклатуры КАК КорАналитикаУчетаНоменклатуры,
	|		ДанныеРегистра.КорСклад КАК КорСклад,
	|		ДанныеРегистра.КорТипЗапасов КАК КорТипЗапасов,
	|		ДанныеРегистра.КорВидЗапасов КАК КорВидЗапасов,
	|	
	|		ДанныеРегистра.Стоимость КАК Стоимость,
	|		ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|		ДанныеРегистра.СтоимостьРегл КАК СтоимостьРегл,
	|		
	|		ДанныеРегистра.ИсточникГФУНоменклатуры КАК ИсточникГФУНоменклатуры,
	|		ДанныеРегистра.КорИсточникГФУНоменклатуры КАК КорИсточникГФУНоменклатуры,
	|		ДанныеРегистра.КорОрганизация КАК КорОрганизация,
	|		ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураНоменклатура КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО
	|			ДанныеРегистра.ДокументДвижения = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|	ГДЕ
	|		ДанныеРегистра.Активность
	|	) ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.АналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.Склад,
	|	ДанныеРегистра.ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов,
	|	ДанныеРегистра.ВидЗапасов.Контрагент,
	|	ДанныеРегистра.КорАналитикаУчетаНоменклатуры,
	|	ДанныеРегистра.КорСклад,
	|	ДанныеРегистра.КорТипЗапасов,
	|	ДанныеРегистра.КорВидЗапасов,
	|	ДанныеРегистра.КорВидЗапасов.Контрагент,
	|	ДанныеРегистра.ИсточникГФУНоменклатуры,
	|	ДанныеРегистра.КорИсточникГФУНоменклатуры,
	|	ДанныеРегистра.КорОрганизация,
	|	ДанныеРегистра.УчетнаяПолитика
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Стоимость) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьБезНДС) <> 0
	|	ИЛИ СУММА(ДанныеРегистра.СтоимостьРегл) <> 0 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	Аналитика.Номенклатура КАК Номенклатура,
	|	Аналитика.Характеристика КАК Характеристика,
	|	Аналитика.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ДанныеРегистра.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА ДанныеРегистра.Склад.Подразделение
	|		ИНАЧЕ ДанныеРегистра.Склад
	|	КОНЕЦ КАК СкладПодразделение,
	|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
	|	ДанныеРегистра.ВидЗапасов КАК ВидЗапасов,
	|	ДанныеРегистра.Поставщик КАК Поставщик,
	|
	|	КорАналитика.Номенклатура КАК КорНоменклатура,
	|	КорАналитика.Характеристика КАК КорХарактеристика,
	|	КорАналитика.Номенклатура.ТипНоменклатуры КАК КорТипНоменклатуры,
	|	ДанныеРегистра.КорСклад КАК КорСклад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА ДанныеРегистра.КорСклад.Подразделение
	|		ИНАЧЕ ДанныеРегистра.КорСклад
	|	КОНЕЦ КАК КорСкладПодразделение,
	|	ДанныеРегистра.КорТипЗапасов КАК КорТипЗапасов,
	|	ДанныеРегистра.КорВидЗапасов КАК КорВидЗапасов,
	|	ДанныеРегистра.КорПоставщик КАК КорПоставщик,
	|
	|	ДанныеРегистра.Стоимость КАК Стоимость,
	|	ДанныеРегистра.СтоимостьБезНДС КАК СтоимостьБезНДС,
	|	ДанныеРегистра.СтоимостьРегл КАК СтоимостьРегл,
	|	
	|	ДанныеРегистра.ИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК ГФУНоменклатуры,
	|	ДанныеРегистра.КорИсточникГФУНоменклатуры.ГруппаФинансовогоУчета КАК КорГФУНоменклатуры,
	|	ДанныеРегистра.КорОрганизация КАК КорОрганизация,
	|	ДанныеРегистра.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	ДанныеРегистра КАК ДанныеРегистра
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ДанныеРегистра.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КорАналитика
	|	ПО
	|		ДанныеРегистра.КорАналитикаУчетаНоменклатуры = КорАналитика.КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеРегистра
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияКонтрагентДоходыРасходы()

	ТекстЗапроса = 
    "ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК ОбъектРасчетовПодразделение,
	|	
	|	ДанныеРегистра.СтатьяДоходовРасходов КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.СтатьяДоходовРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов
	|			ТОГДА ДанныеРегистра.АналитикаДоходов
	|		ИНАЧЕ ДанныеРегистра.АналитикаРасходов
	|	КОНЕЦ КАК АналитикаДоходовРасходовПодразделение,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаБезНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|	ДанныеРегистра.СуммаРегл - ДанныеРегистра.СуммаРеглБезНДС КАК СуммаНДСРегл,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|	ДанныеРегистра.СуммаБезНДСВВалюте КАК СуммаБезНДСВВалюте,
	|	ДанныеРегистра.СуммаВВалюте - ДанныеРегистра.СуммаБезНДСВВалюте КАК СуммаНДСВВалюте,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаНДСВВалютеВзаиморасчетов,
	|
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.СтатьяДоходовРасходов.ГруппаФинансовогоУчета КАК ГФУДоходовРасходов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|	ГДЕ
	|		ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияКонтрагентКонтрагент()

	ТекстЗапроса = 
    "ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор, 
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Подразделение КАК Подразделение,
	|
	|	ДанныеРегистра.Партнер КАК Партнер,
	|	ДанныеРегистра.Контрагент КАК Контрагент,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов.Подразделение КАК ОбъектРасчетовПодразделение,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	
	|	ДанныеРегистра.КорПартнер КАК КорПартнер,
	|	ДанныеРегистра.КорКонтрагент КАК КорКонтрагент,
	|	ДанныеРегистра.КорДоговор КАК КорДоговор,
	|	ДанныеРегистра.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	ДанныеРегистра.КорОбъектРасчетов.Подразделение КАК КорОбъектРасчетовПодразделение,
	|	ДанныеРегистра.КорТипСуммы КАК КорТипСуммы,
	|
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.Сумма - ДанныеРегистра.СуммаБезНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаРегл КАК СуммаРегл,
	|	ДанныеРегистра.СуммаРеглБезНДС КАК СуммаРеглБезНДС,
	|	ДанныеРегистра.СуммаРегл - ДанныеРегистра.СуммаРеглБезНДС КАК СуммаНДСРегл,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СуммаВВалюте КАК СуммаВВалюте,
	|	ДанныеРегистра.СуммаБезНДСВВалюте КАК СуммаБезНДСВВалюте,
	|	ДанныеРегистра.СуммаВВалюте - ДанныеРегистра.СуммаБезНДСВВалюте КАК СуммаНДСВВалюте,
	|
	|	ДанныеРегистра.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.СуммаВВалютеВзаиморасчетов - ДанныеРегистра.СуммаБезНДСВВалютеВзаиморасчетов КАК СуммаНДСВВалютеВзаиморасчетов,
	|	
	|	ДанныеРегистра.КорВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	ДанныеРегистра.КорСуммаВВалютеВзаиморасчетов КАК КорСуммаВВалютеВзаиморасчетов,
	|	ДанныеРегистра.КорСуммаБезНДСВВалютеВзаиморасчетов КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|	ДанныеРегистра.КорСуммаВВалютеВзаиморасчетов - ДанныеРегистра.КорСуммаБезНДСВВалютеВзаиморасчетов КАК КорСуммаНДСВВалютеВзаиморасчетов,
	|	
	|	ДанныеРегистра.ИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК ГФУРасчетов,
	|	ДанныеРегистра.КорИсточникГФУРасчетов.ГруппаФинансовогоУчета КАК КорГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.ДвиженияКонтрагентКонтрагент КАК ДанныеРегистра	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыСКлиентамиПоДокументам()

	#Область ЗачетАвансаКлиента
	ТекстЗапросаЗачетАвансаКлиента = 
	"// ЗачетАвансаКлиента, ЗачетВознагражденияОплатойКомиссионера
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ОтчетКомиссионера)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияАвансомКомиссионера)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	Аналитика.Организация КАК Организация,
	|
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ЗаказКлиента КАК Заказ,
	|	ВЫБОР 
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Подразделение 
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.Подразделение
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.Подразделение
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.Подразделение
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.Подразделение
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.Подразделение
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.Подразделение
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.Подразделение
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Подразделение
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.Подразделение
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Подразделение
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.Подразделение
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.Подразделение
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Ссылка 
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.Договор
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.Договор
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.Договор
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.Договор
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.Договор
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.Договор
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.Договор
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Договор
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.Договор
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Договор
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.Договор
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.Договор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Договор,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.ГруппаФинансовогоУчета
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.ГруппаФинансовогоУчета
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.ГруппаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО 
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И Аналитика.Организация = ДокументыКОтражению.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ДанныеРегистра.ЗаказКлиента = Договоры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|	ПО ДанныеРегистра.ЗаказКлиента = АктВыполненныхРабот.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|	ПО ДанныеРегистра.ЗаказКлиента = ВозвратТоваровОтКлиента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыкупВозвратнойТарыКлиентом КАК ВыкупВозвратнойТарыКлиентом
	|	ПО ДанныеРегистра.ЗаказКлиента = ВыкупВозвратнойТарыКлиентом.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказыДавальцов
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаказыДавальцов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказыКлиентов
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаказыКлиентов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкиНаВозврат
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаявкиНаВозврат.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу КАК ОтчетДавальцу
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетДавальцу.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомиссионера.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОСписании КАК ОтчетКомиссионераОСписании
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомиссионераОСписании.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомитенту.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетПоКомиссииМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказКлиента = ПередачаТоваровМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ПО ДанныеРегистра.ЗаказКлиента = РеализацияТоваровУслуг.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|	ПО ДанныеРегистра.ЗаказКлиента = РеализацияУслугПрочихАктивов.Ссылка
	|ГДЕ
	|	ДанныеРегистра.ПредоплатаРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	#Область ВосстановлениеАвансаКлиента
	ТекстЗапросаВосстановлениеАвансаКлиента = 
	"// ВосстановлениеАвансаКлиента
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВосстановлениеАвансаКлиента) КАК ХозяйственнаяОперация,
	|	Аналитика.Организация КАК Организация,
	|
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ЗаказКлиента КАК Заказ,
	|	ВЫБОР 
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Подразделение 
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.Подразделение
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.Подразделение
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.Подразделение
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.Подразделение
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.Подразделение
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.Подразделение
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.Подразделение
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Подразделение
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.Подразделение
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Подразделение
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.Подразделение
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.Подразделение
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Ссылка 
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.Договор
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.Договор
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.Договор
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.Договор
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.Договор
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.Договор
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.Договор
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Договор
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.Договор
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Договор
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.Договор
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.Договор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Договор,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.ГруппаФинансовогоУчета
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.ГруппаФинансовогоУчета
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.ГруппаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО 
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И Аналитика.Организация = ДокументыКОтражению.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ДанныеРегистра.ЗаказКлиента = Договоры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|	ПО ДанныеРегистра.ЗаказКлиента = АктВыполненныхРабот.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|	ПО ДанныеРегистра.ЗаказКлиента = ВозвратТоваровОтКлиента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыкупВозвратнойТарыКлиентом КАК ВыкупВозвратнойТарыКлиентом
	|	ПО ДанныеРегистра.ЗаказКлиента = ВыкупВозвратнойТарыКлиентом.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказыДавальцов
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаказыДавальцов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказыКлиентов
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаказыКлиентов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкиНаВозврат
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаявкиНаВозврат.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу КАК ОтчетДавальцу
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетДавальцу.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомиссионера.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОСписании КАК ОтчетКомиссионераОСписании
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомиссионераОСписании.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомитенту.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетПоКомиссииМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказКлиента = ПередачаТоваровМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ПО ДанныеРегистра.ЗаказКлиента = РеализацияТоваровУслуг.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|	ПО ДанныеРегистра.ЗаказКлиента = РеализацияУслугПрочихАктивов.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратТоваровОтКлиента)
	|	И ДанныеРегистра.ПредоплатаРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	#Область ЗачетВознагражденияОплатойКомиссионера
	ТекстЗапросаЗачетВознагражденияОплатойКомиссионера = 
	"// ЗачетВознагражденияОплатойКомиссионера
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера) КАК ХозяйственнаяОперация,
	|	Аналитика.Организация КАК Организация,
	|
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ЗаказКлиента КАК Заказ,
	|	ВЫБОР 
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Подразделение 
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.Подразделение
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.Подразделение
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.Подразделение
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.Подразделение
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.Подразделение
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.Подразделение
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.Подразделение
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Подразделение
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.Подразделение
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Подразделение
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.Подразделение
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.Подразделение
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Ссылка 
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.Договор
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.Договор
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.Договор
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.Договор
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.Договор
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.Договор
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.Договор
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Договор
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.Договор
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Договор
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.Договор
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.Договор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Долг КАК Предоплата,
	|	ДанныеРегистра.ДолгУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ДолгРегл КАК ПредоплатаРегл,
	|
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.ГруппаФинансовогоУчета
	|		КОГДА НЕ АктВыполненныхРабот.Ссылка ЕСТЬ NULL ТОГДА АктВыполненныхРабот.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВозвратТоваровОтКлиента.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровОтКлиента.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВыкупВозвратнойТарыКлиентом.Ссылка ЕСТЬ NULL ТОГДА ВыкупВозвратнойТарыКлиентом.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыДавальцов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыДавальцов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыКлиентов.Ссылка ЕСТЬ NULL ТОГДА ЗаказыКлиентов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаявкиНаВозврат.Ссылка ЕСТЬ NULL ТОГДА ЗаявкиНаВозврат.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетДавальцу.Ссылка ЕСТЬ NULL ТОГДА ОтчетДавальцу.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионераОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионераОСписании.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА РеализацияТоваровУслуг.ГруппаФинансовогоУчета
	|		КОГДА НЕ РеализацияУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА РеализацияУслугПрочихАктивов.ГруппаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО 
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И Аналитика.Организация = ДокументыКОтражению.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ДанныеРегистра.ЗаказКлиента = Договоры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|	ПО ДанныеРегистра.ЗаказКлиента = АктВыполненныхРабот.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|	ПО ДанныеРегистра.ЗаказКлиента = ВозвратТоваровОтКлиента.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыкупВозвратнойТарыКлиентом КАК ВыкупВозвратнойТарыКлиентом
	|	ПО ДанныеРегистра.ЗаказКлиента = ВыкупВозвратнойТарыКлиентом.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказыДавальцов
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаказыДавальцов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказыКлиентов
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаказыКлиентов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкиНаВозврат
	|	ПО ДанныеРегистра.ЗаказКлиента = ЗаявкиНаВозврат.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу КАК ОтчетДавальцу
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетДавальцу.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомиссионера.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОСписании КАК ОтчетКомиссионераОСписании
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомиссионераОСписании.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетКомитенту.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказКлиента = ОтчетПоКомиссииМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказКлиента = ПередачаТоваровМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ПО ДанныеРегистра.ЗаказКлиента = РеализацияТоваровУслуг.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|	ПО ДанныеРегистра.ЗаказКлиента = РеализацияУслугПрочихАктивов.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор)  В 
	|		(ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|		ТИП(Документ.ОтчетКомиссионера))
	|	И ДанныеРегистра.ДолгРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	ТекстыТаблиц = Новый Массив;
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетАвансаКлиента);
	ТекстыТаблиц.Добавить(ТекстЗапросаВосстановлениеАвансаКлиента);
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетВознагражденияОплатойКомиссионера);
	
	РазделительЗапросов = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстЗапроса = СтрСоединить(ТекстыТаблиц, РазделительЗапросов);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыСПоставщикамиПоДокументам()

	#Область ЗачетАвансаПоставщику
	
	ТекстЗапросаЗачетАвансаПоставщику = 
	"// ЗачетАвансаПоставщику
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику) КАК ХозяйственнаяОперация,
	|	Аналитика.Организация КАК Организация,
	|
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ЗаказПоставщику КАК Заказ,
	|
	|	ВЫБОР 
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Подразделение 
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.Подразделение
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.Подразделение
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.Подразделение
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Подразделение
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Подразделение
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.Подразделение
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.Подразделение
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.Подразделение
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Ссылка 
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.Договор
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.Договор
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.Договор
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Договор
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Договор
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.Договор
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.Договор
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.Договор
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.Договор
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Договор,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.ГруппаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО 
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И Аналитика.Организация = ДокументыКОтражению.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ДанныеРегистра.ЗаказПоставщику = Договоры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ПО ДанныеРегистра.ЗаказПоставщику = ВозвратТоваровПоставщику.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|	ПО ДанныеРегистра.ЗаказПоставщику = ЗаказПереработчику.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказыПоставщикам
	|	ПО ДанныеРегистра.ЗаказПоставщику = ЗаказыПоставщикам.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомиссионера.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомитенту.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомитентуОСписании.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетПоКомиссииМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПередачаТоваровМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПоступлениеТоваровУслуг.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугПрочихАктивов КАК ПоступлениеУслугПрочихАктивов
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПоступлениеУслугПрочихАктивов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ПО ДанныеРегистра.ЗаказПоставщику = ТаможеннаяДекларацияИмпорт.Ссылка
	|ГДЕ
	|	ДанныеРегистра.ПредоплатаРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДанныеРегистра.Активность
	|";
	#КонецОбласти

	#Область ПереносПретензииНаАвансы
	ТекстЗапросаПереносПретензииНаАвансы = 
	"// ПереносПретензииНаАвансы
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПретензииНаАвансы) КАК ХозяйственнаяОперация,
	|	Аналитика.Организация КАК Организация,
	|
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ЗаказПоставщику КАК Заказ,
	|
	|	ВЫБОР 
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Подразделение 
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.Подразделение
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.Подразделение
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.Подразделение
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Подразделение
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Подразделение
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.Подразделение
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.Подразделение
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.Подразделение
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Ссылка 
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.Договор
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.Договор
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.Договор
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Договор
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Договор
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.Договор
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.Договор
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.Договор
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.Договор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.ГруппаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО 
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И Аналитика.Организация = ДокументыКОтражению.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ДанныеРегистра.ЗаказПоставщику = Договоры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ПО ДанныеРегистра.ЗаказПоставщику = ВозвратТоваровПоставщику.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|	ПО ДанныеРегистра.ЗаказПоставщику = ЗаказПереработчику.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказыПоставщикам
	|	ПО ДанныеРегистра.ЗаказПоставщику = ЗаказыПоставщикам.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомиссионера.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомитенту.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомитентуОСписании.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетПоКомиссииМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПередачаТоваровМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПоступлениеТоваровУслуг.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугПрочихАктивов КАК ПоступлениеУслугПрочихАктивов
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПоступлениеУслугПрочихАктивов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ПО ДанныеРегистра.ЗаказПоставщику = ТаможеннаяДекларацияИмпорт.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратТоваровПоставщику)
	|	И (ТИПЗНАЧЕНИЯ(ДанныеРегистра.ЗаказПоставщику) <> ТИП(Документ.ВозвратТоваровПоставщику)
	|		 ИЛИ ДанныеРегистра.ЗаказПоставщику = НЕОПРЕДЕЛЕНО)
	|	И ДанныеРегистра.ПредоплатаРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	#Область ПереносПретензииНаРасчеты
	ТекстЗапросаПереносПретензииНаРасчеты = 
	"// ПереносПретензииНаРасчеты
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПретензииНаРасчеты) КАК ХозяйственнаяОперация,
	|	Аналитика.Организация КАК Организация,
	|
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ЗаказПоставщику КАК Заказ,
	|
	|	ВЫБОР 
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Подразделение 
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.Подразделение
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.Подразделение
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.Подразделение
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Подразделение
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Подразделение
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.Подразделение
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.Подразделение
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.Подразделение
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Ссылка 
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.Договор
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.Договор
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.Договор
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Договор
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Договор
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.Договор
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.Договор
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.Договор
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.Договор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Предоплата КАК Предоплата,
	|	ДанныеРегистра.ПредоплатаУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ПредоплатаРегл КАК ПредоплатаРегл,
	|
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.ГруппаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО 
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И Аналитика.Организация = ДокументыКОтражению.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ДанныеРегистра.ЗаказПоставщику = Договоры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ПО ДанныеРегистра.ЗаказПоставщику = ВозвратТоваровПоставщику.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|	ПО ДанныеРегистра.ЗаказПоставщику = ЗаказПереработчику.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказыПоставщикам
	|	ПО ДанныеРегистра.ЗаказПоставщику = ЗаказыПоставщикам.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомиссионера.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомитенту.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомитентуОСписании.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетПоКомиссииМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПередачаТоваровМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПоступлениеТоваровУслуг.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугПрочихАктивов КАК ПоступлениеУслугПрочихАктивов
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПоступлениеУслугПрочихАктивов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ПО ДанныеРегистра.ЗаказПоставщику = ТаможеннаяДекларацияИмпорт.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВозвратТоваровПоставщику)
	|	И ДанныеРегистра.ДолгРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	#Область ЗачетВознагражденияОплатойКомитенту
	ТекстЗапросаЗачетВознагражденияОплатойКомитенту = 
	"// ЗачетВознагражденияОплатойКомитенту
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту) КАК ХозяйственнаяОперация,
	|	Аналитика.Организация КАК Организация,
	|
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	ДанныеРегистра.ЗаказПоставщику КАК Заказ,
	|
	|	ВЫБОР 
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Подразделение 
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.Подразделение
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.Подразделение
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.Подразделение
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Подразделение
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Подразделение
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.Подразделение
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.Подразделение
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.Подразделение
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.Подразделение
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.Ссылка 
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.Договор
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.Договор
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.Договор
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.Договор
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.Договор
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.Договор
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.Договор
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.Договор
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.Договор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ДанныеРегистра.Долг КАК Предоплата,
	|	ДанныеРегистра.ДолгУпр КАК ПредоплатаУпр,
	|	ДанныеРегистра.ДолгРегл КАК ПредоплатаРегл,
	|
	|	ВЫБОР
	|		КОГДА НЕ Договоры.Ссылка ЕСТЬ NULL ТОГДА Договоры.ГруппаФинансовогоУчета
	|		КОГДА НЕ ВозвратТоваровПоставщику.Ссылка ЕСТЬ NULL ТОГДА ВозвратТоваровПоставщику.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказПереработчику.Ссылка ЕСТЬ NULL ТОГДА ЗаказПереработчику.ГруппаФинансовогоУчета
	|		КОГДА НЕ ЗаказыПоставщикам.Ссылка ЕСТЬ NULL ТОГДА ЗаказыПоставщикам.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомиссионера.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомиссионера.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитенту.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитенту.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетКомитентуОСписании.Ссылка ЕСТЬ NULL ТОГДА ОтчетКомитентуОСписании.ГруппаФинансовогоУчета
	|		КОГДА НЕ ОтчетПоКомиссииМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ОтчетПоКомиссииМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПередачаТоваровМеждуОрганизациями.Ссылка ЕСТЬ NULL ТОГДА ПередачаТоваровМеждуОрганизациями.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПоступлениеТоваровУслуг.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеТоваровУслуг.ГруппаФинансовогоУчета
	|		КОГДА НЕ ПоступлениеУслугПрочихАктивов.Ссылка ЕСТЬ NULL ТОГДА ПоступлениеУслугПрочихАктивов.ГруппаФинансовогоУчета
	|		КОГДА НЕ ТаможеннаяДекларацияИмпорт.Ссылка ЕСТЬ NULL ТОГДА ТаможеннаяДекларацияИмпорт.ГруппаФинансовогоУчета
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГФУРасчетов,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО 
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И Аналитика.Организация = ДокументыКОтражению.Организация
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ПО ДанныеРегистра.ЗаказПоставщику = Договоры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|	ПО ДанныеРегистра.ЗаказПоставщику = ВозвратТоваровПоставщику.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|	ПО ДанныеРегистра.ЗаказПоставщику = ЗаказПереработчику.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказыПоставщикам
	|	ПО ДанныеРегистра.ЗаказПоставщику = ЗаказыПоставщикам.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомиссионера.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомитенту.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетКомитентуОСписании.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказПоставщику = ОтчетПоКомиссииМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПередачаТоваровМеждуОрганизациями.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПоступлениеТоваровУслуг.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугПрочихАктивов КАК ПоступлениеУслугПрочихАктивов
	|	ПО ДанныеРегистра.ЗаказПоставщику = ПоступлениеУслугПрочихАктивов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ПО ДанныеРегистра.ЗаказПоставщику = ТаможеннаяДекларацияИмпорт.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) В 
	|		(ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|		ТИП(Документ.ОтчетКомитенту))
	|	И ДанныеРегистра.ДолгРегл > 0 И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ДанныеРегистра.Активность";
	#КонецОбласти

	ТекстыТаблиц = Новый Массив;
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетАвансаПоставщику);
	ТекстыТаблиц.Добавить(ТекстЗапросаПереносПретензииНаАвансы);
	ТекстыТаблиц.Добавить(ТекстЗапросаПереносПретензииНаРасчеты);
	ТекстыТаблиц.Добавить(ТекстЗапросаЗачетВознагражденияОплатойКомитенту);

	РазделительЗапросов = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстЗапроса = СтрСоединить(ТекстыТаблиц, РазделительЗапросов);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаКорректировкиНДСПартий()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.Регистратор.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры ССЫЛКА Справочник.КлючиАналитикиУчетаНоменклатуры
	|			ТОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры ССЫЛКА Справочник.КлючиАналитикиУчетаНоменклатуры
	|			ТОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры ССЫЛКА Справочник.КлючиАналитикиУчетаНоменклатуры
	|			ТОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|			ТОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры ССЫЛКА Справочник.КлючиАналитикиУчетаНоменклатуры
	|			ТОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|			ТОГДА ДанныеРегистра.АналитикаУчетаНоменклатуры.ГруппаФинансовогоУчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаДоходовРасходов.ПустаяСсылка)
	|	КОНЕЦ КАК ГФУДоходовРасходов,
	|	ДанныеРегистра.СтавкаНДС,
	|	ДанныеРегистра.НалоговоеНазначение,
	|	ДанныеРегистра.НалоговоеНазначениеПоФакту,
	|	ЕСТЬNULL(ДанныеРегистра.ВидЗапасов.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(ДанныеРегистра.ВидЗапасов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ДанныеРегистра.СтатьяРасходовСписания,
	|	ДанныеРегистра.АналитикаРасходов,
	|	ДанныеРегистра.ГруппаПродукции,
	|	ДанныеРегистра.РазделКорректировки,
	|	ДанныеРегистра.НДСРегл - ДанныеРегистра.НДСРеглПоФакту КАК СуммаКорректировки,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.КорректировкиНДСПартий КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОтражению КАК ДокументыКОтражению
	|		ПО ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|			И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И ДанныеРегистра.Активность";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНДСРеестрВыданныхНалоговыхДокументов()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК ДоговорКонтрагента,
	|	
	|	ДанныеРегистра.СуммаНДС,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.НДСРеестрВыданныхНалоговыхДокументов КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаНДСРеестрПолученныхНалоговыхДокументов()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Договор КАК ДоговорКонтрагента,
	|	
	|	ДанныеРегистра.СуммаНДС,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрНакопления.НДСРеестрПолученныхНалоговыхДокументов КАК ДанныеРегистра
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация = ДокументыКОтражению.Организация
	|ГДЕ
	|	ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	И ДанныеРегистра.Активность
	|";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ПроверитьКорректностьПоказателей(РезультатЗапроса, ИмяРегистра, ПараметрыРегистра)

	Показатели				= ПараметрыРегистра.Показатели;
	ПоказателиВВалюте		= ПараметрыРегистра.ПоказателиВВалюте;
	ИсточникиУточненияСчета = ПараметрыРегистра.ИсточникиУточненияСчета;
	ИсточникиПодразделений	= ПараметрыРегистра.ИсточникиПодразделений;
	ИсточникиСубконто		= ПараметрыРегистра.ИсточникиСубконто;
	
	КолонкиРезультата = РезультатЗапроса.Колонки;
	МассивОшибок = Новый Массив;
	Для каждого Показатель Из Показатели Цикл
		МассивРесурсов = Показатель.Значение.Ресурсы;
		Для Каждого Ресурс из МассивРесурсов Цикл
			ИмяРесурса = Ресурс.Имя;
			Если КолонкиРезультата.Найти(ИмяРесурса) = Неопределено Тогда
				ТекстОшибки = НСтр("ru='Не найден ресурс ""%ИмяРесурса%"" показателя ""%Показатель%"".';uk='Не знайдено ресурс ""%ИмяРесурса%"" показника ""%Показатель%"".'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяРесурса%", ИмяРесурса);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Показатель%", Показатель.Ключ);
				МассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
			ИсточникВалюты = Ресурс.ИсточникВалюты;
			Если ИсточникВалюты <> "ВалютаУпр" И ИсточникВалюты <> "ВалютаРегл"
				И КолонкиРезультата.Найти(ИсточникВалюты) = Неопределено Тогда
				ТекстОшибки = НСтр("ru='Не найден источник валюты ""%ИсточникВалюты%"" показателя ""%Показатель%"".';uk='Не знайдено джерело валюти ""%ИсточникВалюты%"" показника ""%Показатель%"".'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИсточникВалюты%", ИсточникВалюты);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Показатель%", Показатель.Ключ);
				МассивОшибок.Добавить(ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого Показатель Из ПоказателиВВалюте Цикл
		ИсточникВалюты = Показатель.Значение.ИсточникВалюты;
		Если ИсточникВалюты <> "ВалютаУпр" И ИсточникВалюты <> "ВалютаРегл"
			И КолонкиРезультата.Найти(ИсточникВалюты) = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Не найден источник валюты ""%ИсточникВалюты%"" показателя в валюте ""%Показатель%"".';uk='Не знайдено джерело валюти ""%ИсточникВалюты%"" показника у валюті ""%Показатель%"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИсточникВалюты%", ИсточникВалюты);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Показатель%", Показатель.Ключ);
			МассивОшибок.Добавить(ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = НСтр("ru='Обнаружены ошибки показателей регистра ""%ИмяРегистра%"":';uk='Виявлені помилки показників регістра ""%ИмяРегистра%"":'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяРегистра%", ИмяРегистра);
		Для каждого Ошибка Из МассивОшибок Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС + Ошибка;
		КонецЦикла;
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат Истина;

КонецФункции

Функция ТаблицаПроводок()

	ТаблицаПроводок = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаПроводок.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете"));
	ТаблицаПроводок.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаПроводок.Колонки.Добавить("ВалютаХраненияСуммыПредставления", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПроводок.Колонки.Добавить("ВалютаХраненияСуммыФункциональной", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Функция СтруктураПроводки()

	Проводка = Новый Структура;
	СтруктураНабораЗаписей = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Для каждого Колонка Из СтруктураНабораЗаписей.Колонки Цикл
		Проводка.Вставить(Колонка.Имя); 
	КонецЦикла;
	Проводка.Вставить("Статус");
	Проводка.Вставить("ШаблонПроводки");
	Проводка.Вставить("МассивОшибок", Новый Массив);
	Проводка.Вставить("ВалютаХраненияСуммыПредставления");
	Проводка.Вставить("ВалютаХраненияСуммыФункциональной");
	
	Возврат Проводка;

КонецФункции

Функция СчетУчета(Данные, ШаблонПроводки, ТаблицаУточненияСчетов, ИсточникиУточненияСчета, ВидДвижения);

	Попытка
		Если ВидДвижения = "Дт" Тогда
			ИсточникУточненияСчетаШаблонаПроводки = ШаблонПроводки.ИсточникУточненияСчетаДт;
			ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Дебет;
			СчетПоУмолчанию = ШаблонПроводки.СчетДебетаПоУмолчанию;
		ИначеЕсли ВидДвижения = "Кт" Тогда
			ИсточникУточненияСчетаШаблонаПроводки = ШаблонПроводки.ИсточникУточненияСчетаКт;
			ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит;
			СчетПоУмолчанию = ШаблонПроводки.СчетКредитаПоУмолчанию;
		КонецЕсли;
		
		СчетУчета = СчетПоУмолчанию;
		Если ЗначениеЗаполнено(ИсточникУточненияСчетаШаблонаПроводки) Тогда
			ИсточникУточненияСчета = ИсточникиУточненияСчета.Получить(ИсточникУточненияСчетаШаблонаПроводки);
			ГруппаФинансовогоУчета = Данные[ИсточникУточненияСчета.ИмяПоля];
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ГруппаФинансовогоУчета", ГруппаФинансовогоУчета);
			ПараметрыОтбора.Вставить("ШаблонПроводки", ШаблонПроводки.ШаблонПроводки);
			ПараметрыОтбора.Вставить("ВидДвижения", ВидДвижения);
			МассивНайденныхСтрок = ТаблицаУточненияСчетов.НайтиСтроки(ПараметрыОтбора);
			Если МассивНайденныхСтрок.Количество() > 0 Тогда
				СчетУчета = МассивНайденныхСтрок[0].СчетУчета;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстСообщения = Символы.ПС + НСтр("ru='При формировании проводки для хозяйственной операции ""%ХозОперация%""
                                    |по шаблону ""%ШаблонПроводки%""
                                    |не удалось получить уточнение счета ""%ВидСчета%""
                                    |по причине'
                                    |;uk='При формуванні проводки для господарської операції ""%ХозОперация%""
                                    |за шаблоном ""%ШаблонПроводки%""
                                    |не вдалося отримати уточнення рахунку ""%ВидСчета%""
                                    |з причини'") + ":" + Символы.ПС + Символы.Таб + "%Причина%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХозОперация%", ШаблонПроводки.ХозяйственнаяОперация);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШаблонПроводки%", ШаблонПроводки.ШаблонПроводки);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидСчета%", ВидДвижения);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = ТекстСообщения + Символы.ПС
			+ НСтр("ru='Возможно в шаблоне проводки установлены некорректные настройки уточнения счета.';uk='Можливо в шаблоні проводки встановлені некоректні настройки уточнення рахунку.'");
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;

	Возврат СчетУчета;
	
КонецФункции

Функция БалансоваяСумма(Данные, ШаблонПроводки, РесурсыРегистра, ВалютыУчета, Валюта);

	Сумма = 0;
	ИмяРесурсаУпр = "";
	ИмяРесурсаРегл = "";
	РесурсВВалютеНайден = Ложь;
	
	Для каждого Ресурс Из РесурсыРегистра Цикл
		Если Ресурс.ИсточникВалюты = "ВалютаУпр" Тогда
			ИмяРесурсаУпр = Ресурс.Имя;
			ВалютаРесурса = ВалютыУчета.ВалютаУпр;
		ИначеЕсли Ресурс.ИсточникВалюты = "ВалютаРегл" Тогда
			ИмяРесурсаРегл = Ресурс.Имя;
			ВалютаРесурса = ВалютыУчета.ВалютаРегл;
		Иначе
			ВалютаРесурса = Данные[Ресурс.ИсточникВалюты];
		КонецЕсли;
		Если ВалютаРесурса = Валюта Тогда
			Сумма = Данные[Ресурс.Имя];
			РесурсВВалютеНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не РесурсВВалютеНайден Тогда
		Если ЗначениеЗаполнено(ИмяРесурсаУпр) Тогда
			Сумма = Данные[ИмяРесурсаУпр];
			ВалютаРесурса = ВалютыУчета.ВалютаУпр;
		ИначеЕсли ЗначениеЗаполнено(ИмяРесурсаРегл) Тогда
			Сумма = Данные[ИмяРесурсаРегл];
			ВалютаРесурса = ВалютыУчета.ВалютаРегл;
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Сумма", ?(ШаблонПроводки.ИзменятьЗнакОперации, -Сумма, Сумма));
	Результат.Вставить("Валюта", ВалютаРесурса);
	
	Возврат Результат;
	
КонецФункции

Функция СуммаВВалюте(Данные, ШаблонПроводки, РесурсыРегистра, ИсточникВалюты);

	Сумма = 0;
	Для каждого Ресурс Из РесурсыРегистра Цикл
		Если Ресурс.ИсточникВалюты = ИсточникВалюты Тогда
			Сумма = Данные[Ресурс.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ШаблонПроводки.ИзменятьЗнакОперации, -Сумма, Сумма);

КонецФункции

Функция Подразделение(Данные, ИсточникиПодразделений, ИсточникПодразделенияВШаблонеПроводки)

	Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	ИсточникПодразделения = ИсточникиПодразделений.Получить(ИсточникПодразделенияВШаблонеПроводки);
	Если ИсточникПодразделения <> Неопределено Тогда
		Подразделение = Данные[ИсточникПодразделения];
	КонецЕсли;

	Возврат Подразделение;
	
КонецФункции

Процедура ЗаполнитьСубконто(ИмяРегистра, Данные, Проводка, ИсточникиСубконто, ВидДвижения)
	
	Счет = Проводка["Счет" + ВидДвижения];
	ПоляИсточникаСубконто = ИсточникиСубконто["Субконто" + ВидДвижения];
	ДвижениеНоменклатуры = Проводка.ДанныеШаблонаПроводки["ДвижениеНоменклатуры"+ВидДвижения];
	
	ТипыЗаполненныхПолей = Новый Соответствие;
	ТипыДоступныхПолей = Новый Соответствие;
	Для каждого ПолеИсточникаСубконто из ПоляИсточникаСубконто Цикл
		Значение = Данные[ПолеИсточникаСубконто];
		Если Значение <> Неопределено Тогда
			ТипыЗаполненныхПолей.Вставить(ПолеИсточникаСубконто, ТипЗнч(Значение));
		Иначе
			МассивТипов = МеждународныйУчетСерверПовтИсп.ТипыАтрибутаРегистра(ИмяРегистра, ПолеИсточникаСубконто);
			ТипыДоступныхПолей.Вставить(ПолеИсточникаСубконто, МассивТипов);
		КонецЕсли;
	КонецЦикла;
	
	// Субконто с типом Контрагент на номенклатурных счетах заполняем контрагентом из вида запасов
	Если (ИмяРегистра = "ВыручкаИСебестоимостьПродаж" ИЛИ ИмяРегистра = "Закупки"
		ИЛИ ИмяРегистра = "ДвиженияНоменклатураДоходыРасходы" ИЛИ ИмяРегистра = "ДвиженияНоменклатураНоменклатура") Тогда
		Если ДвижениеНоменклатуры Тогда// подменить значение поля "Контрагент"
			Если ЗначениеЗаполнено(Данные.Поставщик) И ТипыЗаполненныхПолей["Контрагент"] <> Неопределено Тогда
				ТипыЗаполненныхПолей.Удалить("Контрагент");
			КонецЕсли;
		Иначе// удалить поле "Поставщик"
			Если ТипыЗаполненныхПолей["Поставщик"] <> Неопределено Тогда
				ТипыЗаполненныхПолей.Удалить("Поставщик");
			КонецЕсли;
		КонецЕсли;// ДвижениеНоменклатуры = Истина
	КонецЕсли;// ИмяРегистра = "ВыручкаИСебестоимостьПродаж" ИЛИ ИмяРегистра = "Закупки"
	
	ВидыСубконто = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконто.Количество();
	Для К = 1 По КоличествоСубконто Цикл
		ВидСубконто = ВидыСубконто[К - 1].ВидСубконто;
		Проводка["ВидСубконто" + ВидДвижения + К] = ВидСубконто;
		ТипСубконто = ВидСубконто.ТипЗначения;
		ТипНайден = Ложь;
		Для каждого ТипПоля Из ТипыЗаполненныхПолей Цикл
			Если ТипСубконто.СодержитТип(ТипПоля.Значение) Тогда
				Проводка["Субконто" + ВидДвижения + К] = Данные[ТипПоля.Ключ];
				ТипНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ТипНайден Тогда
			Для каждого ТипПоля Из ТипыДоступныхПолей Цикл
				Для каждого Тип Из ТипПоля.Значение Цикл
					Если ТипСубконто.СодержитТип(Тип) Тогда
						Проводка["Субконто" + ВидДвижения + К] = Данные[ТипПоля.Ключ];
						ТипНайден = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ТипНайден Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Не ТипНайден Тогда
			ТекстОшибки = НСтр("ru='Не удалось заполнить субконто %ВидСубконто% для счета %Счет%';uk='Не вдалося заповнити субконто %ВидСубконто% для рахунку %Счет%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидСубконто%", ВидСубконто);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Счет%", Счет);
			ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
			ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПроводки(Проводка, ШаблонПроводки, ПараметрыРегистра)

	Если Не ЗначениеЗаполнено(Проводка.СчетДт) Тогда
		ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
		ТекстОшибки = НСтр("ru='Не удалось заполнить счет Дт.';uk='Не вдалося заповнити рахунок Дт.'");
		ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Проводка.СчетКт) Тогда
		ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
		ТекстОшибки = НСтр("ru='Не удалось заполнить счет Кт.';uk='Не вдалося заповнити рахунок Кт.'");
		ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьОшибкуПроводки(Проводка, ТекстОшибки)

	Проводка.МассивОшибок.Добавить(ТекстОшибки);

КонецПроцедуры

Процедура ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка)

	СтрокаТаблицы = ТаблицаПроводок.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Проводка);
	
	ЗаполнитьСтатусВТаблицеПроводок(СтрокаТаблицы, Проводка);
	
	ЗаполнитьКомментарийВТаблицеПроводок(СтрокаТаблицы, Проводка);

КонецПроцедуры

Процедура ЗаполнитьСтатусВТаблицеПроводок(СтрокаТаблицы, Проводка)

	Если ЗначениеЗаполнено(СтрокаТаблицы.Статус) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОшибок = Проводка.МассивОшибок.Количество();
	Если КоличествоОшибок > 0 Тогда
		СтрокаТаблицы.Статус = Проводка.Статус;
	Иначе
		СтрокаТаблицы.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтатусПроводки(Проводка, Статус)

	Проводка.Статус = МеждународныйУчетСерверПовтИсп.Статус(Проводка.Статус, Статус);

КонецПроцедуры

Процедура ЗаполнитьКомментарийВТаблицеПроводок(СтрокаТаблицы, Проводка)

	МассивОшибок = Проводка.МассивОшибок;
	КоличествоОшибок = МассивОшибок.Количество();
	Если КоличествоОшибок > 0 Тогда
		
		Если ЗначениеЗаполнено(Проводка.ШаблонПроводки) Тогда
			ТекстШаблонПроводки = НСтр("ru='Шаблон проводки ""%ШаблонПроводки%""';uk='Шаблон проводки ""%ШаблонПроводки%""'") + Символы.ПС;
			ТекстШаблонПроводки = СтрЗаменить(ТекстШаблонПроводки, "%ШаблонПроводки%", Проводка.ШаблонПроводки);
			ТекстКоличествоОшибок = НСтр("ru='Обнаружены ошибки (%КоличествоОшибок%):';uk='Виявлені помилки (%КоличествоОшибок%):'");
			ТекстКоличествоОшибок = СтрЗаменить(ТекстКоличествоОшибок, "%КоличествоОшибок%", КоличествоОшибок);
			ОписаниеОшибок = ТекстШаблонПроводки + ТекстКоличествоОшибок;
			Для К = 1 По КоличествоОшибок Цикл
				ОписаниеОшибки = НСтр("ru='%НомерОшибки%. %ТекстОшибки%';uk='%НомерОшибки%. %ТекстОшибки%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%НомерОшибки%", К);
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ТекстОшибки%", МассивОшибок[К - 1]);
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ОписаниеОшибки;
			КонецЦикла;
		Иначе
			ОписаниеОшибок = НСтр("ru='%ТекстОшибки%';uk='%ТекстОшибки%'");
			ОписаниеОшибок = СтрЗаменить(ОписаниеОшибок, "%ТекстОшибки%", Проводка.МассивОшибок[0]);
		КонецЕсли;
		
		СтрокаТаблицы.Комментарий = ОписаниеОшибок;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьПроводки(ТаблицаПроводок, ДокументыКОтражениюВУчете)

	Пока ДокументыКОтражениюВУчете.Следующий() Цикл
		
		Регистратор = ДокументыКОтражениюВУчете.Документ;
		
		ПроводкиДокумента = ТаблицаПроводок.Скопировать(Новый Структура("Регистратор", Регистратор));
		
		ОбновитьСтатусОтраженияДокумента(ПроводкиДокумента, Регистратор);
		
		ЗаписываемыеПроводки = ЗаписываемыеПроводки(ПроводкиДокумента);
		
		НаборЗаписей = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЗаписыватьПустойНабор", Истина);
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.Загрузить(ЗаписываемыеПроводки);
		
		// Дозапишем проводки документа, которые не относятся к организации по которым были сформированы новые проводки.
		ПроводокиПоДругимОрганизациям = ДокументыКОтражениюВУчете.Выбрать();
		Пока ПроводокиПоДругимОрганизациям.Следующий() Цикл
			Если ЗначениеЗаполнено(ПроводокиПоДругимОрганизациям.Организация) Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ПроводокиПоДругимОрганизациям);
				НаборЗаписей.УстановитьСубконто(НоваяЗапись, ПроводокиПоДругимОрганизациям, "Дт");
				НаборЗаписей.УстановитьСубконто(НоваяЗапись, ПроводокиПоДругимОрганизациям, "Кт");
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры

Функция ИсключаемыеПроводки(ПроводкиДокумента)

	ИсключаемыеПроводки = Новый Массив;
	Для каждого Проводка Из ПроводкиДокумента Цикл
		Если Проводка.Сумма = 0 И Проводка.СуммаПредставления = 0 Тогда
			ИсключаемыеПроводки.Добавить(Проводка);
		КонецЕсли;
	КонецЦикла; 

	Возврат ИсключаемыеПроводки;

КонецФункции

Процедура ЗаполнитьКомментарий(Комментарий, Проводка, УникальныеЗначения)

	Если УникальныеЗначения[Проводка.Комментарий] = Неопределено Тогда
		Комментарий = ?(Не ПустаяСтрока(Комментарий), Комментарий + Символы.ПС, Комментарий);
		Комментарий = Комментарий + Проводка.Комментарий;
		УникальныеЗначения.Вставить(Проводка.Комментарий, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьТаблицуПроводокПоКурсу(ПараметрыОтражения, ТаблицаПроводок)
	                  	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПроводок.Период КАК Период,
	|	ТаблицаПроводок.Организация КАК Организация,
	|	&ТекстВыборкиОстальныхКолонок,
	|	ТаблицаПроводок.Сумма,
	|	ТаблицаПроводок.СуммаПредставления,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной КАК ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления КАК ВалютаХраненияСуммыПредставления
	|ПОМЕСТИТЬ ТаблицаПроводок
	|ИЗ
	|	&ТаблицаПроводок КАК ТаблицаПроводок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период,
	|	ВалютаХраненияСуммыФункциональной,
	|	ВалютаХраненияСуммыПредставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПроводок.Период,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления
	|ПОМЕСТИТЬ Валюты
	|ИЗ
	|	ТаблицаПроводок КАК ТаблицаПроводок
	|ГДЕ
	|	(ТаблицаПроводок.ВалютаХраненияСуммыФункциональной <> &ФункциональнаяВалюта
	|			ИЛИ ТаблицаПроводок.ВалютаХраненияСуммыПредставления <> &ВалютаПредставления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаПроводок.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.ПериодКурса) КАК ПериодКурса
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	(ВЫБРАТЬ
	|		Валюты.Период КАК Период,
	|		Валюты.ВалютаХраненияСуммыФункциональной КАК Валюта,
	|		КурсыВалют.Период КАК ПериодКурса
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО Валюты.Период >= КурсыВалют.Период
	|				И (КурсыВалют.Валюта = Валюты.ВалютаХраненияСуммыФункциональной)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.Период,
	|		Валюты.ВалютаХраненияСуммыПредставления,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО Валюты.Период >= КурсыВалют.Период
	|				И (КурсыВалют.Валюта = Валюты.ВалютаХраненияСуммыПредставления)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.Период,
	|		&ФункциональнаяВалюта,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО Валюты.Период >= КурсыВалют.Период
	|				И (КурсыВалют.Валюта = &ФункциональнаяВалюта)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.Период,
	|		&ВалютаПредставления,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО Валюты.Период >= КурсыВалют.Период
	|				И (КурсыВалют.Валюта = &ВалютаПредставления)) КАК КурсыВалют
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсовВалют.Период КАК Период,
	|	ПериодыКурсовВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс / КурсыВалют.Кратность КАК Курс
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсовВалют.ПериодКурса = КурсыВалют.Период
	|			И ПериодыКурсовВалют.Валюта = КурсыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодыКурсовВалют.Период,
	|	ПериодыКурсовВалют.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Валюты.Период,
	|	Валюты.ВалютаХраненияСуммыФункциональной,
	|	Валюты.ВалютаХраненияСуммыПредставления,
	|	ЕСТЬNULL(КурсыВалютХраненияСуммыФункциональной.Курс, 1) / ЕСТЬNULL(КурсыФункциональнойВалюты.Курс, 1) КАК КоэффицентПересчетаСуммы,
	|	ЕСТЬNULL(КурсыВалютХраненияСуммыПредставления.Курс, 1) / ЕСТЬNULL(КурсыВалютыПредставления.Курс, 1) КАК КоэффицентПересчетаСуммыПредставления
	|ПОМЕСТИТЬ КоэффициентыПересчета
	|ИЗ
	|	Валюты КАК Валюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютХраненияСуммыФункциональной
	|		ПО Валюты.Период = КурсыВалютХраненияСуммыФункциональной.Период
	|			И Валюты.ВалютаХраненияСуммыФункциональной = КурсыВалютХраненияСуммыФункциональной.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютХраненияСуммыПредставления
	|		ПО Валюты.Период = КурсыВалютХраненияСуммыПредставления.Период
	|			И Валюты.ВалютаХраненияСуммыПредставления = КурсыВалютХраненияСуммыПредставления.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыФункциональнойВалюты
	|		ПО Валюты.Период = КурсыФункциональнойВалюты.Период
	|			И (&ФункциональнаяВалюта = КурсыФункциональнойВалюты.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютыПредставления
	|		ПО Валюты.Период = КурсыВалютыПредставления.Период
	|			И (&ВалютаПредставления = КурсыВалютыПредставления.Валюта)
	|ГДЕ
	|	(ЕСТЬNULL(КурсыВалютХраненияСуммыФункциональной.Курс, 1) / ЕСТЬNULL(КурсыФункциональнойВалюты.Курс, 1) <> 1
	|			ИЛИ ЕСТЬNULL(КурсыВалютХраненияСуммыПредставления.Курс, 1) / ЕСТЬNULL(КурсыВалютыПредставления.Курс, 1) <> 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроводок.Период КАК Период,
	|	ТаблицаПроводок.Организация,
	|	&ТекстВыборкиОстальныхКолонок,
	|	ТаблицаПроводок.Сумма * ЕСТЬNULL(КоэффициентыПересчета.КоэффицентПересчетаСуммы, 1) КАК Сумма,
	|	ТаблицаПроводок.СуммаПредставления * ЕСТЬNULL(КоэффициентыПересчета.КоэффицентПересчетаСуммыПредставления, 1) КАК СуммаПредставления,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления
	|ИЗ
	|	ТаблицаПроводок КАК ТаблицаПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыПересчета КАК КоэффициентыПересчета
	|		ПО ТаблицаПроводок.Период = КоэффициентыПересчета.Период
	|			И ТаблицаПроводок.ВалютаХраненияСуммыФункциональной = КоэффициентыПересчета.ВалютаХраненияСуммыФункциональной
	|			И ТаблицаПроводок.ВалютаХраненияСуммыПредставления = КоэффициентыПересчета.ВалютаХраненияСуммыПредставления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПроводок.Организация,
	|	ТаблицаПроводок.Период";
	
	Запрос.УстановитьПараметр("ТаблицаПроводок", ТаблицаПроводок);
	Запрос.УстановитьПараметр("ФункциональнаяВалюта", ПараметрыОтражения.ВалютыУчета.ФункциональнаяВалюта);
	Запрос.УстановитьПараметр("ВалютаПредставления", ПараметрыОтражения.ВалютыУчета.ВалютаПредставления);
	
	ШаблонТекстаВыборкиКолонки = "	ТаблицаПроводок.%1,"+Символы.ПС;
	ТекстВыборкиОстальныхКолонок = "";
	СтруктураКолонокИсключений = Новый Структура("Период, Сумма, СуммаПредставления, Организация, ВалютаХраненияСуммыФункциональной, ВалютаХраненияСуммыПредставления, МоментВремени");
	Для каждого Колонка из ТаблицаПроводок.Колонки Цикл
		Если СтруктураКолонокИсключений.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		ТекстВыборкиОстальныхКолонок = ТекстВыборкиОстальныхКолонок + СтрШаблон(ШаблонТекстаВыборкиКолонки, Колонка.Имя);
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстВыборкиОстальныхКолонок,", ТекстВыборкиОстальныхКолонок);
	
	ТаблицаПроводок = Запрос.Выполнить().Выгрузить();
	ТаблицаПроводок.Индексы.Добавить("Регистратор");
	
КонецПроцедуры

Процедура ВыполнитьОффлайновыеРасчеты(ДатаОкончания = Неопределено, ДокументыКОтражению = Неопределено)

	Если ДокументыКОтражению = Неопределено Тогда
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
			КонецРасчета = КонецМесяца(ДатаОкончания)+1;
		Иначе
			КонецРасчета = КонецМесяца(ТекущаяДатаСеанса())+1;
		КонецЕсли;
		РаспределениеВзаиморасчетов.РассчитатьВсе(КонецРасчета);
		Возврат;
	КонецЕсли;
	
	НачалоМесяца = НачалоМесяца(ДатаОкончания);
	КонецМесяца = КонецМесяца(ДатаОкончания);
	ОкончаниеРасчета = КонецМесяца(ДатаОкончания)+1;
	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Расчеты.Регистратор В (&ДокументыКОтражению)
	|	И Расчеты.Активность
	|");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца);
	Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКОтражению);
	МассивАналитикПоставщиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
	Если МассивАналитикПоставщиков.Количество() > 0 Тогда
		РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСПоставщиками(ОкончаниеРасчета, МассивАналитикПоставщиков);
	КонецЕсли;
	
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
	|ГДЕ
	|	Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И Расчеты.Регистратор В (&ДокументыКОтражению)
	|	И Расчеты.Активность
	|");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца);
	Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКОтражению);
	МассивАналитикКлиентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
	Если МассивАналитикКлиентов.Количество() > 0 Тогда
		РаспределениеВзаиморасчетов.РаспределитьВсеРасчетыСКлиентами(ОкончаниеРасчета, МассивАналитикКлиентов);
	КонецЕсли;
	

КонецПроцедуры

#КонецОбласти

#Область РегистрацияДокументовКОтражениюВМеждународномУчете

// Регистрирует документ к отражению в международном учете.
//
// Параметры:
//	Источник - ДокументОбъект, Структура - документ, регистрируемый к отражению в международном учете. Ключи структуры:
//		* Дата - Дата - дата регистрации документа к отражению в международном учете.
//		* Регистратор - ДокументСсылка - ссылка на документ, регистриуемый к отражению в международном учете.
//		* ИсходнаяТаблица - ТаблицаЗначений - таблица хозяйственных операций к отражению в международном учете.
//	ПриПроведении - Булево - признак регистрации документа к отражению в международном учете, при проведении документа.
//
Процедура ЗарегистрироватьДокументКОтражениюВМеждународномУчете(Источник, ПриПроведении = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаКОтражениюВМеждународномУчете = ТаблицаКОтражениюВМеждународномУчете(Источник, ПриПроведении);
	
	Если ТаблицаКОтражениюВМеждународномУчете.Количество() > 0 Тогда
		Если ПриПроведении Тогда
			НаборЗаписей = Источник.Движения.ОтражениеДокументовВМеждународномУчете;
			НаборЗаписей.Загрузить(ТаблицаКОтражениюВМеждународномУчете);
			НаборЗаписей.Записывать = Истина;
		Иначе
			НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Источник.Регистратор);
			НаборЗаписей.Загрузить(ТаблицаКОтражениюВМеждународномУчете);
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ТаблицаКОтражениюВМеждународномУчете(Источник, ПриПроведении) Экспорт   

	Если ПриПроведении Тогда
		
		ИмяДокумента = Источник.Метаданные().Имя;
		
		ИсходнаяТаблица = ИнициализироватьТаблицуКОтражениюВМеждународномУчете();
		МассивРегистров = РегистрыКОтражениюВМеждународномУчете();
		Для каждого ИмяРегистра Из МассивРегистров Цикл
			Если ИмяРегистра = "Хозрасчетный" Тогда
				Если ИмяДокумента = "РасчетСебестоимостиТоваров" Тогда
					Организации = Источник.Организации.ВыгрузитьКолонку("Организация");
				Иначе
					Организации = Новый Массив;
					Организации.Добавить(Источник.Организация);
				КонецЕсли;
				Для каждого Организация Из Организации Цикл
					НоваяЗапись = ИсходнаяТаблица.Добавить();
					НоваяЗапись.Регистратор = Источник.Ссылка;
					НоваяЗапись.Организация = Организация;
				КонецЦикла;
			Иначе
				// Обрабатываем не все документы, являющиеся регистраторами для регистра.
				ДокументыКОтражению = МеждународныйУчетСерверПовтИсп.ДокументыКОтражениюВМеждународномУчете(ИмяРегистра);
				Если ДокументыКОтражению.Найти(Источник.Метаданные().Имя) <> Неопределено Тогда
					ДобавитьНаборЗаписейВТаблицу(ИсходнаяТаблица, Источник, ИмяРегистра);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивДокументов = ДокументыКОтражениюВМеждународномУчете();
		Если МассивДокументов.Найти(ИмяДокумента) <> Неопределено Тогда
			ДобавитьДокументКОтражениюВМеждународномУчете(ИсходнаяТаблица, Источник);
		КонецЕсли;
		
		ИсходнаяТаблица.Свернуть("Регистратор, Организация, ХозяйственнаяОперация");
	Иначе
		ИсходнаяТаблица = Источник.ИсходнаяТаблица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаКОтражениюВМеждународномУчете();
	
	Если (ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств"))
		И Источник.ПроведеноБанком Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(Источник.ДатаПроведенияБанком));
	Иначе
		Запрос.УстановитьПараметр("Период", Источник.Дата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	ТаблицаКОтражениюВМеждународномУчете = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаКОтражениюВМеждународномУчете;
	
КонецФункции

Функция ТекстЗапросаКОтражениюВМеждународномУчете()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.Регистратор КАК Регистратор,
	|	ИсходнаяТаблица.Организация КАК Организация,
	|	ИсходнаяТаблица.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Организация,
	|	ХозяйственнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Операция КАК Операция,
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПравилаОтражения.УчетнаяПолитика КАК УчетнаяПолитика,
	|	МАКСИМУМ(ШаблоныПроводок.РучноеУточнениеПроводки) КАК РучноеУточнениеПроводки
	|ПОМЕСТИТЬ ПравилаОтражения
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО
	|		ШаблоныПроводок.Операция = НастройкиХозяйственныхОпераций.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтражения
	|	ПО
	|		ШаблоныПроводок.Ссылка = ПравилаОтражения.ШаблонПроводки
	|СГРУППИРОВАТЬ ПО
	|	ШаблоныПроводок.Операция,
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация,
	|	ПравилаОтражения.УчетнаяПолитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКОтражению.Период КАК Период,
	|	ТаблицаКОтражению.Регистратор КАК Регистратор,
	|	ТаблицаКОтражению.Организация КАК Организация,
	|	ТаблицаКОтражению.УчетнаяПолитика КАК УчетнаяПолитика,
	|	ВЫБОР
	|		КОГДА ТаблицаКОтражению.Статус = 1 ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Период КАК Период,
	|		ИсходнаяТаблица.Регистратор КАК Регистратор,
	|		ИсходнаяТаблица.Организация КАК Организация,
	|		УчетныеПолитики.УчетнаяПолитика КАК УчетнаяПолитика,
	|		МИНИМУМ (ВЫБОР
	|			КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
	|				ИЛИ ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|				ИЛИ ПравилаОтражения.РучноеУточнениеПроводки
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ) КАК Статус
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.УчетнаяПолитикаОрганизацийДляМеждународногоУчета.СрезПоследних(&Период) КАК УчетныеПолитики
	|		ПО
	|			ИсходнаяТаблица.Организация = УчетныеПолитики.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПравилаОтражения КАК ПравилаОтражения
	|		ПО
	|			УчетныеПолитики.УчетнаяПолитика = ПравилаОтражения.УчетнаяПолитика
	|			И ИсходнаяТаблица.ХозяйственнаяОперация = ПравилаОтражения.ХозяйственнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|		ПО
	|			ИсходнаяТаблица.Регистратор = ОтражениеДокументов.Регистратор
	|			И ИсходнаяТаблица.Организация = ОтражениеДокументов.Организация
	|	СГРУППИРОВАТЬ ПО
	|		ИсходнаяТаблица.Регистратор,
	|		ИсходнаяТаблица.Организация,
	|		УчетныеПолитики.УчетнаяПолитика
	|	) КАК ТаблицаКОтражению
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьНаборЗаписейВТаблицу(ТаблицаНаборовЗаписей, Источник, ИмяРегистра)

	Перем ИзменилисьДанныеРегистра;
	
	НаборЗаписей = Источник.Движения[ИмяРегистра];
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ИзменилисьДанныеРегистра", ИзменилисьДанныеРегистра) И НЕ ИзменилисьДанныеРегистра Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРегистра = "ВыручкаИСебестоимостьПродаж" Тогда
		ДобавитьНаборЗаписейПоРегиструВыручкаИСебестоимостьПродаж(ТаблицаНаборовЗаписей, Источник);
	Иначе
		Для каждого Запись Из НаборЗаписей Цикл
			НоваяЗапись = ТаблицаНаборовЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
			НоваяЗапись.Регистратор = Источник.Ссылка;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьНаборЗаписейПоРегиструВыручкаИСебестоимостьПродаж(ТаблицаНаборовЗаписей, Источник)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДвижений.Регистратор КАК Регистратор,
	|	ДанныеДвижений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеДвижений.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ДанныеДвижений
	|ИЗ
	|	&ТаблицаНаборовЗаписей КАК ДанныеДвижений
	|;
	|ВЫБРАТЬ
	|	ДанныеДвижений.Регистратор КАК Регистратор,
	|	АналитикаПартнеров.Организация КАК Организация,
	|	ДанныеДвижений.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	ДанныеДвижений КАК ДанныеДвижений
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПартнеров
	|	ПО
	|		ДанныеДвижений.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
	|";
	
	Запрос.УстановитьПараметр("ТаблицаНаборовЗаписей", Источник.Движения.ВыручкаИСебестоимостьПродаж);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = ТаблицаНаборовЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		НоваяЗапись.Регистратор = Источник.Ссылка;
	КонецЦикла;

КонецПроцедуры

Функция ДокументыКОтражениюВМеждународномУчете()
	
	МассивДокументов = Новый Массив();
	МассивДокументов.Добавить("ПринятиеКУчетуОСМеждународныйУчет");
	МассивДокументов.Добавить("ПринятиеКУчетуНМАМеждународныйУчет");
	МассивДокументов.Добавить("ОтражениеЗарплатыВФинансовомУчете");
	
	Возврат МассивДокументов;
	
КонецФункции

Процедура ДобавитьДокументКОтражениюВМеждународномУчете(ТаблицаКОтражениюВМеждународномУчете, Документ)

	ТаблицаДокумента = ТаблицаКОтражениюВМеждународномУчете.СкопироватьКолонки();
	ИмяДокумента = Документ.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя;
	Документы[ИмяДокумента].ЗаполнитьТаблицуДокументаКОтражениюВМеждународномУчете(ТаблицаДокумента, Документ);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДокумента, ТаблицаКОтражениюВМеждународномУчете);

КонецПроцедуры

Функция ИнициализироватьТаблицуКОтражениюВМеждународномУчете()

	НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
	ТаблицаКОтражению = НаборЗаписей.ВыгрузитьКолонки("Период, Регистратор, Организация");
	ТаблицаКОтражению.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	
	Возврат ТаблицаКОтражению;

КонецФункции

// Обработчик подписки на событие ЗарегистрироватьДокументРеглУчетаКОтражениюВМеждународномУчете
//
// Параметры:
//  Стандартные параметры.
//
Процедура ЗарегистрироватьДокументРеглУчетаКОтражениюВМеждународномУчетеОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт

	Если Не Отказ И ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		ЗарегистрироватьДокументКОтражениюВМеждународномУчете(Источник, Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтражениеВМеждународномУчетеПоДаннымРегламентированного

Процедура ОтразитьПоДаннымРеглУчета(ПараметрыОтражения, ТаблицаПроводок)
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыОтражения.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОтражениеДокументовВРеглУчете.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете)) В (
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВРеглУчете),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияДокументовВРеглУчете.ОтраженоВУчетеВручную))
	|			ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОтраженВРеглУчете
	|ПОМЕСТИТЬ ДокументыКОтражениюПоДаннымРегл
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
	|		ПО 
	|			ДокументыКОтражению.Организация = ОтражениеДокументовВРеглУчете.Организация
	|			И ДокументыКОтражению.Регистратор = ОтражениеДокументовВРеглУчете.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКОтражению.Период,
	|	ДокументыКОтражению.Регистратор,
	|	ДокументыКОтражению.Организация,
	|	ДокументыКОтражению.УчетнаяПолитика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	ДокументыКОтражениюПоДаннымРегл КАК ДокументыКОтражению
	|ГДЕ
	|	НЕ ДокументыКОтражению.ОтраженВРеглУчете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	ДокументыКОтражениюПоДаннымРегл КАК ДокументыКОтражению
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|	ПО
	|		ДокументыКОтражению.Регистратор = Хозрасчетный.Регистратор
	|ГДЕ
	|	ДокументыКОтражению.ОтраженВРеглУчете
	|	И Хозрасчетный.Регистратор ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.УчетнаяПолитика КАК УчетнаяПолитика
	|ПОМЕСТИТЬ ДокументыОтраженныеВРеглУчете
	|ИЗ
	|	ДокументыКОтражениюПоДаннымРегл КАК ДокументыКОтражению
	|ГДЕ
	|	ДокументыКОтражению.ОтраженВРеглУчете
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период,
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.Активность,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеДт,
	|	ХозрасчетныйДвиженияССубконто.ПодразделениеКт,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт
	|ПОМЕСТИТЬ ПроводкиРеглУчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			(Регистратор, Организация) В
	|				(ВЫБРАТЬ
	|					ДокументыОтраженныеВРеглУчете.Регистратор,
	|					ДокументыОтраженныеВРеглУчете.Организация
	|				ИЗ
	|					ДокументыОтраженныеВРеглУчете КАК ДокументыОтраженныеВРеглУчете),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиРеглУчета.Регистратор,
	|	ПроводкиРеглУчета.НомерСтроки,
	|	ПроводкиРеглУчета.Период,
	|	ПроводкиРеглУчета.Активность,
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СубконтоДт1,
	|	ПроводкиРеглУчета.ВидСубконтоДт1,
	|	ПроводкиРеглУчета.СубконтоДт2,
	|	ПроводкиРеглУчета.ВидСубконтоДт2,
	|	ПроводкиРеглУчета.СубконтоДт3,
	|	ПроводкиРеглУчета.ВидСубконтоДт3,
	|	ПроводкиРеглУчета.СчетКт,
	|	ПроводкиРеглУчета.СубконтоКт1,
	|	ПроводкиРеглУчета.ВидСубконтоКт1,
	|	ПроводкиРеглУчета.СубконтоКт2,
	|	ПроводкиРеглУчета.ВидСубконтоКт2,
	|	ПроводкиРеглУчета.СубконтоКт3,
	|	ПроводкиРеглУчета.ВидСубконтоКт3,
	|	ПроводкиРеглУчета.Организация,
	|	ПроводкиРеглУчета.ВалютаДт,
	|	ПроводкиРеглУчета.ВалютаКт,
	|	ПроводкиРеглУчета.ПодразделениеДт,
	|	ПроводкиРеглУчета.ПодразделениеКт,
	|	ПроводкиРеглУчета.Сумма,
	|	ПроводкиРеглУчета.Сумма КАК СуммаПредставления,
	|	&ВалютаРеглУчета КАК ВалютаХраненияСуммыФункциональной,
	|	&ВалютаРеглУчета КАК ВалютаХраненияСуммыПредставления,
	|	ПроводкиРеглУчета.ВалютнаяСуммаДт,
	|	ПроводкиРеглУчета.ВалютнаяСуммаКт,
	|	ПроводкиРеглУчета.КоличествоДт,
	|	ПроводкиРеглУчета.КоличествоКт,
	|	ДокументыОтраженныеВРеглУчете.УчетнаяПолитика
	|ИЗ
	|	ПроводкиРеглУчета КАК ПроводкиРеглУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыОтраженныеВРеглУчете КАК ДокументыОтраженныеВРеглУчете
	|		ПО ПроводкиРеглУчета.Регистратор = ДокументыОтраженныеВРеглУчете.Регистратор
	|			И ПроводкиРеглУчета.Организация = ДокументыОтраженныеВРеглУчете.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПроводкиРеглУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыКОтражениюПоДаннымРегл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыОтраженныеВРеглУчете
	|";
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ПараметрыОтражения.ВалютыУчета.ВалютаРегл);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументыОжидаютОтраженияВРеглУчете = РезультатыЗапросов[1].Выбрать();
	Пока ВыборкаДокументыОжидаютОтраженияВРеглУчете.Следующий() Цикл
		Проводка = СтруктураПроводки();
		ЗаполнитьЗначенияСвойств(Проводка, ВыборкаДокументыОжидаютОтраженияВРеглУчете);
		ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете);
		ДобавитьОшибкуПроводки(Проводка, НСтр("ru='Для отражения в международном учете документ предварительно необходимо отразить в регл.';uk='Для відображення в міжнародному обліку документ попередньо необхідно відобразити в регл.'"));
		ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
	КонецЦикла;
	
	ВыборкаДокументыОтраженныеВРеглУчетеБезПроводок = РезультатыЗапросов[2].Выбрать();
	Пока ВыборкаДокументыОтраженныеВРеглУчетеБезПроводок.Следующий() Цикл
		Проводка = СтруктураПроводки();
		ЗаполнитьЗначенияСвойств(Проводка, ВыборкаДокументыОтраженныеВРеглУчетеБезПроводок);
		ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
		ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
	КонецЦикла;

	ПроводкиРеглУчета = РезультатыЗапросов[5].Выгрузить();
	ПроводкиРеглУчета.Индексы.Добавить("Регистратор, НомерСтроки");

	Если ПроводкиРеглУчета.Количество() Тогда
		ТранслироватьПроводкиПоСоответствиямОборотов(ПроводкиРеглУчета, ТаблицаПроводок);
	КонецЕсли;
	
	Если ПроводкиРеглУчета.Количество() Тогда
		ТранслироватьПроводкиПоСоответствиямСчетов(ПроводкиРеглУчета, ТаблицаПроводок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТранслироватьПроводкиПоСоответствиямОборотов(ПроводкиРеглУчета, ТаблицаПроводок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеОборотов.Ссылка,
	|	СоответствиеОборотов.ЭтоГруппа,
	|	СоответствиеОборотов.СчетРеглУчетаДт,
	|	СоответствиеОборотов.СчетРеглУчетаКт,
	|	СоответствиеОборотов.ДополнительныйОтбор,
	|	СоответствиеОборотов.СчетМеждународногоУчетаДт,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаДт.Валютный, ЛОЖЬ) КАК СчетМеждународногоУчетаДтВалютный,
	|	ВидыСубконтоДт1.ВидСубконто КАК ВидСубконтоДт1,
	|	ВидыСубконтоДт2.ВидСубконто КАК ВидСубконтоДт2,
	|	ВидыСубконтоДт3.ВидСубконто КАК ВидСубконтоДт3,
	|	СоответствиеОборотов.СчетМеждународногоУчетаКт,
	|	ЕСТЬNULL(СоответствиеОборотов.СчетМеждународногоУчетаКт.Валютный, ЛОЖЬ) КАК СчетМеждународногоУчетаКтВалютный,
	|	ВидыСубконтоКт1.ВидСубконто КАК ВидСубконтоКт1,
	|	ВидыСубконтоКт2.ВидСубконто КАК ВидСубконтоКт2,
	|	ВидыСубконтоКт3.ВидСубконто КАК ВидСубконтоКт3,
	|	СоответствиеОборотов.УстановленДополнительныйОтбор,
	|	СоответствиеОборотов.ВариантСовместногоПрименения,
	|	СоответствиеОборотов.РучноеУточнениеПроводки,
	|	СоответствиеОборотов.НеОтражаетсяВМеждународномУчете,
	|	ПравилаОтраженияВМеждународномУчете.УчетнаяПолитика
	|ИЗ
	|	Справочник.СоответствияОборотовМеждународногоУчета КАК СоответствиеОборотов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтраженияВМеждународномУчете
	|		ПО (ПравилаОтраженияВМеждународномУчете.ШаблонПроводки = СоответствиеОборотов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоДт1
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаДт = ВидыСубконтоДт1.Ссылка
	|			И (ВидыСубконтоДт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоДт2
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаДт = ВидыСубконтоДт2.Ссылка
	|			И (ВидыСубконтоДт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоДт3
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаДт = ВидыСубконтоДт3.Ссылка
	|			И (ВидыСубконтоДт3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоКт1
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаКт = ВидыСубконтоКт1.Ссылка
	|			И (ВидыСубконтоКт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоКт2
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаКт = ВидыСубконтоКт2.Ссылка
	|			И (ВидыСубконтоКт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконтоКт3
	|		ПО СоответствиеОборотов.СчетМеждународногоУчетаКт = ВидыСубконтоКт3.Ссылка
	|			И (ВидыСубконтоКт3.НомерСтроки = 3)
	|ГДЕ
	|	НЕ СоответствиеОборотов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоответствиеОборотов.РеквизитДопУпорядочивания ИЕРАРХИЯ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЗаполненияСубконтоСоответствий.Ссылка КАК СоответствиеОборотов,
	|	НастройкиЗаполненияСубконтоСоответствий.ПоложениеСубконто,
	|	НастройкиЗаполненияСубконтоСоответствий.ВидСубконто,
	|	НастройкиЗаполненияСубконтоСоответствий.ЗаполнятьИзРеглУчета,
	|	НастройкиЗаполненияСубконтоСоответствий.УказанноеЗначение,
	|	НастройкиЗаполненияСубконтоСоответствий.Выражение
	|ИЗ
	|	Справочник.СоответствияОборотовМеждународногоУчета.НастройкиЗаполненияСубконто КАК НастройкиЗаполненияСубконтоСоответствий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствияОборотовМеждународногоУчета КАК СоответствияОборотов
	|		ПО НастройкиЗаполненияСубконтоСоответствий.Ссылка = СоответствияОборотов.Ссылка
	|			И (НЕ СоответствияОборотов.ПометкаУдаления)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СоответствияОборотов = РезультатЗапроса[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	НастройкиЗаполненияСубконто = РезультатЗапроса[1].Выгрузить();
	НастройкиЗаполненияСубконто.Индексы.Добавить("СоответствиеОборотов");
	
	ПараметрыТрансляции = Новый Структура;
	ПараметрыТрансляции.Вставить("СоответствияОборотов", СоответствияОборотов.Строки);
	ПараметрыТрансляции.Вставить("НастройкиЗаполненияСубконто", НастройкиЗаполненияСубконто);
	ПараметрыТрансляции.Вставить("ВариантСовместногоПрименения", Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение);
	ПараметрыТрансляции.Вставить("ДополнительныйОтборГруппы", Неопределено);
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанныхРеглУчета(ПроводкиРеглУчета);
	
	ОбработанныеПроводки = Новый Соответствие;
	
	ТранслироватьПроводкиПоСоответствиямОборотовРекурсивно(
		СхемаКомпоновкиДанных,
		ПроводкиРеглУчета, 
		ПараметрыТрансляции,
		ТаблицаПроводок,
		ОбработанныеПроводки);

КонецПроцедуры

Процедура ТранслироватьПроводкиПоСоответствиямОборотовРекурсивно(СхемаКомпоновкиДанных, ПроводкиРеглУчета, ПараметрыТрансляции, ТаблицаПроводок, ОбработанныеПроводки)
	
	СоответствияОборотов = ПараметрыТрансляции.СоответствияОборотов;
	ВариантСовместногоПрименения = ПараметрыТрансляции.ВариантСовместногоПрименения;
	ДополнительныйОтборГруппы = ПараметрыТрансляции.ДополнительныйОтборГруппы;
	НастройкиЗаполненияСубконто = ПараметрыТрансляции.НастройкиЗаполненияСубконто;
	
	Для каждого СоответствиеОборотов Из СоответствияОборотов Цикл
		
		Если СоответствиеОборотов.ЭтоГруппа Тогда
			ВаринтСовместногоПримененияГруппы = СоответствиеОборотов.ВариантСовместногоПрименения;
			Если СоответствиеОборотов.УстановленДополнительныйОтбор Тогда
				ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
				КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
					СхемаКомпоновкиДанных, ДополнительныйОтбор, СоответствиеОборотов.ДополнительныйОтбор.Получить()); 
				Если ДополнительныйОтборГруппы <> Неопределено Тогда
					КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
						СхемаКомпоновкиДанных, ДополнительныйОтбор, ДополнительныйОтборГруппы);
				КонецЕсли;
			КонецЕсли;
			ПараметрыТрансляцииГруппы = Новый Структура;
			ПараметрыТрансляцииГруппы.Вставить("СоответствияОборотов", СоответствиеОборотов.Строки);
			ПараметрыТрансляцииГруппы.Вставить("ВариантСовместногоПрименения", ВаринтСовместногоПримененияГруппы);
			ПараметрыТрансляцииГруппы.Вставить("ДополнительныйОтборГруппы", ДополнительныйОтбор);
			ПараметрыТрансляцииГруппы.Вставить("НастройкиЗаполненияСубконто", НастройкиЗаполненияСубконто);
			
			ТранслироватьПроводкиПоСоответствиямОборотовРекурсивно(
				СхемаКомпоновкиДанных, 
				ПроводкиРеглУчета, 
				ПараметрыТрансляцииГруппы, 
				ТаблицаПроводок,
				ОбработанныеПроводки);
		Иначе
			
			Настройки = Новый НастройкиКомпоновкиДанных;
			НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "Регистратор");
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "НомерСтроки");
			
			УстановитьЗаполнениеСубконтоПоСоответствиюОборотов(
				СхемаКомпоновкиДанных, 
				Настройки, 
				СоответствиеОборотов, 
				НастройкиЗаполненияСубконто);
				
			УстановитьОтборПроводокПоСоответствиюОборотов(
				СхемаКомпоновкиДанных, 
				Настройки, 
				СоответствиеОборотов, 
				ДополнительныйОтборГруппы);
			
			ВнешниеНаборы = Новый Структура;
			ВнешниеНаборы.Вставить("ТаблицаДанных", ПроводкиРеглУчета);
			
			РезультатТрансляцииОборота = 
				ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
				
			Для каждого Строка Из РезультатТрансляцииОборота Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Регистратор", Строка.Регистратор);
				Отбор.Вставить("НомерСтроки", Строка.НомерСтроки);
				ПроводкаРеглУчета = ПроводкиРеглУчета.НайтиСтроки(Отбор)[0];
				
				ОбработанныеПроводки.Вставить(ПроводкаРеглУчета);
				
				Если Не СоответствиеОборотов.НеОтражаетсяВМеждународномУчете Тогда
					Проводка = СтруктураПроводки();
					
					ИсключаемыеПоля = 
						"СчетДт, ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, СубконтоДт1, СубконтоДт2, СубконтоДт3,
						|СчетКт, ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, СубконтоКт1, СубконтоКт2, СубконтоКт3";
					ЗаполнитьЗначенияСвойств(Проводка, ПроводкаРеглУчета, , ИсключаемыеПоля);
					ЗаполнитьЗначенияСвойств(Проводка, СоответствиеОборотов);
					
					Проводка.СчетДт = СоответствиеОборотов.СчетМеждународногоУчетаДт;
					Проводка.СубконтоДт1 = Строка.СубконтоМеждународныйДт1;
					Проводка.СубконтоДт2 = Строка.СубконтоМеждународныйДт2;
					Проводка.СубконтоДт3 = Строка.СубконтоМеждународныйДт3;
					
					Проводка.СчетКт = СоответствиеОборотов.СчетМеждународногоУчетаКт;
					Проводка.СубконтоКт1 = Строка.СубконтоМеждународныйКт1;
					Проводка.СубконтоКт2 = Строка.СубконтоМеждународныйКт2;
					Проводка.СубконтоКт3 = Строка.СубконтоМеждународныйКт3;
					
					ЗаполнитьВалютнуюСумму(Проводка, 
						СоответствиеОборотов.СчетМеждународногоУчетаДтВалютный, 
						СоответствиеОборотов.СчетМеждународногоУчетаКтВалютный);
						
					Если СоответствиеОборотов.РучноеУточнениеПроводки Тогда
						ЗаполнитьСтатусПроводки(Проводка, 
							Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
					КонецЕсли;
					
					ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияШаблоновПроводок.Вытеснение Тогда
			Для каждого Проводка Из ОбработанныеПроводки Цикл
				ПроводкиРеглУчета.Удалить(Проводка.Ключ);
			КонецЦикла;
			ОбработанныеПроводки.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТранслироватьПроводкиПоСоответствиямСчетов(ПроводкиРеглУчета, ТаблицаПроводок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СчетКт,
	|	ПроводкиРеглУчета.УчетнаяПолитика
	|ПОМЕСТИТЬ ПроводкиРеглУчета
	|ИЗ
	|	&ПроводкиРеглУчета КАК ПроводкиРеглУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПроводкиРеглУчета.СчетДт,
	|	ПроводкиРеглУчета.СчетКт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствияСчетов.Ссылка КАК Ссылка,
	|	СоответствияСчетов.СчетРеглУчета КАК СчетРеглУчета,
	|	СоответствияСчетов.СчетМеждународногоУчета КАК СчетМеждународногоУчета,
	|	СоответствияСчетов.СчетМеждународногоУчета.Валютный КАК СчетМеждународногоУчетаВалютный,
	|	СоответствияСчетов.УстановленДополнительныйОтбор КАК УстановленДополнительныйОтбор,
	|	ПравилаОтраженияВУчете.УчетнаяПолитика КАК УчетнаяПолитика,
	|	ВЫБОР
	|		КОГДА ПроводкиРеглУчетаСчетПоДт.СчетДт ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименятьДляСчетаДт,
	|	ВЫБОР
	|		КОГДА ПроводкиРеглУчетаСчетПоКт.СчетКт ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименятьДляСчетаКт,
	|	СоответствияСчетов.РеквизитДопУпорядочивания
	|ПОМЕСТИТЬ ТаблицаСоответствияСчетов
	|ИЗ
	|	Справочник.СоответствияСчетовМеждународногоУчета КАК СоответствияСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтраженияВУчете
	|		ПО (ПравилаОтраженияВУчете.ШаблонПроводки = СоответствияСчетов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроводкиРеглУчета КАК ПроводкиРеглУчетаСчетПоДт
	|		ПО СоответствияСчетов.СчетРеглУчета = ПроводкиРеглУчетаСчетПоДт.СчетДт
	|			И (ПравилаОтраженияВУчете.УчетнаяПолитика = ПроводкиРеглУчетаСчетПоДт.УчетнаяПолитика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроводкиРеглУчета КАК ПроводкиРеглУчетаСчетПоКт
	|		ПО СоответствияСчетов.СчетРеглУчета = ПроводкиРеглУчетаСчетПоКт.СчетКт
	|			И (ПравилаОтраженияВУчете.УчетнаяПолитика = ПроводкиРеглУчетаСчетПоКт.УчетнаяПолитика)
	|ГДЕ
	|	НЕ СоответствияСчетов.ПометкаУдаления
	|	И (ПроводкиРеглУчетаСчетПоДт.СчетДт ЕСТЬ НЕ NULL 
	|			ИЛИ ПроводкиРеглУчетаСчетПоКт.СчетКт ЕСТЬ НЕ NULL )
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиЗаполненияСубконтоСоответствий.Ссылка КАК СоответствиеСчетов,
	|	НастройкиЗаполненияСубконтоСоответствий.ВидСубконто,
	|	НастройкиЗаполненияСубконтоСоответствий.ЗаполнятьИзРеглУчета,
	|	НастройкиЗаполненияСубконтоСоответствий.УказанноеЗначение,
	|	НастройкиЗаполненияСубконтоСоответствий.Выражение
	|ИЗ
	|	Справочник.СоответствияСчетовМеждународногоУчета.НастройкиЗаполненияСубконто КАК НастройкиЗаполненияСубконтоСоответствий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствияСчетовМеждународногоУчета КАК СоответствияСчетов
	|		ПО НастройкиЗаполненияСубконтоСоответствий.Ссылка = СоответствияСчетов.Ссылка
	|			И (НЕ СоответствияСчетов.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствияСчетов.Ссылка,
	|	ТаблицаСоответствияСчетов.СчетРеглУчета,
	|	ТаблицаСоответствияСчетов.СчетМеждународногоУчета,
	|	ТаблицаСоответствияСчетов.СчетМеждународногоУчетаВалютный,
	|	ВидыСубконто1.ВидСубконто КАК ВидСубконто1,
	|	ВидыСубконто2.ВидСубконто КАК ВидСубконто2,
	|	ВидыСубконто3.ВидСубконто КАК ВидСубконто3,
	|	ТаблицаСоответствияСчетов.Ссылка.ДополнительныйОтбор КАК ДополнительныйОтбор,
	|	ТаблицаСоответствияСчетов.УстановленДополнительныйОтбор,
	|	ТаблицаСоответствияСчетов.УчетнаяПолитика,
	|	ТаблицаСоответствияСчетов.ПрименятьДляСчетаДт,
	|	ТаблицаСоответствияСчетов.ПрименятьДляСчетаКт
	|ИЗ
	|	ТаблицаСоответствияСчетов КАК ТаблицаСоответствияСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто1
	|		ПО ТаблицаСоответствияСчетов.СчетМеждународногоУчета = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто2
	|		ПО ТаблицаСоответствияСчетов.СчетМеждународногоУчета = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто3
	|		ПО ТаблицаСоответствияСчетов.СчетМеждународногоУчета = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаСоответствияСчетов.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("ПроводкиРеглУчета", ПроводкиРеглУчета);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	СоответствияСчетов = РезультатЗапроса[3].Выгрузить();
	
	НастройкиЗаполненияСубконто = РезультатЗапроса[2].Выгрузить();
	НастройкиЗаполненияСубконто.Индексы.Добавить("СоответствиеСчетов");
	
	ПоложенияСчета = Новый Массив();
	ПоложенияСчета.Добавить("Дт");
	ПоложенияСчета.Добавить("Кт");
	
	СхемыКомпоновкиДанных = Новый Структура;
	Для каждого ПоложениеСчета Из ПоложенияСчета Цикл
		КлючСхемаКомпоновкиДанных = "СхемаКомпоновкиДанных" + ПоложениеСчета;
		СхемыКомпоновкиДанных.Вставить(КлючСхемаКомпоновкиДанных, СхемаКомпоновкиДанныхРеглУчета(ПроводкиРеглУчета, ПоложениеСчета));
	КонецЦикла;
	
	ПрименениеСоответствий = Новый ТаблицаЗначений;
	ПрименениеСоответствий.Колонки.Добавить("Регистратор");
	ПрименениеСоответствий.Колонки.Добавить("НомерСтроки");
	ПрименениеСоответствий.Колонки.Добавить("СчетДт");
	ПрименениеСоответствий.Колонки.Добавить("СчетДтВалютный");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоДт1");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоДт2");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоДт3");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоДт1");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоДт2");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоДт3");
	ПрименениеСоответствий.Колонки.Добавить("СчетКт");
	ПрименениеСоответствий.Колонки.Добавить("СчетКтВалютный");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоКт1");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоКт2");
	ПрименениеСоответствий.Колонки.Добавить("ВидСубконтоКт3");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоКт1");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоКт2");
	ПрименениеСоответствий.Колонки.Добавить("СубконтоКт3");
	ПрименениеСоответствий.Индексы.Добавить("Регистратор, НомерСтроки");
	
	Для каждого СоответствиеСчетов Из СоответствияСчетов Цикл
		
		Если ПроводкиРеглУчета.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для каждого ПоложениеСчета Из ПоложенияСчета Цикл
			
			Если Не СоответствиеСчетов["ПрименятьДляСчета" + ПоложениеСчета] Тогда
				Продолжить;
			КонецЕсли;
			
			СхемаКомпоновкиДанных = СхемыКомпоновкиДанных["СхемаКомпоновкиДанных" + ПоложениеСчета];
			
			Настройки = Новый НастройкиКомпоновкиДанных;
			НоваяГруппировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "Регистратор");
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "НомерСтроки");
			
			УстановитьЗаполнениеСубконтоПоСоответствиюСчетов(
				СхемаКомпоновкиДанных, 
				Настройки, 
				СоответствиеСчетов, 
				НастройкиЗаполненияСубконто);
				
			УстановитьОтборПроводокПоСоответствиюСчетов(
				СхемаКомпоновкиДанных, 
				Настройки, 
				СоответствиеСчетов);
			
			ВнешниеНаборы = Новый Структура;
			ВнешниеНаборы.Вставить("ТаблицаДанных", ПроводкиРеглУчета);
			
			РезультатПримененияСоответствия = 
				ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
				
			Для каждого Строка Из РезультатПримененияСоответствия Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Регистратор", Строка.Регистратор);
				Отбор.Вставить("НомерСтроки", Строка.НомерСтроки);
				РезультатПоиска = ПрименениеСоответствий.НайтиСтроки(Отбор);
				Если РезультатПоиска.Количество() Тогда
					СтрокаПримененияСоответствий = РезультатПоиска[0];
				Иначе
					СтрокаПримененияСоответствий = ПрименениеСоответствий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПримененияСоответствий, Отбор);
				КонецЕсли;
				
				ПроводкаРеглУчета = ПроводкиРеглУчета.НайтиСтроки(Отбор)[0];
				
				СтрокаПримененияСоответствий["Счет" + ПоложениеСчета] = СоответствиеСчетов.СчетМеждународногоУчета;
				СтрокаПримененияСоответствий["Счет" + ПоложениеСчета + "Валютный"] = СоответствиеСчетов.СчетМеждународногоУчетаВалютный;
				СтрокаПримененияСоответствий["ВидСубконто" + ПоложениеСчета + "1"] = СоответствиеСчетов.ВидСубконто1;
				СтрокаПримененияСоответствий["ВидСубконто" + ПоложениеСчета + "2"] = СоответствиеСчетов.ВидСубконто2;
				СтрокаПримененияСоответствий["ВидСубконто" + ПоложениеСчета + "3"] = СоответствиеСчетов.ВидСубконто3;
				СтрокаПримененияСоответствий["Субконто" + ПоложениеСчета + "1"] = Строка.СубконтоМеждународный1;
				СтрокаПримененияСоответствий["Субконто" + ПоложениеСчета + "2"] = Строка.СубконтоМеждународный2;
				СтрокаПримененияСоответствий["Субконто" + ПоложениеСчета + "3"] = Строка.СубконтоМеждународный3;
				
				ТранслироватьПроводку = Истина;
				Если Не ЗначениеЗаполнено(СтрокаПримененияСоответствий.СчетДт) 
					 И ЗначениеЗаполнено(ПроводкаРеглУчета.СчетДт) Тогда
					ТранслироватьПроводку = Ложь;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаПримененияСоответствий.СчетКт) 
					 И ЗначениеЗаполнено(ПроводкаРеглУчета.СчетКт) Тогда
					ТранслироватьПроводку = Ложь;
				КонецЕсли;
				
				Если Не ТранслироватьПроводку Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = СтруктураПроводки();
				ИсключаемыеПоля = 
					"СчетДт, ВидСубконтоДт1, ВидСубконтоДт2, ВидСубконтоДт3, СубконтоДт1, СубконтоДт2, СубконтоДт3,
					|СчетКт, ВидСубконтоКт1, ВидСубконтоКт2, ВидСубконтоКт3, СубконтоКт1, СубконтоКт2, СубконтоКт3";
				
				ЗаполнитьЗначенияСвойств(Проводка, ПроводкаРеглУчета, , ИсключаемыеПоля);
				ЗаполнитьЗначенияСвойств(Проводка, СтрокаПримененияСоответствий);
				
				ЗаполнитьВалютнуюСумму(Проводка, 
					СтрокаПримененияСоответствий.СчетДтВалютный, 
					СтрокаПримененияСоответствий.СчетКтВалютный);
				
				ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
				ПроводкиРеглУчета.Удалить(ПроводкаРеглУчета);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПроводкиРеглУчета.Количество() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроводкиРеглУчета.Регистратор КАК Регистратор,
		|	ПроводкиРеглУчета.НомерСтроки КАК НомерСтроки,
		|	ПроводкиРеглУчета.СчетДт КАК СчетДт,
		|	ПроводкиРеглУчета.СчетКт КАК СчетКт,
		|	ПроводкиРеглУчета.УчетнаяПолитика КАК УчетнаяПолитика,
		|	ПроводкиРеглУчета.Организация КАК Организация
		|ПОМЕСТИТЬ ПроводкиРеглУчета
		|ИЗ
		|	&ПроводкиРеглУчета КАК ПроводкиРеглУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроводкиРеглУчета.Регистратор КАК Регистратор,
		|	ПроводкиРеглУчета.НомерСтроки КАК НомерСтроки,
		|	ПроводкиРеглУчета.СчетДт КАК Счет,
		|	""Дт"" КАК ПоложениеСчета,
		|	ПроводкиРеглУчета.УчетнаяПолитика КАК УчетнаяПолитика,
		|	ПроводкиРеглУчета.Организация КАК Организация
		|ПОМЕСТИТЬ СчетаПроводокРеглУчета
		|ИЗ
		|	ПроводкиРеглУчета КАК ПроводкиРеглУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПроводкиРеглУчета.Регистратор,
		|	ПроводкиРеглУчета.НомерСтроки,
		|	ПроводкиРеглУчета.СчетКт,
		|	""Кт"",
		|	ПроводкиРеглУчета.УчетнаяПолитика,
		|	ПроводкиРеглУчета.Организация
		|ИЗ
		|	ПроводкиРеглУчета КАК ПроводкиРеглУчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УчетнаяПолитика,
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаРеглУчета.Регистратор КАК Регистратор,
		|	СчетаРеглУчета.НомерСтроки КАК НомерСтроки,
		|	СчетаРеглУчета.Счет КАК Счет,
		|	СчетаРеглУчета.ПоложениеСчета КАК ПоложениеСчета,
		|	СчетаРеглУчета.УчетнаяПолитика КАК УчетнаяПолитика,
		|	СчетаРеглУчета.Организация КАК Организация
		|ИЗ
		|	СчетаПроводокРеглУчета КАК СчетаРеглУчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаРеглУчетаИгнорируемыеПриОтраженииВМеждународномУчете КАК ИгнорируемыеСчета
		|		ПО СчетаРеглУчета.УчетнаяПолитика = ИгнорируемыеСчета.УчетнаяПолитика
		|			И СчетаРеглУчета.Счет = ИгнорируемыеСчета.СчетРеглУчета
		|ГДЕ
		|	ИгнорируемыеСчета.СчетРеглУчета ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ПроводкиРеглУчета", ПроводкиРеглУчета);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ШаблонОшибки = НСтр("ru='Не указан соответствующий счет для %Счет.';uk='Не вказано відповідний рахунок для %Счет.'");
		
		Пока Выборка.Следующий() Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("Регистратор", Выборка.Регистратор);
			Отбор.Вставить("НомерСтроки", Выборка.НомерСтроки);
			
			РезультатПоиска = ПрименениеСоответствий.НайтиСтроки(Отбор);
			Если РезультатПоиска.Количество() Тогда
				СтрокаПримененияСоответствий = РезультатПоиска[0];
			Иначе
				СтрокаПримененияСоответствий = Неопределено;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Выборка.Счет) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПримененияСоответствий <> Неопределено 
				И ЗначениеЗаполнено(СтрокаПримененияСоответствий["Счет" + Выборка.ПоложениеСчета]) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Счет", Выборка.Счет);
			
			Проводка = СтруктураПроводки();
			ЗаполнитьЗначенияСвойств(Проводка, Отбор);
			ЗаполнитьЗначенияСвойств(Проводка, Выборка);
			ЗаполнитьСтатусПроводки(Проводка, Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
			ДобавитьОшибкуПроводки(Проводка, ТекстОшибки);
			ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СхемаКомпоновкиДанныхРеглУчета(ТаблицаДанных, ПоложениеСчета = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхемаНаборОбъект("ТаблицаДанных");
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("ТаблицаДанных");
	
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		ПутьКДанным = ИмяПоля;
		Если ПоложениеСчета = "Дт" Тогда
			ПутьКДанным = СтрЗаменить(ПутьКДанным, "Дт", "");
		ИначеЕсли ПоложениеСчета = "Кт" Тогда
			ПутьКДанным = СтрЗаменить(ПутьКДанным, "Кт", "");
		КонецЕсли;
		НовоеПоле.ПутьКДанным = ПутьКДанным;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
	КонецЦикла;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Параметр.Имя = "Кэш";
	Параметр.Значение = Новый Соответствие;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция УстановитьЗаполнениеСубконтоПоСоответствиюОборотов(СхемаКомпоновкиДанных, Настройки, СоответствиеОборотов, НастройкиЗаполненияСубконто)
	
	СхемаКомпоновкиДанных.ВычисляемыеПоля.Очистить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("СоответствиеОборотов", СоответствиеОборотов.Ссылка);
	Отбор.Вставить("ПоложениеСубконто");
	Отбор.Вставить("ВидСубконто");
	
	ПоложенияСубконто = Новый Массив;
	ПоложенияСубконто.Добавить("Дт");
	ПоложенияСубконто.Добавить("Кт");
	
	Для НомерСубконто = 1 По 3 Цикл
		Для каждого ПоложениеСубконто Из ПоложенияСубконто Цикл
			ПутьКДанным = "СубконтоМеждународный" + ПоложениеСубконто + НомерСубконто;
			Выражение   = "NULL";
			ВидСубконто = СоответствиеОборотов["ВидСубконто" + ПоложениеСубконто + НомерСубконто];
			Если ЗначениеЗаполнено(ВидСубконто) Тогда
				Отбор.ПоложениеСубконто = ПоложениеСубконто;
				Отбор.ВидСубконто = ВидСубконто;
				РезультатПоиска = НастройкиЗаполненияСубконто.НайтиСтроки(Отбор);
				Если РезультатПоиска.Количество() Тогда
					Выражение = ВыражениеЗаполненияСубконтоПоНастройке(СхемаКомпоновкиДанных, РезультатПоиска[0]);
				КонецЕсли;
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, Выражение); 
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, ПутьКДанным);
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

Функция УстановитьЗаполнениеСубконтоПоСоответствиюСчетов(СхемаКомпоновкиДанных, Настройки, СоответствиеСчетов, НастройкиЗаполненияСубконто)
	
	СхемаКомпоновкиДанных.ВычисляемыеПоля.Очистить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("СоответствиеСчетов", СоответствиеСчетов.Ссылка);
	Отбор.Вставить("ВидСубконто");
	
	Для НомерСубконто = 1 По 3 Цикл
		ВидСубконто = СоответствиеСчетов["ВидСубконто" + НомерСубконто];
		Выражение = "NULL";
		Если ЗначениеЗаполнено(ВидСубконто) Тогда
			Отбор.ВидСубконто = ВидСубконто;
			РезультатПоиска = НастройкиЗаполненияСубконто.НайтиСтроки(Отбор);
			Если РезультатПоиска.Количество() Тогда
				Выражение = ВыражениеЗаполненияСубконтоПоНастройке(СхемаКомпоновкиДанных, РезультатПоиска[0]);
			КонецЕсли;
		КонецЕсли;
		ПутьКДанным = "СубконтоМеждународный" + НомерСубконто;
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, Выражение); 
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, ПутьКДанным);
	КонецЦикла;
	
КонецФункции

Функция ВыражениеЗаполненияСубконтоПоНастройке(СхемаКомпоновкиДанных, Настройка)
	
	ВыражениеВычисляемогоПоля = "Неопределено";
	Если Настройка.ЗаполнятьИзРеглУчета Тогда
		ВыражениеНастройки = Настройка.Выражение;
		Если Найти(ВыражениеНастройки, "СчетДт.") > 0 Тогда
			ВыражениеНастройки = СтрЗаменить(ВыражениеНастройки, "СчетДт.", "");
		ИначеЕсли Найти(ВыражениеНастройки, "СчетКт.") > 0 Тогда
			ВыражениеНастройки = СтрЗаменить(ВыражениеНастройки, "СчетКт.", "");
		КонецЕсли;
		ВыражениеВычисляемогоПоля = ВыражениеНастройки;
	Иначе
		ИмяПараметра = "УказанноеЗначение_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		Параметр.Имя = ИмяПараметра;
		Параметр.Значение = Настройка.УказанноеЗначение;
		ВыражениеВычисляемогоПоля = "&" + ИмяПараметра;
	КонецЕсли;
	
	Возврат ВыражениеВычисляемогоПоля;
	
КонецФункции

Функция УстановитьОтборПроводокПоСоответствиюОборотов(СхемаКомпоновкиДанных, Настройки, СоответствиеОборотов, ДополнительныйОтборГруппы = Неопределено) Экспорт
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "СчетДт", СоответствиеОборотов.СчетРеглУчетаДт);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "СчетКт", СоответствиеОборотов.СчетРеглУчетаКт);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "УчетнаяПолитика", СоответствиеОборотов.УчетнаяПолитика);
	
	Если ДополнительныйОтборГруппы <> Неопределено Тогда
		ПреобразоватьОтборСоответствияОборотов(ДополнительныйОтборГруппы.Отбор.Элементы);
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ДополнительныйОтборГруппы);
	КонецЕсли;
	
	Если СоответствиеОборотов.УстановленДополнительныйОтбор Тогда
		ДополнительныйОтбор = СоответствиеОборотов.ДополнительныйОтбор.Получить();
		ПреобразоватьОтборСоответствияОборотов(ДополнительныйОтбор.Отбор.Элементы);
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ДополнительныйОтбор);
	КонецЕсли;
	
КонецФункции

Функция УстановитьОтборПроводокПоСоответствиюСчетов(СхемаКомпоновкиДанных, Настройки, СоответствиеСчетов) Экспорт
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "Счет", СоответствиеСчетов.СчетРеглУчета);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "УчетнаяПолитика", СоответствиеСчетов.УчетнаяПолитика);
	
	Если СоответствиеСчетов.УстановленДополнительныйОтбор Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, СоответствиеСчетов.ДополнительныйОтбор.Получить());
	КонецЕсли;
	
КонецФункции

Функция Подключаемый_РеквизитСубконто(Кэш, Субконто, Реквизит) Экспорт
	
	ЗначениеРеквизита = Неопределено;
	
	РеквизитыСубконто = Кэш[Субконто];
	Если РеквизитыСубконто <> Неопределено Тогда
		РеквизитыСубконто.Свойство(Реквизит, ЗначениеРеквизита);
		Если ЗначениеРеквизита <> Неопределено Тогда
			Возврат ЗначениеРеквизита;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ЗначениеРеквизита = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Субконто, Реквизит)
	Исключение
		ЗначениеРеквизита = Неопределено;
	КонецПопытки;
	
	Если РеквизитыСубконто = Неопределено Тогда
		РеквизитыСубконто = Новый Структура;
		Кэш.Вставить(Субконто, РеквизитыСубконто); 
	КонецЕсли;
	
	РеквизитыСубконто.Вставить(Реквизит, ЗначениеРеквизита);
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

Процедура ЗаполнитьВалютнуюСумму(Проводка, СчетДтВалютный, СчетКтВалютный)
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПризнакиСчетов = Новый Структура;
	ПризнакиСчетов.Вставить("Дт", СчетДтВалютный); 
	ПризнакиСчетов.Вставить("Кт", СчетКтВалютный); 
	
	Для каждого ПризнакСчета Из ПризнакиСчетов Цикл
		
		Валютный = ПризнакСчета.Значение;
		ВалютаЗаполнена = ЗначениеЗаполнено(Проводка["Валюта" + ПризнакСчета.Ключ]);
		
		Если Валютный И Не ВалютаЗаполнена Тогда
			Проводка["Валюта" + ПризнакСчета.Ключ]        = ВалютаРеглУчета;
			Проводка["ВалютнаяСумма" + ПризнакСчета.Ключ] = Проводка.Сумма;
		ИначеЕсли Не Валютный И ВалютаЗаполнена Тогда
			Проводка["Валюта" + ПризнакСчета.Ключ]        = Неопределено;
			Проводка["ВалютнаяСумма" + ПризнакСчета.Ключ] = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Проводка.СуммаПредставления = Проводка.Сумма;
	
КонецПроцедуры

Процедура ПреобразоватьОтборСоответствияОборотов(ЭлементыОтбора)
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПреобразоватьОтборСоответствияОборотов(ЭлементОтбора.Элементы);
		Иначе
			
			ЛевоеЗначениеОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
			
			Если СтрНайти(ЛевоеЗначениеОтбора, "СчетДт.") > 0 Тогда
				ЛевоеЗначениеОтбора = СтрЗаменить(ЛевоеЗначениеОтбора, "СчетДт.", "");
			ИначеЕсли СтрНайти(ЛевоеЗначениеОтбора, "СчетКт.") > 0 Тогда
				ЛевоеЗначениеОтбора = СтрЗаменить(ЛевоеЗначениеОтбора, "СчетКт.", "");
			КонецЕсли;
			
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначениеОтбора);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
