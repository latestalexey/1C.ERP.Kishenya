
//++ НЕ УТ

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПРОВЕРКИ НЕОБХОДИМОСТИ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПО РАЗДЕЛАМ УЧЕТА

// Функция возвращает 1, если ведется кадровый учет, иначе 0.
//
Функция ВедетсяКадровыйУчет() Экспорт
	
	Возврат 0;

КонецФункции // ВедетсяКадровыйУчет()

// Процедура устанавливает настройки для ведения кадрового учета
//
// Параметры:
//	ВестиКадровыйУчет - Булево
//
Процедура УстановитьНастройкиКадровогоУчета(ВестиКадровыйУчет, УчетЗарплатыИКадровСредствамиБухгалтерии) Экспорт

	// В БРУ ничего не делаем
	
КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает 1, если используется учет зарплаты ведется во внешней программе, иначе 0.
//
Функция УчетЗарплатыИКадровВоВнешнейПрограмме() Экспорт
	
	Возврат ?(Константы.ИспользоватьНачислениеЗарплаты.Получить(), 0, 1);

КонецФункции // УчетЗарплатыИКадровВоВнешнейПрограмме()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево
//
Процедура УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт

	// В БРУ ничего не делаем

КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает Истина, если используется учет зарплаты ведется сводно, иначе Ложь.
//
Функция ВедетсяУчетРасчетовПоЗарплатеСводно() Экспорт
	
	БУ = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	Возврат БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") <> Неопределено;

КонецФункции // ВедетсяУчетРасчетовПоЗарплатеСводно()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево
//
Процедура УстановитьПараметрыУчетаРасчетовПоЗарплате(ВедетсяУчетРасчетовПоЗарплатеСводно) Экспорт

	// в БРУ ничего не выполняем.

КонецПроцедуры // УстановитьПараметрыУчетаРасчетовПоЗарплате()

// Функция возвращает Истина, если в конфигурации ведется учет по валютам.
//
Функция ИспользоватьВалютныйУчет() Экспорт

	Возврат Истина;

КонецФункции // ИспользоватьВалютныйУчет()

// Функция возвращает ИСТИНА, если документ считается проведенным.
//
Функция ДокументПроведен(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух") Тогда
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПометкаУдаления");
		Возврат НЕ РеквизитыДокумента.ПометкаУдаления;

	Иначе
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен");
		Возврат РеквизитыДокумента.Проведен;
	
	КонецЕсли;	
	
КонецФункции // ДокументПроведен()

//-- НЕ УТ

// Функция возвращает ИСТИНА, если в конфигурации поддерживается учет по подразделениями.
//
Функция ВестиУчетПоПодразделениям() Экспорт

	Возврат Истина;

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используются подразделения.
//
Функция ИспользоватьПодразделения() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");

КонецФункции

// Функция возвращает ИСТИНА, если в конфигурации используется управленческая организация.
//
Функция ИспользоватьУправленческуюОрганизацию() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");

КонецФункции

//++ НЕ УТ

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ АНАЛИТИКИ ПЛАНА СЧЕТОВ

// Возвращает предопределенные счета учета затрат на производство
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка.Хозрасчетный
//
Функция ПредопределенныеСчетаЗатрат() Экспорт
	
	СчетаЗатрат = Новый Массив();
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	
	Возврат СчетаЗатрат;

КонецФункции

// Создает временные таблицы, которые содержат список счетов затрат, на которых обязательна та или иная аналитика
//
Процедура СоздатьВременныеТаблицыСчетаГдеОбязательнаАналитика(МенеджерВременныхТаблиц) Экспорт
	
	// Общее правило: аналитика на счетах затрат должна быть заполнена.
	// Исключение:    на счете 26 может быть не заполнено подразделение
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаЗатрат",   ПредопределенныеСчетаЗатрат());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаГдеОбязательныПодразделения
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаЗатрат)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ СчетаГдеОбязательныНоменклатурныеГруппы
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|	И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&СчетаЗатрат)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ СчетаГдеОбязательныСтатьиЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|	И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&СчетаЗатрат)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Позволяет вывести текст сообщения об ошибке вида "Не заполнена аналитика" в соответствии с правилами русского языка.
// Для этого заменяет шаблоны слов на 
// - перечень аналитики, которая не заполнена 
// - словоформы, зависящие от этого перечня
//
// Параметры:
//  ТекстСообщения - Строка - может содержать шаблоны 
//                   - вида %Реквизиты%, %РеквизитыВинительныйПадеж%
//                   - описанные в параметре СловаДляСклонения
//                   Эти шаблоны будут заменены на (соответственно)
//                   - перечень аналитики в именительном или винительном падеже
//                   - словоформу в склонении, соответствующем перечню аналитики
//  НеЗаполненаАналитика
//                 - Массив - может содержать строки Подразделение, НоменклатурнаяГруппа, СтатьяЗатрат
//  СловаДляСклонения 
//                 - Структура - описывает склонение слова
//                   - Ключ - строка шаблона (например, "КрасныйЦвет")
//                   - Значение - структура с 4 элементами
//                               - Ключи - "он", "она", "оно", "они"
//                               - Значения - словоформы в соответствующем склонении ("красный", "красная", "красное", "красные")
//
Процедура ЗаполнитьПереченьАналитикиВСообщенииОбОшибке(ТекстСообщения, НеЗаполненаАналитика, СловаДляСклонения = Неопределено) Экспорт
	
	Если СловаДляСклонения = Неопределено Тогда
		СловаДляСклонения = Новый Структура;
	КонецЕсли;
	
	НаименованияАналитики = Новый Структура();
	НаименованияАналитики.Вставить("Подразделение",        НСтр("ru='подразделение';uk='підрозділ'"));
	НаименованияАналитики.Вставить("НоменклатурнаяГруппа", НСтр("ru='номенклатурная группа';uk='Общепіт номенклатурна група'"));
	НаименованияАналитики.Вставить("СтатьяЗатрат",         НСтр("ru='статья затрат';uk='стаття витрат'"));
	
	НаименованияАналитикиВинительныйПадеж = Новый Структура();
	НаименованияАналитикиВинительныйПадеж.Вставить("Подразделение",        НСтр("ru='подразделение';uk='підрозділ'"));
	НаименованияАналитикиВинительныйПадеж.Вставить("НоменклатурнаяГруппа", НСтр("ru='номенклатурную группу';uk='номенклатурну групу'"));
	НаименованияАналитикиВинительныйПадеж.Вставить("СтатьяЗатрат",         НСтр("ru='статью затрат';uk='статті витрат'"));
	
	РодНаименованияАналитики = Новый Структура();
	РодНаименованияАналитики.Вставить("Подразделение",        НСтр("ru='оно';uk='воно'"));
	РодНаименованияАналитики.Вставить("НоменклатурнаяГруппа", НСтр("ru='она';uk='вона'"));
	РодНаименованияАналитики.Вставить("СтатьяЗатрат",         НСтр("ru='она';uk='вона'"));
	
	Если НеЗаполненаАналитика.Количество() = 1 Тогда
		
		ИмяАналитики = НеЗаполненаАналитика[0];
		
		СтрокаРеквизиты                 = НаименованияАналитики[ИмяАналитики];
		СтрокаРеквизитыВинительныйПадеж = НаименованияАналитикиВинительныйПадеж[ИмяАналитики];
		
		Род = РодНаименованияАналитики[ИмяАналитики];
		
	Иначе
		
		НаименованияНеЗаполненнойАналитики                 = Новый Массив;
		НаименованияНеЗаполненнойАналитикиВинительныйПадеж = Новый Массив;
		Для Каждого ИмяАналитики Из НеЗаполненаАналитика Цикл
			НаименованияНеЗаполненнойАналитики.Добавить(НаименованияАналитики[ИмяАналитики]);
			НаименованияНеЗаполненнойАналитикиВинительныйПадеж.Добавить(НаименованияАналитикиВинительныйПадеж[ИмяАналитики]);
		КонецЦикла;
		СтрокаРеквизиты                 = СтрСоединить(НаименованияНеЗаполненнойАналитики, ", ");
		СтрокаРеквизитыВинительныйПадеж = СтрСоединить(НаименованияНеЗаполненнойАналитикиВинительныйПадеж, ", ");
		
		Род = "они";
	
	КонецЕсли;
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Реквизиты%",                 СтрокаРеквизиты);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РеквизитыВинительныйПадеж%", СтрокаРеквизитыВинительныйПадеж);
	
	Для Каждого Слово Из СловаДляСклонения Цикл
		
		ШаблонСлова    = "%" + Слово.Ключ + "%";
		
		ПравилаРодИЧисло = Слово.Значение;
		Если ПравилаРодИЧисло.Свойство(Род) Тогда
			СловоПоРодуИЧислу = ПравилаРодИЧисло[Род];
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ШаблонСлова, СловоПоРодуИЧислу);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ СООБЩЕНИЙ ПОЛЬЗОВАТЕЛЮ

// Процедура формирует сообщение пользователю при возникновении ошибок 
// в процессе проведения регламентированных операций.
//
Процедура СообщитьОбОшибкеРегОперацииСНавигацией(Знач ТекстСообщения, СсылкаНаОшибочныйОбъект = Неопределено, Отказ = Истина, РегОперация) Экспорт
	
	Отказ = Истина;
	Если ТипЗнч(СсылкаНаОшибочныйОбъект) = Тип("Строка") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОшибочныйОбъект,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОбОшибкеРегОперацииСНавигацией()

Процедура СообщитьОбОшибкеРегОперации(Знач ТекстСообщения, ДокументСообщения = Неопределено, Отказ = Ложь, РегОперация) Экспорт

	Отказ = Истина;
		
	Заголовок = ?(РегОперация = Неопределено, "", ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(РегОперация.Ссылка));
	ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	
КонецПроцедуры // СообщитьОбОшибке()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ДОГОВОРА

//Функция возвращает организацию по договору
//
Функция ПолучитьОрганизациюПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация");
	
КонецФункции // ПолучитьОрганизациюПоДоговору()

//Функция возвращает контрагента по договору
//
Функция ПолучитьКонтрагентаПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
	
КонецФункции // ПолучитьКонтрагентаПоДоговору()

//Функция возвращает валюту договора
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      СправочникСсылка.Валюты
Функция ВалютаВзаиморасчетов(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
КонецФункции // ВалютаВзаиморасчетов()

//Функция возвращает признак расчетов в условных единицах
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      Булево (ИСТИНА если расчеты ведутся в условных единицах)
Функция РасчетыВУсловныхЕдиницах(ДоговорКонтрагента) Экспорт
	
	ПорядокОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ПорядокОплаты");
	
	Возврат ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах;
	
КонецФункции // РасчетыВУсловныхЕдиницах()

//Функция возвращает пустое значение договора
//
Функция ПолучитьПустоеЗначениеДоговора() Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции // ПолучитьПустоеЗначениеДоговора()

//Функция возвращает текст, для получения свойства ВидДоговора в запросе
//
Функция ТекстЗапросаВидДоговора(ИмяПоля) Экспорт
	
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов)." + ИмяРеквизитаВидДоговора, "ПолеДоговор", ИмяПоля); 
	
КонецФункции // ТекстЗапросаВидДоговора()

//Функция возвращает текст, для получения свойства РасчетыВУсловныхЕдиницах в запросе
//
Функция ТекстЗапросаРасчетыВУЕ(ИмяПоля) Экспорт
	
	Возврат СтрЗаменить("ВЫБОР 
						|	КОГДА ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВГривнах)
						|		ТОГДА ИСТИНА
						|	ИНАЧЕ ЛОЖЬ
						|КОНЕЦ", "ПолеДоговор", ИмяПоля);
	
КонецФункции // ТекстЗапросаРасчетыВУЕ()

// Функция ТекстЗапросаУчетАгентскогоНДС возвращает текст для получения свойства 
// УчетАгентскогоНДС для договора.
//
Функция ТекстЗапросаУчетАгентскогоНДС(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС";

КонецФункции // ТекстЗапросаУчетАгентскогоНДС()

// Функция ТекстЗапросаВидАгентскогоДоговора возвращает текст запроса для получения
// свойства договора ВидАгентскогоДоговора.
//
Функция ТекстЗапросаВидАгентскогоДоговора(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.ДоговорыКонтрагентов).ВидАгентскогоДоговора";

КонецФункции // ТекстЗапросаВидАгентскогоДоговора()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ТипыДоговоров> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.Ссылка = &ОсновнойДоговорКонтрагента 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	Запрос.УстановитьПараметр("ОсновнойДоговорКонтрагента", ДоговорКонтрагента); // В УП у контрагентов нет реквизита ОсновнойДоговорКонтрагента.
	
	ИмяРеквизитаКонтрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)
	 ИЛИ РеквизитыДоговора[ИмяРеквизитаКонтрагент] <> ВладелецДоговора
	 ИЛИ РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора Тогда
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Функция ЭтоВидДоговораСПоставщиком возвращает ИСТИНА, 
// если договор с таким видом является договором с поставщиком.
//
Функция ЭтоВидДоговораСПоставщиком(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
				ИЛИ ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
				;

КонецФункции // ЭтоВидДоговораСПоставщиком()

// Функция ЭтоВидДоговораСПокупателем возвращает ИСТИНА, 
// если договор с таким видом является договором с покупателем.
//
Функция ЭтоВидДоговораСПокупателем(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ТипыДоговоров.СПокупателем;

КонецФункции // ЭтоВидДоговораСПокупателем()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентом(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионером(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

КонецФункции // ЭтоВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСПоставщиком возвращает значение вида договоров, 
// которые используются при расчетах с поставщиками.
//
Функция ПолучитьВидДоговораСПоставщиком() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;

КонецФункции // ПолучитьВидДоговораСПоставщиком()

// Функция ПолучитьВидДоговораСПокупателем возвращает значение вида договоров, 
// которые используются при расчетах с покупателями.
//
Функция ПолучитьВидДоговораСПокупателем() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.РеализацияКлиенту;

КонецФункции // ПолучитьВидДоговораСПокупателем()

// Функция ПолучитьВидДоговораСКомиссионером возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами.
//
Функция ПолучитьВидДоговораСКомиссионером() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;

КонецФункции // ПолучитьВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСКомитентом возвращает значение вида договоров, 
// которые используются при расчетах с комитентами.
//
Функция ПолучитьВидДоговораСКомитентом() Экспорт

	Возврат Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьМассивВидовДоговоров возвращает массив видов договоров
// в соответствии с переданными параметрами. Функцию можно использовать для
// сокращения числа вызова отдельных функций, возвращающих по одному значению.
//
// Параметры:
//		СПоставщиком - Булево, признак включения видов договоров с поставщиком
//		СПокупателем - Булево, признак включения видов договоров с покупателем
//		СКомитентом  - Булево, признак включения видов договоров с комитентом
//		СКомиссионером  - Булево, признак включения видов договоров с комиссионером
//
Функция ПолучитьМассивВидовДоговоров(СПоставщиком = Ложь, СПокупателем = Ложь, СКомитентом = Ложь, СКомиссионером = Ложь) Экспорт

	МассивВидыДоговоров = Новый Массив;
	
	Если СПоставщиком Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		МассивВидыДоговоров.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	КонецЕсли;

	Если СПокупателем Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	КонецЕсли;

	Если СКомитентом Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		МассивВидыДоговоров.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссиюИмпорт);
	КонецЕсли;

	Если СКомиссионером Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	КонецЕсли;

	Возврат МассивВидыДоговоров;

КонецФункции // ПолучитьМассивВидовДоговоров()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ТипыДоговоров  (УП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		УчетАгентскогоНДС	 - Булево
//		ВидАгентскогоДоговора- ПеречислениеСсылка.ВидыАгентскихДоговоров
//		РасчетыВУсловныхЕдиницах - Булево
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Контрагент,
																		|Организация,
																		|ХозяйственнаяОперация,
																		|УчетАгентскогоНДС,
																		|ВидАгентскогоДоговора");
																		
		СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",	РасчетыВУсловныхЕдиницах(ДоговорКонтрагента));
		СтруктураРеквизиты.Вставить("Владелец", 				СтруктураРеквизиты.Контрагент);
		СтруктураРеквизиты.Вставить("ВидДоговора", 				СтруктураРеквизиты.ХозяйственнаяОперация);
		СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",			Ложь);
		
	Иначе
		
		СтруктураРеквизиты = Новый Структура;
		СтруктураРеквизиты.Вставить("Ссылка",  					Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",		Справочники.Валюты.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("Владелец",					Справочники.Контрагенты.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("Организация",				Справочники.Организации.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("ВидДоговора",				Перечисления.ХозяйственныеОперации.ПустаяСсылка());
		СтруктураРеквизиты.Вставить("УчетАгентскогоНДС",		Ложь);
		СтруктураРеквизиты.Вставить("НДСПоСтавкам4и2",			Ложь);
		СтруктураРеквизиты.Вставить("ВидАгентскогоДоговора",	Неопределено);
		СтруктураРеквизиты.Вставить("РасчетыВУсловныхЕдиницах",	Ложь);
		
	КонецЕсли;
	
	СтруктураРеквизиты.Вставить("ТипЦен", Неопределено);
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

// Функция возвращает договор с контрагентом из переданного документа.
//
Функция ПолучитьДоговорКонтрагентаИзДокумента(ДокументОснование) Экспорт

	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Возврат ДоговорКонтрагента;

КонецФункции // ПолучитьДоговорКонтрагентаИзДокумента()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ СКЛАДА

// Функция ТекстЗапросаНоменклатурнаяГруппаСклада возвращает текст запроса
// для получения НоменклатурнойГруппы из склада.
//
Функция ТекстЗапросаНоменклатурнаяГруппаСклада(ИмяПоля) Экспорт

	// В БРУ у складов нет номенклатурных групп.
	ИмяСправочникаНоменклатурныеГруппы = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяСправочникаНоменклатурныеГруппы();
	
	Возврат "ЗНАЧЕНИЕ(Справочник." + ИмяСправочникаНоменклатурныеГруппы + ".ПустаяСсылка)";

КонецФункции // ТекстЗапросаНоменклатурнаяГруппаСклада()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ НОМЕНКЛАТУРЫ

// Функция возвращает структуру со свойствами номенклатуры.
//
// Параметры:
// 	Номенклатура - СправочникСсылка.Номенклатура
//	Параметры контекста - структура содержащая поля
//		Дата 				- обязательный
//		Организация 		- обязательный
//		Склад		 		- не обязательный
//		ТипЦен 			- не обязательный
//		ВалютаДокумента	- не обязательный
//		Курс	 			- не обязательный
//		Кратность			- не обязательный
//		СуммаВключаетНДС	- не обязательный
//		СтавкаНДС			- не обязательный (Если параметр передан, то будет использована переданная ставка, иначе ставка из номенклатуры)
//
// Возвращаемое значение:
//	Структура с ключами:
//		Номенклатура		- СправочникСсылка.Номенклатура
//		Наименование		- Строка
//		СтавкаНДС			- ПеречислениеСсылка.СтавкиНДС
//		ЕдиницаИзмерения	- СправочникСсылка.КлассификаторЕдиницИзмерения (БП) или СправочникСсылка.ЕдиницыИзмерения (УП)
//		НоменклатурнаяГруппа- СправочникСсылка.НоменклатурныеГруппы (БП) или СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры (УП)
//		Код					- Строка
//		Артикул				- Строка
//		Услуга				- Булево
//		Цена				- Число
//		ЦенаВРознице		- Число (заполняется только в БП)
//		СчетаУчета			- Структура со счетами учета
//		Комиссионный		- Булево
//
Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыКонтекста) Экспорт

	СведенияОНоменклатуре = Новый Структура();

	ИмяРеквизитаНоменклатурнаяГруппа = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаНоменклатурнаяГруппаНоменклатуры();

	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, 
																		"Наименование, НаименованиеПолное, Артикул
																		|СтавкаНДС, Код, ЕдиницаИзмерения, " 
																		+ ИмяРеквизитаНоменклатурнаяГруппа);

	//Добавим свойства номенклатуры
	СтавкаНДС = ?(ПараметрыКонтекста.Свойство("СтавкаНДС") И ЗначениеЗаполнено(ПараметрыКонтекста.СтавкаНДС), ПараметрыКонтекста.СтавкаНДС, РеквизитыНоменклатуры.СтавкаНДС);

	СведенияОНоменклатуре.Вставить("Номенклатура",         Номенклатура);
	СведенияОНоменклатуре.Вставить("Наименование",         ?(ПустаяСтрока(Номенклатура.НаименованиеПолное), РеквизитыНоменклатуры.Наименование, РеквизитыНоменклатуры.НаименованиеПолное));
	СведенияОНоменклатуре.Вставить("СтавкаНДС",            СтавкаНДС);
	СведенияОНоменклатуре.Вставить("ЕдиницаИзмерения",     РеквизитыНоменклатуры.ЕдиницаИзмерения);
	СведенияОНоменклатуре.Вставить("НоменклатурнаяГруппа", РеквизитыНоменклатуры[ИмяРеквизитаНоменклатурнаяГруппа]);
	СведенияОНоменклатуре.Вставить("Код",		           РеквизитыНоменклатуры.Код);
	СведенияОНоменклатуре.Вставить("Артикул",	           РеквизитыНоменклатуры.Артикул);
	СведенияОНоменклатуре.Вставить("Услуга",	           НоменклатураЯвляетсяУслугой(Номенклатура));

	//Определим цену номенклатуры
	ВалютаРегламентированногоУчета = ?(ПараметрыКонтекста.Свойство("ВалютаРегламентированногоУчета"),
										ПараметрыКонтекста.ВалютаРегламентированногоУчета,
										Константы.ВалютаРегламентированногоУчета.Получить());
	ТипЦен = Неопределено;
	Если НЕ ПараметрыКонтекста.Свойство("ТипЦен", ТипЦен) Тогда
		СведенияОНоменклатуре.Вставить("Цена", 0);
	ИначеЕсли НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		СведенияОНоменклатуре.Вставить("Цена", 0);
	Иначе
		СведенияОНоменклатуре.Вставить("Цена", 0);
	КонецЕсли;

	СведенияОНоменклатуре.Вставить("ЦенаВРознице", 0);

	//Определим счета учета номенклатуры
	Склад = ?(ПараметрыКонтекста.Свойство("Склад"), ПараметрыКонтекста.Склад, Неопределено);
	СведенияОНоменклатуре.Вставить("СчетаУчета", ПолучитьСчетаУчетаНоменклатуры(ПараметрыКонтекста.Организация, Номенклатура, Склад));
	СведенияОНоменклатуре.Вставить("Комиссионный", ЗначениеЗаполнено(СведенияОНоменклатуре.СчетаУчета.СчетУчета) И СведенияОНоменклатуре.СчетаУчета.СчетУчета.Забалансовый);

	Возврат СведенияОНоменклатуре;

КонецФункции

// Функция возвращает Истина, если переданная номенклатура является услугой.
//
Функция НоменклатураЯвляетсяУслугой(Номенклатура) Экспорт

	// В БРУ услуги отдельно не выделяются.
	Возврат ЗначениеЗаполнено(Номенклатура)
		И НЕ Номенклатура.ЭтоГруппа
	 	И (Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
	 		ИЛИ Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа); 

КонецФункции // НоменклатураЯвляетсяУслугой()

// Функция возвращает выражение на языке запросов для получения признака услуги 
// от поля типа Номенклатура.
//
Функция ТекстЗапросаЭтоУслуга(ПолеНоменклатура) Экспорт

	// В БРУ услуги отдельно не выделяются.
	Возврат СтрЗаменить("ВЫБОР 
						|	КОГДА ВЫРАЗИТЬ(ПолеНоменклатура КАК Справочник.Номенклатура).ТипНоменклатуры В
						|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
						|		ТОГДА ИСТИНА
						|	ИНАЧЕ ЛОЖЬ
						|КОНЕЦ", "ПолеНоменклатура", ПолеНоменклатура);

КонецФункции // ТекстЗапросаЭтоУслуга

//-- НЕ УТ

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОПРЕДЕЛЕНИЯ ТИПОВ

//Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	СтрокаТипов = "СправочникСсылка.БанковскиеСчетаОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов";
	
	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), СтрокаТипов);
	
КонецФункции // ТипыСвязанныеСОрганизацией()

//++ НЕ УТ

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ОРГАНИЗАЦИИ

// Функция возвращает значение головной организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	РеквизитГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Возврат ?(ЗначениеЗаполнено(РеквизитГоловнаяОрганизация), РеквизитГоловнаяОрганизация, Организация);
	
КонецФункции // ГоловнаяОрганизация()

// Функция возвращает признак того, что организация является обособленным
//подразделением выделенным на отдельный баланс
//
Функция ОбособленноеПодразделение(Организация) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение");
	
КонецФункции // ОбособленноеПодразделение()

// Формирует список головных организаций предприятия
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка,
	                      |	Организации.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
						  |ГДЕ
						  |	Организации.ГоловнаяОрганизация = Организации.Ссылка
						  | ИЛИ Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

// Формирует список обособленных структурных подразделений организации
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

//-- НЕ УТ

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты, лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты, требуется для единообразия с БРУ и УП
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчета - основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо, Валюта);
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта);
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()

//++ НЕ УТ

// Функция СтруктураОрганизации возвращает структуру с реквизитами организации
//
Функция СтруктураОрганизации(Организация) Экспорт

	СписокОП = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Скопировать();
	СписокОП.Добавить(Организация.Ссылка);

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация, ОбособленноеПодразделение");
	
	СписокГО = Новый СписокЗначений;
	СписокГО.Добавить(РеквизитыОрганизации.ГоловнаяОрганизация);
	
	Если РеквизитыОрганизации.ОбособленноеПодразделение Тогда
		ТипОрганизации = "ОП";
	Иначе
		ТипОрганизации = "Простая";
	КонецЕсли;
		
	СвойстваОрганизации = Новый Структура("Тип, Организация, ГоловнаяОрганизация", ТипОрганизации, СписокОП, СписокГО);
	
	Возврат СвойстваОрганизации;
	
КонецФункции // СтруктураОрганизации()

//-- НЕ УТ

// Возвращает перечень (массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// В перечень входят только те организации, данные по которым доступны текущему пользователю.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

КонецФункции

// Функция строит текст запроса для получения наименования организации для печатных форм.
//
Функция ТекстЗапросаВариантНаименованияОрганизацииДляПечатныхФорм(ПолеОрганизация) Экспорт

	Возврат СтрЗаменить("Организация.НаименованиеПолное",
						"Организация",
						ПолеОрганизация);

КонецФункции // ТекстЗапросаВариантНаименованияОрганизацииДляПечатныхФорм()

//++ НЕ УТ


//-- НЕ УТ

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ ИЛИ КОНТРАГЕНТЕ

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  Период - дата, на которую выбираются сведения о ЮрФизЛице.
//  БанковскийСчет - банковский счет, реквизиты которого выводятся.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, Период = '20200101', Знач БанковскийСчет = Неопределено) Экспорт

	Возврат ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, Период, Истина, БанковскийСчет);

КонецФункции // СведенияОЮрФизЛице()

// Функция возвращает ссылку на вид контактной информации EMAILКонтрагента.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации - ссылка на вид контактной информации EMAILКонтрагента
//
Функция ВидКонтактнойИнформацииEMAILКонтрагента() Экспорт
	
	Возврат Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
	
КонецФункции


// Функция возвращает код организации (для юр/физ. лица)
//
// Параметры
//  СписокСведений - список значений со значениями параметров организации
//
// Возвращаемое значение:
//   Строка   – код ЕДРПОУ, если организация юр.лицо, код по ДРФО если физ.лицо
//
Функция ПолучитьКодОрганизации(СписокСведений) Экспорт

	Код = "";
	
	Если ТипЗнч(СписокСведений) = Тип("Структура") Тогда
		
		Если СписокСведений.Свойство("КодПоЕДРПОУ") Тогда
			
			Код = СписокСведений.КодПоЕДРПОУ;	
			
		КонецЕсли;
		
		// если в списке есть код по ДРФО, значит организация - физ.лицо.
		Если СписокСведений.Свойство("КодПоДРФО") Тогда
			
			Если НЕ ПустаяСтрока(СписокСведений.КодПоДРФО) Тогда
			
				Код = СписокСведений.КодПоДРФО;		
			
			КонецЕсли; 
			
		КонецЕсли;
		
	Иначе
		
		// странно, должна передаваться структура
		Код = СписокСведений;
		
	КонецЕсли;
	
	Возврат Код;
        
КонецФункции // ПолучитьКодОрганизации()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ПОДРАЗДЕЛЕНИЯ

// Функция возвращает ссылку на пустое подразделение.
//
Функция ПолучитьПустоеЗначениеПодразделения() Экспорт

	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();

КонецФункции // ПолучитьПустоеЗначениеПодразделения()

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры:
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(СписокСведений, Список, СПрефиксом);
	
КонецФункции // ОписаниеОрганизации()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ПОДРАЗДЕЛЕНИЯ

// Функция возвращает ссылку на пустое подразделение.
//
Функция ПустоеПодразделение() Экспорт

	Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()



// Функция возвращает Истина, если переданное подразделение может быть выбрано для 
// указанной организации.
//                         
Функция ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаВладелец = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
		Если ЗначениеЗаполнено(ИмяРеквизитаВладелец) Тогда
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаВладелец);
			Результат = (РеквизитыПодразделения[ИмяРеквизитаВладелец] = Организация);
		Иначе
			// Если для подразделения нет явно указанного владельца, то считаем, что любое подразделение может 
			// принадлежать любой организации.
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПодразделениеПринадлежитОрганизации()

//++ НЕ УТ

// Функция возвращает организацию, соответствующую переданному подразделению.
// Если передан параметр ТекущаяВыбраннаяОрганизация и его значение не противоречит 
// соответствию подразделения и организации, то возвращает значение параметра ТекущаяВыбраннаяОрганизация.
//
Функция ОрганизацияПодразделения(Подразделение, ТекущаяВыбраннаяОрганизация = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
		// Если нет явно заданного владельца, то оставляем текущую организацию.
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
	Если ЗначениеЗаполнено(ТекущаяВыбраннаяОрганизация) 
		И РеквизитыПодразделения[ИмяРеквизитаОрганизации] = ТекущаяВыбраннаяОрганизация Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПодразделения[ИмяРеквизитаОрганизации]) Тогда
		Возврат РеквизитыПодразделения[ИмяРеквизитаОрганизации];
	Иначе
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;

КонецФункции // ОрганизацияПодразделения()

// Функция строит текст запроса для получения полного наименования подразделения.
//
Функция ТекстЗапросаПолноеНаименованиеПодразделения(ПолеПодразделение) Экспорт

	Возврат ПолеПодразделение + ".Наименование";

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ИНФОРМАЦИИ О ЦЕНАХ НОМЕНКЛАТУРЫ И СЕБЕСТОИМОСТИ СПИСАНИЯ

//Функция возвращает соответствие Номенклатура - Цена (в гривнах)
//в функцию передаются параметры цены - Тип (вид) цен, период (дата), валюта, курс и кратность
//номенклатура передается как массив
//
//Полученное значение используется для определения учетных цен (не цен продажи)
//
Функция ПодготовитьСоответствиеНоменклатураЦена(СтруктураПараметров) Экспорт
	
	Период       = СтруктураПараметров.Период;
	ТипЦен       = СтруктураПараметров.ТипЦен;
	Валюта       = СтруктураПараметров.Валюта;
	Курс         = СтруктураПараметров.Курс;
	Кратность    = СтруктураПараметров.Кратность;
	Номенклатура = СтруктураПараметров.Номенклатура;

	СоответствиеНоменклатураЦена = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&Номенклатура)
	|				И ВидЦены = &ТипЦен) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалютСрезПоследних.Валюта";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦенаНоменклатуры = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
			Выборка.Валюта,	Валюта, 
			Выборка.Курс, Выборка.Кратность,
			Курс, Кратность);

		СоответствиеНоменклатураЦена.Вставить(Выборка.Номенклатура, ЦенаНоменклатуры);
		
	КонецЦикла;

	Возврат СоответствиеНоменклатураЦена;

КонецФункции // ПодготовитьСоответствиеНоменклатураЦена()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЧЕТОВ УЧЕТА ПО УМОЛЧАНИЮ

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач Договор) Экспорт

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	Результат = Новый Структура;

	Результат.Вставить("СчетРасчетов", 	ПустойСчет);
	Результат.Вставить("СчетАвансов", 	ПустойСчет);
	Результат.Вставить("СчетРасчетовПокупателя", 	ПустойСчет);
	Результат.Вставить("СчетАвансовПокупателя", 	ПустойСчет);
	Результат.Вставить("СчетРасчетовПоПретензиям", 	ПустойСчет);
	Результат.Вставить("СчетРасчетовСКомитентом", 	ПустойСчет);
	Результат.Вставить("СчетУчетаТары", 			ПустойСчет);
	Результат.Вставить("СчетУчетаТарыПокупателя", 	ПустойСчет);

	
	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Склад		        - место хранения, по которому определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//  Дата                - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения (Патент, ЕНВД)
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено, Дата = Неопределено, ОсобыйПорядокНалогообложения = Ложь) Экспорт

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();

	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("СчетУчета", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаЯвляетсяЗабалансовым", Ложь);
	СтруктураВозврата.Вставить("СчетУчетаНДС", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаНДСПродажи", 	ПустойСчет);
	СтруктураВозврата.Вставить("СчетНДСТаможни", 		ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаДавСырья", 	ПустойСчет);
	СтруктураВозврата.Вставить("СчетПередачи", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетУчетаДоп", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетПередачиЗаб", 		ПустойСчет);
	СтруктураВозврата.Вставить("СчетДоходов", 			ПустойСчет);
	СтруктураВозврата.Вставить("СчетРасходов", 			ПустойСчет);
	СтруктураВозврата.Вставить("Субконто1", 			Неопределено);
	СтруктураВозврата.Вставить("Субконто2", 			Неопределено);
	СтруктураВозврата.Вставить("Субконто3", 			Неопределено);

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

// Функция возвращает счета учета по выбранному объекту строительства.
//
// Параметры:
//  Организация - организация, по которой выполняется поиск
//  Объект      - объект строительства, по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура, содержащая счета учета объекта строительства
// 
Функция СчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	Результат = Новый Структура("СчетУчета, СчетУчетаНДС");
	
	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Результат.СчетУчета 	= ПустойСчет;
	Результат.СчетУчетаНДС 	= ПустойСчет;
	

	Возврат Результат;

КонецФункции //СчетаУчетаОбъектовСтроительства()

// Функция возвращает массив счетов, подлежащих переоценке.
//
Функция СчетаПодлежащиеПереоценке() Экспорт
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции // СчетаПодлежащиеПереоценке()


//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ И УСТАНОВКИ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

//-- НЕ УТ

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;

	Если НастройкаВРег = ВРег("ОсновнаяОрганизация") Тогда
		Возврат Справочники.Организации.ОрганизацияПоУмолчанию();
	ИначеЕсли НастройкаВРег = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		ПустоеЗначение = ПустоеПодразделение();
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойСклад") Тогда
		ПустоеЗначение = Справочники.Склады.ПустаяСсылка();
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("РабочаяДата") Тогда
		// Для совместимости с предыдущими версиями.
		Возврат ОбщегоНазначения.РабочаяДатаПользователя(Пользователь);
	ИначеЕсли НастройкаВРег = ВРег("Подпись") Тогда
		ПустоеЗначение = НоваяПодпись();
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, Пользователь);

	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);

КонецФункции // ПолучитьЗначениеПоУмолчанию()

//++ НЕ УТ

// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки
//  Значение     - значение настройки
//  Пользователь - СправочникСсылка.Пользователи - текущий пользователь программы, для которого устанавливается настройка
//
// Возвращаемое значение:
//  Нет
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновнаяОрганизация")
		ИЛИ ВРег(Настройка) = ВРег("ОсновноеПодразделениеОрганизации")
		ИЛИ ВРег(Настройка) = ВРег("ОсновнойСклад") Тогда

		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, Пользователь);

	КонецЕсли;

КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ АНАЛИТИКИ ПЛАНА СЧЕТОВ

// Установка типов значений субконто, связанных с именами реквизитов
//
// Параметры:
//  СвязанныеСубконто  - Соответствие - ключ - имя реквизита, значение - описание типов связанных значений субконто
//
Процедура УстановитьТипыСвязанныхСубконто(СвязанныеСубконто) Экспорт
	
	ТипыСубконто = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора();
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, Документы.ТипВсеСсылки().Типы());
	СвязанныеСубконто.Вставить("Контрагент", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("ДоговорКонтрагента", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("Номенклатура", ТипыСубконто);
	
КонецПроцедуры

//-- НЕ УТ

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ПЕРСОНАЛЬНЫХ НАСТРОЕК ЭЛЕКТРОННОЙ ПОЧТЫ

Функция НоваяПодпись()
	
	Подпись = НСтр("ru='С уважением%1';uk='З повагою%1'");
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	ДанныеПользователя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АвторизованныйПользователь, "Наименование, Служебный");
	Если ДанныеПользователя.Служебный Тогда
		ПредставлениеПользователя = ".";
		
	Иначе
		ПредставлениеПользователя = ", " + ДанныеПользователя.Наименование + ".";
		
	КонецЕсли;
	
	Подпись = СтрШаблон(Подпись, ПредставлениеПользователя);
	
	Возврат Подпись;
	
КонецФункции
