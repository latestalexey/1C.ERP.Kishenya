////////////////////////////////////////////////////////////////////////////////
// ОУП: Процедуры подсистемы оперативного учета производства
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФормированиеДвижений

// Процедура формирования движений по регистру "Распоряжения на выпуск продукции".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРаспоряженияНаВыпускПродукции(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРаспоряженияНаВыпускПродукции;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = Движения.РаспоряженияНаВыпускПродукции;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Трудозатраты к оформлению".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьТрудозатратыКОформлению(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТрудозатратыКОформлению;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.ТрудозатратыКОформлению;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Трудозатраты производства".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьЗаказыНаПроизводствоСпецификации(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаПроизводствоСпецификации;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.ЗаказыНаПроизводствоСпецификации;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Заказы на производство трудозатраты".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьЗаказыНаПроизводствоТрудозатраты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаПроизводствоТрудозатраты;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.ЗаказыНаПроизводствоТрудозатраты;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Аналоги в производстве".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьАналогиВПроизводстве(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаАналогиВПроизводстве;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.АналогиВПроизводстве;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьПотребностьВМатериалахВПроизводстве(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностьВМатериалахВПроизводстве;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПотребностьВМатериалахВПроизводстве.Записывать = Истина;
	Движения.ПотребностьВМатериалахВПроизводстве.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Операции маршрутов производства".
//
Процедура ОтразитьОперацииМаршрутовПроизводства(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОперацииМаршрутовПроизводства;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.ОперацииМаршрутовПроизводства;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Состояния рабочих центров".
//
Процедура ОтразитьСостоянияРабочихЦентров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянияРабочихЦентров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.СостоянияРабочихЦентров;
	Набор.Записывать = Истина;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеКлючевымиВидамиРабочихЦентров

// Формирует данные по ключевым видам рабочих центров
//
// Параметры:
//  СписокПодразделений				- Массив - подразделения по которому, необходимо получить данные
//									- СправочникСсылка.СтруктураПредприятия - подразделение, по которому необходимо получить данные
//  ДатаНачала						- Дата - начало периода в котором необходимо получить данные
//  ДатаОкончания					- Дата - окончание периода, в котором необходимо получить данные
//	ДобавитьИнформациюОРасписании	- Булево - Истина, если нужно добавить информацию о расписании
//
// Возвращаемое значение:
//   ТаблицаЗначений	- содержит данные по ключевым видам рабочих центров
//
Функция КлючевыеВидыРабочихЦентров(СписокПодразделений, ДатаНачала, ДатаОкончания, ДобавитьИнформациюОРасписании = Ложь) Экспорт

	// Нужно получить список видов РЦ, период в который они работают, их загрузку и информацию о расписании
	// 1. Период работы хранится в регистре ЭтапыПроизводства 
	// 2. Виды рабочих центров работа которых запланирована в эти периоды хранится в заказе на производство
	
	// Информация о расписании может быть следующей
	// 1. Расписание не составлено:
	//		- по всем этапам нет расписания
	// 2. Расписание составлено частично:
	//		- сформированы не все маршрутные листы
	//		- или не по всем маршрутным листам есть расписание
	// 3. Расписание составлено полностью:
	//		- сформированы все маршрутные листы
	//		- и по всем маршрутным листам есть расписание
	
	// Маршрутные листы сформированы полностью если
	// 		- нет остатка по ресурсу Запланировано регистра ГрафикЭтаповПроизводства
	//		  если маршрутный лист не проведен то считается, что он сформирован
	
	Если ТипЗнч(СписокПодразделений) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ОтборСписокПодразделений = Новый Массив;
		Если НЕ СписокПодразделений.Пустая() Тогда
			ОтборСписокПодразделений.Добавить(СписокПодразделений);
		КонецЕсли; 
	Иначе
		ОтборСписокПодразделений = СписокПодразделений;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//0
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступностьВидовРабочихЦентров.Распоряжение,
	|	ДоступностьВидовРабочихЦентров.КодСтрокиПродукция,
	|	ДоступностьВидовРабочихЦентров.КодСтрокиЭтапыГрафик,
	|	ДоступностьВидовРабочихЦентров.Подразделение КАК Подразделение,
	|	ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ДоступностьВидовРабочихЦентров.ДатаИнтервала КАК ДатаИнтервала,
	|	ВЫБОР 
	|		КОГДА ДоступностьВидовРабочихЦентров.Подразделение.УправлениеМаршрутнымиЛистами = ЗНАЧЕНИЕ(Перечисление.УправлениеМаршрутнымиЛистами.МетодикаББВ)
	|				И ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра.ПланироватьРаботуРабочихЦентров
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СоставлятьРасписание
	|
	|ПОМЕСТИТЬ ПериодыРаботыВидовРабочихЦентров
	|ИЗ
	|	РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
	|
	|ГДЕ
	|	&УсловиеОтбораПериодовРаботы
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступностьВидовРабочихЦентров.Распоряжение,
	|	ДоступностьВидовРабочихЦентров.КодСтрокиПродукция,
	|	ДоступностьВидовРабочихЦентров.КодСтрокиЭтапыГрафик,
	|	ДоступностьВидовРабочихЦентров.Подразделение,
	|	ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ДоступностьВидовРабочихЦентров.ДатаИнтервала
	|
	|ИМЕЮЩИЕ СУММА(ДоступностьВидовРабочихЦентров.Занято) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРабочегоЦентра,
	|	ДатаИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала КАК ДатаИнтервала,
	|	СУММА(ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоВидуРЦ) КАК ДоступностьПоВидуРЦ,
	|	СУММА(ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоРЦ) КАК ДоступностьПоРЦ,
	|	СУММА(ДоступностьВидовРабочихЦентровОбороты.Занято) КАК Занято
	|ПОМЕСТИТЬ ДоступностьВидовРабочихЦентровОбороты
	|ИЗ
	// Нельзя брать обороты т.к. МЛ уменьшают занятость
	|	ПериодыРаботыВидовРабочихЦентров КАК ПериодыРаботыВидовРабочихЦентров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентровОбороты
	|		ПО ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра = ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра
	|			И ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала = ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала
	|ГДЕ
	|	НЕ ДоступностьВидовРабочихЦентровОбороты.ЭтоДвижениеМаршрутногоЛиста
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра,
	|	ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРабочегоЦентра,
	|	ДатаИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//2
	|ВЫБРАТЬ
	|	ПериодыРаботыВидовРабочихЦентров.Период КАК Период,
	|	ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|	ПериодыРаботыВидовРабочихЦентров.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ПериодыРаботыВидовРабочихЦентров.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА КлючевыеВидыРабочихЦентров.ВидРабочегоЦентра ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РучноеРедактированиеКлючевого,
	|	ЕСТЬNULL(КлючевыеВидыРабочихЦентров.Ключевой, ЛОЖЬ) КАК КлючевойРедактирование,
	|	ВЫБОР 
	|		КОГДА ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|				И ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоВидуРЦ <> 0
	|			ТОГДА ДоступностьВидовРабочихЦентровОбороты.Занято * 100 / ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоВидуРЦ
	|		КОГДА НЕ ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|				И ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоРЦ <> 0
	|			ТОГДА ДоступностьВидовРабочихЦентровОбороты.Занято * 100 / ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоРЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Загрузка,
	|	ДоступностьВидовРабочихЦентровОбороты.Занято / 3600 КАК ОбъемРабот,
	|	ВЫБОР 
	|		КОГДА ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра.ВводитьДоступностьДляВидаРЦ
	|			ТОГДА ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоВидуРЦ
	|		ИНАЧЕ ДоступностьВидовРабочихЦентровОбороты.ДоступностьПоРЦ
	|	КОНЕЦ / 3600 КАК Доступно,
	|	ПериодыРаботыВидовРабочихЦентров.СоставлятьРасписание КАК СоставлятьРасписание
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала КАК Период,
	|		ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
	|		ПериодыРаботыВидовРабочихЦентров.Подразделение КАК Подразделение,
	|		ПериодыРаботыВидовРабочихЦентров.СоставлятьРасписание КАК СоставлятьРасписание
	|	ИЗ
	|		ПериодыРаботыВидовРабочихЦентров КАК ПериодыРаботыВидовРабочихЦентров) КАК ПериодыРаботыВидовРабочихЦентров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступностьВидовРабочихЦентровОбороты КАК ДоступностьВидовРабочихЦентровОбороты
	|		ПО (ДоступностьВидовРабочихЦентровОбороты.ДатаИнтервала = ПериодыРаботыВидовРабочихЦентров.Период)
	|			И (ДоступностьВидовРабочихЦентровОбороты.ВидРабочегоЦентра = ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючевыеВидыРабочихЦентров КАК КлючевыеВидыРабочихЦентров
	|		ПО (КлючевыеВидыРабочихЦентров.ПериодРаботы = ПериодыРаботыВидовРабочихЦентров.Период)
	|			И (КлючевыеВидыРабочихЦентров.ВидРабочегоЦентра = ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра)
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//3
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала КАК Период,
	|	ПериодыРаботыВидовРабочихЦентров.КодСтрокиЭтапыГрафик,
	|	ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра,
	|	ПериодыРаботыВидовРабочихЦентров.Распоряжение
	|ИЗ
	|	ПериодыРаботыВидовРабочихЦентров КАК ПериодыРаботыВидовРабочихЦентров";
	
	Если ДобавитьИнформациюОРасписании Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//4
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Период КАК Период,
		|	ВложенныйЗапрос.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.ЗапланированоОстаток = 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК МаршрутныеЛистыЗапланированы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала КАК Период,
		|		ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|		СУММА(ЕСТЬNULL(ГрафикЭтаповПроизводства.Запланировано, 0)) КАК ЗапланированоОстаток
		|	ИЗ 
		|		ПериодыРаботыВидовРабочихЦентров КАК ПериодыРаботыВидовРабочихЦентров
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикЭтаповПроизводства КАК ГрафикЭтаповПроизводства
		|			ПО (ГрафикЭтаповПроизводства.Распоряжение = ПериодыРаботыВидовРабочихЦентров.Распоряжение)
		|				И (ГрафикЭтаповПроизводства.КодСтрокиПродукция = ПериодыРаботыВидовРабочихЦентров.КодСтрокиПродукция)
		|				И (ГрафикЭтаповПроизводства.КодСтрокиЭтапыГрафик = ПериодыРаботыВидовРабочихЦентров.КодСтрокиЭтапыГрафик)
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала,
		|		ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		//5
		|ВЫБРАТЬ
		|	ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала КАК Период,
		|	ПериодыРаботыВидовРабочихЦентров.ВидРабочегоЦентра,
		|	ЕСТЬNULL(РасписаниеРаботыРабочихЦентров.РабочийЦентр, Неопределено) КАК РабочийЦентрПоРасписанию,
		|	ВЫБОР
		|		КОГДА ПериодыРаботыВидовРабочихЦентров.СоставлятьРасписание
		|			И (МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
		|				ИЛИ НЕ РасписаниеРаботыРабочихЦентров.МаршрутныйЛист ЕСТЬ NULL)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяРасписание,
		|	ВЫБОР
		|		КОГДА НЕ РасписаниеРаботыРабочихЦентров.МаршрутныйЛист ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьРасписание,
		|	ВЫБОР
		|		КОГДА НЕ МаршрутныйЛистПроизводства.Ссылка ЕСТЬ NULL
		|			И МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
		|			И РасписаниеРаботыРабочихЦентров.МаршрутныйЛист ЕСТЬ NULL
		|			И ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала <= &ТекущаяДата
		|				ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Просрочено,
		|	ВЫБОР
		|		КОГДА НЕ МаршрутныйЛистПроизводства.Ссылка ЕСТЬ NULL
		|			И РасписаниеРаботыРабочихЦентров.МаршрутныйЛист ЕСТЬ NULL
		|			И ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала > &ТекущаяДата
		|			И МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
		|				ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Запланировать
		|ИЗ
		|	ПериодыРаботыВидовРабочихЦентров КАК ПериодыРаботыВидовРабочихЦентров
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства КАК МаршрутныйЛистПроизводства
		|		ПО (МаршрутныйЛистПроизводства.Распоряжение = ПериодыРаботыВидовРабочихЦентров.Распоряжение)
		|			И (МаршрутныйЛистПроизводства.КодСтроки = ПериодыРаботыВидовРабочихЦентров.КодСтрокиПродукция)
		|			И (МаршрутныйЛистПроизводства.КодСтрокиЭтапыГрафик = ПериодыРаботыВидовРабочихЦентров.КодСтрокиЭтапыГрафик)
		|			И (МаршрутныйЛистПроизводства.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Отменен))
		|			И (МаршрутныйЛистПроизводства.Проведен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
		|		ПО (РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = МаршрутныйЛистПроизводства.Ссылка)
		|			И (РасписаниеРаботыРабочихЦентров.ДатаИнтервала = ПериодыРаботыВидовРабочихЦентров.ДатаИнтервала)
		|			И (РасписаниеРаботыРабочихЦентров.Начало <> ДАТАВРЕМЯ(1,1,1))";
	КонецЕсли;
	
	// Параметры
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	// Отборы
	
	УсловиеОтбораПериодовРаботы = "";
	
	// ДатаИнтервала
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		УсловиеОтбораПериодовРаботы = ?(ЗначениеЗаполнено(УсловиеОтбораПериодовРаботы), УсловиеОтбораПериодовРаботы + " И ", "")
			+ "ДоступностьВидовРабочихЦентров.ДатаИнтервала МЕЖДУ &Начало И &Окончание";
		
		Запрос.УстановитьПараметр("Начало", ДатаНачала);
		Запрос.УстановитьПараметр("Окончание", ДатаОкончания);
		
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		
		УсловиеОтбораПериодовРаботы = ?(ЗначениеЗаполнено(УсловиеОтбораПериодовРаботы), УсловиеОтбораПериодовРаботы + " И ", "")
			+ "ДоступностьВидовРабочихЦентров.ДатаИнтервала >= &Начало";
		
		Запрос.УстановитьПараметр("Начало", ДатаНачала);
		
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		УсловиеОтбораПериодовРаботы = ?(ЗначениеЗаполнено(УсловиеОтбораПериодовРаботы), УсловиеОтбораПериодовРаботы + " И ", "")
			+ "ДоступностьВидовРабочихЦентров.ДатаИнтервала <= &Окончание";
		
		Запрос.УстановитьПараметр("Окончание", ДатаОкончания);
		
	КонецЕсли;
	
	// Подразделение
	
	Если ОтборСписокПодразделений.Количество() <> 0 Тогда
		
		УсловиеОтбораПериодовРаботы = ?(ЗначениеЗаполнено(УсловиеОтбораПериодовРаботы), УсловиеОтбораПериодовРаботы + " И ", "")
			+ "ДоступностьВидовРабочихЦентров.Подразделение В (&СписокПодразделений)";
		
		Запрос.УстановитьПараметр("СписокПодразделений", ОтборСписокПодразделений);
		
	КонецЕсли;
	
	// ЭтоДвижениеЗаказаНаПроизводство
	
	УсловиеОтбораПериодовРаботы = ?(ЗначениеЗаполнено(УсловиеОтбораПериодовРаботы), УсловиеОтбораПериодовРаботы + " И ", "")
		+ "ДоступностьВидовРабочихЦентров.ЭтоДвижениеЗаказаНаПроизводство"; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораПериодовРаботы", УсловиеОтбораПериодовРаботы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	КлючевыеВидыРабочихЦентров = Результат[2].Выгрузить();
	КлючевыеВидыРабочихЦентров.Колонки.Добавить("Свободно", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,1)));
	КлючевыеВидыРабочихЦентров.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	КлючевыеВидыРабочихЦентров.Колонки.Добавить("СписокЗависимыхВидовРЦ", Новый ОписаниеТипов("СписокЗначений"));
	КлючевыеВидыРабочихЦентров.Колонки.Добавить("Ключевой", Новый ОписаниеТипов("Булево"));
	КлючевыеВидыРабочихЦентров.Колонки.Добавить("КлючевойПоУмолчанию", Новый ОписаниеТипов("Булево"));
	
	ЗаполнитьСписокКлючевыхВидовРабочихЦентров(КлючевыеВидыРабочихЦентров, Результат[3].Выгрузить());
	
	Если ДобавитьИнформациюОРасписании Тогда
		КлючевыеВидыРабочихЦентров.Колонки.Добавить("РабочийЦентрПоРасписанию", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
		КлючевыеВидыРабочихЦентров.Колонки.Добавить("РасписаниеРаботы", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияРасписанияРабочихЦентров"));
		КлючевыеВидыРабочихЦентров.Колонки.Добавить("МаршрутныеЛистыЗапланированы", Новый ОписаниеТипов("Булево"));
		КлючевыеВидыРабочихЦентров.Колонки.Добавить("Просрочено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		КлючевыеВидыРабочихЦентров.Колонки.Добавить("Запланировать", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		КлючевыеВидыРабочихЦентров.Колонки.Добавить("ТребуетсяРасписание", Новый ОписаниеТипов("Булево"));
		
		ЗаполнитьСостояниеРасписания(КлючевыеВидыРабочихЦентров, Результат[4].Выгрузить(), Результат[5].Выгрузить());
	КонецЕсли;

	Возврат КлючевыеВидыРабочихЦентров;
	
КонецФункции

#КонецОбласти

#Область РасписаниеРабочихЦентров

// Формирует представление интервала планирования в виде строки
//
// Параметры:
//  Период					- Дата - начало интервала планирования
//  ИнтервалПланирования	- ПеречислениеСсылка.ТочностьГрафикаПроизводства - Интервал планирования
//
// Возвращаемое значение:
//   Строка   - представление интервала планирования
//
Функция ИнтервалПланированияСтрокой(Период, ИнтервалПланирования) Экспорт

	ПериодСтрока = "";
	
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		
		ПериодСтрока = Формат(Период, "ДФ=dd.MM.yyyy") + " (" 
												+ Формат(Период, "ДФ=ЧЧ:00") + " - " 
												+ Формат(Период + 3600, "ДФ=ЧЧ:00") + ")";
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.День Тогда
		ПериодСтрока = Формат(Период, "ДФ='dd MMMM (ddd)'");
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Неделя Тогда
		ПериодСтрока = Формат(Период, "ДФ=dd.MM.yy") + " - " + Формат(КонецНедели(Период), "ДФ=dd.MM.yy");
		
	ИначеЕсли ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Месяц Тогда
		ПериодСтрока = Формат(Период, "ДФ='MMMM yyyy'");
	КонецЕсли;

	Возврат ПериодСтрока; 
	
КонецФункции

// Формирует график работы вида рабочего центра
//
// Параметры:
//  ВидРабочегоЦентра	- СправочникСсылка.ВидыРабочихЦентров - Вид рабочего центра для которого нужно получить график работы
//  Начало				- Дата - Начало интервала
//  Окончание			- Дата - Окончание интервала
//
// Возвращаемое значение:
//   ТаблицаЗначений   - График работы рабочего центра
//
Функция ГрафикРаботыВидаРабочегоЦентра(ВидРабочегоЦентра, Начало, Окончание) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РабочиеЦентры.Ссылка КАК РабочийЦентр,
	|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
	|	ВЫБОР
	|		КОГДА РабочиеЦентры.ВидРабочегоЦентра.ПараллельнаяЗагрузка
	|			ТОГДА РабочиеЦентры.МаксимальнаяЗагрузка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Загрузка,
	|	ДоступностьРабочихЦентровИнтервалы.ДатаГрафика КАК ДатаГрафика,
	|	ДоступностьРабочихЦентровИнтервалы.ВремяНачала КАК ВремяНачала,
	|	ВЫБОР
	|		КОГДА ДоступностьРабочихЦентровИнтервалы.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0) 
	|		ИНАЧЕ
	|			ДоступностьРабочихЦентровИнтервалы.ВремяОкончания 
	|	КОНЕЦ КАК ВремяОкончания
	|ИЗ
	|	Справочник.РабочиеЦентры КАК РабочиеЦентры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоступностьРабочихЦентров.Интервалы КАК ДоступностьРабочихЦентровИнтервалы
	|		ПО (ДоступностьРабочихЦентровИнтервалы.РабочийЦентр = РабочиеЦентры.Ссылка)
	|			И (ДоступностьРабочихЦентровИнтервалы.ДатаГрафика МЕЖДУ &Начало И &Окончание)
	|			И (ДоступностьРабочихЦентровИнтервалы.Ссылка.Проведен)
	|ГДЕ
	|	РабочиеЦентры.ВидРабочегоЦентра = &ВидРабочегоЦентра
	|	И НЕ РабочиеЦентры.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаГрафика,
	|	ВремяНачала";
	
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
	Запрос.УстановитьПараметр("Начало",            НачалоДня(Начало));
	Запрос.УстановитьПараметр("Окончание",         Окончание);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ГрафикРаботы = Новый ТаблицаЗначений;
	ГрафикРаботы.Колонки.Добавить("РабочийЦентр", Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры"));
	ГрафикРаботы.Колонки.Добавить("Начало",       Новый ОписаниеТипов("Дата"));
	ГрафикРаботы.Колонки.Добавить("Окончание",    Новый ОписаниеТипов("Дата"));
	ГрафикРаботы.Колонки.Добавить("Загрузка",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3, ДопустимыйЗнак.Неотрицательный))); 
	
	Пока Выборка.Следующий() Цикл
	
		НачалоГрафика    = Выборка.ДатаГрафика 
							+ Час(Выборка.ВремяНачала) * 3600 
							+ Минута(Выборка.ВремяНачала) * 60;
		
		ОкончаниеГрафика = Выборка.ДатаГрафика 
							+ Час(Выборка.ВремяОкончания) * 3600 
							+ Минута(Выборка.ВремяОкончания) * 60;
							
							
		Если НачалоГрафика > Окончание ИЛИ ОкончаниеГрафика < Начало Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоГрафика    = Макс(НачалоГрафика, Начало);
		ОкончаниеГрафика = Мин(?(КонецМинуты(Выборка.ВремяОкончания) = '00010101235959', КонецМинуты(ОкончаниеГрафика), ОкончаниеГрафика - 1), Окончание);
		
		Если НачалоГрафика <= ОкончаниеГрафика Тогда
			Если Выборка.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
				
				// При интервале Час график нужно разбить на часы
				НачалоИнтервала = НачалоГрафика;
				Пока НачалоИнтервала <= ОкончаниеГрафика Цикл
					
					ОкончаниеИнтервала = Мин(НачалоИнтервала + 3600 - 1, ОкончаниеГрафика);
					
					СтрокаГрафик = ГрафикРаботы.Добавить();
					СтрокаГрафик.РабочийЦентр = Выборка.РабочийЦентр;
					СтрокаГрафик.Загрузка     = Выборка.Загрузка;
					СтрокаГрафик.Начало       = НачалоИнтервала;
					СтрокаГрафик.Окончание    = ОкончаниеИнтервала;
					
					НачалоИнтервала = НачалоИнтервала + 3600;
					
				КонецЦикла;
				
			Иначе
				
				СтрокаГрафик = ГрафикРаботы.Добавить();
				СтрокаГрафик.РабочийЦентр = Выборка.РабочийЦентр;
				СтрокаГрафик.Загрузка     = Выборка.Загрузка;
				СтрокаГрафик.Начало       = НачалоГрафика;
				СтрокаГрафик.Окончание    = ОкончаниеГрафика;
				
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;

	Возврат ГрафикРаботы;
	
КонецФункции

// Формирует расписание выполнения маршрутных листов на выбранном рабочем центре
//  Расписание формируется с учетом порядка маршрутных листов и графика работы
//
// Параметры:
//  Расписание						- ТаблицаЗначений, ДанныеФормыКоллекция, Массив		- расписание в котором будет рассчитан период и объем работы
//  ГрафикРаботы					- ТаблицаЗначений, ДанныеФормыКоллекция				- график работы
//  РабочийЦентр					- СправочникСсылка.РабочиеЦентры					- рабочий центр для которого формируется расписание
//  ВидРабочегоЦентра				- СправочникСсылка.ВидыРабочихЦентров				- вид рабочего центра для которого формируется расписание
//  ИнтервалПланирования			- ПеречислениеСсылка.ТочностьГрафикаПроизводства	- интервал планирования												 - 
//  Окончание						- Дата												- начало работы будет не позже этой даты
//  ВариантНаладкиПрошлогоПериода	- СправочникСсылка.ВариантыНаладки					- вариант наладки прошлого периода
//  Коэффициент						- Число												- коэффициент который нужно применить для модификации времени работы
//  ГрафикРаботыСУчетомРасписания	- ТаблицаЗначений									- график работы с учетом занятого времени по данным расписания
// 
// Возвращаемое значение:
//  Булево - Истина, если расписание полностью рассчитано
//
Функция СформироватьРасписаниеВыполненияМаршрутныхЛистов(
	Расписание, 
	ГрафикРаботы, 
	РабочийЦентр,
	ВидРабочегоЦентра, 
	ИнтервалПланирования,
	Окончание, 
	ВариантНаладкиПрошлогоПериода, 
	Коэффициент = Неопределено,
	ГрафикРаботыСУчетомРасписания = Неопределено) Экспорт

	// Получим список строк для которых нужно рассчитать период и очистим период работы
	Для каждого СтрокаРасписание Из Расписание Цикл
		Если НЕ СтрокаРасписание.РасписаниеВведеноВручную 
			И СтрокаРасписание.ДоступноИзменение
			И СтрокаРасписание.РассчитатьРасписание Тогда
			
			СтрокаРасписание.Начало    = '000101010000';
			СтрокаРасписание.Окончание = '000101010000';
			СтрокаРасписание.ЗанятостьВИнтервалах.Очистить();
		КонецЕсли; 
	КонецЦикла;
	
	ГрафикРаботыСУчетомРасписания = ГрафикРаботы.Скопировать();
	ГрафикРаботыСУчетомРасписания.Колонки.Добавить("УжеЗанятоМЛ", Новый ОписаниеТипов("Булево"));
	
	Если ГрафикРаботыСУчетомРасписания.Количество() = 0 Тогда
		
		Для каждого СтрокаРасписание Из Расписание Цикл
			Если НЕ СтрокаРасписание.ДоступноИзменение 
				ИЛИ НЕ СтрокаРасписание.РассчитатьРасписание 
				ИЛИ СтрокаРасписание.РасписаниеВведеноВручную Тогда
				Продолжить;
			КонецЕсли;
		
			СтрокаРасписание.ЕстьПроблема = Истина;
			ТекстПроблемы = НСтр("ru='Не удалось определить период, т.к. для рабочего центра не указан график работы.';uk='Не вдалося визначити період, т. к. для робочого центру не зазначений графік роботи.'");
			СтрокаРасписание.ПроблемыПриФормированииРасписания = ТекстПроблемы;
		КонецЦикла; 
		
		Возврат Ложь;
	КонецЕсли;
	
	ПорядокСтрокиСКоторойНачинаетсяРасчет = Неопределено;
	Для каждого СтрокаРасписание Из Расписание Цикл
		
		// Расчитаем объем работ если расписание введено вручную
		Если СтрокаРасписание.РасписаниеВведеноВручную И СтрокаРасписание.ОбъемРабот = 0 Тогда
			ВремяРаботы = ОперативныйУчетПроизводстваКлиентСервер.ДлительностьПериодаСУчетомГрафикаРаботы(
																СтрокаРасписание.Начало, 
																СтрокаРасписание.Окончание, 
																ГрафикРаботы);
			СтрокаРасписание.ОбъемРабот = ВремяРаботы / 3600;
																
			СтрокаРасписание.ВремяРаботыИзмененоПользователем = (ВремяРаботы <> СтрокаРасписание.ВремяРаботы);
		КонецЕсли; 
		
		Если СтрокаРасписание.РассчитатьРасписание 
			И ПорядокСтрокиСКоторойНачинаетсяРасчет = Неопределено Тогда
			ПорядокСтрокиСКоторойНачинаетсяРасчет = СтрокаРасписание.ПорядокСтроки;
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Определим дату с которой начинается планирование
	Начало = '000101010000';
	Если ПорядокСтрокиСКоторойНачинаетсяРасчет <> Неопределено Тогда
		Для каждого СтрокаРасписание Из Расписание Цикл
			Если СтрокаРасписание.ПорядокСтроки >= ПорядокСтрокиСКоторойНачинаетсяРасчет Тогда
				Прервать;
			КонецЕсли;
			Начало = Макс(СтрокаРасписание.Начало, Начало);
		КонецЦикла;
	КонецЕсли;
	ДатаНачалаПланирования = Макс(ГрафикРаботыСУчетомРасписания[0].Начало, Начало); 
	
	// Исключим из графика расписание введенное вручную 
	// и расписание, которое нельзя изменять (строки, которые не вошли в выбранный период)
	СписокСтрокРасписания = Новый Массив;
	Для каждого СтрокаРасписание Из Расписание Цикл
		Если СтрокаРасписание.РасписаниеВведеноВручную 
			ИЛИ НЕ СтрокаРасписание.ДоступноИзменение 
			ИЛИ НЕ СтрокаРасписание.РассчитатьРасписание Тогда
			
			СписокСтрокРасписания.Добавить(СтрокаРасписание);
		КонецЕсли;
	КонецЦикла;
	ЗанятьВремяВГрафикеРаботы(ГрафикРаботыСУчетомРасписания, СписокСтрокРасписания);
	
	Если ГрафикРаботыСУчетомРасписания.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Содержит время когда рабочий центр может выполнить МЛ
	ДанныеГрафиковРаботыРЦ = Новый Соответствие;
	ДанныеГрафиковРаботыРЦ.Вставить(РабочийЦентр, ГрафикРаботыСУчетомРасписания);
	
	РасписаниеРассчитано = Истина;
	
	ТекущийВариантНаладки = ВариантНаладкиПрошлогоПериода;
	НастройкаПереналадки = РегистрыСведений.ДлительностьПереналадки.НастройкаПереналадки(ВидРабочегоЦентра);
	
	РеквизитыВидаРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидРабочегоЦентра, "ПараллельнаяЗагрузка,ВариантЗагрузки");
	Если РеквизитыВидаРЦ.ПараллельнаяЗагрузка Тогда
		ВариантЗагрузки = РеквизитыВидаРЦ.ВариантЗагрузки;
	Иначе
		ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.ПустаяСсылка();
	КонецЕсли;
	
	ИндексПоследнейСтроки = Расписание.Количество() - 1;
	Для ИндексТекущейСтроки = 0 По ИндексПоследнейСтроки Цикл
		
		СтрокаРасписание = Расписание[ИндексТекущейСтроки];
		
		ВремяПереналадки = 0;
		Если ТекущийВариантНаладки <> СтрокаРасписание.ВариантНаладки 
			И ЗначениеЗаполнено(ТекущийВариантНаладки) Тогда
			
			ВремяПереналадки = ОперативныйУчетПроизводстваКлиентСервер.ВремяПереналадки(
											ТекущийВариантНаладки, 
											СтрокаРасписание.ВариантНаладки, 
											НастройкаПереналадки);
		КонецЕсли; 
		ТекущийВариантНаладки = СтрокаРасписание.ВариантНаладки;
		
		Если НЕ СтрокаРасписание.ДоступноИзменение 
			ИЛИ НЕ СтрокаРасписание.РассчитатьРасписание Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаРасписание.РасписаниеВведеноВручную Тогда
			
			Если СтрокаРасписание.ВремяРаботыИзмененоПользователем Тогда
				ИсходноеВремяРаботы = СтрокаРасписание.ОбъемРабот * 3600;
			Иначе	
				ИсходноеВремяРаботы = СтрокаРасписание.ВремяРаботы;
			КонецЕсли;
			
			Если Коэффициент <> Неопределено Тогда
				ИсходноеВремяРаботы = ИсходноеВремяРаботы * Коэффициент;
				НовыйОбъемРабот = ИсходноеВремяРаботы / 3600;				
			КонецЕсли;
			
			// Учтем время на переналадку
			СтрокаРасписание.ВремяПереналадки = ВремяПереналадки;
			СтрокаРасписание.ВремяПереналадкиВЧасах = СтрокаРасписание.ВремяПереналадки / 3600;
			
			ПараметрыРаботы = Новый Структура;
			ПараметрыРаботы.Вставить("ВремяРаботы", ИсходноеВремяРаботы);
			ПараметрыРаботы.Вставить("ВремяПереналадки", ВремяПереналадки);
			ПараметрыРаботы.Вставить("Загрузка", СтрокаРасписание.Загрузка);
			ПараметрыРаботы.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
			ПараметрыРаботы.Вставить("ВариантЗагрузки", ВариантЗагрузки);
			ПараметрыРаботы.Вставить("ПорядокСтроки", СтрокаРасписание.ПорядокСтроки);
			ПараметрыРаботы.Вставить("УчитыватьДоступность", Истина);
			
			ДанныеДляПолученияГрафика = Новый Структура;
			ДанныеДляПолученияГрафика.Вставить("РабочийЦентр",   СтрокаРасписание.РабочийЦентр);
			ДанныеДляПолученияГрафика.Вставить("Календарь",      Неопределено);
			ДанныеДляПолученияГрафика.Вставить("ДанныеГрафиков", ДанныеГрафиковРаботыРЦ);
			ДанныеДляПолученияГрафика.Вставить("ЗанятостьРЦ",    Неопределено);
			ДанныеДляПолученияГрафика.Вставить("Начало",         ДатаНачалаПланирования);
			ДанныеДляПолученияГрафика.Вставить("Окончание",      Окончание);
			
			ДанныеРасписания = ОпределитьПериодыВыполнения(
										ДатаНачалаПланирования, 
										ПараметрыРаботы, 
										ГрафикРаботыСУчетомРасписания, 
										ДанныеДляПолученияГрафика,
										СтрокаРасписание.Непрерывный,
										Окончание);
										
			СтрокаРасписание.Начало    = ДанныеРасписания.НачалоПериодаВыполнения;
			СтрокаРасписание.Окончание = ДанныеРасписания.ОкончаниеПериодаВыполнения;
			СтрокаРасписание.ВремяРаботыВРабочееВремя = ДанныеРасписания.ВремяРаботыВРабочееВремя;
			СтрокаРасписание.ВремяПереналадкиВРабочееВремя = ДанныеРасписания.ВремяПереналадкиВРабочееВремя;
			
			Если СтрокаРасписание.Начало <> '000101010000' И СтрокаРасписание.Окончание <> '000101010000' Тогда
				
				Если Коэффициент <> Неопределено Тогда
					// Нужно изменить объем работ, т.к. применялся коэффициент при расчете расписания
					СтрокаРасписание.ОбъемРабот = НовыйОбъемРабот;
					СтрокаРасписание.ВремяРаботыИзмененоПользователем = Истина;
				КонецЕсли;				
				
				СтрокаРасписание.ЕстьПроблема = Ложь;
				СтрокаРасписание.ПроблемыПриФормированииРасписания = "";
				
				ЗанятостьВИнтервалах = ОпределитьЗанятостьВИнтервалах(ДанныеРасписания.ПериодыВыполнения, ИнтервалПланирования);
				СтрокаРасписание.ЗанятостьВИнтервалах.ЗагрузитьЗначения(ЗанятостьВИнтервалах);
				
				СписокСтрокРасписания = Новый Массив;
				СписокСтрокРасписания.Добавить(СтрокаРасписание);
				ЗанятьВремяВГрафикеРаботы(ГрафикРаботыСУчетомРасписания, СписокСтрокРасписания);
				
			Иначе
				
				РасписаниеРассчитано = Ложь;
				
				Если ДанныеРасписания.СписокПроблем.Количество() <> 0 Тогда
					ПроблемыПриФормированииРасписания = НСтр("ru='Не удалось определить период по следующим причинам:';uk='Не вдалося визначити період з наступних причин:'");
					Для каждого ТекстПроблемы Из ДанныеРасписания.СписокПроблем Цикл
						ПроблемыПриФормированииРасписания = ПроблемыПриФормированииРасписания 
															+ Символы.ПС
															+ " - " + ТекстПроблемы;
						
					КонецЦикла;
				Иначе
					ПроблемыПриФормированииРасписания = НСтр("ru='Не удалось определить период.';uk='Не вдалося визначити період.'");
				КонецЕсли;
				
				СтрокаРасписание.ЕстьПроблема = Истина;
				СтрокаРасписание.ПроблемыПриФормированииРасписания = ПроблемыПриФормированииРасписания;
				
			КонецЕсли; 
			
		Иначе
			
			// Период выполнения введен вручную пользователем
			
			Для каждого ЭлДанныеЗанятостиВИнтервале Из СтрокаРасписание.ЗанятостьВИнтервалах Цикл
				ДанныеЗанятостиВИнтервале = ЭлДанныеЗанятостиВИнтервале.Значение;
				Если ДанныеЗанятостиВИнтервале.ДатаИнтервала = СтрокаРасписание.ДатаИнтервала Тогда
					ДанныеЗанятостиВИнтервале.Начало = СтрокаРасписание.НачалоПриРучномВводеРасписания;
				КонецЕсли; 
			КонецЦикла; 
			
			ПериодыВыполнения = Новый Массив;
			ВремяПереналадкиВРабочееВремя = 0;
			
			// Определим дату начала переналадки
			Если ВремяПереналадки <> 0 Тогда
				НачалоНовое = ОпределитьДатуНачалаСУчетомГрафикаРаботы(
												СтрокаРасписание.НачалоПриРучномВводеРасписания-1, 
												СтрокаРасписание.ВремяПереналадки,
												СтрокаРасписание.РабочийЦентр,
												СтрокаРасписание.НачалоПриРучномВводеРасписания,
												ВремяПереналадкиВРабочееВремя,
												ПериодыВыполнения);
			Иначе
				НачалоНовое = СтрокаРасписание.НачалоПриРучномВводеРасписания;
			КонецЕсли;
			
			СтрокаРасписание.ВремяПереналадки = ВремяПереналадки;
			СтрокаРасписание.ВремяПереналадкиВЧасах = СтрокаРасписание.ВремяПереналадки / 3600;
			СтрокаРасписание.Начало = НачалоНовое;
			
			ЗанятостьВИнтервалах = ОпределитьЗанятостьВИнтервалах(ПериодыВыполнения, ИнтервалПланирования);
			Для каждого ДанныеЗанятостиВИнтервале Из ЗанятостьВИнтервалах Цикл
				Для каждого ЭлДанныеЗанятостиВИнтервалеВРасписании Из СтрокаРасписание.ЗанятостьВИнтервалах Цикл
					ДанныеЗанятостиВИнтервалеВРасписании = ЭлДанныеЗанятостиВИнтервалеВРасписании.Значение;
					Если ДанныеЗанятостиВИнтервалеВРасписании.ДатаИнтервала = ДанныеЗанятостиВИнтервале.ДатаИнтервала Тогда
						ДанныеЗанятостиВИнтервалеВРасписании.Начало = НачалоНовое;
						ДанныеЗанятостиВИнтервалеВРасписании.ВремяПереналадкиВРабочееВремя = ДанныеЗанятостиВИнтервалеВРасписании.ВремяПереналадкиВРабочееВремя;
						ДанныеЗанятостиВИнтервалеВРасписании.ВремяРаботыВРабочееВремя = ДанныеЗанятостиВИнтервалеВРасписании.ВремяРаботыВРабочееВремя;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаРасписание.Начало <> '000101010000' И СтрокаРасписание.Окончание <> '000101010000' Тогда
			// Следующий МЛ нужно планировать не раньше начала предыдущего
			ДатаНачалаПланирования = Макс(ДатаНачалаПланирования, СтрокаРасписание.Начало);
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат РасписаниеРассчитано;
	
КонецФункции

// Рассчитывает дату окончания с учетом графика работы рабочего центра
//
// Параметры:
//  Начало						- Дата - Начало работы
//  ВремяРаботы					- Число - Время работы в секундах
//  Непрерывный					- Булево - Допустимость прерывания выполнения
//  РабочийЦентр				- СправочникСсылка.РабочиеЦентры - Рабочий центр доступность которого нужно учесть
//  ВремяРаботыВРабочееВремя	- Число - Время работы в нерабочее время
//  ПериодыВыполнения			- Массив - содержит занятые периоды
//
// Возвращаемое значение:
//   Дата	- Дата окончания работы
//
Функция ОпределитьДатуОкончанияСУчетомГрафикаРаботы(Начало, ВремяРаботы, РабочийЦентр, ВремяРаботыВРабочееВремя = 0, ПериодыВыполнения = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(РабочийЦентр) Тогда
		// Без рабочего центра нельзя определить нерабочие периоды
		ВремяРаботыВРабочееВремя = 0;
		ПериодыВыполнения = Новый Массив;
		Возврат Начало + ?(ВремяРаботы <> 0, ВремяРаботы - 1, 0);
	КонецЕсли;
	
	// Содержит время когда рабочие центры могут выполнять операции
	ДанныеГрафиковРаботыРЦ = Новый Соответствие;
	
	ДанныеДляПолученияГрафика = Новый Структура;
	ДанныеДляПолученияГрафика.Вставить("РабочийЦентр",     РабочийЦентр);
	ДанныеДляПолученияГрафика.Вставить("ДанныеГрафиков",   ДанныеГрафиковРаботыРЦ);
	ДанныеДляПолученияГрафика.Вставить("ЗанятостьРЦ",      Неопределено);
	ДанныеДляПолученияГрафика.Вставить("Начало",           НачалоМесяца(Начало));
	ДанныеДляПолученияГрафика.Вставить("Окончание",        КонецМесяца(КонецМесяца(Начало + ВремяРаботы) + 1));
	
	ПараметрыРаботы = Новый Структура("ВремяРаботы,НачалоРаботы,УчитыватьДоступность", ВремяРаботы, Начало, Истина);
	
	ДанныеРасписания = ОпределитьПериодыВыполнения(
									Начало, 
									ПараметрыРаботы, 
									Неопределено, // График будет получен при расчете
									ДанныеДляПолученияГрафика, 
									Ложь);
												
	Если ДанныеРасписания.НачалоПериодаВыполнения = Начало Тогда
		ВремяРаботыВРабочееВремя = ДанныеРасписания.ВремяРаботыВРабочееВремя;
		ПериодыВыполнения = ДанныеРасписания.ПериодыВыполнения;
		Возврат ДанныеРасписания.ОкончаниеПериодаВыполнения;
	КонецЕсли; 												

	ВремяРаботыВРабочееВремя = 0;
	
	Возврат '000101010000';

КонецФункции

// Рассчитывает дату начала с учетом графика работы рабочего центра
//
// Параметры:
//  Окончание					- Дата - Окончание работы
//  ВремяРаботы					- Число - Время работы в секундах
//  Непрерывный					- Булево - Допустимость прерывания выполнения
//  РабочийЦентр				- СправочникСсылка.РабочиеЦентры - Рабочий центр доступность которого нужно учесть
//  НачалоПериодаПланирования	- Дата - Начало периода в котором выполняется планирование
//  ВремяРаботыВРабочееВремя	- Число - Время работы в нерабочее время
//  ПериодыВыполнения			- Массив - содержит занятые периоды
//
// Возвращаемое значение:
//   Дата	- Дата начала работы
//
Функция ОпределитьДатуНачалаСУчетомГрафикаРаботы(Окончание, ВремяРаботы, РабочийЦентр, НачалоПериодаПланирования, ВремяРаботыВРабочееВремя = 0, ПериодыВыполнения = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(РабочийЦентр) Тогда
		// Без рабочего центра нельзя определить нерабочие периоды
		ВремяРаботыВРабочееВремя = 0;
		Возврат Окончание - ?(ВремяРаботы <> 0, ВремяРаботы - 1, 0);
	КонецЕсли;
	
	// Содержит время когда рабочие центры могут выполнять операции
	ДанныеГрафиковРаботыРЦ = Новый Соответствие;
	
	ДанныеДляПолученияГрафика = Новый Структура;
	ДанныеДляПолученияГрафика.Вставить("РабочийЦентр",     РабочийЦентр);
	ДанныеДляПолученияГрафика.Вставить("ДанныеГрафиков",   ДанныеГрафиковРаботыРЦ);
	ДанныеДляПолученияГрафика.Вставить("ЗанятостьРЦ",      Неопределено);
	ДанныеДляПолученияГрафика.Вставить("Начало",           НачалоМесяца(НачалоПериодаПланирования));
	ДанныеДляПолученияГрафика.Вставить("Окончание",        КонецМесяца(Окончание));
	
	ПараметрыРаботы = Новый Структура("ВремяРаботы,НачалоРаботы,УчитыватьДоступность", ВремяРаботы, Окончание, Истина);
	
	ДанныеРасписания = ОпределитьПериодыВыполнения(
									Окончание, 
									ПараметрыРаботы, 
									Неопределено, // График будет получен при расчете
									ДанныеДляПолученияГрафика, 
									Ложь);
	
	Если ДанныеРасписания.ОкончаниеПериодаВыполнения = Окончание Тогда
		ВремяРаботыВРабочееВремя = ДанныеРасписания.ВремяРаботыВРабочееВремя;
		ПериодыВыполнения = ДанныеРасписания.ПериодыВыполнения;
		Возврат ДанныеРасписания.НачалоПериодаВыполнения;
	КонецЕсли; 												
	
	ВремяРаботыВРабочееВремя = 0;

	Возврат '000101010000';
	
КонецФункции

// Определяет сколько требуется сформировать маршрутных листов
//
// Параметры:
//  Подразделение					- СправочникСсылка.СтруктураПредприятия - подразделение для которого требуется сформировать МЛ
//  СписокРаспоряжений				- Массив - заказы на производство
//  СписокЭтапов					- Массив - этапы графика
//	УправлениеМаршрутнымиЛистами 	- ПеречислениеСсылка.УправлениеМаршрутнымиЛистами - ограничение по методике управления МЛ
//
// Возвращаемое значение:
//   Число   - сколько маршрутных листов нужно сформировать
//
Функция ТребуетсяСформироватьМаршрутныеЛисты(Подразделение, СписокРаспоряжений = Неопределено, СписокЭтапов = Неопределено, УправлениеМаршрутнымиЛистами = Неопределено) Экспорт

	ДанныеМаршрутныхЛистов = ОперативныйУчетПроизводстваВызовСервера.ДанныеДляФормированияМаршрутныхЛистов(Подразделение, СписокРаспоряжений, СписокЭтапов, УправлениеМаршрутнымиЛистами);
	
	Возврат ДанныеМаршрутныхЛистов.Количество();

КонецФункции

#КонецОбласти

#Область ПооперационноеПланирование

// Инициирует расчет пооперационного расписания в соответствии с параметрами конкретной модели планирования.
//
// Параметры:
//  ПараметрыПланирования	 - Структура - см. функцию Обработка.ПооперационноеПланирование.ИнициализироватьПараметрыПланирования.
//  АдресХранилища			 - УникальныйИдентификатор - адрес временного хранилища, в которое будет
//                                    					 помещен результат работы метода.
//
Процедура РассчитатьПооперационноеРасписаниеМоделиВФоновомРежиме(ПараметрыПланирования, АдресХранилища) Экспорт
	
	Обработки.ПооперационноеПланирование.РассчитатьРасписаниеМоделиВФоновомРежиме(ПараметрыПланирования, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Выполняет поиск и заполнение распоряжений в коллекции
//
// Параметры:
// 		Ссылка - ДокументСсылка.ВыпускПродукции - заполняемый документ
// 		КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначний - Таблица, в которой необходимо заполнить распоряжения
// 		Распоряжение - ДокументСсылка.МаршрутныйЛистПроизводства - Распоряжение, если не по всем распоряжениям
// 		Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, по которому выполняется подбор распоряжений
// 		НаправлениеВыпуска - ПеречислениеСсылка.ХозяйственныеОперации - Операция, определяет выпуск на склад или в подразделение
//
Процедура ПривязатьСтрокиВыпускаКРаспоряжениям(Ссылка, КоллекцияДанных, Распоряжение, Подразделение, НаправлениеВыпуска) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Склад КАК Склад,
	|	ТаблицаДокумента.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.Распоряжение КАК Распоряжение,
	|	Остатки.КодСтроки КАК КодСтроки,
	|	Остатки.КОформлениюОстаток КАК КоличествоКОформлению,
	|	Остатки.Распоряжение.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА Остатки.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Остатки.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ВЫБОР
	|		КОГДА Остатки.Склад ССЫЛКА Справочник.СтруктураПредприятия
	|			ТОГДА Остатки.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаВыпускПродукции.Остатки(
	|			,
	|			(&ПоЛюбымРаспоряжениям
	|				ИЛИ &Распоряжение = Распоряжение)
	|				И Подразделение = &Подразделение
	|				И ВЫБОР
	|					КОГДА &НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад)
	|						ТОГДА Склад ССЫЛКА Справочник.Склады
	|					ИНАЧЕ Склад ССЫЛКА Справочник.СтруктураПредприятия
	|				КОНЕЦ
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура,
	|						Т.Характеристика
	|					ИЗ
	|						ТаблицаДокумента КАК Т)) КАК Остатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Движения.Номенклатура,
	|	Движения.Характеристика,
	|	Движения.Распоряжение,
	|	Движения.КодСтроки,
	|	Движения.КОформлению,
	|	Движения.Распоряжение.Дата,
	|	ВЫБОР
	|		КОГДА Движения.Склад ССЫЛКА Справочник.Склады
	|			ТОГДА Движения.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Движения.Склад ССЫЛКА Справочник.СтруктураПредприятия
	|			ТОГДА Движения.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаВыпускПродукции КАК Движения
	|ГДЕ
	|	Движения.Регистратор = &Ссылка
	|	И (&ПоЛюбымРаспоряжениям
	|			ИЛИ &Распоряжение = Движения.Распоряжение)
	|	И Движения.Подразделение = &Подразделение
	|	И ВЫБОР
	|			КОГДА &НаправлениеВыпуска = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад)
	|				ТОГДА Движения.Склад ССЫЛКА Справочник.Склады
	|			ИНАЧЕ Движения.Склад ССЫЛКА Справочник.СтруктураПредприятия
	|		КОНЕЦ
	|	И (Движения.Номенклатура, Движения.Характеристика) В
	|			(ВЫБРАТЬ
	|				Т.Номенклатура,
	|				Т.Характеристика
	|			ИЗ
	|				ТаблицаДокумента КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыходныеИзделия.Ссылка КАК Распоряжение,
	|	ВыходныеИзделия.КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается) КАК ТипСтоимости,
	|	ВыходныеИзделия.ДоляСтоимости,
	|	ВыходныеИзделия.Упаковка
	|ПОМЕСТИТЬ ВТИзделияРаспоряжений
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ВыходныеИзделия
	|ГДЕ
	|	ВыходныеИзделия.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Распоряжение
	|			ИЗ
	|				ВТОстатки КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратныеОтходы.Ссылка,
	|	ВозвратныеОтходы.КодСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная),
	|	0,
	|	ВозвратныеОтходы.Упаковка
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.ВозвратныеОтходы КАК ВозвратныеОтходы
	|ГДЕ
	|	ВозвратныеОтходы.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Распоряжение
	|			ИЗ
	|				ВТОстатки КАК Т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОстатки.Номенклатура КАК Номенклатура,
	|	ВТОстатки.Характеристика КАК Характеристика,
	|	ВТОстатки.Распоряжение КАК Распоряжение,
	|	ВТОстатки.КодСтроки КАК КодСтроки,
	|	ВТОстатки.Распоряжение.Дата КАК Дата,
	|	ВТИзделияРаспоряжений.ТипСтоимости КАК ТипСтоимости,
	|	ВТИзделияРаспоряжений.ДоляСтоимости КАК ДоляСтоимости,
	|	ВТИзделияРаспоряжений.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ВТИзделияРаспоряжений.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент,
	|	ВТОстатки.КоличествоКОформлению КАК КоличествоКОформлению,
	|	ВТОстатки.Склад,
	|	ВТОстатки.Подразделение
	|ИЗ
	|	ВТОстатки КАК ВТОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзделияРаспоряжений КАК ВТИзделияРаспоряжений
	|		ПО ВТОстатки.КодСтроки = ВТИзделияРаспоряжений.КодСтроки
	|			И ВТОстатки.Распоряжение = ВТИзделияРаспоряжений.Распоряжение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВТИзделияРаспоряжений.Упаковка",
			"ВТОстатки.Номенклатура"));
	
	ТаблицаДокумента = КоллекцияДанных.Выгрузить(, "Номенклатура, Характеристика, Склад, Подразделение");
	ТаблицаДокумента.Свернуть("Номенклатура, Характеристика, Склад, Подразделение");
	
	Запрос.УстановитьПараметр("ТаблицаДокумента",     ТаблицаДокумента);
	Запрос.УстановитьПараметр("Ссылка",               Ссылка);
	Запрос.УстановитьПараметр("Распоряжение",         Распоряжение);
	Запрос.УстановитьПараметр("ПоЛюбымРаспоряжениям", Не ЗначениеЗаполнено(Распоряжение));
	Запрос.УстановитьПараметр("Подразделение",        Подразделение);
	Запрос.УстановитьПараметр("НаправлениеВыпуска",   НаправлениеВыпуска);
	
	ОтборНоменклатураХарактеристика             = Новый Структура("Номенклатура, Характеристика, Склад, Подразделение");
	ОтборНоменклатураХарактеристикаКоличество   = Новый Структура("Номенклатура, Характеристика, Склад, Подразделение, КоличествоКОформлению");
	ОтборКРаспределению                         = Новый Структура("Номенклатура, Характеристика, Склад, Подразделение, Распоряжение");
	ОтборКРаспределению.Распоряжение            = Документы.МаршрутныйЛистПроизводства.ПустаяСсылка();
	
	ТаблицаДетальныхЗаписей = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Комбинация Из ТаблицаДокумента Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборНоменклатураХарактеристика, Комбинация);
		ЗаполнитьЗначенияСвойств(ОтборНоменклатураХарактеристикаКоличество, Комбинация);
		ЗаполнитьЗначенияСвойств(ОтборКРаспределению, Комбинация);
		
		НайденныеСтроки = КоллекцияДанных.НайтиСтроки(ОтборКРаспределению);
		
		Пока НайденныеСтроки.Количество() > 0 Цикл
			
			РаспределяемаяСтрока = НайденныеСтроки[0];
			
			Распределить = РаспределяемаяСтрока.Количество;
			ОтборНоменклатураХарактеристикаКоличество.КоличествоКОформлению = Распределить;
			
			// Попытка найти строку с равным количеством.
			ДетальныеЗаписи = ТаблицаДетальныхЗаписей.НайтиСтроки(ОтборНоменклатураХарактеристикаКоличество);
			
			Если ДетальныеЗаписи.Количество() = 0 Тогда
				
				// Если подходящей строки нет, берем с любым количеством.
				ДетальныеЗаписи = ТаблицаДетальныхЗаписей.НайтиСтроки(ОтборНоменклатураХарактеристика);
				
				Если ДетальныеЗаписи.Количество() = 0 Тогда
					
					// Если вообще подходящих строк нет, распределяемую строку из набора удаляем.
					КоллекцияДанных.Удалить(РаспределяемаяСтрока);
					НайденныеСтроки = КоллекцияДанных.НайтиСтроки(ОтборКРаспределению);
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДетальнаяЗапись = ДетальныеЗаписи[0];
			
			Количество = Мин(ДетальнаяЗапись.КоличествоКОформлению, Распределить);
			
			ДетальнаяЗапись.КоличествоКОформлению = ДетальнаяЗапись.КоличествоКОформлению - Количество;
			
			РаспределяемаяСтрока.Количество = Количество;
			РаспределяемаяСтрока.КоличествоУпаковок = Количество / ДетальнаяЗапись.Коэффициент;
			РаспределяемаяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			РаспределяемаяСтрока.Спецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
			РаспределяемаяСтрока.КодОшибки = 0;
			РаспределяемаяСтрока.ПобочныйВыход = Ложь;
			ЗаполнитьЗначенияСвойств(РаспределяемаяСтрока, ДетальнаяЗапись, "Распоряжение, КодСтроки, ТипСтоимости, Упаковка");
			
			Распределить = Распределить - Количество;
			
			Если Распределить > 0 Тогда
				
				НоваяСтрока = КоллекцияДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РаспределяемаяСтрока, "Номенклатура, Характеристика, Упаковка, Цена");
				НоваяСтрока.Количество = Распределить;
				
			КонецЕсли;
			
			НайденныеСтроки = КоллекцияДанных.НайтиСтроки(ОтборКРаспределению);
			
			Если ДетальнаяЗапись.КоличествоКОформлению = 0 Тогда
				ТаблицаДетальныхЗаписей.Удалить(ДетальнаяЗапись);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список для выбора времени
//
// Параметры:
//  СписокВыбора	- СписокЗначений - список в который нужно добавить время
//  Начало			- Число - час, с которого нужно начать заполнение
//  Окончание		- Число - час, по который нужно заполнить
//  ККонцуЧаса		- Булево - истина, если дату нужно привести к концу часа 
//
Процедура ЗаполнитьВыборВремени(СписокВыбора, Начало = 0, Окончание = 23, ККонцуЧаса = Ложь) Экспорт

	ТекущийГод = Год(ТекущаяДата());
	Для Сч = Начало По Окончание Цикл
		ДатаВыбора = Дата(ТекущийГод, 1, 1, Сч, 0, 0);
		Если ККонцуЧаса Тогда
			ДатаВыбора = КонецЧаса(ДатаВыбора);
		КонецЕсли; 
		СписокВыбора.Добавить(ДатаВыбора, Формат(ДатаВыбора, "ДФ=ЧЧ:мм"));
	КонецЦикла; 
	
КонецПроцедуры

// Определяет интервал планирования работы вида рабочего центра
//
// Параметры:
//  ВидРабочегоЦентра	- СправочникСсылка.ВидыРабочихЦентров - Вид рабочего центра для которого нужно интервал планирования
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТочностьГрафикаПроизводства
//
Функция ИнтервалПланированияРаботыВидаРабочегоЦентра(ВидРабочегоЦентра) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыРабочихЦентров.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования
	|ИЗ
	|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
	|ГДЕ
	|	ВидыРабочихЦентров.Ссылка = &ВидРабочегоЦентра";
	
	Запрос.УстановитьПараметр("ВидРабочегоЦентра", ВидРабочегоЦентра);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ИнтервалПланирования;

КонецФункции

// Преобразует исходный цвет в формат RGB
//
// Параметры:
//  ИсходныйЦвет - Цвет - Цвет который нужно преобразовать
//
// Возвращаемое значение:
//   Цвет   - цвет в формате RGB
//
Функция ЦветВФорматеRGB(ИсходныйЦвет) Экспорт

	Если ИсходныйЦвет.Вид = ВидЦвета.Абсолютный Тогда
		
		Возврат ИсходныйЦвет;
		
	ИначеЕсли ИсходныйЦвет.Вид = ВидЦвета.WebЦвет Тогда
	
		СоответствиеЦветов = Новый Соответствие;
		СоответствиеЦветов.Вставить(WebЦвета.Аквамарин, Новый Цвет(127, 255, 212));
		СоответствиеЦветов.Вставить(WebЦвета.АкварельноСиний, Новый Цвет(240, 248, 255));
		СоответствиеЦветов.Вставить(WebЦвета.АнтикБелый, Новый Цвет(250, 235, 215));
		СоответствиеЦветов.Вставить(WebЦвета.Бежевый, Новый Цвет(245, 245, 220));
		СоответствиеЦветов.Вставить(WebЦвета.Белоснежный, Новый Цвет(255, 250, 250));
		СоответствиеЦветов.Вставить(WebЦвета.Белый, Новый Цвет(255, 255, 255));
		СоответствиеЦветов.Вставить(WebЦвета.Бирюзовый, Новый Цвет(64, 224, 208));
		СоответствиеЦветов.Вставить(WebЦвета.БледноБирюзовый, Новый Цвет(175, 238, 238));
		СоответствиеЦветов.Вставить(WebЦвета.БледноЗеленый, Новый Цвет(152, 251, 152));
		СоответствиеЦветов.Вставить(WebЦвета.БледноЗолотистый, Новый Цвет(238, 232, 170));
		СоответствиеЦветов.Вставить(WebЦвета.БледноКрасноФиолетовый, Новый Цвет(219, 112, 147));
		СоответствиеЦветов.Вставить(WebЦвета.БледноЛиловый, Новый Цвет(230, 230, 250));
		СоответствиеЦветов.Вставить(WebЦвета.БледноМиндальный, Новый Цвет(255, 235, 205));
		СоответствиеЦветов.Вставить(WebЦвета.БледноСиреневый, Новый Цвет(216, 191, 216));
		СоответствиеЦветов.Вставить(WebЦвета.Васильковый, Новый Цвет(100, 149, 237));
		СоответствиеЦветов.Вставить(WebЦвета.ВесеннеЗеленый, Новый Цвет(0, 255, 127));
		СоответствиеЦветов.Вставить(WebЦвета.Голубой, Новый Цвет(173, 216, 230));
		СоответствиеЦветов.Вставить(WebЦвета.ГолубойСКраснымОттенком, Новый Цвет(255, 240, 245));
		СоответствиеЦветов.Вставить(WebЦвета.ГолубойСоСтальнымОттенком, Новый Цвет(176, 196, 222));
		СоответствиеЦветов.Вставить(WebЦвета.ГрифельноСерый, Новый Цвет(112, 128, 144));
		СоответствиеЦветов.Вставить(WebЦвета.ГрифельноСиний, Новый Цвет(106, 90, 205));
		СоответствиеЦветов.Вставить(WebЦвета.Древесный, Новый Цвет(222, 184, 184));
		СоответствиеЦветов.Вставить(WebЦвета.ДымчатоБелый, Новый Цвет(245, 245, 245));
		СоответствиеЦветов.Вставить(WebЦвета.ЖелтоЗеленый, Новый Цвет(154, 205, 50));
		СоответствиеЦветов.Вставить(WebЦвета.Желтый, Новый Цвет(255, 255, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗамшаСветлый, Новый Цвет(255, 228, 181));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленаяЛужайка, Новый Цвет(124, 252, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленоватоЖелтый, Новый Цвет(127, 255, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленоватоЛимонный, Новый Цвет(0, 255, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленоЖелтый, Новый Цвет(173, 255, 47));
		СоответствиеЦветов.Вставить(WebЦвета.Зеленый, Новый Цвет(0, 255, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ЗеленыйЛес, Новый Цвет(34, 139, 34));
		СоответствиеЦветов.Вставить(WebЦвета.Золотистый, Новый Цвет(218, 165, 32));
		СоответствиеЦветов.Вставить(WebЦвета.Золотой, Новый Цвет(255, 215, 0));
		СоответствиеЦветов.Вставить(WebЦвета.Индиго, Новый Цвет(75, 0, 130));
		СоответствиеЦветов.Вставить(WebЦвета.Киноварь, Новый Цвет(205, 92, 92));
		СоответствиеЦветов.Вставить(WebЦвета.Кирпичный, Новый Цвет(178, 34, 34));
		СоответствиеЦветов.Вставить(WebЦвета.КожаноКоричневый, Новый Цвет(139, 69, 19));
		СоответствиеЦветов.Вставить(WebЦвета.Коралловый, Новый Цвет(255, 127, 80));
		СоответствиеЦветов.Вставить(WebЦвета.Коричневый, Новый Цвет(165, 42, 42));
		СоответствиеЦветов.Вставить(WebЦвета.КоролевскиГолубой, Новый Цвет(65, 105, 225));
		СоответствиеЦветов.Вставить(WebЦвета.КрасноФиолетовый, Новый Цвет(208, 32, 144));
		СоответствиеЦветов.Вставить(WebЦвета.Красный, Новый Цвет(255, 0, 0));
		СоответствиеЦветов.Вставить(WebЦвета.Кремовый, Новый Цвет(255, 251, 240));
		СоответствиеЦветов.Вставить(WebЦвета.Лазурный, Новый Цвет(240, 255, 255));
		СоответствиеЦветов.Вставить(WebЦвета.ЛимонноЗеленый, Новый Цвет(50, 205, 50));
		СоответствиеЦветов.Вставить(WebЦвета.Лимонный, Новый Цвет(255, 250, 205));
		СоответствиеЦветов.Вставить(WebЦвета.Лосось, Новый Цвет(250, 128, 114));
		СоответствиеЦветов.Вставить(WebЦвета.ЛососьСветлый, Новый Цвет(255, 160, 122));
		СоответствиеЦветов.Вставить(WebЦвета.ЛососьТемный, Новый Цвет(233, 150, 122));
		СоответствиеЦветов.Вставить(WebЦвета.Льняной, Новый Цвет(250, 240, 230));
		СоответствиеЦветов.Вставить(WebЦвета.Малиновый, Новый Цвет(220, 20, 60));
		СоответствиеЦветов.Вставить(WebЦвета.МятныйКрем, Новый Цвет(245, 255, 250));
		СоответствиеЦветов.Вставить(WebЦвета.НавахоБелый, Новый Цвет(255, 222, 173));
		СоответствиеЦветов.Вставить(WebЦвета.НасыщенноНебесноГолубой, Новый Цвет(0, 191, 255));
		СоответствиеЦветов.Вставить(WebЦвета.НасыщенноРозовый, Новый Цвет(255, 20, 147));
		СоответствиеЦветов.Вставить(WebЦвета.НебесноГолубой, Новый Цвет(135, 206, 235));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноАквамариновый, Новый Цвет(102, 205, 170));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноБирюзовый, Новый Цвет(72, 209, 204));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноВесеннеЗеленый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноГрифельноСиний, Новый Цвет(123, 104, 238));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноЗеленый, Новый Цвет(192, 220, 192));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноКоричневый, Новый Цвет(205, 133, 63));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноПурпурный, Новый Цвет(147, 112, 219));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноСерый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноСиний, Новый Цвет(0, 0, 205));
		СоответствиеЦветов.Вставить(WebЦвета.НейтральноФиолетовоКрасный, Новый Цвет(199, 21, 133));
		СоответствиеЦветов.Вставить(WebЦвета.Оливковый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ОранжевоКрасный, Новый Цвет(255, 69, 0));
		СоответствиеЦветов.Вставить(WebЦвета.Оранжевый, Новый Цвет(255, 165, 0));
		СоответствиеЦветов.Вставить(WebЦвета.Орхидея, Новый Цвет(218, 112, 214));
		СоответствиеЦветов.Вставить(WebЦвета.ОрхидеяНейтральный, Новый Цвет(186, 85, 211));
		СоответствиеЦветов.Вставить(WebЦвета.ОрхидеяТемный, Новый Цвет(153, 50, 204));
		СоответствиеЦветов.Вставить(WebЦвета.Охра, Новый Цвет(160, 82, 45));
		СоответствиеЦветов.Вставить(WebЦвета.Перламутровый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Персиковый, Новый Цвет(255, 218, 185));
		СоответствиеЦветов.Вставить(WebЦвета.ПесочноКоричневый, Новый Цвет(244, 164, 96));
		СоответствиеЦветов.Вставить(WebЦвета.ПолночноСиний, Новый Цвет(25, 25, 112));
		СоответствиеЦветов.Вставить(WebЦвета.ПризрачноБелый, Новый Цвет(248, 248, 255));
		СоответствиеЦветов.Вставить(WebЦвета.Пурпурный, Новый Цвет(160, 32, 240));
		СоответствиеЦветов.Вставить(WebЦвета.Пшеничный, Новый Цвет(245, 222, 179));
		СоответствиеЦветов.Вставить(WebЦвета.РозовоКоричневый, Новый Цвет(188, 143, 143));
		СоответствиеЦветов.Вставить(WebЦвета.Розовый, Новый Цвет(255, 192, 203));
		СоответствиеЦветов.Вставить(WebЦвета.Роса, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.РыжеватоКоричневый, Новый Цвет(210, 180, 140));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоГрифельноСерый, Новый Цвет(119, 136, 153));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоГрифельноСиний, Новый Цвет(132, 112, 255));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоЖелтый, Новый Цвет(255, 255, 224));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоЖелтыйЗолотистый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.СветлоЗеленый, Новый Цвет(144, 238, 144));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоЗолотистый, Новый Цвет(238, 221, 130));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоКоралловый, Новый Цвет(240, 128, 128));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоКоричневый, Новый Цвет(255, 228, 196));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоНебесноГолубой, Новый Цвет(135, 206, 250));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоРозовый, Новый Цвет(255, 182, 193));
		СоответствиеЦветов.Вставить(WebЦвета.СветлоСерый, Новый Цвет(211, 211, 211));
		СоответствиеЦветов.Вставить(WebЦвета.СеребристоСерый, Новый Цвет(220, 220, 220));
		СоответствиеЦветов.Вставить(WebЦвета.Серебряный, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.СероСиний, Новый Цвет(95, 158, 160));
		СоответствиеЦветов.Вставить(WebЦвета.Серый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.СинеСерый, Новый Цвет(30, 144, 255));
		СоответствиеЦветов.Вставить(WebЦвета.СинеФиолетовый, Новый Цвет(138, 43, 226));
		СоответствиеЦветов.Вставить(WebЦвета.Синий, Новый Цвет(0, 0, 255));
		СоответствиеЦветов.Вставить(WebЦвета.СинийСоСтальнымОттенком, Новый Цвет(70, 130, 180));
		СоответствиеЦветов.Вставить(WebЦвета.СинийСПороховымОттенком, Новый Цвет(176, 224, 230));
		СоответствиеЦветов.Вставить(WebЦвета.Сливовый, Новый Цвет(221, 160, 221));
		СоответствиеЦветов.Вставить(WebЦвета.СлоноваяКость, Новый Цвет(255, 255, 240));
		СоответствиеЦветов.Вставить(WebЦвета.СтароеКружево, Новый Цвет(253, 245, 230));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноБирюзовый, Новый Цвет(0, 206, 209));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноБордовый, Новый Цвет(176, 48, 96));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноГрифельноСерый, Новый Цвет(47, 79, 79));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноГрифельноСиний, Новый Цвет(72, 61, 139));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноЗеленый, Новый Цвет(0, 100, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноЗолотистый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ТемноКрасный, Новый Цвет(139, 0, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноОливковоЗеленый, Новый Цвет(85, 107, 47));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноОранжевый, Новый Цвет(255, 140, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноСерый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ТемноСиний, Новый Цвет(0, 0, 139));
		СоответствиеЦветов.Вставить(WebЦвета.ТемноФиолетовый, Новый Цвет(148, 0, 211));
		СоответствиеЦветов.Вставить(WebЦвета.ТеплоРозовый, Новый Цвет(255, 105, 180));
		СоответствиеЦветов.Вставить(WebЦвета.Томатный, Новый Цвет(255, 99, 71));
		СоответствиеЦветов.Вставить(WebЦвета.ТопленоеМолоко, Новый Цвет(255, 239, 213));
		СоответствиеЦветов.Вставить(WebЦвета.ТусклоОливковый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ТусклоРозовый, Новый Цвет(255, 228, 225));
		СоответствиеЦветов.Вставить(WebЦвета.ТусклоСерый, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Ультрамарин, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Фиолетовый, Новый Цвет(238, 130, 238));
		СоответствиеЦветов.Вставить(WebЦвета.Фуксин, Новый Цвет(255, 0, 255));
		СоответствиеЦветов.Вставить(WebЦвета.ФуксинТемный, Новый Цвет(139, 0, 139));
		СоответствиеЦветов.Вставить(WebЦвета.Фуксия, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Хаки, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ХакиТемный, Новый Цвет(189, 183, 107));
		СоответствиеЦветов.Вставить(WebЦвета.ЦветМорскойВолны, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ЦветМорскойВолныНейтральный, Новый Цвет(60, 179, 113));
		СоответствиеЦветов.Вставить(WebЦвета.ЦветМорскойВолныСветлый, Новый Цвет(32, 178, 170));
		СоответствиеЦветов.Вставить(WebЦвета.ЦветМорскойВолныТемный, Новый Цвет(143, 188, 143));
		СоответствиеЦветов.Вставить(WebЦвета.ЦветокБелый, Новый Цвет(255, 250, 240));
		СоответствиеЦветов.Вставить(WebЦвета.Циан, Новый Цвет(0, 255, 255));
		СоответствиеЦветов.Вставить(WebЦвета.ЦианАкварельный, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ЦианНейтральный, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.ЦианСветлый, Новый Цвет(224, 255, 255));
		СоответствиеЦветов.Вставить(WebЦвета.ЦианТемный, Новый Цвет(0, 139, 139));
		СоответствиеЦветов.Вставить(WebЦвета.Черный, Новый Цвет(0, 0, 0));
		СоответствиеЦветов.Вставить(WebЦвета.ШелковыйОттенок, Неопределено);
		СоответствиеЦветов.Вставить(WebЦвета.Шоколадный, Новый Цвет(210, 105, 30));
		
		Возврат СоответствиеЦветов.Получить(ИсходныйЦвет);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
 
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеКлючевымиВидамиРабочихЦентров

Процедура ЗаполнитьСписокКлючевыхВидовРабочихЦентров(КлючевыеВидыРабочихЦентров, ТаблицаЗависимостьВидовРЦ)

	КлючевыеВидыРабочихЦентров.Сортировать("Период,Загрузка Убыв,ВидРабочегоЦентра");
	
	КлючСвязи = 1;
	Для каждого СтрокаВидРЦ Из КлючевыеВидыРабочихЦентров Цикл
		СтрокаВидРЦ.Свободно  = СтрокаВидРЦ.Доступно - СтрокаВидРЦ.ОбъемРабот;
		СтрокаВидРЦ.КлючСвязи = КлючСвязи;
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла; 
	
	ТаблицаЗависимостьВидовРЦ.Индексы.Добавить("Период,ВидРабочегоЦентра");
	ТаблицаЗависимостьВидовРЦ.Индексы.Добавить("КодСтрокиЭтапыГрафик,Распоряжение,Период");
	КлючевыеВидыРабочихЦентров.Индексы.Добавить("Период,ВидРабочегоЦентра");
	
	// Заполним список зависимых видов РЦ
	Для каждого СтрокаВидРЦ Из КлючевыеВидыРабочихЦентров Цикл
		
		// Получим этапы в которых есть текущий вид РЦ
		СтруктураПоиска = Новый Структура("Период,ВидРабочегоЦентра", СтрокаВидРЦ.Период, СтрокаВидРЦ.ВидРабочегоЦентра);
  		ЭтапыВидаРабочегоЦентра = ТаблицаЗависимостьВидовРЦ.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаЭтап Из ЭтапыВидаРабочегоЦентра Цикл
			
			// Для каждого полученного этапа найдем виды РЦ, которые используются вместе
			// Если виды РЦ используются вместе, то в таблице "ТаблицаЗависимостьВидовРЦ" 
			// у них будет совпадать "КодСтрокиЭтапыГрафик" в разрезе каждого распоряжения
			СтруктураПоиска = Новый Структура("КодСтрокиЭтапыГрафик,Распоряжение,Период", 
													СтрокаЭтап.КодСтрокиЭтапыГрафик,
													СтрокаЭтап.Распоряжение,
													СтрокаЭтап.Период);
	  		ВидыРабочихЦентровЭтапа = ТаблицаЗависимостьВидовРЦ.НайтиСтроки(СтруктураПоиска);
			
			Для каждого СтрокаВидРабочегоЦентраЭтапа Из ВидыРабочихЦентровЭтапа Цикл
				СтруктураПоиска = Новый Структура("Период,ВидРабочегоЦентра", 
											СтрокаВидРабочегоЦентраЭтапа.Период, 
											СтрокаВидРабочегоЦентраЭтапа.ВидРабочегоЦентра);
										
	  			ЗависимыеВидыРабочихЦентров = КлючевыеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаЗависимыйВидРабочегоЦентра Из ЗависимыеВидыРабочихЦентров Цикл
					СтрокаСписка = СтрокаВидРЦ.СписокЗависимыхВидовРЦ.НайтиПоЗначению(СтрокаЗависимыйВидРабочегоЦентра.КлючСвязи);
					Если СтрокаСписка = Неопределено Тогда
						СтрокаВидРЦ.СписокЗависимыхВидовРЦ.Добавить(СтрокаЗависимыйВидРабочегоЦентра.КлючСвязи);
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла;
	КонецЦикла; 
	
	УстановитьПризнакКлючевой(КлючевыеВидыРабочихЦентров);
	
КонецПроцедуры

Процедура УстановитьПризнакКлючевой(КлючевыеВидыРабочихЦентров)
	
	КлючевыеВидыРабочихЦентров.Индексы.Добавить("КлючСвязи");
	
	Для каждого СтрокаВидРЦ Из КлючевыеВидыРабочихЦентров Цикл
		
		СтрокаВидРЦ.КлючевойПоУмолчанию = Истина;
		Для каждого КлючЗависимыйВидРЦ Из СтрокаВидРЦ.СписокЗависимыхВидовРЦ Цикл
			СтруктураПоиска = Новый Структура("КлючСвязи", КлючЗависимыйВидРЦ.Значение);
			ЗависимыеВидыРабочихЦентров = КлючевыеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаЗависимыйВидРабочегоЦентра Из ЗависимыеВидыРабочихЦентров Цикл
				Если СтрокаЗависимыйВидРабочегоЦентра.КлючевойПоУмолчанию 
					И СтрокаВидРЦ.КлючСвязи <> СтрокаЗависимыйВидРабочегоЦентра.КлючСвязи Тогда
					СтрокаВидРЦ.КлючевойПоУмолчанию = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СтрокаВидРЦ.КлючевойПоУмолчанию Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
			
	КонецЦикла;
	
	// Заполним пользовательские значения
	СписокОбработанныхКлючей = Новый Массив;
	Для каждого СтрокаВидРЦ Из КлючевыеВидыРабочихЦентров Цикл
		Если СтрокаВидРЦ.РучноеРедактированиеКлючевого Тогда
			СтрокаВидРЦ.Ключевой = СтрокаВидРЦ.КлючевойРедактирование;
			СписокОбработанныхКлючей.Добавить(СтрокаВидРЦ.КлючСвязи);
			Для каждого КлючЗависимыйВидРЦ Из СтрокаВидРЦ.СписокЗависимыхВидовРЦ Цикл
				СписокОбработанныхКлючей.Добавить(КлючЗависимыйВидРЦ.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаВидРЦ Из КлючевыеВидыРабочихЦентров Цикл
		Если СписокОбработанныхКлючей.Найти(СтрокаВидРЦ.КлючСвязи) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаВидРЦ.КлючевойПоУмолчанию Тогда
			СтрокаВидРЦ.Ключевой = Истина;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеРасписания(КлючевыеВидыРабочихЦентров, ТаблицаМаршрутныеЛистыЗапланированы, ТаблицаРасписаниеПоМаршрутнымЛистам)

	ТаблицаМаршрутныеЛистыЗапланированы.Индексы.Добавить("ВидРабочегоЦентра,Период");
	ТаблицаРасписаниеПоМаршрутнымЛистам.Индексы.Добавить("ВидРабочегоЦентра,Период");
	
	КонецТекущегоДня = КонецДня(ТекущаяДатаСеанса());
	
	Для каждого СтрокаВидРЦ Из КлючевыеВидыРабочихЦентров Цикл
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра,Период", СтрокаВидРЦ.ВидРабочегоЦентра, СтрокаВидРЦ.Период);
		
		СтрокаМаршрутныеЛистыЗапланированы = ТаблицаМаршрутныеЛистыЗапланированы.НайтиСтроки(СтруктураПоиска)[0];
		СтрокаВидРЦ.МаршрутныеЛистыЗапланированы = СтрокаМаршрутныеЛистыЗапланированы.МаршрутныеЛистыЗапланированы;
		
		РасписаниеПоМаршрутнымЛистам = ТаблицаРасписаниеПоМаршрутнымЛистам.НайтиСтроки(СтруктураПоиска);
		
		КоличествоМЛТребующихРасписание = 0;
		КоличествоМЛСРасписанием = 0;
		Для каждого СтрокаРасписание Из РасписаниеПоМаршрутнымЛистам Цикл
			СтрокаВидРЦ.РабочийЦентрПоРасписанию = СтрокаРасписание.РабочийЦентрПоРасписанию;
			
			СтрокаВидРЦ.Просрочено    = СтрокаВидРЦ.Просрочено    + СтрокаРасписание.Просрочено;
			СтрокаВидРЦ.Запланировать = СтрокаВидРЦ.Запланировать + СтрокаРасписание.Запланировать;
			
			Если СтрокаРасписание.ЕстьРасписание Тогда
				КоличествоМЛСРасписанием = КоличествоМЛСРасписанием + 1;
			КонецЕсли;
			
			Если СтрокаРасписание.ТребуетсяРасписание Тогда
				КоличествоМЛТребующихРасписание = КоличествоМЛТребующихРасписание + 1;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаВидРЦ.ТребуетсяРасписание = (КоличествоМЛТребующихРасписание <> 0);
		
		// Определим состояние расписания
		Если КоличествоМЛТребующихРасписание <> 0
			И КоличествоМЛТребующихРасписание = КоличествоМЛСРасписанием 
			И СтрокаВидРЦ.МаршрутныеЛистыЗапланированы Тогда
			
			// Сформировано полностью, если 
			// - есть расписание для всех МЛ требующих расписание
			// - МЛ сформированы
			СтрокаВидРЦ.РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.СформированоПолностью;
			
		ИначеЕсли КоличествоМЛСРасписанием <> 0 Тогда
			
			// Сформировано частично, если
			// - есть расписание хотябы для одного МЛ
			СтрокаВидРЦ.РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.СформированоЧастично;
			
		ИначеЕсли КоличествоМЛТребующихРасписание = 0
			И СтрокаВидРЦ.МаршрутныеЛистыЗапланированы Тогда
			
			// Не требуется, если
			// - нет МЛ для которых требуется расписание
			// - МЛ сформированы
			СтрокаВидРЦ.РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.НеТребуется;
			
		Иначе
			
			// Не сформировано, если
			// - нет расписания для всех МЛ требующих расписание
			// - или МЛ не сформированы
			СтрокаВидРЦ.РасписаниеРаботы = Перечисления.СостоянияРасписанияРабочихЦентров.НеСформировано;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасписаниеРабочихЦентров

Функция ДобавитьДанныеГрафика(ИсточникГрафикаРаботы, ДанныеГрафиковРаботыРЦ, НачалоКалендаря, ОкончаниеКалендаря) Экспорт

	// ВАЖНО: строки в графике работы должны быть упорядочены по возрастанию периодов
	
	Если ТипЗнч(ИсточникГрафикаРаботы) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоступностьРабочихЦентровИнтервалы.ДатаГрафика КАК ДатаГрафика,
		|	ДоступностьРабочихЦентровИнтервалы.ВремяНачала КАК ВремяНачала,
		|	ДоступностьРабочихЦентровИнтервалы.ВремяОкончания КАК ВремяОкончания,
		|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования КАК ИнтервалПланирования,
		|	ВЫБОР
		|		КОГДА РабочиеЦентры.ВидРабочегоЦентра.ПараллельнаяЗагрузка
		|			ТОГДА РабочиеЦентры.МаксимальнаяЗагрузка
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Загрузка
		|ИЗ
		|	Документ.ДоступностьРабочихЦентров.Интервалы КАК ДоступностьРабочихЦентровИнтервалы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ПО (РабочиеЦентры.Ссылка = &РабочийЦентр)
		|ГДЕ
		|	ДоступностьРабочихЦентровИнтервалы.РабочийЦентр = &РабочийЦентр
		|	И ДоступностьРабочихЦентровИнтервалы.ДатаГрафика МЕЖДУ &Начало И &Окончание
		|	И ДоступностьРабочихЦентровИнтервалы.Ссылка.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаГрафика,
		|	ВремяНачала";
		
		Запрос.УстановитьПараметр("РабочийЦентр", ИсточникГрафикаРаботы);
		Запрос.УстановитьПараметр("Начало",       НачалоДня(НачалоКалендаря));
		Запрос.УстановитьПараметр("Окончание",    КонецМесяца(ОкончаниеКалендаря));
		
		ТаблицаДоступность = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		СписокГрафиков = Новый Массив;
		СписокГрафиков.Добавить(ИсточникГрафикаРаботы);
		ТаблицаДоступность = ПланированиеПроизводства.РасписаниеРаботыПоГрафику(
							СписокГрафиков, 
							НачалоДня(НачалоКалендаря), 
							КонецМесяца(ОкончаниеКалендаря));
							
		ТаблицаДоступность.Колонки.Добавить("Загрузка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаДоступность.Колонки.Добавить("ИнтервалПланирования", Новый ОписаниеТипов("ПеречислениеСсылка.ТочностьГрафикаПроизводства"));
		
		ТаблицаДоступность.Сортировать("ДатаГрафика,ВремяНачала");
		
	КонецЕсли; 
	
	ПоследняяДатаГрафика = '000101010000';
	
	ТаблицаДанныеГрафиковРаботыРЦ = Неопределено;
	Если ДанныеГрафиковРаботыРЦ <> Неопределено Тогда
		ТаблицаДанныеГрафиковРаботыРЦ = ДанныеГрафиковРаботыРЦ.Получить(ИсточникГрафикаРаботы);
	КонецЕсли;
	
	Если ТаблицаДанныеГрафиковРаботыРЦ = Неопределено Тогда
		ТаблицаДанныеГрафиковРаботыРЦ = Новый ТаблицаЗначений;
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("Начало",         Новый ОписаниеТипов("Дата"));
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("Окончание",      Новый ОписаниеТипов("Дата"));
		
		// Вспомогательные сведения для определения периодов выполнения
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("Занят",          Новый ОписаниеТипов("Булево")); 
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("МаршрутныйЛист", Новый ОписаниеТипов("ДокументСсылка.МаршрутныйЛистПроизводства")); 
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("ВариантНаладки", Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки")); 
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("Загрузка",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3, ДопустимыйЗнак.Неотрицательный))); 
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("ВремяРаботы",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 1))); 
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("Порядок",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10))); 
		ТаблицаДанныеГрафиковРаботыРЦ.Колонки.Добавить("НачалоРаботы",   Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя))); 
		
	ИначеЕсли ТаблицаДанныеГрафиковРаботыРЦ.Количество() <> 0 Тогда
		
		ПоследняяДатаГрафика = ТаблицаДанныеГрафиковРаботыРЦ[ТаблицаДанныеГрафиковРаботыРЦ.Количество()-1].Начало;
		
	КонецЕсли; 
	
	Для каждого ДанныеОДоступности Из ТаблицаДоступность Цикл
		
		ДатаНачала    = ДанныеОДоступности.ДатаГрафика
							+ Час(ДанныеОДоступности.ВремяНачала) * 3600
							+ Минута(ДанныеОДоступности.ВремяНачала) * 60;
		
		ДатаОкончания = ДанныеОДоступности.ДатаГрафика
							+ Час(ДанныеОДоступности.ВремяОкончания) * 3600
							+ Минута(ДанныеОДоступности.ВремяОкончания) * 60;
							
		Если ДатаНачала > ОкончаниеКалендаря ИЛИ ДатаОкончания < НачалоКалендаря Тогда
			Продолжить;
		КонецЕсли;
							
		ДатаНачала = Макс(ДатаНачала, НачалоКалендаря);
		
		Если КонецМинуты(ДанныеОДоступности.ВремяОкончания) = '00010101235959' Тогда
			ДатаОкончания = Мин(ДатаОкончания, ОкончаниеКалендаря);
		Иначе
			ДатаОкончания = Мин(ДатаОкончания - 1, ОкончаниеКалендаря);
		КонецЕсли; 
		
		Если ДатаНачала < ДатаОкончания Тогда
			Если ДанныеОДоступности.ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
				
				// При интервале Час график нужно разбить на часы
				НачалоИнтервала = ДатаНачала;
				Пока НачалоИнтервала <= ДатаОкончания Цикл
					
					ОкончаниеИнтервала = Мин(НачалоИнтервала + 3600 - 1, ДатаОкончания);
					
					СтрокаГрафик = ТаблицаДанныеГрафиковРаботыРЦ.Добавить();
					СтрокаГрафик.Начало    = НачалоИнтервала;
					СтрокаГрафик.Окончание = ОкончаниеИнтервала;
					СтрокаГрафик.Загрузка  = ДанныеОДоступности.Загрузка;
					
					НачалоИнтервала = НачалоИнтервала + 3600;
					
				КонецЦикла;
				
			Иначе
				
				СтрокаГрафик = ТаблицаДанныеГрафиковРаботыРЦ.Добавить();
				СтрокаГрафик.Начало    = ДатаНачала;
				СтрокаГрафик.Окончание = КонецМинуты(ДатаОкончания);
				СтрокаГрафик.Загрузка  = ДанныеОДоступности.Загрузка;
				
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ДанныеГрафиковРаботыРЦ <> Неопределено Тогда
		ДанныеГрафиковРаботыРЦ.Вставить(ИсточникГрафикаРаботы, ТаблицаДанныеГрафиковРаботыРЦ);
	КонецЕсли;
	
	Возврат ТаблицаДанныеГрафиковРаботыРЦ;
	
КонецФункции

// Занимает время в графике работы согласно расписанию работы
//
// Параметры:
//  ГрафикРаботы			- ТаблицаЗначений, ДанныеФормыКоллекция - график работы, в который нужно внести изменения
//  Расписание				- ТаблицаЗначений, ДанныеФормыКоллекция, Массив - расписание
//
Процедура ЗанятьВремяВГрафикеРаботы(ГрафикРаботы, СписокСтрокРасписания)

	// ВАЖНО: строки в графике работы должны быть упорядочены по возрастанию периодов
	
	ВыполняетсяВыборкаСтрокГрафикаРаботы = Ложь;
	ВыборкаГрафикаРаботы = ГрафикРаботы;
	
	Для каждого СтрокаРасписание Из СписокСтрокРасписания Цикл
		
		Если СтрокаРасписание.Начало = '000101010000'
			ИЛИ СтрокаРасписание.Окончание = '000101010000' Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ВремяПереналадки = СтрокаРасписание.ВремяПереналадки;
		
		ПорядокСтроки = СтрокаРасписание.ПорядокСтроки;
		
		Если ЗначениеЗаполнено(СтрокаРасписание.ВариантНаладки) Тогда
			Если НЕ СтрокаРасписание.ВремяРаботыИзмененоПользователем Тогда
				ВремяРаботы = СтрокаРасписание.ВремяРаботы;
			Иначе
				ВремяРаботы = СтрокаРасписание.ОбъемРабот * 3600;
			КонецЕсли; 
		Иначе
			ВремяРаботы = 0;
		КонецЕсли; 
		
		СтрокиГрафикаКДобавлению = Новый Массив;
		
		Для каждого СтрокаГрафикРаботы Из ВыборкаГрафикаРаботы Цикл
			
			Если СтрокаГрафикРаботы.Начало > СтрокаРасписание.Окончание Тогда
				// Дальше будут периоды вне расписания
				Прервать;
			КонецЕсли; 
			
			Если СтрокаРасписание.Начало > СтрокаГрафикРаботы.Окончание 
				ИЛИ СтрокаРасписание.Окончание < СтрокаГрафикРаботы.Начало 
				ИЛИ СтрокаГрафикРаботы.Занят Тогда
				// График вне расписания или уже отмечена занятось
				Продолжить;
			КонецЕсли;
			
			ИндексНовойСтроки = ГрафикРаботы.Индекс(СтрокаГрафикРаботы) + 1;
			
			Если СтрокаРасписание.Начало > СтрокаГрафикРаботы.Начало
				И СтрокаРасписание.Окончание < СтрокаГрафикРаботы.Окончание Тогда
				
				//СтрокаГрафикРаботы: ------***++++++
				//СтрокаРасписание:         ***
				
				НачалоЗанятогоПериода = СтрокаРасписание.Начало + ВремяПереналадки;
				СвободнаяЗагрузка = СтрокаГрафикРаботы.Загрузка - СтрокаРасписание.Загрузка;
				
				// Период занятый переналадкой
				Если ВремяПереналадки <> 0 Тогда
					ДанныеНовойСтроки = Новый Структура;
					ДанныеНовойСтроки.Вставить("РабочийЦентр",   СтрокаРасписание.РабочийЦентр);
					ДанныеНовойСтроки.Вставить("Начало",         СтрокаРасписание.Начало);
					ДанныеНовойСтроки.Вставить("Окончание",      НачалоЗанятогоПериода - 1);
					ДанныеНовойСтроки.Вставить("Занят",          Истина);
					ДанныеНовойСтроки.Вставить("МаршрутныйЛист", СтрокаРасписание.МаршрутныйЛист);
					ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
					ДанныеНовойСтроки.Вставить("Загрузка",       СтрокаГрафикРаботы.Загрузка);
					ДанныеНовойСтроки.Вставить("ИндексСтроки",   ИндексНовойСтроки);
					СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
					
					ВремяПереналадки = 0;
				КонецЕсли;
				
				// Период *** (занятый)
				ДанныеНовойСтроки = Новый Структура;
				ДанныеНовойСтроки.Вставить("РабочийЦентр",   СтрокаРасписание.РабочийЦентр);
				ДанныеНовойСтроки.Вставить("Начало",         НачалоЗанятогоПериода);
				ДанныеНовойСтроки.Вставить("Окончание",      СтрокаРасписание.Окончание);
				ДанныеНовойСтроки.Вставить("Занят",          Истина);
				ДанныеНовойСтроки.Вставить("МаршрутныйЛист", СтрокаРасписание.МаршрутныйЛист);
				ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
				ДанныеНовойСтроки.Вставить("Загрузка",       СтрокаРасписание.Загрузка);
				ДанныеНовойСтроки.Вставить("НачалоРаботы",   СтрокаРасписание.Начало);
				ДанныеНовойСтроки.Вставить("Порядок",        ПорядокСтроки);
				ДанныеНовойСтроки.Вставить("ИндексСтроки",   ИндексНовойСтроки);
				СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
				
				// Период *** (со свободной загрузкой)
				Если СвободнаяЗагрузка > 0 Тогда
					ДанныеНовойСтроки = Новый Структура;
					ДанныеНовойСтроки.Вставить("РабочийЦентр",   СтрокаРасписание.РабочийЦентр);
					ДанныеНовойСтроки.Вставить("Начало",         НачалоЗанятогоПериода);
					ДанныеНовойСтроки.Вставить("Окончание",      СтрокаРасписание.Окончание);
					ДанныеНовойСтроки.Вставить("Занят",          Ложь);
					ДанныеНовойСтроки.Вставить("УжеЗанятоМЛ",    Истина);
					
					// нужно указать что период свободен для определенного варианта наладки и определенного времени работы
					ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
					ДанныеНовойСтроки.Вставить("ВремяРаботы",    ВремяРаботы);
					
					ДанныеНовойСтроки.Вставить("Загрузка",       СвободнаяЗагрузка); 
					ДанныеНовойСтроки.Вставить("ИндексСтроки",   ИндексНовойСтроки);
					СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
				КонецЕсли; 
				
				// Период ++++++
				ДанныеНовойСтроки = Новый Структура;
				ДанныеНовойСтроки.Вставить("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
				ДанныеНовойСтроки.Вставить("Начало",       КонецМинуты(СтрокаРасписание.Окончание) + 1);
				ДанныеНовойСтроки.Вставить("Окончание",    СтрокаГрафикРаботы.Окончание);
				ДанныеНовойСтроки.Вставить("Загрузка",     СтрокаГрафикРаботы.Загрузка); // в этом периоде загрузка полностью свободна
				ДанныеНовойСтроки.Вставить("ИндексСтроки", ИндексНовойСтроки);
				ДанныеНовойСтроки.Вставить("УжеЗанятоМЛ",  Ложь);
				СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
				
				// Период ------
				СтрокаГрафикРаботы.Окончание = СтрокаРасписание.Начало - 1;
				
			ИначеЕсли СтрокаРасписание.Начало <= СтрокаГрафикРаботы.Начало
				И СтрокаРасписание.Окончание >= СтрокаГрафикРаботы.Окончание Тогда
				
				//СтрокаГрафикРаботы:       ***
				//СтрокаРасписание:   ------***++++++
				
				НачалоЗанятогоПериода = Мин(СтрокаГрафикРаботы.Начало + ВремяПереналадки, СтрокаГрафикРаботы.Окончание + 1);
				СвободнаяЗагрузка = СтрокаГрафикРаботы.Загрузка - СтрокаРасписание.Загрузка;
				
				Если НачалоЗанятогоПериода <= СтрокаГрафикРаботы.Окончание Тогда
					
					// Период занятый переналадкой
					Если ВремяПереналадки <> 0 Тогда
						ДанныеНовойСтроки = Новый Структура;
						ДанныеНовойСтроки.Вставить("РабочийЦентр",   СтрокаРасписание.РабочийЦентр);
						ДанныеНовойСтроки.Вставить("Начало",         СтрокаРасписание.Начало);
						ДанныеНовойСтроки.Вставить("Окончание",      НачалоЗанятогоПериода - 1);
						ДанныеНовойСтроки.Вставить("Занят",          Истина);
						ДанныеНовойСтроки.Вставить("МаршрутныйЛист", СтрокаРасписание.МаршрутныйЛист);
						ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
						ДанныеНовойСтроки.Вставить("Загрузка",       СтрокаГрафикРаботы.Загрузка);
						ДанныеНовойСтроки.Вставить("ИндексСтроки",   ИндексНовойСтроки);
						СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
						
						ВремяПереналадки = ВремяПереналадки - (ДанныеНовойСтроки.Окончание - ДанныеНовойСтроки.Начало) - 1;
					КонецЕсли;
					
					// Период *** (со свободной загрузкой)
					Если СвободнаяЗагрузка > 0 Тогда
						ДанныеНовойСтроки = Новый Структура;
						ДанныеНовойСтроки.Вставить("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
						ДанныеНовойСтроки.Вставить("Начало",       НачалоЗанятогоПериода);
						ДанныеНовойСтроки.Вставить("Окончание",    СтрокаГрафикРаботы.Окончание);
						ДанныеНовойСтроки.Вставить("Занят",        Ложь);
						ДанныеНовойСтроки.Вставить("УжеЗанятоМЛ",  Истина);
						
						// нужно указать что период свободен для определенного варианта наладки и определенного времени работы
						ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
						ДанныеНовойСтроки.Вставить("ВремяРаботы",    ВремяРаботы);
						
						ДанныеНовойСтроки.Вставить("Загрузка",     СвободнаяЗагрузка); 
						ДанныеНовойСтроки.Вставить("ИндексСтроки", ИндексНовойСтроки);
						СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
					КонецЕсли; 
					
					// Период *** (занятый)
					СтрокаГрафикРаботы.МаршрутныйЛист = СтрокаРасписание.МаршрутныйЛист;
					СтрокаГрафикРаботы.ВариантНаладки = СтрокаРасписание.ВариантНаладки;
					СтрокаГрафикРаботы.Загрузка = СтрокаРасписание.Загрузка;
					СтрокаГрафикРаботы.ВремяРаботы = ВремяРаботы;
					СтрокаГрафикРаботы.НачалоРаботы = СтрокаРасписание.Начало;
					СтрокаГрафикРаботы.Занят = Истина;
					СтрокаГрафикРаботы.Порядок = ПорядокСтроки;
					
				Иначе
					
					// Период полностью занят переналадкой
					СтрокаГрафикРаботы.МаршрутныйЛист = СтрокаРасписание.МаршрутныйЛист;
					СтрокаГрафикРаботы.ВариантНаладки = СтрокаРасписание.ВариантНаладки;
					СтрокаГрафикРаботы.Занят = Истина;
					
					ВремяПереналадки = ВремяПереналадки - (СтрокаГрафикРаботы.Окончание - СтрокаГрафикРаботы.Начало) - 1;
					
				КонецЕсли; 
				
			ИначеЕсли СтрокаРасписание.Начало <= СтрокаГрафикРаботы.Начало Тогда
				
				//СтрокаГрафикРаботы:       ***++++++
				//СтрокаРасписание:   ------***
				
				НачалоЗанятогоПериода = СтрокаГрафикРаботы.Начало + ВремяПереналадки;
				СвободнаяЗагрузка = СтрокаГрафикРаботы.Загрузка - СтрокаРасписание.Загрузка;
				
				Если ВремяПереналадки <> 0 Тогда
					
					// Занятый период
					ДанныеНовойСтроки = Новый Структура;
					ДанныеНовойСтроки.Вставить("РабочийЦентр",   СтрокаРасписание.РабочийЦентр);
					ДанныеНовойСтроки.Вставить("Начало",         НачалоЗанятогоПериода);
					ДанныеНовойСтроки.Вставить("Окончание",      СтрокаРасписание.Окончание);
					ДанныеНовойСтроки.Вставить("Занят",          Истина);
					ДанныеНовойСтроки.Вставить("МаршрутныйЛист", СтрокаРасписание.МаршрутныйЛист);
					ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
					ДанныеНовойСтроки.Вставить("Загрузка",       СтрокаРасписание.Загрузка);
					ДанныеНовойСтроки.Вставить("ВремяРаботы",    ВремяРаботы);
					ДанныеНовойСтроки.Вставить("Порядок",        ПорядокСтроки);
					ДанныеНовойСтроки.Вставить("НачалоРаботы",   СтрокаРасписание.Начало);
					ДанныеНовойСтроки.Вставить("ИндексСтроки",   ИндексНовойСтроки);
					СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
					
				КонецЕсли; 
				
				// Период со свободной загрузкой в занятом периоде
				Если СвободнаяЗагрузка > 0 Тогда
					ДанныеНовойСтроки = Новый Структура;
					ДанныеНовойСтроки.Вставить("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
					ДанныеНовойСтроки.Вставить("Начало",       НачалоЗанятогоПериода);
					ДанныеНовойСтроки.Вставить("Окончание",    СтрокаРасписание.Окончание);
					ДанныеНовойСтроки.Вставить("Занят",        Ложь);
					ДанныеНовойСтроки.Вставить("УжеЗанятоМЛ",  Истина);
					
					// нужно указать что период свободен для определенного варианта наладки и определенного времени работы
					ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
					ДанныеНовойСтроки.Вставить("ВремяРаботы",    ВремяРаботы);
					
					ДанныеНовойСтроки.Вставить("Загрузка",     СвободнаяЗагрузка); 
					ДанныеНовойСтроки.Вставить("ИндексСтроки", ИндексНовойСтроки);
					СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
				КонецЕсли; 
				
				// Свободный период после занятого
				ДанныеНовойСтроки = Новый Структура;
				ДанныеНовойСтроки.Вставить("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
				ДанныеНовойСтроки.Вставить("Начало",       КонецМинуты(СтрокаРасписание.Окончание) + 1);
				ДанныеНовойСтроки.Вставить("Окончание",    СтрокаГрафикРаботы.Окончание);
				ДанныеНовойСтроки.Вставить("Загрузка",     СтрокаГрафикРаботы.Загрузка); 
				ДанныеНовойСтроки.Вставить("ИндексСтроки", ИндексНовойСтроки);
				ДанныеНовойСтроки.Вставить("УжеЗанятоМЛ",  Ложь);
				СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
				
				Если ВремяПереналадки <> 0 Тогда
					
					// Период занятый переналадкой
					СтрокаГрафикРаботы.Окончание      = НачалоЗанятогоПериода - 1;
					СтрокаГрафикРаботы.МаршрутныйЛист = СтрокаРасписание.МаршрутныйЛист;
					СтрокаГрафикРаботы.ВариантНаладки = СтрокаРасписание.ВариантНаладки;
					СтрокаГрафикРаботы.Занят          = Истина;
					
				Иначе
					
					// Занятый период
					СтрокаГрафикРаботы.Окончание      = СтрокаРасписание.Окончание;
					СтрокаГрафикРаботы.МаршрутныйЛист = СтрокаРасписание.МаршрутныйЛист;
					СтрокаГрафикРаботы.ВариантНаладки = СтрокаРасписание.ВариантНаладки;
					СтрокаГрафикРаботы.Загрузка       = СтрокаРасписание.Загрузка;
					СтрокаГрафикРаботы.ВремяРаботы    = ВремяРаботы;
					СтрокаГрафикРаботы.Порядок        = ПорядокСтроки;
					СтрокаГрафикРаботы.НачалоРаботы   = СтрокаРасписание.Начало;
					СтрокаГрафикРаботы.Занят          = Истина;
					
				КонецЕсли; 
				
				ВремяПереналадки = 0;
				
			Иначе
				
				//СтрокаГрафикРаботы: ------***
				//СтрокаРасписание:         ***++++++
				
				НачалоЗанятогоПериода = Мин(СтрокаРасписание.Начало + ВремяПереналадки, СтрокаГрафикРаботы.Окончание + 1);
				СвободнаяЗагрузка = СтрокаГрафикРаботы.Загрузка - СтрокаРасписание.Загрузка;
				
				// Период занятый переналадкой
				Если ВремяПереналадки <> 0 Тогда
					ДанныеНовойСтроки = Новый Структура;
					ДанныеНовойСтроки.Вставить("РабочийЦентр",   СтрокаРасписание.РабочийЦентр);
					ДанныеНовойСтроки.Вставить("Начало",         СтрокаРасписание.Начало);
					ДанныеНовойСтроки.Вставить("Окончание",      НачалоЗанятогоПериода - 1);
					ДанныеНовойСтроки.Вставить("Занят",          Истина);
					ДанныеНовойСтроки.Вставить("МаршрутныйЛист", СтрокаРасписание.МаршрутныйЛист);
					ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
					ДанныеНовойСтроки.Вставить("Загрузка",       СтрокаГрафикРаботы.Загрузка);
					ДанныеНовойСтроки.Вставить("ИндексСтроки",   ИндексНовойСтроки);
					СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
					
					ВремяПереналадки = ВремяПереналадки - (ДанныеНовойСтроки.Окончание - ДанныеНовойСтроки.Начало) - 1;
				КонецЕсли;
				
				Если НачалоЗанятогоПериода <= СтрокаГрафикРаботы.Окончание Тогда
					// Занятый период
					ДанныеНовойСтроки = Новый Структура;
					ДанныеНовойСтроки.Вставить("РабочийЦентр",   СтрокаРасписание.РабочийЦентр);
					ДанныеНовойСтроки.Вставить("Начало",         СтрокаРасписание.Начало);
					ДанныеНовойСтроки.Вставить("Окончание",      СтрокаГрафикРаботы.Окончание);
					ДанныеНовойСтроки.Вставить("Занят",          Истина);
					ДанныеНовойСтроки.Вставить("МаршрутныйЛист", СтрокаРасписание.МаршрутныйЛист);
					ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
					ДанныеНовойСтроки.Вставить("Загрузка",       СтрокаРасписание.Загрузка);
					ДанныеНовойСтроки.Вставить("ВремяРаботы",    ВремяРаботы);
					ДанныеНовойСтроки.Вставить("Порядок",        ПорядокСтроки);
					ДанныеНовойСтроки.Вставить("НачалоРаботы",   СтрокаРасписание.Начало);
					ДанныеНовойСтроки.Вставить("ИндексСтроки",   ИндексНовойСтроки);
					СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
					
					// Период со свободной загрузкой в занятом периоде
					Если СвободнаяЗагрузка > 0 Тогда
						ДанныеНовойСтроки = Новый Структура;
						ДанныеНовойСтроки.Вставить("РабочийЦентр", СтрокаРасписание.РабочийЦентр);
						ДанныеНовойСтроки.Вставить("Начало",       СтрокаРасписание.Начало);
						ДанныеНовойСтроки.Вставить("Окончание",    СтрокаГрафикРаботы.Окончание);
						ДанныеНовойСтроки.Вставить("Занят",        Ложь);
						ДанныеНовойСтроки.Вставить("УжеЗанятоМЛ",  Истина);
						
						// нужно указать что период свободен для определенного варианта наладки и определенного времени работы
						ДанныеНовойСтроки.Вставить("ВариантНаладки", СтрокаРасписание.ВариантНаладки);
						ДанныеНовойСтроки.Вставить("ВремяРаботы",    ВремяРаботы);
						
						ДанныеНовойСтроки.Вставить("Загрузка",     СвободнаяЗагрузка); 
						ДанныеНовойСтроки.Вставить("ИндексСтроки", ИндексНовойСтроки);
						СтрокиГрафикаКДобавлению.Добавить(ДанныеНовойСтроки);
					КонецЕсли; 
				КонецЕсли; 
				
				// Свободный период
				СтрокаГрафикРаботы.Окончание = СтрокаРасписание.Начало - 1;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Для Сч = -СтрокиГрафикаКДобавлению.Количество() По -1 Цикл
			ДанныеНовойСтроки = СтрокиГрафикаКДобавлению[-Сч-1];
			СтрокаГрафикРаботы = ГрафикРаботы.Вставить(ДанныеНовойСтроки.ИндексСтроки);
			ЗаполнитьЗначенияСвойств(СтрокаГрафикРаботы, ДанныеНовойСтроки);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ГрафикРаботыИсполнителя(ИсточникГрафикаРаботы, ДанныеГрафиковРаботыРЦ, ЗанятостьРЦ, Начало, Окончание)
	
	// ВАЖНО: строки в графике работы должны быть упорядочены по возрастанию периодов

	// Получим график работы рабочего центра
	ТаблицаДанныеГрафиковРаботыРЦ = ДанныеГрафиковРаботыРЦ.Получить(ИсточникГрафикаРаботы);
	
	Если ТаблицаДанныеГрафиковРаботыРЦ <> Неопределено 
		И ТаблицаДанныеГрафиковРаботыРЦ.Количество() <> 0 Тогда
		
		МаксДатаГрафика = ТаблицаДанныеГрафиковРаботыРЦ[ТаблицаДанныеГрафиковРаботыРЦ.Количество() - 1].Окончание;
		Если МаксДатаГрафика < Окончание Тогда
		
			// График не содержит период до даты окончания. Нужно его добавить
			
			НачалоКалендаря    = МаксДатаГрафика + 1;
			ОкончаниеКалендаря = Окончание;
			
			ТаблицаДанныеГрафиковРаботыРЦ = ДобавитьДанныеГрафика(
													ИсточникГрафикаРаботы,
													ДанныеГрафиковРаботыРЦ, 
													НачалоКалендаря, 
													ОкончаниеКалендаря);
		КонецЕсли; 
		
	Иначе
		
		НачалоКалендаря    = Начало;
		ОкончаниеКалендаря = Окончание;
		
		ТаблицаДанныеГрафиковРаботыРЦ = ДобавитьДанныеГрафика(
												ИсточникГрафикаРаботы,
												ДанныеГрафиковРаботыРЦ, 
												НачалоКалендаря, 
												ОкончаниеКалендаря);
												
		Если ЗанятостьРЦ <> Неопределено Тогда
			ТаблицаЗанятостиРЦ = ЗанятостьРЦ.Получить(ИсточникГрафикаРаботы);												
			Если ТаблицаЗанятостиРЦ <> Неопределено Тогда
				ЗанятьВремяВГрафикеРаботы(ТаблицаДанныеГрафиковРаботыРЦ, ТаблицаЗанятостиРЦ);
			КонецЕсли; 
		КонецЕсли; 										
		
	КонецЕсли; 
	
	Возврат ТаблицаДанныеГрафиковРаботыРЦ;
	
КонецФункции

// Определяет периоды в которых можно выполнить работу
//
// Параметры:
//  ДатаПланирования			- Дата - Дата с которой начинается планирование
//  ПараметрыРаботы				- Структура - Описывает параметры выполнения
//									* Время работы
//									* Загрузка
//									* ВариантНаладки
//									* НачалоРаботы
//									* УчитыватьДоступность
//  ГрафикРаботы				- ТаблицаЗначений - содержит график работы по которому будут определены периоды.
//	ДанныеДляПолученияГрафика	- Структура - содержит данные необходимые для получения новых данных графика, 
//												используется, если не удалось уложиться в текущие данные графика.
//	Непрерывный					- Булево - Истина, если период выполнения не может прерываться
//  НачатьНеПозже				- Дата - Дата позже которой нельзя начинать
//
// Возвращаемое значение:
//   Структура   - содержит результат расчета периодов выполнения работы
//
Функция ОпределитьПериодыВыполнения(ДатаПланирования, ПараметрыРаботы, ГрафикРаботы, ДанныеДляПолученияГрафика, Непрерывный, НачатьНеПозже = Неопределено)

	// ВАЖНО: строки в графике работы должны быть упорядочены по возрастанию периодов
	
	СписокПроблем = Новый Массив;
	
	// Флаги, которые используются для информирования о причинах, по которым не удалось сформировать расписание
	ЕстьПериодВКоторомСвободнойЗагрузкиДостаточно = Ложь;
	ЕстьСвободныйПериод = Ложь;
	
	ИсходноеВремяРаботы = Макс(ПараметрыРаботы.ВремяРаботы, 1); // Нулевое время преобразуем в 1 секунду
	
	Загрузка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРаботы, "Загрузка", 0);
	ИсходноеВремяПереналадки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРаботы, "ВремяПереналадки", 0);
	ВариантНаладки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРаботы, "ВариантНаладки", Справочники.ВариантыНаладки.ПустаяСсылка());
	ВариантЗагрузки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРаботы, "ВариантЗагрузки", Перечисления.ВариантыЗагрузкиРабочихЦентров.ПустаяСсылка());
	ПорядокСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРаботы, "ПорядокСтроки", 0);
	
	// Нужно исходить из указанного начала работы
	НачалоРаботы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРаботы, "НачалоРаботы", Неопределено);
	
	Начало = Неопределено;
	
	НачалоПериодаВыполнения    = '000101010000';
	ОкончаниеПериодаВыполнения = '000101010000';
	
	ВремяРаботыВРабочееВремя = 0;
	ВремяПереналадкиВРабочееВремя = 0;
	
	ПериодыВыполнения = Новый Массив;
	
	ОкончаниеПредыдущегоГрафика = Неопределено; // Для контроля непрерывности
	НачалоПоследующих = Неопределено;
	
	Если ГрафикРаботы = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеДляПолученияГрафика.РабочийЦентр) 
			ИЛИ НЕ ПараметрыРаботы.УчитыватьДоступность Тогда
			ИсточникГрафикаРаботы = ДанныеДляПолученияГрафика.Календарь;
		Иначе
			ИсточникГрафикаРаботы = ДанныеДляПолученияГрафика.РабочийЦентр;
		КонецЕсли; 
		ГрафикРаботы = ГрафикРаботыИсполнителя(ИсточникГрафикаРаботы,
								ДанныеДляПолученияГрафика.ДанныеГрафиков,
								ДанныеДляПолученияГрафика.ЗанятостьРЦ,
								ДанныеДляПолученияГрафика.Начало,
								ДанныеДляПолученияГрафика.Окончание);
								
		Если ГрафикРаботы.Колонки.Найти("УжеЗанятоМЛ") = Неопределено Тогда
			ГрафикРаботы.Колонки.Добавить("УжеЗанятоМЛ", Новый ОписаниеТипов("Булево"));
		КонецЕсли; 
	КонецЕсли;
	
	ИндексПервойСтрокиГрафика    = 0;
	ИндексПоследнейСтрокиГрафика = ГрафикРаботы.Количество() - 1;
	Направление = 1;
	
	Если ГрафикРаботы.Количество() <> 0 Тогда
		КонецТекущегоГрафика = ГрафикРаботы[ИндексПоследнейСтрокиГрафика].Окончание;
	Иначе
		КонецТекущегоГрафика = ДанныеДляПолученияГрафика.Окончание;
	КонецЕсли;
	
	ГодТекущегоГрафика = Год(КонецТекущегоГрафика);
	
	ПланироватьВыполнение = Истина;
	
	Пока ПланироватьВыполнение Цикл
		// При планировании назад цикл выполняется один раз
		// При планировании вперед цикл выполняется пока не получено расписание
		// и пока не дошли до года с номером больше текущего на два
		
		НачалоЗанятыхПериов = Новый Массив;
		
		Для Сч = ИндексПервойСтрокиГрафика По ИндексПоследнейСтрокиГрафика Цикл
			
			СтрокаГрафикРаботы = ГрафикРаботы[Сч * Направление];
			
			Если ПорядокСтроки <> 0 И СтрокаГрафикРаботы.Занят Тогда
				Если СтрокаГрафикРаботы.Порядок > ПорядокСтроки Тогда
				
					// Нужно запомнить самую раннюю дату начала работы
					НачалоПоследующих = ?(НачалоПоследующих <> Неопределено, 
													Мин(СтрокаГрафикРаботы.НачалоРаботы, НачалоПоследующих), 
													СтрокаГрафикРаботы.НачалоРаботы);
												
				ИначеЕсли СтрокаГрафикРаботы.Порядок < ПорядокСтроки Тогда
				
					// Нужно запомнить самую позднюю дату окончания работы
					ОкончаниеПредыдущих = ?(ОкончаниеПредыдущих <> Неопределено, 
													Макс(СтрокаГрафикРаботы.НачалоРаботы, ОкончаниеПредыдущих), 
													СтрокаГрафикРаботы.НачалоРаботы);
												
				КонецЕсли; 
			КонецЕсли; 
			
			// При синхронной загрузке начало должно совпадать с уже занятыми периодами
			Если Начало <> Неопределено
				И ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный
				И СтрокаГрафикРаботы.Занят
				И Начало <> СтрокаГрафикРаботы.Начало Тогда
				
				Начало = Неопределено;
				ВремяРаботы = ИсходноеВремяРаботы;
				ВремяПереналадки = ИсходноеВремяПереналадки;
				ПериодыВыполнения.Очистить();
				НачалоЗанятыхПериов.Очистить();
				
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаГрафикРаботы.Занят 
				ИЛИ СтрокаГрафикРаботы.ВариантНаладки <> ВариантНаладки
					И СтрокаГрафикРаботы.ВариантНаладки <> Справочники.ВариантыНаладки.ПустаяСсылка()
				ИЛИ СтрокаГрафикРаботы.Загрузка < Загрузка 
				ИЛИ ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный
					И СтрокаГрафикРаботы.ВремяРаботы <> 0
					И СтрокаГрафикРаботы.ВремяРаботы <> ИсходноеВремяРаботы Тогда
				
				// В этом периоде нельзя запланировать
				Если Начало <> Неопределено Тогда
					НачалоЗанятыхПериов.Добавить(СтрокаГрафикРаботы.Начало);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ЕстьПериодВКоторомСвободнойЗагрузкиДостаточно = Истина;
			
			// Если начало уже определено, то последующие периоды не должны быть заняты
			// Это связано с тем, что РЦ должен непрерывно выполнять одну работу
			// РЦ не может приостановить выполнение одной работы, начать другую работу, а потом снова вернуться к старой работе
			Если Начало <> Неопределено Тогда
				
				РаботаПрервана = Ложь;
				Для каждого НачалоЗанятогоПериода Из НачалоЗанятыхПериов Цикл
					Если НачалоЗанятогоПериода > Начало 
							И НачалоЗанятогоПериода <> СтрокаГрафикРаботы.Начало Тогда
							
						РаботаПрервана = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				НачалоЗанятыхПериов.Очистить();
				
				Если РаботаПрервана Тогда
					Начало = Неопределено;
					ВремяРаботы = ИсходноеВремяРаботы;
					ВремяПереналадки = ИсходноеВремяПереналадки;
					ПериодыВыполнения.Очистить();
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			// Определим можно ли начать в этом периоде графика
			Если (Начало = Неопределено
						И ДатаПланирования <= СтрокаГрафикРаботы.Окончание)
						
					// Если выполнение должно быть непрерывным, то начало определим снова	
					ИЛИ (Начало <> Неопределено
						И Непрерывный
						И ОкончаниеПредыдущегоГрафика <> Неопределено
						И ОкончаниеПредыдущегоГрафика < СтрокаГрафикРаботы.Начало) Тогда
						
				ВремяРаботы = ИсходноеВремяРаботы;
				ВремяПереналадки = ИсходноеВремяПереналадки;
				Если НачалоРаботы <> Неопределено Тогда
					Начало = НачалоРаботы;
					НачалоПериодаВыполнения = Начало;
					Если Начало < СтрокаГрафикРаботы.Начало Тогда
						
						Окончание = Мин(Начало + ВремяРаботы + ВремяПереналадки - 1, СтрокаГрафикРаботы.Начало - 1);
						
						ПрерватьВыполнение = ДобавитьПериодВыполнения(
														Начало, 
														Окончание, 
														ВремяРаботы, 
														ВремяПереналадки,
														ВремяРаботыВРабочееВремя,
														ВремяПереналадкиВРабочееВремя,
														НачалоПериодаВыполнения,
														ОкончаниеПериодаВыполнения, 
														СтрокаГрафикРаботы,
														ПериодыВыполнения);
												
						Если ПрерватьВыполнение Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Начало = Макс(ДатаПланирования, СтрокаГрафикРаботы.Начало);
					НачалоПериодаВыполнения = Начало;
				КонецЕсли;
				
				ПериодыВыполнения.Очистить();
				
			КонецЕсли;
			
			// Начнем учитывать периоды графика, если начало определено
			Если Начало <> Неопределено Тогда
				
				Окончание = Мин(Макс(СтрокаГрафикРаботы.Начало, Начало) + ВремяРаботы + ВремяПереналадки - 1, СтрокаГрафикРаботы.Окончание);
				
				ОкончаниеПредыдущегоГрафика = СтрокаГрафикРаботы.Окончание;
				
				ПрерватьВыполнение = ДобавитьПериодВыполнения(
												Макс(СтрокаГрафикРаботы.Начало, Начало), 
												Окончание, 
												ВремяРаботы, 
												ВремяПереналадки,
												ВремяРаботыВРабочееВремя,
												ВремяПереналадкиВРабочееВремя,
												НачалоПериодаВыполнения,
												ОкончаниеПериодаВыполнения, 
												СтрокаГрафикРаботы,
												ПериодыВыполнения);
				
				Если ПрерватьВыполнение Тогда
					ОкончаниеПериодаВыполнения = Окончание;
					Прервать;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла; 
	
		Если (НачалоПериодаВыполнения = '000101010000' ИЛИ ОкончаниеПериодаВыполнения = '000101010000')
			И ДанныеДляПолученияГрафика <> Неопределено Тогда
			
			НачалоТекущегоГрафика = КонецТекущегоГрафика + 1;
			КонецТекущегоГрафика  = КонецМесяца(КонецТекущегоГрафика + 1);
			
			// Не смогли определить период по данным текущего графика
			Если Год(КонецТекущегоГрафика) <= (ГодТекущегоГрафика + 1) Тогда
				
				// Получим график на следующий период и повторим попытку
				Если НЕ ЗначениеЗаполнено(ДанныеДляПолученияГрафика.РабочийЦентр) 
					ИЛИ НЕ ПараметрыРаботы.УчитыватьДоступность Тогда
					ИсточникГрафикаРаботы = ДанныеДляПолученияГрафика.Календарь;
				Иначе
					ИсточникГрафикаРаботы = ДанныеДляПолученияГрафика.РабочийЦентр;
				КонецЕсли; 
				
				ГрафикРаботы = ГрафикРаботыИсполнителя(
									ИсточникГрафикаРаботы,
									ДанныеДляПолученияГрафика.ДанныеГрафиков,
									ДанныеДляПолученияГрафика.ЗанятостьРЦ,
									НачалоТекущегоГрафика,
									КонецТекущегоГрафика);
				
				ИндексПервойСтрокиГрафика    = ИндексПоследнейСтрокиГрафика + 1;
				ИндексПоследнейСтрокиГрафика = ГрафикРаботы.Количество() - 1;
				
			Иначе
				
				ПланироватьВыполнение = Ложь;
				
			КонецЕсли; 
			
		Иначе
			ПланироватьВыполнение = Ложь;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если НачалоПериодаВыполнения = '000101010000' 
		ИЛИ ОкончаниеПериодаВыполнения = '000101010000' 
		ИЛИ НачатьНеПозже <> Неопределено
			И НачалоПериодаВыполнения > НачатьНеПозже
			
		// Нельзя начать выполнение позже чем более поздние в очереди
		ИЛИ НачалоПоследующих <> Неопределено
			И НачалоПоследующих < НачалоПериодаВыполнения Тогда
			
		НачалоПериодаВыполнения    = '000101010000';
		ОкончаниеПериодаВыполнения = '000101010000';
		ПериодыВыполнения.Очистить();
	КонецЕсли;
	
	Если НЕ ЕстьПериодВКоторомСвободнойЗагрузкиДостаточно Тогда
		СписокПроблем.Добавить("нет периода с достаточной свободной загрузкой");
	КонецЕсли; 
	
	ДанныеРасписания = Новый Структура;
	ДанныеРасписания.Вставить("НачалоПериодаВыполнения", НачалоПериодаВыполнения);
	ДанныеРасписания.Вставить("ОкончаниеПериодаВыполнения", ОкончаниеПериодаВыполнения);
	ДанныеРасписания.Вставить("ПериодыВыполнения", ПериодыВыполнения);
	ДанныеРасписания.Вставить("ВремяРаботыВРабочееВремя", ВремяРаботыВРабочееВремя);
	ДанныеРасписания.Вставить("ВремяПереналадкиВРабочееВремя", ВремяПереналадкиВРабочееВремя);
	ДанныеРасписания.Вставить("СписокПроблем", СписокПроблем);
							
	Возврат ДанныеРасписания;
	
КонецФункции

Функция ДобавитьПериодВыполнения(
		Начало, 
		Окончание, 
		ВремяРаботы, 
		ВремяПереналадки, 
		ВремяРаботыВРабочееВремя, 
		ВремяПереналадкиВРабочееВремя, 
		НачалоПериодаВыполнения, 
		ОкончаниеПериодаВыполнения, 
		СтрокаГрафикРаботы, 
		ПериодыВыполнения)

	ДанныеПериода = Новый Структура;
	ДанныеПериода.Вставить("Начало", Начало);
	ДанныеПериода.Вставить("Окончание", Окончание);
	ДанныеПериода.Вставить("ВремяРаботы", Макс(Окончание - Начало - ВремяПереналадки + 1, 0));
	
	// Вычислим время переналадки в рабочее время
	Если ВремяПереналадки <> 0 Тогда
		ОкончаниеПереналадки = Окончание - ВремяПереналадки;
		Если ОкончаниеПереналадки >= СтрокаГрафикРаботы.Начало Тогда
			
			НачалоВРабочееВремя = Макс(Начало, СтрокаГрафикРаботы.Начало);
			Если НЕ СтрокаГрафикРаботы.УжеЗанятоМЛ Тогда
				ВремяПереналадкиВРабочееВремя = ВремяПереналадкиВРабочееВремя + (ОкончаниеПереналадки - НачалоВРабочееВремя) + 1;
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли; 
	
	// Вычислим время работы в рабочее время
	ВремяРаботыВРабочееВремяВПериоде = 0;
	Если Окончание >= СтрокаГрафикРаботы.Начало И Окончание <= СтрокаГрафикРаботы.Окончание Тогда
		
		НачалоВРабочееВремя = Макс(Начало + ВремяПереналадки, СтрокаГрафикРаботы.Начало);
		Если НЕ СтрокаГрафикРаботы.УжеЗанятоМЛ Тогда
			ВремяРаботыВРабочееВремяВПериоде = (Окончание - НачалоВРабочееВремя) + 1;
			ВремяРаботыВРабочееВремя = ВремяРаботыВРабочееВремя + ВремяРаботыВРабочееВремяВПериоде;
		КонецЕсли; 
		
	КонецЕсли; 
	ДанныеПериода.Вставить("ВремяРаботыВРабочееВремя", ВремяРаботыВРабочееВремяВПериоде);
	
	// Уменьшим общее время работы и время переналадки
	ВремяПереналадкиВПериоде = Мин(ВремяПереналадки, Окончание - Начало + 1);
	ВремяПереналадки = ВремяПереналадки - ВремяПереналадкиВПериоде;
	ВремяРаботы = ВремяРаботы - ДанныеПериода.ВремяРаботы;
	
	Если ВремяРаботы <= 0 Тогда
		ОкончаниеПериодаВыполнения = Окончание;
	КонецЕсли;
	
	ПериодыВыполнения.Добавить(ДанныеПериода);
	
	Возврат (ВремяРаботы <= 0);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает данные о ключевом РЦ и его расписании
//
// Параметры:
//	МаршрутныйЛист	- ДокументОбъект.МаршрутныйЛист
//
// Возвращаемое значение:
//   Структура   - содержит ключевой РЦ и его расписание
//
Функция КлючевойРабочийЦентрИЕгоРасписание(МаршрутныйЛист) Экспорт

	КлючевойРабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
	КлючевойВидРабочегоЦентра = Справочники.ВидыРабочихЦентров.ПустаяСсылка();
	СоставлятьРасписание = Ложь;
	
	НачалоРаботыКлючевогоРабочегоЦентра    = '000101010000';
	ОкончаниеРаботыКлючевогоРабочегоЦентра = '000101010000';
	
	ВремяРаботы = 0;
	
	Если МаршрутныйЛист.ВидыРабочихЦентров.Количество() <> 0 Тогда
		
		ПараметрыПодразделения     = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(МаршрутныйЛист.Подразделение);
		КлючевыеВидыРабочихЦентров = ОперативныйУчетПроизводства.КлючевыеВидыРабочихЦентров(
											МаршрутныйЛист.Подразделение,
											ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(МаршрутныйЛист.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику, ПараметрыПодразделения.ИнтервалПланирования),
											ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(МаршрутныйЛист.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику, ПараметрыПодразделения.ИнтервалПланирования));
											
		Для каждого СтрокаВидРЦ Из МаршрутныйЛист.ВидыРабочихЦентров Цикл
	  		СтрокаКлючевойВидРЦ = КлючевыеВидыРабочихЦентров.Найти(СтрокаВидРЦ.ВидРабочегоЦентра, "ВидРабочегоЦентра");
			Если СтрокаКлючевойВидРЦ <> Неопределено И СтрокаКлючевойВидРЦ.Ключевой Тогда
				КлючевойВидРабочегоЦентра = СтрокаВидРЦ.ВидРабочегоЦентра;
				СоставлятьРасписание = СтрокаКлючевойВидРЦ.СоставлятьРасписание;
				Прервать;
			КонецЕсли;
		КонецЦикла;
											
		Если НЕ КлючевойВидРабочегоЦентра.Пустая() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасписаниеРаботыРабочихЦентров.РабочийЦентр КАК РабочийЦентр,
			|	СУММА(РасписаниеРаботыРабочихЦентров.ВремяРаботы) КАК ВремяРаботы,
			|	МИНИМУМ(РасписаниеРаботыРабочихЦентров.Начало) КАК Начало,
			|	МАКСИМУМ(РасписаниеРаботыРабочихЦентров.Окончание) КАК Окончание
			|ИЗ
			|	РегистрСведений.РасписаниеРаботыРабочихЦентров КАК РасписаниеРаботыРабочихЦентров
			|ГДЕ
			|	РасписаниеРаботыРабочихЦентров.МаршрутныйЛист = &МаршрутныйЛист
			|	И РасписаниеРаботыРабочихЦентров.РабочийЦентр.ВидРабочегоЦентра = &ВидРабочегоЦентра
			|
			|СГРУППИРОВАТЬ ПО
			|	РасписаниеРаботыРабочихЦентров.РабочийЦентр";
			
			Запрос.УстановитьПараметр("МаршрутныйЛист",    МаршрутныйЛист.Ссылка);
			Запрос.УстановитьПараметр("ВидРабочегоЦентра", КлючевойВидРабочегоЦентра);
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				КлючевойРабочийЦентр = Выборка.РабочийЦентр;
				
				Если Выборка.Начало <> '000101010000' И Выборка.Окончание <> '000101010000' Тогда
					НачалоРаботыКлючевогоРабочегоЦентра = Выборка.Начало;
					ОкончаниеРаботыКлючевогоРабочегоЦентра = Выборка.Окончание;
					ВремяРаботы = Выборка.ВремяРаботы;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли; 
	
	Если НачалоРаботыКлючевогоРабочегоЦентра = '000101010000' ИЛИ ОкончаниеРаботыКлючевогоРабочегоЦентра = '000101010000' Тогда
		Если НЕ КлючевойВидРабочегоЦентра.Пустая() Тогда
			
			ИнтервалПланирования = ИнтервалПланированияРаботыВидаРабочегоЦентра(КлючевойВидРабочегоЦентра);
			
			Для каждого СтрокаВидРЦ Из МаршрутныйЛист.ВидыРабочихЦентров Цикл
				Если СтрокаВидРЦ.ВидРабочегоЦентра = КлючевойВидРабочегоЦентра Тогда
					НачалоРаботыКлючевогоРабочегоЦентра = ?(НачалоРаботыКлючевогоРабочегоЦентра <> '000101010000', 
																Мин(СтрокаВидРЦ.ДатаИнтервала, НачалоРаботыКлючевогоРабочегоЦентра),
																СтрокаВидРЦ.ДатаИнтервала);
																	
					ОкончаниеРаботыКлючевогоРабочегоЦентра = ?(ОкончаниеРаботыКлючевогоРабочегоЦентра <> '000101010000',
																Макс(СтрокаВидРЦ.ДатаИнтервала, ОкончаниеРаботыКлючевогоРабочегоЦентра),
																СтрокаВидРЦ.ДатаИнтервала);
				КонецЕсли;
			КонецЦикла;
			
			Если ОкончаниеРаботыКлючевогоРабочегоЦентра <> '000101010000' Тогда
				ОкончаниеРаботыКлючевогоРабочегоЦентра = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(
																	ОкончаниеРаботыКлючевогоРабочегоЦентра, 
																	ИнтервалПланирования);
			КонецЕсли; 
			
		Иначе	
			НачалоРаботыКлючевогоРабочегоЦентра    = МаршрутныйЛист.НачалоРаботыКлючевогоРабочегоЦентраПоГрафику;
			ОкончаниеРаботыКлючевогоРабочегоЦентра = МаршрутныйЛист.ОкончаниеРаботыКлючевогоРабочегоЦентраПоГрафику;
		КонецЕсли; 
	КонецЕсли; 
	
	КлючевойРабочийЦентрИЕгоРасписание = Новый Структура;
	КлючевойРабочийЦентрИЕгоРасписание.Вставить("КлючевойВидРабочегоЦентра", КлючевойВидРабочегоЦентра);
	КлючевойРабочийЦентрИЕгоРасписание.Вставить("КлючевойРабочийЦентр", КлючевойРабочийЦентр);
	КлючевойРабочийЦентрИЕгоРасписание.Вставить("НачалоРаботыКлючевогоРабочегоЦентра", НачалоРаботыКлючевогоРабочегоЦентра);
	КлючевойРабочийЦентрИЕгоРасписание.Вставить("ОкончаниеРаботыКлючевогоРабочегоЦентра", ОкончаниеРаботыКлючевогоРабочегоЦентра);
	КлючевойРабочийЦентрИЕгоРасписание.Вставить("ВремяРаботы", ВремяРаботы);
	КлючевойРабочийЦентрИЕгоРасписание.Вставить("СоставлятьРасписание", СоставлятьРасписание);
	
	Возврат КлючевойРабочийЦентрИЕгоРасписание;
	
КонецФункции

Функция ОпределитьЗанятостьВИнтервалах(ПериодыВыполнения, ИнтервалПланирования) Экспорт

	// ВАЖНО
	// ПериодыВыполнения не должен содержать несколько интервалов планирования
	// Например, если интервал планирования Час, то нельзя использовать период 09:00 - 11:00
	// такой период нужно разбить на два 09:00 - 10:00, 10:00 - 11:00
	
	ЗанятостьВИнтервалах = Новый Соответствие;
	Для каждого ДанныеПериода Из ПериодыВыполнения Цикл
		
		ДатаИнтервала = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(ДанныеПериода.Начало, ИнтервалПланирования);
		
		ДанныеЗанятостиВИнтервале = ЗанятостьВИнтервалах.Получить(ДатаИнтервала);
		Если ДанныеЗанятостиВИнтервале = Неопределено Тогда
			ДанныеЗанятостиВИнтервале = Новый Структура;
			ДанныеЗанятостиВИнтервале.Вставить("ДатаИнтервала", ДатаИнтервала);
			ДанныеЗанятостиВИнтервале.Вставить("Начало", ДанныеПериода.Начало);
			ДанныеЗанятостиВИнтервале.Вставить("Окончание", ДанныеПериода.Окончание);
			ДанныеЗанятостиВИнтервале.Вставить("ВремяРаботы", ДанныеПериода.ВремяРаботы);
			ДанныеЗанятостиВИнтервале.Вставить("ВремяРаботыВРабочееВремя", ДанныеПериода.ВремяРаботыВРабочееВремя);
			ДанныеЗанятостиВИнтервале.Вставить("ВремяПереналадкиВРабочееВремя", 0);
		Иначе
			ДанныеЗанятостиВИнтервале.Вставить("Начало", Мин(ДанныеПериода.Начало, ДанныеЗанятостиВИнтервале.Начало));
			ДанныеЗанятостиВИнтервале.Вставить("Окончание", Макс(ДанныеПериода.Окончание, ДанныеЗанятостиВИнтервале.Окончание));
			
			ВремяРаботы = ДанныеПериода.ВремяРаботы + ДанныеЗанятостиВИнтервале.ВремяРаботы;
			ДанныеЗанятостиВИнтервале.Вставить("ВремяРаботы", ВремяРаботы);
			
			ВремяРаботыВРабочееВремя = ДанныеПериода.ВремяРаботыВРабочееВремя 
										+ ДанныеЗанятостиВИнтервале.ВремяРаботыВРабочееВремя;
			ДанныеЗанятостиВИнтервале.Вставить("ВремяРаботыВРабочееВремя", ВремяРаботыВРабочееВремя);
		КонецЕсли;
		
		ЗанятостьВИнтервалах.Вставить(ДатаИнтервала, ДанныеЗанятостиВИнтервале);
		
	КонецЦикла;

	Результат = Новый Массив;
	Для каждого ЗанятостьВИнтервалахКлючИЗначение Из ЗанятостьВИнтервалах Цикл
		Результат.Добавить(ЗанятостьВИнтервалахКлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
