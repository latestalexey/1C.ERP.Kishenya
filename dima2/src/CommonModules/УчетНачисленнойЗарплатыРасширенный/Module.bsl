
#Область СлужебныйПрограммныйИнтерфейс

// Формирует движения по регистрам подсистемы для авансовых расчетов.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//			ОплаченоДней
//			ОплаченоЧасов
//
//		Удержания - таблица значений с колонками
//			ФизическоеЛицо.
//			Удержание - ссылка на план видов расчета.
//			Сумма
//			СуммаКорректировкиВыплаты
//
//		БазаУдержаний - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Удержание - ссылка на план видов расчета.
//			Сумма - "вес" строки базы удержаний. В соответствии с данными 
//					весами и будет выполнено распределение удержаний.
//			
//		ПрочиеДоходы - таблица значений с колонками.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//		ХарактерВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//			Незаполненное значение - признак того, что регистрировать 
//			данные в подсистеме взаиморасчетов не требуется.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНачисленияУдержанияАвансом(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания, БазаУдержаний, ЗаписыватьДвижения = Ложь) Экспорт
	
	СтрокиНачислений = Новый Массив;
	СтрокиУдержаний = Новый Массив;
	
	Если Начисления <> Неопределено Тогда
		Для Каждого Строка Из Начисления Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникамАвансом.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
			СтрокиНачислений.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
		
	КонецЕсли;
	
	Если Удержания <> Неопределено Тогда
		
		// При использовании учета по источникам удержания уже распределены.
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
			
			Для Каждого Строка Из Удержания Цикл
				
				НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникамАвансом.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Период				= ПериодРегистрации;
				НоваяСтрока.ПериодДействия		= ПериодРегистрации;
				НоваяСтрока.Организация			= Организация;
				НоваяСтрока.НачислениеУдержание = Строка.Удержание;
				
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;

				СтрокиУдержаний.Добавить(НоваяСтрока);
				
			КонецЦикла;
			
		// При отсутствии учета по источникам удержания нужно распределить.
		Иначе
		
			Если БазаУдержаний = Неопределено Тогда
				// Получить данные для распределения удержаний по умолчанию.
				МассивФизическихЛиц = Новый Массив;
				Для Каждого Строка Из Удержания Цикл
					МассивФизическихЛиц.Добавить(Строка.ФизическоеЛицо);
				КонецЦикла;
				БазаУдержаний = ПолучитьБазуУдержанийАвансом(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация);
			КонецЕсли;
			
			СтрокиБезБазы = Новый Массив;
			Для Каждого Строка Из Удержания Цикл
				СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, БазаУдержаний);
				Если СтрокиРаспределения.Количество() = 0 Тогда
					СтрокиБезБазы.Добавить(Строка);
					Продолжить;
				КонецЕсли;
				Если Не СформироватьСтрокиУдержанийАвансом(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний) Тогда
					СтрокиБезБазы.Добавить(Строка);
				КонецЕсли;					
			КонецЦикла;
			
			// Получить массив физических лиц, данные которых еще не распределились.
			МассивФизическихЛиц = Новый Массив;
			Для Каждого СтрокаБезБазы Из СтрокиБезБазы Цикл
				МассивФизическихЛиц.Добавить(СтрокаБезБазы.ФизическоеЛицо);
			КонецЦикла;
			// Получить данные для распределения удержаний по умолчанию.
			БазаУдержанийПоУмолчанию = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(МассивФизическихЛиц, ПериодРегистрации, Организация);
			
			// Распределить те строки, которые остались без базы.
			Для Каждого Строка Из СтрокиБезБазы Цикл
				СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, БазаУдержанийПоУмолчанию);
				СформироватьСтрокиУдержанийАвансом(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний);
			КонецЦикла;
			
			Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записать();
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	НачисленияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	Для Каждого Строка Из СтрокиНачислений Цикл
		НоваяСтрока = НачисленияДляВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Для Каждого Строка Из СтрокиУдержаний Цикл
		НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	ВзаиморасчетыССотрудникамиРасширенный.ЗарегистрироватьНачисленныйАванс(
		Движения, Отказ, 
		Организация, ПериодРегистрации,
		НачисленияДляВзаиморасчетов, УдержанияДляВзаиморасчетов);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы для авансовых расчетов.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками (не обязательно)
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета 
//			ОтработаноДней
//			ОтработаноЧасов
//			ОплаченоДней
//			ОплаченоЧасов.
//			ПериодДействия - не обязательно.
//			ДатаНачала - не обязательно.
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьОтработанноеВремяАвансом(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если Начисления.Колонки.Найти("ПериодДействия") = Неопределено Тогда
		Начисления.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
		Начисления.ЗаполнитьЗначения(ПериодРегистрации, "ПериодДействия");
	КонецЕсли;
	
	Для Каждого Строка Из Начисления Цикл
		
		НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникамАвансом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Период 		= ПериодРегистрации;
		НоваяСтрока.Организация = Организация;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
	КонецЦикла;
	
	Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Истина;
		
	Если ЗаписыватьДвижения Тогда
		Движения.ОтработанноеВремяПоСотрудникамАвансом.Записать();
		Движения.ОтработанноеВремяПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		РезультатыРасчетаНДФЛ - таблица значений с колонками.
//			ФизическоеЛицо - обязательная
//          одна из пар колонок Сумма, СуммаКорректировкиВыплаты (необязательна при регистрации без распределения)
//          или НалогПоСтавке13, НалогПоСтавке13КЗачетуВозврату
//
//      МенеджерВременныхТаблиц - содержит вр. таблицу со списком людей по которым выполняется распределение НДФЛ
//      	ВТФизическиеЛица 
//				ФизическоеЛицо.
//
//		РегистрироватьВзаиморасчеты - признак того, что требуется зарегистрировать 
//			данные в подсистеме взаиморасчетов.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//			
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНДФЛАвансом(Движения, Отказ, Организация, ПериодРегистрации, РезультатыРасчетаНДФЛ, МенеджерВременныхТаблиц, ЗаписыватьДвижения = Ложь) Экспорт
	

	Если РезультатыРасчетаНДФЛ.Колонки.Найти("Сумма") = Неопределено И РезультатыРасчетаНДФЛ.Колонки.Найти("Налог") <> Неопределено Тогда
		РезультатыРасчетаНДФЛ.Колонки.Налог.Имя = "Сумма";
	КонецЕсли;
	
	ТаблицаНДФЛ = УчетНДФЛ.РаспределитьНДФЛПоГруппамУчета(Организация, ПериодРегистрации, РезультатыРасчетаНДФЛ);
	
	УдержанияДляВзаиморасчетов = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	// При использовании учета по источникам НДФЛ уже распределен.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		УдержанияПоРабочимМестам = НоваяТаблицаУдержанияПоРабочимМестамАвансом();
		Для Каждого Строка Из РезультатыРасчетаНДФЛ Цикл
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		КонецЦикла;
	Иначе
		ТаблицыНДФЛиВС = УчетНДФЛ.РазделитьТаблицуНаНДФЛиВС(ТаблицаНДФЛ);
		
		Если Истина Тогда
			//Относим на основные места работы
			ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНДФЛ, "ФизическоеЛицо", Истина);
			СотрудникиФизическиеЛица = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическиеЛицаМассив, Истина, Организация, ПериодРегистрации);
			Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиФизическиеЛица, "Сотрудник", Истина);
			
			// По основным сотрудникам запрашиваем сведения о рабочих местах на конец месяца.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, Сотрудники, "Подразделение", КонецМесяца(ПериодРегистрации));
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			| КадровыеДанныеСотрудников.ФизическоеЛицо,
			| КадровыеДанныеСотрудников.Сотрудник,
			| КадровыеДанныеСотрудников.Подразделение
			|ИЗ
			| ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
			
			ТаблицаМестРаботы = Запрос.Выполнить().Выгрузить();
			
			УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.УдержанияПоОсновнымРабочимМестам(ТаблицыНДФЛиВС.ТаблицаНДФЛ, ПериодРегистрации, Организация, ТаблицаМестРаботы, Истина, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
			УдержанияПоРабочимМестамВС = УчетНачисленнойЗарплаты.УдержанияПоОсновнымРабочимМестам(ТаблицыНДФЛиВС.ТаблицаВС, ПериодРегистрации, Организация, ТаблицаМестРаботы, Истина, Перечисления.ВидыОсобыхНачисленийИУдержаний.ВоенныйСбор);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестамВС, УдержанияПоРабочимМестам);
			
		Иначе		
			// При отсутствии учета по источникам НДФЛ нужно распределить.
			ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(РезультатыРасчетаНДФЛ, "ФизическоеЛицо", Истина);
			БазаРасчетаНДФЛ = УчетНДФЛ.ПолучитьБазуРасчетаНДФЛ(Организация, ПериодРегистрации, ФизическиеЛицаМассив);
			УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.УдержанияПоРабочимМестам(РезультатыРасчетаНДФЛ, ПериодРегистрации, Организация, БазаРасчетаНДФЛ, Истина, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
		КонецЕсли;	
	КонецЕсли;
	
	// Заполняем движения 
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникамАвансом);
	
	Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Истина;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записать();
		Движения.НачисленияУдержанияПоСотрудникамАвансом.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
		НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	ВзаиморасчетыССотрудникамиРасширенный.ЗарегистрироватьНачисленныйАванс(
		Движения, Отказ, 
		Организация, ПериодРегистрации,
		Неопределено, УдержанияДляВзаиморасчетов);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
// Выполняет распределение удержанных займов по базе начислений сотрудника.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		ПогашениеЗаймов - таблица значений с колонками
//			ФизическоеЛицо.
//			Подразделение
//			ВидУдержания - ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний
//			Сумма
//		ХарактерВыплаты - ПеречислениеСсылка.ХарактерВыплатыЗарплаты
//			Незаполненное значение - признак того, что регистрировать 
//			данные в подсистеме взаиморасчетов не требуется.
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьПогашениеЗаймов(Движения, Отказ, Организация, ПериодРегистрации, ПогашениеЗаймов, ХарактерВыплаты = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	

	УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		// При использовании учета по источникам удержания уже распределены.
		
		УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.НоваяТаблицаУдержанияПоРабочимМестам();
		Для Каждого Строка Из ПогашениеЗаймов Цикл
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.ПериодДействия		= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.НачислениеУдержание = Строка.ВидУдержания;
			Если Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
					Или Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
			Иначе
				НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			КонецЕсли		
			
		КонецЦикла;
		
		// Заполняем движения 
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
		
		// Данные для взаиморасчетов
		Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
			Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано Тогда
				НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли	
		КонецЦикла;
		
	Иначе
		// При отсутствии учета по источникам удержания нужно распределить.
		
			Если Истина Тогда
				//Относим на основные места работы
				ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ПогашениеЗаймов, "ФизическоеЛицо", Истина);
				СотрудникиФизическиеЛица = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(ФизическиеЛицаМассив, Истина, Организация, ПериодРегистрации);
				Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиФизическиеЛица, "Сотрудник", Истина);
				
				// По основным сотрудникам запрашиваем сведения о рабочих местах на конец месяца.
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, Сотрудники, "Подразделение", КонецМесяца(ПериодРегистрации));
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				| КадровыеДанныеСотрудников.ФизическоеЛицо,
				| КадровыеДанныеСотрудников.Сотрудник,
				| КадровыеДанныеСотрудников.Подразделение
				|ИЗ
				| ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
				
				ТаблицаМестРаботы = Запрос.Выполнить().Выгрузить();
				
				СтрокиУдержаний = УчетНачисленнойЗарплаты.УдержанияПоОсновнымРабочимМестам(ПогашениеЗаймов, ПериодРегистрации, Организация, ТаблицаМестРаботы, Истина);
				
				СтрокиУдержаний.ЗаполнитьЗначения(Справочники.ГруппыУчетаНачисленийИУдержаний.Зарплата,"ГруппаУчетаНачислений");
				
				Для Каждого Строка из СтрокиУдержаний Цикл
					Если Строка.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
						Или Строка.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда 
						Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
					КонецЕсли;
				Конеццикла;	
				// Заполняем движения 
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокиУдержаний, Движения.НачисленияУдержанияПоСотрудникам);
				Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
				
			Иначе		
				СтрокиУдержаний = Новый Массив;

				// Получить данные для распределения удержаний по умолчанию.
				МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ПогашениеЗаймов, "ФизическоеЛицо", Истина);
				БазаУдержаний = УчетНачисленнойЗарплаты.ПолучитьБазуУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация);
				
				СтрокиБезБазы = Новый Массив;
				Для Каждого Строка Из ПогашениеЗаймов Цикл
					СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, БазаУдержаний, Строка.Подразделение);
					Если СтрокиРаспределения.Количество() = 0 Тогда
						// Если не нашлись строки по физическому лицу и подразделению, то попробуем найти хотя бы по физическому лицу.
						СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, БазаУдержаний);
						Если СтрокиРаспределения.Количество() = 0 Тогда
							// Если вовсе нет строк по физлицу в базе удержаний, запомним эту строку.
							СтрокиБезБазы.Добавить(Строка);
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					Распределено = Ложь;
					Если Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
							Или Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
						Распределено = СформироватьСтрокиСправочно(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний, Строка.ВидУдержания);
					Иначе 
						Распределено = УчетНачисленнойЗарплаты.СформироватьСтрокиУдержаний(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний, Строка.ВидУдержания);
					КонецЕсли;
					Если Не Распределено Тогда
						СтрокиБезБазы.Добавить(Строка);
					КонецЕсли;					
				КонецЦикла;
				
				// Получить массив физических лиц, данные которых еще не распределились.
				МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиБезБазы, "ФизическоеЛицо", Истина);
				// Получить данные для распределения удержаний по умолчанию.
				БазаУдержанийПоУмолчанию = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(МассивФизическихЛиц, ПериодРегистрации, Организация);
				
				// Распределить те строки, которые остались без базы.
				Для Каждого Строка Из СтрокиБезБазы Цикл
					СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, БазаУдержанийПоУмолчанию, Строка.Подразделение);
					Если СтрокиРаспределения.Количество() = 0 Тогда
						// Если не нашлись строки по физическому лицу и подразделению, то попробуем найти хотя бы по физическому лицу.
						СтрокиРаспределения = УчетНачисленнойЗарплаты.СтрокиРаспределенияПоБазе(Строка.ФизическоеЛицо, БазаУдержанийПоУмолчанию);
					КонецЕсли;
					Если Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
							Или Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда 
						Распределено = СформироватьСтрокиСправочно(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний, Строка.ВидУдержания);
					Иначе 
						Распределено = УчетНачисленнойЗарплаты.СформироватьСтрокиУдержаний(Движения, Организация, ПериодРегистрации, Строка, СтрокиРаспределения, СтрокиУдержаний, Строка.ВидУдержания);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;	
		
		Для Каждого Строка Из СтрокиУдержаний Цикл
			Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЕсли;	

	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	Если ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ХарактерВыплаты,
			Неопределено, УдержанияДляВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру НачисленииУдержанияПоКонтрагентамАкционерам.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление - ссылка на план видов расчета.
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//			ОплаченоДней
//			ОплаченоЧасов
//
//		Удержания - таблица значений с колонками
//			ФизическоеЛицо.
//			Удержание - ссылка на план видов расчета.
//			Сумма
//			СуммаКорректировкиВыплаты
//
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено, НДФЛ = Неопределено, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если Начисления <> Неопределено Тогда
		
		Для Каждого Строка Из Начисления Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если Удержания <> Неопределено Тогда
		
		Для Каждого Строка Из Удержания Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если НДФЛ <> Неопределено Тогда
		
		Для Каждого Строка Из НДФЛ Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = Строка.Подразделение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты      = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
		
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записать();
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаНачисленияУдержанияПоСотрудникам() Экспорт
	
	МассивТиповНачислениеУдержание = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Измерения.НачислениеУдержание.Тип.Типы();
	МассивТиповДокументОснование = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам.Реквизиты.ДокументОснование.Тип.Типы();
	
	Таблица = Новый ТаблицаЗначений;

	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Таблица.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",  Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("НачислениеУдержание", Новый ОписаниеТипов(МассивТиповНачислениеУдержание));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Таблица.Колонки.Добавить("ГруппаНачисленияУдержанияВыплаты", Новый ОписаниеТипов("ПеречислениеСсылка.ГруппыНачисленияУдержанияВыплаты"));
	Таблица.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(МассивТиповДокументОснование));
	Таблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("ТерриторияВыполненияРаботВОрганизации", Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.ТерриторииВыполненияРаботВОрганизации.Тип));
	Таблица.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));

	Возврат Таблица;
	
КонецФункции

// Формирует движения по регистру ОтработанноеВремяПоСотрудникамКорректировка, 
// предназначенный для корректного учета отработанных дней при наличии более одного вида рабочего времени за день.
//
Процедура ЗарегистрироватьКорректировкиОтработанногоВремени(Движения, ЗаписыватьДвижения = Ложь) Экспорт
	
	// Если к этому моменту не была выполнена запись необходимых для чтения наборов записей, выполним ее.
	Если Движения.ОтработанноеВремяПоСотрудникам.Записывать Тогда
		Движения.ОтработанноеВремяПоСотрудникам.Записать();
		Движения.ОтработанноеВремяПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	Если Движения.Начисления.Записывать Тогда
		Движения.Начисления.Записать();
		Движения.Начисления.Записывать = Ложь;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Движения.ОтработанноеВремяПоСотрудникам.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтработанноеВремяПоСотрудникам.Период КАК ПериодРегистрации,
	|	ОтработанноеВремяПоСотрудникам.ПериодДействия,
	|	ОтработанноеВремяПоСотрудникам.ДатаНачала,
	|	ОтработанноеВремяПоСотрудникам.Организация,
	|	ОтработанноеВремяПоСотрудникам.ФизическоеЛицо,
	|	ОтработанноеВремяПоСотрудникам.Сотрудник,
	|	ОтработанноеВремяПоСотрудникам.Подразделение,
	|	ОтработанноеВремяПоСотрудникам.Начисление,
	|	ОтработанноеВремяПоСотрудникам.ГруппаНачисленияУдержанияВыплаты
	|ПОМЕСТИТЬ ВТОтработанноеВремяПоДокументу
	|ИЗ
	|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
	|ГДЕ
	|	ОтработанноеВремяПоСотрудникам.Регистратор = &Регистратор
	|	И ОтработанноеВремяПоСотрудникам.Начисление.ЗачетНормыВремени = ИСТИНА
	|	И ОтработанноеВремяПоСотрудникам.Начисление.ЗачетОтработанногоВремени = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтработанноеВремяПоСотрудникам.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФПДНачислений.Регистратор,
	|	ФПДНачислений.НомерСтроки,
	|	ФПДНачислений.Сторно,
	|	ФПДНачислений.Сотрудник,
	|	ФПДНачислений.ВидРасчета,
	|	ФПДНачислений.ПериодРегистрации,
	|	ФПДНачислений.ПериодРегистрацииВремени,
	|	ФПДНачислений.ПериодДействия,
	|	ФПДНачислений.ПериодДействияНачало,
	|	ФПДНачислений.ПериодДействияКонец
	|ПОМЕСТИТЬ ВТФПДНачислений
	|ИЗ
	|	РегистрРасчета.Начисления.ФактическийПериодДействия(
	|			ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
	|				И ВидРасчета.ЗачетНормыВремени = ИСТИНА
	|				И (ПериодРегистрации, ПериодДействия, Сотрудник) В
	|					(ВЫБРАТЬ
	|						ВТОтработанноеВремяПоДокументу.ПериодРегистрации,
	|						ВТОтработанноеВремяПоДокументу.ПериодДействия,
	|						ВТОтработанноеВремяПоДокументу.Сотрудник
	|					ИЗ
	|						ВТОтработанноеВремяПоДокументу)) КАК ФПДНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФПДНачислений.Сотрудник,
	|	ФПДНачислений.ВидРасчета КАК Начисление,
	|	ФПДНачислений.Сторно,
	|	ФПДНачислений.ПериодРегистрации,
	|	ФПДНачислений.ПериодДействия,
	|	ФПДНачислений.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени,
	|	ФПДНачислений.ПериодРегистрацииВремени,
	|	ФПДНачислений.ПериодДействияНачало КАК НачалоИнтервала,
	|	ФПДНачислений.ПериодДействияКонец КАК ОкончаниеИнтервала
	|ПОМЕСТИТЬ ВТПересекающиесяНачисления
	|ИЗ
	|	ВТФПДНачислений КАК ФПДНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ФПДПересечения
	|		ПО (ФПДПересечения.Сотрудник = ФПДНачислений.Сотрудник)
	|			И (ФПДПересечения.Сторно = ФПДНачислений.Сторно)
	|			И (ФПДПересечения.ПериодРегистрации = ФПДНачислений.ПериодРегистрации)
	|			И (ФПДПересечения.ВидРасчета <> ФПДНачислений.ВидРасчета)
	|			И (ФПДПересечения.Регистратор <> ФПДНачислений.Регистратор
	|				ИЛИ ФПДПересечения.НомерСтроки <> ФПДНачислений.НомерСтроки)
	|			И (ФПДПересечения.ПериодДействияНачало <= ФПДНачислений.ПериодДействияКонец)
	|			И (ФПДПересечения.ПериодДействияКонец >= ФПДНачислений.ПериодДействияНачало)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пересечения.Сотрудник,
	|	Пересечения.ПериодРегистрации КАК ДатаАктуальности,
	|	Пересечения.ПериодДействия КАК Месяц,
	|	НАЧАЛОПЕРИОДА(Пересечения.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(Пересечения.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиДляРасчетаВремени
	|ИЗ
	|	ВТПересекающиесяНачисления КАК Пересечения";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанныхОВремени = УчетРабочегоВремени.ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников();
	ПараметрыПолученияДанныхОВремени.ИмяВТСотрудники = "ВТСотрудникиДляРасчетаВремени";
	
	// Для полученных пересечений периодов, нужно определить фактическое рабочее время (количество дней).
	УчетРабочегоВремени.СоздатьВТДанныеУчетаРабочегоВремениСотрудников(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанныхОВремени);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПересекающиесяНачисления.Сотрудник,
	|	ПересекающиесяНачисления.ПериодРегистрации,
	|	ПересекающиесяНачисления.НачалоИнтервала,
	|	ПересекающиесяНачисления.ВидУчетаВремени
	|ПОМЕСТИТЬ ВТНетДанныхПоВидуУчетаВремени
	|ИЗ
	|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
	|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
	|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
	|			И (ФактическоеВремя.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
	|ГДЕ
	|	ФактическоеВремя.ВидУчетаВремени ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересекающиесяНачисления.Сотрудник,
	|	ПересекающиесяНачисления.Начисление,
	|	ПересекающиесяНачисления.Начисление.РеквизитДопУпорядочивания КАК ИндексНачисления,
	|	ПересекающиесяНачисления.Сторно,
	|	ПересекающиесяНачисления.ПериодРегистрации,
	|	ПересекающиесяНачисления.ПериодДействия,
	|	ПересекающиесяНачисления.НачалоИнтервала,
	|	ФактическоеВремя.Дата
	|ПОМЕСТИТЬ ВТДанныеПоДням
	|ИЗ
	|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
	|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
	|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
	|			И (ФактическоеВремя.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
	|			И (ФактическоеВремя.Дата МЕЖДУ ПересекающиесяНачисления.НачалоИнтервала И ПересекающиесяНачисления.ОкончаниеИнтервала)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПересекающиесяНачисления.Сотрудник,
	|	ПересекающиесяНачисления.Начисление,
	|	ПересекающиесяНачисления.Начисление.РеквизитДопУпорядочивания,
	|	ПересекающиесяНачисления.Сторно,
	|	ПересекающиесяНачисления.ПериодРегистрации,
	|	ПересекающиесяНачисления.ПериодДействия,
	|	ПересекающиесяНачисления.НачалоИнтервала,
	|	ФактическоеВремя.Дата
	|ИЗ
	|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
	|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
	|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
	|			И (ФактическоеВремя.ВидУчетаВремени = &РабочееВремя)
	|			И (ФактическоеВремя.Дата МЕЖДУ ПересекающиесяНачисления.НачалоИнтервала И ПересекающиесяНачисления.ОкончаниеИнтервала)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНетДанныхПоВидуУчетаВремени КАК НетДанныхПоВидуУчетаВремени
	|		ПО (НетДанныхПоВидуУчетаВремени.Сотрудник = ПересекающиесяНачисления.Сотрудник)
	|			И (НетДанныхПоВидуУчетаВремени.ПериодРегистрации = ПересекающиесяНачисления.ПериодРегистрации)
	|			И (НетДанныхПоВидуУчетаВремени.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПересекающиесяНачисления.Сотрудник,
	|	ПересекающиесяНачисления.ПериодРегистрации,
	|	ПересекающиесяНачисления.ПериодДействия,
	|	ПересекающиесяНачисления.НачалоИнтервала,
	|	ПересекающиесяНачисления.Дата,
	|	ПересекающиесяНачисления.Сторно,
	|	МИНИМУМ(ПересекающиесяНачисления.ИндексНачисления) КАК ИндексНачисления
	|ПОМЕСТИТЬ ВТПриоритетыНачислений
	|ИЗ
	|	ВТДанныеПоДням КАК ПересекающиесяНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПересекающиесяНачисления.Сотрудник,
	|	ПересекающиесяНачисления.ПериодРегистрации,
	|	ПересекающиесяНачисления.ПериодДействия,
	|	ПересекающиесяНачисления.НачалоИнтервала,
	|	ПересекающиесяНачисления.Дата,
	|	ПересекающиесяНачисления.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеобходимыеКорректировки.Сотрудник,
	|	НеобходимыеКорректировки.Начисление,
	|	НеобходимыеКорректировки.ПериодРегистрации,
	|	НеобходимыеКорректировки.ПериодДействия,
	|	НеобходимыеКорректировки.ДатаНачала,
	|	НеобходимыеКорректировки.Сторно,
	|	ВЫБОР
	|		КОГДА НеобходимыеКорректировки.Сторно
	|			ТОГДА -НеобходимыеКорректировки.КорректировкаДней
	|		ИНАЧЕ НеобходимыеКорректировки.КорректировкаДней
	|	КОНЕЦ КАК КорректировкаДней
	|ПОМЕСТИТЬ ВТНеобходимыеКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
	|		ПересекающиесяНачисления.Начисление КАК Начисление,
	|		ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ПересекающиесяНачисления.ПериодДействия КАК ПериодДействия,
	|		ПересекающиесяНачисления.НачалоИнтервала КАК ДатаНачала,
	|		ПересекающиесяНачисления.Сторно КАК Сторно,
	|		КОЛИЧЕСТВО(ПересекающиесяНачисления.Дата) КАК КорректировкаДней
	|	ИЗ
	|		ВТДанныеПоДням КАК ПересекающиесяНачисления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыНачислений КАК ПриоритетыНачислений
	|			ПО ПересекающиесяНачисления.Сотрудник = ПриоритетыНачислений.Сотрудник
	|				И ПересекающиесяНачисления.Сторно = ПриоритетыНачислений.Сторно
	|				И ПересекающиесяНачисления.ПериодРегистрации = ПриоритетыНачислений.ПериодРегистрации
	|				И ПересекающиесяНачисления.ПериодДействия = ПриоритетыНачислений.ПериодДействия
	|				И ПересекающиесяНачисления.НачалоИнтервала = ПриоритетыНачислений.НачалоИнтервала
	|				И ПересекающиесяНачисления.Дата = ПриоритетыНачислений.Дата
	|				И ПересекающиесяНачисления.ИндексНачисления <> ПриоритетыНачислений.ИндексНачисления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПересекающиесяНачисления.Сотрудник,
	|		ПересекающиесяНачисления.Начисление,
	|		ПересекающиесяНачисления.ПериодРегистрации,
	|		ПересекающиесяНачисления.НачалоИнтервала,
	|		ПересекающиесяНачисления.ПериодДействия,
	|		ПересекающиесяНачисления.Сторно) КАК НеобходимыеКорректировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыполненныеКорректировки.Период КАК ПериодРегистрации,
	|	ВыполненныеКорректировки.ПериодДействия КАК ПериодДействия,
	|	ВыполненныеКорректировки.ДатаНачала КАК ДатаНачала,
	|	ВыполненныеКорректировки.Организация КАК Организация,
	|	ВыполненныеКорректировки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВыполненныеКорректировки.Сотрудник КАК Сотрудник,
	|	ВыполненныеКорректировки.Подразделение КАК Подразделение,
	|	ВыполненныеКорректировки.Начисление КАК Начисление,
	|	СУММА(ВыполненныеКорректировки.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(ВыполненныеКорректировки.ОплаченоДней) КАК ОплаченоДней
	|ПОМЕСТИТЬ ВТВыполненныеКорректировки
	|ИЗ
	|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ВыполненныеКорректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоДокументу КАК ОтработанноеВремяПоДокументу
	|		ПО (ОтработанноеВремяПоДокументу.Сотрудник = ВыполненныеКорректировки.Сотрудник)
	|			И (ОтработанноеВремяПоДокументу.ПериодРегистрации = ВыполненныеКорректировки.Период)
	|			И (ОтработанноеВремяПоДокументу.ПериодДействия = ВыполненныеКорректировки.ПериодДействия)
	|			И (ОтработанноеВремяПоДокументу.ДатаНачала = ВыполненныеКорректировки.ДатаНачала)
	|			И (ОтработанноеВремяПоДокументу.Начисление = ВыполненныеКорректировки.Начисление)
	|			И (ВыполненныеКорректировки.Регистратор <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыполненныеКорректировки.Период,
	|	ВыполненныеКорректировки.ПериодДействия,
	|	ВыполненныеКорректировки.ДатаНачала,
	|	ВыполненныеКорректировки.Организация,
	|	ВыполненныеКорректировки.ФизическоеЛицо,
	|	ВыполненныеКорректировки.Сотрудник,
	|	ВыполненныеКорректировки.Подразделение,
	|	ВыполненныеКорректировки.Начисление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеобходимыеКорректировки.Сотрудник,
	|	НеобходимыеКорректировки.Начисление,
	|	НеобходимыеКорректировки.Сторно,
	|	НеобходимыеКорректировки.ПериодРегистрации,
	|	НеобходимыеКорректировки.ПериодДействия,
	|	НеобходимыеКорректировки.ДатаНачала,
	|	НеобходимыеКорректировки.КорректировкаДней
	|ИЗ
	|	ВТНеобходимыеКорректировки КАК НеобходимыеКорректировки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеобходимыеКорректировки.Сотрудник,
	|	НеобходимыеКорректировки.Начисление,
	|	НеобходимыеКорректировки.ПериодРегистрации,
	|	НеобходимыеКорректировки.ПериодДействия,
	|	НеобходимыеКорректировки.ДатаНачала,
	|	НеобходимыеКорректировки.КорректировкаДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеобходимыеКорректировки.Сотрудник,
	|	НеобходимыеКорректировки.Начисление,
	|	НеобходимыеКорректировки.Сторно,
	|	НеобходимыеКорректировки.ПериодРегистрации,
	|	НеобходимыеКорректировки.ПериодДействия,
	|	НеобходимыеКорректировки.ДатаНачала,
	|	НеобходимыеКорректировки.КорректировкаДней,
	|	ОтработанноеВремяПоДокументу.Подразделение,
	|	ОтработанноеВремяПоДокументу.ФизическоеЛицо,
	|	ОтработанноеВремяПоДокументу.Организация,
	|	ОтработанноеВремяПоДокументу.ГруппаНачисленияУдержанияВыплаты,
	|	ОтработанноеВремяПоДокументу.ОтработаноДней КАК ОтработаноДнейЗарегистрировано,
	|	ОтработанноеВремяПоДокументу.ОплаченоДней КАК ОплаченоДнейЗарегистрировано,
	|	ЕСТЬNULL(ВыполненныеКорректировки.ОтработаноДней, 0) КАК ОтработаноДнейКорректировка,
	|	ЕСТЬNULL(ВыполненныеКорректировки.ОплаченоДней, 0) КАК ОплаченоДнейКорректировка
	|ИЗ
	|	ВТНеобходимыеКорректировки КАК НеобходимыеКорректировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоДокументу
	|		ПО (ОтработанноеВремяПоДокументу.Сотрудник = НеобходимыеКорректировки.Сотрудник)
	|			И (ОтработанноеВремяПоДокументу.Начисление = НеобходимыеКорректировки.Начисление)
	|			И (ОтработанноеВремяПоДокументу.Период = НеобходимыеКорректировки.ПериодРегистрации)
	|			И (ОтработанноеВремяПоДокументу.ПериодДействия = НеобходимыеКорректировки.ПериодДействия)
	|			И (ОтработанноеВремяПоДокументу.ДатаНачала = НеобходимыеКорректировки.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполненныеКорректировки КАК ВыполненныеКорректировки
	|		ПО (ВыполненныеКорректировки.Сотрудник = НеобходимыеКорректировки.Сотрудник)
	|			И (ВыполненныеКорректировки.Начисление = НеобходимыеКорректировки.Начисление)
	|			И (ВыполненныеКорректировки.Подразделение = ОтработанноеВремяПоДокументу.Подразделение)
	|			И (ВыполненныеКорректировки.ПериодРегистрации = НеобходимыеКорректировки.ПериодРегистрации)
	|			И (ВыполненныеКорректировки.ДатаНачала = НеобходимыеКорректировки.ДатаНачала)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НеобходимыеКорректировки.Сотрудник,
	|	НеобходимыеКорректировки.Начисление,
	|	НеобходимыеКорректировки.ПериодРегистрации,
	|	НеобходимыеКорректировки.ПериодДействия,
	|	НеобходимыеКорректировки.ДатаНачала,
	|	НеобходимыеКорректировки.КорректировкаДней";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Для обхода используем две выборки: 
	// - первая - это необходимые корректировки
	// - вторая - развернутые по подразделениям значения зарегистрированного времени и уже выполненные корректировки
	// нужна для уточненного заполнения подразделений, сведения о которых теряются в регистре расчета.
	
	ВыборкаКорректировок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	СтруктураПоиска = Новый Структура("Сотрудник, Начисление, ПериодРегистрации, ПериодДействия, ДатаНачала, Сторно");
	Пока ВыборкаКорректировок.Следующий() Цикл
		// Количество дней, которые нужно в целом по этому виду расчета скорректировать.
		КорректировкаПоНачислению = ВыборкаКорректировок.КорректировкаДней;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаКорректировок);
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			// Если строка с признаком сторно применяем обратные правила арифметики.
			// НеобходимаяКорректировка - значение, которое всего по этой строке предполагалось записать без учета уже ранее
			//                            выполненных корректировок.
			// КорректировкаПоСтроке - значение по этой строке с учетом ранее выполненных корректировок.
			Если ВыборкаКорректировок.Сторно Тогда
				НеобходимаяКорректировка = Макс(КорректировкаПоНачислению, Выборка.ОтработаноДнейЗарегистрировано);
				КорректировкаПоСтроке = Мин(НеобходимаяКорректировка - Выборка.ОтработаноДнейКорректировка, 0);
			Иначе
				НеобходимаяКорректировка = Мин(КорректировкаПоНачислению, Выборка.ОтработаноДнейЗарегистрировано);
				КорректировкаПоСтроке = Макс(НеобходимаяКорректировка - Выборка.ОтработаноДнейКорректировка, 0);
			КонецЕсли;
			
			// Уменьшаем остаток корректируемых дней.
			КорректировкаПоНачислению = КорректировкаПоНачислению - НеобходимаяКорректировка;
			
			Если КорректировкаПоСтроке = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникамКорректировка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Период = Выборка.ПериодРегистрации;
			НоваяСтрока.ОтработаноДней = - КорректировкаПоСтроке;
			НоваяСтрока.ОплаченоДней = - КорректировкаПоСтроке;
			
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать Тогда
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записать();
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу значений с колонками
//	ФизическоеЛицо.
//	Сотрудник
//	Подразделение
//	Сумма
//
// Параметры:
//	Движения - движения регистратора, которые формируются в СформироватьДвижения
//	МассивФизическихЛиц
//	ПериодРегистрации.
//	Организация
//
Функция ПолучитьБазуУдержанийАвансом(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация)
	
	// регистратор движений
	Регистратор = Движения.НачисленияУдержанияПоСотрудникамАвансом.Отбор.Регистратор.Значение;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= МассивФизическихЛиц;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	// Получим данные о начислениях из других регистраторов.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияУдержания.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	НачисленияУдержания.Сотрудник,
	               |	НачисленияУдержания.Подразделение,
	               |	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержания
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
	               |		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
	               |ГДЕ
	               |	НачисленияУдержания.Регистратор <> &Регистратор
	               |	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	               |	И НачисленияУдержания.Организация = &Организация
	               |	И НачисленияУдержания.Период = &ПериодРегистрации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НачисленияУдержания.Сотрудник.ФизическоеЛицо,
	               |	НачисленияУдержания.Сотрудник,
	               |	НачисленияУдержания.Подразделение";
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	БазаУдержаний = Запрос.Выполнить().Выгрузить();
	
	// Дополним данными из текущих движений.
	Для Каждого Строка Из Движения.НачисленияУдержанияПоСотрудникамАвансом Цикл
		Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
			Если МассивФизическихЛиц.Найти(Строка.ФизическоеЛицо) = НеОпределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокиБазы = БазаУдержаний.НайтиСтроки(Новый Структура("Сотрудник,Подразделение", Строка.Сотрудник, Строка.Подразделение));
			Если СтрокиБазы.Количество() = 0 Тогда
				СтрокаБазы = БазаУдержаний.Добавить();
				СтрокаБазы.ФизическоеЛицо = Строка.ФизическоеЛицо;
				СтрокаБазы.Сотрудник = Строка.Сотрудник;
				СтрокаБазы.Подразделение = Строка.Подразделение;
				СтрокаБазы.Сумма = 0;
			Иначе
				СтрокаБазы = СтрокиБазы[0];
			КонецЕсли;
			СтрокаБазы.Сумма = СтрокаБазы.Сумма + Строка.Сумма;
		КонецЕсли;
				
	КонецЦикла;
	Возврат БазаУдержаний;
	
КонецФункции

// Формирует строки удержаний путем распределения исходной строки по сотрудникам и подразделениям.
//
// Параметры:
//	Движения
//	ПериодРегистрации
//	ИсходнаяСтрока
//	СтрокиРаспределения
//	СтрокиУдержаний - массив строк, добавленных в движения как удержания.
//	ВидУдержания - если задан конкретный вид удержания - прописывается он, если нет - берется из исходной строки.
// Возвращаемое значение:
//	Истина, если удалось сформировать строки по переданные.
//
Функция СформироватьСтрокиУдержанийАвансом(Движения, Организация, ПериодРегистрации, ИсходнаяСтрока, СтрокиРаспределения, СтрокиУдержаний, ВидУдержания = НеОпределено, РегистрацияВНалоговомОргане = Неопределено)
	
	Коэффициенты = Новый Массив();
	Для Каждого Строка Из СтрокиРаспределения Цикл
		Коэффициенты.Добавить(Строка.Сумма);
	КонецЦикла;
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ИсходнаяСтрока.Сумма, Коэффициенты);
	Если МассивСумм = НеОпределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексСтроки = 0 По СтрокиРаспределения.Количество() - 1 Цикл
		СтрокаРаспределения = СтрокиРаспределения[ИндексСтроки];
		НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникамАвансом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.Период			= ПериодРегистрации;
		НоваяСтрока.ПериодДействия	= ПериодРегистрации;
		НоваяСтрока.Организация		= Организация;
		НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
		НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
		НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
		Если ВидУдержания = НеОпределено Тогда
			НоваяСтрока.НачислениеУдержание = ИсходнаяСтрока.Удержание;
		Иначе
			НоваяСтрока.НачислениеУдержание = ВидУдержания;
		КонецЕсли;
		
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		НоваяСтрока.Сумма = МассивСумм[ИндексСтроки];
		
		НоваяСтрока.ГруппаУчетаНачислений = Справочники.ГруппыУчетаНачисленийИУдержаний.Зарплата;
		
		СтрокиУдержаний.Добавить(НоваяСтрока);
		
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция СформироватьСтрокиСправочно(Движения, Организация, ПериодРегистрации, ИсходнаяСтрока, СтрокиРаспределения, СтрокиУдержаний, ВидУдержания) Экспорт
	
	Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
	МассивСумм = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ИсходнаяСтрока.Сумма, Коэффициенты);
	
	Если МассивСумм = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексСтроки = 0 По СтрокиРаспределения.ВГраница() Цикл
		
		СтрокаРаспределения = СтрокиРаспределения[ИндексСтроки];
		
		НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.Период			= ПериодРегистрации;
		НоваяСтрока.ПериодДействия	= ПериодРегистрации;
		НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
		НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
		НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
		НоваяСтрока.Организация		= Организация;
		НоваяСтрока.НачислениеУдержание = ВидУдержания;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		НоваяСтрока.Сумма = МассивСумм[ИндексСтроки];
		СтрокиУдержаний.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция НоваяТаблицаУдержанияПоРабочимМестамАвансом()
	
	УдержанияПоРабочимМестам = Новый ТаблицаЗначений;
	УдержанияПоРабочимМестам.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	// Состав колонок таблицы точно соответствует таблице учета начисленной зарплаты.
	МетаданныеРегистра = Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникамАвансом;
	
	// Измерения
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		УдержанияПоРабочимМестам.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла;
	// Ресурсы
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		УдержанияПоРабочимМестам.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	// Реквизиты
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		УдержанияПоРабочимМестам.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

Функция ПравилаУчетаНачисленийСотрудников() Экспорт

	ПравилаУчетаНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.Льгота)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	КОНЕЦ КАК ГруппаНачисленияУдержанияВыплаты,
	|	НЕ Начисления.ЯвляетсяДоходомВНатуральнойФорме КАК УчитыватьВоВзаиморасчетах
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилаУчетаНачисления = Новый Структура;
		ПравилаУчетаНачисления.Вставить("ГруппаНачисленияУдержанияВыплаты", Выборка.ГруппаНачисленияУдержанияВыплаты);
		ПравилаУчетаНачисления.Вставить("УчитыватьВоВзаиморасчетах", Выборка.УчитыватьВоВзаиморасчетах);
		
		ПравилаУчетаНачислений.Вставить(Выборка.Ссылка, ПравилаУчетаНачисления);
		
	КонецЦикла;
	
	Возврат ПравилаУчетаНачислений;

КонецФункции

#Область ПроцедурыИФункцииРаботыСОтчетами

Процедура ДополнитьДополнительныеНачисления(ДополнительныеНачисления, ПорядокКолонки)
	
	МассивВсехКатегорий = Новый Массив;
	Для каждого СтрокаНачисления Из ДополнительныеНачисления Цикл
		Для каждого КатегорияКолонки Из СтрокаНачисления.КатегорииКолонки Цикл
			МассивВсехКатегорий.Добавить(КатегорияКолонки);
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
		Если МассивВсехКатегорий.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ДобавитьПользовательскоеПолеЕсть = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОсобыхНачисленийИУдержаний.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыОсобыхНачисленийИУдержаний КАК ВидыОсобыхНачисленийИУдержаний
	|		ПО (ВидыОсобыхНачисленийИУдержаний.Ссылка = НачисленияУдержанияПоСотрудникам.НачислениеУдержание)
	|			И (НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыОсобыхНачисленийИУдержаний.Порядок,
	|	ВидыОсобыхНачисленийИУдержаний.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОсобыхНачисленийИУдержаний.Порядок";
	
	СоответствиеВидовОсобыхНачисленийИУдержаний = Новый Соответствие;
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		СоответствиеВидовОсобыхНачисленийИУдержаний.Вставить(Перечисления.ВидыОсобыхНачисленийИУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗначениеПеречисления = СоответствиеВидовОсобыхНачисленийИУдержаний.Получить(Выборка.Ссылка);
		Если МассивВсехКатегорий.Найти(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ДобавитьПользовательскоеПолеЕсть = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДополнительныеУдержания(ДополнительныеУдержания, ПорядокКолонки)
	
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ДобавитьПользовательскоеПолеЕсть = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОсобыхНачисленийИУдержаний.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ВидыОсобыхНачисленийИУдержаний КАК ВидыОсобыхНачисленийИУдержаний
	|		ПО (ВидыОсобыхНачисленийИУдержаний.Ссылка = НачисленияУдержанияПоСотрудникам.НачислениеУдержание)
	|			И (НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыОсобыхНачисленийИУдержаний.Порядок,
	|	ВидыОсобыхНачисленийИУдержаний.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОсобыхНачисленийИУдержаний.Порядок";
	
	СоответствиеВидовОсобыхНачисленийИУдержаний = Новый Соответствие;
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		СоответствиеВидовОсобыхНачисленийИУдержаний.Вставить(Перечисления.ВидыОсобыхНачисленийИУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗначениеПеречисления = СоответствиеВидовОсобыхНачисленийИУдержаний.Получить(Выборка.Ссылка);
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ДобавитьПользовательскоеПолеЕсть = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
//	Параметры:
//		Начисления - Таблица значений, полученная с помощью метода
//		             "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		ДанныеОтчета - дерево значений, полученное с помощью метода ПроцессорВывода.Вывести.
//		СоответствиеПользовательскихПолей - Соответствие, полученное с помощью метода
//		                                    ЗарплатаКадры.СоответствиеПользовательскихПолей.
//		НачальныйНомерКолонки - Первый номер колонки, начиная с которой будут выводиться дополнительные начисления.
//		ВсегоНачислений - Сколько всего будет дополнительных колонок. Нужно учитывать, что колонка "ПрочиеНачисления"
//		                  добавляется всегда.
//
//	Возвращаемое значение:
//		ПорядокНачислений - Таблица значений с колонками:
//			Имя - Строка - Имя колонки.
//			Заголовок - Строка - Представление колонки в отчете.
//			НомерКолонки - Номер колонки в отчете.
//			КатегорииКолонки - Массив - Категории начислений, выводимые в колонку.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки, ВсегоНачислений) Экспорт
	
	ПорядокНачислений = Начисления.СкопироватьКолонки("Имя, Заголовок, ПорядокКолонки, НомерКолонки, КатегорииКолонки");
	
	// Получим первые по приоритету колонки.
	КоличествоНачислений = 0;
	Для каждого СтрокаОтчета Из ДанныеОтчета.Строки Цикл
		Для каждого СтрокаНачисления Из Начисления Цикл
			Если КоличествоНачислений < ВсегоНачислений
				И (Не СтрокаНачисления.ДобавитьПользовательскоеПолеЕсть Или СтрокаОтчета[СоответствиеПользовательскихПолей.Получить("Есть" + СтрокаНачисления.Имя)] <> 0)
				И Не СтрокаНачисления.НеВыводитьКолонку И ПорядокНачислений.Найти(СтрокаНачисления.Имя, "Имя") = Неопределено Тогда
				НоваяСтрока = ПорядокНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
				КоличествоНачислений = КоличествоНачислений + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПорядокНачислений.Сортировать("ПорядокКолонки");
	ПорядокНачислений.Колонки.Удалить("ПорядокКолонки");
	
	// Заполним колонки, которые должны попадать в прочие начисления.
	ПрочиеНачисления = ПорядокНачислений.Найти("ПрочиеНачисления", "Имя");
	Если ПрочиеНачисления <> Неопределено Тогда
		КатегорииНачислений = ПрочиеНачисления.КатегорииКолонки;
		Для каждого СтрокаНачисления Из Начисления Цикл
			Если Не СтрокаНачисления.НеВыводитьКолонку И ПорядокНачислений.Найти(СтрокаНачисления.Имя, "Имя") = Неопределено Тогда
				КатегорииНачислений.Добавить(СтрокаНачисления.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаНачисления Из ПорядокНачислений Цикл
		СтрокаНачисления.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат ПорядокНачислений;
	
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
//	Параметры:
//		Удержания - Таблица значений, полученная с помощью метода
//		            "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		ДанныеОтчета - дерево значений, полученное с помощью метода ПроцессорВывода.Вывести.
//		СоответствиеПользовательскихПолей - Соответствие, полученное с помощью метода
//		                                    ЗарплатаКадры.СоответствиеПользовательскихПолей.
//		НачальныйНомерКолонки - Первый номер колонки, начиная с которой будут выводиться дополнительные удержания.
//		ВсегоУдержаний - Сколько всего будет дополнительных колонок.
//
//	Возвращаемое значение:
//		ПорядокУдержаний - Таблица значений с колонками:
//			Имя - Строка - Имя колонки.
//			Заголовок - Строка - Представление колонки в отчете.
//			НомерКолонки - Номер колонки в отчете.
//			КатегорииКолонки - Массив - Категории начислений, выводимые в колонку.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки, ВсегоУдержаний) Экспорт
	
	ПорядокУдержаний = Удержания.СкопироватьКолонки("Имя, Заголовок, ПорядокКолонки, НомерКолонки, КатегорииКолонки");
	
	// Получим первые по приоритету колонки.
	КоличествоУдержаний = 0;
	Для каждого СтрокаОтчета Из ДанныеОтчета.Строки Цикл
		Для каждого СтрокаУдержания Из Удержания Цикл
			Если КоличествоУдержаний < ВсегоУдержаний
				И (Не СтрокаУдержания.ДобавитьПользовательскоеПолеЕсть Или СтрокаОтчета[СоответствиеПользовательскихПолей.Получить("Есть" + СтрокаУдержания.Имя)] <> 0)
				И Не СтрокаУдержания.НеВыводитьКолонку И ПорядокУдержаний.Найти(СтрокаУдержания.Имя, "Имя") = Неопределено Тогда
				НоваяСтрока = ПорядокУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
				КоличествоУдержаний = КоличествоУдержаний + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПорядокУдержаний.Сортировать("ПорядокКолонки");
	ПорядокУдержаний.Колонки.Удалить("ПорядокКолонки");
	
	// Заполним колонки, которые должны попадать в прочие удержания.
	ПрочиеУдержания = ПорядокУдержаний.Найти("ПрочиеУдержания", "Имя");
	Если ПрочиеУдержания <> Неопределено Тогда
		КатегорииУдержаний = ПрочиеУдержания.КатегорииКолонки;
		Для каждого СтрокаУдержания Из Удержания Цикл
			Если Не СтрокаУдержания.НеВыводитьКолонку И ПорядокУдержаний.Найти(СтрокаУдержания.Имя, "Имя") = Неопределено Тогда
				КатегорииУдержаний.Добавить(СтрокаУдержания.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаУдержания Из ПорядокУдержаний Цикл
		СтрокаУдержания.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат ПорядокУдержаний;
	
КонецФункции

// Возвращает условие, сформированное с учетом категории начисления/удержания.
//
//	Параметры:
//		МассивКатегорий - Массив - Категории начислений/удержаний, входящие в условие.
//		МассивВсехКатегорий - Массив - Все используемые в условиях категории, формируется для правильного формирования
//		                               условия по "Прочим" начислениям/удержаниям.
//		ВыражениеУсловия - Строка - выражение выполнения условия, по умолчанию "=".
//		ОперацияУсловия - Строка - Операция соединения условий, по умолчанию "Или".
//
//	Возвращаемое значение:
//		Условие - Строка - Сформированное условие для пользовательского поля.
//
Функция УсловиеПользовательскогоПоля(МассивКатегорий, МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, ВыражениеУсловия = "=", ОперацияУсловия = "Или") Экспорт
	
	Условие = "";
	Для каждого Категория Из МассивКатегорий Цикл
		Если МассивВсехКатегорий.Найти(Категория) = Неопределено Тогда
			МассивВсехКатегорий.Добавить(Категория);
		КонецЕсли;
		Если Не ПустаяСтрока(Условие) Тогда
			Условие = Условие + " " + ОперацияУсловия + " ";
		КонецЕсли;
		ИмяПеречисления = Категория.Метаданные().Имя;
		Если ИмяПеречисления = "ВидыОсобыхНачисленийИУдержаний" Тогда
			Параметр1 = "";
		ИначеЕсли ИмяПеречисления = "КатегорииНачисленийИНеоплаченногоВремени" Тогда
			Параметр1 = ".КатегорияНачисленияИлиНеоплаченногоВремени";
		Иначе
			Параметр1 = ".КатегорияУдержания";
		КонецЕсли;
		Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Условие + "ВидРасчета%1 %2 Значение(Перечисление.%3.%4)",
			Параметр1, ВыражениеУсловия, ИмяПеречисления, СоответствиеКатегорий.Получить(Категория));
	КонецЦикла;
	
	Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"((%1) И Группа = Значение(Перечисление.ГруппыНачисленияУдержанияВыплаты.%2))",
		Условие, ?(ВидПолей = "Начисления", "Начислено", "Удержано"));
	
	Возврат Условие;
	
КонецФункции

// Устанавливает выражение детальных записей и итоговых записей для пользовательского поля варианта отчета.
//
//	Параметры:
//		ПользовательскоеПоле - Пользовательское поле, в которое требуется установить выражения.
//		Условие - Строка - условие выполнения выражения.
//		РезультатУсловия - Строка - Результат выполнения выражения.
//
Процедура ДополнитьПользовательскоеПоле(ПользовательскоеПоле, Условие, РезультатУсловия) Экспорт
	
	ПользовательскоеПоле.Использование = Истина;
	
	ВыражениеДетальныхЗаписей = 
	"Выбор
	|	Когда " + Условие + "
	|		Тогда " + РезультатУсловия + "
	|	Иначе 0
	|Конец";
	ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(ВыражениеДетальныхЗаписей);
	
	ВыражениеИтоговыхЗаписей = 
	"Сумма(Выбор
	|		Когда " + Условие + "
	|			Тогда " + РезультатУсловия + "
	|		Иначе 0
	|	Конец)";
	ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(ВыражениеИтоговыхЗаписей);
	
КонецПроцедуры

// Добавляет пользовательское поле в поля выбора отчета и группировки.
//
//	Параметры:
//		ВыбранныеПоля - Коллекция элементов полей выбора отчета.
//		ВыбранныеПоляГруппировки - Коллекция элементов полей выбора группировки.
//		ПользовательскоеПоле - Добавляемое пользовательское поле.
//
Процедура ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, ПользовательскоеПоле) Экспорт
	
	НовоеПолеВыбора = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
	
	НовоеПолеВыбора = ВыбранныеПоляГруппировки.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
	
КонецПроцедуры

// Добавляет пользовательские поля в вариант отчета.
//
// Параметры:
//		ДополнительныеНачисленияИУдержания - Таблица значений, полученная с помощью метода
//		                                     "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		НастройкиОтчета - Настройки варианта отчета.
//		ВидПолей - Вид добавляемых полей: "Начисления" или "Удержания".
//
Процедура ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, ВидПолей = "Начисления") Экспорт
	
	МассивВсехКатегорий = Новый Массив;
	КоллекцияПользовательскихПолей = НастройкиОтчета.ПользовательскиеПоля.Элементы;
	ВыбранныеПоля = НастройкиОтчета.Выбор.Элементы;
	ГруппировкаОтчета = ОтчетыКлиентСервер.ПолучитьПоследнийЭлементСтруктуры(НастройкиОтчета);
	ВыбранныеПоляГруппировки = ГруппировкаОтчета.Выбор.Элементы;
	
	СоответствиеКатегорий = Новый Соответствие;
	Если ВидПолей = "Начисления" Тогда
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
			СоответствиеКатегорий.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
		КонецЦикла;
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
			СоответствиеКатегорий.Вставить(Перечисления.ВидыОсобыхНачисленийИУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
		КонецЦикла;
	Иначе
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
			СоответствиеКатегорий.Вставить(Перечисления.КатегорииУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
		КонецЦикла;
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
			СоответствиеКатегорий.Вставить(Перечисления.ВидыОсобыхНачисленийИУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
		КонецЦикла;
	КонецЕсли;
	
	ПользовательскоеУсловиеПрочие = "";
	СтрокаТаблицыПрочие = Неопределено;
	Для каждого СтрокаТаблицы Из ДополнительныеНачисленияИУдержания Цикл
		
		Если (ВидПолей = "Начисления" И СтрокаТаблицы.Имя = "ПрочиеНачисления") Или (ВидПолей = "Удержания" И СтрокаТаблицы.Имя = "ПрочиеУдержания") Тогда
			СтрокаТаблицыПрочие = ДополнительныеНачисленияИУдержания[ДополнительныеНачисленияИУдержания.Индекс(СтрокаТаблицы)];
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ДобавитьПользовательскоеПоле Тогда
			НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			НовоеПоле.Заголовок = СтрокаТаблицы.Имя;
			Если ПустаяСтрока(СтрокаТаблицы.ПользовательскоеУсловие) Тогда
				Условие = УсловиеПользовательскогоПоля(СтрокаТаблицы.КатегорииКолонки, МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей);
				Если (ВидПолей = "Начисления" И СтрокаТаблицы.Имя = "ОсновныеНачисления") Тогда
					Условие = СтрЗаменить(Условие, "ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)",
						"(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ВидРасчета.СпособВыполненияНачисления <> Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))");
				КонецЕсли;
			Иначе
				Условие = СтрокаТаблицы.ПользовательскоеУсловие;
				Поз = СтрНайти(ПользовательскоеУсловиеПрочие, СтрокаТаблицы.УсловиеИсключенияИзПрочих);
				Если Поз = 0 Тогда
					ПользовательскоеУсловиеЗаполнено = Не ПустаяСтрока(ПользовательскоеУсловиеПрочие);
					ПользовательскоеУсловиеПрочие = ПользовательскоеУсловиеПрочие + ?(ПользовательскоеУсловиеЗаполнено, " И ", "") + СтрокаТаблицы.УсловиеИсключенияИзПрочих;
				КонецЕсли;
			КонецЕсли;
			ДополнитьПользовательскоеПоле(НовоеПоле, Условие, ?(ПустаяСтрока(СтрокаТаблицы.РезультатУсловия), "Сумма", СтрокаТаблицы.РезультатУсловия));
			ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
		КонецЕсли;
		
		Если СтрокаТаблицы.ДобавитьПользовательскоеПолеЕсть Тогда
			НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			НовоеПоле.Заголовок = "Есть" + СтрокаТаблицы.Имя;
			Если ПустаяСтрока(СтрокаТаблицы.ПользовательскоеУсловие) Тогда
				Условие = УсловиеПользовательскогоПоля(СтрокаТаблицы.КатегорииКолонки, МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей);
			Иначе
				Условие = СтрокаТаблицы.ПользовательскоеУсловие;
				Поз = СтрНайти(ПользовательскоеУсловиеПрочие, СтрокаТаблицы.УсловиеИсключенияИзПрочих);
				Если Поз = 0 Тогда
					ПользовательскоеУсловиеЗаполнено = Не ПустаяСтрока(ПользовательскоеУсловиеПрочие);
					ПользовательскоеУсловиеПрочие = ПользовательскоеУсловиеПрочие + ?(ПользовательскоеУсловиеЗаполнено, " И ", "") + СтрокаТаблицы.УсловиеИсключенияИзПрочих;
				КонецЕсли;
			КонецЕсли;
			ДополнитьПользовательскоеПоле(НовоеПоле, Условие, "1");
			ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
		КонецЕсли;
		
	КонецЦикла;
	
	// ПрочиеНачисления
	Если ВидПолей = "Начисления" И СтрокаТаблицыПрочие <> Неопределено И СтрокаТаблицыПрочие.ДобавитьПользовательскоеПоле Тогда
		НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
		НовоеПоле.Заголовок = "ПрочиеНачисления";
		Условие = ?(ПустаяСтрока(ПользовательскоеУсловиеПрочие), "", ПользовательскоеУсловиеПрочие + " И ") + УсловиеПользовательскогоПоля(МассивВсехКатегорий, МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, "<>", "И");
		ДополнитьПользовательскоеПоле(НовоеПоле, "(" + Условие + ")
			|	ИЛИ (ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = Значение(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
			|			И ВидРасчета.СпособВыполненияНачисления = Значение(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))", "Сумма");
		ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
	КонецЕсли;
	
	// ПрочиеУдержания
	Если ВидПолей = "Удержания" И СтрокаТаблицыПрочие <> Неопределено И СтрокаТаблицыПрочие.ДобавитьПользовательскоеПоле Тогда
		НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
		НовоеПоле.Заголовок = "ПрочиеУдержания";
		Условие = ?(ПустаяСтрока(ПользовательскоеУсловиеПрочие), "", ПользовательскоеУсловиеПрочие + " И ") + УсловиеПользовательскогоПоля(МассивВсехКатегорий, МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, "<>", "И");
		ДополнитьПользовательскоеПоле(НовоеПоле, Условие, "Сумма");
		ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьАнализНачисленийИУдержаний(ЭтотОбъект) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
			ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений").ДополнитьАнализНачисленийИУдержаний(ЭтотОбъект);
		КонецЕсли;
		
		// Добавление полей разрядов, категорий должностей.
		ТекстЗапроса = ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НачисленияУдержания.Запрос;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	НачисленияУдержанияВыплаты.Должность КАК Должность,", 
			"	НачисленияУдержанияВыплаты.Должность КАК Должность,
			|	НачисленияУдержанияВыплаты.РазрядКатегория КАК РазрядКатегория,
			|	НачисленияУдержанияВыплаты.РазрядКатегорияНаКонецПериода КАК РазрядКатегорияНаКонецПериода,
			|	НачисленияУдержанияВыплаты.РазрядКатегорияГоловногоСотрудникаНаКонецПериода КАК РазрядКатегорияГоловногоСотрудникаНаКонецПериода,");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Должность.*,", 
			"	Должность.*,
			|	РазрядКатегория.*,
			|	РазрядКатегорияНаКонецПериода.*,
			|	РазрядКатегорияГоловногоСотрудникаНаКонецПериода.*,");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	НачисленияУдержанияВыплаты.Должность.*,", 
			"	НачисленияУдержанияВыплаты.Должность.*,
			|	НачисленияУдержанияВыплаты.РазрядКатегория.*,
			|	НачисленияУдержанияВыплаты.РазрядКатегорияНаКонецПериода.*,
			|	НачисленияУдержанияВыплаты.РазрядКатегорияГоловногоСотрудникаНаКонецПериода.*,");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Данные.Должность КАК Должность,", 
			"	Данные.Должность КАК Должность,
			|	Данные.РазрядКатегория КАК РазрядКатегория,
			|	Данные.РазрядКатегорияНаКонецПериода КАК РазрядКатегорияНаКонецПериода,
			|	Данные.РазрядКатегорияГоловногоСотрудникаНаКонецПериода КАК РазрядКатегорияГоловногоСотрудникаНаКонецПериода,");
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	Данные.Должность.*,", 
			"	Данные.Должность.*,
			|	Данные.РазрядКатегория.*,
			|	Данные.РазрядКатегорияНаКонецПериода.*,
			|	Данные.РазрядКатегорияГоловногоСотрудникаНаКонецПериода.*,");
		
		ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НачисленияУдержания.Запрос = ТекстЗапроса;
		
		ПолеРазрядКатегория = ЭтотОбъект.СхемаКомпоновкиДанных.НаборыДанных.НачисленияУдержания.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеРазрядКатегория.Поле = "РазрядКатегория";
		ПолеРазрядКатегория.ПутьКДанным = "РазрядКатегория";
		
	КонецЕсли;
	
КонецПроцедуры


Функция ПрименениеОбособленныхТерриторий() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории");
КонецФункции

#КонецОбласти

#КонецОбласти
