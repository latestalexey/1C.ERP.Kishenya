
#Область ПрограммныйИнтерфейс

// Возвращает типы значений аналитики
//
// Параметры
//  АналитикаСтатейБюджетов - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов 
//  
// Возвращаемое значение
//  ДоступныеТипы - Соответствие
//         Ключ - Тип -  Тип значения аналитики
//         Значение - Полное имя объекта метаданных
//        
Функция ДоступныеТипыАналитикиСтатейБюджетов(АналитикаСтатейБюджетов) Экспорт
	
	Возврат ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ДоступныеТипыАналитикиСтатейБюджетов(АналитикаСтатейБюджетов);
	
КонецФункции

// Возвращает параметры расшифровки и основное действие для "особой" расшифровки отчета
//
// Параметры:
// 	Расшифровка - Число - Идентификатор расшифровки
// 	АдресДанныхРасшифровки - Строка - Адрес временного хранилища с данными расшифровки
//
// Возвращаемое значение
// 	ДанныеРасшифровкиОтчета - Структура содержащая параметры расшифровки и основное действие
//
Функция ДанныеРасшифровкиОтчета(Расшифровка, АдресДанныхРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Расшифровка];
	ОсновноеДействие = ЭлементРасшифровки.ОсновноеДействие;
	
	ПоляРасшифровки = Новый Структура;
	Для каждого ЗначениеПоля Из ЭлементРасшифровки.ПолучитьПоля() Цикл
		ПоляРасшифровки.Вставить(ЗначениеПоля.Поле, ЗначениеПоля.Значение);
	КонецЦикла;
	
	ПоляРасшифровкиРодителей = Новый Структура;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ЗаполнитьПоляРодительскихЭлементовРасшифровки(Родитель, ПоляРасшифровкиРодителей);
	КонецЦикла;
	
	ПараметрыДанных = Новый Структура;
	Для каждого Параметр Из ДанныеРасшифровки.Настройки.ПараметрыДанных.Элементы Цикл
		Если Не Параметр.Использование Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыДанных.Вставить(Параметр.Параметр, Параметр.Значение);
	КонецЦикла; 
	
	Отбор = Новый Структура;
	Для каждого ЭлементОтбора Из ДанныеРасшифровки.Настройки.Отбор.Элементы Цикл
		Если Не ЭлементОтбора.Использование Или ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			Продолжить;
		КонецЕсли;
		Поле = Строка(ЭлементОтбора.ЛевоеЗначение);
		Отбор.Вставить(Поле, ЭлементОтбора.ПравоеЗначение);
	КонецЦикла;
	
	ДанныеРасшифровкиОтчета = Новый Структура;
	ДанныеРасшифровкиОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
	ДанныеРасшифровкиОтчета.Вставить("ПоляРасшифровкиРодители", ПоляРасшифровкиРодителей);
	ДанныеРасшифровкиОтчета.Вставить("ПараметрыДанных", ПараметрыДанных);
	ДанныеРасшифровкиОтчета.Вставить("Отбор", Отбор);
	ДанныеРасшифровкиОтчета.Вставить("ОсновноеДействие", ОсновноеДействие);
	
	Возврат ДанныеРасшифровкиОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоляРодительскихЭлементовРасшифровки(ЭлементРасшифровки, ПоляРасшифровкиРодителей)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого ЗначениеПоля Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ПоляРасшифровкиРодителей.Вставить(ЗначениеПоля.Поле, ЗначениеПоля.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ЗаполнитьПоляРодительскихЭлементовРасшифровки(Родитель, ПоляРасшифровкиРодителей);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьXML(Значение)
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, Значение);
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ПрименитьИзмененияКСхемеКомпоновкиДанных(Знач СхемаКомпоновкиДанных, 
					Знач АдресСхемыКомпоновкиДанныхВХранилище, Знач АдресНастроекКомпоновкиДанных, 
					ВХранилище = Ложь, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СхемаКомпоновкиДанных) Тогда
		
		Схема = Справочники.НефинансовыеПоказателиБюджетов.ПредопределеннаяСхемаПолученияДанных(СхемаКомпоновкиДанных);
		
		// Если схема компоновки данных из макета <> полученной из редактора схеме компоновки данных
		Если ПолучитьXML(Схема) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище)) Тогда
			СхемаКомпоновкиДанных   = "";
			ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище));
		КонецЕсли;
		
		// Полученные настройки могут быть равны настройкам по умолчанию схемы.
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Неопределено;
		КонецЕсли;
		
	Иначе
		
		Схема = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхВХранилище);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		Попытка
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
		Исключение
		КонецПопытки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КомпоновщикНастроек.Восстановить();
		Если ПолучитьXML(КомпоновщикНастроек.ПолучитьНастройки()) <> ПолучитьXML(ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных)) Тогда
			ХранилищеНастроекКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновкиДанных);
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВХранилище Тогда
		ХранилищеСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(ХранилищеСхемыКомпоновкиДанных, УникальныйИдентификатор);
		ХранилищеНастроекКомпоновкиДанных = ПоместитьВоВременноеХранилище(ХранилищеНастроекКомпоновкиДанных, УникальныйИдентификатор);
	Иначе
		ХранилищеСхемыКомпоновкиДанных    = ХранилищеСхемыКомпоновкиДанных;
		ХранилищеНастроекКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных;
	КонецЕсли;
	
	Возврат Новый Структура("СхемаКомпоновкиДанных, ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных", 
							СхемаКомпоновкиДанных, ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных);
	
КонецФункции

Функция ПолучитьАдресаСхемыКомпоновкиДанныхВоВременномХранилище(Знач НаименованиеСхемыКомпоновкиДанных, Знач ХранилищеСхемыКомпоновкиДанных,
																Знач ХранилищеНастроекКомпоновкиДанных, Знач УникальныйИдентификатор) Экспорт
																
	Если ТипЗнч(ХранилищеСхемыКомпоновкиДанных) = Тип("Строка") Тогда
		Если ПустаяСтрока(ХранилищеСхемыКомпоновкиДанных) Тогда
			ХранилищеСхемыКомпоновкиДанных = Неопределено;
		Иначе
			ХранилищеСхемыКомпоновкиДанных = ПолучитьИзВременногоХранилища(ХранилищеСхемыКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ХранилищеНастроекКомпоновкиДанных) = Тип("Строка") Тогда
		Если ПустаяСтрока(ХранилищеНастроекКомпоновкиДанных) Тогда
			ХранилищеНастроекКомпоновкиДанных = Неопределено;
		Иначе
			ХранилищеНастроекКомпоновкиДанных = ПолучитьИзВременногоХранилища(ХранилищеНастроекКомпоновкиДанных);
		КонецЕсли;
	КонецЕсли;
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	// Схема
	СхемаКомпоновкиДанных = Неопределено;
	Если ЗначениеЗаполнено(НаименованиеСхемыКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.НефинансовыеПоказателиБюджетов.ПредопределеннаяСхемаПолученияДанных(НаименованиеСхемыКомпоновкиДанных);
	ИначеЕсли ТипЗнч(ХранилищеСхемыКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных;
	ИначеЕсли ХранилищеСхемыКомпоновкиДанных <> Неопределено Тогда
		СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	// Настройки
	Настройки = Неопределено;
	Если ТипЗнч(ХранилищеНастроекКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ХранилищеНастроекКомпоновкиДанных;
	ИначеЕсли ХранилищеНастроекКомпоновкиДанных <> Неопределено Тогда
		Настройки = ХранилищеНастроекКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый НастройкиКомпоновкиДанных;
	КонецЕсли;
	
	Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
	Возврат Адреса;
	
КонецФункции

#КонецОбласти