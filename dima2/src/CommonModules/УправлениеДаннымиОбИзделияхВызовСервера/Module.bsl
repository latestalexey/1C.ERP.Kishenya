////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Возвращает спецификацию назначенную изделию
//
// Параметры:
//  Подразделение		- СправочникСсылка.СтруктураПредприятия - подразделение, в котором выполняется производство
//  Номенклатура		- СправочникСсылка.Номенклатура - Наименование выпускаемого изделия
//	Характеристика		- СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика изделия, если есть
//	НачатьНеРанее		- Дата - Дата, не ранее которой необходимо начать производить
//	ТекущаяСпецификация	- СправочникСсылка.РесурсныеСпецификации - Спецификация, которая уже указана для изделия
//									Параметр передается, если необходимо не менять спецификацию
//
// Возвращаемое значение:
//   Структура,Неопределено   - Содержит параметры полученной спецификации
//
Функция СпецификацияИзделия(Подразделение, Номенклатура, Характеристика, НачатьНеРанее, ТекущаяСпецификация = Неопределено) Экспорт
	
	ДанныеСпецификации = Неопределено;
	
	СписокДоступныхСпецификаций = УправлениеДаннымиОбИзделиях.ПолучитьСписокДействующихСпецификаций(
										Номенклатура, 
										Характеристика, 
										НачатьНеРанее, 
										Подразделение);
	
	Если СписокДоступныхСпецификаций.Количество() <> 0 Тогда
		
		ДоступнаяСпецификация = СписокДоступныхСпецификаций[0];
		ОсновнаяСпецификация = ?(ДоступнаяСпецификация.Основная, ДоступнаяСпецификация.Спецификация, Справочники.РесурсныеСпецификации.ПустаяСсылка());
		
		Если ЗначениеЗаполнено(ТекущаяСпецификация)
			И СписокДоступныхСпецификаций.Найти(ТекущаяСпецификация, "Спецификация") <> Неопределено Тогда
			
			// Если выбрана текущая спецификация, то вернем ее, в случае если она есть в списке доступных
			ДанныеСпецификации = Новый Структура;
			ДанныеСпецификации.Вставить("Спецификация",                ТекущаяСпецификация);
			ДанныеСпецификации.Вставить("ОсновнаяСпецификация",        ОсновнаяСпецификация);
			ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация", (ОсновнаяСпецификация = ТекущаяСпецификация));
			
		ИначеЕсли ЗначениеЗаполнено(ОсновнаяСпецификация) ИЛИ СписокДоступныхСпецификаций.Количество() = 1 Тогда
			
			ДанныеСпецификации = Новый Структура;
			ДанныеСпецификации.Вставить("Спецификация",                              ДоступнаяСпецификация.Спецификация);
			ДанныеСпецификации.Вставить("ОсновнаяСпецификация",                      ОсновнаяСпецификация);
			ДанныеСпецификации.Вставить("ВыбранаОсновнаяСпецификация",               (ОсновнаяСпецификация = ДоступнаяСпецификация.Спецификация));
			ДанныеСпецификации.Вставить("МногоэтапныйПроизводственныйПроцесс",       ДоступнаяСпецификация.МногоэтапныйПроизводственныйПроцесс);
			ДанныеСпецификации.Вставить("ОптимальноеКоличествоПередачиМеждуЭтапами", ДоступнаяСпецификация.ОптимальноеКоличествоПередачиМеждуЭтапами);
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ДанныеСпецификации;
	
КонецФункции

// Копирует спецификацию и этапы
//
// Параметры:
//  Источник	- СправочникСсылка.РесурсныеСпецификации - спецификация, которую нужно скопировать
//
// Возвращаемое значение:
//   СправочникСсылка.РесурсныеСпецификации   - копия спецификации
//
Функция КопироватьРесурснуюСпецификацию(Источник) Экспорт

	НачатьТранзакцию();
	
	СсылкаНового = Справочники.РесурсныеСпецификации.ПолучитьСсылку();
	
	Объект = Источник.Скопировать();
	Объект.Наименование = Объект.Наименование + " " + НСтр("ru='(копия)';uk='(копія)'");
	
	Если НЕ ЗаполнитьЭтапыПоРесурснойСпецификации(Объект, Источник, СсылкаНового) Тогда
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		
		Объект.УстановитьСсылкуНового(СсылкаНового);
		Объект.Записать();
		
	Исключение
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ОсновныеСпецификации

// Назначает спецификацию основной для указанного изделия и подразделения
//
// Параметры
//  СвойстваЗаписи 		- Структура - содержит значения свойств записи
//  НавигационнаяСсылка - Строка - навигационная ссылка на измененную запись
//
// Возвращаемое значение:
//   Булево   - Истина, если спецификация назначена основной
//
Функция НазначитьОсновнойСпецификацией(СвойстваЗаписи, НавигационнаяСсылка = Неопределено, СтруктураОшибки = Неопределено) Экспорт
	
	СтруктураОшибки = Новый Структура;
	
	СвойстваСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваЗаписи.Спецификация, "Статус");
	
	// Проверим, что спецификацию можно назначить основной
	Если НЕ УправлениеДаннымиОбИзделияхКлиентСервер.СпецификациюМожноНазначитьОсновной(СвойстваСпецификации, СтруктураОшибки) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Запишем данные
	Запись = РегистрыСведений.ОсновныеСпецификации.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СвойстваЗаписи);
	
	Попытка
		
		Запись.Записать();
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
		
	КонецПопытки; 
	
	СтруктураТекущейЗаписи = Новый Структура;
	СтруктураТекущейЗаписи.Вставить("Подразделение",  Запись.Подразделение);
	СтруктураТекущейЗаписи.Вставить("Номенклатура",   Запись.Номенклатура);
	СтруктураТекущейЗаписи.Вставить("Характеристика", Запись.Характеристика);
	СтруктураТекущейЗаписи.Вставить("Спецификация",   Запись.Спецификация);
	
	КлючЗаписи = РегистрыСведений.ОсновныеСпецификации.СоздатьКлючЗаписи(СтруктураТекущейЗаписи);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КлючЗаписи);
	
	Возврат Истина;
	
КонецФункции

// Получает основную спецификацию для указанных цеха, номенклатуры на дату начала производства
//
// Параметры
//  Подразделение      - СправочникСсылка.СтруктураПредприятия - подразделение, за которым закреплено обеспечение изделием
//  Номенклатура       - СправочникСсылка.Номенклатура - производимое изделие
//  Характеристика     - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика производимого изделия
//  НачалоПроизводства - Дата - дата начала производства, на эту дату спецификация должна быть действующей
//
// Возвращаемое значение:
//   СправочникСсылка.РесурсныеСпецификации - действующая спецификация
//
Функция ПолучитьОсновнуюСпецификацию(Подразделение, Номенклатура, Характеристика, НачалоПроизводства) Экспорт

	ТекстЗапроса = УправлениеДаннымиОбИзделиях.ПолучитьТекстЗапросаОсновнойСпецификации();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделение",      Подразделение);
	Запрос.УстановитьПараметр("Номенклатура",       Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",     Характеристика);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоПроизводства);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Спецификация;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область ОсновныеМаршрутныеКарты

// Проверяет, что маршрутную карту можно назначить основной
//
// Параметры
//  Ссылка			- СправочникСсылка.МаршрутныеКарты - ссылка на маршрутную карту
//  СтруктураОшибки	- Структура - содержит результат проверки: 
//								1. ТекстОшибки: причина по которой маршрутная карта не может быть основной
//
// Возвращаемое значение:
//   Булево   - Истина, если можно назначить основной
//
Функция МаршрутнуюКартуМожноНазначитьОсновной(Ссылка, СтруктураОшибки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныеКарты.Статус КАК Статус,
	|	КОЛИЧЕСТВО(МаршрутныеКартыВыходныеИзделия.НомерСтроки) КАК КоличествоИзделий
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
	|		ПО (МаршрутныеКартыВыходныеИзделия.Ссылка = МаршрутныеКарты.Ссылка)
	|ГДЕ
	|	МаршрутныеКарты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныеКарты.Ссылка,
	|	МаршрутныеКарты.Статус";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Если Выборка.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Действует") Тогда
		СтруктураОшибки.Вставить("ТекстОшибки", НСтр("ru='Основной может быть только действующая маршрутная карта.';uk='Основною може бути тільки діюча маршрутна карта.'"));
		Возврат Ложь;
	ИначеЕсли Выборка.КоличествоИзделий = 0 Тогда
		СтруктураОшибки.Вставить("ТекстОшибки", НСтр("ru='В маршрутной карте должны быть выходные изделия.';uk='У маршрутній карті повинні бути вихідні вироби.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Назначает маршрутную карту основной для указанного изделия и подразделения
//
// Параметры
//  СвойстваЗаписи 		- Структура - содержит значения свойств записи
//  НавигационнаяСсылка - Строка - навигационная ссылка на измененную запись
//
// Возвращаемое значение:
//   Булево   - Истина, если маршрутная карта назначена основной
//
Функция НазначитьОсновнойМаршрутнойКартой(СвойстваЗаписи, НавигационнаяСсылка = Неопределено, СтруктураОшибки = Неопределено) Экспорт
	
	СтруктураОшибки = Новый Структура;
	
	// Проверим, что маршрутную карту можно назначить основной
	Если НЕ МаршрутнуюКартуМожноНазначитьОсновной(СвойстваЗаписи.МаршрутнаяКарта, СтруктураОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодразделениеМаршрутнойКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваЗаписи.МаршрутнаяКарта, "Подразделение");
	
	// Запишем данные
	Запись = РегистрыСведений.ОсновныеМаршрутныеКарты.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СвойстваЗаписи);
	Запись.Подразделение = ПодразделениеМаршрутнойКарты;
	
	Попытка
		Запись.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки; 
	
	СтруктураТекущейЗаписи = Новый Структура;
	СтруктураТекущейЗаписи.Вставить("Подразделение",   Запись.Подразделение);
	СтруктураТекущейЗаписи.Вставить("Номенклатура",    Запись.Номенклатура);
	СтруктураТекущейЗаписи.Вставить("Характеристика",  Запись.Характеристика);
	СтруктураТекущейЗаписи.Вставить("МаршрутнаяКарта", Запись.МаршрутнаяКарта);
	
	КлючЗаписи = РегистрыСведений.ОсновныеМаршрутныеКарты.СоздатьКлючЗаписи(СтруктураТекущейЗаписи);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КлючЗаписи);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УстановитьСтатусСпецификаций(ВыделенныеСсылки, ЗначениеСтатуса) Экспорт

	НовыйСтатус = Перечисления.СтатусыСпецификаций[ЗначениеСтатуса];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РесурсныеСпецификации.Ссылка,
	|	РесурсныеСпецификации.Наименование,
	|	РесурсныеСпецификации.ПометкаУдаления
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|ГДЕ
	|	РесурсныеСпецификации.Статус <> &НовыйСтатус
	|	И РесурсныеСпецификации.Ссылка В(&ВыделенныеСсылки)";
	
	Запрос.УстановитьПараметр("ВыделенныеСсылки", ВыделенныеСсылки);
	Запрос.УстановитьПараметр("НовыйСтатус",      НовыйСтатус);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоОбработанных = 0;
	
	Если НовыйСтатус = Перечисления.СтатусыСпецификаций.ВРазработке Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Нельзя изменить статус помеченной на удаление спецификации ""%1"".';uk='Не можна змінити статус позначеної на вилучення специфікації ""%1"".'"),
									Выборка.Наименование);
									
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НачатьТранзакцию();
		
		Попытка
			
			Если НовыйСтатус = Перечисления.СтатусыСпецификаций.ВРазработке Тогда
				ПараметрыПроверки = Новый Структура("Объект", Выборка.Ссылка);
				Справочники.РесурсныеСпецификации.ПроверитьИспользованиеОбъекта(ПараметрыПроверки, АдресХранилища);
				ЕстьСсылки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Если ЕстьСсылки Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Спецификация ""%1"" используется. Установка статуса ""В разработке"" допускается только в форме спецификации.';uk='Специфікація ""%1"" використовується. Встановлення статусу ""В розробці"" допускається тільки у формі специфікації.'"),
											СпрОбъект.Наименование);
											
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецЕсли; 
			
			СпрОбъект.Статус = НовыйСтатус;
			СпрОбъект.ДополнительныеСвойства.Вставить("ПроверитьЭтапы");
			Если СпрОбъект.ПроверитьЗаполнение() Тогда
				СпрОбъект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;

КонецФункции

Процедура РесурсныеСпецификацииОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ПолучитьСписокДействующихСпецификаций") Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Параметры.Номенклатура)
			И ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
			
			Если Параметры.Свойство("НачалоПроизводства") Тогда
				НачалоПроизводства = Параметры.НачалоПроизводства;
			Иначе
				НачалоПроизводства = '000101010000'
			КонецЕсли; 
			
			СписокДействующихСпецификаций = УправлениеДаннымиОбИзделиях.ПолучитьСписокДействующихСпецификаций(
									Параметры.Номенклатура, 
									Параметры.Характеристика, 
									НачалоПроизводства,, 
									Параметры.СтрокаПоиска);
									
			ДанныеВыбора = Новый СписокЗначений;
			Для каждого Выборка Из СписокДействующихСпецификаций Цикл
				ДанныеВыбора.Добавить(Выборка.Спецификация, Выборка.СпецификацияПредставление);
			КонецЦикла; 
									
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗаполнитьЭтапыПоРесурснойСпецификации(Приемник, Источник, СсылкаПриемника)

	Запрос = Новый Запрос(
	// 0
	"ВЫБРАТЬ
	|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииВыходныеИзделия.Характеристика КАК Характеристика,
	|	РесурсныеСпецификацииВыходныеИзделия.Упаковка КАК Упаковка,
	|	РесурсныеСпецификацииВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок,
	|	РесурсныеСпецификацииВыходныеИзделия.Количество КАК Количество,
	|	РесурсныеСпецификацииВыходныеИзделия.ЭтапРедактирование КАК ЭтапРедактирование,
	|	РесурсныеСпецификацииВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|ГДЕ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсныеСпецификацииВыходныеИзделия.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииВозвратныеОтходы.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииВозвратныеОтходы.Характеристика КАК Характеристика,
	|	РесурсныеСпецификацииВозвратныеОтходы.Упаковка КАК Упаковка,
	|	РесурсныеСпецификацииВозвратныеОтходы.КоличествоУпаковок КАК КоличествоУпаковок,
	|	РесурсныеСпецификацииВозвратныеОтходы.Количество КАК Количество,
	|	РесурсныеСпецификацииВозвратныеОтходы.ЭтапРедактирование КАК ЭтапРедактирование,
	|	РесурсныеСпецификацииВозвратныеОтходы.СтатьяКалькуляции КАК СтатьяКалькуляции
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК РесурсныеСпецификацииВозвратныеОтходы
	|ГДЕ
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсныеСпецификацииВозвратныеОтходы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика КАК Характеристика,
	|	РесурсныеСпецификацииМатериалыИУслуги.Упаковка КАК Упаковка,
	|	РесурсныеСпецификацииМатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок,
	|	РесурсныеСпецификацииМатериалыИУслуги.Количество КАК Количество,
	|	РесурсныеСпецификацииМатериалыИУслуги.ЭтапРедактирование КАК ЭтапРедактирование,
	|	РесурсныеСпецификацииМатериалыИУслуги.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	РесурсныеСпецификацииМатериалыИУслуги.СпособАвтовыбораНоменклатуры КАК СпособАвтовыбораНоменклатуры,
	|	РесурсныеСпецификацииМатериалыИУслуги.СпособАвтовыбораХарактеристики КАК СпособАвтовыбораХарактеристики,
	|	РесурсныеСпецификацииМатериалыИУслуги.СвойствоСодержащееНоменклатуру КАК СвойствоСодержащееНоменклатуру,
	|	РесурсныеСпецификацииМатериалыИУслуги.ОтборСвойство КАК ОтборСвойство,
	|	РесурсныеСпецификацииМатериалыИУслуги.ОтборЗначениеСвойства КАК ОтборЗначениеСвойства,
	|	РесурсныеСпецификацииМатериалыИУслуги.АлгоритмРасчетаКоличества КАК АлгоритмРасчетаКоличества,
	|	РесурсныеСпецификацииМатериалыИУслуги.ПрименениеМатериала КАК ПрименениеМатериала,
	|	РесурсныеСпецификацииМатериалыИУслуги.КлючСвязи КАК КлючСвязи,
	|	РесурсныеСпецификацииМатериалыИУслуги.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|	РесурсныеСпецификацииМатериалыИУслуги.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|ГДЕ
	|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсныеСпецификацииМатериалыИУслуги.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииТрудозатраты.ВидРабот КАК ВидРабот,
	|	РесурсныеСпецификацииТрудозатраты.Количество КАК Количество,
	|	РесурсныеСпецификацииТрудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	РесурсныеСпецификацииТрудозатраты.ЭтапРедактирование КАК ЭтапРедактирование
	|ИЗ
	|	Справочник.РесурсныеСпецификации.Трудозатраты КАК РесурсныеСпецификацииТрудозатраты
	|ГДЕ
	|	РесурсныеСпецификацииТрудозатраты.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсныеСпецификацииТрудозатраты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ
	|	СправочникЭтапыПроизводства.Ссылка КАК Ссылка,
	|	СправочникЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	СправочникЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК СправочникЭтапыПроизводства
	|ГДЕ
	|	СправочникЭтапыПроизводства.Владелец = &Источник
	|	И НЕ СправочникЭтапыПроизводства.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Приемник.ВыходныеИзделия.Загрузить(Результат[0].Выгрузить());
	Приемник.ВозвратныеОтходы.Загрузить(Результат[1].Выгрузить());
	Приемник.МатериалыИУслуги.Загрузить(Результат[2].Выгрузить());
	Приемник.Трудозатраты.Загрузить(Результат[3].Выгрузить());
	
	Выборка = Результат[4].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЭтапОбъект = Выборка.Ссылка.Скопировать();
		ЭтапОбъект.Владелец = СсылкаПриемника;
		ЭтапОбъект.НомерЭтапа = Выборка.НомерЭтапа;
		ЭтапОбъект.НомерСледующегоЭтапа = Выборка.НомерСледующегоЭтапа;
		
		ЭтапОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			
			ЭтапОбъект.Записать();
			
		Исключение
			
			Возврат Ложь;
			
		КонецПопытки;
		
		// Заполним связь с этапом
		НайденныеСтроки = Приемник.ВыходныеИзделия.НайтиСтроки(Новый Структура("ЭтапРедактирование", Выборка.Ссылка));
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.ЭтапРедактирование = ЭтапОбъект.Ссылка;
			
		КонецЦикла;
		
		НайденныеСтроки = Приемник.ВозвратныеОтходы.НайтиСтроки(Новый Структура("ЭтапРедактирование", Выборка.Ссылка));
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.ЭтапРедактирование = ЭтапОбъект.Ссылка;
			
		КонецЦикла;
		
		НайденныеСтроки = Приемник.МатериалыИУслуги.НайтиСтроки(Новый Структура("ЭтапРедактирование", Выборка.Ссылка));
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.ЭтапРедактирование = ЭтапОбъект.Ссылка;
			
		КонецЦикла;
		
		НайденныеСтроки = Приемник.Трудозатраты.НайтиСтроки(Новый Структура("ЭтапРедактирование", Выборка.Ссылка));
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.ЭтапРедактирование = ЭтапОбъект.Ссылка;
			
		КонецЦикла;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

//++ НЕ УТКА

Функция УстановитьСтатусМаршрутныхКарт(ВыделенныеСсылки, ЗначениеСтатуса) Экспорт

	НовыйСтатус = Перечисления.СтатусыМаршрутныхКарт[ЗначениеСтатуса];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныеКарты.Ссылка,
	|	МаршрутныеКарты.Наименование,
	|	МаршрутныеКарты.ПометкаУдаления
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|ГДЕ
	|	МаршрутныеКарты.Статус <> &НовыйСтатус
	|	И МаршрутныеКарты.Ссылка В(&ВыделенныеСсылки)";
	
	Запрос.УстановитьПараметр("ВыделенныеСсылки", ВыделенныеСсылки);
	Запрос.УстановитьПараметр("НовыйСтатус",      НовыйСтатус);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоОбработанных = 0;
	
	Если НовыйСтатус = Перечисления.СтатусыМаршрутныхКарт.ВРазработке Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Нельзя изменить статус помеченной на удаление маршрутной карты ""%1"".';uk='Не можна змінити статус позначеної на вилучення маршрутної карти ""%1"".'"),
									Выборка.Наименование);
									
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НачатьТранзакцию();
		
		Попытка
			
			Если НовыйСтатус = Перечисления.СтатусыМаршрутныхКарт.ВРазработке Тогда
				ПараметрыПроверки = Новый Структура("Объект", Выборка.Ссылка);
				Справочники.МаршрутныеКарты.ПроверитьИспользованиеОбъекта(ПараметрыПроверки, АдресХранилища);
				ЕстьСсылки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Если ЕстьСсылки Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Маршрутная карта ""%1"" используется. Установка статуса ""В разработке"" допускается только в форме маршрутной карты.';uk='Маршрутна карта ""%1"" використовується. Встановлення статусу ""В розробці"" допускається тільки у формі маршрутної карти.'"),
											СпрОбъект.Наименование);
											
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецЕсли; 
			
			СпрОбъект.Статус = НовыйСтатус;
			Если СпрОбъект.ПроверитьЗаполнение() Тогда
				СпрОбъект.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;

КонецФункции

Процедура МаршрутныеКартыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ВыборДействующихМаршрутныхКарт") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Подразделение") Тогда
			Подразделение = Параметры.Отбор.Подразделение;
		Иначе
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли; 
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("НачалоПроизводства") Тогда
			НачалоПроизводства = Параметры.Отбор.НачалоПроизводства;
		Иначе
			НачалоПроизводства = '000101010000';
		КонецЕсли; 
		
		ДанныеВыбора =  УправлениеДаннымиОбИзделиях.ПолучитьСписокДействующихМаршрутныхКартПоПодразделению(
								Подразделение, 
								НачалоПроизводства, 
								Параметры.СтрокаПоиска)
	КонецЕсли; 
	
	Если Параметры.Свойство("ЗапретитьВыбор") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаршрутныеКарты.Ссылка КАК МаршрутнаяКарта,
		|	МаршрутныеКарты.Представление КАК МаршрутнаяКартаПредставление
		|ИЗ
		|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|ГДЕ
		|	МаршрутныеКарты.Ссылка <> &Ссылка
		|	//СтрокаПоиска
		|	//СтрокаОтбора
		|УПОРЯДОЧИТЬ ПО
		|	МаршрутнаяКартаПредставление";
					   
		Если Параметры.СтрокаПоиска <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СтрокаПоиска", "И МаршрутныеКарты.Наименование ПОДОБНО &Текст");
		КонецЕсли;
		
		Если Параметры.Свойство("Отбор") Тогда
			СтрокаОтбора = "";
			Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
				СтрокаОтбора = СтрокаОтбора + " И " + ЭлементОтбора.Ключ + " = &" + ЭлементОтбора.Ключ;
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла; 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//СтрокаОтбора", СтрокаОтбора);
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("Ссылка", Параметры.ЗапретитьВыбор);
		Запрос.УстановитьПараметр("Текст",  "%" + СокрЛП(Параметры.СтрокаПоиска) + "%");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.МаршрутнаяКарта, Выборка.МаршрутнаяКартаПредставление);
		КонецЦикла;

	КонецЕсли; 
	
КонецПроцедуры

Процедура ТехнологическиеОперацииОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт

	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
			
			Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") И Параметры.ЗначенияЗаполнения.Свойство("СодержитВложенныйМаршрут") И Параметры.ЗначенияЗаполнения.СодержитВложенныйМаршрут Тогда
				
				ВыбраннаяФорма = "ФормаВложенногоМаршрута";
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
			
			СодержитВложенныйМаршрут = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "СодержитВложенныйМаршрут");
			
			Если СодержитВложенныйМаршрут Тогда
				
				ВыбраннаяФорма = "ФормаВложенногоМаршрута";
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Параметры.Свойство("Ключ") Тогда
			
			СодержитВложенныйМаршрут = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "СодержитВложенныйМаршрут");
			
			Если СодержитВложенныйМаршрут Тогда
				
				ВыбраннаяФорма = "ФормаВложенногоМаршрута";
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти
