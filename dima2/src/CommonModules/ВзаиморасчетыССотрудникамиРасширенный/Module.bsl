
#Область ПрограммныйИнтерфейс

// Процедура регистрирует факт начисления аванса с целью учета взаиморасчетов.
//
// Параметры:
//		Движения 			- коллекция наборов записей движений расчетного документа.
//  	Отказ				- признак отказа выполнения операции.
//		Организация			- СправочникСсылка.Организации
//		ПериодРегистрации 	- дата
//		Начисления  		- таблица значений с данными о начислениях:
//								см. ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты().
//		Удержания  			- таблица значений с данными о начислениях вида:
//								см. ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты().
//
// Исключения
//	В случае каких-либо проблем при проведении признак «Отказ» выставляется в Истина.
//
Процедура ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено) Экспорт

	/// Проверка наличия колонок со статьями	
	Таблицы = Новый Массив;
	Если Начисления <> Неопределено Тогда
		Таблицы.Добавить(Начисления);
	КонецЕсли;	
	Если Удержания <> Неопределено Тогда
		Таблицы.Добавить(Удержания);
	КонецЕсли;	
	
	КолонкиСтатей = Новый Структура;
	КолонкиСтатей.Вставить("СтатьяФинансирования",	Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	КолонкиСтатей.Вставить("СтатьяРасходов",		Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	Для Каждого Таблица Из Таблицы Цикл
		Для Каждого КолонкаСтатей Из КолонкиСтатей Цикл
			Если Таблица.Колонки.Найти(КолонкаСтатей.Ключ) = Неопределено Тогда
				Таблица.Колонки.Добавить(КолонкаСтатей.Ключ, КолонкаСтатей.Значение)
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	/// Регистрация начислений
	Если Начисления <> НеОпределено Тогда
		Для Каждого Строка Из Начисления Цикл
			
			НоваяСтрока = Движения.ЗарплатаКВыплатеАвансом.ДобавитьПриход();
			
			НоваяСтрока.Период					= ПериодРегистрации;
			НоваяСтрока.Организация				= Организация;
			НоваяСтрока.ФизическоеЛицо			= Строка.ФизическоеЛицо;
			НоваяСтрока.Сотрудник				= Строка.Сотрудник;
			НоваяСтрока.Подразделение			= Строка.Подразделение;
			НоваяСтрока.СтатьяФинансирования	= Строка.СтатьяФинансирования;
			НоваяСтрока.СтатьяРасходов			= Строка.СтатьяРасходов;
			НоваяСтрока.ПериодВзаиморасчетов	= ПериодРегистрации;
			НоваяСтрока.СуммаКВыплате			= Строка.Сумма + Строка.СуммаКорректировкиВыплаты;
			НоваяСтрока.ГруппаУчетаНачислений	= Строка.ГруппаУчетаНачислений;
			
		КонецЦикла;
		
		Движения.ЗарплатаКВыплатеАвансом.Записывать	= Истина;
		
	КонецЕсли;
	
	/// Регистрация удержаний
	Если Удержания <> НеОпределено Тогда
		
		Для Каждого Строка Из Удержания Цикл
			
			НоваяСтрока = Движения.ЗарплатаКВыплатеАвансом.ДобавитьПриход();
			
			НоваяСтрока.Период					= ПериодРегистрации;
			НоваяСтрока.Организация				= Организация;
			НоваяСтрока.ФизическоеЛицо			= Строка.ФизическоеЛицо;
			НоваяСтрока.Сотрудник				= Строка.Сотрудник;
			НоваяСтрока.Подразделение			= Строка.Подразделение;
			НоваяСтрока.СтатьяФинансирования	= Строка.СтатьяФинансирования;
			НоваяСтрока.СтатьяРасходов			= Строка.СтатьяРасходов;
			НоваяСтрока.ПериодВзаиморасчетов	= ПериодРегистрации;
			НоваяСтрока.СуммаКВыплате			= -(Строка.Сумма - Строка.СуммаКорректировкиВыплаты);
			НоваяСтрока.ГруппаУчетаНачислений	= Строка.ГруппаУчетаНачислений;
			
		КонецЦикла;
		
		Движения.ЗарплатаКВыплатеАвансом.Записывать	= Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныйПрограммныйИнтерфейс

Функция ПроизводиласьВыплатаЗарплатыВПериоде(Организация, ПериодРегистрации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Взаиморасчеты
		|ГДЕ
		|	Взаиморасчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И Взаиморасчеты.Организация = &Организация
		|	И Взаиморасчеты.Период = &ПериодРегистрации
		|	И Взаиморасчеты.ВидВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты)";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Места выплаты зарплаты

// Функция возвращает информацию о настройке места выплаты для организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций
//
Функция МестоВыплатыЗарплатыОрганизации(Организация) Экспорт
	
	МестоВыплатыЗарплатыОрганизации = РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыОрганизации.Организация = Организация;
	МестоВыплатыЗарплатыОрганизации.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыОрганизации.Выбран() Тогда
		МестоВыплатыЗарплатыОрганизации.Организация = Организация;
		МестоВыплатыЗарплатыОрганизации.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса
	КонецЕсли;	
	
	Возврат МестоВыплатыЗарплатыОрганизации
	
КонецФункции

// Функция возвращает информацию о настройке места выплаты для подразделения.
//
// Параметры:
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений
//
Функция МестоВыплатыЗарплатыПодразделения(Подразделение, Знач Организация = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Владелец");
	КонецЕсли;	
	
	МестоВыплатыЗарплатыПодразделения = РегистрыСведений.МестаВыплатыЗарплатыПодразделений.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыПодразделения.Подразделение	= Подразделение;
	МестоВыплатыЗарплатыПодразделения.Организация	= Организация;
	
	МестоВыплатыЗарплатыПодразделения.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыПодразделения.Выбран() Тогда
		МестоВыплатыЗарплатыПодразделения.Подразделение = Подразделение;
		МестоВыплатыЗарплатыПодразделения.Организация	= Организация;
	КонецЕсли;	
		
	Возврат МестоВыплатыЗарплатыПодразделения
	
КонецФункции

// Функция возвращает информацию о месте выплаты подразделения с учетом организации.
//
// Параметры:
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//	Иерархически  - булево, учитывать ли место выплаты организации.
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций.
//	или Неопределено
//
Функция МестоВыплатыЗарплатыПодразделенияОрганизации(Подразделение) Экспорт
	
	МестоВыплаты = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ МестаВыплатыЗарплатыПодразделений.Вид ЕСТЬ NULL 
	|			ТОГДА МестаВыплатыЗарплатыПодразделений.Подразделение
	|		КОГДА НЕ МестаВыплатыЗарплатыОрганизаций.Вид ЕСТЬ NULL 
	|			ТОГДА МестаВыплатыЗарплатыОрганизаций.Организация
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Источник,
	|	ЕСТЬNULL(МестаВыплатыЗарплатыПодразделений.Вид, МестаВыплатыЗарплатыОрганизаций.Вид) КАК Вид,
	|	ЕСТЬNULL(МестаВыплатыЗарплатыПодразделений.МестоВыплаты, МестаВыплатыЗарплатыОрганизаций.МестоВыплаты) КАК МестоВыплаты,
	|	ПодразделенияОрганизаций.Владелец КАК Организация
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
	|		ПО (МестаВыплатыЗарплатыПодразделений.Подразделение = ПодразделенияОрганизаций.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
	|		ПО (МестаВыплатыЗарплатыОрганизаций.Организация = ПодразделенияОрганизаций.Владелец)
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Подразделение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыПодразделений.СоздатьМенеджерЗаписи();
			МестоВыплаты.Подразделение	= Выборка.Источник;
			МестоВыплаты.Организация	= Выборка.Организация;
			МестоВыплаты.Вид			= Выборка.Вид;
			МестоВыплаты.МестоВыплаты = Выборка.МестоВыплаты;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.Источник) = Тип("СправочникСсылка.Организации") Тогда
			МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.СоздатьМенеджерЗаписи();
			МестоВыплаты.Организация	= Выборка.Организация;
			МестоВыплаты.Вид			= Выборка.Вид;
			МестоВыплаты.МестоВыплаты	= Выборка.МестоВыплаты;
		Иначе	
			МестоВыплаты = Неопределено
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат МестоВыплаты
	
КонецФункции

// Функция возвращает информацию о настройке места выплаты зарплаты сотрудника.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыСотрудников
//
Функция МестоВыплатыЗарплатыСотрудника(Сотрудник, Знач ФизическоеЛицо = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;	
	
	МестоВыплатыЗарплатыСотрудника = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МестоВыплатыЗарплатыСотрудника.Сотрудник		= Сотрудник;
	МестоВыплатыЗарплатыСотрудника.ФизическоеЛицо	= ФизическоеЛицо;
	МестоВыплатыЗарплатыСотрудника.Прочитать();
	
	Если НЕ МестоВыплатыЗарплатыСотрудника.Выбран() Тогда
		МестоВыплатыЗарплатыСотрудника.Сотрудник		= Сотрудник;
		МестоВыплатыЗарплатыСотрудника.ФизическоеЛицо	= ФизическоеЛицо
	КонецЕсли;	
	
	Возврат МестоВыплатыЗарплатыСотрудника
	
КонецФункции

// Функция возвращает информацию о настройке места выплаты зарплаты сотрудника с учетом подразделения.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники
//	Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//	ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение
//	РегистрСведенийМенеджер.МестаВыплатыЗарплатыСотрудников,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений,
//	РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций.
//	или Неопределено
//
Функция МестоВыплатыЗарплатыСотрудникаПодразделения(Сотрудник, Знач ФизическоеЛицо, Подразделение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;	
	
	МестоВыплаты = РегистрыСведений.МестаВыплатыЗарплатыСотрудников.СоздатьМенеджерЗаписи();
	МестоВыплаты.Сотрудник		= Сотрудник;
	МестоВыплаты.ФизическоеЛицо	= ФизическоеЛицо;
	МестоВыплаты.Прочитать();
	
	Если НЕ МестоВыплаты.Выбран() Тогда
		МестоВыплаты = МестоВыплатыЗарплатыПодразделенияОрганизации(Подразделение);
	КонецЕсли;	
	
	Возврат МестоВыплаты
	
КонецФункции

// Функция возвращает информацию о местах выплаты зарплаты сотрудников.
//
// Параметры:
//	Сотрудники - массив СправочникСсылка.Сотрудники.
//	ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение
//		Таблица значений с колонками:
//			- Сотрудник (СправочникСсылка.Сотрудники)
//			- Вид (ПеречислениеСсылка.ВидыМестВыплатыЗарплаты)
//			- МестоВыплаты
//
Функция МестаВыплатыЗарплатыСотрудников(Сотрудники, ВидыМестВыплаты = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники",		Сотрудники);
	Запрос.УстановитьПараметр("ВидыМестВыплаты",?(ВидыМестВыплаты = Неопределено, Перечисления.ВидыМестВыплатыЗарплаты.ВсеЗначения(), ВидыМестВыплаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестаВыплатыЗарплатыСотрудников.Сотрудник КАК Сотрудник,
	|	МестаВыплатыЗарплатыСотрудников.МестоВыплаты КАК МестоВыплаты
	|ИЗ
	|	РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|ГДЕ
	|	МестаВыплатыЗарплатыСотрудников.Сотрудник В(&Сотрудники)
	|	И МестаВыплатыЗарплатыСотрудников.Вид В(&ВидыМестВыплаты)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает представление места выплаты зарплаты в виде строки.
//
// Параметры:
//	МестоВыплатыЗарплаты - РегистрСведенийМенеджер регистра МестоВыплатыЗарплаты (Организаций, Подразделений,
//	                       Сотрудников).
//	ПредставлениеНеуказанного - необязательная строка с текстом представления незаданного места выплаты.
//
// Возвращаемое значение
//	строка
//
Функция ПредставлениеМестаВыплатыЗарплаты(МестоВыплатыЗарплаты, ПредставлениеНеуказанного = "") Экспорт
	
	МестаВыплатыЗарплаты = Новый Массив;
	МестаВыплатыЗарплаты.Добавить(МестоВыплатыЗарплаты);
	
	ПредставленияНазначенийМестВыплаты = Новый Соответствие;
	ПредставленияНазначенийМестВыплаты.Вставить(
		Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций"), 
		НСтр("ru='Как всему подразделению:';uk='Як всього підрозділу:'"));
	ПредставленияНазначенийМестВыплаты.Вставить(
		Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений"), 
		НСтр("ru='Как всему подразделению:';uk='Як всього підрозділу:'"));

	ПредставленияМестВыплатыЗарплаты = ПредставленияМестВыплатыЗарплаты(МестаВыплатыЗарплаты, ПредставленияНазначенийМестВыплаты);
	
	ПредставлениеМестаВыплатыЗарплаты = ПредставленияМестВыплатыЗарплаты[МестоВыплатыЗарплаты];
	ПредставлениеМестаВыплатыЗарплаты = ?(ЗначениеЗаполнено(ПредставлениеМестаВыплатыЗарплаты), ПредставлениеМестаВыплатыЗарплаты, ПредставлениеНеуказанного); 
	
	Возврат ПредставлениеМестаВыплатыЗарплаты
	
КонецФункции	

// Функция возвращает представление мест выплаты зарплаты в виде соответствия место - представление.
//
// Параметры:
//	МестаВыплатыЗарплаты - массив элементов РегистрСведенийМенеджер одного из регистров МестоВыплатыЗарплаты
//	                       (Организаций, Подразделений, Сотрудников).
//	ПредставленияНазначенийМестВыплаты - соответствие (тип менеджера регистра сведений) - представление назначения.
//		Например Тип("РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений") - "Как всему подразделению:".
//
// Возвращаемое значение
//	соответствие
//
Функция ПредставленияМестВыплатыЗарплаты(МестаВыплатыЗарплаты, ПредставленияНазначенийМестВыплаты) Экспорт
	
	ПредставленияМестВыплатыЗарплаты = Новый Соответствие;
	
	МестаВыплаты = Новый ТаблицаЗначений;
	МестаВыплаты.Колонки.Добавить("Ссылка", Метаданные.РегистрыСведений.МестаВыплатыЗарплатыСотрудников.Ресурсы.МестоВыплаты.Тип);
	Для Каждого МестоВыплатыЗарплаты Из МестаВыплатыЗарплаты Цикл
		Если МестоВыплатыЗарплаты <> Неопределено Тогда
			МестоВыплаты = МестаВыплаты.Добавить();
			МестоВыплаты.Ссылка = МестоВыплатыЗарплаты.МестоВыплаты;
		КонецЕсли	
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МестаВыплаты", МестаВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВыплаты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТМестаВыплаты
	|ИЗ
	|	&МестаВыплаты КАК МестаВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МестаВыплаты.Ссылка КАК МестоВыплаты,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(МестаВыплаты.Ссылка) КАК Представление
	|ИЗ
	|	ВТМестаВыплаты КАК МестаВыплаты";
	
	ВыборкаПредставлений = Запрос.Выполнить().Выбрать();
	
	СтрокаПодстановкиМестоЕсть	= НСтр("ru='%1 %2 «%3»';uk='%1 %2 «%3»'");
	СтрокаПодстановкиМестоПустое= НСтр("ru='%1 %2';uk='%1 %2'");
	
	Для Каждого МестоВыплатыЗарплаты Из МестаВыплатыЗарплаты Цикл
		
		Представление = "";
		
		ВыборкаПредставлений.Сбросить();
		Если МестоВыплатыЗарплаты <> Неопределено И ВыборкаПредставлений.НайтиСледующий(МестоВыплатыЗарплаты.МестоВыплаты, "МестоВыплаты") Тогда
			Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
				
				СтрокаПодстановки = ?(ЗначениеЗаполнено(ВыборкаПредставлений.Представление), СтрокаПодстановкиМестоЕсть, СтрокаПодстановкиМестоПустое);
				
				ПредставлениеНазначенияМестаВыплаты = ПредставленияНазначенийМестВыплаты[ТипЗнч(МестоВыплатыЗарплаты)];
				ПредставлениеНазначенияМестаВыплаты = ?(ЗначениеЗаполнено(ПредставлениеНазначенияМестаВыплаты), ПредставлениеНазначенияМестаВыплаты, "");

				Представление = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						СтрокаПодстановки, 
						ПредставлениеНазначенияМестаВыплаты, 
						МестоВыплатыЗарплаты.Вид, 
						ВыборкаПредставлений.Представление)
			КонецЕсли;              
		КонецЕсли;              
					
		ПредставленияМестВыплатыЗарплаты.Вставить(МестоВыплатыЗарплаты, СокрЛП(Представление))
		
	КонецЦикла;	
	
	Возврат ПредставленияМестВыплатыЗарплаты;
	
КонецФункции	

// Процедура проверяет информацию о настройке мест выплаты для организации.
//
// Параметры:
//	МестоВыплатыЗарплатыОрганизации 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыОрганизаций
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыОрганизации(МестоВыплатыЗарплатыОрганизации, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыОрганизации, 
		РегистрыСведений.МестаВыплатыЗарплатыОрганизаций.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Процедура проверяет информацию о настройке мест выплаты для подразделения.
//
// Параметры:
//	МестоВыплатыЗарплатыПодразделения 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыПодразделений
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыПодразделения(МестоВыплатыЗарплатыПодразделения, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыПодразделения, 
		РегистрыСведений.МестаВыплатыЗарплатыПодразделений.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Процедура проверяет информацию о настройке мест выплаты для подразделения.
//
// Параметры:
//	МестоВыплатыЗарплатыСотрудника 	- РегистрСведенийМенеджерЗаписи.МестаВыплатыЗарплатыСотрудников
//	Отказ								- возвращаемое булево.
//
Процедура ПроверитьМестоВыплатыЗарплатыСотрудника(МестоВыплатыЗарплатыСотрудника, Отказ) Экспорт
	
	ПроверитьМестоВыплатыЗарплаты(
		МестоВыплатыЗарплатыСотрудника, 
		РегистрыСведений.МестаВыплатыЗарплатыСотрудников.ДопустимыеВидыМестВыплаты(), 
		Отказ);
	
КонецПроцедуры

// Процедура сохраняет информацию о настройке места выплаты.
//
// Параметры:
//	МестоВыплатыЗарплаты - РегистрСведенийМенеджерЗаписи регистра МестоВыплатыЗарплаты (Организаций, Подразделений,
//	                       Сотрудников).
//
Процедура ЗаписатьМестоВыплатыЗарплаты(МестоВыплатыЗарплаты) Экспорт
	
	Если МестоВыплатыЗарплаты.Модифицированность() Тогда
		Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
			МестоВыплатыЗарплаты.МестоВыплаты = ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты);
			МестоВыплатыЗарплаты.Записать();
		Иначе	
			МестоВыплатыЗарплаты.Удалить();
		КонецЕсли	
	КонецЕсли	
	
КонецПроцедуры

Процедура МестаВыплатыЗарплатыПередЗаписью(НаборЗаписей, Отказ, Замещение) Экспорт
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаборЗаписей.Метаданные().ПолноеИмя());
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если МенеджерРегистра.ДопустимыеВидыМестВыплаты().Найти(Запись.Вид) = Неопределено Тогда
			ТекстСообщения = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Недопустимый вид выплаты (%1)';uk='Некоректний вигляд виплати (%1)'"),
					Запись.Вид);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
		КонецЕсли;	
		
		ОписаниеТипов = ОписаниеТипаМестаВыплатыПоВиду(Запись.Вид); 
		
		Если ОписаниеТипов = Неопределено Тогда
			Запись.МестоВыплаты = Неопределено
		Иначе
			Если ЗначениеЗаполнено(Запись.МестоВыплаты) И НЕ ОписаниеТипов.СодержитТип(ТипЗнч(Запись.МестоВыплаты)) Тогда
				ТекстСообщения = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Место выплаты (%2) не соответствует виду выплаты (%1)';uk='Місце виплати (%2) не відповідає виду виплати (%1)'"),
						Запись.Вид, Запись.МестоВыплаты);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
			КонецЕсли;
			Запись.МестоВыплаты = ОписаниеТипов.ПривестиЗначение(Запись.МестоВыплаты);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Функция возвращает описание типов, соответствующее виду места выплаты.
//
// Параметры:
//	ВидМестаВыплаты - ПеречислениеСсылка.ВидыМестВыплатыЗарплаты
//
// Возвращаемое значение
//	ОписаниеТипов
//
Функция ОписаниеТипаМестаВыплатыПоВиду(ВидМестаВыплаты) Экспорт
	
	ОписаниеТипов = Неопределено;

	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Кассы");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ЗарплатныеПроекты");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	КонецЕсли;	
	
	Возврат ОписаниеТипов
	
КонецФункции	

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	
КонецПроцедуры	

Процедура СпособыВыплатыЗарплатыНачальноеЗаполнение() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	СпособыВыплатыЗарплаты.ХарактерВыплаты,
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования,
	|	СпособыВыплатыЗарплаты.ГруппаУчетаНачислений
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	СпособыВыплатыЗарплаты.Поставляемый";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеЭлементов = ОписаниеСпособовВыплатыЗарплатыПоУмолчанию();
	СтруктураПоиска = Новый Структура("ХарактерВыплаты, ВидДокументаОснования, ГруппаУчетаНачислений");
	
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеЭлемента);
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпособВыплатыОбъект.ПометкаУдаления = Ложь;
		Иначе
			Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПредопределенныхДанных) Тогда
				Предопределенный = 
					ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты." + ОписаниеЭлемента.ИмяПредопределенныхДанных);
				СпособВыплатыОбъект	= Предопределенный.ПолучитьОбъект();
			Иначе	
				СпособВыплатыОбъект = Справочники.СпособыВыплатыЗарплаты.СоздатьЭлемент();
			КонецЕсли	
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(СпособВыплатыОбъект, ОписаниеЭлемента,, "ИмяПредопределенныхДанных");
		
		СпособВыплатыОбъект.Записать();
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура СпособыВыплатыЗарплатыЗаполнитьПризнакПоставляемый() Экспорт
	
	// Предопределенный элемент по определению поставляемый.
	СпособВыплатыСсылка = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СпособыВыплатыЗарплаты.Зарплата");
	СпособВыплатыОбъект = СпособВыплатыСсылка.ПолучитьОбъект();
	Если НЕ СпособВыплатыОбъект.Поставляемый Тогда
		СпособВыплатыОбъект.Поставляемый = Истина;
		СпособВыплатыОбъект.Записать();
	КонецЕсли;	
	
	// Выбираем не помеченные как поставляемые.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка КАК Ссылка,
	|	СпособыВыплатыЗарплаты.Поставляемый,
	|	СпособыВыплатыЗарплаты.ХарактерВыплаты,
	|	СпособыВыплатыЗарплаты.ВидДокументаОснования
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	НЕ СпособыВыплатыЗарплаты.Предопределенный";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеЭлементов = ОписаниеСпособовВыплатыЗарплатыПоУмолчанию();
	СтруктураПоиска = Новый Структура("Поставляемый, ХарактерВыплаты, ВидДокументаОснования");
	
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеЭлемента);
		
		// Проверяем наличие поставляемого.
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			// Если такой поставляемый уже есть - ничего делать не надо.
			Продолжить;
		КонецЕсли;	
		
		// Ищем такой же, но без признака поставляемых.
		СтруктураПоиска.Поставляемый = Ложь;
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			СпособВыплатыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпособВыплатыОбъект.Поставляемый = Истина;
			СпособВыплатыОбъект.Записать();
		КонецЕсли;	
		
	КонецЦикла	
	
КонецПроцедуры


Функция ОписаниеСпособовВыплатыЗарплатыПоУмолчанию()
	
	НаименованияМежрасчетныхВыплат = Новый Соответствие;
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.БольничныйЛист,					НСтр("ru='Больничные листы';uk='Лікарняні листи'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ЕдиновременноеПособиеЗаСчетФСС,	НСтр("ru='Единовременные пособия за счет ФСС';uk='Одноразові допомоги за рахунок ФСС'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Командировка,						НСтр("ru='Командировки';uk='Відрядження'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.КомпенсацияЗаЗадержкуЗарплаты,	НСтр("ru='Компенсации за задержку зарплаты';uk='Компенсації за затримку зарплати'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.МатериальнаяПомощь,				НСтр("ru='Материальная помощь';uk='Матеріальна допомога'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.НачислениеЗарплаты,				НСтр("ru='Доначисление';uk='Донарахування'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ОплатаПоСреднемуЗаработку,		НСтр("ru='Отсутствие с сохранением оплаты';uk='Відсутність із збереженням оплати'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Отпуск,							НСтр("ru='Отпуска';uk='Відпустки'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Премия,							НСтр("ru='Премии';uk='Премії'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.ПростойСотрудников,				НСтр("ru='Простои';uk='Простої'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.РазовоеНачисление,				НСтр("ru='Разовые начисления';uk='Разові нарахування'"));
	НаименованияМежрасчетныхВыплат.Вставить(Перечисления.ВидыДокументовМежрасчетныхНачислений.Увольнение,						НСтр("ru='Увольнения';uk='Звільнення'"));

	ОписаниеЭлементов = Новый ТаблицаЗначений;
	ОписаниеЭлементов.Колонки.Добавить("ИмяПредопределенныхДанных", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(256)));
	ОписаниеЭлементов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Для Каждого Реквизит Из Метаданные.Справочники.СпособыВыплатыЗарплаты.Реквизиты Цикл
		ОписаниеЭлементов.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;	
	
	ОписаниеЭлемента = ОписаниеЭлементов.Добавить();
	ОписаниеЭлемента.ИмяПредопределенныхДанных		= "Зарплата";
	ОписаниеЭлемента.Наименование					= НСтр("ru='Зарплата за месяц';uk='Зарплата за місяць'");
	ОписаниеЭлемента.ХарактерВыплаты				= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	
	ОписаниеЭлемента = ОписаниеЭлементов.Добавить();
	ОписаниеЭлемента.Наименование					= НСтр("ru='Аванс';uk='Аванс'");
	ОписаниеЭлемента.ХарактерВыплаты				= Перечисления.ХарактерВыплатыЗарплаты.Аванс;
	
	ОписаниеЭлемента = ОписаниеЭлементов.Добавить();
	ОписаниеЭлемента.Наименование					= НСтр("ru='Выплаты по договорам';uk='Виплати за договорами'");
	ОписаниеЭлемента.ХарактерВыплаты				= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	ОписаниеЭлемента.ГруппаУчетаНачислений			= Справочники.ГруппыУчетаНачисленийИУдержаний.ВыплатыПоДоговорам;
	
	ВидыДокументовСОкончательнымРасчетом = Новый Массив;
	ВидыДокументовСОкончательнымРасчетом.Добавить(Метаданные.Перечисления.ВидыДокументовМежрасчетныхНачислений.ЗначенияПеречисления.Увольнение);

	Для Каждого ВидДокументаМежрасчетныхНачислений Из Метаданные.Перечисления.ВидыДокументовМежрасчетныхНачислений.ЗначенияПеречисления Цикл
		
		Если СтрНайти(ВидДокументаМежрасчетныхНачислений.Синоним, "ѳ") > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ВидДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений[ВидДокументаМежрасчетныхНачислений.Имя];
		
        Если ВидДокументаМежрасчетныхНачислений.Имя = "БольничныйЛист" Тогда		
			
			ОписаниеЭлемента = ОписаниеЭлементов.Добавить();
			ОписаниеЭлемента.Наименование					= НаименованияМежрасчетныхВыплат[ВидДокументаОснования] + НСтр("ru=' (за счет ФСС)';uk=' (за рахунок ФСС)'");
			ОписаниеЭлемента.ВидДокументаОснования			= ВидДокументаОснования;
			ОписаниеЭлемента.ГруппаУчетаНачислений			= Справочники.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС;
			ОписаниеЭлемента.КодДоходаНДФЛ                  = Справочники.ВидыДоходовНДФЛ.Код101ФСС;
			ОписаниеЭлемента.КодДоходаВС                  	= Справочники.ВидыДоходовНДФЛ.ВоенныйСборФСС;
			
			Если ВидыДокументовСОкончательнымРасчетом.Найти(ВидДокументаМежрасчетныхНачислений) <> Неопределено Тогда
				ОписаниеЭлемента.ХарактерВыплаты= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;	
			Иначе	
				ОписаниеЭлемента.ХарактерВыплаты= Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;	
			КонецЕсли;
			
			ОписаниеЭлемента = ОписаниеЭлементов.Добавить();
			ОписаниеЭлемента.Наименование					= НаименованияМежрасчетныхВыплат[ВидДокументаОснования] + НСтр("ru=' (за счет предприятия)';uk=' (за рахунок підприємства)'");
			ОписаниеЭлемента.ВидДокументаОснования			= ВидДокументаОснования;
			ОписаниеЭлемента.ГруппаУчетаНачислений			= Справочники.ГруппыУчетаНачисленийИУдержаний.ПрочиеВыплаты;
			ОписаниеЭлемента.КодДоходаНДФЛ                  = Справочники.ВидыДоходовНДФЛ.Код101;
			ОписаниеЭлемента.КодДоходаВС                  	= Справочники.ВидыДоходовНДФЛ.ВоенныйСбор;
			
			Если ВидыДокументовСОкончательнымРасчетом.Найти(ВидДокументаМежрасчетныхНачислений) <> Неопределено Тогда
				ОписаниеЭлемента.ХарактерВыплаты= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;	
			Иначе	
				ОписаниеЭлемента.ХарактерВыплаты= Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;	
			КонецЕсли;
		Иначе	
			ОписаниеЭлемента = ОписаниеЭлементов.Добавить();
			ОписаниеЭлемента.Наименование					= НаименованияМежрасчетныхВыплат[ВидДокументаОснования];
			ОписаниеЭлемента.ВидДокументаОснования			= ВидДокументаОснования;
			
			Если ВидыДокументовСОкончательнымРасчетом.Найти(ВидДокументаМежрасчетныхНачислений) <> Неопределено Тогда
				ОписаниеЭлемента.ХарактерВыплаты= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;	
			Иначе	
				ОписаниеЭлемента.ХарактерВыплаты= Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;	
			КонецЕсли;
        КонецЕсли;

	КонецЦикла;	
	
	ОписаниеЭлементов.ЗаполнитьЗначения(Истина, "Поставляемый");
	
	ОписаниеЭлементов.ЗаполнитьЗначения(Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию(), "Округление");
	ОписаниеЭлементов.ЗаполнитьЗначения(100, "ПроцентВыплаты");
	
	Возврат ОписаниеЭлементов;
			
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//////////////////////////////////////////////////////////////////
/// Учет начисленной и выплаченной зарплаты.

Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	
	Таблицы = Новый Массив;
	Если Начисления <> Неопределено Тогда
		Таблицы.Добавить(Начисления);
	КонецЕсли;	
	Если Удержания <> Неопределено Тогда
		Таблицы.Добавить(Удержания);
	КонецЕсли;	

	/// Проверка наличия колонок со статьями	
	
	КолонкиСтатей = Новый Структура;
	КолонкиСтатей.Вставить("СтатьяФинансирования",	Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	КолонкиСтатей.Вставить("СтатьяРасходов",		Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	
	Для Каждого Таблица Из Таблицы Цикл
		Для Каждого КолонкаСтатей Из КолонкиСтатей Цикл
			Если Таблица.Колонки.Найти(КолонкаСтатей.Ключ) = Неопределено Тогда
				Таблица.Колонки.Добавить(КолонкаСтатей.Ключ, КолонкаСтатей.Значение)
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;

	/// Приведение к основным сотрудникам

	Сотрудники = Новый Массив;
	Для Каждого Таблица Из Таблицы Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, Таблица.ВыгрузитьКолонку("Сотрудник"), Истина);
	КонецЦикла;

	ГоловныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ГоловнойСотрудник");
	
	Для Каждого Таблица Из Таблицы Цикл
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			СтрокаТаблицы.Сотрудник = ГоловныеСотрудники[СтрокаТаблицы.Сотрудник]
		КонецЦикла;
	КонецЦикла;
	
	КолонкиСуммирования = Новый Массив;
	КолонкиСуммирования.Добавить("Сумма");
	КолонкиСуммирования.Добавить("СуммаКорректировкиВыплаты");
	
	КолонкиГруппировок = Новый Массив;
	ТаблицаЗарплаты = ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	Для Каждого Колонка Из ТаблицаЗарплаты.Колонки Цикл
		Если КолонкиСуммирования.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиГруппировок.Добавить(Колонка.Имя)
		КонецЕсли	
	КонецЦикла;
	
	Для Каждого Таблица Из Таблицы Цикл
		Таблица.Свернуть(
			СтрСоединить(КолонкиГруппировок, ", "),
			СтрСоединить(КолонкиСуммирования, ", "));
	КонецЦикла;
	
	/// Регистрация в учете взаиморасчетов
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ХарактерВыплаты, Начисления, Удержания);
	
	/// Заполнение документов-оснований
	ДокументОснование = Движения.ЗарплатаКВыплате.Отбор.Регистратор.Значение;	
	Если Метаданные.РегистрыНакопления.ЗарплатаКВыплате.Измерения.ДокументОснование.Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
		Для Каждого Запись Из Движения.ЗарплатаКВыплате Цикл
			Запись.ДокументОснование = ДокументОснование;
		КонецЦикла;	
	КонецЕсли;
	
	/// Регистрация порядка выплаты документа
	ЕстьДвижениеПорядокВыплатыДокументов = Ложь;
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		ЕстьДвижениеПорядокВыплатыДокументов = Движения.Свойство("ПорядокВыплатыДокументов");
	Иначе
		ЕстьДвижениеПорядокВыплатыДокументов = Движения.Найти("ПорядокВыплатыДокументов") <> Неопределено;
	КонецЕсли;
	
	Если ЕстьДвижениеПорядокВыплатыДокументов Тогда
		Если Движения.ПорядокВыплатыДокументов.Количество() = 0 Тогда 
			ПорядокВыплатыДокумента = Движения.ПорядокВыплатыДокументов.Добавить();
			ПорядокВыплатыДокумента.ДокументОснование	= ДокументОснование;
			ПорядокВыплатыДокумента.ПорядокВыплаты		= ХарактерВыплаты;
			Движения.ПорядокВыплатыДокументов.Записывать = Истина;
		Иначе
			ПорядокВыплатыДокумента = Движения.ПорядокВыплатыДокументов[0];
			Если ПорядокВыплатыДокумента.ПорядокВыплаты <> ХарактерВыплаты Тогда
				 ВызватьИсключение НСтр("ru='Все выплаты по документу должны иметь одинаковый порядок выплаты';uk='Всі виплати по документу повинні мати однаковий порядок виплати'")
			КонецЕсли	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Заполнение ведомостей.

// Возвращает структуру, используемую для заполнения ведомостей на выплату зарплаты.
//
Функция ДанныеЗаполненияВедомости() Экспорт
	
	ДанныеЗаполненияВедомости = ВзаиморасчетыССотрудникамиБазовый.ДанныеЗаполненияВедомости();
	
	ДанныеЗаполненияВедомости.Шапка.Вставить("ПеречислениеНДФЛВыполнено", Истина);
	ДанныеЗаполненияВедомости.Шапка.Вставить("ПеречислениеНДФЛРеквизиты", "");
	
	ДанныеЗаполненияВедомости.Вставить("Основания", Новый Массив);

	Возврат ДанныеЗаполненияВедомости
	
КонецФункции	

//////////////////////////////////////////////////////////////////
/// Оплата ведомостей.

Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ЗарегистрироватьНеВыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Физлица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеАвансом.Период,
	|	ЗарплатаКВыплатеАвансом.ВидДвижения,
	|	ЗарплатаКВыплатеАвансом.Организация,
	|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо,
	|	ЗарплатаКВыплатеАвансом.Сотрудник,
	|	ЗарплатаКВыплатеАвансом.Подразделение,
	|	ЗарплатаКВыплатеАвансом.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеАвансом.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеАвансом.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеАвансом.СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
	|ГДЕ
	|	ЗарплатаКВыплатеАвансом.Регистратор = &Ведомость
	|	И ЗарплатаКВыплатеАвансом.ФизическоеЛицо В(&Физлица)";
	
	ВыборкаЗарплатаКВыплатеАвансом	= Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗарплатаКВыплатеАвансом.Следующий() Цикл
		НоваяЗапись = Движения.ЗарплатаКВыплатеАвансом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗарплатаКВыплатеАвансом);
		НоваяЗапись.СуммаКВыплате = - ВыборкаЗарплатаКВыплатеАвансом.СуммаКВыплате;
	КонецЦикла;
	
	Движения.ЗарплатаКВыплатеАвансом.Записывать = Истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Связь между расчетными документами и ведомостями.

Функция СпособВыплатыПоРасчетномуДокументу(РасчетныйДокумент) Экспорт
	
	СпособВыплатыПоРасчетномуДокументу = Справочники.СпособыВыплатыЗарплаты.ПустаяСсылка();
	
	Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
		СпособВыплатыПоРасчетномуДокументу = Справочники.СпособыВыплатыЗарплаты.Зарплата
	Иначе
		ВидДокумента = Перечисления.ВидыДокументовМежрасчетныхНачислений.ПоДокументу(РасчетныйДокумент);
		Если ВидДокумента <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ВидДокументаОснования", ВидДокумента);
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СпособыВыплатыЗарплаты.Ссылка КАК СпособыВыплатыЗарплаты
			|ИЗ
			|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
			|ГДЕ
			|	СпособыВыплатыЗарплаты.ВидДокументаОснования = &ВидДокументаОснования
			|
			|УПОРЯДОЧИТЬ ПО
			|	СпособыВыплатыЗарплаты.Наименование";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СпособВыплатыПоРасчетномуДокументу =  Выборка.СпособыВыплатыЗарплаты
			КонецЕсли	
		КонецЕсли	
	КонецЕсли;	
	
	Возврат СпособВыплатыПоРасчетномуДокументу;
	
КонецФункции

//////////////////////////////////////////////////////////////////
/// Выплата зарплаты

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции создания ведомостей на выплату зарплаты.

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	
	МенеджерДокументаПоМестуВыплаты = Неопределено;
	
	Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком
	ИначеЕсли ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
		МенеджерДокументаПоМестуВыплаты = Документы.ВедомостьНаВыплатуЗарплатыПеречислением
	Иначе
		МенеджерДокументаПоМестуВыплаты = ВзаиморасчетыССотрудникамиБазовый.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты)
	КонецЕсли;	
		
	Возврат МенеджерДокументаПоМестуВыплаты
	
КонецФункции

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты) Экспорт
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда
		ВидВзаиморасчетов = Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод
	Иначе	
		ВидВзаиморасчетов = ВзаиморасчетыССотрудникамиБазовый.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ХарактерВыплаты)
	КонецЕсли;
	
	Возврат ВидВзаиморасчетов
	
КонецФункции

Функция ПараметрыПолученияЗарплатыКВыплате() Экспорт
	
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудникамиБазовый.ПараметрыПолученияЗарплатыКВыплате();
	
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ДокументыОснования",	Новый Массив);
	ПараметрыПолученияЗарплатыКВыплате.Вставить("СтатьяФинансирования",	Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("СтатьяРасходов",		Справочники.СтатьиРасходовЗарплата.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ГруппаУчетаНачислений", Справочники.ГруппыУчетаНачисленийИУдержаний.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("КодДоходаНДФЛ", Справочники.ВидыДоходовНДФЛ.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("КодДоходаВС", Справочники.ВидыДоходовНДФЛ.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ПорядокЗаполненияНалогов", Перечисления.ПорядокЗаполненияНалогов.БезНалогов);
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ЭтоУвольнение", Ложь);
	
	Возврат ПараметрыПолученияЗарплатыКВыплате;
	
КонецФункции

Функция ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость) Экспорт
		
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудникамиБазовый.ПараметрыПолученияЗарплатыКВыплатеВедомости(Ведомость);
	
	ПараметрыПолученияЗарплатыКВыплате.ДокументыОснования	= Ведомость.Основания.ВыгрузитьКолонку("Документ");
	ПараметрыПолученияЗарплатыКВыплате.СтатьяФинансирования	= Ведомость.СтатьяФинансирования;
	ПараметрыПолученияЗарплатыКВыплате.СтатьяРасходов		= Ведомость.СтатьяРасходов;
	ПараметрыПолученияЗарплатыКВыплате.ГруппаУчетаНачислений 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ГруппаУчетаНачислений");	
	ПараметрыПолученияЗарплатыКВыплате.КодДоходаНДФЛ 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "КодДоходаНДФЛ");	
	ПараметрыПолученияЗарплатыКВыплате.КодДоходаВС 				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "КодДоходаВС");	
	ПараметрыПолученияЗарплатыКВыплате.ПорядокЗаполненияНалогов	= Ведомость.ПорядокЗаполненияНалогов;
	ПараметрыПолученияЗарплатыКВыплате.ЭтоУвольнение			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ВидДокументаОснования") = Перечисления.ВидыДокументовМежрасчетныхНачислений.Увольнение;
	
	Возврат ПараметрыПолученияЗарплатыКВыплате
	
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники) Экспорт
	
	
	Если Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	ИначеЕсли Параметры.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда 
		СоздатьВТЗарплатаКВыплатеМежрасчет(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	Иначе	
		ВзаиморасчетыССотрудникамиБазовый.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	КонецЕсли;
	
	// если указан отбор по финансированию, то фильтруем по статьям
	ОтборПоСтатьям = Новый Массив;
	Если ЗначениеЗаполнено(Параметры.СтатьяФинансирования) Тогда
		ОтборПоСтатьям.Добавить("СтатьяФинансирования = &СтатьяФинансирования");
	КонецЕсли;	
	Если ЗначениеЗаполнено(Параметры.СтатьяРасходов) Тогда
		ОтборПоСтатьям.Добавить("СтатьяРасходов = &СтатьяРасходов");
	КонецЕсли;	
	Если ОтборПоСтатьям.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("СтатьяФинансирования",	Параметры.СтатьяФинансирования);
		Запрос.УстановитьПараметр("СтатьяРасходов",			Параметры.СтатьяРасходов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
		|	ЗарплатаКВыплате.КВыплате КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеПоУказаннымСтатьям
		|ИЗ
		|	ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	&ОтборПоСтатьям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗарплатаКВыплате
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
		|	ЗарплатаКВыплате.КВыплате КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплате
		|ИЗ
		|	ВТЗарплатаКВыплатеПоУказаннымСтатьям КАК ЗарплатаКВыплате";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоСтатьям", СтрСоединить(ОтборПоСтатьям, " И "));
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	СоздатьВТЗарплатаКВыплатеСУчетомОплатыПособий(Параметры, МенеджерВременныхТаблиц, ТолькоРазрешенные);
	
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплатеАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	
	
	// Получаем плановый аванс и начисления первой половины месяца
	ВзаиморасчетыССотрудникамиБазовый.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",		Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",	Параметры.ПериодРегистрации);
	
	// Отбираем документы текущего периода с выплатой в аванс
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыВыплачиваемыеВАванс
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокВыплатыДокументов КАК ПорядокВыплатыДокументов
	|		ПО (ПорядокВыплатыДокументов.Регистратор = ЗарплатаКВыплате.Регистратор)
	|ГДЕ
	|	ПорядокВыплатыДокументов.ПорядокВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)
	|	И ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодРегистрации";
	
	Запрос.Выполнить();

	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	// Остатки сумм к выплате по авансовым документам
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	ЗарплатаКВыплатеОстатки.ГруппаУчетаНачислений,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеДокументовВыплачиваемыхВАванс
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплатеОстатки.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|				Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники)
	|					И ДокументОснование В
	|						(ВЫБРАТЬ
	|							Документы.Ссылка
	|						ИЗ
	|							ВТДокументыВыплачиваемыеВАванс КАК Документы)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ЗарплатаКВыплате.ГруппаУчетаНачислений,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.Период < КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)
	|		И ЗарплатаКВыплате.ДокументОснование В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыВыплачиваемыеВАванс КАК Документы)) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	ЗарплатаКВыплатеОстатки.ГруппаУчетаНачислений";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	// Общая сумма выплаты в аванс
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|	ЗарплатаКВыплате.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеАвансСУчетомДокументовВыплачиваемыхВАванс
	|ИЗ
	|	ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.ГруппаУчетаНачислений,
	|	ЗарплатаКВыплате.КВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеДокументовВыплачиваемыхВАванс КАК ЗарплатаКВыплате";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТЗарплатаКВыплате
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДокументыВыплачиваемыеВАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗарплатаКВыплатеДокументовВыплачиваемыхВАванс";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|	ЗарплатаКВыплате.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеАвансСУчетомДокументовВыплачиваемыхВАванс КАК ЗарплатаКВыплате
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗарплатаКВыплатеАвансСУчетомДокументовВыплачиваемыхВАванс";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Основания",					Параметры.ДокументыОснования);	
	
	// Документы-основания, зарегистрированные в разных релизах 
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Регистратор КАК Документ
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В(&Основания)
	|	И ЗарплатаКВыплате.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|";

    РезультатЗапроса = Запрос.Выполнить();

	// Остатки сумм к выплате по указанным сотрудникам и документам
	СоздатьВТЗарплатаКВыплатеМежрасчет3022(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Документ"));


	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеМежрасчет.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеМежрасчет.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеМежрасчет.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеМежрасчет.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеМежрасчет.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеМежрасчет.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплатеМежрасчет.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|	ЗарплатаКВыплатеМежрасчет.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеМежрасчет3022 КАК ЗарплатаКВыплатеМежрасчет
	|";

  	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеМежрасчет3022(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, ДокументыОснования)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("Основания",					ДокументыОснования);	
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	Запрос.УстановитьПараметр("ГруппаУчетаНачислений",		Параметры.ГруппаУчетаНачислений);	
	
	
	// Остатки сумм к выплате по указанным сотрудникам и документам
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	ЗарплатаКВыплатеОстатки.ГруппаУчетаНачислений,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеМежрасчет3022
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ЗарплатаКВыплатеОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ЗарплатаКВыплатеОстатки.ДокументОснование КАК ДокументОснование,
	|		ЗарплатаКВыплатеОстатки.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
	|				Сотрудник В
	|						(ВЫБРАТЬ
	|							Сотрудники.Сотрудник
	|						ИЗ
	|							#ВТСотрудники КАК Сотрудники)
	|					И ДокументОснование В (&Основания)
	|					И (ГруппаУчетаНачислений = &ГруппаУчетаНачислений ИЛИ &ГруппаУчетаНачислений = ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.ПустаяСсылка))) КАК ЗарплатаКВыплатеОстатки	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.СтатьяФинансирования,
	|		ЗарплатаКВыплате.СтатьяРасходов,
	|		ЗарплатаКВыплате.ДокументОснование,
	|		ЗарплатаКВыплате.ГруппаУчетаНачислений,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплате.Период < КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|		И ЗарплатаКВыплате.Сотрудник В
	|				(ВЫБРАТЬ
	|					Сотрудники.Сотрудник
	|				ИЗ
	|					#ВТСотрудники КАК Сотрудники)
	|		И ЗарплатаКВыплате.ДокументОснование В(&Основания)
	|		И (ГруппаУчетаНачислений = &ГруппаУчетаНачислений ИЛИ &ГруппаУчетаНачислений = ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.ПустаяСсылка))) КАК ЗарплатаКВыплатеОстатки	
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.СтатьяФинансирования,
	|	ЗарплатаКВыплатеОстатки.СтатьяРасходов,
	|	ЗарплатаКВыплатеОстатки.ДокументОснование,
	|	ЗарплатаКВыплатеОстатки.ГруппаУчетаНачислений";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные) Экспорт
	

	// Получаем плановые авансы по настройкам
	
	Если Не ПустаяСтрока(КадровыеДанные) Тогда
		КадровыеДанные = КадровыеДанные + ",";
	КонецЕсли;
	КадровыеДанные = КадровыеДанные + "ТерриторияВыполненияРаботВОрганизации";
	
	ВзаиморасчетыССотрудникамиБазовый.СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные);
	
	// Перемещаем полученные авансы в служебную таблицу
	// Готовим фильтры для обращения к подсистемам

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыйАванс.Сотрудник КАК Сотрудник,
	|	ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПлановыйАванс.Подразделение КАК Подразделение,
	|	ПлановыйАванс.ТерриторияВыполненияРаботВОрганизации,
	|	ПлановыйАванс.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ПлановыйАванс.СтатьяРасходов КАК СтатьяРасходов,
	|	ПлановыйАванс.СуммаКВыплате КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАвансБазовый
	|ИЗ
	|	ВТПлановыйАванс КАК ПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПлановыйАванс.Сотрудник,
	|	ПлановыйАванс.Подразделение,
	|	ПлановыйАванс.ТерриторияВыполненияРаботВОрганизации,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПодразделенияПериоды
	|ИЗ
	|	ВТПлановыйАвансБазовый КАК ПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиПодразделенияПериоды.Сотрудник,
	|	&Дата КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТСотрудникиПодразделенияПериоды КАК СотрудникиПодразделенияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАванс";
	
	Запрос.Выполнить();
	
	// Определяем сотрудников в состоянии, исключающем получение аванса.
	СоздатьВТСотрудникиНеПолучающиеАванс(МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", Параметры.ПериодРегистрации);	
	
	// Получаем применение плановых начислений сотрудников.
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеПлановыхНачислений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"));
	
	// Определяем источники финансирования зарплаты сотрудников.
	ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(
		МенеджерВременныхТаблиц,
		"ВТСотрудникиПодразделенияПериоды", ,
		Параметры.Организация);
		
	// Заполняем источники финансирования
	// Обнуляем суммы отсутствующим
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансБазовый.Сотрудник КАК Сотрудник,
	|	АвансБазовый.ФизическоеЛицо КАК ФизическоеЛицо,
	|	АвансБазовый.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(Бухучет.СтатьяФинансирования, АвансБазовый.СтатьяФинансирования) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(Бухучет.СтатьяРасходов, АвансБазовый.СтатьяРасходов) КАК СтатьяРасходов,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.Зарплата) КАК ГруппаУчетаНачислений,
	|	ВЫБОР
	|		КОГДА СотрудникиНеПолучающиеАванс.Сотрудник ЕСТЬ NULL 
	|				И ЕСТЬNULL(ПрименениеПлановыхНачислений.Применение, ИСТИНА)
	|			ТОГДА АвансБазовый.СуммаКВыплате
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКВыплате
	|ПОМЕСТИТЬ ВТПлановыйАванс
	|ИЗ
	|	ВТПлановыйАвансБазовый КАК АвансБазовый
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК Бухучет
	|		ПО АвансБазовый.Сотрудник = Бухучет.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиНеПолучающиеАванс КАК СотрудникиНеПолучающиеАванс
	|		ПО АвансБазовый.Сотрудник = СотрудникиНеПолучающиеАванс.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
	|		ПО АвансБазовый.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник";
	
 	Запрос.Выполнить();
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТПлановыйАвансБазовый
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСведенияОБухучетеЗарплатыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиНеПолучающиеАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачисленийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПодразделенияПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПериоды";

 	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиНеПолучающиеАванс(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Месяц = ПериодРегистрации;
	НачалоПериода	= Дата(Год(Месяц), Месяц(Месяц), 1);
	КонецПериода	= Дата(Год(Месяц), Месяц(Месяц), 15);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВременнойТаблицы);
	
	
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	СостоянияИсключающиеАванс = Новый Массив;
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.БолезньБезОплаты);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоБеременностиИРодам);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтпускПоУходуЗаРебенком);
	СостоянияИсключающиеАванс.Добавить(Перечисления.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам);
	
	СостоянияСотрудников.СоздатьВТСостоянияСотрудников(
		МенеджерВременныхТаблиц,
		Сотрудники,
		СостоянияИсключающиеАванс,
		НачалоПериода, КонецПериода);
	
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);		
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);		
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияСотрудников.Сотрудник,
	|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
	|				КОГДА СостоянияСотрудников.Начало < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ СостоянияСотрудников.Начало
	|			КОНЕЦ, ВЫБОР
	|				КОГДА СостоянияСотрудников.Окончание > &КонецПериода
	|						ИЛИ СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ СостоянияСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) КАК Продолжительность
	|ПОМЕСТИТЬ ВТСотрудникиНеПолучающиеАванс
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияСотрудников.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(РАЗНОСТЬДАТ(ВЫБОР
	|				КОГДА СостоянияСотрудников.Начало < &НачалоПериода
	|					ТОГДА &НачалоПериода
	|				ИНАЧЕ СостоянияСотрудников.Начало
	|			КОНЕЦ, ВЫБОР
	|				КОГДА СостоянияСотрудников.Окончание > &КонецПериода
	|						ИЛИ СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА &КонецПериода
	|				ИНАЧЕ СостоянияСотрудников.Окончание
	|			КОНЕЦ, ДЕНЬ) + 1) >= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ) + 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСостоянияСотрудников";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники = "") Экспорт
	
	// Отбор сотрудников по документам-основаниям.
	СоздатьВТСотрудникиДляВедомостиПоОснованиям(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	// Отбор сотрудников по организации и подразделению.
	СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	// Отбор по месту выплаты зарплаты.
	СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаДляКадровыхДанных", Ведомость.Дата);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ДатаДляКадровыхДанных КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиДляВедомости
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоОснованиям(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники = "")
	
	ВидДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ВидДокументаОснования");
	
	Если ЗначениеЗаполнено(ВидДокументаОснования) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Основания",	Ведомость.Основания.ВыгрузитьКолонку("Документ"));	

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоОснованию
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.Регистратор В(&Основания)";
		
		Запрос.Выполнить();
		
		ИмяВТСотрудники	= "ВТСотрудникиПоОснованию"
		
	Иначе
		
		ИмяВТСотрудники	= ""
		
	КонецЕсли
	
КонецПроцедуры

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуРаботы(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники)
	
	ХарактерВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ЗаполнитьПараметрыПолученияСотрудниковПоШапкеВедомости(ПараметрыПолученияСотрудников, Ведомость, ХарактерВыплаты);

	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиПоМестуРаботыПоШапкеВедомости");
		
	ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиПоМестуРаботыПоШапкеВедомости";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// при отборе по подразделениям	берем относящихся к нему на конец периода
	Если ЗначениеЗаполнено(ПараметрыПолученияСотрудников.Подразделение) Тогда
		
		Запрос.УстановитьПараметр("Подразделение", ПараметрыПолученияСотрудников.Подразделение);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТСотрудникиОтносящиесяКПодразделению
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Подразделение В ИЕРАРХИИ(&Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТСотрудникиОтносящиесяКПодразделению";
		
	КонецЕсли;	
	
	// аванс не работающим на дату ведомости не выплачиваем
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда
		
		ПараметрыПолученияСотрудников.НачалоПериода 	= НачалоДня(Ведомость.Дата);
		ПараметрыПолученияСотрудников.ОкончаниеПериода	= КонецДня(Ведомость.Дата);
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(
			МенеджерВременныхТаблиц, Истина, 
			ПараметрыПолученияСотрудников, 
			"ВТСотрудникиПоМестуРаботыНаДатуВедомости");
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТРаботающиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПоМестуРаботыНаДатуВедомости КАК РаботающиеСотрудники
		|		ПО Сотрудники.Сотрудник = РаботающиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиПоМестуРаботыНаДатуВедомости";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТРаботающиеСотрудникиПоМестуРаботы";
		
	КонецЕсли;	
	
	// если передан список сотрудников, берем только присутствующих в нем
	Если ЗначениеЗаполнено(ИмяВТСотрудники) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ВТВходящиеСотрудникиПоМестуРаботы
		|ИЗ
		|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВТСотрудники КАК ВходящиеСотрудники
		|		ПО Сотрудники.Сотрудник = ВходящиеСотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ #ВТСотрудники";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
		
		Запрос.Выполнить();

		ИмяВТСотрудникиПоМестуРаботы = "ВТВходящиеСотрудникиПоМестуРаботы";
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Подразделение
	|ПОМЕСТИТЬ ВТСотрудникиПоМестуРаботы
	|ИЗ
	|	#ВТСотрудникиПоМестуРаботы КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ #ВТСотрудникиПоМестуРаботы";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудникиПоМестуРаботы", ИмяВТСотрудникиПоМестуРаботы);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуРаботы"
	
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоМестуВыплаты(МенеджерВременныхТаблиц, Ведомость, ИмяВТСотрудники)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	МестоВыплаты = Ведомость.МестоВыплаты();
	
	Запрос.УстановитьПараметр("Организация",	Ведомость.Организация);
	Запрос.УстановитьПараметр("ВидМестаВыплаты",МестоВыплаты.Вид);
	Запрос.УстановитьПараметр("ВсеМестаВыплаты",НЕ ЗначениеЗаполнено(МестоВыплаты.Значение));
	Запрос.УстановитьПараметр("МестоВыплаты",	МестоВыплаты.Значение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Подразделение
	|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыОрганизаций КАК МестаВыплатыЗарплатыОрганизаций
	|		ПО (МестаВыплатыЗарплатыОрганизаций.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыПодразделений КАК МестаВыплатыЗарплатыПодразделений
	|		ПО (МестаВыплатыЗарплатыПодразделений.Подразделение = Сотрудники.Подразделение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаВыплатыЗарплатыСотрудников КАК МестаВыплатыЗарплатыСотрудников
	|		ПО (МестаВыплатыЗарплатыСотрудников.Сотрудник = Сотрудники.Сотрудник)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА МестаВыплатыЗарплатыСотрудников.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыСотрудников.Вид
	|			КОГДА МестаВыплатыЗарплатыПодразделений.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыПодразделений.Вид
	|			КОГДА МестаВыплатыЗарплатыОрганизаций.Вид ЕСТЬ НЕ NULL 
	|				ТОГДА МестаВыплатыЗарплатыОрганизаций.Вид
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)
	|		КОНЕЦ = &ВидМестаВыплаты
	|	И (&ВсеМестаВыплаты
	|			ИЛИ ВЫБОР
	|				КОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыСотрудников.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА ВЫБОР
	|							КОГДА МестаВыплатыЗарплатыСотрудников.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.БанковскийСчет)
	|								ТОГДА МестаВыплатыЗарплатыСотрудников.МестоВыплаты.Банк
	|							ИНАЧЕ МестаВыплатыЗарплатыСотрудников.МестоВыплаты
	|						КОНЕЦ
	|				КОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыПодразделений.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА МестаВыплатыЗарплатыПодразделений.МестоВыплаты
	|				КОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты ЕСТЬ НЕ NULL 
	|						И МестаВыплатыЗарплатыОрганизаций.МестоВыплаты <> НЕОПРЕДЕЛЕНО
	|					ТОГДА МестаВыплатыЗарплатыОрганизаций.МестоВыплаты
	|			КОНЕЦ = &МестоВыплаты)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	ИмяВТСотрудники = "ВТСотрудникиПоМестуВыплаты"
	
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, Ведомость, ФизическиеЛица) Экспорт
	
	ХарактерВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	ПараметрыПолученияСотрудников =
		КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	
	ЗаполнитьПараметрыПолученияСотрудниковПоШапкеВедомости(ПараметрыПолученияСотрудников, Ведомость, ХарактерВыплаты);	
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников, 
		"ВТСотрудникиДляВедомости");
		
КонецПроцедуры	

Процедура ЗаполнитьПараметрыПолученияСотрудниковПоШапкеВедомости(ПараметрыПолученияСотрудников, Ведомость, ХарактерВыплаты)
	
	ДлинаСуток = 86400;
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		НачалоПериода 		= НачалоМесяца(Ведомость.ПериодРегистрации);
		ОкончаниеПериода	= МИН(Дата(Год(Ведомость.ПериодРегистрации), Месяц(Ведомость.ПериодРегистрации), 15), Ведомость.Дата);
		РаботникиПоДоговорамГПХ = Неопределено;
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет Тогда 
		НачалоПериода 		=  НачалоМесяца(Ведомость.ПериодРегистрации);
		ОкончаниеПериода	=  МИН(КонецМесяца(Ведомость.ПериодРегистрации), Ведомость.Дата);
		РаботникиПоДоговорамГПХ = Истина;
	Иначе
		НачалоПериода 		=   '00010101';
		ОкончаниеПериода	=  КонецМесяца(Ведомость.ПериодРегистрации);
		РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	
	ПараметрыПолученияСотрудников.Организация	= Ведомость.Организация;
	ПараметрыПолученияСотрудников.Подразделение	= Ведомость.Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода 	= НачалоПериода;
	ПараметрыПолученияСотрудников.ОкончаниеПериода	= ОкончаниеПериода;
	ПараметрыПолученияСотрудников.РаботникиПоТрудовымДоговорам	= Истина;
	ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ		= РаботникиПоДоговорамГПХ;
	
	ПараметрыПолученияСотрудников.КадровыеДанные = "Подразделение";	
	
	КадровыйУчетРасширенный.ПрименитьОтборПоФункциональнойОпцииВыполнятьРасчетЗарплатыПоПодразделениям(ПараметрыПолученияСотрудников);
	
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеСУчетомОплатыПособий(Параметры, МенеджерВременныхТаблиц, ТолькоРазрешенные)
	

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГруппаФСС", Справочники.ГруппыУчетаНачисленийИУдержаний.НачисленияФСС);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
    РазрешитьВыплатыДоОплаты = Ложь;
	
	Если РазрешитьВыплатыДоОплаты Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
		|	ЗарплатаКВыплате.КВыплате КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеДляФильтра
		|ИЗ
		|	ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТЗарплатаКВыплате
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ГруппаУчетаНачислений КАК ГруппаУчетаНачислений,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ЗарплатаКВыплате.ГруппаУчетаНачислений <> &ГруппаФСС
		|				ИЛИ НЕ ОплатаПособийСоциальногоСтрахования.ДокументОснование ЕСТЬ NULL
		|				ИЛИ ЕСТЬNULL(НастройкиУчетаПособийСоциальногоСтрахования.РазрешенаВыплатаПособийДоОплатыФСС, ЛОЖЬ)
		|			ТОГДА ЗарплатаКВыплате.КВыплате
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплате
		|ИЗ
		|	ВТЗарплатаКВыплатеДляФильтра КАК ЗарплатаКВыплате
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаПособийСоциальногоСтрахования КАК ОплатаПособийСоциальногоСтрахования
		|		ПО ЗарплатаКВыплате.ДокументОснование = ОплатаПособийСоциальногоСтрахования.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования КАК НастройкиУчетаПособийСоциальногоСтрахования
		|		ПО НастройкиУчетаПособийСоциальногоСтрахования.Организация = &Организация";

	Запрос.Выполнить();	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции ведомостей на выплату зарплаты.

// Заполнение и расчет документа.

Функция ВедомостьВКассуМестоВыплаты(Ведомость) Экспорт
	
	МестоВыплаты = ВзаиморасчетыССотрудниками.ВедомостьМестоВыплаты();
	МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	МестоВыплаты.Значение = Ведомость.Касса;
	
	Возврат МестоВыплаты
	
КонецФункции	

Процедура ВедомостьВКассуУстановитьМестоВыплаты(Ведомость, Значение) Экспорт
	Ведомость.Касса = Значение;
КонецПроцедуры	

Функция ВедомостьМожноЗаполнитьЗарплату(Ведомость) Экспорт
	
	МожноЗаполнитьЗарплату = ВзаиморасчетыССотрудникамиБазовый.ВедомостьМожноЗаполнитьЗарплату(Ведомость);

	ПравилаПроверки = Новый Структура;
	
	МожноЗаполнитьЗарплату = 
		ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(Ведомость, ПравилаПроверки, Истина)
		И МожноЗаполнитьЗарплату;

	ВидДокументаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ВидДокументаОснования");
	Если ЗначениеЗаполнено(ВидДокументаОснования) И Ведомость.Основания.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не выбраны документы-основания';uk='Не вибрані документи-підстави'"), 
			Ведомость, 
			"Основания");
		МожноЗаполнитьЗарплату = Ложь;	
	КонецЕсли;	
	
	Возврат МожноЗаполнитьЗарплату;

КонецФункции

Процедура ВедомостьЗарплатаКВыплатеРассчитатьСуммы(Ведомость, ЗарплатаКВыплате) Экспорт
	
	Для Каждого СтрокаЗарплаты Из ЗарплатаКВыплате Цикл
		
		// Процент выплаты
		Если ЗначениеЗаполнено(Ведомость.ПроцентВыплаты) И Ведомость.ПроцентВыплаты <> 100 Тогда
			СтрокаЗарплаты.КВыплате = СтрокаЗарплаты.КВыплате * Ведомость.ПроцентВыплаты/100;
		ИначеЕсли НЕ ЗначениеЗаполнено(Ведомость.ПроцентВыплаты) Тогда
			СтрокаЗарплаты.КВыплате = 0;	
		КонецЕсли;
		
	КонецЦикла;
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьЗарплатаКВыплатеРассчитатьСуммы(Ведомость, ЗарплатаКВыплате);
		
КонецПроцедуры

Функция ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	Состав = ВзаиморасчетыССотрудникамиБазовый.ВедомостьСоставПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Получаем НДФЛ к удержанию (перечислению)
	НДФЛ = ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	// Инициализируем колонку налога в таблице состава 		
	Состав.Колонки.Добавить("НДФЛ"); 
	Для Каждого СтрокаСостава Из Состав Цикл
		СтрокаСостава.НДФЛ = НДФЛ.СкопироватьКолонки()
	КонецЦикла;		
			
	// структура для отбора строк налога, попадающих в строку состава
	ПараметрыОтбораНДФЛ = Новый Структура("ФизическоеЛицо");
	
	// получаем список различных физлиц
	Физлица = ТаблицаЗарплат.Скопировать(, "ФизическоеЛицо");
	Физлица.Свернуть("ФизическоеЛицо");
	Физлица = Физлица.ВыгрузитьКолонку("ФизическоеЛицо");
	
	// ищем строки состава для физлиц, помещая в них соответствующий налог
	Для Каждого Физлицо Из Физлица Цикл
		
		СтрокаСостава = Состав.Найти(Физлицо, "ФизическоеЛицо");
		Если СтрокаСостава = Неопределено Тогда
			Продолжить
		КонецЕсли;	
		
		ПараметрыОтбораНДФЛ.ФизическоеЛицо = Физлицо; 
		СтрокаСостава.НДФЛ = НДФЛ.Скопировать(ПараметрыОтбораНДФЛ);
		
	КонецЦикла;
	
	Возврат Состав
	
КонецФункции

Процедура ВедомостьОчиститьСостав(Ведомость) Экспорт
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьОчиститьСостав(Ведомость);
	Ведомость.НДФЛ.Очистить();
КонецПроцедуры	

Процедура ВедомостьДополнитьСостав(Ведомость, Состав) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьДополнитьСостав(Ведомость, Состав);
	
	Для Каждого СтрокаСостава Из Состав Цикл
		
		СтрокаТЧСостав = Ведомость.Состав.Найти(СтрокаСостава.ИдентификаторСтроки, "ИдентификаторСтроки");

		Для Каждого СтрокаНДФЛ Из СтрокаСостава.НДФЛ Цикл
			СтрокаТЧНДФЛ = Ведомость.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧНДФЛ, СтрокаНДФЛ);
			СтрокаТЧНДФЛ.ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки;
		КонецЦикла
		
	КонецЦикла
	
КонецПроцедуры

Процедура ВедомостьОбновитьНДФЛ(Ведомость, Физлица) Экспорт
	
	ТаблицаЗарплат = Ведомость.Зарплата.ВыгрузитьКолонки("ФизическоеЛицо, ДокументОснование, КВыплате");
	Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
		Если Физлица.Найти(СтрокаЗарплаты.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаЗарплат.Добавить(), СтрокаЗарплаты);
		КонецЕсли
	КонецЦикла;	
	
	// Получаем НДФЛ к удержанию (перечислению)
	НДФЛ = ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
	ПараметрыОтбораНДФЛ = Новый Структура("ФизическоеЛицо");
	Для Каждого Физлицо Из Физлица Цикл
		
		ПараметрыОтбораНДФЛ.ФизическоеЛицо = ФизЛицо;
		
		// Определяем идентификатор строки состава, к которой будет привязан НДФЛ физического лица.
		ИдентификаторСтроки = Неопределено;
		СтрокаНДФЛ = Ведомость.НДФЛ.Найти(Физлицо, "ФизическоеЛицо");
		Если СтрокаНДФЛ = Неопределено Тогда
			СтрокаСостава = Ведомость.Состав.Найти(Физлицо, "ФизическоеЛицо");
			Если СтрокаСостава <> Неопределено Тогда
				ИдентификаторСтроки = СтрокаСостава.ИдентификаторСтроки
			КонецЕсли	
		Иначе
			ИдентификаторСтроки = СтрокаНДФЛ.ИдентификаторСтроки
		КонецЕсли;	
		
		Если ИдентификаторСтроки = Неопределено Тогда
			Продолжить
		КонецЕсли;	
		
		// Удаляем старый НДФЛ физического лица
		УдаляемыеСтроки = Ведомость.НДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Ведомость.НДФЛ.Удалить(УдаляемаяСтрока)
		КонецЦикла;
		
		// Помещаем новый НДФЛ физического лица, привязывая его к строке состава
		НДФЛФизлица = НДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);
		Для Каждого СтрокаНДФЛФизлица Из НДФЛФизлица Цикл
			ДобавляемаяСтрока = Ведомость.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавляемаяСтрока, СтрокаНДФЛФизлица);
			ДобавляемаяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		КонецЦикла	
	КонецЦикла;
	
КонецПроцедуры

Функция ВедомостьНДФЛПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РеквизитыСпособаВыплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты, ВидДокументаОснования");
	
	ДатаОперацииНДФЛ = Ведомость.Дата;
	// для ведомостей на выплату зарплаты дата налоговой операции не может быть раньше конца месяца.
	Если РеквизитыСпособаВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата И НЕ ЗначениеЗаполнено(РеквизитыСпособаВыплаты.ВидДокументаОснования) Тогда
		ДатаОперацииНДФЛ = МАКС(ДатаОперацииНДФЛ, КонецМесяца(Ведомость.ПериодРегистрации));
	КонецЕсли;	
	
	Если РеквизитыСпособаВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда
		
		
		Запрос.УстановитьПараметр("СписокСотрудников", ТаблицаЗарплат.Скопировать(, "ФизическоеЛицо, КВыплате"));  
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СписокСотрудников.КВыплате КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТСписокСотрудников
		|ИЗ
		|	&СписокСотрудников КАК СписокСотрудников";
		
	Иначе
		
		СписокСотрудников = Ведомость.Зарплата.ВыгрузитьКолонки("ФизическоеЛицо, ДокументОснование, КВыплате");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗарплат, СписокСотрудников);
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);  
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СписокСотрудников.ДокументОснование КАК ДокументОснование,
		|	СписокСотрудников.КВыплате КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТСписокСотрудников
		|ИЗ
		|	&СписокСотрудников КАК СписокСотрудников";
		
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	Отказ = Ложь;
	НДФЛ = 	
		УчетНДФЛ.РассчитатьУдержанныеНалоги(
			Ведомость, Ведомость.Организация, ДатаОперацииНДФЛ, Запрос.МенеджерВременныхТаблиц, Ведомость.ПериодРегистрации);
			
	Возврат НДФЛ
	
КонецФункции

Функция ВедомостьВзносыПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РеквизитыСпособаВыплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты, ВидДокументаОснования");
	
	ДатаОперациВзносы = Ведомость.Дата;
	// для ведомостей на выплату зарплаты дата налоговой операции не может быть раньше конца месяца.
	Если РеквизитыСпособаВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата И НЕ ЗначениеЗаполнено(РеквизитыСпособаВыплаты.ВидДокументаОснования) Тогда
		ДатаОперациВзносы = МАКС(ДатаОперациВзносы, КонецМесяца(Ведомость.ПериодРегистрации));
	КонецЕсли;	
	
	Если РеквизитыСпособаВыплаты.ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда
		
		
		Запрос.УстановитьПараметр("СписокСотрудников", ТаблицаЗарплат.Скопировать(, "ФизическоеЛицо, КВыплате"));  
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СписокСотрудников.КВыплате КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТСписокСотрудников
		|ИЗ
		|	&СписокСотрудников КАК СписокСотрудников";
		
	Иначе
		
		СписокСотрудников = Ведомость.Зарплата.ВыгрузитьКолонки("ФизическоеЛицо, ДокументОснование, КВыплате");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаЗарплат, СписокСотрудников);
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);  
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СписокСотрудников.ДокументОснование КАК ДокументОснование,
		|	СписокСотрудников.КВыплате КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТСписокСотрудников
		|ИЗ
		|	&СписокСотрудников КАК СписокСотрудников";
		
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	Отказ = Ложь;
	Взносы = 	
		УчетстраховыхВзносов.РассчитатьУдержанныеНалоги(
			Ведомость, Ведомость.Организация, ДатаОперациВзносы, Запрос.МенеджерВременныхТаблиц, Ведомость.ПериодРегистрации);
			
	Возврат Взносы
	
КонецФункции

Процедура ВедомостьОбновитьВзносы(Ведомость, Физлица) Экспорт
	
	ТаблицаЗарплат = Ведомость.Зарплата.ВыгрузитьКолонки("ФизическоеЛицо, ДокументОснование, КВыплате");
	Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
		Если Физлица.Найти(СтрокаЗарплаты.ФизическоеЛицо) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаЗарплат.Добавить(), СтрокаЗарплаты);
		КонецЕсли
	КонецЦикла;	
	
	// Получаем взносы к перечислению
	ВзносыФОТ = ВедомостьВзносыПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	Ведомость.ВзносыФОТ.Загрузить(ВзносыФОТ);
	
КонецПроцедуры



/// Обработчики событий модуля объекта документов Ведомости.

Процедура ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	Если ВзаиморасчетыССотрудниками.ЭтоДанныеЗаполненияВедомости(ДанныеЗаполнения) Тогда
		Для Каждого Основание Из ДанныеЗаполнения.Основания Цикл
			СтрокаОснования = ДокументОбъект.Основания.Добавить();
			СтрокаОснования.Документ = Основание;
		КонецЦикла	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// Очистка табличной части НДФЛ от строк, не имеющих "родителя" в ТЧ Состав
	// Синхронизация общих реквизитов табличных частей Состав и НДФЛ
	ЛишниеСтроки = Новый Массив;
	Для Каждого СтрокаНДФЛ Из ДокументОбъект.НДФЛ Цикл
		СтрокаСостава = ДокументОбъект.Состав.Найти(СтрокаНДФЛ.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если СтрокаСостава = Неопределено Тогда
			ЛишниеСтроки.Добавить(СтрокаНДФЛ);
		Иначе	
			ЗаполнитьЗначенияСвойств(СтрокаНДФЛ, СтрокаСостава, "ФизическоеЛицо")
		КонецЕсли	
	КонецЦикла;
	Для Каждого ЛишняяСтрока Из ЛишниеСтроки Цикл
		ДокументОбъект.НДФЛ.Удалить(ЛишняяСтрока);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьВыплату(Ведомость, Отказ) Экспорт
	
	ВзаиморасчетыССотрудникамиБазовый.ВедомостьЗарегистрироватьВыплату(Ведомость, Отказ);
	
		ВедомостьЗарегистрироватьУдержанныеНалоги(Ведомость, Отказ);
	
КонецПроцедуры

Процедура ВедомостьЗарегистрироватьУдержанныеНалоги(Ведомость, Отказ = Ложь)
	
	ИзмеренияНДФЛ = "ФизическоеЛицо, ПериодВзаиморасчетов, ГруппаУчетаУдержаний, КодДохода, МесяцНалоговогоПериода, ДокументОснование, ОбособленноеПодразделение";
	НДФЛ = Ведомость.НДФЛ.Выгрузить(, ИзмеренияНДФЛ +", "+ "Сумма, Доход");
	НДФЛ.Свернуть(ИзмеренияНДФЛ, "Сумма, Доход");
	НДФЛ.Колонки["МесяцНалоговогоПериода"].Имя = "НалоговыйПериод";
	НДФЛ.Колонки["Сумма"].Имя = "Налог";
	
	ИзмеренияВзносы = "Налог, ПериодВзаиморасчетов,ФизическоеЛицо";
	ВзносыФОТ = Ведомость.ВзносыФОТ.Выгрузить(, ИзмеренияВзносы +", "+ "Сумма");
	ВзносыФОТ.Свернуть(ИзмеренияВзносы, "Сумма");
	
	УчетНДФЛРасширенный.СформироватьПеречислениеНДФЛПоТаблицеЗначений(Ведомость.Движения, Отказ, Ведомость.Организация, Ведомость.Дата, НДФЛ, Истина, Истина);
	УчетСтраховыхВзносовРасширенный.СформироватьПеречислениеВзносовПоТаблицеЗначений(Ведомость.Движения, Отказ, Ведомость.Организация, Ведомость.Дата, ВзносыФОТ, Истина, Истина);
	
	
КонецПроцедуры

/// Печать

Процедура ВедомостьВБанкДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Список перечислений
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "СписокПеречислений";
	КомандаПечати.Представление = НСтр("ru='Список перечислений';uk='Список перерахувань'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати);
	
КонецПроцедуры

Процедура ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати);
	ИначеЕсли УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалогаВС(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати, Ложь);	
	Иначе
		ВзаиморасчетыССотрудникамиБазовый.ВедомостьВБанкПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)	
	КонецЕсли;
	
КонецПроцедуры

Функция ВедомостьВБанкВыборкаДляПечатиШапки(ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ведомости", Ведомости);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.Номер КАК Номер,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер,
	|	Ведомость.Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	ВедомостьВБанк.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость",	ИмяТипа);

	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Номер,
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО,
	|	ДанныеДокументов.Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТФИОГлавБухПоследние.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ВТФИОРуководителейПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ВТФИОБухгалтерПоследние.РасшифровкаПодписи, """") КАК Бухгалтер
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОРуководителейПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОРуководителейПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОРуководителейПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОГлавБухПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОГлавБухПоследние.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ВТФИОГлавБухПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОБухгалтерПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОБухгалтерПоследние.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ВТФИОБухгалтерПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеДокументов.Дата, ГОД),
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Процедура ВедомостьВКассуДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Платежная ведомость
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПлатежнаяВедомость";
	КомандаПечати.Представление = НСтр("ru='Платежная ведомость';uk='Платіжна відомість'");
	КомандаПечати.Порядок = 20;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиБюджетныхУчреждений");
		Модуль.ВедомостьВКассуДобавитьКомандыПечати(КомандыПечати);
	КонецЕсли;
	
		УчетНДФЛРасширенный.ДобавитьКомандуПечатиРеестраПеречисленногоНалога(КомандыПечати);
	
КонецПроцедуры

Процедура ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалога(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати);	
	ИначеЕсли УчетНДФЛРасширенный.НужноПечататьРеестрПеречисленногоНалогаВС(КоллекцияПечатныхФорм) Тогда
		УчетНДФЛРасширенный.ВывестиРеестрПеречисленногоНалогаПоПлатежномуДокументу(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати, Ложь);	
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиБюджетныхУчреждений");
		Модуль.ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	Иначе
		ВзаиморасчетыССотрудникамиБазовый.ВедомостьВКассуПечать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)	
	КонецЕсли;
	
КонецПроцедуры

Функция ВедомостьВКассуВыборкаДляПечатиШапки(ИмяТипа, Ведомости) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Номер,
	|	Ведомость.Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер,
	|	Ведомость.Кассир,
	|	Ведомость.ДолжностьКассира КАК КассирДолжность,
	|	Ведомость.Бухгалтер,
	|	Ведомость.Составил,
	|	Ведомость.ДолжностьСоставившего,
	|	Ведомость.Проверил,
	|	Ведомость.ДолжностьПроверившего,
	|	Ведомость.Раздатчик,
	|	Ведомость.ДолжностьРаздатчика
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость",	ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Кассир");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Составил");
	ИменаПолейОтветственныхЛиц.Добавить("Проверил");
	ИменаПолейОтветственныхЛиц.Добавить("Раздатчик");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоЕДРПОУ,
	|	ДанныеДокументов.Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ФИОРуководителя.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ФИОГлавногоБухгалтера.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ФИОКассира.РасшифровкаПодписи, """") КАК Кассир,
	|	ДанныеДокументов.КассирДолжность,
	|	ЕСТЬNULL(ФИОБухгалтера.РасшифровкаПодписи, """") КАК Бухгалтер,
	|	ФИОСоставил.РасшифровкаПодписи КАК СоставилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьСоставившего,
	|	ФИОПроверил.РасшифровкаПодписи КАК ПроверилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьПроверившего,
	|	ФИОРаздатчик.РасшифровкаПодписи КАК РаздатчикРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьРаздатчика
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКассира
	|		ПО ДанныеДокументов.Ссылка = ФИОКассира.Ссылка
	|			И ДанныеДокументов.Кассир = ФИОКассира.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСоставил
	|		ПО ДанныеДокументов.Ссылка = ФИОСоставил.Ссылка
	|			И ДанныеДокументов.Составил = ФИОСоставил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПроверил
	|		ПО ДанныеДокументов.Ссылка = ФИОПроверил.Ссылка
	|			И ДанныеДокументов.Проверил = ФИОПроверил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаздатчик
	|		ПО ДанныеДокументов.Ссылка = ФИОРаздатчик.Ссылка
	|			И ДанныеДокументов.Раздатчик = ФИОРаздатчик.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Способы выплаты зарплаты

Процедура СпособыВыплатыЗарплатыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор.Свойство("ВидДокументаОснования") Тогда
		ДоступныеВидыДокументаОснования = Новый Массив();
		ДоступныеВидыДокументаОснования.Добавить(Параметры.Отбор.ВидДокументаОснования);
		ИсключительныйВыборВида = Истина;
	Иначе	
		ДоступныеВидыДокументаОснования = Перечисления.ВидыДокументовМежрасчетныхНачислений.ДоступныеПоФункциональнымОпциям();
		ИсключительныйВыборВида = Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеВидыДокументаОснования", ДоступныеВидыДокументаОснования);
	Запрос.УстановитьПараметр("ИсключительныйВыборВида", ИсключительныйВыборВида);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыВыплатыЗарплаты.Ссылка,
	|	ВЫБОР
	|		КОГДА СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Зарплата)
	|				И СпособыВыплатыЗарплаты.ВидДокументаОснования = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовМежрасчетныхНачислений.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА СпособыВыплатыЗарплаты.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Аванс)
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Вес
	|ИЗ
	|	Справочник.СпособыВыплатыЗарплаты КАК СпособыВыплатыЗарплаты
	|ГДЕ
	|	НЕ СпособыВыплатыЗарплаты.ПометкаУдаления
	|	И 
	|	 ((НЕ &ИсключительныйВыборВида И (СпособыВыплатыЗарплаты.ВидДокументаОснования = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовМежрасчетныхНачислений.ПустаяСсылка)
	|			ИЛИ СпособыВыплатыЗарплаты.ВидДокументаОснования В (&ДоступныеВидыДокументаОснования)))
	|     ИЛИ
	|	  (&ИсключительныйВыборВида И СпособыВыплатыЗарплаты.ВидДокументаОснования В (&ДоступныеВидыДокументаОснования)))
	|УПОРЯДОЧИТЬ ПО
	|	Вес,
	|	СпособыВыплатыЗарплаты.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Места выплаты зарплаты

Процедура ПроверитьМестоВыплатыЗарплаты(МестоВыплатыЗарплаты, ДопустимыеВидыМестВыплаты, Отказ)
	
	Если ЗначениеЗаполнено(МестоВыплатыЗарплаты.Вид) Тогда
		
		ТекстСообщения = "";
		
		Если ДопустимыеВидыМестВыплаты.Найти(МестоВыплатыЗарплаты.Вид) = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Недопустимый вид места выплаты зарплаты';uk='Некоректний вигляд місця виплати зарплати'");
		ИначеЕсли МестоВыплатыЗарплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.БанковскийСчет Тогда
			Если НЕ ЗначениеЗаполнено(ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)) Тогда
				ТекстСообщения = НСтр("ru='Не указан банковский счет';uk='Не вказаний банківський рахунок'");
			КонецЕсли	
		ИначеЕсли МестоВыплатыЗарплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Раздатчик Тогда	
			Если НЕ ЗначениеЗаполнено(ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)) Тогда
				ТекстСообщения = НСтр("ru='Не указан раздатчик';uk='Не вказано роздавальник'");
			КонецЕсли	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,	, , Отказ);
		КонецЕсли;	
		
	КонецЕсли	
	
КонецПроцедуры

Функция ПриведенноеЗначениеМестаВыплаты(МестоВыплатыЗарплаты)
	
	ОписаниеТипов = ОписаниеТипаМестаВыплатыПоВиду(МестоВыплатыЗарплаты.Вид);
	
	Если ОписаниеТипов <> Неопределено Тогда
		ПриведенноеЗначениеМестаВыплаты = ОписаниеТипов.ПривестиЗначение(МестоВыплатыЗарплаты.МестоВыплаты);
	Иначе
		ПриведенноеЗначениеМестаВыплаты = Неопределено
	КонецЕсли;	
	
	Возврат ПриведенноеЗначениеМестаВыплаты;
	
КонецФункции	

#КонецОбласти
