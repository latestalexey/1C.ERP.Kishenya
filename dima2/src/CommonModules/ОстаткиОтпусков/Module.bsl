///////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА ОСТАТКИ ОТПУСКОВ
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Функция формирует описание таблицы данных для функции расчета остатка отпуска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с колонками, описанными в тексте метода.
//
Функция ОписаниеТаблицыДанных() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Сотрудник и дата, на которую определяется остаток отпуска. Это ключ, который должен быть уникальным для каждой
	// строки.
	ТаблицаДанных.Колонки.Добавить("Сотрудник",						Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанных.Колонки.Добавить("ДатаОстатков",					Новый ОписаниеТипов("Дата"));
	
	// Остатки отпуска на указанную дату.
	// Если ЭтоРасчетПриУвольнении = Истина, тогда алгоритм будет игнорировать движения, сделанные расчетом при увольнении.
	ТаблицаДанных.Колонки.Добавить("ЭтоРасчетПриУвольнении",		Новый ОписаниеТипов("Булево"));
	
	// График отпусков на год.
	// Фактические отпуска учитываются до даты документа, после даты документа только запланированные, если
	// ЭтоЗапланированныйОтпуск = Истина.
	ТаблицаДанных.Колонки.Добавить("ЭтоЗапланированныйОтпуск",		Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ДатаДокумента",					Новый ОписаниеТипов("Дата"));
	
	// График отпусков и Отпуска организаций.
	// Если указан период отпуска, то для него по производственному календарю будет посчитано количество календарных дней
	// отпуска и рабочие года, за которые эти остатки были и будут заработаны.
	// Для каждого периода в поле Примечание будет добавлена информация о том, как остатки отпуска будут израсходованы на
	// указанный период. ДатаОкончания = ДатаОстатков всегда.
	ТаблицаДанных.Колонки.Добавить("ДатаНачала",					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания",					Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ТекущийРегистратор",			Документы.ТипВсеСсылки());
	
	// Отбор по виду ежегодного отпуска.
	ТаблицаДанных.Колонки.Добавить("ОтборПоВидуЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция, отвечающая за расчет отпусков, положенных сотруднику.
// Предоставляет данные для специализированных функций служебного программного интерфейса.
// Не должна вызываться напрямую из библиотек зарплатно-кадровой функциональности.
//
// В качестве таблицы данных нужно передать заполненную таблицу значений, по описанию из процедуры
// ОписаниеТаблицыДанных().
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица значений с колонками, описанными в тексте метода.
//
Функция ОстаткиОтпусков(ТаблицаДанных, ИгнорироватьСохраненноеПравоНаОтпуска = Ложь, ИгнорироватьП28Правил = Ложь) Экспорт
	
	ТаблицаДанных.Колонки.Добавить("ИндексСтроки",	Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.ИндексСтроки	= ТаблицаДанных.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	МенеджерВременныхТаблиц			= СотрудникиКоторымНеобходимоРассчитатьПравоНаОтпуск(ТаблицаДанных, ИгнорироватьСохраненноеПравоНаОтпуска Или ИгнорироватьП28Правил);
	ИсходныеДанные					= ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц);
	ТаблицаЗаработанныхДнейОтпусков	= ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц, ИгнорироватьСохраненноеПравоНаОтпуска, ИгнорироватьП28Правил);
	
	ДополненнаяТаблицаДанных		= ИсходныеДанные.Данные;
	ТаблицаВидовОтпуска				= ИсходныеДанные.ВидыОтпусков;
	ТаблицаНачальныхОстатков		= ИсходныеДанные.НачальныеОстатки;
	ТаблицаОтклонений				= ИсходныеДанные.Отклонения;
	ТаблицаПравНаЕжегодныйОтпуск	= ИсходныеДанные.Права;
	ТаблицаФактическихОтпусков		= ИсходныеДанные.ФактическиеОтпуска;
	
	РассчитанныеОстатки = Новый ТаблицаЗначений;
	РассчитанныеОстатки.Колонки.Добавить("ИндексСтроки");
	РассчитанныеОстатки.Колонки.Добавить("Сотрудник");
	РассчитанныеОстатки.Колонки.Добавить("ДатаОстатков");
	РассчитанныеОстатки.Колонки.Добавить("ОстатокНаДату");
	РассчитанныеОстатки.Колонки.Добавить("ОстатокНаДатуПоВидамЕжегодныхОтпусков",	Новый ОписаниеТипов("Массив"));
	РассчитанныеОстатки.Колонки.Добавить("ПравоНаОтпускПриПриемеНаРаботу");
	РассчитанныеОстатки.Колонки.Добавить("НачальныеОстатки");
	РассчитанныеОстатки.Колонки.Добавить("ДанныеРасчета",							Новый ОписаниеТипов("Массив"));
	РассчитанныеОстатки.Колонки.Добавить("ДанныеСобытий",							Новый ОписаниеТипов("Массив"));
	РассчитанныеОстатки.Колонки.Добавить("ТекущаяОрганизация");
	РассчитанныеОстатки.Колонки.Добавить("ТекущееПодразделение");
	РассчитанныеОстатки.Колонки.Добавить("ТекущаяДолжность");
	РассчитанныеОстатки.Колонки.Добавить("ДатаПриема");
	РассчитанныеОстатки.Колонки.Добавить("ДатаУвольнения");
	РассчитанныеОстатки.Колонки.Добавить("СотрудникУволен");
	РассчитанныеОстатки.Колонки.Добавить("ВведеныНачальныеОстатки");
	РассчитанныеОстатки.Колонки.Добавить("Пол");
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодС",								Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПо",							Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("Примечание");
	РассчитанныеОстатки.Колонки.Добавить("ДатаНачалаПериода",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ДатаОкончанияПериода",					Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ВидЕжегодногоОтпускаПериода",				Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	РассчитанныеОстатки.Колонки.Добавить("КоличествоДнейВПериоде",					Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("ПериодомИспользованоДнейПрошлыхЛет",		Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("ПериодомИспользованоДнейАвансом",			Новый ОписаниеТипов("Число"));
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПериодаС",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("РабочийГодПериодаПо",						Новый ОписаниеТипов("Дата"));
	РассчитанныеОстатки.Колонки.Добавить("ПримечаниеПериода",						Новый ОписаниеТипов("Строка"));
	
	ДлинаСуток = 86400;
	
	Для Каждого СтрокаДанных Из ДополненнаяТаблицаДанных Цикл
		РассчитанныйОстаток = РассчитанныеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(РассчитанныйОстаток, СтрокаДанных);
		
		// По полученным данным необходимо посчитать периоды рабочих лет.
		РабочиеГодаПоСотруднику = Новый ТаблицаЗначений;
		РабочиеГодаПоСотруднику.Колонки.Добавить("ВидЕжегодногоОтпуска",			Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("ВидЕжегодногоОтпускаНаименование",Новый ОписаниеТипов("Строка"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("Предоставляется",					Новый ОписаниеТипов("Булево"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("ДатаНачала",						Новый ОписаниеТипов("Дата"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("ДатаОкончания",					Новый ОписаниеТипов("Дата"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("ПоследнийРабочийГод",				Новый ОписаниеТипов("Булево"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("РабочиеМесяцы",					Новый ОписаниеТипов("ТаблицаЗначений"));
		
		РабочиеГодаПоСотруднику.Колонки.Добавить("Отклонения",						Новый ОписаниеТипов("Массив"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("ПраваНаЕжегодныйОтпуск",			Новый ОписаниеТипов("Массив"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("ФактическиеОтпуска",				Новый ОписаниеТипов("Массив"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("ОстатокНаКонецТекущегоГода",		Новый ОписаниеТипов("Число"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("ДоступноДляСписанияВЭтомГоду",	Новый ОписаниеТипов("Число"));
		РабочиеГодаПоСотруднику.Колонки.Добавить("КоличествоДнейЗаПолныйГод",		Новый ОписаниеТипов("Число"));
		
		
		Если СтрокаДанных.ОтборПоВидуЕжегодногоОтпуска.Пустая() Тогда
			ТаблицаВидовОтпускаПоСотруднику	= ТаблицаВидовОтпуска;
		Иначе
			ТаблицаВидовОтпускаПоСотруднику	= ТаблицаВидовОтпуска.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаДанных.ОтборПоВидуЕжегодногоОтпуска));
		КонецЕсли;
		
		// Остаток отпуска на запрашиваемую дату.
		ОстатокНаДатуПоВидамЕжегодныхОтпусков = Новый ТаблицаЗначений;
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("ВидЕжегодногоОтпуска",				Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("ВидЕжегодногоОтпускаНаименование",	Новый ОписаниеТипов("Строка"));
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("КоличествоДней",					Новый ОписаниеТипов("Число"));
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("ЕстьОстаток",						Новый ОписаниеТипов("Булево"));
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("РабочийГодС",						Новый ОписаниеТипов("Дата"));
		ОстатокНаДатуПоВидамЕжегодныхОтпусков.Колонки.Добавить("РабочийГодПо",						Новый ОписаниеТипов("Дата"));
		Для Каждого СтрокаВидаОтпуска Из ТаблицаВидовОтпускаПоСотруднику Цикл
			ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", СтрокаДанных.Сотрудник, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
			
			// По одномерной таблице прав на отпуск сформируем двумерную по рабочим годам и рабочим месяцам.
			ЗаработанныеДниОтпусковПоВидуОтпуска	= ТаблицаЗаработанныхДнейОтпусков.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			
			НачальныеОстаткиПоВидуОтпуска			= ТаблицаНачальныхОстатков.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			
			ОтклоненияПоСотруднику					= ТаблицаОтклонений.НайтиСтроки(Новый Структура("Сотрудник", СтрокаДанных.Сотрудник));
			
			ПраваНаЕжегодныйОтпускПоВидуОтпуска		= ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			ПраваНаОтпускДляУдаления	= Новый Массив;
			КоличествоДнейОтпускаВГод	= Неопределено;
			ПредыдущееПраво				= Неопределено;
			Для Каждого ПравоНаОтпуск Из ПраваНаЕжегодныйОтпускПоВидуОтпуска Цикл
				Если ПравоНаОтпуск.КоличествоДнейОтпускаВГод = КоличествоДнейОтпускаВГод Тогда
					ПраваНаОтпускДляУдаления.Добавить(ПредыдущееПраво);
				КонецЕсли;
				КоличествоДнейОтпускаВГод	= ПравоНаОтпуск.КоличествоДнейОтпускаВГод;
				ПредыдущееПраво				= ПравоНаОтпуск;
			КонецЦикла;
			Для Каждого ПравоНаОтпуск Из ПраваНаОтпускДляУдаления Цикл
				ПраваНаЕжегодныйОтпускПоВидуОтпуска.Удалить(ПраваНаЕжегодныйОтпускПоВидуОтпуска.Найти(ПравоНаОтпуск));
			КонецЦикла;
			
			РабочийГод = Неопределено;
			Для Каждого СтрокаЗаработанныхДней Из ЗаработанныеДниОтпусковПоВидуОтпуска Цикл
				НовыйРабочийГод = РабочийГод = Неопределено Или РабочийГод.ДатаНачала <> СтрокаЗаработанныхДней.ДатаНачала Или РабочийГод.ДатаОкончания <> СтрокаЗаработанныхДней.ДатаОкончания;
				Если ЗначениеЗаполнено(СтрокаДанных.ДатаУвольнения) И Не СтрокаДанных.ЭтоРасчетПриУвольнении Тогда
					МаксимальнаяДатаОкончания	= Мин(СтрокаДанных.ДатаОстатков, КонецДня(СтрокаДанных.ДатаУвольнения));
				Иначе
					МаксимальнаяДатаОкончания	= СтрокаДанных.ДатаОстатков;
				КонецЕсли;
				Если СтрокаЗаработанныхДней.ДатаНачала > МаксимальнаяДатаОкончания Тогда
					Прервать;
				КонецЕсли;
				Если НовыйРабочийГод Тогда
					ОстатокПрошлогоГода = ?(РабочийГод = Неопределено, 0, РабочийГод.ОстатокНаКонецТекущегоГода + Окр(РабочийГод.РабочиеМесяцы.Итог("КоличествоДней"), 2));
					
					РабочийГод = РабочиеГодаПоСотруднику.Добавить();
					РабочийГод.ВидЕжегодногоОтпуска				= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
					РабочийГод.ВидЕжегодногоОтпускаНаименование	= СтрокаВидаОтпуска.ВидЕжегодногоОтпускаНаименование;
					РабочийГод.Предоставляется					= Истина;
					РабочийГод.ДатаНачала						= СтрокаЗаработанныхДней.ДатаНачала;
					РабочийГод.ДатаОкончания					= СтрокаЗаработанныхДней.ДатаОкончания;
					РабочийГод.РабочиеМесяцы.Колонки.Добавить("ДатаМесяца",		Новый ОписаниеТипов("Дата"));
					РабочийГод.РабочиеМесяцы.Колонки.Добавить("КоличествоДней",	Новый ОписаниеТипов("Число"));
					РабочийГод.ОстатокНаКонецТекущегоГода		= ОстатокПрошлогоГода;
					РабочийГод.ДоступноДляСписанияВЭтомГоду		= 0;
					РабочийГод.КоличествоДнейЗаПолныйГод		= 0;
				КонецЕсли;
				
				РабочийГод.КоличествоДнейЗаПолныйГод	= РабочийГод.КоличествоДнейЗаПолныйГод + СтрокаЗаработанныхДней.КоличествоДнейЗаПериод;
				
				Если СтрокаЗаработанныхДней.Период > МаксимальнаяДатаОкончания Тогда
					Продолжить;
				КонецЕсли;
				
				РабочийМесяц = РабочийГод.РабочиеМесяцы.Добавить();
				РабочийМесяц.ДатаМесяца					= СтрокаЗаработанныхДней.Период;
				РабочийМесяц.КоличествоДней				= СтрокаЗаработанныхДней.КоличествоДнейЗаПериод;
			КонецЦикла;
			
			// Права на отпуск нет, но могут быть зарегистрированы фактические отпуска.
			Если РабочийГод = Неопределено Или РабочийГод.ДатаОкончания < СтрокаДанных.ДатаОстатков Тогда
				ДатаНачалаРабочегоГода		= ?(РабочийГод = Неопределено, СтрокаДанных.ДатаПриема, РабочийГод.ДатаОкончания + 1);
				МаксимальнаяДатаОкончания	= СтрокаДанных.ДатаОстатков;
				Пока ДатаНачалаРабочегоГода <= СтрокаДанных.ДатаОстатков Цикл
					ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
					
					// Если сотрудник уволен и это не расчет при увольнении, то необходимо ограничить дату окончания последнего
					// рабочего года датой увольнения.
					Если ЗначениеЗаполнено(СтрокаДанных.ДатаУвольнения) И Не СтрокаДанных.ЭтоРасчетПриУвольнении Тогда
						МаксимальнаяДатаОкончания	= Мин(ДатаОкончанияРабочегоГода, КонецДня(СтрокаДанных.ДатаУвольнения));
					Иначе
						МаксимальнаяДатаОкончания	= ДатаОкончанияРабочегоГода;
					КонецЕсли;
					
					Если МаксимальнаяДатаОкончания <= ДатаНачалаРабочегоГода Тогда
						Прервать;
					КонецЕсли;
					
					РабочийГод = РабочиеГодаПоСотруднику.Добавить();
					РабочийГод.ВидЕжегодногоОтпуска				= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
					РабочийГод.ВидЕжегодногоОтпускаНаименование	= СтрокаВидаОтпуска.ВидЕжегодногоОтпускаНаименование;
					РабочийГод.ДатаНачала						= ДатаНачалаРабочегоГода;
					РабочийГод.ДатаОкончания					= ДатаОкончанияРабочегоГода;
					
					РабочийГод.РабочиеМесяцы.Колонки.Добавить("ДатаМесяца",		Новый ОписаниеТипов("Дата"));
					РабочийГод.РабочиеМесяцы.Колонки.Добавить("КоличествоДней",	Новый ОписаниеТипов("Число"));
					
					ДатаНачалаРабочегоГода = КонецДня(МаксимальнаяДатаОкончания) + 1;
				КонецЦикла;
			КонецЕсли;
			
			// Получим рабочие года с посчитанными рабочими месяцами с учетом продлений рабочего года.
			РабочиеГодаПоВидуОтпуска = РабочиеГодаПоСотруднику.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаВидаОтпуска.ВидЕжегодногоОтпуска));
			
			// Установим признак для последнего рабочего года.
			Если РабочиеГодаПоВидуОтпуска.Количество() >= 1 Тогда
				ПоследнийРабочийГод = РабочиеГодаПоВидуОтпуска[РабочиеГодаПоВидуОтпуска.Количество() - 1];
				ПоследнийРабочийГод.ПоследнийРабочийГод		= Истина;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаДанных.ДатаОкончанияПериода) И Не ЗначениеЗаполнено(РассчитанныйОстаток.РабочийГодПериодаС) Тогда
				ПлановыйОтпуск = ТаблицаФактическихОтпусков.Добавить();
				ЗаполнитьЗначенияСвойств(ПлановыйОтпуск, СтрокаДанных);
				ПлановыйОтпуск.ЗапланированныйОтпуск	= Истина;
				ПлановыйОтпуск.ВидЕжегодногоОтпуска		= СтрокаДанных.ОтборПоВидуЕжегодногоОтпуска;
				ПлановыйОтпуск.ДатаВхожденияВРабочийГод	= СтрокаДанных.ДатаНачалаПериода;
				ПлановыйОтпуск.ДатаНачалаОтпуска		= СтрокаДанных.ДатаНачалаПериода;
				ПлановыйОтпуск.ДатаОкончанияОтпуска		= СтрокаДанных.ДатаОкончанияПериода;
				ПлановыйОтпуск.КоличествоДнейОтпуска	= СтрокаДанных.КоличествоДнейВПериоде;
				ПлановыйОтпуск.Компенсация				= Ложь;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Сотрудник", СтрокаДанных.Сотрудник);
			СтруктураПоиска.Вставить("ВидЕжегодногоОтпуска", СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
			СтруктураПоиска.Вставить("ИндексСтроки", СтрокаДанных.ИндексСтроки);
			СтруктураПоиска.Вставить("ДатаОстатков", СтрокаДанных.ДатаОстатков);
			
			ФактическиеОтпускаПоВидуОтпуска	= ТаблицаФактическихОтпусков.НайтиСтроки(СтруктураПоиска);
			
			СтруктураПоиска.ВидЕжегодногоОтпуска = Справочники.ВидыОтпусков.ПустаяСсылка();
			ФактическиеОтпускаОбщие			= ТаблицаФактическихОтпусков.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ОбщийОтпуск Из ФактическиеОтпускаОбщие Цикл
				ФактическиеОтпускаПоВидуОтпуска.Добавить(ОбщийОтпуск);
			КонецЦикла;
			
			ОстатокНаДатуПоВидуОтпуска = ОстатокНаДатуПоВидамЕжегодныхОтпусков.Добавить();
			ОстатокНаДатуПоВидуОтпуска.ВидЕжегодногоОтпуска				= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
			ОстатокНаДатуПоВидуОтпуска.ВидЕжегодногоОтпускаНаименование	= СтрокаВидаОтпуска.ВидЕжегодногоОтпускаНаименование;
			ОстатокНаДатуПоВидуОтпуска.КоличествоДней					= 0;
			ОстатокНаДатуПоВидуОтпуска.ЕстьОстаток						= Ложь;
			
			Для Каждого РабочийГод Из РабочиеГодаПоВидуОтпуска Цикл
				// Добавим сведения о расчете права на отпуск.
				КоличествоДнейЗаГод = Окр(РабочийГод.РабочиеМесяцы.Итог("КоличествоДней"), 2);
				РабочийГод.Предоставляется				= РабочийГод.КоличествоДнейЗаПолныйГод > 0 Или РабочийГод.РабочиеМесяцы.Количество() = 0;
				
				РабочийГод.КоличествоДнейЗаПолныйГод	= Окр(РабочийГод.КоличествоДнейЗаПолныйГод, 2);
				РабочийГод.ДоступноДляСписанияВЭтомГоду	= КоличествоДнейЗаГод;
				
				// Этот расчет остатка на конец текущего года для случая, когда введены начальные остатки.
				РабочийГод.ОстатокНаКонецТекущегоГода	= РабочийГод.ОстатокНаКонецТекущегоГода + КоличествоДнейЗаГод;
				
				Для Каждого СтрокаОтклонения Из ОтклоненияПоСотруднику Цикл
					Если РабочийГод.ДатаНачала > СтрокаОтклонения.ДатаНачалаОтсутствия
						Или РабочийГод.ДатаОкончания < СтрокаОтклонения.ДатаНачалаОтсутствия Тогда
						Продолжить;
					КонецЕсли;
					
					Отклонение = Новый Структура;
					Отклонение.Вставить("ВидЕжегодногоОтпуска", РабочийГод.ВидЕжегодногоОтпуска);
					Отклонение.Вставить("ВидЕжегодногоОтпускаНаименование", РабочийГод.ВидЕжегодногоОтпускаНаименование);
					Отклонение.Вставить("ДатаНачалаОтсутствия", СтрокаОтклонения.ДатаНачалаОтсутствия);
					Отклонение.Вставить("ДатаОкончанияОтсутствия", СтрокаОтклонения.ДатаОкончанияОтсутствия);
					Отклонение.Вставить("ПричинаОтсутствия", СтрокаОтклонения.Состояние);
					Отклонение.Вставить("КоличествоДнейОтсутствия", СтрокаОтклонения.КоличествоДнейОтсутствия);
					Отклонение.Вставить("КоличествоДнейПродления", СтрокаОтклонения.КоличествоДнейПродления);
					
					РабочийГод.Отклонения.Добавить(Отклонение);
					РабочийГод.Предоставляется		= РабочийГод.Предоставляется Или РабочийГод.РабочиеМесяцы.Итог("КоличествоДней") <> 0;
				КонецЦикла;
				ПраваНаОтпускДляУдаления = Новый Массив;
				Для Каждого ПравоНаЕжегодныйОтпуск Из ПраваНаЕжегодныйОтпускПоВидуОтпуска Цикл
					Если ПравоНаЕжегодныйОтпуск.ДатаДействия = СтрокаДанных.ДатаПриема
						Или ПравоНаЕжегодныйОтпуск.ДатаДействия > РабочийГод.ДатаОкончания Тогда
						Продолжить;
					КонецЕсли;
					
					РабочийГод.ПраваНаЕжегодныйОтпуск.Добавить(ПравоНаЕжегодныйОтпуск);
					ПраваНаОтпускДляУдаления.Добавить(ПравоНаЕжегодныйОтпуск);
					РабочийГод.Предоставляется		= Истина;
				КонецЦикла;
				Для Каждого ПравоНаОтпуск Из ПраваНаОтпускДляУдаления Цикл
					ПраваНаЕжегодныйОтпускПоВидуОтпуска.Удалить(ПраваНаЕжегодныйОтпускПоВидуОтпуска.Найти(ПравоНаОтпуск));
				КонецЦикла;
				
				РабочийГод.ОстатокНаКонецТекущегоГода	= ОстатокНаДатуПоВидуОтпуска.КоличествоДней + РабочийГод.ДоступноДляСписанияВЭтомГоду;
				Если ОстатокНаДатуПоВидуОтпуска.КоличествоДней < 0 Тогда
					РабочийГод.ДоступноДляСписанияВЭтомГоду = Макс(0, РабочийГод.ДоступноДляСписанияВЭтомГоду + ОстатокНаДатуПоВидуОтпуска.КоличествоДней);
				КонецЕсли;
				
				// Спишем фактические отпуска
				ДатаПредыдущегоОтпуска			= РабочийГод.ДатаНачала - ДлинаСуток;
				ДоступноДляСписанияЭтимОтпуском	= 0;
				Для Каждого СтрокаФактическогоОтпуска Из ФактическиеОтпускаПоВидуОтпуска Цикл
					ДатаОтпуска = СтрокаФактическогоОтпуска.ДатаВхожденияВРабочийГод;
					
					Если ДатаОтпуска < РабочийГод.ДатаНачала Тогда
						Продолжить;
					КонецЕсли;
					
					Если ДатаОтпуска > РабочийГод.ДатаОкончания Тогда // Отпуск произойдет в будущем рабочем году.
						Если РабочийГод.ДоступноДляСписанияВЭтомГоду = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						// Отпуск не использовал остатки прошлых лет.
						Если Не ЗначениеЗаполнено(СтрокаФактическогоОтпуска.РабочийГодС) Тогда
							СтрокаФактическогоОтпуска.ОсталосьСписать	= СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
							СтрокаФактическогоОтпуска.РабочийГодС		= РабочийГод.ДатаНачала;
							СтрокаФактическогоОтпуска.РабочийГодПо		= РабочийГод.ДатаОкончания;
						КонецЕсли;
						Если СтрокаФактическогоОтпуска.ОсталосьСписать = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаФактическогоОтпуска.РабочийГодПо					= РабочийГод.ДатаОкончания;
						
						СписатьВТекущемГоду	= Мин(РабочийГод.ДоступноДляСписанияВЭтомГоду, СтрокаФактическогоОтпуска.ОсталосьСписать);
						
						РабочийГод.ДоступноДляСписанияВЭтомГоду					= РабочийГод.ДоступноДляСписанияВЭтомГоду - СписатьВТекущемГоду;
						
						СтрокаФактическогоОтпуска.ИспользованоДнейПрошлыхЛет	= СтрокаФактическогоОтпуска.ИспользованоДнейПрошлыхЛет + СписатьВТекущемГоду;
						СтрокаФактическогоОтпуска.ОсталосьСписать				= СтрокаФактическогоОтпуска.ОсталосьСписать - СписатьВТекущемГоду;
						
					Иначе // Отпуск попадает на текущий рабочий год.
						// Отпуск не использовал остатки прошлых лет.
						Если Не ЗначениеЗаполнено(СтрокаФактическогоОтпуска.РабочийГодС) Тогда
							СтрокаФактическогоОтпуска.ОсталосьСписать			= СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
							СтрокаФактическогоОтпуска.РабочийГодС				= РабочийГод.ДатаНачала;
							СтрокаФактическогоОтпуска.РабочийГодПо				= РабочийГод.ДатаОкончания;
							Если РабочийГод.ОстатокНаКонецТекущегоГода + РабочийГод.КоличествоДнейЗаПолныйГод - КоличествоДнейЗаГод <= 0 Тогда
								СтрокаФактическогоОтпуска.РабочийГодС			= ДобавитьМесяц(СтрокаФактическогоОтпуска.РабочийГодС, 12);
								СтрокаФактическогоОтпуска.РабочийГодПо			= ДобавитьМесяц(СтрокаФактическогоОтпуска.РабочийГодПо, 12);
							КонецЕсли;
						КонецЕсли;
						
						РабочийГод.ОстатокНаКонецТекущегоГода					= РабочийГод.ОстатокНаКонецТекущегоГода - СтрокаФактическогоОтпуска.КоличествоДнейОтпуска;
						
						Если СтрокаФактическогоОтпуска.ОсталосьСписать <> 0 Тогда
							СтрокаФактическогоОтпуска.РабочийГодПо				= РабочийГод.ДатаОкончания;
							
							ПравоНаОтпускВТекущемГоду = 0;
							Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
								Если РабочийМесяц.ДатаМесяца > ДатаОтпуска Тогда
									Прервать;
								КонецЕсли;
								ПравоНаОтпускВТекущемГоду			= ПравоНаОтпускВТекущемГоду + РабочийМесяц.КоличествоДней;
								Если ДатаПредыдущегоОтпуска < РабочийМесяц.ДатаМесяца Тогда
									ДоступноДляСписанияЭтимОтпуском	= ДоступноДляСписанияЭтимОтпуском + РабочийМесяц.КоличествоДней;
								КонецЕсли;
							КонецЦикла;
							ПравоНаОтпускВТекущемГоду			= Окр(ПравоНаОтпускВТекущемГоду, 2);
							ДоступноДляСписанияЭтимОтпуском		= Окр(ДоступноДляСписанияЭтимОтпуском, 2);
							СписатьВТекущемГоду					= Мин(РабочийГод.ДоступноДляСписанияВЭтомГоду, СтрокаФактическогоОтпуска.ОсталосьСписать);
							ЗаработаетДоКонцаГода				= РабочийГод.КоличествоДнейЗаПолныйГод - ПравоНаОтпускВТекущемГоду;
							
							РабочийГод.ДоступноДляСписанияВЭтомГоду				= РабочийГод.ДоступноДляСписанияВЭтомГоду - СписатьВТекущемГоду;
							
							СтрокаФактическогоОтпуска.ИспользованоДнейАвансом	= СтрокаФактическогоОтпуска.ОсталосьСписать - Макс(Мин(ДоступноДляСписанияЭтимОтпуском, СписатьВТекущемГоду), 0);
							СтрокаФактическогоОтпуска.ОсталосьСписать			= 0;
							ДоступноДляСписанияЭтимОтпуском						= ДоступноДляСписанияЭтимОтпуском - СписатьВТекущемГоду;
							
							Если РабочийГод.ОстатокНаКонецТекущегоГода + РабочийГод.КоличествоДнейЗаПолныйГод - КоличествоДнейЗаГод < 0 Тогда
								СтрокаФактическогоОтпуска.РабочийГодПо			= ДобавитьМесяц(СтрокаФактическогоОтпуска.РабочийГодПо, 12);
							КонецЕсли;
							
							ДатаПредыдущегоОтпуска = ДатаОтпуска;
						КонецЕсли;
						
						ФактическийОтпуск = Новый Структура;
						ФактическийОтпуск.Вставить("ВидЕжегодногоОтпуска");
						ФактическийОтпуск.Вставить("ВидЕжегодногоОтпускаНаименование");
						ФактическийОтпуск.Вставить("ДатаНачалаОтпуска");
						ФактическийОтпуск.Вставить("ДатаОкончанияОтпуска");
						ФактическийОтпуск.Вставить("КоличествоДнейОтпуска");
						ФактическийОтпуск.Вставить("ИспользованоДнейПрошлыхЛет");
						ФактическийОтпуск.Вставить("ИспользованоДнейАвансом");
						ФактическийОтпуск.Вставить("РабочийГодС");
						ФактическийОтпуск.Вставить("РабочийГодПо");
						ФактическийОтпуск.Вставить("Компенсация");
						ФактическийОтпуск.Вставить("ДатаРегистрации");
						ФактическийОтпуск.Вставить("ПредставлениеДокумента");
						ФактическийОтпуск.Вставить("Документ");
						ФактическийОтпуск.Вставить("ДокументРасшифровка");
						ФактическийОтпуск.Вставить("РабочийГодСИзДокумента");
						ФактическийОтпуск.Вставить("РабочийГодПоИзДокумента");
						ФактическийОтпуск.Вставить("ОснованиеИзДокумента");
						
						ЗаполнитьЗначенияСвойств(ФактическийОтпуск, СтрокаФактическогоОтпуска);
							
						Если Не СтрокаФактическогоОтпуска.ЗапланированныйОтпуск Тогда
							РабочийГод.Предоставляется	= Истина;
							
							РабочийГод.ФактическиеОтпуска.Добавить(ФактическийОтпуск);
						КонецЕсли;
						
						Если НачалоДня(СтрокаДанных.ДатаНачалаПериода) = НачалоДня(СтрокаФактическогоОтпуска.ДатаНачалаОтпуска)
							И НачалоДня(СтрокаДанных.ДатаОкончанияПериода) = НачалоДня(СтрокаФактическогоОтпуска.ДатаОкончанияОтпуска)
							И (СтрокаДанных.ОтборПоВидуЕжегодногоОтпуска.Пустая() Или СтрокаДанных.ОтборПоВидуЕжегодногоОтпуска = СтрокаФактическогоОтпуска.ВидЕжегодногоОтпуска) Тогда
							РассчитанныйОстаток.КоличествоДнейВПериоде				= ФактическийОтпуск.КоличествоДнейОтпуска;
							РассчитанныйОстаток.РабочийГодПериодаС					= ФактическийОтпуск.РабочийГодС;
							РассчитанныйОстаток.РабочийГодПериодаПо					= ФактическийОтпуск.РабочийГодПо;
							РассчитанныйОстаток.ВидЕжегодногоОтпускаПериода			= ФактическийОтпуск.ВидЕжегодногоОтпуска;
							РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет	= ФактическийОтпуск.ИспользованоДнейПрошлыхЛет;
							РассчитанныйОстаток.ПериодомИспользованоДнейАвансом		= ФактическийОтпуск.ИспользованоДнейАвансом;
							РассчитанныйОстаток.ПримечаниеПериода					= ОписаниеПериодаОтпуска(РассчитанныйОстаток.КоличествоДнейВПериоде, РассчитанныйОстаток.ПериодомИспользованоДнейПрошлыхЛет, РассчитанныйОстаток.ПериодомИспользованоДнейАвансом, РассчитанныйОстаток.ДатаПриема, РассчитанныйОстаток.ДатаОстатков);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(РассчитанныйОстаток.РабочийГодС) И (РабочийГод.ДоступноДляСписанияВЭтомГоду > 0 Или РабочийГод.ПоследнийРабочийГод) Тогда
					РассчитанныйОстаток.РабочийГодС			= РабочийГод.ДатаНачала;
					РассчитанныйОстаток.РабочийГодПо		= ?(СтрокаДанных.ЭтоРасчетПриУвольнении, Мин(СтрокаДанных.ДатаОстатков, РабочийГод.ДатаОкончания), РабочийГод.ДатаОкончания);
				КонецЕсли;
				Если РабочийГод.ДоступноДляСписанияВЭтомГоду > 0 Тогда
					РассчитанныйОстаток.РабочийГодПо		= ?(СтрокаДанных.ЭтоРасчетПриУвольнении, Мин(СтрокаДанных.ДатаОстатков, РабочийГод.ДатаОкончания), РабочийГод.ДатаОкончания);
				КонецЕсли;
				
				ОстатокНаДатуПоВидуОтпуска.КоличествоДней	= РабочийГод.ОстатокНаКонецТекущегоГода;
				ОстатокНаДатуПоВидуОтпуска.ЕстьОстаток		= ОстатокНаДатуПоВидуОтпуска.КоличествоДней <> 0;
				Если Не ЗначениеЗаполнено(ОстатокНаДатуПоВидуОтпуска.РабочийГодС) И (РабочийГод.ДоступноДляСписанияВЭтомГоду > 0 Или РабочийГод.ПоследнийРабочийГод) Тогда
					ОстатокНаДатуПоВидуОтпуска.РабочийГодС		= РабочийГод.ДатаНачала;
					ОстатокНаДатуПоВидуОтпуска.РабочийГодПо		= ?(СтрокаДанных.ЭтоРасчетПриУвольнении, Мин(СтрокаДанных.ДатаОстатков, РабочийГод.ДатаОкончания), РабочийГод.ДатаОкончания);
				КонецЕсли;
				Если РабочийГод.ДоступноДляСписанияВЭтомГоду > 0 Тогда
					ОстатокНаДатуПоВидуОтпуска.РабочийГодПо		= РассчитанныйОстаток.РабочийГодПо;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		РабочиеГодаПоСотруднику.Индексы.Добавить("ВидЕжегодногоОтпуска");
		РабочиеГодаПоСотруднику.Индексы.Добавить("Предоставляется");
		
		РассчитанныйОстаток.ДатаОстатков							= НачалоДня(РассчитанныйОстаток.ДатаОстатков);
		РассчитанныйОстаток.ДанныеРасчета							= РабочиеГодаПоСотруднику.НайтиСтроки(Новый Структура("Предоставляется", Истина));
		РассчитанныйОстаток.ПравоНаОтпускПриПриемеНаРаботу			= ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(Новый Структура("Сотрудник, ДатаДействия, Предоставляется", СтрокаДанных.Сотрудник, СтрокаДанных.ДатаПриема, Истина));
		РассчитанныйОстаток.НачальныеОстатки						= ТаблицаНачальныхОстатков.НайтиСтроки(Новый Структура("Сотрудник", СтрокаДанных.Сотрудник));
		
		РассчитанныйОстаток.ОстатокНаДату							= ОстатокНаДатуПоВидамЕжегодныхОтпусков.Итог("КоличествоДней");
		РассчитанныйОстаток.ОстатокНаДатуПоВидамЕжегодныхОтпусков	= ОстатокНаДатуПоВидамЕжегодныхОтпусков.НайтиСтроки(Новый Структура("ЕстьОстаток", Истина));
		// Округление остатка отпуска если это не расчет при увольнении или если включена необходимость округления при
		// компенсации.
		Если Не СтрокаДанных.ЭтоРасчетПриУвольнении И Не СтрокаДанных.СотрудникУволен Тогда
			Если РассчитанныйОстаток.ОстатокНаДату >= 0 Тогда
				РассчитанныйОстаток.ОстатокНаДату					= Цел(РассчитанныйОстаток.ОстатокНаДату) + ?(Цел(РассчитанныйОстаток.ОстатокНаДату) = РассчитанныйОстаток.ОстатокНаДату, 0, 1);
			Иначе
				РассчитанныйОстаток.ОстатокНаДату					= Цел(РассчитанныйОстаток.ОстатокНаДату);
			КонецЕсли;
		КонецЕсли;
		РассчитанныйОстаток.Примечание								= Строка(РассчитанныйОстаток.ОстатокНаДату) + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней", РассчитанныйОстаток.ОстатокНаДату);
		
		// Готовим массив событий "РассчитанныйОстаток.ДанныеСобытий"
		//	по которому в дальнейшем строится справка по отпускам.
		
		ТаблицаСобытий = Новый ТаблицаЗначений;
		ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
		ТаблицаСобытий.Колонки.Добавить("Событие");
		ТаблицаСобытий.Колонки.Добавить("ПоследнееСобытие", Новый ОписаниеТипов("Булево"));
		ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
		ТаблицаСобытий.Колонки.Добавить("ПраваНаОтпуска");
		ТаблицаСобытий.Колонки.Добавить("НачальныеОстаткиОтпусков");
		ТаблицаСобытий.Колонки.Добавить("ФактическиеОтпуска");
		ТаблицаСобытий.Колонки.Добавить("Отклонения");
		ТаблицаСобытий.Колонки.Добавить("ПродлениеРабочегоГода");
		ТаблицаСобытий.Колонки.Добавить("ДатаПредыдущегоСобытия",Новый ОписаниеТипов("Дата"));
		ТаблицаСобытий.Колонки.Добавить("НакопленоСПредыдущегоСобытия");
		ТаблицаСобытий.Колонки.Добавить("РабочиеГодаОтпусков");
		
		// Подготавливаем начальные данные.
		ПраваСотрудникаНаОтпуска = ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(Новый Структура("Сотрудник",СтрокаДанных.Сотрудник));
		УдалитьДублиПрав(ПраваСотрудникаНаОтпуска);
		
		ФактическиеОтпускаСотрудника = ТаблицаФактическихОтпусков.НайтиСтроки(Новый Структура("Сотрудник",СтрокаДанных.Сотрудник));
		ТаблицаОтклоненийСотрудника = ТаблицаОтклонений.НайтиСтроки(Новый Структура("Сотрудник",СтрокаДанных.Сотрудник));
		
		// Формируем таблицу событий.
		ПраваСотрудника = СвернутьТаблицуПрав(ПраваСотрудникаНаОтпуска, ТаблицаПравНаЕжегодныйОтпуск.СкопироватьКолонки());
		Для каждого ПравоСотрудника Из ПраваСотрудника Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСобытий.Добавить(),ПравоСотрудника);
		КонецЦикла;
		
		ОтпускаСотрудника = СвернутьТаблицуОтпусков(ФактическиеОтпускаСотрудника, ТаблицаФактическихОтпусков.СкопироватьКолонки());
		Для каждого ОтпускСотрудника Из ОтпускаСотрудника Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСобытий.Добавить(),ОтпускСотрудника);
		КонецЦикла;
		
		Для каждого ОтклонениеСотрудника Из ТаблицаОтклоненийСотрудника Цикл
			НовоеСобытие = ТаблицаСобытий.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеСобытие, ОтклонениеСотрудника);
			НовоеСобытие.ДатаСобытия = ОтклонениеСотрудника.ДатаНачалаОтсутствия;
			НовоеСобытие.Событие = Строка(ОтклонениеСотрудника.Состояние);
			НовоеСобытие.Отклонения = ОтклонениеСотрудника;
		КонецЦикла;
		
		// Добавляем "событие" сегодня
		НовоеСобытие = ТаблицаСобытий.Добавить();
		НовоеСобытие.ДатаСобытия = РассчитанныйОстаток.ДатаОстатков;
		НовоеСобытие.Событие = НСтр("ru='Сегодня';uk='Сьогодні'");
		НовоеСобытие.ПоследнееСобытие = Истина;
		
		ТаблицаСобытий.Сортировать("ДатаСобытия");
		
		ДополнитьТаблицуСобытийРабочимиГодами(ТаблицаСобытий, РабочиеГодаПоСотруднику);
		
		// Дополняем начальными остатками.
		Для каждого Событие Из ТаблицаСобытий Цикл
			ОстаткиНаДату = ТаблицаНачальныхОстатков.НайтиСтроки(Новый Структура("Сотрудник, ДатаОстатка", СтрокаДанных.Сотрудник, НачалоДня(Событие.ДатаСобытия)));
			Если ОстаткиНаДату.Количество() > 0 Тогда
				Событие.Событие = НСтр("ru='Введены начальные данные';uk='Введені початкові дані'");
				Событие.НачальныеОстаткиОтпусков = ОстаткиНаДату;
				Если ЗначениеЗаполнено(ОстаткиНаДату[0].Регистратор) Тогда
					Событие.ДокументСобытие = ОстаткиНаДату[0].Регистратор;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		ЗаработанныеОтпускаСотрудника = ТаблицаЗаработанныхДнейОтпусков.НайтиСтроки(Новый Структура("Сотрудник",СтрокаДанных.Сотрудник));
		ТаблицаЗаработанныхДнейОтпусковСотрудника = ТаблицаЗаработанныхДнейОтпусков.СкопироватьКолонки();
		// Заполняем переданную пустую таблицу значений элементами массива.
		Для каждого СтрокаНакопленныхДней Из ЗаработанныеОтпускаСотрудника Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаЗаработанныхДнейОтпусковСотрудника.Добавить(), СтрокаНакопленныхДней);
		КонецЦикла; 
		
		Если ТаблицаСобытий.Количество() > 0 Тогда
			ДатаПредыдущегоСобытия = ТаблицаСобытий[0].ДатаСобытия;
		КонецЕсли;
		
		Для каждого Событие Из ТаблицаСобытий Цикл
			Событие.ДатаПредыдущегоСобытия = ДатаПредыдущегоСобытия;
			Событие.НакопленоСПредыдущегоСобытия = МассивНакопленныхОтпусков(Событие.ДатаСобытия, Событие.ДатаПредыдущегоСобытия, ТаблицаЗаработанныхДнейОтпусковСотрудника);
			ДатаПредыдущегоСобытия = Событие.ДатаСобытия;
		КонецЦикла; 
		
		РассчитанныйОстаток.ДанныеСобытий = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСобытий);
		
	КонецЦикла;
	
	Возврат РассчитанныеОстатки;
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТФактическиеОтпускаСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы - "фильтра".
//		ИменаПолейВременнойТаблицыОтборовСотрудников - перечисленные через запятую имена полей
//				таблицы фильтра (Сотрудник, НачалоПериода, ОкончаниеПериода).
//		ИмяВТФактическиеОтпускаСотрудников - имя создаваемой временной таблицы.
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовСотрудников.
//			ПоляОтбораСотрудников - Структура
//			ИмяВТФактическиеОтпускаСотрудников
//
Функция ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,НачалоПериода,ОкончаниеПериода", ИмяВТФактическиеОтпускаСотрудников = "ВТФактическиеОтпускаСотрудников") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц",				МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовСотрудников",	ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременныхТаблиц.Вставить("ПоляОтбораСотрудников",					ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников));
	ОписательВременныхТаблиц.Вставить("ИмяВТФактическиеОтпускаСотрудников",		ИмяВТФактическиеОтпускаСотрудников);
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Создает и помещает в менеджер временных таблиц
//	таблицу ВТФактическиеОтпускаСотрудников с данными фактических отпусков
//	сотрудников за период. Список сотрудников и периодов,
//	по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
//	таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
//	колонки имена которых переданы в метод ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная
//				методом ОписательВременныхТаблицДляСоздатьВТФактическиеОтпускаСотрудников.
//		ТолькоРазрешенные - Булево
//	
// Помещает в менеджер таблицу ВТФактическиеОтпускаСотрудников,
//	содержащую данные о времени сотрудников по производственным календарям с полями:
//		Сотрудник,
//		ВидЕжегодногоОтпуска,
//		ДатаНачала,
//		ДатаОкончания,
//		КоличествоДней,
//		ЭтоКомпенсация,
//		Регистратор,
//		РабочийПериодС,
//		РабочийПериодПо,
//		Основание
//
Процедура СоздатьВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = ЗапросВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные);
	Запрос.МенеджерВременныхТаблиц	= ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Получение остатка отпуска

// Функция рассчитывает остаток отпуска для одного сотрудника на выбранную дату.
//
// Параметры:
//	Сотрудник				- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ДатаОстатков			- дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ЭтоРасчетПриУвольнении	- Если признак установлен, то функция будет считать, что сотрудник увольняется датой
//	                         ДатаОстатков.
//
// Возвращаемое значение:
//	Структура с остатком, рабочим периодом остатка, текстовым представлением остатка и вложенными структурами с
//	остатками в разрезе отпусков и рабочих лет.
//
Функция ОстатокОтпускаСотрудникаНаДату(Сотрудник, ДатаОстатков = '00010101', ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("ОстатокНаДату", 0);
	ВозвращаемаяСтруктура.Вставить("РабочийГодС", Дата(1, 1, 1));
	ВозвращаемаяСтруктура.Вставить("РабочийГодПо", Дата(1, 1, 1));
	ВозвращаемаяСтруктура.Вставить("Примечание", "");
	ВозвращаемаяСтруктура.Вставить("ОстаткиВРазрезеВидовОтпусков", Новый Массив);
	ВозвращаемаяСтруктура.Вставить("ОстаткиВРазрезеРабочихЛетИВидовОтпусков", Новый Массив);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ВозвращаемаяСтруктура; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Строка = ТаблицаДанных.Добавить();
	Строка.Сотрудник						= Сотрудник;
	Строка.ДатаОстатков						= НачалоДня(ДатаОстатков);
	Строка.ЭтоРасчетПриУвольнении			= ЭтоРасчетПриУвольнении;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных)[0];
	
	ОстаткиВРазрезеРабочихЛетИВидовОтпусков = Новый Массив;
	Для Каждого РабочийГод Из Результат.ДанныеРасчета Цикл
		
		Если РабочийГод.ДоступноДляСписанияВЭтомГоду = 0 И Не РабочийГод.ПоследнийРабочийГод Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураРабочихЛетИВидовОтпусков = Новый Структура;
		СтруктураРабочихЛетИВидовОтпусков.Вставить("ВидЕжегодногоОтпуска", РабочийГод.ВидЕжегодногоОтпуска);
		СтруктураРабочихЛетИВидовОтпусков.Вставить("ОсталосьДней", РабочийГод.ДоступноДляСписанияВЭтомГоду);
		СтруктураРабочихЛетИВидовОтпусков.Вставить("РабочийГодС", РабочийГод.ДатаНачала);
		СтруктураРабочихЛетИВидовОтпусков.Вставить("РабочийГодПо", РабочийГод.ДатаОкончания);
		СтруктураРабочихЛетИВидовОтпусков.Вставить("ПоследнийРабочийГод", РабочийГод.ПоследнийРабочийГод);
		
		ОстаткиВРазрезеРабочихЛетИВидовОтпусков.Добавить(СтруктураРабочихЛетИВидовОтпусков);
		
	КонецЦикла;
	
	ВозвращаемаяСтруктура.ОстатокНаДату = Результат.ОстатокНаДату;
	ВозвращаемаяСтруктура.РабочийГодС = Результат.РабочийГодС;
	ВозвращаемаяСтруктура.РабочийГодПо = Результат.РабочийГодПо;
	ВозвращаемаяСтруктура.Примечание = Результат.Примечание;
	ВозвращаемаяСтруктура.ОстаткиВРазрезеВидовОтпусков = Результат.ОстатокНаДатуПоВидамЕжегодныхОтпусков;
	ВозвращаемаяСтруктура.ОстаткиВРазрезеРабочихЛетИВидовОтпусков = ОстаткиВРазрезеРабочихЛетИВидовОтпусков;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Возвращает структуру для передачи параметров в РабочийПериодОтпуска()
//
Функция ПараметрыПолученияРабочегоПериодаОтпуска() Экспорт 

	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("Сотрудник");
	ПараметрыПолучения.Вставить("ТекущийРегистратор");
	ПараметрыПолучения.Вставить("ВидОтпуска");
	ПараметрыПолучения.Вставить("ДатаНачала");
	ПараметрыПолучения.Вставить("ДатаОкончания");
	ПараметрыПолучения.Вставить("ДатаКомпенсации", Дата("00010101"));
	ПараметрыПолучения.Вставить("КоличествоДнейКомпенсации", 0);
	Возврат ПараметрыПолучения;

КонецФункции
            
// Функция определяет общий рабочий период для указанного отпуска с учетом компенсации.
//
// Параметры:
//	Структура со следующими полями (см. ПараметрыПолученияРабочегоПериодаОтпуска()):
//		Сотрудник					- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//		ТекущийРегистратор			- При определении рабочего периода движения, сделанные переданным регистратором, будут
//		                     			проигнорированы.
//		ВидОтпуска					- Вид ежегодного отпуска.
//		ДатаНачала					- Дата начала отпуска.
//		ДатаОкончания				- Дата окончания отпуска.
//		ДатаКомпенсации				- Дата компенсации отпуска.
//		КоличествоДнейКомпенсации	- Количество дней компенсации отпуска.
//
// Возвращаемое значение:
//	Структура с периодом рабочего года.
//
Функция РабочийПериодОтпуска(СтруктураПараметров) Экспорт
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	ДатаОстатков = СтруктураПараметров.ДатаНачала;
	Если ДатаОстатков = Дата(1, 1, 1) Тогда
		ДатаОстатков = СтруктураПараметров.ДатаКомпенсации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаНачала) И ЗначениеЗаполнено(СтруктураПараметров.ДатаОкончания) Тогда
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник						= СтруктураПараметров.Сотрудник;
		Строка.ДатаОстатков						= НачалоДня(ДатаОстатков);
		Строка.ТекущийРегистратор				= СтруктураПараметров.ТекущийРегистратор;
		
		Строка.ДатаНачала						= СтруктураПараметров.ДатаНачала;
		Строка.ДатаОкончания					= СтруктураПараметров.ДатаОкончания;
		Строка.ОтборПоВидуЕжегодногоОтпуска		= СтруктураПараметров.ВидОтпуска;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ДатаКомпенсации) И ЗначениеЗаполнено(СтруктураПараметров.КоличествоДнейКомпенсации) Тогда
		Если ТаблицаДанных.Количество() = 0 Тогда
			Строка = ТаблицаДанных.Добавить();
			Строка.Сотрудник					= СтруктураПараметров.Сотрудник;
			Строка.ДатаОстатков					= НачалоДня(ДатаОстатков);
			Строка.ТекущийРегистратор			= СтруктураПараметров.ТекущийРегистратор;
			Строка.ОтборПоВидуЕжегодногоОтпуска	= СтруктураПараметров.ВидОтпуска;
		
			Строка.ДатаНачала					= СтруктураПараметров.ДатаКомпенсации;
			Строка.ДатаОкончания				= СтруктураПараметров.ДатаКомпенсации;
			
		Иначе
			Строка = ТаблицаДанных[0];
			
		КонецЕсли;
		
		ДлинаСуток = 86400;
		Строка.ДатаОкончания					= Строка.ДатаОкончания + (СтруктураПараметров.КоличествоДнейКомпенсации - 1) * ДлинаСуток;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков(ТаблицаДанных)[0];
	
	Возврат Новый Структура("РабочийГодС, РабочийГодПо", Результат.РабочийГодПериодаС, Результат.РабочийГодПериодаПо);
	
КонецФункции

// Функция определяет общий рабочий период для всех указанных отпусков и компенсаций.
//
// Параметры:
//	Сотрудник			- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ТекущийРегистратор	- При определении рабочего периода движения, сделанные переданным регистратором, будут
//	                     проигнорированы.
//	СписокОтпусков		- Таблица значений со списком отпусков:
//		ДатаНачала			- Дата начала отпуска.
//		ДатаОкончания		- Дата окончания отпуска.
//		ВидОтпуска			- Вид ежегодного отпуска.
//	СписокКомпенсаций	- Таблица значений со списком компенсаций.
//		ДатаКомпенсации		- Дата компенсации отпуска.
//		КоличествоДней		- Количество дней компенсации отпуска.
//		ВидОтпуска			- Вид ежегодного отпуска.
//
// Возвращаемое значение:
//	Структура с периодом общего для всех отпусков рабочего года.
//
Функция РабочиеПериодыСпискаОтпусков(Сотрудник, ТекущийРегистратор, СписокОтпусков, СписокКомпенсаций) Экспорт
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	ДатаОстатков = Дата(1, 1, 1);
	Для Каждого Отпуск Из СписокОтпусков Цикл
		Если ДатаОстатков = Дата(1, 1, 1) Или ДатаОстатков > Отпуск.ДатаНачала Тогда
			ДатаОстатков = Отпуск.ДатаНачала;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Компенсация Из СписокКомпенсаций Цикл
		Если ДатаОстатков = Дата(1, 1, 1) Или ДатаОстатков > Компенсация.ДатаКомпенсации Тогда
			ДатаОстатков = Компенсация.ДатаКомпенсации;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Отпуск Из СписокОтпусков Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник						= Сотрудник;
		Строка.ДатаОстатков						= НачалоДня(ДатаОстатков);
		Строка.ТекущийРегистратор				= ТекущийРегистратор;
		
		Строка.ДатаНачала						= Отпуск.ДатаНачала;
		Строка.ДатаОкончания					= Отпуск.ДатаОкончания;
		Строка.ОтборПоВидуЕжегодногоОтпуска		= Отпуск.ВидОтпуска;
	КонецЦикла;
	
	ДлинаСуток = 86400;
	Для Каждого Компенсация Из СписокКомпенсаций Цикл
		Строка = ТаблицаДанных.Найти(Компенсация.ВидОтпуска, "ОтборПоВидуЕжегодногоОтпуска");
		Если Строка = Неопределено Тогда
			Строка = ТаблицаДанных.Добавить();
			Строка.Сотрудник					= Сотрудник;
			Строка.ДатаОстатков					= НачалоДня(ДатаОстатков);
			Строка.ТекущийРегистратор			= ТекущийРегистратор;
			Строка.ОтборПоВидуЕжегодногоОтпуска	= Компенсация.ВидОтпуска;
		
			Строка.ДатаНачала					= Компенсация.ДатаКомпенсации;
			Строка.ДатаОкончания				= Компенсация.ДатаКомпенсации;
		КонецЕсли;
		
		Строка.ДатаОкончания					= Строка.ДатаОкончания + Компенсация.КоличествоДней * ДлинаСуток;
	КонецЦикла;
	
	РабочийГодС		= '00010101';
	РабочийГодПо	= '00010101';
	РабочиеПериодыПоВидамОтпусков = Новый Соответствие;
	Для Каждого Результат Из ОстаткиОтпусков(ТаблицаДанных) Цикл
		Если Не ЗначениеЗаполнено(РабочийГодС) Или РабочийГодС > Результат.РабочийГодПериодаС Тогда
			РабочийГодС		= Результат.РабочийГодПериодаС;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(РабочийГодПо) Или РабочийГодПо < Результат.РабочийГодПериодаПо Тогда
			РабочийГодПо	= Результат.РабочийГодПериодаПо;
		КонецЕсли;
		РабочиеПериодыПоВидамОтпусков.Вставить(
			Результат.ВидЕжегодногоОтпускаПериода,
			Новый Структура("РабочийГодС, РабочийГодПо", Результат.РабочийГодПериодаС, Результат.РабочийГодПериодаПо));
	КонецЦикла;
	
	Возврат Новый Структура("РабочийГодС, РабочийГодПо, РабочиеПериодыПоВидамОтпусков", РабочийГодС, РабочийГодПо, РабочиеПериодыПоВидамОтпусков);
	
КонецФункции

// Функция возвращает имя макета для подсистемы Печать.
//
Функция ИмяМакетаДляПечати() Экспорт
	
	Возврат "ОбщийМакет.ПФ_MXL_СправкаПоОтпускамСотрудника";
	
КонецФункции

// Функция формирует справку по отпускам сотрудника на выбранную дату.
//
// Параметры:
//	Сотрудник				- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ДатаОстатков			- дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ЭтоРасчетПриУвольнении	- Если признак установлен, то функция будет считать, что сотрудник увольняется датой
//	                         ДатаОстатков.
//
//
// Возвращаемое значение:
//	Табличный документ, в котором находится справка по отпускам.
//
Функция СправкаПоОтпускамСотрудника(Знач СписокСотрудников, Знач ДатаОстатков = '00010101', Знач ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СписокСотрудников) Или ТипЗнч(СписокСотрудников) = Тип("Массив") И СписокСотрудников.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Если ТипЗнч(СписокСотрудников) <> Тип("Массив") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокСотрудников);
	КонецЕсли;
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник							= Сотрудник;
		Строка.ДатаОстатков							= НачалоДня(ДатаОстатков);
		Строка.ЭтоРасчетПриУвольнении				= ЭтоРасчетПриУвольнении;
	КонецЦикла;
	
	ФорматДаты = "ДФ='d MMM yyyy ""г.""'";
	ФорматЧисла = "ЧДЦ=2; ЧРД=; ЧРГ=,";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоОтпускамСотрудника";
	ТабДокумент.Защита = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакетаДляПечати());
	
	ПервыйСотрудник = Истина;
	
	Для Каждого Результат Из ОстаткиОтпусков(ТаблицаДанных, Истина) Цикл
		
		Если Не ПервыйСотрудник Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйСотрудник = Ложь;
		
		// Шапка отчета: место работы сотрудника и дата приема.
		ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
		ОбластьМакета.Параметры.Заполнить(Результат);
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьМакета.Параметры.ТекущееПодразделение) Тогда
			ОбластьМакета.Параметры.ТекущееПодразделение = ОбластьМакета.Параметры.ТекущееПодразделение.ПолноеНаименование();
		КонецЕсли; 
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Определяем виды отпусков, которые будут отображаться в справке.
		ТаблицаВидовОтпусковСотрудника = Неопределено;
		Для каждого СтрокаСобытий Из Результат.ДанныеСобытий Цикл
			
			Если ЗначениеЗаполнено(СтрокаСобытий.ПраваНаОтпуска) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.ПраваНаОтпуска, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСобытий.НачальныеОстаткиОтпусков) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.НачальныеОстаткиОтпусков, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаСобытий.ФактическиеОтпуска) Тогда
				ДополнитьТаблицуОтпусков(СтрокаСобытий.ФактическиеОтпуска, ТаблицаВидовОтпусковСотрудника);
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТаблицаВидовОтпусковСотрудника = Неопределено ИЛИ ТаблицаВидовОтпусковСотрудника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыОтпусковСотрудника = ТаблицаВидовОтпусковСотрудника.ВыгрузитьКолонку("ВидОтпуска");
				
		// Шапка таблицы.
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета|Тело");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОстаткиОтпусковПоВидуОтпуска = Новый Соответствие;
		
		Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
			// Выводим их.
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОтчета|ВидОтпуска");
			ОбластьМакета.Параметры.ВидОтпуска = ВидОтпуска;
			ТабДокумент.Присоединить(ОбластьМакета);
			// Остатки.
			ОстаткиОтпусковПоВидуОтпуска.Вставить(ВидОтпуска, 0);
		КонецЦикла; 
		
		// Цикл по событиям.
		Для каждого СобытиеОтпусков Из Результат.ДанныеСобытий Цикл
			
			ЕстьНачальныеОстатки = (НЕ СобытиеОтпусков.НачальныеОстаткиОтпусков = Неопределено И СобытиеОтпусков.НачальныеОстаткиОтпусков.Количество() > 0);
			
			// Вывод события-шапки.
			Если СобытиеОтпусков.ПоследнееСобытие Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Сегодня|Тело");
			ИначеЕсли ЗначениеЗаполнено(СобытиеОтпусков.ДокументСобытие) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСРасшифровкой|Тело");
				ОбластьМакета.Параметры.ТекстРасшифровка = СобытиеОтпусков.ДокументСобытие;
			Иначе	
				ОбластьМакета = Макет.ПолучитьОбласть("Шапка|Тело");
			КонецЕсли;
			
			ОбластьМакета.Параметры.Период = Формат(СобытиеОтпусков.ДатаСобытия, ФорматДаты);
			ОбластьМакета.Параметры.Событие = СобытиеОтпусков.Событие;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
				Если ЕстьНачальныеОстатки Тогда
					// Если есть остатки - выводим.
					ОбластьМакета = Макет.ПолучитьОбласть("НачальныеОстатки|ВидОтпуска");
					ОстатокОтпуска = 0;
					Для каждого НачальныйОстатокОтпуска Из СобытиеОтпусков.НачальныеОстаткиОтпусков Цикл
						Если НачальныйОстатокОтпуска.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
							ОстатокОтпуска = ОстатокОтпуска + НачальныйОстатокОтпуска.КоличествоДней;
						КонецЕсли;
					КонецЦикла; 
					ОбластьМакета.Параметры.КоличествоДней = Формат(ОстатокОтпуска, ФорматЧисла);
					ОстаткиОтпусковПоВидуОтпуска[ВидОтпуска] = ОстаткиОтпусковПоВидуОтпуска[ВидОтпуска] + ОстатокОтпуска;
				ИначеЕсли СобытиеОтпусков.ПоследнееСобытие Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Сегодня|ВидОтпуска");
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка|ВидОтпуска");
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьМакета);
			КонецЦикла;
			
			// Вывод прав на отпуск.
			Если ЗначениеЗаполнено(СобытиеОтпусков.ПраваНаОтпуска) Тогда
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					
					ПраваНаОтпуск = НайтиВидОтпускаВМассивеСтруктур(СобытиеОтпусков.ПраваНаОтпуска, ВидОтпуска);
					Если ПраваНаОтпуск = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ПравоНаОтпуск = ПраваНаОтпуск[0];
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Право на отпуск %1 - %2 дн.';uk='Право на відпустку %1 - %2 дн.'"),
						ПравоНаОтпуск.ВидЕжегодногоОтпускаНаименование,
						ПравоНаОтпуск.КоличествоДнейОтпускаВГод);
					ТабДокумент.Вывести(ОбластьМакета);
					
				КонецЦикла; 
			КонецЕсли;
			
			// Если это остатки - выводим информацию по годам.
			Если НЕ СобытиеОтпусков.НачальныеОстаткиОтпусков = Неопределено Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = НСтр("ru='Остатки отпусков введены за периоды работы:';uk='Залишки відпусток введені за періоди роботи:'");
				ТабДокумент.Вывести(ОбластьМакета);
				
				ПредыдущийВидОтпуска = Неопределено;
				
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					
					ОстаткиОтпуска = НайтиВидОтпускаВМассивеСтруктур(СобытиеОтпусков.НачальныеОстаткиОтпусков, ВидОтпуска);
					Если ОстаткиОтпуска = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для каждого ОстатокОтпуска Из ОстаткиОтпуска Цикл
						Если ПредыдущийВидОтпуска = Неопределено ИЛИ ОстатокОтпуска.ВидЕжегодногоОтпуска <> ПредыдущийВидОтпуска Тогда
							ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
							ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"	" + НСтр("ru='для отпуска ""%1"":';uk='для відпустки ""%1"":'"),
								ОстатокОтпуска.ВидЕжегодногоОтпускаНаименование);
							ТабДокумент.Вывести(ОбластьМакета);
						КонецЕсли;
						ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
						ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"		" + НСтр("ru='%1 - %2';uk='%1 - %2'"),
							Формат(ОстатокОтпуска.РабочийГодНачало,ФорматДаты),
							Формат(ОстатокОтпуска.РабочийГодОкончание,ФорматДаты));
						ТабДокумент.Вывести(ОбластьМакета);
						
						ПредыдущийВидОтпуска = ОстатокОтпуска.ВидЕжегодногоОтпуска;
						
					КонецЦикла;
					
				КонецЦикла; 
			КонецЕсли;
			
			// Вывод накопленных дней
			Если ЗначениеЗаполнено(СобытиеОтпусков.НакопленоСПредыдущегоСобытия) Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|Тело");
				ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Накоплено за период %1 - %2';uk='Накопичено за період %1 - %2'"),
					Формат(СобытиеОтпусков.ДатаПредыдущегоСобытия, ФорматДаты),
					Формат(СобытиеОтпусков.ДатаСобытия, ФорматДаты));
				ТабДокумент.Вывести(ОбластьМакета);
				
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					КоличествоДней = 0;
					Для каждого НакоплениеОтпуска Из СобытиеОтпусков.НакопленоСПредыдущегоСобытия Цикл
						Если НакоплениеОтпуска.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
							КоличествоДней = НакоплениеОтпуска.КоличествоДнейЗаПериод;
							Прервать;
						КонецЕсли;
					КонецЦикла; 
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|ВидОтпуска");
					ОбластьМакета.Параметры.КоличествоДней = ?(КоличествоДней = 0, "", "+"+Формат(КоличествоДней, ФорматЧисла));
					ТабДокумент.Присоединить(ОбластьМакета);
					ОстаткиОтпусковПоВидуОтпуска[ВидОтпуска] = ОстаткиОтпусковПоВидуОтпуска[ВидОтпуска] + КоличествоДней;
				КонецЦикла;
			КонецЕсли;
			
			// Вывод событий-отпусков
			Если ЗначениеЗаполнено(СобытиеОтпусков.ФактическиеОтпуска) Тогда
				// Вывод фактических отпусков
				// Определяем дату окончания в случае если отпусков несколько.
				ЕстьКомпенсация = Ложь;
				ЕстьРеальныйОтпуск = Ложь;
				ДнейКомпенсации = 0;
				
				ДатаОкончанияОтпуска = СобытиеОтпусков.ДатаСобытия;
				Для каждого ФактическийОтпуск Из СобытиеОтпусков.ФактическиеОтпуска Цикл
					
					ЕстьКомпенсация = ЕстьКомпенсация ИЛИ ФактическийОтпуск.Компенсация;
					ЕстьРеальныйОтпуск = ЕстьРеальныйОтпуск ИЛИ НЕ ФактическийОтпуск.Компенсация;
					
					Если ФактическийОтпуск.Компенсация Тогда
						ДнейКомпенсации = ДнейКомпенсации + ФактическийОтпуск.КоличествоДнейОтпуска;
					КонецЕсли;
					
				    Если ФактическийОтпуск.ДатаОкончанияОтпуска > ДатаОкончанияОтпуска И НЕ ФактическийОтпуск.Компенсация Тогда
						ДатаОкончанияОтпуска = ФактическийОтпуск.ДатаОкончанияОтпуска;
					КонецЕсли;
					
				КонецЦикла; 
				
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|Тело");
				Если ЕстьКомпенсация И ЕстьРеальныйОтпуск Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Период отпуска: %1 - %2 (+ %3 дн. компенсации)';uk='Період відпустки: %1 - %2 (+ %3 дн. компенсації)'"),
						Формат(СобытиеОтпусков.ДатаСобытия,ФорматДаты),
						Формат(ДатаОкончанияОтпуска,ФорматДаты),
						Формат(ДнейКомпенсации,ФорматЧисла));
				ИначеЕсли ЕстьКомпенсация И НЕ ЕстьРеальныйОтпуск Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Компенсация отпуска (%1 дн.)';uk='Компенсація відпустки (%1 дн.)'"),
						Формат(ДнейКомпенсации,ФорматЧисла));
				ИначеЕсли ЕстьРеальныйОтпуск И НЕ ЕстьКомпенсация Тогда
					ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Период отпуска: %1 - %2';uk='Період відпустки: %1 - %2'"),
						Формат(СобытиеОтпусков.ДатаСобытия,ФорматДаты),
						Формат(ДатаОкончанияОтпуска,ФорматДаты));
				КонецЕсли;
				
				ОбластьМакета.Параметры.Текст  = ТекстЗаголовка;
				ТабДокумент.Вывести(ОбластьМакета);
				
				Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
					КоличествоДней = 0;
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|ВидОтпуска");
					Для каждого ФактическийОтпуск Из СобытиеОтпусков.ФактическиеОтпуска Цикл
						Если ФактическийОтпуск.ВидЕжегодногоОтпуска = ВидОтпуска Тогда
							КоличествоДней = КоличествоДней + ФактическийОтпуск.КоличествоДнейОтпуска;
							Если ФактическийОтпуск.ИспользованоДнейАвансом > 0 Тогда
								ОбластьМакета = Макет.ПолучитьОбласть("СтрокаОтпуск|АвансовыйОтпуск");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Если КоличествоДней > 0 Тогда
						ОбластьМакета.Параметры.КоличествоДней = "-"+Формат(КоличествоДней,ФорматЧисла);
					ИначеЕсли КоличествоДней < 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("СтрокаНакоплено|ВидОтпуска");
						ОбластьМакета.Параметры.КоличествоДней = "+"+Формат(-КоличествоДней,ФорматЧисла);
					Иначе
						ОбластьМакета.Параметры.КоличествоДней = "";
					КонецЕсли;
					ТабДокумент.Присоединить(ОбластьМакета);
					ОстаткиОтпусковПоВидуОтпуска[ВидОтпуска] = ОстаткиОтпусковПоВидуОтпуска[ВидОтпуска] - КоличествоДней;
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(СобытиеОтпусков.Отклонения) Тогда
				ОтпускОтклонение = СобытиеОтпусков.Отклонения;
				// Вывод отпусков-отклонений.
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Период отпуска: %1 - %2';uk='Період відпустки: %1 - %2'"),
					Формат(ОтпускОтклонение.ДатаНачалаОтсутствия,ФорматДаты),
					Формат(ОтпускОтклонение.ДатаОкончанияОтсутствия,ФорматДаты));
				ОбластьМакета.Параметры.Текст  = ТекстЗаголовка;
				ТабДокумент.Вывести(ОбластьМакета);
				
				Если ОтпускОтклонение.КоличествоДнейПродления = Null Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Дата окончания рабочего года определена как %1';uk='Дата закінчення робочого року визначена як %1'"),
							Формат(ОтпускОтклонение.ДатаНачалаОтсутствия,ФорматДаты));
					ТабДокумент.Вывести(ОбластьМакета);
				ИначеЕсли ОтпускОтклонение.КоличествоДнейПродления > 0 Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					Если СобытиеОтпусков.РабочиеГодаОтпусков.Количество() > 0 Тогда
						ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='На %1 дн. продлены рабочие года отпусков:';uk='%1 дн. продовжені робочі роки відпусток:'"), ОтпускОтклонение.КоличествоДнейПродления);
					Иначе
						ОбластьМакета.Параметры.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='На %1 дн. продлен рабочий год отпуска:';uk='На %1 дн. продовжений робочий рік відпустки:'"), ОтпускОтклонение.КоличествоДнейПродления);
					КонецЕсли;
					ТабДокумент.Вывести(ОбластьМакета);
					
					Для каждого РабочийГод Из СобытиеОтпусков.РабочиеГодаОтпусков Цикл
						Если ВидыОтпусковСотрудника.Найти(РабочийГод.ВидЕжегодногоОтпуска) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
						ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							"		" + НСтр("ru='для отпуска %1: %2 - %3';uk='для відпустки %1: %2 - %3'"),
							РабочийГод.ВидЕжегодногоОтпуска,
							Формат(РабочийГод.ДатаНачала,ФорматДаты),
							Формат(РабочийГод.ДатаОкончания,ФорматДаты));
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЦикла; 
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла; 
		
		// Подвал отчета: текущий остаток отпуска.
		ОбластьМакета = Макет.ПолучитьОбласть("ОстатокОтпуска|Тело");
		ОбластьМакета.Параметры.Текст  = НСтр("ru='Остаток отпуска';uk='Залишок відпустки'");
		ТабДокумент.Вывести(ОбластьМакета);
		// Вывод остатков отпусков.
		Для каждого ВидОтпуска Из ВидыОтпусковСотрудника Цикл
			КоличествоДней = ОстаткиОтпусковПоВидуОтпуска[ВидОтпуска];
			ОбластьМакета = Макет.ПолучитьОбласть("ОстатокОтпуска|ВидОтпуска");
			ОбластьМакета.Параметры.КоличествоДней = ?(КоличествоДней = 0, "", Формат(КоличествоДней,ФорматЧисла));
			ТабДокумент.Присоединить(ОбластьМакета);
		КонецЦикла;
		// Вывод рабочих лет.
		Выборка = ПериодыОстатковОтпусков(Результат.ДанныеРасчета);
		Если Выборка.Количество() > 0 Тогда
			// Выводим рабочие года по остаткам отпусков.
			ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
			ОбластьМакета.Параметры.Текст  = НСтр("ru='Остатки отпусков накоплены за следующие периоды работы:';uk='Залишки відпусток накопичені за наступні періоди роботи:'");
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.СледующийПоЗначениюПоля("ВидЕжегодногоОтпуска") Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"	" + НСтр("ru='для отпуска ""%1"":';uk='для відпустки ""%1"":'"),
					Выборка.ВидЕжегодногоОтпускаНаименование);
				ТабДокумент.Вывести(ОбластьМакета);
				Пока Выборка.Следующий() Цикл
					ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
					ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"		" + НСтр("ru='%1 - %2';uk='%1 - %2'"),
						Формат(Выборка.ДатаНачала,ФорматДаты),
						Формат(Выборка.ДатаОкончания,ФорматДаты));
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Выборка = ПериодыАвансовыхОтпусков(Результат.ДанныеРасчета);
		Если Выборка.Количество() > 0 Тогда
			// Выводим рабочие отпуска по авансам.
			// Выводим рабочие года по остаткам отпусков.
			ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
			ОбластьМакета.Параметры.Текст  = НСтр("ru='Были использованы авансом отпуска за следующие периоды работы:';uk='Були використані авансом відпустки за наступні періоди роботи:'");
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.Следующий() Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"	" + НСтр("ru='для отпуска ""%1"":';uk='для відпустки ""%1"":'"),
					Выборка.ВидЕжегодногоОтпускаНаименование);
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьМакета = Макет.ПолучитьОбласть("Примечание");
				ОбластьМакета.Параметры.Текст  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"		" + НСтр("ru='%1 - %2';uk='%1 - %2'"),
					Формат(Выборка.ДатаНачала,ФорматДаты),
					Формат(Выборка.ДатаОкончания,ФорматДаты));
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла; 
		КонецЕсли;
				
	КонецЦикла;
		
	Возврат ТабДокумент;
	
КонецФункции

// Функция формировала старую версию справки по отпускам сотрудника на выбранную дату.
//
// Параметры:
//	Сотрудник				- сотрудник, оформленный по трудовому договору, для которого необходимо узнать остаток;
//	ДатаОстатков			- дата, на которую необходимо получить остаток. Если не указана, используется текущая дата.
//	ЭтоРасчетПриУвольнении	- Если признак установлен, то функция будет считать, что сотрудник увольняется датой
//	                         ДатаОстатков.
//
//
// Возвращаемое значение:
//	Табличный документ, в котором находится справка по отпускам.
//
Функция СправкаПоОтпускамСотрудникаПредыдущая(Знач СписокСотрудников, Знач ДатаОстатков = '00010101', Знач ЭтоРасчетПриУвольнении = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СписокСотрудников) Или ТипЗнч(СписокСотрудников) = Тип("Массив") И СписокСотрудников.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиПечатныхФорм = ЗарплатаКадрыПовтИсп.НастройкиПечатныхФорм();
	
	Если Не ЗначениеЗаполнено(ДатаОстатков) Тогда
		ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Если ТипЗнч(СписокСотрудников) <> Тип("Массив") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокСотрудников);
	КонецЕсли;
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник							= Сотрудник;
		Строка.ДатаОстатков							= НачалоДня(ДатаОстатков);
		Строка.ЭтоРасчетПриУвольнении				= ЭтоРасчетПриУвольнении;
	КонецЦикла;
	
	ФорматДаты = "ДФ='d MMM yyyy ""г.""'";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоОтпускамСотрудника";
	ТабДокумент.Защита = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СправкаПоОтпускамСотрудникаПредыдущая");
	
	ПорядокИзмененияДней		= 1;
	ПорядокОтклонения			= 2;
	ПорядокОтпуска				= 3;
	ПорядокКомпенсации			= 4;
	ПорядокОстаткиОкончания		= 5;
	
	ПервыйСотрудник = Истина;
	Для Каждого Результат Из ОстаткиОтпусков(ТаблицаДанных, Истина) Цикл
		Если Не ПервыйСотрудник Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйСотрудник = Ложь;
		
		Если Не ЗначениеЗаполнено(Результат.ДатаПриема) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
			ОбластьМакета.Параметры.Сотрудник				= Результат.Сотрудник;
			Если Результат.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				ОбластьМакета.Параметры.ТекущаяОрганизация	= НСтр("ru='Сотрудница не принята на работу';uk='Співробітниця не прийнята на роботу'");
			Иначе
				ОбластьМакета.Параметры.ТекущаяОрганизация	= НСтр("ru='Сотрудник не принят на работу';uk='Співробітник не прийнятий на роботу'");
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			
			Продолжить;
		КонецЕсли;
		
		// Шапка отчета: место работы сотрудника и дата приема.
		ОбластьМакета = Макет.ПолучитьОбласть("ОбщиеДанные");
		ОбластьМакета.Параметры.Заполнить(Результат);
		
		Если НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений И ЗначениеЗаполнено(ОбластьМакета.Параметры.ТекущееПодразделение) Тогда
			ОбластьМакета.Параметры.ТекущееПодразделение = ОбластьМакета.Параметры.ТекущееПодразделение.ПолноеНаименование();
		КонецЕсли; 
			
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Период		= Формат(Результат.ДатаПриема, ФорматДаты);
		Если Результат.ВведеныНачальныеОстатки Тогда
			ОбластьМакета.Параметры.Комментарий	= НСтр("ru='Введены данные на начало эксплуатации';uk='Введені дані на початок експлуатації'");
			
		Иначе
			Если Результат.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				ОбластьМакета.Параметры.Комментарий	= НСтр("ru='Принята на работу';uk='Прийнята на роботу'");
			Иначе
				ОбластьМакета.Параметры.Комментарий	= НСтр("ru='Принят на работу';uk='Прийнятий на роботу'");
			КонецЕсли;
			
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Результат.ПравоНаОтпускПриПриемеНаРаботу.Количество() > 0 Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Текст		= НСтр("ru='Ежегодно предоставляемые отпуска';uk='Щорічно надаються відпустки'");
			Если Результат.ВведеныНачальныеОстатки Тогда
				ОбластьМакета.Параметры.Комментарий	= НСтр("ru='Начальные остатки';uk='Початкові залишки'");
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			Для Каждого ПоложенныйВидЕжегодногоОтпуска Из Результат.ПравоНаОтпускПриПриемеНаРаботу Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст			= "     " + ПоложенныйВидЕжегодногоОтпуска.ВидЕжегодногоОтпускаНаименование;
				ОбластьМакета.Параметры.КоличествоДней	= "" + ПоложенныйВидЕжегодногоОтпуска.КоличествоДнейОтпускаВГод + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",ПоложенныйВидЕжегодногоОтпуска.КоличествоДнейОтпускаВГод);
				Если Результат.ВведеныНачальныеОстатки Тогда
					Для Каждого НачальныйОстаток Из Результат.НачальныеОстатки Цикл
						Если НачальныйОстаток.ВидЕжегодногоОтпуска <> ПоложенныйВидЕжегодногоОтпуска.ВидЕжегодногоОтпуска Тогда
							Продолжить;
						КонецЕсли;
						ОбластьМакета.Параметры.Комментарий	= "" + НачальныйОстаток.КоличествоДней + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",НачальныйОстаток.КоличествоДней);
						Прервать;
					КонецЦикла;
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
		// Данные отчета в следующем порядке:
		//  1 - Изменения дней отпуска в год.
		//  2 - Продления рабочего года.
		//  3 - Фактические отпуска
		//  4 - Окончание рабочего года.
		ТаблицаМакетовЗаПериод = Новый ТаблицаЗначений;
		ТаблицаМакетовЗаПериод.Колонки.Добавить("Период");
		ТаблицаМакетовЗаПериод.Колонки.Добавить("ДополнительныйПериод");
		ТаблицаМакетовЗаПериод.Колонки.Добавить("Порядок");
		ТаблицаМакетовЗаПериод.Колонки.Добавить("МассивОбластей");
		
		Для Каждого РабочийГод Из Результат.ДанныеРасчета Цикл
			// Изменения количества дней отпуска в год.
			Для Каждого ИзменениеДней Из РабочийГод.ПраваНаЕжегодныйОтпуск Цикл
				ВидЕжегодногоОтпускаТекст	= ИзменениеДней.ВидЕжегодногоОтпускаНаименование;
				КоличествоДнейТекст			= "" + ИзменениеДней.КоличествоДнейОтпускаВГод + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",ИзменениеДней.КоличествоДнейОтпускаВГод);
				
				МакетИзменения = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", ИзменениеДней.ДатаДействия, ПорядокИзмененияДней));
				Если МакетИзменения.Количество() = 0 Тогда
					МассивОбластей = Новый Массив;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
					ОбластьМакета.Параметры.Период				= Формат(ИзменениеДней.ДатаДействия, ФорматДаты);
					ОбластьМакета.Параметры.Комментарий			= НСтр("ru='Изменено количество дней отпуска в год';uk='Змінено кількість днів відпустки на рік'");
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст				= "     " + ВидЕжегодногоОтпускаТекст;
					ОбластьМакета.Параметры.КоличествоДней		= КоличествоДнейТекст;
					МассивОбластей.Добавить(ОбластьМакета);
					
					Строка = ТаблицаМакетовЗаПериод.Добавить();
					Строка.Период				= ИзменениеДней.ДатаДействия;
					Строка.Порядок				= ПорядокИзмененияДней;
					Строка.МассивОбластей		= МассивОбластей;
					
				Иначе
					Строка = МакетИзменения[0];
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст				= "     " + ВидЕжегодногоОтпускаТекст;
					ОбластьМакета.Параметры.КоличествоДней		= КоличествоДнейТекст;
					Строка.МассивОбластей.Добавить(ОбластьМакета);
					
				КонецЕсли;
			КонецЦикла;
			
			// Продления рабочего года
			Для Каждого Отклонение Из РабочийГод.Отклонения Цикл
				ВидЕжегодногоОтпускаТекст		= Отклонение.ВидЕжегодногоОтпускаНаименование;
				КоличествоДнейОтсутствияТекст	= "" + Отклонение.КоличествоДнейОтсутствия + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",Отклонение.КоличествоДнейОтсутствия);
				КоличествоДнейПродленияТекст	= "" + Отклонение.КоличествоДнейПродления + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",Отклонение.КоличествоДнейПродления);
				
				МакетОтклонения = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", Отклонение.ДатаНачалаОтсутствия, ПорядокОтклонения));
				Если МакетОтклонения.Количество() = 0 Тогда
					МассивОбластей = Новый Массив;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
					ОбластьМакета.Параметры.Период				= Формат(Отклонение.ДатаНачалаОтсутствия, ФорматДаты) + " - " + Формат(Отклонение.ДатаОкончанияОтсутствия, ФорматДаты);
					ОбластьМакета.Параметры.Комментарий			= Отклонение.ПричинаОтсутствия;
					ОбластьМакета.Параметры.КоличествоДней		= КоличествоДнейОтсутствияТекст;
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст				= НСтр("ru='Рабочий год продлен на';uk='Робочий рік продовжено на'");
					ОбластьМакета.Параметры.КоличествоДней		= КоличествоДнейПродленияТекст;
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст				= "     " + ВидЕжегодногоОтпускаТекст;
					МассивОбластей.Добавить(ОбластьМакета);
					
					Строка = ТаблицаМакетовЗаПериод.Добавить();
					Строка.Период			= Отклонение.ДатаНачалаОтсутствия;
					Строка.Порядок			= ПорядокОтклонения;
					Строка.МассивОбластей	= МассивОбластей;
					
				Иначе
					Строка = МакетОтклонения[0];
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст				= "     " + ВидЕжегодногоОтпускаТекст;
					Строка.МассивОбластей.Добавить(ОбластьМакета);
					
				КонецЕсли;
			КонецЦикла;
			
			// Фактические отпуска, включая сторно-отпуска и компенсацию отпуска.
			Для Каждого Отпуск Из РабочийГод.ФактическиеОтпуска Цикл
				МассивОбластей = Новый Массив;
				
				ВидЕжегодногоОтпускаТекст	= Отпуск.ВидЕжегодногоОтпускаНаименование;
				КоличествоДнейТекст			= "" + Отпуск.КоличествоДнейОтпуска + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
				
				Если Отпуск.Компенсация Тогда
					МакетКомпенсаций = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, ДополнительныйПериод, Порядок", Отпуск.ДатаНачалаОтпуска, Отпуск.ДатаРегистрации, ПорядокКомпенсации));
					Если МакетКомпенсаций.Количество() = 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть(?(Отпуск.КоличествоДнейОтпуска >= 0, "Шапка", "СторноШапка"));
						ОбластьМакета.Параметры.Период			= Формат(Отпуск.ДатаНачалаОтпуска, ФорматДаты);
						ОбластьМакета.Параметры.Комментарий		= НСтр("ru='Компенсировано отпуска';uk='Компенсовано відпустки'");
						ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
						МассивОбластей.Добавить(ОбластьМакета);
						
						ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСРасшифровкой");
						ОбластьМакета.Параметры.Текст				= Отпуск.Документ;
						ОбластьМакета.Параметры.ТекстРасшифровка	= Отпуск.ДокументРасшифровка;
						МассивОбластей.Добавить(ОбластьМакета);
						
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст			= "     " + ВидЕжегодногоОтпускаТекст;
						ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
						МассивОбластей.Добавить(ОбластьМакета);
						
						Строка = ТаблицаМакетовЗаПериод.Добавить();
						Строка.Период				= Отпуск.ДатаНачалаОтпуска;
						Строка.ДополнительныйПериод	= Отпуск.ДатаРегистрации;
						Строка.Порядок				= ПорядокКомпенсации;
						Строка.МассивОбластей		= МассивОбластей;
						
					Иначе
						Строка = МакетКомпенсаций[0];
						
						ОбластьШапка = Строка.МассивОбластей[0];
						КоличествоДней = Сред(ОбластьШапка.Параметры.КоличествоДней, 1, СтрНайти(ОбластьШапка.Параметры.КоличествоДней, " ") - 1);
						Если ЗначениеЗаполнено(КоличествоДней) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(КоличествоДней, "-", "")) Тогда
							КоличествоДней = Число(КоличествоДней) + Отпуск.КоличествоДнейОтпуска;
							
							КоличествоДнейОбщееТекст = "" + КоличествоДней + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",КоличествоДней);
							
							ОбластьШапка.Параметры.КоличествоДней		= КоличествоДнейОбщееТекст;
						КонецЕсли;
						
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст				= "     " + ВидЕжегодногоОтпускаТекст;
						ОбластьМакета.Параметры.КоличествоДней		= КоличествоДнейТекст;
						Строка.МассивОбластей.Добавить(ОбластьМакета);
					КонецЕсли;
					
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть(?(Отпуск.КоличествоДнейОтпуска >= 0, "Шапка", "СторноШапка"));
					ОбластьМакета.Параметры.Период			= Формат(Отпуск.ДатаНачалаОтпуска, ФорматДаты) + " - " + Формат(Отпуск.ДатаОкончанияОтпуска, ФорматДаты);
					ОбластьМакета.Параметры.Комментарий		= ВидЕжегодногоОтпускаТекст;
					ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСРасшифровкой");
					ОбластьМакета.Параметры.Текст				= Отпуск.Документ;
					ОбластьМакета.Параметры.ТекстРасшифровка	= Отпуск.ДокументРасшифровка;
					МассивОбластей.Добавить(ОбластьМакета);
					
					Если Отпуск.КоличествоДнейОтпуска >= 0 Тогда
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Рабочий период: %1 - %2';uk='Робочий період: %1 - %2'"),
							Формат(Отпуск.РабочийГодС, ФорматДаты), Формат(Отпуск.РабочийГодПо, ФорматДаты));
						МассивОбластей.Добавить(ОбластьМакета);
						
						Если Отпуск.РабочийГодС <> Отпуск.РабочийГодСИзДокумента Или Отпуск.РабочийГодПо <> Отпуск.РабочийГодПоИзДокумента Тогда
							ОбластьМакета = Макет.ПолучитьОбласть("Строка");
							ОбластьМакета.Параметры.Текст			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								"      " + НСтр("ru='в документе: %1 - %2';uk='у документі: %1 - %2'"),
								Формат(Отпуск.РабочийГодСИзДокумента, ФорматДаты), Формат(Отпуск.РабочийГодПоИзДокумента, ФорматДаты));
							МассивОбластей.Добавить(ОбластьМакета);
						КонецЕсли;
						
						Если Не ПустаяСтрока(Отпуск.ОснованиеИзДокумента) Тогда
							ОбластьМакета = Макет.ПолучитьОбласть("Строка");
							ОбластьМакета.Параметры.Текст			= НСтр("ru='Основание:';uk='Підстава:'") + " " + Отпуск.ОснованиеИзДокумента;
							МассивОбластей.Добавить(ОбластьМакета);
						КонецЕсли;
						
						ОбластьМакета = Макет.ПолучитьОбласть("Строка");
						ОбластьМакета.Параметры.Текст			= НСтр("ru='Использовано отпуска';uk='Використано відпустки'");
						ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
						МассивОбластей.Добавить(ОбластьМакета);
						
						КоличествоСтрок = ?(Отпуск.ИспользованоДнейПрошлыхЛет > 0, 1, 0) + ?(Отпуск.ИспользованоДнейАвансом > 0, 1, 0);
						Если КоличествоСтрок > 1 Тогда
							ОбластьМакета = Макет.ПолучитьОбласть("Строка");
							ОбластьМакета.Параметры.Текст		= "  " + НСтр("ru='из них';uk='з них'");
							МассивОбластей.Добавить(ОбластьМакета);
							
							ОбщийТекст = "     ";
						Иначе
							ОбщийТекст = "  " + НСтр("ru='из них';uk='з них'");
						КонецЕсли;
						Если Отпуск.ИспользованоДнейПрошлыхЛет > 0 Тогда
							КоличествоДнейПрошлыхЛетТекст	= "" + Отпуск.ИспользованоДнейПрошлыхЛет + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",Отпуск.ИспользованоДнейПрошлыхЛет);
							
							ОбластьМакета = Макет.ПолучитьОбласть("Строка");
							ОбластьМакета.Параметры.Текст			= ОбщийТекст + " " + НСтр("ru='за счет отпусков прошлых лет';uk='за рахунок відпусток минулих років'");
							ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейПрошлыхЛетТекст;
							МассивОбластей.Добавить(ОбластьМакета);
						КонецЕсли;
						Если Отпуск.ИспользованоДнейАвансом > 0 Тогда
							КоличествоДнейАвансомТекст	= "" + Отпуск.ИспользованоДнейАвансом + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",Отпуск.ИспользованоДнейАвансом);
							
							ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
							ОбластьМакета.Параметры.Текст			= ОбщийТекст + " " + НСтр("ru='за счет отпусков будущего периода';uk='за рахунок відпусток майбутнього періоду'");
							ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейАвансомТекст;
							МассивОбластей.Добавить(ОбластьМакета);
						КонецЕсли;
						
					Иначе
						КоличествоДнейВозвращаемогоОтпуска	= "" + (-Отпуск.КоличествоДнейОтпуска) + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",Отпуск.КоличествоДнейОтпуска);
						
						ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
						ОбластьМакета.Параметры.Текст			= НСтр("ru='Возвращено отпуска';uk='Повернуто відпустки'");
						ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейВозвращаемогоОтпуска;
						МассивОбластей.Добавить(ОбластьМакета);
						
					КонецЕсли;
					
					Строка = ТаблицаМакетовЗаПериод.Добавить();
					Строка.Период				= Отпуск.ДатаНачалаОтпуска;
					Строка.ДополнительныйПериод	= Отпуск.ДатаРегистрации;
					Строка.Порядок				= ПорядокОтпуска;
					Строка.МассивОбластей		= МассивОбластей;
					
				КонецЕсли;
			КонецЦикла;
			
			// Окончание рабочего года для всех лет, кроме последнего.
			Если Не РабочийГод.ПоследнийРабочийГод Тогда
				ВидЕжегодногоОтпускаТекст	= РабочийГод.ВидЕжегодногоОтпускаНаименование;
				КоличествоДнейТекст			= "" + РабочийГод.ОстатокНаКонецТекущегоГода + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",РабочийГод.ОстатокНаКонецТекущегоГода);
				
				МакетРабочегоГода = ТаблицаМакетовЗаПериод.НайтиСтроки(Новый Структура("Период, Порядок", РабочийГод.ДатаОкончания, ПорядокОстаткиОкончания));
				Если МакетРабочегоГода.Количество() = 0 Тогда
					МассивОбластей = Новый Массив;
					
					ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
					ОбластьМакета.Параметры.Комментарий		= ?(РабочийГод.ДатаОкончания < НачалоДня(ТекущаяДатаСеанса()), НСтр("ru='Закончился рабочий год';uk='Закінчився робочий рік'"), НСтр("ru='Рассчитан рабочий год';uk='Розрахований робочий рік'"));
					ОбластьМакета.Параметры.Период			= Формат(РабочийГод.ДатаОкончания, ФорматДаты);
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Рабочий период: %1 - %2';uk='Робочий період: %1 - %2'"),
						Формат(РабочийГод.ДатаНачала, ФорматДаты), Формат(РабочийГод.ДатаОкончания, ФорматДаты));
					МассивОбластей.Добавить(ОбластьМакета);
				
					ОбластьМакета = Макет.ПолучитьОбласть("Строка");
					ОбластьМакета.Параметры.Текст			= НСтр("ru='Остаток отпуска';uk='Залишок відпустки'");
					МассивОбластей.Добавить(ОбластьМакета);
					
					ОбластьМакета = Макет.ПолучитьОбласть(?(РабочийГод.ОстатокНаКонецТекущегоГода >= 0, "Строка", "ВажнаяСтрока"));
					ОбластьМакета.Параметры.Текст			= "     " + ВидЕжегодногоОтпускаТекст;
					ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
					МассивОбластей.Добавить(ОбластьМакета);
					
					Строка = ТаблицаМакетовЗаПериод.Добавить();
					Строка.Период			= РабочийГод.ДатаОкончания;
					Строка.Порядок			= ПорядокОстаткиОкончания;
					Строка.МассивОбластей	= МассивОбластей;
					
				Иначе
					Строка = МакетРабочегоГода[0];
					
					ОбластьМакета = Макет.ПолучитьОбласть(?(РабочийГод.ОстатокНаКонецТекущегоГода >= 0, "Строка", "ВажнаяСтрока"));
					ОбластьМакета.Параметры.Текст			= "     " + ВидЕжегодногоОтпускаТекст;
					ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
					Строка.МассивОбластей.Добавить(ОбластьМакета);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаМакетовЗаПериод.Сортировать("Период, ДополнительныйПериод, Порядок");
		
		Для Каждого СтрокаТаблицы Из ТаблицаМакетовЗаПериод Цикл
			Для Каждого ОбластьМакета Из СтрокаТаблицы.МассивОбластей Цикл
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЦикла;
		
		// Подвал отчета: текущий остаток отпуска.
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		Если ЭтоРасчетПриУвольнении Тогда
			ОбластьМакета.Параметры.Период		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На дату увольнения, %1';uk='На дату звільнення, %1'"),
				Формат(НачалоДня(ДатаОстатков), ФорматДаты));
			
		ИначеЕсли Результат.СотрудникУволен Тогда
			ОбластьМакета.Параметры.Период		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='На дату увольнения, %1';uk='На дату звільнення, %1'"),
				Формат(НачалоДня(Результат.ДатаУвольнения), ФорматДаты));
			
		Иначе
			Если НачалоДня(ДатаОстатков) = НачалоДня(НачалоДня(ТекущаяДатаСеанса())) Тогда
				ОбластьМакета.Параметры.Период		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На сегодня, %1';uk='На сьогодні, %1'"),
					Формат(НачалоДня(ДатаОстатков), ФорматДаты));
				
			ИначеЕсли НачалоДня(ДатаОстатков) = НачалоДня(КонецГода(ДатаОстатков)) Тогда
				ОбластьМакета.Параметры.Период		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На конец года, %1';uk='На кінець року, %1'"),
					Формат(НачалоДня(ДатаОстатков), ФорматДаты));
				
			ИначеЕсли НачалоДня(ДатаОстатков) = НачалоДня(КонецМесяца(ДатаОстатков)) Тогда
				ОбластьМакета.Параметры.Период		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На конец месяца, %1';uk='На кінець місяця, %1'"),
					Формат(НачалоДня(ДатаОстатков), ФорматДаты));
				
			Иначе
				ОбластьМакета.Параметры.Период		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='На %1';uk='%1'"),
					Формат(НачалоДня(ДатаОстатков), ФорматДаты));
				
			КонецЕсли;
			
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если Результат.ОстатокНаДату >= 0 Тогда
			КоличествоДнейТекст	= "" + Результат.ОстатокНаДату + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",Результат.ОстатокНаДату);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Текст			= ?(ЭтоРасчетПриУвольнении Или Результат.СотрудникУволен, НСтр("ru='Подлежит компенсации';uk='Підлягає компенсації'"), НСтр("ru='Неиспользованный отпуск';uk='Невикористана відпустка'"));
			ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
			
		Иначе
			КоличествоДнейТекст	= "" + (-Результат.ОстатокНаДату) + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",Результат.ОстатокНаДату);
			
			ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
			ОбластьМакета.Параметры.Текст			= ?(ЭтоРасчетПриУвольнении Или Результат.СотрудникУволен, НСтр("ru='Подлежит удержанию';uk='Підлягає утриманню'"), НСтр("ru='Использовано за счет отпусков будущего периода';uk='Використано за рахунок відпусток майбутнього періоду'"));
			ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
			
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Для Каждого ОстатокПоВидуОтпуска Из Результат.ОстатокНаДатуПоВидамЕжегодныхОтпусков Цикл
			ВидЕжегодногоОтпускаТекст	= ОстатокПоВидуОтпуска.ВидЕжегодногоОтпускаНаименование;
			
			Если ОстатокПоВидуОтпуска.КоличествоДней >= 0 Тогда
				КоличествоДнейТекст		= "" + ОстатокПоВидуОтпуска.КоличествоДней + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",ОстатокПоВидуОтпуска.КоличествоДней);
				
				ОбластьМакета = Макет.ПолучитьОбласть("Строка");
				ОбластьМакета.Параметры.Текст			= "     " + ВидЕжегодногоОтпускаТекст;
				ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
				
			Иначе
				КоличествоДнейТекст		= "" + (-ОстатокПоВидуОтпуска.КоличествоДней) + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",ОстатокПоВидуОтпуска.КоличествоДней);
				
				ОбластьМакета = Макет.ПолучитьОбласть("ВажнаяСтрока");
				ОбластьМакета.Параметры.Текст			= "     " + ВидЕжегодногоОтпускаТекст;
				ОбластьМакета.Параметры.КоличествоДней	= КоличествоДнейТекст;
				
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

// Заполнение ТЧ "Ежегодные отпуска" в документах.

// Процедура заполняет объект ежегодными отпусками, которые предоставляются всем сотрудникам.
//
// Параметры:
//	Объект	- ДокументОбъект, в котором есть ТЧ ЕжегодныеОтпуска.
//  ОчищатьПередЗаполнением - Булево
//
Процедура ЗаполнитьОбщимиЕжегоднымиОтпусками(Объект, ОчищатьПередЗаполнением = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВидыОтпусков.КоличествоДнейВГод
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	НЕ ВидыОтпусков.ПометкаУдаления
	|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
	|	И (НЕ ВидыОтпусков.КоличествоДнейВГод = 0
	|			ИЛИ НЕ ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит))
	|	И НЕ ВидыОтпусков.Недействителен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОтпусков.Предопределенный УБЫВ,
	|	ВидыОтпусков.Наименование";
	
	ТаблицаОтпусков = Запрос.Выполнить().Выгрузить();
	Если ОчищатьПередЗаполнением Тогда
		Объект.ЕжегодныеОтпуска.Загрузить(ТаблицаОтпусков);
	Иначе
		
		Для каждого СтрокаТаблицыОтпусков Из ТаблицаОтпусков Цикл
			ЗаполнитьЗначенияСвойств(Объект.ЕжегодныеОтпуска.Добавить(), СтрокаТаблицыОтпусков);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для ЗаполнитьЕжегоднымиОтпускамиСотрудника().
// 	Формируемые параметры:
//		- Регистратор - ДокументСсылка, регистратор, исключаемый из расчета.
//		- Сотрудник
//		- ДатаСобытия - дата среза
//
//		- РежимСравненияСПредыдущим - подразумевает:
//			* наличие в ТЧ объекта реквизита "Действие".
//			* наличие в форме полей "ДействующийОтпуск", "ТекущееКоличествоДнейВГод" и "Комментарий" (они будут заполнены).
//
//		- ТолькоДействующиеПрава - булево (имеет смысл только при РежимСравненияСПредыдущим = "истина").
//			* "истина" 	- ТЧ будет заполнена только теми правами, которые назначены сотруднику на дату среза.
//			* "ложь"	- ТЧ будет заполнена положеными сотруднику отпусками (общими, по позиции ШР и проч.)
//							а так же дополнена назначенными ему правами (если таковые имеются).
//
//		- ДолжностьПоШтатномуРасписанию - В том случае, если она заполнена, происходит заполнение отпусков так же и теми,
//											которые указаны в позиции ШР.
//
//		- ПредыдущаяДолжностьПоШтатномуРасписанию - имеет смысл только при заполненных параметрах "РежимСравненияСПредыдущим" и "ДолжностьПоШтатномуРасписанию".
//													Является базой для сравнения в режиме "РежимСравненияСПредыдущим".
//
//		- ПрименятьНастройкиСпецОтпусков - булево. В случае "истина" обязательны нижеследующие параметры:
//			- Организация
//			- Подразделение
//			- Территория
//			- Должность
//
Функция ОписаниеПараметровДляЗаполнитьЕжегоднымиОтпускамиСотрудника() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Регистратор");
	СтруктураПараметров.Вставить("Сотрудник");
	СтруктураПараметров.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	
	СтруктураПараметров.Вставить("РежимСравненияСПредыдущим", Ложь);
	СтруктураПараметров.Вставить("ТолькоДействующиеПрава", Ложь);
	
	СтруктураПараметров.Вставить("ДолжностьПоШтатномуРасписанию");
	СтруктураПараметров.Вставить("ПредыдущаяДолжностьПоШтатномуРасписанию");
	
	СтруктураПараметров.Вставить("ПрименятьНастройкиСпецОтпусков", Истина);
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Подразделение");
	СтруктураПараметров.Вставить("Территория");
	СтруктураПараметров.Вставить("Должность");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура заполняет объект ежегодными отпусками, которые предоставляются сотруднику.
//
// Параметры:
// 	ТабличнаяЧастьОбъекта - табличная часть для заполнения.
// 	СтруктураПараметров, тип Структура, см.ОписаниеПараметровДляЗаполнитьЕжегоднымиОтпускамиСотрудника().
//
Процедура ЗаполнитьЕжегоднымиОтпускамиСотрудника(ТабличнаяЧастьОбъекта, СтруктураПараметров) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров.ДатаСобытия) Тогда
		СтруктураПараметров.ДатаСобытия = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.РежимСравненияСПредыдущим Тогда
		СтруктураПараметров.ТолькоДействующиеПрава = Ложь;
	КонецЕсли;
	
	Если СтруктураПараметров.ТолькоДействующиеПрава Тогда
		ПрименятьНастройкиСпецОтпусков = Ложь;
		ЗаполнятьПоПозиции = Ложь;
	Иначе
		ЗаполнятьПоПозиции = ЗначениеЗаполнено(СтруктураПараметров.ДолжностьПоШтатномуРасписанию);
		ПрименятьНастройкиСпецОтпусков = СтруктураПараметров.ПрименятьНастройкиСпецОтпусков;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Сотрудник) Тогда
		ОбщиеЕжегодныеОтпуска = ОбщиеЕжегодныеОтпуска(СтруктураПараметров.Сотрудник);
		ЗаполнитьОтпускаПоСотруднику(ТабличнаяЧастьОбъекта, СтруктураПараметров, ОбщиеЕжегодныеОтпуска);
		Если ЗаполнятьПоПозиции Тогда
			ЗаполнитьОтпускаПоПозиции(ТабличнаяЧастьОбъекта, СтруктураПараметров, ОбщиеЕжегодныеОтпуска);
		КонецЕсли;
	КонецЕсли;
	
	Если ПрименятьНастройкиСпецОтпусков Тогда
	КонецЕсли;
	
КонецПроцедуры

Функция ОбщиеЕжегодныеОтпуска(Сотрудник)

	СпециальныеОтпуска = КадровыйУчетРасширенный.ПраваНаСпециальныеОтпускаСотрудника(Сотрудник);
	
	// Заполнение ежегодными отпусками, которые предоставляются всем сотрудникам.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СпециальныеОтпуска",	СпециальныеОтпуска);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СпециальныеОтпуска.ВидОтпуска КАК Справочник.ВидыОтпусков) КАК ВидЕжегодногоОтпуска,
	|	СпециальныеОтпуска.КоличествоДней КАК КоличествоДнейВГод
	|ПОМЕСТИТЬ ВТСпециальныеОтпуска
	|ИЗ
	|	&СпециальныеОтпуска КАК СпециальныеОтпуска
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВидыОтпусков.КоличествоДнейВГод,
	|	ВидыОтпусков.Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
	|	ВидыОтпусков.Наименование КАК ВидЕжегодногоОтпускаНаименование
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыОтпусков
	|ГДЕ
	|	НЕ ВидыОтпусков.ПометкаУдаления
	|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
	|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
	|	И (НЕ ВидыОтпусков.КоличествоДнейВГод = 0
	|			ИЛИ НЕ ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит))
	|	И НЕ ВидыОтпусков.Недействителен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпециальныеОтпуска.ВидЕжегодногоОтпуска,
	|	СпециальныеОтпуска.КоличествоДнейВГод,
	|	СпециальныеОтпуска.ВидЕжегодногоОтпуска.Предопределенный,
	|	СпециальныеОтпуска.ВидЕжегодногоОтпуска.Наименование
	|ИЗ
	|	ВТСпециальныеОтпуска КАК СпециальныеОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидЕжегодногоОтпускаПредопределенный УБЫВ,
	|	ВидЕжегодногоОтпускаНаименование";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ЗаполнитьОтпускаПоСотруднику(ТабличнаяЧастьОбъекта, СтруктураПараметров, ОбщиеЕжегодныеОтпуска)
	
	// ТЧ "Ежегодные отпуска" заполняются либо текущими правами сотрудника на отпуска, либо отпусками, которые по умолчанию
	// предоставляются всем сотрудникам.
	Если СтруктураПараметров.РежимСравненияСПредыдущим Тогда
		
		ТаблицаОтпусков = ЕжегодныеОтпускаСотрудника(
			СтруктураПараметров.Сотрудник, СтруктураПараметров.ДатаСобытия, СтруктураПараметров.Регистратор);
			
		Если НЕ СтруктураПараметров.ТолькоДействующиеПрава Тогда
			// Дополняем отпуска сотрудника общими отпусками.
			Для каждого ОбщийОтпуск Из ОбщиеЕжегодныеОтпуска Цикл
				Если ТаблицаОтпусков.Найти(ОбщийОтпуск.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска") = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаОтпусков.Добавить(), ОбщийОтпуск);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;	
		
		ТабличнаяЧастьОбъекта.Загрузить(ТаблицаОтпусков);
		
		// Установим вторичные элементы.
		Для Каждого СтрокаОтпуска Из ТабличнаяЧастьОбъекта Цикл
			СтрокаОтпуска.ДействующийОтпуск			= Истина;
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0,СтрокаОтпуска.КоличествоДнейВГод);
			ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
		КонецЦикла;
		
	Иначе
		ТабличнаяЧастьОбъекта.Загрузить(ОбщиеЕжегодныеОтпуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтпускаПоПозиции(ТабличнаяЧастьОбъекта, СтруктураПараметров, ОбщиеЕжегодныеОтпуска)

	ЕжегодныеОтпускаПозиции = ЕжегодныеОтпускаПозицииШтатногоРасписания(СтруктураПараметров.ДолжностьПоШтатномуРасписанию, СтруктураПараметров.ДатаСобытия);
	
	Если СтруктураПараметров.РежимСравненияСПредыдущим Тогда
		// Дополняем отпуска "от позиции" общими отпусками.
		Для каждого ОбщийОтпуск Из ОбщиеЕжегодныеОтпуска Цикл
			Если ЕжегодныеОтпускаПозиции.Найти(ОбщийОтпуск.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска") = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЕжегодныеОтпускаПозиции.Добавить(), ОбщийОтпуск);
			КонецЕсли;
		КонецЦикла; 
		// Получаем набор отпусков по предыдущей позиции.
		ЕжегодныеОтпускаПредыдущейПозиции = ЕжегодныеОтпускаПозицииШтатногоРасписания(СтруктураПараметров.ПредыдущаяДолжностьПоШтатномуРасписанию, СтруктураПараметров.ДатаСобытия);
		// Необходимо заполнить значения для текущих отпусков сотрудника.
		Для Каждого СтрокаОтпуска Из ТабличнаяЧастьОбъекта Цикл
			СтрокиПозиции = ЕжегодныеОтпускаПозиции.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаОтпуска.ВидЕжегодногоОтпуска));
			СтрокиПредыдущейПозиции = ЕжегодныеОтпускаПредыдущейПозиции.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаОтпуска.ВидЕжегодногоОтпуска));
			СтрокаОбщегоОтпуска = ОбщиеЕжегодныеОтпуска.Найти(СтрокаОтпуска.ВидЕжегодногоОтпуска, "ВидЕжегодногоОтпуска");
			
			ОтпускДляВсехСотрудников = (НЕ СтрокаОбщегоОтпуска = Неопределено);
			СодержитсяВНовойПозиции = (НЕ СтрокиПозиции.Количество() = 0);
			СодержитсяВПредыдущейПозиции = (НЕ СтрокиПредыдущейПозиции.Количество() = 0) ИЛИ ОтпускДляВсехСотрудников;
			
			Если СодержитсяВНовойПозиции Тогда
				СтрокаОтпуска.КоличествоДнейВГод = СтрокиПозиции[0].КоличествоДнейВГод;
			Иначе
				Если СодержитсяВПредыдущейПозиции Тогда // Если это не "персональный" отпуск - удаляем.
					СтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Отменить;
				КонецЕсли;
			КонецЕсли;
			
			ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
			
			// Удаляем обработанные строки новых отпусков.
			Для Каждого СтрокаПозиции Из СтрокиПозиции Цикл
				ЕжегодныеОтпускаПозиции.Удалить(СтрокаПозиции);
			КонецЦикла;
			
		КонецЦикла;
		
		// Для оставшихся строк отпусков "от позиции" добавим новые отпуска.
		Для Каждого СтрокаПозиции Из ЕжегодныеОтпускаПозиции Цикл
			СтрокаОтпуска = ТабличнаяЧастьОбъекта.Добавить();
			СтрокаОтпуска.ВидЕжегодногоОтпуска			= СтрокаПозиции.ВидЕжегодногоОтпуска;
			СтрокаОтпуска.КоличествоДнейВГод			= СтрокаПозиции.КоличествоДнейВГод;
			СтрокаОтпуска.Действие					= Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить;
			ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
		КонецЦикла;
		
	Иначе	
		// Дополняем общие отпуска отпусками от позиции штатного расписания.
		Для Каждого СтрокаПозиции Из ЕжегодныеОтпускаПозиции Цикл
			НайденныеСтроки = ТабличнаяЧастьОбъекта.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", СтрокаПозиции.ВидЕжегодногоОтпуска));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ТабличнаяЧастьОбъекта.Добавить(), СтрокаПозиции);
			Иначе
				НайденныеСтроки[0].КоличествоДнейВГод = СтрокаПозиции.КоличествоДнейВГод;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПрименитьНастройкиИспользованияСеверногоОтпуска(ЕжегодныеОтпуска, Организация, ДатаСобытия, Подразделение, Территория = Неопределено, ЕстьПолеДействие = Ложь) Экспорт
	
	ПрименятьСевернуюНадбавку = Ложь;
	КоличествоДополнительныхДней = 0;
		
КонецПроцедуры

Процедура ПрименитьНастройкиИспользованияОтпускаЗаВредность(ЕжегодныеОтпуска, Должность, ЕстьПолеДействие = Ложь) Экспорт
	
	ПрименятьНадбавкуЗаВредность = Ложь;
	КоличествоДополнительныхДней = 0;
	
	ОтпускЗаВредность = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ДополнительныйЕжегодныйОтпуск");
	Если ЗначениеЗаполнено(ОтпускЗаВредность) Тогда
		
		Если ЗначениеЗаполнено(Должность) Тогда
			
			Если ТипЗнч(Должность) = Тип("СправочникСсылка.Должности") Тогда
				ДолжностьСВредностью = Должность;
			Иначе
				ДолжностьСВредностью = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Должность, "Должность");
			КонецЕсли; 
			
			РеквизитыДолжности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДолжностьСВредностью, "ВыплачиваетсяНадбавкаЗаВредность,КоличествоДнейДополнительногоОтпускаВГод");
			Если РеквизитыДолжности.ВыплачиваетсяНадбавкаЗаВредность Тогда
				ПрименятьНадбавкуЗаВредность = Истина;
				КоличествоДополнительныхДней = РеквизитыДолжности.КоличествоДнейДополнительногоОтпускаВГод;
			КонецЕсли; 
			
		КонецЕсли;
		
		УчитыватьДействующийОтпуск = ТипЗнч(ЕжегодныеОтпуска) = Тип("ДанныеФормыКоллекция");
		
		СтрокиОтпуска = ЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", ОтпускЗаВредность));
		Если Не ПрименятьНадбавкуЗаВредность
			И СтрокиОтпуска.Количество() > 0 Тогда
			
			Для каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
				
				Если ЕстьПолеДействие И УчитыватьДействующийОтпуск И СтрокаОтпуска.ДействующийОтпуск Тогда
					СтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Отменить;
				Иначе
					ЕжегодныеОтпуска.Удалить(СтрокаОтпуска);
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ПрименятьНадбавкуЗаВредность И КоличествоДополнительныхДней > 0 Тогда
			
			Если СтрокиОтпуска.Количество() > 0 Тогда
				
				Для каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
					СтрокаОтпуска.КоличествоДнейВГод = КоличествоДополнительныхДней;
				КонецЦикла;
				
			Иначе
				
				СтрокаОтпуска = ЕжегодныеОтпуска.Добавить();
				СтрокаОтпуска.ВидЕжегодногоОтпуска = ОтпускЗаВредность;
				СтрокаОтпуска.КоличествоДнейВГод = КоличествоДополнительныхДней;
				
				Если ЕстьПолеДействие Тогда
					СтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить;
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура читает сведения о предоставляемых на дату события отпусках сотрудника и выводит в документе сведения
//  об отличиях введенных в документ данных по сравнению с прочитанными.
//
// Параметры:
//	Объект					- ДокументОбъект, в котором есть Сотрудник и ТЧ ЕжегодныеОтпуска.
//	ИмяРеквизитаДатаСобытия	- Имя реквизита из переменной Объект, по которому необходимо определять дату получения
//	                          данных.
//
Процедура ДополнитьСведениямиОПредыдущихЕжегодныхОтпускахСотрудника(Объект, ИмяРеквизитаДатаСобытия) Экспорт
	
	Если Объект.ЕжегодныеОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЧЕжегодныеОтпускаПредыдущие = ЕжегодныеОтпускаСотрудника(Объект.Сотрудник, Объект[ИмяРеквизитаДатаСобытия], Объект.Ссылка);
	
	Для Каждого СтрокаОтпуска Из Объект.ЕжегодныеОтпуска Цикл
		СтруктураПоиска = Новый Структура("ВидЕжегодногоОтпуска", СтрокаОтпуска.ВидЕжегодногоОтпуска);
		НайденныеСтроки = ТЧЕжегодныеОтпускаПредыдущие.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаОтпуска.ДействующийОтпуск			= Истина;
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, НайденныеСтроки[0].КоличествоДнейВГод);
		Иначе
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
		КонецЕсли;
		ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет объект ежегодными отпусками, которые указаны в штатном расписании.
//
// Параметры:
//	Объект									- ДокументОбъект, в котором есть ТЧ Позиции и ТЧ ЕжегодныеОтпуска.
//
Процедура ЗаполнитьЕжегоднымиОтпускамиШтатногоРасписания(Объект, ДатаВступленияВСилу) Экспорт
	
	Позиции = Объект.Позиции.ВыгрузитьКолонку("Позиция");
	ЕжегодныеОтпускаПозиций = ЕжегодныеОтпускаПозицииШтатногоРасписания(Позиции, ДатаВступленияВСилу, Объект.Ссылка);
	Если ЕжегодныеОтпускаПозиций.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Позиции", Позиции);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка КАК ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ИЗ
			|	Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ШтатноеРасписаниеЕжегодныеОтпуска
			|ГДЕ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка В(&Позиции)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ВидЕжегодногоОтпуска";
			
		ЕжегодныеОтпускаПозиций = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли; 
	
	Объект.ЕжегодныеОтпуска.Очистить();
	
	ДополнитьСведениями = ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура");
	
	Для Каждого СтрокаПозиции Из Объект.Позиции Цикл
		ОтпускаПозиции = ЕжегодныеОтпускаПозиций.НайтиСтроки(Новый Структура("ПозицияШтатногоРасписания", СтрокаПозиции.Позиция));
		
		Для Каждого СтрокаОтпускаПоПозиции Из ОтпускаПозиции Цикл
			СтрокаОтпуска = Объект.ЕжегодныеОтпуска.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтпуска, СтрокаОтпускаПоПозиции);
			СтрокаОтпуска.ИдентификаторСтрокиПозиции	= СтрокаПозиции.ИдентификаторСтрокиПозиции;
			
			Если ДополнитьСведениями Тогда
				СтрокаОтпуска.ДействующийОтпуск			= Истина;
				СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
				ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура читает сведения о предоставляемых на дату события отпусках штатного расписания и выводит в документе
// сведения об отличиях введенных в документ данных по сравнению с прочитанными.
//
// Параметры:
//	Объект					- ДокументОбъект, в котором есть ТЧ Позиции и ТЧ ЕжегодныеОтпуска.
//
Процедура ДополнитьСведениямиОПредыдущихЕжегодныхОтпускахШтатногоРасписания(Объект, ДатаВступленияВСилу) Экспорт
	
	Если Объект.ЕжегодныеОтпуска.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЧЕжегодныеОтпускаПредыдущие = ЕжегодныеОтпускаПозицииШтатногоРасписания(Объект.Позиции.Выгрузить(, "Позиция"), ДатаВступленияВСилу, Объект.Ссылка);
	
	Для Каждого СтрокаОтпуска Из Объект.ЕжегодныеОтпуска Цикл
		СтрокиПозиции = Объект.Позиции.НайтиСтроки(Новый Структура("ИдентификаторСтрокиПозиции", СтрокаОтпуска.ИдентификаторСтрокиПозиции));
		Если СтрокиПозиции.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ПозицияШтатногоРасписания, ВидЕжегодногоОтпуска", СтрокиПозиции[0].Позиция, СтрокаОтпуска.ВидЕжегодногоОтпуска);
		НайденныеСтроки = ТЧЕжегодныеОтпускаПредыдущие.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаОтпуска.ДействующийОтпуск			= Истина;
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, НайденныеСтроки[0].КоличествоДнейВГод);
		Иначе
			СтрокаОтпуска.ТекущееКоличествоДнейВГод	= ?(ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска), 0, СтрокаОтпуска.КоличествоДнейВГод);
		КонецЕсли;
		ОстаткиОтпусковКлиентСервер.УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаОтпуска);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает условное оформление в форме для ТЧ "Ежегодные отпуска".
//
// Параметры:
//	Форма	- Форма с ТЧ ЕжегодныеОтпуска.
//
Процедура УстановитьУсловноеОформлениеЕжегодныхОтпусков(Форма) Экспорт
	
	СтруктураОпределения = Новый Структура("Объект",Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураОпределения,Форма);
	Если СтруктураОпределения.Объект = Неопределено Тогда
		СтрокаОтпусков = "ЕжегодныеОтпуска";
	Иначе
		СтрокаОтпусков = "Объект.ЕжегодныеОтпуска";
	КонецЕсли;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".КоличествоДнейВГод");
	ЭлементОтбора.ПравоеЗначение	= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ТекущееКоличествоДнейВГод");
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ЕжегодныеОтпуска.Действие" );
		ЭлементОтбора.ПравоеЗначение	= Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".ДействующийОтпуск");
		ЭлементОтбора.ПравоеЗначение	= Ложь;
	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ЕжегодныеОтпуска");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(СтрокаОтпусков + ".Действие");
	ЭлементОтбора.ПравоеЗначение	= Перечисления.ДействияСЕжегоднымиОтпусками.Отменить;
	
КонецПроцедуры

// Функция возвращает количество дней отпуска в год по умолчанию.
//
// Параметры:
//	ВидЕжегодногоОтпуска - СправочникСсылка.ВидОтпуска - вид отпуска, для которого необходимо получить количество дней
//	                                                     по умолчанию.
//
Функция КоличествоДнейОтпускаВГодПоУмолчанию(ВидЕжегодногоОтпуска) Экспорт
	
	Если ВидЕжегодногоОтпуска = Неопределено Или ВидЕжегодногоОтпуска.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидЕжегодногоОтпуска, "ХарактерЗависимостиДнейОтпуска,КоличествоДнейВГод");
	Если РеквизитыОбъекта.ХарактерЗависимостиДнейОтпуска <> ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит") Тогда
		Возврат Неопределено;
	Иначе
		Возврат РеквизитыОбъекта.КоличествоДнейВГод;
	КонецЕсли;
	
КонецФункции

// Формирует форматированную строку с информацией о ежегодных отпусках сотрудника.
// Параметры
// 	ТаблицаОтпусков - таблица значений с правами на отпуск сотрудника
// 	ТолькоПросмотр - состояние открытия формы
// 	СформироватьРасширенноеПредставление - Сформировать расширенное представление с учетом изменений
Функция НадписьПраваНаОтпуск(ТаблицаОтпусков, ТолькоПросмотр, СформироватьРасширенноеПредставление = Ложь) Экспорт
	
	МассивФорматированнойСтроки = ПредставлениеПраваНаОтпускПоКоллекцииСтрок(ТаблицаОтпусков, ТолькоПросмотр, СформироватьРасширенноеПредставление);
	
	Возврат Новый ФорматированнаяСтрока(МассивФорматированнойСтроки);

КонецФункции

// Проведение по регистрам

// Заполняет движения видами ежегодных отпусков по штатному расписанию
//		ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		ДатаСобытия
//		ПозицияШтатногоРасписания
//		ВидЕжегодногоОтпуска
//		КоличествоДнейВГод
//
Процедура СформироватьДвиженияЕжегодныхОтпусковПоШтатномуРасписанию(Движения, ДатаСобытия, ЕжегодныеОтпуска) Экспорт
	
	Движения.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Записывать = Истина;
	Пока ЕжегодныеОтпуска.Следующий() Цикл
		НоваяСтрока = Движения.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Добавить();
		НоваяСтрока.Дата						= ДатаСобытия;
		НоваяСтрока.ПозицияШтатногоРасписания	= ЕжегодныеОтпуска.ПозицияШтатногоРасписания;
		НоваяСтрока.ВидЕжегодногоОтпуска		= ЕжегодныеОтпуска.ВидЕжегодногоОтпуска;
		НоваяСтрока.КоличествоДнейВГод			= ЕжегодныеОтпуска.КоличествоДнейВГод;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения положенными видами ежегодных отпусков
//		ПоложенныеВидыЕжегодныхОтпусков.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		ДатаСобытия
//		Сотрудник
//		ВидЕжегодногоОтпуска
//		КоличествоДнейВГод
//
Процедура СформироватьДвиженияПоложенныхЕжегодныхОтпусков(РегистраторСсылка, Движения, ЕжегодныеОтпуска) Экспорт
	
	ИспользуемВозвратныеСобытия = ЕжегодныеОтпуска.Колонки.Найти("ДействуетДо") <> Неопределено;
	ЕстьИспользуется = ЕжегодныеОтпуска.Колонки.Найти("Используется") <> Неопределено;
	
	Если НЕ ИспользуемВозвратныеСобытия Тогда
		// Просто записываем данные в регистр.
		Для Каждого Строка Из ЕжегодныеОтпуска Цикл 
			НоваяСтрока = Движения.ПоложенныеВидыЕжегодныхОтпусков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период = Строка.ДатаСобытия;
			Если ЕстьИспользуется Тогда
				НоваяСтрока.Используется = Строка.Используется;
			Иначе
				НоваяСтрока.Используется = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИспользованиеПоОкончанииОпределено = ЕжегодныеОтпуска.Колонки.Найти("ИспользуетсяПоОкончании") <> Неопределено;
		
		// Формируем движения с учетом текущего состояния регистра.
		// Формируем таблицу измерений.
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ИзмеренияДаты.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		
		Для Каждого СтрокаДвижений Из ЕжегодныеОтпуска Цикл 
			НоваяСтрока = ИзмеренияДаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижений);
			НоваяСтрока.Период = СтрокаДвижений.ДатаСобытия;
		КонецЦикла;
		
		// Смотрим картину на дату проведения.
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		СоздатьВТПоложенныеВидыЕжегодныхОтпусков(МенеджерВременныхТаблиц, ИзмеренияДаты, РегистраторСсылка, Ложь);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеОтпуска.ПериодЗаписи,
		|	ПоложенныеОтпуска.Сотрудник,
		|	ПоложенныеОтпуска.ВидЕжегодногоОтпуска,
		|	ПоложенныеОтпуска.КоличествоДнейВГод,
		|	ПоложенныеОтпуска.Используется,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЗависитОтСтажа
		|ИЗ
		|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ПоложенныеОтпуска.ВидЕжегодногоОтпуска = ВидыОтпусков.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеОтпуска.ПериодЗаписи,
		|	ПоложенныеОтпуска.Сотрудник,
		|	ПоложенныеОтпуска.ВидЕжегодногоОтпуска,
		|	ПоложенныеОтпуска.КоличествоДнейВГод,
		|	ПоложенныеОтпуска.Используется");	
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ДействующиеПрава = Запрос.Выполнить().Выгрузить();
		
		// необходимо обработать возвратные стажевые движения
		ТаблицаВозвратныхПравЗависящихОтСтажа = Новый ТаблицаЗначений;
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
		ТаблицаВозвратныхПравЗависящихОтСтажа.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
		
		СтрокиНабораВозвратныхПравЗависящихОтСтажа = Новый Массив;
		
		Для Каждого Строка Из ЕжегодныеОтпуска Цикл
			
			// Движения с возвратным значениями записываются всегда.
			// Движения не меняющие состав начислений записываются в случаях изменения состояния.
			Если НЕ ЗначениеЗаполнено(Строка.ДействуетДо) Тогда
				
				СтруктураОтбораСтрок = Новый Структура;
				СтруктураОтбораСтрок.Вставить("Сотрудник", Строка.Сотрудник);
				СтруктураОтбораСтрок.Вставить("ВидЕжегодногоОтпуска", Строка.ВидЕжегодногоОтпуска);
				
				СтрокиПредыдущихЗначений = ДействующиеПрава.НайтиСтроки(СтруктураОтбораСтрок);
				Если СтрокиПредыдущихЗначений.Количество() > 0 Тогда
					Если СтрокиПредыдущихЗначений[0].КоличествоДнейВГод = Строка.КоличествоДнейВГод
						И СтрокиПредыдущихЗначений[0].Используется = Строка.Используется Тогда
						Продолжить;
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли;
			
			НоваяСтрока = Движения.ПоложенныеВидыЕжегодныхОтпусков.Добавить();
			НоваяСтрока.Период = Строка.ДатаСобытия;
			НоваяСтрока.Сотрудник = Строка.Сотрудник;
			НоваяСтрока.ВидЕжегодногоОтпуска = Строка.ВидЕжегодногоОтпуска;
			НоваяСтрока.КоличествоДнейВГод = Строка.КоличествоДнейВГод;
			НоваяСтрока.Используется = Строка.Используется;
			
			// Записываем возвратную информацию.
			Если ЗначениеЗаполнено(Строка.ДействуетДо)
				И Строка.ДействуетДо > НоваяСтрока.Период Тогда
				
				НоваяСтрока.ДействуетДо = Строка.ДействуетДо;
				
				СтруктураОтбораСтрок = Новый Структура;
				СтруктураОтбораСтрок.Вставить("Сотрудник", НоваяСтрока.Сотрудник);
				СтруктураОтбораСтрок.Вставить("ВидЕжегодногоОтпуска", НоваяСтрока.ВидЕжегодногоОтпуска);
				СтруктураОтбораСтрок.Вставить("Используется", Истина);
				
				СтрокиДействующихНачислений = ДействующиеПрава.НайтиСтроки(СтруктураОтбораСтрок);
				Если СтрокиДействующихНачислений.Количество() > 0 Тогда
					
					НоваяСтрока.ИспользуетсяПоОкончании = Истина;
					НоваяСтрока.КоличествоДнейВГодПоОкончании = СтрокиДействующихНачислений[0].КоличествоДнейВГод;
					
					Если СтрокиДействующихНачислений[0].ЗависитОтСтажа Тогда
						
						СтрокаПрава = ТаблицаВозвратныхПравЗависящихОтСтажа.Добавить();
						СтрокаПрава.НачалоПериода = СтрокиДействующихНачислений[0].ПериодЗаписи;
						СтрокаПрава.ОкончаниеПериода = НоваяСтрока.ДействуетДо;
						СтрокаПрава.Сотрудник = НоваяСтрока.Сотрудник;
						СтрокаПрава.ВидЕжегодногоОтпуска = НоваяСтрока.ВидЕжегодногоОтпуска;
						
						СтрокиНабораВозвратныхПравЗависящихОтСтажа.Добавить(НоваяСтрока);
						
					КонецЕсли;
					
					Если ИспользованиеПоОкончанииОпределено Тогда
						НоваяСтрока.ИспользуетсяПоОкончании = Строка.ИспользуетсяПоОкончании;	
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;	
		
		// Если есть стажевые движения
		Если ТаблицаВозвратныхПравЗависящихОтСтажа.Количество() > 0 Тогда
			ОбновитьРазмерПоОкончанииДляЗависимыхОтСтажа(ТаблицаВозвратныхПравЗависящихОтСтажа, СтрокиНабораВозвратныхПравЗависящихОтСтажа);
		КонецЕсли; 
		
	КонецЕсли;
	
	Движения.ПоложенныеВидыЕжегодныхОтпусков.Записать();
	Движения.ПоложенныеВидыЕжегодныхОтпусков.Записывать = Ложь;
	
КонецПроцедуры

// Заполняет движения положенными видами ежегодных отпусков
//		НачальныеОстаткиОтпусков.
//
// Параметры:
//	Движения - коллекция движений, в которой необходимо заполнить движения.
//	ЕжегодныеОтпуска - таблица значений с полями:
//		Сотрудник
//		ВидЕжегодногоОтпуска
//		НачалоРабочегоГода
//		ДатаНачальныхОстатков
//		КоличествоДней
//
Процедура СформироватьДвиженияНачальныхОстатковОтпусков(Движения, ЕжегодныеОтпуска) Экспорт
	
	Для Каждого СтрокаДанных Из ЕжегодныеОтпуска Цикл
		
		Если СтрокаДанных.ДатаОстатка = Дата(1, 1, 1) Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Движения.НачальныеОстаткиОтпусков.Добавить(), СтрокаДанных);
		
	КонецЦикла;
	Движения.НачальныеОстаткиОтпусков.Записать();
	Движения.НачальныеОстаткиОтпусков.Записывать = Ложь;
	
КонецПроцедуры

// Формирует структуру параметров для СформироватьДвиженияФактическихОтпусков.
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	ДатаРегистрации
//	Начисления	- таблица начислений из данных для проведения.
//
Функция ПараметрыДляСформироватьДвиженияФактическихОтпусков() Экспорт

	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаРегистрации", '00010101');
	Параметры.Вставить("Начисления", Неопределено);
	Параметры.Вставить("РабочиеПериоды", Неопределено);
	Параметры.Вставить("Основания", Неопределено);
	Параметры.Вставить("ПериодНачисления", '00010101');
	Параметры.Вставить("ДатыНачалаКомпенсаций", Неопределено);

	Возврат Параметры;

КонецФункции

// Заполняет движения периодами фактических отпусков
//		ФактическиеОтпуска.
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	Параметры - структура, см. ПараметрыДляСформироватьДвиженияФактическихОтпусков()
//
Процедура СформироватьДвиженияФактическихОтпусков(Движения, Отказ, Параметры) Экспорт
	
	Начисления = Параметры.Начисления;
	
	Если Параметры.РабочиеПериоды = Неопределено Тогда
		РабочиеПериоды = Новый Соответствие;
	Иначе
		РабочиеПериоды = Параметры.РабочиеПериоды;
	КонецЕсли;
	
	Если Параметры.Основания = Неопределено Тогда
		Основания = Новый Соответствие;
	Иначе
		Основания = Параметры.Основания;
	КонецЕсли;
	
	Если Параметры.ДатыНачалаКомпенсаций = Неопределено Тогда
		
		Начисления.Сортировать("Сотрудник, ДатаОкончания УБЫВ");
		
		ДатыНачалаКомпенсаций = Новый Соответствие;
		Для Каждого СтрокаДанных Из Начисления Цикл
			Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ СтрокаДанных.ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать") Тогда
				Продолжить;
			КонецЕсли;
			Если ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДатыНачалаКомпенсаций.Вставить(СтрокаДанных.Сотрудник, СтрокаДанных.ДатаОкончания);
		КонецЦикла;
		
	Иначе
		ДатыНачалаКомпенсаций = Параметры.ДатыНачалаКомпенсаций;
	КонецЕсли;
	
	Начисления.Сортировать("Сотрудник, ДатаНачала");
	
	ДатыНачалаОтпусков = Новый Соответствие;
	Для Каждого СтрокаДанных Из Начисления Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Тогда
			Продолжить;
		КонецЕсли;
		Если ДатыНачалаОтпусков.Получить(СтрокаДанных.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДанных.ИспользованиеПериода = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать") Тогда
			Продолжить;
		КонецЕсли;
		ДатыНачалаОтпусков.Вставить(СтрокаДанных.Сотрудник, СтрокаДанных.ДатаНачала);
	КонецЦикла;
	
	// Заполняем движения.
	Движения.ФактическиеОтпуска.Записывать = Истина;
	
	// Сортируем таблицу начислений под используемый алгоритм, сторно-записи сортируем внутри сотрудников.
	Начисления.Сортировать("Сотрудник, ВидЕжегодногоОтпуска, Сторно, ДатаНачала");
	
	ПредыдущийСотрудник				= Неопределено;
	ПредыдущийВидЕжегодногоОтпуска	= Неопределено;
	ПредыдущаяДатаОкончания			= Неопределено;
	Для Каждого СтрокаДанных Из Начисления Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидЕжегодногоОтпуска) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийСотрудник <> СтрокаДанных.Сотрудник Или ПредыдущийВидЕжегодногоОтпуска <> СтрокаДанных.ВидЕжегодногоОтпуска Или КонецДня(ПредыдущаяДатаОкончания) + 1 <> НачалоДня(СтрокаДанных.ДатаНачала) Тогда
			НоваяСтрока = Движения.ФактическиеОтпуска.Добавить();
			// Измерения
			НоваяСтрока.Сотрудник				= СтрокаДанных.Сотрудник;
			НоваяСтрока.ВидЕжегодногоОтпуска	= СтрокаДанных.ВидЕжегодногоОтпуска;
			// Ресурсы
			НоваяСтрока.Количество				= 0;
			// Реквизиты
			НоваяСтрока.ДатаРегистрации			= Параметры.ДатаРегистрации;
			НоваяСтрока.Компенсация				= СтрокаДанных.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать;
			Если НоваяСтрока.Компенсация Тогда
				НоваяСтрока.ДатаНачала			= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
			Иначе
				НоваяСтрока.ДатаНачала			= СтрокаДанных.ДатаНачала;
			КонецЕсли;
			
			// Необязательные реквизиты
			РабочийПериодСотрудника = РабочиеПериоды.Получить(СтрокаДанных.Сотрудник);
			Если РабочийПериодСотрудника = Неопределено Тогда
				РабочийПериод = РабочиеПериоды.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			Иначе
				РабочийПериод = РабочийПериодСотрудника.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			КонецЕсли; 
			
			Если РабочийПериод <> Неопределено Тогда
				НоваяСтрока.РабочийПериодС		= РабочийПериод.РабочийПериодС;
				НоваяСтрока.РабочийПериодПо		= РабочийПериод.РабочийПериодПо;
			КонецЕсли;
			
			ОснованияСотрудников = Основания.Получить(СтрокаДанных.Сотрудник);
			Если ОснованияСотрудников = Неопределено Тогда
				Основание = Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			Иначе
				Основание = ОснованияСотрудников.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
			КонецЕсли;
			
			НоваяСтрока.Основание				= Основание;
			
		КонецЕсли;
		
		// Ресурсы
		НоваяСтрока.Количество					= НоваяСтрока.Количество + СтрокаДанных.ОплаченоДней;
		
		Если НоваяСтрока.Компенсация Тогда
			// Свойства
			НоваяСтрока.Период					= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
			// Реквизиты
			НоваяСтрока.ДатаОкончания			= ДатыНачалаКомпенсаций.Получить(СтрокаДанных.Сотрудник);
		Иначе
			// Свойства
			НоваяСтрока.Период					= ДатыНачалаОтпусков.Получить(СтрокаДанных.Сотрудник);
			// Реквизиты
			НоваяСтрока.ДатаОкончания			= СтрокаДанных.ДатаОкончания;
		КонецЕсли;
		
		НоваяСтрока.ПериодНачисления 		= ?(Параметры.ПериодНачисления = Неопределено, НоваяСтрока.Период, Параметры.ПериодНачисления);
		
		ПредыдущийСотрудник				= НоваяСтрока.Сотрудник;
		ПредыдущийВидЕжегодногоОтпуска	= НоваяСтрока.ВидЕжегодногоОтпуска;
		ПредыдущаяДатаОкончания			= НоваяСтрока.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет движения удержаниями за неотработанный отпуск
//		ФактическиеОтпуска.
//
// Параметры:
//	Движения	- коллекция движений, в которой необходимо заполнить движения.
//	Отказ
//	Параметры - структура, см. ПараметрыДляСформироватьДвиженияФактическихОтпусков()
//
Процедура СформироватьДвиженияФактическихОтпусковПоУдержаниям(Движения, Параметры) Экспорт
	
	Удержания = Параметры.Начисления;
	
	Движения.ФактическиеОтпуска.Записывать = Истина;
	
	Если Параметры.РабочиеПериоды = Неопределено Тогда
		РабочиеПериоды = Новый Соответствие;
	Иначе
		РабочиеПериоды = Параметры.РабочиеПериоды;
	КонецЕсли;
	
	Если Параметры.Основания = Неопределено Тогда
		Основания = Новый Соответствие;
	Иначе
		Основания = Параметры.Основания;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из Удержания Цикл
		
		НоваяСтрока = Движения.ФактическиеОтпуска.Добавить();
		
		// Свойства
		НоваяСтрока.Период					= СтрокаДанных.ДатаУвольнения;
		// Измерения
		НоваяСтрока.Сотрудник				= СтрокаДанных.Сотрудник;
		НоваяСтрока.ВидЕжегодногоОтпуска	= СтрокаДанных.ВидЕжегодногоОтпуска;
		// Ресурсы
		НоваяСтрока.Количество				= СтрокаДанных.КоличествоДнейКомпенсации * (-1);
		// Реквизиты
		НоваяСтрока.ДатаРегистрации			= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.ДатаНачала				= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.ДатаОкончания			= СтрокаДанных.ДатаУвольнения;
		НоваяСтрока.Компенсация				= Истина;
		НоваяСтрока.ПериодНачисления 		= ?(Параметры.ПериодНачисления = Неопределено, НоваяСтрока.Период, Параметры.ПериодНачисления);
		
		// Необязательные реквизиты
		РабочийПериодСотрудника = РабочиеПериоды.Получить(СтрокаДанных.Сотрудник);
		Если РабочийПериодСотрудника = Неопределено Тогда
			РабочийПериод = РабочиеПериоды.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		Иначе
			РабочийПериод = РабочийПериодСотрудника.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		КонецЕсли; 
		
		Если РабочийПериод <> Неопределено Тогда
			НоваяСтрока.РабочийПериодС		= РабочийПериод.РабочийПериодС;
			НоваяСтрока.РабочийПериодПо		= РабочийПериод.РабочийПериодПо;
		КонецЕсли;
		
		ОснованияСотрудников = Основания.Получить(СтрокаДанных.Сотрудник);
		Если ОснованияСотрудников = Неопределено Тогда
			Основание = Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		Иначе
			Основание = ОснованияСотрудников.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		КонецЕсли; 
		
		НоваяСтрока.Основание				= Основания.Получить(СтрокаДанных.ВидЕжегодногоОтпуска);
		
	КонецЦикла;
	
КонецПроцедуры

// Работа с регистром ЗаработанныеПраваНаОтпуска

// Обслуживает регламентное задание РасчетЗаработанныхОтпусков.
// Производит заполнение регистра "ЗаработанныеПраваНаОтпуска".
Процедура РасчетЗаработанныхОтпусков(МассивСотрудников = Неопределено, Знач ДатаРасчета = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДатаРасчета = Неопределено Тогда
		ДатаРасчета = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДатаРасчета = Макс(ТекущаяДатаСеанса(), ДатаРасчета);
	
	// Если массив сотрудников не задан - надо рассчитать всех сотрудников.
	Если МассивСотрудников = Неопределено Тогда
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолучения.НачалоПериода = ДатаРасчета;
		ПараметрыПолучения.ОкончаниеПериода = ДатаРасчета;
		ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолучения);
		МассивСотрудников = ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	СотрудникиКРасчету = СписокНеРассчитанныхСотрудников(МассивСотрудников, НачалоМесяца(ДатаРасчета));
	
	Если СотрудникиКРасчету.Количество() > 0 Тогда
		РассчитатьЗаработанныеОтпускаСпискуСотрудников(СотрудникиКРасчету, ДатаРасчета);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет записи регистра ЗаработанныеПраваНаОтпуска согласно переданной таблице значений.
// Колонки таблицы значений
//	Сотрудник
//	ВидЕжегодногоОтпуска
//	Период - начало периода, начиная с которого необходимо удалить записи
Процедура УдалитьЗаписиЗаработанныхОтпусков(ТаблицаУдаляемыхЗаписей) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	СбрасываемСотрудникаЦеликом =  ТаблицаУдаляемыхЗаписей.Колонки.Найти("ВидЕжегодногоОтпуска") = Неопределено;
	
	Для каждого СтрокаУдаляемыхЗаписей Из ТаблицаУдаляемыхЗаписей Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаработанныеПраваНаОтпуска.Период,
		|	ЗаработанныеПраваНаОтпуска.Сотрудник,
		|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДней,
		|	ЗаработанныеПраваНаОтпуска.ДатаНачала,
		|	ЗаработанныеПраваНаОтпуска.ДатаОкончания,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
		|ИЗ
		|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|ГДЕ
		|	ЗаработанныеПраваНаОтпуска.Сотрудник = &Сотрудник
		|	И ЗаработанныеПраваНаОтпуска.Период < &Период";
		
		Если НЕ СбрасываемСотрудникаЦеликом Тогда
		
			Запрос.Текст = Запрос.Текст + "	И ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска = &ВидЕжегодногоОтпуска";
			Запрос.УстановитьПараметр("ВидЕжегодногоОтпуска", СтрокаУдаляемыхЗаписей.ВидЕжегодногоОтпуска);
		    НаборЗаписей.Отбор.ВидЕжегодногоОтпуска.Установить(СтрокаУдаляемыхЗаписей.ВидЕжегодногоОтпуска);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Период", СтрокаУдаляемыхЗаписей.Период);
		Запрос.УстановитьПараметр("Сотрудник", СтрокаУдаляемыхЗаписей.Сотрудник);
		
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		НаборЗаписей.Отбор.Сотрудник.Установить(СтрокаУдаляемыхЗаписей.Сотрудник);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла; 	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Корректирует расчет вида отпуска ОтпускПострадавшимВАварииЧАЭС, проставляя ему "ОплаченоДней".
//
Процедура ПеренестиРезультатыРасчетаОтпускаЧАЭС(СтрокаДанных, ИсходныеДанные) Экспорт

	Если НЕ ТипЗнч(СтрокаДанных) = Тип("ДанныеФормыЭлементКоллекции")
		ИЛИ НЕ СтрокаДанных.Свойство("Начисление") Тогда
		Возврат;
	КонецЕсли;
	
	ВидОтпуска = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаДанных.Начисление).ВидОтпуска;
	Если НЕ ВидОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.ОплаченоДней = УчетРабочегоВремени.ДлительностьИнтервала(СтрокаДанных.Сотрудник, СтрокаДанных.ДатаНачала, СтрокаДанных.ДатаОкончания, Истина, Истина);

КонецПроцедуры

// Возвращает массив видов отпусков не подлежащих компенсации при увольнении
// 
// Возвращаемое значение:
//  ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении - Массив
//
Функция ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении() Экспорт
	ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении = Новый Массив;
	ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС"));
	Возврат ВидыОтпусковНеПодлежащихКомпенсацииПриУвольнении;
КонецФункции

#Область ОбработчикиОбновления
	
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт

	
КонецПроцедуры

Процедура ЗаполнитьДатуНачалаКомпенсацииОтпуска() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Период,
		|	ФактическиеОтпуска.Регистратор КАК ДокументОснование,
		|	ФактическиеОтпуска.НомерСтроки,
		|	ФактическиеОтпуска.Активность,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Количество,
		|	ФактическиеОтпуска.ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодС,
		|	ФактическиеОтпуска.РабочийПериодПо,
		|	ФактическиеОтпуска.Основание,
		|	ФактическиеОтпуска.МоментВремени
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
		|		ПО ФактическиеОтпуска.Регистратор = ВТРегистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Если Выборка.Компенсация Тогда
				СтрокаНабора.ДатаНачала = СтрокаНабора.ДатаОкончания;
			КонецЕсли;
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОстаткиОтпусковПоРабочимГодам() Экспорт

	ЗаполнитьОстаткиОтпусковПоРабочимГодамУВводНачальныхОстатковОтпусков();
	ЗаполнитьОстаткиОтпусковПоРабочимГодамУНачальнаяШтатнаяРасстановка();
	ОбработатьЗаписиРегистраНачальныеОстаткиОтпусков();

КонецПроцедуры

Процедура ЗаполнитьПериодКомпенсацииОтпуска() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Период,
		|	ФактическиеОтпуска.Регистратор КАК ДокументОснование,
		|	ФактическиеОтпуска.НомерСтроки,
		|	ФактическиеОтпуска.Активность,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Количество,
		|	ФактическиеОтпуска.ДатаНачала,
		|	ФактическиеОтпуска.ДатаОкончания,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодС,
		|	ФактическиеОтпуска.РабочийПериодПо,
		|	ФактическиеОтпуска.Основание,
		|	ФактическиеОтпуска.МоментВремени
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
		|		ПО ФактическиеОтпуска.Регистратор = ВТРегистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Если Выборка.Компенсация И Выборка.ДатаОкончания <> Дата(1,1,1) Тогда
				СтрокаНабора.Период = СтрокаНабора.ДатаОкончания;
			КонецЕсли;
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьХарактерЗависимостиДнейОтпуска() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтпусков.Ссылка
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОтпускОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОтпускОбъект.ХарактерЗависимостиДнейОтпуска = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит");
		ОтпускОбъект.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ОбработатьВозвратныеРеквизитыПрав() Экспорт

	ЗаполнитьИспользуетсяДляПоложенныеВидыЕжегодныхОтпусков();
	ЗаполнитьВозвратныеРеквизитыПравИзВозвратныхДокументов();
	ЗаполнитьКоличествоДнейВГодПоОкончанииДляВторичныхЗаписей();

КонецПроцедуры

Процедура УстановитьСдвигСекундДляВводаНачальныхОстатковОтпусков() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период = НАЧАЛОПЕРИОДА(ПоложенныеВидыЕжегодныхОтпусков.Период, ДЕНЬ)
		|	И ПоложенныеВидыЕжегодныхОтпусков.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковОтпусков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ПО ВТРегистраторы.Регистратор = ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		ЗарплатаКадрыРасширенныйСобытия.УстановитьСдвигПериодаРегистраСПериодичностьюСекунда(НаборЗаписей, Ложь, Истина);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьОтрицательноеКоличествоДнейЗаПериод() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
		|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ЗаработанныеПраваНаОтпуска.Период КАК Период
		|ПОМЕСТИТЬ ВТОтрицательныеПрава
		|ИЗ
		|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|ГДЕ
		|	ЗаработанныеПраваНаОтпуска.КоличествоДней < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОтрицательныеПрава.Сотрудник КАК Сотрудник,
		|	ВТОтрицательныеПрава.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ВТОтрицательныеПрава.Период КАК Период,
		|	МАКСИМУМ(ЕСТЬNULL(ЗаработанныеПраваНаОтпускаПредыдущие.Период, ВТОтрицательныеПрава.Период)) КАК ПериодПредыдущий
		|ПОМЕСТИТЬ ВТПраваСПредыдущими
		|ИЗ
		|	ВТОтрицательныеПрава КАК ВТОтрицательныеПрава
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпускаПредыдущие
		|		ПО ВТОтрицательныеПрава.Сотрудник = ЗаработанныеПраваНаОтпускаПредыдущие.Сотрудник
		|			И ВТОтрицательныеПрава.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпускаПредыдущие.ВидЕжегодногоОтпуска
		|			И ВТОтрицательныеПрава.Период > ЗаработанныеПраваНаОтпускаПредыдущие.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОтрицательныеПрава.Сотрудник,
		|	ВТОтрицательныеПрава.ВидЕжегодногоОтпуска,
		|	ВТОтрицательныеПрава.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПраваСПредыдущими.Сотрудник КАК Сотрудник,
		|	ВТПраваСПредыдущими.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ВТПраваСПредыдущими.Период КАК Период,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДней КАК КоличествоДней,
		|	ЗаработанныеПраваНаОтпускаПредыдущие.КоличествоДней КАК КоличествоДнейПредыдущее,
		|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод КАК КоличествоДнейЗаПериод,
		|	ВЫБОР
		|		КОГДА ВТПраваСПредыдущими.Период = ВТПраваСПредыдущими.ПериодПредыдущий
		|			ТОГДА ЗаработанныеПраваНаОтпуска.КоличествоДней - ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
		|		ИНАЧЕ ЗаработанныеПраваНаОтпуска.КоличествоДней - ЗаработанныеПраваНаОтпускаПредыдущие.КоличествоДней - ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
		|	КОНЕЦ КАК Разница
		|ПОМЕСТИТЬ ВТЗаписиРегистра
		|ИЗ
		|	ВТПраваСПредыдущими КАК ВТПраваСПредыдущими
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ПО ВТПраваСПредыдущими.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
		|			И ВТПраваСПредыдущими.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
		|			И ВТПраваСПредыдущими.Период = ЗаработанныеПраваНаОтпуска.Период
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпускаПредыдущие
		|		ПО ВТПраваСПредыдущими.Сотрудник = ЗаработанныеПраваНаОтпускаПредыдущие.Сотрудник
		|			И ВТПраваСПредыдущими.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпускаПредыдущие.ВидЕжегодногоОтпуска
		|			И ВТПраваСПредыдущими.ПериодПредыдущий = ЗаработанныеПраваНаОтпускаПредыдущие.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗаписиРегистра.Период КАК Период,
		|	ВТЗаписиРегистра.Сотрудник КАК Сотрудник,
		|	ВТЗаписиРегистра.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ВТЗаписиРегистра.Разница
		|ИЗ
		|	ВТЗаписиРегистра КАК ВТЗаписиРегистра
		|ГДЕ
		|	(ВТЗаписиРегистра.Разница > 0.01
		|			ИЛИ ВТЗаписиРегистра.Разница < -0.01)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = Выборка.Период;
		МенеджерЗаписи.Сотрудник = Выборка.Сотрудник;
		МенеджерЗаписи.ВидЕжегодногоОтпуска = Выборка.ВидЕжегодногоОтпуска;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.КоличествоДнейЗаПериод = Выборка.Разница;
		МенеджерЗаписи.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьНулевойПериодВПоложенныеВидыЕжегодныхОтпусков() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТНулевыеЗаписи
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПоложенныеВидыЕжегодныхОтпусков.Период, ДЕНЬ) = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНулевыеЗаписи.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	ВТНулевыеЗаписи КАК ВТНулевыеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВводНачальныхОстатковОтпусков.Ссылка КАК Регистратор,
		|	ВводНачальныхОстатковОтпусков.ДатаОстатков КАК ДатаДвижения
		|ПОМЕСТИТЬ ВТДатыДокументов
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОтпусков КАК ВводНачальныхОстатковОтпусков
		|		ПО ВТРегистраторы.Регистратор = ВводНачальныхОстатковОтпусков.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
		|		ПО ВТРегистраторы.Регистратор = КадровыйПеревод.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыйПереводСписком.Ссылка,
		|	КадровыйПереводСписком.ДатаСобытия
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком КАК КадровыйПереводСписком
		|		ПО ВТРегистраторы.Регистратор = КадровыйПереводСписком.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальнаяШтатнаяРасстановка.Ссылка,
		|	НачальнаяШтатнаяРасстановка.Месяц
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка КАК НачальнаяШтатнаяРасстановка
		|		ПО ВТРегистраторы.Регистратор = НачальнаяШтатнаяРасстановка.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПереносДанных.Ссылка,
		|	ПереносДанных.ПериодРегистрации
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПереносДанных КАК ПереносДанных
		|		ПО ВТРегистраторы.Регистратор = ПереносДанных.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.ДатаПриема
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|		ПО ВТРегистраторы.Регистратор = ПриемНаРаботу.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриемНаРаботуСписком.Ссылка,
		|	ПриемНаРаботуСписком.ДатаСобытия
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуСписком КАК ПриемНаРаботуСписком
		|		ПО ВТРегистраторы.Регистратор = ПриемНаРаботуСписком.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРегистраторы.Регистратор КАК Регистратор,
		|	ВТДатыДокументов.ДатаДвижения КАК Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыДокументов КАК ВТДатыДокументов
		|		ПО ВТРегистраторы.Регистратор = ВТДатыДокументов.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ПО ВТРегистраторы.Регистратор = ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНулевыеЗаписи.Сотрудник,
		|	ВТНулевыеЗаписи.ВидЕжегодногоОтпуска
		|ИЗ
		|	ВТНулевыеЗаписи КАК ВТНулевыеЗаписи";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	// Удаляем записи вторичного регистра.
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.Отбор.ВидЕжегодногоОтпуска.Установить(Выборка.ВидЕжегодногоОтпуска);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьЗаработанныеОтпускаДекретниц()Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеСостоянийСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ДанныеСостоянийСотрудников КАК ДанныеСостоянийСотрудников
		|ГДЕ
		|	ДанныеСостоянийСотрудников.Состояние = &ВОтпускеПоУходу";
	
	Запрос.УстановитьПараметр("ВОтпускеПоУходу", ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком"));
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивСотрудников = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	ОстаткиОтпусков.РассчитатьЗаработанныеОтпускаСпискуСотрудников(МассивСотрудников, ТекущаяДатаСеанса());

КонецПроцедуры

Процедура УстановитьКорректныеПараметрыСпецОтпусков() Экспорт 
	УстановитьХарактерЗависимостиИСпособРасчета(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Северный"));
	УстановитьХарактерЗависимостиИСпособРасчета(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускЗаВредность"));
КонецПроцедуры

Процедура УстановитьКорректныйПериодДляОтпусковСКомпенсациями() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор
		|ПОМЕСТИТЬ ВТОтпускаСКомпенсацией
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|	И ФактическиеОтпуска.Регистратор ССЫЛКА Документ.Отпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отпуск.Ссылка,
		|	КОНЕЦПЕРИОДА(Отпуск.ПериодРегистрации, МЕСЯЦ) КАК ДатаКомпенсации,
		|	Отпуск.ДатаНачалаСобытия КАК ДатаОтпуска
		|ПОМЕСТИТЬ ВТДокументыПериодРегистрации
		|ИЗ
		|	ВТОтпускаСКомпенсацией КАК ВТОтпускаСКомпенсацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Отпуск КАК Отпуск
		|		ПО ВТОтпускаСКомпенсацией.Регистратор = Отпуск.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор,
		|	ДокументыПериодРегистрации.ДатаКомпенсации,
		|	ДокументыПериодРегистрации.ДатаОтпуска
		|ПОМЕСТИТЬ ВТНекорректныеРегистраторы
		|ИЗ
		|	ВТДокументыПериодРегистрации КАК ДокументыПериодРегистрации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО (ДокументыПериодРегистрации.Ссылка = (ВЫРАЗИТЬ(ФактическиеОтпуска.Регистратор КАК Документ.Отпуск)))
		|			И (ФактическиеОтпуска.Компенсация)
		|ГДЕ
		|	КОНЕЦПЕРИОДА(ДокументыПериодРегистрации.ДатаКомпенсации, ДЕНЬ) <> КОНЕЦПЕРИОДА(ФактическиеОтпуска.Период, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ФактическиеОтпуска.Регистратор,
		|	ДокументыПериодРегистрации.ДатаКомпенсации,
		|	ДокументыПериодРегистрации.ДатаОтпуска
		|ИЗ
		|	ВТДокументыПериодРегистрации КАК ДокументыПериодРегистрации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО (ДокументыПериодРегистрации.Ссылка = (ВЫРАЗИТЬ(ФактическиеОтпуска.Регистратор КАК Документ.Отпуск)))
		|			И (НЕ ФактическиеОтпуска.Компенсация)
		|ГДЕ
		|	КОНЕЦПЕРИОДА(ДокументыПериодРегистрации.ДатаОтпуска, ДЕНЬ) <> КОНЕЦПЕРИОДА(ФактическиеОтпуска.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ФактическиеОтпуска.Компенсация
		|			ТОГДА НАЧАЛОПЕРИОДА(ВТНекорректныеРегистраторы.ДатаКомпенсации, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВТНекорректныеРегистраторы.ДатаОтпуска, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	ФактическиеОтпуска.Регистратор КАК Регистратор,
		|	ФактическиеОтпуска.НомерСтроки,
		|	ФактическиеОтпуска.Активность,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Количество,
		|	ВЫБОР
		|		КОГДА ФактическиеОтпуска.Компенсация
		|			ТОГДА НАЧАЛОПЕРИОДА(ВТНекорректныеРегистраторы.ДатаКомпенсации, ДЕНЬ)
		|		ИНАЧЕ ФактическиеОтпуска.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ФактическиеОтпуска.Компенсация
		|			ТОГДА НАЧАЛОПЕРИОДА(ВТНекорректныеРегистраторы.ДатаКомпенсации, ДЕНЬ)
		|		ИНАЧЕ ФактическиеОтпуска.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодС,
		|	ФактическиеОтпуска.РабочийПериодПо,
		|	ФактическиеОтпуска.Основание
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНекорректныеРегистраторы КАК ВТНекорректныеРегистраторы
		|		ПО ((ВЫРАЗИТЬ(ФактическиеОтпуска.Регистратор КАК Документ.Отпуск)) = ВТНекорректныеРегистраторы.Регистратор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьЗаработанныеПраваУСотрудниковСВводомОстатков() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстаткиОтпусков.Сотрудник КАК Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.РабочийГодНачало КАК РабочийГодНачало,
		|	НачальныеОстаткиОтпусков.РабочийГодОкончание КАК РабочийГодОкончание,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НачальныеОстаткиОтпусков.РабочийГодНачало, ГОД, 1), ДЕНЬ, -1) КАК РабочийГодОкончаниеПредполагаемый
		|ПОМЕСТИТЬ ВТНеправильныеПериоды
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НачальныеОстаткиОтпусков.РабочийГодНачало, ГОД, 1), ДЕНЬ, -1), ДЕНЬ) <> НАЧАЛОПЕРИОДА(НачальныеОстаткиОтпусков.РабочийГодОкончание, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНеправильныеПериоды.Сотрудник
		|ИЗ
		|	ВТНеправильныеПериоды КАК ВТНеправильныеПериоды";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьОстаткиОтпусковПоРабочимГодамСНесуществующимиСотрудниками() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Ссылка,
		|	НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Сотрудник
		|ПОМЕСТИТЬ ВТПустыеСтроки
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка.ОстаткиОтпусковПоРабочимГодам КАК НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.Сотрудники КАК НачальнаяШтатнаяРасстановкаСотрудники
		|		ПО НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Ссылка = НачальнаяШтатнаяРасстановкаСотрудники.Ссылка
		|			И НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Сотрудник = НачальнаяШтатнаяРасстановкаСотрудники.Сотрудник
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаСотрудники.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТПустыеСтроки.Ссылка
		|ПОМЕСТИТЬ ВТОбрабатываемыеРегистраторы
		|ИЗ
		|	ВТПустыеСтроки КАК ВТПустыеСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Регистратор,
		|	НачальныеОстаткиОтпусков.НомерСтроки,
		|	НачальныеОстаткиОтпусков.Активность,
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.ДатаОстатка,
		|	НачальныеОстаткиОтпусков.РабочийГодНачало,
		|	НачальныеОстаткиОтпусков.УдалитьРабочийГодНачало,
		|	НачальныеОстаткиОтпусков.РабочийГодОкончание,
		|	НачальныеОстаткиОтпусков.КоличествоДней
		|ПОМЕСТИТЬ ВТДвиженияРегистраторов
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбрабатываемыеРегистраторы КАК ВТОбрабатываемыеРегистраторы
		|		ПО НачальныеОстаткиОтпусков.Регистратор = ВТОбрабатываемыеРегистраторы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДвиженияРегистраторов.Регистратор КАК Регистратор,
		|	ВТДвиженияРегистраторов.НомерСтроки,
		|	ВТДвиженияРегистраторов.Активность,
		|	ВТДвиженияРегистраторов.Сотрудник,
		|	ВТДвиженияРегистраторов.ВидЕжегодногоОтпуска,
		|	ВТДвиженияРегистраторов.ДатаОстатка,
		|	ВТДвиженияРегистраторов.РабочийГодНачало,
		|	ВТДвиженияРегистраторов.УдалитьРабочийГодНачало,
		|	ВТДвиженияРегистраторов.РабочийГодОкончание,
		|	ВТДвиженияРегистраторов.КоличествоДней,
		|	ВЫБОР
		|		КОГДА ВТПустыеСтроки.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеПереносить
		|ИЗ
		|	ВТДвиженияРегистраторов КАК ВТДвиженияРегистраторов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПустыеСтроки КАК ВТПустыеСтроки
		|		ПО ВТДвиженияРегистраторов.Регистратор = ВТПустыеСтроки.Ссылка
		|			И ВТДвиженияРегистраторов.Сотрудник = ВТПустыеСтроки.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПустыеСтроки.Ссылка КАК Регистратор,
		|	ВТПустыеСтроки.Сотрудник
		|ИЗ
		|	ВТПустыеСтроки КАК ВТПустыеСтроки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Обрабатываем документы.
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1];
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			СтрокиОстаткиОтпусковПоРабочимГодам = ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			Для каждого СтрокаОстаткиОтпусковПоРабочимГодам Из СтрокиОстаткиОтпусковПоРабочимГодам Цикл
				ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.Удалить(СтрокаОстаткиОтпусковПоРабочимГодам);
			КонецЦикла;
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	// Обрабатываем движения по остаткам отпусков
	РезультатЗапроса = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2];
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыСведений.НачальныеОстаткиОтпусков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			Если Выборка.НеПереносить Тогда
				Продолжить;
			КонецЕсли;
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьХарактерЗависимостиИСпособРасчета(ВидОтпуска)
	
	ЗависитОтРабочегоМеста = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтРабочегоМеста");
	ВКалендарныхДнях = ПредопределенноеЗначение("Перечисление.СпособыРасчетаОтпуска.ВКалендарныхДнях");
	Если ВидОтпуска <> Неопределено Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ХарактерЗависимостиДнейОтпуска") <> ЗависитОтРабочегоМеста
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "СпособРасчетаОтпуска") <> ВКалендарныхДнях Тогда
			ВидОтпускаОбъект = ВидОтпуска.ПолучитьОбъект();
			ВидОтпускаОбъект.ХарактерЗависимостиДнейОтпуска = ЗависитОтРабочегоМеста;
			ВидОтпускаОбъект.СпособРасчетаОтпуска = ВКалендарныхДнях;
			ВидОтпускаОбъект.ОбменДанными.Загрузка = Истина;
			ВидОтпускаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОстаткиОтпусковПоРабочимГодамУВводНачальныхОстатковОтпусков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВводНачальныхОстатковОтпусков.Ссылка
		|ПОМЕСТИТЬ ВТНеобработанныеДокументы
		|ИЗ
		|	Документ.ВводНачальныхОстатковОтпусков КАК ВводНачальныхОстатковОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОтпусков.ОстаткиОтпусковПоРабочимГодам КАК ВводНачальныхОстатковОтпусковОстаткиОтпусковПоРабочимГодам
		|		ПО ВводНачальныхОстатковОтпусков.Ссылка = ВводНачальныхОстатковОтпусковОстаткиОтпусковПоРабочимГодам.Ссылка
		|ГДЕ
		|	ВводНачальныхОстатковОтпусковОстаткиОтпусковПоРабочимГодам.Ссылка ЕСТЬ NULL 
		|	И ВводНачальныхОстатковОтпусков.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВводНачальныхОстатковОтпусков.Сотрудник,
		|	ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.ОстатокНаДатуОстатков,
		|	ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.УдалитьРабочийГодНачало,
		|	ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.УдалитьРабочийГодОкончание,
		|	ВводНачальныхОстатковОтпусков.Ссылка,
		|	ВводНачальныхОстатковОтпусков.ДатаОстатков
		|ПОМЕСТИТЬ ВТДокументыОстатков
		|ИЗ
		|	ВТНеобработанныеДокументы КАК ВТНеобработанныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОтпусков КАК ВводНачальныхОстатковОтпусков
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковОтпусков.ЕжегодныеОтпуска КАК ВводНачальныхОстатковОтпусковЕжегодныеОтпуска
		|			ПО ВводНачальныхОстатковОтпусков.Ссылка = ВводНачальныхОстатковОтпусковЕжегодныеОтпуска.Ссылка
		|		ПО ВТНеобработанныеДокументы.Ссылка = ВводНачальныхОстатковОтпусков.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусков.Период) КАК Период
		|ПОМЕСТИТЬ ВТУказателиПоследнихПрав
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыОстатков КАК ВТДокументыОстатков
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТДокументыОстатков.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТДокументыОстатков.ВидЕжегодногоОтпуска
		|			И ПоложенныеВидыЕжегодныхОтпусков.Период <= ВТДокументыОстатков.ДатаОстатков
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДокументыОстатков.Ссылка КАК Ссылка,
		|	ВТДокументыОстатков.ВидЕжегодногоОтпуска,
		|	ЕСТЬNULL(ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод, 0) КАК КоличествоДнейВГод,
		|	ВТДокументыОстатков.ОстатокНаДатуОстатков
		|ИЗ
		|	ВТДокументыОстатков КАК ВТДокументыОстатков
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУказателиПоследнихПрав КАК ВТУказателиПоследнихПрав
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|			ПО ВТУказателиПоследнихПрав.Сотрудник = ПоложенныеВидыЕжегодныхОтпусков.Сотрудник
		|				И ВТУказателиПоследнихПрав.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|				И ВТУказателиПоследнихПрав.Период = ПоложенныеВидыЕжегодныхОтпусков.Период
		|		ПО ВТДокументыОстатков.Сотрудник = ВТУказателиПоследнихПрав.Сотрудник
		|			И ВТДокументыОстатков.ВидЕжегодногоОтпуска = ВТУказателиПоследнихПрав.ВидЕжегодногоОтпуска
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДокументыОстатков.Ссылка КАК Ссылка,
		|	ВТДокументыОстатков.ВидЕжегодногоОтпуска,
		|	ВТДокументыОстатков.УдалитьРабочийГодНачало КАК РабочийГодНачало,
		|	ВТДокументыОстатков.УдалитьРабочийГодОкончание КАК РабочийГодОкончание,
		|	ВТДокументыОстатков.ОстатокНаДатуОстатков КАК Остаток
		|ИЗ
		|	ВТДокументыОстатков КАК ВТДокументыОстатков
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДокументов = РезультатЗапроса[РезультатЗапроса.Количество()-2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОстаткиОтпусковПоРабочимГодам = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		// Обрабатываем ТЧ ЕжегодныеОтпуска
		ВыборкаЕжегодныеОтпуска = ВыборкаДокументов.Выбрать();
		Пока ВыборкаЕжегодныеОтпуска.Следующий() Цикл
			СтрокиОтпуска = ДокументОбъект.ЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", ВыборкаЕжегодныеОтпуска.ВидЕжегодногоОтпуска));
			Для каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
				СтрокаОтпуска.КоличествоДнейВГод = ВыборкаЕжегодныеОтпуска.КоличествоДнейВГод;
			КонецЦикла; 
		КонецЦикла;
		// Обрабатываем ТЧ ОстаткиОтпусковПоРабочимГодам
		Пока ВыборкаОстаткиОтпусковПоРабочимГодам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаДокументов.Ссылка)) Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.Добавить(), ВыборкаОстаткиОтпусковПоРабочимГодам);
		КонецЦикла; 
		
		// Делаем новые для него движения
		ОстаткиОтпусков.СформироватьДвиженияПоложенныхЕжегодныхОтпусков(ДокументОбъект.Ссылка, ДокументОбъект.Движения, ДанныеДляПроведенияЕжегодныеОтпуска(ДокументОбъект));
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;

КонецПроцедуры

Функция ДанныеДляПроведенияЕжегодныеОтпуска(ДокументОбъект)

	ТаблицаДвиженийПрав = Новый ТаблицаЗначений;
	ТаблицаДвиженийПрав.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДвиженийПрав.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ТаблицаДвиженийПрав.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаДвиженийПрав.Колонки.Добавить("КоличествоДнейВГод", Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаПрава Из ДокументОбъект.ЕжегодныеОтпуска Цикл
		Если СтрокаПрава.КоличествоДнейВГод > 0 Тогда
			НовоеДвижение = ТаблицаДвиженийПрав.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаПрава);
			НовоеДвижение.Сотрудник = ДокументОбъект.Сотрудник;
			НовоеДвижение.ДатаСобытия = ДокументОбъект.ДатаОстатков;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаДвиженийПрав;

КонецФункции

Процедура ЗаполнитьОстаткиОтпусковПоРабочимГодамУНачальнаяШтатнаяРасстановка()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальнаяШтатнаяРасстановка.Ссылка
		|ПОМЕСТИТЬ ВТНеобработанныеДокументы
		|ИЗ
		|	Документ.НачальнаяШтатнаяРасстановка КАК НачальнаяШтатнаяРасстановка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.ОстаткиОтпусковПоРабочимГодам КАК НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам
		|		ПО НачальнаяШтатнаяРасстановка.Ссылка = НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Ссылка
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаОстаткиОтпусковПоРабочимГодам.Ссылка ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.Ссылка КАК Ссылка,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.Сотрудник,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.ДатаОстатка,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.УдалитьРабочийГодНачало КАК РабочийГодНачало,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.УдалитьРабочийГодОкончание КАК РабочийГодОкончание,
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.КоличествоДней КАК Остаток
		|ИЗ
		|	ВТНеобработанныеДокументы КАК ВТНеобработанныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачальнаяШтатнаяРасстановка.ЕжегодныеОтпуска КАК НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска
		|		ПО ВТНеобработанныеДокументы.Ссылка = НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.Ссылка
		|ГДЕ
		|	НачальнаяШтатнаяРасстановкаЕжегодныеОтпуска.КоличествоДней > 0
		|ИТОГИ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		// Обрабатываем ТЧ ОстаткиОтпусковПоРабочимГодам
		ВыборкаОстаткиОтпусковПоРабочимГодам = ВыборкаДокументов.Выбрать();
		Пока ВыборкаОстаткиОтпусковПоРабочимГодам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.Добавить(), ВыборкаОстаткиОтпусковПоРабочимГодам);
		КонецЦикла; 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьЗаписиРегистраНачальныеОстаткиОтпусков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстаткиОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|ГДЕ
		|	НачальныеОстаткиОтпусков.РабочийГодНачало = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Регистратор КАК ДокументОснование,
		|	НачальныеОстаткиОтпусков.НомерСтроки,
		|	НачальныеОстаткиОтпусков.Активность,
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.ДатаОстатка,
		|	НачальныеОстаткиОтпусков.РабочийГодНачало,
		|	НачальныеОстаткиОтпусков.РабочийГодОкончание,
		|	НачальныеОстаткиОтпусков.КоличествоДней,
		|	НачальныеОстаткиОтпусков.УдалитьРабочийГодНачало
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ПО ВТРегистраторы.Регистратор = НачальныеОстаткиОтпусков.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.НачальныеОстаткиОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.РабочийГодНачало = Выборка.УдалитьРабочийГодНачало;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьИспользуетсяДляПоложенныеВидыЕжегодныхОтпусков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	НЕ ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|	И НЕ ПоложенныеВидыЕжегодныхОтпусков.Используется
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК ДокументОснование,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТРегистраторы.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			СтрокаНабора.Используется = НЕ Выборка.ПересчетНеТребуется;
			СтрокаНабора.Регистратор = Выборка.ДокументОснование;
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьВозвратныеРеквизитыПравИзВозвратныхДокументов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания
		|ПОМЕСТИТЬ ВТВозвратныеРегистраторы
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.Сотрудник,
		|	КадровыйПеревод.ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания
		|ИЗ
		|	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ВТВозвратныеРегистраторы.Сотрудник,
		|	ВТВозвратныеРегистраторы.ДатаНачала,
		|	ВТВозвратныеРегистраторы.ДатаОкончания
		|ПОМЕСТИТЬ ВТСписокНеобработанныхДвижений
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВозвратныеРегистраторы КАК ВТВозвратныеРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТВозвратныеРегистраторы.Ссылка
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТВозвратныеРегистраторы.Сотрудник
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСписокНеобработанныхДвижений.Регистратор
		|ПОМЕСТИТЬ ВТСписокНеобработанныхРегистраторов
		|ИЗ
		|	ВТСписокНеобработанныхДвижений КАК ВТСписокНеобработанныхДвижений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСписокНеобработанныхДвижений.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ВТСписокНеобработанныхДвижений.ДатаНачала,
		|	ВТСписокНеобработанныхДвижений.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТСотрудникиВидыОтпуска
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокНеобработанныхДвижений КАК ВТСписокНеобработанныхДвижений
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТСписокНеобработанныхДвижений.Регистратор
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТСписокНеобработанныхДвижений.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ВТСотрудникиВидыОтпуска.Регистратор,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусков.Период) КАК Период
		|ПОМЕСТИТЬ ВТУказателиПоследних
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиВидыОтпуска КАК ВТСотрудникиВидыОтпуска
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТСотрудникиВидыОтпуска.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТСотрудникиВидыОтпуска.ВидЕжегодногоОтпуска
		|			И ПоложенныеВидыЕжегодныхОтпусков.Период <= ВТСотрудникиВидыОтпуска.ДатаНачала
		|			И ПоложенныеВидыЕжегодныхОтпусков.Регистратор <> ВТСотрудникиВидыОтпуска.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ВТСотрудникиВидыОтпуска.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТУказателиПоследних.Сотрудник,
		|	ВТУказателиПоследних.ВидЕжегодногоОтпуска,
		|	ВТУказателиПоследних.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется
		|ПОМЕСТИТЬ ВТПраваСотрудниковДоРегистраторов
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиПоследних КАК ВТУказателиПоследних
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТУказателиПоследних.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТУказателиПоследних.ВидЕжегодногоОтпуска
		|			И ПоложенныеВидыЕжегодныхОтпусков.Период = ВТУказателиПоследних.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ЕСТЬNULL(ВТСписокНеобработанныхДвижений.ДатаОкончания, ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо) КАК ДействуетДо,
		|	ЕСТЬNULL(ВТПраваСотрудниковДоРегистраторов.Используется, ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании) КАК ИспользуетсяПоОкончании,
		|	ЕСТЬNULL(ВТПраваСотрудниковДоРегистраторов.КоличествоДнейВГод, ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании) КАК КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
		|	ЕСТЬNULL(ВТСписокНеобработанныхДвижений.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
		|	ЕСТЬNULL(ВТСписокНеобработанныхДвижений.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокНеобработанныхРегистраторов КАК ВТСписокНеобработанныхРегистраторов
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТСписокНеобработанныхРегистраторов.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваСотрудниковДоРегистраторов КАК ВТПраваСотрудниковДоРегистраторов
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТПраваСотрудниковДоРегистраторов.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТПраваСотрудниковДоРегистраторов.ВидЕжегодногоОтпуска
		|			И ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТПраваСотрудниковДоРегистраторов.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокНеобработанныхДвижений КАК ВТСписокНеобработанныхДвижений
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТСписокНеобработанныхДвижений.Регистратор
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТСписокНеобработанныхДвижений.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			// Если это вторичная запись, сделанная вне пределов действия данного возвратного документа, обрабатывать ее не надо.
			Если Выборка.ВторичнаяЗапись И Выборка.Период > Выборка.ДатаОкончания Тогда
				СтрокаНабора.ДействуетДо = Дата(1,1,1);
				СтрокаНабора.КоличествоДнейВГодПоОкончании = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьКоличествоДнейВГодПоОкончанииДляВторичныхЗаписей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|	И ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод) КАК КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТСводныеИтоги
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторы КАК ВТРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТРегистраторы.Регистратор
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|	И ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК ДокументОснование,
		|	ПоложенныеВидыЕжегодныхОтпусков.НомерСтроки,
		|	ПоложенныеВидыЕжегодныхОтпусков.Активность,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ВЫБОР
		|		КОГДА ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании
		|		ИНАЧЕ ВТСводныеИтоги.КоличествоДнейВГод
		|	КОНЕЦ КАК КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСводныеИтоги КАК ВТСводныеИтоги
		|			ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = ВТСводныеИтоги.Сотрудник
		|				И ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТСводныеИтоги.Регистратор
		|				И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВТСводныеИтоги.ВидЕжегодногоОтпуска
		|		ПО ВТРегистраторы.Регистратор = ПоложенныеВидыЕжегодныхОтпусков.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
		НаборЗаписей = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.ДокументОснование);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ФактическиеОтпускаЗаполнитьПериодНачисления() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактическиеОтпуска.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|ГДЕ
	|	ФактическиеОтпуска.ПериодНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка КАК Регистратор,
	|	ДокументыОтклонений.ПериодРегистрации КАК ПериодНачисления
	|ПОМЕСТИТЬ ВТПериодыНачислений
	|ИЗ
	|	Документ.БольничныйЛист КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.Командировка КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.МесяцНачисления
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.Отпуск КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.ОтпускБезСохраненияОплаты КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.ПрогулНеявка КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.СторнированиеНачислений КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.УвольнениеСписком КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОтклонений.Ссылка,
	|	ДокументыОтклонений.ПериодРегистрации
	|ИЗ
	|	Документ.Увольнение КАК ДокументыОтклонений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыКОбработке КАК ДокументыКОбработке
	|		ПО ДокументыОтклонений.Ссылка = ДокументыКОбработке.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Период,
	|	ФактическиеОтпуска.Регистратор КАК Регистратор,
	|	ФактическиеОтпуска.НомерСтроки КАК НомерСтроки,
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ПериодНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЕСТЬNULL(ПериодыНачислений.ПериодНачисления, ФактическиеОтпуска.Период)
	|		ИНАЧЕ ФактическиеОтпуска.ПериодНачисления
	|	КОНЕЦ КАК ПериодНачисления
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыНачислений КАК ПериодыНачислений
	|		ПО ФактическиеОтпуска.Регистратор = ПериодыНачислений.Регистратор
	|ГДЕ
	|	ФактическиеОтпуска.ПериодНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьВводыОстатковОтпусковНулевымиОстатками()Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	МАКСИМУМ(НачальныеОстаткиОтпусков.ДатаОстатка) КАК ДатаОстатка
		|ПОМЕСТИТЬ ВТУказателиПоследнихОстатков
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеОстаткиОтпусков.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Регистратор,
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.ДатаОстатка,
		|	ВЫБОР
		|		КОГДА НачальныеОстаткиОтпусков.Регистратор ССЫЛКА Документ.ПереносДанных
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Очищать
		|ПОМЕСТИТЬ ВТНачальныеОстатки
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиПоследнихОстатков КАК ВТУказателиПоследнихОстатков
		|		ПО НачальныеОстаткиОтпусков.Сотрудник = ВТУказателиПоследнихОстатков.Сотрудник
		|			И НачальныеОстаткиОтпусков.ДатаОстатка = ВТУказателиПоследнихОстатков.ДатаОстатка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Сотрудник,
		|	НачальныеОстатки.Регистратор,
		|	НачальныеОстатки.ДатаОстатка
		|ПОМЕСТИТЬ ВТРегистраторыНачальныхОстатков
		|ИЗ
		|	ВТНачальныеОстатки КАК НачальныеОстатки
		|ГДЕ
		|	НЕ НачальныеОстатки.Очищать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТПраваСотрудниковДоВвода
		|ИЗ
		|	ВТНачальныеОстатки КАК ВТНачальныеОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ПО ВТНачальныеОстатки.Сотрудник = ПоложенныеВидыЕжегодныхОтпусков.Сотрудник
		|			И ВТНачальныеОстатки.ДатаОстатка > ПоложенныеВидыЕжегодныхОтпусков.Период
		|			И (НЕ ВТНачальныеОстатки.Очищать)
		|			И (НЕ ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись)
		|			И (ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПраваСотрудниковДоВвода.Сотрудник,
		|	ВТПраваСотрудниковДоВвода.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТОтсутствующиеОстатки
		|ИЗ
		|	ВТПраваСотрудниковДоВвода КАК ВТПраваСотрудниковДоВвода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачальныеОстатки КАК ВТНачальныеОстатки
		|		ПО ВТПраваСотрудниковДоВвода.Сотрудник = ВТНачальныеОстатки.Сотрудник
		|			И ВТПраваСотрудниковДоВвода.ВидЕжегодногоОтпуска = ВТНачальныеОстатки.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ВТНачальныеОстатки.ВидЕжегодногоОтпуска ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистраторыНачальныхОстатков.Регистратор,
		|	РегистраторыНачальныхОстатков.Сотрудник,
		|	РегистраторыНачальныхОстатков.ДатаОстатка,
		|	ОтсутствующиеОстатки.ВидЕжегодногоОтпуска,
		|	РегистраторыНачальныхОстатков.ДатаОстатка КАК РабочийГодНачало,
		|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(РегистраторыНачальныхОстатков.ДатаОстатка, ГОД, 1), ДЕНЬ, -1) КАК РабочийГодОкончание
		|ПОМЕСТИТЬ ДобавляемыеЗаписи
		|ИЗ
		|	ВТОтсутствующиеОстатки КАК ОтсутствующиеОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыНачальныхОстатков КАК РегистраторыНачальныхОстатков
		|		ПО ОтсутствующиеОстатки.Сотрудник = РегистраторыНачальныхОстатков.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДобавляемыеЗаписи.Регистратор,
		|	ДобавляемыеЗаписи.Сотрудник,
		|	ДобавляемыеЗаписи.ДатаОстатка,
		|	ДобавляемыеЗаписи.ВидЕжегодногоОтпуска,
		|	ДобавляемыеЗаписи.РабочийГодНачало,
		|	ДобавляемыеЗаписи.РабочийГодОкончание
		|ИЗ
		|	ДобавляемыеЗаписи КАК ДобавляемыеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеОстаткиОтпусков.Регистратор,
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
		|	НачальныеОстаткиОтпусков.ДатаОстатка,
		|	НачальныеОстаткиОтпусков.РабочийГодНачало,
		|	НачальныеОстаткиОтпусков.РабочийГодОкончание,
		|	НачальныеОстаткиОтпусков.КоличествоДней
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДобавляемыеЗаписи КАК ДобавляемыеЗаписи
		|		ПО НачальныеОстаткиОтпусков.Регистратор = ДобавляемыеЗаписи.Регистратор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДобавляемыеЗаписи.Регистратор,
		|	ДобавляемыеЗаписи.Сотрудник,
		|	ДобавляемыеЗаписи.ВидЕжегодногоОтпуска,
		|	ДобавляемыеЗаписи.ДатаОстатка,
		|	ДобавляемыеЗаписи.РабочийГодНачало,
		|	ДобавляемыеЗаписи.РабочийГодОкончание,
		|	0
		|ИЗ
		|	ДобавляемыеЗаписи КАК ДобавляемыеЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНачальныеОстатки.Сотрудник,
		|	ВТНачальныеОстатки.ВидЕжегодногоОтпуска,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период
		|ИЗ
		|	ВТНачальныеОстатки КАК ВТНачальныеОстатки
		|ГДЕ
		|	ВТНачальныеОстатки.Очищать";
		
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаДобавление = РезультатыЗапроса[РезультатыЗапроса.Количество()-3];
	РезультатЗапросаДобавлениеНаборыЗаписей = РезультатыЗапроса[РезультатыЗапроса.Количество()-2];
	ВыборкаНаборыЗаписей = РезультатЗапросаДобавлениеНаборыЗаписей.Выбрать();
	
	РезультатЗапросаОчистка = РезультатыЗапроса[РезультатыЗапроса.Количество()-1];
	
	Выборка = РезультатЗапросаДобавление.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
		    // Добавляем строку в документ-регистратор
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатковОтпусков")
				ИЛИ ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка") Тогда
				
				ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
				
				НоваяСтрока = ДокументОбъект.ОстаткиОтпусковПоРабочимГодам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Остаток = 0;
				
			КонецЕсли;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
			// Добавляем строку в набор
			НаборЗаписей = РегистрыСведений.НачальныеОстаткиОтпусков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Пока ВыборкаНаборыЗаписей.НайтиСледующий(Новый Структура("Регистратор", Выборка.Регистратор)) Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаНаборыЗаписей);
			КонецЦикла;
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки; 
		
	КонецЦикла;
	
	// + удаляем записи во вторичном регистре для тех нач.остатков, которые были введены Переносом и которые теперь необходимо пересчитать заново.
	Если НЕ РезультатЗапросаОчистка.Пустой() Тогда
		УдалитьЗаписиЗаработанныхОтпусков(РезультатЗапросаОчистка.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереместитьПериодСписанияФактическихОтпусковУУвольнений() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическиеОтпуска.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТДокументыУвольнения
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|ГДЕ
		|	ФактическиеОтпуска.Компенсация
		|	И (ФактическиеОтпуска.Регистратор ССЫЛКА Документ.Увольнение
		|			ИЛИ ФактическиеОтпуска.Регистратор ССЫЛКА Документ.УвольнениеСписком)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Увольнение.Ссылка КАК Регистратор,
		|	Увольнение.Сотрудник КАК Сотрудник,
		|	КОНЕЦПЕРИОДА(Увольнение.ДатаУвольнения, ДЕНЬ) КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТНовыеДатыКомпенсаций
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыУвольнения КАК ВТДокументыУвольнения
		|		ПО Увольнение.Ссылка = ВТДокументыУвольнения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО Увольнение.Ссылка = ФактическиеОтпуска.Регистратор
		|			И Увольнение.Сотрудник = ФактическиеОтпуска.Сотрудник
		|			И (НАЧАЛОПЕРИОДА(Увольнение.ДатаУвольнения, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ФактическиеОтпуска.Период, ДЕНЬ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.Сотрудник,
		|	КОНЕЦПЕРИОДА(Увольнение.ДатаУвольнения, ДЕНЬ)
		|ИЗ
		|	Документ.УвольнениеСписком.Сотрудники КАК Увольнение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыУвольнения КАК ВТДокументыУвольнения
		|		ПО Увольнение.Ссылка = ВТДокументыУвольнения.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ПО Увольнение.Ссылка = ФактическиеОтпуска.Регистратор
		|			И Увольнение.Сотрудник = ФактическиеОтпуска.Сотрудник
		|			И (НАЧАЛОПЕРИОДА(Увольнение.ДатаУвольнения, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ФактическиеОтпуска.Период, ДЕНЬ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНовыеДатыКомпенсаций.Регистратор
		|ПОМЕСТИТЬ ВТОбрабатываемыеРегистраторы
		|ИЗ
		|	ВТНовыеДатыКомпенсаций КАК ВТНовыеДатыКомпенсаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТНовыеДатыКомпенсаций.ДатаУвольнения, ФактическиеОтпуска.Период) КАК Период,
		|	ФактическиеОтпуска.Регистратор КАК Регистратор,
		|	ФактическиеОтпуска.НомерСтроки,
		|	ФактическиеОтпуска.Активность,
		|	ФактическиеОтпуска.Сотрудник,
		|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
		|	ФактическиеОтпуска.Количество,
		|	ЕСТЬNULL(ВТНовыеДатыКомпенсаций.ДатаУвольнения, ФактическиеОтпуска.ДатаНачала) КАК ДатаНачала,
		|	ЕСТЬNULL(ВТНовыеДатыКомпенсаций.ДатаУвольнения, ФактическиеОтпуска.ДатаОкончания) КАК ДатаОкончания,
		|	ФактическиеОтпуска.Компенсация,
		|	ФактическиеОтпуска.ДатаРегистрации,
		|	ФактическиеОтпуска.РабочийПериодС,
		|	ФактическиеОтпуска.РабочийПериодПо,
		|	ФактическиеОтпуска.Основание,
		|	ФактическиеОтпуска.ПериодНачисления
		|ИЗ
		|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбрабатываемыеРегистраторы КАК ВТОбрабатываемыеРегистраторы
		|		ПО ФактическиеОтпуска.Регистратор = ВТОбрабатываемыеРегистраторы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеДатыКомпенсаций КАК ВТНовыеДатыКомпенсаций
		|		ПО ФактическиеОтпуска.Регистратор = ВТНовыеДатыКомпенсаций.Регистратор
		|			И ФактическиеОтпуска.Сотрудник = ВТНовыеДатыКомпенсаций.Сотрудник
		|			И (ФактическиеОтпуска.Компенсация)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыНакопления.ФактическиеОтпуска.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Пока Выборка.Следующий() Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		КонецЦикла;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#Область СведенияОЕжегодныхОтпускахСотрудников

Функция ДобавитьПолеСведенийОЕжегодныхОтпусках(ИмяПоля, ТекстОписанияПолей, ИсточникиДанных) Экспорт
	
	ДобавленоПолеСведений = Ложь;
	Если НеобходимыСведенияОЕжегодныхОтпусках(ИмяПоля) Тогда
		
		ДобавленоПолеСведений = Истина;
		ИсточникиДанных.Вставить("СведенияОЕжегодныхОтпусках", Истина);
		
		ПутьКДанным = ПутьКДаннымСведенийОЕжегодныхОтпусках(ИмяПоля);
		ТекстОписанияПолей = ТекстОписанияПолей + "," + Символы.ПС + ПутьКДанным + " КАК " + ИмяПоля;
		
	КонецЕсли;
	
	Возврат ДобавленоПолеСведений;
	
КонецФункции

Функция НеобходимыСведенияОЕжегодныхОтпусках(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("КоличествоДнейОтпускаОбщее")
		Или ИмяПоля = ВРег("КоличествоДнейОсновногоОтпуска")
		Или ИмяПоля = ВРег("КоличествоДнейОтпускаЧАЭС")
		Или ИмяПоля = ВРег("КоличествоДнейСеверногоОтпуска")
		Или ИмяПоля = ВРег("КоличествоДнейОтпускаЗаВредность");
		
КонецФункции

Функция ПутьКДаннымСведенийОЕжегодныхОтпусках(Знач ИмяПоля)
	
	ПутьКДанным = "КоличестваДнейЕжегодныхОтпусковСотрудников." + ИмяПоля;
	Возврат ПутьКДанным;
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияОЕжегодныхОтпусках(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	                                                                
	НеобходимыеСведения = ИсточникиДанных.Получить("СведенияОЕжегодныхОтпусках");
	Если НеобходимыеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяВТЕжегодныеОтпускаСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЕжегодныеОтпускаСотрудников");
	ЗапросВТ = ЗапросВТЕжегодныеОтпускаСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, , ИмяВТЕжегодныеОтпускаСотрудников);
	ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТ);
	
	ИмяВТКоличестваДнейЕжегодныхОтпусковСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("КоличестваДнейЕжегодныхОтпусковСотрудников");
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаОтборовСотрудников.Период,
		|	ТаблицаОтборовСотрудников.Сотрудник,
		|	ОсновнойОтпуск.КоличествоДнейВГод КАК КоличествоДнейОсновногоОтпуска,
		|	ОтпускаЧАЭС.КоличествоДнейВГод КАК КоличествоДнейОтпускаЧАЭС,
		|	СеверныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейСеверногоОтпуска,
		|	ОтпускаЗаВредность.КоличествоДнейВГод КАК КоличествоДнейОтпускаЗаВредность,
		|	СУММА(ЕСТЬNULL(ВсеОтпуска.КоличествоДнейВГод, 0)) КАК КоличествоДнейОтпускаОбщее
		|ПОМЕСТИТЬ ВТКоличестваДнейЕжегодныхОтпусковСотрудников
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборовСотрудников
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ВсеОтпуска
		|		ПО ТаблицаОтборовСотрудников.Период = ВсеОтпуска.Период
		|			И ТаблицаОтборовСотрудников.Сотрудник = ВсеОтпуска.Сотрудник}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОсновнойОтпуск
		|		ПО ТаблицаОтборовСотрудников.Период = ОсновнойОтпуск.Период
		|			И ТаблицаОтборовСотрудников.Сотрудник = ОсновнойОтпуск.Сотрудник
		|			И (ОсновнойОтпуск.ВидЕжегодногоОтпуска = &ОтпускОсновной)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОтпускаЧАЭС
		|		ПО ТаблицаОтборовСотрудников.Период = ОтпускаЧАЭС.Период
		|			И ТаблицаОтборовСотрудников.Сотрудник = ОтпускаЧАЭС.Сотрудник
		|			И (ОтпускаЧАЭС.ВидЕжегодногоОтпуска = &ОтпускПострадавшимВАварииЧАЭС)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК СеверныеОтпуска
		|		ПО ТаблицаОтборовСотрудников.Период = СеверныеОтпуска.Период
		|			И ТаблицаОтборовСотрудников.Сотрудник = СеверныеОтпуска.Сотрудник
		|			И (СеверныеОтпуска.ВидЕжегодногоОтпуска = &ОтпускСеверный)}
		|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТЕжегодныеОтпускаСотрудников КАК ОтпускаЗаВредность
		|		ПО ТаблицаОтборовСотрудников.Период = ОтпускаЗаВредность.Период
		|			И ТаблицаОтборовСотрудников.Сотрудник = ОтпускаЗаВредность.Сотрудник
		|			И (ОтпускаЗаВредность.ВидЕжегодногоОтпуска = &ОтпускЗаВредность)}
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтборовСотрудников.Период,
		|	ТаблицаОтборовСотрудников.Сотрудник,
		|	ОсновнойОтпуск.КоличествоДнейВГод,
		|	ОтпускаЧАЭС.КоличествоДнейВГод,
		|	СеверныеОтпуска.КоличествоДнейВГод,
		|	ОтпускаЗаВредность.КоличествоДнейВГод";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЕжегодныеОтпускаСотрудников", ИмяВТЕжегодныеОтпускаСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТКоличестваДнейЕжегодныхОтпусковСотрудников", ИмяВТКоличестваДнейЕжегодныхОтпусковСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборовСотрудников.Период", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
		
	Запрос.Текст = 
		ЗапросВТ.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ Запрос.Текст;
		
	ОтпускОсновной = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной");
	Запрос.УстановитьПараметр("ОтпускОсновной", ?(ОтпускОсновной = Неопределено, NULL, ОтпускОсновной));
	
	ОтпускПострадавшимВАварииЧАЭС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ?(ОтпускПострадавшимВАварииЧАЭС = Неопределено, NULL, ОтпускПострадавшимВАварииЧАЭС));
	
	Запрос.УстановитьПараметр("ОтпускСеверный", NULL);
	
	Запрос.УстановитьПараметр("ОтпускЗаВредность", NULL);
	
	Запрос.Текст = Запрос.Текст + Символы.ПС
		+ "		{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКоличестваДнейЕжегодныхОтпусковСотрудников + " КАК КоличестваДнейЕжегодныхОтпусковСотрудников
			|		ПО ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + " = КоличестваДнейЕжегодныхОтпусковСотрудников.Сотрудник
			|			И ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод + " = КоличестваДнейЕжегодныхОтпусковСотрудников.Период}";
			
КонецПроцедуры

Функция ЗапросВТЕжегодныеОтпускаСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсключаемыйРегистратор = Неопределено, ИмяВТЕжегодныеОтпускаСотрудников = "ВТЕжегодныеОтпускаСотрудников") Экспорт
	
	// Действующие отпуска сотрудников
	ИмяВТДействующиеОтпуска = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТДействующиеОтпуска");
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		"Сотрудник");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить(
		"Сотрудник", ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ИндексироватьПо = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("ВидЕжегодногоОтпуска");
	
	Если ИсключаемыйРегистратор <> Неопределено Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы,	"Регистратор", "<>", ИсключаемыйРегистратор);
			
	КонецЕсли; 
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ПоложенныеВидыЕжегодныхОтпусков",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТДействующиеОтпуска);
		
	// Специальные отпуска сотрудников
	ИмяВТСпециальныеОтпускаФизическихЛиц = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТСпециальныеОтпускаФизическихЛиц");
	
	ОписательВременнойТаблицыОтборовФизическихЛиц = КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников,
		ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник + ".ФизическоеЛицо",
		ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗапросВТСпециальныеОтпуска = ЗапросВТСпециальныеОтпускаФизическихЛиц(
		ТолькоРазрешенные, ОписательВременнойТаблицыОтборовФизическихЛиц, ИмяВТСпециальныеОтпускаФизическихЛиц);
		
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТСпециальныеОтпуска);
	
	ИмяВТОтпускаСотрудниковПоложенныеВсем = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТОтпускаСотрудниковПоложенныеВсем");
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаОтборовСотрудников.Период,
		|	ТаблицаОтборовСотрудников.Сотрудник,
		|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.КоличествоДнейВГод,
		|	ВидыОтпусков.Предопределенный,
		|	ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам,
		|	ВидыОтпусков.Наименование
		|ПОМЕСТИТЬ ВТОтпускаСотрудниковПоложенныеВсем
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборовСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО (ИСТИНА)
		|ГДЕ
		|	НЕ ВидыОтпусков.ПометкаУдаления
		|	И НЕ ВидыОтпусков.Недействителен
		|	И ВидыОтпусков.ОтпускЯвляетсяЕжегодным
		|	И ВидыОтпусков.ПредоставлятьОтпускВсемСотрудникам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействующиеОтпуска.Период,
		|	ДействующиеОтпуска.Сотрудник КАК Сотрудник,
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска,
		|	ДействующиеОтпуска.КоличествоДнейВГод,
		|	ВЫРАЗИТЬ(ДействующиеОтпуска.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
		|	ВЫРАЗИТЬ(ДействующиеОтпуска.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам КАК ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(ДействующиеОтпуска.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).Наименование КАК ВидЕжегодногоОтпускаНаименование
		|ПОМЕСТИТЬ ВТЕжегодныеОтпускаСотрудников
		|ИЗ
		|	ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|ГДЕ
		|	ДействующиеОтпуска.Используется
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтборовСотрудников.Период,
		|	ТаблицаОтборовСотрудников.Сотрудник,
		|	СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска,
		|	СпециальныеОтпускаСотрудников.КоличествоДнейВГод,
		|	ВЫРАЗИТЬ(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).Предопределенный,
		|	ВЫРАЗИТЬ(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска КАК Справочник.ВидыОтпусков).Наименование
		|ИЗ
		|	ВТТаблицаОтборовСотрудников КАК ТаблицаОтборовСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСпециальныеОтпускаФизическихЛиц КАК СпециальныеОтпускаСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|			ПО (ВЫРАЗИТЬ(ДействующиеОтпуска.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|				И СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска = ДействующиеОтпуска.ВидЕжегодногоОтпуска
		|		ПО ТаблицаОтборовСотрудников.Период = СпециальныеОтпускаСотрудников.Период
		|			И (ВЫРАЗИТЬ(ТаблицаОтборовСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|ГДЕ
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Период,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.КоличествоДнейВГод,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Предопределенный,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ПредоставлятьОтпускВсемСотрудникам,
		|	ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Наименование
		|ИЗ
		|	ВТОтпускаСотрудниковПоложенныеВсем КАК ЕжегодныеОтпускаСотрудниковПоложенныеВсем
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеОтпуска КАК ДействующиеОтпуска
		|		ПО ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник = ДействующиеОтпуска.Сотрудник
		|			И ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска = ДействующиеОтпуска.ВидЕжегодногоОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСпециальныеОтпускаФизическихЛиц КАК СпециальныеОтпускаСотрудников
		|		ПО (ВЫРАЗИТЬ(ЕжегодныеОтпускаСотрудниковПоложенныеВсем.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СпециальныеОтпускаСотрудников.ФизическоеЛицо)
		|			И ЕжегодныеОтпускаСотрудниковПоложенныеВсем.ВидЕжегодногоОтпуска = СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ДействующиеОтпуска.ВидЕжегодногоОтпуска ЕСТЬ NULL 
		|	И СпециальныеОтпускаСотрудников.ВидЕжегодногоОтпуска ЕСТЬ NULL ";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДействующиеОтпуска", ИмяВТДействующиеОтпуска);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТСпециальныеОтпускаФизическихЛиц", ИмяВТСпециальныеОтпускаФизическихЛиц);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтпускаСотрудниковПоложенныеВсем", ИмяВТОтпускаСотрудниковПоложенныеВсем);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТаблицаОтборовСотрудников", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовСотрудников);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборовСотрудников.Период", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборовСотрудников.Сотрудник", "ТаблицаОтборовСотрудников." + ОписательВременнойТаблицыОтборов.ИмяПоляСотрудник);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТЕжегодныеОтпускаСотрудников", ИмяВТЕжегодныеОтпускаСотрудников);

	Запрос.Текст = Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+ ТекстЗапроса;
		
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСпециальныеОтпускаФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТСпециальныеОтпускаФизическихЛиц = "ВТСпециальныеОтпускаФизическихЛиц")
	
	Запрос = Новый Запрос;
	
	ИспользоватьЧАЭС = ПолучитьФункциональнуюОпцию("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС");
	Запрос.УстановитьПараметр("ИспользоватьЧАЭС", ИспользоватьЧАЭС);
	
	ОтпускПострадавшимВАварииЧАЭС = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.ОтпускПострадавшимВАварииЧАЭС");
	Запрос.УстановитьПараметр("ОтпускПострадавшимВАварииЧАЭС", ?(ОтпускПострадавшимВАварииЧАЭС = Неопределено, NULL, ОтпускПострадавшимВАварииЧАЭС));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборовФизическихЛиц.Период КАК Период,
		|	ТаблицаОтборовФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска КАК КоличествоДнейВГод,
		|	&ОтпускПострадавшимВАварииЧАЭС КАК ВидЕжегодногоОтпуска,
		|	ВЫРАЗИТЬ(&ОтпускПострадавшимВАварииЧАЭС КАК Справочник.ВидыОтпусков).Предопределенный КАК ВидЕжегодногоОтпускаПредопределенный,
		|	ВЫРАЗИТЬ(&ОтпускПострадавшимВАварииЧАЭС КАК Справочник.ВидыОтпусков).ПредоставлятьОтпускВсемСотрудникам КАК ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
		|	ВЫРАЗИТЬ(&ОтпускПострадавшимВАварииЧАЭС КАК Справочник.ВидыОтпусков).Наименование КАК ВидЕжегодногоОтпускаНаименование
		|ПОМЕСТИТЬ ВТСпециальныеОтпускаФизическихЛиц
		|ИЗ
		|	РегистрСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС КАК СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицаОтборовФизическихЛиц
		|		ПО СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.ФизическоеЛицо = ТаблицаОтборовФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.КоличествоДнейОтпуска > 0
		|	И &ИспользоватьЧАЭС";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	КадровыйУчет.УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОтборовФизическихЛиц.Период", "ТаблицаОтборовФизическихЛиц." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСпециальныеОтпускаФизическихЛиц", ИмяВТСпециальныеОтпускаФизическихЛиц);

	Возврат Запрос;
		
КонецФункции

#КонецОбласти

// Возвращает признак того, является ли сотрудник работающим по краткосрочному трудовому договору на дату среза.
// 
Функция СотрудникРаботаетПоКраткосрочномуТрудовомуДоговору(Сотрудник, ДатаСреза) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сотрудник)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаСреза) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник), "ДатаПриема,ПриказОПриемеДатаЗавершенияТрудовогоДоговора,КраткосрочныйТрудовойДоговор");
	
	Если КадровыеДанныеСотрудников.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КадровыеДанныеСотрудника = КадровыеДанныеСотрудников[0];
	
	Если НЕ КадровыеДанныеСотрудника.КраткосрочныйТрудовойДоговор
		ИЛИ НЕ ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаПриема)
		ИЛИ НЕ ЗначениеЗаполнено(КадровыеДанныеСотрудника.ПриказОПриемеДатаЗавершенияТрудовогоДоговора) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (НачалоДня(КадровыеДанныеСотрудника.ДатаПриема) <= ДатаСреза
			И ДатаСреза <= КонецДня(КадровыеДанныеСотрудника.ПриказОПриемеДатаЗавершенияТрудовогоДоговора));

КонецФункции

// Формирует временную таблицу, на основе переданной, с признаком того, является ли сотрудник работающим по краткосрочному трудовому договору на дату среза.
// Параметры
// 	МенеджерВременныхТаблиц - менеджер временных таблиц, обязательно содержащий ВТ "ВТКадровыеДанныеСотрудников" со следующими полями
// 		- ДатаПриема
// 		- ПриказОПриемеДатаЗавершенияТрудовогоДоговора
// 		- КраткосрочныйТрудовойДоговор
// 	ИмяВТСотрудники - Строка, имя ВТ с отбором Сотрудник-Дата
// 	ИменаПолей      - Строка, имена полей Сотрудника и Даты в ВТ отбора
// 	ИмяВТРезультата - Строка, имя создаваемой внутренней таблицы
//
Процедура СоздатьВТКраткосрочныеТрудовыеДоговорыСотрудников(МенеджерВременныхТаблиц, ИмяВТСотрудники, ИменаПолей, ПолучатьКадровыеДанные = Истина, ИмяВТРезультата = "ВТКраткосрочныеТрудовыеДоговорыСотрудников") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПолучатьКадровыеДанные Тогда
		ИмяВТКадровыеДанныеСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТКадровыеДанныеСотрудников");
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			МенеджерВременныхТаблиц, ИмяВТСотрудники, ИменаПолей);
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = ИмяВТКадровыеДанныеСотрудников;
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь,
			"ДатаПриема,ПриказОПриемеДатаЗавершенияТрудовогоДоговора,КраткосрочныйТрудовойДоговор");
	Иначе
		ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудников";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТКадровыеДанныеСотрудников.Сотрудник,
		|	ВТКадровыеДанныеСотрудников.Период,
		|	ВЫБОР
		|		КОГДА НЕ ВТКадровыеДанныеСотрудников.КраткосрочныйТрудовойДоговор
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВТКадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА ВТКадровыеДанныеСотрудников.ПриказОПриемеДатаЗавершенияТрудовогоДоговора = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ЛОЖЬ
		|		КОГДА НАЧАЛОПЕРИОДА(ВТКадровыеДанныеСотрудников.ДатаПриема, ДЕНЬ) <= ВТКадровыеДанныеСотрудников.Период
		|				И ВТКадровыеДанныеСотрудников.Период <= КОНЕЦПЕРИОДА(ВТКадровыеДанныеСотрудников.ПриказОПриемеДатаЗавершенияТрудовогоДоговора, ДЕНЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КраткосрочныйТрудовойДоговор
		|ПОМЕСТИТЬ %ВТКраткосрочныеТрудовыеДоговорыСотрудников%
		|ИЗ
		|	%ВТКадровыеДанныеСотрудников% КАК ВТКадровыеДанныеСотрудников";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТКраткосрочныеТрудовыеДоговорыСотрудников%", ИмяВТРезультата);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТКадровыеДанныеСотрудников%", ИмяВТКадровыеДанныеСотрудников);
	
	Запрос.Выполнить();
		
КонецПроцедуры

// Программная обертка вокруг СоздатьВТКраткосрочныеТрудовыеДоговорыСотрудников
// Параметры:
// 	ТаблицаСотрудников - ТаблицаЗначений с колонками:
// 		- Сотрудник - СправочникСсылка.Сотрудники
// 		- Период    - Дата
// Возвращаемое значение:
// 	ТаблицаСотрудников - ТаблицаЗначений с колонками:
// 		- Сотрудник 					- СправочникСсылка.Сотрудники
// 		- Период					    - Дата
// 		- КраткосрочныйТрудовойДоговор 	- булево
//
Функция КраткосрочныеТрудовыеДоговорыСотрудников(ТаблицаСотрудников) Экспорт 

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.Период
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Выполнить();

	СоздатьВТКраткосрочныеТрудовыеДоговорыСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудники", "Сотрудник,Период");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоговорыСотрудников.Сотрудник,
		|	ДоговорыСотрудников.Период,
		|	ДоговорыСотрудников.КраткосрочныйТрудовойДоговор
		|ИЗ
		|	ВТКраткосрочныеТрудовыеДоговорыСотрудников КАК ДоговорыСотрудников";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Получение остатка отпуска

Функция ЗапросВТФактическиеОтпускаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеОтпускаОтбор.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпускаОтбор.НачалоПериода КАК НачалоПериода,
	|	ФактическиеОтпускаОтбор.ОкончаниеПериода КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТОтборСУчетомОстатков
	|ИЗ
	|	ВТФактическиеОтпускаОтбор КАК ФактическиеОтпускаОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.Компенсация,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание,
	|	ФактическиеОтпуска.Регистратор
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборСУчетомОстатков КАК ФактическиеОтпускаОтбор
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаОтбор.Сотрудник
	|			И ФактическиеОтпуска.ДатаОкончания >= ФактическиеОтпускаОтбор.НачалоПериода
	|			И (ФактическиеОтпуска.ДатаНачала <= ФактическиеОтпускаОтбор.ОкончаниеПериода
	|				ИЛИ ФактическиеОтпускаОтбор.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание,
	|	ФактическиеОтпуска.Регистратор,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL 
	|				И ФактическиеОтпуска.Количество > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторнируемаяЗапись,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL 
	|				И ФактическиеОтпуска.Количество < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторноЗапись
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСоСторноПризнаками
	|ИЗ
	|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеОтпуска КАК ФактическиеОтпускаСторно
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаСторно.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаСторно.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачала = ФактическиеОтпускаСторно.ДатаНачала
	|			И ФактическиеОтпуска.ДатаОкончания = ФактическиеОтпускаСторно.ДатаОкончания
	|			И (ФактическиеОтпуска.Количество = -ФактическиеОтпускаСторно.Количество)
	|			И ФактическиеОтпуска.Регистратор <> ФактическиеОтпускаСторно.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.Сотрудник КАК Сотрудник,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачала КАК ДатаНачала,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончания,
	|	ФактическиеОтпуска.Количество КАК КоличествоДней,
	|	ФактическиеОтпуска.Компенсация КАК ЭтоКомпенсация,
	|	ФактическиеОтпуска.Регистратор КАК Регистратор,
	|	ФактическиеОтпуска.ВРабочихДнях КАК ВРабочихДнях,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо КАК РабочийПериодПо,
	|	ФактическиеОтпуска.Основание КАК Основание
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСотрудников
	|{ВЫБРАТЬ
	|	Сотрудник.*,
	|	ВидЕжегодногоОтпуска.*,
	|	ДатаНачала,
	|	ДатаОкончания,
	|	КоличествоДней,
	|	ЭтоКомпенсация,
	|	Регистратор,
	|	ВРабочихДнях,
	|	РабочийПериодС,
	|	РабочийПериодПо,
	|	Основание}
	|ИЗ
	|	ВТФактическиеОтпускаСоСторноПризнаками КАК ФактическиеОтпуска
	|ГДЕ
	|	НЕ ФактическиеОтпуска.СторнируемаяЗапись
	|	И НЕ ФактическиеОтпуска.СторноЗапись
	|{ГДЕ
	|	ФактическиеОтпуска.Сотрудник.*,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска.*,
	|	ФактическиеОтпуска.ДатаОкончания,
	|	ФактическиеОтпуска.Количество,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Регистратор,
	|	ФактическиеОтпуска.РабочийПериодС,
	|	ФактическиеОтпуска.РабочийПериодПо,
	|	ФактическиеОтпуска.Основание}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Если Не ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФактическиеОтпускаСотрудников", ОписательВременныхТаблиц.ИмяВТФактическиеОтпускаСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФактическиеОтпускаОтбор", ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовСотрудников);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.Сотрудник", "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.Сотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.НачалоПериода",  "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.НачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ФактическиеОтпускаСотрудниковОтбор.ОкончаниеПериода",  "ФактическиеОтпускаСотрудниковОтбор." + ОписательВременныхТаблиц.ПоляОтбораСотрудников.ОкончаниеПериода);
	
	Возврат Запрос;
	
КонецФункции

// Функция формирует текстовое описание периода отпуска на основе переданных в качестве параметров данных.
//
Функция ОписаниеПериодаОтпуска(КоличествоДнейВсего, КоличествоДнейПрошлыхЛет, КоличествоДнейАвансом, ДатаПриемаНаРаботу, ДатаОстатков)
	
	Комментарий	= Строка(КоличествоДнейВсего) + " " + ПерсонифицированныйУчет.ФормаМножественногоЧисла("день","дня","дней",КоличествоДнейВсего);
	
	РасшифровкаКомментария = "";
	
	Если КоличествоДнейВсего > 0 Тогда
		Если КоличествоДнейПрошлыхЛет > 0 Тогда
			РасшифровкаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				", " + НСтр("ru='%1 %2 за счет отпусков прошлых лет';uk='%1 %2 за рахунок відпусток минулих років'"),
				КоличествоДнейПрошлыхЛет,
				ПерсонифицированныйУчет.ФормаМножественногоЧисла("день", "дня", "дней", КоличествоДнейПрошлыхЛет));
		КонецЕсли;
		
		Если КоличествоДнейАвансом > 0 Тогда
			Если ПустаяСтрока(РасшифровкаКомментария) Тогда
				РасшифровкаКомментария = ", ";
			Иначе
				РасшифровкаКомментария = РасшифровкаКомментария + " " + НСтр("ru='и';uk='і'") + " ";
			КонецЕсли;
			РасшифровкаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				РасшифровкаКомментария + НСтр("ru='%1 %2  в счет будущего периода';uk='%1 %2 в рахунок майбутнього періоду'"),
				Строка(КоличествоДнейАвансом),
				ПерсонифицированныйУчет.ФормаМножественногоЧисла("день", "дня", "дней", КоличествоДнейАвансом));
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = Комментарий + РасшифровкаКомментария;
	
	Если ДатаПриемаНаРаботу > ДобавитьМесяц(ДатаОстатков, -6) Тогда
		Если Не ПустаяСтрока(Комментарий) Тогда
			Комментарий = Комментарий + ". ";
		КонецЕсли;
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1Дата приема на работу: %2';uk='%1Дата прийому на роботу: %2'"),
			Комментарий,
			Формат(ДатаПриемаНаРаботу, "ДФ='д ММММ гггг ""года""'"));
	ИначеЕсли Не ЗначениеЗаполнено(ДатаПриемаНаРаботу) Тогда
		Если Не ПустаяСтрока(Комментарий) Тогда
			Комментарий = Комментарий + ". ";
		КонецЕсли;
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1Не принят на работу';uk='%1Не прийнятий на роботу'"),
			Комментарий);
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

// Функция готовит виртуальную таблицу по сотрудникам, для которых необходимо рассчитать право на отпуск.
//
Функция СотрудникиКоторымНеобходимоРассчитатьПравоНаОтпуск(ТаблицаДанных, РассчитатьПравоНаОтпускаВсемСотрудникам)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаДанных",	ТаблицаДанных);
	
	Если РассчитатьПравоНаОтпускаВсемСотрудникам Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОстатков,
		|	ТаблицаДанных.ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ТаблицаДанных.ДатаОстатков) КАК ДатаОстатков,
		|	МАКСИМУМ(ТаблицаДанных.ЭтоРасчетПриУвольнении) КАК ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТСотрудникиБезПраваНаОтпуск
		|ИЗ
		|	ВТТаблицаДанных КАК ТаблицаДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаДанных";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОстатков,
		|	ТаблицаДанных.ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.Сотрудник КАК Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ТаблицаДанных.ДатаОстатков) КАК ДатаОстатков,
		|	МАКСИМУМ(ТаблицаДанных.ЭтоРасчетПриУвольнении) КАК ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТСотрудникиДляПроверкиНаличияПрава
		|ИЗ
		|	ВТТаблицаДанных КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПоложенныеВидыЕжегодныхОтпусков.Сотрудник КАК Сотрудник,
		|			ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска
		|		ИЗ
		|			РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ГДЕ
		|			ПоложенныеВидыЕжегодныхОтпусков.Сотрудник В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ТаблицаДанных.Сотрудник
		|					ИЗ
		|						ВТТаблицаДанных КАК ТаблицаДанных)) КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ПО ТаблицаДанных.Сотрудник = ПоложенныеВидыЕжегодныхОтпусков.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДанных.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиДляПроверкиНаличияПрава.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(СотрудникиДляПроверкиНаличияПрава.ДатаОстатков) КАК ДатаОстатков,
		|	МАКСИМУМ(СотрудникиДляПроверкиНаличияПрава.ЭтоРасчетПриУвольнении) КАК ЭтоРасчетПриУвольнении
		|ПОМЕСТИТЬ ВТСотрудникиБезПраваНаОтпуск
		|ИЗ
		|	ВТСотрудникиДляПроверкиНаличияПрава КАК СотрудникиДляПроверкиНаличияПрава
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ПО СотрудникиДляПроверкиНаличияПрава.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
		|			И СотрудникиДляПроверкиНаличияПрава.ДатаОстатков <= ЗаработанныеПраваНаОтпуска.Период
		|			И СотрудникиДляПроверкиНаличияПрава.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
		|ГДЕ
		|	(ЗаработанныеПраваНаОтпуска.КоличествоДней ЕСТЬ NULL 
		|			ИЛИ СотрудникиДляПроверкиНаличияПрава.ЭтоРасчетПриУвольнении)
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиДляПроверкиНаличияПрава.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаОстатков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТаблицаДанных";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

// Функция собирает из ИБ все данные, необходимые для расчета остатков.
//
Функция ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц)
	
	// Для расчета права на отпуск необходимо собрать следующие данные:
	//	0. В МенеджерВременныхТаблиц должна быть таблица ВТСотрудникиБезПраваНаОтпуск,
	//     в которой содержатся все сотрудники, для которых нужно считать право на отпуск;
	//	1. Даты приема и увольнения сотрудников;
	//	2. Начальные остатки;
	//	3. Отсутствия, увеличивающие рабочий год;
	//	4. Изменения права на отпуск.
	
	// Для расчета остатков отпусков необходимо собрать следующие данные:
	//	1. Посчитанное право на отпуска;
	//	2. Начальные остатки;
	//	3. Фактические отпуска.
	

	// заполним таблицу "прерывающих" периодов
	ОтборПоПериодам = Перечисления.СостоянияСотрудника.СостоянияПрерывающиеПравоНаОтпуск();
	ПериодыПрерывающиеПравоНаОтпуск = СостоянияСотрудников.СостоянияСотрудников(ТаблицаДанных.ВыгрузитьКолонку("Сотрудник"), ОтборПоПериодам);
	
	// Для вывода справки по отпуску необходимо собирать сведения для расчета права на отпуск даже если в ИБ хранятся
	// актуальные сведения о праве.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ПериодыПрерывающиеПравоНаОтпуск", ПериодыПрерывающиеПравоНаОтпуск);
	
	// Формируем временную таблицу по переданным в функцию данным.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДанных.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
	|	КОНЕЦПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ) КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении КАК ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ЭтоЗапланированныйОтпуск КАК ЭтоЗапланированныйОтпуск,
	|	ТаблицаДанных.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаДанных.ДатаНачала КАК ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончания КАК ДатаОкончанияПериода,
	|	ТаблицаДанных.ТекущийРегистратор КАК ТекущийРегистратор,
	|	ВЫРАЗИТЬ(ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска КАК Справочник.ВидыОтпусков) КАК ОтборПоВидуЕжегодногоОтпуска
	|ПОМЕСТИТЬ ВТТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексСтроки,
	|	Сотрудник,
	|	ДатаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СостоянияСотрудников.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(СостоянияСотрудников.Начало, ДЕНЬ) КАК ДатаНачалаОтсутствия,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудников.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА СостоянияСотрудников.Окончание
	|		ИНАЧЕ КОНЕЦПЕРИОДА(СостоянияСотрудников.Окончание, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончанияОтсутствия,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя)
	|				ИЛИ СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству)
	|				ИЛИ СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	СостоянияСотрудников.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТПериодыПрерывающиеПравоНаОтпуск
	|ИЗ
	|	&ПериодыПрерывающиеПравоНаОтпуск КАК СостоянияСотрудников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
	|	Сотрудники.ДатаОстатков КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТОписаниеФильтраСоздатьВТИмяРегистра
	|ИЗ
	|	ВТСотрудникиБезПраваНаОтпуск КАК Сотрудники";
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, "ВТТаблицаДанных", "Сотрудник,ДатаОстатков");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Ложь,
		"ДатаПриема,ДатаУвольнения,ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,Пол,КраткосрочныйТрудовойДоговор");
		
	ОписательВременныхТаблиц = УчетРабочегоВремени.ОписательВременныхТаблицДляСоздатьВТКалендарноеВремяСотрудников(
		МенеджерВременныхТаблиц, "ВТТаблицаДанных", "Сотрудник", "ДатаНачалаПериода", "ДатаОкончанияПериода");
	УчетРабочегоВремени.СоздатьВТКалендарноеВремяСотрудников(ОписательВременныхТаблиц, Ложь);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОписаниеФильтраСоздатьВТИмяРегистра","Сотрудник");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ПоложенныеВидыЕжегодныхОтпусков",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения,
		"ВТПоложенныеВидыЕжегодныхОтпусков");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(НачальныеОстаткиОтпусков.ДатаОстатка) КАК ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТДатаНачальныхОстатковПоВидамОтпусков
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
	|		ПО ТаблицаДанных.Сотрудник = НачальныеОстаткиОтпусков.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТДатаНачальныхОстатковПоВидамОтпусков.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТДатаНачальныхОстатковПоВидамОтпусков.ДатаНачальногоОстатка) КАК ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТДатаНачальныхОстатков
	|ИЗ
	|	ВТДатаНачальныхОстатковПоВидамОтпусков КАК ВТДатаНачальныхОстатковПоВидамОтпусков
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДатаНачальныхОстатковПоВидамОтпусков.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА ФактическиеОтпуска.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ ФактическиеОтпуска.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.Количество КАК КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.Период КАК ДатаВхожденияВРабочийГод,
	|	ВЫБОР
	|		КОГДА ФактическиеОтпуска.Компенсация
	|			ТОГДА ФактическиеОтпуска.ДатаОкончания
	|		ИНАЧЕ ФактическиеОтпуска.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончания КАК ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ФактическиеОтпуска.Регистратор) КАК ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодС КАК РабочийПериодСИзДокумента,
	|	КОНЕЦПЕРИОДА(ФактическиеОтпуска.РабочийПериодПо, ДЕНЬ) КАК РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.Основание КАК ОснованиеИзДокумента
	|ПОМЕСТИТЬ ВТФактическиеОтпуска
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеОтпуска КАК ФактическиеОтпуска
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК ДатаНачальныхОстатков
	|			ПО ФактическиеОтпуска.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|				И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ДатаНачальныхОстатков.ВидЕжегодногоОтпуска
	|				И ФактическиеОтпуска.Период < ДатаНачальныхОстатков.ДатаНачальногоОстатка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ПО ФактическиеОтпуска.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ПО ТаблицаДанных.Сотрудник = ФактическиеОтпуска.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ТаблицаДанных.ЭтоЗапланированныйОтпуск
	|					ТОГДА ТаблицаДанных.ДатаДокумента >= ФактическиеОтпуска.Период
	|				КОГДА НЕ ТаблицаДанных.ЭтоРасчетПриУвольнении
	|						И НЕ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|						И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <= НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаДанных.ДатаОстатков >= ФактическиеОтпуска.Период
	|			КОНЕЦ)
	|			И (НЕ(ТаблицаДанных.ЭтоРасчетПриУвольнении
	|					И ФактическиеОтпуска.Регистратор ССЫЛКА Документ.Увольнение))
	|			И ТаблицаДанных.ТекущийРегистратор <> ФактическиеОтпуска.Регистратор
	|			И (ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ФактическиеОтпуска.ВидЕжегодногоОтпуска)
	|			И (ТаблицаДанных.ДатаНачалаПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ НЕ ТаблицаДанных.ДатаНачалаПериода = ВЫБОР
	|						КОГДА ФактическиеОтпуска.Компенсация
	|							ТОГДА ФактическиеОтпуска.ДатаОкончания
	|						ИНАЧЕ ФактическиеОтпуска.ДатаНачала
	|					КОНЕЦ)
	|			И (ТаблицаДанных.ДатаОкончанияПериода = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ НЕ ТаблицаДанных.ДатаОкончанияПериода = ФактическиеОтпуска.ДатаОкончания)
	|ГДЕ
	|	ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Документ,
	|	ФактическиеОтпуска.ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодСИзДокумента,
	|	ФактическиеОтпуска.РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.ОснованиеИзДокумента,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL 
	|				И ФактическиеОтпуска.КоличествоДнейОтпуска > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторнируемаяЗапись,
	|	ВЫБОР
	|		КОГДА НЕ ФактическиеОтпускаСторно.Сотрудник ЕСТЬ NULL 
	|				И ФактическиеОтпуска.КоличествоДнейОтпуска < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СторноЗапись
	|ПОМЕСТИТЬ ВТФактическиеОтпускаСоСторноПризнаками
	|ИЗ
	|	ВТФактическиеОтпуска КАК ФактическиеОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФактическиеОтпуска КАК ФактическиеОтпускаСторно
	|		ПО ФактическиеОтпуска.Сотрудник = ФактическиеОтпускаСторно.Сотрудник
	|			И ФактическиеОтпуска.ВидЕжегодногоОтпуска = ФактическиеОтпускаСторно.ВидЕжегодногоОтпуска
	|			И ФактическиеОтпуска.ДатаНачалаОтпуска = ФактическиеОтпускаСторно.ДатаНачалаОтпуска
	|			И ФактическиеОтпуска.ДатаОкончанияОтпуска = ФактическиеОтпускаСторно.ДатаОкончанияОтпуска
	|			И (ФактическиеОтпуска.КоличествоДнейОтпуска = -ФактическиеОтпускаСторно.КоличествоДнейОтпуска)
	|			И ФактическиеОтпуска.Документ <> ФактическиеОтпускаСторно.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ПоложенныеВидыЕжегодныхОтпусков.Период,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА ПоложенныеВидыЕжегодныхОтпусков.Используется
	|			ТОГДА ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДнейОтпускаВГод,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачальныеОстаткиПоВидам.ДатаНачальногоОстатка < ПоложенныеВидыЕжегодныхОтпусков.Период
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоПравоДоВводаОстатка,
	|	ТекущиеКадровыеДанныеСотрудников.КраткосрочныйТрудовойДоговор,
	|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ПоложенныеВидыЕжегодныхОтпусков.Регистратор) КАК ПредставлениеДокумента,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
	|	НачальныеОстаткиПоВидам.ДатаНачальногоОстатка
	|ПОМЕСТИТЬ ВТПраваНаОтпуска
	|ИЗ
	|	ВТПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиБезПраваНаОтпуск КАК СотрудникиБезПраваНаОтпуск
	|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = СотрудникиБезПраваНаОтпуск.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК НачальныеОстаткиПоВидам
	|		ПО ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = НачальныеОстаткиПоВидам.Сотрудник
	|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = НачальныеОстаткиПоВидам.ВидЕжегодногоОтпуска
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО (СотрудникиБезПраваНаОтпуск.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
	|	МАКСИМУМ(ПраваНаОтпуска.Период) КАК Период
	|ПОМЕСТИТЬ ВТУказателиСрезПоследнихПравДоВводаОстатка
	|ИЗ
	|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
	|ГДЕ
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник,
	|	ВЫБОР
	|		КОГДА ПраваНаОтпуска.ДатаНачальногоОстатка > ПраваНаОтпуска.Период
	|			ТОГДА ПраваНаОтпуска.ДатаНачальногоОстатка
	|		ИНАЧЕ ПраваНаОтпуска.Период
	|	КОНЕЦ КАК Период,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод,
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка,
	|	ПраваНаОтпуска.КраткосрочныйТрудовойДоговор,
	|	ПраваНаОтпуска.Используется,
	|	ПраваНаОтпуска.Регистратор,
	|	ПраваНаОтпуска.ПредставлениеДокумента,
	|	ПраваНаОтпуска.ВторичнаяЗапись,
	|	ПраваНаОтпуска.ПересчетНеТребуется
	|ПОМЕСТИТЬ ВТСрезПоследнихПравДоВводаОстатка
	|ИЗ
	|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказателиСрезПоследнихПравДоВводаОстатка КАК ВТУказателиСрезПоследнихПравДоВводаОстатка
	|		ПО ПраваНаОтпуска.Сотрудник = ВТУказателиСрезПоследнихПравДоВводаОстатка.Сотрудник
	|			И ПраваНаОтпуска.ВидЕжегодногоОтпуска = ВТУказателиСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпуска
	|			И ПраваНаОтпуска.Период = ВТУказателиСрезПоследнихПравДоВводаОстатка.Период
	|ГДЕ
	|	ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	СотрудникиБезПраваНаОтпуск.ДатаОстатков,
	|	СотрудникиБезПраваНаОтпуск.ЭтоРасчетПриУвольнении,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL 
	|				ИЛИ ДатаНачальныхОстатков.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВведеныНачальныеОстатки
	|ИЗ
	|	ВТСотрудникиБезПраваНаОтпуск КАК СотрудникиБезПраваНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатков КАК ДатаНачальныхОстатков
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ИндексСтроки КАК ИндексСтроки,
	|	ТаблицаДанных.Сотрудник КАК Сотрудник,
	|	ТаблицаДанных.ДатаОстатков КАК ДатаОстатков,
	|	ТаблицаДанных.ЭтоРасчетПриУвольнении,
	|	ТаблицаДанных.ДатаНачалаПериода,
	|	ТаблицаДанных.ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.ПустаяСсылка)
	|				ИЛИ ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВКалендарныхИлиРабочихДняхВЗависимостиОтТрудовогоДоговора)
	|			ТОГДА ВЫБОР
	|					КОГДА ТекущиеКадровыеДанныеСотрудников.КраткосрочныйТрудовойДоговор
	|						ТОГДА ЕСТЬNULL(КалендарноеВремяСотрудников.РабочихДнейВПериоде, 0)
	|					ИНАЧЕ ЕСТЬNULL(КалендарноеВремяСотрудников.КалендарныхДнейВПериодеБезУчетаПраздников, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска.СпособРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОтпуска.ВРабочихДнях)
	|					ТОГДА ЕСТЬNULL(КалендарноеВремяСотрудников.РабочихДнейВПериоде, 0)
	|				ИНАЧЕ ЕСТЬNULL(КалендарноеВремяСотрудников.КалендарныхДнейВПериодеБезУчетаПраздников, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоДнейВПериоде,
	|	ВЫБОР
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема ЕСТЬ NULL 
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЕСТЬNULL(ДатаНачальныхОстатков.ДатаНачальногоОстатка, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|	КОНЕЦ КАК ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > НАЧАЛОПЕРИОДА(ТаблицаДанных.ДатаОстатков, ДЕНЬ)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникУволен,
	|	ВЫБОР
	|		КОГДА ДатаНачальныхОстатков.ДатаНачальногоОстатка ЕСТЬ NULL 
	|				ИЛИ ДатаНачальныхОстатков.ДатаНачальногоОстатка = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВведеныНачальныеОстатки,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.Пол КАК Пол,
	|	ТаблицаДанных.ОтборПоВидуЕжегодногоОтпуска
	|ИЗ
	|	ВТТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ТаблицаДанных.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарноеВремяСотрудников КАК КалендарноеВремяСотрудников
	|		ПО ТаблицаДанных.Сотрудник = КалендарноеВремяСотрудников.Сотрудник
	|			И ТаблицаДанных.ДатаНачалаПериода = КалендарноеВремяСотрудников.ДатаНачала
	|			И (ТаблицаДанных.ДатаОкончанияПериода = НАЧАЛОПЕРИОДА(КалендарноеВремяСотрудников.ДатаОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатков КАК ДатаНачальныхОстатков
	|		ПО ТаблицаДанных.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаОстатков,
	|	ИндексСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЕжегодныхОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.НаименованиеПолное = """"
	|			ТОГДА ВидыЕжегодныхОтпусков.Наименование
	|		ИНАЧЕ ВидыЕжегодныхОтпусков.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВидыЕжегодныхОтпусков.КоличествоДнейВГод,
	|	ВЫБОР
	|		КОГДА ВидыЕжегодныхОтпусков.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновнойОтпуск
	|ИЗ
	|	Справочник.ВидыОтпусков КАК ВидыЕжегодныхОтпусков
	|ГДЕ
	|	НЕ ВидыЕжегодныхОтпусков.ПометкаУдаления
	|	И ВидыЕжегодныхОтпусков.ОтпускЯвляетсяЕжегодным
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнойОтпуск УБЫВ,
	|	ВидЕжегодногоОтпускаНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное = """"
	|			ТОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.Наименование
	|		ИНАЧЕ НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска.НаименованиеПолное
	|	КОНЕЦ КАК ВидЕжегодногоОтпускаНаименование,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска = &ОсновнойОтпуск
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	|	НачальныеОстаткиОтпусков.КоличествоДней,
	|	НачальныеОстаткиОтпусков.РабочийГодНачало,
	|	ВЫБОР
	|		КОГДА НачальныеОстаткиОтпусков.РабочийГодНачало <= НачальныеОстаткиОтпусков.РабочийГодОкончание
	|			ТОГДА НачальныеОстаткиОтпусков.РабочийГодОкончание
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НачальныеОстаткиОтпусков.РабочийГодНачало, МЕСЯЦ, 12), ДЕНЬ, -1)
	|	КОНЕЦ КАК РабочийГодОкончание,
	|	НачальныеОстаткиОтпусков.ДатаОстатка,
	|	НачальныеОстаткиОтпусков.Регистратор
	|ИЗ
	|	ВТСотрудникиБезПраваНаОтпуск КАК СотрудникиБезПраваНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатаНачальныхОстатковПоВидамОтпусков КАК ДатаНачальныхОстатков
	|			ПО НачальныеОстаткиОтпусков.Сотрудник = ДатаНачальныхОстатков.Сотрудник
	|				И НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска = ДатаНачальныхОстатков.ВидЕжегодногоОтпуска
	|				И НачальныеОстаткиОтпусков.ДатаОстатка = ДатаНачальныхОстатков.ДатаНачальногоОстатка
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = НачальныеОстаткиОтпусков.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ПриоритетВидаЕжегодногоОтпуска,
	|	ВидЕжегодногоОтпускаНаименование,
	|	НачальныеОстаткиОтпусков.РабочийГодНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиБезПраваНаОтпуск.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА NULL
	|		ИНАЧЕ РАЗНОСТЬДАТ(ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия, ДОБАВИТЬКДАТЕ(ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия, ДЕНЬ, 1), ДЕНЬ)
	|	КОНЕЦ КАК КоличествоДнейОтсутствия,
	|	ВЫБОР
	|		КОГДА ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА NULL
	|		ИНАЧЕ РАЗНОСТЬДАТ(ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия, ДОБАВИТЬКДАТЕ(ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия, ДЕНЬ, 1), ДЕНЬ)
	|	КОНЕЦ КАК КоличествоДнейПродления,
	|	ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия КАК ДатаНачалаОтсутствия,
	|	ПериодыПрерывающиеПравоНаОтпуск.ДатаОкончанияОтсутствия КАК ДатаОкончанияОтсутствия,
	|	ПериодыПрерывающиеПравоНаОтпуск.ЯвляетсяОтпускомБезСохраненияЗарплаты,
	|	ПериодыПрерывающиеПравоНаОтпуск.Состояние
	|ИЗ
	|	ВТСотрудникиБезПраваНаОтпуск КАК СотрудникиБезПраваНаОтпуск
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПрерывающиеПравоНаОтпуск КАК ПериодыПрерывающиеПравоНаОтпуск
	|		ПО СотрудникиБезПраваНаОтпуск.Сотрудник = ПериодыПрерывающиеПравоНаОтпуск.Сотрудник
	|			И СотрудникиБезПраваНаОтпуск.ДатаОстатков >= ПериодыПрерывающиеПравоНаОтпуск.ДатаНачалаОтсутствия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаНачалаОтсутствия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ПраваНаОтпуска.Период, ДЕНЬ) КАК ДатаДействия,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	|	ПраваНаОтпуска.КоличествоДнейОтпускаВГод КАК КоличествоДнейОтпускаВГод,
	|	ПраваНаОтпуска.КраткосрочныйТрудовойДоговор,
	|	ПраваНаОтпуска.Используется КАК Предоставляется,
	|	ПраваНаОтпуска.Регистратор КАК Регистратор,
	|	ПраваНаОтпуска.ПредставлениеДокумента КАК ПредставлениеДокумента,
	|	ПраваНаОтпуска.ВторичнаяЗапись КАК ВторичнаяЗапись,
	|	ПраваНаОтпуска.ПересчетНеТребуется КАК ПересчетНеТребуется
	|ИЗ
	|	ВТПраваНаОтпуска КАК ПраваНаОтпуска
	|ГДЕ
	|	НЕ ПраваНаОтпуска.ЭтоПравоДоВводаОстатка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТСрезПоследнихПравДоВводаОстатка.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ВТСрезПоследнихПравДоВводаОстатка.Период, ДЕНЬ),
	|	ВТСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпуска,
	|	ВТСрезПоследнихПравДоВводаОстатка.ВидЕжегодногоОтпускаНаименование,
	|	ВТСрезПоследнихПравДоВводаОстатка.КоличествоДнейОтпускаВГод,
	|	ВТСрезПоследнихПравДоВводаОстатка.КраткосрочныйТрудовойДоговор,
	|	ВТСрезПоследнихПравДоВводаОстатка.Используется,
	|	ВТСрезПоследнихПравДоВводаОстатка.Регистратор,
	|	ВТСрезПоследнихПравДоВводаОстатка.ПредставлениеДокумента,
	|	ВТСрезПоследнихПравДоВводаОстатка.ВторичнаяЗапись,
	|	ВТСрезПоследнихПравДоВводаОстатка.ПересчетНеТребуется
	|ИЗ
	|	ВТСрезПоследнихПравДоВводаОстатка КАК ВТСрезПоследнихПравДоВводаОстатка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	ДатаДействия УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпускаНаименование,
	|	ФактическиеОтпуска.КоличествоДнейОтпуска,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска,
	|	ФактическиеОтпуска.ДатаОкончанияОтпуска,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.Документ,
	|	ФактическиеОтпуска.ПредставлениеДокумента,
	|	ФактическиеОтпуска.ДатаРегистрации,
	|	ФактическиеОтпуска.РабочийПериодСИзДокумента,
	|	ФактическиеОтпуска.РабочийПериодПоИзДокумента,
	|	ФактическиеОтпуска.ОснованиеИзДокумента
	|ИЗ
	|	ВТФактическиеОтпускаСоСторноПризнаками КАК ФактическиеОтпуска
	|ГДЕ
	|	НЕ ФактическиеОтпуска.СторнируемаяЗапись
	|	И НЕ ФактическиеОтпуска.СторноЗапись
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФактическиеОтпуска.Сотрудник,
	|	ФактическиеОтпуска.ДатаОстатков,
	|	ФактическиеОтпуска.ИндексСтроки,
	|	ФактическиеОтпуска.ДатаВхожденияВРабочийГод,
	|	ФактическиеОтпуска.Компенсация,
	|	ФактическиеОтпуска.ВидЕжегодногоОтпуска,
	|	ФактическиеОтпуска.ДатаНачалаОтпуска";
	Запрос.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"));
	МассивРезультатов = Запрос.ВыполнитьПакет();
	КоличествоПакетов = МассивРезультатов.Количество();
	
	СотрудникиБезПраваНаОтпуск	= МассивРезультатов[КоличествоПакетов-7].Выгрузить();
	
	Данные						= МассивРезультатов[КоличествоПакетов-6].Выгрузить();
	
	ВидыОтпусков				= МассивРезультатов[КоличествоПакетов-5].Выгрузить();
	
	НачальныеОстатки			= МассивРезультатов[КоличествоПакетов-4].Выгрузить();
	НачальныеОстатки.Индексы.Добавить("Сотрудник");
	НачальныеОстатки.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	Отклонения					= МассивРезультатов[КоличествоПакетов-3].Выгрузить();
	Отклонения.Индексы.Добавить("Сотрудник");
	
	ПраваНаЕжегодныйОтпуск		= МассивРезультатов[КоличествоПакетов-2].Выгрузить();
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("Сотрудник");
	ПраваНаЕжегодныйОтпуск.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	ФактическиеОтпуска			= МассивРезультатов[КоличествоПакетов-1].Выгрузить();
	ФактическиеОтпуска.Колонки.Добавить("РабочийГодС",					Новый ОписаниеТипов("Дата"));
	ФактическиеОтпуска.Колонки.Добавить("РабочийГодПо",					Новый ОписаниеТипов("Дата"));
	ФактическиеОтпуска.Колонки.Добавить("ИспользованоДнейПрошлыхЛет",	Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ИспользованоДнейАвансом",		Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ОсталосьСписать",				Новый ОписаниеТипов("Число"));
	ФактическиеОтпуска.Колонки.Добавить("ЗапланированныйОтпуск",		Новый ОписаниеТипов("Булево"));
	ФактическиеОтпуска.Индексы.Добавить("Сотрудник");
	ФактическиеОтпуска.Индексы.Добавить("ДатаОстатков");
	ФактическиеОтпуска.Индексы.Добавить("ИндексСтроки");
	ФактическиеОтпуска.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	ВозвращаемаяСтруктура = Новый Структура;
	ВозвращаемаяСтруктура.Вставить("СотрудникиБезПраваНаОтпуск", СотрудникиБезПраваНаОтпуск);
	ВозвращаемаяСтруктура.Вставить("Данные", Данные);
	ВозвращаемаяСтруктура.Вставить("ВидыОтпусков", ВидыОтпусков);
	ВозвращаемаяСтруктура.Вставить("НачальныеОстатки", НачальныеОстатки);
	ВозвращаемаяСтруктура.Вставить("Отклонения", Отклонения);
	ВозвращаемаяСтруктура.Вставить("Права", ПраваНаЕжегодныйОтпуск);
	ВозвращаемаяСтруктура.Вставить("ФактическиеОтпуска", ФактическиеОтпуска);
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Функция считает заработанное право на ежегодные отпуска.
//
Функция ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц, ИгнорироватьСохраненноеПравоНаОтпуска, ИгнорироватьП28Правил)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлинаСуток = 86400;
	
	// ДатаНачала и ДатаОкончания - границы рабочего года.
	// Период - дата рабочего месяца.
	// КоличествоДней - количество дней отпуска, которые сотрудник заработал с даты приема на работу или даты ввода
	//                  остатков на дату рабочего месяца.
	ТаблицаЗаработанныхДнейОтпусков = Новый ТаблицаЗначений;
	ТаблицаЗаработанныхДнейОтпусков.Колонки.Добавить("Сотрудник",				Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаЗаработанныхДнейОтпусков.Колонки.Добавить("ВидЕжегодногоОтпуска",	Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаЗаработанныхДнейОтпусков.Колонки.Добавить("ДатаНачала",				Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДнейОтпусков.Колонки.Добавить("ДатаОкончания",			Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДнейОтпусков.Колонки.Добавить("Период",					Новый ОписаниеТипов("Дата"));
	ТаблицаЗаработанныхДнейОтпусков.Колонки.Добавить("КоличествоДней",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 2)));
	ТаблицаЗаработанныхДнейОтпусков.Колонки.Добавить("КоличествоДнейЗаПериод",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 3)));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаработанныеПраваНаОтпуска.Период КАК Период,
	|	ЗаработанныеПраваНаОтпуска.Сотрудник КАК Сотрудник,
	|	ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	|	ЗаработанныеПраваНаОтпуска.ДатаНачала КАК ДатаНачала,
	|	ЗаработанныеПраваНаОтпуска.ДатаОкончания,
	|	ЗаработанныеПраваНаОтпуска.КоличествоДней,
	|	ЗаработанныеПраваНаОтпуска.КоличествоДнейЗаПериод
	|ИЗ
	|	РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТаблицаДанных.Сотрудник КАК Сотрудник
	|		ИЗ
	|			ВТТаблицаДанных КАК ТаблицаДанных) КАК ТаблицаДанных
	|		ПО ЗаработанныеПраваНаОтпуска.Сотрудник = ТаблицаДанных.Сотрудник
	|ГДЕ
	|	НЕ ЗаработанныеПраваНаОтпуска.Сотрудник В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СотрудникиБезПраваНаОтпуск.Сотрудник
	|				ИЗ
	|					ВТСотрудникиБезПраваНаОтпуск КАК СотрудникиБезПраваНаОтпуск)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ВидЕжегодногоОтпуска,
	|	ДатаНачала,
	|	Период";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗаработанныхДнейОтпусков.Добавить(), Выборка);
	КонецЦикла;
	
	ПоловиныМесяцевОбычные = Новый Массив;
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(14);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	ПоловиныМесяцевОбычные.Добавить(15);
	ПоловиныМесяцевОбычные.Добавить(15.5);
	
	ПоловиныМесяцевВисокосные = Новый Массив;
	ПоловиныМесяцевВисокосные.Добавить(15.5);
	ПоловиныМесяцевВисокосные.Добавить(14.5);
	ПоловиныМесяцевВисокосные.Добавить(15.5);
	ПоловиныМесяцевВисокосные.Добавить(15);
	ПоловиныМесяцевВисокосные.Добавить(15.5);
	ПоловиныМесяцевВисокосные.Добавить(15);
	ПоловиныМесяцевВисокосные.Добавить(15.5);
	ПоловиныМесяцевВисокосные.Добавить(15.5);
	ПоловиныМесяцевВисокосные.Добавить(15);
	ПоловиныМесяцевВисокосные.Добавить(15.5);
	ПоловиныМесяцевВисокосные.Добавить(15);
	ПоловиныМесяцевВисокосные.Добавить(15.5);
	
	ТаблицаВидовОтпуска				= ИсходныеДанные.ВидыОтпусков;
	ТаблицаНачальныхОстатков		= ИсходныеДанные.НачальныеОстатки;
	ТаблицаПравНаЕжегодныйОтпуск	= ИсходныеДанные.Права;
	ТаблицаОтклонений				= ИсходныеДанные.Отклонения;
	
	НаборЗаписей = РегистрыСведений.ЗаработанныеПраваНаОтпуска.СоздатьНаборЗаписей();
	
	Для Каждого СотрудникБезПрава Из ИсходныеДанные.СотрудникиБезПраваНаОтпуск Цикл
		
		ОтборПоСотруднику = Новый Структура("Сотрудник", СотрудникБезПрава.Сотрудник);
		
		Если Не ИгнорироватьСохраненноеПравоНаОтпуска И Не ИгнорироватьП28Правил Тогда
			НаборЗаписей.Отбор.Сотрудник.Установить(СотрудникБезПрава.Сотрудник);
		КонецЕсли;
		
		// Нормализуем ТаблицаНачальныхОстатков и ТаблицаПравНаЕжегодныйОтпуск в том случае, если были введены начальные остатки.
		НачальныеОстаткиСотрудника			= ТаблицаНачальныхОстатков.НайтиСтроки(ОтборПоСотруднику);
		ПраваСотрудникаНаЕжегодныеОтпуска	= ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(ОтборПоСотруднику);
		// Формируем таблицу отклонений по виду отпуска из общей таблицы отклонений.
		ТаблицаОтклоненийПоВидуОтпуска = ТаблицаОтклонений.СкопироватьКолонки();
		ТаблицаОтклоненийПоВидуОтпуска.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		
		// Для каждого сотрудника определяем общую дату "начала отсчета", ориентируясь на самый последний ввод остатков отпусков.
		ВведеныНачальныеОстатки = (НачальныеОстаткиСотрудника.Количество() > 0);
		
		Для Каждого СтрокаВидаОтпуска Из ТаблицаВидовОтпуска Цикл
			
			ОтборПоСотрудникуИВидуОтпуска = Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", СотрудникБезПрава.Сотрудник, СтрокаВидаОтпуска.ВидЕжегодногоОтпуска);
			
			РабочиеГода = Новый ТаблицаЗначений;
			РабочиеГода.Колонки.Добавить("ДатаНачала",		Новый ОписаниеТипов("Дата"));
			РабочиеГода.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
			РабочиеГода.Колонки.Добавить("РабочиеМесяцы",	Новый ОписаниеТипов("ТаблицаЗначений"));
			РабочиеГода.Колонки.Добавить("ВисокосныйГод",	Новый ОписаниеТипов("Булево"));
			
			ПраваНаЕжегодныйОтпускПоВидуОтпуска	= ТаблицаПравНаЕжегодныйОтпуск.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			УдалитьДублиПрав(ПраваНаЕжегодныйОтпускПоВидуОтпуска);
			
			НачальныеОстаткиПоВидуОтпуска		= ТаблицаНачальныхОстатков.НайтиСтроки(ОтборПоСотрудникуИВидуОтпуска);
			ЕстьОстаткиПоВидуОтпуска = (ВведеныНачальныеОстатки И НачальныеОстаткиПоВидуОтпуска.Количество() > 0);
			
			// Необходимо определить периоды, в которые сотруднику положен отпуск.
			// По умолчанию один период с даты приема на работу или даты начальных остатков остатков по дату увольнения или дату
			// получения остатка.
			// Периоды предоставления вида отпуска объединяем в один большой, на перерывы в предоставлениях делаем строки отклонений.
			ПериодыПредоставленияОтпусков = Новый ТаблицаЗначений;
			ПериодыПредоставленияОтпусков.Колонки.Добавить("ДатаНачала",	Новый ОписаниеТипов("Дата"));
			ПериодыПредоставленияОтпусков.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
			ПериодПредоставленияИтоговый = Новый СтандартныйПериод;
			
			// Определяем "честные" периоды.
			ДобавитьНовыйПериод = Истина;
			КоличествоПрав = ПраваНаЕжегодныйОтпускПоВидуОтпуска.Количество();
			Для Номер = 1 По КоличествоПрав Цикл
				ПравоНаОтпуск = ПраваНаЕжегодныйОтпускПоВидуОтпуска[КоличествоПрав - Номер];
				Если ДобавитьНовыйПериод И ПравоНаОтпуск.Предоставляется Тогда
					СтрокаПериода = ПериодыПредоставленияОтпусков.Добавить();
					СтрокаПериода.ДатаНачала	= ПравоНаОтпуск.ДатаДействия;
					ДобавитьНовыйПериод	= Ложь;
				ИначеЕсли Не ДобавитьНовыйПериод И НЕ ПравоНаОтпуск.Предоставляется Тогда
					СтрокаПериода.ДатаОкончания	= ПравоНаОтпуск.ДатаДействия - 1;
					ДобавитьНовыйПериод	= Истина;
				КонецЕсли;
			КонецЦикла;
			// Если сотрудник уволен, то дата окончания последнего рабочего года должна быть равна дате увольнения.
			Если Не ДобавитьНовыйПериод И Не ЗначениеЗаполнено(СтрокаПериода.ДатаОкончания) Тогда
				Если СотрудникБезПрава.ЭтоРасчетПриУвольнении Тогда
					СтрокаПериода.ДатаОкончания	= КонецДня(СотрудникБезПрава.ДатаОстатков);
				ИначеЕсли ЗначениеЗаполнено(СотрудникБезПрава.ДатаУвольнения) Тогда
					СтрокаПериода.ДатаОкончания	= КонецДня(СотрудникБезПрава.ДатаУвольнения);
				КонецЕсли;
			КонецЕсли;
			
			Если ПериодыПредоставленияОтпусков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Объединяем их в один, в перерывах регистрируем "отклонения".
			ПрошлыйПериод = Неопределено;
			Для каждого ПериодПредоставленияОтпуска Из ПериодыПредоставленияОтпусков Цикл
				Если ПериодыПредоставленияОтпусков.Индекс(ПериодПредоставленияОтпуска) <> 0 Тогда
					Если КонецДня(ПрошлыйПериод.ДатаОкончания)+1 <> НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала) Тогда
						ДнейРазрыва = (НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала) - НачалоДня(ПрошлыйПериод.ДатаОкончания)) / 86440;
						НовоеОтклонение = ТаблицаОтклоненийПоВидуОтпуска.Добавить();
						НовоеОтклонение.Сотрудник = СотрудникБезПрава.Сотрудник;
						НовоеОтклонение.ВидОтпуска = СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
						НовоеОтклонение.КоличествоДнейОтсутствия = ДнейРазрыва;
						НовоеОтклонение.КоличествоДнейПродления = ДнейРазрыва;
						НовоеОтклонение.ДатаНачалаОтсутствия = КонецДня(ПрошлыйПериод.ДатаОкончания)+1;
						НовоеОтклонение.ДатаОкончанияОтсутствия = НачалоДня(ПериодПредоставленияОтпуска.ДатаНачала)-1;
						НовоеОтклонение.ЯвляетсяОтпускомБезСохраненияЗарплаты = Ложь;
						НовоеОтклонение.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ПустаяСсылка");
					КонецЕсли;
				КонецЕсли;
			    ПрошлыйПериод = ПериодПредоставленияОтпуска;
			КонецЦикла;
			
			// Формируем итоговый период.
			ПериодПредоставленияИтоговый.ДатаНачала = ПериодыПредоставленияОтпусков[0].ДатаНачала;
			ПериодПредоставленияИтоговый.ДатаОкончания = ПериодыПредоставленияОтпусков[ПериодыПредоставленияОтпусков.Количество()-1].ДатаОкончания;
			
			// Формируем непрерывный интервал прав.
			НепрерывноеПравоНаЕжегодныйОтпуск = Новый Массив;
			Для каждого ПравоНаОтпуск Из ПраваНаЕжегодныйОтпускПоВидуОтпуска Цикл
				Если ПравоНаОтпуск.Предоставляется
					ИЛИ ПраваНаЕжегодныйОтпускПоВидуОтпуска.Найти(ПравоНаОтпуск) + 1 = ПраваНаЕжегодныйОтпускПоВидуОтпуска.Количество() Тогда
				    НепрерывноеПравоНаЕжегодныйОтпуск.Добавить(ПравоНаОтпуск);
				КонецЕсли;
			КонецЦикла; 
			УдалитьДублиПрав(НепрерывноеПравоНаЕжегодныйОтпуск);
			
			// Получаем итоговые отклонения по сотруднику.
			ОтклоненияПоСотруднику = ТаблицаОтклонений.НайтиСтроки(ОтборПоСотруднику);
			Для каждого ОтклонениеПоСотруднику Из ОтклоненияПоСотруднику Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаОтклоненийПоВидуОтпуска.Добавить(), ОтклонениеПоСотруднику);
			КонецЦикла; 
			ТаблицаОтклоненийПоВидуОтпуска.Сортировать("ДатаНачалаОтсутствия");
						
			ДатаНачалаРабочегоГода		= ПериодПредоставленияИтоговый.ДатаНачала;
			ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
			// Если введены начальные остатки, а рабочий год заканчивается до даты ввода остатков,
			//  необходимо определить тот рабочий год, в который дата начальных остатков попадает.
			// Предполагается что остатки продляют только первый период предоставления.
			Если ЕстьОстаткиПоВидуОтпуска Тогда
				СтрокаОстатков = НачальныеОстаткиПоВидуОтпуска[0];
				Если ЗначениеЗаполнено(СтрокаОстатков.РабочийГодНачало) И ЗначениеЗаполнено(СтрокаОстатков.РабочийГодОкончание) Тогда
					ДатаНачалаРабочегоГода		= СтрокаОстатков.РабочийГодНачало;
					ДатаОкончанияРабочегоГода	= КонецДня(СтрокаОстатков.РабочийГодОкончание);
				КонецЕсли;
			КонецЕсли;
			
			// Сформируем рабочие года с учетом отклонений.
			// Каждый рабочий год разобьем на рабочие месяцы.
			// Рабочий месяц состоит из даты, в которую сотрудник получает отпуск за отработанный месяц и количество дней за
			// этот месяц.
			МаксимальнаяДатаОкончания = ?(ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания), ПериодПредоставленияИтоговый.ДатаОкончания, СотрудникБезПрава.ДатаОстатков);
			Пока ДатаНачалаРабочегоГода <= МаксимальнаяДатаОкончания Цикл
				
				РабочийГод = РабочиеГода.Добавить();
				РабочийГод.ДатаНачала				= ДатаНачалаРабочегоГода;
				Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И ДатаОкончанияРабочегоГода > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
					ДатаОкончанияРабочегоГода	= ПериодПредоставленияИтоговый.ДатаОкончания;
				КонецЕсли;
				РабочийГод.ДатаОкончания			= ДатаОкончанияРабочегоГода;
								
				РабочийГод.РабочиеМесяцы.Колонки.Добавить("ДатаМесяца",		Новый ОписаниеТипов("Дата"));
				РабочийГод.РабочиеМесяцы.Колонки.Добавить("КоличествоДней",	Новый ОписаниеТипов("Число"));
				РабочийГод.РабочиеМесяцы.Колонки.Добавить("Заполнен",		Новый ОписаниеТипов("Булево"));
				РабочийГод.РабочиеМесяцы.Колонки.Добавить("ОтложеноДней",	Новый ОписаниеТипов("Число"));
				
				// Если для сотрудника введены остатки, добавим остаток как право последним днем.
				НачалоПериода	= РабочийГод.ДатаНачала;
				
				Если ЕстьОстаткиПоВидуОтпуска Тогда
					Для Каждого СтрокаОстатков Из НачальныеОстаткиПоВидуОтпуска Цикл
						
						// В том случае, если есть начальные остатки по данному виду отпуска
						// приводим рабочие года в соответствии с периодом, заданным в остатках
						Если НачалоДня(РабочийГод.ДатаНачала) = НачалоДня(СтрокаОстатков.РабочийГодНачало) Тогда
							РабочийГод.ДатаОкончания = СтрокаОстатков.РабочийГодОкончание;
						КонецЕсли;
						
						ДатаЗаписиОстатка = Мин(СтрокаОстатков.РабочийГодОкончание, СтрокаОстатков.ДатаОстатка);
						Если РабочийГод.ДатаНачала > ДатаЗаписиОстатка ИЛИ ДатаЗаписиОстатка > РабочийГод.ДатаОкончания Тогда
							Продолжить;
						КонецЕсли;
						
						РабочийМесяц = РабочийГод.РабочиеМесяцы.Добавить();
						РабочийМесяц.ДатаМесяца		= ДатаЗаписиОстатка;
						РабочийМесяц.КоличествоДней	= СтрокаОстатков.КоличествоДней;
						РабочийМесяц.Заполнен		= Истина;
						
						ДробнаяЧасть = СтрокаОстатков.КоличествоДней - Цел(СтрокаОстатков.КоличествоДней);
						Если ДробнаяЧасть = 0.33 Тогда
							РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.003;
						ИначеЕсли ДробнаяЧасть = 0.66 Тогда
							РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.006;
						ИначеЕсли ДробнаяЧасть = 0.99 Тогда
							РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + 0.009;
						КонецЕсли;
						
						НачалоПериода	= Мин(ДатаЗаписиОстатка, НачалоПериода);
						
					КонецЦикла;
				КонецЕсли;
				
				ПроверяемыйГод = Год(РабочийГод.ДатаНачала);
				КонецФевраля = Дата(ПроверяемыйГод, 2, 28);
				Если РабочийГод.ДатаНачала < КонецФевраля Тогда
					РабочийГод.ВисокосныйГод = ПроверяемыйГод / 400 = Цел(ПроверяемыйГод / 400) Или ПроверяемыйГод / 4 = Цел(ПроверяемыйГод / 4) И ПроверяемыйГод / 100 <> Цел(ПроверяемыйГод / 100);
				Иначе
					РабочийГод.ВисокосныйГод = Ложь;
				КонецЕсли;
				
				Если РабочийГод.ДатаОкончания < Дата(2006, 10, 6) Тогда
					КоличествоДнейВключаемых = 7;
				Иначе
					КоличествоДнейВключаемых = 14;
				КонецЕсли;
								
				// Заполним рабочие месяца датами по умолчанию.
				ПервыйРабочийГод = НачалоДня(РабочийГод.ДатаНачала) = НачалоДня(СотрудникБезПрава.ДатаПриема);
				// В том случае, когда в первый рабочий год необходимо применить п.28 Правил, необходимо "забежать" на месяц вперед,
				// так как для такого месяца происходит исключительный случай - ДатаМесяца лежит вне пределов обрабатываемого месяца.
				Особый12Месяц =  Не ИгнорироватьП28Правил И ПервыйРабочийГод;
				
				КонецПериода	= ДобавитьМесяц(НачалоПериода, 1) - 1;
				НомерМесяца = 1;
					
				Пока НачалоПериода < РабочийГод.ДатаОкончания
					ИЛИ (Особый12Месяц И НомерМесяца = 12) Цикл
					
					Если Особый12Месяц И НомерМесяца = 12 Тогда
						// П. 28 правил об очередных и дополнительных отпусках.
						ДатаМесяца = НачалоПериода - ДлинаСуток;
					Иначе
						Если РабочийГод.ВисокосныйГод Тогда
							ПоловинаМесяца1 = ПоловиныМесяцевВисокосные[Месяц(НачалоПериода)-1];
							ПоловинаМесяца2 = ПоловиныМесяцевВисокосные[Месяц(КонецПериода)-1];
						Иначе
							ПоловинаМесяца1 = ПоловиныМесяцевОбычные[Месяц(НачалоПериода)-1];
							ПоловинаМесяца2 = ПоловиныМесяцевОбычные[Месяц(КонецПериода)-1];
						КонецЕсли;
						
						ВПервомМесяцеОтработанаПоловина = ПоловинаМесяца1 * 2 - День(НачалоПериода) + 1 >= ПоловинаМесяца1;
						Если ВПервомМесяцеОтработанаПоловина И День(КонецПериода) >= ПоловинаМесяца2 Тогда
							ПоловинаМесяца = Окр((ПоловинаМесяца1 + ПоловинаМесяца2) / 2);
						Иначе
							ПоловинаМесяца = Окр(?(ВПервомМесяцеОтработанаПоловина, ПоловинаМесяца1, ПоловинаМесяца2));
						КонецЕсли;
						
						ДатаМесяца = НачалоПериода - ДлинаСуток + ПоловинаМесяца * ДлинаСуток;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И ДатаМесяца > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
						Прервать;
					КонецЕсли;
					
					Если ДатаМесяца > РабочийГод.ДатаОкончания Тогда // Дата месяца не попала в текущий рабочий год.
						Прервать;
					КонецЕсли;
					
					// Перед добавлением месяца проверим что он не добавлен остатками.
					ОтборМесяцев = Новый Структура("ДатаМесяца", ДатаМесяца);
					Если РабочийГод.РабочиеМесяцы.НайтиСтроки(ОтборМесяцев).Количество() = 0 Тогда
						РабочийГод.РабочиеМесяцы.Добавить().ДатаМесяца = ДатаМесяца;
					КонецЕсли;
					
					НачалоПериода	= ДобавитьМесяц(НачалоПериода, 1);
					КонецПериода	= ДобавитьМесяц(НачалоПериода, 1) - 1;
					
					НомерМесяца = НомерМесяца + 1;
				КонецЦикла;
				
				// Продлим рабочие года, изменив дату окончания рабочего года и подвинув каждую дату рабочего месяца.
				ОтклоненияДляУдаления = Новый Массив;
				Для Каждого СтрокаОтклонения Из ТаблицаОтклоненийПоВидуОтпуска Цикл
					Если РабочийГод.ДатаНачала > СтрокаОтклонения.ДатаНачалаОтсутствия
						Или РабочийГод.ДатаОкончания < СтрокаОтклонения.ДатаНачалаОтсутствия Тогда
						Продолжить;
					КонецЕсли;
					
					// Отпуска без сохранения первые 7/14 дней в рабочем году не увеличивают рабочий год.
					Если СтрокаОтклонения.ЯвляетсяОтпускомБезСохраненияЗарплаты Тогда
						
						КоличествоДнейПродления = Макс(СтрокаОтклонения.КоличествоДнейОтсутствия - КоличествоДнейВключаемых, 0);
						КоличествоДнейВключаемых = Макс(КоличествоДнейВключаемых - СтрокаОтклонения.КоличествоДнейОтсутствия, 0);
						
						СтрокаОтклонения.КоличествоДнейПродления = КоличествоДнейПродления;
						
						СтруктураПоиска = Новый Структура("Сотрудник, Состояние, ДатаНачалаОтсутствия, ДатаОкончанияОтсутствия, ЯвляетсяОтпускомБезСохраненияЗарплаты, Состояние");
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОтклонения);
						НайденныеСтроки = ТаблицаОтклонений.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() > 0 Тогда
							НайденныеСтроки[0].КоличествоДнейПродления = КоличествоДнейПродления;
						КонецЕсли;
						
					КонецЕсли;
					
					// Увеличение рабочего года
					Если СтрокаОтклонения.КоличествоДнейПродления = NULL Тогда
					// Даты окончания нет, сотрудник ушел надолго, что с ним - мы не знаем, расчет прекращаем датой начала отсутствия.
						РабочийГод.ДатаОкончания = СтрокаОтклонения.ДатаНачалаОтсутствия;
						МаксимальнаяДатаОкончания = СтрокаОтклонения.ДатаНачалаОтсутствия;
					ИначеЕсли СтрокаОтклонения.КоличествоДнейПродления > 0 Тогда
					// Отсутствие с известной датой окончания - сдвигаем дату года и месяцы.
						РабочийГод.ДатаОкончания		= РабочийГод.ДатаОкончания + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
						Если ЗначениеЗаполнено(ПериодПредоставленияИтоговый.ДатаОкончания) И РабочийГод.ДатаОкончания > ПериодПредоставленияИтоговый.ДатаОкончания Тогда
							РабочийГод.ДатаОкончания	= ПериодПредоставленияИтоговый.ДатаОкончания;
						КонецЕсли;
						// Сдвиг всех рабочих месяцев после даты начала продления.
						Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
							Если РабочийМесяц.ДатаМесяца > СтрокаОтклонения.ДатаНачалаОтсутствия Тогда
								РабочийМесяц.ДатаМесяца = РабочийМесяц.ДатаМесяца + СтрокаОтклонения.КоличествоДнейПродления * ДлинаСуток;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					ОтклоненияДляУдаления.Добавить(СтрокаОтклонения);
				КонецЦикла;
				
				Для Каждого СтрокаОтклонения Из ОтклоненияДляУдаления Цикл
					ТаблицаОтклоненийПоВидуОтпуска.Удалить(СтрокаОтклонения);
				КонецЦикла;
				
				// Удаление рабочих месяцев, вышедших за дату окончания рабочего года.
				РабочиеМесяцыДляУдаления = Новый Массив;
				Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
					Если РабочийМесяц.ДатаМесяца > РабочийГод.ДатаОкончания Тогда
						РабочиеМесяцыДляУдаления.Добавить(РабочийМесяц);
					КонецЕсли;
				КонецЦикла;
				Для Каждого РабочийМесяц Из РабочиеМесяцыДляУдаления Цикл
					РабочийГод.РабочиеМесяцы.Удалить(РабочийМесяц);
				КонецЦикла;
				
				ДатаНачалаРабочегоГода		= КонецДня(РабочийГод.ДатаОкончания) + 1;
				ДатаОкончанияРабочегоГода	= ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
			КонецЦикла;
			
			// Для каждого рабочего месяца определим количество дней отпуска, заработанное на дату рабочего месяца.
			Для Каждого РабочийГод Из РабочиеГода Цикл
				
				РабочийГод.РабочиеМесяцы.Сортировать("ДатаМесяца УБЫВ");
				
				Для Каждого ПравоНаЕжегодныйОтпуск Из НепрерывноеПравоНаЕжегодныйОтпуск Цикл
					Если РабочийГод.РабочиеМесяцы.Итог("Заполнен") = РабочийГод.РабочиеМесяцы.Количество() Тогда
						Прервать;
					КонецЕсли;
					Если ПравоНаЕжегодныйОтпуск.ДатаДействия > РабочийГод.ДатаОкончания Тогда
						Продолжить;
					КонецЕсли;
					
					ДнейОтпускаВМесяц = ПравоНаЕжегодныйОтпуск.КоличествоДнейОтпускаВГод / 12;
					
					Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
						Если РабочийМесяц.ДатаМесяца < ПравоНаЕжегодныйОтпуск.ДатаДействия Тогда
							Прервать;
						КонецЕсли;
						Если РабочийМесяц.Заполнен Тогда
							Продолжить;
						КонецЕсли;
						
						РаботаетСтатья291 = Ложь;
						
						Если РаботаетСтатья291 Тогда
							РабочийМесяц.КоличествоДней = 2;
							РабочийМесяц.ОтложеноДней = ДнейОтпускаВМесяц - 2;
						Иначе
							РабочийМесяц.КоличествоДней	= ДнейОтпускаВМесяц;
						КонецЕсли; 
						
						РабочийМесяц.Заполнен		= Истина;
						
					КонецЦикла;
				КонецЦикла;
				
				РабочийГод.РабочиеМесяцы.Сортировать("ДатаМесяца ВОЗР");
				
			КонецЦикла;
			
			Для Каждого РабочийГод Из РабочиеГода Цикл
				Если РабочийГод.РабочиеМесяцы.Итог("КоличествоДней") = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтекЗадержанныхДней = 0;
				Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
					Если РабочийМесяц.ОтложеноДней > 0 Тогда
						СтекЗадержанныхДней = СтекЗадержанныхДней + РабочийМесяц.ОтложеноДней;
					Иначе
						Если СтекЗадержанныхДней > 0 Тогда
							РабочийМесяц.КоличествоДней = РабочийМесяц.КоличествоДней + СтекЗадержанныхДней;
							СтекЗадержанныхДней = 0;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ПравоСНачалаРаботы = 0;
			Для Каждого РабочийГод Из РабочиеГода Цикл
				Если РабочийГод.РабочиеМесяцы.Итог("КоличествоДней") = 0 Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого РабочийМесяц Из РабочийГод.РабочиеМесяцы Цикл
					
					СтрокаПрава = ТаблицаЗаработанныхДнейОтпусков.Добавить();
					СтрокаПрава.Сотрудник				= СотрудникБезПрава.Сотрудник;
					СтрокаПрава.ВидЕжегодногоОтпуска	= СтрокаВидаОтпуска.ВидЕжегодногоОтпуска;
					СтрокаПрава.ДатаНачала				= РабочийГод.ДатаНачала;
					СтрокаПрава.ДатаОкончания			= РабочийГод.ДатаОкончания;
					СтрокаПрава.Период					= РабочийМесяц.ДатаМесяца;
					СтрокаПрава.КоличествоДнейЗаПериод	= РабочийМесяц.КоличествоДней;
					
					ПравоСНачалаРаботы					= ПравоСНачалаРаботы + РабочийМесяц.КоличествоДней;
					СтрокаПрава.КоличествоДней			= ПравоСНачалаРаботы;
					
					Если Не ИгнорироватьСохраненноеПравоНаОтпуска И Не ИгнорироватьП28Правил Тогда
						СтрокаНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаПрава);
						СтрокаНабора.КоличествоДней		= ПравоСНачалаРаботы;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если Не ИгнорироватьСохраненноеПравоНаОтпуска И Не ИгнорироватьП28Правил Тогда
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗаработанныхДнейОтпусков.Индексы.Добавить("Сотрудник");
	ТаблицаЗаработанныхДнейОтпусков.Индексы.Добавить("ВидЕжегодногоОтпуска");
	
	Возврат ТаблицаЗаработанныхДнейОтпусков;
	
КонецФункции

// Заполнение ТЧ "Ежегодные отпуска в документах".

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного сотрудника.
//
Функция ЕжегодныеОтпускаСотрудников(ТаблицаСотрудников, ИсключаемыйРегистратор) Экспорт
 
	ОтпускаСотрудников = Новый Соответствие;
	
	// Создание таблицы - отбора сотрудников
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	| ТаблицаСотрудников.Период,
	| ТаблицаСотрудников.Сотрудник
	|ПОМЕСТИТЬ ВТТаблицаСотрудников
	|ИЗ
	| &ТаблицаСотрудников КАК ТаблицаСотрудников";
	Запрос.УстановитьПараметр("ТаблицаСотрудников",  ТаблицаСотрудников);
	
	ИмяВТТаблицаСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТТаблицаСотрудников");
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
		Запрос.Текст,
		"ВТТаблицаСотрудников",
		ИмяВТТаблицаСотрудников);
	
	// Получение запроса по ежегодным отпускам сотрудников
	ИмяВТЕжегодныеОтпускаСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.УникальноеИмяТекстаЗапроса("ВТЕжегодныеОтпускаСотрудников");
	ОписательВременнойТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников(ИмяВТТаблицаСотрудников);
	ЗапросВТЕжегодныеОтпуска = ЗапросВТЕжегодныеОтпускаСотрудников(Ложь, ОписательВременнойТаблицыОтборов, ИсключаемыйРегистратор, ИмяВТЕжегодныеОтпускаСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТЕжегодныеОтпуска);
	
	ФинальныйЗапрос = Новый Запрос;
	ФинальныйЗапрос.Текст = 
	"ВЫБРАТЬ
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпуска,
	|	ПраваНаОтпуска.КоличествоДнейВГод,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредопределенный,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование
	|ИЗ
	|	%ВТЕжегодныеОтпускаСотрудников% КАК ПраваНаОтпуска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПраваНаОтпуска.Сотрудник,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредопределенный УБЫВ,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаПредоставлятьОтпускВсемСотрудникам УБЫВ,
	|	ПраваНаОтпуска.ВидЕжегодногоОтпускаНаименование";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ФинальныйЗапрос);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ВТЕжегодныеОтпускаСотрудников%", ИмяВТЕжегодныеОтпускаСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		ОтпускаСотрудника = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			ОписаниеОтпуска = Новый Структура("ВидЕжегодногоОтпуска,КоличествоДнейВГод,ВидЕжегодногоОтпускаПредопределенный,ВидЕжегодногоОтпускаНаименование");
			ЗаполнитьЗначенияСвойств(ОписаниеОтпуска, Выборка);
			ОтпускаСотрудника.Добавить(ОписаниеОтпуска);
			
		КонецЦикла;
		
		ОтпускаСотрудников.Вставить(Выборка.Сотрудник, ОтпускаСотрудника);
		
	КонецЦикла; 
	
	Возврат ОтпускаСотрудников;
 
КонецФункции

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного сотрудника.
//
Функция ЕжегодныеОтпускаСотрудника(Сотрудник, ДатаСобытия, Регистратор) Экспорт
	
	// Формируем таблицу фильтров.
	ТаблицаОтборов = Новый ТаблицаЗначений;
	ТаблицаОтборов.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаОтборов.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НоваяСтрока = ТаблицаОтборов.Добавить();
	НоваяСтрока.Период = ДатаСобытия;
	НоваяСтрока.Сотрудник = Сотрудник;
	
	ЕжегодныеОтпуска = ЕжегодныеОтпускаСотрудников(ТаблицаОтборов, Регистратор);
	
	// Формируем таблицу результата.
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("ВидЕжегодногоОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаСотрудников.Колонки.Добавить("КоличествоДнейВГод", ОбщегоНазначения.ОписаниеТипаЧисло(2,0));
	
	МассивОтпусков = ЕжегодныеОтпуска.Получить(Сотрудник);
	Если МассивОтпусков <> Неопределено Тогда
		Для каждого ВидОтпуска Из МассивОтпусков Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСотрудников.Добавить(), ВидОтпуска);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСотрудников;
	
КонецФункции

// Функция возвращает список ежегодных отпусков, действующих на дату события для указанного списка позиций штатного
// расписания.
//
Функция ЕжегодныеОтпускаПозицииШтатногоРасписания(СписокПозиций, ДатаСобытия, Регистратор = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокПозиций",	СписокПозиций);
	Запрос.УстановитьПараметр("ДатаСобытия",	ДатаСобытия);
	Запрос.УстановитьПараметр("Регистратор",	Регистратор);
	
	ФОИспользоватьИсториюИзмененияШтатногоРасписания = ПолучитьФункциональнуюОпцию("ИспользоватьИсториюИзмененияШтатногоРасписания");
	Если ФОИспользоватьИсториюИзмененияШтатногоРасписания Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата) КАК Дата,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания
			|ПОМЕСТИТЬ ВТСрезПоследних
			|ИЗ
			|	РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|ГДЕ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания В(&СписокПозиций)
			|	И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата <= &ДатаСобытия
			|	И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Регистратор <> &Регистратор
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	Дата
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.КоличествоДнейВГод
			|ИЗ
			|	РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию КАК ИсторияЕжегодныхОтпусковПоШтатномуРасписанию
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезПоследних КАК СрезПоследних
			|		ПО ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ПозицияШтатногоРасписания = СрезПоследних.ПозицияШтатногоРасписания
			|			И ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Дата = СрезПоследних.Дата
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.Предопределенный УБЫВ,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам УБЫВ,
			|	ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.ВидЕжегодногоОтпуска";
		
	Иначе
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка КАК ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.КоличествоДнейВГод КАК КоличествоДнейВГод
			|ИЗ
			|	Справочник.ШтатноеРасписание.ЕжегодныеОтпуска КАК ШтатноеРасписаниеЕжегодныеОтпуска
			|ГДЕ
			|	ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка В(&СписокПозиций)
			|	И НЕ ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ЭтоГруппа
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.Утверждена
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаУтверждения <= &ДатаСобытия
			|	И (ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаЗакрытия >= &ДатаСобытия
			|			ИЛИ ШтатноеРасписаниеЕжегодныеОтпуска.Ссылка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1))
			|	И НЕ ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ПометкаУдаления
			|	И ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ОтпускЯвляетсяЕжегодным
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПозицияШтатногоРасписания,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.Предопределенный УБЫВ,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска.ПредоставлятьОтпускВсемСотрудникам УБЫВ,
			|	ШтатноеРасписаниеЕжегодныеОтпуска.ВидЕжегодногоОтпуска";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Движения по регистрам

// Процедура принудительно рассчитывает заработанные права на ежегодные отпуска по списку сотрудников и записывает
// рассчитанные сведения в регистр.
//
Процедура РассчитатьЗаработанныеОтпускаСпискуСотрудников(СписокСотрудников, ДатаРасчета) Экспорт
	
	Если СписокСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанных = ОписаниеТаблицыДанных();
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл
		Строка = ТаблицаДанных.Добавить();
		Строка.Сотрудник	= Сотрудник;
		Строка.ДатаОстатков	= НачалоДня(ДатаРасчета);
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Добавить("ИндексСтроки",	Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.ИндексСтроки	= ТаблицаДанных.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	МенеджерВременныхТаблиц	= СотрудникиКоторымНеобходимоРассчитатьПравоНаОтпуск(ТаблицаДанных, Истина);
	ИсходныеДанные			= ИсходныеДанныеДляРасчетаОстатков(ТаблицаДанных, МенеджерВременныхТаблиц);
	ЗаработанныеОтпуска(ИсходныеДанные, МенеджерВременныхТаблиц, Ложь, Ложь);
	
КонецПроцедуры

// Получение временной таблицы фактических отпусков.

// Возвращает структуру описания полей отбора для методов получения фактических отпусков сотрудников.
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать три имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "НачалоПериода",
//							третьяе "ОкончаниеПериода".
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	Сотрудник
//				НачалоПериода
//				ОкончаниеПериода
//
Функция ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников = "НачалоПериода,ОкончаниеПериода")
	
	МассивИменПолейОтбораСотрудников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовСотрудников, ",");
	Возврат Новый Структура("Сотрудник,НачалоПериода,ОкончаниеПериода", СокрЛП(МассивИменПолейОтбораСотрудников[0]), СокрЛП(МассивИменПолейОтбораСотрудников[1]), СокрЛП(МассивИменПолейОтбораСотрудников[2]));
	
КонецФункции

// Возвращает строку, содержащую своднуюИнформацию об отпусках сотрудника
// Параметры
//	КоллекцияСтрок - Таблица значений с правами сотрудника на отпуск
// 	ТолькоПросмотр - состояние открытия формы
// 	СформироватьРасширенноеПредставление - расширенное представление, с учетом изменений
Функция ПредставлениеПраваНаОтпускПоКоллекцииСтрок(КоллекцияСтрок, ТолькоПросмотр, СформироватьРасширенноеПредставление)
	
	МассивФорматированныхСтрок = Новый Массив;
	
	ПредставлениеПрава = "";
	
	Если КоллекцияСтрок.Количество() = 0 Тогда
		ПредставлениеПрава = НСтр("ru='Права на отпуск не заданы.';uk='Права на відпустку не задані.'");
		МассивФорматированныхСтрок.Добавить(ПредставлениеПрава);
	ИначеЕсли КоллекцияСтрок.Количество() = 1 Тогда
		
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Имеет право на ежегодный отпуск';uk='Має право на щорічну відпустку'") + " ",,WebЦвета.Черный));
		
		Если СформироватьРасширенноеПредставление Тогда
			ПредставлениеПрава = КомментарийИзменения(КоллекцияСтрок[0]);
		Иначе
			Если ЭтоСтажевыйОтпуск(КоллекцияСтрок[0].ВидЕжегодногоОтпуска) Тогда
				ПредставлениеПрава = "";
			Иначе
				ПредставлениеПрава = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='(%1) дн.';uk='(%1) дн.'"),
					КоллекцияСтрок[0].КоличествоДнейВГод);
			КонецЕсли;
		КонецЕсли;
			
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПрава + " ",,WebЦвета.Черный));
		
	ИначеЕсли КоллекцияСтрок.Количество() > 1 Тогда
		
		ПредставлениеПрава = "";
		НачалоНовойСтроки = Истина;
		
		Для каждого СтрокаТЧЕжегодныеОтпуска Из КоллекцияСтрок Цикл
			
			Если СформироватьРасширенноеПредставление Тогда
				ПредставлениеСтроки = КомментарийИзменения(СтрокаТЧЕжегодныеОтпуска);
			Иначе
				Если ЭтоСтажевыйОтпуск(СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска) Тогда
					ПредставлениеСтроки = Строка(СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска);
				Иначе
					ПредставлениеСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 (%2) дн.';uk='%1 (%2) дн.'"),
						СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска,
						СтрокаТЧЕжегодныеОтпуска.КоличествоДнейВГод);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТЧЕжегодныеОтпуска.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной") Тогда
				ПредставлениеПрава = ПредставлениеСтроки + ", " + ПредставлениеПрава;
			Иначе
				ПредставлениеПрава = ПредставлениеПрава + ?(НачалоНовойСтроки, "", ", ") + ПредставлениеСтроки;
				НачалоНовойСтроки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Имеет право на ежегодные отпуска:';uk='Має право на щорічні відпустки:'") + " ",,WebЦвета.Черный));
		МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеПрава + " ",,WebЦвета.ТемноГрифельноСиний));
		
	КонецЕсли;
	
	Возврат МассивФорматированныхСтрок;
	
КонецФункции

// Формирует расширенное представление строки ежедневных отпусков.
Функция КомментарийИзменения(РасширеннаяСтрокаОтпуска)

	Если РасширеннаяСтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Отменить Тогда	
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска(НСтр("ru='отменено право на отпуск %1';uk='скасовано право на відпустку %1'"), РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	ИначеЕсли РасширеннаяСтрокаОтпуска.Действие = Перечисления.ДействияСЕжегоднымиОтпусками.Утвердить Тогда	
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска(НСтр("ru='добавлено право на отпуск %1';uk='додано право на відпустку %1'"), РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	ИначеЕсли РасширеннаяСтрокаОтпуска.КоличествоДнейВГод <> РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод
		И НЕ ЭтоСтажевыйОтпуск(РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
		НачалоСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='изменено право на отпуск %1 (%2 дн.';uk='змінено право на відпустку %1 (%2 дн.'"),
			РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска,
			РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
		Если РасширеннаяСтрокаОтпуска.КоличествоДнейВГод > РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод Тогда
			КонецСтроки = " - " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='на %1 дн. больше)';uk='на %1 дн. більше)'"),
				(РасширеннаяСтрокаОтпуска.КоличествоДнейВГод - РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод));
		Иначе	
			КонецСтроки = " - " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='на %1 дн. меньше)';uk='на %1 дн. менше)'"),
				(РасширеннаяСтрокаОтпуска.ТекущееКоличествоДнейВГод - РасширеннаяСтрокаОтпуска.КоличествоДнейВГод));
		КонецЕсли;
		ПредставлениеСтроки = НачалоСтроки + КонецСтроки;
	Иначе
		ПредставлениеСтроки = ПредставлениеСтрокиОтпуска("%1", РасширеннаяСтрокаОтпуска.ВидЕжегодногоОтпуска, РасширеннаяСтрокаОтпуска.КоличествоДнейВГод);
	КонецЕсли;

	Возврат ПредставлениеСтроки;
	
КонецФункции

Функция ПредставлениеСтрокиОтпуска(ТекстКомментария, ВидЕжегодногоОтпуска, КоличествоДнейВГод)

	ТестСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, ВидЕжегодногоОтпуска);
	Если НЕ ЭтоСтажевыйОтпуск(ВидЕжегодногоОтпуска) Тогда
		ТестСтроки = ТестСтроки + " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='(%1 дн.)';uk='(%1 дн.)'"), КоличествоДнейВГод);
	КонецЕсли;
	
	Возврат ТестСтроки;

КонецФункции

// Сворачивает таблицу прав на отпуск по событию.
Функция СвернутьТаблицуПрав(МассивПрав,ТаблицаЗначений)

	Для каждого СтрокаПрава Из МассивПрав Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПрава);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МассивПрав.ДатаДействия,
		|	МассивПрав.ВидЕжегодногоОтпуска,
		|	МассивПрав.ВидЕжегодногоОтпускаНаименование,
		|	МассивПрав.Предоставляется,
		|	МассивПрав.КоличествоДнейОтпускаВГод,
		|	МассивПрав.Регистратор,
		|	МассивПрав.ПредставлениеДокумента,
		|	МассивПрав.ВторичнаяЗапись,
		|	МассивПрав.ПересчетНеТребуется
		|ПОМЕСТИТЬ ВТПрава
		|ИЗ
		|	&МассивПрав КАК МассивПрав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПрава.ДатаДействия КАК ДатаДействия,
		|	ВТПрава.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
		|	ВЫБОР
		|		КОГДА ВТПрава.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
		|	ВТПрава.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
		|	ВТПрава.Предоставляется,
		|	ВТПрава.КоличествоДнейОтпускаВГод,
		|	ВТПрава.Регистратор,
		|	ВЫРАЗИТЬ(ВТПрава.ПредставлениеДокумента КАК СТРОКА(150)) КАК ПредставлениеДокумента,
		|	ВТПрава.ВторичнаяЗапись,
		|	ВТПрава.ПересчетНеТребуется
		|ИЗ
		|	ВТПрава КАК ВТПрава
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДействия,
		|	ПриоритетВидаЕжегодногоОтпуска,
		|	ВидЕжегодногоОтпускаНаименование";
	
	Запрос.УстановитьПараметр("МассивПрав",ТаблицаЗначений);
	ВыборкаСобытий = Запрос.Выполнить().Выбрать();
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ПраваНаОтпуска");
	
	Пока ВыборкаСобытий.СледующийПоЗначениюПоля("ДатаДействия") Цикл
		НовоеСобытие = ТаблицаСобытий.Добавить();
		НовоеСобытие.ДатаСобытия = ВыборкаСобытий.ДатаДействия;
		Если ВыборкаСобытий.ВторичнаяЗапись Тогда
			НовоеСобытие.Событие = НСтр("ru='Изменено право на отпуск';uk='Змінено права на відпустку'");
		Иначе
			НовоеСобытие.Событие = ВыборкаСобытий.ПредставлениеДокумента;
			НовоеСобытие.ДокументСобытие = ВыборкаСобытий.Регистратор;
		КонецЕсли;
		ПраваНаОтпуска = Новый Массив;
		Пока ВыборкаСобытий.Следующий() Цикл
			Событие = Новый Структура("ВидЕжегодногоОтпуска,ВидЕжегодногоОтпускаНаименование,Предоставляется,КоличествоДнейОтпускаВГод");
			ЗаполнитьЗначенияСвойств(Событие,ВыборкаСобытий);
			ПраваНаОтпуска.Добавить(Событие);
		КонецЦикла;
		НовоеСобытие.ПраваНаОтпуска = ПраваНаОтпуска;
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Сворачивает таблицу отпусков по документу.
Функция СвернутьТаблицуОтпусков(МассивОтпусков,ТаблицаЗначений)

	Для каждого СтрокаОтпуска Из МассивОтпусков Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтпуска);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МассивОтпусков.ДатаОстатков,
		|	МассивОтпусков.ДатаВхожденияВРабочийГод,
		|	МассивОтпусков.ВидЕжегодногоОтпуска,
		|	МассивОтпусков.ВидЕжегодногоОтпускаНаименование,
		|	МассивОтпусков.КоличествоДнейОтпуска,
		|	МассивОтпусков.ДатаВхожденияВРабочийГод КАК ДатаВхожденияВРабочийГод1,
		|	МассивОтпусков.ДатаНачалаОтпуска,
		|	МассивОтпусков.ДатаОкончанияОтпуска,
		|	МассивОтпусков.Компенсация,
		|	МассивОтпусков.Документ,
		|	МассивОтпусков.ПредставлениеДокумента,
		|	МассивОтпусков.ДатаРегистрации,
		|	МассивОтпусков.РабочийПериодСИзДокумента,
		|	МассивОтпусков.РабочийПериодПоИзДокумента,
		|	МассивОтпусков.ОснованиеИзДокумента,
		|	МассивОтпусков.РабочийГодС,
		|	МассивОтпусков.РабочийГодПо,
		|	МассивОтпусков.ИспользованоДнейПрошлыхЛет,
		|	МассивОтпусков.ИспользованоДнейАвансом,
		|	МассивОтпусков.ОсталосьСписать,
		|	МассивОтпусков.ЗапланированныйОтпуск
		|ПОМЕСТИТЬ ВТОтпуска
		|ИЗ
		|	&МассивОтпусков КАК МассивОтпусков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОтпуска.ДатаОстатков,
		|	ВТОтпуска.ВидЕжегодногоОтпуска,
		|	ВТОтпуска.ДатаВхожденияВРабочийГод КАК ДатаСобытия,
		|	ВТОтпуска.ВидЕжегодногоОтпускаНаименование,
		|	ВТОтпуска.КоличествоДнейОтпуска,
		|	ВТОтпуска.ДатаВхожденияВРабочийГод,
		|	ВТОтпуска.ДатаНачалаОтпуска,
		|	ВТОтпуска.ДатаОкончанияОтпуска,
		|	ВТОтпуска.Компенсация,
		|	ВТОтпуска.Документ КАК Документ,
		|	ВЫРАЗИТЬ(ВТОтпуска.ПредставлениеДокумента КАК СТРОКА(150)) КАК ПредставлениеДокумента,
		|	ВТОтпуска.ДатаРегистрации,
		|	ВТОтпуска.РабочийПериодСИзДокумента,
		|	ВТОтпуска.РабочийПериодПоИзДокумента,
		|	ВТОтпуска.ОснованиеИзДокумента,
		|	ВТОтпуска.РабочийГодС,
		|	ВТОтпуска.РабочийГодПо,
		|	ВТОтпуска.ИспользованоДнейПрошлыхЛет,
		|	ВТОтпуска.ИспользованоДнейАвансом,
		|	ВТОтпуска.ОсталосьСписать,
		|	ВТОтпуска.ЗапланированныйОтпуск
		|ИЗ
		|	ВТОтпуска КАК ВТОтпуска
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ,
		|	ДатаСобытия";
	
	Запрос.УстановитьПараметр("МассивОтпусков", ТаблицаЗначений);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("ДатаСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаСобытий.Колонки.Добавить("Событие");
	ТаблицаСобытий.Колонки.Добавить("ДокументСобытие");
	ТаблицаСобытий.Колонки.Добавить("ФактическиеОтпуска");
	
	Пока Выборка.СледующийПоЗначениюПоля("Документ") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ДатаСобытия") Цикл
			
			НовоеСобытие = ТаблицаСобытий.Добавить();
			НовоеСобытие.ДатаСобытия = Выборка.ДатаСобытия;
			НовоеСобытие.Событие = Выборка.ПредставлениеДокумента;
			НовоеСобытие.ДокументСобытие = Выборка.Документ;
			
			ФактическиеОтпуска = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				Событие = Новый Структура("
                      |	ДатаОстатков,
                      |	ВидЕжегодногоОтпуска,
                      |	ВидЕжегодногоОтпускаНаименование,
                      |	КоличествоДнейОтпуска,
                      |	ДатаВхожденияВРабочийГод,
                      |	ДатаНачалаОтпуска,
                      |	ДатаОкончанияОтпуска,
                      |	Компенсация,
                      |	ДатаРегистрации,
                      |	РабочийПериодСИзДокумента,
                      |	РабочийПериодПоИзДокумента,
                      |	ОснованиеИзДокумента,
                      |	РабочийГодС,
                      |	РабочийГодПо,
                      |	ИспользованоДнейПрошлыхЛет,
                      |	ИспользованоДнейАвансом,
                      |	ОсталосьСписать,
                      |	ЗапланированныйОтпуск");
				ЗаполнитьЗначенияСвойств(Событие, Выборка);
				ФактическиеОтпуска.Добавить(Событие);
			КонецЦикла;
			
			НовоеСобытие.ФактическиеОтпуска = ФактическиеОтпуска;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Считает накопленные права на отпуск за период.
Функция МассивНакопленныхОтпусков(ДатаСобытия, ДатаПредыдущегоСобытия,ТаблицаНакопленныхПрав);

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблицаНакопленныхПрав.ВидЕжегодногоОтпуска,
	                      |	ТаблицаНакопленныхПрав.ДатаНачала,
	                      |	ТаблицаНакопленныхПрав.ДатаОкончания,
	                      |	ТаблицаНакопленныхПрав.Период,
	                      |	ТаблицаНакопленныхПрав.КоличествоДней,
	                      |	ТаблицаНакопленныхПрав.КоличествоДнейЗаПериод
	                      |ПОМЕСТИТЬ ВТНакопленныеДни
	                      |ИЗ
	                      |	&ТаблицаНакопленныхПрав КАК ТаблицаНакопленныхПрав
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	МАКСИМУМ(ВТНакопленныеДни.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТУказатели
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |ГДЕ
	                      |	ВТНакопленныеДни.Период <= &ДатаСобытия
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	ВТНакопленныеДни.КоличествоДней КАК НакопленоЗаПериод
	                      |ПОМЕСТИТЬ ВТНакоплено
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУказатели КАК ВТУказатели
	                      |		ПО ВТНакопленныеДни.ВидЕжегодногоОтпуска = ВТУказатели.ВидЕжегодногоОтпуска
	                      |			И ВТНакопленныеДни.Период = ВТУказатели.Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	МАКСИМУМ(ВТНакопленныеДни.Период) КАК Период
	                      |ПОМЕСТИТЬ ВТПредыдущиеУказатели
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |ГДЕ
	                      |	ВТНакопленныеДни.Период <= &ДатаПредыдущегоСобытия
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакопленныеДни.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	                      |	ВТНакопленныеДни.КоличествоДней КАК НакопленоЗаПредыдущийПериод
	                      |ПОМЕСТИТЬ ВТНакопленоПредыдущее
	                      |ИЗ
	                      |	ВТНакопленныеДни КАК ВТНакопленныеДни
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредыдущиеУказатели КАК ВТПредыдущиеУказатели
	                      |		ПО ВТНакопленныеДни.ВидЕжегодногоОтпуска = ВТПредыдущиеУказатели.ВидЕжегодногоОтпуска
	                      |			И ВТНакопленныеДни.Период = ВТПредыдущиеУказатели.Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВТНакоплено.ВидЕжегодногоОтпуска,
	                      |	ВТНакоплено.НакопленоЗаПериод - ЕСТЬNULL(ВТНакопленоПредыдущее.НакопленоЗаПредыдущийПериод, 0) КАК КоличествоДнейЗаПериод
	                      |ИЗ
	                      |	ВТНакоплено КАК ВТНакоплено
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленоПредыдущее КАК ВТНакопленоПредыдущее
	                      |		ПО ВТНакоплено.ВидЕжегодногоОтпуска = ВТНакопленоПредыдущее.ВидЕжегодногоОтпуска");
	
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ДатаПредыдущегоСобытия", ДатаПредыдущегоСобытия);
	Запрос.УстановитьПараметр("ТаблицаНакопленныхПрав", ТаблицаНакопленныхПрав);
	
	МассивНакопленныхОтпусков = Новый Массив;
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		СтруктураВидаОтпуска = Новый Структура;
		СтруктураВидаОтпуска.Вставить("ВидЕжегодногоОтпуска", ВыборкаЗапроса.ВидЕжегодногоОтпуска);
		СтруктураВидаОтпуска.Вставить("КоличествоДнейЗаПериод", ВыборкаЗапроса.КоличествоДнейЗаПериод);
		МассивНакопленныхОтпусков.Добавить(СтруктураВидаОтпуска);
	КонецЦикла;
	
	Возврат МассивНакопленныхОтпусков;

КонецФункции

// Вычисляет текущие рабочие года остатков отпусков.
Функция ПериодыОстатковОтпусков(МассивОстатков)

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ВидЕжегодногоОтпуска",Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаЗначений.Колонки.Добавить("ВидЕжегодногоОтпускаНаименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаЗначений.Колонки.Добавить("ДатаНачала",Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("ДатаОкончания",Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("ОстатокНаКонецТекущегоГода",  ОбщегоНазначения.ОписаниеТипаЧисло(6,2));
	ТаблицаЗначений.Колонки.Добавить("ДоступноДляСписанияВЭтомГоду", ОбщегоНазначения.ОписаниеТипаЧисло(6,2));
	
	Для каждого СтрокаОстатков Из МассивОстатков Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МассивПрав.ВидЕжегодногоОтпуска,
	               |	МассивПрав.ВидЕжегодногоОтпускаНаименование,
	               |	МассивПрав.ДатаНачала,
	               |	МассивПрав.ДатаОкончания,
	               |	МассивПрав.ОстатокНаКонецТекущегоГода,
	               |	МассивПрав.ДоступноДляСписанияВЭтомГоду
	               |ПОМЕСТИТЬ ВТПрава
	               |ИЗ
	               |	&МассивПрав КАК МассивПрав
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПрава.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска,
	               |	ВЫБОР
	               |		КОГДА ВТПрава.ВидЕжегодногоОтпуска = ЗНАЧЕНИЕ(Справочник.ВидыОтпусков.Основной)
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК ПриоритетВидаЕжегодногоОтпуска,
	               |	ВТПрава.ВидЕжегодногоОтпускаНаименование КАК ВидЕжегодногоОтпускаНаименование,
	               |	ВТПрава.ДатаНачала,
	               |	ВТПрава.ДатаОкончания,
	               |	ВТПрава.ОстатокНаКонецТекущегоГода,
	               |	ВТПрава.ДоступноДляСписанияВЭтомГоду
	               |ИЗ
	               |	ВТПрава КАК ВТПрава
	               |ГДЕ
	               |	ВТПрава.ДоступноДляСписанияВЭтомГоду > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПриоритетВидаЕжегодногоОтпуска,
	               |	ВидЕжегодногоОтпускаНаименование";
	
	Запрос.УстановитьПараметр("МассивПрав",ТаблицаЗначений);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

// Вычисляет текущие рабочие года остатков отпусков.
Функция ПериодыАвансовыхОтпусков(МассивОстатков)

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("ВидЕжегодногоОтпуска",Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
	ТаблицаЗначений.Колонки.Добавить("ВидЕжегодногоОтпускаНаименование",Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("ДатаНачала",Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("ДатаОкончания",Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("ОстатокНаКонецТекущегоГода",Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("ДоступноДляСписанияВЭтомГоду",Новый ОписаниеТипов("Число"));
	
	Для каждого СтрокаОстатков Из МассивОстатков Цикл
		НоваяСтрока = ТаблицаЗначений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатков);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МассивПрав.ВидЕжегодногоОтпуска,
	               |	МассивПрав.ВидЕжегодногоОтпускаНаименование,
	               |	МассивПрав.ДатаНачала,
	               |	МассивПрав.ДатаОкончания,
	               |	МассивПрав.ОстатокНаКонецТекущегоГода,
	               |	МассивПрав.ДоступноДляСписанияВЭтомГоду
	               |ПОМЕСТИТЬ ВТПрава
	               |ИЗ
	               |	&МассивПрав КАК МассивПрав
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПрава.ВидЕжегодногоОтпуска,
	               |	МАКСИМУМ(ВТПрава.ДатаНачала) КАК ДатаНачала
	               |ПОМЕСТИТЬ ВТПоследние
	               |ИЗ
	               |	ВТПрава КАК ВТПрава
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТПрава.ВидЕжегодногоОтпуска
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПоследние.ВидЕжегодногоОтпуска КАК ВидЕжегодногоОтпуска
	               |ПОМЕСТИТЬ ВТАвансовыеВидыОтпусков
	               |ИЗ
	               |	ВТПрава КАК ВТПрава
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследние КАК ВТПоследние
	               |		ПО ВТПрава.ВидЕжегодногоОтпуска = ВТПоследние.ВидЕжегодногоОтпуска
	               |			И ВТПрава.ДатаНачала = ВТПоследние.ДатаНачала
	               |ГДЕ
	               |	ВТПрава.ОстатокНаКонецТекущегоГода < 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПрава.ВидЕжегодногоОтпуска,
	               |	МИНИМУМ(ВТПрава.ДатаНачала) КАК ДатаНачала
	               |ПОМЕСТИТЬ ВТПервыеОтрицательныеГода
	               |ИЗ
	               |	ВТПрава КАК ВТПрава
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАвансовыеВидыОтпусков КАК ВТАвансовыеВидыОтпусков
	               |		ПО ВТПрава.ВидЕжегодногоОтпуска = ВТАвансовыеВидыОтпусков.ВидЕжегодногоОтпуска
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТПрава.ВидЕжегодногоОтпуска
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПрава.ВидЕжегодногоОтпуска,
	               |	ВТПрава.ВидЕжегодногоОтпускаНаименование,
	               |	ВТПрава.ДатаНачала,
	               |	ВТПрава.ДатаОкончания,
	               |	ВТПрава.ОстатокНаКонецТекущегоГода,
	               |	ВТПрава.ДоступноДляСписанияВЭтомГоду
	               |ИЗ
	               |	ВТПрава КАК ВТПрава
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПервыеОтрицательныеГода КАК ВТПервыеОтрицательныеГода
	               |		ПО ВТПрава.ВидЕжегодногоОтпуска = ВТПервыеОтрицательныеГода.ВидЕжегодногоОтпуска
	               |			И ВТПрава.ДатаНачала = ВТПервыеОтрицательныеГода.ДатаНачала";
	
	Запрос.УстановитьПараметр("МассивПрав",ТаблицаЗначений);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

// Возвращает список сотрудников, у которых отсутствуют записи в регистре ЗаработанныеПраваНаОтпуск до указанной даты.
//
Функция СписокНеРассчитанныхСотрудников(МассивСотрудников, НаДату)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстаткиОтпусков.Сотрудник,
		|	НачальныеОстаткиОтпусков.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТВидыОтпусковДляРасчета
		|ИЗ
		|	РегистрСведений.НачальныеОстаткиОтпусков КАК НачальныеОстаткиОтпусков
		|ГДЕ
		|	НачальныеОстаткиОтпусков.Сотрудник В(&МассивСотрудников)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник В(&МассивСотрудников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТВидыОтпусковДляРасчета.Сотрудник,
		|	ВТВидыОтпусковДляРасчета.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ЗаработанныеПраваНаОтпуска.Период, ДАТАВРЕМЯ(1, 1, 1)) > &НаДату
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьРассчитанныеЗаписи
		|ПОМЕСТИТЬ ВТСотрудникиРасчет
		|ИЗ
		|	ВТВидыОтпусковДляРасчета КАК ВТВидыОтпусковДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработанныеПраваНаОтпуска КАК ЗаработанныеПраваНаОтпуска
		|		ПО ВТВидыОтпусковДляРасчета.Сотрудник = ЗаработанныеПраваНаОтпуска.Сотрудник
		|			И ВТВидыОтпусковДляРасчета.ВидЕжегодногоОтпуска = ЗаработанныеПраваНаОтпуска.ВидЕжегодногоОтпуска
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТВидыОтпусковДляРасчета.Сотрудник,
		|	ВТВидыОтпусковДляРасчета.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСотрудникиРасчет.Сотрудник
		|ИЗ
		|	ВТСотрудникиРасчет КАК ВТСотрудникиРасчет
		|ГДЕ
		|	НЕ ВТСотрудникиРасчет.ЕстьРассчитанныеЗаписи";
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");

КонецФункции

// Заполняет строки табличной части прав отпусков сводной информацией об остатках отпусков из второй табличной части.
Процедура ЗаполнитьОстатокПоОстаткамОтпусков(Сотрудник, ТЧЕжегодныеОтпуска, ТЧОстаткиОтпусков) Экспорт

	СвернутыеОстатки = ТЧОстаткиОтпусков.Скопировать(,"ВидЕжегодногоОтпуска, Остаток, ДатаОстатка");
	СвернутыеОстатки.Свернуть("ВидЕжегодногоОтпуска, ДатаОстатка", "Остаток");
	
	Для каждого Остаток Из СвернутыеОстатки Цикл
		МассивСтрок = ТЧЕжегодныеОтпуска.НайтиСтроки(Новый Структура("Сотрудник, ВидЕжегодногоОтпуска", Сотрудник, Остаток.ВидЕжегодногоОтпуска));
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаОтпуска = МассивСтрок[0];
		Иначе
			СтрокаОтпуска = ТЧЕжегодныеОтпуска.Добавить();
			СтрокаОтпуска.Сотрудник = Сотрудник;
			СтрокаОтпуска.ВидЕжегодногоОтпуска = Остаток.ВидЕжегодногоОтпуска;
			СтрокаОтпуска.ДатаОстатка = Остаток.ДатаОстатка;
		КонецЕсли;
		СтрокаОтпуска.КоличествоДней = Остаток.Остаток;
	КонецЦикла; 

КонецПроцедуры

// Проверяем корректность заполнения документов ввода остатков отпусков в разрезе рабочих лет.
//
Функция ДокументВводаОстатковОтпусковЗаполненКорректно(Форма) Экспорт
	
	Ошибки = Неопределено;
	ПроверкаДляФормы = ТипЗнч(Форма)=Тип("УправляемаяФорма");
	Если ПроверкаДляФормы Тогда
		ПутьКДаннымФормы = "";
	Иначе
		ПутьКДаннымФормы = "Объект.";
	КонецЕсли;
	
	ПутьКДанным = ПутьКДаннымФормы + "ЕжегодныеОтпуска[%1]";
	ПутьКДаннымПоГодам = ПутьКДаннымФормы + "ОстаткиОтпусковПоРабочимГодам[%1]";
	
	Если НЕ ЗначениеЗаполнено(Форма.ДатаОстатков) Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			ПутьКДаннымФормы + "ДатаОстатков",
			НСтр("ru='Не заполнена дата остатков.';uk='Не заповнено дата залишків.'"),
			"");
	КонецЕсли;
	
	Для каждого СтрокаОтпуска Из Форма.ЕжегодныеОтпуска Цикл
		НомерСтроки = Форма.ЕжегодныеОтпуска.Индекс(СтрокаОтпуска);
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным + ".ВидЕжегодногоОтпуска",
				НСтр("ru='Не заполнен вид ежегодного отпуска';uk='Не заповнений вид щорічної відпустки'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		ПараметрыОтбора = Новый Структура("ВидЕжегодногоОтпуска", СтрокаОтпуска.ВидЕжегодногоОтпуска);
		Если Форма.ЕжегодныеОтпуска.НайтиСтроки(ПараметрыОтбора).Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным + ".ВидЕжегодногоОтпуска",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Вид отпуска ""%1"" использован в нескольких строках';uk='Вид відпустки ""%1"" використаний в декількох рядках'"),СтрокаОтпуска.ВидЕжегодногоОтпуска),
				"",
				НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаОтпуска Из Форма.ОстаткиОтпусковПоРабочимГодам Цикл
		НомерСтроки = Форма.ОстаткиОтпусковПоРабочимГодам.Индекс(СтрокаОтпуска);
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.ВидЕжегодногоОтпуска) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".ВидЕжегодногоОтпуска",
				НСтр("ru='Не заполнен вид ежегодного отпуска';uk='Не заповнений вид щорічної відпустки'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.РабочийГодНачало) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодНачало",
				НСтр("ru='Не заполнена дата начала периода.';uk='Не заповнено дата початку періоду.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаОтпуска.РабочийГодОкончание) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодОкончание",
				НСтр("ru='Не заполнена дата окончания периода.';uk='Не заповнено дата закінчення періоду.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
		Если СтрокаОтпуска.РабочийГодОкончание < СтрокаОтпуска.РабочийГодНачало Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДаннымПоГодам + ".РабочийГодНачало",
				НСтр("ru='Не верно заполнен период работы, за который предоставлялся последний отпуск.';uk='Не вірно заповнений період роботи, за який надавалася остання відпустка.'"),
				"",
				НомерСтроки);
		КонецЕсли; 
	КонецЦикла;
	
	ПроверитьПрерыванияПериодовПоВидуОтпуска(Форма.ОстаткиОтпусковПоРабочимГодам, ПутьКДаннымПоГодам, Ошибки);
	ПроверитьКорректностьДатПоследнегоПериода(Форма.ОстаткиОтпусковПоРабочимГодам, Форма.ДатаОстатков, ПутьКДаннымПоГодам, Ошибки);
	
	ЕстьОшибки = НЕ Ошибки = Неопределено;
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Проверяем корректность заполнения ТЧ ЕжегодныеОтпуска в документах и справочниках.
//
Процедура ОбработкаПроверкиЗаполненияТЧЕжегодныеОтпуска(ТабличнаяЧасть, ПроверяемыеРеквизиты, Отказ) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Ошибки = Неопределено;
	
	Для каждого ЕжегодныйОтпуск Из ТабличнаяЧасть Цикл
	    ХарактерЗависимостиДнейОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕжегодныйОтпуск.ВидЕжегодногоОтпуска, "ХарактерЗависимостиДнейОтпуска");
		Если ХарактерЗависимостиДнейОтпуска = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.НеЗависит")
			И ЕжегодныйОтпуск.КоличествоДнейВГод = 0 Тогда
		
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ЕжегодныеОтпуска[%1].КоличествоДнейВГод",
				НСтр("ru='Не заполнено количество дней в год.';uk='Не заповнено кількість днів у рік.'"),
				"",
				ТабличнаяЧасть.Индекс(ЕжегодныйОтпуск));
		
		КонецЕсли;
	КонецЦикла; 
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ЕжегодныеОтпуска.КоличествоДнейВГод");
	
	ЕстьОшибки = (НЕ Ошибки = Неопределено);
	Если ЕстьОшибки Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Отказ = Отказ ИЛИ ЕстьОшибки;
	
КонецПроцедуры

Процедура ПроверитьПрерыванияПериодовПоВидуОтпуска(ДанныеФормы, ПутьКДанным, Ошибки) Экспорт

	ТаблицаЗначений = ДанныеФормы.Выгрузить();
	ТаблицаЗначений.Сортировать("ВидЕжегодногоОтпуска, РабочийГодНачало");
	
	Для каждого СтрокаОстатка Из ТаблицаЗначений Цикл
	
		Если ТаблицаЗначений.Индекс(СтрокаОстатка) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредыдущаяСтрока = ТаблицаЗначений[ТаблицаЗначений.Индекс(СтрокаОстатка)-1];
			
		Если ПредыдущаяСтрока.ВидЕжегодногоОтпуска <> СтрокаОстатка.ВидЕжегодногоОтпуска Тогда
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(КонецДня(ПредыдущаяСтрока.РабочийГодОкончание)+1) <> НачалоДня(СтрокаОстатка.РабочийГодНачало) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				ПутьКДанным,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Периоды отпуска ""%1"" указаны неверно. Периоды не должны прерываться или накладываться друг на друга.';uk='Періоди відпустки ""%1"" вказані невірно. Періоди не повинні перериватися або накладатися один на одного.'"), СтрокаОстатка.ВидЕжегодногоОтпуска),
				"",ТаблицаЗначений.Индекс(СтрокаОстатка));
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ПроверитьКорректностьДатПоследнегоПериода(ДанныеФормы, ДатаОстатков, ПутьКДанным, Ошибки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.ВидЕжегодногоОтпуска,
		|	ТЗ.РабочийГодНачало,
		|	ТЗ.РабочийГодОкончание
		|ПОМЕСТИТЬ ВТОстатки
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстатки.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ВТОстатки.РабочийГодОкончание) КАК РабочийГодОкончание
		|ПОМЕСТИТЬ ВТПоследниеРабочиеГода
		|ИЗ
		|	ВТОстатки КАК ВТОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТОстатки.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстатки.ВидЕжегодногоОтпуска,
		|	ВТОстатки.РабочийГодНачало,
		|	ВТОстатки.РабочийГодОкончание,
		|	ВЫБОР
		|		КОГДА &ДатаОстатков МЕЖДУ ВТОстатки.РабочийГодНачало И ВТОстатки.РабочийГодОкончание
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВведенНеКорректно
		|ПОМЕСТИТЬ ИтоговыеПериоды
		|ИЗ
		|	ВТОстатки КАК ВТОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеРабочиеГода КАК ВТПоследниеРабочиеГода
		|		ПО ВТОстатки.ВидЕжегодногоОтпуска = ВТПоследниеРабочиеГода.ВидЕжегодногоОтпуска
		|			И ВТОстатки.РабочийГодОкончание = ВТПоследниеРабочиеГода.РабочийГодОкончание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеПериоды.ВидЕжегодногоОтпуска
		|ИЗ
		|	ИтоговыеПериоды КАК ИтоговыеПериоды
		|ГДЕ
		|	ИтоговыеПериоды.ВведенНеКорректно";
	Запрос.УстановитьПараметр("ТЗ", ДанныеФормы.Выгрузить());
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			ПутьКДанным,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Последний период остатков отпуска ""%1"" должен захватывать дату остатков.';uk='Останній період залишків відпустки ""%1"" повинен захоплювати дату залишків.'"),ВыборкаДетальныеЗаписи.ВидЕжегодногоОтпуска),
			"");
	КонецЦикла;

КонецПроцедуры

#Область СтажевыеОтпуска

Процедура СоздатьВТВидыОтпусковЗависящиеОтСтажа(МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыОтпусков.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.ВидСтажа КАК ВидСтажа
		|ПОМЕСТИТЬ ВТВидыОтпусковЗависящиеОтСтажа
		|ИЗ
		|	Справочник.ВидыОтпусков КАК ВидыОтпусков
		|ГДЕ
		|	ВидыОтпусков.ХарактерЗависимостиДнейОтпуска = ЗНАЧЕНИЕ(Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа)";
	
	Запрос.Выполнить();

КонецПроцедуры

Функция ЭтоСтажевыйОтпуск(ВидОтпуска) Экспорт
	ХарактерЗависимости = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтпуска, "ХарактерЗависимостиДнейОтпуска");
	Возврат (ХарактерЗависимости = ПредопределенноеЗначение("Перечисление.ХарактерЗависимостиКоличестваДнейОтпуска.ЗависитОтСтажа"));
КонецФункции 

#Область ФормыСтажевыхОтпусков

// Возвращает структуру с параметрами для ДополнитьТабличнуюЧастьСтажевымиЭлементами
//
Функция ПараметрыДляДополнитьТабличнуюЧастьСтажевымиЭлементами() Экспорт 

	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Форма");
	ПараметрыВызова.Вставить("ИмяТаблицы");
	ПараметрыВызова.Вставить("ТабличнаяЧастьВОбъекте", Ложь);
	ПараметрыВызова.Вставить("ЗаполнятьРеквизитыПоСотруднику", Ложь);
	ПараметрыВызова.Вставить("Сотрудник");
	ПараметрыВызова.Вставить("ДатаСреза");

	Возврат ПараметрыВызова;
	
КонецФункции

// Дополняет форму "виртуальными" колонками, необходимыми для стажевых отпусков
// 
Процедура ДополнитьТабличнуюЧастьСтажевымиЭлементами(ПараметрыВызова) Экспорт

	ПутьКТаблице = ?(ПараметрыВызова.ТабличнаяЧастьВОбъекте, "Объект.", "") + ПараметрыВызова.ИмяТаблицы;
	
	Форма = ПараметрыВызова.Форма;
	
	// Добавляем реквизит
	МассивРеквизитов = Новый Массив;
	Если Форма.Элементы.Найти("ОписаниеСтажевыхПоказателей") = Неопределено Тогда
		РеквизитОписаниеСтажевыхПоказателей = Новый РеквизитФормы("ОписаниеСтажевыхПоказателей", Новый ОписаниеТипов("Строка"), ПутьКТаблице);
		МассивРеквизитов.Добавить(РеквизитОписаниеСтажевыхПоказателей);
	КонецЕсли;
	Если Форма.Элементы.Найти("ОтпускЗависитОтСтажа") = Неопределено Тогда
		РеквизитОписаниеСтажевыхПоказателей = Новый РеквизитФормы("ОтпускЗависитОтСтажа", Новый ОписаниеТипов("Булево"), ПутьКТаблице);
		МассивРеквизитов.Добавить(РеквизитОписаниеСтажевыхПоказателей);
	КонецЕсли;
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКТаблице);
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, МассивРеквизитов, МассивИменРеквизитовФормы);
	
	Если ПараметрыВызова.ТабличнаяЧастьВОбъекте Тогда
		ТЧЕжегодныеОтпуска = Форма.Объект[ПараметрыВызова.ИмяТаблицы];
	Иначе
		ТЧЕжегодныеОтпуска = Форма[ПараметрыВызова.ИмяТаблицы];
	КонецЕсли; 
	
	Если ПараметрыВызова.ЗаполнятьРеквизитыПоСотруднику Тогда
		ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ТЧЕжегодныеОтпуска, ПараметрыВызова.Сотрудник, ПараметрыВызова.ДатаСреза);
		
		// Добавляем элементы формы
		ПолеОписаниеСтажевыхПоказателей = Форма.Элементы.Найти(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей");
		Если ПолеОписаниеСтажевыхПоказателей = Неопределено Тогда
			ПолеОписаниеСтажевыхПоказателей = Форма.Элементы.Добавить(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей", Тип("ПолеФормы"), Форма.Элементы["ЕжегодныеОтпускаГруппаВидОтпуска"]);
			ПолеОписаниеСтажевыхПоказателей.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеОписаниеСтажевыхПоказателей.ТолькоПросмотр = Истина;
			ПолеОписаниеСтажевыхПоказателей.ОтображатьВШапке = Ложь;
			ПолеОписаниеСтажевыхПоказателей.Ширина = 11;
			ПолеОписаниеСтажевыхПоказателей.РастягиватьПоГоризонтали = Истина;
			ПолеОписаниеСтажевыхПоказателей.ГиперссылкаЯчейки = Истина;
			ПолеОписаниеСтажевыхПоказателей.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			ПолеОписаниеСтажевыхПоказателей.ПутьКДанным = ПутьКТаблице + ".ОписаниеСтажевыхПоказателей";
		КонецЕсли;
		
		// Добавляем условное оформление
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);	
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОтпускЗависитОтСтажа" );
		ЭлементОтбора.ПравоеЗначение = Ложь;
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВызова.ИмяТаблицы + "ОписаниеСтажевыхПоказателей");
		
	Иначе
		ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ТЧЕжегодныеОтпуска);
	КонецЕсли;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКТаблице + ".ОтпускЗависитОтСтажа" );
	ЭлементОтбора.ПравоеЗначение = Истина;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПараметрыВызова.ИмяТаблицы + "КоличествоДнейВГод");
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСтажевыхРеквизитовВСтроке(СтрокаОтпуска, Сотрудник = Неопределено, ДатаСреза = Неопределено) Экспорт

	ДатаСреза = ?(ДатаСреза = Неопределено, Дата(1,1,1), ДатаСреза);
	
	СтрокаОтпуска.ОтпускЗависитОтСтажа = ЭтоСтажевыйОтпуск(СтрокаОтпуска.ВидЕжегодногоОтпуска);
	Если СтрокаОтпуска.ОтпускЗависитОтСтажа Тогда
		
		СтрокаОтпуска.КоличествоДнейВГод = 0;
		
		Если Сотрудник = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// Получим стажи сотрудника.
		ВидСтажаОтпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОтпуска.ВидЕжегодногоОтпуска, "ВидСтажа");
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		СтрокаСотрудник = ТаблицаСотрудников.Добавить();
		СтрокаСотрудник.Сотрудник = Сотрудник;
		СтрокаСотрудник.Период = ДатаСреза;
		
		СтажиСотрудников = КадровыйУчетРасширенный.СведенияОСтажахСотрудников(ТаблицаСотрудников);
		СтажиСотрудника = СтажиСотрудников.Получить(Сотрудник);
		НужныйОтпускуСтажСотрудника = СтажиСотрудника.Получить(ВидСтажаОтпуска);
		
		СтрокаОтпуска.ОписаниеСтажевыхПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставленияКомандыВводаСтажейСотрудника(
						СтажиСотрудника, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидСтажаОтпуска));
	Иначе
						
		СтрокаОтпуска.ОписаниеСтажевыхПоказателей = "";
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВторичныеРеквизитыСтажевыхОтпусков(ДанныеТЧФормы, Сотрудник = Неопределено, ДатаСреза = Неопределено) Экспорт
	
	Для каждого ПравоНаОтпуск Из ДанныеТЧФормы Цикл
		ЗаполнитьЗначенияСтажевыхРеквизитовВСтроке(ПравоНаОтпуск, Сотрудник, ДатаСреза);
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти 

#Область ДвиженияСтажевыхОтпусков

// Процедура проверяет взаимосвязи вторичных стажевых движений по регистру сведений ПоложенныеВидыЕжегодныхОтпусков.
// В случае необходимости - корректирует записи прошлых документов.
//
Процедура ОчиститьПредыдущиеДвиженияСтажевыхОтпусков(Источник, Отказ, Замещение) Экспорт

	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	// Запись отдельного набора в котором не нужно проводить обработку
	// начислений зависящих от стажа.
	Если Источник.ДополнительныеСвойства.Свойство("НеДобавлятьВторичныеЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли; 
	
	// Выбираем движения отпусков, зависящих от стажа.
	МенеджерВременныхТаблицТекущий = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицТекущий;
	
	СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(Источник, МенеджерВременныхТаблицТекущий);
	
	// Выбираем движения, которые "наползают" на Источник.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.РегистраторПредыдущий КАК Регистратор
		|ПОМЕСТИТЬ ВТОбновляемыеРегистраторы
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.Добавляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа.РегистраторПредыдущий ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор КАК Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновляемыеРегистраторы КАК ВТОбновляемыеРегистраторы
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = ВТОбновляемыеРегистраторы.Регистратор
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.Регистратор = СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий
		|			И ПоложенныеВидыЕжегодныхОтпусков.Сотрудник = СведенияОДвиженииПоложенныхОтпусков.Сотрудник
		|			И ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска
		|			И НАЧАЛОПЕРИОДА(ПоложенныеВидыЕжегодныхОтпусков.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(СведенияОДвиженииПоложенныхОтпусков.Период, ДЕНЬ)
		|			И (ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись)
		|			И (СведенияОДвиженииПоложенныхОтпусков.Добавляется)
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусков.Период ЕСТЬ NULL 
		|ИТОГИ ПО
		|	Регистратор";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоРегистраторам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоРегистраторам.Следующий() Цикл
			
			Набор = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
			
			ВыборкаПоЗаписям = ВыборкаПоРегистраторам.Выбрать();
			Пока ВыборкаПоЗаписям.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Набор.Добавить(), ВыборкаПоЗаписям);
			КонецЦикла; 
			
			Набор.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
			Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;

	Источник.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблицТекущий);
	
КонецПроцедуры

// Процедура дополняет стажевые движения вторичными стажевыми записями.
//
Процедура ДополнитьДвиженияСтажевыхОтпусков(Источник, Отказ, Замещение) Экспорт

	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	
	// Запись набора в служебных целях.
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
		Возврат;
	КонецЕсли;
	// Запись отдельного набора в котором не нужно проводить обработку
	// отпусков зависящих от стажа.
	Если Источник.ДополнительныеСвойства.Свойство("НеДобавлятьВторичныеЗаписи") Тогда
		Возврат;
	КонецЕсли; 
	
	// МенеджерВременныхТаблиц должен быть сформирован ПередЗаписью
	Если НЕ Источник.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблиц") Тогда
		Возврат;
	КонецЕсли;
	МенеджерВременныхТаблицТекущий = Источник.ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Источник.ДополнительныеСвойства.Удалить("МенеджерВременныхТаблиц");
	
	// В случае, если есть зависящие от стажа отпуска, генерируем вторичные стажевые записи.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицТекущий;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	НЕ СведенияОДвиженииПоложенныхОтпусков.Удаляется";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Если ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(Источник, МенеджерВременныхТаблицТекущий) Тогда
			Источник.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
			Источник.ОбменДанными.Загрузка = Истина;
			Источник.Записать();
		КонецЕсли; 
	КонецЕсли;

	// В случае если движения удаляются - надо "продлить" вторичные движения предыдущего регистратора.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий КАК Регистратор
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	СведенияОДвиженииПоложенныхОтпусков.Удаляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусков.РегистраторПредыдущий ЕСТЬ NULL";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			// Получим набор записей предыдущего регистратора.
			Набор = РегистрыСведений.ПоложенныеВидыЕжегодныхОтпусков.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Набор.Прочитать();
			// Генерируем для него вторичные стажевые записи.
			МенеджерВременныхТаблицПоНаборуЗаписей = Новый МенеджерВременныхТаблиц;
			СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(Набор, МенеджерВременныхТаблицПоНаборуЗаписей);
			Если ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(Набор, МенеджерВременныхТаблицПоНаборуЗаписей) Тогда
				Набор.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
				Набор.ДополнительныеСвойства.Вставить("НеДобавлятьВторичныеЗаписи", Истина);
				Набор.Записать();
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа(НаборЗаписей, МенеджерВременныхТаблиц) Экспорт

	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	ЗаписываемыйНабор = НаборЗаписей.Выгрузить();
	
	// Устанавливаем время.
	ВремяРегистрацииДокумента = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	Если ВремяРегистрацииДокумента = Неопределено Тогда 
		МассивДат = ЗаписываемыйНабор.ВыгрузитьКолонку("Период");
		ВремяРегистрацииДокумента = ЗарплатаКадрыРасширенный.ЗначенияВремениРегистрацииДокумента(Регистратор, МассивДат);
	КонецЕсли;
	Для Каждого СтрокаДвижений Из ЗаписываемыйНабор Цикл 
		СтрокаДвижений.Период = ВремяРегистрацииДокумента.Получить(НачалоДня(СтрокаДвижений.Период));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	СоздатьВТВидыОтпусковЗависящиеОтСтажа(Запрос.МенеджерВременныхТаблиц);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ЗаписываемыйНабор", ЗаписываемыйНабор);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписываемыйНабор.Период,
		|	&Регистратор КАК Регистратор,
		|	ЗаписываемыйНабор.Сотрудник,
		|	ЗаписываемыйНабор.ВидЕжегодногоОтпуска,
		|	ЗаписываемыйНабор.Используется,
		|	ЗаписываемыйНабор.КоличествоДнейВГод,
		|	ЗаписываемыйНабор.ДействуетДо,
		|	ЗаписываемыйНабор.ИспользуетсяПоОкончании,
		|	ЗаписываемыйНабор.КоличествоДнейВГодПоОкончании,
		|	ЗаписываемыйНабор.ПересчетНеТребуется,
		|	ЗаписываемыйНабор.ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТЗаписываемыйНабор
		|ИЗ
		|	&ЗаписываемыйНабор КАК ЗаписываемыйНабор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоложенныеВидыЕжегодныхОтпусков.Период,
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор,
		|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
		|	ПоложенныеВидыЕжегодныхОтпусков.ДействуетДо,
		|	ПоложенныеВидыЕжегодныхОтпусков.ИспользуетсяПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГодПоОкончании,
		|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
		|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись
		|ПОМЕСТИТЬ ВТТекущийНабор
		|ИЗ
		|	РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыОтпусковЗависящиеОтСтажа КАК ВидыОтпусковЗависящиеОтСтажа
		|		ПО ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска = ВидыОтпусковЗависящиеОтСтажа.ВидЕжегодногоОтпуска
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТекущийНабор.Период, ЗаписываемыйНабор.Период) КАК Период,
		|	ЕСТЬNULL(ТекущийНабор.Регистратор, ЗаписываемыйНабор.Регистратор) КАК Регистратор,
		|	ЕСТЬNULL(ТекущийНабор.Сотрудник, ЗаписываемыйНабор.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(ТекущийНабор.ВидЕжегодногоОтпуска, ЗаписываемыйНабор.ВидЕжегодногоОтпуска) КАК ВидЕжегодногоОтпуска,
		|	ЕСТЬNULL(ТекущийНабор.Используется, ЗаписываемыйНабор.Используется) КАК Используется,
		|	ЕСТЬNULL(ТекущийНабор.КоличествоДнейВГод, ЗаписываемыйНабор.КоличествоДнейВГод) КАК КоличествоДнейВГод,
		|	ЕСТЬNULL(ТекущийНабор.ДействуетДо, ЗаписываемыйНабор.ДействуетДо) КАК ДействуетДо,
		|	ЕСТЬNULL(ТекущийНабор.ИспользуетсяПоОкончании, ЗаписываемыйНабор.ИспользуетсяПоОкончании) КАК ИспользуетсяПоОкончании,
		|	ЕСТЬNULL(ТекущийНабор.КоличествоДнейВГодПоОкончании, ЗаписываемыйНабор.КоличествоДнейВГодПоОкончании) КАК КоличествоДнейВГодПоОкончании,
		|	ЕСТЬNULL(ЗаписываемыйНабор.ПересчетНеТребуется, ЛОЖЬ) КАК ПересчетНеТребуется,
		|	ЕСТЬNULL(ТекущийНабор.ВторичнаяЗапись, ЗаписываемыйНабор.ВторичнаяЗапись) КАК ВторичнаяЗапись,
		|	ВЫБОР
		|		КОГДА ТекущийНабор.Период ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Добавляется,
		|	ВЫБОР
		|		КОГДА ЗаписываемыйНабор.Период ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удаляется
		|ПОМЕСТИТЬ ВТЗаписиСОтпускамиЗависящимиОтСтажа
		|ИЗ
		|	ВТТекущийНабор КАК ТекущийНабор
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТЗаписываемыйНабор КАК ЗаписываемыйНабор
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыОтпусковЗависящиеОтСтажа КАК ВидыОтпусковЗависящиеОтСтажа
		|			ПО ЗаписываемыйНабор.ВидЕжегодногоОтпуска = ВидыОтпусковЗависящиеОтСтажа.ВидЕжегодногоОтпуска
		|		ПО ТекущийНабор.Период = ЗаписываемыйНабор.Период
		|			И ТекущийНабор.Сотрудник = ЗаписываемыйНабор.Сотрудник
		|			И ТекущийНабор.ВидЕжегодногоОтпуска = ЗаписываемыйНабор.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска,
		|	МАКСИМУМ(ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период) КАК ПериодПредыдущегоРегистратора,
		|	МИНИМУМ(ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период) КАК ПериодПоследующегоРегистратора
		|ПОМЕСТИТЬ ВТПериодыРегистрации
		|ИЗ
		|	ВТЗаписиСОтпускамиЗависящимиОтСтажа КАК ЗаписиСОтпускамиЗависящимиОтСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПредыдущие
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.ВидЕжегодногоОтпуска
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Регистратор <> ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Регистратор
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Период > ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПоследующие
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВидЕжегодногоОтпуска
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Регистратор <> ПоложенныеВидыЕжегодныхОтпусковПоследующие.Регистратор
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Период < ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период
		|			И (НЕ ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВторичнаяЗапись)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Период,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Используется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.КоличествоДнейВГод,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ДействуетДо,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ИспользуетсяПоОкончании,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.КоличествоДнейВГодПоОкончании,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ПересчетНеТребуется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.ВторичнаяЗапись,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Добавляется,
		|	ЗаписиСОтпускамиЗависящимиОтСтажа.Удаляется,
		|	ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Регистратор КАК РегистраторПредыдущий,
		|	ПериодыРегистрации.ПериодПоследующегоРегистратора,
		|	ПоложенныеВидыЕжегодныхОтпусковПоследующие.Регистратор КАК РегистраторПоследующий
		|ПОМЕСТИТЬ ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа
		|ИЗ
		|	ВТЗаписиСОтпускамиЗависящимиОтСтажа КАК ЗаписиСОтпускамиЗависящимиОтСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРегистрации КАК ПериодыРегистрации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПредыдущие
		|			ПО ПериодыРегистрации.ПериодПредыдущегоРегистратора = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Период
		|				И ПериодыРегистрации.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.Сотрудник
		|				И ПериодыРегистрации.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПредыдущие.ВидЕжегодногоОтпуска
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПоложенныеВидыЕжегодныхОтпусков КАК ПоложенныеВидыЕжегодныхОтпусковПоследующие
		|			ПО ПериодыРегистрации.ПериодПоследующегоРегистратора = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Период
		|				И ПериодыРегистрации.Сотрудник = ПоложенныеВидыЕжегодныхОтпусковПоследующие.Сотрудник
		|				И ПериодыРегистрации.ВидЕжегодногоОтпуска = ПоложенныеВидыЕжегодныхОтпусковПоследующие.ВидЕжегодногоОтпуска
		|		ПО ЗаписиСОтпускамиЗависящимиОтСтажа.Период = ПериодыРегистрации.Период
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.Сотрудник = ПериодыРегистрации.Сотрудник
		|			И ЗаписиСОтпускамиЗависящимиОтСтажа.ВидЕжегодногоОтпуска = ПериодыРегистрации.ВидЕжегодногоОтпуска";

	Запрос.Выполнить();

КонецПроцедуры

// Дополняет набор движений по регистру ПоложенныеВидыЕжегодныхОтпусков вторичными стажевыми записями.
//
Функция ДополнитьНаборЗаписейПоложенныеВидыЕжегодныхОтпусковВторичнымиЗаписями(НаборЗаписей, МенеджерВременныхТаблиц) Экспорт
	
	ТаблицаНабора = НаборЗаписей.Выгрузить();
	ПерезаполнитьНабор = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(СведенияОДвиженииПоложенныхОтпусков.Период, ДЕНЬ) КАК НачалоПериода,
		|	СведенияОДвиженииПоложенныхОтпусков.Сотрудник,
		|	СведенияОДвиженииПоложенныхОтпусков.ВидЕжегодногоОтпуска,
		|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(СведенияОДвиженииПоложенныхОтпусков.ПериодПоследующегоРегистратора, &ТекущаяДата), ДЕНЬ) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТДополняемыеОтпуска
		|ИЗ
		|	ВТСведенияОДвиженииПоложенныхОтпусковЗависящихОтСтажа КАК СведенияОДвиженииПоложенныхОтпусков
		|ГДЕ
		|	НЕ СведенияОДвиженииПоложенныхОтпусков.Удаляется
		|	И НЕ СведенияОДвиженииПоложенныхОтпусков.ПересчетНеТребуется";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());	
	Запрос.Выполнить();
	
	ТаблицаДополненныхСтажевыхЗаписей = ТаблицаДополненныхСтажевыхЗаписей(МенеджерВременныхТаблиц, "ВТДополняемыеОтпуска");
	Если ТаблицаДополненныхСтажевыхЗаписей.Количество() > 0 Тогда
		Если ДополнитьТаблицуНабораЗаписейТаблицейДополненныхСтажевыхЗаписей(ТаблицаНабора, ТаблицаДополненныхСтажевыхЗаписей) Тогда
			ПерезаполнитьНабор = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПерезаполнитьНабор Тогда
		НаборЗаписей.Загрузить(ТаблицаНабора);
	КонецЕсли; 
	
	Возврат ПерезаполнитьНабор;
	
КонецФункции

Функция ТаблицаДополненныхСтажевыхЗаписей(МенеджерВременныхТаблиц, ИмяВТДополняемыеОтпуска)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Приводим записи шкалы отпусков к нужному виду - с отметками следующих показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТВидыОтпусков
		|ИЗ
		|	ВТДополняемыеОтпуска КАК ВТДополняемыеОтпуска";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополняемыеОтпуска", ИмяВТДополняемыеОтпуска);	
	Запрос.Выполнить();
		
	СоздатьВТШкалыСтажевыхОтпусковСоСледующимиПоказателями(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТДополняемыеОтпуска.Сотрудник,
		|	ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВидСтажа,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВерхняяГраницаИнтервалаСтажа,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.КоличествоДнейВГод,
		|	ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.КоличествоДнейВГодСледующее
		|ПОМЕСТИТЬ ВТСотрудникиИШкалаСтажа
		|ИЗ
		|	ВТДополняемыеОтпуска КАК ВТДополняемыеОтпуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями КАК ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями
		|		ПО ВТДополняемыеОтпуска.ВидЕжегодногоОтпуска = ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями.ВидЕжегодногоОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.НачалоПериода КАК Период,
		|	Сотрудники.ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДополняемыеОтпуска КАК Сотрудники";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДополняемыеОтпуска", ИмяВТДополняемыеОтпуска);	
	Запрос.Выполнить();
	
	КадровыйУчетРасширенный.СоздатьВТПериодыИзмененияСтажа(Запрос.МенеджерВременныхТаблиц);
	
	// Накладываем шкалу изменения стажей сотрудников на шкалу прав на отпуска.
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	ВТСотрудникиИШкалаСтажа.Сотрудник,
		|	ВТСотрудникиИШкалаСтажа.ВидЕжегодногоОтпуска,
		|	ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ВТСотрудникиИШкалаСтажа.КоличествоДнейВГодСледующее КАК КоличествоДнейВГод,
		|	МИНИМУМ(ВТПериодыИзмененияСтажа.ДатаСтажа) КАК ДатаСтажа
		|ПОМЕСТИТЬ ВТПериодыСтажаСотрудниковСПоказателями
		|ИЗ
		|	ВТСотрудникиИШкалаСтажа КАК ВТСотрудникиИШкалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИзмененияСтажа КАК ВТПериодыИзмененияСтажа
		|		ПО ВТСотрудникиИШкалаСтажа.Сотрудник = ВТПериодыИзмененияСтажа.Сотрудник
		|			И ВТСотрудникиИШкалаСтажа.ВидСтажа = ВТПериодыИзмененияСтажа.ВидСтажа
		|			И ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа <= ВТПериодыИзмененияСтажа.ЗначениеСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСотрудникиИШкалаСтажа.Сотрудник,
		|	ВТСотрудникиИШкалаСтажа.ВидЕжегодногоОтпуска,
		|	ВТСотрудникиИШкалаСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	ВТСотрудникиИШкалаСтажа.КоличествоДнейВГодСледующее
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа,
		|	МАКСИМУМ(ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа) КАК ВерхняяГраницаИнтервалаСтажа
		|ПОМЕСТИТЬ ВТУказателиМаксимальныхПериодов
		|ИЗ
		|	ВТПериодыСтажаСотрудниковСПоказателями КАК ВТПериодыСтажаСотрудниковСПоказателями
		|ГДЕ
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа КАК Период,
		|	ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ВидЕжегодногоОтпуска,
		|	ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа,
		|	ВТПериодыСтажаСотрудниковСПоказателями.КоличествоДнейВГод
		|ИЗ
		|	ВТУказателиМаксимальныхПериодов КАК ВТУказателиМаксимальныхПериодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыСтажаСотрудниковСПоказателями КАК ВТПериодыСтажаСотрудниковСПоказателями
		|		ПО ВТУказателиМаксимальныхПериодов.Сотрудник = ВТПериодыСтажаСотрудниковСПоказателями.Сотрудник
		|			И ВТУказателиМаксимальныхПериодов.ВерхняяГраницаИнтервалаСтажа = ВТПериодыСтажаСотрудниковСПоказателями.ВерхняяГраницаИнтервалаСтажа
		|			И ВТУказателиМаксимальныхПериодов.ДатаСтажа = ВТПериодыСтажаСотрудниковСПоказателями.ДатаСтажа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция ДополнитьТаблицуНабораЗаписейТаблицейДополненныхСтажевыхЗаписей(ТаблицаНабора, ТаблицаДополненныхСтажевыхЗаписей)
	
	// Нормализуем время, читаем сдвиг
	ТаблицаНабора.Колонки.Добавить("ДатаНачалаДня", Новый ОписаниеТипов("Дата"));
	Для каждого СтрокаТаблицы Из ТаблицаНабора Цикл
		СтрокаТаблицы.ДатаНачалаДня = НачалоДня(СтрокаТаблицы.Период);
	КонецЦикла; 
	
	ТаблицаДополненныхСтажевыхЗаписей.Сортировать("Сотрудник, Период, ВидЕжегодногоОтпуска");
	ПерезаполнитьНабор = Ложь;
	
	Для каждого СтрокаТаблицы Из ТаблицаДополненныхСтажевыхЗаписей Цикл
		
		НайденныеСтрокиОтпусков = ТаблицаНабора.НайтиСтроки(Новый Структура("Сотрудник, ДатаНачалаДня, ВидЕжегодногоОтпуска", СтрокаТаблицы.Сотрудник, НачалоДня(СтрокаТаблицы.Период), СтрокаТаблицы.ВидЕжегодногоОтпуска));
		Если НайденныеСтрокиОтпусков.Количество() > 0 Тогда
			СтрокаОтпуска = НайденныеСтрокиОтпусков[0];
			Если СтрокаОтпуска.КоличествоДнейВГод <> СтрокаТаблицы.КоличествоДнейВГод Тогда
				СтрокаОтпуска.КоличествоДнейВГод = СтрокаТаблицы.КоличествоДнейВГод;
				ПерезаполнитьНабор = Истина;
			КонецЕсли;
		Иначе
			// Ищем первичную запись
			НайденнаяПервичнаяЗапись = ТаблицаНабора.НайтиСтроки(Новый Структура("Сотрудник, ВидЕжегодногоОтпуска, ВторичнаяЗапись", СтрокаТаблицы.Сотрудник, СтрокаТаблицы.ВидЕжегодногоОтпуска, Ложь));
			Если НайденнаяПервичнаяЗапись.Количество() > 0 Тогда
				
				ПерезаполнитьНабор = Истина;
				НоваяСтрока = ТаблицаНабора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяПервичнаяЗапись[0]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ДатаНачалаДня = НачалоДня(НоваяСтрока.Период);
				НоваяСтрока.Период = НоваяСтрока.ДатаНачалаДня;
				НоваяСтрока.ВторичнаяЗапись = Истина;
				
				Если ЗначениеЗаполнено(НоваяСтрока.ДействуетДо)
					И НоваяСтрока.Период >= НоваяСтрока.ДействуетДо Тогда
					
					НоваяСтрока.ДействуетДо = '00010101';
					НоваяСтрока.КоличествоДнейВГодПоОкончании = 0;
					НоваяСтрока.ИспользуетсяПоОкончании = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ПерезаполнитьНабор;
		
КонецФункции

// Процедура формирует ВТ видов стажевых отпусков с развернутым представлением, необходимым для соединения с ВТПериодыИзмененияСтажа
// 
Процедура СоздатьВТШкалыСтажевыхОтпусковСоСледующимиПоказателями(МенеджерВременныхТаблиц, ИмяВТВидовОтпусков = "ВТВидыОтпусков") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Приводим записи шкалы отпусков к нужному виду - с отметками следующих показателей.
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтажевыеОтпуска.ВидЕжегодногоОтпуска
		|ПОМЕСТИТЬ ВТСтажевыеОтпуска
		|ИЗ
		|	ВТВидыОтпусков КАК СтажевыеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыОтпусковШкалаОценкиСтажа.Ссылка КАК ВидЕжегодногоОтпуска,
		|	ВЫБОР
		|		КОГДА ВидыОтпусковШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0
		|			ТОГДА 9999
		|		ИНАЧЕ ВидыОтпусковШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа
		|	КОНЕЦ КАК ВерхняяГраницаИнтервалаСтажа,
		|	ВидыОтпусковШкалаОценкиСтажа.КоличествоДнейВГод
		|ПОМЕСТИТЬ ВТИнтервалыСтажа
		|ИЗ
		|	Справочник.ВидыОтпусков.ШкалаОценкиСтажа КАК ВидыОтпусковШкалаОценкиСтажа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтажевыеОтпуска КАК СтажевыеОтпуска
		|		ПО ВидыОтпусковШкалаОценкиСтажа.Ссылка = СтажевыеОтпуска.ВидЕжегодногоОтпуска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СтажевыеОтпуска.ВидЕжегодногоОтпуска,
		|	0,
		|	0
		|ИЗ
		|	ВТСтажевыеОтпуска КАК СтажевыеОтпуска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИнтервалыСтажа.ВидЕжегодногоОтпуска,
		|	ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа,
		|	МИНИМУМ(ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа) КАК ВерхняяГраницаИнтервалаСтажаСледующая
		|ПОМЕСТИТЬ ВТИнтервалыСтажаСУказателямиСледующих
		|ИЗ
		|	ВТИнтервалыСтажа КАК ВТИнтервалыСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажаСледующие
		|		ПО ВТИнтервалыСтажа.ВидЕжегодногоОтпуска = ВТИнтервалыСтажаСледующие.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа < ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТИнтервалыСтажа.ВидЕжегодногоОтпуска,
		|	ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска,
		|	ВидыОтпусков.ВидСтажа,
		|	ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажа,
		|	ВТИнтервалыСтажа.КоличествоДнейВГод КАК КоличествоДнейВГод,
		|	ЕСТЬNULL(ВТИнтервалыСтажаСледующие.КоличествоДнейВГод, ВТИнтервалыСтажа.КоличествоДнейВГод) КАК КоличествоДнейВГодСледующее
		|ПОМЕСТИТЬ ВТШкалыСтажевыхОтпусковСоСледующимиПоказателями
		|ИЗ
		|	ВТИнтервалыСтажаСУказателямиСледующих КАК ВТИнтервалыСтажаСУказателямиСледующих
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажа
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВТИнтервалыСтажа.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажа = ВТИнтервалыСтажа.ВерхняяГраницаИнтервалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыСтажа КАК ВТИнтервалыСтажаСледующие
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВТИнтервалыСтажаСледующие.ВидЕжегодногоОтпуска
		|			И ВТИнтервалыСтажаСУказателямиСледующих.ВерхняяГраницаИнтервалаСтажаСледующая = ВТИнтервалыСтажаСледующие.ВерхняяГраницаИнтервалаСтажа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОтпусков КАК ВидыОтпусков
		|		ПО ВТИнтервалыСтажаСУказателямиСледующих.ВидЕжегодногоОтпуска = ВидыОтпусков.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалыСтажаСУказателямиСледующих
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИнтервалыСтажа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСтажевыеОтпуска";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВидыОтпусков", ИмяВТВидовОтпусков);		
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ДополнитьТаблицуСобытийРабочимиГодами(ТаблицаСобытий, РабочиеГодаПоСотруднику)
	
	Для каждого Событие Из ТаблицаСобытий Цикл
		МассивРабочихЛет = Новый Массив;
		Для каждого РабочийГод Из РабочиеГодаПоСотруднику Цикл
			Если РабочийГод.ДатаНачала <= Событие.ДатаСобытия И Событие.ДатаСобытия <= РабочийГод.ДатаОкончания Тогда
				МассивРабочихЛет.Добавить(РабочийГод);
			КонецЕсли;
		КонецЦикла; 
		Событие.РабочиеГодаОтпусков = МассивРабочихЛет;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#КонецОбласти

Процедура ДополнитьТаблицуОтпусков(ТаблицаДополнение, ТаблицаОтпусков = Неопределено)

	Если ТаблицаОтпусков = Неопределено Тогда
		ТаблицаОтпусков = Новый ТаблицаЗначений;
		ТаблицаОтпусков.Колонки.Добавить("ВидОтпуска", Новый ОписаниеТипов("СправочникСсылка.ВидыОтпусков"));
		ТаблицаОтпусков.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	КонецЕсли;
	
	Для каждого СтрокаДополнения Из ТаблицаДополнение Цикл
		Если ТаблицаОтпусков.Найти(СтрокаДополнения.ВидЕжегодногоОтпуска, "ВидОтпуска") = Неопределено Тогда
			НовыйОтпуск = ТаблицаОтпусков.Добавить();
			НовыйОтпуск.ВидОтпуска = СтрокаДополнения.ВидЕжегодногоОтпуска;
			НовыйОтпуск.Приоритет = ?(СтрокаДополнения.ВидЕжегодногоОтпуска = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыОтпусков.Основной"),1,2);
		КонецЕсли;
	КонецЦикла; 

	ТаблицаОтпусков.Сортировать("Приоритет,ВидОтпуска");
	
КонецПроцедуры

Функция НайтиВидОтпускаВМассивеСтруктур(МассивСтруктур, ВидОтпуска)

	ВозвращаемыйМассив = Новый Массив;
	
	Для каждого ЭлементСтруктуры Из МассивСтруктур Цикл
		Если ВидОтпуска = ЭлементСтруктуры.ВидЕжегодногоОтпуска Тогда
			ВозвращаемыйМассив.Добавить(ЭлементСтруктуры);
		КонецЕсли;
	КонецЦикла; 
	
	Если ВозвращаемыйМассив.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВозвращаемыйМассив;
	КонецЕсли;

КонецФункции

Процедура ОбновитьРазмерПоОкончанииДляЗависимыхОтСтажа(ТаблицаПравЗависящихОтСтажа, СтрокиПравЗависящихОтСтажа)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПравЗависящихОтСтажа.НачалоПериода,
		|	ТаблицаПравЗависящихОтСтажа.Сотрудник,
		|	ТаблицаПравЗависящихОтСтажа.ВидЕжегодногоОтпуска,
		|	ТаблицаПравЗависящихОтСтажа.ОкончаниеПериода
		|ПОМЕСТИТЬ ВТДополняемыеОтпуска
		|ИЗ
		|	&ТаблицаПравЗависящихОтСтажа КАК ТаблицаПравЗависящихОтСтажа";
	Запрос.УстановитьПараметр("ТаблицаПравЗависящихОтСтажа", ТаблицаПравЗависящихОтСтажа);	
	Запрос.Выполнить();
	
	ТаблицаДополненныхСтажевыхЗаписей = ТаблицаДополненныхСтажевыхЗаписей(Запрос.МенеджерВременныхТаблиц, "ВТДополняемыеОтпуска");
	
	Если ТаблицаДополненныхСтажевыхЗаписей <> Неопределено Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаДополненныхСтажевыхЗаписей.Сотрудник,
			|	ТаблицаДополненныхСтажевыхЗаписей.ВидЕжегодногоОтпуска,
			|	ТаблицаДополненныхСтажевыхЗаписей.КоличествоДнейВГод
			|ПОМЕСТИТЬ ВТДвижения
			|ИЗ
			|	&ТаблицаДополненныхСтажевыхЗаписей КАК ТаблицаДополненныхСтажевыхЗаписей
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТДвижения.Сотрудник,
			|	ВТДвижения.ВидЕжегодногоОтпуска,
			|	МАКСИМУМ(ВТДвижения.КоличествоДнейВГод) КАК КоличествоДнейВГод
			|ИЗ
			|	ВТДвижения КАК ВТДвижения
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТДвижения.Сотрудник,
			|	ВТДвижения.ВидЕжегодногоОтпуска";
		Запрос.УстановитьПараметр("ТаблицаДополненныхСтажевыхЗаписей", ТаблицаДополненныхСтажевыхЗаписей);	
		ТаблицаЗначенийПоОкончании = Запрос.Выполнить().Выгрузить();
	
		Для каждого СтрокаНабора Из СтрокиПравЗависящихОтСтажа Цикл
			НайденныеСтроки = ТаблицаЗначенийПоОкончании.НайтиСтроки(Новый Структура("Сотрудник,ВидЕжегодногоОтпуска", СтрокаНабора.Сотрудник, СтрокаНабора.ВидЕжегодногоОтпуска));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНабора.КоличествоДнейВГодПоОкончании = НайденныеСтроки[0].КоличествоДнейВГод;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу с правами сотрудников на ежегодные отпуска.
// Создает ВТ со следующими колонками:
// 		Сотрудник
// 		ВидЕжегодногоОтпуска
// 		КоличествоДнейВГод
// Параметры:
// 		МенеджерВременныхТаблиц
// 		ОписаниеФильтра
//			- Таблица значений, с колонками совпадающими с измерениями регистра ПоложенныеВидыЕжегодныхОтпусков.
//			- Структура - см. функцию ОписаниеФильтраДляСоздатьВТИмяРегистра.
// 		РегистраторСсылка - исключаемый регистратор
// 		ИмяВТ - имя создаваемой временной таблицы
//
Процедура СоздатьВТПоложенныеВидыЕжегодныхОтпусков(МенеджерВременныхТаблиц, Знач ОписаниеФильтра, РегистраторСсылка = Неопределено, ТолькоАктуальные = Истина, ИмяВТ = "ВТПоложенныеВидыЕжегодныхОтпусков") Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТипЗнч(ОписаниеФильтра) = Тип("ТаблицаЗначений") Тогда
		ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеФильтра);
	КонецЕсли;
	
	// Формируем ВТПоложенныеВидыЕжегодныхОтпусковСрезПоследних.
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Истина;
	Если РегистраторСсылка <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", РегистраторСсылка);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПоложенныеВидыЕжегодныхОтпусков",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоложенныеВидыЕжегодныхОтпусков.Период,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПериодЗаписи,
	|	ПоложенныеВидыЕжегодныхОтпусков.Сотрудник,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВидЕжегодногоОтпуска,
	|	ПоложенныеВидыЕжегодныхОтпусков.КоличествоДнейВГод,
	|	ПоложенныеВидыЕжегодныхОтпусков.ВторичнаяЗапись,
	|	ПоложенныеВидыЕжегодныхОтпусков.ПересчетНеТребуется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Используется,
	|	ПоложенныеВидыЕжегодныхОтпусков.Регистратор
	|ПОМЕСТИТЬ ВТПоложенныеВидыЕжегодныхОтпусков
	|ИЗ
	|	ВТПоложенныеВидыЕжегодныхОтпусковСрезПоследних КАК ПоложенныеВидыЕжегодныхОтпусков";
	
	Если ТолькоАктуальные Тогда
		Запрос.Текст = Запрос.Текст +
		"
		|ГДЕ
		|	ПоложенныеВидыЕжегодныхОтпусков.Используется";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПоложенныеВидыЕжегодныхОтпусков", ИмяВТ);
	Запрос.Выполнить();

КонецПроцедуры

// Удаляет записи о правах на ежегодный отпуск, у которых количество дней не меняется по сравнению с
// предыдущей записью.
Процедура УдалитьДублиПрав(МассивПрав)

	Если МассивПрав.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущееПраво = МассивПрав[0];
	ПраваНаОтпускДляУдаления	= Новый Массив;
	
	Для Каждого ПравоНаОтпуск Из МассивПрав Цикл
		Если МассивПрав.Найти(ПравоНаОтпуск) = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ПредыдущееПраво.ВидЕжегодногоОтпуска <> ПравоНаОтпуск.ВидЕжегодногоОтпуска Тогда
			Продолжить;
		КонецЕсли;
		Если ПравоНаОтпуск.КоличествоДнейОтпускаВГод = ПредыдущееПраво.КоличествоДнейОтпускаВГод Тогда
			ПраваНаОтпускДляУдаления.Добавить(ПредыдущееПраво);
		КонецЕсли;
		ПредыдущееПраво = ПравоНаОтпуск;
	КонецЦикла;
	
	Для Каждого ПравоНаОтпуск Из ПраваНаОтпускДляУдаления Цикл
		МассивПрав.Удалить(МассивПрав.Найти(ПравоНаОтпуск));
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
